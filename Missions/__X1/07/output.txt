// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 8166 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 16499 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 16499 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 16499 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16499 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16499 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16499 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 16499 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 16499 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 16499 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 16499 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 16499 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 16499 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 55551 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usCratesCollector := [ ] ;
2620: LD_ADDR_EXP 35
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 3 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 3
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2695
// begin PrepareApemanEngineer ( ) ;
2643: CALL 50379 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_EXP 35
2656: PPUSH
2657: CALL_OW 44
2661: PPUSH
2662: CALL 54190 0 2
2666: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2667: LD_EXP 35
2671: PPUSH
2672: CALL 58687 0 1
2676: PPUSH
2677: LD_INT 81
2679: PPUSH
2680: LD_INT 142
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// end ;
2693: GO 2640
2695: POP
2696: POP
// InitHc ;
2697: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_INT 21
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: FOR_IN
2722: IFFALSE 2759
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 7
2734: PUSH
2735: LD_INT 8
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PUSH
2747: LD_OWVAR 67
2751: ARRAY
2752: PPUSH
2753: CALL_OW 241
2757: GO 2721
2759: POP
2760: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 32
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: FOR_IN
2782: IFFALSE 2872
// begin if GetBWeapon ( i ) = us_radar then
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 269
2793: PUSH
2794: LD_INT 11
2796: EQUAL
2797: IFFALSE 2822
// begin uc_nation := 0 ;
2799: LD_ADDR_OWVAR 21
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2807: LD_INT 0
2809: PPUSH
2810: LD_INT 16
2812: PPUSH
2813: LD_INT 2
2815: PPUSH
2816: CALL_OW 380
// end else
2820: GO 2856
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2822: LD_INT 0
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 5
2830: PUSH
2831: LD_INT 6
2833: PUSH
2834: LD_INT 7
2836: PUSH
2837: LD_INT 8
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PPUSH
2852: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2856: CALL_OW 44
2860: PPUSH
2861: LD_VAR 0 2
2865: PPUSH
2866: CALL_OW 52
// end ;
2870: GO 2781
2872: POP
2873: POP
// b := HexInfo ( 74 , 120 ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 74
2881: PPUSH
2882: LD_INT 120
2884: PPUSH
2885: CALL_OW 428
2889: ST_TO_ADDR
// uc_nation := 1 ;
2890: LD_ADDR_OWVAR 21
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2898: LD_ADDR_VAR 0 2
2902: PUSH
2903: DOUBLE
2904: LD_INT 1
2906: DEC
2907: ST_TO_ADDR
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 3
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: PUSH
2932: FOR_TO
2933: IFFALSE 2985
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 6
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: LD_INT 8
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_OWVAR 67
2963: ARRAY
2964: PPUSH
2965: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2969: CALL_OW 44
2973: PPUSH
2974: LD_VAR 0 3
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2932
2985: POP
2986: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2987: LD_VAR 0 3
2991: PPUSH
2992: CALL_OW 313
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: CALL_OW 336
// for i := 1 to 6 do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 6
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3068
// begin PrepareHuman ( false , 4 , 6 ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 4
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3033: CALL_OW 44
3037: PPUSH
3038: LD_INT 32
3040: PUSH
3041: LD_INT 33
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_VAR 0 2
3052: PUSH
3053: LD_INT 2
3055: MOD
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: ARRAY
3061: PPUSH
3062: CALL_OW 52
// end ;
3066: GO 3017
3068: POP
3069: POP
// for i := 1 to 3 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 3
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3113
// begin PrepareHuman ( false , 3 , 6 ) ;
3086: LD_INT 0
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 6
3094: PPUSH
3095: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3099: CALL_OW 44
3103: PPUSH
3104: LD_INT 25
3106: PPUSH
3107: CALL_OW 52
// end ;
3111: GO 3083
3113: POP
3114: POP
// for i := 1 to 3 do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: DOUBLE
3121: LD_INT 1
3123: DEC
3124: ST_TO_ADDR
3125: LD_INT 3
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3187
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3131: LD_INT 0
3133: PPUSH
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 6
3139: PUSH
3140: LD_INT 7
3142: PUSH
3143: LD_INT 7
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PPUSH
3161: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3165: CALL_OW 44
3169: PPUSH
3170: LD_INT 78
3172: PPUSH
3173: LD_INT 130
3175: PPUSH
3176: CALL_OW 428
3180: PPUSH
3181: CALL_OW 52
// end ;
3185: GO 3128
3187: POP
3188: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 1
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_OWVAR 67
3221: ARRAY
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3311
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3226: LD_INT 2
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 13
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 21339 0 5
// veh := CreateVehicle ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3267: LD_VAR 0 4
3271: PPUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 0
3277: PPUSH
3278: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 6
3290: PPUSH
3291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3295: CALL_OW 44
3299: PPUSH
3300: LD_VAR 0 4
3304: PPUSH
3305: CALL_OW 52
// end ;
3309: GO 3223
3311: POP
3312: POP
// InitHc ;
3313: CALL_OW 19
// hc_gallery := sandar ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING sandar
3324: ST_TO_ADDR
// hc_face_number := 38 ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_INT 38
3332: ST_TO_ADDR
// hc_name := Doug Callahan ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Doug Callahan
3340: ST_TO_ADDR
// hc_class := class_engineer ;
3341: LD_ADDR_OWVAR 28
3345: PUSH
3346: LD_INT 2
3348: ST_TO_ADDR
// hc_sex := sex_male ;
3349: LD_ADDR_OWVAR 27
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3357: LD_ADDR_OWVAR 29
3361: PUSH
3362: LD_INT 10
3364: PUSH
3365: LD_INT 11
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3372: LD_ADDR_OWVAR 30
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3395: LD_ADDR_OWVAR 31
3399: PUSH
3400: LD_INT 4
3402: PUSH
3403: LD_INT 6
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 1
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: ST_TO_ADDR
// usCommander := CreateHuman ;
3418: LD_ADDR_EXP 30
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3428: LD_EXP 30
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3440: LD_INT 2
3442: PPUSH
3443: LD_EXP 30
3447: PPUSH
3448: CALL_OW 471
// InitHC_All ( ) ;
3452: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 2
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: CALL 21339 0 5
// usCargo := CreateVehicle ;
3475: LD_ADDR_EXP 32
3479: PUSH
3480: CALL_OW 45
3484: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3485: LD_EXP 32
3489: PPUSH
3490: LD_INT 81
3492: PPUSH
3493: LD_INT 143
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: CALL_OW 48
// Connect ( usCargo ) ;
3503: LD_EXP 32
3507: PPUSH
3508: CALL 24807 0 1
// DoNotAttack ( 5 , usCargo ) ;
3512: LD_INT 5
3514: PPUSH
3515: LD_EXP 32
3519: PPUSH
3520: CALL_OW 471
// end ;
3524: LD_VAR 0 1
3528: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3529: LD_EXP 6
3533: PUSH
3534: LD_INT 25
3536: PPUSH
3537: CALL_OW 302
3541: AND
3542: PUSH
3543: LD_INT 25
3545: PPUSH
3546: CALL_OW 461
3550: PUSH
3551: LD_INT 2
3553: EQUAL
3554: AND
3555: IFFALSE 3712
3557: GO 3559
3559: DISABLE
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// begin enable ;
3565: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3566: LD_ADDR_VAR 0 1
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_INT 4
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 6
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: PUSH
3600: FOR_TO
3601: IFFALSE 3710
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3603: LD_ADDR_VAR 0 2
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3634: LD_VAR 0 2
3638: PUSH
3639: LD_INT 4
3641: EQUAL
3642: IFFALSE 3654
// weapon := us_heavy_gun else
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_INT 6
3651: ST_TO_ADDR
3652: GO 3685
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: LD_INT 5
3661: PUSH
3662: LD_INT 7
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 1
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 12
3683: ARRAY
3684: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3685: LD_INT 25
3687: PPUSH
3688: LD_VAR 0 2
3692: PPUSH
3693: LD_INT 1
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: CALL_OW 185
// end ;
3708: GO 3600
3710: POP
3711: POP
// end ;
3712: PPOPN 3
3714: END
// every 0 0$01 do var i , un , tmp ;
3715: GO 3717
3717: DISABLE
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
// begin if Difficulty < 2 then
3723: LD_OWVAR 67
3727: PUSH
3728: LD_INT 2
3730: LESS
3731: IFFALSE 3735
// exit ;
3733: GO 4018
// tmp := [ ] ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// for i := 1 to Difficulty do
3742: LD_ADDR_VAR 0 1
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_OWVAR 67
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3854
// begin uc_side := 4 ;
3760: LD_ADDR_OWVAR 20
3764: PUSH
3765: LD_INT 4
3767: ST_TO_ADDR
// uc_nation := nation_american ;
3768: LD_ADDR_OWVAR 21
3772: PUSH
3773: LD_INT 1
3775: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: LD_INT 6
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PPUSH
3803: CALL_OW 381
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 2
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: LD_VAR 0 2
3831: PPUSH
3832: CALL 54190 0 2
3836: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_INT 19
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// end ;
3852: GO 3757
3854: POP
3855: POP
// for i in tmp do
3856: LD_ADDR_VAR 0 1
3860: PUSH
3861: LD_VAR 0 3
3865: PUSH
3866: FOR_IN
3867: IFFALSE 3913
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3869: LD_VAR 0 1
3873: PPUSH
3874: LD_INT 54
3876: PPUSH
3877: LD_INT 51
3879: PPUSH
3880: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_INT 700
3891: PPUSH
3892: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_INT 35
3903: PPUSH
3904: LD_INT 6
3906: PPUSH
3907: CALL_OW 174
// end ;
3911: GO 3866
3913: POP
3914: POP
// repeat wait ( 7 7$00 ) ;
3915: LD_INT 14700
3917: PPUSH
3918: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: LD_INT 50
3934: PUSH
3935: EMPTY
3936: LIST
3937: PPUSH
3938: CALL_OW 72
3942: ST_TO_ADDR
// if not tmp then
3943: LD_VAR 0 3
3947: NOT
3948: IFFALSE 3952
// exit ;
3950: GO 4018
// for i in tmp do
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4009
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: LD_INT 51
3975: PPUSH
3976: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_INT 700
3987: PPUSH
3988: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_INT 35
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: CALL_OW 174
// end ;
4007: GO 3962
4009: POP
4010: POP
// until not tmp ;
4011: LD_VAR 0 3
4015: NOT
4016: IFFALSE 3915
// end ;
4018: PPOPN 3
4020: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4021: LD_EXP 31
4025: PUSH
4026: LD_INT 4
4028: PUSH
4029: LD_INT 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_INT 6
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: GREATEREQUAL
4050: IFFALSE 4232
4052: GO 4054
4054: DISABLE
4055: LD_INT 0
4057: PPUSH
4058: PPUSH
// begin enable ;
4059: ENABLE
// tmp := usForces ;
4060: LD_ADDR_VAR 0 2
4064: PUSH
4065: LD_EXP 31
4069: ST_TO_ADDR
// usForces := [ ] ;
4070: LD_ADDR_EXP 31
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// if not tmp then
4077: LD_VAR 0 2
4081: NOT
4082: IFFALSE 4086
// exit ;
4084: GO 4232
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 92
4098: PUSH
4099: LD_INT 123
4101: PUSH
4102: LD_INT 141
4104: PUSH
4105: LD_INT 20
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PPUSH
4118: CALL_OW 69
4122: IFFALSE 4146
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4124: LD_VAR 0 2
4128: PPUSH
4129: LD_INT 126
4131: PPUSH
4132: LD_INT 143
4134: PPUSH
4135: CALL_OW 114
// wait ( 0 0$30 ) ;
4139: LD_INT 1050
4141: PPUSH
4142: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_VAR 0 2
4162: PPUSH
4163: LD_INT 51
4165: PUSH
4166: LD_INT 50
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 98
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 114
4185: PUSH
4186: LD_INT 50
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 127
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 131
4205: PUSH
4206: LD_INT 35
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL 56794 0 2
4224: ST_TO_ADDR
// until not tmp ;
4225: LD_VAR 0 2
4229: NOT
4230: IFFALSE 4146
// end ;
4232: PPOPN 2
4234: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4235: LD_EXP 3
4239: PUSH
4240: LD_EXP 5
4244: NOT
4245: AND
4246: PUSH
4247: LD_INT 11
4249: PPUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 70
4264: AND
4265: IFFALSE 4386
4267: GO 4269
4269: DISABLE
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
// begin uc_side := 1 ;
4275: LD_ADDR_OWVAR 20
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// uc_nation := 1 ;
4283: LD_ADDR_OWVAR 21
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// tmp := [ ] ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// for i := 1 to 2 do
4298: LD_ADDR_VAR 0 1
4302: PUSH
4303: DOUBLE
4304: LD_INT 1
4306: DEC
4307: ST_TO_ADDR
4308: LD_INT 2
4310: PUSH
4311: FOR_TO
4312: IFFALSE 4384
// begin PrepareSoldier ( false , 7 ) ;
4314: LD_INT 0
4316: PPUSH
4317: LD_INT 7
4319: PPUSH
4320: CALL_OW 381
// un := CreateHuman ;
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: CALL_OW 44
4333: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4334: LD_VAR 0 2
4338: PPUSH
4339: LD_INT 130
4341: PPUSH
4342: LD_INT 153
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 0
4350: PPUSH
4351: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_INT 108
4374: PPUSH
4375: LD_INT 108
4377: PPUSH
4378: CALL_OW 174
// end ;
4382: GO 4311
4384: POP
4385: POP
// end ;
4386: PPOPN 3
4388: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4389: LD_EXP 3
4393: PUSH
4394: LD_EXP 5
4398: NOT
4399: AND
4400: PUSH
4401: LD_INT 10
4403: PPUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 70
4418: AND
4419: IFFALSE 4540
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
4428: PPUSH
// begin uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// tmp := [ ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: EMPTY
4451: ST_TO_ADDR
// for i := 1 to 2 do
4452: LD_ADDR_VAR 0 1
4456: PUSH
4457: DOUBLE
4458: LD_INT 1
4460: DEC
4461: ST_TO_ADDR
4462: LD_INT 2
4464: PUSH
4465: FOR_TO
4466: IFFALSE 4538
// begin PrepareSoldier ( false , 7 ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 7
4473: PPUSH
4474: CALL_OW 381
// un := CreateHuman ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 56
4495: PPUSH
4496: LD_INT 101
4498: PPUSH
4499: LD_INT 3
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_INT 5
4516: PPUSH
4517: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4521: LD_VAR 0 2
4525: PPUSH
4526: LD_INT 72
4528: PPUSH
4529: LD_INT 92
4531: PPUSH
4532: CALL_OW 174
// end ;
4536: GO 4465
4538: POP
4539: POP
// end ;
4540: PPOPN 3
4542: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4543: LD_EXP 7
4547: NOT
4548: IFFALSE 4749
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// begin enable ;
4559: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: LD_INT 81
4567: PUSH
4568: LD_INT 1
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 92
4577: PUSH
4578: LD_INT 113
4580: PUSH
4581: LD_INT 139
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4602: LD_ADDR_VAR 0 3
4606: PUSH
4607: LD_INT 20
4609: PPUSH
4610: CALL_OW 435
4614: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 35
4624: PPUSH
4625: LD_INT 50
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 72
4635: ST_TO_ADDR
// if not tmp then
4636: LD_VAR 0 2
4640: NOT
4641: IFFALSE 4646
// begin disable ;
4643: DISABLE
// exit ;
4644: GO 4749
// end ; for i in tmp do
4646: LD_ADDR_VAR 0 1
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: FOR_IN
4657: IFFALSE 4747
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4659: LD_VAR 0 4
4663: PUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 12
4679: GREATER
4680: AND
4681: IFFALSE 4700
// ComMoveXY ( i , 83 , 147 ) else
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 83
4690: PPUSH
4691: LD_INT 147
4693: PPUSH
4694: CALL_OW 111
4698: GO 4745
// if not HasTask ( i ) and cr then
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 314
4709: NOT
4710: PUSH
4711: LD_VAR 0 3
4715: AND
4716: IFFALSE 4745
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4718: LD_VAR 0 1
4722: PPUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: LD_VAR 0 3
4736: PUSH
4737: LD_INT 2
4739: ARRAY
4740: PPUSH
4741: CALL_OW 117
// end ;
4745: GO 4656
4747: POP
4748: POP
// end ;
4749: PPOPN 4
4751: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4752: LD_EXP 32
4756: PPUSH
4757: CALL_OW 302
4761: PUSH
4762: LD_EXP 7
4766: NOT
4767: AND
4768: IFFALSE 5031
4770: GO 4772
4772: DISABLE
4773: LD_INT 0
4775: PPUSH
4776: PPUSH
// begin enable ;
4777: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: LD_INT 16
4785: PPUSH
4786: LD_INT 81
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 50
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_INT 12
4818: PPUSH
4819: CALL_OW 435
4823: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4824: LD_EXP 32
4828: PPUSH
4829: CALL_OW 261
4833: PUSH
4834: LD_INT 10
4836: LESS
4837: PUSH
4838: LD_INT 2
4840: PPUSH
4841: LD_EXP 32
4845: PPUSH
4846: CALL_OW 292
4850: NOT
4851: AND
4852: IFFALSE 4866
// SetFuel ( usCargo , 100 ) ;
4854: LD_EXP 32
4858: PPUSH
4859: LD_INT 100
4861: PPUSH
4862: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4866: LD_EXP 32
4870: PPUSH
4871: CALL_OW 314
4875: NOT
4876: PUSH
4877: LD_EXP 32
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 289
4889: PUSH
4890: LD_INT 100
4892: LESS
4893: AND
4894: PUSH
4895: LD_VAR 0 2
4899: NOT
4900: AND
4901: IFFALSE 4967
// begin if cr then
4903: LD_VAR 0 1
4907: IFFALSE 4938
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4909: LD_EXP 32
4913: PPUSH
4914: LD_VAR 0 1
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 117
4936: GO 4965
// if not IsInArea ( usCargo , usCratesArea ) then
4938: LD_EXP 32
4942: PPUSH
4943: LD_INT 12
4945: PPUSH
4946: CALL_OW 308
4950: NOT
4951: IFFALSE 4965
// ComMoveToArea ( usCargo , usCratesArea ) ;
4953: LD_EXP 32
4957: PPUSH
4958: LD_INT 12
4960: PPUSH
4961: CALL_OW 113
// exit ;
4965: GO 5031
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_EXP 32
4976: PPUSH
4977: LD_INT 16
4979: PPUSH
4980: CALL_OW 308
4984: NOT
4985: AND
4986: IFFALSE 5005
// ComMoveXY ( usCargo , 80 , 143 ) else
4988: LD_EXP 32
4992: PPUSH
4993: LD_INT 80
4995: PPUSH
4996: LD_INT 143
4998: PPUSH
4999: CALL_OW 111
5003: GO 5031
// if GetCargo ( usCargo , mat_cans ) then
5005: LD_EXP 32
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 289
5017: IFFALSE 5031
// ComGive ( usCargo , usDepot ) ;
5019: LD_EXP 32
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 161
// end ;
5031: PPOPN 2
5033: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5034: LD_EXP 7
5038: NOT
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 69
5082: AND
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 60
5099: PUSH
5100: EMPTY
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: LD_INT 25
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: AND
5127: IFFALSE 5330
5129: GO 5131
5131: DISABLE
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
// begin enable ;
5136: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 50
5167: PUSH
5168: EMPTY
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL_OW 69
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5328
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 60
5208: PUSH
5209: EMPTY
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: ST_TO_ADDR
// if not sci then
5236: LD_VAR 0 2
5240: NOT
5241: IFFALSE 5245
// break ;
5243: GO 5328
// sci := sci [ 1 ] ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: LD_INT 1
5257: ARRAY
5258: ST_TO_ADDR
// if IsInUnit ( sci ) then
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 310
5268: IFFALSE 5281
// ComExit ( sci ) else
5270: LD_VAR 0 2
5274: PPUSH
5275: CALL 54588 0 1
5279: GO 5326
// begin ComHeal ( sci , i ) ;
5281: LD_VAR 0 2
5285: PPUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_INT 32
5302: PUSH
5303: LD_INT 33
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: PPUSH
5322: CALL_OW 180
// end ; end ;
5326: GO 5185
5328: POP
5329: POP
// end ;
5330: PPOPN 2
5332: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5333: LD_EXP 7
5337: NOT
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 60
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 50
5364: PUSH
5365: EMPTY
5366: LIST
5367: PUSH
5368: LD_INT 34
5370: PUSH
5371: LD_INT 13
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 69
5388: AND
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: LD_INT 24
5405: PUSH
5406: LD_INT 1000
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 3
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_INT 29
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: AND
5455: IFFALSE 5724
5457: GO 5459
5459: DISABLE
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 3
5483: PUSH
5484: LD_INT 24
5486: PUSH
5487: LD_INT 1000
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: LD_INT 30
5513: PUSH
5514: LD_INT 29
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 22
5543: PUSH
5544: LD_INT 1
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 600
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 21
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 29
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5606: LD_ADDR_VAR 0 1
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 60
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 50
5636: PUSH
5637: EMPTY
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PPUSH
5656: CALL_OW 69
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5722
// begin if tmp2 then
5664: LD_VAR 0 3
5668: IFFALSE 5696
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_VAR 0 3
5679: PPUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 74
5689: PPUSH
5690: CALL_OW 130
5694: GO 5720
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 74
5715: PPUSH
5716: CALL_OW 130
// end ;
5720: GO 5661
5722: POP
5723: POP
// end ;
5724: PPOPN 3
5726: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5727: LD_EXP 7
5731: NOT
5732: PUSH
5733: LD_INT 16
5735: PPUSH
5736: LD_INT 81
5738: PUSH
5739: LD_INT 1
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 50
5748: PUSH
5749: EMPTY
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 70
5760: NOT
5761: AND
5762: PUSH
5763: LD_EXP 33
5767: AND
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 3
5781: PUSH
5782: LD_INT 60
5784: PUSH
5785: EMPTY
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 50
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: LD_INT 34
5800: PUSH
5801: LD_INT 13
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: AND
5819: IFFALSE 5931
5821: GO 5823
5823: DISABLE
// begin enable ;
5824: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 60
5840: PUSH
5841: EMPTY
5842: LIST
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 50
5850: PUSH
5851: EMPTY
5852: LIST
5853: PUSH
5854: LD_INT 34
5856: PUSH
5857: LD_INT 13
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PPUSH
5875: LD_EXP 33
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: LD_EXP 33
5892: PUSH
5893: LD_INT 1
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: LD_EXP 33
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PUSH
5910: LD_INT 3
5912: ARRAY
5913: PPUSH
5914: LD_EXP 33
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: PUSH
5923: LD_INT 4
5925: ARRAY
5926: PPUSH
5927: CALL_OW 566
// end ;
5931: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 54
5953: PUSH
5954: EMPTY
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 2
5963: PUSH
5964: LD_INT 25
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 25
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 16
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: IFFALSE 6372
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
// begin enable ;
6021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 50
6039: PUSH
6040: EMPTY
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 54
6048: PUSH
6049: EMPTY
6050: LIST
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 16
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 69
6105: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 50
6123: PUSH
6124: EMPTY
6125: LIST
6126: PUSH
6127: LD_INT 21
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 32
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 58
6149: PUSH
6150: EMPTY
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PPUSH
6160: CALL_OW 69
6164: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6165: LD_ADDR_VAR 0 4
6169: PUSH
6170: LD_INT 22
6172: PUSH
6173: LD_INT 1
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: ST_TO_ADDR
// if not tmp then
6206: LD_VAR 0 2
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6372
// for i in tmp do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_VAR 0 2
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6370
// begin btmp := FilterByTag ( btmp , 0 ) ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL 51759 0 2
6245: ST_TO_ADDR
// if not btmp then
6246: LD_VAR 0 3
6250: NOT
6251: IFFALSE 6296
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 257
6262: PUSH
6263: LD_INT 16
6265: NONEQUAL
6266: PUSH
6267: LD_VAR 0 4
6271: AND
6272: IFFALSE 6292
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6274: LD_VAR 0 1
6278: PPUSH
6279: LD_VAR 0 4
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 120
// continue ;
6292: GO 6225
// end else
6294: GO 6368
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: CALL_OW 120
// wait ( 0 0$9 ) ;
6330: LD_INT 315
6332: PPUSH
6333: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL 18623 0 1
6350: IFFALSE 6368
// SetTag ( btmp [ 1 ] , 0 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL_OW 109
// end ; end ;
6368: GO 6225
6370: POP
6371: POP
// end ;
6372: PPOPN 4
6374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6375: LD_INT 22
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 33
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 50
6397: PUSH
6398: EMPTY
6399: LIST
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 61
6406: PUSH
6407: EMPTY
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: IFFALSE 6515
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
// begin enable ;
6433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 50
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 61
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: ST_TO_ADDR
// for i in tmp do
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: FOR_IN
6500: IFFALSE 6513
// Connect ( i ) ;
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL 24807 0 1
6511: GO 6499
6513: POP
6514: POP
// end ;
6515: PPOPN 2
6517: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6518: LD_EXP 6
6522: PUSH
6523: LD_OWVAR 67
6527: PUSH
6528: LD_INT 1
6530: GREATER
6531: AND
6532: IFFALSE 6974
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6544: LD_INT 31500
6546: PUSH
6547: LD_INT 31500
6549: PUSH
6550: LD_INT 29400
6552: PUSH
6553: LD_INT 27300
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_OWVAR 67
6566: ARRAY
6567: PPUSH
6568: CALL_OW 67
// if usSurrender then
6572: LD_EXP 7
6576: IFFALSE 6580
// exit ;
6578: GO 6974
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6580: LD_ADDR_VAR 0 1
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: LD_INT 6
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_OWVAR 67
6612: ARRAY
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6919
// begin uc_side := 1 ;
6617: LD_ADDR_OWVAR 20
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// uc_nation := 1 ;
6625: LD_ADDR_OWVAR 21
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// InitHc_All ( ) ;
6633: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_OWVAR 67
6665: ARRAY
6666: PPUSH
6667: CALL_OW 380
// un := CreateHuman ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: CALL_OW 44
6680: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 3
6707: MOD
6708: PUSH
6709: LD_INT 1
6711: PLUS
6712: ARRAY
6713: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6714: LD_VAR 0 4
6718: PUSH
6719: LD_INT 4
6721: EQUAL
6722: IFFALSE 6757
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 6
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 3
6748: PPUSH
6749: CALL_OW 12
6753: ARRAY
6754: ST_TO_ADDR
6755: GO 6792
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6757: LD_ADDR_VAR 0 5
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 7
6770: PUSH
6771: LD_INT 4
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 4
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: LD_INT 30
6810: PPUSH
6811: CALL 21339 0 5
// veh := CreateVehicle ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 45
6824: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6825: LD_ADDR_EXP 34
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_EXP 34
6839: PUSH
6840: LD_INT 1
6842: PLUS
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: CALL_OW 1
6853: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_INT 4
6861: PPUSH
6862: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_INT 17
6873: PPUSH
6874: LD_INT 0
6876: PPUSH
6877: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_VAR 0 3
6890: PPUSH
6891: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 153
6902: PPUSH
6903: LD_INT 45
6905: PPUSH
6906: CALL_OW 111
// wait ( 0 0$2 ) ;
6910: LD_INT 70
6912: PPUSH
6913: CALL_OW 67
// end ;
6917: GO 6614
6919: POP
6920: POP
// repeat wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6928: LD_ADDR_EXP 34
6932: PUSH
6933: LD_EXP 34
6937: PPUSH
6938: LD_INT 150
6940: PUSH
6941: LD_INT 36
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 138
6950: PUSH
6951: LD_INT 25
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL 56794 0 2
6966: ST_TO_ADDR
// until not usAdditionalForces ;
6967: LD_EXP 34
6971: NOT
6972: IFFALSE 6921
// end ;
6974: PPOPN 5
6976: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6977: LD_INT 22
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 101
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: IFFALSE 7025
7007: GO 7009
7009: DISABLE
// begin wait ( 0 0$30 ) ;
7010: LD_INT 1050
7012: PPUSH
7013: CALL_OW 67
// usAttacksAllowed := true ;
7017: LD_ADDR_EXP 6
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// end ; end_of_file
7025: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL 59288 0 1
// if un = Heike then
7035: LD_VAR 0 1
7039: PUSH
7040: LD_EXP 15
7044: EQUAL
7045: IFFALSE 7054
// YouLost ( Heike ) ;
7047: LD_STRING Heike
7049: PPUSH
7050: CALL_OW 104
// if un = usCommander then
7054: LD_VAR 0 1
7058: PUSH
7059: LD_EXP 30
7063: EQUAL
7064: IFFALSE 7073
// YouLost ( Commander ) ;
7066: LD_STRING Commander
7068: PPUSH
7069: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 2
7085: EQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7118
// vehLossCounter := Inc ( vehLossCounter ) ;
7103: LD_ADDR_EXP 14
7107: PUSH
7108: LD_EXP 14
7112: PPUSH
7113: CALL 55551 0 1
7117: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: IFFALSE 7473
// begin if GetClass ( un ) = class_sniper then
7133: LD_VAR 0 1
7137: PPUSH
7138: CALL_OW 257
7142: PUSH
7143: LD_INT 5
7145: EQUAL
7146: IFFALSE 7163
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7148: LD_ADDR_EXP 13
7152: PUSH
7153: LD_EXP 13
7157: PPUSH
7158: CALL 55551 0 1
7162: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 264
7172: PUSH
7173: LD_INT 13
7175: EQUAL
7176: PUSH
7177: LD_INT 25
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7248
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7187: LD_INT 175
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 34
7202: PUSH
7203: LD_INT 13
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PPUSH
7219: CALL 18601 0 1
7223: MUL
7224: PPUSH
7225: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7229: LD_INT 25
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 13
7243: PPUSH
7244: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 264
7257: PUSH
7258: LD_INT 12
7260: EQUAL
7261: PUSH
7262: LD_INT 25
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7291
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7272: LD_INT 25
7274: PPUSH
7275: LD_INT 2
7277: PPUSH
7278: LD_INT 1
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: PPUSH
7287: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 266
7300: PUSH
7301: LD_INT 32
7303: EQUAL
7304: IFFALSE 7388
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7306: LD_ADDR_EXP 33
7310: PUSH
7311: LD_EXP 33
7315: PPUSH
7316: LD_EXP 33
7320: PUSH
7321: LD_INT 1
7323: PLUS
7324: PPUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 33
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 250
7356: PUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PUSH
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 254
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 1
7387: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 266
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: LD_INT 4
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: IN
7408: IFFALSE 7473
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7410: LD_ADDR_EXP 33
7414: PUSH
7415: LD_EXP 33
7419: PPUSH
7420: LD_EXP 33
7424: PUSH
7425: LD_INT 1
7427: PLUS
7428: PPUSH
7429: LD_INT 4
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 250
7441: PUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 251
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 254
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 1
7472: ST_TO_ADDR
// end ; end ;
7473: PPOPN 1
7475: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 255
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: PUSH
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 110
7499: PUSH
7500: LD_INT 1
7502: EQUAL
7503: AND
7504: IFFALSE 7518
// SetTag ( un , 0 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 0
7513: PPUSH
7514: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 255
7527: PUSH
7528: LD_INT 1
7530: EQUAL
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 264
7541: PUSH
7542: LD_INT 6
7544: EQUAL
7545: AND
7546: PUSH
7547: LD_EXP 11
7551: NOT
7552: AND
7553: IFFALSE 7563
// seeHeavyGun := true ;
7555: LD_ADDR_EXP 11
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 263
7572: PUSH
7573: LD_INT 2
7575: EQUAL
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PUSH
7587: LD_INT 2
7589: NONEQUAL
7590: AND
7591: IFFALSE 7617
// begin ComUnlink ( un ) ;
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 136
// if not seeRemoteVehicle then
7602: LD_EXP 10
7606: NOT
7607: IFFALSE 7617
// seeRemoteVehicle := true ;
7609: LD_ADDR_EXP 10
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// end ; end ;
7617: PPOPN 1
7619: END
// on BuildingComplete ( b ) do var i , barracks ;
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin if GetSide ( b ) = 2 then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 255
7633: PUSH
7634: LD_INT 2
7636: EQUAL
7637: IFFALSE 7675
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 266
7648: PUSH
7649: LD_INT 0
7651: EQUAL
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: LD_INT 18
7660: PPUSH
7661: CALL_OW 308
7665: AND
7666: IFFALSE 7675
// SetAchievement ( ACH_WEST ) ;
7668: LD_STRING ACH_WEST
7670: PPUSH
7671: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 255
7684: PUSH
7685: LD_INT 1
7687: EQUAL
7688: IFFALSE 7864
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7690: LD_ADDR_EXP 33
7694: PUSH
7695: LD_EXP 33
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: CALL_OW 3
7707: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 266
7717: PUSH
7718: LD_INT 4
7720: EQUAL
7721: IFFALSE 7732
// ComUpgrade ( b ) ;
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 266
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: IN
7752: IFFALSE 7864
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 6
7761: PUSH
7762: LD_INT 7
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ARRAY
7780: PPUSH
7781: CALL_OW 208
// if GetBType ( b ) = b_turret then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 266
7794: PUSH
7795: LD_INT 33
7797: EQUAL
7798: IFFALSE 7802
// exit ;
7800: GO 7864
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: ST_TO_ADDR
// if barracks then
7836: LD_VAR 0 3
7840: IFFALSE 7864
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: CALL_OW 313
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: CALL_OW 122
// end ; end ; end ;
7864: PPOPN 3
7866: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL 59408 0 2
// if GetSide ( factory ) = 1 then
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 255
7890: PUSH
7891: LD_INT 1
7893: EQUAL
7894: IFFALSE 7973
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 264
7905: PUSH
7906: LD_INT 12
7908: EQUAL
7909: IFFALSE 7921
// usCargo := vehicle ;
7911: LD_ADDR_EXP 32
7915: PUSH
7916: LD_VAR 0 1
7920: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 264
7930: PUSH
7931: LD_INT 12
7933: PUSH
7934: LD_INT 13
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: IN
7941: NOT
7942: IFFALSE 7973
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7944: LD_ADDR_EXP 31
7948: PUSH
7949: LD_EXP 31
7953: PPUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_INT 1
7961: PLUS
7962: PPUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 1
7972: ST_TO_ADDR
// end ; end ;
7973: PPOPN 2
7975: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7976: LD_VAR 0 2
7980: PPUSH
7981: CALL_OW 255
7985: PUSH
7986: LD_INT 1
7988: EQUAL
7989: IFFALSE 8003
// AddComEnterUnit ( un , amFac ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_INT 25
7998: PPUSH
7999: CALL_OW 180
// end ;
8003: PPOPN 4
8005: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 255
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: PUSH
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 266
8029: PUSH
8030: LD_INT 32
8032: EQUAL
8033: AND
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 257
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: IN
8055: AND
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 50
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 69
8092: AND
8093: IFFALSE 8163
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8095: LD_INT 74
8097: PPUSH
8098: LD_INT 120
8100: PPUSH
8101: CALL_OW 428
8105: PPUSH
8106: CALL_OW 313
8110: PUSH
8111: LD_INT 6
8113: LESS
8114: IFFALSE 8163
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 74
8123: PPUSH
8124: LD_INT 120
8126: PPUSH
8127: CALL_OW 428
8131: PPUSH
8132: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: IFFALSE 8163
// AddComChangeProfession ( un , class_sniper ) ;
8151: LD_VAR 0 2
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: CALL_OW 183
// end ; end ; end_of_file
8163: PPOPN 2
8165: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
// Video ( true ) ;
8178: LD_INT 1
8180: PPUSH
8181: CALL 54162 0 1
// music_nat := 1 ;
8185: LD_ADDR_OWVAR 71
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// music_class := music_recon ;
8193: LD_ADDR_OWVAR 72
8197: PUSH
8198: LD_INT 3
8200: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8201: LD_INT 184
8203: PPUSH
8204: LD_INT 142
8206: PPUSH
8207: LD_INT 2
8209: PPUSH
8210: LD_INT 10
8212: NEG
8213: PPUSH
8214: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8218: LD_INT 184
8220: PPUSH
8221: LD_INT 142
8223: PPUSH
8224: LD_INT 2
8226: PPUSH
8227: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8231: LD_INT 204
8233: PPUSH
8234: LD_INT 151
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 10
8242: NEG
8243: PPUSH
8244: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8248: LD_INT 204
8250: PPUSH
8251: LD_INT 151
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8261: LD_INT 184
8263: PPUSH
8264: LD_INT 142
8266: PPUSH
8267: CALL_OW 86
// wait ( 0 0$2 ) ;
8271: LD_INT 70
8273: PPUSH
8274: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8278: LD_ADDR_VAR 0 5
8282: PUSH
8283: LD_EXP 15
8287: PUSH
8288: LD_EXP 16
8292: PUSH
8293: LD_EXP 17
8297: PUSH
8298: LD_EXP 18
8302: PUSH
8303: LD_EXP 19
8307: PUSH
8308: LD_EXP 20
8312: PUSH
8313: LD_EXP 21
8317: PUSH
8318: LD_EXP 22
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_EXP 27
8355: UNION
8356: ST_TO_ADDR
// tmp := tmp diff 0 ;
8357: LD_ADDR_VAR 0 5
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: LD_INT 0
8369: DIFF
8370: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8371: LD_ADDR_VAR 0 7
8375: PUSH
8376: LD_VAR 0 5
8380: PPUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: PUSH
8396: LD_INT 0
8398: GREATER
8399: ST_TO_ADDR
// hasCamera := false ;
8400: LD_ADDR_VAR 0 8
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// if not hasEng then
8408: LD_VAR 0 7
8412: NOT
8413: IFFALSE 8466
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8415: LD_ADDR_VAR 0 6
8419: PUSH
8420: LD_VAR 0 5
8424: PUSH
8425: LD_EXP 25
8429: PUSH
8430: LD_EXP 17
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: DIFF
8439: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 1
8447: PPUSH
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 12
8457: ARRAY
8458: PPUSH
8459: LD_INT 2
8461: PPUSH
8462: CALL_OW 336
// end ; if heikeVehicles then
8466: LD_EXP 29
8470: IFFALSE 9094
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8472: LD_ADDR_VAR 0 5
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_INT 3
8484: PPUSH
8485: CALL 56416 0 2
8489: ST_TO_ADDR
// for i in heikeVehicles do
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_EXP 29
8499: PUSH
8500: FOR_IN
8501: IFFALSE 9092
// begin if not tmp then
8503: LD_VAR 0 5
8507: NOT
8508: IFFALSE 8512
// break ;
8510: GO 9092
// uc_side := 2 ;
8512: LD_ADDR_OWVAR 20
8516: PUSH
8517: LD_INT 2
8519: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8520: LD_ADDR_OWVAR 21
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_INT 5
8532: ARRAY
8533: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8534: LD_ADDR_OWVAR 37
8538: PUSH
8539: LD_VAR 0 2
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8548: LD_ADDR_OWVAR 39
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 2
8560: ARRAY
8561: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8562: LD_ADDR_OWVAR 38
8566: PUSH
8567: LD_VAR 0 2
8571: PUSH
8572: LD_INT 3
8574: ARRAY
8575: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8576: LD_ADDR_OWVAR 40
8580: PUSH
8581: LD_VAR 0 2
8585: PUSH
8586: LD_INT 4
8588: ARRAY
8589: ST_TO_ADDR
// veh := CreateVehicle ;
8590: LD_ADDR_VAR 0 4
8594: PUSH
8595: CALL_OW 45
8599: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8600: LD_VAR 0 4
8604: PPUSH
8605: LD_INT 4
8607: PPUSH
8608: CALL_OW 233
// if i [ 3 ] = control_manual then
8612: LD_VAR 0 2
8616: PUSH
8617: LD_INT 3
8619: ARRAY
8620: PUSH
8621: LD_INT 1
8623: EQUAL
8624: IFFALSE 8709
// begin PlaceUnitArea ( veh , startArea , false ) ;
8626: LD_VAR 0 4
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: LD_INT 0
8636: PPUSH
8637: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
8641: LD_VAR 0 2
8645: PUSH
8646: LD_INT 4
8648: ARRAY
8649: PUSH
8650: LD_INT 31
8652: EQUAL
8653: IFFALSE 8671
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8655: LD_VAR 0 5
8659: PUSH
8660: LD_INT 1
8662: ARRAY
8663: PPUSH
8664: LD_INT 3
8666: PPUSH
8667: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8671: LD_VAR 0 5
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: LD_VAR 0 4
8684: PPUSH
8685: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8689: LD_ADDR_VAR 0 5
8693: PUSH
8694: LD_VAR 0 5
8698: PPUSH
8699: LD_INT 1
8701: PPUSH
8702: CALL_OW 3
8706: ST_TO_ADDR
// end else
8707: GO 8770
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8709: LD_INT 22
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 34
8721: PUSH
8722: LD_INT 31
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 69
8737: IFFALSE 8770
// begin PlaceUnitArea ( veh , startArea , false ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 0
8749: PPUSH
8750: CALL_OW 49
// Connect ( veh ) ;
8754: LD_VAR 0 4
8758: PPUSH
8759: CALL 24807 0 1
// wait ( 0 0$2 ) ;
8763: LD_INT 70
8765: PPUSH
8766: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8770: LD_VAR 0 4
8774: PPUSH
8775: LD_VAR 0 2
8779: PUSH
8780: LD_INT 6
8782: ARRAY
8783: PPUSH
8784: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8788: LD_VAR 0 4
8792: PPUSH
8793: LD_INT 20
8795: PPUSH
8796: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8800: LD_VAR 0 2
8804: PUSH
8805: LD_INT 7
8807: ARRAY
8808: PUSH
8809: LD_VAR 0 4
8813: PPUSH
8814: CALL_OW 264
8818: PUSH
8819: LD_INT 51
8821: PUSH
8822: LD_INT 32
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: IN
8829: AND
8830: IFFALSE 8881
// begin for j := 1 to 2 do
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: DOUBLE
8838: LD_INT 1
8840: DEC
8841: ST_TO_ADDR
8842: LD_INT 2
8844: PUSH
8845: FOR_TO
8846: IFFALSE 8879
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8848: LD_VAR 0 4
8852: PPUSH
8853: LD_VAR 0 3
8857: PPUSH
8858: LD_VAR 0 2
8862: PUSH
8863: LD_INT 7
8865: ARRAY
8866: PUSH
8867: LD_VAR 0 3
8871: ARRAY
8872: PPUSH
8873: CALL_OW 291
8877: GO 8845
8879: POP
8880: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8881: LD_VAR 0 4
8885: PPUSH
8886: LD_INT 185
8888: PPUSH
8889: LD_INT 144
8891: PPUSH
8892: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8896: LD_VAR 0 4
8900: PPUSH
8901: CALL_OW 263
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 8
8914: NOT
8915: AND
8916: PUSH
8917: LD_VAR 0 4
8921: PPUSH
8922: CALL_OW 311
8926: PPUSH
8927: CALL_OW 257
8931: PUSH
8932: LD_INT 2
8934: EQUAL
8935: AND
8936: IFFALSE 9041
// begin hasCamera := true ;
8938: LD_ADDR_VAR 0 8
8942: PUSH
8943: LD_INT 1
8945: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8946: LD_ADDR_VAR 0 9
8950: PUSH
8951: LD_VAR 0 4
8955: PPUSH
8956: CALL_OW 311
8960: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8961: LD_VAR 0 4
8965: PPUSH
8966: LD_INT 177
8968: PPUSH
8969: LD_INT 138
8971: PPUSH
8972: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8976: LD_VAR 0 9
8980: PPUSH
8981: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8985: LD_VAR 0 9
8989: PPUSH
8990: LD_INT 190
8992: PPUSH
8993: LD_INT 150
8995: PPUSH
8996: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9000: LD_VAR 0 9
9004: PPUSH
9005: LD_VAR 0 4
9009: PPUSH
9010: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9014: LD_VAR 0 9
9018: PPUSH
9019: LD_INT 170
9021: PPUSH
9022: LD_INT 103
9024: PPUSH
9025: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9029: LD_INT 190
9031: PPUSH
9032: LD_INT 150
9034: PPUSH
9035: CALL_OW 84
// end else
9039: GO 9083
// begin AddComWait ( veh , 0 0$2 ) ;
9041: LD_VAR 0 4
9045: PPUSH
9046: LD_INT 70
9048: PPUSH
9049: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9053: LD_VAR 0 4
9057: PPUSH
9058: LD_INT 179
9060: PPUSH
9061: LD_INT 129
9063: PPUSH
9064: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9068: LD_VAR 0 4
9072: PPUSH
9073: LD_INT 170
9075: PPUSH
9076: LD_INT 103
9078: PPUSH
9079: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9083: LD_INT 70
9085: PPUSH
9086: CALL_OW 67
// end ;
9090: GO 8500
9092: POP
9093: POP
// end ; if tmp then
9094: LD_VAR 0 5
9098: IFFALSE 9243
// begin for i in tmp do
9100: LD_ADDR_VAR 0 2
9104: PUSH
9105: LD_VAR 0 5
9109: PUSH
9110: FOR_IN
9111: IFFALSE 9241
// begin SetDir ( i , 4 ) ;
9113: LD_VAR 0 2
9117: PPUSH
9118: LD_INT 4
9120: PPUSH
9121: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
9125: LD_VAR 0 2
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: LD_INT 0
9135: PPUSH
9136: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
9140: LD_VAR 0 2
9144: PPUSH
9145: LD_INT 185
9147: PPUSH
9148: LD_INT 144
9150: PPUSH
9151: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 257
9164: PUSH
9165: LD_INT 2
9167: EQUAL
9168: PUSH
9169: LD_VAR 0 8
9173: NOT
9174: AND
9175: IFFALSE 9202
// begin hasCamera := true ;
9177: LD_ADDR_VAR 0 8
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_INT 190
9192: PPUSH
9193: LD_INT 150
9195: PPUSH
9196: CALL_OW 217
// end else
9200: GO 9217
// AddComMoveXY ( i , 179 , 129 ) ;
9202: LD_VAR 0 2
9206: PPUSH
9207: LD_INT 179
9209: PPUSH
9210: LD_INT 129
9212: PPUSH
9213: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9217: LD_VAR 0 2
9221: PPUSH
9222: LD_INT 170
9224: PPUSH
9225: LD_INT 103
9227: PPUSH
9228: CALL_OW 171
// wait ( 0 0$2 ) ;
9232: LD_INT 70
9234: PPUSH
9235: CALL_OW 67
// end ;
9239: GO 9110
9241: POP
9242: POP
// end ; if heikeApes then
9243: LD_EXP 28
9247: IFFALSE 9365
// begin counter := 0 ;
9249: LD_ADDR_VAR 0 10
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// for i in heikeApes do
9257: LD_ADDR_VAR 0 2
9261: PUSH
9262: LD_EXP 28
9266: PUSH
9267: FOR_IN
9268: IFFALSE 9363
// begin if counter > 2 then
9270: LD_VAR 0 10
9274: PUSH
9275: LD_INT 2
9277: GREATER
9278: IFFALSE 9282
// break ;
9280: GO 9363
// counter := Inc ( counter ) ;
9282: LD_ADDR_VAR 0 10
9286: PUSH
9287: LD_VAR 0 10
9291: PPUSH
9292: CALL 55551 0 1
9296: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9297: LD_VAR 0 2
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: LD_INT 0
9319: PPUSH
9320: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
9324: LD_VAR 0 2
9328: PPUSH
9329: LD_INT 185
9331: PPUSH
9332: LD_INT 144
9334: PPUSH
9335: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9339: LD_VAR 0 2
9343: PPUSH
9344: LD_INT 170
9346: PPUSH
9347: LD_INT 103
9349: PPUSH
9350: CALL_OW 171
// wait ( 0 0$2 ) ;
9354: LD_INT 70
9356: PPUSH
9357: CALL_OW 67
// end ;
9361: GO 9267
9363: POP
9364: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9365: LD_EXP 15
9369: PPUSH
9370: LD_INT 163
9372: PPUSH
9373: LD_INT 89
9375: PPUSH
9376: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9380: LD_EXP 15
9384: PPUSH
9385: LD_STRING DH-Intro-1
9387: PPUSH
9388: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9392: LD_INT 175
9394: PPUSH
9395: LD_INT 117
9397: PPUSH
9398: CALL_OW 84
// if Markov then
9402: LD_EXP 22
9406: IFFALSE 9981
// begin Say ( Markov , DMar-Intro-2 ) ;
9408: LD_EXP 22
9412: PPUSH
9413: LD_STRING DMar-Intro-2
9415: PPUSH
9416: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9420: LD_EXP 22
9424: PPUSH
9425: LD_STRING DMar-Intro-3
9427: PPUSH
9428: CALL_OW 88
// wait ( 0 0$1 ) ;
9432: LD_INT 35
9434: PPUSH
9435: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9439: LD_EXP 15
9443: PPUSH
9444: CALL_OW 85
// if Kurt then
9448: LD_EXP 25
9452: IFFALSE 9504
// begin if IsInUnit ( Kurt ) then
9454: LD_EXP 25
9458: PPUSH
9459: CALL_OW 310
9463: IFFALSE 9474
// ComExit ( Kurt ) ;
9465: LD_EXP 25
9469: PPUSH
9470: CALL 54588 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9474: LD_EXP 25
9478: PPUSH
9479: LD_INT 130
9481: PPUSH
9482: LD_INT 56
9484: PPUSH
9485: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9489: LD_EXP 25
9493: PPUSH
9494: LD_INT 129
9496: PPUSH
9497: LD_INT 56
9499: PPUSH
9500: CALL_OW 178
// end ; if Kaia then
9504: LD_EXP 20
9508: IFFALSE 9688
// begin Say ( Kaia , DK-Intro-4 ) ;
9510: LD_EXP 20
9514: PPUSH
9515: LD_STRING DK-Intro-4
9517: PPUSH
9518: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9522: LD_EXP 22
9526: PPUSH
9527: LD_STRING DMar-Intro-5
9529: PPUSH
9530: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9534: LD_EXP 22
9538: PPUSH
9539: LD_STRING DMar-Intro-6
9541: PPUSH
9542: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9546: LD_EXP 24
9550: PPUSH
9551: LD_STRING DO-Intro-7
9553: PPUSH
9554: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9558: LD_INT 160
9560: PPUSH
9561: LD_INT 85
9563: PPUSH
9564: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9568: LD_EXP 22
9572: PPUSH
9573: LD_STRING DMar-Intro-8
9575: PPUSH
9576: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9580: LD_EXP 22
9584: PPUSH
9585: LD_STRING DMar-Intro-9
9587: PPUSH
9588: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9592: LD_EXP 22
9596: PPUSH
9597: LD_STRING DMar-Intro-10
9599: PPUSH
9600: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9604: LD_EXP 22
9608: PPUSH
9609: LD_STRING DMar-Intro-11
9611: PPUSH
9612: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9616: LD_EXP 16
9620: PPUSH
9621: LD_STRING DG-Intro-12
9623: PPUSH
9624: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9628: LD_EXP 16
9632: PPUSH
9633: LD_STRING DG-Intro-13
9635: PPUSH
9636: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9640: LD_EXP 16
9644: PPUSH
9645: LD_STRING DG-Intro-14
9647: PPUSH
9648: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9652: LD_EXP 16
9656: PPUSH
9657: LD_STRING DG-Intro-15
9659: PPUSH
9660: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9664: LD_EXP 15
9668: PPUSH
9669: LD_STRING DH-Intro-16
9671: PPUSH
9672: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9676: LD_EXP 22
9680: PPUSH
9681: LD_STRING DMar-Intro-17
9683: PPUSH
9684: CALL_OW 88
// end ; if Kurt and Mike then
9688: LD_EXP 25
9692: PUSH
9693: LD_EXP 17
9697: AND
9698: IFFALSE 9981
// begin CenterNowOnUnits ( Kurt ) ;
9700: LD_EXP 25
9704: PPUSH
9705: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9709: LD_EXP 25
9713: PPUSH
9714: LD_EXP 15
9718: PPUSH
9719: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9723: LD_EXP 25
9727: PPUSH
9728: LD_STRING DKs-Intro-18
9730: PPUSH
9731: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9735: LD_EXP 25
9739: PPUSH
9740: LD_STRING DKs-Intro-19
9742: PPUSH
9743: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9747: LD_EXP 17
9751: PPUSH
9752: CALL_OW 87
// if IsInUnit ( Mike ) then
9756: LD_EXP 17
9760: PPUSH
9761: CALL_OW 310
9765: IFFALSE 9776
// ComExit ( Mike ) ;
9767: LD_EXP 17
9771: PPUSH
9772: CALL 54588 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9776: LD_EXP 17
9780: PPUSH
9781: LD_INT 129
9783: PPUSH
9784: LD_INT 53
9786: PPUSH
9787: CALL_OW 171
// AddComHold ( Mike ) ;
9791: LD_EXP 17
9795: PPUSH
9796: CALL_OW 200
// wait ( 0 0$2 ) ;
9800: LD_INT 70
9802: PPUSH
9803: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9807: LD_EXP 17
9811: PPUSH
9812: LD_STRING DM-Intro-20
9814: PPUSH
9815: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9819: LD_ADDR_EXP 3
9823: PUSH
9824: LD_STRING Scout
9826: PPUSH
9827: CALL_OW 97
9831: ST_TO_ADDR
// if scoutActive = 1 then
9832: LD_EXP 3
9836: PUSH
9837: LD_INT 1
9839: EQUAL
9840: IFFALSE 9937
// begin CenterNowOnUnits ( Kurt ) ;
9842: LD_EXP 25
9846: PPUSH
9847: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9851: LD_EXP 15
9855: PPUSH
9856: LD_STRING DH-Intro-21
9858: PPUSH
9859: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9863: LD_EXP 17
9867: PPUSH
9868: LD_STRING DM-Intro-22
9870: PPUSH
9871: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9875: LD_EXP 25
9879: PPUSH
9880: LD_STRING DKs-Intro-23
9882: PPUSH
9883: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9887: LD_EXP 25
9891: PPUSH
9892: LD_INT 5
9894: PPUSH
9895: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9899: LD_EXP 17
9903: PPUSH
9904: LD_INT 5
9906: PPUSH
9907: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9911: LD_EXP 25
9915: PUSH
9916: LD_EXP 17
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: LD_INT 104
9927: PPUSH
9928: LD_INT 66
9930: PPUSH
9931: CALL_OW 111
// end else
9935: GO 9981
// begin scoutActive := 0 ;
9937: LD_ADDR_EXP 3
9941: PUSH
9942: LD_INT 0
9944: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9945: LD_EXP 15
9949: PPUSH
9950: LD_STRING DH-Intro-a-21
9952: PPUSH
9953: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9957: LD_EXP 17
9961: PPUSH
9962: LD_STRING DM-Intro-a-22
9964: PPUSH
9965: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9969: LD_EXP 25
9973: PPUSH
9974: LD_STRING DKs-Intro-a-23
9976: PPUSH
9977: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9981: LD_INT 0
9983: PPUSH
9984: CALL 54162 0 1
// music_nat := music_auto ;
9988: LD_ADDR_OWVAR 71
9992: PUSH
9993: LD_INT 0
9995: ST_TO_ADDR
// music_class := music_auto ;
9996: LD_ADDR_OWVAR 72
10000: PUSH
10001: LD_INT 0
10003: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10004: LD_STRING M1
10006: PPUSH
10007: CALL_OW 337
// wait ( 0 0$3 ) ;
10011: LD_INT 105
10013: PPUSH
10014: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10018: LD_EXP 15
10022: PPUSH
10023: LD_STRING DH-Base-1
10025: PPUSH
10026: CALL_OW 88
// if Kaia then
10030: LD_EXP 20
10034: IFFALSE 10144
// begin Say ( Kaia , DK-Base-2 ) ;
10036: LD_EXP 20
10040: PPUSH
10041: LD_STRING DK-Base-2
10043: PPUSH
10044: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10048: LD_EXP 15
10052: PPUSH
10053: LD_STRING DH-Base-3
10055: PPUSH
10056: CALL_OW 88
// if Aviradze then
10060: LD_EXP 26
10064: IFFALSE 10144
// begin Say ( Aviradze , DA-Base-4 ) ;
10066: LD_EXP 26
10070: PPUSH
10071: LD_STRING DA-Base-4
10073: PPUSH
10074: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10078: LD_EXP 20
10082: PPUSH
10083: LD_STRING DK-Base-5
10085: PPUSH
10086: CALL_OW 88
// if Markov then
10090: LD_EXP 22
10094: IFFALSE 10144
// begin Say ( Markov , DMar-Base-6 ) ;
10096: LD_EXP 22
10100: PPUSH
10101: LD_STRING DMar-Base-6
10103: PPUSH
10104: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10108: LD_EXP 20
10112: PPUSH
10113: LD_STRING DK-Base-7
10115: PPUSH
10116: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10120: LD_EXP 22
10124: PPUSH
10125: LD_STRING DMar-Base-8
10127: PPUSH
10128: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10132: LD_EXP 22
10136: PPUSH
10137: LD_STRING DMar-Base-9
10139: PPUSH
10140: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10144: CALL_OW 22
// end ;
10148: LD_VAR 0 1
10152: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10153: LD_EXP 5
10157: IFFALSE 11268
10159: GO 10161
10161: DISABLE
10162: LD_INT 0
10164: PPUSH
10165: PPUSH
// begin InGameOn ;
10166: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10170: LD_EXP 17
10174: PUSH
10175: LD_EXP 25
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: LD_EXP 15
10188: PPUSH
10189: CALL_OW 119
// ComExit ( Heike ) ;
10193: LD_EXP 15
10197: PPUSH
10198: CALL 54588 0 1
// if IsOk ( Mike ) then
10202: LD_EXP 17
10206: PPUSH
10207: CALL_OW 302
10211: IFFALSE 10229
// AddComTurnUnit ( Heike , Mike ) else
10213: LD_EXP 15
10217: PPUSH
10218: LD_EXP 17
10222: PPUSH
10223: CALL_OW 179
10227: GO 10243
// AddComTurnUnit ( Heike , Kurt ) ;
10229: LD_EXP 15
10233: PPUSH
10234: LD_EXP 25
10238: PPUSH
10239: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10243: LD_EXP 17
10247: PPUSH
10248: CALL_OW 302
10252: PUSH
10253: LD_EXP 25
10257: PPUSH
10258: CALL_OW 302
10262: AND
10263: IFFALSE 10514
// begin CenterNowOnUnits ( Mike ) ;
10265: LD_EXP 17
10269: PPUSH
10270: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10274: LD_EXP 17
10278: PPUSH
10279: LD_STRING DM-Scout-1
10281: PPUSH
10282: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10286: LD_EXP 15
10290: PPUSH
10291: LD_STRING DH-Scout-2
10293: PPUSH
10294: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10298: LD_EXP 25
10302: PPUSH
10303: LD_STRING DKs-Scout-3
10305: PPUSH
10306: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10310: LD_EXP 15
10314: PPUSH
10315: LD_STRING DH-Scout-4
10317: PPUSH
10318: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10322: LD_EXP 15
10326: PPUSH
10327: LD_STRING DH-Scout-5
10329: PPUSH
10330: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10334: LD_ADDR_VAR 0 2
10338: PUSH
10339: LD_INT 72
10341: PUSH
10342: LD_INT 122
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 89
10351: PUSH
10352: LD_INT 131
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 99
10361: PUSH
10362: LD_INT 139
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 100
10371: PUSH
10372: LD_INT 148
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: ST_TO_ADDR
// for i in tmp do
10385: LD_ADDR_VAR 0 1
10389: PUSH
10390: LD_VAR 0 2
10394: PUSH
10395: FOR_IN
10396: IFFALSE 10454
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10398: LD_VAR 0 1
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: PPUSH
10407: LD_VAR 0 1
10411: PUSH
10412: LD_INT 2
10414: ARRAY
10415: PPUSH
10416: LD_INT 2
10418: PPUSH
10419: LD_INT 6
10421: NEG
10422: PPUSH
10423: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10427: LD_VAR 0 1
10431: PUSH
10432: LD_INT 1
10434: ARRAY
10435: PPUSH
10436: LD_VAR 0 1
10440: PUSH
10441: LD_INT 2
10443: ARRAY
10444: PPUSH
10445: LD_INT 2
10447: PPUSH
10448: CALL_OW 331
// end ;
10452: GO 10395
10454: POP
10455: POP
// CenterOnXY ( 83 , 132 ) ;
10456: LD_INT 83
10458: PPUSH
10459: LD_INT 132
10461: PPUSH
10462: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10466: LD_EXP 25
10470: PPUSH
10471: LD_STRING DKs-Scout-6
10473: PPUSH
10474: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10478: LD_EXP 17
10482: PPUSH
10483: LD_STRING DM-Scout-7
10485: PPUSH
10486: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10490: LD_EXP 17
10494: PPUSH
10495: LD_STRING DM-Scout-8
10497: PPUSH
10498: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKs-Scout-9
10509: PPUSH
10510: CALL_OW 88
// end ; if IsDead ( Mike ) then
10514: LD_EXP 17
10518: PPUSH
10519: CALL_OW 301
10523: IFFALSE 10690
// begin CenterNowOnUnits ( Kurt ) ;
10525: LD_EXP 25
10529: PPUSH
10530: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10534: LD_EXP 25
10538: PPUSH
10539: LD_STRING DKs-Scout-b-1
10541: PPUSH
10542: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10546: LD_EXP 25
10550: PPUSH
10551: LD_STRING DKs-Scout-b-2
10553: PPUSH
10554: CALL_OW 88
// if IsOk ( Givi ) then
10558: LD_EXP 16
10562: PPUSH
10563: CALL_OW 302
10567: IFFALSE 10642
// begin ComExit ( Givi ) ;
10569: LD_EXP 16
10573: PPUSH
10574: CALL 54588 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10578: LD_EXP 16
10582: PPUSH
10583: LD_EXP 25
10587: PPUSH
10588: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10592: LD_EXP 16
10596: PPUSH
10597: LD_STRING DG-Scout-b-3
10599: PPUSH
10600: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10604: LD_EXP 16
10608: PPUSH
10609: LD_STRING DG-Scout-b-4
10611: PPUSH
10612: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10616: LD_EXP 16
10620: PPUSH
10621: LD_STRING DG-Scout-b-5
10623: PPUSH
10624: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10628: LD_EXP 15
10632: PPUSH
10633: LD_STRING DH-Scout-b-6
10635: PPUSH
10636: CALL_OW 88
// end else
10640: GO 10654
// Say ( Heike , DH-Scout-a-4 ) ;
10642: LD_EXP 15
10646: PPUSH
10647: LD_STRING DH-Scout-a-4
10649: PPUSH
10650: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10654: LD_EXP 25
10658: PPUSH
10659: LD_STRING DKs-Scout-b-7
10661: PPUSH
10662: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10666: LD_EXP 25
10670: PPUSH
10671: LD_STRING DKs-Scout-b-8
10673: PPUSH
10674: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10678: LD_EXP 25
10682: PPUSH
10683: LD_STRING DKs-Scout-b-9
10685: PPUSH
10686: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10690: LD_EXP 25
10694: PPUSH
10695: CALL_OW 301
10699: IFFALSE 10978
// begin CenterNowOnUnits ( Mike ) ;
10701: LD_EXP 17
10705: PPUSH
10706: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10710: LD_EXP 17
10714: PPUSH
10715: LD_STRING DM-Scout-a-1
10717: PPUSH
10718: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10722: LD_EXP 17
10726: PPUSH
10727: LD_STRING DM-Scout-a-2
10729: PPUSH
10730: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10734: LD_EXP 17
10738: PPUSH
10739: CALL_OW 256
10743: PUSH
10744: LD_INT 1000
10746: LESS
10747: IFFALSE 10763
// Say ( Heike , DH-Scout-a-3 ) else
10749: LD_EXP 15
10753: PPUSH
10754: LD_STRING DH-Scout-a-3
10756: PPUSH
10757: CALL_OW 88
10761: GO 10775
// Say ( Heike , DH-Scout-a-4 ) ;
10763: LD_EXP 15
10767: PPUSH
10768: LD_STRING DH-Scout-a-4
10770: PPUSH
10771: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10775: LD_EXP 17
10779: PPUSH
10780: LD_STRING DM-Scout-a-5
10782: PPUSH
10783: CALL_OW 88
// if IsOk ( Kaia ) then
10787: LD_EXP 20
10791: PPUSH
10792: CALL_OW 302
10796: IFFALSE 10978
// begin ComExit ( Kaia ) ;
10798: LD_EXP 20
10802: PPUSH
10803: CALL 54588 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10807: LD_EXP 20
10811: PPUSH
10812: LD_EXP 17
10816: PPUSH
10817: CALL_OW 172
// wait ( 0 0$2 ) ;
10821: LD_INT 70
10823: PPUSH
10824: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10828: LD_EXP 20
10832: PPUSH
10833: LD_EXP 17
10837: PPUSH
10838: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10842: LD_EXP 17
10846: PPUSH
10847: LD_EXP 20
10851: PPUSH
10852: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10856: LD_EXP 20
10860: PPUSH
10861: LD_STRING DK-Scout-a-6
10863: PPUSH
10864: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10868: LD_EXP 17
10872: PPUSH
10873: LD_STRING DM-Scout-a-7
10875: PPUSH
10876: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10880: LD_EXP 20
10884: PPUSH
10885: LD_STRING DK-Scout-a-8
10887: PPUSH
10888: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10892: LD_EXP 20
10896: PPUSH
10897: LD_STRING DK-Scout-a-9
10899: PPUSH
10900: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10904: LD_EXP 15
10908: PPUSH
10909: LD_STRING DH-Scout-a-10
10911: PPUSH
10912: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10916: LD_EXP 17
10920: PPUSH
10921: LD_EXP 15
10925: PPUSH
10926: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10930: LD_EXP 17
10934: PPUSH
10935: LD_STRING DM-Scout-a-11
10937: PPUSH
10938: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10942: LD_EXP 17
10946: PPUSH
10947: LD_STRING DM-Scout-a-12
10949: PPUSH
10950: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10954: LD_EXP 17
10958: PPUSH
10959: LD_STRING DM-Scout-a-13
10961: PPUSH
10962: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10966: LD_EXP 17
10970: PPUSH
10971: LD_STRING DM-Scout-a-14
10973: PPUSH
10974: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10978: LD_EXP 16
10982: PPUSH
10983: CALL_OW 302
10987: IFFALSE 11015
// begin Say ( Givi , DG-Scout-10 ) ;
10989: LD_EXP 16
10993: PPUSH
10994: LD_STRING DG-Scout-10
10996: PPUSH
10997: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11001: LD_EXP 16
11005: PPUSH
11006: LD_STRING DG-Scout-11
11008: PPUSH
11009: CALL_OW 88
// end else
11013: GO 11072
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11015: LD_EXP 27
11019: PPUSH
11020: LD_INT 26
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 72
11034: PPUSH
11035: LD_STRING DArm-Scout-10
11037: PPUSH
11038: CALL 224 0 2
11042: NOT
11043: IFFALSE 11072
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11045: LD_EXP 27
11049: PPUSH
11050: LD_INT 26
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 72
11064: PPUSH
11065: LD_STRING DArf-Scout-10
11067: PPUSH
11068: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11072: LD_EXP 15
11076: PPUSH
11077: LD_STRING DH-Scout-12
11079: PPUSH
11080: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11084: LD_EXP 15
11088: PPUSH
11089: LD_STRING DH-Scout-13
11091: PPUSH
11092: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11096: LD_EXP 17
11100: PPUSH
11101: CALL_OW 302
11105: PUSH
11106: LD_EXP 25
11110: PPUSH
11111: CALL_OW 302
11115: AND
11116: IFFALSE 11144
// begin Say ( Mike , DM-Scout-14 ) ;
11118: LD_EXP 17
11122: PPUSH
11123: LD_STRING DM-Scout-14
11125: PPUSH
11126: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11130: LD_EXP 15
11134: PPUSH
11135: LD_STRING DH-Scout-c-14
11137: PPUSH
11138: CALL_OW 88
// end else
11142: GO 11237
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11144: LD_EXP 17
11148: PPUSH
11149: CALL_OW 302
11153: PUSH
11154: LD_EXP 25
11158: PPUSH
11159: CALL_OW 302
11163: XOR
11164: IFFALSE 11225
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11166: LD_EXP 27
11170: PPUSH
11171: LD_INT 26
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 72
11185: PPUSH
11186: LD_STRING DArm-Scout-a-14
11188: PPUSH
11189: CALL 224 0 2
11193: NOT
11194: IFFALSE 11223
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11196: LD_EXP 27
11200: PPUSH
11201: LD_INT 26
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 72
11215: PPUSH
11216: LD_STRING DArf-Scout-a-14
11218: PPUSH
11219: CALL 224 0 2
// end else
11223: GO 11237
// Say ( Heike , DH-Scout-d-14 ) ;
11225: LD_EXP 15
11229: PPUSH
11230: LD_STRING DH-Scout-d-14
11232: PPUSH
11233: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11237: LD_EXP 15
11241: PPUSH
11242: LD_STRING DH-Scout-15
11244: PPUSH
11245: CALL_OW 88
// InGameOff ;
11249: CALL_OW 9
// wait ( 1 1$00 ) ;
11253: LD_INT 2100
11255: PPUSH
11256: CALL_OW 67
// usAttacksAllowed := true ;
11260: LD_ADDR_EXP 6
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
// end ;
11268: PPOPN 2
11270: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11271: LD_EXP 4
11275: IFFALSE 11452
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
// begin spoken := true ;
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11291: LD_INT 1050
11293: PPUSH
11294: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11298: LD_EXP 15
11302: PPUSH
11303: LD_STRING DH-Scout-c-1
11305: PPUSH
11306: CALL_OW 88
// if not IsOk ( Givi ) then
11310: LD_EXP 16
11314: PPUSH
11315: CALL_OW 302
11319: NOT
11320: IFFALSE 11324
// exit ;
11322: GO 11452
// if IsOk ( Givi ) then
11324: LD_EXP 16
11328: PPUSH
11329: CALL_OW 302
11333: IFFALSE 11361
// begin Say ( Givi , DG-Scout-c-2 ) ;
11335: LD_EXP 16
11339: PPUSH
11340: LD_STRING DG-Scout-c-2
11342: PPUSH
11343: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11347: LD_EXP 16
11351: PPUSH
11352: LD_STRING DG-Scout-c-3
11354: PPUSH
11355: CALL_OW 88
// end else
11359: GO 11434
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11361: LD_ADDR_VAR 0 1
11365: PUSH
11366: LD_EXP 27
11370: PPUSH
11371: LD_INT 26
11373: PUSH
11374: LD_INT 1
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 72
11385: PPUSH
11386: LD_STRING DArm-Scout-c-3
11388: PPUSH
11389: CALL 224 0 2
11393: ST_TO_ADDR
// if not spoken then
11394: LD_VAR 0 1
11398: NOT
11399: IFFALSE 11434
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_EXP 27
11410: PPUSH
11411: LD_INT 26
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 72
11425: PPUSH
11426: LD_STRING DArf-Scout-c-3
11428: PPUSH
11429: CALL 224 0 2
11433: ST_TO_ADDR
// ; end ; if spoken then
11434: LD_VAR 0 1
11438: IFFALSE 11452
// Say ( Heike , DH-Scout-c-4 ) ;
11440: LD_EXP 15
11444: PPUSH
11445: LD_STRING DH-Scout-c-4
11447: PPUSH
11448: CALL_OW 88
// end ;
11452: PPOPN 1
11454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11455: LD_INT 22
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 30
11467: PUSH
11468: LD_INT 7
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PPUSH
11479: CALL_OW 69
11483: PUSH
11484: LD_EXP 26
11488: PPUSH
11489: CALL_OW 302
11493: AND
11494: IFFALSE 11579
11496: GO 11498
11498: DISABLE
// begin DialogueOn ;
11499: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11503: LD_EXP 26
11507: PPUSH
11508: LD_STRING DA-Lab-1
11510: PPUSH
11511: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11515: LD_EXP 15
11519: PPUSH
11520: LD_STRING DH-Lab-2
11522: PPUSH
11523: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11527: LD_EXP 26
11531: PPUSH
11532: LD_STRING DA-Lab-3
11534: PPUSH
11535: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11539: LD_EXP 26
11543: PPUSH
11544: LD_STRING DA-Lab-4
11546: PPUSH
11547: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11551: LD_EXP 26
11555: PPUSH
11556: LD_STRING DA-Lab-5
11558: PPUSH
11559: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11563: LD_EXP 15
11567: PPUSH
11568: LD_STRING DH-Lab-6
11570: PPUSH
11571: CALL_OW 88
// DialogueOff ;
11575: CALL_OW 7
// end ;
11579: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11580: LD_INT 7
11582: PPUSH
11583: LD_INT 2
11585: PPUSH
11586: CALL_OW 321
11590: PUSH
11591: LD_INT 2
11593: EQUAL
11594: PUSH
11595: LD_EXP 16
11599: PPUSH
11600: CALL_OW 302
11604: AND
11605: IFFALSE 11774
11607: GO 11609
11609: DISABLE
// begin DialogueOn ;
11610: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11614: LD_EXP 16
11618: PPUSH
11619: LD_STRING DG-Opt-1
11621: PPUSH
11622: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11626: LD_EXP 15
11630: PPUSH
11631: LD_STRING DH-Opt-2
11633: PPUSH
11634: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11638: LD_EXP 16
11642: PPUSH
11643: LD_STRING DG-Opt-3
11645: PPUSH
11646: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11650: LD_EXP 16
11654: PPUSH
11655: LD_STRING DG-Opt-4
11657: PPUSH
11658: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11662: LD_EXP 15
11666: PPUSH
11667: LD_STRING DH-Opt-5
11669: PPUSH
11670: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11674: LD_EXP 16
11678: PPUSH
11679: LD_STRING DG-Opt-6
11681: PPUSH
11682: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11686: LD_EXP 15
11690: PPUSH
11691: LD_STRING DH-Opt-7
11693: PPUSH
11694: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11698: LD_EXP 16
11702: PPUSH
11703: LD_STRING DG-Opt-8
11705: PPUSH
11706: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11710: LD_EXP 16
11714: PPUSH
11715: LD_STRING DG-Opt-9
11717: PPUSH
11718: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11722: LD_EXP 15
11726: PPUSH
11727: LD_STRING DH-Opt-10
11729: PPUSH
11730: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11734: LD_EXP 16
11738: PPUSH
11739: LD_STRING DG-Opt-11
11741: PPUSH
11742: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11746: LD_EXP 16
11750: PPUSH
11751: LD_STRING DG-Opt-12
11753: PPUSH
11754: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11758: LD_EXP 15
11762: PPUSH
11763: LD_STRING DH-Opt-13
11765: PPUSH
11766: CALL_OW 88
// DialogueOff ;
11770: CALL_OW 7
// end ;
11774: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11775: LD_EXP 27
11779: PPUSH
11780: LD_INT 95
11782: PUSH
11783: LD_INT 7
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 23
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 26
11802: PUSH
11803: LD_INT 1
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 72
11819: IFFALSE 11880
11821: GO 11823
11823: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11824: LD_EXP 27
11828: PPUSH
11829: LD_INT 95
11831: PUSH
11832: LD_INT 7
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 23
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 26
11851: PUSH
11852: LD_INT 1
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 72
11868: PUSH
11869: LD_INT 1
11871: ARRAY
11872: PPUSH
11873: LD_STRING DArm-River
11875: PPUSH
11876: CALL_OW 88
// end ;
11880: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11881: LD_INT 40
11883: PPUSH
11884: LD_INT 2
11886: PPUSH
11887: CALL_OW 321
11891: PUSH
11892: LD_INT 2
11894: EQUAL
11895: PUSH
11896: LD_EXP 18
11900: PPUSH
11901: CALL_OW 302
11905: AND
11906: IFFALSE 12156
11908: GO 11910
11910: DISABLE
// begin DialogueOn ;
11911: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11915: LD_EXP 18
11919: PPUSH
11920: LD_STRING DI-Roc-1
11922: PPUSH
11923: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11927: LD_EXP 15
11931: PPUSH
11932: LD_STRING DH-Roc-2
11934: PPUSH
11935: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11939: LD_EXP 18
11943: PPUSH
11944: LD_STRING DI-Roc-3
11946: PPUSH
11947: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11951: LD_EXP 18
11955: PPUSH
11956: LD_STRING DI-Roc-4
11958: PPUSH
11959: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11963: LD_EXP 20
11967: PPUSH
11968: LD_STRING DK-Roc-5
11970: PPUSH
11971: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11975: LD_EXP 20
11979: PPUSH
11980: LD_STRING DK-Roc-6
11982: PPUSH
11983: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11987: LD_EXP 16
11991: PPUSH
11992: LD_STRING DG-Roc-7
11994: PPUSH
11995: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11999: LD_EXP 16
12003: PPUSH
12004: LD_STRING DG-Roc-8
12006: PPUSH
12007: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12011: LD_EXP 22
12015: PPUSH
12016: CALL_OW 302
12020: PUSH
12021: LD_EXP 20
12025: PPUSH
12026: CALL_OW 302
12030: AND
12031: PUSH
12032: LD_EXP 16
12036: PPUSH
12037: CALL_OW 302
12041: AND
12042: IFFALSE 12152
// begin Say ( Markov , DMar-Roc-9 ) ;
12044: LD_EXP 22
12048: PPUSH
12049: LD_STRING DMar-Roc-9
12051: PPUSH
12052: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12056: LD_EXP 22
12060: PPUSH
12061: LD_STRING DMar-Roc-10
12063: PPUSH
12064: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12068: LD_EXP 20
12072: PPUSH
12073: LD_STRING DK-Roc-11
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12080: LD_EXP 22
12084: PPUSH
12085: LD_STRING DMar-Roc-12
12087: PPUSH
12088: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12092: LD_EXP 20
12096: PPUSH
12097: LD_STRING DK-Roc-13
12099: PPUSH
12100: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12104: LD_EXP 16
12108: PPUSH
12109: LD_STRING DG-Roc-14
12111: PPUSH
12112: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12116: LD_EXP 22
12120: PPUSH
12121: LD_STRING DMar-Roc-15
12123: PPUSH
12124: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12128: LD_EXP 22
12132: PPUSH
12133: LD_STRING DMar-Roc-16
12135: PPUSH
12136: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12140: LD_EXP 20
12144: PPUSH
12145: LD_STRING DK-Roc-17
12147: PPUSH
12148: CALL_OW 88
// end ; DialogueOff ;
12152: CALL_OW 7
// end ;
12156: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12157: LD_EXP 30
12161: PPUSH
12162: CALL_OW 256
12166: PUSH
12167: LD_INT 1000
12169: LESS
12170: PUSH
12171: LD_INT 22
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 21
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 23
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: PUSH
12211: LD_INT 6
12213: LESS
12214: OR
12215: PUSH
12216: LD_INT 22
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 21
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 25
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 69
12255: PUSH
12256: LD_INT 2
12258: LESS
12259: OR
12260: IFFALSE 13536
12262: GO 12264
12264: DISABLE
12265: LD_INT 0
12267: PPUSH
12268: PPUSH
12269: PPUSH
// begin usAttacksAllowed := false ;
12270: LD_ADDR_EXP 6
12274: PUSH
12275: LD_INT 0
12277: ST_TO_ADDR
// usSurrender := true ;
12278: LD_ADDR_EXP 7
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12286: LD_INT 1
12288: PPUSH
12289: LD_INT 2
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 80
// if IsDead ( usCommander ) then
12302: LD_EXP 30
12306: PPUSH
12307: CALL_OW 301
12311: IFFALSE 12315
// exit ;
12313: GO 13536
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12315: LD_ADDR_VAR 0 1
12319: PUSH
12320: LD_INT 22
12322: PUSH
12323: LD_INT 2
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 21
12332: PUSH
12333: LD_INT 1
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 60
12342: PUSH
12343: EMPTY
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12370
// ComStop ( i ) ;
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 141
12368: GO 12356
12370: POP
12371: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12372: LD_ADDR_VAR 0 1
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 3
12389: PUSH
12390: LD_INT 50
12392: PUSH
12393: EMPTY
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: PUSH
12420: FOR_IN
12421: IFFALSE 12437
// SetLives ( i , 251 ) ;
12423: LD_VAR 0 1
12427: PPUSH
12428: LD_INT 251
12430: PPUSH
12431: CALL_OW 234
12435: GO 12420
12437: POP
12438: POP
// Video ( true ) ;
12439: LD_INT 1
12441: PPUSH
12442: CALL 54162 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PPUSH
12461: CALL_OW 69
12465: PUSH
12466: FOR_IN
12467: IFFALSE 12480
// ComStop ( i ) ;
12469: LD_VAR 0 1
12473: PPUSH
12474: CALL_OW 141
12478: GO 12466
12480: POP
12481: POP
// if not IsOk ( usCommander ) then
12482: LD_EXP 30
12486: PPUSH
12487: CALL_OW 302
12491: NOT
12492: IFFALSE 12506
// SetLives ( usCommander , 1000 ) ;
12494: LD_EXP 30
12498: PPUSH
12499: LD_INT 1000
12501: PPUSH
12502: CALL_OW 234
// InGameOn ;
12506: CALL_OW 8
// ComExit ( usCommander ) ;
12510: LD_EXP 30
12514: PPUSH
12515: CALL 54588 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12519: LD_EXP 30
12523: PPUSH
12524: LD_INT 81
12526: PPUSH
12527: LD_INT 143
12529: PPUSH
12530: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12534: LD_EXP 30
12538: PPUSH
12539: LD_INT 81
12541: PPUSH
12542: LD_INT 139
12544: PPUSH
12545: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12549: LD_INT 81
12551: PPUSH
12552: LD_INT 144
12554: PPUSH
12555: LD_INT 2
12557: PPUSH
12558: LD_INT 10
12560: NEG
12561: PPUSH
12562: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12566: LD_EXP 30
12570: PPUSH
12571: CALL_OW 87
// wait ( 0 0$2 ) ;
12575: LD_INT 70
12577: PPUSH
12578: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12582: LD_EXP 30
12586: PPUSH
12587: LD_STRING DCa-Surrender-1
12589: PPUSH
12590: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12594: LD_EXP 15
12598: PPUSH
12599: LD_STRING DH-Surrender-2
12601: PPUSH
12602: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12606: LD_EXP 15
12610: PPUSH
12611: CALL_OW 310
12615: PPUSH
12616: CALL_OW 247
12620: PUSH
12621: LD_INT 3
12623: EQUAL
12624: IFFALSE 12642
// begin ComExit ( Heike ) ;
12626: LD_EXP 15
12630: PPUSH
12631: CALL 54588 0 1
// wait ( 3 ) ;
12635: LD_INT 3
12637: PPUSH
12638: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12642: LD_EXP 15
12646: PPUSH
12647: LD_INT 82
12649: PPUSH
12650: LD_INT 133
12652: PPUSH
12653: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12657: LD_EXP 15
12661: PPUSH
12662: LD_EXP 30
12666: PPUSH
12667: CALL_OW 179
// wait ( 0 0$3 ) ;
12671: LD_INT 105
12673: PPUSH
12674: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12678: LD_EXP 15
12682: PPUSH
12683: LD_STRING DH-Surrender-3
12685: PPUSH
12686: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12690: LD_EXP 15
12694: PPUSH
12695: LD_STRING DH-Surrender-4
12697: PPUSH
12698: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12702: LD_INT 81
12704: PPUSH
12705: LD_INT 144
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12715: LD_INT 1
12717: PPUSH
12718: LD_INT 2
12720: PPUSH
12721: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 1
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 23
12742: PUSH
12743: LD_INT 1
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 54
12752: PUSH
12753: EMPTY
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: LIST
12760: PPUSH
12761: CALL_OW 69
12765: PUSH
12766: FOR_IN
12767: IFFALSE 12780
// ComExit ( i ) ;
12769: LD_VAR 0 1
12773: PPUSH
12774: CALL 54588 0 1
12778: GO 12766
12780: POP
12781: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12782: LD_ADDR_VAR 0 3
12786: PUSH
12787: LD_INT 22
12789: PUSH
12790: LD_INT 1
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 25
12799: PUSH
12800: LD_INT 4
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 69
12815: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: LD_INT 22
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: LD_INT 50
12836: PUSH
12837: EMPTY
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: ST_TO_ADDR
// if sci and hurts then
12853: LD_VAR 0 3
12857: PUSH
12858: LD_VAR 0 2
12862: AND
12863: IFFALSE 12925
// begin for i := 1 to hurts do
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: DOUBLE
12871: LD_INT 1
12873: DEC
12874: ST_TO_ADDR
12875: LD_VAR 0 2
12879: PUSH
12880: FOR_TO
12881: IFFALSE 12923
// if i <= sci then
12883: LD_VAR 0 1
12887: PUSH
12888: LD_VAR 0 3
12892: LESSEQUAL
12893: IFFALSE 12921
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12895: LD_VAR 0 3
12899: PUSH
12900: LD_VAR 0 1
12904: ARRAY
12905: PPUSH
12906: LD_VAR 0 2
12910: PUSH
12911: LD_VAR 0 1
12915: ARRAY
12916: PPUSH
12917: CALL_OW 188
12921: GO 12880
12923: POP
12924: POP
// end ; if IsOk ( Givi ) then
12925: LD_EXP 16
12929: PPUSH
12930: CALL_OW 302
12934: IFFALSE 12950
// Say ( Givi , DG-Surrender-5 ) else
12936: LD_EXP 16
12940: PPUSH
12941: LD_STRING DG-Surrender-5
12943: PPUSH
12944: CALL_OW 88
12948: GO 12962
// Say ( Heike , DH-Surrender-a-5 ) ;
12950: LD_EXP 15
12954: PPUSH
12955: LD_STRING DH-Surrender-a-5
12957: PPUSH
12958: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12962: LD_EXP 30
12966: PPUSH
12967: LD_STRING DCa-Surrender-6
12969: PPUSH
12970: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12974: LD_EXP 30
12978: PPUSH
12979: LD_STRING DCa-Surrender-7
12981: PPUSH
12982: CALL_OW 88
// if IsOk ( Givi ) then
12986: LD_EXP 16
12990: PPUSH
12991: CALL_OW 302
12995: IFFALSE 13011
// Say ( Givi , DG-Surrender-8 ) else
12997: LD_EXP 16
13001: PPUSH
13002: LD_STRING DG-Surrender-8
13004: PPUSH
13005: CALL_OW 88
13009: GO 13023
// Say ( Heike , DH-Surrender-a-8 ) ;
13011: LD_EXP 15
13015: PPUSH
13016: LD_STRING DH-Surrender-a-8
13018: PPUSH
13019: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13023: LD_EXP 30
13027: PPUSH
13028: LD_STRING DCa-Surrender-9
13030: PPUSH
13031: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13035: LD_EXP 15
13039: PPUSH
13040: LD_STRING DH-Surrender-10
13042: PPUSH
13043: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13047: LD_EXP 30
13051: PPUSH
13052: LD_STRING DCa-Surrender-11
13054: PPUSH
13055: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13059: LD_EXP 15
13063: PPUSH
13064: LD_STRING DH-Surrender-12
13066: PPUSH
13067: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13071: LD_EXP 30
13075: PPUSH
13076: LD_STRING DCa-Surrender-13
13078: PPUSH
13079: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13083: LD_EXP 30
13087: PPUSH
13088: LD_STRING DCa-Surrender-14
13090: PPUSH
13091: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13095: LD_EXP 30
13099: PPUSH
13100: LD_STRING DCa-Surrender-15
13102: PPUSH
13103: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13107: LD_EXP 30
13111: PPUSH
13112: LD_STRING DCa-Surrender-16
13114: PPUSH
13115: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13119: LD_EXP 20
13123: PPUSH
13124: LD_STRING DK-Surrender-17
13126: PPUSH
13127: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13131: LD_EXP 24
13135: PPUSH
13136: LD_STRING DO-Surrender-18
13138: PPUSH
13139: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13143: LD_EXP 24
13147: PPUSH
13148: LD_STRING DO-Surrender-19
13150: PPUSH
13151: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13155: LD_EXP 25
13159: PPUSH
13160: LD_STRING DKs-Surrender-20
13162: PPUSH
13163: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13167: LD_EXP 25
13171: PPUSH
13172: LD_STRING DKs-Surrender-21
13174: PPUSH
13175: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13179: LD_EXP 22
13183: PPUSH
13184: LD_STRING DMar-Surrender-22
13186: PPUSH
13187: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13191: LD_EXP 22
13195: PPUSH
13196: LD_STRING DMar-Surrender-23
13198: PPUSH
13199: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13203: LD_EXP 21
13207: PPUSH
13208: LD_STRING DS-Surrender-24
13210: PPUSH
13211: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13215: LD_EXP 26
13219: PPUSH
13220: LD_STRING DA-Surrender-25
13222: PPUSH
13223: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13227: LD_EXP 18
13231: PPUSH
13232: LD_STRING DI-Surrender-26
13234: PPUSH
13235: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13239: LD_EXP 19
13243: PPUSH
13244: LD_STRING DKam-Surrender-27
13246: PPUSH
13247: CALL_OW 88
// if IsOk ( Givi ) then
13251: LD_EXP 16
13255: PPUSH
13256: CALL_OW 302
13260: IFFALSE 13300
// begin Say ( Givi , DG-Surrender-28 ) ;
13262: LD_EXP 16
13266: PPUSH
13267: LD_STRING DG-Surrender-28
13269: PPUSH
13270: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13274: LD_EXP 16
13278: PPUSH
13279: LD_STRING DG-Surrender-29
13281: PPUSH
13282: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13286: LD_EXP 16
13290: PPUSH
13291: LD_STRING DG-Surrender-30
13293: PPUSH
13294: CALL_OW 88
// end else
13298: GO 13336
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13300: LD_EXP 15
13304: PPUSH
13305: LD_STRING DH-Surrender-a-28
13307: PPUSH
13308: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13312: LD_EXP 15
13316: PPUSH
13317: LD_STRING DH-Surrender-a-29
13319: PPUSH
13320: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13324: LD_EXP 15
13328: PPUSH
13329: LD_STRING DH-Surrender-a-30
13331: PPUSH
13332: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13336: CALL 15325 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13340: LD_INT 22
13342: PUSH
13343: LD_INT 3
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: PPUSH
13355: LD_INT 176
13357: PUSH
13358: LD_INT 123
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: PPUSH
13368: CALL 56794 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13372: LD_INT 190
13374: PPUSH
13375: LD_INT 150
13377: PPUSH
13378: LD_INT 2
13380: PPUSH
13381: LD_INT 8
13383: NEG
13384: PPUSH
13385: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13389: LD_INT 193
13391: PPUSH
13392: LD_INT 150
13394: PPUSH
13395: CALL_OW 84
// if IsOk ( Markov ) then
13399: LD_EXP 22
13403: PPUSH
13404: CALL_OW 302
13408: IFFALSE 13424
// Say ( Markov , DMar-Surrender-31 ) else
13410: LD_EXP 22
13414: PPUSH
13415: LD_STRING DMar-Surrender-31
13417: PPUSH
13418: CALL_OW 88
13422: GO 13481
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13424: LD_EXP 27
13428: PPUSH
13429: LD_INT 26
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: PPUSH
13444: LD_STRING DArm-Surrender-a-31
13446: PPUSH
13447: CALL 224 0 2
13451: NOT
13452: IFFALSE 13481
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13454: LD_EXP 27
13458: PPUSH
13459: LD_INT 26
13461: PUSH
13462: LD_INT 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 72
13473: PPUSH
13474: LD_STRING DArf-Surrender-a-31
13476: PPUSH
13477: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13481: LD_EXP 15
13485: PPUSH
13486: LD_STRING DH-Surrender-32
13488: PPUSH
13489: CALL_OW 88
// InGameOff ;
13493: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13497: LD_STRING M2
13499: PPUSH
13500: CALL_OW 337
// wait ( 0 0$20 ) ;
13504: LD_INT 700
13506: PPUSH
13507: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13511: CALL 15687 0 0
// russianAttack := true ;
13515: LD_ADDR_EXP 8
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13523: LD_INT 190
13525: PPUSH
13526: LD_INT 150
13528: PPUSH
13529: LD_INT 2
13531: PPUSH
13532: CALL_OW 331
// end ;
13536: PPOPN 3
13538: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13539: LD_EXP 11
13543: PUSH
13544: LD_INT 2
13546: PPUSH
13547: CALL_OW 463
13551: NOT
13552: AND
13553: PUSH
13554: LD_EXP 15
13558: PPUSH
13559: CALL_OW 302
13563: AND
13564: PUSH
13565: LD_INT 22
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 30
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PPUSH
13589: CALL_OW 69
13593: AND
13594: PUSH
13595: LD_EXP 22
13599: PPUSH
13600: CALL_OW 302
13604: PUSH
13605: LD_EXP 27
13609: PPUSH
13610: LD_INT 50
13612: PUSH
13613: EMPTY
13614: LIST
13615: PPUSH
13616: CALL_OW 72
13620: OR
13621: AND
13622: IFFALSE 13850
13624: GO 13626
13626: DISABLE
// begin DialogueOn ;
13627: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13631: LD_EXP 15
13635: PPUSH
13636: LD_STRING DH-Heavy-1
13638: PPUSH
13639: CALL_OW 88
// if IsOk ( Markov ) then
13643: LD_EXP 22
13647: PPUSH
13648: CALL_OW 302
13652: IFFALSE 13777
// begin Say ( Markov , DMar-Heavy-2 ) ;
13654: LD_EXP 22
13658: PPUSH
13659: LD_STRING DMar-Heavy-2
13661: PPUSH
13662: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13666: LD_INT 22
13668: PUSH
13669: LD_INT 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 30
13678: PUSH
13679: LD_INT 3
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13703: LD_EXP 22
13707: PPUSH
13708: LD_STRING DMar-Heavy-3
13710: PPUSH
13711: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13715: LD_EXP 22
13719: PPUSH
13720: LD_STRING DMar-Heavy-4
13722: PPUSH
13723: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13727: LD_EXP 22
13731: PPUSH
13732: LD_STRING DMar-Heavy-5
13734: PPUSH
13735: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13739: LD_EXP 22
13743: PPUSH
13744: LD_STRING DMar-Heavy-6
13746: PPUSH
13747: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13751: LD_EXP 15
13755: PPUSH
13756: LD_STRING DH-Heavy-7
13758: PPUSH
13759: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13763: LD_EXP 15
13767: PPUSH
13768: LD_STRING DH-Heavy-8
13770: PPUSH
13771: CALL_OW 88
// end else
13775: GO 13834
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13777: LD_EXP 27
13781: PPUSH
13782: LD_INT 26
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: PPUSH
13797: LD_STRING DArm-Heavy-a-2
13799: PPUSH
13800: CALL 224 0 2
13804: NOT
13805: IFFALSE 13834
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13807: LD_EXP 27
13811: PPUSH
13812: LD_INT 26
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 72
13826: PPUSH
13827: LD_STRING DArf-Heavy-a-2
13829: PPUSH
13830: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13834: LD_EXP 15
13838: PPUSH
13839: LD_STRING DH-Heavy-9
13841: PPUSH
13842: CALL_OW 88
// DialogueOff ;
13846: CALL_OW 7
// end ;
13850: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13851: LD_EXP 34
13855: PPUSH
13856: LD_INT 101
13858: PUSH
13859: LD_INT 2
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 72
13870: PUSH
13871: LD_EXP 15
13875: PPUSH
13876: CALL_OW 302
13880: AND
13881: PUSH
13882: LD_EXP 7
13886: NOT
13887: AND
13888: IFFALSE 14031
13890: GO 13892
13892: DISABLE
// begin DialogueOn ;
13893: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13897: LD_EXP 34
13901: PPUSH
13902: LD_INT 101
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 72
13916: PPUSH
13917: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13921: LD_EXP 15
13925: PPUSH
13926: LD_STRING DH-Flank-1
13928: PPUSH
13929: CALL_OW 88
// if IsOk ( Mike ) then
13933: LD_EXP 17
13937: PPUSH
13938: CALL_OW 302
13942: IFFALSE 13958
// Say ( Mike , DM-Flank-2 ) else
13944: LD_EXP 17
13948: PPUSH
13949: LD_STRING DM-Flank-2
13951: PPUSH
13952: CALL_OW 88
13956: GO 14015
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13958: LD_EXP 27
13962: PPUSH
13963: LD_INT 26
13965: PUSH
13966: LD_INT 1
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PPUSH
13973: CALL_OW 72
13977: PPUSH
13978: LD_STRING DArm-Flank-a-2
13980: PPUSH
13981: CALL 224 0 2
13985: NOT
13986: IFFALSE 14015
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13988: LD_EXP 27
13992: PPUSH
13993: LD_INT 26
13995: PUSH
13996: LD_INT 2
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 72
14007: PPUSH
14008: LD_STRING DArm-Flank-a-2
14010: PPUSH
14011: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14015: LD_EXP 15
14019: PPUSH
14020: LD_STRING DH-Flank-3
14022: PPUSH
14023: CALL_OW 88
// DialogueOff ;
14027: CALL_OW 7
// end ;
14031: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14032: LD_EXP 10
14036: PUSH
14037: LD_EXP 7
14041: NOT
14042: AND
14043: IFFALSE 14267
14045: GO 14047
14047: DISABLE
// begin DialogueOn ;
14048: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14052: LD_EXP 15
14056: PPUSH
14057: LD_STRING DH-USRC-1
14059: PPUSH
14060: CALL_OW 88
// if IsOk ( Markov ) then
14064: LD_EXP 22
14068: PPUSH
14069: CALL_OW 302
14073: IFFALSE 14089
// Say ( Markov , DMar-USRC-2 ) else
14075: LD_EXP 22
14079: PPUSH
14080: LD_STRING DMar-USRC-2
14082: PPUSH
14083: CALL_OW 88
14087: GO 14146
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14089: LD_EXP 27
14093: PPUSH
14094: LD_INT 26
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 72
14108: PPUSH
14109: LD_STRING DArm-USRC-a-2
14111: PPUSH
14112: CALL 224 0 2
14116: NOT
14117: IFFALSE 14146
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14119: LD_EXP 27
14123: PPUSH
14124: LD_INT 26
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PPUSH
14134: CALL_OW 72
14138: PPUSH
14139: LD_STRING DArf-USRC-a-2
14141: PPUSH
14142: CALL 224 0 2
// DialogueOff ;
14146: CALL_OW 7
// wait ( 0 0$10 ) ;
14150: LD_INT 350
14152: PPUSH
14153: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14157: LD_EXP 15
14161: PPUSH
14162: LD_STRING DH-USRC-3
14164: PPUSH
14165: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14169: LD_INT 35
14171: PPUSH
14172: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14176: LD_INT 2
14178: PPUSH
14179: LD_INT 22
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 30
14191: PUSH
14192: LD_INT 36
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PPUSH
14203: CALL_OW 69
14207: PUSH
14208: LD_INT 1
14210: ARRAY
14211: PPUSH
14212: CALL_OW 292
14216: IFFALSE 14169
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14218: LD_INT 22
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 30
14230: PUSH
14231: LD_INT 36
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PPUSH
14242: CALL_OW 69
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14255: LD_EXP 15
14259: PPUSH
14260: LD_STRING DH-USRCFound-1
14262: PPUSH
14263: CALL_OW 88
// end ;
14267: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14268: LD_EXP 20
14272: PPUSH
14273: CALL_OW 256
14277: PUSH
14278: LD_INT 3
14280: LESS
14281: IFFALSE 14318
14283: GO 14285
14285: DISABLE
// begin DialogueOn ;
14286: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14290: LD_EXP 20
14294: PPUSH
14295: LD_STRING DK-Dead-1
14297: PPUSH
14298: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14302: LD_EXP 20
14306: PPUSH
14307: LD_STRING DK-Dead-2
14309: PPUSH
14310: CALL_OW 91
// DialogueOff ;
14314: CALL_OW 7
// end ;
14318: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14319: LD_INT 22
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 35
14334: PUSH
14335: LD_INT 28
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 34
14344: PUSH
14345: LD_INT 28
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: IFFALSE 14378
14367: GO 14369
14369: DISABLE
// hasRockets := true ;
14370: LD_ADDR_EXP 9
14374: PUSH
14375: LD_INT 1
14377: ST_TO_ADDR
14378: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14379: LD_EXP 8
14383: PUSH
14384: LD_INT 22
14386: PUSH
14387: LD_INT 3
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PPUSH
14394: CALL_OW 69
14398: NOT
14399: AND
14400: IFFALSE 15062
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// if vehLossCounter = 0 then
14409: LD_EXP 14
14413: PUSH
14414: LD_INT 0
14416: EQUAL
14417: IFFALSE 14426
// SetAchievement ( ACH_UNTOUCH ) ;
14419: LD_STRING ACH_UNTOUCH
14421: PPUSH
14422: CALL_OW 543
// if tick < 35 35$00 then
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 73500
14433: LESS
14434: IFFALSE 14443
// SetAchievement ( ACH_HSPEED_7 ) ;
14436: LD_STRING ACH_HSPEED_7
14438: PPUSH
14439: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14443: LD_EXP 15
14447: PPUSH
14448: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14452: LD_EXP 15
14456: PPUSH
14457: LD_STRING DH-End-1
14459: PPUSH
14460: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14464: LD_EXP 23
14468: PPUSH
14469: LD_STRING DShar-End-2
14471: PPUSH
14472: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14476: LD_EXP 20
14480: PPUSH
14481: LD_STRING DK-End-3
14483: PPUSH
14484: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14488: LD_EXP 15
14492: PPUSH
14493: LD_STRING DH-End-4
14495: PPUSH
14496: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14500: LD_EXP 23
14504: PPUSH
14505: LD_STRING DShar-End-5
14507: PPUSH
14508: CALL_OW 94
// if IsOk ( Markov ) then
14512: LD_EXP 22
14516: PPUSH
14517: CALL_OW 302
14521: IFFALSE 14535
// Say ( Kaia , DK-End-6 ) ;
14523: LD_EXP 20
14527: PPUSH
14528: LD_STRING DK-End-6
14530: PPUSH
14531: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14535: LD_EXP 20
14539: PPUSH
14540: LD_STRING DK-End-7
14542: PPUSH
14543: CALL_OW 88
// if IsOk ( Kaia ) then
14547: LD_EXP 20
14551: PPUSH
14552: CALL_OW 302
14556: IFFALSE 14594
// begin Say ( Givi , DG-End-8 ) ;
14558: LD_EXP 16
14562: PPUSH
14563: LD_STRING DG-End-8
14565: PPUSH
14566: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14570: LD_EXP 16
14574: PPUSH
14575: LD_STRING DG-End-9
14577: PPUSH
14578: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14582: LD_EXP 15
14586: PPUSH
14587: LD_STRING DH-End-10
14589: PPUSH
14590: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14594: LD_EXP 15
14598: PPUSH
14599: LD_STRING DH-End-11
14601: PPUSH
14602: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14606: LD_INT 7
14608: PPUSH
14609: LD_INT 2
14611: PPUSH
14612: CALL_OW 321
14616: PUSH
14617: LD_INT 2
14619: EQUAL
14620: IFFALSE 14634
// AddMedal ( med1 , 1 ) else
14622: LD_STRING med1
14624: PPUSH
14625: LD_INT 1
14627: PPUSH
14628: CALL_OW 101
14632: GO 14645
// AddMedal ( med1 , - 1 ) ;
14634: LD_STRING med1
14636: PPUSH
14637: LD_INT 1
14639: NEG
14640: PPUSH
14641: CALL_OW 101
// if hasRockets then
14645: LD_EXP 9
14649: IFFALSE 14663
// AddMedal ( med2 , 1 ) else
14651: LD_STRING med2
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 101
14661: GO 14674
// AddMedal ( med2 , - 1 ) ;
14663: LD_STRING med2
14665: PPUSH
14666: LD_INT 1
14668: NEG
14669: PPUSH
14670: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14674: LD_OWVAR 1
14678: PUSH
14679: LD_INT 105000
14681: PUSH
14682: LD_INT 94500
14684: PUSH
14685: LD_INT 84000
14687: PUSH
14688: LD_INT 73500
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: PUSH
14697: LD_OWVAR 67
14701: ARRAY
14702: LESS
14703: IFFALSE 14717
// AddMedal ( med3 , 1 ) else
14705: LD_STRING med3
14707: PPUSH
14708: LD_INT 1
14710: PPUSH
14711: CALL_OW 101
14715: GO 14728
// AddMedal ( med3 , - 1 ) ;
14717: LD_STRING med3
14719: PPUSH
14720: LD_INT 1
14722: NEG
14723: PPUSH
14724: CALL_OW 101
// GiveMedals ( MAIN ) ;
14728: LD_STRING MAIN
14730: PPUSH
14731: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14735: LD_INT 22
14737: PUSH
14738: LD_INT 2
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 21
14757: PUSH
14758: LD_INT 1
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 69
14774: PPUSH
14775: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14779: LD_EXP 30
14783: PPUSH
14784: LD_STRING 07_UsCommander
14786: PPUSH
14787: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14791: LD_INT 22
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 23
14803: PUSH
14804: LD_INT 1
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 21
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: LIST
14825: PPUSH
14826: CALL_OW 69
14830: PUSH
14831: LD_EXP 30
14835: DIFF
14836: PPUSH
14837: LD_STRING 07_Americans
14839: PPUSH
14840: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14844: LD_EXP 15
14848: PPUSH
14849: LD_STRING 07_Heike
14851: PPUSH
14852: CALL_OW 38
// if Aviradze then
14856: LD_EXP 26
14860: IFFALSE 14874
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14862: LD_EXP 26
14866: PPUSH
14867: LD_STRING 07_Aviradze
14869: PPUSH
14870: CALL_OW 38
// if Ibrahim then
14874: LD_EXP 18
14878: IFFALSE 14892
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14880: LD_EXP 18
14884: PPUSH
14885: LD_STRING 07_Ibrahim
14887: PPUSH
14888: CALL_OW 38
// if Kamil then
14892: LD_EXP 19
14896: IFFALSE 14910
// SaveCharacters ( Kamil , 07_Kamil ) ;
14898: LD_EXP 19
14902: PPUSH
14903: LD_STRING 07_Kamil
14905: PPUSH
14906: CALL_OW 38
// if Sophia then
14910: LD_EXP 21
14914: IFFALSE 14928
// SaveCharacters ( Sophia , 07_Sophia ) ;
14916: LD_EXP 21
14920: PPUSH
14921: LD_STRING 07_Sophia
14923: PPUSH
14924: CALL_OW 38
// if Kaia then
14928: LD_EXP 20
14932: IFFALSE 14946
// SaveCharacters ( Kaia , 07_Kaia ) ;
14934: LD_EXP 20
14938: PPUSH
14939: LD_STRING 07_Kaia
14941: PPUSH
14942: CALL_OW 38
// if Givi then
14946: LD_EXP 16
14950: IFFALSE 14964
// SaveCharacters ( Givi , 07_Givi ) ;
14952: LD_EXP 16
14956: PPUSH
14957: LD_STRING 07_Givi
14959: PPUSH
14960: CALL_OW 38
// if Mike then
14964: LD_EXP 17
14968: IFFALSE 14982
// SaveCharacters ( Mike , 07_Mike ) ;
14970: LD_EXP 17
14974: PPUSH
14975: LD_STRING 07_Mike
14977: PPUSH
14978: CALL_OW 38
// if Markov then
14982: LD_EXP 22
14986: IFFALSE 15000
// SaveCharacters ( Markov , 07_Markov ) ;
14988: LD_EXP 22
14992: PPUSH
14993: LD_STRING 07_Markov
14995: PPUSH
14996: CALL_OW 38
// if Kurt then
15000: LD_EXP 25
15004: IFFALSE 15018
// SaveCharacters ( Kurt , 07_Kurt ) ;
15006: LD_EXP 25
15010: PPUSH
15011: LD_STRING 07_Kurt
15013: PPUSH
15014: CALL_OW 38
// if Olaf then
15018: LD_EXP 24
15022: IFFALSE 15036
// SaveCharacters ( Olaf , 07_Olaf ) ;
15024: LD_EXP 24
15028: PPUSH
15029: LD_STRING 07_Olaf
15031: PPUSH
15032: CALL_OW 38
// if heikeSecondSquad then
15036: LD_EXP 27
15040: IFFALSE 15054
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15042: LD_EXP 27
15046: PPUSH
15047: LD_STRING 07_others
15049: PPUSH
15050: CALL_OW 38
// YouWin ;
15054: CALL_OW 103
// DialogueOff ;
15058: CALL_OW 7
// end ; end_of_file
15062: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15063: LD_INT 7
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 287
15073: PUSH
15074: LD_INT 12
15076: PUSH
15077: LD_INT 10
15079: PUSH
15080: LD_INT 8
15082: PUSH
15083: LD_INT 8
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: PUSH
15092: LD_OWVAR 67
15096: ARRAY
15097: LESS
15098: IFFALSE 15125
15100: GO 15102
15102: DISABLE
// begin enable ;
15103: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15104: LD_INT 1
15106: PPUSH
15107: LD_INT 5
15109: PPUSH
15110: CALL_OW 12
15114: PPUSH
15115: LD_INT 7
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 55
// end ;
15125: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15126: LD_INT 8
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 287
15136: PUSH
15137: LD_INT 25
15139: PUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 17
15145: PUSH
15146: LD_INT 14
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: LD_OWVAR 67
15159: ARRAY
15160: LESS
15161: PUSH
15162: LD_OWVAR 1
15166: PUSH
15167: LD_INT 50400
15169: LESS
15170: AND
15171: IFFALSE 15198
15173: GO 15175
15175: DISABLE
// begin enable ;
15176: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15177: LD_INT 1
15179: PPUSH
15180: LD_INT 5
15182: PPUSH
15183: CALL_OW 12
15187: PPUSH
15188: LD_INT 8
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 55
// end ;
15198: END
// every 0 0$40 trigger tick < 8 8$10 do
15199: LD_OWVAR 1
15203: PUSH
15204: LD_INT 17150
15206: LESS
15207: IFFALSE 15240
15209: GO 15211
15211: DISABLE
// begin enable ;
15212: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15213: LD_INT 1
15215: PPUSH
15216: LD_INT 5
15218: PPUSH
15219: CALL_OW 12
15223: PPUSH
15224: LD_INT 130
15226: PPUSH
15227: LD_INT 18
15229: PPUSH
15230: LD_INT 12
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 56
// end ;
15240: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15241: LD_OWVAR 1
15245: PUSH
15246: LD_INT 12950
15248: LESS
15249: IFFALSE 15282
15251: GO 15253
15253: DISABLE
// begin enable ;
15254: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15255: LD_INT 1
15257: PPUSH
15258: LD_INT 5
15260: PPUSH
15261: CALL_OW 12
15265: PPUSH
15266: LD_INT 172
15268: PPUSH
15269: LD_INT 97
15271: PPUSH
15272: LD_INT 12
15274: PPUSH
15275: LD_INT 1
15277: PPUSH
15278: CALL_OW 56
// end ;
15282: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15283: LD_INT 20
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: CALL_OW 287
15293: PUSH
15294: LD_INT 6
15296: LESS
15297: IFFALSE 15324
15299: GO 15301
15301: DISABLE
// begin enable ;
15302: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15303: LD_INT 1
15305: PPUSH
15306: LD_INT 5
15308: PPUSH
15309: CALL_OW 12
15313: PPUSH
15314: LD_INT 20
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 55
// end ; end_of_file
15324: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15325: LD_INT 0
15327: PPUSH
15328: PPUSH
15329: PPUSH
15330: PPUSH
15331: PPUSH
// uc_side := 3 ;
15332: LD_ADDR_OWVAR 20
15336: PUSH
15337: LD_INT 3
15339: ST_TO_ADDR
// uc_nation := 3 ;
15340: LD_ADDR_OWVAR 21
15344: PUSH
15345: LD_INT 3
15347: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_INT 184
15355: PUSH
15356: LD_INT 144
15358: PUSH
15359: LD_INT 5
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 191
15369: PUSH
15370: LD_INT 147
15372: PUSH
15373: LD_INT 5
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 202
15383: PUSH
15384: LD_INT 151
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 210
15397: PUSH
15398: LD_INT 152
15400: PUSH
15401: LD_INT 4
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: ST_TO_ADDR
// for i := 1 to 3 do
15415: LD_ADDR_VAR 0 2
15419: PUSH
15420: DOUBLE
15421: LD_INT 1
15423: DEC
15424: ST_TO_ADDR
15425: LD_INT 3
15427: PUSH
15428: FOR_TO
15429: IFFALSE 15598
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15431: LD_INT 24
15433: PPUSH
15434: LD_INT 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 43
15442: PUSH
15443: LD_INT 44
15445: PUSH
15446: LD_INT 46
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: PUSH
15454: LD_VAR 0 2
15458: PUSH
15459: LD_INT 3
15461: MOD
15462: PUSH
15463: LD_INT 1
15465: PLUS
15466: ARRAY
15467: PPUSH
15468: LD_INT 40
15470: PPUSH
15471: CALL 21339 0 5
// veh := CreateVehicle ;
15475: LD_ADDR_VAR 0 5
15479: PUSH
15480: CALL_OW 45
15484: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15485: LD_VAR 0 5
15489: PPUSH
15490: LD_VAR 0 3
15494: PUSH
15495: LD_VAR 0 2
15499: ARRAY
15500: PUSH
15501: LD_INT 3
15503: ARRAY
15504: PPUSH
15505: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15509: LD_VAR 0 5
15513: PPUSH
15514: LD_VAR 0 3
15518: PUSH
15519: LD_VAR 0 2
15523: ARRAY
15524: PUSH
15525: LD_INT 1
15527: ARRAY
15528: PPUSH
15529: LD_VAR 0 3
15533: PUSH
15534: LD_VAR 0 2
15538: ARRAY
15539: PUSH
15540: LD_INT 2
15542: ARRAY
15543: PPUSH
15544: LD_INT 0
15546: PPUSH
15547: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15551: LD_INT 0
15553: PPUSH
15554: LD_INT 6
15556: PUSH
15557: LD_INT 7
15559: PUSH
15560: LD_INT 8
15562: PUSH
15563: LD_INT 8
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: LD_OWVAR 67
15576: ARRAY
15577: PPUSH
15578: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15582: CALL_OW 44
15586: PPUSH
15587: LD_VAR 0 5
15591: PPUSH
15592: CALL_OW 52
// end ;
15596: GO 15428
15598: POP
15599: POP
// for i := 1 to 4 do
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: DOUBLE
15606: LD_INT 1
15608: DEC
15609: ST_TO_ADDR
15610: LD_INT 4
15612: PUSH
15613: FOR_TO
15614: IFFALSE 15680
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15616: LD_INT 0
15618: PPUSH
15619: LD_INT 6
15621: PUSH
15622: LD_INT 7
15624: PUSH
15625: LD_INT 8
15627: PUSH
15628: LD_INT 8
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_OWVAR 67
15641: ARRAY
15642: PPUSH
15643: CALL_OW 381
// un := CreateHuman ;
15647: LD_ADDR_VAR 0 4
15651: PUSH
15652: CALL_OW 44
15656: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15657: LD_VAR 0 4
15661: PPUSH
15662: LD_INT 185
15664: PPUSH
15665: LD_INT 145
15667: PPUSH
15668: LD_INT 6
15670: PPUSH
15671: LD_INT 0
15673: PPUSH
15674: CALL_OW 50
// end ;
15678: GO 15613
15680: POP
15681: POP
// end ;
15682: LD_VAR 0 1
15686: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
// uc_side := 3 ;
15692: LD_ADDR_OWVAR 20
15696: PUSH
15697: LD_INT 3
15699: ST_TO_ADDR
// if Difficulty > 1 then
15700: LD_OWVAR 67
15704: PUSH
15705: LD_INT 1
15707: GREATER
15708: IFFALSE 15870
// begin uc_nation := 0 ;
15710: LD_ADDR_OWVAR 21
15714: PUSH
15715: LD_INT 0
15717: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15718: LD_ADDR_VAR 0 2
15722: PUSH
15723: DOUBLE
15724: LD_INT 1
15726: DEC
15727: ST_TO_ADDR
15728: LD_INT 4
15730: PUSH
15731: LD_INT 5
15733: PUSH
15734: LD_INT 6
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: PUSH
15742: LD_OWVAR 67
15746: PUSH
15747: LD_INT 1
15749: PLUS
15750: ARRAY
15751: PUSH
15752: FOR_TO
15753: IFFALSE 15868
// begin hc_class := class_apeman_soldier ;
15755: LD_ADDR_OWVAR 28
15759: PUSH
15760: LD_INT 15
15762: ST_TO_ADDR
// hc_gallery :=  ;
15763: LD_ADDR_OWVAR 33
15767: PUSH
15768: LD_STRING 
15770: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15771: LD_ADDR_OWVAR 26
15775: PUSH
15776: LD_STRING Treci
15778: PUSH
15779: LD_STRING Ivan
15781: PUSH
15782: LD_STRING Yaromir
15784: PUSH
15785: LD_STRING Nadzieia
15787: PUSH
15788: LD_STRING Krasna
15790: PUSH
15791: LD_STRING Piaty
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 1
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL_OW 12
15812: ARRAY
15813: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15814: LD_ADDR_OWVAR 31
15818: PUSH
15819: LD_INT 5
15821: PUSH
15822: LD_INT 0
15824: PUSH
15825: LD_INT 0
15827: PUSH
15828: LD_INT 0
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// hc_sex := sex_male ;
15837: LD_ADDR_OWVAR 27
15841: PUSH
15842: LD_INT 1
15844: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15845: CALL_OW 44
15849: PPUSH
15850: LD_INT 178
15852: PPUSH
15853: LD_INT 148
15855: PPUSH
15856: LD_INT 6
15858: PPUSH
15859: LD_INT 0
15861: PPUSH
15862: CALL_OW 50
// end ;
15866: GO 15752
15868: POP
15869: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15870: LD_ADDR_VAR 0 2
15874: PUSH
15875: DOUBLE
15876: LD_INT 1
15878: DEC
15879: ST_TO_ADDR
15880: LD_INT 2
15882: PUSH
15883: LD_INT 3
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: LD_INT 5
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: PUSH
15898: LD_OWVAR 67
15902: ARRAY
15903: PUSH
15904: FOR_TO
15905: IFFALSE 16072
// begin uc_nation := 3 ;
15907: LD_ADDR_OWVAR 21
15911: PUSH
15912: LD_INT 3
15914: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15915: LD_INT 22
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: LD_INT 1
15923: PPUSH
15924: LD_INT 45
15926: PUSH
15927: LD_INT 43
15929: PUSH
15930: LD_INT 44
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: LD_VAR 0 2
15942: PUSH
15943: LD_INT 3
15945: MOD
15946: PUSH
15947: LD_INT 1
15949: PLUS
15950: ARRAY
15951: PPUSH
15952: LD_INT 44
15954: PPUSH
15955: CALL 21339 0 5
// veh := CreateVehicle ;
15959: LD_ADDR_VAR 0 3
15963: PUSH
15964: CALL_OW 45
15968: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 4
15976: PPUSH
15977: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15981: LD_VAR 0 3
15985: PPUSH
15986: LD_INT 1
15988: PPUSH
15989: LD_INT 0
15991: PPUSH
15992: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15996: LD_INT 0
15998: PPUSH
15999: LD_INT 6
16001: PUSH
16002: LD_INT 7
16004: PUSH
16005: LD_INT 8
16007: PUSH
16008: LD_INT 8
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: LD_OWVAR 67
16021: ARRAY
16022: PPUSH
16023: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16027: CALL_OW 44
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16041: LD_VAR 0 3
16045: PPUSH
16046: LD_INT 178
16048: PUSH
16049: LD_INT 137
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: PPUSH
16059: CALL 56794 0 2
// wait ( 0 0$2 ) ;
16063: LD_INT 70
16065: PPUSH
16066: CALL_OW 67
// end ;
16070: GO 15904
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 1
16078: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16079: LD_INT 22
16081: PUSH
16082: LD_INT 3
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 32
16091: PUSH
16092: LD_INT 1
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 69
16107: IFFALSE 16195
16109: GO 16111
16111: DISABLE
16112: LD_INT 0
16114: PPUSH
16115: PPUSH
// begin enable ;
16116: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16117: LD_ADDR_VAR 0 2
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_INT 3
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 32
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PPUSH
16146: CALL_OW 69
16150: ST_TO_ADDR
// for i in tmp do
16151: LD_ADDR_VAR 0 1
16155: PUSH
16156: LD_VAR 0 2
16160: PUSH
16161: FOR_IN
16162: IFFALSE 16193
// if GetFuel ( i ) < 3 then
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 261
16173: PUSH
16174: LD_INT 3
16176: LESS
16177: IFFALSE 16191
// SetFuel ( i , 3 ) ;
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_INT 3
16186: PPUSH
16187: CALL_OW 240
16191: GO 16161
16193: POP
16194: POP
// end ;
16195: PPOPN 2
16197: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16198: LD_EXP 8
16202: PUSH
16203: LD_INT 22
16205: PUSH
16206: LD_INT 3
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PPUSH
16227: CALL_OW 69
16231: AND
16232: IFFALSE 16496
16234: GO 16236
16236: DISABLE
16237: LD_INT 0
16239: PPUSH
16240: PPUSH
16241: PPUSH
// begin enable ;
16242: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16243: LD_ADDR_VAR 0 2
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 25
16260: PUSH
16261: LD_INT 3
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 3
16270: PUSH
16271: LD_INT 55
16273: PUSH
16274: EMPTY
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: ST_TO_ADDR
// if mech then
16291: LD_VAR 0 2
16295: IFFALSE 16365
// for i in mech do
16297: LD_ADDR_VAR 0 1
16301: PUSH
16302: LD_VAR 0 2
16306: PUSH
16307: FOR_IN
16308: IFFALSE 16363
// begin if IsInArea ( i , escapeArea ) then
16310: LD_VAR 0 1
16314: PPUSH
16315: LD_INT 13
16317: PPUSH
16318: CALL_OW 308
16322: IFFALSE 16335
// RemoveUnit ( i ) else
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 64
16333: GO 16361
// if IsOk ( i ) then
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 302
16344: IFFALSE 16361
// ComMoveXY ( i , 196 , 155 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 196
16353: PPUSH
16354: LD_INT 155
16356: PPUSH
16357: CALL_OW 111
// end ;
16361: GO 16307
16363: POP
16364: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16365: LD_ADDR_VAR 0 3
16369: PUSH
16370: LD_INT 22
16372: PUSH
16373: LD_INT 3
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: LD_INT 25
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 25
16395: PUSH
16396: LD_INT 15
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 21
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 50
16421: PUSH
16422: EMPTY
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: ST_TO_ADDR
// if tmp then
16435: LD_VAR 0 3
16439: IFFALSE 16496
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_INT 171
16448: PUSH
16449: LD_INT 106
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 145
16458: PUSH
16459: LD_INT 69
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 132
16468: PUSH
16469: LD_INT 38
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 126
16478: PUSH
16479: LD_INT 15
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL 56794 0 2
// end ; end_of_file
16496: PPOPN 3
16498: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16499: LD_INT 0
16501: PPUSH
16502: PPUSH
// if exist_mode then
16503: LD_VAR 0 2
16507: IFFALSE 16532
// unit := CreateCharacter ( prefix & ident ) else
16509: LD_ADDR_VAR 0 5
16513: PUSH
16514: LD_VAR 0 3
16518: PUSH
16519: LD_VAR 0 1
16523: STR
16524: PPUSH
16525: CALL_OW 34
16529: ST_TO_ADDR
16530: GO 16547
// unit := NewCharacter ( ident ) ;
16532: LD_ADDR_VAR 0 5
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 25
16546: ST_TO_ADDR
// result := unit ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_VAR 0 5
16556: ST_TO_ADDR
// end ;
16557: LD_VAR 0 4
16561: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16562: LD_INT 0
16564: PPUSH
16565: PPUSH
// if not side or not nation then
16566: LD_VAR 0 1
16570: NOT
16571: PUSH
16572: LD_VAR 0 2
16576: NOT
16577: OR
16578: IFFALSE 16582
// exit ;
16580: GO 17350
// case nation of nation_american :
16582: LD_VAR 0 2
16586: PUSH
16587: LD_INT 1
16589: DOUBLE
16590: EQUAL
16591: IFTRUE 16595
16593: GO 16809
16595: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16596: LD_ADDR_VAR 0 4
16600: PUSH
16601: LD_INT 35
16603: PUSH
16604: LD_INT 45
16606: PUSH
16607: LD_INT 46
16609: PUSH
16610: LD_INT 47
16612: PUSH
16613: LD_INT 82
16615: PUSH
16616: LD_INT 83
16618: PUSH
16619: LD_INT 84
16621: PUSH
16622: LD_INT 85
16624: PUSH
16625: LD_INT 86
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: LD_INT 2
16633: PUSH
16634: LD_INT 6
16636: PUSH
16637: LD_INT 15
16639: PUSH
16640: LD_INT 16
16642: PUSH
16643: LD_INT 7
16645: PUSH
16646: LD_INT 12
16648: PUSH
16649: LD_INT 13
16651: PUSH
16652: LD_INT 10
16654: PUSH
16655: LD_INT 14
16657: PUSH
16658: LD_INT 20
16660: PUSH
16661: LD_INT 21
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_INT 25
16669: PUSH
16670: LD_INT 32
16672: PUSH
16673: LD_INT 27
16675: PUSH
16676: LD_INT 36
16678: PUSH
16679: LD_INT 69
16681: PUSH
16682: LD_INT 39
16684: PUSH
16685: LD_INT 34
16687: PUSH
16688: LD_INT 40
16690: PUSH
16691: LD_INT 48
16693: PUSH
16694: LD_INT 49
16696: PUSH
16697: LD_INT 50
16699: PUSH
16700: LD_INT 51
16702: PUSH
16703: LD_INT 52
16705: PUSH
16706: LD_INT 53
16708: PUSH
16709: LD_INT 54
16711: PUSH
16712: LD_INT 55
16714: PUSH
16715: LD_INT 56
16717: PUSH
16718: LD_INT 57
16720: PUSH
16721: LD_INT 58
16723: PUSH
16724: LD_INT 59
16726: PUSH
16727: LD_INT 60
16729: PUSH
16730: LD_INT 61
16732: PUSH
16733: LD_INT 62
16735: PUSH
16736: LD_INT 80
16738: PUSH
16739: LD_INT 82
16741: PUSH
16742: LD_INT 83
16744: PUSH
16745: LD_INT 84
16747: PUSH
16748: LD_INT 85
16750: PUSH
16751: LD_INT 86
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: ST_TO_ADDR
16807: GO 17274
16809: LD_INT 2
16811: DOUBLE
16812: EQUAL
16813: IFTRUE 16817
16815: GO 17043
16817: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16818: LD_ADDR_VAR 0 4
16822: PUSH
16823: LD_INT 35
16825: PUSH
16826: LD_INT 45
16828: PUSH
16829: LD_INT 46
16831: PUSH
16832: LD_INT 47
16834: PUSH
16835: LD_INT 82
16837: PUSH
16838: LD_INT 83
16840: PUSH
16841: LD_INT 84
16843: PUSH
16844: LD_INT 85
16846: PUSH
16847: LD_INT 87
16849: PUSH
16850: LD_INT 70
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: LD_INT 11
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: LD_INT 4
16864: PUSH
16865: LD_INT 5
16867: PUSH
16868: LD_INT 6
16870: PUSH
16871: LD_INT 15
16873: PUSH
16874: LD_INT 18
16876: PUSH
16877: LD_INT 7
16879: PUSH
16880: LD_INT 17
16882: PUSH
16883: LD_INT 8
16885: PUSH
16886: LD_INT 20
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 72
16897: PUSH
16898: LD_INT 26
16900: PUSH
16901: LD_INT 69
16903: PUSH
16904: LD_INT 39
16906: PUSH
16907: LD_INT 40
16909: PUSH
16910: LD_INT 41
16912: PUSH
16913: LD_INT 42
16915: PUSH
16916: LD_INT 43
16918: PUSH
16919: LD_INT 48
16921: PUSH
16922: LD_INT 49
16924: PUSH
16925: LD_INT 50
16927: PUSH
16928: LD_INT 51
16930: PUSH
16931: LD_INT 52
16933: PUSH
16934: LD_INT 53
16936: PUSH
16937: LD_INT 54
16939: PUSH
16940: LD_INT 55
16942: PUSH
16943: LD_INT 56
16945: PUSH
16946: LD_INT 60
16948: PUSH
16949: LD_INT 61
16951: PUSH
16952: LD_INT 62
16954: PUSH
16955: LD_INT 66
16957: PUSH
16958: LD_INT 67
16960: PUSH
16961: LD_INT 68
16963: PUSH
16964: LD_INT 81
16966: PUSH
16967: LD_INT 82
16969: PUSH
16970: LD_INT 83
16972: PUSH
16973: LD_INT 84
16975: PUSH
16976: LD_INT 85
16978: PUSH
16979: LD_INT 87
16981: PUSH
16982: LD_INT 88
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: ST_TO_ADDR
17041: GO 17274
17043: LD_INT 3
17045: DOUBLE
17046: EQUAL
17047: IFTRUE 17051
17049: GO 17273
17051: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17052: LD_ADDR_VAR 0 4
17056: PUSH
17057: LD_INT 46
17059: PUSH
17060: LD_INT 47
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: LD_INT 82
17071: PUSH
17072: LD_INT 83
17074: PUSH
17075: LD_INT 84
17077: PUSH
17078: LD_INT 85
17080: PUSH
17081: LD_INT 86
17083: PUSH
17084: LD_INT 11
17086: PUSH
17087: LD_INT 9
17089: PUSH
17090: LD_INT 20
17092: PUSH
17093: LD_INT 19
17095: PUSH
17096: LD_INT 21
17098: PUSH
17099: LD_INT 24
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 25
17107: PUSH
17108: LD_INT 28
17110: PUSH
17111: LD_INT 29
17113: PUSH
17114: LD_INT 30
17116: PUSH
17117: LD_INT 31
17119: PUSH
17120: LD_INT 37
17122: PUSH
17123: LD_INT 38
17125: PUSH
17126: LD_INT 32
17128: PUSH
17129: LD_INT 27
17131: PUSH
17132: LD_INT 33
17134: PUSH
17135: LD_INT 69
17137: PUSH
17138: LD_INT 39
17140: PUSH
17141: LD_INT 34
17143: PUSH
17144: LD_INT 40
17146: PUSH
17147: LD_INT 71
17149: PUSH
17150: LD_INT 23
17152: PUSH
17153: LD_INT 44
17155: PUSH
17156: LD_INT 48
17158: PUSH
17159: LD_INT 49
17161: PUSH
17162: LD_INT 50
17164: PUSH
17165: LD_INT 51
17167: PUSH
17168: LD_INT 52
17170: PUSH
17171: LD_INT 53
17173: PUSH
17174: LD_INT 54
17176: PUSH
17177: LD_INT 55
17179: PUSH
17180: LD_INT 56
17182: PUSH
17183: LD_INT 57
17185: PUSH
17186: LD_INT 58
17188: PUSH
17189: LD_INT 59
17191: PUSH
17192: LD_INT 63
17194: PUSH
17195: LD_INT 64
17197: PUSH
17198: LD_INT 65
17200: PUSH
17201: LD_INT 82
17203: PUSH
17204: LD_INT 83
17206: PUSH
17207: LD_INT 84
17209: PUSH
17210: LD_INT 85
17212: PUSH
17213: LD_INT 86
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: ST_TO_ADDR
17271: GO 17274
17273: POP
// if state > - 1 and state < 3 then
17274: LD_VAR 0 3
17278: PUSH
17279: LD_INT 1
17281: NEG
17282: GREATER
17283: PUSH
17284: LD_VAR 0 3
17288: PUSH
17289: LD_INT 3
17291: LESS
17292: AND
17293: IFFALSE 17350
// for i in result do
17295: LD_ADDR_VAR 0 5
17299: PUSH
17300: LD_VAR 0 4
17304: PUSH
17305: FOR_IN
17306: IFFALSE 17348
// if GetTech ( i , side ) <> state then
17308: LD_VAR 0 5
17312: PPUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 321
17322: PUSH
17323: LD_VAR 0 3
17327: NONEQUAL
17328: IFFALSE 17346
// result := result diff i ;
17330: LD_ADDR_VAR 0 4
17334: PUSH
17335: LD_VAR 0 4
17339: PUSH
17340: LD_VAR 0 5
17344: DIFF
17345: ST_TO_ADDR
17346: GO 17305
17348: POP
17349: POP
// end ;
17350: LD_VAR 0 4
17354: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17355: LD_INT 0
17357: PPUSH
17358: PPUSH
17359: PPUSH
// result := true ;
17360: LD_ADDR_VAR 0 3
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17368: LD_ADDR_VAR 0 5
17372: PUSH
17373: LD_VAR 0 2
17377: PPUSH
17378: CALL_OW 480
17382: ST_TO_ADDR
// if not tmp then
17383: LD_VAR 0 5
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17441
// for i in tmp do
17392: LD_ADDR_VAR 0 4
17396: PUSH
17397: LD_VAR 0 5
17401: PUSH
17402: FOR_IN
17403: IFFALSE 17439
// if GetTech ( i , side ) <> state_researched then
17405: LD_VAR 0 4
17409: PPUSH
17410: LD_VAR 0 1
17414: PPUSH
17415: CALL_OW 321
17419: PUSH
17420: LD_INT 2
17422: NONEQUAL
17423: IFFALSE 17437
// begin result := false ;
17425: LD_ADDR_VAR 0 3
17429: PUSH
17430: LD_INT 0
17432: ST_TO_ADDR
// exit ;
17433: POP
17434: POP
17435: GO 17441
// end ;
17437: GO 17402
17439: POP
17440: POP
// end ;
17441: LD_VAR 0 3
17445: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17446: LD_INT 0
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17461: LD_VAR 0 1
17465: NOT
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 257
17476: PUSH
17477: LD_INT 9
17479: NONEQUAL
17480: OR
17481: IFFALSE 17485
// exit ;
17483: GO 18058
// side := GetSide ( unit ) ;
17485: LD_ADDR_VAR 0 9
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 255
17499: ST_TO_ADDR
// tech_space := tech_spacanom ;
17500: LD_ADDR_VAR 0 12
17504: PUSH
17505: LD_INT 29
17507: ST_TO_ADDR
// tech_time := tech_taurad ;
17508: LD_ADDR_VAR 0 13
17512: PUSH
17513: LD_INT 28
17515: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17516: LD_ADDR_VAR 0 11
17520: PUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL_OW 310
17530: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17531: LD_VAR 0 11
17535: PPUSH
17536: CALL_OW 247
17540: PUSH
17541: LD_INT 2
17543: EQUAL
17544: IFFALSE 17548
// exit ;
17546: GO 18058
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17548: LD_ADDR_VAR 0 8
17552: PUSH
17553: LD_INT 81
17555: PUSH
17556: LD_VAR 0 9
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: LD_INT 21
17570: PUSH
17571: LD_INT 3
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PPUSH
17586: CALL_OW 69
17590: ST_TO_ADDR
// if not tmp then
17591: LD_VAR 0 8
17595: NOT
17596: IFFALSE 17600
// exit ;
17598: GO 18058
// if in_unit then
17600: LD_VAR 0 11
17604: IFFALSE 17628
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17606: LD_ADDR_VAR 0 10
17610: PUSH
17611: LD_VAR 0 8
17615: PPUSH
17616: LD_VAR 0 11
17620: PPUSH
17621: CALL_OW 74
17625: ST_TO_ADDR
17626: GO 17648
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17628: LD_ADDR_VAR 0 10
17632: PUSH
17633: LD_VAR 0 8
17637: PPUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 74
17647: ST_TO_ADDR
// if not enemy then
17648: LD_VAR 0 10
17652: NOT
17653: IFFALSE 17657
// exit ;
17655: GO 18058
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17657: LD_VAR 0 11
17661: PUSH
17662: LD_VAR 0 11
17666: PPUSH
17667: LD_VAR 0 10
17671: PPUSH
17672: CALL_OW 296
17676: PUSH
17677: LD_INT 13
17679: GREATER
17680: AND
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_VAR 0 10
17691: PPUSH
17692: CALL_OW 296
17696: PUSH
17697: LD_INT 12
17699: GREATER
17700: OR
17701: IFFALSE 17705
// exit ;
17703: GO 18058
// missile := [ 1 ] ;
17705: LD_ADDR_VAR 0 14
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: EMPTY
17714: LIST
17715: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17716: LD_VAR 0 9
17720: PPUSH
17721: LD_VAR 0 12
17725: PPUSH
17726: CALL_OW 325
17730: IFFALSE 17759
// missile := Replace ( missile , missile + 1 , 2 ) ;
17732: LD_ADDR_VAR 0 14
17736: PUSH
17737: LD_VAR 0 14
17741: PPUSH
17742: LD_VAR 0 14
17746: PUSH
17747: LD_INT 1
17749: PLUS
17750: PPUSH
17751: LD_INT 2
17753: PPUSH
17754: CALL_OW 1
17758: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17759: LD_VAR 0 9
17763: PPUSH
17764: LD_VAR 0 13
17768: PPUSH
17769: CALL_OW 325
17773: PUSH
17774: LD_VAR 0 10
17778: PPUSH
17779: CALL_OW 255
17783: PPUSH
17784: LD_VAR 0 13
17788: PPUSH
17789: CALL_OW 325
17793: NOT
17794: AND
17795: IFFALSE 17824
// missile := Replace ( missile , missile + 1 , 3 ) ;
17797: LD_ADDR_VAR 0 14
17801: PUSH
17802: LD_VAR 0 14
17806: PPUSH
17807: LD_VAR 0 14
17811: PUSH
17812: LD_INT 1
17814: PLUS
17815: PPUSH
17816: LD_INT 3
17818: PPUSH
17819: CALL_OW 1
17823: ST_TO_ADDR
// if missile < 2 then
17824: LD_VAR 0 14
17828: PUSH
17829: LD_INT 2
17831: LESS
17832: IFFALSE 17836
// exit ;
17834: GO 18058
// x := GetX ( enemy ) ;
17836: LD_ADDR_VAR 0 4
17840: PUSH
17841: LD_VAR 0 10
17845: PPUSH
17846: CALL_OW 250
17850: ST_TO_ADDR
// y := GetY ( enemy ) ;
17851: LD_ADDR_VAR 0 5
17855: PUSH
17856: LD_VAR 0 10
17860: PPUSH
17861: CALL_OW 251
17865: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17866: LD_ADDR_VAR 0 6
17870: PUSH
17871: LD_VAR 0 4
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 12
17887: PLUS
17888: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17889: LD_ADDR_VAR 0 7
17893: PUSH
17894: LD_VAR 0 5
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 12
17910: PLUS
17911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17912: LD_VAR 0 6
17916: PPUSH
17917: LD_VAR 0 7
17921: PPUSH
17922: CALL_OW 488
17926: NOT
17927: IFFALSE 17949
// begin _x := x ;
17929: LD_ADDR_VAR 0 6
17933: PUSH
17934: LD_VAR 0 4
17938: ST_TO_ADDR
// _y := y ;
17939: LD_ADDR_VAR 0 7
17943: PUSH
17944: LD_VAR 0 5
17948: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17949: LD_ADDR_VAR 0 3
17953: PUSH
17954: LD_INT 1
17956: PPUSH
17957: LD_VAR 0 14
17961: PPUSH
17962: CALL_OW 12
17966: ST_TO_ADDR
// case i of 1 :
17967: LD_VAR 0 3
17971: PUSH
17972: LD_INT 1
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 17997
17980: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17981: LD_VAR 0 1
17985: PPUSH
17986: LD_VAR 0 10
17990: PPUSH
17991: CALL_OW 115
17995: GO 18058
17997: LD_INT 2
17999: DOUBLE
18000: EQUAL
18001: IFTRUE 18005
18003: GO 18027
18005: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18006: LD_VAR 0 1
18010: PPUSH
18011: LD_VAR 0 6
18015: PPUSH
18016: LD_VAR 0 7
18020: PPUSH
18021: CALL_OW 153
18025: GO 18058
18027: LD_INT 3
18029: DOUBLE
18030: EQUAL
18031: IFTRUE 18035
18033: GO 18057
18035: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18036: LD_VAR 0 1
18040: PPUSH
18041: LD_VAR 0 6
18045: PPUSH
18046: LD_VAR 0 7
18050: PPUSH
18051: CALL_OW 154
18055: GO 18058
18057: POP
// end ;
18058: LD_VAR 0 2
18062: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18063: LD_INT 0
18065: PPUSH
18066: PPUSH
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
// if not unit or not building then
18071: LD_VAR 0 1
18075: NOT
18076: PUSH
18077: LD_VAR 0 2
18081: NOT
18082: OR
18083: IFFALSE 18087
// exit ;
18085: GO 18245
// x := GetX ( building ) ;
18087: LD_ADDR_VAR 0 5
18091: PUSH
18092: LD_VAR 0 2
18096: PPUSH
18097: CALL_OW 250
18101: ST_TO_ADDR
// y := GetY ( building ) ;
18102: LD_ADDR_VAR 0 6
18106: PUSH
18107: LD_VAR 0 2
18111: PPUSH
18112: CALL_OW 251
18116: ST_TO_ADDR
// for i = 0 to 5 do
18117: LD_ADDR_VAR 0 4
18121: PUSH
18122: DOUBLE
18123: LD_INT 0
18125: DEC
18126: ST_TO_ADDR
18127: LD_INT 5
18129: PUSH
18130: FOR_TO
18131: IFFALSE 18243
// begin _x := ShiftX ( x , i , 3 ) ;
18133: LD_ADDR_VAR 0 7
18137: PUSH
18138: LD_VAR 0 5
18142: PPUSH
18143: LD_VAR 0 4
18147: PPUSH
18148: LD_INT 3
18150: PPUSH
18151: CALL_OW 272
18155: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18156: LD_ADDR_VAR 0 8
18160: PUSH
18161: LD_VAR 0 6
18165: PPUSH
18166: LD_VAR 0 4
18170: PPUSH
18171: LD_INT 3
18173: PPUSH
18174: CALL_OW 273
18178: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18179: LD_VAR 0 7
18183: PPUSH
18184: LD_VAR 0 8
18188: PPUSH
18189: CALL_OW 488
18193: NOT
18194: IFFALSE 18198
// continue ;
18196: GO 18130
// if HexInfo ( _x , _y ) = 0 then
18198: LD_VAR 0 7
18202: PPUSH
18203: LD_VAR 0 8
18207: PPUSH
18208: CALL_OW 428
18212: PUSH
18213: LD_INT 0
18215: EQUAL
18216: IFFALSE 18241
// begin ComMoveXY ( unit , _x , _y ) ;
18218: LD_VAR 0 1
18222: PPUSH
18223: LD_VAR 0 7
18227: PPUSH
18228: LD_VAR 0 8
18232: PPUSH
18233: CALL_OW 111
// exit ;
18237: POP
18238: POP
18239: GO 18245
// end ; end ;
18241: GO 18130
18243: POP
18244: POP
// end ;
18245: LD_VAR 0 3
18249: RET
// export function ScanBase ( side , base_area ) ; begin
18250: LD_INT 0
18252: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18253: LD_ADDR_VAR 0 3
18257: PUSH
18258: LD_VAR 0 2
18262: PPUSH
18263: LD_INT 81
18265: PUSH
18266: LD_VAR 0 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 70
18279: ST_TO_ADDR
// end ;
18280: LD_VAR 0 3
18284: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18285: LD_INT 0
18287: PPUSH
18288: PPUSH
18289: PPUSH
18290: PPUSH
// result := false ;
18291: LD_ADDR_VAR 0 2
18295: PUSH
18296: LD_INT 0
18298: ST_TO_ADDR
// side := GetSide ( unit ) ;
18299: LD_ADDR_VAR 0 3
18303: PUSH
18304: LD_VAR 0 1
18308: PPUSH
18309: CALL_OW 255
18313: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18314: LD_ADDR_VAR 0 4
18318: PUSH
18319: LD_VAR 0 1
18323: PPUSH
18324: CALL_OW 248
18328: ST_TO_ADDR
// case nat of 1 :
18329: LD_VAR 0 4
18333: PUSH
18334: LD_INT 1
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18353
18342: POP
// tech := tech_lassight ; 2 :
18343: LD_ADDR_VAR 0 5
18347: PUSH
18348: LD_INT 12
18350: ST_TO_ADDR
18351: GO 18392
18353: LD_INT 2
18355: DOUBLE
18356: EQUAL
18357: IFTRUE 18361
18359: GO 18372
18361: POP
// tech := tech_mortar ; 3 :
18362: LD_ADDR_VAR 0 5
18366: PUSH
18367: LD_INT 41
18369: ST_TO_ADDR
18370: GO 18392
18372: LD_INT 3
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18391
18380: POP
// tech := tech_bazooka ; end ;
18381: LD_ADDR_VAR 0 5
18385: PUSH
18386: LD_INT 44
18388: ST_TO_ADDR
18389: GO 18392
18391: POP
// if Researched ( side , tech ) then
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_VAR 0 5
18401: PPUSH
18402: CALL_OW 325
18406: IFFALSE 18433
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18408: LD_ADDR_VAR 0 2
18412: PUSH
18413: LD_INT 5
18415: PUSH
18416: LD_INT 8
18418: PUSH
18419: LD_INT 9
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PUSH
18427: LD_VAR 0 4
18431: ARRAY
18432: ST_TO_ADDR
// end ;
18433: LD_VAR 0 2
18437: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
18442: PPUSH
// if not mines then
18443: LD_VAR 0 2
18447: NOT
18448: IFFALSE 18452
// exit ;
18450: GO 18596
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18452: LD_ADDR_VAR 0 5
18456: PUSH
18457: LD_INT 81
18459: PUSH
18460: LD_VAR 0 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 3
18471: PUSH
18472: LD_INT 21
18474: PUSH
18475: LD_INT 3
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 69
18494: ST_TO_ADDR
// for i in mines do
18495: LD_ADDR_VAR 0 4
18499: PUSH
18500: LD_VAR 0 2
18504: PUSH
18505: FOR_IN
18506: IFFALSE 18594
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18508: LD_VAR 0 4
18512: PUSH
18513: LD_INT 1
18515: ARRAY
18516: PPUSH
18517: LD_VAR 0 4
18521: PUSH
18522: LD_INT 2
18524: ARRAY
18525: PPUSH
18526: CALL_OW 458
18530: NOT
18531: IFFALSE 18535
// continue ;
18533: GO 18505
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18535: LD_VAR 0 4
18539: PUSH
18540: LD_INT 1
18542: ARRAY
18543: PPUSH
18544: LD_VAR 0 4
18548: PUSH
18549: LD_INT 2
18551: ARRAY
18552: PPUSH
18553: CALL_OW 428
18557: PUSH
18558: LD_VAR 0 5
18562: IN
18563: IFFALSE 18592
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18565: LD_VAR 0 4
18569: PUSH
18570: LD_INT 1
18572: ARRAY
18573: PPUSH
18574: LD_VAR 0 4
18578: PUSH
18579: LD_INT 2
18581: ARRAY
18582: PPUSH
18583: LD_VAR 0 1
18587: PPUSH
18588: CALL_OW 456
// end ;
18592: GO 18505
18594: POP
18595: POP
// end ;
18596: LD_VAR 0 3
18600: RET
// export function Count ( array ) ; begin
18601: LD_INT 0
18603: PPUSH
// result := array + 0 ;
18604: LD_ADDR_VAR 0 2
18608: PUSH
18609: LD_VAR 0 1
18613: PUSH
18614: LD_INT 0
18616: PLUS
18617: ST_TO_ADDR
// end ;
18618: LD_VAR 0 2
18622: RET
// export function IsEmpty ( building ) ; begin
18623: LD_INT 0
18625: PPUSH
// if not building then
18626: LD_VAR 0 1
18630: NOT
18631: IFFALSE 18635
// exit ;
18633: GO 18678
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_VAR 0 1
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 255
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 58
18664: PUSH
18665: EMPTY
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: IN
18677: ST_TO_ADDR
// end ;
18678: LD_VAR 0 2
18682: RET
// export function IsNotFull ( building ) ; var places ; begin
18683: LD_INT 0
18685: PPUSH
18686: PPUSH
// if not building then
18687: LD_VAR 0 1
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 18724
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18696: LD_ADDR_VAR 0 2
18700: PUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: LD_INT 3
18708: PUSH
18709: LD_INT 62
18711: PUSH
18712: EMPTY
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PPUSH
18719: CALL_OW 72
18723: ST_TO_ADDR
// end ;
18724: LD_VAR 0 2
18728: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18729: LD_INT 0
18731: PPUSH
18732: PPUSH
18733: PPUSH
18734: PPUSH
// tmp := [ ] ;
18735: LD_ADDR_VAR 0 3
18739: PUSH
18740: EMPTY
18741: ST_TO_ADDR
// list := [ ] ;
18742: LD_ADDR_VAR 0 5
18746: PUSH
18747: EMPTY
18748: ST_TO_ADDR
// for i = 16 to 25 do
18749: LD_ADDR_VAR 0 4
18753: PUSH
18754: DOUBLE
18755: LD_INT 16
18757: DEC
18758: ST_TO_ADDR
18759: LD_INT 25
18761: PUSH
18762: FOR_TO
18763: IFFALSE 18836
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18765: LD_ADDR_VAR 0 3
18769: PUSH
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 22
18777: PUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 255
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 91
18794: PUSH
18795: LD_VAR 0 1
18799: PUSH
18800: LD_INT 6
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 30
18810: PUSH
18811: LD_VAR 0 4
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: PUSH
18825: EMPTY
18826: LIST
18827: PPUSH
18828: CALL_OW 69
18832: ADD
18833: ST_TO_ADDR
18834: GO 18762
18836: POP
18837: POP
// for i = 1 to tmp do
18838: LD_ADDR_VAR 0 4
18842: PUSH
18843: DOUBLE
18844: LD_INT 1
18846: DEC
18847: ST_TO_ADDR
18848: LD_VAR 0 3
18852: PUSH
18853: FOR_TO
18854: IFFALSE 18942
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18856: LD_ADDR_VAR 0 5
18860: PUSH
18861: LD_VAR 0 5
18865: PUSH
18866: LD_VAR 0 3
18870: PUSH
18871: LD_VAR 0 4
18875: ARRAY
18876: PPUSH
18877: CALL_OW 266
18881: PUSH
18882: LD_VAR 0 3
18886: PUSH
18887: LD_VAR 0 4
18891: ARRAY
18892: PPUSH
18893: CALL_OW 250
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_VAR 0 4
18907: ARRAY
18908: PPUSH
18909: CALL_OW 251
18913: PUSH
18914: LD_VAR 0 3
18918: PUSH
18919: LD_VAR 0 4
18923: ARRAY
18924: PPUSH
18925: CALL_OW 254
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: ADD
18939: ST_TO_ADDR
18940: GO 18853
18942: POP
18943: POP
// result := list ;
18944: LD_ADDR_VAR 0 2
18948: PUSH
18949: LD_VAR 0 5
18953: ST_TO_ADDR
// end ;
18954: LD_VAR 0 2
18958: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
18963: PPUSH
18964: PPUSH
18965: PPUSH
18966: PPUSH
18967: PPUSH
// if not factory then
18968: LD_VAR 0 1
18972: NOT
18973: IFFALSE 18977
// exit ;
18975: GO 19570
// if control = control_apeman then
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 5
18984: EQUAL
18985: IFFALSE 19094
// begin tmp := UnitsInside ( factory ) ;
18987: LD_ADDR_VAR 0 8
18991: PUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 313
19001: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19002: LD_VAR 0 8
19006: PPUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 12
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PPUSH
19017: CALL_OW 72
19021: NOT
19022: IFFALSE 19032
// control := control_manual ;
19024: LD_ADDR_VAR 0 4
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19032: LD_ADDR_VAR 0 8
19036: PUSH
19037: LD_VAR 0 1
19041: PPUSH
19042: CALL 18729 0 1
19046: ST_TO_ADDR
// if tmp then
19047: LD_VAR 0 8
19051: IFFALSE 19094
// begin for i in tmp do
19053: LD_ADDR_VAR 0 7
19057: PUSH
19058: LD_VAR 0 8
19062: PUSH
19063: FOR_IN
19064: IFFALSE 19092
// if i [ 1 ] = b_ext_radio then
19066: LD_VAR 0 7
19070: PUSH
19071: LD_INT 1
19073: ARRAY
19074: PUSH
19075: LD_INT 22
19077: EQUAL
19078: IFFALSE 19090
// begin control := control_remote ;
19080: LD_ADDR_VAR 0 4
19084: PUSH
19085: LD_INT 2
19087: ST_TO_ADDR
// break ;
19088: GO 19092
// end ;
19090: GO 19063
19092: POP
19093: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19094: LD_VAR 0 1
19098: PPUSH
19099: LD_VAR 0 2
19103: PPUSH
19104: LD_VAR 0 3
19108: PPUSH
19109: LD_VAR 0 4
19113: PPUSH
19114: LD_VAR 0 5
19118: PPUSH
19119: CALL_OW 448
19123: IFFALSE 19158
// begin result := [ chassis , engine , control , weapon ] ;
19125: LD_ADDR_VAR 0 6
19129: PUSH
19130: LD_VAR 0 2
19134: PUSH
19135: LD_VAR 0 3
19139: PUSH
19140: LD_VAR 0 4
19144: PUSH
19145: LD_VAR 0 5
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: ST_TO_ADDR
// exit ;
19156: GO 19570
// end ; _chassis := AvailableChassisList ( factory ) ;
19158: LD_ADDR_VAR 0 9
19162: PUSH
19163: LD_VAR 0 1
19167: PPUSH
19168: CALL_OW 475
19172: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19173: LD_ADDR_VAR 0 11
19177: PUSH
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 476
19187: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19188: LD_ADDR_VAR 0 12
19192: PUSH
19193: LD_VAR 0 1
19197: PPUSH
19198: CALL_OW 477
19202: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19203: LD_ADDR_VAR 0 10
19207: PUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 478
19217: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19218: LD_VAR 0 9
19222: NOT
19223: PUSH
19224: LD_VAR 0 11
19228: NOT
19229: OR
19230: PUSH
19231: LD_VAR 0 12
19235: NOT
19236: OR
19237: PUSH
19238: LD_VAR 0 10
19242: NOT
19243: OR
19244: IFFALSE 19279
// begin result := [ chassis , engine , control , weapon ] ;
19246: LD_ADDR_VAR 0 6
19250: PUSH
19251: LD_VAR 0 2
19255: PUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_VAR 0 4
19265: PUSH
19266: LD_VAR 0 5
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
// exit ;
19277: GO 19570
// end ; if not chassis in _chassis then
19279: LD_VAR 0 2
19283: PUSH
19284: LD_VAR 0 9
19288: IN
19289: NOT
19290: IFFALSE 19316
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19292: LD_ADDR_VAR 0 2
19296: PUSH
19297: LD_VAR 0 9
19301: PUSH
19302: LD_INT 1
19304: PPUSH
19305: LD_VAR 0 9
19309: PPUSH
19310: CALL_OW 12
19314: ARRAY
19315: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19316: LD_VAR 0 2
19320: PPUSH
19321: LD_VAR 0 3
19325: PPUSH
19326: CALL 19575 0 2
19330: NOT
19331: IFFALSE 19390
// repeat engine := _engine [ 1 ] ;
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_VAR 0 11
19342: PUSH
19343: LD_INT 1
19345: ARRAY
19346: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19347: LD_ADDR_VAR 0 11
19351: PUSH
19352: LD_VAR 0 11
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: CALL_OW 3
19364: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19365: LD_VAR 0 2
19369: PPUSH
19370: LD_VAR 0 3
19374: PPUSH
19375: CALL 19575 0 2
19379: PUSH
19380: LD_VAR 0 11
19384: PUSH
19385: EMPTY
19386: EQUAL
19387: OR
19388: IFFALSE 19333
// if not control in _control then
19390: LD_VAR 0 4
19394: PUSH
19395: LD_VAR 0 12
19399: IN
19400: NOT
19401: IFFALSE 19427
// control := _control [ rand ( 1 , _control ) ] ;
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: LD_VAR 0 12
19412: PUSH
19413: LD_INT 1
19415: PPUSH
19416: LD_VAR 0 12
19420: PPUSH
19421: CALL_OW 12
19425: ARRAY
19426: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_VAR 0 5
19436: PPUSH
19437: CALL 19795 0 2
19441: NOT
19442: IFFALSE 19501
// repeat weapon := _weapon [ 1 ] ;
19444: LD_ADDR_VAR 0 5
19448: PUSH
19449: LD_VAR 0 10
19453: PUSH
19454: LD_INT 1
19456: ARRAY
19457: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19458: LD_ADDR_VAR 0 10
19462: PUSH
19463: LD_VAR 0 10
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL_OW 3
19475: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19476: LD_VAR 0 2
19480: PPUSH
19481: LD_VAR 0 5
19485: PPUSH
19486: CALL 19795 0 2
19490: PUSH
19491: LD_VAR 0 10
19495: PUSH
19496: EMPTY
19497: EQUAL
19498: OR
19499: IFFALSE 19444
// result := [ ] ;
19501: LD_ADDR_VAR 0 6
19505: PUSH
19506: EMPTY
19507: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19508: LD_VAR 0 1
19512: PPUSH
19513: LD_VAR 0 2
19517: PPUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: LD_VAR 0 4
19527: PPUSH
19528: LD_VAR 0 5
19532: PPUSH
19533: CALL_OW 448
19537: IFFALSE 19570
// result := [ chassis , engine , control , weapon ] ;
19539: LD_ADDR_VAR 0 6
19543: PUSH
19544: LD_VAR 0 2
19548: PUSH
19549: LD_VAR 0 3
19553: PUSH
19554: LD_VAR 0 4
19558: PUSH
19559: LD_VAR 0 5
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: ST_TO_ADDR
// end ;
19570: LD_VAR 0 6
19574: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19575: LD_INT 0
19577: PPUSH
// if not chassis or not engine then
19578: LD_VAR 0 1
19582: NOT
19583: PUSH
19584: LD_VAR 0 2
19588: NOT
19589: OR
19590: IFFALSE 19594
// exit ;
19592: GO 19790
// case engine of engine_solar :
19594: LD_VAR 0 2
19598: PUSH
19599: LD_INT 2
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19645
19607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19608: LD_ADDR_VAR 0 3
19612: PUSH
19613: LD_INT 11
19615: PUSH
19616: LD_INT 12
19618: PUSH
19619: LD_INT 13
19621: PUSH
19622: LD_INT 14
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: ST_TO_ADDR
19643: GO 19774
19645: LD_INT 1
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19653
19651: GO 19715
19653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19654: LD_ADDR_VAR 0 3
19658: PUSH
19659: LD_INT 11
19661: PUSH
19662: LD_INT 12
19664: PUSH
19665: LD_INT 13
19667: PUSH
19668: LD_INT 14
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 3
19679: PUSH
19680: LD_INT 4
19682: PUSH
19683: LD_INT 5
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 23
19691: PUSH
19692: LD_INT 22
19694: PUSH
19695: LD_INT 24
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: ST_TO_ADDR
19713: GO 19774
19715: LD_INT 3
19717: DOUBLE
19718: EQUAL
19719: IFTRUE 19723
19721: GO 19773
19723: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19724: LD_ADDR_VAR 0 3
19728: PUSH
19729: LD_INT 13
19731: PUSH
19732: LD_INT 14
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: LD_INT 3
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 21
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_INT 23
19755: PUSH
19756: LD_INT 24
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: ST_TO_ADDR
19771: GO 19774
19773: POP
// result := ( chassis in result ) ;
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_VAR 0 1
19783: PUSH
19784: LD_VAR 0 3
19788: IN
19789: ST_TO_ADDR
// end ;
19790: LD_VAR 0 3
19794: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19795: LD_INT 0
19797: PPUSH
// if not chassis or not weapon then
19798: LD_VAR 0 1
19802: NOT
19803: PUSH
19804: LD_VAR 0 2
19808: NOT
19809: OR
19810: IFFALSE 19814
// exit ;
19812: GO 20874
// case weapon of us_machine_gun :
19814: LD_VAR 0 2
19818: PUSH
19819: LD_INT 2
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19857
19827: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 3
19841: PUSH
19842: LD_INT 4
19844: PUSH
19845: LD_INT 5
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: ST_TO_ADDR
19855: GO 20858
19857: LD_INT 3
19859: DOUBLE
19860: EQUAL
19861: IFTRUE 19865
19863: GO 19895
19865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19866: LD_ADDR_VAR 0 3
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: LD_INT 2
19876: PUSH
19877: LD_INT 3
19879: PUSH
19880: LD_INT 4
19882: PUSH
19883: LD_INT 5
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 20858
19895: LD_INT 11
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19933
19903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19904: LD_ADDR_VAR 0 3
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 3
19917: PUSH
19918: LD_INT 4
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: ST_TO_ADDR
19931: GO 20858
19933: LD_INT 4
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19967
19941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19942: LD_ADDR_VAR 0 3
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: LD_INT 3
19952: PUSH
19953: LD_INT 4
19955: PUSH
19956: LD_INT 5
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: ST_TO_ADDR
19965: GO 20858
19967: LD_INT 5
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 20001
19975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19976: LD_ADDR_VAR 0 3
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 3
19986: PUSH
19987: LD_INT 4
19989: PUSH
19990: LD_INT 5
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: ST_TO_ADDR
19999: GO 20858
20001: LD_INT 9
20003: DOUBLE
20004: EQUAL
20005: IFTRUE 20009
20007: GO 20035
20009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 3
20020: PUSH
20021: LD_INT 4
20023: PUSH
20024: LD_INT 5
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
20033: GO 20858
20035: LD_INT 7
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20069
20043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: LD_INT 2
20051: PUSH
20052: LD_INT 3
20054: PUSH
20055: LD_INT 4
20057: PUSH
20058: LD_INT 5
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: ST_TO_ADDR
20067: GO 20858
20069: LD_INT 12
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20103
20077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20078: LD_ADDR_VAR 0 3
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: LD_INT 3
20088: PUSH
20089: LD_INT 4
20091: PUSH
20092: LD_INT 5
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: ST_TO_ADDR
20101: GO 20858
20103: LD_INT 13
20105: DOUBLE
20106: EQUAL
20107: IFTRUE 20111
20109: GO 20137
20111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20112: LD_ADDR_VAR 0 3
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 3
20122: PUSH
20123: LD_INT 4
20125: PUSH
20126: LD_INT 5
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: ST_TO_ADDR
20135: GO 20858
20137: LD_INT 14
20139: DOUBLE
20140: EQUAL
20141: IFTRUE 20145
20143: GO 20163
20145: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20146: LD_ADDR_VAR 0 3
20150: PUSH
20151: LD_INT 4
20153: PUSH
20154: LD_INT 5
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: ST_TO_ADDR
20161: GO 20858
20163: LD_INT 6
20165: DOUBLE
20166: EQUAL
20167: IFTRUE 20171
20169: GO 20189
20171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20172: LD_ADDR_VAR 0 3
20176: PUSH
20177: LD_INT 4
20179: PUSH
20180: LD_INT 5
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: ST_TO_ADDR
20187: GO 20858
20189: LD_INT 10
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20215
20197: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20198: LD_ADDR_VAR 0 3
20202: PUSH
20203: LD_INT 4
20205: PUSH
20206: LD_INT 5
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: ST_TO_ADDR
20213: GO 20858
20215: LD_INT 22
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20249
20223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_INT 11
20231: PUSH
20232: LD_INT 12
20234: PUSH
20235: LD_INT 13
20237: PUSH
20238: LD_INT 14
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: ST_TO_ADDR
20247: GO 20858
20249: LD_INT 23
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20283
20257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20258: LD_ADDR_VAR 0 3
20262: PUSH
20263: LD_INT 11
20265: PUSH
20266: LD_INT 12
20268: PUSH
20269: LD_INT 13
20271: PUSH
20272: LD_INT 14
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: ST_TO_ADDR
20281: GO 20858
20283: LD_INT 24
20285: DOUBLE
20286: EQUAL
20287: IFTRUE 20291
20289: GO 20317
20291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_INT 11
20299: PUSH
20300: LD_INT 12
20302: PUSH
20303: LD_INT 13
20305: PUSH
20306: LD_INT 14
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: ST_TO_ADDR
20315: GO 20858
20317: LD_INT 30
20319: DOUBLE
20320: EQUAL
20321: IFTRUE 20325
20323: GO 20351
20325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_INT 11
20333: PUSH
20334: LD_INT 12
20336: PUSH
20337: LD_INT 13
20339: PUSH
20340: LD_INT 14
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: ST_TO_ADDR
20349: GO 20858
20351: LD_INT 25
20353: DOUBLE
20354: EQUAL
20355: IFTRUE 20359
20357: GO 20377
20359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_INT 13
20367: PUSH
20368: LD_INT 14
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: ST_TO_ADDR
20375: GO 20858
20377: LD_INT 27
20379: DOUBLE
20380: EQUAL
20381: IFTRUE 20385
20383: GO 20403
20385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20386: LD_ADDR_VAR 0 3
20390: PUSH
20391: LD_INT 13
20393: PUSH
20394: LD_INT 14
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: ST_TO_ADDR
20401: GO 20858
20403: LD_INT 92
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20437
20411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_INT 11
20419: PUSH
20420: LD_INT 12
20422: PUSH
20423: LD_INT 13
20425: PUSH
20426: LD_INT 14
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: ST_TO_ADDR
20435: GO 20858
20437: LD_INT 28
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20463
20445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 13
20453: PUSH
20454: LD_INT 14
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: ST_TO_ADDR
20461: GO 20858
20463: LD_INT 29
20465: DOUBLE
20466: EQUAL
20467: IFTRUE 20471
20469: GO 20489
20471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20472: LD_ADDR_VAR 0 3
20476: PUSH
20477: LD_INT 13
20479: PUSH
20480: LD_INT 14
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: ST_TO_ADDR
20487: GO 20858
20489: LD_INT 31
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20515
20497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20498: LD_ADDR_VAR 0 3
20502: PUSH
20503: LD_INT 13
20505: PUSH
20506: LD_INT 14
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: ST_TO_ADDR
20513: GO 20858
20515: LD_INT 26
20517: DOUBLE
20518: EQUAL
20519: IFTRUE 20523
20521: GO 20541
20523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20524: LD_ADDR_VAR 0 3
20528: PUSH
20529: LD_INT 13
20531: PUSH
20532: LD_INT 14
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: ST_TO_ADDR
20539: GO 20858
20541: LD_INT 42
20543: DOUBLE
20544: EQUAL
20545: IFTRUE 20549
20547: GO 20575
20549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20550: LD_ADDR_VAR 0 3
20554: PUSH
20555: LD_INT 21
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_INT 23
20563: PUSH
20564: LD_INT 24
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: ST_TO_ADDR
20573: GO 20858
20575: LD_INT 43
20577: DOUBLE
20578: EQUAL
20579: IFTRUE 20583
20581: GO 20609
20583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20584: LD_ADDR_VAR 0 3
20588: PUSH
20589: LD_INT 21
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_INT 23
20597: PUSH
20598: LD_INT 24
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: ST_TO_ADDR
20607: GO 20858
20609: LD_INT 44
20611: DOUBLE
20612: EQUAL
20613: IFTRUE 20617
20615: GO 20643
20617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20618: LD_ADDR_VAR 0 3
20622: PUSH
20623: LD_INT 21
20625: PUSH
20626: LD_INT 22
20628: PUSH
20629: LD_INT 23
20631: PUSH
20632: LD_INT 24
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: ST_TO_ADDR
20641: GO 20858
20643: LD_INT 45
20645: DOUBLE
20646: EQUAL
20647: IFTRUE 20651
20649: GO 20677
20651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20652: LD_ADDR_VAR 0 3
20656: PUSH
20657: LD_INT 21
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 23
20665: PUSH
20666: LD_INT 24
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: ST_TO_ADDR
20675: GO 20858
20677: LD_INT 49
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20711
20685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20686: LD_ADDR_VAR 0 3
20690: PUSH
20691: LD_INT 21
20693: PUSH
20694: LD_INT 22
20696: PUSH
20697: LD_INT 23
20699: PUSH
20700: LD_INT 24
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: ST_TO_ADDR
20709: GO 20858
20711: LD_INT 51
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 20745
20719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20720: LD_ADDR_VAR 0 3
20724: PUSH
20725: LD_INT 21
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 23
20733: PUSH
20734: LD_INT 24
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: ST_TO_ADDR
20743: GO 20858
20745: LD_INT 52
20747: DOUBLE
20748: EQUAL
20749: IFTRUE 20753
20751: GO 20779
20753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20754: LD_ADDR_VAR 0 3
20758: PUSH
20759: LD_INT 21
20761: PUSH
20762: LD_INT 22
20764: PUSH
20765: LD_INT 23
20767: PUSH
20768: LD_INT 24
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: ST_TO_ADDR
20777: GO 20858
20779: LD_INT 53
20781: DOUBLE
20782: EQUAL
20783: IFTRUE 20787
20785: GO 20805
20787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_INT 23
20795: PUSH
20796: LD_INT 24
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: ST_TO_ADDR
20803: GO 20858
20805: LD_INT 46
20807: DOUBLE
20808: EQUAL
20809: IFTRUE 20813
20811: GO 20831
20813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20814: LD_ADDR_VAR 0 3
20818: PUSH
20819: LD_INT 23
20821: PUSH
20822: LD_INT 24
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: ST_TO_ADDR
20829: GO 20858
20831: LD_INT 47
20833: DOUBLE
20834: EQUAL
20835: IFTRUE 20839
20837: GO 20857
20839: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20840: LD_ADDR_VAR 0 3
20844: PUSH
20845: LD_INT 23
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: ST_TO_ADDR
20855: GO 20858
20857: POP
// result := ( chassis in result ) ;
20858: LD_ADDR_VAR 0 3
20862: PUSH
20863: LD_VAR 0 1
20867: PUSH
20868: LD_VAR 0 3
20872: IN
20873: ST_TO_ADDR
// end ;
20874: LD_VAR 0 3
20878: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
20885: PPUSH
20886: PPUSH
20887: PPUSH
// result := array ;
20888: LD_ADDR_VAR 0 5
20892: PUSH
20893: LD_VAR 0 1
20897: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20898: LD_VAR 0 1
20902: NOT
20903: PUSH
20904: LD_VAR 0 2
20908: NOT
20909: OR
20910: PUSH
20911: LD_VAR 0 3
20915: NOT
20916: OR
20917: PUSH
20918: LD_VAR 0 2
20922: PUSH
20923: LD_VAR 0 1
20927: GREATER
20928: OR
20929: PUSH
20930: LD_VAR 0 3
20934: PUSH
20935: LD_VAR 0 1
20939: GREATER
20940: OR
20941: IFFALSE 20945
// exit ;
20943: GO 21241
// if direction then
20945: LD_VAR 0 4
20949: IFFALSE 21013
// begin d := 1 ;
20951: LD_ADDR_VAR 0 9
20955: PUSH
20956: LD_INT 1
20958: ST_TO_ADDR
// if i_from > i_to then
20959: LD_VAR 0 2
20963: PUSH
20964: LD_VAR 0 3
20968: GREATER
20969: IFFALSE 20995
// length := ( array - i_from ) + i_to else
20971: LD_ADDR_VAR 0 11
20975: PUSH
20976: LD_VAR 0 1
20980: PUSH
20981: LD_VAR 0 2
20985: MINUS
20986: PUSH
20987: LD_VAR 0 3
20991: PLUS
20992: ST_TO_ADDR
20993: GO 21011
// length := i_to - i_from ;
20995: LD_ADDR_VAR 0 11
20999: PUSH
21000: LD_VAR 0 3
21004: PUSH
21005: LD_VAR 0 2
21009: MINUS
21010: ST_TO_ADDR
// end else
21011: GO 21074
// begin d := - 1 ;
21013: LD_ADDR_VAR 0 9
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: ST_TO_ADDR
// if i_from > i_to then
21022: LD_VAR 0 2
21026: PUSH
21027: LD_VAR 0 3
21031: GREATER
21032: IFFALSE 21052
// length := i_from - i_to else
21034: LD_ADDR_VAR 0 11
21038: PUSH
21039: LD_VAR 0 2
21043: PUSH
21044: LD_VAR 0 3
21048: MINUS
21049: ST_TO_ADDR
21050: GO 21074
// length := ( array - i_to ) + i_from ;
21052: LD_ADDR_VAR 0 11
21056: PUSH
21057: LD_VAR 0 1
21061: PUSH
21062: LD_VAR 0 3
21066: MINUS
21067: PUSH
21068: LD_VAR 0 2
21072: PLUS
21073: ST_TO_ADDR
// end ; if not length then
21074: LD_VAR 0 11
21078: NOT
21079: IFFALSE 21083
// exit ;
21081: GO 21241
// tmp := array ;
21083: LD_ADDR_VAR 0 10
21087: PUSH
21088: LD_VAR 0 1
21092: ST_TO_ADDR
// for i = 1 to length do
21093: LD_ADDR_VAR 0 6
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_VAR 0 11
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21229
// begin for j = 1 to array do
21111: LD_ADDR_VAR 0 7
21115: PUSH
21116: DOUBLE
21117: LD_INT 1
21119: DEC
21120: ST_TO_ADDR
21121: LD_VAR 0 1
21125: PUSH
21126: FOR_TO
21127: IFFALSE 21215
// begin k := j + d ;
21129: LD_ADDR_VAR 0 8
21133: PUSH
21134: LD_VAR 0 7
21138: PUSH
21139: LD_VAR 0 9
21143: PLUS
21144: ST_TO_ADDR
// if k > array then
21145: LD_VAR 0 8
21149: PUSH
21150: LD_VAR 0 1
21154: GREATER
21155: IFFALSE 21165
// k := 1 ;
21157: LD_ADDR_VAR 0 8
21161: PUSH
21162: LD_INT 1
21164: ST_TO_ADDR
// if not k then
21165: LD_VAR 0 8
21169: NOT
21170: IFFALSE 21182
// k := array ;
21172: LD_ADDR_VAR 0 8
21176: PUSH
21177: LD_VAR 0 1
21181: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21182: LD_ADDR_VAR 0 10
21186: PUSH
21187: LD_VAR 0 10
21191: PPUSH
21192: LD_VAR 0 8
21196: PPUSH
21197: LD_VAR 0 1
21201: PUSH
21202: LD_VAR 0 7
21206: ARRAY
21207: PPUSH
21208: CALL_OW 1
21212: ST_TO_ADDR
// end ;
21213: GO 21126
21215: POP
21216: POP
// array := tmp ;
21217: LD_ADDR_VAR 0 1
21221: PUSH
21222: LD_VAR 0 10
21226: ST_TO_ADDR
// end ;
21227: GO 21108
21229: POP
21230: POP
// result := array ;
21231: LD_ADDR_VAR 0 5
21235: PUSH
21236: LD_VAR 0 1
21240: ST_TO_ADDR
// end ;
21241: LD_VAR 0 5
21245: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21246: LD_INT 0
21248: PPUSH
21249: PPUSH
// result := 0 ;
21250: LD_ADDR_VAR 0 3
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// if not array or not value in array then
21258: LD_VAR 0 1
21262: NOT
21263: PUSH
21264: LD_VAR 0 2
21268: PUSH
21269: LD_VAR 0 1
21273: IN
21274: NOT
21275: OR
21276: IFFALSE 21280
// exit ;
21278: GO 21334
// for i = 1 to array do
21280: LD_ADDR_VAR 0 4
21284: PUSH
21285: DOUBLE
21286: LD_INT 1
21288: DEC
21289: ST_TO_ADDR
21290: LD_VAR 0 1
21294: PUSH
21295: FOR_TO
21296: IFFALSE 21332
// if value = array [ i ] then
21298: LD_VAR 0 2
21302: PUSH
21303: LD_VAR 0 1
21307: PUSH
21308: LD_VAR 0 4
21312: ARRAY
21313: EQUAL
21314: IFFALSE 21330
// begin result := i ;
21316: LD_ADDR_VAR 0 3
21320: PUSH
21321: LD_VAR 0 4
21325: ST_TO_ADDR
// exit ;
21326: POP
21327: POP
21328: GO 21334
// end ;
21330: GO 21295
21332: POP
21333: POP
// end ;
21334: LD_VAR 0 3
21338: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21339: LD_INT 0
21341: PPUSH
// vc_chassis := chassis ;
21342: LD_ADDR_OWVAR 37
21346: PUSH
21347: LD_VAR 0 1
21351: ST_TO_ADDR
// vc_engine := engine ;
21352: LD_ADDR_OWVAR 39
21356: PUSH
21357: LD_VAR 0 2
21361: ST_TO_ADDR
// vc_control := control ;
21362: LD_ADDR_OWVAR 38
21366: PUSH
21367: LD_VAR 0 3
21371: ST_TO_ADDR
// vc_weapon := weapon ;
21372: LD_ADDR_OWVAR 40
21376: PUSH
21377: LD_VAR 0 4
21381: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21382: LD_ADDR_OWVAR 41
21386: PUSH
21387: LD_VAR 0 5
21391: ST_TO_ADDR
// end ;
21392: LD_VAR 0 6
21396: RET
// export function WantPlant ( unit ) ; var task ; begin
21397: LD_INT 0
21399: PPUSH
21400: PPUSH
// result := false ;
21401: LD_ADDR_VAR 0 2
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21409: LD_ADDR_VAR 0 3
21413: PUSH
21414: LD_VAR 0 1
21418: PPUSH
21419: CALL_OW 437
21423: ST_TO_ADDR
// if task then
21424: LD_VAR 0 3
21428: IFFALSE 21456
// if task [ 1 ] [ 1 ] = p then
21430: LD_VAR 0 3
21434: PUSH
21435: LD_INT 1
21437: ARRAY
21438: PUSH
21439: LD_INT 1
21441: ARRAY
21442: PUSH
21443: LD_STRING p
21445: EQUAL
21446: IFFALSE 21456
// result := true ;
21448: LD_ADDR_VAR 0 2
21452: PUSH
21453: LD_INT 1
21455: ST_TO_ADDR
// end ;
21456: LD_VAR 0 2
21460: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
21465: PPUSH
21466: PPUSH
// if pos < 1 then
21467: LD_VAR 0 2
21471: PUSH
21472: LD_INT 1
21474: LESS
21475: IFFALSE 21479
// exit ;
21477: GO 21782
// if pos = 1 then
21479: LD_VAR 0 2
21483: PUSH
21484: LD_INT 1
21486: EQUAL
21487: IFFALSE 21520
// result := Replace ( arr , pos [ 1 ] , value ) else
21489: LD_ADDR_VAR 0 4
21493: PUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: LD_VAR 0 2
21503: PUSH
21504: LD_INT 1
21506: ARRAY
21507: PPUSH
21508: LD_VAR 0 3
21512: PPUSH
21513: CALL_OW 1
21517: ST_TO_ADDR
21518: GO 21782
// begin tmp := arr ;
21520: LD_ADDR_VAR 0 6
21524: PUSH
21525: LD_VAR 0 1
21529: ST_TO_ADDR
// s_arr := [ tmp ] ;
21530: LD_ADDR_VAR 0 7
21534: PUSH
21535: LD_VAR 0 6
21539: PUSH
21540: EMPTY
21541: LIST
21542: ST_TO_ADDR
// for i = 1 to pos - 1 do
21543: LD_ADDR_VAR 0 5
21547: PUSH
21548: DOUBLE
21549: LD_INT 1
21551: DEC
21552: ST_TO_ADDR
21553: LD_VAR 0 2
21557: PUSH
21558: LD_INT 1
21560: MINUS
21561: PUSH
21562: FOR_TO
21563: IFFALSE 21608
// begin tmp := tmp [ pos [ i ] ] ;
21565: LD_ADDR_VAR 0 6
21569: PUSH
21570: LD_VAR 0 6
21574: PUSH
21575: LD_VAR 0 2
21579: PUSH
21580: LD_VAR 0 5
21584: ARRAY
21585: ARRAY
21586: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21587: LD_ADDR_VAR 0 7
21591: PUSH
21592: LD_VAR 0 7
21596: PUSH
21597: LD_VAR 0 6
21601: PUSH
21602: EMPTY
21603: LIST
21604: ADD
21605: ST_TO_ADDR
// end ;
21606: GO 21562
21608: POP
21609: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21610: LD_ADDR_VAR 0 6
21614: PUSH
21615: LD_VAR 0 6
21619: PPUSH
21620: LD_VAR 0 2
21624: PUSH
21625: LD_VAR 0 2
21629: ARRAY
21630: PPUSH
21631: LD_VAR 0 3
21635: PPUSH
21636: CALL_OW 1
21640: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21641: LD_ADDR_VAR 0 7
21645: PUSH
21646: LD_VAR 0 7
21650: PPUSH
21651: LD_VAR 0 7
21655: PPUSH
21656: LD_VAR 0 6
21660: PPUSH
21661: CALL_OW 1
21665: ST_TO_ADDR
// for i = s_arr downto 2 do
21666: LD_ADDR_VAR 0 5
21670: PUSH
21671: DOUBLE
21672: LD_VAR 0 7
21676: INC
21677: ST_TO_ADDR
21678: LD_INT 2
21680: PUSH
21681: FOR_DOWNTO
21682: IFFALSE 21766
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21684: LD_ADDR_VAR 0 6
21688: PUSH
21689: LD_VAR 0 7
21693: PUSH
21694: LD_VAR 0 5
21698: PUSH
21699: LD_INT 1
21701: MINUS
21702: ARRAY
21703: PPUSH
21704: LD_VAR 0 2
21708: PUSH
21709: LD_VAR 0 5
21713: PUSH
21714: LD_INT 1
21716: MINUS
21717: ARRAY
21718: PPUSH
21719: LD_VAR 0 7
21723: PUSH
21724: LD_VAR 0 5
21728: ARRAY
21729: PPUSH
21730: CALL_OW 1
21734: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21735: LD_ADDR_VAR 0 7
21739: PUSH
21740: LD_VAR 0 7
21744: PPUSH
21745: LD_VAR 0 5
21749: PUSH
21750: LD_INT 1
21752: MINUS
21753: PPUSH
21754: LD_VAR 0 6
21758: PPUSH
21759: CALL_OW 1
21763: ST_TO_ADDR
// end ;
21764: GO 21681
21766: POP
21767: POP
// result := s_arr [ 1 ] ;
21768: LD_ADDR_VAR 0 4
21772: PUSH
21773: LD_VAR 0 7
21777: PUSH
21778: LD_INT 1
21780: ARRAY
21781: ST_TO_ADDR
// end ; end ;
21782: LD_VAR 0 4
21786: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21787: LD_INT 0
21789: PPUSH
21790: PPUSH
// if not list then
21791: LD_VAR 0 1
21795: NOT
21796: IFFALSE 21800
// exit ;
21798: GO 21891
// i := list [ pos1 ] ;
21800: LD_ADDR_VAR 0 5
21804: PUSH
21805: LD_VAR 0 1
21809: PUSH
21810: LD_VAR 0 2
21814: ARRAY
21815: ST_TO_ADDR
// if not i then
21816: LD_VAR 0 5
21820: NOT
21821: IFFALSE 21825
// exit ;
21823: GO 21891
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21825: LD_ADDR_VAR 0 1
21829: PUSH
21830: LD_VAR 0 1
21834: PPUSH
21835: LD_VAR 0 2
21839: PPUSH
21840: LD_VAR 0 1
21844: PUSH
21845: LD_VAR 0 3
21849: ARRAY
21850: PPUSH
21851: CALL_OW 1
21855: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21856: LD_ADDR_VAR 0 1
21860: PUSH
21861: LD_VAR 0 1
21865: PPUSH
21866: LD_VAR 0 3
21870: PPUSH
21871: LD_VAR 0 5
21875: PPUSH
21876: CALL_OW 1
21880: ST_TO_ADDR
// result := list ;
21881: LD_ADDR_VAR 0 4
21885: PUSH
21886: LD_VAR 0 1
21890: ST_TO_ADDR
// end ;
21891: LD_VAR 0 4
21895: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21896: LD_INT 0
21898: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21899: LD_ADDR_VAR 0 5
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 250
21913: PPUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 251
21923: PPUSH
21924: LD_VAR 0 2
21928: PPUSH
21929: LD_VAR 0 3
21933: PPUSH
21934: LD_VAR 0 4
21938: PPUSH
21939: CALL 22317 0 5
21943: ST_TO_ADDR
// end ;
21944: LD_VAR 0 5
21948: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
// if not list or not unit then
21955: LD_VAR 0 2
21959: NOT
21960: PUSH
21961: LD_VAR 0 1
21965: NOT
21966: OR
21967: IFFALSE 21971
// exit ;
21969: GO 22312
// result := [ ] ;
21971: LD_ADDR_VAR 0 5
21975: PUSH
21976: EMPTY
21977: ST_TO_ADDR
// for i in list do
21978: LD_ADDR_VAR 0 6
21982: PUSH
21983: LD_VAR 0 2
21987: PUSH
21988: FOR_IN
21989: IFFALSE 22207
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21991: LD_ADDR_VAR 0 8
21995: PUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: LD_VAR 0 6
22005: PUSH
22006: LD_INT 1
22008: ARRAY
22009: PPUSH
22010: LD_VAR 0 6
22014: PUSH
22015: LD_INT 2
22017: ARRAY
22018: PPUSH
22019: CALL_OW 297
22023: ST_TO_ADDR
// if not Count ( result ) then
22024: LD_VAR 0 5
22028: PPUSH
22029: CALL 18601 0 1
22033: NOT
22034: IFFALSE 22067
// begin result := Join ( result , [ i , tmp ] ) ;
22036: LD_ADDR_VAR 0 5
22040: PUSH
22041: LD_VAR 0 5
22045: PPUSH
22046: LD_VAR 0 6
22050: PUSH
22051: LD_VAR 0 8
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PPUSH
22060: CALL 54190 0 2
22064: ST_TO_ADDR
// continue ;
22065: GO 21988
// end ; if result [ result ] [ 2 ] <= tmp then
22067: LD_VAR 0 5
22071: PUSH
22072: LD_VAR 0 5
22076: ARRAY
22077: PUSH
22078: LD_INT 2
22080: ARRAY
22081: PUSH
22082: LD_VAR 0 8
22086: LESSEQUAL
22087: IFFALSE 22120
// result := Join ( result , [ i , tmp ] ) else
22089: LD_ADDR_VAR 0 5
22093: PUSH
22094: LD_VAR 0 5
22098: PPUSH
22099: LD_VAR 0 6
22103: PUSH
22104: LD_VAR 0 8
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL 54190 0 2
22117: ST_TO_ADDR
22118: GO 22205
// begin for j := 1 to Count ( result ) do
22120: LD_ADDR_VAR 0 7
22124: PUSH
22125: DOUBLE
22126: LD_INT 1
22128: DEC
22129: ST_TO_ADDR
22130: LD_VAR 0 5
22134: PPUSH
22135: CALL 18601 0 1
22139: PUSH
22140: FOR_TO
22141: IFFALSE 22203
// begin if tmp < result [ j ] [ 2 ] then
22143: LD_VAR 0 8
22147: PUSH
22148: LD_VAR 0 5
22152: PUSH
22153: LD_VAR 0 7
22157: ARRAY
22158: PUSH
22159: LD_INT 2
22161: ARRAY
22162: LESS
22163: IFFALSE 22201
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22165: LD_ADDR_VAR 0 5
22169: PUSH
22170: LD_VAR 0 5
22174: PPUSH
22175: LD_VAR 0 7
22179: PPUSH
22180: LD_VAR 0 6
22184: PUSH
22185: LD_VAR 0 8
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 2
22198: ST_TO_ADDR
// break ;
22199: GO 22203
// end ; end ;
22201: GO 22140
22203: POP
22204: POP
// end ; end ;
22205: GO 21988
22207: POP
22208: POP
// if result and not asc then
22209: LD_VAR 0 5
22213: PUSH
22214: LD_VAR 0 3
22218: NOT
22219: AND
22220: IFFALSE 22237
// result := ReverseArray ( result ) ;
22222: LD_ADDR_VAR 0 5
22226: PUSH
22227: LD_VAR 0 5
22231: PPUSH
22232: CALL 49477 0 1
22236: ST_TO_ADDR
// tmp := [ ] ;
22237: LD_ADDR_VAR 0 8
22241: PUSH
22242: EMPTY
22243: ST_TO_ADDR
// if mode then
22244: LD_VAR 0 4
22248: IFFALSE 22312
// begin for i := 1 to result do
22250: LD_ADDR_VAR 0 6
22254: PUSH
22255: DOUBLE
22256: LD_INT 1
22258: DEC
22259: ST_TO_ADDR
22260: LD_VAR 0 5
22264: PUSH
22265: FOR_TO
22266: IFFALSE 22300
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22268: LD_ADDR_VAR 0 8
22272: PUSH
22273: LD_VAR 0 8
22277: PPUSH
22278: LD_VAR 0 5
22282: PUSH
22283: LD_VAR 0 6
22287: ARRAY
22288: PUSH
22289: LD_INT 1
22291: ARRAY
22292: PPUSH
22293: CALL 54190 0 2
22297: ST_TO_ADDR
22298: GO 22265
22300: POP
22301: POP
// result := tmp ;
22302: LD_ADDR_VAR 0 5
22306: PUSH
22307: LD_VAR 0 8
22311: ST_TO_ADDR
// end ; end ;
22312: LD_VAR 0 5
22316: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22317: LD_INT 0
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
// if not list then
22323: LD_VAR 0 3
22327: NOT
22328: IFFALSE 22332
// exit ;
22330: GO 22720
// result := [ ] ;
22332: LD_ADDR_VAR 0 6
22336: PUSH
22337: EMPTY
22338: ST_TO_ADDR
// for i in list do
22339: LD_ADDR_VAR 0 7
22343: PUSH
22344: LD_VAR 0 3
22348: PUSH
22349: FOR_IN
22350: IFFALSE 22552
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22352: LD_ADDR_VAR 0 9
22356: PUSH
22357: LD_VAR 0 7
22361: PPUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: LD_VAR 0 2
22371: PPUSH
22372: CALL_OW 297
22376: ST_TO_ADDR
// if not result then
22377: LD_VAR 0 6
22381: NOT
22382: IFFALSE 22408
// result := [ [ i , tmp ] ] else
22384: LD_ADDR_VAR 0 6
22388: PUSH
22389: LD_VAR 0 7
22393: PUSH
22394: LD_VAR 0 9
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: ST_TO_ADDR
22406: GO 22550
// begin if result [ result ] [ 2 ] < tmp then
22408: LD_VAR 0 6
22412: PUSH
22413: LD_VAR 0 6
22417: ARRAY
22418: PUSH
22419: LD_INT 2
22421: ARRAY
22422: PUSH
22423: LD_VAR 0 9
22427: LESS
22428: IFFALSE 22470
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22430: LD_ADDR_VAR 0 6
22434: PUSH
22435: LD_VAR 0 6
22439: PPUSH
22440: LD_VAR 0 6
22444: PUSH
22445: LD_INT 1
22447: PLUS
22448: PPUSH
22449: LD_VAR 0 7
22453: PUSH
22454: LD_VAR 0 9
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 2
22467: ST_TO_ADDR
22468: GO 22550
// for j = 1 to result do
22470: LD_ADDR_VAR 0 8
22474: PUSH
22475: DOUBLE
22476: LD_INT 1
22478: DEC
22479: ST_TO_ADDR
22480: LD_VAR 0 6
22484: PUSH
22485: FOR_TO
22486: IFFALSE 22548
// begin if tmp < result [ j ] [ 2 ] then
22488: LD_VAR 0 9
22492: PUSH
22493: LD_VAR 0 6
22497: PUSH
22498: LD_VAR 0 8
22502: ARRAY
22503: PUSH
22504: LD_INT 2
22506: ARRAY
22507: LESS
22508: IFFALSE 22546
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22510: LD_ADDR_VAR 0 6
22514: PUSH
22515: LD_VAR 0 6
22519: PPUSH
22520: LD_VAR 0 8
22524: PPUSH
22525: LD_VAR 0 7
22529: PUSH
22530: LD_VAR 0 9
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PPUSH
22539: CALL_OW 2
22543: ST_TO_ADDR
// break ;
22544: GO 22548
// end ; end ;
22546: GO 22485
22548: POP
22549: POP
// end ; end ;
22550: GO 22349
22552: POP
22553: POP
// if result and not asc then
22554: LD_VAR 0 6
22558: PUSH
22559: LD_VAR 0 4
22563: NOT
22564: AND
22565: IFFALSE 22640
// begin tmp := result ;
22567: LD_ADDR_VAR 0 9
22571: PUSH
22572: LD_VAR 0 6
22576: ST_TO_ADDR
// for i = tmp downto 1 do
22577: LD_ADDR_VAR 0 7
22581: PUSH
22582: DOUBLE
22583: LD_VAR 0 9
22587: INC
22588: ST_TO_ADDR
22589: LD_INT 1
22591: PUSH
22592: FOR_DOWNTO
22593: IFFALSE 22638
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22595: LD_ADDR_VAR 0 6
22599: PUSH
22600: LD_VAR 0 6
22604: PPUSH
22605: LD_VAR 0 9
22609: PUSH
22610: LD_VAR 0 7
22614: MINUS
22615: PUSH
22616: LD_INT 1
22618: PLUS
22619: PPUSH
22620: LD_VAR 0 9
22624: PUSH
22625: LD_VAR 0 7
22629: ARRAY
22630: PPUSH
22631: CALL_OW 1
22635: ST_TO_ADDR
22636: GO 22592
22638: POP
22639: POP
// end ; tmp := [ ] ;
22640: LD_ADDR_VAR 0 9
22644: PUSH
22645: EMPTY
22646: ST_TO_ADDR
// if mode then
22647: LD_VAR 0 5
22651: IFFALSE 22720
// begin for i = 1 to result do
22653: LD_ADDR_VAR 0 7
22657: PUSH
22658: DOUBLE
22659: LD_INT 1
22661: DEC
22662: ST_TO_ADDR
22663: LD_VAR 0 6
22667: PUSH
22668: FOR_TO
22669: IFFALSE 22708
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22671: LD_ADDR_VAR 0 9
22675: PUSH
22676: LD_VAR 0 9
22680: PPUSH
22681: LD_VAR 0 7
22685: PPUSH
22686: LD_VAR 0 6
22690: PUSH
22691: LD_VAR 0 7
22695: ARRAY
22696: PUSH
22697: LD_INT 1
22699: ARRAY
22700: PPUSH
22701: CALL_OW 1
22705: ST_TO_ADDR
22706: GO 22668
22708: POP
22709: POP
// result := tmp ;
22710: LD_ADDR_VAR 0 6
22714: PUSH
22715: LD_VAR 0 9
22719: ST_TO_ADDR
// end ; end ;
22720: LD_VAR 0 6
22724: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22725: LD_INT 0
22727: PPUSH
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
22732: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22733: LD_ADDR_VAR 0 5
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: ST_TO_ADDR
// if not x or not y then
22755: LD_VAR 0 2
22759: NOT
22760: PUSH
22761: LD_VAR 0 3
22765: NOT
22766: OR
22767: IFFALSE 22771
// exit ;
22769: GO 24421
// if not range then
22771: LD_VAR 0 4
22775: NOT
22776: IFFALSE 22786
// range := 10 ;
22778: LD_ADDR_VAR 0 4
22782: PUSH
22783: LD_INT 10
22785: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22786: LD_ADDR_VAR 0 8
22790: PUSH
22791: LD_INT 81
22793: PUSH
22794: LD_VAR 0 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 92
22805: PUSH
22806: LD_VAR 0 2
22810: PUSH
22811: LD_VAR 0 3
22815: PUSH
22816: LD_VAR 0 4
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 21
22832: PUSH
22833: LD_INT 3
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL_OW 69
22853: ST_TO_ADDR
// if not tmp then
22854: LD_VAR 0 8
22858: NOT
22859: IFFALSE 22863
// exit ;
22861: GO 24421
// for i in tmp do
22863: LD_ADDR_VAR 0 6
22867: PUSH
22868: LD_VAR 0 8
22872: PUSH
22873: FOR_IN
22874: IFFALSE 24396
// begin points := [ 0 , 0 , 0 ] ;
22876: LD_ADDR_VAR 0 9
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: ST_TO_ADDR
// bpoints := 1 ;
22895: LD_ADDR_VAR 0 10
22899: PUSH
22900: LD_INT 1
22902: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22903: LD_VAR 0 6
22907: PPUSH
22908: CALL_OW 247
22912: PUSH
22913: LD_INT 1
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 23499
22921: POP
// begin if GetClass ( i ) = 1 then
22922: LD_VAR 0 6
22926: PPUSH
22927: CALL_OW 257
22931: PUSH
22932: LD_INT 1
22934: EQUAL
22935: IFFALSE 22956
// points := [ 10 , 5 , 3 ] ;
22937: LD_ADDR_VAR 0 9
22941: PUSH
22942: LD_INT 10
22944: PUSH
22945: LD_INT 5
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22956: LD_VAR 0 6
22960: PPUSH
22961: CALL_OW 257
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: IN
22980: IFFALSE 23001
// points := [ 3 , 2 , 1 ] ;
22982: LD_ADDR_VAR 0 9
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23001: LD_VAR 0 6
23005: PPUSH
23006: CALL_OW 257
23010: PUSH
23011: LD_INT 5
23013: EQUAL
23014: IFFALSE 23035
// points := [ 130 , 5 , 2 ] ;
23016: LD_ADDR_VAR 0 9
23020: PUSH
23021: LD_INT 130
23023: PUSH
23024: LD_INT 5
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23035: LD_VAR 0 6
23039: PPUSH
23040: CALL_OW 257
23044: PUSH
23045: LD_INT 8
23047: EQUAL
23048: IFFALSE 23069
// points := [ 35 , 35 , 30 ] ;
23050: LD_ADDR_VAR 0 9
23054: PUSH
23055: LD_INT 35
23057: PUSH
23058: LD_INT 35
23060: PUSH
23061: LD_INT 30
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23069: LD_VAR 0 6
23073: PPUSH
23074: CALL_OW 257
23078: PUSH
23079: LD_INT 9
23081: EQUAL
23082: IFFALSE 23103
// points := [ 20 , 55 , 40 ] ;
23084: LD_ADDR_VAR 0 9
23088: PUSH
23089: LD_INT 20
23091: PUSH
23092: LD_INT 55
23094: PUSH
23095: LD_INT 40
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23103: LD_VAR 0 6
23107: PPUSH
23108: CALL_OW 257
23112: PUSH
23113: LD_INT 12
23115: PUSH
23116: LD_INT 16
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: IN
23123: IFFALSE 23144
// points := [ 5 , 3 , 2 ] ;
23125: LD_ADDR_VAR 0 9
23129: PUSH
23130: LD_INT 5
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23144: LD_VAR 0 6
23148: PPUSH
23149: CALL_OW 257
23153: PUSH
23154: LD_INT 17
23156: EQUAL
23157: IFFALSE 23178
// points := [ 100 , 50 , 75 ] ;
23159: LD_ADDR_VAR 0 9
23163: PUSH
23164: LD_INT 100
23166: PUSH
23167: LD_INT 50
23169: PUSH
23170: LD_INT 75
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23178: LD_VAR 0 6
23182: PPUSH
23183: CALL_OW 257
23187: PUSH
23188: LD_INT 15
23190: EQUAL
23191: IFFALSE 23212
// points := [ 10 , 5 , 3 ] ;
23193: LD_ADDR_VAR 0 9
23197: PUSH
23198: LD_INT 10
23200: PUSH
23201: LD_INT 5
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23212: LD_VAR 0 6
23216: PPUSH
23217: CALL_OW 257
23221: PUSH
23222: LD_INT 14
23224: EQUAL
23225: IFFALSE 23246
// points := [ 10 , 0 , 0 ] ;
23227: LD_ADDR_VAR 0 9
23231: PUSH
23232: LD_INT 10
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23246: LD_VAR 0 6
23250: PPUSH
23251: CALL_OW 257
23255: PUSH
23256: LD_INT 11
23258: EQUAL
23259: IFFALSE 23280
// points := [ 30 , 10 , 5 ] ;
23261: LD_ADDR_VAR 0 9
23265: PUSH
23266: LD_INT 30
23268: PUSH
23269: LD_INT 10
23271: PUSH
23272: LD_INT 5
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23280: LD_VAR 0 1
23284: PPUSH
23285: LD_INT 5
23287: PPUSH
23288: CALL_OW 321
23292: PUSH
23293: LD_INT 2
23295: EQUAL
23296: IFFALSE 23313
// bpoints := bpoints * 1.8 ;
23298: LD_ADDR_VAR 0 10
23302: PUSH
23303: LD_VAR 0 10
23307: PUSH
23308: LD_REAL  1.80000000000000E+0000
23311: MUL
23312: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23313: LD_VAR 0 6
23317: PPUSH
23318: CALL_OW 257
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: LD_INT 4
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: IN
23341: PUSH
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_INT 51
23349: PPUSH
23350: CALL_OW 321
23354: PUSH
23355: LD_INT 2
23357: EQUAL
23358: AND
23359: IFFALSE 23376
// bpoints := bpoints * 1.2 ;
23361: LD_ADDR_VAR 0 10
23365: PUSH
23366: LD_VAR 0 10
23370: PUSH
23371: LD_REAL  1.20000000000000E+0000
23374: MUL
23375: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23376: LD_VAR 0 6
23380: PPUSH
23381: CALL_OW 257
23385: PUSH
23386: LD_INT 5
23388: PUSH
23389: LD_INT 7
23391: PUSH
23392: LD_INT 9
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: IN
23400: PUSH
23401: LD_VAR 0 1
23405: PPUSH
23406: LD_INT 52
23408: PPUSH
23409: CALL_OW 321
23413: PUSH
23414: LD_INT 2
23416: EQUAL
23417: AND
23418: IFFALSE 23435
// bpoints := bpoints * 1.5 ;
23420: LD_ADDR_VAR 0 10
23424: PUSH
23425: LD_VAR 0 10
23429: PUSH
23430: LD_REAL  1.50000000000000E+0000
23433: MUL
23434: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_INT 66
23442: PPUSH
23443: CALL_OW 321
23447: PUSH
23448: LD_INT 2
23450: EQUAL
23451: IFFALSE 23468
// bpoints := bpoints * 1.1 ;
23453: LD_ADDR_VAR 0 10
23457: PUSH
23458: LD_VAR 0 10
23462: PUSH
23463: LD_REAL  1.10000000000000E+0000
23466: MUL
23467: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23468: LD_ADDR_VAR 0 10
23472: PUSH
23473: LD_VAR 0 10
23477: PUSH
23478: LD_VAR 0 6
23482: PPUSH
23483: LD_INT 1
23485: PPUSH
23486: CALL_OW 259
23490: PUSH
23491: LD_REAL  1.15000000000000E+0000
23494: MUL
23495: MUL
23496: ST_TO_ADDR
// end ; unit_vehicle :
23497: GO 24325
23499: LD_INT 2
23501: DOUBLE
23502: EQUAL
23503: IFTRUE 23507
23505: GO 24313
23507: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23508: LD_VAR 0 6
23512: PPUSH
23513: CALL_OW 264
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 42
23523: PUSH
23524: LD_INT 24
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: IN
23532: IFFALSE 23553
// points := [ 25 , 5 , 3 ] ;
23534: LD_ADDR_VAR 0 9
23538: PUSH
23539: LD_INT 25
23541: PUSH
23542: LD_INT 5
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23553: LD_VAR 0 6
23557: PPUSH
23558: CALL_OW 264
23562: PUSH
23563: LD_INT 4
23565: PUSH
23566: LD_INT 43
23568: PUSH
23569: LD_INT 25
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: IN
23577: IFFALSE 23598
// points := [ 40 , 15 , 5 ] ;
23579: LD_ADDR_VAR 0 9
23583: PUSH
23584: LD_INT 40
23586: PUSH
23587: LD_INT 15
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23598: LD_VAR 0 6
23602: PPUSH
23603: CALL_OW 264
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: LD_INT 23
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: IN
23618: IFFALSE 23639
// points := [ 7 , 25 , 8 ] ;
23620: LD_ADDR_VAR 0 9
23624: PUSH
23625: LD_INT 7
23627: PUSH
23628: LD_INT 25
23630: PUSH
23631: LD_INT 8
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23639: LD_VAR 0 6
23643: PPUSH
23644: CALL_OW 264
23648: PUSH
23649: LD_INT 5
23651: PUSH
23652: LD_INT 27
23654: PUSH
23655: LD_INT 44
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: IN
23663: IFFALSE 23684
// points := [ 14 , 50 , 16 ] ;
23665: LD_ADDR_VAR 0 9
23669: PUSH
23670: LD_INT 14
23672: PUSH
23673: LD_INT 50
23675: PUSH
23676: LD_INT 16
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23684: LD_VAR 0 6
23688: PPUSH
23689: CALL_OW 264
23693: PUSH
23694: LD_INT 6
23696: PUSH
23697: LD_INT 46
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: IN
23704: IFFALSE 23725
// points := [ 32 , 120 , 70 ] ;
23706: LD_ADDR_VAR 0 9
23710: PUSH
23711: LD_INT 32
23713: PUSH
23714: LD_INT 120
23716: PUSH
23717: LD_INT 70
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23725: LD_VAR 0 6
23729: PPUSH
23730: CALL_OW 264
23734: PUSH
23735: LD_INT 7
23737: PUSH
23738: LD_INT 28
23740: PUSH
23741: LD_INT 45
23743: PUSH
23744: LD_INT 92
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: IN
23753: IFFALSE 23774
// points := [ 35 , 20 , 45 ] ;
23755: LD_ADDR_VAR 0 9
23759: PUSH
23760: LD_INT 35
23762: PUSH
23763: LD_INT 20
23765: PUSH
23766: LD_INT 45
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: LIST
23773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23774: LD_VAR 0 6
23778: PPUSH
23779: CALL_OW 264
23783: PUSH
23784: LD_INT 47
23786: PUSH
23787: EMPTY
23788: LIST
23789: IN
23790: IFFALSE 23811
// points := [ 67 , 45 , 75 ] ;
23792: LD_ADDR_VAR 0 9
23796: PUSH
23797: LD_INT 67
23799: PUSH
23800: LD_INT 45
23802: PUSH
23803: LD_INT 75
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23811: LD_VAR 0 6
23815: PPUSH
23816: CALL_OW 264
23820: PUSH
23821: LD_INT 26
23823: PUSH
23824: EMPTY
23825: LIST
23826: IN
23827: IFFALSE 23848
// points := [ 120 , 30 , 80 ] ;
23829: LD_ADDR_VAR 0 9
23833: PUSH
23834: LD_INT 120
23836: PUSH
23837: LD_INT 30
23839: PUSH
23840: LD_INT 80
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23848: LD_VAR 0 6
23852: PPUSH
23853: CALL_OW 264
23857: PUSH
23858: LD_INT 22
23860: PUSH
23861: EMPTY
23862: LIST
23863: IN
23864: IFFALSE 23885
// points := [ 40 , 1 , 1 ] ;
23866: LD_ADDR_VAR 0 9
23870: PUSH
23871: LD_INT 40
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23885: LD_VAR 0 6
23889: PPUSH
23890: CALL_OW 264
23894: PUSH
23895: LD_INT 29
23897: PUSH
23898: EMPTY
23899: LIST
23900: IN
23901: IFFALSE 23922
// points := [ 70 , 200 , 400 ] ;
23903: LD_ADDR_VAR 0 9
23907: PUSH
23908: LD_INT 70
23910: PUSH
23911: LD_INT 200
23913: PUSH
23914: LD_INT 400
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23922: LD_VAR 0 6
23926: PPUSH
23927: CALL_OW 264
23931: PUSH
23932: LD_INT 14
23934: PUSH
23935: LD_INT 53
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: IN
23942: IFFALSE 23963
// points := [ 40 , 10 , 20 ] ;
23944: LD_ADDR_VAR 0 9
23948: PUSH
23949: LD_INT 40
23951: PUSH
23952: LD_INT 10
23954: PUSH
23955: LD_INT 20
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23963: LD_VAR 0 6
23967: PPUSH
23968: CALL_OW 264
23972: PUSH
23973: LD_INT 9
23975: PUSH
23976: EMPTY
23977: LIST
23978: IN
23979: IFFALSE 24000
// points := [ 5 , 70 , 20 ] ;
23981: LD_ADDR_VAR 0 9
23985: PUSH
23986: LD_INT 5
23988: PUSH
23989: LD_INT 70
23991: PUSH
23992: LD_INT 20
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24000: LD_VAR 0 6
24004: PPUSH
24005: CALL_OW 264
24009: PUSH
24010: LD_INT 10
24012: PUSH
24013: EMPTY
24014: LIST
24015: IN
24016: IFFALSE 24037
// points := [ 35 , 110 , 70 ] ;
24018: LD_ADDR_VAR 0 9
24022: PUSH
24023: LD_INT 35
24025: PUSH
24026: LD_INT 110
24028: PUSH
24029: LD_INT 70
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24037: LD_VAR 0 6
24041: PPUSH
24042: CALL_OW 265
24046: PUSH
24047: LD_INT 25
24049: EQUAL
24050: IFFALSE 24071
// points := [ 80 , 65 , 100 ] ;
24052: LD_ADDR_VAR 0 9
24056: PUSH
24057: LD_INT 80
24059: PUSH
24060: LD_INT 65
24062: PUSH
24063: LD_INT 100
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24071: LD_VAR 0 6
24075: PPUSH
24076: CALL_OW 263
24080: PUSH
24081: LD_INT 1
24083: EQUAL
24084: IFFALSE 24119
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24086: LD_ADDR_VAR 0 10
24090: PUSH
24091: LD_VAR 0 10
24095: PUSH
24096: LD_VAR 0 6
24100: PPUSH
24101: CALL_OW 311
24105: PPUSH
24106: LD_INT 3
24108: PPUSH
24109: CALL_OW 259
24113: PUSH
24114: LD_INT 4
24116: MUL
24117: MUL
24118: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24119: LD_VAR 0 6
24123: PPUSH
24124: CALL_OW 263
24128: PUSH
24129: LD_INT 2
24131: EQUAL
24132: IFFALSE 24183
// begin j := IsControledBy ( i ) ;
24134: LD_ADDR_VAR 0 7
24138: PUSH
24139: LD_VAR 0 6
24143: PPUSH
24144: CALL_OW 312
24148: ST_TO_ADDR
// if j then
24149: LD_VAR 0 7
24153: IFFALSE 24183
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24155: LD_ADDR_VAR 0 10
24159: PUSH
24160: LD_VAR 0 10
24164: PUSH
24165: LD_VAR 0 7
24169: PPUSH
24170: LD_INT 3
24172: PPUSH
24173: CALL_OW 259
24177: PUSH
24178: LD_INT 3
24180: MUL
24181: MUL
24182: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24183: LD_VAR 0 6
24187: PPUSH
24188: CALL_OW 264
24192: PUSH
24193: LD_INT 5
24195: PUSH
24196: LD_INT 6
24198: PUSH
24199: LD_INT 46
24201: PUSH
24202: LD_INT 44
24204: PUSH
24205: LD_INT 47
24207: PUSH
24208: LD_INT 45
24210: PUSH
24211: LD_INT 28
24213: PUSH
24214: LD_INT 7
24216: PUSH
24217: LD_INT 27
24219: PUSH
24220: LD_INT 29
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: IN
24235: PUSH
24236: LD_VAR 0 1
24240: PPUSH
24241: LD_INT 52
24243: PPUSH
24244: CALL_OW 321
24248: PUSH
24249: LD_INT 2
24251: EQUAL
24252: AND
24253: IFFALSE 24270
// bpoints := bpoints * 1.2 ;
24255: LD_ADDR_VAR 0 10
24259: PUSH
24260: LD_VAR 0 10
24264: PUSH
24265: LD_REAL  1.20000000000000E+0000
24268: MUL
24269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24270: LD_VAR 0 6
24274: PPUSH
24275: CALL_OW 264
24279: PUSH
24280: LD_INT 6
24282: PUSH
24283: LD_INT 46
24285: PUSH
24286: LD_INT 47
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: IN
24294: IFFALSE 24311
// bpoints := bpoints * 1.2 ;
24296: LD_ADDR_VAR 0 10
24300: PUSH
24301: LD_VAR 0 10
24305: PUSH
24306: LD_REAL  1.20000000000000E+0000
24309: MUL
24310: ST_TO_ADDR
// end ; unit_building :
24311: GO 24325
24313: LD_INT 3
24315: DOUBLE
24316: EQUAL
24317: IFTRUE 24321
24319: GO 24324
24321: POP
// ; end ;
24322: GO 24325
24324: POP
// for j = 1 to 3 do
24325: LD_ADDR_VAR 0 7
24329: PUSH
24330: DOUBLE
24331: LD_INT 1
24333: DEC
24334: ST_TO_ADDR
24335: LD_INT 3
24337: PUSH
24338: FOR_TO
24339: IFFALSE 24392
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24341: LD_ADDR_VAR 0 5
24345: PUSH
24346: LD_VAR 0 5
24350: PPUSH
24351: LD_VAR 0 7
24355: PPUSH
24356: LD_VAR 0 5
24360: PUSH
24361: LD_VAR 0 7
24365: ARRAY
24366: PUSH
24367: LD_VAR 0 9
24371: PUSH
24372: LD_VAR 0 7
24376: ARRAY
24377: PUSH
24378: LD_VAR 0 10
24382: MUL
24383: PLUS
24384: PPUSH
24385: CALL_OW 1
24389: ST_TO_ADDR
24390: GO 24338
24392: POP
24393: POP
// end ;
24394: GO 22873
24396: POP
24397: POP
// result := Replace ( result , 4 , tmp ) ;
24398: LD_ADDR_VAR 0 5
24402: PUSH
24403: LD_VAR 0 5
24407: PPUSH
24408: LD_INT 4
24410: PPUSH
24411: LD_VAR 0 8
24415: PPUSH
24416: CALL_OW 1
24420: ST_TO_ADDR
// end ;
24421: LD_VAR 0 5
24425: RET
// export function DangerAtRange ( unit , range ) ; begin
24426: LD_INT 0
24428: PPUSH
// if not unit then
24429: LD_VAR 0 1
24433: NOT
24434: IFFALSE 24438
// exit ;
24436: GO 24483
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24438: LD_ADDR_VAR 0 3
24442: PUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 255
24452: PPUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 250
24462: PPUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 251
24472: PPUSH
24473: LD_VAR 0 2
24477: PPUSH
24478: CALL 22725 0 4
24482: ST_TO_ADDR
// end ;
24483: LD_VAR 0 3
24487: RET
// export function DangerInArea ( side , area ) ; begin
24488: LD_INT 0
24490: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24491: LD_ADDR_VAR 0 3
24495: PUSH
24496: LD_VAR 0 2
24500: PPUSH
24501: LD_INT 81
24503: PUSH
24504: LD_VAR 0 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PPUSH
24513: CALL_OW 70
24517: ST_TO_ADDR
// end ;
24518: LD_VAR 0 3
24522: RET
// export function IsExtension ( b ) ; begin
24523: LD_INT 0
24525: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24526: LD_ADDR_VAR 0 2
24530: PUSH
24531: LD_VAR 0 1
24535: PUSH
24536: LD_INT 23
24538: PUSH
24539: LD_INT 20
24541: PUSH
24542: LD_INT 22
24544: PUSH
24545: LD_INT 17
24547: PUSH
24548: LD_INT 24
24550: PUSH
24551: LD_INT 21
24553: PUSH
24554: LD_INT 19
24556: PUSH
24557: LD_INT 16
24559: PUSH
24560: LD_INT 25
24562: PUSH
24563: LD_INT 18
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: IN
24578: ST_TO_ADDR
// end ;
24579: LD_VAR 0 2
24583: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24584: LD_INT 0
24586: PPUSH
24587: PPUSH
24588: PPUSH
// result := [ ] ;
24589: LD_ADDR_VAR 0 4
24593: PUSH
24594: EMPTY
24595: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24596: LD_ADDR_VAR 0 5
24600: PUSH
24601: LD_VAR 0 2
24605: PPUSH
24606: LD_INT 21
24608: PUSH
24609: LD_INT 3
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PPUSH
24616: CALL_OW 70
24620: ST_TO_ADDR
// if not tmp then
24621: LD_VAR 0 5
24625: NOT
24626: IFFALSE 24630
// exit ;
24628: GO 24694
// if checkLink then
24630: LD_VAR 0 3
24634: IFFALSE 24684
// begin for i in tmp do
24636: LD_ADDR_VAR 0 6
24640: PUSH
24641: LD_VAR 0 5
24645: PUSH
24646: FOR_IN
24647: IFFALSE 24682
// if GetBase ( i ) <> base then
24649: LD_VAR 0 6
24653: PPUSH
24654: CALL_OW 274
24658: PUSH
24659: LD_VAR 0 1
24663: NONEQUAL
24664: IFFALSE 24680
// ComLinkToBase ( base , i ) ;
24666: LD_VAR 0 1
24670: PPUSH
24671: LD_VAR 0 6
24675: PPUSH
24676: CALL_OW 169
24680: GO 24646
24682: POP
24683: POP
// end ; result := tmp ;
24684: LD_ADDR_VAR 0 4
24688: PUSH
24689: LD_VAR 0 5
24693: ST_TO_ADDR
// end ;
24694: LD_VAR 0 4
24698: RET
// export function ComComplete ( units , b ) ; var i ; begin
24699: LD_INT 0
24701: PPUSH
24702: PPUSH
// if not units then
24703: LD_VAR 0 1
24707: NOT
24708: IFFALSE 24712
// exit ;
24710: GO 24802
// for i in units do
24712: LD_ADDR_VAR 0 4
24716: PUSH
24717: LD_VAR 0 1
24721: PUSH
24722: FOR_IN
24723: IFFALSE 24800
// if BuildingStatus ( b ) = bs_build then
24725: LD_VAR 0 2
24729: PPUSH
24730: CALL_OW 461
24734: PUSH
24735: LD_INT 1
24737: EQUAL
24738: IFFALSE 24798
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24740: LD_VAR 0 4
24744: PPUSH
24745: LD_STRING h
24747: PUSH
24748: LD_VAR 0 2
24752: PPUSH
24753: CALL_OW 250
24757: PUSH
24758: LD_VAR 0 2
24762: PPUSH
24763: CALL_OW 251
24767: PUSH
24768: LD_VAR 0 2
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: PPUSH
24794: CALL_OW 446
24798: GO 24722
24800: POP
24801: POP
// end ;
24802: LD_VAR 0 3
24806: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24807: LD_INT 0
24809: PPUSH
24810: PPUSH
24811: PPUSH
24812: PPUSH
24813: PPUSH
24814: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24815: LD_VAR 0 1
24819: NOT
24820: PUSH
24821: LD_VAR 0 1
24825: PPUSH
24826: CALL_OW 263
24830: PUSH
24831: LD_INT 2
24833: NONEQUAL
24834: OR
24835: IFFALSE 24839
// exit ;
24837: GO 25155
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24839: LD_ADDR_VAR 0 6
24843: PUSH
24844: LD_INT 22
24846: PUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 255
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 30
24866: PUSH
24867: LD_INT 36
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 34
24876: PUSH
24877: LD_INT 31
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 69
24897: ST_TO_ADDR
// if not tmp then
24898: LD_VAR 0 6
24902: NOT
24903: IFFALSE 24907
// exit ;
24905: GO 25155
// result := [ ] ;
24907: LD_ADDR_VAR 0 2
24911: PUSH
24912: EMPTY
24913: ST_TO_ADDR
// for i in tmp do
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: LD_VAR 0 6
24923: PUSH
24924: FOR_IN
24925: IFFALSE 24996
// begin t := UnitsInside ( i ) ;
24927: LD_ADDR_VAR 0 4
24931: PUSH
24932: LD_VAR 0 3
24936: PPUSH
24937: CALL_OW 313
24941: ST_TO_ADDR
// if t then
24942: LD_VAR 0 4
24946: IFFALSE 24994
// for j in t do
24948: LD_ADDR_VAR 0 7
24952: PUSH
24953: LD_VAR 0 4
24957: PUSH
24958: FOR_IN
24959: IFFALSE 24992
// result := Replace ( result , result + 1 , j ) ;
24961: LD_ADDR_VAR 0 2
24965: PUSH
24966: LD_VAR 0 2
24970: PPUSH
24971: LD_VAR 0 2
24975: PUSH
24976: LD_INT 1
24978: PLUS
24979: PPUSH
24980: LD_VAR 0 7
24984: PPUSH
24985: CALL_OW 1
24989: ST_TO_ADDR
24990: GO 24958
24992: POP
24993: POP
// end ;
24994: GO 24924
24996: POP
24997: POP
// if not result then
24998: LD_VAR 0 2
25002: NOT
25003: IFFALSE 25007
// exit ;
25005: GO 25155
// mech := result [ 1 ] ;
25007: LD_ADDR_VAR 0 5
25011: PUSH
25012: LD_VAR 0 2
25016: PUSH
25017: LD_INT 1
25019: ARRAY
25020: ST_TO_ADDR
// if result > 1 then
25021: LD_VAR 0 2
25025: PUSH
25026: LD_INT 1
25028: GREATER
25029: IFFALSE 25141
// begin for i = 2 to result do
25031: LD_ADDR_VAR 0 3
25035: PUSH
25036: DOUBLE
25037: LD_INT 2
25039: DEC
25040: ST_TO_ADDR
25041: LD_VAR 0 2
25045: PUSH
25046: FOR_TO
25047: IFFALSE 25139
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25049: LD_ADDR_VAR 0 4
25053: PUSH
25054: LD_VAR 0 2
25058: PUSH
25059: LD_VAR 0 3
25063: ARRAY
25064: PPUSH
25065: LD_INT 3
25067: PPUSH
25068: CALL_OW 259
25072: PUSH
25073: LD_VAR 0 2
25077: PUSH
25078: LD_VAR 0 3
25082: ARRAY
25083: PPUSH
25084: CALL_OW 432
25088: MINUS
25089: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25090: LD_VAR 0 4
25094: PUSH
25095: LD_VAR 0 5
25099: PPUSH
25100: LD_INT 3
25102: PPUSH
25103: CALL_OW 259
25107: PUSH
25108: LD_VAR 0 5
25112: PPUSH
25113: CALL_OW 432
25117: MINUS
25118: GREATEREQUAL
25119: IFFALSE 25137
// mech := result [ i ] ;
25121: LD_ADDR_VAR 0 5
25125: PUSH
25126: LD_VAR 0 2
25130: PUSH
25131: LD_VAR 0 3
25135: ARRAY
25136: ST_TO_ADDR
// end ;
25137: GO 25046
25139: POP
25140: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_VAR 0 5
25150: PPUSH
25151: CALL_OW 135
// end ;
25155: LD_VAR 0 2
25159: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25160: LD_INT 0
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
// result := [ ] ;
25175: LD_ADDR_VAR 0 7
25179: PUSH
25180: EMPTY
25181: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25182: LD_VAR 0 1
25186: PPUSH
25187: CALL_OW 266
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: IN
25202: NOT
25203: IFFALSE 25207
// exit ;
25205: GO 26841
// if name then
25207: LD_VAR 0 3
25211: IFFALSE 25227
// SetBName ( base_dep , name ) ;
25213: LD_VAR 0 1
25217: PPUSH
25218: LD_VAR 0 3
25222: PPUSH
25223: CALL_OW 500
// base := GetBase ( base_dep ) ;
25227: LD_ADDR_VAR 0 15
25231: PUSH
25232: LD_VAR 0 1
25236: PPUSH
25237: CALL_OW 274
25241: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25242: LD_ADDR_VAR 0 16
25246: PUSH
25247: LD_VAR 0 1
25251: PPUSH
25252: CALL_OW 255
25256: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25257: LD_ADDR_VAR 0 17
25261: PUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 248
25271: ST_TO_ADDR
// if sources then
25272: LD_VAR 0 5
25276: IFFALSE 25323
// for i = 1 to 3 do
25278: LD_ADDR_VAR 0 8
25282: PUSH
25283: DOUBLE
25284: LD_INT 1
25286: DEC
25287: ST_TO_ADDR
25288: LD_INT 3
25290: PUSH
25291: FOR_TO
25292: IFFALSE 25321
// AddResourceType ( base , i , sources [ i ] ) ;
25294: LD_VAR 0 15
25298: PPUSH
25299: LD_VAR 0 8
25303: PPUSH
25304: LD_VAR 0 5
25308: PUSH
25309: LD_VAR 0 8
25313: ARRAY
25314: PPUSH
25315: CALL_OW 276
25319: GO 25291
25321: POP
25322: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25323: LD_ADDR_VAR 0 18
25327: PUSH
25328: LD_VAR 0 15
25332: PPUSH
25333: LD_VAR 0 2
25337: PPUSH
25338: LD_INT 1
25340: PPUSH
25341: CALL 24584 0 3
25345: ST_TO_ADDR
// InitHc ;
25346: CALL_OW 19
// InitUc ;
25350: CALL_OW 18
// uc_side := side ;
25354: LD_ADDR_OWVAR 20
25358: PUSH
25359: LD_VAR 0 16
25363: ST_TO_ADDR
// uc_nation := nation ;
25364: LD_ADDR_OWVAR 21
25368: PUSH
25369: LD_VAR 0 17
25373: ST_TO_ADDR
// if buildings then
25374: LD_VAR 0 18
25378: IFFALSE 26700
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25380: LD_ADDR_VAR 0 19
25384: PUSH
25385: LD_VAR 0 18
25389: PPUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 30
25395: PUSH
25396: LD_INT 29
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 30
25405: PUSH
25406: LD_INT 30
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: PPUSH
25418: CALL_OW 72
25422: ST_TO_ADDR
// if tmp then
25423: LD_VAR 0 19
25427: IFFALSE 25475
// for i in tmp do
25429: LD_ADDR_VAR 0 8
25433: PUSH
25434: LD_VAR 0 19
25438: PUSH
25439: FOR_IN
25440: IFFALSE 25473
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25442: LD_VAR 0 8
25446: PPUSH
25447: CALL_OW 250
25451: PPUSH
25452: LD_VAR 0 8
25456: PPUSH
25457: CALL_OW 251
25461: PPUSH
25462: LD_VAR 0 16
25466: PPUSH
25467: CALL_OW 441
25471: GO 25439
25473: POP
25474: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25475: LD_VAR 0 18
25479: PPUSH
25480: LD_INT 2
25482: PUSH
25483: LD_INT 30
25485: PUSH
25486: LD_INT 32
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 30
25495: PUSH
25496: LD_INT 33
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 72
25512: IFFALSE 25600
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25514: LD_ADDR_VAR 0 8
25518: PUSH
25519: LD_VAR 0 18
25523: PPUSH
25524: LD_INT 2
25526: PUSH
25527: LD_INT 30
25529: PUSH
25530: LD_INT 32
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 30
25539: PUSH
25540: LD_INT 33
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: PPUSH
25552: CALL_OW 72
25556: PUSH
25557: FOR_IN
25558: IFFALSE 25598
// begin if not GetBWeapon ( i ) then
25560: LD_VAR 0 8
25564: PPUSH
25565: CALL_OW 269
25569: NOT
25570: IFFALSE 25596
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25572: LD_VAR 0 8
25576: PPUSH
25577: LD_VAR 0 8
25581: PPUSH
25582: LD_VAR 0 2
25586: PPUSH
25587: CALL 26846 0 2
25591: PPUSH
25592: CALL_OW 431
// end ;
25596: GO 25557
25598: POP
25599: POP
// end ; for i = 1 to personel do
25600: LD_ADDR_VAR 0 8
25604: PUSH
25605: DOUBLE
25606: LD_INT 1
25608: DEC
25609: ST_TO_ADDR
25610: LD_VAR 0 6
25614: PUSH
25615: FOR_TO
25616: IFFALSE 26680
// begin if i > 4 then
25618: LD_VAR 0 8
25622: PUSH
25623: LD_INT 4
25625: GREATER
25626: IFFALSE 25630
// break ;
25628: GO 26680
// case i of 1 :
25630: LD_VAR 0 8
25634: PUSH
25635: LD_INT 1
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25723
25643: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25644: LD_ADDR_VAR 0 12
25648: PUSH
25649: LD_VAR 0 18
25653: PPUSH
25654: LD_INT 22
25656: PUSH
25657: LD_VAR 0 16
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 58
25668: PUSH
25669: EMPTY
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: LD_INT 30
25677: PUSH
25678: LD_INT 32
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 30
25687: PUSH
25688: LD_INT 4
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 30
25697: PUSH
25698: LD_INT 5
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: LIST
25715: PPUSH
25716: CALL_OW 72
25720: ST_TO_ADDR
25721: GO 25945
25723: LD_INT 2
25725: DOUBLE
25726: EQUAL
25727: IFTRUE 25731
25729: GO 25793
25731: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25732: LD_ADDR_VAR 0 12
25736: PUSH
25737: LD_VAR 0 18
25741: PPUSH
25742: LD_INT 22
25744: PUSH
25745: LD_VAR 0 16
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 30
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 30
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 72
25790: ST_TO_ADDR
25791: GO 25945
25793: LD_INT 3
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25801
25799: GO 25863
25801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25802: LD_ADDR_VAR 0 12
25806: PUSH
25807: LD_VAR 0 18
25811: PPUSH
25812: LD_INT 22
25814: PUSH
25815: LD_VAR 0 16
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 30
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 30
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PPUSH
25856: CALL_OW 72
25860: ST_TO_ADDR
25861: GO 25945
25863: LD_INT 4
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25944
25871: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25872: LD_ADDR_VAR 0 12
25876: PUSH
25877: LD_VAR 0 18
25881: PPUSH
25882: LD_INT 22
25884: PUSH
25885: LD_VAR 0 16
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 30
25899: PUSH
25900: LD_INT 6
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 30
25909: PUSH
25910: LD_INT 7
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 30
25919: PUSH
25920: LD_INT 8
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PPUSH
25937: CALL_OW 72
25941: ST_TO_ADDR
25942: GO 25945
25944: POP
// if i = 1 then
25945: LD_VAR 0 8
25949: PUSH
25950: LD_INT 1
25952: EQUAL
25953: IFFALSE 26064
// begin tmp := [ ] ;
25955: LD_ADDR_VAR 0 19
25959: PUSH
25960: EMPTY
25961: ST_TO_ADDR
// for j in f do
25962: LD_ADDR_VAR 0 9
25966: PUSH
25967: LD_VAR 0 12
25971: PUSH
25972: FOR_IN
25973: IFFALSE 26046
// if GetBType ( j ) = b_bunker then
25975: LD_VAR 0 9
25979: PPUSH
25980: CALL_OW 266
25984: PUSH
25985: LD_INT 32
25987: EQUAL
25988: IFFALSE 26015
// tmp := Insert ( tmp , 1 , j ) else
25990: LD_ADDR_VAR 0 19
25994: PUSH
25995: LD_VAR 0 19
25999: PPUSH
26000: LD_INT 1
26002: PPUSH
26003: LD_VAR 0 9
26007: PPUSH
26008: CALL_OW 2
26012: ST_TO_ADDR
26013: GO 26044
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26015: LD_ADDR_VAR 0 19
26019: PUSH
26020: LD_VAR 0 19
26024: PPUSH
26025: LD_VAR 0 19
26029: PUSH
26030: LD_INT 1
26032: PLUS
26033: PPUSH
26034: LD_VAR 0 9
26038: PPUSH
26039: CALL_OW 2
26043: ST_TO_ADDR
26044: GO 25972
26046: POP
26047: POP
// if tmp then
26048: LD_VAR 0 19
26052: IFFALSE 26064
// f := tmp ;
26054: LD_ADDR_VAR 0 12
26058: PUSH
26059: LD_VAR 0 19
26063: ST_TO_ADDR
// end ; x := personel [ i ] ;
26064: LD_ADDR_VAR 0 13
26068: PUSH
26069: LD_VAR 0 6
26073: PUSH
26074: LD_VAR 0 8
26078: ARRAY
26079: ST_TO_ADDR
// if x = - 1 then
26080: LD_VAR 0 13
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: EQUAL
26089: IFFALSE 26298
// begin for j in f do
26091: LD_ADDR_VAR 0 9
26095: PUSH
26096: LD_VAR 0 12
26100: PUSH
26101: FOR_IN
26102: IFFALSE 26294
// repeat InitHc ;
26104: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26108: LD_VAR 0 9
26112: PPUSH
26113: CALL_OW 266
26117: PUSH
26118: LD_INT 5
26120: EQUAL
26121: IFFALSE 26191
// begin if UnitsInside ( j ) < 3 then
26123: LD_VAR 0 9
26127: PPUSH
26128: CALL_OW 313
26132: PUSH
26133: LD_INT 3
26135: LESS
26136: IFFALSE 26172
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26138: LD_INT 0
26140: PPUSH
26141: LD_INT 5
26143: PUSH
26144: LD_INT 8
26146: PUSH
26147: LD_INT 9
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: LD_VAR 0 17
26159: ARRAY
26160: PPUSH
26161: LD_VAR 0 4
26165: PPUSH
26166: CALL_OW 380
26170: GO 26189
// PrepareHuman ( false , i , skill ) ;
26172: LD_INT 0
26174: PPUSH
26175: LD_VAR 0 8
26179: PPUSH
26180: LD_VAR 0 4
26184: PPUSH
26185: CALL_OW 380
// end else
26189: GO 26208
// PrepareHuman ( false , i , skill ) ;
26191: LD_INT 0
26193: PPUSH
26194: LD_VAR 0 8
26198: PPUSH
26199: LD_VAR 0 4
26203: PPUSH
26204: CALL_OW 380
// un := CreateHuman ;
26208: LD_ADDR_VAR 0 14
26212: PUSH
26213: CALL_OW 44
26217: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26218: LD_ADDR_VAR 0 7
26222: PUSH
26223: LD_VAR 0 7
26227: PPUSH
26228: LD_INT 1
26230: PPUSH
26231: LD_VAR 0 14
26235: PPUSH
26236: CALL_OW 2
26240: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26241: LD_VAR 0 14
26245: PPUSH
26246: LD_VAR 0 9
26250: PPUSH
26251: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26255: LD_VAR 0 9
26259: PPUSH
26260: CALL_OW 313
26264: PUSH
26265: LD_INT 6
26267: EQUAL
26268: PUSH
26269: LD_VAR 0 9
26273: PPUSH
26274: CALL_OW 266
26278: PUSH
26279: LD_INT 32
26281: PUSH
26282: LD_INT 31
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: IN
26289: OR
26290: IFFALSE 26104
26292: GO 26101
26294: POP
26295: POP
// end else
26296: GO 26678
// for j = 1 to x do
26298: LD_ADDR_VAR 0 9
26302: PUSH
26303: DOUBLE
26304: LD_INT 1
26306: DEC
26307: ST_TO_ADDR
26308: LD_VAR 0 13
26312: PUSH
26313: FOR_TO
26314: IFFALSE 26676
// begin InitHc ;
26316: CALL_OW 19
// if not f then
26320: LD_VAR 0 12
26324: NOT
26325: IFFALSE 26414
// begin PrepareHuman ( false , i , skill ) ;
26327: LD_INT 0
26329: PPUSH
26330: LD_VAR 0 8
26334: PPUSH
26335: LD_VAR 0 4
26339: PPUSH
26340: CALL_OW 380
// un := CreateHuman ;
26344: LD_ADDR_VAR 0 14
26348: PUSH
26349: CALL_OW 44
26353: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26354: LD_ADDR_VAR 0 7
26358: PUSH
26359: LD_VAR 0 7
26363: PPUSH
26364: LD_INT 1
26366: PPUSH
26367: LD_VAR 0 14
26371: PPUSH
26372: CALL_OW 2
26376: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26377: LD_VAR 0 14
26381: PPUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 250
26391: PPUSH
26392: LD_VAR 0 1
26396: PPUSH
26397: CALL_OW 251
26401: PPUSH
26402: LD_INT 10
26404: PPUSH
26405: LD_INT 0
26407: PPUSH
26408: CALL_OW 50
// continue ;
26412: GO 26313
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26414: LD_VAR 0 12
26418: PUSH
26419: LD_INT 1
26421: ARRAY
26422: PPUSH
26423: CALL_OW 313
26427: PUSH
26428: LD_VAR 0 12
26432: PUSH
26433: LD_INT 1
26435: ARRAY
26436: PPUSH
26437: CALL_OW 266
26441: PUSH
26442: LD_INT 32
26444: PUSH
26445: LD_INT 31
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: IN
26452: AND
26453: PUSH
26454: LD_VAR 0 12
26458: PUSH
26459: LD_INT 1
26461: ARRAY
26462: PPUSH
26463: CALL_OW 313
26467: PUSH
26468: LD_INT 6
26470: EQUAL
26471: OR
26472: IFFALSE 26492
// f := Delete ( f , 1 ) ;
26474: LD_ADDR_VAR 0 12
26478: PUSH
26479: LD_VAR 0 12
26483: PPUSH
26484: LD_INT 1
26486: PPUSH
26487: CALL_OW 3
26491: ST_TO_ADDR
// if not f then
26492: LD_VAR 0 12
26496: NOT
26497: IFFALSE 26515
// begin x := x + 2 ;
26499: LD_ADDR_VAR 0 13
26503: PUSH
26504: LD_VAR 0 13
26508: PUSH
26509: LD_INT 2
26511: PLUS
26512: ST_TO_ADDR
// continue ;
26513: GO 26313
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26515: LD_VAR 0 12
26519: PUSH
26520: LD_INT 1
26522: ARRAY
26523: PPUSH
26524: CALL_OW 266
26528: PUSH
26529: LD_INT 5
26531: EQUAL
26532: IFFALSE 26606
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26534: LD_VAR 0 12
26538: PUSH
26539: LD_INT 1
26541: ARRAY
26542: PPUSH
26543: CALL_OW 313
26547: PUSH
26548: LD_INT 3
26550: LESS
26551: IFFALSE 26587
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26553: LD_INT 0
26555: PPUSH
26556: LD_INT 5
26558: PUSH
26559: LD_INT 8
26561: PUSH
26562: LD_INT 9
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: PUSH
26570: LD_VAR 0 17
26574: ARRAY
26575: PPUSH
26576: LD_VAR 0 4
26580: PPUSH
26581: CALL_OW 380
26585: GO 26604
// PrepareHuman ( false , i , skill ) ;
26587: LD_INT 0
26589: PPUSH
26590: LD_VAR 0 8
26594: PPUSH
26595: LD_VAR 0 4
26599: PPUSH
26600: CALL_OW 380
// end else
26604: GO 26623
// PrepareHuman ( false , i , skill ) ;
26606: LD_INT 0
26608: PPUSH
26609: LD_VAR 0 8
26613: PPUSH
26614: LD_VAR 0 4
26618: PPUSH
26619: CALL_OW 380
// un := CreateHuman ;
26623: LD_ADDR_VAR 0 14
26627: PUSH
26628: CALL_OW 44
26632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26633: LD_ADDR_VAR 0 7
26637: PUSH
26638: LD_VAR 0 7
26642: PPUSH
26643: LD_INT 1
26645: PPUSH
26646: LD_VAR 0 14
26650: PPUSH
26651: CALL_OW 2
26655: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26656: LD_VAR 0 14
26660: PPUSH
26661: LD_VAR 0 12
26665: PUSH
26666: LD_INT 1
26668: ARRAY
26669: PPUSH
26670: CALL_OW 52
// end ;
26674: GO 26313
26676: POP
26677: POP
// end ;
26678: GO 25615
26680: POP
26681: POP
// result := result ^ buildings ;
26682: LD_ADDR_VAR 0 7
26686: PUSH
26687: LD_VAR 0 7
26691: PUSH
26692: LD_VAR 0 18
26696: ADD
26697: ST_TO_ADDR
// end else
26698: GO 26841
// begin for i = 1 to personel do
26700: LD_ADDR_VAR 0 8
26704: PUSH
26705: DOUBLE
26706: LD_INT 1
26708: DEC
26709: ST_TO_ADDR
26710: LD_VAR 0 6
26714: PUSH
26715: FOR_TO
26716: IFFALSE 26839
// begin if i > 4 then
26718: LD_VAR 0 8
26722: PUSH
26723: LD_INT 4
26725: GREATER
26726: IFFALSE 26730
// break ;
26728: GO 26839
// x := personel [ i ] ;
26730: LD_ADDR_VAR 0 13
26734: PUSH
26735: LD_VAR 0 6
26739: PUSH
26740: LD_VAR 0 8
26744: ARRAY
26745: ST_TO_ADDR
// if x = - 1 then
26746: LD_VAR 0 13
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: EQUAL
26755: IFFALSE 26759
// continue ;
26757: GO 26715
// PrepareHuman ( false , i , skill ) ;
26759: LD_INT 0
26761: PPUSH
26762: LD_VAR 0 8
26766: PPUSH
26767: LD_VAR 0 4
26771: PPUSH
26772: CALL_OW 380
// un := CreateHuman ;
26776: LD_ADDR_VAR 0 14
26780: PUSH
26781: CALL_OW 44
26785: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26786: LD_VAR 0 14
26790: PPUSH
26791: LD_VAR 0 1
26795: PPUSH
26796: CALL_OW 250
26800: PPUSH
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 251
26810: PPUSH
26811: LD_INT 10
26813: PPUSH
26814: LD_INT 0
26816: PPUSH
26817: CALL_OW 50
// result := result ^ un ;
26821: LD_ADDR_VAR 0 7
26825: PUSH
26826: LD_VAR 0 7
26830: PUSH
26831: LD_VAR 0 14
26835: ADD
26836: ST_TO_ADDR
// end ;
26837: GO 26715
26839: POP
26840: POP
// end ; end ;
26841: LD_VAR 0 7
26845: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26846: LD_INT 0
26848: PPUSH
26849: PPUSH
26850: PPUSH
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
26858: PPUSH
26859: PPUSH
26860: PPUSH
26861: PPUSH
26862: PPUSH
26863: PPUSH
// result := false ;
26864: LD_ADDR_VAR 0 3
26868: PUSH
26869: LD_INT 0
26871: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26872: LD_VAR 0 1
26876: NOT
26877: PUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL_OW 266
26887: PUSH
26888: LD_INT 32
26890: PUSH
26891: LD_INT 33
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: IN
26898: NOT
26899: OR
26900: IFFALSE 26904
// exit ;
26902: GO 28013
// nat := GetNation ( tower ) ;
26904: LD_ADDR_VAR 0 12
26908: PUSH
26909: LD_VAR 0 1
26913: PPUSH
26914: CALL_OW 248
26918: ST_TO_ADDR
// side := GetSide ( tower ) ;
26919: LD_ADDR_VAR 0 16
26923: PUSH
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 255
26933: ST_TO_ADDR
// x := GetX ( tower ) ;
26934: LD_ADDR_VAR 0 10
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 250
26948: ST_TO_ADDR
// y := GetY ( tower ) ;
26949: LD_ADDR_VAR 0 11
26953: PUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 251
26963: ST_TO_ADDR
// if not x or not y then
26964: LD_VAR 0 10
26968: NOT
26969: PUSH
26970: LD_VAR 0 11
26974: NOT
26975: OR
26976: IFFALSE 26980
// exit ;
26978: GO 28013
// weapon := 0 ;
26980: LD_ADDR_VAR 0 18
26984: PUSH
26985: LD_INT 0
26987: ST_TO_ADDR
// fac_list := [ ] ;
26988: LD_ADDR_VAR 0 17
26992: PUSH
26993: EMPTY
26994: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26995: LD_ADDR_VAR 0 6
26999: PUSH
27000: LD_VAR 0 1
27004: PPUSH
27005: CALL_OW 274
27009: PPUSH
27010: LD_VAR 0 2
27014: PPUSH
27015: LD_INT 0
27017: PPUSH
27018: CALL 24584 0 3
27022: PPUSH
27023: LD_INT 30
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: CALL_OW 72
27037: ST_TO_ADDR
// if not factories then
27038: LD_VAR 0 6
27042: NOT
27043: IFFALSE 27047
// exit ;
27045: GO 28013
// for i in factories do
27047: LD_ADDR_VAR 0 8
27051: PUSH
27052: LD_VAR 0 6
27056: PUSH
27057: FOR_IN
27058: IFFALSE 27083
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27060: LD_ADDR_VAR 0 17
27064: PUSH
27065: LD_VAR 0 17
27069: PUSH
27070: LD_VAR 0 8
27074: PPUSH
27075: CALL_OW 478
27079: UNION
27080: ST_TO_ADDR
27081: GO 27057
27083: POP
27084: POP
// if not fac_list then
27085: LD_VAR 0 17
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 28013
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27094: LD_ADDR_VAR 0 5
27098: PUSH
27099: LD_INT 4
27101: PUSH
27102: LD_INT 5
27104: PUSH
27105: LD_INT 9
27107: PUSH
27108: LD_INT 10
27110: PUSH
27111: LD_INT 6
27113: PUSH
27114: LD_INT 7
27116: PUSH
27117: LD_INT 11
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 27
27131: PUSH
27132: LD_INT 28
27134: PUSH
27135: LD_INT 26
27137: PUSH
27138: LD_INT 30
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 43
27149: PUSH
27150: LD_INT 44
27152: PUSH
27153: LD_INT 46
27155: PUSH
27156: LD_INT 45
27158: PUSH
27159: LD_INT 47
27161: PUSH
27162: LD_INT 49
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: PUSH
27178: LD_VAR 0 12
27182: ARRAY
27183: ST_TO_ADDR
// list := list isect fac_list ;
27184: LD_ADDR_VAR 0 5
27188: PUSH
27189: LD_VAR 0 5
27193: PUSH
27194: LD_VAR 0 17
27198: ISECT
27199: ST_TO_ADDR
// if not list then
27200: LD_VAR 0 5
27204: NOT
27205: IFFALSE 27209
// exit ;
27207: GO 28013
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27209: LD_VAR 0 12
27213: PUSH
27214: LD_INT 3
27216: EQUAL
27217: PUSH
27218: LD_INT 49
27220: PUSH
27221: LD_VAR 0 5
27225: IN
27226: AND
27227: PUSH
27228: LD_INT 31
27230: PPUSH
27231: LD_VAR 0 16
27235: PPUSH
27236: CALL_OW 321
27240: PUSH
27241: LD_INT 2
27243: EQUAL
27244: AND
27245: IFFALSE 27305
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27247: LD_INT 22
27249: PUSH
27250: LD_VAR 0 16
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 35
27261: PUSH
27262: LD_INT 49
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 91
27271: PUSH
27272: LD_VAR 0 1
27276: PUSH
27277: LD_INT 10
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: PPUSH
27290: CALL_OW 69
27294: NOT
27295: IFFALSE 27305
// weapon := ru_time_lapser ;
27297: LD_ADDR_VAR 0 18
27301: PUSH
27302: LD_INT 49
27304: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27305: LD_VAR 0 12
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: IN
27320: PUSH
27321: LD_INT 11
27323: PUSH
27324: LD_VAR 0 5
27328: IN
27329: PUSH
27330: LD_INT 30
27332: PUSH
27333: LD_VAR 0 5
27337: IN
27338: OR
27339: AND
27340: PUSH
27341: LD_INT 6
27343: PPUSH
27344: LD_VAR 0 16
27348: PPUSH
27349: CALL_OW 321
27353: PUSH
27354: LD_INT 2
27356: EQUAL
27357: AND
27358: IFFALSE 27523
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27360: LD_INT 22
27362: PUSH
27363: LD_VAR 0 16
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: LD_INT 35
27377: PUSH
27378: LD_INT 11
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 35
27387: PUSH
27388: LD_INT 30
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 91
27402: PUSH
27403: LD_VAR 0 1
27407: PUSH
27408: LD_INT 18
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL_OW 69
27425: NOT
27426: PUSH
27427: LD_INT 22
27429: PUSH
27430: LD_VAR 0 16
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: LD_INT 30
27444: PUSH
27445: LD_INT 32
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 30
27454: PUSH
27455: LD_INT 33
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 91
27469: PUSH
27470: LD_VAR 0 1
27474: PUSH
27475: LD_INT 12
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: PUSH
27488: EMPTY
27489: LIST
27490: PPUSH
27491: CALL_OW 69
27495: PUSH
27496: LD_INT 2
27498: GREATER
27499: AND
27500: IFFALSE 27523
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27502: LD_ADDR_VAR 0 18
27506: PUSH
27507: LD_INT 11
27509: PUSH
27510: LD_INT 30
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_VAR 0 12
27521: ARRAY
27522: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27523: LD_VAR 0 18
27527: NOT
27528: PUSH
27529: LD_INT 40
27531: PPUSH
27532: LD_VAR 0 16
27536: PPUSH
27537: CALL_OW 321
27541: PUSH
27542: LD_INT 2
27544: EQUAL
27545: AND
27546: PUSH
27547: LD_INT 7
27549: PUSH
27550: LD_VAR 0 5
27554: IN
27555: PUSH
27556: LD_INT 28
27558: PUSH
27559: LD_VAR 0 5
27563: IN
27564: OR
27565: PUSH
27566: LD_INT 45
27568: PUSH
27569: LD_VAR 0 5
27573: IN
27574: OR
27575: AND
27576: IFFALSE 27830
// begin hex := GetHexInfo ( x , y ) ;
27578: LD_ADDR_VAR 0 4
27582: PUSH
27583: LD_VAR 0 10
27587: PPUSH
27588: LD_VAR 0 11
27592: PPUSH
27593: CALL_OW 546
27597: ST_TO_ADDR
// if hex [ 1 ] then
27598: LD_VAR 0 4
27602: PUSH
27603: LD_INT 1
27605: ARRAY
27606: IFFALSE 27610
// exit ;
27608: GO 28013
// height := hex [ 2 ] ;
27610: LD_ADDR_VAR 0 15
27614: PUSH
27615: LD_VAR 0 4
27619: PUSH
27620: LD_INT 2
27622: ARRAY
27623: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27624: LD_ADDR_VAR 0 14
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: LD_INT 5
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: ST_TO_ADDR
// for i in tmp do
27647: LD_ADDR_VAR 0 8
27651: PUSH
27652: LD_VAR 0 14
27656: PUSH
27657: FOR_IN
27658: IFFALSE 27828
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27660: LD_ADDR_VAR 0 9
27664: PUSH
27665: LD_VAR 0 10
27669: PPUSH
27670: LD_VAR 0 8
27674: PPUSH
27675: LD_INT 5
27677: PPUSH
27678: CALL_OW 272
27682: PUSH
27683: LD_VAR 0 11
27687: PPUSH
27688: LD_VAR 0 8
27692: PPUSH
27693: LD_INT 5
27695: PPUSH
27696: CALL_OW 273
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27705: LD_VAR 0 9
27709: PUSH
27710: LD_INT 1
27712: ARRAY
27713: PPUSH
27714: LD_VAR 0 9
27718: PUSH
27719: LD_INT 2
27721: ARRAY
27722: PPUSH
27723: CALL_OW 488
27727: IFFALSE 27826
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27729: LD_ADDR_VAR 0 4
27733: PUSH
27734: LD_VAR 0 9
27738: PUSH
27739: LD_INT 1
27741: ARRAY
27742: PPUSH
27743: LD_VAR 0 9
27747: PUSH
27748: LD_INT 2
27750: ARRAY
27751: PPUSH
27752: CALL_OW 546
27756: ST_TO_ADDR
// if hex [ 1 ] then
27757: LD_VAR 0 4
27761: PUSH
27762: LD_INT 1
27764: ARRAY
27765: IFFALSE 27769
// continue ;
27767: GO 27657
// h := hex [ 2 ] ;
27769: LD_ADDR_VAR 0 13
27773: PUSH
27774: LD_VAR 0 4
27778: PUSH
27779: LD_INT 2
27781: ARRAY
27782: ST_TO_ADDR
// if h + 7 < height then
27783: LD_VAR 0 13
27787: PUSH
27788: LD_INT 7
27790: PLUS
27791: PUSH
27792: LD_VAR 0 15
27796: LESS
27797: IFFALSE 27826
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27799: LD_ADDR_VAR 0 18
27803: PUSH
27804: LD_INT 7
27806: PUSH
27807: LD_INT 28
27809: PUSH
27810: LD_INT 45
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: PUSH
27818: LD_VAR 0 12
27822: ARRAY
27823: ST_TO_ADDR
// break ;
27824: GO 27828
// end ; end ; end ;
27826: GO 27657
27828: POP
27829: POP
// end ; if not weapon then
27830: LD_VAR 0 18
27834: NOT
27835: IFFALSE 27895
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27837: LD_ADDR_VAR 0 5
27841: PUSH
27842: LD_VAR 0 5
27846: PUSH
27847: LD_INT 11
27849: PUSH
27850: LD_INT 30
27852: PUSH
27853: LD_INT 49
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: DIFF
27861: ST_TO_ADDR
// if not list then
27862: LD_VAR 0 5
27866: NOT
27867: IFFALSE 27871
// exit ;
27869: GO 28013
// weapon := list [ rand ( 1 , list ) ] ;
27871: LD_ADDR_VAR 0 18
27875: PUSH
27876: LD_VAR 0 5
27880: PUSH
27881: LD_INT 1
27883: PPUSH
27884: LD_VAR 0 5
27888: PPUSH
27889: CALL_OW 12
27893: ARRAY
27894: ST_TO_ADDR
// end ; if weapon then
27895: LD_VAR 0 18
27899: IFFALSE 28013
// begin tmp := CostOfWeapon ( weapon ) ;
27901: LD_ADDR_VAR 0 14
27905: PUSH
27906: LD_VAR 0 18
27910: PPUSH
27911: CALL_OW 451
27915: ST_TO_ADDR
// j := GetBase ( tower ) ;
27916: LD_ADDR_VAR 0 9
27920: PUSH
27921: LD_VAR 0 1
27925: PPUSH
27926: CALL_OW 274
27930: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27931: LD_VAR 0 9
27935: PPUSH
27936: LD_INT 1
27938: PPUSH
27939: CALL_OW 275
27943: PUSH
27944: LD_VAR 0 14
27948: PUSH
27949: LD_INT 1
27951: ARRAY
27952: GREATEREQUAL
27953: PUSH
27954: LD_VAR 0 9
27958: PPUSH
27959: LD_INT 2
27961: PPUSH
27962: CALL_OW 275
27966: PUSH
27967: LD_VAR 0 14
27971: PUSH
27972: LD_INT 2
27974: ARRAY
27975: GREATEREQUAL
27976: AND
27977: PUSH
27978: LD_VAR 0 9
27982: PPUSH
27983: LD_INT 3
27985: PPUSH
27986: CALL_OW 275
27990: PUSH
27991: LD_VAR 0 14
27995: PUSH
27996: LD_INT 3
27998: ARRAY
27999: GREATEREQUAL
28000: AND
28001: IFFALSE 28013
// result := weapon ;
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: LD_VAR 0 18
28012: ST_TO_ADDR
// end ; end ;
28013: LD_VAR 0 3
28017: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28018: LD_INT 0
28020: PPUSH
28021: PPUSH
// result := true ;
28022: LD_ADDR_VAR 0 3
28026: PUSH
28027: LD_INT 1
28029: ST_TO_ADDR
// if array1 = array2 then
28030: LD_VAR 0 1
28034: PUSH
28035: LD_VAR 0 2
28039: EQUAL
28040: IFFALSE 28100
// begin for i = 1 to array1 do
28042: LD_ADDR_VAR 0 4
28046: PUSH
28047: DOUBLE
28048: LD_INT 1
28050: DEC
28051: ST_TO_ADDR
28052: LD_VAR 0 1
28056: PUSH
28057: FOR_TO
28058: IFFALSE 28096
// if array1 [ i ] <> array2 [ i ] then
28060: LD_VAR 0 1
28064: PUSH
28065: LD_VAR 0 4
28069: ARRAY
28070: PUSH
28071: LD_VAR 0 2
28075: PUSH
28076: LD_VAR 0 4
28080: ARRAY
28081: NONEQUAL
28082: IFFALSE 28094
// begin result := false ;
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 0
28091: ST_TO_ADDR
// break ;
28092: GO 28096
// end ;
28094: GO 28057
28096: POP
28097: POP
// end else
28098: GO 28108
// result := false ;
28100: LD_ADDR_VAR 0 3
28104: PUSH
28105: LD_INT 0
28107: ST_TO_ADDR
// end ;
28108: LD_VAR 0 3
28112: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28113: LD_INT 0
28115: PPUSH
28116: PPUSH
// if not array1 or not array2 then
28117: LD_VAR 0 1
28121: NOT
28122: PUSH
28123: LD_VAR 0 2
28127: NOT
28128: OR
28129: IFFALSE 28133
// exit ;
28131: GO 28197
// result := true ;
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 1
28140: ST_TO_ADDR
// for i = 1 to array1 do
28141: LD_ADDR_VAR 0 4
28145: PUSH
28146: DOUBLE
28147: LD_INT 1
28149: DEC
28150: ST_TO_ADDR
28151: LD_VAR 0 1
28155: PUSH
28156: FOR_TO
28157: IFFALSE 28195
// if array1 [ i ] <> array2 [ i ] then
28159: LD_VAR 0 1
28163: PUSH
28164: LD_VAR 0 4
28168: ARRAY
28169: PUSH
28170: LD_VAR 0 2
28174: PUSH
28175: LD_VAR 0 4
28179: ARRAY
28180: NONEQUAL
28181: IFFALSE 28193
// begin result := false ;
28183: LD_ADDR_VAR 0 3
28187: PUSH
28188: LD_INT 0
28190: ST_TO_ADDR
// break ;
28191: GO 28195
// end ;
28193: GO 28156
28195: POP
28196: POP
// end ;
28197: LD_VAR 0 3
28201: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28202: LD_INT 0
28204: PPUSH
28205: PPUSH
28206: PPUSH
// pom := GetBase ( fac ) ;
28207: LD_ADDR_VAR 0 5
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 274
28221: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28222: LD_ADDR_VAR 0 4
28226: PUSH
28227: LD_VAR 0 2
28231: PUSH
28232: LD_INT 1
28234: ARRAY
28235: PPUSH
28236: LD_VAR 0 2
28240: PUSH
28241: LD_INT 2
28243: ARRAY
28244: PPUSH
28245: LD_VAR 0 2
28249: PUSH
28250: LD_INT 3
28252: ARRAY
28253: PPUSH
28254: LD_VAR 0 2
28258: PUSH
28259: LD_INT 4
28261: ARRAY
28262: PPUSH
28263: CALL_OW 449
28267: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28268: LD_ADDR_VAR 0 3
28272: PUSH
28273: LD_VAR 0 5
28277: PPUSH
28278: LD_INT 1
28280: PPUSH
28281: CALL_OW 275
28285: PUSH
28286: LD_VAR 0 4
28290: PUSH
28291: LD_INT 1
28293: ARRAY
28294: GREATEREQUAL
28295: PUSH
28296: LD_VAR 0 5
28300: PPUSH
28301: LD_INT 2
28303: PPUSH
28304: CALL_OW 275
28308: PUSH
28309: LD_VAR 0 4
28313: PUSH
28314: LD_INT 2
28316: ARRAY
28317: GREATEREQUAL
28318: AND
28319: PUSH
28320: LD_VAR 0 5
28324: PPUSH
28325: LD_INT 3
28327: PPUSH
28328: CALL_OW 275
28332: PUSH
28333: LD_VAR 0 4
28337: PUSH
28338: LD_INT 3
28340: ARRAY
28341: GREATEREQUAL
28342: AND
28343: ST_TO_ADDR
// end ;
28344: LD_VAR 0 3
28348: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28349: LD_INT 0
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
// pom := GetBase ( building ) ;
28355: LD_ADDR_VAR 0 3
28359: PUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: CALL_OW 274
28369: ST_TO_ADDR
// if not pom then
28370: LD_VAR 0 3
28374: NOT
28375: IFFALSE 28379
// exit ;
28377: GO 28549
// btype := GetBType ( building ) ;
28379: LD_ADDR_VAR 0 5
28383: PUSH
28384: LD_VAR 0 1
28388: PPUSH
28389: CALL_OW 266
28393: ST_TO_ADDR
// if btype = b_armoury then
28394: LD_VAR 0 5
28398: PUSH
28399: LD_INT 4
28401: EQUAL
28402: IFFALSE 28412
// btype := b_barracks ;
28404: LD_ADDR_VAR 0 5
28408: PUSH
28409: LD_INT 5
28411: ST_TO_ADDR
// if btype = b_depot then
28412: LD_VAR 0 5
28416: PUSH
28417: LD_INT 0
28419: EQUAL
28420: IFFALSE 28430
// btype := b_warehouse ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_INT 1
28429: ST_TO_ADDR
// if btype = b_workshop then
28430: LD_VAR 0 5
28434: PUSH
28435: LD_INT 2
28437: EQUAL
28438: IFFALSE 28448
// btype := b_factory ;
28440: LD_ADDR_VAR 0 5
28444: PUSH
28445: LD_INT 3
28447: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28448: LD_ADDR_VAR 0 4
28452: PUSH
28453: LD_VAR 0 5
28457: PPUSH
28458: LD_VAR 0 1
28462: PPUSH
28463: CALL_OW 248
28467: PPUSH
28468: CALL_OW 450
28472: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_VAR 0 3
28482: PPUSH
28483: LD_INT 1
28485: PPUSH
28486: CALL_OW 275
28490: PUSH
28491: LD_VAR 0 4
28495: PUSH
28496: LD_INT 1
28498: ARRAY
28499: GREATEREQUAL
28500: PUSH
28501: LD_VAR 0 3
28505: PPUSH
28506: LD_INT 2
28508: PPUSH
28509: CALL_OW 275
28513: PUSH
28514: LD_VAR 0 4
28518: PUSH
28519: LD_INT 2
28521: ARRAY
28522: GREATEREQUAL
28523: AND
28524: PUSH
28525: LD_VAR 0 3
28529: PPUSH
28530: LD_INT 3
28532: PPUSH
28533: CALL_OW 275
28537: PUSH
28538: LD_VAR 0 4
28542: PUSH
28543: LD_INT 3
28545: ARRAY
28546: GREATEREQUAL
28547: AND
28548: ST_TO_ADDR
// end ;
28549: LD_VAR 0 2
28553: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28554: LD_INT 0
28556: PPUSH
28557: PPUSH
28558: PPUSH
// pom := GetBase ( building ) ;
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: LD_VAR 0 1
28568: PPUSH
28569: CALL_OW 274
28573: ST_TO_ADDR
// if not pom then
28574: LD_VAR 0 4
28578: NOT
28579: IFFALSE 28583
// exit ;
28581: GO 28684
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28583: LD_ADDR_VAR 0 5
28587: PUSH
28588: LD_VAR 0 2
28592: PPUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 248
28602: PPUSH
28603: CALL_OW 450
28607: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: LD_VAR 0 4
28617: PPUSH
28618: LD_INT 1
28620: PPUSH
28621: CALL_OW 275
28625: PUSH
28626: LD_VAR 0 5
28630: PUSH
28631: LD_INT 1
28633: ARRAY
28634: GREATEREQUAL
28635: PUSH
28636: LD_VAR 0 4
28640: PPUSH
28641: LD_INT 2
28643: PPUSH
28644: CALL_OW 275
28648: PUSH
28649: LD_VAR 0 5
28653: PUSH
28654: LD_INT 2
28656: ARRAY
28657: GREATEREQUAL
28658: AND
28659: PUSH
28660: LD_VAR 0 4
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: CALL_OW 275
28672: PUSH
28673: LD_VAR 0 5
28677: PUSH
28678: LD_INT 3
28680: ARRAY
28681: GREATEREQUAL
28682: AND
28683: ST_TO_ADDR
// end ;
28684: LD_VAR 0 3
28688: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28689: LD_INT 0
28691: PPUSH
28692: PPUSH
28693: PPUSH
28694: PPUSH
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
28701: PPUSH
// result := false ;
28702: LD_ADDR_VAR 0 8
28706: PUSH
28707: LD_INT 0
28709: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28710: LD_VAR 0 5
28714: NOT
28715: PUSH
28716: LD_VAR 0 1
28720: NOT
28721: OR
28722: PUSH
28723: LD_VAR 0 2
28727: NOT
28728: OR
28729: PUSH
28730: LD_VAR 0 3
28734: NOT
28735: OR
28736: IFFALSE 28740
// exit ;
28738: GO 29554
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28740: LD_ADDR_VAR 0 14
28744: PUSH
28745: LD_VAR 0 1
28749: PPUSH
28750: LD_VAR 0 2
28754: PPUSH
28755: LD_VAR 0 3
28759: PPUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: LD_VAR 0 5
28769: PUSH
28770: LD_INT 1
28772: ARRAY
28773: PPUSH
28774: CALL_OW 248
28778: PPUSH
28779: LD_INT 0
28781: PPUSH
28782: CALL 30807 0 6
28786: ST_TO_ADDR
// if not hexes then
28787: LD_VAR 0 14
28791: NOT
28792: IFFALSE 28796
// exit ;
28794: GO 29554
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28796: LD_ADDR_VAR 0 17
28800: PUSH
28801: LD_VAR 0 5
28805: PPUSH
28806: LD_INT 22
28808: PUSH
28809: LD_VAR 0 13
28813: PPUSH
28814: CALL_OW 255
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: LD_INT 30
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 30
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PPUSH
28855: CALL_OW 72
28859: ST_TO_ADDR
// for i = 1 to hexes do
28860: LD_ADDR_VAR 0 9
28864: PUSH
28865: DOUBLE
28866: LD_INT 1
28868: DEC
28869: ST_TO_ADDR
28870: LD_VAR 0 14
28874: PUSH
28875: FOR_TO
28876: IFFALSE 29552
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28878: LD_ADDR_VAR 0 13
28882: PUSH
28883: LD_VAR 0 14
28887: PUSH
28888: LD_VAR 0 9
28892: ARRAY
28893: PUSH
28894: LD_INT 1
28896: ARRAY
28897: PPUSH
28898: LD_VAR 0 14
28902: PUSH
28903: LD_VAR 0 9
28907: ARRAY
28908: PUSH
28909: LD_INT 2
28911: ARRAY
28912: PPUSH
28913: CALL_OW 428
28917: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28918: LD_VAR 0 14
28922: PUSH
28923: LD_VAR 0 9
28927: ARRAY
28928: PUSH
28929: LD_INT 1
28931: ARRAY
28932: PPUSH
28933: LD_VAR 0 14
28937: PUSH
28938: LD_VAR 0 9
28942: ARRAY
28943: PUSH
28944: LD_INT 2
28946: ARRAY
28947: PPUSH
28948: CALL_OW 351
28952: PUSH
28953: LD_VAR 0 14
28957: PUSH
28958: LD_VAR 0 9
28962: ARRAY
28963: PUSH
28964: LD_INT 1
28966: ARRAY
28967: PPUSH
28968: LD_VAR 0 14
28972: PUSH
28973: LD_VAR 0 9
28977: ARRAY
28978: PUSH
28979: LD_INT 2
28981: ARRAY
28982: PPUSH
28983: CALL_OW 488
28987: NOT
28988: OR
28989: PUSH
28990: LD_VAR 0 13
28994: PPUSH
28995: CALL_OW 247
28999: PUSH
29000: LD_INT 3
29002: EQUAL
29003: OR
29004: IFFALSE 29010
// exit ;
29006: POP
29007: POP
29008: GO 29554
// if not tmp then
29010: LD_VAR 0 13
29014: NOT
29015: IFFALSE 29019
// continue ;
29017: GO 28875
// result := true ;
29019: LD_ADDR_VAR 0 8
29023: PUSH
29024: LD_INT 1
29026: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29027: LD_VAR 0 6
29031: PUSH
29032: LD_VAR 0 13
29036: PPUSH
29037: CALL_OW 247
29041: PUSH
29042: LD_INT 2
29044: EQUAL
29045: AND
29046: PUSH
29047: LD_VAR 0 13
29051: PPUSH
29052: CALL_OW 263
29056: PUSH
29057: LD_INT 1
29059: EQUAL
29060: AND
29061: IFFALSE 29225
// begin if IsDrivenBy ( tmp ) then
29063: LD_VAR 0 13
29067: PPUSH
29068: CALL_OW 311
29072: IFFALSE 29076
// continue ;
29074: GO 28875
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29076: LD_VAR 0 6
29080: PPUSH
29081: LD_INT 3
29083: PUSH
29084: LD_INT 60
29086: PUSH
29087: EMPTY
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: LD_INT 55
29099: PUSH
29100: EMPTY
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PPUSH
29111: CALL_OW 72
29115: IFFALSE 29223
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29117: LD_ADDR_VAR 0 18
29121: PUSH
29122: LD_VAR 0 6
29126: PPUSH
29127: LD_INT 3
29129: PUSH
29130: LD_INT 60
29132: PUSH
29133: EMPTY
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 55
29145: PUSH
29146: EMPTY
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 72
29161: PUSH
29162: LD_INT 1
29164: ARRAY
29165: ST_TO_ADDR
// if IsInUnit ( driver ) then
29166: LD_VAR 0 18
29170: PPUSH
29171: CALL_OW 310
29175: IFFALSE 29186
// ComExit ( driver ) ;
29177: LD_VAR 0 18
29181: PPUSH
29182: CALL 54588 0 1
// AddComEnterUnit ( driver , tmp ) ;
29186: LD_VAR 0 18
29190: PPUSH
29191: LD_VAR 0 13
29195: PPUSH
29196: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29200: LD_VAR 0 18
29204: PPUSH
29205: LD_VAR 0 7
29209: PPUSH
29210: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29214: LD_VAR 0 18
29218: PPUSH
29219: CALL_OW 181
// end ; continue ;
29223: GO 28875
// end ; if not cleaners or not tmp in cleaners then
29225: LD_VAR 0 6
29229: NOT
29230: PUSH
29231: LD_VAR 0 13
29235: PUSH
29236: LD_VAR 0 6
29240: IN
29241: NOT
29242: OR
29243: IFFALSE 29550
// begin if dep then
29245: LD_VAR 0 17
29249: IFFALSE 29385
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29251: LD_ADDR_VAR 0 16
29255: PUSH
29256: LD_VAR 0 17
29260: PUSH
29261: LD_INT 1
29263: ARRAY
29264: PPUSH
29265: CALL_OW 250
29269: PPUSH
29270: LD_VAR 0 17
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: PPUSH
29279: CALL_OW 254
29283: PPUSH
29284: LD_INT 5
29286: PPUSH
29287: CALL_OW 272
29291: PUSH
29292: LD_VAR 0 17
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: CALL_OW 251
29305: PPUSH
29306: LD_VAR 0 17
29310: PUSH
29311: LD_INT 1
29313: ARRAY
29314: PPUSH
29315: CALL_OW 254
29319: PPUSH
29320: LD_INT 5
29322: PPUSH
29323: CALL_OW 273
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29332: LD_VAR 0 16
29336: PUSH
29337: LD_INT 1
29339: ARRAY
29340: PPUSH
29341: LD_VAR 0 16
29345: PUSH
29346: LD_INT 2
29348: ARRAY
29349: PPUSH
29350: CALL_OW 488
29354: IFFALSE 29385
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29356: LD_VAR 0 13
29360: PPUSH
29361: LD_VAR 0 16
29365: PUSH
29366: LD_INT 1
29368: ARRAY
29369: PPUSH
29370: LD_VAR 0 16
29374: PUSH
29375: LD_INT 2
29377: ARRAY
29378: PPUSH
29379: CALL_OW 111
// continue ;
29383: GO 28875
// end ; end ; r := GetDir ( tmp ) ;
29385: LD_ADDR_VAR 0 15
29389: PUSH
29390: LD_VAR 0 13
29394: PPUSH
29395: CALL_OW 254
29399: ST_TO_ADDR
// if r = 5 then
29400: LD_VAR 0 15
29404: PUSH
29405: LD_INT 5
29407: EQUAL
29408: IFFALSE 29418
// r := 0 ;
29410: LD_ADDR_VAR 0 15
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
// for j = r to 5 do
29418: LD_ADDR_VAR 0 10
29422: PUSH
29423: DOUBLE
29424: LD_VAR 0 15
29428: DEC
29429: ST_TO_ADDR
29430: LD_INT 5
29432: PUSH
29433: FOR_TO
29434: IFFALSE 29548
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29436: LD_ADDR_VAR 0 11
29440: PUSH
29441: LD_VAR 0 13
29445: PPUSH
29446: CALL_OW 250
29450: PPUSH
29451: LD_VAR 0 10
29455: PPUSH
29456: LD_INT 2
29458: PPUSH
29459: CALL_OW 272
29463: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29464: LD_ADDR_VAR 0 12
29468: PUSH
29469: LD_VAR 0 13
29473: PPUSH
29474: CALL_OW 251
29478: PPUSH
29479: LD_VAR 0 10
29483: PPUSH
29484: LD_INT 2
29486: PPUSH
29487: CALL_OW 273
29491: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29492: LD_VAR 0 11
29496: PPUSH
29497: LD_VAR 0 12
29501: PPUSH
29502: CALL_OW 488
29506: PUSH
29507: LD_VAR 0 11
29511: PPUSH
29512: LD_VAR 0 12
29516: PPUSH
29517: CALL_OW 428
29521: NOT
29522: AND
29523: IFFALSE 29546
// begin ComMoveXY ( tmp , _x , _y ) ;
29525: LD_VAR 0 13
29529: PPUSH
29530: LD_VAR 0 11
29534: PPUSH
29535: LD_VAR 0 12
29539: PPUSH
29540: CALL_OW 111
// break ;
29544: GO 29548
// end ; end ;
29546: GO 29433
29548: POP
29549: POP
// end ; end ;
29550: GO 28875
29552: POP
29553: POP
// end ;
29554: LD_VAR 0 8
29558: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29559: LD_INT 0
29561: PPUSH
// result := true ;
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 1
29569: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29570: LD_VAR 0 2
29574: PUSH
29575: LD_INT 24
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29589
29581: LD_INT 33
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29589
29587: GO 29614
29589: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29590: LD_ADDR_VAR 0 3
29594: PUSH
29595: LD_INT 32
29597: PPUSH
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 321
29607: PUSH
29608: LD_INT 2
29610: EQUAL
29611: ST_TO_ADDR
29612: GO 29930
29614: LD_INT 20
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29647
29622: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29623: LD_ADDR_VAR 0 3
29627: PUSH
29628: LD_INT 6
29630: PPUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: CALL_OW 321
29640: PUSH
29641: LD_INT 2
29643: EQUAL
29644: ST_TO_ADDR
29645: GO 29930
29647: LD_INT 22
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29661
29653: LD_INT 36
29655: DOUBLE
29656: EQUAL
29657: IFTRUE 29661
29659: GO 29686
29661: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29662: LD_ADDR_VAR 0 3
29666: PUSH
29667: LD_INT 15
29669: PPUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 321
29679: PUSH
29680: LD_INT 2
29682: EQUAL
29683: ST_TO_ADDR
29684: GO 29930
29686: LD_INT 30
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29719
29694: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_INT 20
29702: PPUSH
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 321
29712: PUSH
29713: LD_INT 2
29715: EQUAL
29716: ST_TO_ADDR
29717: GO 29930
29719: LD_INT 28
29721: DOUBLE
29722: EQUAL
29723: IFTRUE 29733
29725: LD_INT 21
29727: DOUBLE
29728: EQUAL
29729: IFTRUE 29733
29731: GO 29758
29733: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29734: LD_ADDR_VAR 0 3
29738: PUSH
29739: LD_INT 21
29741: PPUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 321
29751: PUSH
29752: LD_INT 2
29754: EQUAL
29755: ST_TO_ADDR
29756: GO 29930
29758: LD_INT 16
29760: DOUBLE
29761: EQUAL
29762: IFTRUE 29766
29764: GO 29791
29766: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29767: LD_ADDR_VAR 0 3
29771: PUSH
29772: LD_INT 84
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 321
29784: PUSH
29785: LD_INT 2
29787: EQUAL
29788: ST_TO_ADDR
29789: GO 29930
29791: LD_INT 19
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29805
29797: LD_INT 23
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29830
29805: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 83
29813: PPUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 321
29823: PUSH
29824: LD_INT 2
29826: EQUAL
29827: ST_TO_ADDR
29828: GO 29930
29830: LD_INT 17
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29863
29838: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29839: LD_ADDR_VAR 0 3
29843: PUSH
29844: LD_INT 39
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 321
29856: PUSH
29857: LD_INT 2
29859: EQUAL
29860: ST_TO_ADDR
29861: GO 29930
29863: LD_INT 18
29865: DOUBLE
29866: EQUAL
29867: IFTRUE 29871
29869: GO 29896
29871: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29872: LD_ADDR_VAR 0 3
29876: PUSH
29877: LD_INT 40
29879: PPUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: CALL_OW 321
29889: PUSH
29890: LD_INT 2
29892: EQUAL
29893: ST_TO_ADDR
29894: GO 29930
29896: LD_INT 27
29898: DOUBLE
29899: EQUAL
29900: IFTRUE 29904
29902: GO 29929
29904: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29905: LD_ADDR_VAR 0 3
29909: PUSH
29910: LD_INT 35
29912: PPUSH
29913: LD_VAR 0 1
29917: PPUSH
29918: CALL_OW 321
29922: PUSH
29923: LD_INT 2
29925: EQUAL
29926: ST_TO_ADDR
29927: GO 29930
29929: POP
// end ;
29930: LD_VAR 0 3
29934: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29935: LD_INT 0
29937: PPUSH
29938: PPUSH
29939: PPUSH
29940: PPUSH
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
// result := false ;
29948: LD_ADDR_VAR 0 6
29952: PUSH
29953: LD_INT 0
29955: ST_TO_ADDR
// if btype = b_depot then
29956: LD_VAR 0 2
29960: PUSH
29961: LD_INT 0
29963: EQUAL
29964: IFFALSE 29976
// begin result := true ;
29966: LD_ADDR_VAR 0 6
29970: PUSH
29971: LD_INT 1
29973: ST_TO_ADDR
// exit ;
29974: GO 30802
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29976: LD_VAR 0 1
29980: NOT
29981: PUSH
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 266
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: IN
30002: NOT
30003: OR
30004: PUSH
30005: LD_VAR 0 2
30009: NOT
30010: OR
30011: PUSH
30012: LD_VAR 0 5
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: IN
30043: NOT
30044: OR
30045: PUSH
30046: LD_VAR 0 3
30050: PPUSH
30051: LD_VAR 0 4
30055: PPUSH
30056: CALL_OW 488
30060: NOT
30061: OR
30062: IFFALSE 30066
// exit ;
30064: GO 30802
// side := GetSide ( depot ) ;
30066: LD_ADDR_VAR 0 9
30070: PUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 255
30080: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30081: LD_VAR 0 9
30085: PPUSH
30086: LD_VAR 0 2
30090: PPUSH
30091: CALL 29559 0 2
30095: NOT
30096: IFFALSE 30100
// exit ;
30098: GO 30802
// pom := GetBase ( depot ) ;
30100: LD_ADDR_VAR 0 10
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 274
30114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30115: LD_ADDR_VAR 0 11
30119: PUSH
30120: LD_VAR 0 2
30124: PPUSH
30125: LD_VAR 0 1
30129: PPUSH
30130: CALL_OW 248
30134: PPUSH
30135: CALL_OW 450
30139: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30140: LD_VAR 0 10
30144: PPUSH
30145: LD_INT 1
30147: PPUSH
30148: CALL_OW 275
30152: PUSH
30153: LD_VAR 0 11
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: GREATEREQUAL
30162: PUSH
30163: LD_VAR 0 10
30167: PPUSH
30168: LD_INT 2
30170: PPUSH
30171: CALL_OW 275
30175: PUSH
30176: LD_VAR 0 11
30180: PUSH
30181: LD_INT 2
30183: ARRAY
30184: GREATEREQUAL
30185: AND
30186: PUSH
30187: LD_VAR 0 10
30191: PPUSH
30192: LD_INT 3
30194: PPUSH
30195: CALL_OW 275
30199: PUSH
30200: LD_VAR 0 11
30204: PUSH
30205: LD_INT 3
30207: ARRAY
30208: GREATEREQUAL
30209: AND
30210: NOT
30211: IFFALSE 30215
// exit ;
30213: GO 30802
// if GetBType ( depot ) = b_depot then
30215: LD_VAR 0 1
30219: PPUSH
30220: CALL_OW 266
30224: PUSH
30225: LD_INT 0
30227: EQUAL
30228: IFFALSE 30240
// dist := 28 else
30230: LD_ADDR_VAR 0 14
30234: PUSH
30235: LD_INT 28
30237: ST_TO_ADDR
30238: GO 30248
// dist := 36 ;
30240: LD_ADDR_VAR 0 14
30244: PUSH
30245: LD_INT 36
30247: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_VAR 0 3
30257: PPUSH
30258: LD_VAR 0 4
30262: PPUSH
30263: CALL_OW 297
30267: PUSH
30268: LD_VAR 0 14
30272: GREATER
30273: IFFALSE 30277
// exit ;
30275: GO 30802
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30277: LD_ADDR_VAR 0 12
30281: PUSH
30282: LD_VAR 0 2
30286: PPUSH
30287: LD_VAR 0 3
30291: PPUSH
30292: LD_VAR 0 4
30296: PPUSH
30297: LD_VAR 0 5
30301: PPUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: CALL_OW 248
30311: PPUSH
30312: LD_INT 0
30314: PPUSH
30315: CALL 30807 0 6
30319: ST_TO_ADDR
// if not hexes then
30320: LD_VAR 0 12
30324: NOT
30325: IFFALSE 30329
// exit ;
30327: GO 30802
// hex := GetHexInfo ( x , y ) ;
30329: LD_ADDR_VAR 0 15
30333: PUSH
30334: LD_VAR 0 3
30338: PPUSH
30339: LD_VAR 0 4
30343: PPUSH
30344: CALL_OW 546
30348: ST_TO_ADDR
// if hex [ 1 ] then
30349: LD_VAR 0 15
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: IFFALSE 30361
// exit ;
30359: GO 30802
// height := hex [ 2 ] ;
30361: LD_ADDR_VAR 0 13
30365: PUSH
30366: LD_VAR 0 15
30370: PUSH
30371: LD_INT 2
30373: ARRAY
30374: ST_TO_ADDR
// for i = 1 to hexes do
30375: LD_ADDR_VAR 0 7
30379: PUSH
30380: DOUBLE
30381: LD_INT 1
30383: DEC
30384: ST_TO_ADDR
30385: LD_VAR 0 12
30389: PUSH
30390: FOR_TO
30391: IFFALSE 30721
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30393: LD_VAR 0 12
30397: PUSH
30398: LD_VAR 0 7
30402: ARRAY
30403: PUSH
30404: LD_INT 1
30406: ARRAY
30407: PPUSH
30408: LD_VAR 0 12
30412: PUSH
30413: LD_VAR 0 7
30417: ARRAY
30418: PUSH
30419: LD_INT 2
30421: ARRAY
30422: PPUSH
30423: CALL_OW 488
30427: NOT
30428: PUSH
30429: LD_VAR 0 12
30433: PUSH
30434: LD_VAR 0 7
30438: ARRAY
30439: PUSH
30440: LD_INT 1
30442: ARRAY
30443: PPUSH
30444: LD_VAR 0 12
30448: PUSH
30449: LD_VAR 0 7
30453: ARRAY
30454: PUSH
30455: LD_INT 2
30457: ARRAY
30458: PPUSH
30459: CALL_OW 428
30463: PUSH
30464: LD_INT 0
30466: GREATER
30467: OR
30468: PUSH
30469: LD_VAR 0 12
30473: PUSH
30474: LD_VAR 0 7
30478: ARRAY
30479: PUSH
30480: LD_INT 1
30482: ARRAY
30483: PPUSH
30484: LD_VAR 0 12
30488: PUSH
30489: LD_VAR 0 7
30493: ARRAY
30494: PUSH
30495: LD_INT 2
30497: ARRAY
30498: PPUSH
30499: CALL_OW 351
30503: OR
30504: IFFALSE 30510
// exit ;
30506: POP
30507: POP
30508: GO 30802
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30510: LD_ADDR_VAR 0 8
30514: PUSH
30515: LD_VAR 0 12
30519: PUSH
30520: LD_VAR 0 7
30524: ARRAY
30525: PUSH
30526: LD_INT 1
30528: ARRAY
30529: PPUSH
30530: LD_VAR 0 12
30534: PUSH
30535: LD_VAR 0 7
30539: ARRAY
30540: PUSH
30541: LD_INT 2
30543: ARRAY
30544: PPUSH
30545: CALL_OW 546
30549: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30550: LD_VAR 0 8
30554: PUSH
30555: LD_INT 1
30557: ARRAY
30558: PUSH
30559: LD_VAR 0 8
30563: PUSH
30564: LD_INT 2
30566: ARRAY
30567: PUSH
30568: LD_VAR 0 13
30572: PUSH
30573: LD_INT 2
30575: PLUS
30576: GREATER
30577: OR
30578: PUSH
30579: LD_VAR 0 8
30583: PUSH
30584: LD_INT 2
30586: ARRAY
30587: PUSH
30588: LD_VAR 0 13
30592: PUSH
30593: LD_INT 2
30595: MINUS
30596: LESS
30597: OR
30598: PUSH
30599: LD_VAR 0 8
30603: PUSH
30604: LD_INT 3
30606: ARRAY
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 8
30613: PUSH
30614: LD_INT 9
30616: PUSH
30617: LD_INT 10
30619: PUSH
30620: LD_INT 11
30622: PUSH
30623: LD_INT 12
30625: PUSH
30626: LD_INT 13
30628: PUSH
30629: LD_INT 16
30631: PUSH
30632: LD_INT 17
30634: PUSH
30635: LD_INT 18
30637: PUSH
30638: LD_INT 19
30640: PUSH
30641: LD_INT 20
30643: PUSH
30644: LD_INT 21
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: IN
30662: NOT
30663: OR
30664: PUSH
30665: LD_VAR 0 8
30669: PUSH
30670: LD_INT 5
30672: ARRAY
30673: NOT
30674: OR
30675: PUSH
30676: LD_VAR 0 8
30680: PUSH
30681: LD_INT 6
30683: ARRAY
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 7
30693: PUSH
30694: LD_INT 9
30696: PUSH
30697: LD_INT 10
30699: PUSH
30700: LD_INT 11
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: IN
30711: NOT
30712: OR
30713: IFFALSE 30719
// exit ;
30715: POP
30716: POP
30717: GO 30802
// end ;
30719: GO 30390
30721: POP
30722: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30723: LD_VAR 0 9
30727: PPUSH
30728: LD_VAR 0 3
30732: PPUSH
30733: LD_VAR 0 4
30737: PPUSH
30738: LD_INT 20
30740: PPUSH
30741: CALL 22725 0 4
30745: PUSH
30746: LD_INT 4
30748: ARRAY
30749: IFFALSE 30753
// exit ;
30751: GO 30802
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30753: LD_VAR 0 2
30757: PUSH
30758: LD_INT 29
30760: PUSH
30761: LD_INT 30
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: IN
30768: PUSH
30769: LD_VAR 0 3
30773: PPUSH
30774: LD_VAR 0 4
30778: PPUSH
30779: LD_VAR 0 9
30783: PPUSH
30784: CALL_OW 440
30788: NOT
30789: AND
30790: IFFALSE 30794
// exit ;
30792: GO 30802
// result := true ;
30794: LD_ADDR_VAR 0 6
30798: PUSH
30799: LD_INT 1
30801: ST_TO_ADDR
// end ;
30802: LD_VAR 0 6
30806: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30807: LD_INT 0
30809: PPUSH
30810: PPUSH
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
30819: PPUSH
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
// result = [ ] ;
30867: LD_ADDR_VAR 0 7
30871: PUSH
30872: EMPTY
30873: ST_TO_ADDR
// temp_list = [ ] ;
30874: LD_ADDR_VAR 0 9
30878: PUSH
30879: EMPTY
30880: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30881: LD_VAR 0 4
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: LD_INT 3
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: IN
30912: NOT
30913: PUSH
30914: LD_VAR 0 1
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: IN
30929: PUSH
30930: LD_VAR 0 5
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: IN
30949: NOT
30950: AND
30951: OR
30952: IFFALSE 30956
// exit ;
30954: GO 49347
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30956: LD_VAR 0 1
30960: PUSH
30961: LD_INT 6
30963: PUSH
30964: LD_INT 7
30966: PUSH
30967: LD_INT 8
30969: PUSH
30970: LD_INT 13
30972: PUSH
30973: LD_INT 12
30975: PUSH
30976: LD_INT 15
30978: PUSH
30979: LD_INT 11
30981: PUSH
30982: LD_INT 14
30984: PUSH
30985: LD_INT 10
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: IN
30999: IFFALSE 31009
// btype = b_lab ;
31001: LD_ADDR_VAR 0 1
31005: PUSH
31006: LD_INT 6
31008: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31009: LD_VAR 0 6
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: IN
31028: NOT
31029: PUSH
31030: LD_VAR 0 1
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: LD_INT 3
31046: PUSH
31047: LD_INT 6
31049: PUSH
31050: LD_INT 36
31052: PUSH
31053: LD_INT 4
31055: PUSH
31056: LD_INT 5
31058: PUSH
31059: LD_INT 31
31061: PUSH
31062: LD_INT 32
31064: PUSH
31065: LD_INT 33
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: IN
31081: NOT
31082: PUSH
31083: LD_VAR 0 6
31087: PUSH
31088: LD_INT 1
31090: EQUAL
31091: AND
31092: OR
31093: PUSH
31094: LD_VAR 0 1
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: IN
31109: NOT
31110: PUSH
31111: LD_VAR 0 6
31115: PUSH
31116: LD_INT 2
31118: EQUAL
31119: AND
31120: OR
31121: IFFALSE 31131
// mode = 0 ;
31123: LD_ADDR_VAR 0 6
31127: PUSH
31128: LD_INT 0
31130: ST_TO_ADDR
// case mode of 0 :
31131: LD_VAR 0 6
31135: PUSH
31136: LD_INT 0
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 42597
31144: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31145: LD_ADDR_VAR 0 11
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 2
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31338: LD_ADDR_VAR 0 12
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 1
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 2
31461: NEG
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: NEG
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31534: LD_ADDR_VAR 0 13
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: NEG
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31733: LD_ADDR_VAR 0 14
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: LD_INT 3
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 3
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31929: LD_ADDR_VAR 0 15
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32122: LD_ADDR_VAR 0 16
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32315: LD_ADDR_VAR 0 17
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32545: LD_ADDR_VAR 0 18
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 2
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32775: LD_ADDR_VAR 0 19
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33005: LD_ADDR_VAR 0 20
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: NEG
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: LD_INT 2
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 2
33204: NEG
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33235: LD_ADDR_VAR 0 21
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33465: LD_ADDR_VAR 0 22
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 2
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33695: LD_ADDR_VAR 0 23
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: LD_INT 2
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: LD_INT 3
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 3
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33975: LD_ADDR_VAR 0 24
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34251: LD_ADDR_VAR 0 25
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: NEG
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 3
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 3
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34525: LD_ADDR_VAR 0 26
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 3
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34801: LD_ADDR_VAR 0 27
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 3
35034: NEG
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35081: LD_ADDR_VAR 0 28
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 2
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: LD_INT 3
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: LD_INT 3
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 3
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 3
35328: NEG
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35363: LD_ADDR_VAR 0 29
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 2
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 3
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 3
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 3
35607: NEG
35608: PUSH
35609: LD_INT 2
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35642: LD_ADDR_VAR 0 30
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 3
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 3
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35920: LD_ADDR_VAR 0 31
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: LD_INT 3
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 3
36163: NEG
36164: PUSH
36165: LD_INT 2
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36198: LD_ADDR_VAR 0 32
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 2
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: NEG
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 3
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36476: LD_ADDR_VAR 0 33
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: LD_INT 3
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 3
36720: NEG
36721: PUSH
36722: LD_INT 2
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36755: LD_ADDR_VAR 0 34
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 3
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 3
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37035: LD_ADDR_VAR 0 35
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37147: LD_ADDR_VAR 0 36
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37259: LD_ADDR_VAR 0 37
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37371: LD_ADDR_VAR 0 38
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37483: LD_ADDR_VAR 0 39
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37595: LD_ADDR_VAR 0 40
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37707: LD_ADDR_VAR 0 41
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: LD_INT 3
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 3
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: NEG
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: NEG
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 3
38016: NEG
38017: PUSH
38018: LD_INT 3
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38057: LD_ADDR_VAR 0 42
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 3
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: LD_INT 3
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 3
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: LD_INT 3
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: NEG
38367: PUSH
38368: LD_INT 3
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38407: LD_ADDR_VAR 0 43
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 2
38584: NEG
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 3
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 3
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 3
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38755: LD_ADDR_VAR 0 44
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: LD_INT 3
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: NEG
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: LD_INT 3
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39105: LD_ADDR_VAR 0 45
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: NEG
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: NEG
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 3
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 3
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 2
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 3
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: LD_INT 3
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 3
39414: NEG
39415: PUSH
39416: LD_INT 3
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39455: LD_ADDR_VAR 0 46
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 3
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 3
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 3
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 3
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39803: LD_ADDR_VAR 0 47
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39954: LD_ADDR_VAR 0 48
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40101: LD_ADDR_VAR 0 49
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40245: LD_ADDR_VAR 0 50
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40389: LD_ADDR_VAR 0 51
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40536: LD_ADDR_VAR 0 52
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 2
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40687: LD_ADDR_VAR 0 53
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40917: LD_ADDR_VAR 0 54
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41147: LD_ADDR_VAR 0 55
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: NEG
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41377: LD_ADDR_VAR 0 56
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41607: LD_ADDR_VAR 0 57
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41837: LD_ADDR_VAR 0 58
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42067: LD_ADDR_VAR 0 59
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42155: LD_ADDR_VAR 0 60
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42243: LD_ADDR_VAR 0 61
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42331: LD_ADDR_VAR 0 62
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42419: LD_ADDR_VAR 0 63
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42507: LD_ADDR_VAR 0 64
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
// end ; 1 :
42595: GO 48492
42597: LD_INT 1
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 45228
42605: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42606: LD_ADDR_VAR 0 11
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 3
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 3
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42650: LD_ADDR_VAR 0 12
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42691: LD_ADDR_VAR 0 13
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42731: LD_ADDR_VAR 0 14
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42772: LD_ADDR_VAR 0 15
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 3
42801: NEG
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42816: LD_ADDR_VAR 0 16
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: LD_INT 3
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 3
42847: NEG
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42862: LD_ADDR_VAR 0 17
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: LD_INT 3
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42906: LD_ADDR_VAR 0 18
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42947: LD_ADDR_VAR 0 19
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42987: LD_ADDR_VAR 0 20
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 3
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43028: LD_ADDR_VAR 0 21
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 3
43057: NEG
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43072: LD_ADDR_VAR 0 22
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: NEG
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43118: LD_ADDR_VAR 0 23
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 4
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 3
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43162: LD_ADDR_VAR 0 24
43166: PUSH
43167: LD_INT 3
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 4
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43203: LD_ADDR_VAR 0 25
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 4
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43243: LD_ADDR_VAR 0 26
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 4
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43284: LD_ADDR_VAR 0 27
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 4
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43328: LD_ADDR_VAR 0 28
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 4
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 4
43359: NEG
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43374: LD_ADDR_VAR 0 29
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 4
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 4
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 5
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 5
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 4
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 6
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 6
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 5
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43529: LD_ADDR_VAR 0 30
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 4
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 4
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 4
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 5
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 5
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 5
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 6
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 6
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43672: LD_ADDR_VAR 0 31
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: LD_INT 3
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 3
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 4
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 4
43719: PUSH
43720: LD_INT 4
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 4
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 5
43739: PUSH
43740: LD_INT 4
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 5
43749: PUSH
43750: LD_INT 5
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 4
43759: PUSH
43760: LD_INT 5
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 6
43769: PUSH
43770: LD_INT 5
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 6
43779: PUSH
43780: LD_INT 6
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 5
43789: PUSH
43790: LD_INT 6
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43811: LD_ADDR_VAR 0 32
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 4
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 4
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 5
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 5
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 4
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 6
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 6
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 5
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43954: LD_ADDR_VAR 0 33
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 3
43972: NEG
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 3
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: NEG
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 4
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 4
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 4
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 5
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 5
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 5
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 6
44074: NEG
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 6
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44109: LD_ADDR_VAR 0 34
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: LD_INT 3
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: NEG
44141: PUSH
44142: LD_INT 3
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 3
44152: NEG
44153: PUSH
44154: LD_INT 4
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: LD_INT 3
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 4
44176: NEG
44177: PUSH
44178: LD_INT 4
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 4
44188: NEG
44189: PUSH
44190: LD_INT 5
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 5
44200: NEG
44201: PUSH
44202: LD_INT 4
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 5
44212: NEG
44213: PUSH
44214: LD_INT 5
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 5
44224: NEG
44225: PUSH
44226: LD_INT 6
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 6
44236: NEG
44237: PUSH
44238: LD_INT 5
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 6
44248: NEG
44249: PUSH
44250: LD_INT 6
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44272: LD_ADDR_VAR 0 41
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 3
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44316: LD_ADDR_VAR 0 42
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44357: LD_ADDR_VAR 0 43
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44397: LD_ADDR_VAR 0 44
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 3
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44438: LD_ADDR_VAR 0 45
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44482: LD_ADDR_VAR 0 46
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: LD_INT 3
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 3
44513: NEG
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44528: LD_ADDR_VAR 0 47
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 3
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44561: LD_ADDR_VAR 0 48
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44592: LD_ADDR_VAR 0 49
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 3
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44621: LD_ADDR_VAR 0 50
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44650: LD_ADDR_VAR 0 51
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44681: LD_ADDR_VAR 0 52
44685: PUSH
44686: LD_INT 3
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: NEG
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44714: LD_ADDR_VAR 0 53
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44758: LD_ADDR_VAR 0 54
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44799: LD_ADDR_VAR 0 55
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44839: LD_ADDR_VAR 0 56
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 3
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: LIST
44879: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44880: LD_ADDR_VAR 0 57
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 3
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 3
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44924: LD_ADDR_VAR 0 58
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: NEG
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44970: LD_ADDR_VAR 0 59
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45014: LD_ADDR_VAR 0 60
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45055: LD_ADDR_VAR 0 61
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45095: LD_ADDR_VAR 0 62
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45136: LD_ADDR_VAR 0 63
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45180: LD_ADDR_VAR 0 64
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: ST_TO_ADDR
// end ; 2 :
45226: GO 48492
45228: LD_INT 2
45230: DOUBLE
45231: EQUAL
45232: IFTRUE 45236
45234: GO 48491
45236: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45237: LD_ADDR_VAR 0 29
45241: PUSH
45242: LD_INT 4
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 4
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 5
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 5
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 5
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 3
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 4
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 4
45367: PUSH
45368: LD_INT 4
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 4
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 4
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 4
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 4
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 3
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 5
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 5
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 4
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 3
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 4
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 4
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 4
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 4
45622: NEG
45623: PUSH
45624: LD_INT 4
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 4
45634: NEG
45635: PUSH
45636: LD_INT 5
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: LD_INT 4
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: LD_INT 3
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 4
45670: NEG
45671: PUSH
45672: LD_INT 3
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 5
45682: NEG
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 5
45694: NEG
45695: PUSH
45696: LD_INT 5
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 5
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 5
45718: NEG
45719: PUSH
45720: LD_INT 3
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45775: LD_ADDR_VAR 0 30
45779: PUSH
45780: LD_INT 4
45782: PUSH
45783: LD_INT 4
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 4
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 5
45802: PUSH
45803: LD_INT 4
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 5
45812: PUSH
45813: LD_INT 5
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 4
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 4
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 5
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 5
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 4
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 4
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 4
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 4
45965: NEG
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 4
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 3
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 4
46010: NEG
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 5
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 5
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 5
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 3
46079: NEG
46080: PUSH
46081: LD_INT 4
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 4
46127: NEG
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 4
46139: NEG
46140: PUSH
46141: LD_INT 4
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 4
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 4
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 4
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 5
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 4
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 3
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 4
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 5
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 5
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46322: LD_ADDR_VAR 0 31
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 4
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 4
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 5
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 5
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 4
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 5
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 3
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 4
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 4
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 4
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 4
46524: NEG
46525: PUSH
46526: LD_INT 4
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: LD_INT 5
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 4
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 5
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 5
46596: NEG
46597: PUSH
46598: LD_INT 5
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 3
46608: NEG
46609: PUSH
46610: LD_INT 5
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 5
46620: NEG
46621: PUSH
46622: LD_INT 3
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 3
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 4
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 4
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 4
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 4
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 4
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 5
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 4
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 5
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46872: LD_ADDR_VAR 0 32
46876: PUSH
46877: LD_INT 4
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 4
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 4
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 5
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 5
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 5
46958: NEG
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: LD_INT 4
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 4
47041: NEG
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 4
47053: NEG
47054: PUSH
47055: LD_INT 4
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 4
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 4
47077: NEG
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 4
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 5
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 4
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 4
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 5
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 5
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 4
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 4
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 4
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 4
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 4
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 5
47304: PUSH
47305: LD_INT 4
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 5
47314: PUSH
47315: LD_INT 5
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 4
47324: PUSH
47325: LD_INT 5
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: LD_INT 4
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: LD_INT 5
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47419: LD_ADDR_VAR 0 33
47423: PUSH
47424: LD_INT 4
47426: NEG
47427: PUSH
47428: LD_INT 4
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 4
47438: NEG
47439: PUSH
47440: LD_INT 5
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 3
47450: NEG
47451: PUSH
47452: LD_INT 4
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: LD_INT 3
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 4
47474: NEG
47475: PUSH
47476: LD_INT 3
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 5
47486: NEG
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 5
47498: NEG
47499: PUSH
47500: LD_INT 5
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: LD_INT 5
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 5
47522: NEG
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 4
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 4
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 4
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 4
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 5
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 5
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 4
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 5
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 4
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 4
47759: PUSH
47760: LD_INT 4
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: LD_INT 4
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 4
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 4
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 4
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: LD_INT 4
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 5
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 5
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 4
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 3
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 5
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 3
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47957: LD_ADDR_VAR 0 34
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 4
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 5
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 4
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 3
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 4
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 5
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 5
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 4
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 4
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 4
48159: PUSH
48160: LD_INT 4
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 4
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 5
48179: PUSH
48180: LD_INT 4
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 5
48189: PUSH
48190: LD_INT 5
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 4
48199: PUSH
48200: LD_INT 5
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 4
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 5
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: LD_INT 5
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 4
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 4
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: LD_INT 4
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 4
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 4
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 5
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 5
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 5
48421: NEG
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// end ; end ;
48489: GO 48492
48491: POP
// case btype of b_depot , b_warehouse :
48492: LD_VAR 0 1
48496: PUSH
48497: LD_INT 0
48499: DOUBLE
48500: EQUAL
48501: IFTRUE 48511
48503: LD_INT 1
48505: DOUBLE
48506: EQUAL
48507: IFTRUE 48511
48509: GO 48712
48511: POP
// case nation of nation_american :
48512: LD_VAR 0 5
48516: PUSH
48517: LD_INT 1
48519: DOUBLE
48520: EQUAL
48521: IFTRUE 48525
48523: GO 48581
48525: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48526: LD_ADDR_VAR 0 9
48530: PUSH
48531: LD_VAR 0 11
48535: PUSH
48536: LD_VAR 0 12
48540: PUSH
48541: LD_VAR 0 13
48545: PUSH
48546: LD_VAR 0 14
48550: PUSH
48551: LD_VAR 0 15
48555: PUSH
48556: LD_VAR 0 16
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: PUSH
48569: LD_VAR 0 4
48573: PUSH
48574: LD_INT 1
48576: PLUS
48577: ARRAY
48578: ST_TO_ADDR
48579: GO 48710
48581: LD_INT 2
48583: DOUBLE
48584: EQUAL
48585: IFTRUE 48589
48587: GO 48645
48589: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48590: LD_ADDR_VAR 0 9
48594: PUSH
48595: LD_VAR 0 17
48599: PUSH
48600: LD_VAR 0 18
48604: PUSH
48605: LD_VAR 0 19
48609: PUSH
48610: LD_VAR 0 20
48614: PUSH
48615: LD_VAR 0 21
48619: PUSH
48620: LD_VAR 0 22
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: PUSH
48633: LD_VAR 0 4
48637: PUSH
48638: LD_INT 1
48640: PLUS
48641: ARRAY
48642: ST_TO_ADDR
48643: GO 48710
48645: LD_INT 3
48647: DOUBLE
48648: EQUAL
48649: IFTRUE 48653
48651: GO 48709
48653: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48654: LD_ADDR_VAR 0 9
48658: PUSH
48659: LD_VAR 0 23
48663: PUSH
48664: LD_VAR 0 24
48668: PUSH
48669: LD_VAR 0 25
48673: PUSH
48674: LD_VAR 0 26
48678: PUSH
48679: LD_VAR 0 27
48683: PUSH
48684: LD_VAR 0 28
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: PUSH
48697: LD_VAR 0 4
48701: PUSH
48702: LD_INT 1
48704: PLUS
48705: ARRAY
48706: ST_TO_ADDR
48707: GO 48710
48709: POP
48710: GO 49265
48712: LD_INT 2
48714: DOUBLE
48715: EQUAL
48716: IFTRUE 48726
48718: LD_INT 3
48720: DOUBLE
48721: EQUAL
48722: IFTRUE 48726
48724: GO 48782
48726: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48727: LD_ADDR_VAR 0 9
48731: PUSH
48732: LD_VAR 0 29
48736: PUSH
48737: LD_VAR 0 30
48741: PUSH
48742: LD_VAR 0 31
48746: PUSH
48747: LD_VAR 0 32
48751: PUSH
48752: LD_VAR 0 33
48756: PUSH
48757: LD_VAR 0 34
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: PUSH
48770: LD_VAR 0 4
48774: PUSH
48775: LD_INT 1
48777: PLUS
48778: ARRAY
48779: ST_TO_ADDR
48780: GO 49265
48782: LD_INT 16
48784: DOUBLE
48785: EQUAL
48786: IFTRUE 48844
48788: LD_INT 17
48790: DOUBLE
48791: EQUAL
48792: IFTRUE 48844
48794: LD_INT 18
48796: DOUBLE
48797: EQUAL
48798: IFTRUE 48844
48800: LD_INT 19
48802: DOUBLE
48803: EQUAL
48804: IFTRUE 48844
48806: LD_INT 22
48808: DOUBLE
48809: EQUAL
48810: IFTRUE 48844
48812: LD_INT 20
48814: DOUBLE
48815: EQUAL
48816: IFTRUE 48844
48818: LD_INT 21
48820: DOUBLE
48821: EQUAL
48822: IFTRUE 48844
48824: LD_INT 23
48826: DOUBLE
48827: EQUAL
48828: IFTRUE 48844
48830: LD_INT 24
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48844
48836: LD_INT 25
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48844
48842: GO 48900
48844: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48845: LD_ADDR_VAR 0 9
48849: PUSH
48850: LD_VAR 0 35
48854: PUSH
48855: LD_VAR 0 36
48859: PUSH
48860: LD_VAR 0 37
48864: PUSH
48865: LD_VAR 0 38
48869: PUSH
48870: LD_VAR 0 39
48874: PUSH
48875: LD_VAR 0 40
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: PUSH
48888: LD_VAR 0 4
48892: PUSH
48893: LD_INT 1
48895: PLUS
48896: ARRAY
48897: ST_TO_ADDR
48898: GO 49265
48900: LD_INT 6
48902: DOUBLE
48903: EQUAL
48904: IFTRUE 48956
48906: LD_INT 7
48908: DOUBLE
48909: EQUAL
48910: IFTRUE 48956
48912: LD_INT 8
48914: DOUBLE
48915: EQUAL
48916: IFTRUE 48956
48918: LD_INT 13
48920: DOUBLE
48921: EQUAL
48922: IFTRUE 48956
48924: LD_INT 12
48926: DOUBLE
48927: EQUAL
48928: IFTRUE 48956
48930: LD_INT 15
48932: DOUBLE
48933: EQUAL
48934: IFTRUE 48956
48936: LD_INT 11
48938: DOUBLE
48939: EQUAL
48940: IFTRUE 48956
48942: LD_INT 14
48944: DOUBLE
48945: EQUAL
48946: IFTRUE 48956
48948: LD_INT 10
48950: DOUBLE
48951: EQUAL
48952: IFTRUE 48956
48954: GO 49012
48956: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48957: LD_ADDR_VAR 0 9
48961: PUSH
48962: LD_VAR 0 41
48966: PUSH
48967: LD_VAR 0 42
48971: PUSH
48972: LD_VAR 0 43
48976: PUSH
48977: LD_VAR 0 44
48981: PUSH
48982: LD_VAR 0 45
48986: PUSH
48987: LD_VAR 0 46
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: PUSH
49000: LD_VAR 0 4
49004: PUSH
49005: LD_INT 1
49007: PLUS
49008: ARRAY
49009: ST_TO_ADDR
49010: GO 49265
49012: LD_INT 36
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49020
49018: GO 49076
49020: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49021: LD_ADDR_VAR 0 9
49025: PUSH
49026: LD_VAR 0 47
49030: PUSH
49031: LD_VAR 0 48
49035: PUSH
49036: LD_VAR 0 49
49040: PUSH
49041: LD_VAR 0 50
49045: PUSH
49046: LD_VAR 0 51
49050: PUSH
49051: LD_VAR 0 52
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: PUSH
49064: LD_VAR 0 4
49068: PUSH
49069: LD_INT 1
49071: PLUS
49072: ARRAY
49073: ST_TO_ADDR
49074: GO 49265
49076: LD_INT 4
49078: DOUBLE
49079: EQUAL
49080: IFTRUE 49102
49082: LD_INT 5
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49102
49088: LD_INT 34
49090: DOUBLE
49091: EQUAL
49092: IFTRUE 49102
49094: LD_INT 37
49096: DOUBLE
49097: EQUAL
49098: IFTRUE 49102
49100: GO 49158
49102: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49103: LD_ADDR_VAR 0 9
49107: PUSH
49108: LD_VAR 0 53
49112: PUSH
49113: LD_VAR 0 54
49117: PUSH
49118: LD_VAR 0 55
49122: PUSH
49123: LD_VAR 0 56
49127: PUSH
49128: LD_VAR 0 57
49132: PUSH
49133: LD_VAR 0 58
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: PUSH
49146: LD_VAR 0 4
49150: PUSH
49151: LD_INT 1
49153: PLUS
49154: ARRAY
49155: ST_TO_ADDR
49156: GO 49265
49158: LD_INT 31
49160: DOUBLE
49161: EQUAL
49162: IFTRUE 49208
49164: LD_INT 32
49166: DOUBLE
49167: EQUAL
49168: IFTRUE 49208
49170: LD_INT 33
49172: DOUBLE
49173: EQUAL
49174: IFTRUE 49208
49176: LD_INT 27
49178: DOUBLE
49179: EQUAL
49180: IFTRUE 49208
49182: LD_INT 26
49184: DOUBLE
49185: EQUAL
49186: IFTRUE 49208
49188: LD_INT 28
49190: DOUBLE
49191: EQUAL
49192: IFTRUE 49208
49194: LD_INT 29
49196: DOUBLE
49197: EQUAL
49198: IFTRUE 49208
49200: LD_INT 30
49202: DOUBLE
49203: EQUAL
49204: IFTRUE 49208
49206: GO 49264
49208: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49209: LD_ADDR_VAR 0 9
49213: PUSH
49214: LD_VAR 0 59
49218: PUSH
49219: LD_VAR 0 60
49223: PUSH
49224: LD_VAR 0 61
49228: PUSH
49229: LD_VAR 0 62
49233: PUSH
49234: LD_VAR 0 63
49238: PUSH
49239: LD_VAR 0 64
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: PUSH
49252: LD_VAR 0 4
49256: PUSH
49257: LD_INT 1
49259: PLUS
49260: ARRAY
49261: ST_TO_ADDR
49262: GO 49265
49264: POP
// temp_list2 = [ ] ;
49265: LD_ADDR_VAR 0 10
49269: PUSH
49270: EMPTY
49271: ST_TO_ADDR
// for i in temp_list do
49272: LD_ADDR_VAR 0 8
49276: PUSH
49277: LD_VAR 0 9
49281: PUSH
49282: FOR_IN
49283: IFFALSE 49335
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49285: LD_ADDR_VAR 0 10
49289: PUSH
49290: LD_VAR 0 10
49294: PUSH
49295: LD_VAR 0 8
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: PUSH
49304: LD_VAR 0 2
49308: PLUS
49309: PUSH
49310: LD_VAR 0 8
49314: PUSH
49315: LD_INT 2
49317: ARRAY
49318: PUSH
49319: LD_VAR 0 3
49323: PLUS
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: EMPTY
49330: LIST
49331: ADD
49332: ST_TO_ADDR
49333: GO 49282
49335: POP
49336: POP
// result = temp_list2 ;
49337: LD_ADDR_VAR 0 7
49341: PUSH
49342: LD_VAR 0 10
49346: ST_TO_ADDR
// end ;
49347: LD_VAR 0 7
49351: RET
// export function EnemyInRange ( unit , dist ) ; begin
49352: LD_INT 0
49354: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49355: LD_ADDR_VAR 0 3
49359: PUSH
49360: LD_VAR 0 1
49364: PPUSH
49365: CALL_OW 255
49369: PPUSH
49370: LD_VAR 0 1
49374: PPUSH
49375: CALL_OW 250
49379: PPUSH
49380: LD_VAR 0 1
49384: PPUSH
49385: CALL_OW 251
49389: PPUSH
49390: LD_VAR 0 2
49394: PPUSH
49395: CALL 22725 0 4
49399: PUSH
49400: LD_INT 4
49402: ARRAY
49403: ST_TO_ADDR
// end ;
49404: LD_VAR 0 3
49408: RET
// export function PlayerSeeMe ( unit ) ; begin
49409: LD_INT 0
49411: PPUSH
// result := See ( your_side , unit ) ;
49412: LD_ADDR_VAR 0 2
49416: PUSH
49417: LD_OWVAR 2
49421: PPUSH
49422: LD_VAR 0 1
49426: PPUSH
49427: CALL_OW 292
49431: ST_TO_ADDR
// end ;
49432: LD_VAR 0 2
49436: RET
// export function ReverseDir ( unit ) ; begin
49437: LD_INT 0
49439: PPUSH
// if not unit then
49440: LD_VAR 0 1
49444: NOT
49445: IFFALSE 49449
// exit ;
49447: GO 49472
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49449: LD_ADDR_VAR 0 2
49453: PUSH
49454: LD_VAR 0 1
49458: PPUSH
49459: CALL_OW 254
49463: PUSH
49464: LD_INT 3
49466: PLUS
49467: PUSH
49468: LD_INT 6
49470: MOD
49471: ST_TO_ADDR
// end ;
49472: LD_VAR 0 2
49476: RET
// export function ReverseArray ( array ) ; var i ; begin
49477: LD_INT 0
49479: PPUSH
49480: PPUSH
// if not array then
49481: LD_VAR 0 1
49485: NOT
49486: IFFALSE 49490
// exit ;
49488: GO 49545
// result := [ ] ;
49490: LD_ADDR_VAR 0 2
49494: PUSH
49495: EMPTY
49496: ST_TO_ADDR
// for i := array downto 1 do
49497: LD_ADDR_VAR 0 3
49501: PUSH
49502: DOUBLE
49503: LD_VAR 0 1
49507: INC
49508: ST_TO_ADDR
49509: LD_INT 1
49511: PUSH
49512: FOR_DOWNTO
49513: IFFALSE 49543
// result := Join ( result , array [ i ] ) ;
49515: LD_ADDR_VAR 0 2
49519: PUSH
49520: LD_VAR 0 2
49524: PPUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_VAR 0 3
49534: ARRAY
49535: PPUSH
49536: CALL 54190 0 2
49540: ST_TO_ADDR
49541: GO 49512
49543: POP
49544: POP
// end ;
49545: LD_VAR 0 2
49549: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49550: LD_INT 0
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
// if not unit or not hexes then
49558: LD_VAR 0 1
49562: NOT
49563: PUSH
49564: LD_VAR 0 2
49568: NOT
49569: OR
49570: IFFALSE 49574
// exit ;
49572: GO 49697
// dist := 9999 ;
49574: LD_ADDR_VAR 0 5
49578: PUSH
49579: LD_INT 9999
49581: ST_TO_ADDR
// for i = 1 to hexes do
49582: LD_ADDR_VAR 0 4
49586: PUSH
49587: DOUBLE
49588: LD_INT 1
49590: DEC
49591: ST_TO_ADDR
49592: LD_VAR 0 2
49596: PUSH
49597: FOR_TO
49598: IFFALSE 49685
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49600: LD_ADDR_VAR 0 6
49604: PUSH
49605: LD_VAR 0 1
49609: PPUSH
49610: LD_VAR 0 2
49614: PUSH
49615: LD_VAR 0 4
49619: ARRAY
49620: PUSH
49621: LD_INT 1
49623: ARRAY
49624: PPUSH
49625: LD_VAR 0 2
49629: PUSH
49630: LD_VAR 0 4
49634: ARRAY
49635: PUSH
49636: LD_INT 2
49638: ARRAY
49639: PPUSH
49640: CALL_OW 297
49644: ST_TO_ADDR
// if tdist < dist then
49645: LD_VAR 0 6
49649: PUSH
49650: LD_VAR 0 5
49654: LESS
49655: IFFALSE 49683
// begin hex := hexes [ i ] ;
49657: LD_ADDR_VAR 0 8
49661: PUSH
49662: LD_VAR 0 2
49666: PUSH
49667: LD_VAR 0 4
49671: ARRAY
49672: ST_TO_ADDR
// dist := tdist ;
49673: LD_ADDR_VAR 0 5
49677: PUSH
49678: LD_VAR 0 6
49682: ST_TO_ADDR
// end ; end ;
49683: GO 49597
49685: POP
49686: POP
// result := hex ;
49687: LD_ADDR_VAR 0 3
49691: PUSH
49692: LD_VAR 0 8
49696: ST_TO_ADDR
// end ;
49697: LD_VAR 0 3
49701: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49702: LD_INT 0
49704: PPUSH
49705: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49706: LD_VAR 0 1
49710: NOT
49711: PUSH
49712: LD_VAR 0 1
49716: PUSH
49717: LD_INT 21
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 23
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PPUSH
49741: CALL_OW 69
49745: IN
49746: NOT
49747: OR
49748: IFFALSE 49752
// exit ;
49750: GO 49799
// for i = 1 to 3 do
49752: LD_ADDR_VAR 0 3
49756: PUSH
49757: DOUBLE
49758: LD_INT 1
49760: DEC
49761: ST_TO_ADDR
49762: LD_INT 3
49764: PUSH
49765: FOR_TO
49766: IFFALSE 49797
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 250
49777: PPUSH
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 251
49787: PPUSH
49788: LD_INT 1
49790: PPUSH
49791: CALL_OW 453
49795: GO 49765
49797: POP
49798: POP
// end ;
49799: LD_VAR 0 2
49803: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49804: LD_INT 0
49806: PPUSH
49807: PPUSH
49808: PPUSH
49809: PPUSH
49810: PPUSH
49811: PPUSH
// if not unit or not enemy_unit then
49812: LD_VAR 0 1
49816: NOT
49817: PUSH
49818: LD_VAR 0 2
49822: NOT
49823: OR
49824: IFFALSE 49828
// exit ;
49826: GO 50295
// if GetLives ( i ) < 250 then
49828: LD_VAR 0 4
49832: PPUSH
49833: CALL_OW 256
49837: PUSH
49838: LD_INT 250
49840: LESS
49841: IFFALSE 49854
// begin ComAutodestruct ( i ) ;
49843: LD_VAR 0 4
49847: PPUSH
49848: CALL 49702 0 1
// exit ;
49852: GO 50295
// end ; x := GetX ( enemy_unit ) ;
49854: LD_ADDR_VAR 0 7
49858: PUSH
49859: LD_VAR 0 2
49863: PPUSH
49864: CALL_OW 250
49868: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49869: LD_ADDR_VAR 0 8
49873: PUSH
49874: LD_VAR 0 2
49878: PPUSH
49879: CALL_OW 251
49883: ST_TO_ADDR
// if not x or not y then
49884: LD_VAR 0 7
49888: NOT
49889: PUSH
49890: LD_VAR 0 8
49894: NOT
49895: OR
49896: IFFALSE 49900
// exit ;
49898: GO 50295
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49900: LD_ADDR_VAR 0 6
49904: PUSH
49905: LD_VAR 0 7
49909: PPUSH
49910: LD_INT 0
49912: PPUSH
49913: LD_INT 4
49915: PPUSH
49916: CALL_OW 272
49920: PUSH
49921: LD_VAR 0 8
49925: PPUSH
49926: LD_INT 0
49928: PPUSH
49929: LD_INT 4
49931: PPUSH
49932: CALL_OW 273
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_VAR 0 7
49945: PPUSH
49946: LD_INT 1
49948: PPUSH
49949: LD_INT 4
49951: PPUSH
49952: CALL_OW 272
49956: PUSH
49957: LD_VAR 0 8
49961: PPUSH
49962: LD_INT 1
49964: PPUSH
49965: LD_INT 4
49967: PPUSH
49968: CALL_OW 273
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_VAR 0 7
49981: PPUSH
49982: LD_INT 2
49984: PPUSH
49985: LD_INT 4
49987: PPUSH
49988: CALL_OW 272
49992: PUSH
49993: LD_VAR 0 8
49997: PPUSH
49998: LD_INT 2
50000: PPUSH
50001: LD_INT 4
50003: PPUSH
50004: CALL_OW 273
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_VAR 0 7
50017: PPUSH
50018: LD_INT 3
50020: PPUSH
50021: LD_INT 4
50023: PPUSH
50024: CALL_OW 272
50028: PUSH
50029: LD_VAR 0 8
50033: PPUSH
50034: LD_INT 3
50036: PPUSH
50037: LD_INT 4
50039: PPUSH
50040: CALL_OW 273
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_VAR 0 7
50053: PPUSH
50054: LD_INT 4
50056: PPUSH
50057: LD_INT 4
50059: PPUSH
50060: CALL_OW 272
50064: PUSH
50065: LD_VAR 0 8
50069: PPUSH
50070: LD_INT 4
50072: PPUSH
50073: LD_INT 4
50075: PPUSH
50076: CALL_OW 273
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_VAR 0 7
50089: PPUSH
50090: LD_INT 5
50092: PPUSH
50093: LD_INT 4
50095: PPUSH
50096: CALL_OW 272
50100: PUSH
50101: LD_VAR 0 8
50105: PPUSH
50106: LD_INT 5
50108: PPUSH
50109: LD_INT 4
50111: PPUSH
50112: CALL_OW 273
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// for i = tmp downto 1 do
50129: LD_ADDR_VAR 0 4
50133: PUSH
50134: DOUBLE
50135: LD_VAR 0 6
50139: INC
50140: ST_TO_ADDR
50141: LD_INT 1
50143: PUSH
50144: FOR_DOWNTO
50145: IFFALSE 50246
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50147: LD_VAR 0 6
50151: PUSH
50152: LD_VAR 0 4
50156: ARRAY
50157: PUSH
50158: LD_INT 1
50160: ARRAY
50161: PPUSH
50162: LD_VAR 0 6
50166: PUSH
50167: LD_VAR 0 4
50171: ARRAY
50172: PUSH
50173: LD_INT 2
50175: ARRAY
50176: PPUSH
50177: CALL_OW 488
50181: NOT
50182: PUSH
50183: LD_VAR 0 6
50187: PUSH
50188: LD_VAR 0 4
50192: ARRAY
50193: PUSH
50194: LD_INT 1
50196: ARRAY
50197: PPUSH
50198: LD_VAR 0 6
50202: PUSH
50203: LD_VAR 0 4
50207: ARRAY
50208: PUSH
50209: LD_INT 2
50211: ARRAY
50212: PPUSH
50213: CALL_OW 428
50217: PUSH
50218: LD_INT 0
50220: NONEQUAL
50221: OR
50222: IFFALSE 50244
// tmp := Delete ( tmp , i ) ;
50224: LD_ADDR_VAR 0 6
50228: PUSH
50229: LD_VAR 0 6
50233: PPUSH
50234: LD_VAR 0 4
50238: PPUSH
50239: CALL_OW 3
50243: ST_TO_ADDR
50244: GO 50144
50246: POP
50247: POP
// j := GetClosestHex ( unit , tmp ) ;
50248: LD_ADDR_VAR 0 5
50252: PUSH
50253: LD_VAR 0 1
50257: PPUSH
50258: LD_VAR 0 6
50262: PPUSH
50263: CALL 49550 0 2
50267: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50268: LD_VAR 0 1
50272: PPUSH
50273: LD_VAR 0 5
50277: PUSH
50278: LD_INT 1
50280: ARRAY
50281: PPUSH
50282: LD_VAR 0 5
50286: PUSH
50287: LD_INT 2
50289: ARRAY
50290: PPUSH
50291: CALL_OW 111
// end ;
50295: LD_VAR 0 3
50299: RET
// export function PrepareApemanSoldier ( ) ; begin
50300: LD_INT 0
50302: PPUSH
// uc_nation := 0 ;
50303: LD_ADDR_OWVAR 21
50307: PUSH
50308: LD_INT 0
50310: ST_TO_ADDR
// hc_sex := sex_male ;
50311: LD_ADDR_OWVAR 27
50315: PUSH
50316: LD_INT 1
50318: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50319: LD_ADDR_OWVAR 28
50323: PUSH
50324: LD_INT 15
50326: ST_TO_ADDR
// hc_gallery :=  ;
50327: LD_ADDR_OWVAR 33
50331: PUSH
50332: LD_STRING 
50334: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50335: LD_ADDR_OWVAR 31
50339: PUSH
50340: LD_INT 0
50342: PPUSH
50343: LD_INT 3
50345: PPUSH
50346: CALL_OW 12
50350: PUSH
50351: LD_INT 0
50353: PPUSH
50354: LD_INT 3
50356: PPUSH
50357: CALL_OW 12
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// end ;
50374: LD_VAR 0 1
50378: RET
// export function PrepareApemanEngineer ( ) ; begin
50379: LD_INT 0
50381: PPUSH
// uc_nation := 0 ;
50382: LD_ADDR_OWVAR 21
50386: PUSH
50387: LD_INT 0
50389: ST_TO_ADDR
// hc_sex := sex_male ;
50390: LD_ADDR_OWVAR 27
50394: PUSH
50395: LD_INT 1
50397: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50398: LD_ADDR_OWVAR 28
50402: PUSH
50403: LD_INT 16
50405: ST_TO_ADDR
// hc_gallery :=  ;
50406: LD_ADDR_OWVAR 33
50410: PUSH
50411: LD_STRING 
50413: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50414: LD_ADDR_OWVAR 31
50418: PUSH
50419: LD_INT 0
50421: PPUSH
50422: LD_INT 3
50424: PPUSH
50425: CALL_OW 12
50429: PUSH
50430: LD_INT 0
50432: PPUSH
50433: LD_INT 3
50435: PPUSH
50436: CALL_OW 12
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: ST_TO_ADDR
// end ;
50453: LD_VAR 0 1
50457: RET
// export function PrepareApeman ( agressivity ) ; begin
50458: LD_INT 0
50460: PPUSH
// uc_side := 0 ;
50461: LD_ADDR_OWVAR 20
50465: PUSH
50466: LD_INT 0
50468: ST_TO_ADDR
// uc_nation := 0 ;
50469: LD_ADDR_OWVAR 21
50473: PUSH
50474: LD_INT 0
50476: ST_TO_ADDR
// hc_sex := sex_male ;
50477: LD_ADDR_OWVAR 27
50481: PUSH
50482: LD_INT 1
50484: ST_TO_ADDR
// hc_class := class_apeman ;
50485: LD_ADDR_OWVAR 28
50489: PUSH
50490: LD_INT 12
50492: ST_TO_ADDR
// hc_gallery :=  ;
50493: LD_ADDR_OWVAR 33
50497: PUSH
50498: LD_STRING 
50500: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50501: LD_ADDR_OWVAR 35
50505: PUSH
50506: LD_VAR 0 1
50510: NEG
50511: PPUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: CALL_OW 12
50521: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50522: LD_ADDR_OWVAR 31
50526: PUSH
50527: LD_INT 0
50529: PPUSH
50530: LD_INT 3
50532: PPUSH
50533: CALL_OW 12
50537: PUSH
50538: LD_INT 0
50540: PPUSH
50541: LD_INT 3
50543: PPUSH
50544: CALL_OW 12
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// end ;
50561: LD_VAR 0 2
50565: RET
// export function PrepareTiger ( agressivity ) ; begin
50566: LD_INT 0
50568: PPUSH
// uc_side := 0 ;
50569: LD_ADDR_OWVAR 20
50573: PUSH
50574: LD_INT 0
50576: ST_TO_ADDR
// uc_nation := 0 ;
50577: LD_ADDR_OWVAR 21
50581: PUSH
50582: LD_INT 0
50584: ST_TO_ADDR
// hc_class := class_tiger ;
50585: LD_ADDR_OWVAR 28
50589: PUSH
50590: LD_INT 14
50592: ST_TO_ADDR
// hc_gallery :=  ;
50593: LD_ADDR_OWVAR 33
50597: PUSH
50598: LD_STRING 
50600: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50601: LD_ADDR_OWVAR 35
50605: PUSH
50606: LD_VAR 0 1
50610: NEG
50611: PPUSH
50612: LD_VAR 0 1
50616: PPUSH
50617: CALL_OW 12
50621: ST_TO_ADDR
// end ;
50622: LD_VAR 0 2
50626: RET
// export function PrepareEnchidna ( ) ; begin
50627: LD_INT 0
50629: PPUSH
// uc_side := 0 ;
50630: LD_ADDR_OWVAR 20
50634: PUSH
50635: LD_INT 0
50637: ST_TO_ADDR
// uc_nation := 0 ;
50638: LD_ADDR_OWVAR 21
50642: PUSH
50643: LD_INT 0
50645: ST_TO_ADDR
// hc_class := class_baggie ;
50646: LD_ADDR_OWVAR 28
50650: PUSH
50651: LD_INT 13
50653: ST_TO_ADDR
// hc_gallery :=  ;
50654: LD_ADDR_OWVAR 33
50658: PUSH
50659: LD_STRING 
50661: ST_TO_ADDR
// end ;
50662: LD_VAR 0 1
50666: RET
// export function PrepareFrog ( ) ; begin
50667: LD_INT 0
50669: PPUSH
// uc_side := 0 ;
50670: LD_ADDR_OWVAR 20
50674: PUSH
50675: LD_INT 0
50677: ST_TO_ADDR
// uc_nation := 0 ;
50678: LD_ADDR_OWVAR 21
50682: PUSH
50683: LD_INT 0
50685: ST_TO_ADDR
// hc_class := class_frog ;
50686: LD_ADDR_OWVAR 28
50690: PUSH
50691: LD_INT 19
50693: ST_TO_ADDR
// hc_gallery :=  ;
50694: LD_ADDR_OWVAR 33
50698: PUSH
50699: LD_STRING 
50701: ST_TO_ADDR
// end ;
50702: LD_VAR 0 1
50706: RET
// export function PrepareFish ( ) ; begin
50707: LD_INT 0
50709: PPUSH
// uc_side := 0 ;
50710: LD_ADDR_OWVAR 20
50714: PUSH
50715: LD_INT 0
50717: ST_TO_ADDR
// uc_nation := 0 ;
50718: LD_ADDR_OWVAR 21
50722: PUSH
50723: LD_INT 0
50725: ST_TO_ADDR
// hc_class := class_fish ;
50726: LD_ADDR_OWVAR 28
50730: PUSH
50731: LD_INT 20
50733: ST_TO_ADDR
// hc_gallery :=  ;
50734: LD_ADDR_OWVAR 33
50738: PUSH
50739: LD_STRING 
50741: ST_TO_ADDR
// end ;
50742: LD_VAR 0 1
50746: RET
// export function PrepareBird ( ) ; begin
50747: LD_INT 0
50749: PPUSH
// uc_side := 0 ;
50750: LD_ADDR_OWVAR 20
50754: PUSH
50755: LD_INT 0
50757: ST_TO_ADDR
// uc_nation := 0 ;
50758: LD_ADDR_OWVAR 21
50762: PUSH
50763: LD_INT 0
50765: ST_TO_ADDR
// hc_class := class_phororhacos ;
50766: LD_ADDR_OWVAR 28
50770: PUSH
50771: LD_INT 18
50773: ST_TO_ADDR
// hc_gallery :=  ;
50774: LD_ADDR_OWVAR 33
50778: PUSH
50779: LD_STRING 
50781: ST_TO_ADDR
// end ;
50782: LD_VAR 0 1
50786: RET
// export function PrepareHorse ( ) ; begin
50787: LD_INT 0
50789: PPUSH
// uc_side := 0 ;
50790: LD_ADDR_OWVAR 20
50794: PUSH
50795: LD_INT 0
50797: ST_TO_ADDR
// uc_nation := 0 ;
50798: LD_ADDR_OWVAR 21
50802: PUSH
50803: LD_INT 0
50805: ST_TO_ADDR
// hc_class := class_horse ;
50806: LD_ADDR_OWVAR 28
50810: PUSH
50811: LD_INT 21
50813: ST_TO_ADDR
// hc_gallery :=  ;
50814: LD_ADDR_OWVAR 33
50818: PUSH
50819: LD_STRING 
50821: ST_TO_ADDR
// end ;
50822: LD_VAR 0 1
50826: RET
// export function PrepareMastodont ( ) ; begin
50827: LD_INT 0
50829: PPUSH
// uc_side := 0 ;
50830: LD_ADDR_OWVAR 20
50834: PUSH
50835: LD_INT 0
50837: ST_TO_ADDR
// uc_nation := 0 ;
50838: LD_ADDR_OWVAR 21
50842: PUSH
50843: LD_INT 0
50845: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50846: LD_ADDR_OWVAR 37
50850: PUSH
50851: LD_INT 31
50853: ST_TO_ADDR
// vc_control := control_rider ;
50854: LD_ADDR_OWVAR 38
50858: PUSH
50859: LD_INT 4
50861: ST_TO_ADDR
// end ;
50862: LD_VAR 0 1
50866: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50867: LD_INT 0
50869: PPUSH
50870: PPUSH
50871: PPUSH
// uc_side = 0 ;
50872: LD_ADDR_OWVAR 20
50876: PUSH
50877: LD_INT 0
50879: ST_TO_ADDR
// uc_nation = 0 ;
50880: LD_ADDR_OWVAR 21
50884: PUSH
50885: LD_INT 0
50887: ST_TO_ADDR
// InitHc_All ( ) ;
50888: CALL_OW 584
// InitVc ;
50892: CALL_OW 20
// if mastodonts then
50896: LD_VAR 0 6
50900: IFFALSE 50967
// for i = 1 to mastodonts do
50902: LD_ADDR_VAR 0 11
50906: PUSH
50907: DOUBLE
50908: LD_INT 1
50910: DEC
50911: ST_TO_ADDR
50912: LD_VAR 0 6
50916: PUSH
50917: FOR_TO
50918: IFFALSE 50965
// begin vc_chassis := 31 ;
50920: LD_ADDR_OWVAR 37
50924: PUSH
50925: LD_INT 31
50927: ST_TO_ADDR
// vc_control := control_rider ;
50928: LD_ADDR_OWVAR 38
50932: PUSH
50933: LD_INT 4
50935: ST_TO_ADDR
// animal := CreateVehicle ;
50936: LD_ADDR_VAR 0 12
50940: PUSH
50941: CALL_OW 45
50945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50946: LD_VAR 0 12
50950: PPUSH
50951: LD_VAR 0 8
50955: PPUSH
50956: LD_INT 0
50958: PPUSH
50959: CALL 53095 0 3
// end ;
50963: GO 50917
50965: POP
50966: POP
// if horses then
50967: LD_VAR 0 5
50971: IFFALSE 51038
// for i = 1 to horses do
50973: LD_ADDR_VAR 0 11
50977: PUSH
50978: DOUBLE
50979: LD_INT 1
50981: DEC
50982: ST_TO_ADDR
50983: LD_VAR 0 5
50987: PUSH
50988: FOR_TO
50989: IFFALSE 51036
// begin hc_class := 21 ;
50991: LD_ADDR_OWVAR 28
50995: PUSH
50996: LD_INT 21
50998: ST_TO_ADDR
// hc_gallery :=  ;
50999: LD_ADDR_OWVAR 33
51003: PUSH
51004: LD_STRING 
51006: ST_TO_ADDR
// animal := CreateHuman ;
51007: LD_ADDR_VAR 0 12
51011: PUSH
51012: CALL_OW 44
51016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51017: LD_VAR 0 12
51021: PPUSH
51022: LD_VAR 0 8
51026: PPUSH
51027: LD_INT 0
51029: PPUSH
51030: CALL 53095 0 3
// end ;
51034: GO 50988
51036: POP
51037: POP
// if birds then
51038: LD_VAR 0 1
51042: IFFALSE 51109
// for i = 1 to birds do
51044: LD_ADDR_VAR 0 11
51048: PUSH
51049: DOUBLE
51050: LD_INT 1
51052: DEC
51053: ST_TO_ADDR
51054: LD_VAR 0 1
51058: PUSH
51059: FOR_TO
51060: IFFALSE 51107
// begin hc_class := 18 ;
51062: LD_ADDR_OWVAR 28
51066: PUSH
51067: LD_INT 18
51069: ST_TO_ADDR
// hc_gallery =  ;
51070: LD_ADDR_OWVAR 33
51074: PUSH
51075: LD_STRING 
51077: ST_TO_ADDR
// animal := CreateHuman ;
51078: LD_ADDR_VAR 0 12
51082: PUSH
51083: CALL_OW 44
51087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51088: LD_VAR 0 12
51092: PPUSH
51093: LD_VAR 0 8
51097: PPUSH
51098: LD_INT 0
51100: PPUSH
51101: CALL 53095 0 3
// end ;
51105: GO 51059
51107: POP
51108: POP
// if tigers then
51109: LD_VAR 0 2
51113: IFFALSE 51197
// for i = 1 to tigers do
51115: LD_ADDR_VAR 0 11
51119: PUSH
51120: DOUBLE
51121: LD_INT 1
51123: DEC
51124: ST_TO_ADDR
51125: LD_VAR 0 2
51129: PUSH
51130: FOR_TO
51131: IFFALSE 51195
// begin hc_class = class_tiger ;
51133: LD_ADDR_OWVAR 28
51137: PUSH
51138: LD_INT 14
51140: ST_TO_ADDR
// hc_gallery =  ;
51141: LD_ADDR_OWVAR 33
51145: PUSH
51146: LD_STRING 
51148: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51149: LD_ADDR_OWVAR 35
51153: PUSH
51154: LD_INT 7
51156: NEG
51157: PPUSH
51158: LD_INT 7
51160: PPUSH
51161: CALL_OW 12
51165: ST_TO_ADDR
// animal := CreateHuman ;
51166: LD_ADDR_VAR 0 12
51170: PUSH
51171: CALL_OW 44
51175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51176: LD_VAR 0 12
51180: PPUSH
51181: LD_VAR 0 8
51185: PPUSH
51186: LD_INT 0
51188: PPUSH
51189: CALL 53095 0 3
// end ;
51193: GO 51130
51195: POP
51196: POP
// if apemans then
51197: LD_VAR 0 3
51201: IFFALSE 51324
// for i = 1 to apemans do
51203: LD_ADDR_VAR 0 11
51207: PUSH
51208: DOUBLE
51209: LD_INT 1
51211: DEC
51212: ST_TO_ADDR
51213: LD_VAR 0 3
51217: PUSH
51218: FOR_TO
51219: IFFALSE 51322
// begin hc_class = class_apeman ;
51221: LD_ADDR_OWVAR 28
51225: PUSH
51226: LD_INT 12
51228: ST_TO_ADDR
// hc_gallery =  ;
51229: LD_ADDR_OWVAR 33
51233: PUSH
51234: LD_STRING 
51236: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51237: LD_ADDR_OWVAR 35
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PPUSH
51246: LD_INT 2
51248: PPUSH
51249: CALL_OW 12
51253: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51254: LD_ADDR_OWVAR 31
51258: PUSH
51259: LD_INT 1
51261: PPUSH
51262: LD_INT 3
51264: PPUSH
51265: CALL_OW 12
51269: PUSH
51270: LD_INT 1
51272: PPUSH
51273: LD_INT 3
51275: PPUSH
51276: CALL_OW 12
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// animal := CreateHuman ;
51293: LD_ADDR_VAR 0 12
51297: PUSH
51298: CALL_OW 44
51302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51303: LD_VAR 0 12
51307: PPUSH
51308: LD_VAR 0 8
51312: PPUSH
51313: LD_INT 0
51315: PPUSH
51316: CALL 53095 0 3
// end ;
51320: GO 51218
51322: POP
51323: POP
// if enchidnas then
51324: LD_VAR 0 4
51328: IFFALSE 51395
// for i = 1 to enchidnas do
51330: LD_ADDR_VAR 0 11
51334: PUSH
51335: DOUBLE
51336: LD_INT 1
51338: DEC
51339: ST_TO_ADDR
51340: LD_VAR 0 4
51344: PUSH
51345: FOR_TO
51346: IFFALSE 51393
// begin hc_class = 13 ;
51348: LD_ADDR_OWVAR 28
51352: PUSH
51353: LD_INT 13
51355: ST_TO_ADDR
// hc_gallery =  ;
51356: LD_ADDR_OWVAR 33
51360: PUSH
51361: LD_STRING 
51363: ST_TO_ADDR
// animal := CreateHuman ;
51364: LD_ADDR_VAR 0 12
51368: PUSH
51369: CALL_OW 44
51373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51374: LD_VAR 0 12
51378: PPUSH
51379: LD_VAR 0 8
51383: PPUSH
51384: LD_INT 0
51386: PPUSH
51387: CALL 53095 0 3
// end ;
51391: GO 51345
51393: POP
51394: POP
// if fishes then
51395: LD_VAR 0 7
51399: IFFALSE 51466
// for i = 1 to fishes do
51401: LD_ADDR_VAR 0 11
51405: PUSH
51406: DOUBLE
51407: LD_INT 1
51409: DEC
51410: ST_TO_ADDR
51411: LD_VAR 0 7
51415: PUSH
51416: FOR_TO
51417: IFFALSE 51464
// begin hc_class = 20 ;
51419: LD_ADDR_OWVAR 28
51423: PUSH
51424: LD_INT 20
51426: ST_TO_ADDR
// hc_gallery =  ;
51427: LD_ADDR_OWVAR 33
51431: PUSH
51432: LD_STRING 
51434: ST_TO_ADDR
// animal := CreateHuman ;
51435: LD_ADDR_VAR 0 12
51439: PUSH
51440: CALL_OW 44
51444: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51445: LD_VAR 0 12
51449: PPUSH
51450: LD_VAR 0 9
51454: PPUSH
51455: LD_INT 0
51457: PPUSH
51458: CALL 53095 0 3
// end ;
51462: GO 51416
51464: POP
51465: POP
// end ;
51466: LD_VAR 0 10
51470: RET
// export function WantHeal ( sci , unit ) ; begin
51471: LD_INT 0
51473: PPUSH
// if GetTaskList ( sci ) > 0 then
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 437
51483: PUSH
51484: LD_INT 0
51486: GREATER
51487: IFFALSE 51557
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL_OW 437
51498: PUSH
51499: LD_INT 1
51501: ARRAY
51502: PUSH
51503: LD_INT 1
51505: ARRAY
51506: PUSH
51507: LD_STRING l
51509: EQUAL
51510: PUSH
51511: LD_VAR 0 1
51515: PPUSH
51516: CALL_OW 437
51520: PUSH
51521: LD_INT 1
51523: ARRAY
51524: PUSH
51525: LD_INT 4
51527: ARRAY
51528: PUSH
51529: LD_VAR 0 2
51533: EQUAL
51534: AND
51535: IFFALSE 51547
// result := true else
51537: LD_ADDR_VAR 0 3
51541: PUSH
51542: LD_INT 1
51544: ST_TO_ADDR
51545: GO 51555
// result := false ;
51547: LD_ADDR_VAR 0 3
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// end else
51555: GO 51565
// result := false ;
51557: LD_ADDR_VAR 0 3
51561: PUSH
51562: LD_INT 0
51564: ST_TO_ADDR
// end ;
51565: LD_VAR 0 3
51569: RET
// export function HealTarget ( sci ) ; begin
51570: LD_INT 0
51572: PPUSH
// if not sci then
51573: LD_VAR 0 1
51577: NOT
51578: IFFALSE 51582
// exit ;
51580: GO 51647
// result := 0 ;
51582: LD_ADDR_VAR 0 2
51586: PUSH
51587: LD_INT 0
51589: ST_TO_ADDR
// if GetTaskList ( sci ) then
51590: LD_VAR 0 1
51594: PPUSH
51595: CALL_OW 437
51599: IFFALSE 51647
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51601: LD_VAR 0 1
51605: PPUSH
51606: CALL_OW 437
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: PUSH
51615: LD_INT 1
51617: ARRAY
51618: PUSH
51619: LD_STRING l
51621: EQUAL
51622: IFFALSE 51647
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51624: LD_ADDR_VAR 0 2
51628: PUSH
51629: LD_VAR 0 1
51633: PPUSH
51634: CALL_OW 437
51638: PUSH
51639: LD_INT 1
51641: ARRAY
51642: PUSH
51643: LD_INT 4
51645: ARRAY
51646: ST_TO_ADDR
// end ;
51647: LD_VAR 0 2
51651: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51652: LD_INT 0
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
// if not base_units then
51658: LD_VAR 0 1
51662: NOT
51663: IFFALSE 51667
// exit ;
51665: GO 51754
// result := false ;
51667: LD_ADDR_VAR 0 2
51671: PUSH
51672: LD_INT 0
51674: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51675: LD_ADDR_VAR 0 5
51679: PUSH
51680: LD_VAR 0 1
51684: PPUSH
51685: LD_INT 21
51687: PUSH
51688: LD_INT 3
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PPUSH
51695: CALL_OW 72
51699: ST_TO_ADDR
// if not tmp then
51700: LD_VAR 0 5
51704: NOT
51705: IFFALSE 51709
// exit ;
51707: GO 51754
// for i in tmp do
51709: LD_ADDR_VAR 0 3
51713: PUSH
51714: LD_VAR 0 5
51718: PUSH
51719: FOR_IN
51720: IFFALSE 51752
// begin result := EnemyInRange ( i , 22 ) ;
51722: LD_ADDR_VAR 0 2
51726: PUSH
51727: LD_VAR 0 3
51731: PPUSH
51732: LD_INT 22
51734: PPUSH
51735: CALL 49352 0 2
51739: ST_TO_ADDR
// if result then
51740: LD_VAR 0 2
51744: IFFALSE 51750
// exit ;
51746: POP
51747: POP
51748: GO 51754
// end ;
51750: GO 51719
51752: POP
51753: POP
// end ;
51754: LD_VAR 0 2
51758: RET
// export function FilterByTag ( units , tag ) ; begin
51759: LD_INT 0
51761: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51762: LD_ADDR_VAR 0 3
51766: PUSH
51767: LD_VAR 0 1
51771: PPUSH
51772: LD_INT 120
51774: PUSH
51775: LD_VAR 0 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PPUSH
51784: CALL_OW 72
51788: ST_TO_ADDR
// end ;
51789: LD_VAR 0 3
51793: RET
// export function IsDriver ( un ) ; begin
51794: LD_INT 0
51796: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51797: LD_ADDR_VAR 0 2
51801: PUSH
51802: LD_VAR 0 1
51806: PUSH
51807: LD_INT 55
51809: PUSH
51810: EMPTY
51811: LIST
51812: PPUSH
51813: CALL_OW 69
51817: IN
51818: ST_TO_ADDR
// end ;
51819: LD_VAR 0 2
51823: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51824: LD_INT 0
51826: PPUSH
51827: PPUSH
// list := [ ] ;
51828: LD_ADDR_VAR 0 5
51832: PUSH
51833: EMPTY
51834: ST_TO_ADDR
// case d of 0 :
51835: LD_VAR 0 3
51839: PUSH
51840: LD_INT 0
51842: DOUBLE
51843: EQUAL
51844: IFTRUE 51848
51846: GO 51981
51848: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51849: LD_ADDR_VAR 0 5
51853: PUSH
51854: LD_VAR 0 1
51858: PUSH
51859: LD_INT 4
51861: MINUS
51862: PUSH
51863: LD_VAR 0 2
51867: PUSH
51868: LD_INT 4
51870: MINUS
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: PUSH
51880: LD_VAR 0 1
51884: PUSH
51885: LD_INT 3
51887: MINUS
51888: PUSH
51889: LD_VAR 0 2
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: PUSH
51902: LD_VAR 0 1
51906: PUSH
51907: LD_INT 4
51909: PLUS
51910: PUSH
51911: LD_VAR 0 2
51915: PUSH
51916: LD_INT 4
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: LIST
51923: PUSH
51924: LD_VAR 0 1
51928: PUSH
51929: LD_INT 3
51931: PLUS
51932: PUSH
51933: LD_VAR 0 2
51937: PUSH
51938: LD_INT 3
51940: PLUS
51941: PUSH
51942: LD_INT 5
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: PUSH
51950: LD_VAR 0 1
51954: PUSH
51955: LD_VAR 0 2
51959: PUSH
51960: LD_INT 4
51962: PLUS
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: ST_TO_ADDR
// end ; 1 :
51979: GO 52679
51981: LD_INT 1
51983: DOUBLE
51984: EQUAL
51985: IFTRUE 51989
51987: GO 52122
51989: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51990: LD_ADDR_VAR 0 5
51994: PUSH
51995: LD_VAR 0 1
51999: PUSH
52000: LD_VAR 0 2
52004: PUSH
52005: LD_INT 4
52007: MINUS
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: PUSH
52017: LD_VAR 0 1
52021: PUSH
52022: LD_INT 3
52024: MINUS
52025: PUSH
52026: LD_VAR 0 2
52030: PUSH
52031: LD_INT 3
52033: MINUS
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: PUSH
52043: LD_VAR 0 1
52047: PUSH
52048: LD_INT 4
52050: MINUS
52051: PUSH
52052: LD_VAR 0 2
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: PUSH
52065: LD_VAR 0 1
52069: PUSH
52070: LD_VAR 0 2
52074: PUSH
52075: LD_INT 3
52077: PLUS
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: PUSH
52087: LD_VAR 0 1
52091: PUSH
52092: LD_INT 4
52094: PLUS
52095: PUSH
52096: LD_VAR 0 2
52100: PUSH
52101: LD_INT 4
52103: PLUS
52104: PUSH
52105: LD_INT 5
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: ST_TO_ADDR
// end ; 2 :
52120: GO 52679
52122: LD_INT 2
52124: DOUBLE
52125: EQUAL
52126: IFTRUE 52130
52128: GO 52259
52130: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52131: LD_ADDR_VAR 0 5
52135: PUSH
52136: LD_VAR 0 1
52140: PUSH
52141: LD_VAR 0 2
52145: PUSH
52146: LD_INT 3
52148: MINUS
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: PUSH
52158: LD_VAR 0 1
52162: PUSH
52163: LD_INT 4
52165: PLUS
52166: PUSH
52167: LD_VAR 0 2
52171: PUSH
52172: LD_INT 4
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: PUSH
52180: LD_VAR 0 1
52184: PUSH
52185: LD_VAR 0 2
52189: PUSH
52190: LD_INT 4
52192: PLUS
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: PUSH
52202: LD_VAR 0 1
52206: PUSH
52207: LD_INT 3
52209: MINUS
52210: PUSH
52211: LD_VAR 0 2
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: PUSH
52224: LD_VAR 0 1
52228: PUSH
52229: LD_INT 4
52231: MINUS
52232: PUSH
52233: LD_VAR 0 2
52237: PUSH
52238: LD_INT 4
52240: MINUS
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: ST_TO_ADDR
// end ; 3 :
52257: GO 52679
52259: LD_INT 3
52261: DOUBLE
52262: EQUAL
52263: IFTRUE 52267
52265: GO 52400
52267: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52268: LD_ADDR_VAR 0 5
52272: PUSH
52273: LD_VAR 0 1
52277: PUSH
52278: LD_INT 3
52280: PLUS
52281: PUSH
52282: LD_VAR 0 2
52286: PUSH
52287: LD_INT 4
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: PUSH
52295: LD_VAR 0 1
52299: PUSH
52300: LD_INT 4
52302: PLUS
52303: PUSH
52304: LD_VAR 0 2
52308: PUSH
52309: LD_INT 4
52311: PLUS
52312: PUSH
52313: LD_INT 5
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: PUSH
52321: LD_VAR 0 1
52325: PUSH
52326: LD_INT 4
52328: MINUS
52329: PUSH
52330: LD_VAR 0 2
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: LIST
52342: PUSH
52343: LD_VAR 0 1
52347: PUSH
52348: LD_VAR 0 2
52352: PUSH
52353: LD_INT 4
52355: MINUS
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: LIST
52364: PUSH
52365: LD_VAR 0 1
52369: PUSH
52370: LD_INT 3
52372: MINUS
52373: PUSH
52374: LD_VAR 0 2
52378: PUSH
52379: LD_INT 3
52381: MINUS
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// end ; 4 :
52398: GO 52679
52400: LD_INT 4
52402: DOUBLE
52403: EQUAL
52404: IFTRUE 52408
52406: GO 52541
52408: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52409: LD_ADDR_VAR 0 5
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_VAR 0 2
52423: PUSH
52424: LD_INT 4
52426: PLUS
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 3
52443: PLUS
52444: PUSH
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 3
52452: PLUS
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: PUSH
52462: LD_VAR 0 1
52466: PUSH
52467: LD_INT 4
52469: PLUS
52470: PUSH
52471: LD_VAR 0 2
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: PUSH
52484: LD_VAR 0 1
52488: PUSH
52489: LD_VAR 0 2
52493: PUSH
52494: LD_INT 3
52496: MINUS
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: PUSH
52506: LD_VAR 0 1
52510: PUSH
52511: LD_INT 4
52513: MINUS
52514: PUSH
52515: LD_VAR 0 2
52519: PUSH
52520: LD_INT 4
52522: MINUS
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: ST_TO_ADDR
// end ; 5 :
52539: GO 52679
52541: LD_INT 5
52543: DOUBLE
52544: EQUAL
52545: IFTRUE 52549
52547: GO 52678
52549: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52550: LD_ADDR_VAR 0 5
52554: PUSH
52555: LD_VAR 0 1
52559: PUSH
52560: LD_INT 4
52562: MINUS
52563: PUSH
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_VAR 0 1
52581: PUSH
52582: LD_VAR 0 2
52586: PUSH
52587: LD_INT 4
52589: MINUS
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: PUSH
52599: LD_VAR 0 1
52603: PUSH
52604: LD_INT 4
52606: PLUS
52607: PUSH
52608: LD_VAR 0 2
52612: PUSH
52613: LD_INT 4
52615: PLUS
52616: PUSH
52617: LD_INT 5
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: PUSH
52625: LD_VAR 0 1
52629: PUSH
52630: LD_INT 3
52632: PLUS
52633: PUSH
52634: LD_VAR 0 2
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: PUSH
52647: LD_VAR 0 1
52651: PUSH
52652: LD_VAR 0 2
52656: PUSH
52657: LD_INT 3
52659: PLUS
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
// end ; end ;
52676: GO 52679
52678: POP
// result := list ;
52679: LD_ADDR_VAR 0 4
52683: PUSH
52684: LD_VAR 0 5
52688: ST_TO_ADDR
// end ;
52689: LD_VAR 0 4
52693: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52694: LD_INT 0
52696: PPUSH
52697: PPUSH
52698: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52699: LD_VAR 0 1
52703: NOT
52704: PUSH
52705: LD_VAR 0 2
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 4
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: IN
52728: NOT
52729: OR
52730: IFFALSE 52734
// exit ;
52732: GO 52817
// tmp := [ ] ;
52734: LD_ADDR_VAR 0 5
52738: PUSH
52739: EMPTY
52740: ST_TO_ADDR
// for i in units do
52741: LD_ADDR_VAR 0 4
52745: PUSH
52746: LD_VAR 0 1
52750: PUSH
52751: FOR_IN
52752: IFFALSE 52786
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52754: LD_ADDR_VAR 0 5
52758: PUSH
52759: LD_VAR 0 5
52763: PPUSH
52764: LD_VAR 0 4
52768: PPUSH
52769: LD_VAR 0 2
52773: PPUSH
52774: CALL_OW 259
52778: PPUSH
52779: CALL 54190 0 2
52783: ST_TO_ADDR
52784: GO 52751
52786: POP
52787: POP
// if not tmp then
52788: LD_VAR 0 5
52792: NOT
52793: IFFALSE 52797
// exit ;
52795: GO 52817
// result := SortListByListDesc ( units , tmp ) ;
52797: LD_ADDR_VAR 0 3
52801: PUSH
52802: LD_VAR 0 1
52806: PPUSH
52807: LD_VAR 0 5
52811: PPUSH
52812: CALL_OW 77
52816: ST_TO_ADDR
// end ;
52817: LD_VAR 0 3
52821: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52822: LD_INT 0
52824: PPUSH
52825: PPUSH
52826: PPUSH
// result := false ;
52827: LD_ADDR_VAR 0 3
52831: PUSH
52832: LD_INT 0
52834: ST_TO_ADDR
// if not building then
52835: LD_VAR 0 2
52839: NOT
52840: IFFALSE 52844
// exit ;
52842: GO 52982
// x := GetX ( building ) ;
52844: LD_ADDR_VAR 0 4
52848: PUSH
52849: LD_VAR 0 2
52853: PPUSH
52854: CALL_OW 250
52858: ST_TO_ADDR
// y := GetY ( building ) ;
52859: LD_ADDR_VAR 0 5
52863: PUSH
52864: LD_VAR 0 2
52868: PPUSH
52869: CALL_OW 251
52873: ST_TO_ADDR
// if not x or not y then
52874: LD_VAR 0 4
52878: NOT
52879: PUSH
52880: LD_VAR 0 5
52884: NOT
52885: OR
52886: IFFALSE 52890
// exit ;
52888: GO 52982
// if GetTaskList ( unit ) then
52890: LD_VAR 0 1
52894: PPUSH
52895: CALL_OW 437
52899: IFFALSE 52982
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52901: LD_STRING e
52903: PUSH
52904: LD_VAR 0 1
52908: PPUSH
52909: CALL_OW 437
52913: PUSH
52914: LD_INT 1
52916: ARRAY
52917: PUSH
52918: LD_INT 1
52920: ARRAY
52921: EQUAL
52922: PUSH
52923: LD_VAR 0 4
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 437
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PUSH
52942: LD_INT 2
52944: ARRAY
52945: EQUAL
52946: AND
52947: PUSH
52948: LD_VAR 0 5
52952: PUSH
52953: LD_VAR 0 1
52957: PPUSH
52958: CALL_OW 437
52962: PUSH
52963: LD_INT 1
52965: ARRAY
52966: PUSH
52967: LD_INT 3
52969: ARRAY
52970: EQUAL
52971: AND
52972: IFFALSE 52982
// result := true end ;
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_INT 1
52981: ST_TO_ADDR
// end ;
52982: LD_VAR 0 3
52986: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52987: LD_INT 0
52989: PPUSH
// result := false ;
52990: LD_ADDR_VAR 0 4
52994: PUSH
52995: LD_INT 0
52997: ST_TO_ADDR
// if GetTaskList ( unit ) then
52998: LD_VAR 0 1
53002: PPUSH
53003: CALL_OW 437
53007: IFFALSE 53090
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53009: LD_STRING M
53011: PUSH
53012: LD_VAR 0 1
53016: PPUSH
53017: CALL_OW 437
53021: PUSH
53022: LD_INT 1
53024: ARRAY
53025: PUSH
53026: LD_INT 1
53028: ARRAY
53029: EQUAL
53030: PUSH
53031: LD_VAR 0 2
53035: PUSH
53036: LD_VAR 0 1
53040: PPUSH
53041: CALL_OW 437
53045: PUSH
53046: LD_INT 1
53048: ARRAY
53049: PUSH
53050: LD_INT 2
53052: ARRAY
53053: EQUAL
53054: AND
53055: PUSH
53056: LD_VAR 0 3
53060: PUSH
53061: LD_VAR 0 1
53065: PPUSH
53066: CALL_OW 437
53070: PUSH
53071: LD_INT 1
53073: ARRAY
53074: PUSH
53075: LD_INT 3
53077: ARRAY
53078: EQUAL
53079: AND
53080: IFFALSE 53090
// result := true ;
53082: LD_ADDR_VAR 0 4
53086: PUSH
53087: LD_INT 1
53089: ST_TO_ADDR
// end ; end ;
53090: LD_VAR 0 4
53094: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53095: LD_INT 0
53097: PPUSH
53098: PPUSH
53099: PPUSH
53100: PPUSH
// if not unit or not area then
53101: LD_VAR 0 1
53105: NOT
53106: PUSH
53107: LD_VAR 0 2
53111: NOT
53112: OR
53113: IFFALSE 53117
// exit ;
53115: GO 53293
// tmp := AreaToList ( area , i ) ;
53117: LD_ADDR_VAR 0 6
53121: PUSH
53122: LD_VAR 0 2
53126: PPUSH
53127: LD_VAR 0 5
53131: PPUSH
53132: CALL_OW 517
53136: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53137: LD_ADDR_VAR 0 5
53141: PUSH
53142: DOUBLE
53143: LD_INT 1
53145: DEC
53146: ST_TO_ADDR
53147: LD_VAR 0 6
53151: PUSH
53152: LD_INT 1
53154: ARRAY
53155: PUSH
53156: FOR_TO
53157: IFFALSE 53291
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53159: LD_ADDR_VAR 0 7
53163: PUSH
53164: LD_VAR 0 6
53168: PUSH
53169: LD_INT 1
53171: ARRAY
53172: PUSH
53173: LD_VAR 0 5
53177: ARRAY
53178: PUSH
53179: LD_VAR 0 6
53183: PUSH
53184: LD_INT 2
53186: ARRAY
53187: PUSH
53188: LD_VAR 0 5
53192: ARRAY
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53198: LD_INT 92
53200: PUSH
53201: LD_VAR 0 7
53205: PUSH
53206: LD_INT 1
53208: ARRAY
53209: PUSH
53210: LD_VAR 0 7
53214: PUSH
53215: LD_INT 2
53217: ARRAY
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: PPUSH
53228: CALL_OW 69
53232: PUSH
53233: LD_INT 0
53235: EQUAL
53236: IFFALSE 53289
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53238: LD_VAR 0 1
53242: PPUSH
53243: LD_VAR 0 7
53247: PUSH
53248: LD_INT 1
53250: ARRAY
53251: PPUSH
53252: LD_VAR 0 7
53256: PUSH
53257: LD_INT 2
53259: ARRAY
53260: PPUSH
53261: LD_VAR 0 3
53265: PPUSH
53266: CALL_OW 48
// result := IsPlaced ( unit ) ;
53270: LD_ADDR_VAR 0 4
53274: PUSH
53275: LD_VAR 0 1
53279: PPUSH
53280: CALL_OW 305
53284: ST_TO_ADDR
// exit ;
53285: POP
53286: POP
53287: GO 53293
// end ; end ;
53289: GO 53156
53291: POP
53292: POP
// end ;
53293: LD_VAR 0 4
53297: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
53302: PPUSH
// if not side or side > 8 then
53303: LD_VAR 0 1
53307: NOT
53308: PUSH
53309: LD_VAR 0 1
53313: PUSH
53314: LD_INT 8
53316: GREATER
53317: OR
53318: IFFALSE 53322
// exit ;
53320: GO 53509
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53322: LD_ADDR_VAR 0 4
53326: PUSH
53327: LD_INT 22
53329: PUSH
53330: LD_VAR 0 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 21
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PPUSH
53353: CALL_OW 69
53357: ST_TO_ADDR
// if not tmp then
53358: LD_VAR 0 4
53362: NOT
53363: IFFALSE 53367
// exit ;
53365: GO 53509
// enable_addtolog := true ;
53367: LD_ADDR_OWVAR 81
53371: PUSH
53372: LD_INT 1
53374: ST_TO_ADDR
// AddToLog ( [ ) ;
53375: LD_STRING [
53377: PPUSH
53378: CALL_OW 561
// for i in tmp do
53382: LD_ADDR_VAR 0 3
53386: PUSH
53387: LD_VAR 0 4
53391: PUSH
53392: FOR_IN
53393: IFFALSE 53500
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53395: LD_STRING [
53397: PUSH
53398: LD_VAR 0 3
53402: PPUSH
53403: CALL_OW 266
53407: STR
53408: PUSH
53409: LD_STRING , 
53411: STR
53412: PUSH
53413: LD_VAR 0 3
53417: PPUSH
53418: CALL_OW 250
53422: STR
53423: PUSH
53424: LD_STRING , 
53426: STR
53427: PUSH
53428: LD_VAR 0 3
53432: PPUSH
53433: CALL_OW 251
53437: STR
53438: PUSH
53439: LD_STRING , 
53441: STR
53442: PUSH
53443: LD_VAR 0 3
53447: PPUSH
53448: CALL_OW 254
53452: STR
53453: PUSH
53454: LD_STRING , 
53456: STR
53457: PUSH
53458: LD_VAR 0 3
53462: PPUSH
53463: LD_INT 1
53465: PPUSH
53466: CALL_OW 268
53470: STR
53471: PUSH
53472: LD_STRING , 
53474: STR
53475: PUSH
53476: LD_VAR 0 3
53480: PPUSH
53481: LD_INT 2
53483: PPUSH
53484: CALL_OW 268
53488: STR
53489: PUSH
53490: LD_STRING ],
53492: STR
53493: PPUSH
53494: CALL_OW 561
// end ;
53498: GO 53392
53500: POP
53501: POP
// AddToLog ( ]; ) ;
53502: LD_STRING ];
53504: PPUSH
53505: CALL_OW 561
// end ;
53509: LD_VAR 0 2
53513: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53514: LD_INT 0
53516: PPUSH
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
// if not area or not rate or not max then
53521: LD_VAR 0 1
53525: NOT
53526: PUSH
53527: LD_VAR 0 2
53531: NOT
53532: OR
53533: PUSH
53534: LD_VAR 0 4
53538: NOT
53539: OR
53540: IFFALSE 53544
// exit ;
53542: GO 53733
// while 1 do
53544: LD_INT 1
53546: IFFALSE 53733
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53548: LD_ADDR_VAR 0 9
53552: PUSH
53553: LD_VAR 0 1
53557: PPUSH
53558: LD_INT 1
53560: PPUSH
53561: CALL_OW 287
53565: PUSH
53566: LD_INT 10
53568: MUL
53569: ST_TO_ADDR
// r := rate / 10 ;
53570: LD_ADDR_VAR 0 7
53574: PUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_INT 10
53582: DIVREAL
53583: ST_TO_ADDR
// time := 1 1$00 ;
53584: LD_ADDR_VAR 0 8
53588: PUSH
53589: LD_INT 2100
53591: ST_TO_ADDR
// if amount < min then
53592: LD_VAR 0 9
53596: PUSH
53597: LD_VAR 0 3
53601: LESS
53602: IFFALSE 53620
// r := r * 2 else
53604: LD_ADDR_VAR 0 7
53608: PUSH
53609: LD_VAR 0 7
53613: PUSH
53614: LD_INT 2
53616: MUL
53617: ST_TO_ADDR
53618: GO 53646
// if amount > max then
53620: LD_VAR 0 9
53624: PUSH
53625: LD_VAR 0 4
53629: GREATER
53630: IFFALSE 53646
// r := r / 2 ;
53632: LD_ADDR_VAR 0 7
53636: PUSH
53637: LD_VAR 0 7
53641: PUSH
53642: LD_INT 2
53644: DIVREAL
53645: ST_TO_ADDR
// time := time / r ;
53646: LD_ADDR_VAR 0 8
53650: PUSH
53651: LD_VAR 0 8
53655: PUSH
53656: LD_VAR 0 7
53660: DIVREAL
53661: ST_TO_ADDR
// if time < 0 then
53662: LD_VAR 0 8
53666: PUSH
53667: LD_INT 0
53669: LESS
53670: IFFALSE 53687
// time := time * - 1 ;
53672: LD_ADDR_VAR 0 8
53676: PUSH
53677: LD_VAR 0 8
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: MUL
53686: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53687: LD_VAR 0 8
53691: PUSH
53692: LD_INT 35
53694: PPUSH
53695: LD_INT 875
53697: PPUSH
53698: CALL_OW 12
53702: PLUS
53703: PPUSH
53704: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53708: LD_INT 1
53710: PPUSH
53711: LD_INT 5
53713: PPUSH
53714: CALL_OW 12
53718: PPUSH
53719: LD_VAR 0 1
53723: PPUSH
53724: LD_INT 1
53726: PPUSH
53727: CALL_OW 55
// end ;
53731: GO 53544
// end ;
53733: LD_VAR 0 5
53737: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53738: LD_INT 0
53740: PPUSH
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
53747: PPUSH
// if not turrets or not factories then
53748: LD_VAR 0 1
53752: NOT
53753: PUSH
53754: LD_VAR 0 2
53758: NOT
53759: OR
53760: IFFALSE 53764
// exit ;
53762: GO 54071
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53764: LD_ADDR_VAR 0 10
53768: PUSH
53769: LD_INT 5
53771: PUSH
53772: LD_INT 6
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 4
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 24
53806: PUSH
53807: LD_INT 25
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 23
53816: PUSH
53817: LD_INT 27
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 42
53830: PUSH
53831: LD_INT 43
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 44
53840: PUSH
53841: LD_INT 46
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 45
53850: PUSH
53851: LD_INT 47
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// result := [ ] ;
53868: LD_ADDR_VAR 0 3
53872: PUSH
53873: EMPTY
53874: ST_TO_ADDR
// for i in turrets do
53875: LD_ADDR_VAR 0 4
53879: PUSH
53880: LD_VAR 0 1
53884: PUSH
53885: FOR_IN
53886: IFFALSE 54069
// begin nat := GetNation ( i ) ;
53888: LD_ADDR_VAR 0 7
53892: PUSH
53893: LD_VAR 0 4
53897: PPUSH
53898: CALL_OW 248
53902: ST_TO_ADDR
// weapon := 0 ;
53903: LD_ADDR_VAR 0 8
53907: PUSH
53908: LD_INT 0
53910: ST_TO_ADDR
// if not nat then
53911: LD_VAR 0 7
53915: NOT
53916: IFFALSE 53920
// continue ;
53918: GO 53885
// for j in list [ nat ] do
53920: LD_ADDR_VAR 0 5
53924: PUSH
53925: LD_VAR 0 10
53929: PUSH
53930: LD_VAR 0 7
53934: ARRAY
53935: PUSH
53936: FOR_IN
53937: IFFALSE 53978
// if GetBWeapon ( i ) = j [ 1 ] then
53939: LD_VAR 0 4
53943: PPUSH
53944: CALL_OW 269
53948: PUSH
53949: LD_VAR 0 5
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: EQUAL
53958: IFFALSE 53976
// begin weapon := j [ 2 ] ;
53960: LD_ADDR_VAR 0 8
53964: PUSH
53965: LD_VAR 0 5
53969: PUSH
53970: LD_INT 2
53972: ARRAY
53973: ST_TO_ADDR
// break ;
53974: GO 53978
// end ;
53976: GO 53936
53978: POP
53979: POP
// if not weapon then
53980: LD_VAR 0 8
53984: NOT
53985: IFFALSE 53989
// continue ;
53987: GO 53885
// for k in factories do
53989: LD_ADDR_VAR 0 6
53993: PUSH
53994: LD_VAR 0 2
53998: PUSH
53999: FOR_IN
54000: IFFALSE 54065
// begin weapons := AvailableWeaponList ( k ) ;
54002: LD_ADDR_VAR 0 9
54006: PUSH
54007: LD_VAR 0 6
54011: PPUSH
54012: CALL_OW 478
54016: ST_TO_ADDR
// if not weapons then
54017: LD_VAR 0 9
54021: NOT
54022: IFFALSE 54026
// continue ;
54024: GO 53999
// if weapon in weapons then
54026: LD_VAR 0 8
54030: PUSH
54031: LD_VAR 0 9
54035: IN
54036: IFFALSE 54063
// begin result := [ i , weapon ] ;
54038: LD_ADDR_VAR 0 3
54042: PUSH
54043: LD_VAR 0 4
54047: PUSH
54048: LD_VAR 0 8
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: ST_TO_ADDR
// exit ;
54057: POP
54058: POP
54059: POP
54060: POP
54061: GO 54071
// end ; end ;
54063: GO 53999
54065: POP
54066: POP
// end ;
54067: GO 53885
54069: POP
54070: POP
// end ;
54071: LD_VAR 0 3
54075: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54076: LD_INT 0
54078: PPUSH
// if not side or side > 8 then
54079: LD_VAR 0 3
54083: NOT
54084: PUSH
54085: LD_VAR 0 3
54089: PUSH
54090: LD_INT 8
54092: GREATER
54093: OR
54094: IFFALSE 54098
// exit ;
54096: GO 54157
// if not range then
54098: LD_VAR 0 4
54102: NOT
54103: IFFALSE 54114
// range := - 12 ;
54105: LD_ADDR_VAR 0 4
54109: PUSH
54110: LD_INT 12
54112: NEG
54113: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54114: LD_VAR 0 1
54118: PPUSH
54119: LD_VAR 0 2
54123: PPUSH
54124: LD_VAR 0 3
54128: PPUSH
54129: LD_VAR 0 4
54133: PPUSH
54134: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54138: LD_VAR 0 1
54142: PPUSH
54143: LD_VAR 0 2
54147: PPUSH
54148: LD_VAR 0 3
54152: PPUSH
54153: CALL_OW 331
// end ;
54157: LD_VAR 0 5
54161: RET
// export function Video ( mode ) ; begin
54162: LD_INT 0
54164: PPUSH
// ingame_video = mode ;
54165: LD_ADDR_OWVAR 52
54169: PUSH
54170: LD_VAR 0 1
54174: ST_TO_ADDR
// interface_hidden = mode ;
54175: LD_ADDR_OWVAR 54
54179: PUSH
54180: LD_VAR 0 1
54184: ST_TO_ADDR
// end ;
54185: LD_VAR 0 2
54189: RET
// export function Join ( array , element ) ; begin
54190: LD_INT 0
54192: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54193: LD_ADDR_VAR 0 3
54197: PUSH
54198: LD_VAR 0 1
54202: PPUSH
54203: LD_VAR 0 1
54207: PUSH
54208: LD_INT 1
54210: PLUS
54211: PPUSH
54212: LD_VAR 0 2
54216: PPUSH
54217: CALL_OW 1
54221: ST_TO_ADDR
// end ;
54222: LD_VAR 0 3
54226: RET
// export function JoinUnion ( array , element ) ; begin
54227: LD_INT 0
54229: PPUSH
// result := array union element ;
54230: LD_ADDR_VAR 0 3
54234: PUSH
54235: LD_VAR 0 1
54239: PUSH
54240: LD_VAR 0 2
54244: UNION
54245: ST_TO_ADDR
// end ;
54246: LD_VAR 0 3
54250: RET
// export function GetBehemoths ( side ) ; begin
54251: LD_INT 0
54253: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54254: LD_ADDR_VAR 0 2
54258: PUSH
54259: LD_INT 22
54261: PUSH
54262: LD_VAR 0 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 31
54273: PUSH
54274: LD_INT 25
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PPUSH
54285: CALL_OW 69
54289: ST_TO_ADDR
// end ;
54290: LD_VAR 0 2
54294: RET
// export function Shuffle ( array ) ; var i , index ; begin
54295: LD_INT 0
54297: PPUSH
54298: PPUSH
54299: PPUSH
// result := [ ] ;
54300: LD_ADDR_VAR 0 2
54304: PUSH
54305: EMPTY
54306: ST_TO_ADDR
// if not array then
54307: LD_VAR 0 1
54311: NOT
54312: IFFALSE 54316
// exit ;
54314: GO 54415
// Randomize ;
54316: CALL_OW 10
// for i = array downto 1 do
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: DOUBLE
54326: LD_VAR 0 1
54330: INC
54331: ST_TO_ADDR
54332: LD_INT 1
54334: PUSH
54335: FOR_DOWNTO
54336: IFFALSE 54413
// begin index := rand ( 1 , array ) ;
54338: LD_ADDR_VAR 0 4
54342: PUSH
54343: LD_INT 1
54345: PPUSH
54346: LD_VAR 0 1
54350: PPUSH
54351: CALL_OW 12
54355: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54356: LD_ADDR_VAR 0 2
54360: PUSH
54361: LD_VAR 0 2
54365: PPUSH
54366: LD_VAR 0 2
54370: PUSH
54371: LD_INT 1
54373: PLUS
54374: PPUSH
54375: LD_VAR 0 1
54379: PUSH
54380: LD_VAR 0 4
54384: ARRAY
54385: PPUSH
54386: CALL_OW 2
54390: ST_TO_ADDR
// array := Delete ( array , index ) ;
54391: LD_ADDR_VAR 0 1
54395: PUSH
54396: LD_VAR 0 1
54400: PPUSH
54401: LD_VAR 0 4
54405: PPUSH
54406: CALL_OW 3
54410: ST_TO_ADDR
// end ;
54411: GO 54335
54413: POP
54414: POP
// end ;
54415: LD_VAR 0 2
54419: RET
// export function GetBaseMaterials ( base ) ; begin
54420: LD_INT 0
54422: PPUSH
// result := [ 0 , 0 , 0 ] ;
54423: LD_ADDR_VAR 0 2
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: LIST
54441: ST_TO_ADDR
// if not base then
54442: LD_VAR 0 1
54446: NOT
54447: IFFALSE 54451
// exit ;
54449: GO 54500
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54451: LD_ADDR_VAR 0 2
54455: PUSH
54456: LD_VAR 0 1
54460: PPUSH
54461: LD_INT 1
54463: PPUSH
54464: CALL_OW 275
54468: PUSH
54469: LD_VAR 0 1
54473: PPUSH
54474: LD_INT 2
54476: PPUSH
54477: CALL_OW 275
54481: PUSH
54482: LD_VAR 0 1
54486: PPUSH
54487: LD_INT 3
54489: PPUSH
54490: CALL_OW 275
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// end ;
54500: LD_VAR 0 2
54504: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54505: LD_INT 0
54507: PPUSH
54508: PPUSH
// result := array ;
54509: LD_ADDR_VAR 0 3
54513: PUSH
54514: LD_VAR 0 1
54518: ST_TO_ADDR
// if size >= result then
54519: LD_VAR 0 2
54523: PUSH
54524: LD_VAR 0 3
54528: GREATEREQUAL
54529: IFFALSE 54533
// exit ;
54531: GO 54583
// if size then
54533: LD_VAR 0 2
54537: IFFALSE 54583
// for i := array downto size do
54539: LD_ADDR_VAR 0 4
54543: PUSH
54544: DOUBLE
54545: LD_VAR 0 1
54549: INC
54550: ST_TO_ADDR
54551: LD_VAR 0 2
54555: PUSH
54556: FOR_DOWNTO
54557: IFFALSE 54581
// result := Delete ( result , result ) ;
54559: LD_ADDR_VAR 0 3
54563: PUSH
54564: LD_VAR 0 3
54568: PPUSH
54569: LD_VAR 0 3
54573: PPUSH
54574: CALL_OW 3
54578: ST_TO_ADDR
54579: GO 54556
54581: POP
54582: POP
// end ;
54583: LD_VAR 0 3
54587: RET
// export function ComExit ( unit ) ; var tmp ; begin
54588: LD_INT 0
54590: PPUSH
54591: PPUSH
// if not IsInUnit ( unit ) then
54592: LD_VAR 0 1
54596: PPUSH
54597: CALL_OW 310
54601: NOT
54602: IFFALSE 54606
// exit ;
54604: GO 54666
// tmp := IsInUnit ( unit ) ;
54606: LD_ADDR_VAR 0 3
54610: PUSH
54611: LD_VAR 0 1
54615: PPUSH
54616: CALL_OW 310
54620: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54621: LD_VAR 0 3
54625: PPUSH
54626: CALL_OW 247
54630: PUSH
54631: LD_INT 2
54633: EQUAL
54634: IFFALSE 54647
// ComExitVehicle ( unit ) else
54636: LD_VAR 0 1
54640: PPUSH
54641: CALL_OW 121
54645: GO 54656
// ComExitBuilding ( unit ) ;
54647: LD_VAR 0 1
54651: PPUSH
54652: CALL_OW 122
// result := tmp ;
54656: LD_ADDR_VAR 0 2
54660: PUSH
54661: LD_VAR 0 3
54665: ST_TO_ADDR
// end ;
54666: LD_VAR 0 2
54670: RET
// export function ComExitAll ( units ) ; var i ; begin
54671: LD_INT 0
54673: PPUSH
54674: PPUSH
// if not units then
54675: LD_VAR 0 1
54679: NOT
54680: IFFALSE 54684
// exit ;
54682: GO 54710
// for i in units do
54684: LD_ADDR_VAR 0 3
54688: PUSH
54689: LD_VAR 0 1
54693: PUSH
54694: FOR_IN
54695: IFFALSE 54708
// ComExit ( i ) ;
54697: LD_VAR 0 3
54701: PPUSH
54702: CALL 54588 0 1
54706: GO 54694
54708: POP
54709: POP
// end ;
54710: LD_VAR 0 2
54714: RET
// export function ResetHc ; begin
54715: LD_INT 0
54717: PPUSH
// InitHc ;
54718: CALL_OW 19
// hc_importance := 0 ;
54722: LD_ADDR_OWVAR 32
54726: PUSH
54727: LD_INT 0
54729: ST_TO_ADDR
// end ;
54730: LD_VAR 0 1
54734: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54735: LD_INT 0
54737: PPUSH
54738: PPUSH
54739: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54740: LD_ADDR_VAR 0 6
54744: PUSH
54745: LD_VAR 0 1
54749: PUSH
54750: LD_VAR 0 3
54754: PLUS
54755: PUSH
54756: LD_INT 2
54758: DIV
54759: ST_TO_ADDR
// if _x < 0 then
54760: LD_VAR 0 6
54764: PUSH
54765: LD_INT 0
54767: LESS
54768: IFFALSE 54785
// _x := _x * - 1 ;
54770: LD_ADDR_VAR 0 6
54774: PUSH
54775: LD_VAR 0 6
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: MUL
54784: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54785: LD_ADDR_VAR 0 7
54789: PUSH
54790: LD_VAR 0 2
54794: PUSH
54795: LD_VAR 0 4
54799: PLUS
54800: PUSH
54801: LD_INT 2
54803: DIV
54804: ST_TO_ADDR
// if _y < 0 then
54805: LD_VAR 0 7
54809: PUSH
54810: LD_INT 0
54812: LESS
54813: IFFALSE 54830
// _y := _y * - 1 ;
54815: LD_ADDR_VAR 0 7
54819: PUSH
54820: LD_VAR 0 7
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: MUL
54829: ST_TO_ADDR
// result := [ _x , _y ] ;
54830: LD_ADDR_VAR 0 5
54834: PUSH
54835: LD_VAR 0 6
54839: PUSH
54840: LD_VAR 0 7
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// end ;
54849: LD_VAR 0 5
54853: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54854: LD_INT 0
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
// task := GetTaskList ( unit ) ;
54860: LD_ADDR_VAR 0 7
54864: PUSH
54865: LD_VAR 0 1
54869: PPUSH
54870: CALL_OW 437
54874: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54875: LD_VAR 0 7
54879: NOT
54880: PUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: LD_VAR 0 2
54890: PPUSH
54891: CALL_OW 308
54895: NOT
54896: AND
54897: IFFALSE 54901
// exit ;
54899: GO 55019
// if IsInArea ( unit , area ) then
54901: LD_VAR 0 1
54905: PPUSH
54906: LD_VAR 0 2
54910: PPUSH
54911: CALL_OW 308
54915: IFFALSE 54933
// begin ComMoveToArea ( unit , goAway ) ;
54917: LD_VAR 0 1
54921: PPUSH
54922: LD_VAR 0 3
54926: PPUSH
54927: CALL_OW 113
// exit ;
54931: GO 55019
// end ; if task [ 1 ] [ 1 ] <> M then
54933: LD_VAR 0 7
54937: PUSH
54938: LD_INT 1
54940: ARRAY
54941: PUSH
54942: LD_INT 1
54944: ARRAY
54945: PUSH
54946: LD_STRING M
54948: NONEQUAL
54949: IFFALSE 54953
// exit ;
54951: GO 55019
// x := task [ 1 ] [ 2 ] ;
54953: LD_ADDR_VAR 0 5
54957: PUSH
54958: LD_VAR 0 7
54962: PUSH
54963: LD_INT 1
54965: ARRAY
54966: PUSH
54967: LD_INT 2
54969: ARRAY
54970: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54971: LD_ADDR_VAR 0 6
54975: PUSH
54976: LD_VAR 0 7
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PUSH
54985: LD_INT 3
54987: ARRAY
54988: ST_TO_ADDR
// if InArea ( x , y , area ) then
54989: LD_VAR 0 5
54993: PPUSH
54994: LD_VAR 0 6
54998: PPUSH
54999: LD_VAR 0 2
55003: PPUSH
55004: CALL_OW 309
55008: IFFALSE 55019
// ComStop ( unit ) ;
55010: LD_VAR 0 1
55014: PPUSH
55015: CALL_OW 141
// end ;
55019: LD_VAR 0 4
55023: RET
// export function Abs ( value ) ; begin
55024: LD_INT 0
55026: PPUSH
// result := value ;
55027: LD_ADDR_VAR 0 2
55031: PUSH
55032: LD_VAR 0 1
55036: ST_TO_ADDR
// if value < 0 then
55037: LD_VAR 0 1
55041: PUSH
55042: LD_INT 0
55044: LESS
55045: IFFALSE 55062
// result := value * - 1 ;
55047: LD_ADDR_VAR 0 2
55051: PUSH
55052: LD_VAR 0 1
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: MUL
55061: ST_TO_ADDR
// end ;
55062: LD_VAR 0 2
55066: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55067: LD_INT 0
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
// if not unit or not building then
55077: LD_VAR 0 1
55081: NOT
55082: PUSH
55083: LD_VAR 0 2
55087: NOT
55088: OR
55089: IFFALSE 55093
// exit ;
55091: GO 55319
// x := GetX ( building ) ;
55093: LD_ADDR_VAR 0 4
55097: PUSH
55098: LD_VAR 0 2
55102: PPUSH
55103: CALL_OW 250
55107: ST_TO_ADDR
// y := GetY ( building ) ;
55108: LD_ADDR_VAR 0 6
55112: PUSH
55113: LD_VAR 0 2
55117: PPUSH
55118: CALL_OW 251
55122: ST_TO_ADDR
// d := GetDir ( building ) ;
55123: LD_ADDR_VAR 0 8
55127: PUSH
55128: LD_VAR 0 2
55132: PPUSH
55133: CALL_OW 254
55137: ST_TO_ADDR
// r := 4 ;
55138: LD_ADDR_VAR 0 9
55142: PUSH
55143: LD_INT 4
55145: ST_TO_ADDR
// for i := 1 to 5 do
55146: LD_ADDR_VAR 0 10
55150: PUSH
55151: DOUBLE
55152: LD_INT 1
55154: DEC
55155: ST_TO_ADDR
55156: LD_INT 5
55158: PUSH
55159: FOR_TO
55160: IFFALSE 55317
// begin _x := ShiftX ( x , d , r + i ) ;
55162: LD_ADDR_VAR 0 5
55166: PUSH
55167: LD_VAR 0 4
55171: PPUSH
55172: LD_VAR 0 8
55176: PPUSH
55177: LD_VAR 0 9
55181: PUSH
55182: LD_VAR 0 10
55186: PLUS
55187: PPUSH
55188: CALL_OW 272
55192: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55193: LD_ADDR_VAR 0 7
55197: PUSH
55198: LD_VAR 0 6
55202: PPUSH
55203: LD_VAR 0 8
55207: PPUSH
55208: LD_VAR 0 9
55212: PUSH
55213: LD_VAR 0 10
55217: PLUS
55218: PPUSH
55219: CALL_OW 273
55223: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55224: LD_VAR 0 5
55228: PPUSH
55229: LD_VAR 0 7
55233: PPUSH
55234: CALL_OW 488
55238: PUSH
55239: LD_VAR 0 5
55243: PPUSH
55244: LD_VAR 0 7
55248: PPUSH
55249: CALL_OW 428
55253: PPUSH
55254: CALL_OW 247
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: IN
55269: NOT
55270: AND
55271: IFFALSE 55315
// begin ComMoveXY ( unit , _x , _y ) ;
55273: LD_VAR 0 1
55277: PPUSH
55278: LD_VAR 0 5
55282: PPUSH
55283: LD_VAR 0 7
55287: PPUSH
55288: CALL_OW 111
// result := [ _x , _y ] ;
55292: LD_ADDR_VAR 0 3
55296: PUSH
55297: LD_VAR 0 5
55301: PUSH
55302: LD_VAR 0 7
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: ST_TO_ADDR
// exit ;
55311: POP
55312: POP
55313: GO 55319
// end ; end ;
55315: GO 55159
55317: POP
55318: POP
// end ;
55319: LD_VAR 0 3
55323: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55324: LD_INT 0
55326: PPUSH
55327: PPUSH
55328: PPUSH
// result := 0 ;
55329: LD_ADDR_VAR 0 3
55333: PUSH
55334: LD_INT 0
55336: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55337: LD_VAR 0 1
55341: PUSH
55342: LD_INT 0
55344: LESS
55345: PUSH
55346: LD_VAR 0 1
55350: PUSH
55351: LD_INT 8
55353: GREATER
55354: OR
55355: PUSH
55356: LD_VAR 0 2
55360: PUSH
55361: LD_INT 0
55363: LESS
55364: OR
55365: PUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_INT 8
55373: GREATER
55374: OR
55375: IFFALSE 55379
// exit ;
55377: GO 55454
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55379: LD_ADDR_VAR 0 4
55383: PUSH
55384: LD_INT 22
55386: PUSH
55387: LD_VAR 0 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PPUSH
55396: CALL_OW 69
55400: PUSH
55401: FOR_IN
55402: IFFALSE 55452
// begin un := UnitShoot ( i ) ;
55404: LD_ADDR_VAR 0 5
55408: PUSH
55409: LD_VAR 0 4
55413: PPUSH
55414: CALL_OW 504
55418: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55419: LD_VAR 0 5
55423: PPUSH
55424: CALL_OW 255
55428: PUSH
55429: LD_VAR 0 1
55433: EQUAL
55434: IFFALSE 55450
// begin result := un ;
55436: LD_ADDR_VAR 0 3
55440: PUSH
55441: LD_VAR 0 5
55445: ST_TO_ADDR
// exit ;
55446: POP
55447: POP
55448: GO 55454
// end ; end ;
55450: GO 55401
55452: POP
55453: POP
// end ;
55454: LD_VAR 0 3
55458: RET
// export function GetCargoBay ( units ) ; begin
55459: LD_INT 0
55461: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55462: LD_ADDR_VAR 0 2
55466: PUSH
55467: LD_VAR 0 1
55471: PPUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 34
55477: PUSH
55478: LD_INT 12
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 34
55487: PUSH
55488: LD_INT 51
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 34
55497: PUSH
55498: LD_INT 32
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 34
55507: PUSH
55508: LD_INT 89
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: PPUSH
55522: CALL_OW 72
55526: ST_TO_ADDR
// end ;
55527: LD_VAR 0 2
55531: RET
// export function Negate ( value ) ; begin
55532: LD_INT 0
55534: PPUSH
// result := not value ;
55535: LD_ADDR_VAR 0 2
55539: PUSH
55540: LD_VAR 0 1
55544: NOT
55545: ST_TO_ADDR
// end ;
55546: LD_VAR 0 2
55550: RET
// export function Inc ( value ) ; begin
55551: LD_INT 0
55553: PPUSH
// result := value + 1 ;
55554: LD_ADDR_VAR 0 2
55558: PUSH
55559: LD_VAR 0 1
55563: PUSH
55564: LD_INT 1
55566: PLUS
55567: ST_TO_ADDR
// end ;
55568: LD_VAR 0 2
55572: RET
// export function Dec ( value ) ; begin
55573: LD_INT 0
55575: PPUSH
// result := value - 1 ;
55576: LD_ADDR_VAR 0 2
55580: PUSH
55581: LD_VAR 0 1
55585: PUSH
55586: LD_INT 1
55588: MINUS
55589: ST_TO_ADDR
// end ;
55590: LD_VAR 0 2
55594: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55595: LD_INT 0
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55605: LD_VAR 0 1
55609: PPUSH
55610: LD_VAR 0 2
55614: PPUSH
55615: CALL_OW 488
55619: NOT
55620: PUSH
55621: LD_VAR 0 3
55625: PPUSH
55626: LD_VAR 0 4
55630: PPUSH
55631: CALL_OW 488
55635: NOT
55636: OR
55637: IFFALSE 55650
// begin result := - 1 ;
55639: LD_ADDR_VAR 0 5
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: ST_TO_ADDR
// exit ;
55648: GO 55885
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55650: LD_ADDR_VAR 0 12
55654: PUSH
55655: LD_VAR 0 1
55659: PPUSH
55660: LD_VAR 0 2
55664: PPUSH
55665: LD_VAR 0 3
55669: PPUSH
55670: LD_VAR 0 4
55674: PPUSH
55675: CALL 54735 0 4
55679: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55680: LD_ADDR_VAR 0 11
55684: PUSH
55685: LD_VAR 0 1
55689: PPUSH
55690: LD_VAR 0 2
55694: PPUSH
55695: LD_VAR 0 12
55699: PUSH
55700: LD_INT 1
55702: ARRAY
55703: PPUSH
55704: LD_VAR 0 12
55708: PUSH
55709: LD_INT 2
55711: ARRAY
55712: PPUSH
55713: CALL_OW 298
55717: ST_TO_ADDR
// distance := 9999 ;
55718: LD_ADDR_VAR 0 10
55722: PUSH
55723: LD_INT 9999
55725: ST_TO_ADDR
// for i := 0 to 5 do
55726: LD_ADDR_VAR 0 6
55730: PUSH
55731: DOUBLE
55732: LD_INT 0
55734: DEC
55735: ST_TO_ADDR
55736: LD_INT 5
55738: PUSH
55739: FOR_TO
55740: IFFALSE 55883
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55742: LD_ADDR_VAR 0 7
55746: PUSH
55747: LD_VAR 0 1
55751: PPUSH
55752: LD_VAR 0 6
55756: PPUSH
55757: LD_VAR 0 11
55761: PPUSH
55762: CALL_OW 272
55766: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55767: LD_ADDR_VAR 0 8
55771: PUSH
55772: LD_VAR 0 2
55776: PPUSH
55777: LD_VAR 0 6
55781: PPUSH
55782: LD_VAR 0 11
55786: PPUSH
55787: CALL_OW 273
55791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55792: LD_VAR 0 7
55796: PPUSH
55797: LD_VAR 0 8
55801: PPUSH
55802: CALL_OW 488
55806: NOT
55807: IFFALSE 55811
// continue ;
55809: GO 55739
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55811: LD_ADDR_VAR 0 9
55815: PUSH
55816: LD_VAR 0 12
55820: PUSH
55821: LD_INT 1
55823: ARRAY
55824: PPUSH
55825: LD_VAR 0 12
55829: PUSH
55830: LD_INT 2
55832: ARRAY
55833: PPUSH
55834: LD_VAR 0 7
55838: PPUSH
55839: LD_VAR 0 8
55843: PPUSH
55844: CALL_OW 298
55848: ST_TO_ADDR
// if tmp < distance then
55849: LD_VAR 0 9
55853: PUSH
55854: LD_VAR 0 10
55858: LESS
55859: IFFALSE 55881
// begin result := i ;
55861: LD_ADDR_VAR 0 5
55865: PUSH
55866: LD_VAR 0 6
55870: ST_TO_ADDR
// distance := tmp ;
55871: LD_ADDR_VAR 0 10
55875: PUSH
55876: LD_VAR 0 9
55880: ST_TO_ADDR
// end ; end ;
55881: GO 55739
55883: POP
55884: POP
// end ;
55885: LD_VAR 0 5
55889: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55890: LD_INT 0
55892: PPUSH
55893: PPUSH
// if not driver or not IsInUnit ( driver ) then
55894: LD_VAR 0 1
55898: NOT
55899: PUSH
55900: LD_VAR 0 1
55904: PPUSH
55905: CALL_OW 310
55909: NOT
55910: OR
55911: IFFALSE 55915
// exit ;
55913: GO 56005
// vehicle := IsInUnit ( driver ) ;
55915: LD_ADDR_VAR 0 3
55919: PUSH
55920: LD_VAR 0 1
55924: PPUSH
55925: CALL_OW 310
55929: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55930: LD_VAR 0 1
55934: PPUSH
55935: LD_STRING \
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: PUSH
55965: LD_STRING E
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_VAR 0 3
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PPUSH
56001: CALL_OW 446
// end ;
56005: LD_VAR 0 2
56009: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56010: LD_INT 0
56012: PPUSH
56013: PPUSH
// if not driver or not IsInUnit ( driver ) then
56014: LD_VAR 0 1
56018: NOT
56019: PUSH
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 310
56029: NOT
56030: OR
56031: IFFALSE 56035
// exit ;
56033: GO 56125
// vehicle := IsInUnit ( driver ) ;
56035: LD_ADDR_VAR 0 3
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: CALL_OW 310
56049: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56050: LD_VAR 0 1
56054: PPUSH
56055: LD_STRING \
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: PUSH
56085: LD_STRING E
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_VAR 0 3
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PPUSH
56121: CALL_OW 447
// end ;
56125: LD_VAR 0 2
56129: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56130: LD_INT 0
56132: PPUSH
56133: PPUSH
56134: PPUSH
// tmp := [ ] ;
56135: LD_ADDR_VAR 0 5
56139: PUSH
56140: EMPTY
56141: ST_TO_ADDR
// for i in units do
56142: LD_ADDR_VAR 0 4
56146: PUSH
56147: LD_VAR 0 1
56151: PUSH
56152: FOR_IN
56153: IFFALSE 56191
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56155: LD_ADDR_VAR 0 5
56159: PUSH
56160: LD_VAR 0 5
56164: PPUSH
56165: LD_VAR 0 5
56169: PUSH
56170: LD_INT 1
56172: PLUS
56173: PPUSH
56174: LD_VAR 0 4
56178: PPUSH
56179: CALL_OW 256
56183: PPUSH
56184: CALL_OW 2
56188: ST_TO_ADDR
56189: GO 56152
56191: POP
56192: POP
// if not tmp then
56193: LD_VAR 0 5
56197: NOT
56198: IFFALSE 56202
// exit ;
56200: GO 56250
// if asc then
56202: LD_VAR 0 2
56206: IFFALSE 56230
// result := SortListByListAsc ( units , tmp ) else
56208: LD_ADDR_VAR 0 3
56212: PUSH
56213: LD_VAR 0 1
56217: PPUSH
56218: LD_VAR 0 5
56222: PPUSH
56223: CALL_OW 76
56227: ST_TO_ADDR
56228: GO 56250
// result := SortListByListDesc ( units , tmp ) ;
56230: LD_ADDR_VAR 0 3
56234: PUSH
56235: LD_VAR 0 1
56239: PPUSH
56240: LD_VAR 0 5
56244: PPUSH
56245: CALL_OW 77
56249: ST_TO_ADDR
// end ;
56250: LD_VAR 0 3
56254: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56255: LD_INT 0
56257: PPUSH
56258: PPUSH
// task := GetTaskList ( mech ) ;
56259: LD_ADDR_VAR 0 4
56263: PUSH
56264: LD_VAR 0 1
56268: PPUSH
56269: CALL_OW 437
56273: ST_TO_ADDR
// if not task then
56274: LD_VAR 0 4
56278: NOT
56279: IFFALSE 56283
// exit ;
56281: GO 56325
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56283: LD_ADDR_VAR 0 3
56287: PUSH
56288: LD_VAR 0 4
56292: PUSH
56293: LD_INT 1
56295: ARRAY
56296: PUSH
56297: LD_INT 1
56299: ARRAY
56300: PUSH
56301: LD_STRING r
56303: EQUAL
56304: PUSH
56305: LD_VAR 0 4
56309: PUSH
56310: LD_INT 1
56312: ARRAY
56313: PUSH
56314: LD_INT 4
56316: ARRAY
56317: PUSH
56318: LD_VAR 0 2
56322: EQUAL
56323: AND
56324: ST_TO_ADDR
// end ;
56325: LD_VAR 0 3
56329: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56330: LD_INT 0
56332: PPUSH
// SetDir ( unit , d ) ;
56333: LD_VAR 0 1
56337: PPUSH
56338: LD_VAR 0 4
56342: PPUSH
56343: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56347: LD_VAR 0 1
56351: PPUSH
56352: LD_VAR 0 2
56356: PPUSH
56357: LD_VAR 0 3
56361: PPUSH
56362: LD_VAR 0 5
56366: PPUSH
56367: CALL_OW 48
// end ;
56371: LD_VAR 0 6
56375: RET
// export function ToNaturalNumber ( number ) ; begin
56376: LD_INT 0
56378: PPUSH
// result := number div 1 ;
56379: LD_ADDR_VAR 0 2
56383: PUSH
56384: LD_VAR 0 1
56388: PUSH
56389: LD_INT 1
56391: DIV
56392: ST_TO_ADDR
// if number < 0 then
56393: LD_VAR 0 1
56397: PUSH
56398: LD_INT 0
56400: LESS
56401: IFFALSE 56411
// result := 0 ;
56403: LD_ADDR_VAR 0 2
56407: PUSH
56408: LD_INT 0
56410: ST_TO_ADDR
// end ;
56411: LD_VAR 0 2
56415: RET
// export function SortByClass ( units , class ) ; var un ; begin
56416: LD_INT 0
56418: PPUSH
56419: PPUSH
// if not units or not class then
56420: LD_VAR 0 1
56424: NOT
56425: PUSH
56426: LD_VAR 0 2
56430: NOT
56431: OR
56432: IFFALSE 56436
// exit ;
56434: GO 56531
// result := [ ] ;
56436: LD_ADDR_VAR 0 3
56440: PUSH
56441: EMPTY
56442: ST_TO_ADDR
// for un in units do
56443: LD_ADDR_VAR 0 4
56447: PUSH
56448: LD_VAR 0 1
56452: PUSH
56453: FOR_IN
56454: IFFALSE 56529
// if GetClass ( un ) = class then
56456: LD_VAR 0 4
56460: PPUSH
56461: CALL_OW 257
56465: PUSH
56466: LD_VAR 0 2
56470: EQUAL
56471: IFFALSE 56498
// result := Insert ( result , 1 , un ) else
56473: LD_ADDR_VAR 0 3
56477: PUSH
56478: LD_VAR 0 3
56482: PPUSH
56483: LD_INT 1
56485: PPUSH
56486: LD_VAR 0 4
56490: PPUSH
56491: CALL_OW 2
56495: ST_TO_ADDR
56496: GO 56527
// result := Replace ( result , result + 1 , un ) ;
56498: LD_ADDR_VAR 0 3
56502: PUSH
56503: LD_VAR 0 3
56507: PPUSH
56508: LD_VAR 0 3
56512: PUSH
56513: LD_INT 1
56515: PLUS
56516: PPUSH
56517: LD_VAR 0 4
56521: PPUSH
56522: CALL_OW 1
56526: ST_TO_ADDR
56527: GO 56453
56529: POP
56530: POP
// end ;
56531: LD_VAR 0 3
56535: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56536: LD_INT 0
56538: PPUSH
56539: PPUSH
56540: PPUSH
56541: PPUSH
56542: PPUSH
56543: PPUSH
56544: PPUSH
// result := [ ] ;
56545: LD_ADDR_VAR 0 4
56549: PUSH
56550: EMPTY
56551: ST_TO_ADDR
// if x - r < 0 then
56552: LD_VAR 0 1
56556: PUSH
56557: LD_VAR 0 3
56561: MINUS
56562: PUSH
56563: LD_INT 0
56565: LESS
56566: IFFALSE 56578
// min_x := 0 else
56568: LD_ADDR_VAR 0 8
56572: PUSH
56573: LD_INT 0
56575: ST_TO_ADDR
56576: GO 56594
// min_x := x - r ;
56578: LD_ADDR_VAR 0 8
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: LD_VAR 0 3
56592: MINUS
56593: ST_TO_ADDR
// if y - r < 0 then
56594: LD_VAR 0 2
56598: PUSH
56599: LD_VAR 0 3
56603: MINUS
56604: PUSH
56605: LD_INT 0
56607: LESS
56608: IFFALSE 56620
// min_y := 0 else
56610: LD_ADDR_VAR 0 7
56614: PUSH
56615: LD_INT 0
56617: ST_TO_ADDR
56618: GO 56636
// min_y := y - r ;
56620: LD_ADDR_VAR 0 7
56624: PUSH
56625: LD_VAR 0 2
56629: PUSH
56630: LD_VAR 0 3
56634: MINUS
56635: ST_TO_ADDR
// max_x := x + r ;
56636: LD_ADDR_VAR 0 9
56640: PUSH
56641: LD_VAR 0 1
56645: PUSH
56646: LD_VAR 0 3
56650: PLUS
56651: ST_TO_ADDR
// max_y := y + r ;
56652: LD_ADDR_VAR 0 10
56656: PUSH
56657: LD_VAR 0 2
56661: PUSH
56662: LD_VAR 0 3
56666: PLUS
56667: ST_TO_ADDR
// for _x = min_x to max_x do
56668: LD_ADDR_VAR 0 5
56672: PUSH
56673: DOUBLE
56674: LD_VAR 0 8
56678: DEC
56679: ST_TO_ADDR
56680: LD_VAR 0 9
56684: PUSH
56685: FOR_TO
56686: IFFALSE 56787
// for _y = min_y to max_y do
56688: LD_ADDR_VAR 0 6
56692: PUSH
56693: DOUBLE
56694: LD_VAR 0 7
56698: DEC
56699: ST_TO_ADDR
56700: LD_VAR 0 10
56704: PUSH
56705: FOR_TO
56706: IFFALSE 56783
// begin if not ValidHex ( _x , _y ) then
56708: LD_VAR 0 5
56712: PPUSH
56713: LD_VAR 0 6
56717: PPUSH
56718: CALL_OW 488
56722: NOT
56723: IFFALSE 56727
// continue ;
56725: GO 56705
// if GetResourceTypeXY ( _x , _y ) then
56727: LD_VAR 0 5
56731: PPUSH
56732: LD_VAR 0 6
56736: PPUSH
56737: CALL_OW 283
56741: IFFALSE 56781
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56743: LD_ADDR_VAR 0 4
56747: PUSH
56748: LD_VAR 0 4
56752: PPUSH
56753: LD_VAR 0 4
56757: PUSH
56758: LD_INT 1
56760: PLUS
56761: PPUSH
56762: LD_VAR 0 5
56766: PUSH
56767: LD_VAR 0 6
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PPUSH
56776: CALL_OW 1
56780: ST_TO_ADDR
// end ;
56781: GO 56705
56783: POP
56784: POP
56785: GO 56685
56787: POP
56788: POP
// end ;
56789: LD_VAR 0 4
56793: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56794: LD_INT 0
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
56800: PPUSH
56801: PPUSH
56802: PPUSH
56803: PPUSH
// if not units then
56804: LD_VAR 0 1
56808: NOT
56809: IFFALSE 56813
// exit ;
56811: GO 57337
// result := UnitFilter ( units , [ f_ok ] ) ;
56813: LD_ADDR_VAR 0 3
56817: PUSH
56818: LD_VAR 0 1
56822: PPUSH
56823: LD_INT 50
56825: PUSH
56826: EMPTY
56827: LIST
56828: PPUSH
56829: CALL_OW 72
56833: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56834: LD_ADDR_VAR 0 8
56838: PUSH
56839: LD_VAR 0 1
56843: PUSH
56844: LD_INT 1
56846: ARRAY
56847: PPUSH
56848: CALL_OW 255
56852: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56853: LD_ADDR_VAR 0 10
56857: PUSH
56858: LD_INT 29
56860: PUSH
56861: LD_INT 91
56863: PUSH
56864: LD_INT 49
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: ST_TO_ADDR
// if not result then
56872: LD_VAR 0 3
56876: NOT
56877: IFFALSE 56881
// exit ;
56879: GO 57337
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56881: LD_ADDR_VAR 0 5
56885: PUSH
56886: LD_INT 81
56888: PUSH
56889: LD_VAR 0 8
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PPUSH
56898: CALL_OW 69
56902: ST_TO_ADDR
// for i in result do
56903: LD_ADDR_VAR 0 4
56907: PUSH
56908: LD_VAR 0 3
56912: PUSH
56913: FOR_IN
56914: IFFALSE 57335
// begin tag := GetTag ( i ) + 1 ;
56916: LD_ADDR_VAR 0 9
56920: PUSH
56921: LD_VAR 0 4
56925: PPUSH
56926: CALL_OW 110
56930: PUSH
56931: LD_INT 1
56933: PLUS
56934: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56935: LD_ADDR_VAR 0 7
56939: PUSH
56940: LD_VAR 0 4
56944: PPUSH
56945: CALL_OW 250
56949: PPUSH
56950: LD_VAR 0 4
56954: PPUSH
56955: CALL_OW 251
56959: PPUSH
56960: LD_INT 6
56962: PPUSH
56963: CALL 56536 0 3
56967: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56968: LD_VAR 0 4
56972: PPUSH
56973: CALL_OW 247
56977: PUSH
56978: LD_INT 2
56980: EQUAL
56981: PUSH
56982: LD_VAR 0 7
56986: AND
56987: PUSH
56988: LD_VAR 0 4
56992: PPUSH
56993: CALL_OW 264
56997: PUSH
56998: LD_VAR 0 10
57002: IN
57003: NOT
57004: AND
57005: IFFALSE 57044
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57007: LD_VAR 0 4
57011: PPUSH
57012: LD_VAR 0 7
57016: PUSH
57017: LD_INT 1
57019: ARRAY
57020: PUSH
57021: LD_INT 1
57023: ARRAY
57024: PPUSH
57025: LD_VAR 0 7
57029: PUSH
57030: LD_INT 1
57032: ARRAY
57033: PUSH
57034: LD_INT 2
57036: ARRAY
57037: PPUSH
57038: CALL_OW 116
57042: GO 57333
// if path > tag then
57044: LD_VAR 0 2
57048: PUSH
57049: LD_VAR 0 9
57053: GREATER
57054: IFFALSE 57262
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57056: LD_ADDR_VAR 0 6
57060: PUSH
57061: LD_VAR 0 5
57065: PPUSH
57066: LD_INT 91
57068: PUSH
57069: LD_VAR 0 4
57073: PUSH
57074: LD_INT 8
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: PPUSH
57082: CALL_OW 72
57086: ST_TO_ADDR
// if nearEnemy then
57087: LD_VAR 0 6
57091: IFFALSE 57160
// begin if GetWeapon ( i ) = ru_time_lapser then
57093: LD_VAR 0 4
57097: PPUSH
57098: CALL_OW 264
57102: PUSH
57103: LD_INT 49
57105: EQUAL
57106: IFFALSE 57134
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57108: LD_VAR 0 4
57112: PPUSH
57113: LD_VAR 0 6
57117: PPUSH
57118: LD_VAR 0 4
57122: PPUSH
57123: CALL_OW 74
57127: PPUSH
57128: CALL_OW 112
57132: GO 57158
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57134: LD_VAR 0 4
57138: PPUSH
57139: LD_VAR 0 6
57143: PPUSH
57144: LD_VAR 0 4
57148: PPUSH
57149: CALL_OW 74
57153: PPUSH
57154: CALL 58262 0 2
// end else
57158: GO 57260
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57160: LD_VAR 0 4
57164: PPUSH
57165: LD_VAR 0 2
57169: PUSH
57170: LD_VAR 0 9
57174: ARRAY
57175: PUSH
57176: LD_INT 1
57178: ARRAY
57179: PPUSH
57180: LD_VAR 0 2
57184: PUSH
57185: LD_VAR 0 9
57189: ARRAY
57190: PUSH
57191: LD_INT 2
57193: ARRAY
57194: PPUSH
57195: CALL_OW 297
57199: PUSH
57200: LD_INT 6
57202: GREATER
57203: IFFALSE 57246
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57205: LD_VAR 0 4
57209: PPUSH
57210: LD_VAR 0 2
57214: PUSH
57215: LD_VAR 0 9
57219: ARRAY
57220: PUSH
57221: LD_INT 1
57223: ARRAY
57224: PPUSH
57225: LD_VAR 0 2
57229: PUSH
57230: LD_VAR 0 9
57234: ARRAY
57235: PUSH
57236: LD_INT 2
57238: ARRAY
57239: PPUSH
57240: CALL_OW 114
57244: GO 57260
// SetTag ( i , tag ) ;
57246: LD_VAR 0 4
57250: PPUSH
57251: LD_VAR 0 9
57255: PPUSH
57256: CALL_OW 109
// end else
57260: GO 57333
// if enemy then
57262: LD_VAR 0 5
57266: IFFALSE 57333
// begin if GetWeapon ( i ) = ru_time_lapser then
57268: LD_VAR 0 4
57272: PPUSH
57273: CALL_OW 264
57277: PUSH
57278: LD_INT 49
57280: EQUAL
57281: IFFALSE 57309
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57283: LD_VAR 0 4
57287: PPUSH
57288: LD_VAR 0 5
57292: PPUSH
57293: LD_VAR 0 4
57297: PPUSH
57298: CALL_OW 74
57302: PPUSH
57303: CALL_OW 112
57307: GO 57333
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57309: LD_VAR 0 4
57313: PPUSH
57314: LD_VAR 0 5
57318: PPUSH
57319: LD_VAR 0 4
57323: PPUSH
57324: CALL_OW 74
57328: PPUSH
57329: CALL 58262 0 2
// end ; end ;
57333: GO 56913
57335: POP
57336: POP
// end ;
57337: LD_VAR 0 3
57341: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57342: LD_INT 0
57344: PPUSH
57345: PPUSH
57346: PPUSH
// if not unit or IsInUnit ( unit ) then
57347: LD_VAR 0 1
57351: NOT
57352: PUSH
57353: LD_VAR 0 1
57357: PPUSH
57358: CALL_OW 310
57362: OR
57363: IFFALSE 57367
// exit ;
57365: GO 57458
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57367: LD_ADDR_VAR 0 4
57371: PUSH
57372: LD_VAR 0 1
57376: PPUSH
57377: CALL_OW 250
57381: PPUSH
57382: LD_VAR 0 2
57386: PPUSH
57387: LD_INT 1
57389: PPUSH
57390: CALL_OW 272
57394: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57395: LD_ADDR_VAR 0 5
57399: PUSH
57400: LD_VAR 0 1
57404: PPUSH
57405: CALL_OW 251
57409: PPUSH
57410: LD_VAR 0 2
57414: PPUSH
57415: LD_INT 1
57417: PPUSH
57418: CALL_OW 273
57422: ST_TO_ADDR
// if ValidHex ( x , y ) then
57423: LD_VAR 0 4
57427: PPUSH
57428: LD_VAR 0 5
57432: PPUSH
57433: CALL_OW 488
57437: IFFALSE 57458
// ComTurnXY ( unit , x , y ) ;
57439: LD_VAR 0 1
57443: PPUSH
57444: LD_VAR 0 4
57448: PPUSH
57449: LD_VAR 0 5
57453: PPUSH
57454: CALL_OW 118
// end ;
57458: LD_VAR 0 3
57462: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57463: LD_INT 0
57465: PPUSH
57466: PPUSH
// result := false ;
57467: LD_ADDR_VAR 0 3
57471: PUSH
57472: LD_INT 0
57474: ST_TO_ADDR
// if not units then
57475: LD_VAR 0 2
57479: NOT
57480: IFFALSE 57484
// exit ;
57482: GO 57529
// for i in units do
57484: LD_ADDR_VAR 0 4
57488: PUSH
57489: LD_VAR 0 2
57493: PUSH
57494: FOR_IN
57495: IFFALSE 57527
// if See ( side , i ) then
57497: LD_VAR 0 1
57501: PPUSH
57502: LD_VAR 0 4
57506: PPUSH
57507: CALL_OW 292
57511: IFFALSE 57525
// begin result := true ;
57513: LD_ADDR_VAR 0 3
57517: PUSH
57518: LD_INT 1
57520: ST_TO_ADDR
// exit ;
57521: POP
57522: POP
57523: GO 57529
// end ;
57525: GO 57494
57527: POP
57528: POP
// end ;
57529: LD_VAR 0 3
57533: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57534: LD_INT 0
57536: PPUSH
57537: PPUSH
57538: PPUSH
57539: PPUSH
// if not unit or not points then
57540: LD_VAR 0 1
57544: NOT
57545: PUSH
57546: LD_VAR 0 2
57550: NOT
57551: OR
57552: IFFALSE 57556
// exit ;
57554: GO 57646
// dist := 99999 ;
57556: LD_ADDR_VAR 0 5
57560: PUSH
57561: LD_INT 99999
57563: ST_TO_ADDR
// for i in points do
57564: LD_ADDR_VAR 0 4
57568: PUSH
57569: LD_VAR 0 2
57573: PUSH
57574: FOR_IN
57575: IFFALSE 57644
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57577: LD_ADDR_VAR 0 6
57581: PUSH
57582: LD_VAR 0 1
57586: PPUSH
57587: LD_VAR 0 4
57591: PUSH
57592: LD_INT 1
57594: ARRAY
57595: PPUSH
57596: LD_VAR 0 4
57600: PUSH
57601: LD_INT 2
57603: ARRAY
57604: PPUSH
57605: CALL_OW 297
57609: ST_TO_ADDR
// if tmpDist < dist then
57610: LD_VAR 0 6
57614: PUSH
57615: LD_VAR 0 5
57619: LESS
57620: IFFALSE 57642
// begin result := i ;
57622: LD_ADDR_VAR 0 3
57626: PUSH
57627: LD_VAR 0 4
57631: ST_TO_ADDR
// dist := tmpDist ;
57632: LD_ADDR_VAR 0 5
57636: PUSH
57637: LD_VAR 0 6
57641: ST_TO_ADDR
// end ; end ;
57642: GO 57574
57644: POP
57645: POP
// end ;
57646: LD_VAR 0 3
57650: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57651: LD_INT 0
57653: PPUSH
// uc_side := side ;
57654: LD_ADDR_OWVAR 20
57658: PUSH
57659: LD_VAR 0 1
57663: ST_TO_ADDR
// uc_nation := 3 ;
57664: LD_ADDR_OWVAR 21
57668: PUSH
57669: LD_INT 3
57671: ST_TO_ADDR
// vc_chassis := 25 ;
57672: LD_ADDR_OWVAR 37
57676: PUSH
57677: LD_INT 25
57679: ST_TO_ADDR
// vc_engine := engine_siberite ;
57680: LD_ADDR_OWVAR 39
57684: PUSH
57685: LD_INT 3
57687: ST_TO_ADDR
// vc_control := control_computer ;
57688: LD_ADDR_OWVAR 38
57692: PUSH
57693: LD_INT 3
57695: ST_TO_ADDR
// vc_weapon := 59 ;
57696: LD_ADDR_OWVAR 40
57700: PUSH
57701: LD_INT 59
57703: ST_TO_ADDR
// result := CreateVehicle ;
57704: LD_ADDR_VAR 0 5
57708: PUSH
57709: CALL_OW 45
57713: ST_TO_ADDR
// SetDir ( result , d ) ;
57714: LD_VAR 0 5
57718: PPUSH
57719: LD_VAR 0 4
57723: PPUSH
57724: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57728: LD_VAR 0 5
57732: PPUSH
57733: LD_VAR 0 2
57737: PPUSH
57738: LD_VAR 0 3
57742: PPUSH
57743: LD_INT 0
57745: PPUSH
57746: CALL_OW 48
// end ;
57750: LD_VAR 0 5
57754: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57755: LD_INT 0
57757: PPUSH
57758: PPUSH
57759: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57760: LD_ADDR_VAR 0 2
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57783: LD_VAR 0 1
57787: NOT
57788: PUSH
57789: LD_VAR 0 1
57793: PPUSH
57794: CALL_OW 264
57798: PUSH
57799: LD_INT 12
57801: PUSH
57802: LD_INT 51
57804: PUSH
57805: LD_INT 32
57807: PUSH
57808: LD_INT 89
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: IN
57817: NOT
57818: OR
57819: IFFALSE 57823
// exit ;
57821: GO 57921
// for i := 1 to 3 do
57823: LD_ADDR_VAR 0 3
57827: PUSH
57828: DOUBLE
57829: LD_INT 1
57831: DEC
57832: ST_TO_ADDR
57833: LD_INT 3
57835: PUSH
57836: FOR_TO
57837: IFFALSE 57919
// begin tmp := GetCargo ( cargo , i ) ;
57839: LD_ADDR_VAR 0 4
57843: PUSH
57844: LD_VAR 0 1
57848: PPUSH
57849: LD_VAR 0 3
57853: PPUSH
57854: CALL_OW 289
57858: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57859: LD_ADDR_VAR 0 2
57863: PUSH
57864: LD_VAR 0 2
57868: PPUSH
57869: LD_VAR 0 3
57873: PPUSH
57874: LD_VAR 0 4
57878: PPUSH
57879: CALL_OW 1
57883: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57884: LD_ADDR_VAR 0 2
57888: PUSH
57889: LD_VAR 0 2
57893: PPUSH
57894: LD_INT 4
57896: PPUSH
57897: LD_VAR 0 2
57901: PUSH
57902: LD_INT 4
57904: ARRAY
57905: PUSH
57906: LD_VAR 0 4
57910: PLUS
57911: PPUSH
57912: CALL_OW 1
57916: ST_TO_ADDR
// end ;
57917: GO 57836
57919: POP
57920: POP
// end ;
57921: LD_VAR 0 2
57925: RET
// export function Length ( array ) ; begin
57926: LD_INT 0
57928: PPUSH
// result := array + 0 ;
57929: LD_ADDR_VAR 0 2
57933: PUSH
57934: LD_VAR 0 1
57938: PUSH
57939: LD_INT 0
57941: PLUS
57942: ST_TO_ADDR
// end ;
57943: LD_VAR 0 2
57947: RET
// export function PrepareArray ( array ) ; begin
57948: LD_INT 0
57950: PPUSH
// result := array diff 0 ;
57951: LD_ADDR_VAR 0 2
57955: PUSH
57956: LD_VAR 0 1
57960: PUSH
57961: LD_INT 0
57963: DIFF
57964: ST_TO_ADDR
// if not result [ 1 ] then
57965: LD_VAR 0 2
57969: PUSH
57970: LD_INT 1
57972: ARRAY
57973: NOT
57974: IFFALSE 57994
// result := Delete ( result , 1 ) ;
57976: LD_ADDR_VAR 0 2
57980: PUSH
57981: LD_VAR 0 2
57985: PPUSH
57986: LD_INT 1
57988: PPUSH
57989: CALL_OW 3
57993: ST_TO_ADDR
// end ;
57994: LD_VAR 0 2
57998: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57999: LD_INT 0
58001: PPUSH
58002: PPUSH
58003: PPUSH
58004: PPUSH
// sibRocketRange := 25 ;
58005: LD_ADDR_VAR 0 6
58009: PUSH
58010: LD_INT 25
58012: ST_TO_ADDR
// result := false ;
58013: LD_ADDR_VAR 0 4
58017: PUSH
58018: LD_INT 0
58020: ST_TO_ADDR
// for i := 0 to 5 do
58021: LD_ADDR_VAR 0 5
58025: PUSH
58026: DOUBLE
58027: LD_INT 0
58029: DEC
58030: ST_TO_ADDR
58031: LD_INT 5
58033: PUSH
58034: FOR_TO
58035: IFFALSE 58102
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58037: LD_VAR 0 1
58041: PPUSH
58042: LD_VAR 0 5
58046: PPUSH
58047: LD_VAR 0 6
58051: PPUSH
58052: CALL_OW 272
58056: PPUSH
58057: LD_VAR 0 2
58061: PPUSH
58062: LD_VAR 0 5
58066: PPUSH
58067: LD_VAR 0 6
58071: PPUSH
58072: CALL_OW 273
58076: PPUSH
58077: LD_VAR 0 3
58081: PPUSH
58082: CALL_OW 309
58086: IFFALSE 58100
// begin result := true ;
58088: LD_ADDR_VAR 0 4
58092: PUSH
58093: LD_INT 1
58095: ST_TO_ADDR
// exit ;
58096: POP
58097: POP
58098: GO 58104
// end ;
58100: GO 58034
58102: POP
58103: POP
// end ;
58104: LD_VAR 0 4
58108: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58109: LD_INT 0
58111: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58112: LD_VAR 0 1
58116: PPUSH
58117: LD_VAR 0 2
58121: PPUSH
58122: LD_INT 0
58124: PPUSH
58125: LD_INT 0
58127: PPUSH
58128: LD_INT 1
58130: PPUSH
58131: LD_INT 0
58133: PPUSH
58134: CALL_OW 587
// end ;
58138: LD_VAR 0 3
58142: RET
// export function CenterOnNow ( unit ) ; begin
58143: LD_INT 0
58145: PPUSH
// result := IsInUnit ( unit ) ;
58146: LD_ADDR_VAR 0 2
58150: PUSH
58151: LD_VAR 0 1
58155: PPUSH
58156: CALL_OW 310
58160: ST_TO_ADDR
// if not result then
58161: LD_VAR 0 2
58165: NOT
58166: IFFALSE 58178
// result := unit ;
58168: LD_ADDR_VAR 0 2
58172: PUSH
58173: LD_VAR 0 1
58177: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58178: LD_VAR 0 1
58182: PPUSH
58183: CALL_OW 87
// end ;
58187: LD_VAR 0 2
58191: RET
// export function ComMoveHex ( unit , hex ) ; begin
58192: LD_INT 0
58194: PPUSH
// if not hex then
58195: LD_VAR 0 2
58199: NOT
58200: IFFALSE 58204
// exit ;
58202: GO 58257
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58204: LD_VAR 0 2
58208: PUSH
58209: LD_INT 1
58211: ARRAY
58212: PPUSH
58213: LD_VAR 0 2
58217: PUSH
58218: LD_INT 2
58220: ARRAY
58221: PPUSH
58222: CALL_OW 428
58226: IFFALSE 58230
// exit ;
58228: GO 58257
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58230: LD_VAR 0 1
58234: PPUSH
58235: LD_VAR 0 2
58239: PUSH
58240: LD_INT 1
58242: ARRAY
58243: PPUSH
58244: LD_VAR 0 2
58248: PUSH
58249: LD_INT 2
58251: ARRAY
58252: PPUSH
58253: CALL_OW 111
// end ;
58257: LD_VAR 0 3
58261: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58262: LD_INT 0
58264: PPUSH
58265: PPUSH
58266: PPUSH
// if not unit or not enemy then
58267: LD_VAR 0 1
58271: NOT
58272: PUSH
58273: LD_VAR 0 2
58277: NOT
58278: OR
58279: IFFALSE 58283
// exit ;
58281: GO 58407
// x := GetX ( enemy ) ;
58283: LD_ADDR_VAR 0 4
58287: PUSH
58288: LD_VAR 0 2
58292: PPUSH
58293: CALL_OW 250
58297: ST_TO_ADDR
// y := GetY ( enemy ) ;
58298: LD_ADDR_VAR 0 5
58302: PUSH
58303: LD_VAR 0 2
58307: PPUSH
58308: CALL_OW 251
58312: ST_TO_ADDR
// if ValidHex ( x , y ) then
58313: LD_VAR 0 4
58317: PPUSH
58318: LD_VAR 0 5
58322: PPUSH
58323: CALL_OW 488
58327: IFFALSE 58407
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58329: LD_VAR 0 2
58333: PPUSH
58334: CALL_OW 247
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: IN
58349: PUSH
58350: LD_VAR 0 1
58354: PPUSH
58355: CALL_OW 255
58359: PPUSH
58360: LD_VAR 0 2
58364: PPUSH
58365: CALL_OW 292
58369: AND
58370: IFFALSE 58388
// ComAttackUnit ( unit , enemy ) else
58372: LD_VAR 0 1
58376: PPUSH
58377: LD_VAR 0 2
58381: PPUSH
58382: CALL_OW 115
58386: GO 58407
// ComAgressiveMove ( unit , x , y ) ;
58388: LD_VAR 0 1
58392: PPUSH
58393: LD_VAR 0 4
58397: PPUSH
58398: LD_VAR 0 5
58402: PPUSH
58403: CALL_OW 114
// end ;
58407: LD_VAR 0 3
58411: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58412: LD_INT 0
58414: PPUSH
58415: PPUSH
58416: PPUSH
// list := AreaToList ( area , 0 ) ;
58417: LD_ADDR_VAR 0 5
58421: PUSH
58422: LD_VAR 0 1
58426: PPUSH
58427: LD_INT 0
58429: PPUSH
58430: CALL_OW 517
58434: ST_TO_ADDR
// if not list then
58435: LD_VAR 0 5
58439: NOT
58440: IFFALSE 58444
// exit ;
58442: GO 58574
// if all then
58444: LD_VAR 0 2
58448: IFFALSE 58536
// begin for i := 1 to list [ 1 ] do
58450: LD_ADDR_VAR 0 4
58454: PUSH
58455: DOUBLE
58456: LD_INT 1
58458: DEC
58459: ST_TO_ADDR
58460: LD_VAR 0 5
58464: PUSH
58465: LD_INT 1
58467: ARRAY
58468: PUSH
58469: FOR_TO
58470: IFFALSE 58532
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58472: LD_ADDR_VAR 0 3
58476: PUSH
58477: LD_VAR 0 3
58481: PPUSH
58482: LD_VAR 0 3
58486: PUSH
58487: LD_INT 1
58489: PLUS
58490: PPUSH
58491: LD_VAR 0 5
58495: PUSH
58496: LD_INT 1
58498: ARRAY
58499: PUSH
58500: LD_VAR 0 4
58504: ARRAY
58505: PUSH
58506: LD_VAR 0 5
58510: PUSH
58511: LD_INT 2
58513: ARRAY
58514: PUSH
58515: LD_VAR 0 4
58519: ARRAY
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PPUSH
58525: CALL_OW 1
58529: ST_TO_ADDR
58530: GO 58469
58532: POP
58533: POP
// exit ;
58534: GO 58574
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58536: LD_ADDR_VAR 0 3
58540: PUSH
58541: LD_VAR 0 5
58545: PUSH
58546: LD_INT 1
58548: ARRAY
58549: PUSH
58550: LD_INT 1
58552: ARRAY
58553: PUSH
58554: LD_VAR 0 5
58558: PUSH
58559: LD_INT 2
58561: ARRAY
58562: PUSH
58563: LD_INT 1
58565: ARRAY
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: ST_TO_ADDR
// end ;
58574: LD_VAR 0 3
58578: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58579: LD_INT 0
58581: PPUSH
58582: PPUSH
// list := AreaToList ( area , 0 ) ;
58583: LD_ADDR_VAR 0 4
58587: PUSH
58588: LD_VAR 0 1
58592: PPUSH
58593: LD_INT 0
58595: PPUSH
58596: CALL_OW 517
58600: ST_TO_ADDR
// if not list then
58601: LD_VAR 0 4
58605: NOT
58606: IFFALSE 58610
// exit ;
58608: GO 58651
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58610: LD_ADDR_VAR 0 3
58614: PUSH
58615: LD_VAR 0 4
58619: PUSH
58620: LD_INT 1
58622: ARRAY
58623: PUSH
58624: LD_INT 1
58626: ARRAY
58627: PUSH
58628: LD_VAR 0 4
58632: PUSH
58633: LD_INT 2
58635: ARRAY
58636: PUSH
58637: LD_INT 1
58639: ARRAY
58640: PUSH
58641: LD_VAR 0 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// end ;
58651: LD_VAR 0 3
58655: RET
// export function First ( array ) ; begin
58656: LD_INT 0
58658: PPUSH
// if not array then
58659: LD_VAR 0 1
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58682
// result := array [ 1 ] ;
58668: LD_ADDR_VAR 0 2
58672: PUSH
58673: LD_VAR 0 1
58677: PUSH
58678: LD_INT 1
58680: ARRAY
58681: ST_TO_ADDR
// end ;
58682: LD_VAR 0 2
58686: RET
// export function Last ( array ) ; begin
58687: LD_INT 0
58689: PPUSH
// if not array then
58690: LD_VAR 0 1
58694: NOT
58695: IFFALSE 58699
// exit ;
58697: GO 58715
// result := array [ array ] ;
58699: LD_ADDR_VAR 0 2
58703: PUSH
58704: LD_VAR 0 1
58708: PUSH
58709: LD_VAR 0 1
58713: ARRAY
58714: ST_TO_ADDR
// end ;
58715: LD_VAR 0 2
58719: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58720: LD_INT 0
58722: PPUSH
58723: PPUSH
// result := [ ] ;
58724: LD_ADDR_VAR 0 5
58728: PUSH
58729: EMPTY
58730: ST_TO_ADDR
// if not array then
58731: LD_VAR 0 1
58735: NOT
58736: IFFALSE 58740
// exit ;
58738: GO 58852
// for i := 1 to array do
58740: LD_ADDR_VAR 0 6
58744: PUSH
58745: DOUBLE
58746: LD_INT 1
58748: DEC
58749: ST_TO_ADDR
58750: LD_VAR 0 1
58754: PUSH
58755: FOR_TO
58756: IFFALSE 58850
// if array [ i ] [ index ] = value then
58758: LD_VAR 0 1
58762: PUSH
58763: LD_VAR 0 6
58767: ARRAY
58768: PUSH
58769: LD_VAR 0 2
58773: ARRAY
58774: PUSH
58775: LD_VAR 0 3
58779: EQUAL
58780: IFFALSE 58848
// begin if indexColumn then
58782: LD_VAR 0 4
58786: IFFALSE 58822
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58788: LD_ADDR_VAR 0 5
58792: PUSH
58793: LD_VAR 0 5
58797: PPUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_VAR 0 6
58807: ARRAY
58808: PUSH
58809: LD_VAR 0 4
58813: ARRAY
58814: PPUSH
58815: CALL 54190 0 2
58819: ST_TO_ADDR
58820: GO 58848
// result := Join ( result , array [ i ] ) ;
58822: LD_ADDR_VAR 0 5
58826: PUSH
58827: LD_VAR 0 5
58831: PPUSH
58832: LD_VAR 0 1
58836: PUSH
58837: LD_VAR 0 6
58841: ARRAY
58842: PPUSH
58843: CALL 54190 0 2
58847: ST_TO_ADDR
// end ;
58848: GO 58755
58850: POP
58851: POP
// end ;
58852: LD_VAR 0 5
58856: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58857: LD_INT 0
58859: PPUSH
58860: PPUSH
58861: PPUSH
// if btype = b_depot then
58862: LD_VAR 0 2
58866: PUSH
58867: LD_INT 0
58869: EQUAL
58870: IFFALSE 58882
// begin result := true ;
58872: LD_ADDR_VAR 0 3
58876: PUSH
58877: LD_INT 1
58879: ST_TO_ADDR
// exit ;
58880: GO 58998
// end ; pom := GetBase ( depot ) ;
58882: LD_ADDR_VAR 0 4
58886: PUSH
58887: LD_VAR 0 1
58891: PPUSH
58892: CALL_OW 274
58896: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58897: LD_ADDR_VAR 0 5
58901: PUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: LD_VAR 0 1
58911: PPUSH
58912: CALL_OW 248
58916: PPUSH
58917: CALL_OW 450
58921: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58922: LD_ADDR_VAR 0 3
58926: PUSH
58927: LD_VAR 0 4
58931: PPUSH
58932: LD_INT 1
58934: PPUSH
58935: CALL_OW 275
58939: PUSH
58940: LD_VAR 0 5
58944: PUSH
58945: LD_INT 1
58947: ARRAY
58948: GREATEREQUAL
58949: PUSH
58950: LD_VAR 0 4
58954: PPUSH
58955: LD_INT 2
58957: PPUSH
58958: CALL_OW 275
58962: PUSH
58963: LD_VAR 0 5
58967: PUSH
58968: LD_INT 2
58970: ARRAY
58971: GREATEREQUAL
58972: AND
58973: PUSH
58974: LD_VAR 0 4
58978: PPUSH
58979: LD_INT 3
58981: PPUSH
58982: CALL_OW 275
58986: PUSH
58987: LD_VAR 0 5
58991: PUSH
58992: LD_INT 3
58994: ARRAY
58995: GREATEREQUAL
58996: AND
58997: ST_TO_ADDR
// end ;
58998: LD_VAR 0 3
59002: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59003: LD_INT 0
59005: PPUSH
// if not vehicles or not parkingPoint then
59006: LD_VAR 0 1
59010: NOT
59011: PUSH
59012: LD_VAR 0 2
59016: NOT
59017: OR
59018: IFFALSE 59022
// exit ;
59020: GO 59120
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59022: LD_ADDR_VAR 0 1
59026: PUSH
59027: LD_VAR 0 1
59031: PPUSH
59032: LD_INT 50
59034: PUSH
59035: EMPTY
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: LD_INT 92
59043: PUSH
59044: LD_VAR 0 2
59048: PUSH
59049: LD_INT 1
59051: ARRAY
59052: PUSH
59053: LD_VAR 0 2
59057: PUSH
59058: LD_INT 2
59060: ARRAY
59061: PUSH
59062: LD_INT 8
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PPUSH
59079: CALL_OW 72
59083: ST_TO_ADDR
// if not vehicles then
59084: LD_VAR 0 1
59088: NOT
59089: IFFALSE 59093
// exit ;
59091: GO 59120
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59093: LD_VAR 0 1
59097: PPUSH
59098: LD_VAR 0 2
59102: PUSH
59103: LD_INT 1
59105: ARRAY
59106: PPUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 2
59114: ARRAY
59115: PPUSH
59116: CALL_OW 111
// end ; end_of_file
59120: LD_VAR 0 3
59124: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59125: LD_VAR 0 1
59129: PUSH
59130: LD_INT 200
59132: DOUBLE
59133: GREATEREQUAL
59134: IFFALSE 59142
59136: LD_INT 299
59138: DOUBLE
59139: LESSEQUAL
59140: IFTRUE 59144
59142: GO 59176
59144: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59145: LD_VAR 0 1
59149: PPUSH
59150: LD_VAR 0 2
59154: PPUSH
59155: LD_VAR 0 3
59159: PPUSH
59160: LD_VAR 0 4
59164: PPUSH
59165: LD_VAR 0 5
59169: PPUSH
59170: CALL 59664 0 5
59174: GO 59253
59176: LD_INT 300
59178: DOUBLE
59179: GREATEREQUAL
59180: IFFALSE 59188
59182: LD_INT 399
59184: DOUBLE
59185: LESSEQUAL
59186: IFTRUE 59190
59188: GO 59252
59190: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59191: LD_VAR 0 1
59195: PPUSH
59196: LD_VAR 0 2
59200: PPUSH
59201: LD_VAR 0 3
59205: PPUSH
59206: LD_VAR 0 4
59210: PPUSH
59211: LD_VAR 0 5
59215: PPUSH
59216: LD_VAR 0 6
59220: PPUSH
59221: LD_VAR 0 7
59225: PPUSH
59226: LD_VAR 0 8
59230: PPUSH
59231: LD_VAR 0 9
59235: PPUSH
59236: LD_VAR 0 10
59240: PPUSH
59241: LD_VAR 0 11
59245: PPUSH
59246: CALL 76685 0 11
59250: GO 59253
59252: POP
// end ;
59253: PPOPN 11
59255: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_VAR 0 2
59265: PPUSH
59266: LD_VAR 0 3
59270: PPUSH
59271: LD_VAR 0 4
59275: PPUSH
59276: LD_VAR 0 5
59280: PPUSH
59281: CALL 59400 0 5
// end ; end_of_file
59285: PPOPN 5
59287: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59288: LD_INT 0
59290: PPUSH
59291: PPUSH
59292: PPUSH
59293: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59294: LD_VAR 0 1
59298: PPUSH
59299: CALL_OW 264
59303: PUSH
59304: LD_INT 91
59306: EQUAL
59307: IFFALSE 59379
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59309: LD_INT 68
59311: PPUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 255
59321: PPUSH
59322: CALL_OW 321
59326: PUSH
59327: LD_INT 2
59329: EQUAL
59330: IFFALSE 59342
// eff := 70 else
59332: LD_ADDR_VAR 0 4
59336: PUSH
59337: LD_INT 70
59339: ST_TO_ADDR
59340: GO 59350
// eff := 30 ;
59342: LD_ADDR_VAR 0 4
59346: PUSH
59347: LD_INT 30
59349: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59350: LD_VAR 0 1
59354: PPUSH
59355: CALL_OW 250
59359: PPUSH
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 251
59369: PPUSH
59370: LD_VAR 0 4
59374: PPUSH
59375: CALL_OW 495
// end ; end ;
59379: LD_VAR 0 2
59383: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59384: LD_INT 0
59386: PPUSH
// end ;
59387: LD_VAR 0 4
59391: RET
// export function SOS_Command ( cmd ) ; begin
59392: LD_INT 0
59394: PPUSH
// end ;
59395: LD_VAR 0 2
59399: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59400: LD_INT 0
59402: PPUSH
// end ;
59403: LD_VAR 0 6
59407: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59408: LD_INT 0
59410: PPUSH
59411: PPUSH
// if not vehicle or not factory then
59412: LD_VAR 0 1
59416: NOT
59417: PUSH
59418: LD_VAR 0 2
59422: NOT
59423: OR
59424: IFFALSE 59428
// exit ;
59426: GO 59659
// if factoryWaypoints >= factory then
59428: LD_EXP 105
59432: PUSH
59433: LD_VAR 0 2
59437: GREATEREQUAL
59438: IFFALSE 59659
// if factoryWaypoints [ factory ] then
59440: LD_EXP 105
59444: PUSH
59445: LD_VAR 0 2
59449: ARRAY
59450: IFFALSE 59659
// begin if GetControl ( vehicle ) = control_manual then
59452: LD_VAR 0 1
59456: PPUSH
59457: CALL_OW 263
59461: PUSH
59462: LD_INT 1
59464: EQUAL
59465: IFFALSE 59546
// begin driver := IsDrivenBy ( vehicle ) ;
59467: LD_ADDR_VAR 0 4
59471: PUSH
59472: LD_VAR 0 1
59476: PPUSH
59477: CALL_OW 311
59481: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59482: LD_VAR 0 4
59486: PPUSH
59487: LD_EXP 105
59491: PUSH
59492: LD_VAR 0 2
59496: ARRAY
59497: PUSH
59498: LD_INT 3
59500: ARRAY
59501: PPUSH
59502: LD_EXP 105
59506: PUSH
59507: LD_VAR 0 2
59511: ARRAY
59512: PUSH
59513: LD_INT 4
59515: ARRAY
59516: PPUSH
59517: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59521: LD_VAR 0 4
59525: PPUSH
59526: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59530: LD_VAR 0 4
59534: PPUSH
59535: LD_VAR 0 2
59539: PPUSH
59540: CALL_OW 180
// end else
59544: GO 59659
// if GetControl ( vehicle ) = control_remote then
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL_OW 263
59555: PUSH
59556: LD_INT 2
59558: EQUAL
59559: IFFALSE 59620
// begin wait ( 0 0$2 ) ;
59561: LD_INT 70
59563: PPUSH
59564: CALL_OW 67
// if Connect ( vehicle ) then
59568: LD_VAR 0 1
59572: PPUSH
59573: CALL 24807 0 1
59577: IFFALSE 59618
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59579: LD_VAR 0 1
59583: PPUSH
59584: LD_EXP 105
59588: PUSH
59589: LD_VAR 0 2
59593: ARRAY
59594: PUSH
59595: LD_INT 3
59597: ARRAY
59598: PPUSH
59599: LD_EXP 105
59603: PUSH
59604: LD_VAR 0 2
59608: ARRAY
59609: PUSH
59610: LD_INT 4
59612: ARRAY
59613: PPUSH
59614: CALL_OW 171
// end else
59618: GO 59659
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59620: LD_VAR 0 1
59624: PPUSH
59625: LD_EXP 105
59629: PUSH
59630: LD_VAR 0 2
59634: ARRAY
59635: PUSH
59636: LD_INT 3
59638: ARRAY
59639: PPUSH
59640: LD_EXP 105
59644: PUSH
59645: LD_VAR 0 2
59649: ARRAY
59650: PUSH
59651: LD_INT 4
59653: ARRAY
59654: PPUSH
59655: CALL_OW 171
// end ; end ;
59659: LD_VAR 0 3
59663: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59664: LD_INT 0
59666: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59667: LD_VAR 0 1
59671: PUSH
59672: LD_INT 250
59674: EQUAL
59675: PUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: CALL_OW 264
59685: PUSH
59686: LD_INT 81
59688: EQUAL
59689: AND
59690: IFFALSE 59711
// MinerPlaceMine ( unit , x , y ) ;
59692: LD_VAR 0 2
59696: PPUSH
59697: LD_VAR 0 4
59701: PPUSH
59702: LD_VAR 0 5
59706: PPUSH
59707: CALL 62701 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59711: LD_VAR 0 1
59715: PUSH
59716: LD_INT 251
59718: EQUAL
59719: PUSH
59720: LD_VAR 0 2
59724: PPUSH
59725: CALL_OW 264
59729: PUSH
59730: LD_INT 81
59732: EQUAL
59733: AND
59734: IFFALSE 59755
// MinerDetonateMine ( unit , x , y ) ;
59736: LD_VAR 0 2
59740: PPUSH
59741: LD_VAR 0 4
59745: PPUSH
59746: LD_VAR 0 5
59750: PPUSH
59751: CALL 62976 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59755: LD_VAR 0 1
59759: PUSH
59760: LD_INT 252
59762: EQUAL
59763: PUSH
59764: LD_VAR 0 2
59768: PPUSH
59769: CALL_OW 264
59773: PUSH
59774: LD_INT 81
59776: EQUAL
59777: AND
59778: IFFALSE 59799
// MinerCreateMinefield ( unit , x , y ) ;
59780: LD_VAR 0 2
59784: PPUSH
59785: LD_VAR 0 4
59789: PPUSH
59790: LD_VAR 0 5
59794: PPUSH
59795: CALL 63393 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59799: LD_VAR 0 1
59803: PUSH
59804: LD_INT 253
59806: EQUAL
59807: PUSH
59808: LD_VAR 0 2
59812: PPUSH
59813: CALL_OW 257
59817: PUSH
59818: LD_INT 5
59820: EQUAL
59821: AND
59822: IFFALSE 59843
// ComBinocular ( unit , x , y ) ;
59824: LD_VAR 0 2
59828: PPUSH
59829: LD_VAR 0 4
59833: PPUSH
59834: LD_VAR 0 5
59838: PPUSH
59839: CALL 63762 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59843: LD_VAR 0 1
59847: PUSH
59848: LD_INT 254
59850: EQUAL
59851: PUSH
59852: LD_VAR 0 2
59856: PPUSH
59857: CALL_OW 264
59861: PUSH
59862: LD_INT 99
59864: EQUAL
59865: AND
59866: PUSH
59867: LD_VAR 0 3
59871: PPUSH
59872: CALL_OW 263
59876: PUSH
59877: LD_INT 3
59879: EQUAL
59880: AND
59881: IFFALSE 59897
// HackDestroyVehicle ( unit , selectedUnit ) ;
59883: LD_VAR 0 2
59887: PPUSH
59888: LD_VAR 0 3
59892: PPUSH
59893: CALL 62065 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59897: LD_VAR 0 1
59901: PUSH
59902: LD_INT 255
59904: EQUAL
59905: PUSH
59906: LD_VAR 0 2
59910: PPUSH
59911: CALL_OW 264
59915: PUSH
59916: LD_INT 14
59918: PUSH
59919: LD_INT 53
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: IN
59926: AND
59927: PUSH
59928: LD_VAR 0 4
59932: PPUSH
59933: LD_VAR 0 5
59937: PPUSH
59938: CALL_OW 488
59942: AND
59943: IFFALSE 59967
// CutTreeXYR ( unit , x , y , 12 ) ;
59945: LD_VAR 0 2
59949: PPUSH
59950: LD_VAR 0 4
59954: PPUSH
59955: LD_VAR 0 5
59959: PPUSH
59960: LD_INT 12
59962: PPUSH
59963: CALL 60062 0 4
// if cmd = 256 then
59967: LD_VAR 0 1
59971: PUSH
59972: LD_INT 256
59974: EQUAL
59975: IFFALSE 59996
// SetFactoryWaypoint ( unit , x , y ) ;
59977: LD_VAR 0 2
59981: PPUSH
59982: LD_VAR 0 4
59986: PPUSH
59987: LD_VAR 0 5
59991: PPUSH
59992: CALL 78673 0 3
// if cmd = 257 then
59996: LD_VAR 0 1
60000: PUSH
60001: LD_INT 257
60003: EQUAL
60004: IFFALSE 60025
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60006: LD_VAR 0 2
60010: PPUSH
60011: LD_VAR 0 4
60015: PPUSH
60016: LD_VAR 0 5
60020: PPUSH
60021: CALL 79035 0 3
// if cmd = 258 then
60025: LD_VAR 0 1
60029: PUSH
60030: LD_INT 258
60032: EQUAL
60033: IFFALSE 60057
// BurnTreeXYR ( unit , x , y , 8 ) ;
60035: LD_VAR 0 2
60039: PPUSH
60040: LD_VAR 0 4
60044: PPUSH
60045: LD_VAR 0 5
60049: PPUSH
60050: LD_INT 8
60052: PPUSH
60053: CALL 60456 0 4
// end ;
60057: LD_VAR 0 6
60061: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60062: LD_INT 0
60064: PPUSH
60065: PPUSH
60066: PPUSH
60067: PPUSH
60068: PPUSH
60069: PPUSH
60070: PPUSH
60071: PPUSH
60072: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60073: LD_VAR 0 1
60077: PPUSH
60078: CALL_OW 302
60082: NOT
60083: PUSH
60084: LD_VAR 0 2
60088: PPUSH
60089: LD_VAR 0 3
60093: PPUSH
60094: CALL_OW 488
60098: NOT
60099: OR
60100: PUSH
60101: LD_VAR 0 4
60105: NOT
60106: OR
60107: IFFALSE 60111
// exit ;
60109: GO 60451
// list := [ ] ;
60111: LD_ADDR_VAR 0 13
60115: PUSH
60116: EMPTY
60117: ST_TO_ADDR
// if x - r < 0 then
60118: LD_VAR 0 2
60122: PUSH
60123: LD_VAR 0 4
60127: MINUS
60128: PUSH
60129: LD_INT 0
60131: LESS
60132: IFFALSE 60144
// min_x := 0 else
60134: LD_ADDR_VAR 0 7
60138: PUSH
60139: LD_INT 0
60141: ST_TO_ADDR
60142: GO 60160
// min_x := x - r ;
60144: LD_ADDR_VAR 0 7
60148: PUSH
60149: LD_VAR 0 2
60153: PUSH
60154: LD_VAR 0 4
60158: MINUS
60159: ST_TO_ADDR
// if y - r < 0 then
60160: LD_VAR 0 3
60164: PUSH
60165: LD_VAR 0 4
60169: MINUS
60170: PUSH
60171: LD_INT 0
60173: LESS
60174: IFFALSE 60186
// min_y := 0 else
60176: LD_ADDR_VAR 0 8
60180: PUSH
60181: LD_INT 0
60183: ST_TO_ADDR
60184: GO 60202
// min_y := y - r ;
60186: LD_ADDR_VAR 0 8
60190: PUSH
60191: LD_VAR 0 3
60195: PUSH
60196: LD_VAR 0 4
60200: MINUS
60201: ST_TO_ADDR
// max_x := x + r ;
60202: LD_ADDR_VAR 0 9
60206: PUSH
60207: LD_VAR 0 2
60211: PUSH
60212: LD_VAR 0 4
60216: PLUS
60217: ST_TO_ADDR
// max_y := y + r ;
60218: LD_ADDR_VAR 0 10
60222: PUSH
60223: LD_VAR 0 3
60227: PUSH
60228: LD_VAR 0 4
60232: PLUS
60233: ST_TO_ADDR
// for _x = min_x to max_x do
60234: LD_ADDR_VAR 0 11
60238: PUSH
60239: DOUBLE
60240: LD_VAR 0 7
60244: DEC
60245: ST_TO_ADDR
60246: LD_VAR 0 9
60250: PUSH
60251: FOR_TO
60252: IFFALSE 60369
// for _y = min_y to max_y do
60254: LD_ADDR_VAR 0 12
60258: PUSH
60259: DOUBLE
60260: LD_VAR 0 8
60264: DEC
60265: ST_TO_ADDR
60266: LD_VAR 0 10
60270: PUSH
60271: FOR_TO
60272: IFFALSE 60365
// begin if not ValidHex ( _x , _y ) then
60274: LD_VAR 0 11
60278: PPUSH
60279: LD_VAR 0 12
60283: PPUSH
60284: CALL_OW 488
60288: NOT
60289: IFFALSE 60293
// continue ;
60291: GO 60271
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60293: LD_VAR 0 11
60297: PPUSH
60298: LD_VAR 0 12
60302: PPUSH
60303: CALL_OW 351
60307: PUSH
60308: LD_VAR 0 11
60312: PPUSH
60313: LD_VAR 0 12
60317: PPUSH
60318: CALL_OW 554
60322: AND
60323: IFFALSE 60363
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60325: LD_ADDR_VAR 0 13
60329: PUSH
60330: LD_VAR 0 13
60334: PPUSH
60335: LD_VAR 0 13
60339: PUSH
60340: LD_INT 1
60342: PLUS
60343: PPUSH
60344: LD_VAR 0 11
60348: PUSH
60349: LD_VAR 0 12
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PPUSH
60358: CALL_OW 2
60362: ST_TO_ADDR
// end ;
60363: GO 60271
60365: POP
60366: POP
60367: GO 60251
60369: POP
60370: POP
// if not list then
60371: LD_VAR 0 13
60375: NOT
60376: IFFALSE 60380
// exit ;
60378: GO 60451
// for i in list do
60380: LD_ADDR_VAR 0 6
60384: PUSH
60385: LD_VAR 0 13
60389: PUSH
60390: FOR_IN
60391: IFFALSE 60449
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60393: LD_VAR 0 1
60397: PPUSH
60398: LD_STRING M
60400: PUSH
60401: LD_VAR 0 6
60405: PUSH
60406: LD_INT 1
60408: ARRAY
60409: PUSH
60410: LD_VAR 0 6
60414: PUSH
60415: LD_INT 2
60417: ARRAY
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: PUSH
60440: EMPTY
60441: LIST
60442: PPUSH
60443: CALL_OW 447
60447: GO 60390
60449: POP
60450: POP
// end ;
60451: LD_VAR 0 5
60455: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60456: LD_INT 0
60458: PPUSH
60459: PPUSH
60460: PPUSH
60461: PPUSH
60462: PPUSH
60463: PPUSH
60464: PPUSH
60465: PPUSH
60466: PPUSH
60467: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60468: LD_VAR 0 1
60472: PPUSH
60473: CALL_OW 302
60477: NOT
60478: PUSH
60479: LD_VAR 0 2
60483: PPUSH
60484: LD_VAR 0 3
60488: PPUSH
60489: CALL_OW 488
60493: NOT
60494: OR
60495: PUSH
60496: LD_VAR 0 4
60500: NOT
60501: OR
60502: IFFALSE 60506
// exit ;
60504: GO 61019
// list := [ ] ;
60506: LD_ADDR_VAR 0 13
60510: PUSH
60511: EMPTY
60512: ST_TO_ADDR
// if x - r < 0 then
60513: LD_VAR 0 2
60517: PUSH
60518: LD_VAR 0 4
60522: MINUS
60523: PUSH
60524: LD_INT 0
60526: LESS
60527: IFFALSE 60539
// min_x := 0 else
60529: LD_ADDR_VAR 0 7
60533: PUSH
60534: LD_INT 0
60536: ST_TO_ADDR
60537: GO 60555
// min_x := x - r ;
60539: LD_ADDR_VAR 0 7
60543: PUSH
60544: LD_VAR 0 2
60548: PUSH
60549: LD_VAR 0 4
60553: MINUS
60554: ST_TO_ADDR
// if y - r < 0 then
60555: LD_VAR 0 3
60559: PUSH
60560: LD_VAR 0 4
60564: MINUS
60565: PUSH
60566: LD_INT 0
60568: LESS
60569: IFFALSE 60581
// min_y := 0 else
60571: LD_ADDR_VAR 0 8
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
60579: GO 60597
// min_y := y - r ;
60581: LD_ADDR_VAR 0 8
60585: PUSH
60586: LD_VAR 0 3
60590: PUSH
60591: LD_VAR 0 4
60595: MINUS
60596: ST_TO_ADDR
// max_x := x + r ;
60597: LD_ADDR_VAR 0 9
60601: PUSH
60602: LD_VAR 0 2
60606: PUSH
60607: LD_VAR 0 4
60611: PLUS
60612: ST_TO_ADDR
// max_y := y + r ;
60613: LD_ADDR_VAR 0 10
60617: PUSH
60618: LD_VAR 0 3
60622: PUSH
60623: LD_VAR 0 4
60627: PLUS
60628: ST_TO_ADDR
// for _x = min_x to max_x do
60629: LD_ADDR_VAR 0 11
60633: PUSH
60634: DOUBLE
60635: LD_VAR 0 7
60639: DEC
60640: ST_TO_ADDR
60641: LD_VAR 0 9
60645: PUSH
60646: FOR_TO
60647: IFFALSE 60764
// for _y = min_y to max_y do
60649: LD_ADDR_VAR 0 12
60653: PUSH
60654: DOUBLE
60655: LD_VAR 0 8
60659: DEC
60660: ST_TO_ADDR
60661: LD_VAR 0 10
60665: PUSH
60666: FOR_TO
60667: IFFALSE 60760
// begin if not ValidHex ( _x , _y ) then
60669: LD_VAR 0 11
60673: PPUSH
60674: LD_VAR 0 12
60678: PPUSH
60679: CALL_OW 488
60683: NOT
60684: IFFALSE 60688
// continue ;
60686: GO 60666
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60688: LD_VAR 0 11
60692: PPUSH
60693: LD_VAR 0 12
60697: PPUSH
60698: CALL_OW 351
60702: PUSH
60703: LD_VAR 0 11
60707: PPUSH
60708: LD_VAR 0 12
60712: PPUSH
60713: CALL_OW 554
60717: AND
60718: IFFALSE 60758
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60720: LD_ADDR_VAR 0 13
60724: PUSH
60725: LD_VAR 0 13
60729: PPUSH
60730: LD_VAR 0 13
60734: PUSH
60735: LD_INT 1
60737: PLUS
60738: PPUSH
60739: LD_VAR 0 11
60743: PUSH
60744: LD_VAR 0 12
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PPUSH
60753: CALL_OW 2
60757: ST_TO_ADDR
// end ;
60758: GO 60666
60760: POP
60761: POP
60762: GO 60646
60764: POP
60765: POP
// if not list then
60766: LD_VAR 0 13
60770: NOT
60771: IFFALSE 60775
// exit ;
60773: GO 61019
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60775: LD_ADDR_VAR 0 13
60779: PUSH
60780: LD_VAR 0 1
60784: PPUSH
60785: LD_VAR 0 13
60789: PPUSH
60790: LD_INT 1
60792: PPUSH
60793: LD_INT 1
60795: PPUSH
60796: CALL 21949 0 4
60800: ST_TO_ADDR
// ComStop ( flame ) ;
60801: LD_VAR 0 1
60805: PPUSH
60806: CALL_OW 141
// for i in list do
60810: LD_ADDR_VAR 0 6
60814: PUSH
60815: LD_VAR 0 13
60819: PUSH
60820: FOR_IN
60821: IFFALSE 60852
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60823: LD_VAR 0 1
60827: PPUSH
60828: LD_VAR 0 6
60832: PUSH
60833: LD_INT 1
60835: ARRAY
60836: PPUSH
60837: LD_VAR 0 6
60841: PUSH
60842: LD_INT 2
60844: ARRAY
60845: PPUSH
60846: CALL_OW 176
60850: GO 60820
60852: POP
60853: POP
// repeat wait ( 0 0$1 ) ;
60854: LD_INT 35
60856: PPUSH
60857: CALL_OW 67
// task := GetTaskList ( flame ) ;
60861: LD_ADDR_VAR 0 14
60865: PUSH
60866: LD_VAR 0 1
60870: PPUSH
60871: CALL_OW 437
60875: ST_TO_ADDR
// if not task then
60876: LD_VAR 0 14
60880: NOT
60881: IFFALSE 60885
// exit ;
60883: GO 61019
// if task [ 1 ] [ 1 ] <> | then
60885: LD_VAR 0 14
60889: PUSH
60890: LD_INT 1
60892: ARRAY
60893: PUSH
60894: LD_INT 1
60896: ARRAY
60897: PUSH
60898: LD_STRING |
60900: NONEQUAL
60901: IFFALSE 60905
// exit ;
60903: GO 61019
// _x := task [ 1 ] [ 2 ] ;
60905: LD_ADDR_VAR 0 11
60909: PUSH
60910: LD_VAR 0 14
60914: PUSH
60915: LD_INT 1
60917: ARRAY
60918: PUSH
60919: LD_INT 2
60921: ARRAY
60922: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60923: LD_ADDR_VAR 0 12
60927: PUSH
60928: LD_VAR 0 14
60932: PUSH
60933: LD_INT 1
60935: ARRAY
60936: PUSH
60937: LD_INT 3
60939: ARRAY
60940: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60941: LD_VAR 0 11
60945: PPUSH
60946: LD_VAR 0 12
60950: PPUSH
60951: CALL_OW 351
60955: NOT
60956: PUSH
60957: LD_VAR 0 11
60961: PPUSH
60962: LD_VAR 0 12
60966: PPUSH
60967: CALL_OW 554
60971: NOT
60972: OR
60973: IFFALSE 61007
// begin task := Delete ( task , 1 ) ;
60975: LD_ADDR_VAR 0 14
60979: PUSH
60980: LD_VAR 0 14
60984: PPUSH
60985: LD_INT 1
60987: PPUSH
60988: CALL_OW 3
60992: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60993: LD_VAR 0 1
60997: PPUSH
60998: LD_VAR 0 14
61002: PPUSH
61003: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61007: LD_VAR 0 1
61011: PPUSH
61012: CALL_OW 314
61016: NOT
61017: IFFALSE 60854
// end ;
61019: LD_VAR 0 5
61023: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61024: LD_EXP 36
61028: NOT
61029: IFFALSE 61079
61031: GO 61033
61033: DISABLE
// begin initHack := true ;
61034: LD_ADDR_EXP 36
61038: PUSH
61039: LD_INT 1
61041: ST_TO_ADDR
// hackTanks := [ ] ;
61042: LD_ADDR_EXP 37
61046: PUSH
61047: EMPTY
61048: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61049: LD_ADDR_EXP 38
61053: PUSH
61054: EMPTY
61055: ST_TO_ADDR
// hackLimit := 3 ;
61056: LD_ADDR_EXP 39
61060: PUSH
61061: LD_INT 3
61063: ST_TO_ADDR
// hackDist := 12 ;
61064: LD_ADDR_EXP 40
61068: PUSH
61069: LD_INT 12
61071: ST_TO_ADDR
// hackCounter := [ ] ;
61072: LD_ADDR_EXP 41
61076: PUSH
61077: EMPTY
61078: ST_TO_ADDR
// end ;
61079: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61080: LD_EXP 36
61084: PUSH
61085: LD_INT 34
61087: PUSH
61088: LD_INT 99
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PPUSH
61095: CALL_OW 69
61099: AND
61100: IFFALSE 61353
61102: GO 61104
61104: DISABLE
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
// begin enable ;
61109: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61110: LD_ADDR_VAR 0 1
61114: PUSH
61115: LD_INT 34
61117: PUSH
61118: LD_INT 99
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PPUSH
61125: CALL_OW 69
61129: PUSH
61130: FOR_IN
61131: IFFALSE 61351
// begin if not i in hackTanks then
61133: LD_VAR 0 1
61137: PUSH
61138: LD_EXP 37
61142: IN
61143: NOT
61144: IFFALSE 61227
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61146: LD_ADDR_EXP 37
61150: PUSH
61151: LD_EXP 37
61155: PPUSH
61156: LD_EXP 37
61160: PUSH
61161: LD_INT 1
61163: PLUS
61164: PPUSH
61165: LD_VAR 0 1
61169: PPUSH
61170: CALL_OW 1
61174: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61175: LD_ADDR_EXP 38
61179: PUSH
61180: LD_EXP 38
61184: PPUSH
61185: LD_EXP 38
61189: PUSH
61190: LD_INT 1
61192: PLUS
61193: PPUSH
61194: EMPTY
61195: PPUSH
61196: CALL_OW 1
61200: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61201: LD_ADDR_EXP 41
61205: PUSH
61206: LD_EXP 41
61210: PPUSH
61211: LD_EXP 41
61215: PUSH
61216: LD_INT 1
61218: PLUS
61219: PPUSH
61220: EMPTY
61221: PPUSH
61222: CALL_OW 1
61226: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61227: LD_VAR 0 1
61231: PPUSH
61232: CALL_OW 302
61236: NOT
61237: IFFALSE 61250
// begin HackUnlinkAll ( i ) ;
61239: LD_VAR 0 1
61243: PPUSH
61244: CALL 61356 0 1
// continue ;
61248: GO 61130
// end ; HackCheckCapturedStatus ( i ) ;
61250: LD_VAR 0 1
61254: PPUSH
61255: CALL 61799 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61259: LD_ADDR_VAR 0 2
61263: PUSH
61264: LD_INT 81
61266: PUSH
61267: LD_VAR 0 1
61271: PPUSH
61272: CALL_OW 255
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 33
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 91
61293: PUSH
61294: LD_VAR 0 1
61298: PUSH
61299: LD_EXP 40
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 50
61311: PUSH
61312: EMPTY
61313: LIST
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: PPUSH
61321: CALL_OW 69
61325: ST_TO_ADDR
// if not tmp then
61326: LD_VAR 0 2
61330: NOT
61331: IFFALSE 61335
// continue ;
61333: GO 61130
// HackLink ( i , tmp ) ;
61335: LD_VAR 0 1
61339: PPUSH
61340: LD_VAR 0 2
61344: PPUSH
61345: CALL 61492 0 2
// end ;
61349: GO 61130
61351: POP
61352: POP
// end ;
61353: PPOPN 2
61355: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61356: LD_INT 0
61358: PPUSH
61359: PPUSH
61360: PPUSH
// if not hack in hackTanks then
61361: LD_VAR 0 1
61365: PUSH
61366: LD_EXP 37
61370: IN
61371: NOT
61372: IFFALSE 61376
// exit ;
61374: GO 61487
// index := GetElementIndex ( hackTanks , hack ) ;
61376: LD_ADDR_VAR 0 4
61380: PUSH
61381: LD_EXP 37
61385: PPUSH
61386: LD_VAR 0 1
61390: PPUSH
61391: CALL 21246 0 2
61395: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61396: LD_EXP 38
61400: PUSH
61401: LD_VAR 0 4
61405: ARRAY
61406: IFFALSE 61487
// begin for i in hackTanksCaptured [ index ] do
61408: LD_ADDR_VAR 0 3
61412: PUSH
61413: LD_EXP 38
61417: PUSH
61418: LD_VAR 0 4
61422: ARRAY
61423: PUSH
61424: FOR_IN
61425: IFFALSE 61451
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61427: LD_VAR 0 3
61431: PUSH
61432: LD_INT 1
61434: ARRAY
61435: PPUSH
61436: LD_VAR 0 3
61440: PUSH
61441: LD_INT 2
61443: ARRAY
61444: PPUSH
61445: CALL_OW 235
61449: GO 61424
61451: POP
61452: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61453: LD_ADDR_EXP 38
61457: PUSH
61458: LD_EXP 38
61462: PPUSH
61463: LD_VAR 0 4
61467: PPUSH
61468: EMPTY
61469: PPUSH
61470: CALL_OW 1
61474: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61475: LD_VAR 0 1
61479: PPUSH
61480: LD_INT 0
61482: PPUSH
61483: CALL_OW 505
// end ; end ;
61487: LD_VAR 0 2
61491: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61492: LD_INT 0
61494: PPUSH
61495: PPUSH
61496: PPUSH
// if not hack in hackTanks or not vehicles then
61497: LD_VAR 0 1
61501: PUSH
61502: LD_EXP 37
61506: IN
61507: NOT
61508: PUSH
61509: LD_VAR 0 2
61513: NOT
61514: OR
61515: IFFALSE 61519
// exit ;
61517: GO 61794
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61519: LD_ADDR_VAR 0 2
61523: PUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: LD_VAR 0 2
61533: PPUSH
61534: LD_INT 1
61536: PPUSH
61537: LD_INT 1
61539: PPUSH
61540: CALL 21896 0 4
61544: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61545: LD_ADDR_VAR 0 5
61549: PUSH
61550: LD_EXP 37
61554: PPUSH
61555: LD_VAR 0 1
61559: PPUSH
61560: CALL 21246 0 2
61564: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61565: LD_EXP 38
61569: PUSH
61570: LD_VAR 0 5
61574: ARRAY
61575: PUSH
61576: LD_EXP 39
61580: LESS
61581: IFFALSE 61770
// begin for i := 1 to vehicles do
61583: LD_ADDR_VAR 0 4
61587: PUSH
61588: DOUBLE
61589: LD_INT 1
61591: DEC
61592: ST_TO_ADDR
61593: LD_VAR 0 2
61597: PUSH
61598: FOR_TO
61599: IFFALSE 61768
// begin if hackTanksCaptured [ index ] = hackLimit then
61601: LD_EXP 38
61605: PUSH
61606: LD_VAR 0 5
61610: ARRAY
61611: PUSH
61612: LD_EXP 39
61616: EQUAL
61617: IFFALSE 61621
// break ;
61619: GO 61768
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61621: LD_ADDR_EXP 41
61625: PUSH
61626: LD_EXP 41
61630: PPUSH
61631: LD_VAR 0 5
61635: PPUSH
61636: LD_EXP 41
61640: PUSH
61641: LD_VAR 0 5
61645: ARRAY
61646: PUSH
61647: LD_INT 1
61649: PLUS
61650: PPUSH
61651: CALL_OW 1
61655: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61656: LD_ADDR_EXP 38
61660: PUSH
61661: LD_EXP 38
61665: PPUSH
61666: LD_VAR 0 5
61670: PUSH
61671: LD_EXP 38
61675: PUSH
61676: LD_VAR 0 5
61680: ARRAY
61681: PUSH
61682: LD_INT 1
61684: PLUS
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PPUSH
61690: LD_VAR 0 2
61694: PUSH
61695: LD_VAR 0 4
61699: ARRAY
61700: PUSH
61701: LD_VAR 0 2
61705: PUSH
61706: LD_VAR 0 4
61710: ARRAY
61711: PPUSH
61712: CALL_OW 255
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PPUSH
61721: CALL 21461 0 3
61725: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61726: LD_VAR 0 2
61730: PUSH
61731: LD_VAR 0 4
61735: ARRAY
61736: PPUSH
61737: LD_VAR 0 1
61741: PPUSH
61742: CALL_OW 255
61746: PPUSH
61747: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61751: LD_VAR 0 2
61755: PUSH
61756: LD_VAR 0 4
61760: ARRAY
61761: PPUSH
61762: CALL_OW 141
// end ;
61766: GO 61598
61768: POP
61769: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61770: LD_VAR 0 1
61774: PPUSH
61775: LD_EXP 38
61779: PUSH
61780: LD_VAR 0 5
61784: ARRAY
61785: PUSH
61786: LD_INT 0
61788: PLUS
61789: PPUSH
61790: CALL_OW 505
// end ;
61794: LD_VAR 0 3
61798: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61799: LD_INT 0
61801: PPUSH
61802: PPUSH
61803: PPUSH
61804: PPUSH
// if not hack in hackTanks then
61805: LD_VAR 0 1
61809: PUSH
61810: LD_EXP 37
61814: IN
61815: NOT
61816: IFFALSE 61820
// exit ;
61818: GO 62060
// index := GetElementIndex ( hackTanks , hack ) ;
61820: LD_ADDR_VAR 0 4
61824: PUSH
61825: LD_EXP 37
61829: PPUSH
61830: LD_VAR 0 1
61834: PPUSH
61835: CALL 21246 0 2
61839: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61840: LD_ADDR_VAR 0 3
61844: PUSH
61845: DOUBLE
61846: LD_EXP 38
61850: PUSH
61851: LD_VAR 0 4
61855: ARRAY
61856: INC
61857: ST_TO_ADDR
61858: LD_INT 1
61860: PUSH
61861: FOR_DOWNTO
61862: IFFALSE 62034
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61864: LD_ADDR_VAR 0 5
61868: PUSH
61869: LD_EXP 38
61873: PUSH
61874: LD_VAR 0 4
61878: ARRAY
61879: PUSH
61880: LD_VAR 0 3
61884: ARRAY
61885: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61886: LD_VAR 0 5
61890: PUSH
61891: LD_INT 1
61893: ARRAY
61894: PPUSH
61895: CALL_OW 302
61899: NOT
61900: PUSH
61901: LD_VAR 0 5
61905: PUSH
61906: LD_INT 1
61908: ARRAY
61909: PPUSH
61910: CALL_OW 255
61914: PUSH
61915: LD_VAR 0 1
61919: PPUSH
61920: CALL_OW 255
61924: NONEQUAL
61925: OR
61926: IFFALSE 62032
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61928: LD_VAR 0 5
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PPUSH
61937: CALL_OW 305
61941: PUSH
61942: LD_VAR 0 5
61946: PUSH
61947: LD_INT 1
61949: ARRAY
61950: PPUSH
61951: CALL_OW 255
61955: PUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: CALL_OW 255
61965: EQUAL
61966: AND
61967: IFFALSE 61991
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61969: LD_VAR 0 5
61973: PUSH
61974: LD_INT 1
61976: ARRAY
61977: PPUSH
61978: LD_VAR 0 5
61982: PUSH
61983: LD_INT 2
61985: ARRAY
61986: PPUSH
61987: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61991: LD_ADDR_EXP 38
61995: PUSH
61996: LD_EXP 38
62000: PPUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: LD_EXP 38
62010: PUSH
62011: LD_VAR 0 4
62015: ARRAY
62016: PPUSH
62017: LD_VAR 0 3
62021: PPUSH
62022: CALL_OW 3
62026: PPUSH
62027: CALL_OW 1
62031: ST_TO_ADDR
// end ; end ;
62032: GO 61861
62034: POP
62035: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62036: LD_VAR 0 1
62040: PPUSH
62041: LD_EXP 38
62045: PUSH
62046: LD_VAR 0 4
62050: ARRAY
62051: PUSH
62052: LD_INT 0
62054: PLUS
62055: PPUSH
62056: CALL_OW 505
// end ;
62060: LD_VAR 0 2
62064: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62065: LD_INT 0
62067: PPUSH
62068: PPUSH
62069: PPUSH
62070: PPUSH
// if not hack in hackTanks then
62071: LD_VAR 0 1
62075: PUSH
62076: LD_EXP 37
62080: IN
62081: NOT
62082: IFFALSE 62086
// exit ;
62084: GO 62171
// index := GetElementIndex ( hackTanks , hack ) ;
62086: LD_ADDR_VAR 0 5
62090: PUSH
62091: LD_EXP 37
62095: PPUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL 21246 0 2
62105: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62106: LD_ADDR_VAR 0 4
62110: PUSH
62111: DOUBLE
62112: LD_INT 1
62114: DEC
62115: ST_TO_ADDR
62116: LD_EXP 38
62120: PUSH
62121: LD_VAR 0 5
62125: ARRAY
62126: PUSH
62127: FOR_TO
62128: IFFALSE 62169
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62130: LD_EXP 38
62134: PUSH
62135: LD_VAR 0 5
62139: ARRAY
62140: PUSH
62141: LD_VAR 0 4
62145: ARRAY
62146: PUSH
62147: LD_INT 1
62149: ARRAY
62150: PUSH
62151: LD_VAR 0 2
62155: EQUAL
62156: IFFALSE 62167
// KillUnit ( vehicle ) ;
62158: LD_VAR 0 2
62162: PPUSH
62163: CALL_OW 66
62167: GO 62127
62169: POP
62170: POP
// end ;
62171: LD_VAR 0 3
62175: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62176: LD_EXP 42
62180: NOT
62181: IFFALSE 62216
62183: GO 62185
62185: DISABLE
// begin initMiner := true ;
62186: LD_ADDR_EXP 42
62190: PUSH
62191: LD_INT 1
62193: ST_TO_ADDR
// minersList := [ ] ;
62194: LD_ADDR_EXP 43
62198: PUSH
62199: EMPTY
62200: ST_TO_ADDR
// minerMinesList := [ ] ;
62201: LD_ADDR_EXP 44
62205: PUSH
62206: EMPTY
62207: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62208: LD_ADDR_EXP 45
62212: PUSH
62213: LD_INT 5
62215: ST_TO_ADDR
// end ;
62216: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62217: LD_EXP 42
62221: PUSH
62222: LD_INT 34
62224: PUSH
62225: LD_INT 81
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PPUSH
62232: CALL_OW 69
62236: AND
62237: IFFALSE 62698
62239: GO 62241
62241: DISABLE
62242: LD_INT 0
62244: PPUSH
62245: PPUSH
62246: PPUSH
62247: PPUSH
// begin enable ;
62248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62249: LD_ADDR_VAR 0 1
62253: PUSH
62254: LD_INT 34
62256: PUSH
62257: LD_INT 81
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PPUSH
62264: CALL_OW 69
62268: PUSH
62269: FOR_IN
62270: IFFALSE 62342
// begin if not i in minersList then
62272: LD_VAR 0 1
62276: PUSH
62277: LD_EXP 43
62281: IN
62282: NOT
62283: IFFALSE 62340
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62285: LD_ADDR_EXP 43
62289: PUSH
62290: LD_EXP 43
62294: PPUSH
62295: LD_EXP 43
62299: PUSH
62300: LD_INT 1
62302: PLUS
62303: PPUSH
62304: LD_VAR 0 1
62308: PPUSH
62309: CALL_OW 1
62313: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62314: LD_ADDR_EXP 44
62318: PUSH
62319: LD_EXP 44
62323: PPUSH
62324: LD_EXP 44
62328: PUSH
62329: LD_INT 1
62331: PLUS
62332: PPUSH
62333: EMPTY
62334: PPUSH
62335: CALL_OW 1
62339: ST_TO_ADDR
// end end ;
62340: GO 62269
62342: POP
62343: POP
// for i := minerMinesList downto 1 do
62344: LD_ADDR_VAR 0 1
62348: PUSH
62349: DOUBLE
62350: LD_EXP 44
62354: INC
62355: ST_TO_ADDR
62356: LD_INT 1
62358: PUSH
62359: FOR_DOWNTO
62360: IFFALSE 62696
// begin if IsLive ( minersList [ i ] ) then
62362: LD_EXP 43
62366: PUSH
62367: LD_VAR 0 1
62371: ARRAY
62372: PPUSH
62373: CALL_OW 300
62377: IFFALSE 62405
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62379: LD_EXP 43
62383: PUSH
62384: LD_VAR 0 1
62388: ARRAY
62389: PPUSH
62390: LD_EXP 44
62394: PUSH
62395: LD_VAR 0 1
62399: ARRAY
62400: PPUSH
62401: CALL_OW 505
// if not minerMinesList [ i ] then
62405: LD_EXP 44
62409: PUSH
62410: LD_VAR 0 1
62414: ARRAY
62415: NOT
62416: IFFALSE 62420
// continue ;
62418: GO 62359
// for j := minerMinesList [ i ] downto 1 do
62420: LD_ADDR_VAR 0 2
62424: PUSH
62425: DOUBLE
62426: LD_EXP 44
62430: PUSH
62431: LD_VAR 0 1
62435: ARRAY
62436: INC
62437: ST_TO_ADDR
62438: LD_INT 1
62440: PUSH
62441: FOR_DOWNTO
62442: IFFALSE 62692
// begin side := GetSide ( minersList [ i ] ) ;
62444: LD_ADDR_VAR 0 3
62448: PUSH
62449: LD_EXP 43
62453: PUSH
62454: LD_VAR 0 1
62458: ARRAY
62459: PPUSH
62460: CALL_OW 255
62464: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62465: LD_ADDR_VAR 0 4
62469: PUSH
62470: LD_EXP 44
62474: PUSH
62475: LD_VAR 0 1
62479: ARRAY
62480: PUSH
62481: LD_VAR 0 2
62485: ARRAY
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PPUSH
62491: LD_EXP 44
62495: PUSH
62496: LD_VAR 0 1
62500: ARRAY
62501: PUSH
62502: LD_VAR 0 2
62506: ARRAY
62507: PUSH
62508: LD_INT 2
62510: ARRAY
62511: PPUSH
62512: CALL_OW 428
62516: ST_TO_ADDR
// if not tmp then
62517: LD_VAR 0 4
62521: NOT
62522: IFFALSE 62526
// continue ;
62524: GO 62441
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62526: LD_VAR 0 4
62530: PUSH
62531: LD_INT 81
62533: PUSH
62534: LD_VAR 0 3
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PPUSH
62543: CALL_OW 69
62547: IN
62548: PUSH
62549: LD_EXP 44
62553: PUSH
62554: LD_VAR 0 1
62558: ARRAY
62559: PUSH
62560: LD_VAR 0 2
62564: ARRAY
62565: PUSH
62566: LD_INT 1
62568: ARRAY
62569: PPUSH
62570: LD_EXP 44
62574: PUSH
62575: LD_VAR 0 1
62579: ARRAY
62580: PUSH
62581: LD_VAR 0 2
62585: ARRAY
62586: PUSH
62587: LD_INT 2
62589: ARRAY
62590: PPUSH
62591: CALL_OW 458
62595: AND
62596: IFFALSE 62690
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62598: LD_EXP 44
62602: PUSH
62603: LD_VAR 0 1
62607: ARRAY
62608: PUSH
62609: LD_VAR 0 2
62613: ARRAY
62614: PUSH
62615: LD_INT 1
62617: ARRAY
62618: PPUSH
62619: LD_EXP 44
62623: PUSH
62624: LD_VAR 0 1
62628: ARRAY
62629: PUSH
62630: LD_VAR 0 2
62634: ARRAY
62635: PUSH
62636: LD_INT 2
62638: ARRAY
62639: PPUSH
62640: LD_VAR 0 3
62644: PPUSH
62645: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62649: LD_ADDR_EXP 44
62653: PUSH
62654: LD_EXP 44
62658: PPUSH
62659: LD_VAR 0 1
62663: PPUSH
62664: LD_EXP 44
62668: PUSH
62669: LD_VAR 0 1
62673: ARRAY
62674: PPUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: CALL_OW 3
62684: PPUSH
62685: CALL_OW 1
62689: ST_TO_ADDR
// end ; end ;
62690: GO 62441
62692: POP
62693: POP
// end ;
62694: GO 62359
62696: POP
62697: POP
// end ;
62698: PPOPN 4
62700: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
// result := false ;
62705: LD_ADDR_VAR 0 4
62709: PUSH
62710: LD_INT 0
62712: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62713: LD_VAR 0 1
62717: PPUSH
62718: CALL_OW 264
62722: PUSH
62723: LD_INT 81
62725: EQUAL
62726: NOT
62727: IFFALSE 62731
// exit ;
62729: GO 62971
// index := GetElementIndex ( minersList , unit ) ;
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: LD_EXP 43
62740: PPUSH
62741: LD_VAR 0 1
62745: PPUSH
62746: CALL 21246 0 2
62750: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62751: LD_EXP 44
62755: PUSH
62756: LD_VAR 0 5
62760: ARRAY
62761: PUSH
62762: LD_EXP 45
62766: GREATEREQUAL
62767: IFFALSE 62771
// exit ;
62769: GO 62971
// ComMoveXY ( unit , x , y ) ;
62771: LD_VAR 0 1
62775: PPUSH
62776: LD_VAR 0 2
62780: PPUSH
62781: LD_VAR 0 3
62785: PPUSH
62786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62790: LD_INT 35
62792: PPUSH
62793: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_VAR 0 2
62806: PPUSH
62807: LD_VAR 0 3
62811: PPUSH
62812: CALL 52987 0 3
62816: NOT
62817: PUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: CALL_OW 314
62827: AND
62828: IFFALSE 62832
// exit ;
62830: GO 62971
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62832: LD_VAR 0 2
62836: PPUSH
62837: LD_VAR 0 3
62841: PPUSH
62842: CALL_OW 428
62846: PUSH
62847: LD_VAR 0 1
62851: EQUAL
62852: PUSH
62853: LD_VAR 0 1
62857: PPUSH
62858: CALL_OW 314
62862: NOT
62863: AND
62864: IFFALSE 62790
// PlaySoundXY ( x , y , PlantMine ) ;
62866: LD_VAR 0 2
62870: PPUSH
62871: LD_VAR 0 3
62875: PPUSH
62876: LD_STRING PlantMine
62878: PPUSH
62879: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62883: LD_VAR 0 2
62887: PPUSH
62888: LD_VAR 0 3
62892: PPUSH
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 255
62902: PPUSH
62903: LD_INT 0
62905: PPUSH
62906: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62910: LD_ADDR_EXP 44
62914: PUSH
62915: LD_EXP 44
62919: PPUSH
62920: LD_VAR 0 5
62924: PUSH
62925: LD_EXP 44
62929: PUSH
62930: LD_VAR 0 5
62934: ARRAY
62935: PUSH
62936: LD_INT 1
62938: PLUS
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PPUSH
62944: LD_VAR 0 2
62948: PUSH
62949: LD_VAR 0 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PPUSH
62958: CALL 21461 0 3
62962: ST_TO_ADDR
// result := true ;
62963: LD_ADDR_VAR 0 4
62967: PUSH
62968: LD_INT 1
62970: ST_TO_ADDR
// end ;
62971: LD_VAR 0 4
62975: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62976: LD_INT 0
62978: PPUSH
62979: PPUSH
62980: PPUSH
// if not unit in minersList then
62981: LD_VAR 0 1
62985: PUSH
62986: LD_EXP 43
62990: IN
62991: NOT
62992: IFFALSE 62996
// exit ;
62994: GO 63388
// index := GetElementIndex ( minersList , unit ) ;
62996: LD_ADDR_VAR 0 6
63000: PUSH
63001: LD_EXP 43
63005: PPUSH
63006: LD_VAR 0 1
63010: PPUSH
63011: CALL 21246 0 2
63015: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63016: LD_ADDR_VAR 0 5
63020: PUSH
63021: DOUBLE
63022: LD_EXP 44
63026: PUSH
63027: LD_VAR 0 6
63031: ARRAY
63032: INC
63033: ST_TO_ADDR
63034: LD_INT 1
63036: PUSH
63037: FOR_DOWNTO
63038: IFFALSE 63199
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63040: LD_EXP 44
63044: PUSH
63045: LD_VAR 0 6
63049: ARRAY
63050: PUSH
63051: LD_VAR 0 5
63055: ARRAY
63056: PUSH
63057: LD_INT 1
63059: ARRAY
63060: PUSH
63061: LD_VAR 0 2
63065: EQUAL
63066: PUSH
63067: LD_EXP 44
63071: PUSH
63072: LD_VAR 0 6
63076: ARRAY
63077: PUSH
63078: LD_VAR 0 5
63082: ARRAY
63083: PUSH
63084: LD_INT 2
63086: ARRAY
63087: PUSH
63088: LD_VAR 0 3
63092: EQUAL
63093: AND
63094: IFFALSE 63197
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63096: LD_EXP 44
63100: PUSH
63101: LD_VAR 0 6
63105: ARRAY
63106: PUSH
63107: LD_VAR 0 5
63111: ARRAY
63112: PUSH
63113: LD_INT 1
63115: ARRAY
63116: PPUSH
63117: LD_EXP 44
63121: PUSH
63122: LD_VAR 0 6
63126: ARRAY
63127: PUSH
63128: LD_VAR 0 5
63132: ARRAY
63133: PUSH
63134: LD_INT 2
63136: ARRAY
63137: PPUSH
63138: LD_VAR 0 1
63142: PPUSH
63143: CALL_OW 255
63147: PPUSH
63148: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63152: LD_ADDR_EXP 44
63156: PUSH
63157: LD_EXP 44
63161: PPUSH
63162: LD_VAR 0 6
63166: PPUSH
63167: LD_EXP 44
63171: PUSH
63172: LD_VAR 0 6
63176: ARRAY
63177: PPUSH
63178: LD_VAR 0 5
63182: PPUSH
63183: CALL_OW 3
63187: PPUSH
63188: CALL_OW 1
63192: ST_TO_ADDR
// exit ;
63193: POP
63194: POP
63195: GO 63388
// end ; end ;
63197: GO 63037
63199: POP
63200: POP
// for i := minerMinesList [ index ] downto 1 do
63201: LD_ADDR_VAR 0 5
63205: PUSH
63206: DOUBLE
63207: LD_EXP 44
63211: PUSH
63212: LD_VAR 0 6
63216: ARRAY
63217: INC
63218: ST_TO_ADDR
63219: LD_INT 1
63221: PUSH
63222: FOR_DOWNTO
63223: IFFALSE 63386
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63225: LD_EXP 44
63229: PUSH
63230: LD_VAR 0 6
63234: ARRAY
63235: PUSH
63236: LD_VAR 0 5
63240: ARRAY
63241: PUSH
63242: LD_INT 1
63244: ARRAY
63245: PPUSH
63246: LD_EXP 44
63250: PUSH
63251: LD_VAR 0 6
63255: ARRAY
63256: PUSH
63257: LD_VAR 0 5
63261: ARRAY
63262: PUSH
63263: LD_INT 2
63265: ARRAY
63266: PPUSH
63267: LD_VAR 0 2
63271: PPUSH
63272: LD_VAR 0 3
63276: PPUSH
63277: CALL_OW 298
63281: PUSH
63282: LD_INT 6
63284: LESS
63285: IFFALSE 63384
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63287: LD_EXP 44
63291: PUSH
63292: LD_VAR 0 6
63296: ARRAY
63297: PUSH
63298: LD_VAR 0 5
63302: ARRAY
63303: PUSH
63304: LD_INT 1
63306: ARRAY
63307: PPUSH
63308: LD_EXP 44
63312: PUSH
63313: LD_VAR 0 6
63317: ARRAY
63318: PUSH
63319: LD_VAR 0 5
63323: ARRAY
63324: PUSH
63325: LD_INT 2
63327: ARRAY
63328: PPUSH
63329: LD_VAR 0 1
63333: PPUSH
63334: CALL_OW 255
63338: PPUSH
63339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63343: LD_ADDR_EXP 44
63347: PUSH
63348: LD_EXP 44
63352: PPUSH
63353: LD_VAR 0 6
63357: PPUSH
63358: LD_EXP 44
63362: PUSH
63363: LD_VAR 0 6
63367: ARRAY
63368: PPUSH
63369: LD_VAR 0 5
63373: PPUSH
63374: CALL_OW 3
63378: PPUSH
63379: CALL_OW 1
63383: ST_TO_ADDR
// end ; end ;
63384: GO 63222
63386: POP
63387: POP
// end ;
63388: LD_VAR 0 4
63392: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63393: LD_INT 0
63395: PPUSH
63396: PPUSH
63397: PPUSH
63398: PPUSH
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
63403: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63404: LD_VAR 0 1
63408: PPUSH
63409: CALL_OW 264
63413: PUSH
63414: LD_INT 81
63416: EQUAL
63417: NOT
63418: PUSH
63419: LD_VAR 0 1
63423: PUSH
63424: LD_EXP 43
63428: IN
63429: NOT
63430: OR
63431: IFFALSE 63435
// exit ;
63433: GO 63757
// index := GetElementIndex ( minersList , unit ) ;
63435: LD_ADDR_VAR 0 6
63439: PUSH
63440: LD_EXP 43
63444: PPUSH
63445: LD_VAR 0 1
63449: PPUSH
63450: CALL 21246 0 2
63454: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63455: LD_ADDR_VAR 0 8
63459: PUSH
63460: LD_EXP 45
63464: PUSH
63465: LD_EXP 44
63469: PUSH
63470: LD_VAR 0 6
63474: ARRAY
63475: MINUS
63476: ST_TO_ADDR
// if not minesFreeAmount then
63477: LD_VAR 0 8
63481: NOT
63482: IFFALSE 63486
// exit ;
63484: GO 63757
// tmp := [ ] ;
63486: LD_ADDR_VAR 0 7
63490: PUSH
63491: EMPTY
63492: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63493: LD_ADDR_VAR 0 5
63497: PUSH
63498: DOUBLE
63499: LD_INT 1
63501: DEC
63502: ST_TO_ADDR
63503: LD_VAR 0 8
63507: PUSH
63508: FOR_TO
63509: IFFALSE 63704
// begin _d := rand ( 0 , 5 ) ;
63511: LD_ADDR_VAR 0 11
63515: PUSH
63516: LD_INT 0
63518: PPUSH
63519: LD_INT 5
63521: PPUSH
63522: CALL_OW 12
63526: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63527: LD_ADDR_VAR 0 12
63531: PUSH
63532: LD_INT 2
63534: PPUSH
63535: LD_INT 6
63537: PPUSH
63538: CALL_OW 12
63542: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63543: LD_ADDR_VAR 0 9
63547: PUSH
63548: LD_VAR 0 2
63552: PPUSH
63553: LD_VAR 0 11
63557: PPUSH
63558: LD_VAR 0 12
63562: PPUSH
63563: CALL_OW 272
63567: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63568: LD_ADDR_VAR 0 10
63572: PUSH
63573: LD_VAR 0 3
63577: PPUSH
63578: LD_VAR 0 11
63582: PPUSH
63583: LD_VAR 0 12
63587: PPUSH
63588: CALL_OW 273
63592: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63593: LD_VAR 0 9
63597: PPUSH
63598: LD_VAR 0 10
63602: PPUSH
63603: CALL_OW 488
63607: PUSH
63608: LD_VAR 0 9
63612: PUSH
63613: LD_VAR 0 10
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_VAR 0 7
63626: IN
63627: NOT
63628: AND
63629: PUSH
63630: LD_VAR 0 9
63634: PPUSH
63635: LD_VAR 0 10
63639: PPUSH
63640: CALL_OW 458
63644: NOT
63645: AND
63646: IFFALSE 63688
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63648: LD_ADDR_VAR 0 7
63652: PUSH
63653: LD_VAR 0 7
63657: PPUSH
63658: LD_VAR 0 7
63662: PUSH
63663: LD_INT 1
63665: PLUS
63666: PPUSH
63667: LD_VAR 0 9
63671: PUSH
63672: LD_VAR 0 10
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PPUSH
63681: CALL_OW 1
63685: ST_TO_ADDR
63686: GO 63702
// i := i - 1 ;
63688: LD_ADDR_VAR 0 5
63692: PUSH
63693: LD_VAR 0 5
63697: PUSH
63698: LD_INT 1
63700: MINUS
63701: ST_TO_ADDR
// end ;
63702: GO 63508
63704: POP
63705: POP
// for i in tmp do
63706: LD_ADDR_VAR 0 5
63710: PUSH
63711: LD_VAR 0 7
63715: PUSH
63716: FOR_IN
63717: IFFALSE 63755
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63719: LD_VAR 0 1
63723: PPUSH
63724: LD_VAR 0 5
63728: PUSH
63729: LD_INT 1
63731: ARRAY
63732: PPUSH
63733: LD_VAR 0 5
63737: PUSH
63738: LD_INT 2
63740: ARRAY
63741: PPUSH
63742: CALL 62701 0 3
63746: NOT
63747: IFFALSE 63753
// exit ;
63749: POP
63750: POP
63751: GO 63757
63753: GO 63716
63755: POP
63756: POP
// end ;
63757: LD_VAR 0 4
63761: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63762: LD_INT 0
63764: PPUSH
63765: PPUSH
63766: PPUSH
63767: PPUSH
63768: PPUSH
63769: PPUSH
63770: PPUSH
// if not GetClass ( unit ) = class_sniper then
63771: LD_VAR 0 1
63775: PPUSH
63776: CALL_OW 257
63780: PUSH
63781: LD_INT 5
63783: EQUAL
63784: NOT
63785: IFFALSE 63789
// exit ;
63787: GO 64177
// dist := 8 ;
63789: LD_ADDR_VAR 0 5
63793: PUSH
63794: LD_INT 8
63796: ST_TO_ADDR
// viewRange := 12 ;
63797: LD_ADDR_VAR 0 7
63801: PUSH
63802: LD_INT 12
63804: ST_TO_ADDR
// side := GetSide ( unit ) ;
63805: LD_ADDR_VAR 0 6
63809: PUSH
63810: LD_VAR 0 1
63814: PPUSH
63815: CALL_OW 255
63819: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63820: LD_INT 61
63822: PPUSH
63823: LD_VAR 0 6
63827: PPUSH
63828: CALL_OW 321
63832: PUSH
63833: LD_INT 2
63835: EQUAL
63836: IFFALSE 63846
// viewRange := 16 ;
63838: LD_ADDR_VAR 0 7
63842: PUSH
63843: LD_INT 16
63845: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63846: LD_VAR 0 1
63850: PPUSH
63851: LD_VAR 0 2
63855: PPUSH
63856: LD_VAR 0 3
63860: PPUSH
63861: CALL_OW 297
63865: PUSH
63866: LD_VAR 0 5
63870: GREATER
63871: IFFALSE 63950
// begin ComMoveXY ( unit , x , y ) ;
63873: LD_VAR 0 1
63877: PPUSH
63878: LD_VAR 0 2
63882: PPUSH
63883: LD_VAR 0 3
63887: PPUSH
63888: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63892: LD_INT 35
63894: PPUSH
63895: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63899: LD_VAR 0 1
63903: PPUSH
63904: LD_VAR 0 2
63908: PPUSH
63909: LD_VAR 0 3
63913: PPUSH
63914: CALL 52987 0 3
63918: NOT
63919: IFFALSE 63923
// exit ;
63921: GO 64177
// until GetDistUnitXY ( unit , x , y ) < dist ;
63923: LD_VAR 0 1
63927: PPUSH
63928: LD_VAR 0 2
63932: PPUSH
63933: LD_VAR 0 3
63937: PPUSH
63938: CALL_OW 297
63942: PUSH
63943: LD_VAR 0 5
63947: LESS
63948: IFFALSE 63892
// end ; ComTurnXY ( unit , x , y ) ;
63950: LD_VAR 0 1
63954: PPUSH
63955: LD_VAR 0 2
63959: PPUSH
63960: LD_VAR 0 3
63964: PPUSH
63965: CALL_OW 118
// wait ( 5 ) ;
63969: LD_INT 5
63971: PPUSH
63972: CALL_OW 67
// _d := GetDir ( unit ) ;
63976: LD_ADDR_VAR 0 10
63980: PUSH
63981: LD_VAR 0 1
63985: PPUSH
63986: CALL_OW 254
63990: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63991: LD_ADDR_VAR 0 8
63995: PUSH
63996: LD_VAR 0 1
64000: PPUSH
64001: CALL_OW 250
64005: PPUSH
64006: LD_VAR 0 10
64010: PPUSH
64011: LD_VAR 0 5
64015: PPUSH
64016: CALL_OW 272
64020: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64021: LD_ADDR_VAR 0 9
64025: PUSH
64026: LD_VAR 0 1
64030: PPUSH
64031: CALL_OW 251
64035: PPUSH
64036: LD_VAR 0 10
64040: PPUSH
64041: LD_VAR 0 5
64045: PPUSH
64046: CALL_OW 273
64050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64051: LD_VAR 0 8
64055: PPUSH
64056: LD_VAR 0 9
64060: PPUSH
64061: CALL_OW 488
64065: NOT
64066: IFFALSE 64070
// exit ;
64068: GO 64177
// ComAnimCustom ( unit , 1 ) ;
64070: LD_VAR 0 1
64074: PPUSH
64075: LD_INT 1
64077: PPUSH
64078: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64082: LD_VAR 0 8
64086: PPUSH
64087: LD_VAR 0 9
64091: PPUSH
64092: LD_VAR 0 6
64096: PPUSH
64097: LD_VAR 0 7
64101: PPUSH
64102: CALL_OW 330
// repeat wait ( 1 ) ;
64106: LD_INT 1
64108: PPUSH
64109: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64113: LD_VAR 0 1
64117: PPUSH
64118: CALL_OW 316
64122: PUSH
64123: LD_VAR 0 1
64127: PPUSH
64128: CALL_OW 314
64132: OR
64133: PUSH
64134: LD_VAR 0 1
64138: PPUSH
64139: CALL_OW 302
64143: NOT
64144: OR
64145: PUSH
64146: LD_VAR 0 1
64150: PPUSH
64151: CALL_OW 301
64155: OR
64156: IFFALSE 64106
// RemoveSeeing ( _x , _y , side ) ;
64158: LD_VAR 0 8
64162: PPUSH
64163: LD_VAR 0 9
64167: PPUSH
64168: LD_VAR 0 6
64172: PPUSH
64173: CALL_OW 331
// end ; end_of_file
64177: LD_VAR 0 4
64181: RET
// export globalGameSaveCounter ; every 0 0$1 do
64182: GO 64184
64184: DISABLE
// begin enable ;
64185: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64186: LD_STRING updateTimer(
64188: PUSH
64189: LD_OWVAR 1
64193: STR
64194: PUSH
64195: LD_STRING );
64197: STR
64198: PPUSH
64199: CALL_OW 559
// end ;
64203: END
// every 0 0$1 do
64204: GO 64206
64206: DISABLE
// begin globalGameSaveCounter := 0 ;
64207: LD_ADDR_EXP 46
64211: PUSH
64212: LD_INT 0
64214: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64215: LD_STRING setGameSaveCounter(0)
64217: PPUSH
64218: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64222: LD_STRING initStreamRollete();
64224: PPUSH
64225: CALL_OW 559
// InitStreamMode ;
64229: CALL 65555 0 0
// DefineStreamItems ( false ) ;
64233: LD_INT 0
64235: PPUSH
64236: CALL 66019 0 1
// end ;
64240: END
// export function SOS_MapStart ( ) ; begin
64241: LD_INT 0
64243: PPUSH
// if streamModeActive then
64244: LD_EXP 47
64248: IFFALSE 64257
// DefineStreamItems ( true ) ;
64250: LD_INT 1
64252: PPUSH
64253: CALL 66019 0 1
// UpdateLuaVariables ( ) ;
64257: CALL 64274 0 0
// UpdateFactoryWaypoints ( ) ;
64261: CALL 78888 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64265: CALL 79145 0 0
// end ;
64269: LD_VAR 0 1
64273: RET
// function UpdateLuaVariables ( ) ; begin
64274: LD_INT 0
64276: PPUSH
// if globalGameSaveCounter then
64277: LD_EXP 46
64281: IFFALSE 64315
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64283: LD_ADDR_EXP 46
64287: PUSH
64288: LD_EXP 46
64292: PPUSH
64293: CALL 55551 0 1
64297: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64298: LD_STRING setGameSaveCounter(
64300: PUSH
64301: LD_EXP 46
64305: STR
64306: PUSH
64307: LD_STRING )
64309: STR
64310: PPUSH
64311: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64315: LD_STRING setGameDifficulty(
64317: PUSH
64318: LD_OWVAR 67
64322: STR
64323: PUSH
64324: LD_STRING )
64326: STR
64327: PPUSH
64328: CALL_OW 559
// end ;
64332: LD_VAR 0 1
64336: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64337: LD_INT 0
64339: PPUSH
// if p2 = stream_mode then
64340: LD_VAR 0 2
64344: PUSH
64345: LD_INT 100
64347: EQUAL
64348: IFFALSE 65351
// begin if not StreamModeActive then
64350: LD_EXP 47
64354: NOT
64355: IFFALSE 64365
// StreamModeActive := true ;
64357: LD_ADDR_EXP 47
64361: PUSH
64362: LD_INT 1
64364: ST_TO_ADDR
// if p3 = 0 then
64365: LD_VAR 0 3
64369: PUSH
64370: LD_INT 0
64372: EQUAL
64373: IFFALSE 64379
// InitStreamMode ;
64375: CALL 65555 0 0
// if p3 = 1 then
64379: LD_VAR 0 3
64383: PUSH
64384: LD_INT 1
64386: EQUAL
64387: IFFALSE 64397
// sRocket := true ;
64389: LD_ADDR_EXP 52
64393: PUSH
64394: LD_INT 1
64396: ST_TO_ADDR
// if p3 = 2 then
64397: LD_VAR 0 3
64401: PUSH
64402: LD_INT 2
64404: EQUAL
64405: IFFALSE 64415
// sSpeed := true ;
64407: LD_ADDR_EXP 51
64411: PUSH
64412: LD_INT 1
64414: ST_TO_ADDR
// if p3 = 3 then
64415: LD_VAR 0 3
64419: PUSH
64420: LD_INT 3
64422: EQUAL
64423: IFFALSE 64433
// sEngine := true ;
64425: LD_ADDR_EXP 53
64429: PUSH
64430: LD_INT 1
64432: ST_TO_ADDR
// if p3 = 4 then
64433: LD_VAR 0 3
64437: PUSH
64438: LD_INT 4
64440: EQUAL
64441: IFFALSE 64451
// sSpec := true ;
64443: LD_ADDR_EXP 50
64447: PUSH
64448: LD_INT 1
64450: ST_TO_ADDR
// if p3 = 5 then
64451: LD_VAR 0 3
64455: PUSH
64456: LD_INT 5
64458: EQUAL
64459: IFFALSE 64469
// sLevel := true ;
64461: LD_ADDR_EXP 54
64465: PUSH
64466: LD_INT 1
64468: ST_TO_ADDR
// if p3 = 6 then
64469: LD_VAR 0 3
64473: PUSH
64474: LD_INT 6
64476: EQUAL
64477: IFFALSE 64487
// sArmoury := true ;
64479: LD_ADDR_EXP 55
64483: PUSH
64484: LD_INT 1
64486: ST_TO_ADDR
// if p3 = 7 then
64487: LD_VAR 0 3
64491: PUSH
64492: LD_INT 7
64494: EQUAL
64495: IFFALSE 64505
// sRadar := true ;
64497: LD_ADDR_EXP 56
64501: PUSH
64502: LD_INT 1
64504: ST_TO_ADDR
// if p3 = 8 then
64505: LD_VAR 0 3
64509: PUSH
64510: LD_INT 8
64512: EQUAL
64513: IFFALSE 64523
// sBunker := true ;
64515: LD_ADDR_EXP 57
64519: PUSH
64520: LD_INT 1
64522: ST_TO_ADDR
// if p3 = 9 then
64523: LD_VAR 0 3
64527: PUSH
64528: LD_INT 9
64530: EQUAL
64531: IFFALSE 64541
// sHack := true ;
64533: LD_ADDR_EXP 58
64537: PUSH
64538: LD_INT 1
64540: ST_TO_ADDR
// if p3 = 10 then
64541: LD_VAR 0 3
64545: PUSH
64546: LD_INT 10
64548: EQUAL
64549: IFFALSE 64559
// sFire := true ;
64551: LD_ADDR_EXP 59
64555: PUSH
64556: LD_INT 1
64558: ST_TO_ADDR
// if p3 = 11 then
64559: LD_VAR 0 3
64563: PUSH
64564: LD_INT 11
64566: EQUAL
64567: IFFALSE 64577
// sRefresh := true ;
64569: LD_ADDR_EXP 60
64573: PUSH
64574: LD_INT 1
64576: ST_TO_ADDR
// if p3 = 12 then
64577: LD_VAR 0 3
64581: PUSH
64582: LD_INT 12
64584: EQUAL
64585: IFFALSE 64595
// sExp := true ;
64587: LD_ADDR_EXP 61
64591: PUSH
64592: LD_INT 1
64594: ST_TO_ADDR
// if p3 = 13 then
64595: LD_VAR 0 3
64599: PUSH
64600: LD_INT 13
64602: EQUAL
64603: IFFALSE 64613
// sDepot := true ;
64605: LD_ADDR_EXP 62
64609: PUSH
64610: LD_INT 1
64612: ST_TO_ADDR
// if p3 = 14 then
64613: LD_VAR 0 3
64617: PUSH
64618: LD_INT 14
64620: EQUAL
64621: IFFALSE 64631
// sFlag := true ;
64623: LD_ADDR_EXP 63
64627: PUSH
64628: LD_INT 1
64630: ST_TO_ADDR
// if p3 = 15 then
64631: LD_VAR 0 3
64635: PUSH
64636: LD_INT 15
64638: EQUAL
64639: IFFALSE 64649
// sKamikadze := true ;
64641: LD_ADDR_EXP 71
64645: PUSH
64646: LD_INT 1
64648: ST_TO_ADDR
// if p3 = 16 then
64649: LD_VAR 0 3
64653: PUSH
64654: LD_INT 16
64656: EQUAL
64657: IFFALSE 64667
// sTroll := true ;
64659: LD_ADDR_EXP 72
64663: PUSH
64664: LD_INT 1
64666: ST_TO_ADDR
// if p3 = 17 then
64667: LD_VAR 0 3
64671: PUSH
64672: LD_INT 17
64674: EQUAL
64675: IFFALSE 64685
// sSlow := true ;
64677: LD_ADDR_EXP 73
64681: PUSH
64682: LD_INT 1
64684: ST_TO_ADDR
// if p3 = 18 then
64685: LD_VAR 0 3
64689: PUSH
64690: LD_INT 18
64692: EQUAL
64693: IFFALSE 64703
// sLack := true ;
64695: LD_ADDR_EXP 74
64699: PUSH
64700: LD_INT 1
64702: ST_TO_ADDR
// if p3 = 19 then
64703: LD_VAR 0 3
64707: PUSH
64708: LD_INT 19
64710: EQUAL
64711: IFFALSE 64721
// sTank := true ;
64713: LD_ADDR_EXP 76
64717: PUSH
64718: LD_INT 1
64720: ST_TO_ADDR
// if p3 = 20 then
64721: LD_VAR 0 3
64725: PUSH
64726: LD_INT 20
64728: EQUAL
64729: IFFALSE 64739
// sRemote := true ;
64731: LD_ADDR_EXP 77
64735: PUSH
64736: LD_INT 1
64738: ST_TO_ADDR
// if p3 = 21 then
64739: LD_VAR 0 3
64743: PUSH
64744: LD_INT 21
64746: EQUAL
64747: IFFALSE 64757
// sPowell := true ;
64749: LD_ADDR_EXP 78
64753: PUSH
64754: LD_INT 1
64756: ST_TO_ADDR
// if p3 = 22 then
64757: LD_VAR 0 3
64761: PUSH
64762: LD_INT 22
64764: EQUAL
64765: IFFALSE 64775
// sTeleport := true ;
64767: LD_ADDR_EXP 81
64771: PUSH
64772: LD_INT 1
64774: ST_TO_ADDR
// if p3 = 23 then
64775: LD_VAR 0 3
64779: PUSH
64780: LD_INT 23
64782: EQUAL
64783: IFFALSE 64793
// sOilTower := true ;
64785: LD_ADDR_EXP 83
64789: PUSH
64790: LD_INT 1
64792: ST_TO_ADDR
// if p3 = 24 then
64793: LD_VAR 0 3
64797: PUSH
64798: LD_INT 24
64800: EQUAL
64801: IFFALSE 64811
// sShovel := true ;
64803: LD_ADDR_EXP 84
64807: PUSH
64808: LD_INT 1
64810: ST_TO_ADDR
// if p3 = 25 then
64811: LD_VAR 0 3
64815: PUSH
64816: LD_INT 25
64818: EQUAL
64819: IFFALSE 64829
// sSheik := true ;
64821: LD_ADDR_EXP 85
64825: PUSH
64826: LD_INT 1
64828: ST_TO_ADDR
// if p3 = 26 then
64829: LD_VAR 0 3
64833: PUSH
64834: LD_INT 26
64836: EQUAL
64837: IFFALSE 64847
// sEarthquake := true ;
64839: LD_ADDR_EXP 87
64843: PUSH
64844: LD_INT 1
64846: ST_TO_ADDR
// if p3 = 27 then
64847: LD_VAR 0 3
64851: PUSH
64852: LD_INT 27
64854: EQUAL
64855: IFFALSE 64865
// sAI := true ;
64857: LD_ADDR_EXP 88
64861: PUSH
64862: LD_INT 1
64864: ST_TO_ADDR
// if p3 = 28 then
64865: LD_VAR 0 3
64869: PUSH
64870: LD_INT 28
64872: EQUAL
64873: IFFALSE 64883
// sCargo := true ;
64875: LD_ADDR_EXP 91
64879: PUSH
64880: LD_INT 1
64882: ST_TO_ADDR
// if p3 = 29 then
64883: LD_VAR 0 3
64887: PUSH
64888: LD_INT 29
64890: EQUAL
64891: IFFALSE 64901
// sDLaser := true ;
64893: LD_ADDR_EXP 92
64897: PUSH
64898: LD_INT 1
64900: ST_TO_ADDR
// if p3 = 30 then
64901: LD_VAR 0 3
64905: PUSH
64906: LD_INT 30
64908: EQUAL
64909: IFFALSE 64919
// sExchange := true ;
64911: LD_ADDR_EXP 93
64915: PUSH
64916: LD_INT 1
64918: ST_TO_ADDR
// if p3 = 31 then
64919: LD_VAR 0 3
64923: PUSH
64924: LD_INT 31
64926: EQUAL
64927: IFFALSE 64937
// sFac := true ;
64929: LD_ADDR_EXP 94
64933: PUSH
64934: LD_INT 1
64936: ST_TO_ADDR
// if p3 = 32 then
64937: LD_VAR 0 3
64941: PUSH
64942: LD_INT 32
64944: EQUAL
64945: IFFALSE 64955
// sPower := true ;
64947: LD_ADDR_EXP 95
64951: PUSH
64952: LD_INT 1
64954: ST_TO_ADDR
// if p3 = 33 then
64955: LD_VAR 0 3
64959: PUSH
64960: LD_INT 33
64962: EQUAL
64963: IFFALSE 64973
// sRandom := true ;
64965: LD_ADDR_EXP 96
64969: PUSH
64970: LD_INT 1
64972: ST_TO_ADDR
// if p3 = 34 then
64973: LD_VAR 0 3
64977: PUSH
64978: LD_INT 34
64980: EQUAL
64981: IFFALSE 64991
// sShield := true ;
64983: LD_ADDR_EXP 97
64987: PUSH
64988: LD_INT 1
64990: ST_TO_ADDR
// if p3 = 35 then
64991: LD_VAR 0 3
64995: PUSH
64996: LD_INT 35
64998: EQUAL
64999: IFFALSE 65009
// sTime := true ;
65001: LD_ADDR_EXP 98
65005: PUSH
65006: LD_INT 1
65008: ST_TO_ADDR
// if p3 = 36 then
65009: LD_VAR 0 3
65013: PUSH
65014: LD_INT 36
65016: EQUAL
65017: IFFALSE 65027
// sTools := true ;
65019: LD_ADDR_EXP 99
65023: PUSH
65024: LD_INT 1
65026: ST_TO_ADDR
// if p3 = 101 then
65027: LD_VAR 0 3
65031: PUSH
65032: LD_INT 101
65034: EQUAL
65035: IFFALSE 65045
// sSold := true ;
65037: LD_ADDR_EXP 64
65041: PUSH
65042: LD_INT 1
65044: ST_TO_ADDR
// if p3 = 102 then
65045: LD_VAR 0 3
65049: PUSH
65050: LD_INT 102
65052: EQUAL
65053: IFFALSE 65063
// sDiff := true ;
65055: LD_ADDR_EXP 65
65059: PUSH
65060: LD_INT 1
65062: ST_TO_ADDR
// if p3 = 103 then
65063: LD_VAR 0 3
65067: PUSH
65068: LD_INT 103
65070: EQUAL
65071: IFFALSE 65081
// sFog := true ;
65073: LD_ADDR_EXP 68
65077: PUSH
65078: LD_INT 1
65080: ST_TO_ADDR
// if p3 = 104 then
65081: LD_VAR 0 3
65085: PUSH
65086: LD_INT 104
65088: EQUAL
65089: IFFALSE 65099
// sReset := true ;
65091: LD_ADDR_EXP 69
65095: PUSH
65096: LD_INT 1
65098: ST_TO_ADDR
// if p3 = 105 then
65099: LD_VAR 0 3
65103: PUSH
65104: LD_INT 105
65106: EQUAL
65107: IFFALSE 65117
// sSun := true ;
65109: LD_ADDR_EXP 70
65113: PUSH
65114: LD_INT 1
65116: ST_TO_ADDR
// if p3 = 106 then
65117: LD_VAR 0 3
65121: PUSH
65122: LD_INT 106
65124: EQUAL
65125: IFFALSE 65135
// sTiger := true ;
65127: LD_ADDR_EXP 66
65131: PUSH
65132: LD_INT 1
65134: ST_TO_ADDR
// if p3 = 107 then
65135: LD_VAR 0 3
65139: PUSH
65140: LD_INT 107
65142: EQUAL
65143: IFFALSE 65153
// sBomb := true ;
65145: LD_ADDR_EXP 67
65149: PUSH
65150: LD_INT 1
65152: ST_TO_ADDR
// if p3 = 108 then
65153: LD_VAR 0 3
65157: PUSH
65158: LD_INT 108
65160: EQUAL
65161: IFFALSE 65171
// sWound := true ;
65163: LD_ADDR_EXP 75
65167: PUSH
65168: LD_INT 1
65170: ST_TO_ADDR
// if p3 = 109 then
65171: LD_VAR 0 3
65175: PUSH
65176: LD_INT 109
65178: EQUAL
65179: IFFALSE 65189
// sBetray := true ;
65181: LD_ADDR_EXP 79
65185: PUSH
65186: LD_INT 1
65188: ST_TO_ADDR
// if p3 = 110 then
65189: LD_VAR 0 3
65193: PUSH
65194: LD_INT 110
65196: EQUAL
65197: IFFALSE 65207
// sContamin := true ;
65199: LD_ADDR_EXP 80
65203: PUSH
65204: LD_INT 1
65206: ST_TO_ADDR
// if p3 = 111 then
65207: LD_VAR 0 3
65211: PUSH
65212: LD_INT 111
65214: EQUAL
65215: IFFALSE 65225
// sOil := true ;
65217: LD_ADDR_EXP 82
65221: PUSH
65222: LD_INT 1
65224: ST_TO_ADDR
// if p3 = 112 then
65225: LD_VAR 0 3
65229: PUSH
65230: LD_INT 112
65232: EQUAL
65233: IFFALSE 65243
// sStu := true ;
65235: LD_ADDR_EXP 86
65239: PUSH
65240: LD_INT 1
65242: ST_TO_ADDR
// if p3 = 113 then
65243: LD_VAR 0 3
65247: PUSH
65248: LD_INT 113
65250: EQUAL
65251: IFFALSE 65261
// sBazooka := true ;
65253: LD_ADDR_EXP 89
65257: PUSH
65258: LD_INT 1
65260: ST_TO_ADDR
// if p3 = 114 then
65261: LD_VAR 0 3
65265: PUSH
65266: LD_INT 114
65268: EQUAL
65269: IFFALSE 65279
// sMortar := true ;
65271: LD_ADDR_EXP 90
65275: PUSH
65276: LD_INT 1
65278: ST_TO_ADDR
// if p3 = 115 then
65279: LD_VAR 0 3
65283: PUSH
65284: LD_INT 115
65286: EQUAL
65287: IFFALSE 65297
// sRanger := true ;
65289: LD_ADDR_EXP 100
65293: PUSH
65294: LD_INT 1
65296: ST_TO_ADDR
// if p3 = 116 then
65297: LD_VAR 0 3
65301: PUSH
65302: LD_INT 116
65304: EQUAL
65305: IFFALSE 65315
// sComputer := true ;
65307: LD_ADDR_EXP 101
65311: PUSH
65312: LD_INT 1
65314: ST_TO_ADDR
// if p3 = 117 then
65315: LD_VAR 0 3
65319: PUSH
65320: LD_INT 117
65322: EQUAL
65323: IFFALSE 65333
// s30 := true ;
65325: LD_ADDR_EXP 102
65329: PUSH
65330: LD_INT 1
65332: ST_TO_ADDR
// if p3 = 118 then
65333: LD_VAR 0 3
65337: PUSH
65338: LD_INT 118
65340: EQUAL
65341: IFFALSE 65351
// s60 := true ;
65343: LD_ADDR_EXP 103
65347: PUSH
65348: LD_INT 1
65350: ST_TO_ADDR
// end ; if p2 = hack_mode then
65351: LD_VAR 0 2
65355: PUSH
65356: LD_INT 101
65358: EQUAL
65359: IFFALSE 65487
// begin case p3 of 1 :
65361: LD_VAR 0 3
65365: PUSH
65366: LD_INT 1
65368: DOUBLE
65369: EQUAL
65370: IFTRUE 65374
65372: GO 65381
65374: POP
// hHackUnlimitedResources ; 2 :
65375: CALL 77634 0 0
65379: GO 65487
65381: LD_INT 2
65383: DOUBLE
65384: EQUAL
65385: IFTRUE 65389
65387: GO 65396
65389: POP
// hHackSetLevel10 ; 3 :
65390: CALL 77767 0 0
65394: GO 65487
65396: LD_INT 3
65398: DOUBLE
65399: EQUAL
65400: IFTRUE 65404
65402: GO 65411
65404: POP
// hHackSetLevel10YourUnits ; 4 :
65405: CALL 77852 0 0
65409: GO 65487
65411: LD_INT 4
65413: DOUBLE
65414: EQUAL
65415: IFTRUE 65419
65417: GO 65426
65419: POP
// hHackInvincible ; 5 :
65420: CALL 78300 0 0
65424: GO 65487
65426: LD_INT 5
65428: DOUBLE
65429: EQUAL
65430: IFTRUE 65434
65432: GO 65441
65434: POP
// hHackInvisible ; 6 :
65435: CALL 78411 0 0
65439: GO 65487
65441: LD_INT 6
65443: DOUBLE
65444: EQUAL
65445: IFTRUE 65449
65447: GO 65456
65449: POP
// hHackChangeYourSide ; 7 :
65450: CALL 78468 0 0
65454: GO 65487
65456: LD_INT 7
65458: DOUBLE
65459: EQUAL
65460: IFTRUE 65464
65462: GO 65471
65464: POP
// hHackChangeUnitSide ; 8 :
65465: CALL 78510 0 0
65469: GO 65487
65471: LD_INT 8
65473: DOUBLE
65474: EQUAL
65475: IFTRUE 65479
65477: GO 65486
65479: POP
// hHackFog ; end ;
65480: CALL 78611 0 0
65484: GO 65487
65486: POP
// end ; if p2 = game_save_mode then
65487: LD_VAR 0 2
65491: PUSH
65492: LD_INT 102
65494: EQUAL
65495: IFFALSE 65550
// begin if p3 = 1 then
65497: LD_VAR 0 3
65501: PUSH
65502: LD_INT 1
65504: EQUAL
65505: IFFALSE 65517
// globalGameSaveCounter := p4 ;
65507: LD_ADDR_EXP 46
65511: PUSH
65512: LD_VAR 0 4
65516: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65517: LD_VAR 0 3
65521: PUSH
65522: LD_INT 2
65524: EQUAL
65525: PUSH
65526: LD_EXP 46
65530: AND
65531: IFFALSE 65550
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65533: LD_STRING setGameSaveCounter(
65535: PUSH
65536: LD_EXP 46
65540: STR
65541: PUSH
65542: LD_STRING )
65544: STR
65545: PPUSH
65546: CALL_OW 559
// end ; end ;
65550: LD_VAR 0 7
65554: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65555: LD_INT 0
65557: PPUSH
// streamModeActive := false ;
65558: LD_ADDR_EXP 47
65562: PUSH
65563: LD_INT 0
65565: ST_TO_ADDR
// normalCounter := 36 ;
65566: LD_ADDR_EXP 48
65570: PUSH
65571: LD_INT 36
65573: ST_TO_ADDR
// hardcoreCounter := 18 ;
65574: LD_ADDR_EXP 49
65578: PUSH
65579: LD_INT 18
65581: ST_TO_ADDR
// sRocket := false ;
65582: LD_ADDR_EXP 52
65586: PUSH
65587: LD_INT 0
65589: ST_TO_ADDR
// sSpeed := false ;
65590: LD_ADDR_EXP 51
65594: PUSH
65595: LD_INT 0
65597: ST_TO_ADDR
// sEngine := false ;
65598: LD_ADDR_EXP 53
65602: PUSH
65603: LD_INT 0
65605: ST_TO_ADDR
// sSpec := false ;
65606: LD_ADDR_EXP 50
65610: PUSH
65611: LD_INT 0
65613: ST_TO_ADDR
// sLevel := false ;
65614: LD_ADDR_EXP 54
65618: PUSH
65619: LD_INT 0
65621: ST_TO_ADDR
// sArmoury := false ;
65622: LD_ADDR_EXP 55
65626: PUSH
65627: LD_INT 0
65629: ST_TO_ADDR
// sRadar := false ;
65630: LD_ADDR_EXP 56
65634: PUSH
65635: LD_INT 0
65637: ST_TO_ADDR
// sBunker := false ;
65638: LD_ADDR_EXP 57
65642: PUSH
65643: LD_INT 0
65645: ST_TO_ADDR
// sHack := false ;
65646: LD_ADDR_EXP 58
65650: PUSH
65651: LD_INT 0
65653: ST_TO_ADDR
// sFire := false ;
65654: LD_ADDR_EXP 59
65658: PUSH
65659: LD_INT 0
65661: ST_TO_ADDR
// sRefresh := false ;
65662: LD_ADDR_EXP 60
65666: PUSH
65667: LD_INT 0
65669: ST_TO_ADDR
// sExp := false ;
65670: LD_ADDR_EXP 61
65674: PUSH
65675: LD_INT 0
65677: ST_TO_ADDR
// sDepot := false ;
65678: LD_ADDR_EXP 62
65682: PUSH
65683: LD_INT 0
65685: ST_TO_ADDR
// sFlag := false ;
65686: LD_ADDR_EXP 63
65690: PUSH
65691: LD_INT 0
65693: ST_TO_ADDR
// sKamikadze := false ;
65694: LD_ADDR_EXP 71
65698: PUSH
65699: LD_INT 0
65701: ST_TO_ADDR
// sTroll := false ;
65702: LD_ADDR_EXP 72
65706: PUSH
65707: LD_INT 0
65709: ST_TO_ADDR
// sSlow := false ;
65710: LD_ADDR_EXP 73
65714: PUSH
65715: LD_INT 0
65717: ST_TO_ADDR
// sLack := false ;
65718: LD_ADDR_EXP 74
65722: PUSH
65723: LD_INT 0
65725: ST_TO_ADDR
// sTank := false ;
65726: LD_ADDR_EXP 76
65730: PUSH
65731: LD_INT 0
65733: ST_TO_ADDR
// sRemote := false ;
65734: LD_ADDR_EXP 77
65738: PUSH
65739: LD_INT 0
65741: ST_TO_ADDR
// sPowell := false ;
65742: LD_ADDR_EXP 78
65746: PUSH
65747: LD_INT 0
65749: ST_TO_ADDR
// sTeleport := false ;
65750: LD_ADDR_EXP 81
65754: PUSH
65755: LD_INT 0
65757: ST_TO_ADDR
// sOilTower := false ;
65758: LD_ADDR_EXP 83
65762: PUSH
65763: LD_INT 0
65765: ST_TO_ADDR
// sShovel := false ;
65766: LD_ADDR_EXP 84
65770: PUSH
65771: LD_INT 0
65773: ST_TO_ADDR
// sSheik := false ;
65774: LD_ADDR_EXP 85
65778: PUSH
65779: LD_INT 0
65781: ST_TO_ADDR
// sEarthquake := false ;
65782: LD_ADDR_EXP 87
65786: PUSH
65787: LD_INT 0
65789: ST_TO_ADDR
// sAI := false ;
65790: LD_ADDR_EXP 88
65794: PUSH
65795: LD_INT 0
65797: ST_TO_ADDR
// sCargo := false ;
65798: LD_ADDR_EXP 91
65802: PUSH
65803: LD_INT 0
65805: ST_TO_ADDR
// sDLaser := false ;
65806: LD_ADDR_EXP 92
65810: PUSH
65811: LD_INT 0
65813: ST_TO_ADDR
// sExchange := false ;
65814: LD_ADDR_EXP 93
65818: PUSH
65819: LD_INT 0
65821: ST_TO_ADDR
// sFac := false ;
65822: LD_ADDR_EXP 94
65826: PUSH
65827: LD_INT 0
65829: ST_TO_ADDR
// sPower := false ;
65830: LD_ADDR_EXP 95
65834: PUSH
65835: LD_INT 0
65837: ST_TO_ADDR
// sRandom := false ;
65838: LD_ADDR_EXP 96
65842: PUSH
65843: LD_INT 0
65845: ST_TO_ADDR
// sShield := false ;
65846: LD_ADDR_EXP 97
65850: PUSH
65851: LD_INT 0
65853: ST_TO_ADDR
// sTime := false ;
65854: LD_ADDR_EXP 98
65858: PUSH
65859: LD_INT 0
65861: ST_TO_ADDR
// sTools := false ;
65862: LD_ADDR_EXP 99
65866: PUSH
65867: LD_INT 0
65869: ST_TO_ADDR
// sSold := false ;
65870: LD_ADDR_EXP 64
65874: PUSH
65875: LD_INT 0
65877: ST_TO_ADDR
// sDiff := false ;
65878: LD_ADDR_EXP 65
65882: PUSH
65883: LD_INT 0
65885: ST_TO_ADDR
// sFog := false ;
65886: LD_ADDR_EXP 68
65890: PUSH
65891: LD_INT 0
65893: ST_TO_ADDR
// sReset := false ;
65894: LD_ADDR_EXP 69
65898: PUSH
65899: LD_INT 0
65901: ST_TO_ADDR
// sSun := false ;
65902: LD_ADDR_EXP 70
65906: PUSH
65907: LD_INT 0
65909: ST_TO_ADDR
// sTiger := false ;
65910: LD_ADDR_EXP 66
65914: PUSH
65915: LD_INT 0
65917: ST_TO_ADDR
// sBomb := false ;
65918: LD_ADDR_EXP 67
65922: PUSH
65923: LD_INT 0
65925: ST_TO_ADDR
// sWound := false ;
65926: LD_ADDR_EXP 75
65930: PUSH
65931: LD_INT 0
65933: ST_TO_ADDR
// sBetray := false ;
65934: LD_ADDR_EXP 79
65938: PUSH
65939: LD_INT 0
65941: ST_TO_ADDR
// sContamin := false ;
65942: LD_ADDR_EXP 80
65946: PUSH
65947: LD_INT 0
65949: ST_TO_ADDR
// sOil := false ;
65950: LD_ADDR_EXP 82
65954: PUSH
65955: LD_INT 0
65957: ST_TO_ADDR
// sStu := false ;
65958: LD_ADDR_EXP 86
65962: PUSH
65963: LD_INT 0
65965: ST_TO_ADDR
// sBazooka := false ;
65966: LD_ADDR_EXP 89
65970: PUSH
65971: LD_INT 0
65973: ST_TO_ADDR
// sMortar := false ;
65974: LD_ADDR_EXP 90
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// sRanger := false ;
65982: LD_ADDR_EXP 100
65986: PUSH
65987: LD_INT 0
65989: ST_TO_ADDR
// sComputer := false ;
65990: LD_ADDR_EXP 101
65994: PUSH
65995: LD_INT 0
65997: ST_TO_ADDR
// s30 := false ;
65998: LD_ADDR_EXP 102
66002: PUSH
66003: LD_INT 0
66005: ST_TO_ADDR
// s60 := false ;
66006: LD_ADDR_EXP 103
66010: PUSH
66011: LD_INT 0
66013: ST_TO_ADDR
// end ;
66014: LD_VAR 0 1
66018: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66019: LD_INT 0
66021: PPUSH
66022: PPUSH
66023: PPUSH
66024: PPUSH
66025: PPUSH
66026: PPUSH
66027: PPUSH
// result := [ ] ;
66028: LD_ADDR_VAR 0 2
66032: PUSH
66033: EMPTY
66034: ST_TO_ADDR
// if campaign_id = 1 then
66035: LD_OWVAR 69
66039: PUSH
66040: LD_INT 1
66042: EQUAL
66043: IFFALSE 69209
// begin case mission_number of 1 :
66045: LD_OWVAR 70
66049: PUSH
66050: LD_INT 1
66052: DOUBLE
66053: EQUAL
66054: IFTRUE 66058
66056: GO 66134
66058: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66059: LD_ADDR_VAR 0 2
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: LD_INT 4
66069: PUSH
66070: LD_INT 11
66072: PUSH
66073: LD_INT 12
66075: PUSH
66076: LD_INT 15
66078: PUSH
66079: LD_INT 16
66081: PUSH
66082: LD_INT 22
66084: PUSH
66085: LD_INT 23
66087: PUSH
66088: LD_INT 26
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 101
66104: PUSH
66105: LD_INT 102
66107: PUSH
66108: LD_INT 106
66110: PUSH
66111: LD_INT 116
66113: PUSH
66114: LD_INT 117
66116: PUSH
66117: LD_INT 118
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: ST_TO_ADDR
66132: GO 69207
66134: LD_INT 2
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66142
66140: GO 66226
66142: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66143: LD_ADDR_VAR 0 2
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: LD_INT 4
66153: PUSH
66154: LD_INT 11
66156: PUSH
66157: LD_INT 12
66159: PUSH
66160: LD_INT 15
66162: PUSH
66163: LD_INT 16
66165: PUSH
66166: LD_INT 22
66168: PUSH
66169: LD_INT 23
66171: PUSH
66172: LD_INT 26
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 101
66188: PUSH
66189: LD_INT 102
66191: PUSH
66192: LD_INT 105
66194: PUSH
66195: LD_INT 106
66197: PUSH
66198: LD_INT 108
66200: PUSH
66201: LD_INT 116
66203: PUSH
66204: LD_INT 117
66206: PUSH
66207: LD_INT 118
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: ST_TO_ADDR
66224: GO 69207
66226: LD_INT 3
66228: DOUBLE
66229: EQUAL
66230: IFTRUE 66234
66232: GO 66322
66234: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66235: LD_ADDR_VAR 0 2
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 4
66245: PUSH
66246: LD_INT 5
66248: PUSH
66249: LD_INT 11
66251: PUSH
66252: LD_INT 12
66254: PUSH
66255: LD_INT 15
66257: PUSH
66258: LD_INT 16
66260: PUSH
66261: LD_INT 22
66263: PUSH
66264: LD_INT 26
66266: PUSH
66267: LD_INT 36
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 101
66284: PUSH
66285: LD_INT 102
66287: PUSH
66288: LD_INT 105
66290: PUSH
66291: LD_INT 106
66293: PUSH
66294: LD_INT 108
66296: PUSH
66297: LD_INT 116
66299: PUSH
66300: LD_INT 117
66302: PUSH
66303: LD_INT 118
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: ST_TO_ADDR
66320: GO 69207
66322: LD_INT 4
66324: DOUBLE
66325: EQUAL
66326: IFTRUE 66330
66328: GO 66426
66330: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66331: LD_ADDR_VAR 0 2
66335: PUSH
66336: LD_INT 2
66338: PUSH
66339: LD_INT 4
66341: PUSH
66342: LD_INT 5
66344: PUSH
66345: LD_INT 8
66347: PUSH
66348: LD_INT 11
66350: PUSH
66351: LD_INT 12
66353: PUSH
66354: LD_INT 15
66356: PUSH
66357: LD_INT 16
66359: PUSH
66360: LD_INT 22
66362: PUSH
66363: LD_INT 23
66365: PUSH
66366: LD_INT 26
66368: PUSH
66369: LD_INT 36
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 101
66388: PUSH
66389: LD_INT 102
66391: PUSH
66392: LD_INT 105
66394: PUSH
66395: LD_INT 106
66397: PUSH
66398: LD_INT 108
66400: PUSH
66401: LD_INT 116
66403: PUSH
66404: LD_INT 117
66406: PUSH
66407: LD_INT 118
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: ST_TO_ADDR
66424: GO 69207
66426: LD_INT 5
66428: DOUBLE
66429: EQUAL
66430: IFTRUE 66434
66432: GO 66546
66434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66435: LD_ADDR_VAR 0 2
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 4
66445: PUSH
66446: LD_INT 5
66448: PUSH
66449: LD_INT 6
66451: PUSH
66452: LD_INT 8
66454: PUSH
66455: LD_INT 11
66457: PUSH
66458: LD_INT 12
66460: PUSH
66461: LD_INT 15
66463: PUSH
66464: LD_INT 16
66466: PUSH
66467: LD_INT 22
66469: PUSH
66470: LD_INT 23
66472: PUSH
66473: LD_INT 25
66475: PUSH
66476: LD_INT 26
66478: PUSH
66479: LD_INT 36
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 101
66500: PUSH
66501: LD_INT 102
66503: PUSH
66504: LD_INT 105
66506: PUSH
66507: LD_INT 106
66509: PUSH
66510: LD_INT 108
66512: PUSH
66513: LD_INT 109
66515: PUSH
66516: LD_INT 112
66518: PUSH
66519: LD_INT 116
66521: PUSH
66522: LD_INT 117
66524: PUSH
66525: LD_INT 118
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: ST_TO_ADDR
66544: GO 69207
66546: LD_INT 6
66548: DOUBLE
66549: EQUAL
66550: IFTRUE 66554
66552: GO 66686
66554: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66555: LD_ADDR_VAR 0 2
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: LD_INT 6
66571: PUSH
66572: LD_INT 8
66574: PUSH
66575: LD_INT 11
66577: PUSH
66578: LD_INT 12
66580: PUSH
66581: LD_INT 15
66583: PUSH
66584: LD_INT 16
66586: PUSH
66587: LD_INT 20
66589: PUSH
66590: LD_INT 21
66592: PUSH
66593: LD_INT 22
66595: PUSH
66596: LD_INT 23
66598: PUSH
66599: LD_INT 25
66601: PUSH
66602: LD_INT 26
66604: PUSH
66605: LD_INT 30
66607: PUSH
66608: LD_INT 31
66610: PUSH
66611: LD_INT 32
66613: PUSH
66614: LD_INT 36
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 101
66640: PUSH
66641: LD_INT 102
66643: PUSH
66644: LD_INT 105
66646: PUSH
66647: LD_INT 106
66649: PUSH
66650: LD_INT 108
66652: PUSH
66653: LD_INT 109
66655: PUSH
66656: LD_INT 112
66658: PUSH
66659: LD_INT 116
66661: PUSH
66662: LD_INT 117
66664: PUSH
66665: LD_INT 118
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: ST_TO_ADDR
66684: GO 69207
66686: LD_INT 7
66688: DOUBLE
66689: EQUAL
66690: IFTRUE 66694
66692: GO 66806
66694: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66695: LD_ADDR_VAR 0 2
66699: PUSH
66700: LD_INT 2
66702: PUSH
66703: LD_INT 4
66705: PUSH
66706: LD_INT 5
66708: PUSH
66709: LD_INT 7
66711: PUSH
66712: LD_INT 11
66714: PUSH
66715: LD_INT 12
66717: PUSH
66718: LD_INT 15
66720: PUSH
66721: LD_INT 16
66723: PUSH
66724: LD_INT 20
66726: PUSH
66727: LD_INT 21
66729: PUSH
66730: LD_INT 22
66732: PUSH
66733: LD_INT 23
66735: PUSH
66736: LD_INT 25
66738: PUSH
66739: LD_INT 26
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 101
66760: PUSH
66761: LD_INT 102
66763: PUSH
66764: LD_INT 103
66766: PUSH
66767: LD_INT 105
66769: PUSH
66770: LD_INT 106
66772: PUSH
66773: LD_INT 108
66775: PUSH
66776: LD_INT 112
66778: PUSH
66779: LD_INT 116
66781: PUSH
66782: LD_INT 117
66784: PUSH
66785: LD_INT 118
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: ST_TO_ADDR
66804: GO 69207
66806: LD_INT 8
66808: DOUBLE
66809: EQUAL
66810: IFTRUE 66814
66812: GO 66954
66814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66815: LD_ADDR_VAR 0 2
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: LD_INT 4
66825: PUSH
66826: LD_INT 5
66828: PUSH
66829: LD_INT 6
66831: PUSH
66832: LD_INT 7
66834: PUSH
66835: LD_INT 8
66837: PUSH
66838: LD_INT 11
66840: PUSH
66841: LD_INT 12
66843: PUSH
66844: LD_INT 15
66846: PUSH
66847: LD_INT 16
66849: PUSH
66850: LD_INT 20
66852: PUSH
66853: LD_INT 21
66855: PUSH
66856: LD_INT 22
66858: PUSH
66859: LD_INT 23
66861: PUSH
66862: LD_INT 25
66864: PUSH
66865: LD_INT 26
66867: PUSH
66868: LD_INT 30
66870: PUSH
66871: LD_INT 31
66873: PUSH
66874: LD_INT 32
66876: PUSH
66877: LD_INT 36
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 101
66904: PUSH
66905: LD_INT 102
66907: PUSH
66908: LD_INT 103
66910: PUSH
66911: LD_INT 105
66913: PUSH
66914: LD_INT 106
66916: PUSH
66917: LD_INT 108
66919: PUSH
66920: LD_INT 109
66922: PUSH
66923: LD_INT 112
66925: PUSH
66926: LD_INT 116
66928: PUSH
66929: LD_INT 117
66931: PUSH
66932: LD_INT 118
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: ST_TO_ADDR
66952: GO 69207
66954: LD_INT 9
66956: DOUBLE
66957: EQUAL
66958: IFTRUE 66962
66960: GO 67110
66962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66963: LD_ADDR_VAR 0 2
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: LD_INT 5
66976: PUSH
66977: LD_INT 6
66979: PUSH
66980: LD_INT 7
66982: PUSH
66983: LD_INT 8
66985: PUSH
66986: LD_INT 11
66988: PUSH
66989: LD_INT 12
66991: PUSH
66992: LD_INT 15
66994: PUSH
66995: LD_INT 16
66997: PUSH
66998: LD_INT 20
67000: PUSH
67001: LD_INT 21
67003: PUSH
67004: LD_INT 22
67006: PUSH
67007: LD_INT 23
67009: PUSH
67010: LD_INT 25
67012: PUSH
67013: LD_INT 26
67015: PUSH
67016: LD_INT 28
67018: PUSH
67019: LD_INT 30
67021: PUSH
67022: LD_INT 31
67024: PUSH
67025: LD_INT 32
67027: PUSH
67028: LD_INT 36
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 101
67056: PUSH
67057: LD_INT 102
67059: PUSH
67060: LD_INT 103
67062: PUSH
67063: LD_INT 105
67065: PUSH
67066: LD_INT 106
67068: PUSH
67069: LD_INT 108
67071: PUSH
67072: LD_INT 109
67074: PUSH
67075: LD_INT 112
67077: PUSH
67078: LD_INT 114
67080: PUSH
67081: LD_INT 116
67083: PUSH
67084: LD_INT 117
67086: PUSH
67087: LD_INT 118
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: ST_TO_ADDR
67108: GO 69207
67110: LD_INT 10
67112: DOUBLE
67113: EQUAL
67114: IFTRUE 67118
67116: GO 67314
67118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67119: LD_ADDR_VAR 0 2
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: LD_INT 4
67129: PUSH
67130: LD_INT 5
67132: PUSH
67133: LD_INT 6
67135: PUSH
67136: LD_INT 7
67138: PUSH
67139: LD_INT 8
67141: PUSH
67142: LD_INT 9
67144: PUSH
67145: LD_INT 10
67147: PUSH
67148: LD_INT 11
67150: PUSH
67151: LD_INT 12
67153: PUSH
67154: LD_INT 13
67156: PUSH
67157: LD_INT 14
67159: PUSH
67160: LD_INT 15
67162: PUSH
67163: LD_INT 16
67165: PUSH
67166: LD_INT 17
67168: PUSH
67169: LD_INT 18
67171: PUSH
67172: LD_INT 19
67174: PUSH
67175: LD_INT 20
67177: PUSH
67178: LD_INT 21
67180: PUSH
67181: LD_INT 22
67183: PUSH
67184: LD_INT 23
67186: PUSH
67187: LD_INT 24
67189: PUSH
67190: LD_INT 25
67192: PUSH
67193: LD_INT 26
67195: PUSH
67196: LD_INT 28
67198: PUSH
67199: LD_INT 30
67201: PUSH
67202: LD_INT 31
67204: PUSH
67205: LD_INT 32
67207: PUSH
67208: LD_INT 36
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 101
67244: PUSH
67245: LD_INT 102
67247: PUSH
67248: LD_INT 103
67250: PUSH
67251: LD_INT 104
67253: PUSH
67254: LD_INT 105
67256: PUSH
67257: LD_INT 106
67259: PUSH
67260: LD_INT 107
67262: PUSH
67263: LD_INT 108
67265: PUSH
67266: LD_INT 109
67268: PUSH
67269: LD_INT 110
67271: PUSH
67272: LD_INT 111
67274: PUSH
67275: LD_INT 112
67277: PUSH
67278: LD_INT 114
67280: PUSH
67281: LD_INT 116
67283: PUSH
67284: LD_INT 117
67286: PUSH
67287: LD_INT 118
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: ST_TO_ADDR
67312: GO 69207
67314: LD_INT 11
67316: DOUBLE
67317: EQUAL
67318: IFTRUE 67322
67320: GO 67526
67322: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67323: LD_ADDR_VAR 0 2
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: LD_INT 3
67333: PUSH
67334: LD_INT 4
67336: PUSH
67337: LD_INT 5
67339: PUSH
67340: LD_INT 6
67342: PUSH
67343: LD_INT 7
67345: PUSH
67346: LD_INT 8
67348: PUSH
67349: LD_INT 9
67351: PUSH
67352: LD_INT 10
67354: PUSH
67355: LD_INT 11
67357: PUSH
67358: LD_INT 12
67360: PUSH
67361: LD_INT 13
67363: PUSH
67364: LD_INT 14
67366: PUSH
67367: LD_INT 15
67369: PUSH
67370: LD_INT 16
67372: PUSH
67373: LD_INT 17
67375: PUSH
67376: LD_INT 18
67378: PUSH
67379: LD_INT 19
67381: PUSH
67382: LD_INT 20
67384: PUSH
67385: LD_INT 21
67387: PUSH
67388: LD_INT 22
67390: PUSH
67391: LD_INT 23
67393: PUSH
67394: LD_INT 24
67396: PUSH
67397: LD_INT 25
67399: PUSH
67400: LD_INT 26
67402: PUSH
67403: LD_INT 28
67405: PUSH
67406: LD_INT 30
67408: PUSH
67409: LD_INT 31
67411: PUSH
67412: LD_INT 32
67414: PUSH
67415: LD_INT 34
67417: PUSH
67418: LD_INT 36
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 101
67456: PUSH
67457: LD_INT 102
67459: PUSH
67460: LD_INT 103
67462: PUSH
67463: LD_INT 104
67465: PUSH
67466: LD_INT 105
67468: PUSH
67469: LD_INT 106
67471: PUSH
67472: LD_INT 107
67474: PUSH
67475: LD_INT 108
67477: PUSH
67478: LD_INT 109
67480: PUSH
67481: LD_INT 110
67483: PUSH
67484: LD_INT 111
67486: PUSH
67487: LD_INT 112
67489: PUSH
67490: LD_INT 114
67492: PUSH
67493: LD_INT 116
67495: PUSH
67496: LD_INT 117
67498: PUSH
67499: LD_INT 118
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: ST_TO_ADDR
67524: GO 69207
67526: LD_INT 12
67528: DOUBLE
67529: EQUAL
67530: IFTRUE 67534
67532: GO 67754
67534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67535: LD_ADDR_VAR 0 2
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: LD_INT 5
67554: PUSH
67555: LD_INT 6
67557: PUSH
67558: LD_INT 7
67560: PUSH
67561: LD_INT 8
67563: PUSH
67564: LD_INT 9
67566: PUSH
67567: LD_INT 10
67569: PUSH
67570: LD_INT 11
67572: PUSH
67573: LD_INT 12
67575: PUSH
67576: LD_INT 13
67578: PUSH
67579: LD_INT 14
67581: PUSH
67582: LD_INT 15
67584: PUSH
67585: LD_INT 16
67587: PUSH
67588: LD_INT 17
67590: PUSH
67591: LD_INT 18
67593: PUSH
67594: LD_INT 19
67596: PUSH
67597: LD_INT 20
67599: PUSH
67600: LD_INT 21
67602: PUSH
67603: LD_INT 22
67605: PUSH
67606: LD_INT 23
67608: PUSH
67609: LD_INT 24
67611: PUSH
67612: LD_INT 25
67614: PUSH
67615: LD_INT 26
67617: PUSH
67618: LD_INT 27
67620: PUSH
67621: LD_INT 28
67623: PUSH
67624: LD_INT 30
67626: PUSH
67627: LD_INT 31
67629: PUSH
67630: LD_INT 32
67632: PUSH
67633: LD_INT 33
67635: PUSH
67636: LD_INT 34
67638: PUSH
67639: LD_INT 36
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 101
67680: PUSH
67681: LD_INT 102
67683: PUSH
67684: LD_INT 103
67686: PUSH
67687: LD_INT 104
67689: PUSH
67690: LD_INT 105
67692: PUSH
67693: LD_INT 106
67695: PUSH
67696: LD_INT 107
67698: PUSH
67699: LD_INT 108
67701: PUSH
67702: LD_INT 109
67704: PUSH
67705: LD_INT 110
67707: PUSH
67708: LD_INT 111
67710: PUSH
67711: LD_INT 112
67713: PUSH
67714: LD_INT 113
67716: PUSH
67717: LD_INT 114
67719: PUSH
67720: LD_INT 116
67722: PUSH
67723: LD_INT 117
67725: PUSH
67726: LD_INT 118
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: ST_TO_ADDR
67752: GO 69207
67754: LD_INT 13
67756: DOUBLE
67757: EQUAL
67758: IFTRUE 67762
67760: GO 67970
67762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67763: LD_ADDR_VAR 0 2
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: LD_INT 2
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: LD_INT 5
67782: PUSH
67783: LD_INT 8
67785: PUSH
67786: LD_INT 9
67788: PUSH
67789: LD_INT 10
67791: PUSH
67792: LD_INT 11
67794: PUSH
67795: LD_INT 12
67797: PUSH
67798: LD_INT 14
67800: PUSH
67801: LD_INT 15
67803: PUSH
67804: LD_INT 16
67806: PUSH
67807: LD_INT 17
67809: PUSH
67810: LD_INT 18
67812: PUSH
67813: LD_INT 19
67815: PUSH
67816: LD_INT 20
67818: PUSH
67819: LD_INT 21
67821: PUSH
67822: LD_INT 22
67824: PUSH
67825: LD_INT 23
67827: PUSH
67828: LD_INT 24
67830: PUSH
67831: LD_INT 25
67833: PUSH
67834: LD_INT 26
67836: PUSH
67837: LD_INT 27
67839: PUSH
67840: LD_INT 28
67842: PUSH
67843: LD_INT 30
67845: PUSH
67846: LD_INT 31
67848: PUSH
67849: LD_INT 32
67851: PUSH
67852: LD_INT 33
67854: PUSH
67855: LD_INT 34
67857: PUSH
67858: LD_INT 36
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 101
67896: PUSH
67897: LD_INT 102
67899: PUSH
67900: LD_INT 103
67902: PUSH
67903: LD_INT 104
67905: PUSH
67906: LD_INT 105
67908: PUSH
67909: LD_INT 106
67911: PUSH
67912: LD_INT 107
67914: PUSH
67915: LD_INT 108
67917: PUSH
67918: LD_INT 109
67920: PUSH
67921: LD_INT 110
67923: PUSH
67924: LD_INT 111
67926: PUSH
67927: LD_INT 112
67929: PUSH
67930: LD_INT 113
67932: PUSH
67933: LD_INT 114
67935: PUSH
67936: LD_INT 116
67938: PUSH
67939: LD_INT 117
67941: PUSH
67942: LD_INT 118
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: ST_TO_ADDR
67968: GO 69207
67970: LD_INT 14
67972: DOUBLE
67973: EQUAL
67974: IFTRUE 67978
67976: GO 68202
67978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67979: LD_ADDR_VAR 0 2
67983: PUSH
67984: LD_INT 1
67986: PUSH
67987: LD_INT 2
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: LD_INT 4
67995: PUSH
67996: LD_INT 5
67998: PUSH
67999: LD_INT 6
68001: PUSH
68002: LD_INT 7
68004: PUSH
68005: LD_INT 8
68007: PUSH
68008: LD_INT 9
68010: PUSH
68011: LD_INT 10
68013: PUSH
68014: LD_INT 11
68016: PUSH
68017: LD_INT 12
68019: PUSH
68020: LD_INT 13
68022: PUSH
68023: LD_INT 14
68025: PUSH
68026: LD_INT 15
68028: PUSH
68029: LD_INT 16
68031: PUSH
68032: LD_INT 17
68034: PUSH
68035: LD_INT 18
68037: PUSH
68038: LD_INT 19
68040: PUSH
68041: LD_INT 20
68043: PUSH
68044: LD_INT 21
68046: PUSH
68047: LD_INT 22
68049: PUSH
68050: LD_INT 23
68052: PUSH
68053: LD_INT 24
68055: PUSH
68056: LD_INT 25
68058: PUSH
68059: LD_INT 26
68061: PUSH
68062: LD_INT 27
68064: PUSH
68065: LD_INT 28
68067: PUSH
68068: LD_INT 29
68070: PUSH
68071: LD_INT 30
68073: PUSH
68074: LD_INT 31
68076: PUSH
68077: LD_INT 32
68079: PUSH
68080: LD_INT 33
68082: PUSH
68083: LD_INT 34
68085: PUSH
68086: LD_INT 36
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 101
68128: PUSH
68129: LD_INT 102
68131: PUSH
68132: LD_INT 103
68134: PUSH
68135: LD_INT 104
68137: PUSH
68138: LD_INT 105
68140: PUSH
68141: LD_INT 106
68143: PUSH
68144: LD_INT 107
68146: PUSH
68147: LD_INT 108
68149: PUSH
68150: LD_INT 109
68152: PUSH
68153: LD_INT 110
68155: PUSH
68156: LD_INT 111
68158: PUSH
68159: LD_INT 112
68161: PUSH
68162: LD_INT 113
68164: PUSH
68165: LD_INT 114
68167: PUSH
68168: LD_INT 116
68170: PUSH
68171: LD_INT 117
68173: PUSH
68174: LD_INT 118
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: ST_TO_ADDR
68200: GO 69207
68202: LD_INT 15
68204: DOUBLE
68205: EQUAL
68206: IFTRUE 68210
68208: GO 68434
68210: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68211: LD_ADDR_VAR 0 2
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: LD_INT 2
68221: PUSH
68222: LD_INT 3
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: LD_INT 5
68230: PUSH
68231: LD_INT 6
68233: PUSH
68234: LD_INT 7
68236: PUSH
68237: LD_INT 8
68239: PUSH
68240: LD_INT 9
68242: PUSH
68243: LD_INT 10
68245: PUSH
68246: LD_INT 11
68248: PUSH
68249: LD_INT 12
68251: PUSH
68252: LD_INT 13
68254: PUSH
68255: LD_INT 14
68257: PUSH
68258: LD_INT 15
68260: PUSH
68261: LD_INT 16
68263: PUSH
68264: LD_INT 17
68266: PUSH
68267: LD_INT 18
68269: PUSH
68270: LD_INT 19
68272: PUSH
68273: LD_INT 20
68275: PUSH
68276: LD_INT 21
68278: PUSH
68279: LD_INT 22
68281: PUSH
68282: LD_INT 23
68284: PUSH
68285: LD_INT 24
68287: PUSH
68288: LD_INT 25
68290: PUSH
68291: LD_INT 26
68293: PUSH
68294: LD_INT 27
68296: PUSH
68297: LD_INT 28
68299: PUSH
68300: LD_INT 29
68302: PUSH
68303: LD_INT 30
68305: PUSH
68306: LD_INT 31
68308: PUSH
68309: LD_INT 32
68311: PUSH
68312: LD_INT 33
68314: PUSH
68315: LD_INT 34
68317: PUSH
68318: LD_INT 36
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 101
68360: PUSH
68361: LD_INT 102
68363: PUSH
68364: LD_INT 103
68366: PUSH
68367: LD_INT 104
68369: PUSH
68370: LD_INT 105
68372: PUSH
68373: LD_INT 106
68375: PUSH
68376: LD_INT 107
68378: PUSH
68379: LD_INT 108
68381: PUSH
68382: LD_INT 109
68384: PUSH
68385: LD_INT 110
68387: PUSH
68388: LD_INT 111
68390: PUSH
68391: LD_INT 112
68393: PUSH
68394: LD_INT 113
68396: PUSH
68397: LD_INT 114
68399: PUSH
68400: LD_INT 116
68402: PUSH
68403: LD_INT 117
68405: PUSH
68406: LD_INT 118
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: ST_TO_ADDR
68432: GO 69207
68434: LD_INT 16
68436: DOUBLE
68437: EQUAL
68438: IFTRUE 68442
68440: GO 68578
68442: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68443: LD_ADDR_VAR 0 2
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: LD_INT 4
68453: PUSH
68454: LD_INT 5
68456: PUSH
68457: LD_INT 7
68459: PUSH
68460: LD_INT 11
68462: PUSH
68463: LD_INT 12
68465: PUSH
68466: LD_INT 15
68468: PUSH
68469: LD_INT 16
68471: PUSH
68472: LD_INT 20
68474: PUSH
68475: LD_INT 21
68477: PUSH
68478: LD_INT 22
68480: PUSH
68481: LD_INT 23
68483: PUSH
68484: LD_INT 25
68486: PUSH
68487: LD_INT 26
68489: PUSH
68490: LD_INT 30
68492: PUSH
68493: LD_INT 31
68495: PUSH
68496: LD_INT 32
68498: PUSH
68499: LD_INT 33
68501: PUSH
68502: LD_INT 34
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 101
68528: PUSH
68529: LD_INT 102
68531: PUSH
68532: LD_INT 103
68534: PUSH
68535: LD_INT 106
68537: PUSH
68538: LD_INT 108
68540: PUSH
68541: LD_INT 112
68543: PUSH
68544: LD_INT 113
68546: PUSH
68547: LD_INT 114
68549: PUSH
68550: LD_INT 116
68552: PUSH
68553: LD_INT 117
68555: PUSH
68556: LD_INT 118
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: ST_TO_ADDR
68576: GO 69207
68578: LD_INT 17
68580: DOUBLE
68581: EQUAL
68582: IFTRUE 68586
68584: GO 68810
68586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68587: LD_ADDR_VAR 0 2
68591: PUSH
68592: LD_INT 1
68594: PUSH
68595: LD_INT 2
68597: PUSH
68598: LD_INT 3
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: LD_INT 5
68606: PUSH
68607: LD_INT 6
68609: PUSH
68610: LD_INT 7
68612: PUSH
68613: LD_INT 8
68615: PUSH
68616: LD_INT 9
68618: PUSH
68619: LD_INT 10
68621: PUSH
68622: LD_INT 11
68624: PUSH
68625: LD_INT 12
68627: PUSH
68628: LD_INT 13
68630: PUSH
68631: LD_INT 14
68633: PUSH
68634: LD_INT 15
68636: PUSH
68637: LD_INT 16
68639: PUSH
68640: LD_INT 17
68642: PUSH
68643: LD_INT 18
68645: PUSH
68646: LD_INT 19
68648: PUSH
68649: LD_INT 20
68651: PUSH
68652: LD_INT 21
68654: PUSH
68655: LD_INT 22
68657: PUSH
68658: LD_INT 23
68660: PUSH
68661: LD_INT 24
68663: PUSH
68664: LD_INT 25
68666: PUSH
68667: LD_INT 26
68669: PUSH
68670: LD_INT 27
68672: PUSH
68673: LD_INT 28
68675: PUSH
68676: LD_INT 29
68678: PUSH
68679: LD_INT 30
68681: PUSH
68682: LD_INT 31
68684: PUSH
68685: LD_INT 32
68687: PUSH
68688: LD_INT 33
68690: PUSH
68691: LD_INT 34
68693: PUSH
68694: LD_INT 36
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 101
68736: PUSH
68737: LD_INT 102
68739: PUSH
68740: LD_INT 103
68742: PUSH
68743: LD_INT 104
68745: PUSH
68746: LD_INT 105
68748: PUSH
68749: LD_INT 106
68751: PUSH
68752: LD_INT 107
68754: PUSH
68755: LD_INT 108
68757: PUSH
68758: LD_INT 109
68760: PUSH
68761: LD_INT 110
68763: PUSH
68764: LD_INT 111
68766: PUSH
68767: LD_INT 112
68769: PUSH
68770: LD_INT 113
68772: PUSH
68773: LD_INT 114
68775: PUSH
68776: LD_INT 116
68778: PUSH
68779: LD_INT 117
68781: PUSH
68782: LD_INT 118
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: ST_TO_ADDR
68808: GO 69207
68810: LD_INT 18
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68818
68816: GO 68966
68818: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68819: LD_ADDR_VAR 0 2
68823: PUSH
68824: LD_INT 2
68826: PUSH
68827: LD_INT 4
68829: PUSH
68830: LD_INT 5
68832: PUSH
68833: LD_INT 7
68835: PUSH
68836: LD_INT 11
68838: PUSH
68839: LD_INT 12
68841: PUSH
68842: LD_INT 15
68844: PUSH
68845: LD_INT 16
68847: PUSH
68848: LD_INT 20
68850: PUSH
68851: LD_INT 21
68853: PUSH
68854: LD_INT 22
68856: PUSH
68857: LD_INT 23
68859: PUSH
68860: LD_INT 25
68862: PUSH
68863: LD_INT 26
68865: PUSH
68866: LD_INT 30
68868: PUSH
68869: LD_INT 31
68871: PUSH
68872: LD_INT 32
68874: PUSH
68875: LD_INT 33
68877: PUSH
68878: LD_INT 34
68880: PUSH
68881: LD_INT 35
68883: PUSH
68884: LD_INT 36
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 101
68912: PUSH
68913: LD_INT 102
68915: PUSH
68916: LD_INT 103
68918: PUSH
68919: LD_INT 106
68921: PUSH
68922: LD_INT 108
68924: PUSH
68925: LD_INT 112
68927: PUSH
68928: LD_INT 113
68930: PUSH
68931: LD_INT 114
68933: PUSH
68934: LD_INT 115
68936: PUSH
68937: LD_INT 116
68939: PUSH
68940: LD_INT 117
68942: PUSH
68943: LD_INT 118
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: ST_TO_ADDR
68964: GO 69207
68966: LD_INT 19
68968: DOUBLE
68969: EQUAL
68970: IFTRUE 68974
68972: GO 69206
68974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68975: LD_ADDR_VAR 0 2
68979: PUSH
68980: LD_INT 1
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: LD_INT 3
68988: PUSH
68989: LD_INT 4
68991: PUSH
68992: LD_INT 5
68994: PUSH
68995: LD_INT 6
68997: PUSH
68998: LD_INT 7
69000: PUSH
69001: LD_INT 8
69003: PUSH
69004: LD_INT 9
69006: PUSH
69007: LD_INT 10
69009: PUSH
69010: LD_INT 11
69012: PUSH
69013: LD_INT 12
69015: PUSH
69016: LD_INT 13
69018: PUSH
69019: LD_INT 14
69021: PUSH
69022: LD_INT 15
69024: PUSH
69025: LD_INT 16
69027: PUSH
69028: LD_INT 17
69030: PUSH
69031: LD_INT 18
69033: PUSH
69034: LD_INT 19
69036: PUSH
69037: LD_INT 20
69039: PUSH
69040: LD_INT 21
69042: PUSH
69043: LD_INT 22
69045: PUSH
69046: LD_INT 23
69048: PUSH
69049: LD_INT 24
69051: PUSH
69052: LD_INT 25
69054: PUSH
69055: LD_INT 26
69057: PUSH
69058: LD_INT 27
69060: PUSH
69061: LD_INT 28
69063: PUSH
69064: LD_INT 29
69066: PUSH
69067: LD_INT 30
69069: PUSH
69070: LD_INT 31
69072: PUSH
69073: LD_INT 32
69075: PUSH
69076: LD_INT 33
69078: PUSH
69079: LD_INT 34
69081: PUSH
69082: LD_INT 35
69084: PUSH
69085: LD_INT 36
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 101
69128: PUSH
69129: LD_INT 102
69131: PUSH
69132: LD_INT 103
69134: PUSH
69135: LD_INT 104
69137: PUSH
69138: LD_INT 105
69140: PUSH
69141: LD_INT 106
69143: PUSH
69144: LD_INT 107
69146: PUSH
69147: LD_INT 108
69149: PUSH
69150: LD_INT 109
69152: PUSH
69153: LD_INT 110
69155: PUSH
69156: LD_INT 111
69158: PUSH
69159: LD_INT 112
69161: PUSH
69162: LD_INT 113
69164: PUSH
69165: LD_INT 114
69167: PUSH
69168: LD_INT 115
69170: PUSH
69171: LD_INT 116
69173: PUSH
69174: LD_INT 117
69176: PUSH
69177: LD_INT 118
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: ST_TO_ADDR
69204: GO 69207
69206: POP
// end else
69207: GO 69438
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69209: LD_ADDR_VAR 0 2
69213: PUSH
69214: LD_INT 1
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: LD_INT 3
69222: PUSH
69223: LD_INT 4
69225: PUSH
69226: LD_INT 5
69228: PUSH
69229: LD_INT 6
69231: PUSH
69232: LD_INT 7
69234: PUSH
69235: LD_INT 8
69237: PUSH
69238: LD_INT 9
69240: PUSH
69241: LD_INT 10
69243: PUSH
69244: LD_INT 11
69246: PUSH
69247: LD_INT 12
69249: PUSH
69250: LD_INT 13
69252: PUSH
69253: LD_INT 14
69255: PUSH
69256: LD_INT 15
69258: PUSH
69259: LD_INT 16
69261: PUSH
69262: LD_INT 17
69264: PUSH
69265: LD_INT 18
69267: PUSH
69268: LD_INT 19
69270: PUSH
69271: LD_INT 20
69273: PUSH
69274: LD_INT 21
69276: PUSH
69277: LD_INT 22
69279: PUSH
69280: LD_INT 23
69282: PUSH
69283: LD_INT 24
69285: PUSH
69286: LD_INT 25
69288: PUSH
69289: LD_INT 26
69291: PUSH
69292: LD_INT 27
69294: PUSH
69295: LD_INT 28
69297: PUSH
69298: LD_INT 29
69300: PUSH
69301: LD_INT 30
69303: PUSH
69304: LD_INT 31
69306: PUSH
69307: LD_INT 32
69309: PUSH
69310: LD_INT 33
69312: PUSH
69313: LD_INT 34
69315: PUSH
69316: LD_INT 35
69318: PUSH
69319: LD_INT 36
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 101
69362: PUSH
69363: LD_INT 102
69365: PUSH
69366: LD_INT 103
69368: PUSH
69369: LD_INT 104
69371: PUSH
69372: LD_INT 105
69374: PUSH
69375: LD_INT 106
69377: PUSH
69378: LD_INT 107
69380: PUSH
69381: LD_INT 108
69383: PUSH
69384: LD_INT 109
69386: PUSH
69387: LD_INT 110
69389: PUSH
69390: LD_INT 111
69392: PUSH
69393: LD_INT 112
69395: PUSH
69396: LD_INT 113
69398: PUSH
69399: LD_INT 114
69401: PUSH
69402: LD_INT 115
69404: PUSH
69405: LD_INT 116
69407: PUSH
69408: LD_INT 117
69410: PUSH
69411: LD_INT 118
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: ST_TO_ADDR
// if result then
69438: LD_VAR 0 2
69442: IFFALSE 70228
// begin normal :=  ;
69444: LD_ADDR_VAR 0 5
69448: PUSH
69449: LD_STRING 
69451: ST_TO_ADDR
// hardcore :=  ;
69452: LD_ADDR_VAR 0 6
69456: PUSH
69457: LD_STRING 
69459: ST_TO_ADDR
// active :=  ;
69460: LD_ADDR_VAR 0 7
69464: PUSH
69465: LD_STRING 
69467: ST_TO_ADDR
// for i = 1 to normalCounter do
69468: LD_ADDR_VAR 0 8
69472: PUSH
69473: DOUBLE
69474: LD_INT 1
69476: DEC
69477: ST_TO_ADDR
69478: LD_EXP 48
69482: PUSH
69483: FOR_TO
69484: IFFALSE 69585
// begin tmp := 0 ;
69486: LD_ADDR_VAR 0 3
69490: PUSH
69491: LD_STRING 0
69493: ST_TO_ADDR
// if result [ 1 ] then
69494: LD_VAR 0 2
69498: PUSH
69499: LD_INT 1
69501: ARRAY
69502: IFFALSE 69567
// if result [ 1 ] [ 1 ] = i then
69504: LD_VAR 0 2
69508: PUSH
69509: LD_INT 1
69511: ARRAY
69512: PUSH
69513: LD_INT 1
69515: ARRAY
69516: PUSH
69517: LD_VAR 0 8
69521: EQUAL
69522: IFFALSE 69567
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69524: LD_ADDR_VAR 0 2
69528: PUSH
69529: LD_VAR 0 2
69533: PPUSH
69534: LD_INT 1
69536: PPUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 1
69544: ARRAY
69545: PPUSH
69546: LD_INT 1
69548: PPUSH
69549: CALL_OW 3
69553: PPUSH
69554: CALL_OW 1
69558: ST_TO_ADDR
// tmp := 1 ;
69559: LD_ADDR_VAR 0 3
69563: PUSH
69564: LD_STRING 1
69566: ST_TO_ADDR
// end ; normal := normal & tmp ;
69567: LD_ADDR_VAR 0 5
69571: PUSH
69572: LD_VAR 0 5
69576: PUSH
69577: LD_VAR 0 3
69581: STR
69582: ST_TO_ADDR
// end ;
69583: GO 69483
69585: POP
69586: POP
// for i = 1 to hardcoreCounter do
69587: LD_ADDR_VAR 0 8
69591: PUSH
69592: DOUBLE
69593: LD_INT 1
69595: DEC
69596: ST_TO_ADDR
69597: LD_EXP 49
69601: PUSH
69602: FOR_TO
69603: IFFALSE 69708
// begin tmp := 0 ;
69605: LD_ADDR_VAR 0 3
69609: PUSH
69610: LD_STRING 0
69612: ST_TO_ADDR
// if result [ 2 ] then
69613: LD_VAR 0 2
69617: PUSH
69618: LD_INT 2
69620: ARRAY
69621: IFFALSE 69690
// if result [ 2 ] [ 1 ] = 100 + i then
69623: LD_VAR 0 2
69627: PUSH
69628: LD_INT 2
69630: ARRAY
69631: PUSH
69632: LD_INT 1
69634: ARRAY
69635: PUSH
69636: LD_INT 100
69638: PUSH
69639: LD_VAR 0 8
69643: PLUS
69644: EQUAL
69645: IFFALSE 69690
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69647: LD_ADDR_VAR 0 2
69651: PUSH
69652: LD_VAR 0 2
69656: PPUSH
69657: LD_INT 2
69659: PPUSH
69660: LD_VAR 0 2
69664: PUSH
69665: LD_INT 2
69667: ARRAY
69668: PPUSH
69669: LD_INT 1
69671: PPUSH
69672: CALL_OW 3
69676: PPUSH
69677: CALL_OW 1
69681: ST_TO_ADDR
// tmp := 1 ;
69682: LD_ADDR_VAR 0 3
69686: PUSH
69687: LD_STRING 1
69689: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69690: LD_ADDR_VAR 0 6
69694: PUSH
69695: LD_VAR 0 6
69699: PUSH
69700: LD_VAR 0 3
69704: STR
69705: ST_TO_ADDR
// end ;
69706: GO 69602
69708: POP
69709: POP
// if isGameLoad then
69710: LD_VAR 0 1
69714: IFFALSE 70189
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69716: LD_ADDR_VAR 0 4
69720: PUSH
69721: LD_EXP 52
69725: PUSH
69726: LD_EXP 51
69730: PUSH
69731: LD_EXP 53
69735: PUSH
69736: LD_EXP 50
69740: PUSH
69741: LD_EXP 54
69745: PUSH
69746: LD_EXP 55
69750: PUSH
69751: LD_EXP 56
69755: PUSH
69756: LD_EXP 57
69760: PUSH
69761: LD_EXP 58
69765: PUSH
69766: LD_EXP 59
69770: PUSH
69771: LD_EXP 60
69775: PUSH
69776: LD_EXP 61
69780: PUSH
69781: LD_EXP 62
69785: PUSH
69786: LD_EXP 63
69790: PUSH
69791: LD_EXP 71
69795: PUSH
69796: LD_EXP 72
69800: PUSH
69801: LD_EXP 73
69805: PUSH
69806: LD_EXP 74
69810: PUSH
69811: LD_EXP 76
69815: PUSH
69816: LD_EXP 77
69820: PUSH
69821: LD_EXP 78
69825: PUSH
69826: LD_EXP 81
69830: PUSH
69831: LD_EXP 83
69835: PUSH
69836: LD_EXP 84
69840: PUSH
69841: LD_EXP 85
69845: PUSH
69846: LD_EXP 87
69850: PUSH
69851: LD_EXP 88
69855: PUSH
69856: LD_EXP 91
69860: PUSH
69861: LD_EXP 92
69865: PUSH
69866: LD_EXP 93
69870: PUSH
69871: LD_EXP 94
69875: PUSH
69876: LD_EXP 95
69880: PUSH
69881: LD_EXP 96
69885: PUSH
69886: LD_EXP 97
69890: PUSH
69891: LD_EXP 98
69895: PUSH
69896: LD_EXP 99
69900: PUSH
69901: LD_EXP 64
69905: PUSH
69906: LD_EXP 65
69910: PUSH
69911: LD_EXP 68
69915: PUSH
69916: LD_EXP 69
69920: PUSH
69921: LD_EXP 70
69925: PUSH
69926: LD_EXP 66
69930: PUSH
69931: LD_EXP 67
69935: PUSH
69936: LD_EXP 75
69940: PUSH
69941: LD_EXP 79
69945: PUSH
69946: LD_EXP 80
69950: PUSH
69951: LD_EXP 82
69955: PUSH
69956: LD_EXP 86
69960: PUSH
69961: LD_EXP 89
69965: PUSH
69966: LD_EXP 90
69970: PUSH
69971: LD_EXP 100
69975: PUSH
69976: LD_EXP 101
69980: PUSH
69981: LD_EXP 102
69985: PUSH
69986: LD_EXP 103
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: ST_TO_ADDR
// tmp :=  ;
70047: LD_ADDR_VAR 0 3
70051: PUSH
70052: LD_STRING 
70054: ST_TO_ADDR
// for i = 1 to normalCounter do
70055: LD_ADDR_VAR 0 8
70059: PUSH
70060: DOUBLE
70061: LD_INT 1
70063: DEC
70064: ST_TO_ADDR
70065: LD_EXP 48
70069: PUSH
70070: FOR_TO
70071: IFFALSE 70107
// begin if flags [ i ] then
70073: LD_VAR 0 4
70077: PUSH
70078: LD_VAR 0 8
70082: ARRAY
70083: IFFALSE 70105
// tmp := tmp & i & ; ;
70085: LD_ADDR_VAR 0 3
70089: PUSH
70090: LD_VAR 0 3
70094: PUSH
70095: LD_VAR 0 8
70099: STR
70100: PUSH
70101: LD_STRING ;
70103: STR
70104: ST_TO_ADDR
// end ;
70105: GO 70070
70107: POP
70108: POP
// for i = 1 to hardcoreCounter do
70109: LD_ADDR_VAR 0 8
70113: PUSH
70114: DOUBLE
70115: LD_INT 1
70117: DEC
70118: ST_TO_ADDR
70119: LD_EXP 49
70123: PUSH
70124: FOR_TO
70125: IFFALSE 70171
// begin if flags [ normalCounter + i ] then
70127: LD_VAR 0 4
70131: PUSH
70132: LD_EXP 48
70136: PUSH
70137: LD_VAR 0 8
70141: PLUS
70142: ARRAY
70143: IFFALSE 70169
// tmp := tmp & ( 100 + i ) & ; ;
70145: LD_ADDR_VAR 0 3
70149: PUSH
70150: LD_VAR 0 3
70154: PUSH
70155: LD_INT 100
70157: PUSH
70158: LD_VAR 0 8
70162: PLUS
70163: STR
70164: PUSH
70165: LD_STRING ;
70167: STR
70168: ST_TO_ADDR
// end ;
70169: GO 70124
70171: POP
70172: POP
// if tmp then
70173: LD_VAR 0 3
70177: IFFALSE 70189
// active := tmp ;
70179: LD_ADDR_VAR 0 7
70183: PUSH
70184: LD_VAR 0 3
70188: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70189: LD_STRING getStreamItemsFromMission("
70191: PUSH
70192: LD_VAR 0 5
70196: STR
70197: PUSH
70198: LD_STRING ","
70200: STR
70201: PUSH
70202: LD_VAR 0 6
70206: STR
70207: PUSH
70208: LD_STRING ","
70210: STR
70211: PUSH
70212: LD_VAR 0 7
70216: STR
70217: PUSH
70218: LD_STRING ")
70220: STR
70221: PPUSH
70222: CALL_OW 559
// end else
70226: GO 70235
// ToLua ( getStreamItemsFromMission("","","") ) ;
70228: LD_STRING getStreamItemsFromMission("","","")
70230: PPUSH
70231: CALL_OW 559
// end ;
70235: LD_VAR 0 2
70239: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70240: LD_EXP 47
70244: PUSH
70245: LD_EXP 52
70249: AND
70250: IFFALSE 70374
70252: GO 70254
70254: DISABLE
70255: LD_INT 0
70257: PPUSH
70258: PPUSH
// begin enable ;
70259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70260: LD_ADDR_VAR 0 2
70264: PUSH
70265: LD_INT 22
70267: PUSH
70268: LD_OWVAR 2
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: PUSH
70280: LD_INT 34
70282: PUSH
70283: LD_INT 7
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 34
70292: PUSH
70293: LD_INT 45
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 34
70302: PUSH
70303: LD_INT 28
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 34
70312: PUSH
70313: LD_INT 47
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PPUSH
70331: CALL_OW 69
70335: ST_TO_ADDR
// if not tmp then
70336: LD_VAR 0 2
70340: NOT
70341: IFFALSE 70345
// exit ;
70343: GO 70374
// for i in tmp do
70345: LD_ADDR_VAR 0 1
70349: PUSH
70350: LD_VAR 0 2
70354: PUSH
70355: FOR_IN
70356: IFFALSE 70372
// begin SetLives ( i , 0 ) ;
70358: LD_VAR 0 1
70362: PPUSH
70363: LD_INT 0
70365: PPUSH
70366: CALL_OW 234
// end ;
70370: GO 70355
70372: POP
70373: POP
// end ;
70374: PPOPN 2
70376: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70377: LD_EXP 47
70381: PUSH
70382: LD_EXP 53
70386: AND
70387: IFFALSE 70471
70389: GO 70391
70391: DISABLE
70392: LD_INT 0
70394: PPUSH
70395: PPUSH
// begin enable ;
70396: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70397: LD_ADDR_VAR 0 2
70401: PUSH
70402: LD_INT 22
70404: PUSH
70405: LD_OWVAR 2
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 32
70416: PUSH
70417: LD_INT 3
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PPUSH
70428: CALL_OW 69
70432: ST_TO_ADDR
// if not tmp then
70433: LD_VAR 0 2
70437: NOT
70438: IFFALSE 70442
// exit ;
70440: GO 70471
// for i in tmp do
70442: LD_ADDR_VAR 0 1
70446: PUSH
70447: LD_VAR 0 2
70451: PUSH
70452: FOR_IN
70453: IFFALSE 70469
// begin SetLives ( i , 0 ) ;
70455: LD_VAR 0 1
70459: PPUSH
70460: LD_INT 0
70462: PPUSH
70463: CALL_OW 234
// end ;
70467: GO 70452
70469: POP
70470: POP
// end ;
70471: PPOPN 2
70473: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70474: LD_EXP 47
70478: PUSH
70479: LD_EXP 50
70483: AND
70484: IFFALSE 70577
70486: GO 70488
70488: DISABLE
70489: LD_INT 0
70491: PPUSH
// begin enable ;
70492: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70493: LD_ADDR_VAR 0 1
70497: PUSH
70498: LD_INT 22
70500: PUSH
70501: LD_OWVAR 2
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: LD_INT 25
70515: PUSH
70516: LD_INT 5
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 25
70525: PUSH
70526: LD_INT 9
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 25
70535: PUSH
70536: LD_INT 8
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PPUSH
70553: CALL_OW 69
70557: PUSH
70558: FOR_IN
70559: IFFALSE 70575
// begin SetClass ( i , 1 ) ;
70561: LD_VAR 0 1
70565: PPUSH
70566: LD_INT 1
70568: PPUSH
70569: CALL_OW 336
// end ;
70573: GO 70558
70575: POP
70576: POP
// end ;
70577: PPOPN 1
70579: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70580: LD_EXP 47
70584: PUSH
70585: LD_EXP 51
70589: AND
70590: PUSH
70591: LD_OWVAR 65
70595: PUSH
70596: LD_INT 7
70598: LESS
70599: AND
70600: IFFALSE 70614
70602: GO 70604
70604: DISABLE
// begin enable ;
70605: ENABLE
// game_speed := 7 ;
70606: LD_ADDR_OWVAR 65
70610: PUSH
70611: LD_INT 7
70613: ST_TO_ADDR
// end ;
70614: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70615: LD_EXP 47
70619: PUSH
70620: LD_EXP 54
70624: AND
70625: IFFALSE 70827
70627: GO 70629
70629: DISABLE
70630: LD_INT 0
70632: PPUSH
70633: PPUSH
70634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70635: LD_ADDR_VAR 0 3
70639: PUSH
70640: LD_INT 81
70642: PUSH
70643: LD_OWVAR 2
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 21
70654: PUSH
70655: LD_INT 1
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PPUSH
70666: CALL_OW 69
70670: ST_TO_ADDR
// if not tmp then
70671: LD_VAR 0 3
70675: NOT
70676: IFFALSE 70680
// exit ;
70678: GO 70827
// if tmp > 5 then
70680: LD_VAR 0 3
70684: PUSH
70685: LD_INT 5
70687: GREATER
70688: IFFALSE 70700
// k := 5 else
70690: LD_ADDR_VAR 0 2
70694: PUSH
70695: LD_INT 5
70697: ST_TO_ADDR
70698: GO 70710
// k := tmp ;
70700: LD_ADDR_VAR 0 2
70704: PUSH
70705: LD_VAR 0 3
70709: ST_TO_ADDR
// for i := 1 to k do
70710: LD_ADDR_VAR 0 1
70714: PUSH
70715: DOUBLE
70716: LD_INT 1
70718: DEC
70719: ST_TO_ADDR
70720: LD_VAR 0 2
70724: PUSH
70725: FOR_TO
70726: IFFALSE 70825
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70728: LD_VAR 0 3
70732: PUSH
70733: LD_VAR 0 1
70737: ARRAY
70738: PPUSH
70739: LD_VAR 0 1
70743: PUSH
70744: LD_INT 4
70746: MOD
70747: PUSH
70748: LD_INT 1
70750: PLUS
70751: PPUSH
70752: CALL_OW 259
70756: PUSH
70757: LD_INT 10
70759: LESS
70760: IFFALSE 70823
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70762: LD_VAR 0 3
70766: PUSH
70767: LD_VAR 0 1
70771: ARRAY
70772: PPUSH
70773: LD_VAR 0 1
70777: PUSH
70778: LD_INT 4
70780: MOD
70781: PUSH
70782: LD_INT 1
70784: PLUS
70785: PPUSH
70786: LD_VAR 0 3
70790: PUSH
70791: LD_VAR 0 1
70795: ARRAY
70796: PPUSH
70797: LD_VAR 0 1
70801: PUSH
70802: LD_INT 4
70804: MOD
70805: PUSH
70806: LD_INT 1
70808: PLUS
70809: PPUSH
70810: CALL_OW 259
70814: PUSH
70815: LD_INT 1
70817: PLUS
70818: PPUSH
70819: CALL_OW 237
70823: GO 70725
70825: POP
70826: POP
// end ;
70827: PPOPN 3
70829: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70830: LD_EXP 47
70834: PUSH
70835: LD_EXP 55
70839: AND
70840: IFFALSE 70860
70842: GO 70844
70844: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70845: LD_INT 4
70847: PPUSH
70848: LD_OWVAR 2
70852: PPUSH
70853: LD_INT 0
70855: PPUSH
70856: CALL_OW 324
70860: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70861: LD_EXP 47
70865: PUSH
70866: LD_EXP 84
70870: AND
70871: IFFALSE 70891
70873: GO 70875
70875: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70876: LD_INT 19
70878: PPUSH
70879: LD_OWVAR 2
70883: PPUSH
70884: LD_INT 0
70886: PPUSH
70887: CALL_OW 324
70891: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70892: LD_EXP 47
70896: PUSH
70897: LD_EXP 56
70901: AND
70902: IFFALSE 71004
70904: GO 70906
70906: DISABLE
70907: LD_INT 0
70909: PPUSH
70910: PPUSH
// begin enable ;
70911: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70912: LD_ADDR_VAR 0 2
70916: PUSH
70917: LD_INT 22
70919: PUSH
70920: LD_OWVAR 2
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: LD_INT 34
70934: PUSH
70935: LD_INT 11
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 34
70944: PUSH
70945: LD_INT 30
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PPUSH
70961: CALL_OW 69
70965: ST_TO_ADDR
// if not tmp then
70966: LD_VAR 0 2
70970: NOT
70971: IFFALSE 70975
// exit ;
70973: GO 71004
// for i in tmp do
70975: LD_ADDR_VAR 0 1
70979: PUSH
70980: LD_VAR 0 2
70984: PUSH
70985: FOR_IN
70986: IFFALSE 71002
// begin SetLives ( i , 0 ) ;
70988: LD_VAR 0 1
70992: PPUSH
70993: LD_INT 0
70995: PPUSH
70996: CALL_OW 234
// end ;
71000: GO 70985
71002: POP
71003: POP
// end ;
71004: PPOPN 2
71006: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71007: LD_EXP 47
71011: PUSH
71012: LD_EXP 57
71016: AND
71017: IFFALSE 71037
71019: GO 71021
71021: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71022: LD_INT 32
71024: PPUSH
71025: LD_OWVAR 2
71029: PPUSH
71030: LD_INT 0
71032: PPUSH
71033: CALL_OW 324
71037: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71038: LD_EXP 47
71042: PUSH
71043: LD_EXP 58
71047: AND
71048: IFFALSE 71229
71050: GO 71052
71052: DISABLE
71053: LD_INT 0
71055: PPUSH
71056: PPUSH
71057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71058: LD_ADDR_VAR 0 2
71062: PUSH
71063: LD_INT 22
71065: PUSH
71066: LD_OWVAR 2
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 33
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PPUSH
71089: CALL_OW 69
71093: ST_TO_ADDR
// if not tmp then
71094: LD_VAR 0 2
71098: NOT
71099: IFFALSE 71103
// exit ;
71101: GO 71229
// side := 0 ;
71103: LD_ADDR_VAR 0 3
71107: PUSH
71108: LD_INT 0
71110: ST_TO_ADDR
// for i := 1 to 8 do
71111: LD_ADDR_VAR 0 1
71115: PUSH
71116: DOUBLE
71117: LD_INT 1
71119: DEC
71120: ST_TO_ADDR
71121: LD_INT 8
71123: PUSH
71124: FOR_TO
71125: IFFALSE 71173
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71127: LD_OWVAR 2
71131: PUSH
71132: LD_VAR 0 1
71136: NONEQUAL
71137: PUSH
71138: LD_OWVAR 2
71142: PPUSH
71143: LD_VAR 0 1
71147: PPUSH
71148: CALL_OW 81
71152: PUSH
71153: LD_INT 2
71155: EQUAL
71156: AND
71157: IFFALSE 71171
// begin side := i ;
71159: LD_ADDR_VAR 0 3
71163: PUSH
71164: LD_VAR 0 1
71168: ST_TO_ADDR
// break ;
71169: GO 71173
// end ;
71171: GO 71124
71173: POP
71174: POP
// if not side then
71175: LD_VAR 0 3
71179: NOT
71180: IFFALSE 71184
// exit ;
71182: GO 71229
// for i := 1 to tmp do
71184: LD_ADDR_VAR 0 1
71188: PUSH
71189: DOUBLE
71190: LD_INT 1
71192: DEC
71193: ST_TO_ADDR
71194: LD_VAR 0 2
71198: PUSH
71199: FOR_TO
71200: IFFALSE 71227
// if Prob ( 60 ) then
71202: LD_INT 60
71204: PPUSH
71205: CALL_OW 13
71209: IFFALSE 71225
// SetSide ( i , side ) ;
71211: LD_VAR 0 1
71215: PPUSH
71216: LD_VAR 0 3
71220: PPUSH
71221: CALL_OW 235
71225: GO 71199
71227: POP
71228: POP
// end ;
71229: PPOPN 3
71231: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71232: LD_EXP 47
71236: PUSH
71237: LD_EXP 60
71241: AND
71242: IFFALSE 71361
71244: GO 71246
71246: DISABLE
71247: LD_INT 0
71249: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71250: LD_ADDR_VAR 0 1
71254: PUSH
71255: LD_INT 22
71257: PUSH
71258: LD_OWVAR 2
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 21
71269: PUSH
71270: LD_INT 1
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 3
71279: PUSH
71280: LD_INT 23
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: PPUSH
71299: CALL_OW 69
71303: PUSH
71304: FOR_IN
71305: IFFALSE 71359
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71307: LD_VAR 0 1
71311: PPUSH
71312: CALL_OW 257
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: LD_INT 2
71322: PUSH
71323: LD_INT 3
71325: PUSH
71326: LD_INT 4
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: IN
71335: IFFALSE 71357
// SetClass ( un , rand ( 1 , 4 ) ) ;
71337: LD_VAR 0 1
71341: PPUSH
71342: LD_INT 1
71344: PPUSH
71345: LD_INT 4
71347: PPUSH
71348: CALL_OW 12
71352: PPUSH
71353: CALL_OW 336
71357: GO 71304
71359: POP
71360: POP
// end ;
71361: PPOPN 1
71363: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71364: LD_EXP 47
71368: PUSH
71369: LD_EXP 59
71373: AND
71374: IFFALSE 71453
71376: GO 71378
71378: DISABLE
71379: LD_INT 0
71381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71382: LD_ADDR_VAR 0 1
71386: PUSH
71387: LD_INT 22
71389: PUSH
71390: LD_OWVAR 2
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 21
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PPUSH
71413: CALL_OW 69
71417: ST_TO_ADDR
// if not tmp then
71418: LD_VAR 0 1
71422: NOT
71423: IFFALSE 71427
// exit ;
71425: GO 71453
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71427: LD_VAR 0 1
71431: PUSH
71432: LD_INT 1
71434: PPUSH
71435: LD_VAR 0 1
71439: PPUSH
71440: CALL_OW 12
71444: ARRAY
71445: PPUSH
71446: LD_INT 100
71448: PPUSH
71449: CALL_OW 234
// end ;
71453: PPOPN 1
71455: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71456: LD_EXP 47
71460: PUSH
71461: LD_EXP 61
71465: AND
71466: IFFALSE 71564
71468: GO 71470
71470: DISABLE
71471: LD_INT 0
71473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71474: LD_ADDR_VAR 0 1
71478: PUSH
71479: LD_INT 22
71481: PUSH
71482: LD_OWVAR 2
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 21
71493: PUSH
71494: LD_INT 1
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PPUSH
71505: CALL_OW 69
71509: ST_TO_ADDR
// if not tmp then
71510: LD_VAR 0 1
71514: NOT
71515: IFFALSE 71519
// exit ;
71517: GO 71564
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71519: LD_VAR 0 1
71523: PUSH
71524: LD_INT 1
71526: PPUSH
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 12
71536: ARRAY
71537: PPUSH
71538: LD_INT 1
71540: PPUSH
71541: LD_INT 4
71543: PPUSH
71544: CALL_OW 12
71548: PPUSH
71549: LD_INT 3000
71551: PPUSH
71552: LD_INT 9000
71554: PPUSH
71555: CALL_OW 12
71559: PPUSH
71560: CALL_OW 492
// end ;
71564: PPOPN 1
71566: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71567: LD_EXP 47
71571: PUSH
71572: LD_EXP 62
71576: AND
71577: IFFALSE 71597
71579: GO 71581
71581: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71582: LD_INT 1
71584: PPUSH
71585: LD_OWVAR 2
71589: PPUSH
71590: LD_INT 0
71592: PPUSH
71593: CALL_OW 324
71597: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71598: LD_EXP 47
71602: PUSH
71603: LD_EXP 63
71607: AND
71608: IFFALSE 71691
71610: GO 71612
71612: DISABLE
71613: LD_INT 0
71615: PPUSH
71616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71617: LD_ADDR_VAR 0 2
71621: PUSH
71622: LD_INT 22
71624: PUSH
71625: LD_OWVAR 2
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 21
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PPUSH
71648: CALL_OW 69
71652: ST_TO_ADDR
// if not tmp then
71653: LD_VAR 0 2
71657: NOT
71658: IFFALSE 71662
// exit ;
71660: GO 71691
// for i in tmp do
71662: LD_ADDR_VAR 0 1
71666: PUSH
71667: LD_VAR 0 2
71671: PUSH
71672: FOR_IN
71673: IFFALSE 71689
// SetBLevel ( i , 10 ) ;
71675: LD_VAR 0 1
71679: PPUSH
71680: LD_INT 10
71682: PPUSH
71683: CALL_OW 241
71687: GO 71672
71689: POP
71690: POP
// end ;
71691: PPOPN 2
71693: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71694: LD_EXP 47
71698: PUSH
71699: LD_EXP 64
71703: AND
71704: IFFALSE 71815
71706: GO 71708
71708: DISABLE
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
71713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71714: LD_ADDR_VAR 0 3
71718: PUSH
71719: LD_INT 22
71721: PUSH
71722: LD_OWVAR 2
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 25
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PPUSH
71745: CALL_OW 69
71749: ST_TO_ADDR
// if not tmp then
71750: LD_VAR 0 3
71754: NOT
71755: IFFALSE 71759
// exit ;
71757: GO 71815
// un := tmp [ rand ( 1 , tmp ) ] ;
71759: LD_ADDR_VAR 0 2
71763: PUSH
71764: LD_VAR 0 3
71768: PUSH
71769: LD_INT 1
71771: PPUSH
71772: LD_VAR 0 3
71776: PPUSH
71777: CALL_OW 12
71781: ARRAY
71782: ST_TO_ADDR
// if Crawls ( un ) then
71783: LD_VAR 0 2
71787: PPUSH
71788: CALL_OW 318
71792: IFFALSE 71803
// ComWalk ( un ) ;
71794: LD_VAR 0 2
71798: PPUSH
71799: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71803: LD_VAR 0 2
71807: PPUSH
71808: LD_INT 5
71810: PPUSH
71811: CALL_OW 336
// end ;
71815: PPOPN 3
71817: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71818: LD_EXP 47
71822: PUSH
71823: LD_EXP 65
71827: AND
71828: PUSH
71829: LD_OWVAR 67
71833: PUSH
71834: LD_INT 4
71836: LESS
71837: AND
71838: IFFALSE 71857
71840: GO 71842
71842: DISABLE
// begin Difficulty := Difficulty + 1 ;
71843: LD_ADDR_OWVAR 67
71847: PUSH
71848: LD_OWVAR 67
71852: PUSH
71853: LD_INT 1
71855: PLUS
71856: ST_TO_ADDR
// end ;
71857: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71858: LD_EXP 47
71862: PUSH
71863: LD_EXP 66
71867: AND
71868: IFFALSE 71971
71870: GO 71872
71872: DISABLE
71873: LD_INT 0
71875: PPUSH
// begin for i := 1 to 5 do
71876: LD_ADDR_VAR 0 1
71880: PUSH
71881: DOUBLE
71882: LD_INT 1
71884: DEC
71885: ST_TO_ADDR
71886: LD_INT 5
71888: PUSH
71889: FOR_TO
71890: IFFALSE 71969
// begin uc_nation := nation_nature ;
71892: LD_ADDR_OWVAR 21
71896: PUSH
71897: LD_INT 0
71899: ST_TO_ADDR
// uc_side := 0 ;
71900: LD_ADDR_OWVAR 20
71904: PUSH
71905: LD_INT 0
71907: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71908: LD_ADDR_OWVAR 29
71912: PUSH
71913: LD_INT 12
71915: PUSH
71916: LD_INT 12
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: ST_TO_ADDR
// hc_agressivity := 20 ;
71923: LD_ADDR_OWVAR 35
71927: PUSH
71928: LD_INT 20
71930: ST_TO_ADDR
// hc_class := class_tiger ;
71931: LD_ADDR_OWVAR 28
71935: PUSH
71936: LD_INT 14
71938: ST_TO_ADDR
// hc_gallery :=  ;
71939: LD_ADDR_OWVAR 33
71943: PUSH
71944: LD_STRING 
71946: ST_TO_ADDR
// hc_name :=  ;
71947: LD_ADDR_OWVAR 26
71951: PUSH
71952: LD_STRING 
71954: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71955: CALL_OW 44
71959: PPUSH
71960: LD_INT 0
71962: PPUSH
71963: CALL_OW 51
// end ;
71967: GO 71889
71969: POP
71970: POP
// end ;
71971: PPOPN 1
71973: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71974: LD_EXP 47
71978: PUSH
71979: LD_EXP 67
71983: AND
71984: IFFALSE 71993
71986: GO 71988
71988: DISABLE
// StreamSibBomb ;
71989: CALL 71994 0 0
71993: END
// export function StreamSibBomb ; var i , x , y ; begin
71994: LD_INT 0
71996: PPUSH
71997: PPUSH
71998: PPUSH
71999: PPUSH
// result := false ;
72000: LD_ADDR_VAR 0 1
72004: PUSH
72005: LD_INT 0
72007: ST_TO_ADDR
// for i := 1 to 16 do
72008: LD_ADDR_VAR 0 2
72012: PUSH
72013: DOUBLE
72014: LD_INT 1
72016: DEC
72017: ST_TO_ADDR
72018: LD_INT 16
72020: PUSH
72021: FOR_TO
72022: IFFALSE 72221
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72024: LD_ADDR_VAR 0 3
72028: PUSH
72029: LD_INT 10
72031: PUSH
72032: LD_INT 20
72034: PUSH
72035: LD_INT 30
72037: PUSH
72038: LD_INT 40
72040: PUSH
72041: LD_INT 50
72043: PUSH
72044: LD_INT 60
72046: PUSH
72047: LD_INT 70
72049: PUSH
72050: LD_INT 80
72052: PUSH
72053: LD_INT 90
72055: PUSH
72056: LD_INT 100
72058: PUSH
72059: LD_INT 110
72061: PUSH
72062: LD_INT 120
72064: PUSH
72065: LD_INT 130
72067: PUSH
72068: LD_INT 140
72070: PUSH
72071: LD_INT 150
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 1
72093: PPUSH
72094: LD_INT 15
72096: PPUSH
72097: CALL_OW 12
72101: ARRAY
72102: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72103: LD_ADDR_VAR 0 4
72107: PUSH
72108: LD_INT 10
72110: PUSH
72111: LD_INT 20
72113: PUSH
72114: LD_INT 30
72116: PUSH
72117: LD_INT 40
72119: PUSH
72120: LD_INT 50
72122: PUSH
72123: LD_INT 60
72125: PUSH
72126: LD_INT 70
72128: PUSH
72129: LD_INT 80
72131: PUSH
72132: LD_INT 90
72134: PUSH
72135: LD_INT 100
72137: PUSH
72138: LD_INT 110
72140: PUSH
72141: LD_INT 120
72143: PUSH
72144: LD_INT 130
72146: PUSH
72147: LD_INT 140
72149: PUSH
72150: LD_INT 150
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 1
72172: PPUSH
72173: LD_INT 15
72175: PPUSH
72176: CALL_OW 12
72180: ARRAY
72181: ST_TO_ADDR
// if ValidHex ( x , y ) then
72182: LD_VAR 0 3
72186: PPUSH
72187: LD_VAR 0 4
72191: PPUSH
72192: CALL_OW 488
72196: IFFALSE 72219
// begin result := [ x , y ] ;
72198: LD_ADDR_VAR 0 1
72202: PUSH
72203: LD_VAR 0 3
72207: PUSH
72208: LD_VAR 0 4
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: ST_TO_ADDR
// break ;
72217: GO 72221
// end ; end ;
72219: GO 72021
72221: POP
72222: POP
// if result then
72223: LD_VAR 0 1
72227: IFFALSE 72287
// begin ToLua ( playSibBomb() ) ;
72229: LD_STRING playSibBomb()
72231: PPUSH
72232: CALL_OW 559
// wait ( 0 0$14 ) ;
72236: LD_INT 490
72238: PPUSH
72239: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72243: LD_VAR 0 1
72247: PUSH
72248: LD_INT 1
72250: ARRAY
72251: PPUSH
72252: LD_VAR 0 1
72256: PUSH
72257: LD_INT 2
72259: ARRAY
72260: PPUSH
72261: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72265: LD_VAR 0 1
72269: PUSH
72270: LD_INT 1
72272: ARRAY
72273: PPUSH
72274: LD_VAR 0 1
72278: PUSH
72279: LD_INT 2
72281: ARRAY
72282: PPUSH
72283: CALL_OW 429
// end ; end ;
72287: LD_VAR 0 1
72291: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72292: LD_EXP 47
72296: PUSH
72297: LD_EXP 69
72301: AND
72302: IFFALSE 72314
72304: GO 72306
72306: DISABLE
// YouLost (  ) ;
72307: LD_STRING 
72309: PPUSH
72310: CALL_OW 104
72314: END
// every 0 0$1 trigger StreamModeActive and sFog do
72315: LD_EXP 47
72319: PUSH
72320: LD_EXP 68
72324: AND
72325: IFFALSE 72339
72327: GO 72329
72329: DISABLE
// FogOff ( your_side ) ;
72330: LD_OWVAR 2
72334: PPUSH
72335: CALL_OW 344
72339: END
// every 0 0$1 trigger StreamModeActive and sSun do
72340: LD_EXP 47
72344: PUSH
72345: LD_EXP 70
72349: AND
72350: IFFALSE 72378
72352: GO 72354
72354: DISABLE
// begin solar_recharge_percent := 0 ;
72355: LD_ADDR_OWVAR 79
72359: PUSH
72360: LD_INT 0
72362: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72363: LD_INT 10500
72365: PPUSH
72366: CALL_OW 67
// solar_recharge_percent := 100 ;
72370: LD_ADDR_OWVAR 79
72374: PUSH
72375: LD_INT 100
72377: ST_TO_ADDR
// end ;
72378: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72379: LD_EXP 47
72383: PUSH
72384: LD_EXP 71
72388: AND
72389: IFFALSE 72628
72391: GO 72393
72393: DISABLE
72394: LD_INT 0
72396: PPUSH
72397: PPUSH
72398: PPUSH
// begin tmp := [ ] ;
72399: LD_ADDR_VAR 0 3
72403: PUSH
72404: EMPTY
72405: ST_TO_ADDR
// for i := 1 to 6 do
72406: LD_ADDR_VAR 0 1
72410: PUSH
72411: DOUBLE
72412: LD_INT 1
72414: DEC
72415: ST_TO_ADDR
72416: LD_INT 6
72418: PUSH
72419: FOR_TO
72420: IFFALSE 72525
// begin uc_nation := nation_nature ;
72422: LD_ADDR_OWVAR 21
72426: PUSH
72427: LD_INT 0
72429: ST_TO_ADDR
// uc_side := 0 ;
72430: LD_ADDR_OWVAR 20
72434: PUSH
72435: LD_INT 0
72437: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72438: LD_ADDR_OWVAR 29
72442: PUSH
72443: LD_INT 12
72445: PUSH
72446: LD_INT 12
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: ST_TO_ADDR
// hc_agressivity := 20 ;
72453: LD_ADDR_OWVAR 35
72457: PUSH
72458: LD_INT 20
72460: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72461: LD_ADDR_OWVAR 28
72465: PUSH
72466: LD_INT 17
72468: ST_TO_ADDR
// hc_gallery :=  ;
72469: LD_ADDR_OWVAR 33
72473: PUSH
72474: LD_STRING 
72476: ST_TO_ADDR
// hc_name :=  ;
72477: LD_ADDR_OWVAR 26
72481: PUSH
72482: LD_STRING 
72484: ST_TO_ADDR
// un := CreateHuman ;
72485: LD_ADDR_VAR 0 2
72489: PUSH
72490: CALL_OW 44
72494: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72495: LD_VAR 0 2
72499: PPUSH
72500: LD_INT 1
72502: PPUSH
72503: CALL_OW 51
// tmp := tmp ^ un ;
72507: LD_ADDR_VAR 0 3
72511: PUSH
72512: LD_VAR 0 3
72516: PUSH
72517: LD_VAR 0 2
72521: ADD
72522: ST_TO_ADDR
// end ;
72523: GO 72419
72525: POP
72526: POP
// repeat wait ( 0 0$1 ) ;
72527: LD_INT 35
72529: PPUSH
72530: CALL_OW 67
// for un in tmp do
72534: LD_ADDR_VAR 0 2
72538: PUSH
72539: LD_VAR 0 3
72543: PUSH
72544: FOR_IN
72545: IFFALSE 72619
// begin if IsDead ( un ) then
72547: LD_VAR 0 2
72551: PPUSH
72552: CALL_OW 301
72556: IFFALSE 72576
// begin tmp := tmp diff un ;
72558: LD_ADDR_VAR 0 3
72562: PUSH
72563: LD_VAR 0 3
72567: PUSH
72568: LD_VAR 0 2
72572: DIFF
72573: ST_TO_ADDR
// continue ;
72574: GO 72544
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72576: LD_VAR 0 2
72580: PPUSH
72581: LD_INT 3
72583: PUSH
72584: LD_INT 22
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PPUSH
72598: CALL_OW 69
72602: PPUSH
72603: LD_VAR 0 2
72607: PPUSH
72608: CALL_OW 74
72612: PPUSH
72613: CALL_OW 115
// end ;
72617: GO 72544
72619: POP
72620: POP
// until not tmp ;
72621: LD_VAR 0 3
72625: NOT
72626: IFFALSE 72527
// end ;
72628: PPOPN 3
72630: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72631: LD_EXP 47
72635: PUSH
72636: LD_EXP 72
72640: AND
72641: IFFALSE 72695
72643: GO 72645
72645: DISABLE
// begin ToLua ( displayTroll(); ) ;
72646: LD_STRING displayTroll();
72648: PPUSH
72649: CALL_OW 559
// wait ( 3 3$00 ) ;
72653: LD_INT 6300
72655: PPUSH
72656: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72660: LD_STRING hideTroll();
72662: PPUSH
72663: CALL_OW 559
// wait ( 1 1$00 ) ;
72667: LD_INT 2100
72669: PPUSH
72670: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72674: LD_STRING displayTroll();
72676: PPUSH
72677: CALL_OW 559
// wait ( 1 1$00 ) ;
72681: LD_INT 2100
72683: PPUSH
72684: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72688: LD_STRING hideTroll();
72690: PPUSH
72691: CALL_OW 559
// end ;
72695: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72696: LD_EXP 47
72700: PUSH
72701: LD_EXP 73
72705: AND
72706: IFFALSE 72769
72708: GO 72710
72710: DISABLE
72711: LD_INT 0
72713: PPUSH
// begin p := 0 ;
72714: LD_ADDR_VAR 0 1
72718: PUSH
72719: LD_INT 0
72721: ST_TO_ADDR
// repeat game_speed := 1 ;
72722: LD_ADDR_OWVAR 65
72726: PUSH
72727: LD_INT 1
72729: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72730: LD_INT 35
72732: PPUSH
72733: CALL_OW 67
// p := p + 1 ;
72737: LD_ADDR_VAR 0 1
72741: PUSH
72742: LD_VAR 0 1
72746: PUSH
72747: LD_INT 1
72749: PLUS
72750: ST_TO_ADDR
// until p >= 60 ;
72751: LD_VAR 0 1
72755: PUSH
72756: LD_INT 60
72758: GREATEREQUAL
72759: IFFALSE 72722
// game_speed := 4 ;
72761: LD_ADDR_OWVAR 65
72765: PUSH
72766: LD_INT 4
72768: ST_TO_ADDR
// end ;
72769: PPOPN 1
72771: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72772: LD_EXP 47
72776: PUSH
72777: LD_EXP 74
72781: AND
72782: IFFALSE 72928
72784: GO 72786
72786: DISABLE
72787: LD_INT 0
72789: PPUSH
72790: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72791: LD_ADDR_VAR 0 1
72795: PUSH
72796: LD_INT 22
72798: PUSH
72799: LD_OWVAR 2
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: LD_INT 30
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 30
72823: PUSH
72824: LD_INT 1
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PPUSH
72840: CALL_OW 69
72844: ST_TO_ADDR
// if not depot then
72845: LD_VAR 0 1
72849: NOT
72850: IFFALSE 72854
// exit ;
72852: GO 72928
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72854: LD_ADDR_VAR 0 2
72858: PUSH
72859: LD_VAR 0 1
72863: PUSH
72864: LD_INT 1
72866: PPUSH
72867: LD_VAR 0 1
72871: PPUSH
72872: CALL_OW 12
72876: ARRAY
72877: PPUSH
72878: CALL_OW 274
72882: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72883: LD_VAR 0 2
72887: PPUSH
72888: LD_INT 1
72890: PPUSH
72891: LD_INT 0
72893: PPUSH
72894: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72898: LD_VAR 0 2
72902: PPUSH
72903: LD_INT 2
72905: PPUSH
72906: LD_INT 0
72908: PPUSH
72909: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72913: LD_VAR 0 2
72917: PPUSH
72918: LD_INT 3
72920: PPUSH
72921: LD_INT 0
72923: PPUSH
72924: CALL_OW 277
// end ;
72928: PPOPN 2
72930: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72931: LD_EXP 47
72935: PUSH
72936: LD_EXP 75
72940: AND
72941: IFFALSE 73038
72943: GO 72945
72945: DISABLE
72946: LD_INT 0
72948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72949: LD_ADDR_VAR 0 1
72953: PUSH
72954: LD_INT 22
72956: PUSH
72957: LD_OWVAR 2
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 21
72968: PUSH
72969: LD_INT 1
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 3
72978: PUSH
72979: LD_INT 23
72981: PUSH
72982: LD_INT 0
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: PPUSH
72998: CALL_OW 69
73002: ST_TO_ADDR
// if not tmp then
73003: LD_VAR 0 1
73007: NOT
73008: IFFALSE 73012
// exit ;
73010: GO 73038
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73012: LD_VAR 0 1
73016: PUSH
73017: LD_INT 1
73019: PPUSH
73020: LD_VAR 0 1
73024: PPUSH
73025: CALL_OW 12
73029: ARRAY
73030: PPUSH
73031: LD_INT 200
73033: PPUSH
73034: CALL_OW 234
// end ;
73038: PPOPN 1
73040: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73041: LD_EXP 47
73045: PUSH
73046: LD_EXP 76
73050: AND
73051: IFFALSE 73130
73053: GO 73055
73055: DISABLE
73056: LD_INT 0
73058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73059: LD_ADDR_VAR 0 1
73063: PUSH
73064: LD_INT 22
73066: PUSH
73067: LD_OWVAR 2
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 21
73078: PUSH
73079: LD_INT 2
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PPUSH
73090: CALL_OW 69
73094: ST_TO_ADDR
// if not tmp then
73095: LD_VAR 0 1
73099: NOT
73100: IFFALSE 73104
// exit ;
73102: GO 73130
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73104: LD_VAR 0 1
73108: PUSH
73109: LD_INT 1
73111: PPUSH
73112: LD_VAR 0 1
73116: PPUSH
73117: CALL_OW 12
73121: ARRAY
73122: PPUSH
73123: LD_INT 60
73125: PPUSH
73126: CALL_OW 234
// end ;
73130: PPOPN 1
73132: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73133: LD_EXP 47
73137: PUSH
73138: LD_EXP 77
73142: AND
73143: IFFALSE 73242
73145: GO 73147
73147: DISABLE
73148: LD_INT 0
73150: PPUSH
73151: PPUSH
// begin enable ;
73152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73153: LD_ADDR_VAR 0 1
73157: PUSH
73158: LD_INT 22
73160: PUSH
73161: LD_OWVAR 2
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 61
73172: PUSH
73173: EMPTY
73174: LIST
73175: PUSH
73176: LD_INT 33
73178: PUSH
73179: LD_INT 2
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: LIST
73190: PPUSH
73191: CALL_OW 69
73195: ST_TO_ADDR
// if not tmp then
73196: LD_VAR 0 1
73200: NOT
73201: IFFALSE 73205
// exit ;
73203: GO 73242
// for i in tmp do
73205: LD_ADDR_VAR 0 2
73209: PUSH
73210: LD_VAR 0 1
73214: PUSH
73215: FOR_IN
73216: IFFALSE 73240
// if IsControledBy ( i ) then
73218: LD_VAR 0 2
73222: PPUSH
73223: CALL_OW 312
73227: IFFALSE 73238
// ComUnlink ( i ) ;
73229: LD_VAR 0 2
73233: PPUSH
73234: CALL_OW 136
73238: GO 73215
73240: POP
73241: POP
// end ;
73242: PPOPN 2
73244: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73245: LD_EXP 47
73249: PUSH
73250: LD_EXP 78
73254: AND
73255: IFFALSE 73395
73257: GO 73259
73259: DISABLE
73260: LD_INT 0
73262: PPUSH
73263: PPUSH
// begin ToLua ( displayPowell(); ) ;
73264: LD_STRING displayPowell();
73266: PPUSH
73267: CALL_OW 559
// uc_side := 0 ;
73271: LD_ADDR_OWVAR 20
73275: PUSH
73276: LD_INT 0
73278: ST_TO_ADDR
// uc_nation := 2 ;
73279: LD_ADDR_OWVAR 21
73283: PUSH
73284: LD_INT 2
73286: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73287: LD_ADDR_OWVAR 37
73291: PUSH
73292: LD_INT 14
73294: ST_TO_ADDR
// vc_engine := engine_siberite ;
73295: LD_ADDR_OWVAR 39
73299: PUSH
73300: LD_INT 3
73302: ST_TO_ADDR
// vc_control := control_apeman ;
73303: LD_ADDR_OWVAR 38
73307: PUSH
73308: LD_INT 5
73310: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73311: LD_ADDR_OWVAR 40
73315: PUSH
73316: LD_INT 29
73318: ST_TO_ADDR
// un := CreateVehicle ;
73319: LD_ADDR_VAR 0 2
73323: PUSH
73324: CALL_OW 45
73328: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73329: LD_VAR 0 2
73333: PPUSH
73334: LD_INT 1
73336: PPUSH
73337: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73341: LD_INT 35
73343: PPUSH
73344: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73348: LD_VAR 0 2
73352: PPUSH
73353: LD_INT 22
73355: PUSH
73356: LD_OWVAR 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PPUSH
73365: CALL_OW 69
73369: PPUSH
73370: LD_VAR 0 2
73374: PPUSH
73375: CALL_OW 74
73379: PPUSH
73380: CALL_OW 115
// until IsDead ( un ) ;
73384: LD_VAR 0 2
73388: PPUSH
73389: CALL_OW 301
73393: IFFALSE 73341
// end ;
73395: PPOPN 2
73397: END
// every 0 0$1 trigger StreamModeActive and sStu do
73398: LD_EXP 47
73402: PUSH
73403: LD_EXP 86
73407: AND
73408: IFFALSE 73424
73410: GO 73412
73412: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73413: LD_STRING displayStucuk();
73415: PPUSH
73416: CALL_OW 559
// ResetFog ;
73420: CALL_OW 335
// end ;
73424: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73425: LD_EXP 47
73429: PUSH
73430: LD_EXP 79
73434: AND
73435: IFFALSE 73576
73437: GO 73439
73439: DISABLE
73440: LD_INT 0
73442: PPUSH
73443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: LD_INT 22
73451: PUSH
73452: LD_OWVAR 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 21
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PPUSH
73475: CALL_OW 69
73479: ST_TO_ADDR
// if not tmp then
73480: LD_VAR 0 2
73484: NOT
73485: IFFALSE 73489
// exit ;
73487: GO 73576
// un := tmp [ rand ( 1 , tmp ) ] ;
73489: LD_ADDR_VAR 0 1
73493: PUSH
73494: LD_VAR 0 2
73498: PUSH
73499: LD_INT 1
73501: PPUSH
73502: LD_VAR 0 2
73506: PPUSH
73507: CALL_OW 12
73511: ARRAY
73512: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_INT 0
73520: PPUSH
73521: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73525: LD_VAR 0 1
73529: PPUSH
73530: LD_OWVAR 3
73534: PUSH
73535: LD_VAR 0 1
73539: DIFF
73540: PPUSH
73541: LD_VAR 0 1
73545: PPUSH
73546: CALL_OW 74
73550: PPUSH
73551: CALL_OW 115
// wait ( 0 0$20 ) ;
73555: LD_INT 700
73557: PPUSH
73558: CALL_OW 67
// SetSide ( un , your_side ) ;
73562: LD_VAR 0 1
73566: PPUSH
73567: LD_OWVAR 2
73571: PPUSH
73572: CALL_OW 235
// end ;
73576: PPOPN 2
73578: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73579: LD_EXP 47
73583: PUSH
73584: LD_EXP 80
73588: AND
73589: IFFALSE 73695
73591: GO 73593
73593: DISABLE
73594: LD_INT 0
73596: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73597: LD_ADDR_VAR 0 1
73601: PUSH
73602: LD_INT 22
73604: PUSH
73605: LD_OWVAR 2
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 2
73616: PUSH
73617: LD_INT 30
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 30
73629: PUSH
73630: LD_INT 1
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: LIST
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PPUSH
73646: CALL_OW 69
73650: ST_TO_ADDR
// if not depot then
73651: LD_VAR 0 1
73655: NOT
73656: IFFALSE 73660
// exit ;
73658: GO 73695
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73660: LD_VAR 0 1
73664: PUSH
73665: LD_INT 1
73667: ARRAY
73668: PPUSH
73669: CALL_OW 250
73673: PPUSH
73674: LD_VAR 0 1
73678: PUSH
73679: LD_INT 1
73681: ARRAY
73682: PPUSH
73683: CALL_OW 251
73687: PPUSH
73688: LD_INT 70
73690: PPUSH
73691: CALL_OW 495
// end ;
73695: PPOPN 1
73697: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73698: LD_EXP 47
73702: PUSH
73703: LD_EXP 81
73707: AND
73708: IFFALSE 73919
73710: GO 73712
73712: DISABLE
73713: LD_INT 0
73715: PPUSH
73716: PPUSH
73717: PPUSH
73718: PPUSH
73719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73720: LD_ADDR_VAR 0 5
73724: PUSH
73725: LD_INT 22
73727: PUSH
73728: LD_OWVAR 2
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 21
73739: PUSH
73740: LD_INT 1
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PPUSH
73751: CALL_OW 69
73755: ST_TO_ADDR
// if not tmp then
73756: LD_VAR 0 5
73760: NOT
73761: IFFALSE 73765
// exit ;
73763: GO 73919
// for i in tmp do
73765: LD_ADDR_VAR 0 1
73769: PUSH
73770: LD_VAR 0 5
73774: PUSH
73775: FOR_IN
73776: IFFALSE 73917
// begin d := rand ( 0 , 5 ) ;
73778: LD_ADDR_VAR 0 4
73782: PUSH
73783: LD_INT 0
73785: PPUSH
73786: LD_INT 5
73788: PPUSH
73789: CALL_OW 12
73793: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73794: LD_ADDR_VAR 0 2
73798: PUSH
73799: LD_VAR 0 1
73803: PPUSH
73804: CALL_OW 250
73808: PPUSH
73809: LD_VAR 0 4
73813: PPUSH
73814: LD_INT 3
73816: PPUSH
73817: LD_INT 12
73819: PPUSH
73820: CALL_OW 12
73824: PPUSH
73825: CALL_OW 272
73829: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73830: LD_ADDR_VAR 0 3
73834: PUSH
73835: LD_VAR 0 1
73839: PPUSH
73840: CALL_OW 251
73844: PPUSH
73845: LD_VAR 0 4
73849: PPUSH
73850: LD_INT 3
73852: PPUSH
73853: LD_INT 12
73855: PPUSH
73856: CALL_OW 12
73860: PPUSH
73861: CALL_OW 273
73865: ST_TO_ADDR
// if ValidHex ( x , y ) then
73866: LD_VAR 0 2
73870: PPUSH
73871: LD_VAR 0 3
73875: PPUSH
73876: CALL_OW 488
73880: IFFALSE 73915
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73882: LD_VAR 0 1
73886: PPUSH
73887: LD_VAR 0 2
73891: PPUSH
73892: LD_VAR 0 3
73896: PPUSH
73897: LD_INT 3
73899: PPUSH
73900: LD_INT 6
73902: PPUSH
73903: CALL_OW 12
73907: PPUSH
73908: LD_INT 1
73910: PPUSH
73911: CALL_OW 483
// end ;
73915: GO 73775
73917: POP
73918: POP
// end ;
73919: PPOPN 5
73921: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73922: LD_EXP 47
73926: PUSH
73927: LD_EXP 82
73931: AND
73932: IFFALSE 74026
73934: GO 73936
73936: DISABLE
73937: LD_INT 0
73939: PPUSH
73940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73941: LD_ADDR_VAR 0 2
73945: PUSH
73946: LD_INT 22
73948: PUSH
73949: LD_OWVAR 2
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 32
73960: PUSH
73961: LD_INT 1
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 21
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: LIST
73982: PPUSH
73983: CALL_OW 69
73987: ST_TO_ADDR
// if not tmp then
73988: LD_VAR 0 2
73992: NOT
73993: IFFALSE 73997
// exit ;
73995: GO 74026
// for i in tmp do
73997: LD_ADDR_VAR 0 1
74001: PUSH
74002: LD_VAR 0 2
74006: PUSH
74007: FOR_IN
74008: IFFALSE 74024
// SetFuel ( i , 0 ) ;
74010: LD_VAR 0 1
74014: PPUSH
74015: LD_INT 0
74017: PPUSH
74018: CALL_OW 240
74022: GO 74007
74024: POP
74025: POP
// end ;
74026: PPOPN 2
74028: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74029: LD_EXP 47
74033: PUSH
74034: LD_EXP 83
74038: AND
74039: IFFALSE 74105
74041: GO 74043
74043: DISABLE
74044: LD_INT 0
74046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74047: LD_ADDR_VAR 0 1
74051: PUSH
74052: LD_INT 22
74054: PUSH
74055: LD_OWVAR 2
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 30
74066: PUSH
74067: LD_INT 29
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PPUSH
74078: CALL_OW 69
74082: ST_TO_ADDR
// if not tmp then
74083: LD_VAR 0 1
74087: NOT
74088: IFFALSE 74092
// exit ;
74090: GO 74105
// DestroyUnit ( tmp [ 1 ] ) ;
74092: LD_VAR 0 1
74096: PUSH
74097: LD_INT 1
74099: ARRAY
74100: PPUSH
74101: CALL_OW 65
// end ;
74105: PPOPN 1
74107: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74108: LD_EXP 47
74112: PUSH
74113: LD_EXP 85
74117: AND
74118: IFFALSE 74247
74120: GO 74122
74122: DISABLE
74123: LD_INT 0
74125: PPUSH
// begin uc_side := 0 ;
74126: LD_ADDR_OWVAR 20
74130: PUSH
74131: LD_INT 0
74133: ST_TO_ADDR
// uc_nation := nation_arabian ;
74134: LD_ADDR_OWVAR 21
74138: PUSH
74139: LD_INT 2
74141: ST_TO_ADDR
// hc_gallery :=  ;
74142: LD_ADDR_OWVAR 33
74146: PUSH
74147: LD_STRING 
74149: ST_TO_ADDR
// hc_name :=  ;
74150: LD_ADDR_OWVAR 26
74154: PUSH
74155: LD_STRING 
74157: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74158: LD_INT 1
74160: PPUSH
74161: LD_INT 11
74163: PPUSH
74164: LD_INT 10
74166: PPUSH
74167: CALL_OW 380
// un := CreateHuman ;
74171: LD_ADDR_VAR 0 1
74175: PUSH
74176: CALL_OW 44
74180: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74181: LD_VAR 0 1
74185: PPUSH
74186: LD_INT 1
74188: PPUSH
74189: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74193: LD_INT 35
74195: PPUSH
74196: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74200: LD_VAR 0 1
74204: PPUSH
74205: LD_INT 22
74207: PUSH
74208: LD_OWVAR 2
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PPUSH
74217: CALL_OW 69
74221: PPUSH
74222: LD_VAR 0 1
74226: PPUSH
74227: CALL_OW 74
74231: PPUSH
74232: CALL_OW 115
// until IsDead ( un ) ;
74236: LD_VAR 0 1
74240: PPUSH
74241: CALL_OW 301
74245: IFFALSE 74193
// end ;
74247: PPOPN 1
74249: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74250: LD_EXP 47
74254: PUSH
74255: LD_EXP 87
74259: AND
74260: IFFALSE 74272
74262: GO 74264
74264: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74265: LD_STRING earthquake(getX(game), 0, 32)
74267: PPUSH
74268: CALL_OW 559
74272: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74273: LD_EXP 47
74277: PUSH
74278: LD_EXP 88
74282: AND
74283: IFFALSE 74374
74285: GO 74287
74287: DISABLE
74288: LD_INT 0
74290: PPUSH
// begin enable ;
74291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74292: LD_ADDR_VAR 0 1
74296: PUSH
74297: LD_INT 22
74299: PUSH
74300: LD_OWVAR 2
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 21
74311: PUSH
74312: LD_INT 2
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 33
74321: PUSH
74322: LD_INT 3
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: LIST
74333: PPUSH
74334: CALL_OW 69
74338: ST_TO_ADDR
// if not tmp then
74339: LD_VAR 0 1
74343: NOT
74344: IFFALSE 74348
// exit ;
74346: GO 74374
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74348: LD_VAR 0 1
74352: PUSH
74353: LD_INT 1
74355: PPUSH
74356: LD_VAR 0 1
74360: PPUSH
74361: CALL_OW 12
74365: ARRAY
74366: PPUSH
74367: LD_INT 1
74369: PPUSH
74370: CALL_OW 234
// end ;
74374: PPOPN 1
74376: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74377: LD_EXP 47
74381: PUSH
74382: LD_EXP 89
74386: AND
74387: IFFALSE 74528
74389: GO 74391
74391: DISABLE
74392: LD_INT 0
74394: PPUSH
74395: PPUSH
74396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74397: LD_ADDR_VAR 0 3
74401: PUSH
74402: LD_INT 22
74404: PUSH
74405: LD_OWVAR 2
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 25
74416: PUSH
74417: LD_INT 1
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: PPUSH
74428: CALL_OW 69
74432: ST_TO_ADDR
// if not tmp then
74433: LD_VAR 0 3
74437: NOT
74438: IFFALSE 74442
// exit ;
74440: GO 74528
// un := tmp [ rand ( 1 , tmp ) ] ;
74442: LD_ADDR_VAR 0 2
74446: PUSH
74447: LD_VAR 0 3
74451: PUSH
74452: LD_INT 1
74454: PPUSH
74455: LD_VAR 0 3
74459: PPUSH
74460: CALL_OW 12
74464: ARRAY
74465: ST_TO_ADDR
// if Crawls ( un ) then
74466: LD_VAR 0 2
74470: PPUSH
74471: CALL_OW 318
74475: IFFALSE 74486
// ComWalk ( un ) ;
74477: LD_VAR 0 2
74481: PPUSH
74482: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74486: LD_VAR 0 2
74490: PPUSH
74491: LD_INT 9
74493: PPUSH
74494: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74498: LD_INT 28
74500: PPUSH
74501: LD_OWVAR 2
74505: PPUSH
74506: LD_INT 2
74508: PPUSH
74509: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74513: LD_INT 29
74515: PPUSH
74516: LD_OWVAR 2
74520: PPUSH
74521: LD_INT 2
74523: PPUSH
74524: CALL_OW 322
// end ;
74528: PPOPN 3
74530: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74531: LD_EXP 47
74535: PUSH
74536: LD_EXP 90
74540: AND
74541: IFFALSE 74652
74543: GO 74545
74545: DISABLE
74546: LD_INT 0
74548: PPUSH
74549: PPUSH
74550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74551: LD_ADDR_VAR 0 3
74555: PUSH
74556: LD_INT 22
74558: PUSH
74559: LD_OWVAR 2
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 25
74570: PUSH
74571: LD_INT 1
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: PPUSH
74582: CALL_OW 69
74586: ST_TO_ADDR
// if not tmp then
74587: LD_VAR 0 3
74591: NOT
74592: IFFALSE 74596
// exit ;
74594: GO 74652
// un := tmp [ rand ( 1 , tmp ) ] ;
74596: LD_ADDR_VAR 0 2
74600: PUSH
74601: LD_VAR 0 3
74605: PUSH
74606: LD_INT 1
74608: PPUSH
74609: LD_VAR 0 3
74613: PPUSH
74614: CALL_OW 12
74618: ARRAY
74619: ST_TO_ADDR
// if Crawls ( un ) then
74620: LD_VAR 0 2
74624: PPUSH
74625: CALL_OW 318
74629: IFFALSE 74640
// ComWalk ( un ) ;
74631: LD_VAR 0 2
74635: PPUSH
74636: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74640: LD_VAR 0 2
74644: PPUSH
74645: LD_INT 8
74647: PPUSH
74648: CALL_OW 336
// end ;
74652: PPOPN 3
74654: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74655: LD_EXP 47
74659: PUSH
74660: LD_EXP 91
74664: AND
74665: IFFALSE 74809
74667: GO 74669
74669: DISABLE
74670: LD_INT 0
74672: PPUSH
74673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74674: LD_ADDR_VAR 0 2
74678: PUSH
74679: LD_INT 22
74681: PUSH
74682: LD_OWVAR 2
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 21
74693: PUSH
74694: LD_INT 2
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 2
74703: PUSH
74704: LD_INT 34
74706: PUSH
74707: LD_INT 12
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 34
74716: PUSH
74717: LD_INT 51
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 34
74726: PUSH
74727: LD_INT 32
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: LIST
74744: PPUSH
74745: CALL_OW 69
74749: ST_TO_ADDR
// if not tmp then
74750: LD_VAR 0 2
74754: NOT
74755: IFFALSE 74759
// exit ;
74757: GO 74809
// for i in tmp do
74759: LD_ADDR_VAR 0 1
74763: PUSH
74764: LD_VAR 0 2
74768: PUSH
74769: FOR_IN
74770: IFFALSE 74807
// if GetCargo ( i , mat_artifact ) = 0 then
74772: LD_VAR 0 1
74776: PPUSH
74777: LD_INT 4
74779: PPUSH
74780: CALL_OW 289
74784: PUSH
74785: LD_INT 0
74787: EQUAL
74788: IFFALSE 74805
// SetCargo ( i , mat_siberit , 100 ) ;
74790: LD_VAR 0 1
74794: PPUSH
74795: LD_INT 3
74797: PPUSH
74798: LD_INT 100
74800: PPUSH
74801: CALL_OW 290
74805: GO 74769
74807: POP
74808: POP
// end ;
74809: PPOPN 2
74811: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74812: LD_EXP 47
74816: PUSH
74817: LD_EXP 92
74821: AND
74822: IFFALSE 75005
74824: GO 74826
74826: DISABLE
74827: LD_INT 0
74829: PPUSH
74830: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74831: LD_ADDR_VAR 0 2
74835: PUSH
74836: LD_INT 22
74838: PUSH
74839: LD_OWVAR 2
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PPUSH
74848: CALL_OW 69
74852: ST_TO_ADDR
// if not tmp then
74853: LD_VAR 0 2
74857: NOT
74858: IFFALSE 74862
// exit ;
74860: GO 75005
// for i := 1 to 2 do
74862: LD_ADDR_VAR 0 1
74866: PUSH
74867: DOUBLE
74868: LD_INT 1
74870: DEC
74871: ST_TO_ADDR
74872: LD_INT 2
74874: PUSH
74875: FOR_TO
74876: IFFALSE 75003
// begin uc_side := your_side ;
74878: LD_ADDR_OWVAR 20
74882: PUSH
74883: LD_OWVAR 2
74887: ST_TO_ADDR
// uc_nation := nation_american ;
74888: LD_ADDR_OWVAR 21
74892: PUSH
74893: LD_INT 1
74895: ST_TO_ADDR
// vc_chassis := us_morphling ;
74896: LD_ADDR_OWVAR 37
74900: PUSH
74901: LD_INT 5
74903: ST_TO_ADDR
// vc_engine := engine_siberite ;
74904: LD_ADDR_OWVAR 39
74908: PUSH
74909: LD_INT 3
74911: ST_TO_ADDR
// vc_control := control_computer ;
74912: LD_ADDR_OWVAR 38
74916: PUSH
74917: LD_INT 3
74919: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74920: LD_ADDR_OWVAR 40
74924: PUSH
74925: LD_INT 10
74927: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74928: LD_VAR 0 2
74932: PUSH
74933: LD_INT 1
74935: ARRAY
74936: PPUSH
74937: CALL_OW 310
74941: NOT
74942: IFFALSE 74989
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74944: CALL_OW 45
74948: PPUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_INT 1
74956: ARRAY
74957: PPUSH
74958: CALL_OW 250
74962: PPUSH
74963: LD_VAR 0 2
74967: PUSH
74968: LD_INT 1
74970: ARRAY
74971: PPUSH
74972: CALL_OW 251
74976: PPUSH
74977: LD_INT 12
74979: PPUSH
74980: LD_INT 1
74982: PPUSH
74983: CALL_OW 50
74987: GO 75001
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74989: CALL_OW 45
74993: PPUSH
74994: LD_INT 1
74996: PPUSH
74997: CALL_OW 51
// end ;
75001: GO 74875
75003: POP
75004: POP
// end ;
75005: PPOPN 2
75007: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75008: LD_EXP 47
75012: PUSH
75013: LD_EXP 93
75017: AND
75018: IFFALSE 75240
75020: GO 75022
75022: DISABLE
75023: LD_INT 0
75025: PPUSH
75026: PPUSH
75027: PPUSH
75028: PPUSH
75029: PPUSH
75030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75031: LD_ADDR_VAR 0 6
75035: PUSH
75036: LD_INT 22
75038: PUSH
75039: LD_OWVAR 2
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 21
75050: PUSH
75051: LD_INT 1
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 3
75060: PUSH
75061: LD_INT 23
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: PPUSH
75080: CALL_OW 69
75084: ST_TO_ADDR
// if not tmp then
75085: LD_VAR 0 6
75089: NOT
75090: IFFALSE 75094
// exit ;
75092: GO 75240
// s1 := rand ( 1 , 4 ) ;
75094: LD_ADDR_VAR 0 2
75098: PUSH
75099: LD_INT 1
75101: PPUSH
75102: LD_INT 4
75104: PPUSH
75105: CALL_OW 12
75109: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75110: LD_ADDR_VAR 0 4
75114: PUSH
75115: LD_VAR 0 6
75119: PUSH
75120: LD_INT 1
75122: ARRAY
75123: PPUSH
75124: LD_VAR 0 2
75128: PPUSH
75129: CALL_OW 259
75133: ST_TO_ADDR
// if s1 = 1 then
75134: LD_VAR 0 2
75138: PUSH
75139: LD_INT 1
75141: EQUAL
75142: IFFALSE 75162
// s2 := rand ( 2 , 4 ) else
75144: LD_ADDR_VAR 0 3
75148: PUSH
75149: LD_INT 2
75151: PPUSH
75152: LD_INT 4
75154: PPUSH
75155: CALL_OW 12
75159: ST_TO_ADDR
75160: GO 75170
// s2 := 1 ;
75162: LD_ADDR_VAR 0 3
75166: PUSH
75167: LD_INT 1
75169: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75170: LD_ADDR_VAR 0 5
75174: PUSH
75175: LD_VAR 0 6
75179: PUSH
75180: LD_INT 1
75182: ARRAY
75183: PPUSH
75184: LD_VAR 0 3
75188: PPUSH
75189: CALL_OW 259
75193: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75194: LD_VAR 0 6
75198: PUSH
75199: LD_INT 1
75201: ARRAY
75202: PPUSH
75203: LD_VAR 0 2
75207: PPUSH
75208: LD_VAR 0 5
75212: PPUSH
75213: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75217: LD_VAR 0 6
75221: PUSH
75222: LD_INT 1
75224: ARRAY
75225: PPUSH
75226: LD_VAR 0 3
75230: PPUSH
75231: LD_VAR 0 4
75235: PPUSH
75236: CALL_OW 237
// end ;
75240: PPOPN 6
75242: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75243: LD_EXP 47
75247: PUSH
75248: LD_EXP 94
75252: AND
75253: IFFALSE 75332
75255: GO 75257
75257: DISABLE
75258: LD_INT 0
75260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75261: LD_ADDR_VAR 0 1
75265: PUSH
75266: LD_INT 22
75268: PUSH
75269: LD_OWVAR 2
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 30
75280: PUSH
75281: LD_INT 3
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PPUSH
75292: CALL_OW 69
75296: ST_TO_ADDR
// if not tmp then
75297: LD_VAR 0 1
75301: NOT
75302: IFFALSE 75306
// exit ;
75304: GO 75332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75306: LD_VAR 0 1
75310: PUSH
75311: LD_INT 1
75313: PPUSH
75314: LD_VAR 0 1
75318: PPUSH
75319: CALL_OW 12
75323: ARRAY
75324: PPUSH
75325: LD_INT 1
75327: PPUSH
75328: CALL_OW 234
// end ;
75332: PPOPN 1
75334: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75335: LD_EXP 47
75339: PUSH
75340: LD_EXP 95
75344: AND
75345: IFFALSE 75457
75347: GO 75349
75349: DISABLE
75350: LD_INT 0
75352: PPUSH
75353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75354: LD_ADDR_VAR 0 2
75358: PUSH
75359: LD_INT 22
75361: PUSH
75362: LD_OWVAR 2
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 2
75373: PUSH
75374: LD_INT 30
75376: PUSH
75377: LD_INT 27
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: LD_INT 30
75386: PUSH
75387: LD_INT 26
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 30
75396: PUSH
75397: LD_INT 28
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PPUSH
75414: CALL_OW 69
75418: ST_TO_ADDR
// if not tmp then
75419: LD_VAR 0 2
75423: NOT
75424: IFFALSE 75428
// exit ;
75426: GO 75457
// for i in tmp do
75428: LD_ADDR_VAR 0 1
75432: PUSH
75433: LD_VAR 0 2
75437: PUSH
75438: FOR_IN
75439: IFFALSE 75455
// SetLives ( i , 1 ) ;
75441: LD_VAR 0 1
75445: PPUSH
75446: LD_INT 1
75448: PPUSH
75449: CALL_OW 234
75453: GO 75438
75455: POP
75456: POP
// end ;
75457: PPOPN 2
75459: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75460: LD_EXP 47
75464: PUSH
75465: LD_EXP 96
75469: AND
75470: IFFALSE 75757
75472: GO 75474
75474: DISABLE
75475: LD_INT 0
75477: PPUSH
75478: PPUSH
75479: PPUSH
// begin i := rand ( 1 , 7 ) ;
75480: LD_ADDR_VAR 0 1
75484: PUSH
75485: LD_INT 1
75487: PPUSH
75488: LD_INT 7
75490: PPUSH
75491: CALL_OW 12
75495: ST_TO_ADDR
// case i of 1 :
75496: LD_VAR 0 1
75500: PUSH
75501: LD_INT 1
75503: DOUBLE
75504: EQUAL
75505: IFTRUE 75509
75507: GO 75519
75509: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75510: LD_STRING earthquake(getX(game), 0, 32)
75512: PPUSH
75513: CALL_OW 559
75517: GO 75757
75519: LD_INT 2
75521: DOUBLE
75522: EQUAL
75523: IFTRUE 75527
75525: GO 75541
75527: POP
// begin ToLua ( displayStucuk(); ) ;
75528: LD_STRING displayStucuk();
75530: PPUSH
75531: CALL_OW 559
// ResetFog ;
75535: CALL_OW 335
// end ; 3 :
75539: GO 75757
75541: LD_INT 3
75543: DOUBLE
75544: EQUAL
75545: IFTRUE 75549
75547: GO 75653
75549: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75550: LD_ADDR_VAR 0 2
75554: PUSH
75555: LD_INT 22
75557: PUSH
75558: LD_OWVAR 2
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 25
75569: PUSH
75570: LD_INT 1
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PPUSH
75581: CALL_OW 69
75585: ST_TO_ADDR
// if not tmp then
75586: LD_VAR 0 2
75590: NOT
75591: IFFALSE 75595
// exit ;
75593: GO 75757
// un := tmp [ rand ( 1 , tmp ) ] ;
75595: LD_ADDR_VAR 0 3
75599: PUSH
75600: LD_VAR 0 2
75604: PUSH
75605: LD_INT 1
75607: PPUSH
75608: LD_VAR 0 2
75612: PPUSH
75613: CALL_OW 12
75617: ARRAY
75618: ST_TO_ADDR
// if Crawls ( un ) then
75619: LD_VAR 0 3
75623: PPUSH
75624: CALL_OW 318
75628: IFFALSE 75639
// ComWalk ( un ) ;
75630: LD_VAR 0 3
75634: PPUSH
75635: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75639: LD_VAR 0 3
75643: PPUSH
75644: LD_INT 8
75646: PPUSH
75647: CALL_OW 336
// end ; 4 :
75651: GO 75757
75653: LD_INT 4
75655: DOUBLE
75656: EQUAL
75657: IFTRUE 75661
75659: GO 75735
75661: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75662: LD_ADDR_VAR 0 2
75666: PUSH
75667: LD_INT 22
75669: PUSH
75670: LD_OWVAR 2
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 30
75681: PUSH
75682: LD_INT 29
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PPUSH
75693: CALL_OW 69
75697: ST_TO_ADDR
// if not tmp then
75698: LD_VAR 0 2
75702: NOT
75703: IFFALSE 75707
// exit ;
75705: GO 75757
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75707: LD_VAR 0 2
75711: PUSH
75712: LD_INT 1
75714: ARRAY
75715: PPUSH
75716: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75720: LD_VAR 0 2
75724: PUSH
75725: LD_INT 1
75727: ARRAY
75728: PPUSH
75729: CALL_OW 65
// end ; 5 .. 7 :
75733: GO 75757
75735: LD_INT 5
75737: DOUBLE
75738: GREATEREQUAL
75739: IFFALSE 75747
75741: LD_INT 7
75743: DOUBLE
75744: LESSEQUAL
75745: IFTRUE 75749
75747: GO 75756
75749: POP
// StreamSibBomb ; end ;
75750: CALL 71994 0 0
75754: GO 75757
75756: POP
// end ;
75757: PPOPN 3
75759: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75760: LD_EXP 47
75764: PUSH
75765: LD_EXP 97
75769: AND
75770: IFFALSE 75926
75772: GO 75774
75774: DISABLE
75775: LD_INT 0
75777: PPUSH
75778: PPUSH
75779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75780: LD_ADDR_VAR 0 2
75784: PUSH
75785: LD_INT 81
75787: PUSH
75788: LD_OWVAR 2
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 2
75799: PUSH
75800: LD_INT 21
75802: PUSH
75803: LD_INT 1
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 21
75812: PUSH
75813: LD_INT 2
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: EMPTY
75821: LIST
75822: LIST
75823: LIST
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PPUSH
75829: CALL_OW 69
75833: ST_TO_ADDR
// if not tmp then
75834: LD_VAR 0 2
75838: NOT
75839: IFFALSE 75843
// exit ;
75841: GO 75926
// p := 0 ;
75843: LD_ADDR_VAR 0 3
75847: PUSH
75848: LD_INT 0
75850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75851: LD_INT 35
75853: PPUSH
75854: CALL_OW 67
// p := p + 1 ;
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: LD_VAR 0 3
75867: PUSH
75868: LD_INT 1
75870: PLUS
75871: ST_TO_ADDR
// for i in tmp do
75872: LD_ADDR_VAR 0 1
75876: PUSH
75877: LD_VAR 0 2
75881: PUSH
75882: FOR_IN
75883: IFFALSE 75914
// if GetLives ( i ) < 1000 then
75885: LD_VAR 0 1
75889: PPUSH
75890: CALL_OW 256
75894: PUSH
75895: LD_INT 1000
75897: LESS
75898: IFFALSE 75912
// SetLives ( i , 1000 ) ;
75900: LD_VAR 0 1
75904: PPUSH
75905: LD_INT 1000
75907: PPUSH
75908: CALL_OW 234
75912: GO 75882
75914: POP
75915: POP
// until p > 20 ;
75916: LD_VAR 0 3
75920: PUSH
75921: LD_INT 20
75923: GREATER
75924: IFFALSE 75851
// end ;
75926: PPOPN 3
75928: END
// every 0 0$1 trigger StreamModeActive and sTime do
75929: LD_EXP 47
75933: PUSH
75934: LD_EXP 98
75938: AND
75939: IFFALSE 75974
75941: GO 75943
75943: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75944: LD_INT 28
75946: PPUSH
75947: LD_OWVAR 2
75951: PPUSH
75952: LD_INT 2
75954: PPUSH
75955: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75959: LD_INT 30
75961: PPUSH
75962: LD_OWVAR 2
75966: PPUSH
75967: LD_INT 2
75969: PPUSH
75970: CALL_OW 322
// end ;
75974: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75975: LD_EXP 47
75979: PUSH
75980: LD_EXP 99
75984: AND
75985: IFFALSE 76106
75987: GO 75989
75989: DISABLE
75990: LD_INT 0
75992: PPUSH
75993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75994: LD_ADDR_VAR 0 2
75998: PUSH
75999: LD_INT 22
76001: PUSH
76002: LD_OWVAR 2
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 21
76013: PUSH
76014: LD_INT 1
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: LD_INT 3
76023: PUSH
76024: LD_INT 23
76026: PUSH
76027: LD_INT 0
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: LIST
76042: PPUSH
76043: CALL_OW 69
76047: ST_TO_ADDR
// if not tmp then
76048: LD_VAR 0 2
76052: NOT
76053: IFFALSE 76057
// exit ;
76055: GO 76106
// for i in tmp do
76057: LD_ADDR_VAR 0 1
76061: PUSH
76062: LD_VAR 0 2
76066: PUSH
76067: FOR_IN
76068: IFFALSE 76104
// begin if Crawls ( i ) then
76070: LD_VAR 0 1
76074: PPUSH
76075: CALL_OW 318
76079: IFFALSE 76090
// ComWalk ( i ) ;
76081: LD_VAR 0 1
76085: PPUSH
76086: CALL_OW 138
// SetClass ( i , 2 ) ;
76090: LD_VAR 0 1
76094: PPUSH
76095: LD_INT 2
76097: PPUSH
76098: CALL_OW 336
// end ;
76102: GO 76067
76104: POP
76105: POP
// end ;
76106: PPOPN 2
76108: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76109: LD_EXP 47
76113: PUSH
76114: LD_EXP 100
76118: AND
76119: IFFALSE 76407
76121: GO 76123
76123: DISABLE
76124: LD_INT 0
76126: PPUSH
76127: PPUSH
76128: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76129: LD_OWVAR 2
76133: PPUSH
76134: LD_INT 9
76136: PPUSH
76137: LD_INT 1
76139: PPUSH
76140: LD_INT 1
76142: PPUSH
76143: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76147: LD_INT 9
76149: PPUSH
76150: LD_OWVAR 2
76154: PPUSH
76155: CALL_OW 343
// uc_side := 9 ;
76159: LD_ADDR_OWVAR 20
76163: PUSH
76164: LD_INT 9
76166: ST_TO_ADDR
// uc_nation := 2 ;
76167: LD_ADDR_OWVAR 21
76171: PUSH
76172: LD_INT 2
76174: ST_TO_ADDR
// hc_name := Dark Warrior ;
76175: LD_ADDR_OWVAR 26
76179: PUSH
76180: LD_STRING Dark Warrior
76182: ST_TO_ADDR
// hc_gallery :=  ;
76183: LD_ADDR_OWVAR 33
76187: PUSH
76188: LD_STRING 
76190: ST_TO_ADDR
// hc_noskilllimit := true ;
76191: LD_ADDR_OWVAR 76
76195: PUSH
76196: LD_INT 1
76198: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76199: LD_ADDR_OWVAR 31
76203: PUSH
76204: LD_INT 30
76206: PUSH
76207: LD_INT 30
76209: PUSH
76210: LD_INT 30
76212: PUSH
76213: LD_INT 30
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: ST_TO_ADDR
// un := CreateHuman ;
76222: LD_ADDR_VAR 0 3
76226: PUSH
76227: CALL_OW 44
76231: ST_TO_ADDR
// hc_noskilllimit := false ;
76232: LD_ADDR_OWVAR 76
76236: PUSH
76237: LD_INT 0
76239: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76240: LD_VAR 0 3
76244: PPUSH
76245: LD_INT 1
76247: PPUSH
76248: CALL_OW 51
// ToLua ( playRanger() ) ;
76252: LD_STRING playRanger()
76254: PPUSH
76255: CALL_OW 559
// p := 0 ;
76259: LD_ADDR_VAR 0 2
76263: PUSH
76264: LD_INT 0
76266: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76267: LD_INT 35
76269: PPUSH
76270: CALL_OW 67
// p := p + 1 ;
76274: LD_ADDR_VAR 0 2
76278: PUSH
76279: LD_VAR 0 2
76283: PUSH
76284: LD_INT 1
76286: PLUS
76287: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76288: LD_VAR 0 3
76292: PPUSH
76293: CALL_OW 256
76297: PUSH
76298: LD_INT 1000
76300: LESS
76301: IFFALSE 76315
// SetLives ( un , 1000 ) ;
76303: LD_VAR 0 3
76307: PPUSH
76308: LD_INT 1000
76310: PPUSH
76311: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76315: LD_VAR 0 3
76319: PPUSH
76320: LD_INT 81
76322: PUSH
76323: LD_OWVAR 2
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: PUSH
76332: LD_INT 91
76334: PUSH
76335: LD_VAR 0 3
76339: PUSH
76340: LD_INT 30
76342: PUSH
76343: EMPTY
76344: LIST
76345: LIST
76346: LIST
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PPUSH
76352: CALL_OW 69
76356: PPUSH
76357: LD_VAR 0 3
76361: PPUSH
76362: CALL_OW 74
76366: PPUSH
76367: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76371: LD_VAR 0 2
76375: PUSH
76376: LD_INT 80
76378: GREATER
76379: PUSH
76380: LD_VAR 0 3
76384: PPUSH
76385: CALL_OW 301
76389: OR
76390: IFFALSE 76267
// if un then
76392: LD_VAR 0 3
76396: IFFALSE 76407
// RemoveUnit ( un ) ;
76398: LD_VAR 0 3
76402: PPUSH
76403: CALL_OW 64
// end ;
76407: PPOPN 3
76409: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76410: LD_EXP 101
76414: IFFALSE 76530
76416: GO 76418
76418: DISABLE
76419: LD_INT 0
76421: PPUSH
76422: PPUSH
76423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76424: LD_ADDR_VAR 0 2
76428: PUSH
76429: LD_INT 81
76431: PUSH
76432: LD_OWVAR 2
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 21
76443: PUSH
76444: LD_INT 1
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: PPUSH
76455: CALL_OW 69
76459: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76460: LD_STRING playComputer()
76462: PPUSH
76463: CALL_OW 559
// if not tmp then
76467: LD_VAR 0 2
76471: NOT
76472: IFFALSE 76476
// exit ;
76474: GO 76530
// for i in tmp do
76476: LD_ADDR_VAR 0 1
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: FOR_IN
76487: IFFALSE 76528
// for j := 1 to 4 do
76489: LD_ADDR_VAR 0 3
76493: PUSH
76494: DOUBLE
76495: LD_INT 1
76497: DEC
76498: ST_TO_ADDR
76499: LD_INT 4
76501: PUSH
76502: FOR_TO
76503: IFFALSE 76524
// SetSkill ( i , j , 10 ) ;
76505: LD_VAR 0 1
76509: PPUSH
76510: LD_VAR 0 3
76514: PPUSH
76515: LD_INT 10
76517: PPUSH
76518: CALL_OW 237
76522: GO 76502
76524: POP
76525: POP
76526: GO 76486
76528: POP
76529: POP
// end ;
76530: PPOPN 3
76532: END
// every 0 0$1 trigger s30 do var i , tmp ;
76533: LD_EXP 102
76537: IFFALSE 76606
76539: GO 76541
76541: DISABLE
76542: LD_INT 0
76544: PPUSH
76545: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76546: LD_ADDR_VAR 0 2
76550: PUSH
76551: LD_INT 22
76553: PUSH
76554: LD_OWVAR 2
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PPUSH
76563: CALL_OW 69
76567: ST_TO_ADDR
// if not tmp then
76568: LD_VAR 0 2
76572: NOT
76573: IFFALSE 76577
// exit ;
76575: GO 76606
// for i in tmp do
76577: LD_ADDR_VAR 0 1
76581: PUSH
76582: LD_VAR 0 2
76586: PUSH
76587: FOR_IN
76588: IFFALSE 76604
// SetLives ( i , 300 ) ;
76590: LD_VAR 0 1
76594: PPUSH
76595: LD_INT 300
76597: PPUSH
76598: CALL_OW 234
76602: GO 76587
76604: POP
76605: POP
// end ;
76606: PPOPN 2
76608: END
// every 0 0$1 trigger s60 do var i , tmp ;
76609: LD_EXP 103
76613: IFFALSE 76682
76615: GO 76617
76617: DISABLE
76618: LD_INT 0
76620: PPUSH
76621: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76622: LD_ADDR_VAR 0 2
76626: PUSH
76627: LD_INT 22
76629: PUSH
76630: LD_OWVAR 2
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PPUSH
76639: CALL_OW 69
76643: ST_TO_ADDR
// if not tmp then
76644: LD_VAR 0 2
76648: NOT
76649: IFFALSE 76653
// exit ;
76651: GO 76682
// for i in tmp do
76653: LD_ADDR_VAR 0 1
76657: PUSH
76658: LD_VAR 0 2
76662: PUSH
76663: FOR_IN
76664: IFFALSE 76680
// SetLives ( i , 600 ) ;
76666: LD_VAR 0 1
76670: PPUSH
76671: LD_INT 600
76673: PPUSH
76674: CALL_OW 234
76678: GO 76663
76680: POP
76681: POP
// end ;
76682: PPOPN 2
76684: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76685: LD_INT 0
76687: PPUSH
// case cmd of 301 :
76688: LD_VAR 0 1
76692: PUSH
76693: LD_INT 301
76695: DOUBLE
76696: EQUAL
76697: IFTRUE 76701
76699: GO 76733
76701: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76702: LD_VAR 0 6
76706: PPUSH
76707: LD_VAR 0 7
76711: PPUSH
76712: LD_VAR 0 8
76716: PPUSH
76717: LD_VAR 0 4
76721: PPUSH
76722: LD_VAR 0 5
76726: PPUSH
76727: CALL 77942 0 5
76731: GO 76854
76733: LD_INT 302
76735: DOUBLE
76736: EQUAL
76737: IFTRUE 76741
76739: GO 76778
76741: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76742: LD_VAR 0 6
76746: PPUSH
76747: LD_VAR 0 7
76751: PPUSH
76752: LD_VAR 0 8
76756: PPUSH
76757: LD_VAR 0 9
76761: PPUSH
76762: LD_VAR 0 4
76766: PPUSH
76767: LD_VAR 0 5
76771: PPUSH
76772: CALL 78033 0 6
76776: GO 76854
76778: LD_INT 303
76780: DOUBLE
76781: EQUAL
76782: IFTRUE 76786
76784: GO 76823
76786: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76787: LD_VAR 0 6
76791: PPUSH
76792: LD_VAR 0 7
76796: PPUSH
76797: LD_VAR 0 8
76801: PPUSH
76802: LD_VAR 0 9
76806: PPUSH
76807: LD_VAR 0 4
76811: PPUSH
76812: LD_VAR 0 5
76816: PPUSH
76817: CALL 76859 0 6
76821: GO 76854
76823: LD_INT 304
76825: DOUBLE
76826: EQUAL
76827: IFTRUE 76831
76829: GO 76853
76831: POP
// hHackTeleport ( unit , x , y ) ; end ;
76832: LD_VAR 0 2
76836: PPUSH
76837: LD_VAR 0 4
76841: PPUSH
76842: LD_VAR 0 5
76846: PPUSH
76847: CALL 78626 0 3
76851: GO 76854
76853: POP
// end ;
76854: LD_VAR 0 12
76858: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76859: LD_INT 0
76861: PPUSH
76862: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76863: LD_VAR 0 1
76867: PUSH
76868: LD_INT 1
76870: LESS
76871: PUSH
76872: LD_VAR 0 1
76876: PUSH
76877: LD_INT 3
76879: GREATER
76880: OR
76881: PUSH
76882: LD_VAR 0 5
76886: PPUSH
76887: LD_VAR 0 6
76891: PPUSH
76892: CALL_OW 428
76896: OR
76897: IFFALSE 76901
// exit ;
76899: GO 77629
// uc_side := your_side ;
76901: LD_ADDR_OWVAR 20
76905: PUSH
76906: LD_OWVAR 2
76910: ST_TO_ADDR
// uc_nation := nation ;
76911: LD_ADDR_OWVAR 21
76915: PUSH
76916: LD_VAR 0 1
76920: ST_TO_ADDR
// bc_level = 1 ;
76921: LD_ADDR_OWVAR 43
76925: PUSH
76926: LD_INT 1
76928: ST_TO_ADDR
// case btype of 1 :
76929: LD_VAR 0 2
76933: PUSH
76934: LD_INT 1
76936: DOUBLE
76937: EQUAL
76938: IFTRUE 76942
76940: GO 76953
76942: POP
// bc_type := b_depot ; 2 :
76943: LD_ADDR_OWVAR 42
76947: PUSH
76948: LD_INT 0
76950: ST_TO_ADDR
76951: GO 77573
76953: LD_INT 2
76955: DOUBLE
76956: EQUAL
76957: IFTRUE 76961
76959: GO 76972
76961: POP
// bc_type := b_warehouse ; 3 :
76962: LD_ADDR_OWVAR 42
76966: PUSH
76967: LD_INT 1
76969: ST_TO_ADDR
76970: GO 77573
76972: LD_INT 3
76974: DOUBLE
76975: EQUAL
76976: IFTRUE 76980
76978: GO 76991
76980: POP
// bc_type := b_lab ; 4 .. 9 :
76981: LD_ADDR_OWVAR 42
76985: PUSH
76986: LD_INT 6
76988: ST_TO_ADDR
76989: GO 77573
76991: LD_INT 4
76993: DOUBLE
76994: GREATEREQUAL
76995: IFFALSE 77003
76997: LD_INT 9
76999: DOUBLE
77000: LESSEQUAL
77001: IFTRUE 77005
77003: GO 77065
77005: POP
// begin bc_type := b_lab_half ;
77006: LD_ADDR_OWVAR 42
77010: PUSH
77011: LD_INT 7
77013: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77014: LD_ADDR_OWVAR 44
77018: PUSH
77019: LD_INT 10
77021: PUSH
77022: LD_INT 11
77024: PUSH
77025: LD_INT 12
77027: PUSH
77028: LD_INT 15
77030: PUSH
77031: LD_INT 14
77033: PUSH
77034: LD_INT 13
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: PUSH
77045: LD_VAR 0 2
77049: PUSH
77050: LD_INT 3
77052: MINUS
77053: ARRAY
77054: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77055: LD_ADDR_OWVAR 45
77059: PUSH
77060: LD_INT 9
77062: ST_TO_ADDR
// end ; 10 .. 13 :
77063: GO 77573
77065: LD_INT 10
77067: DOUBLE
77068: GREATEREQUAL
77069: IFFALSE 77077
77071: LD_INT 13
77073: DOUBLE
77074: LESSEQUAL
77075: IFTRUE 77079
77077: GO 77156
77079: POP
// begin bc_type := b_lab_full ;
77080: LD_ADDR_OWVAR 42
77084: PUSH
77085: LD_INT 8
77087: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77088: LD_ADDR_OWVAR 44
77092: PUSH
77093: LD_INT 10
77095: PUSH
77096: LD_INT 12
77098: PUSH
77099: LD_INT 14
77101: PUSH
77102: LD_INT 13
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: PUSH
77111: LD_VAR 0 2
77115: PUSH
77116: LD_INT 9
77118: MINUS
77119: ARRAY
77120: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77121: LD_ADDR_OWVAR 45
77125: PUSH
77126: LD_INT 11
77128: PUSH
77129: LD_INT 15
77131: PUSH
77132: LD_INT 12
77134: PUSH
77135: LD_INT 15
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: PUSH
77144: LD_VAR 0 2
77148: PUSH
77149: LD_INT 9
77151: MINUS
77152: ARRAY
77153: ST_TO_ADDR
// end ; 14 :
77154: GO 77573
77156: LD_INT 14
77158: DOUBLE
77159: EQUAL
77160: IFTRUE 77164
77162: GO 77175
77164: POP
// bc_type := b_workshop ; 15 :
77165: LD_ADDR_OWVAR 42
77169: PUSH
77170: LD_INT 2
77172: ST_TO_ADDR
77173: GO 77573
77175: LD_INT 15
77177: DOUBLE
77178: EQUAL
77179: IFTRUE 77183
77181: GO 77194
77183: POP
// bc_type := b_factory ; 16 :
77184: LD_ADDR_OWVAR 42
77188: PUSH
77189: LD_INT 3
77191: ST_TO_ADDR
77192: GO 77573
77194: LD_INT 16
77196: DOUBLE
77197: EQUAL
77198: IFTRUE 77202
77200: GO 77213
77202: POP
// bc_type := b_ext_gun ; 17 :
77203: LD_ADDR_OWVAR 42
77207: PUSH
77208: LD_INT 17
77210: ST_TO_ADDR
77211: GO 77573
77213: LD_INT 17
77215: DOUBLE
77216: EQUAL
77217: IFTRUE 77221
77219: GO 77249
77221: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77222: LD_ADDR_OWVAR 42
77226: PUSH
77227: LD_INT 19
77229: PUSH
77230: LD_INT 23
77232: PUSH
77233: LD_INT 19
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: PUSH
77241: LD_VAR 0 1
77245: ARRAY
77246: ST_TO_ADDR
77247: GO 77573
77249: LD_INT 18
77251: DOUBLE
77252: EQUAL
77253: IFTRUE 77257
77255: GO 77268
77257: POP
// bc_type := b_ext_radar ; 19 :
77258: LD_ADDR_OWVAR 42
77262: PUSH
77263: LD_INT 20
77265: ST_TO_ADDR
77266: GO 77573
77268: LD_INT 19
77270: DOUBLE
77271: EQUAL
77272: IFTRUE 77276
77274: GO 77287
77276: POP
// bc_type := b_ext_radio ; 20 :
77277: LD_ADDR_OWVAR 42
77281: PUSH
77282: LD_INT 22
77284: ST_TO_ADDR
77285: GO 77573
77287: LD_INT 20
77289: DOUBLE
77290: EQUAL
77291: IFTRUE 77295
77293: GO 77306
77295: POP
// bc_type := b_ext_siberium ; 21 :
77296: LD_ADDR_OWVAR 42
77300: PUSH
77301: LD_INT 21
77303: ST_TO_ADDR
77304: GO 77573
77306: LD_INT 21
77308: DOUBLE
77309: EQUAL
77310: IFTRUE 77314
77312: GO 77325
77314: POP
// bc_type := b_ext_computer ; 22 :
77315: LD_ADDR_OWVAR 42
77319: PUSH
77320: LD_INT 24
77322: ST_TO_ADDR
77323: GO 77573
77325: LD_INT 22
77327: DOUBLE
77328: EQUAL
77329: IFTRUE 77333
77331: GO 77344
77333: POP
// bc_type := b_ext_track ; 23 :
77334: LD_ADDR_OWVAR 42
77338: PUSH
77339: LD_INT 16
77341: ST_TO_ADDR
77342: GO 77573
77344: LD_INT 23
77346: DOUBLE
77347: EQUAL
77348: IFTRUE 77352
77350: GO 77363
77352: POP
// bc_type := b_ext_laser ; 24 :
77353: LD_ADDR_OWVAR 42
77357: PUSH
77358: LD_INT 25
77360: ST_TO_ADDR
77361: GO 77573
77363: LD_INT 24
77365: DOUBLE
77366: EQUAL
77367: IFTRUE 77371
77369: GO 77382
77371: POP
// bc_type := b_control_tower ; 25 :
77372: LD_ADDR_OWVAR 42
77376: PUSH
77377: LD_INT 36
77379: ST_TO_ADDR
77380: GO 77573
77382: LD_INT 25
77384: DOUBLE
77385: EQUAL
77386: IFTRUE 77390
77388: GO 77401
77390: POP
// bc_type := b_breastwork ; 26 :
77391: LD_ADDR_OWVAR 42
77395: PUSH
77396: LD_INT 31
77398: ST_TO_ADDR
77399: GO 77573
77401: LD_INT 26
77403: DOUBLE
77404: EQUAL
77405: IFTRUE 77409
77407: GO 77420
77409: POP
// bc_type := b_bunker ; 27 :
77410: LD_ADDR_OWVAR 42
77414: PUSH
77415: LD_INT 32
77417: ST_TO_ADDR
77418: GO 77573
77420: LD_INT 27
77422: DOUBLE
77423: EQUAL
77424: IFTRUE 77428
77426: GO 77439
77428: POP
// bc_type := b_turret ; 28 :
77429: LD_ADDR_OWVAR 42
77433: PUSH
77434: LD_INT 33
77436: ST_TO_ADDR
77437: GO 77573
77439: LD_INT 28
77441: DOUBLE
77442: EQUAL
77443: IFTRUE 77447
77445: GO 77458
77447: POP
// bc_type := b_armoury ; 29 :
77448: LD_ADDR_OWVAR 42
77452: PUSH
77453: LD_INT 4
77455: ST_TO_ADDR
77456: GO 77573
77458: LD_INT 29
77460: DOUBLE
77461: EQUAL
77462: IFTRUE 77466
77464: GO 77477
77466: POP
// bc_type := b_barracks ; 30 :
77467: LD_ADDR_OWVAR 42
77471: PUSH
77472: LD_INT 5
77474: ST_TO_ADDR
77475: GO 77573
77477: LD_INT 30
77479: DOUBLE
77480: EQUAL
77481: IFTRUE 77485
77483: GO 77496
77485: POP
// bc_type := b_solar_power ; 31 :
77486: LD_ADDR_OWVAR 42
77490: PUSH
77491: LD_INT 27
77493: ST_TO_ADDR
77494: GO 77573
77496: LD_INT 31
77498: DOUBLE
77499: EQUAL
77500: IFTRUE 77504
77502: GO 77515
77504: POP
// bc_type := b_oil_power ; 32 :
77505: LD_ADDR_OWVAR 42
77509: PUSH
77510: LD_INT 26
77512: ST_TO_ADDR
77513: GO 77573
77515: LD_INT 32
77517: DOUBLE
77518: EQUAL
77519: IFTRUE 77523
77521: GO 77534
77523: POP
// bc_type := b_siberite_power ; 33 :
77524: LD_ADDR_OWVAR 42
77528: PUSH
77529: LD_INT 28
77531: ST_TO_ADDR
77532: GO 77573
77534: LD_INT 33
77536: DOUBLE
77537: EQUAL
77538: IFTRUE 77542
77540: GO 77553
77542: POP
// bc_type := b_oil_mine ; 34 :
77543: LD_ADDR_OWVAR 42
77547: PUSH
77548: LD_INT 29
77550: ST_TO_ADDR
77551: GO 77573
77553: LD_INT 34
77555: DOUBLE
77556: EQUAL
77557: IFTRUE 77561
77559: GO 77572
77561: POP
// bc_type := b_siberite_mine ; end ;
77562: LD_ADDR_OWVAR 42
77566: PUSH
77567: LD_INT 30
77569: ST_TO_ADDR
77570: GO 77573
77572: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77573: LD_ADDR_VAR 0 8
77577: PUSH
77578: LD_VAR 0 5
77582: PPUSH
77583: LD_VAR 0 6
77587: PPUSH
77588: LD_VAR 0 3
77592: PPUSH
77593: CALL_OW 47
77597: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77598: LD_OWVAR 42
77602: PUSH
77603: LD_INT 32
77605: PUSH
77606: LD_INT 33
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: IN
77613: IFFALSE 77629
// PlaceWeaponTurret ( b , weapon ) ;
77615: LD_VAR 0 8
77619: PPUSH
77620: LD_VAR 0 4
77624: PPUSH
77625: CALL_OW 431
// end ;
77629: LD_VAR 0 7
77633: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77634: LD_INT 0
77636: PPUSH
77637: PPUSH
77638: PPUSH
77639: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77640: LD_ADDR_VAR 0 4
77644: PUSH
77645: LD_INT 22
77647: PUSH
77648: LD_OWVAR 2
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: PUSH
77657: LD_INT 2
77659: PUSH
77660: LD_INT 30
77662: PUSH
77663: LD_INT 0
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 30
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: LIST
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PPUSH
77689: CALL_OW 69
77693: ST_TO_ADDR
// if not tmp then
77694: LD_VAR 0 4
77698: NOT
77699: IFFALSE 77703
// exit ;
77701: GO 77762
// for i in tmp do
77703: LD_ADDR_VAR 0 2
77707: PUSH
77708: LD_VAR 0 4
77712: PUSH
77713: FOR_IN
77714: IFFALSE 77760
// for j = 1 to 3 do
77716: LD_ADDR_VAR 0 3
77720: PUSH
77721: DOUBLE
77722: LD_INT 1
77724: DEC
77725: ST_TO_ADDR
77726: LD_INT 3
77728: PUSH
77729: FOR_TO
77730: IFFALSE 77756
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77732: LD_VAR 0 2
77736: PPUSH
77737: CALL_OW 274
77741: PPUSH
77742: LD_VAR 0 3
77746: PPUSH
77747: LD_INT 99999
77749: PPUSH
77750: CALL_OW 277
77754: GO 77729
77756: POP
77757: POP
77758: GO 77713
77760: POP
77761: POP
// end ;
77762: LD_VAR 0 1
77766: RET
// export function hHackSetLevel10 ; var i , j ; begin
77767: LD_INT 0
77769: PPUSH
77770: PPUSH
77771: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77772: LD_ADDR_VAR 0 2
77776: PUSH
77777: LD_INT 21
77779: PUSH
77780: LD_INT 1
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PPUSH
77787: CALL_OW 69
77791: PUSH
77792: FOR_IN
77793: IFFALSE 77845
// if IsSelected ( i ) then
77795: LD_VAR 0 2
77799: PPUSH
77800: CALL_OW 306
77804: IFFALSE 77843
// begin for j := 1 to 4 do
77806: LD_ADDR_VAR 0 3
77810: PUSH
77811: DOUBLE
77812: LD_INT 1
77814: DEC
77815: ST_TO_ADDR
77816: LD_INT 4
77818: PUSH
77819: FOR_TO
77820: IFFALSE 77841
// SetSkill ( i , j , 10 ) ;
77822: LD_VAR 0 2
77826: PPUSH
77827: LD_VAR 0 3
77831: PPUSH
77832: LD_INT 10
77834: PPUSH
77835: CALL_OW 237
77839: GO 77819
77841: POP
77842: POP
// end ;
77843: GO 77792
77845: POP
77846: POP
// end ;
77847: LD_VAR 0 1
77851: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77852: LD_INT 0
77854: PPUSH
77855: PPUSH
77856: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77857: LD_ADDR_VAR 0 2
77861: PUSH
77862: LD_INT 22
77864: PUSH
77865: LD_OWVAR 2
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 21
77876: PUSH
77877: LD_INT 1
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PPUSH
77888: CALL_OW 69
77892: PUSH
77893: FOR_IN
77894: IFFALSE 77935
// begin for j := 1 to 4 do
77896: LD_ADDR_VAR 0 3
77900: PUSH
77901: DOUBLE
77902: LD_INT 1
77904: DEC
77905: ST_TO_ADDR
77906: LD_INT 4
77908: PUSH
77909: FOR_TO
77910: IFFALSE 77931
// SetSkill ( i , j , 10 ) ;
77912: LD_VAR 0 2
77916: PPUSH
77917: LD_VAR 0 3
77921: PPUSH
77922: LD_INT 10
77924: PPUSH
77925: CALL_OW 237
77929: GO 77909
77931: POP
77932: POP
// end ;
77933: GO 77893
77935: POP
77936: POP
// end ;
77937: LD_VAR 0 1
77941: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77942: LD_INT 0
77944: PPUSH
// uc_side := your_side ;
77945: LD_ADDR_OWVAR 20
77949: PUSH
77950: LD_OWVAR 2
77954: ST_TO_ADDR
// uc_nation := nation ;
77955: LD_ADDR_OWVAR 21
77959: PUSH
77960: LD_VAR 0 1
77964: ST_TO_ADDR
// InitHc ;
77965: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77969: LD_INT 0
77971: PPUSH
77972: LD_VAR 0 2
77976: PPUSH
77977: LD_VAR 0 3
77981: PPUSH
77982: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77986: LD_VAR 0 4
77990: PPUSH
77991: LD_VAR 0 5
77995: PPUSH
77996: CALL_OW 428
78000: PUSH
78001: LD_INT 0
78003: EQUAL
78004: IFFALSE 78028
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78006: CALL_OW 44
78010: PPUSH
78011: LD_VAR 0 4
78015: PPUSH
78016: LD_VAR 0 5
78020: PPUSH
78021: LD_INT 1
78023: PPUSH
78024: CALL_OW 48
// end ;
78028: LD_VAR 0 6
78032: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78033: LD_INT 0
78035: PPUSH
78036: PPUSH
// uc_side := your_side ;
78037: LD_ADDR_OWVAR 20
78041: PUSH
78042: LD_OWVAR 2
78046: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78047: LD_VAR 0 1
78051: PUSH
78052: LD_INT 1
78054: PUSH
78055: LD_INT 2
78057: PUSH
78058: LD_INT 3
78060: PUSH
78061: LD_INT 4
78063: PUSH
78064: LD_INT 5
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: IN
78074: IFFALSE 78086
// uc_nation := nation_american else
78076: LD_ADDR_OWVAR 21
78080: PUSH
78081: LD_INT 1
78083: ST_TO_ADDR
78084: GO 78129
// if chassis in [ 11 , 12 , 13 , 14 ] then
78086: LD_VAR 0 1
78090: PUSH
78091: LD_INT 11
78093: PUSH
78094: LD_INT 12
78096: PUSH
78097: LD_INT 13
78099: PUSH
78100: LD_INT 14
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: IN
78109: IFFALSE 78121
// uc_nation := nation_arabian else
78111: LD_ADDR_OWVAR 21
78115: PUSH
78116: LD_INT 2
78118: ST_TO_ADDR
78119: GO 78129
// uc_nation := nation_russian ;
78121: LD_ADDR_OWVAR 21
78125: PUSH
78126: LD_INT 3
78128: ST_TO_ADDR
// vc_chassis := chassis ;
78129: LD_ADDR_OWVAR 37
78133: PUSH
78134: LD_VAR 0 1
78138: ST_TO_ADDR
// vc_engine := engine ;
78139: LD_ADDR_OWVAR 39
78143: PUSH
78144: LD_VAR 0 2
78148: ST_TO_ADDR
// vc_control := control ;
78149: LD_ADDR_OWVAR 38
78153: PUSH
78154: LD_VAR 0 3
78158: ST_TO_ADDR
// vc_weapon := weapon ;
78159: LD_ADDR_OWVAR 40
78163: PUSH
78164: LD_VAR 0 4
78168: ST_TO_ADDR
// un := CreateVehicle ;
78169: LD_ADDR_VAR 0 8
78173: PUSH
78174: CALL_OW 45
78178: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78179: LD_VAR 0 8
78183: PPUSH
78184: LD_INT 0
78186: PPUSH
78187: LD_INT 5
78189: PPUSH
78190: CALL_OW 12
78194: PPUSH
78195: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78199: LD_VAR 0 8
78203: PPUSH
78204: LD_VAR 0 5
78208: PPUSH
78209: LD_VAR 0 6
78213: PPUSH
78214: LD_INT 1
78216: PPUSH
78217: CALL_OW 48
// end ;
78221: LD_VAR 0 7
78225: RET
// export hInvincible ; every 1 do
78226: GO 78228
78228: DISABLE
// hInvincible := [ ] ;
78229: LD_ADDR_EXP 104
78233: PUSH
78234: EMPTY
78235: ST_TO_ADDR
78236: END
// every 10 do var i ;
78237: GO 78239
78239: DISABLE
78240: LD_INT 0
78242: PPUSH
// begin enable ;
78243: ENABLE
// if not hInvincible then
78244: LD_EXP 104
78248: NOT
78249: IFFALSE 78253
// exit ;
78251: GO 78297
// for i in hInvincible do
78253: LD_ADDR_VAR 0 1
78257: PUSH
78258: LD_EXP 104
78262: PUSH
78263: FOR_IN
78264: IFFALSE 78295
// if GetLives ( i ) < 1000 then
78266: LD_VAR 0 1
78270: PPUSH
78271: CALL_OW 256
78275: PUSH
78276: LD_INT 1000
78278: LESS
78279: IFFALSE 78293
// SetLives ( i , 1000 ) ;
78281: LD_VAR 0 1
78285: PPUSH
78286: LD_INT 1000
78288: PPUSH
78289: CALL_OW 234
78293: GO 78263
78295: POP
78296: POP
// end ;
78297: PPOPN 1
78299: END
// export function hHackInvincible ; var i ; begin
78300: LD_INT 0
78302: PPUSH
78303: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78304: LD_ADDR_VAR 0 2
78308: PUSH
78309: LD_INT 2
78311: PUSH
78312: LD_INT 21
78314: PUSH
78315: LD_INT 1
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PUSH
78322: LD_INT 21
78324: PUSH
78325: LD_INT 2
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: LIST
78336: PPUSH
78337: CALL_OW 69
78341: PUSH
78342: FOR_IN
78343: IFFALSE 78404
// if IsSelected ( i ) then
78345: LD_VAR 0 2
78349: PPUSH
78350: CALL_OW 306
78354: IFFALSE 78402
// begin if i in hInvincible then
78356: LD_VAR 0 2
78360: PUSH
78361: LD_EXP 104
78365: IN
78366: IFFALSE 78386
// hInvincible := hInvincible diff i else
78368: LD_ADDR_EXP 104
78372: PUSH
78373: LD_EXP 104
78377: PUSH
78378: LD_VAR 0 2
78382: DIFF
78383: ST_TO_ADDR
78384: GO 78402
// hInvincible := hInvincible union i ;
78386: LD_ADDR_EXP 104
78390: PUSH
78391: LD_EXP 104
78395: PUSH
78396: LD_VAR 0 2
78400: UNION
78401: ST_TO_ADDR
// end ;
78402: GO 78342
78404: POP
78405: POP
// end ;
78406: LD_VAR 0 1
78410: RET
// export function hHackInvisible ; var i , j ; begin
78411: LD_INT 0
78413: PPUSH
78414: PPUSH
78415: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78416: LD_ADDR_VAR 0 2
78420: PUSH
78421: LD_INT 21
78423: PUSH
78424: LD_INT 1
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PPUSH
78431: CALL_OW 69
78435: PUSH
78436: FOR_IN
78437: IFFALSE 78461
// if IsSelected ( i ) then
78439: LD_VAR 0 2
78443: PPUSH
78444: CALL_OW 306
78448: IFFALSE 78459
// ComForceInvisible ( i ) ;
78450: LD_VAR 0 2
78454: PPUSH
78455: CALL_OW 496
78459: GO 78436
78461: POP
78462: POP
// end ;
78463: LD_VAR 0 1
78467: RET
// export function hHackChangeYourSide ; begin
78468: LD_INT 0
78470: PPUSH
// if your_side = 8 then
78471: LD_OWVAR 2
78475: PUSH
78476: LD_INT 8
78478: EQUAL
78479: IFFALSE 78491
// your_side := 0 else
78481: LD_ADDR_OWVAR 2
78485: PUSH
78486: LD_INT 0
78488: ST_TO_ADDR
78489: GO 78505
// your_side := your_side + 1 ;
78491: LD_ADDR_OWVAR 2
78495: PUSH
78496: LD_OWVAR 2
78500: PUSH
78501: LD_INT 1
78503: PLUS
78504: ST_TO_ADDR
// end ;
78505: LD_VAR 0 1
78509: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78510: LD_INT 0
78512: PPUSH
78513: PPUSH
78514: PPUSH
// for i in all_units do
78515: LD_ADDR_VAR 0 2
78519: PUSH
78520: LD_OWVAR 3
78524: PUSH
78525: FOR_IN
78526: IFFALSE 78604
// if IsSelected ( i ) then
78528: LD_VAR 0 2
78532: PPUSH
78533: CALL_OW 306
78537: IFFALSE 78602
// begin j := GetSide ( i ) ;
78539: LD_ADDR_VAR 0 3
78543: PUSH
78544: LD_VAR 0 2
78548: PPUSH
78549: CALL_OW 255
78553: ST_TO_ADDR
// if j = 8 then
78554: LD_VAR 0 3
78558: PUSH
78559: LD_INT 8
78561: EQUAL
78562: IFFALSE 78574
// j := 0 else
78564: LD_ADDR_VAR 0 3
78568: PUSH
78569: LD_INT 0
78571: ST_TO_ADDR
78572: GO 78588
// j := j + 1 ;
78574: LD_ADDR_VAR 0 3
78578: PUSH
78579: LD_VAR 0 3
78583: PUSH
78584: LD_INT 1
78586: PLUS
78587: ST_TO_ADDR
// SetSide ( i , j ) ;
78588: LD_VAR 0 2
78592: PPUSH
78593: LD_VAR 0 3
78597: PPUSH
78598: CALL_OW 235
// end ;
78602: GO 78525
78604: POP
78605: POP
// end ;
78606: LD_VAR 0 1
78610: RET
// export function hHackFog ; begin
78611: LD_INT 0
78613: PPUSH
// FogOff ( true ) ;
78614: LD_INT 1
78616: PPUSH
78617: CALL_OW 344
// end ;
78621: LD_VAR 0 1
78625: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78626: LD_INT 0
78628: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78629: LD_VAR 0 1
78633: PPUSH
78634: LD_VAR 0 2
78638: PPUSH
78639: LD_VAR 0 3
78643: PPUSH
78644: LD_INT 1
78646: PPUSH
78647: LD_INT 1
78649: PPUSH
78650: CALL_OW 483
// CenterOnXY ( x , y ) ;
78654: LD_VAR 0 2
78658: PPUSH
78659: LD_VAR 0 3
78663: PPUSH
78664: CALL_OW 84
// end ;
78668: LD_VAR 0 4
78672: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78673: LD_INT 0
78675: PPUSH
78676: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78677: LD_VAR 0 1
78681: NOT
78682: PUSH
78683: LD_VAR 0 2
78687: PPUSH
78688: LD_VAR 0 3
78692: PPUSH
78693: CALL_OW 488
78697: NOT
78698: OR
78699: PUSH
78700: LD_VAR 0 1
78704: PPUSH
78705: CALL_OW 266
78709: PUSH
78710: LD_INT 3
78712: NONEQUAL
78713: PUSH
78714: LD_VAR 0 1
78718: PPUSH
78719: CALL_OW 247
78723: PUSH
78724: LD_INT 1
78726: EQUAL
78727: NOT
78728: AND
78729: OR
78730: IFFALSE 78734
// exit ;
78732: GO 78883
// if GetType ( factory ) = unit_human then
78734: LD_VAR 0 1
78738: PPUSH
78739: CALL_OW 247
78743: PUSH
78744: LD_INT 1
78746: EQUAL
78747: IFFALSE 78764
// factory := IsInUnit ( factory ) ;
78749: LD_ADDR_VAR 0 1
78753: PUSH
78754: LD_VAR 0 1
78758: PPUSH
78759: CALL_OW 310
78763: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78764: LD_VAR 0 1
78768: PPUSH
78769: CALL_OW 266
78773: PUSH
78774: LD_INT 3
78776: NONEQUAL
78777: IFFALSE 78781
// exit ;
78779: GO 78883
// if HexInfo ( x , y ) = factory then
78781: LD_VAR 0 2
78785: PPUSH
78786: LD_VAR 0 3
78790: PPUSH
78791: CALL_OW 428
78795: PUSH
78796: LD_VAR 0 1
78800: EQUAL
78801: IFFALSE 78828
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
78803: LD_ADDR_EXP 105
78807: PUSH
78808: LD_EXP 105
78812: PPUSH
78813: LD_VAR 0 1
78817: PPUSH
78818: LD_INT 0
78820: PPUSH
78821: CALL_OW 1
78825: ST_TO_ADDR
78826: GO 78879
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
78828: LD_ADDR_EXP 105
78832: PUSH
78833: LD_EXP 105
78837: PPUSH
78838: LD_VAR 0 1
78842: PPUSH
78843: LD_VAR 0 1
78847: PPUSH
78848: CALL_OW 255
78852: PUSH
78853: LD_VAR 0 1
78857: PUSH
78858: LD_VAR 0 2
78862: PUSH
78863: LD_VAR 0 3
78867: PUSH
78868: EMPTY
78869: LIST
78870: LIST
78871: LIST
78872: LIST
78873: PPUSH
78874: CALL_OW 1
78878: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78879: CALL 78888 0 0
// end ;
78883: LD_VAR 0 4
78887: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78888: LD_INT 0
78890: PPUSH
78891: PPUSH
78892: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78893: LD_STRING resetFactoryWaypoint();
78895: PPUSH
78896: CALL_OW 559
// if factoryWaypoints then
78900: LD_EXP 105
78904: IFFALSE 79030
// begin list := PrepareArray ( factoryWaypoints ) ;
78906: LD_ADDR_VAR 0 3
78910: PUSH
78911: LD_EXP 105
78915: PPUSH
78916: CALL 57948 0 1
78920: ST_TO_ADDR
// for i := 1 to list do
78921: LD_ADDR_VAR 0 2
78925: PUSH
78926: DOUBLE
78927: LD_INT 1
78929: DEC
78930: ST_TO_ADDR
78931: LD_VAR 0 3
78935: PUSH
78936: FOR_TO
78937: IFFALSE 79028
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78939: LD_STRING setFactoryWaypointXY(
78941: PUSH
78942: LD_VAR 0 3
78946: PUSH
78947: LD_VAR 0 2
78951: ARRAY
78952: PUSH
78953: LD_INT 1
78955: ARRAY
78956: STR
78957: PUSH
78958: LD_STRING ,
78960: STR
78961: PUSH
78962: LD_VAR 0 3
78966: PUSH
78967: LD_VAR 0 2
78971: ARRAY
78972: PUSH
78973: LD_INT 2
78975: ARRAY
78976: STR
78977: PUSH
78978: LD_STRING ,
78980: STR
78981: PUSH
78982: LD_VAR 0 3
78986: PUSH
78987: LD_VAR 0 2
78991: ARRAY
78992: PUSH
78993: LD_INT 3
78995: ARRAY
78996: STR
78997: PUSH
78998: LD_STRING ,
79000: STR
79001: PUSH
79002: LD_VAR 0 3
79006: PUSH
79007: LD_VAR 0 2
79011: ARRAY
79012: PUSH
79013: LD_INT 4
79015: ARRAY
79016: STR
79017: PUSH
79018: LD_STRING )
79020: STR
79021: PPUSH
79022: CALL_OW 559
79026: GO 78936
79028: POP
79029: POP
// end ; end ;
79030: LD_VAR 0 1
79034: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79035: LD_INT 0
79037: PPUSH
// if HexInfo ( x , y ) = warehouse then
79038: LD_VAR 0 2
79042: PPUSH
79043: LD_VAR 0 3
79047: PPUSH
79048: CALL_OW 428
79052: PUSH
79053: LD_VAR 0 1
79057: EQUAL
79058: IFFALSE 79085
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79060: LD_ADDR_EXP 106
79064: PUSH
79065: LD_EXP 106
79069: PPUSH
79070: LD_VAR 0 1
79074: PPUSH
79075: LD_INT 0
79077: PPUSH
79078: CALL_OW 1
79082: ST_TO_ADDR
79083: GO 79136
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79085: LD_ADDR_EXP 106
79089: PUSH
79090: LD_EXP 106
79094: PPUSH
79095: LD_VAR 0 1
79099: PPUSH
79100: LD_VAR 0 1
79104: PPUSH
79105: CALL_OW 255
79109: PUSH
79110: LD_VAR 0 1
79114: PUSH
79115: LD_VAR 0 2
79119: PUSH
79120: LD_VAR 0 3
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: LIST
79129: LIST
79130: PPUSH
79131: CALL_OW 1
79135: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79136: CALL 79145 0 0
// end ;
79140: LD_VAR 0 4
79144: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79145: LD_INT 0
79147: PPUSH
79148: PPUSH
79149: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79150: LD_STRING resetWarehouseGatheringPoints();
79152: PPUSH
79153: CALL_OW 559
// if warehouseGatheringPoints then
79157: LD_EXP 106
79161: IFFALSE 79287
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79163: LD_ADDR_VAR 0 3
79167: PUSH
79168: LD_EXP 106
79172: PPUSH
79173: CALL 57948 0 1
79177: ST_TO_ADDR
// for i := 1 to list do
79178: LD_ADDR_VAR 0 2
79182: PUSH
79183: DOUBLE
79184: LD_INT 1
79186: DEC
79187: ST_TO_ADDR
79188: LD_VAR 0 3
79192: PUSH
79193: FOR_TO
79194: IFFALSE 79285
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79196: LD_STRING setWarehouseGatheringPointXY(
79198: PUSH
79199: LD_VAR 0 3
79203: PUSH
79204: LD_VAR 0 2
79208: ARRAY
79209: PUSH
79210: LD_INT 1
79212: ARRAY
79213: STR
79214: PUSH
79215: LD_STRING ,
79217: STR
79218: PUSH
79219: LD_VAR 0 3
79223: PUSH
79224: LD_VAR 0 2
79228: ARRAY
79229: PUSH
79230: LD_INT 2
79232: ARRAY
79233: STR
79234: PUSH
79235: LD_STRING ,
79237: STR
79238: PUSH
79239: LD_VAR 0 3
79243: PUSH
79244: LD_VAR 0 2
79248: ARRAY
79249: PUSH
79250: LD_INT 3
79252: ARRAY
79253: STR
79254: PUSH
79255: LD_STRING ,
79257: STR
79258: PUSH
79259: LD_VAR 0 3
79263: PUSH
79264: LD_VAR 0 2
79268: ARRAY
79269: PUSH
79270: LD_INT 4
79272: ARRAY
79273: STR
79274: PUSH
79275: LD_STRING )
79277: STR
79278: PPUSH
79279: CALL_OW 559
79283: GO 79193
79285: POP
79286: POP
// end ; end ;
79287: LD_VAR 0 1
79291: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79292: LD_EXP 106
79296: IFFALSE 79981
79298: GO 79300
79300: DISABLE
79301: LD_INT 0
79303: PPUSH
79304: PPUSH
79305: PPUSH
79306: PPUSH
79307: PPUSH
79308: PPUSH
79309: PPUSH
79310: PPUSH
79311: PPUSH
// begin enable ;
79312: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79313: LD_ADDR_VAR 0 3
79317: PUSH
79318: LD_EXP 106
79322: PPUSH
79323: CALL 57948 0 1
79327: ST_TO_ADDR
// if not list then
79328: LD_VAR 0 3
79332: NOT
79333: IFFALSE 79337
// exit ;
79335: GO 79981
// for i := 1 to list do
79337: LD_ADDR_VAR 0 1
79341: PUSH
79342: DOUBLE
79343: LD_INT 1
79345: DEC
79346: ST_TO_ADDR
79347: LD_VAR 0 3
79351: PUSH
79352: FOR_TO
79353: IFFALSE 79979
// begin depot := list [ i ] [ 2 ] ;
79355: LD_ADDR_VAR 0 8
79359: PUSH
79360: LD_VAR 0 3
79364: PUSH
79365: LD_VAR 0 1
79369: ARRAY
79370: PUSH
79371: LD_INT 2
79373: ARRAY
79374: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79375: LD_ADDR_VAR 0 5
79379: PUSH
79380: LD_VAR 0 3
79384: PUSH
79385: LD_VAR 0 1
79389: ARRAY
79390: PUSH
79391: LD_INT 1
79393: ARRAY
79394: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79395: LD_VAR 0 8
79399: PPUSH
79400: CALL_OW 301
79404: PUSH
79405: LD_VAR 0 5
79409: PUSH
79410: LD_VAR 0 8
79414: PPUSH
79415: CALL_OW 255
79419: NONEQUAL
79420: OR
79421: IFFALSE 79450
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79423: LD_ADDR_EXP 106
79427: PUSH
79428: LD_EXP 106
79432: PPUSH
79433: LD_VAR 0 8
79437: PPUSH
79438: LD_INT 0
79440: PPUSH
79441: CALL_OW 1
79445: ST_TO_ADDR
// exit ;
79446: POP
79447: POP
79448: GO 79981
// end ; x := list [ i ] [ 3 ] ;
79450: LD_ADDR_VAR 0 6
79454: PUSH
79455: LD_VAR 0 3
79459: PUSH
79460: LD_VAR 0 1
79464: ARRAY
79465: PUSH
79466: LD_INT 3
79468: ARRAY
79469: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79470: LD_ADDR_VAR 0 7
79474: PUSH
79475: LD_VAR 0 3
79479: PUSH
79480: LD_VAR 0 1
79484: ARRAY
79485: PUSH
79486: LD_INT 4
79488: ARRAY
79489: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79490: LD_ADDR_VAR 0 9
79494: PUSH
79495: LD_VAR 0 6
79499: PPUSH
79500: LD_VAR 0 7
79504: PPUSH
79505: LD_INT 16
79507: PPUSH
79508: CALL 56536 0 3
79512: ST_TO_ADDR
// if not cratesNearbyPoint then
79513: LD_VAR 0 9
79517: NOT
79518: IFFALSE 79524
// exit ;
79520: POP
79521: POP
79522: GO 79981
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79524: LD_ADDR_VAR 0 4
79528: PUSH
79529: LD_INT 22
79531: PUSH
79532: LD_VAR 0 5
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 3
79543: PUSH
79544: LD_INT 60
79546: PUSH
79547: EMPTY
79548: LIST
79549: PUSH
79550: EMPTY
79551: LIST
79552: LIST
79553: PUSH
79554: LD_INT 91
79556: PUSH
79557: LD_VAR 0 8
79561: PUSH
79562: LD_INT 6
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 2
79572: PUSH
79573: LD_INT 25
79575: PUSH
79576: LD_INT 2
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: LD_INT 25
79585: PUSH
79586: LD_INT 16
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: LIST
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: LIST
79602: LIST
79603: PPUSH
79604: CALL_OW 69
79608: PUSH
79609: LD_VAR 0 8
79613: PPUSH
79614: CALL_OW 313
79618: PPUSH
79619: LD_INT 3
79621: PUSH
79622: LD_INT 60
79624: PUSH
79625: EMPTY
79626: LIST
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: LD_INT 2
79634: PUSH
79635: LD_INT 25
79637: PUSH
79638: LD_INT 2
79640: PUSH
79641: EMPTY
79642: LIST
79643: LIST
79644: PUSH
79645: LD_INT 25
79647: PUSH
79648: LD_INT 16
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: LIST
79659: PUSH
79660: EMPTY
79661: LIST
79662: LIST
79663: PPUSH
79664: CALL_OW 72
79668: UNION
79669: ST_TO_ADDR
// if tmp then
79670: LD_VAR 0 4
79674: IFFALSE 79754
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79676: LD_ADDR_VAR 0 4
79680: PUSH
79681: LD_VAR 0 4
79685: PPUSH
79686: LD_INT 3
79688: PPUSH
79689: CALL 54505 0 2
79693: ST_TO_ADDR
// for j in tmp do
79694: LD_ADDR_VAR 0 2
79698: PUSH
79699: LD_VAR 0 4
79703: PUSH
79704: FOR_IN
79705: IFFALSE 79748
// begin if IsInUnit ( j ) then
79707: LD_VAR 0 2
79711: PPUSH
79712: CALL_OW 310
79716: IFFALSE 79727
// ComExit ( j ) ;
79718: LD_VAR 0 2
79722: PPUSH
79723: CALL 54588 0 1
// AddComCollect ( j , x , y ) ;
79727: LD_VAR 0 2
79731: PPUSH
79732: LD_VAR 0 6
79736: PPUSH
79737: LD_VAR 0 7
79741: PPUSH
79742: CALL_OW 177
// end ;
79746: GO 79704
79748: POP
79749: POP
// exit ;
79750: POP
79751: POP
79752: GO 79981
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79754: LD_ADDR_VAR 0 4
79758: PUSH
79759: LD_INT 22
79761: PUSH
79762: LD_VAR 0 5
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PUSH
79771: LD_INT 91
79773: PUSH
79774: LD_VAR 0 8
79778: PUSH
79779: LD_INT 8
79781: PUSH
79782: EMPTY
79783: LIST
79784: LIST
79785: LIST
79786: PUSH
79787: LD_INT 2
79789: PUSH
79790: LD_INT 34
79792: PUSH
79793: LD_INT 12
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 34
79802: PUSH
79803: LD_INT 51
79805: PUSH
79806: EMPTY
79807: LIST
79808: LIST
79809: PUSH
79810: LD_INT 34
79812: PUSH
79813: LD_INT 32
79815: PUSH
79816: EMPTY
79817: LIST
79818: LIST
79819: PUSH
79820: LD_INT 34
79822: PUSH
79823: LD_INT 89
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: EMPTY
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: PUSH
79837: EMPTY
79838: LIST
79839: LIST
79840: LIST
79841: PPUSH
79842: CALL_OW 69
79846: ST_TO_ADDR
// if tmp then
79847: LD_VAR 0 4
79851: IFFALSE 79977
// begin for j in tmp do
79853: LD_ADDR_VAR 0 2
79857: PUSH
79858: LD_VAR 0 4
79862: PUSH
79863: FOR_IN
79864: IFFALSE 79975
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79866: LD_VAR 0 2
79870: PPUSH
79871: CALL_OW 262
79875: PUSH
79876: LD_INT 3
79878: EQUAL
79879: PUSH
79880: LD_VAR 0 2
79884: PPUSH
79885: CALL_OW 261
79889: PUSH
79890: LD_INT 20
79892: GREATER
79893: OR
79894: PUSH
79895: LD_VAR 0 2
79899: PPUSH
79900: CALL_OW 314
79904: NOT
79905: AND
79906: PUSH
79907: LD_VAR 0 2
79911: PPUSH
79912: CALL_OW 263
79916: PUSH
79917: LD_INT 1
79919: NONEQUAL
79920: PUSH
79921: LD_VAR 0 2
79925: PPUSH
79926: CALL_OW 311
79930: OR
79931: AND
79932: IFFALSE 79973
// begin ComCollect ( j , x , y ) ;
79934: LD_VAR 0 2
79938: PPUSH
79939: LD_VAR 0 6
79943: PPUSH
79944: LD_VAR 0 7
79948: PPUSH
79949: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79953: LD_VAR 0 2
79957: PPUSH
79958: LD_VAR 0 8
79962: PPUSH
79963: CALL_OW 172
// exit ;
79967: POP
79968: POP
79969: POP
79970: POP
79971: GO 79981
// end ;
79973: GO 79863
79975: POP
79976: POP
// end ; end ;
79977: GO 79352
79979: POP
79980: POP
// end ; end_of_file
79981: PPOPN 9
79983: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79984: LD_VAR 0 1
79988: PPUSH
79989: LD_VAR 0 2
79993: PPUSH
79994: LD_VAR 0 3
79998: PPUSH
79999: LD_VAR 0 4
80003: PPUSH
80004: LD_VAR 0 5
80008: PPUSH
80009: LD_VAR 0 6
80013: PPUSH
80014: CALL 64337 0 6
// end ;
80018: PPOPN 6
80020: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80021: LD_INT 0
80023: PPUSH
// begin if not units then
80024: LD_VAR 0 1
80028: NOT
80029: IFFALSE 80033
// exit ;
80031: GO 80033
// end ;
80033: PPOPN 7
80035: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80036: CALL 64241 0 0
// end ; end_of_file
80040: PPOPN 1
80042: END
