// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 7463 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 15684 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 15684 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 15684 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 15684 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 15684 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 15684 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 15684 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 15684 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 15684 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 15684 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 15684 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 15684 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 54513 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: LD_INT 21
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL_OW 69
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2678
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2643: LD_VAR 0 2
2647: PPUSH
2648: LD_INT 6
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: LD_INT 8
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_OWVAR 67
2670: ARRAY
2671: PPUSH
2672: CALL_OW 241
2676: GO 2640
2678: POP
2679: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 32
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 69
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2791
// begin if GetBWeapon ( i ) = us_radar then
2703: LD_VAR 0 2
2707: PPUSH
2708: CALL_OW 269
2712: PUSH
2713: LD_INT 11
2715: EQUAL
2716: IFFALSE 2741
// begin uc_nation := 0 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 16
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: CALL_OW 380
// end else
2739: GO 2775
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 5
2749: PUSH
2750: LD_INT 6
2752: PUSH
2753: LD_INT 7
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_OWVAR 67
2769: ARRAY
2770: PPUSH
2771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2775: CALL_OW 44
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: CALL_OW 52
// end ;
2789: GO 2700
2791: POP
2792: POP
// b := HexInfo ( 74 , 120 ) ;
2793: LD_ADDR_VAR 0 3
2797: PUSH
2798: LD_INT 74
2800: PPUSH
2801: LD_INT 120
2803: PPUSH
2804: CALL_OW 428
2808: ST_TO_ADDR
// uc_nation := 1 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 1
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: LD_INT 4
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: PUSH
2845: LD_OWVAR 67
2849: ARRAY
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2904
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 5
2862: PUSH
2863: LD_INT 6
2865: PUSH
2866: LD_INT 7
2868: PUSH
2869: LD_INT 8
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_OWVAR 67
2882: ARRAY
2883: PPUSH
2884: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2888: CALL_OW 44
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 52
// end ;
2902: GO 2851
2904: POP
2905: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: CALL_OW 313
2915: PPUSH
2916: LD_INT 5
2918: PPUSH
2919: CALL_OW 336
// for i := 1 to 6 do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_INT 6
2935: PUSH
2936: FOR_TO
2937: IFFALSE 2987
// begin PrepareHuman ( false , 4 , 6 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: LD_INT 6
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_INT 32
2959: PUSH
2960: LD_INT 33
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: MOD
2975: PUSH
2976: LD_INT 1
2978: PLUS
2979: ARRAY
2980: PPUSH
2981: CALL_OW 52
// end ;
2985: GO 2936
2987: POP
2988: POP
// for i := 1 to 3 do
2989: LD_ADDR_VAR 0 2
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3032
// begin PrepareHuman ( false , 3 , 6 ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 3
3010: PPUSH
3011: LD_INT 6
3013: PPUSH
3014: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3018: CALL_OW 44
3022: PPUSH
3023: LD_INT 25
3025: PPUSH
3026: CALL_OW 52
// end ;
3030: GO 3002
3032: POP
3033: POP
// for i := 1 to 3 do
3034: LD_ADDR_VAR 0 2
3038: PUSH
3039: DOUBLE
3040: LD_INT 1
3042: DEC
3043: ST_TO_ADDR
3044: LD_INT 3
3046: PUSH
3047: FOR_TO
3048: IFFALSE 3106
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3050: LD_INT 0
3052: PPUSH
3053: LD_INT 3
3055: PPUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: LD_INT 7
3064: PUSH
3065: LD_INT 7
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_OWVAR 67
3078: ARRAY
3079: PPUSH
3080: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3084: CALL_OW 44
3088: PPUSH
3089: LD_INT 78
3091: PPUSH
3092: LD_INT 130
3094: PPUSH
3095: CALL_OW 428
3099: PPUSH
3100: CALL_OW 52
// end ;
3104: GO 3047
3106: POP
3107: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 1
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: LD_OWVAR 67
3140: ARRAY
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3230
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_INT 13
3156: PPUSH
3157: LD_INT 100
3159: PPUSH
3160: CALL 20699 0 5
// veh := CreateVehicle ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 45
3173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 9
3193: PPUSH
3194: LD_INT 0
3196: PPUSH
3197: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 3
3206: PPUSH
3207: LD_INT 6
3209: PPUSH
3210: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3214: CALL_OW 44
3218: PPUSH
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 52
// end ;
3228: GO 3142
3230: POP
3231: POP
// InitHc ;
3232: CALL_OW 19
// hc_gallery := us ;
3236: LD_ADDR_OWVAR 33
3240: PUSH
3241: LD_STRING us
3243: ST_TO_ADDR
// hc_face_number := 26 ;
3244: LD_ADDR_OWVAR 34
3248: PUSH
3249: LD_INT 26
3251: ST_TO_ADDR
// hc_name := Doug Callahan ;
3252: LD_ADDR_OWVAR 26
3256: PUSH
3257: LD_STRING Doug Callahan
3259: ST_TO_ADDR
// hc_class := class_engineer ;
3260: LD_ADDR_OWVAR 28
3264: PUSH
3265: LD_INT 2
3267: ST_TO_ADDR
// hc_sex := sex_male ;
3268: LD_ADDR_OWVAR 27
3272: PUSH
3273: LD_INT 1
3275: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3276: LD_ADDR_OWVAR 29
3280: PUSH
3281: LD_INT 10
3283: PUSH
3284: LD_INT 11
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3291: LD_ADDR_OWVAR 30
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 0
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3314: LD_ADDR_OWVAR 31
3318: PUSH
3319: LD_INT 4
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: LD_INT 3
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: ST_TO_ADDR
// usCommander := CreateHuman ;
3337: LD_ADDR_EXP 30
3341: PUSH
3342: CALL_OW 44
3346: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3347: LD_EXP 30
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3359: LD_INT 2
3361: PPUSH
3362: LD_EXP 30
3366: PPUSH
3367: CALL_OW 471
// InitHC_All ( ) ;
3371: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: LD_INT 12
3386: PPUSH
3387: LD_INT 100
3389: PPUSH
3390: CALL 20699 0 5
// usCargo := CreateVehicle ;
3394: LD_ADDR_EXP 32
3398: PUSH
3399: CALL_OW 45
3403: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3404: LD_EXP 32
3408: PPUSH
3409: LD_INT 81
3411: PPUSH
3412: LD_INT 143
3414: PPUSH
3415: LD_INT 0
3417: PPUSH
3418: CALL_OW 48
// Connect ( usCargo ) ;
3422: LD_EXP 32
3426: PPUSH
3427: CALL 23790 0 1
// DoNotAttack ( 5 , usCargo ) ;
3431: LD_INT 5
3433: PPUSH
3434: LD_EXP 32
3438: PPUSH
3439: CALL_OW 471
// end ;
3443: LD_VAR 0 1
3447: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3448: LD_EXP 31
3452: NOT
3453: PUSH
3454: LD_EXP 6
3458: AND
3459: PUSH
3460: LD_INT 25
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: PUSH
3469: LD_INT 25
3471: PPUSH
3472: CALL_OW 461
3476: PUSH
3477: LD_INT 2
3479: EQUAL
3480: AND
3481: IFFALSE 3638
3483: GO 3485
3485: DISABLE
3486: LD_INT 0
3488: PPUSH
3489: PPUSH
3490: PPUSH
// begin enable ;
3491: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 4
3504: PUSH
3505: LD_INT 5
3507: PUSH
3508: LD_INT 6
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: PUSH
3520: LD_OWVAR 67
3524: ARRAY
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3636
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 1
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: CALL_OW 12
3558: ARRAY
3559: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3560: LD_VAR 0 2
3564: PUSH
3565: LD_INT 4
3567: EQUAL
3568: IFFALSE 3580
// weapon := us_heavy_gun else
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_INT 6
3577: ST_TO_ADDR
3578: GO 3611
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_INT 5
3587: PUSH
3588: LD_INT 7
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3611: LD_INT 25
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: LD_INT 1
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: LD_VAR 0 3
3629: PPUSH
3630: CALL_OW 185
// end ;
3634: GO 3526
3636: POP
3637: POP
// end ;
3638: PPOPN 3
3640: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3641: LD_EXP 31
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 6
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: LD_OWVAR 67
3668: ARRAY
3669: GREATEREQUAL
3670: IFFALSE 3781
3672: GO 3674
3674: DISABLE
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
// begin enable ;
3679: ENABLE
// tmp := usForces ;
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: LD_EXP 31
3689: ST_TO_ADDR
// usForces := [ ] ;
3690: LD_ADDR_EXP 31
3694: PUSH
3695: EMPTY
3696: ST_TO_ADDR
// if not tmp then
3697: LD_VAR 0 2
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 3781
// repeat wait ( 0 0$1 ) ;
3706: LD_INT 35
3708: PPUSH
3709: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3713: LD_ADDR_VAR 0 2
3717: PUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 98
3725: PUSH
3726: LD_INT 50
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 114
3735: PUSH
3736: LD_INT 50
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 127
3745: PUSH
3746: LD_INT 51
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 131
3755: PUSH
3756: LD_INT 35
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL 55756 0 2
3773: ST_TO_ADDR
// until not tmp ;
3774: LD_VAR 0 2
3778: NOT
3779: IFFALSE 3706
// end ;
3781: PPOPN 2
3783: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3784: LD_EXP 3
3788: PUSH
3789: LD_EXP 5
3793: NOT
3794: AND
3795: PUSH
3796: LD_INT 11
3798: PPUSH
3799: LD_INT 22
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 70
3813: AND
3814: IFFALSE 3935
3816: GO 3818
3818: DISABLE
3819: LD_INT 0
3821: PPUSH
3822: PPUSH
3823: PPUSH
// begin uc_side := 1 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// uc_nation := 1 ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// tmp := [ ] ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i := 1 to 2 do
3847: LD_ADDR_VAR 0 1
3851: PUSH
3852: DOUBLE
3853: LD_INT 1
3855: DEC
3856: ST_TO_ADDR
3857: LD_INT 2
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3933
// begin PrepareSoldier ( false , 7 ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 7
3868: PPUSH
3869: CALL_OW 381
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 130
3890: PPUSH
3891: LD_INT 153
3893: PPUSH
3894: LD_INT 3
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3916: LD_VAR 0 2
3920: PPUSH
3921: LD_INT 108
3923: PPUSH
3924: LD_INT 108
3926: PPUSH
3927: CALL_OW 174
// end ;
3931: GO 3860
3933: POP
3934: POP
// end ;
3935: PPOPN 3
3937: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3938: LD_EXP 3
3942: PUSH
3943: LD_EXP 5
3947: NOT
3948: AND
3949: PUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 70
3967: AND
3968: IFFALSE 4089
3970: GO 3972
3972: DISABLE
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
// begin uc_side := 1 ;
3978: LD_ADDR_OWVAR 20
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// uc_nation := 1 ;
3986: LD_ADDR_OWVAR 21
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// tmp := [ ] ;
3994: LD_ADDR_VAR 0 3
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i := 1 to 2 do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: DOUBLE
4007: LD_INT 1
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4087
// begin PrepareSoldier ( false , 7 ) ;
4017: LD_INT 0
4019: PPUSH
4020: LD_INT 7
4022: PPUSH
4023: CALL_OW 381
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4037: LD_VAR 0 2
4041: PPUSH
4042: LD_INT 56
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 5
4065: PPUSH
4066: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4070: LD_VAR 0 2
4074: PPUSH
4075: LD_INT 72
4077: PPUSH
4078: LD_INT 92
4080: PPUSH
4081: CALL_OW 174
// end ;
4085: GO 4014
4087: POP
4088: POP
// end ;
4089: PPOPN 3
4091: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4092: LD_EXP 32
4096: PPUSH
4097: CALL_OW 302
4101: PUSH
4102: LD_EXP 7
4106: NOT
4107: AND
4108: IFFALSE 4371
4110: GO 4112
4112: DISABLE
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
// begin enable ;
4117: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 16
4125: PPUSH
4126: LD_INT 81
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 70
4150: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 435
4163: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4164: LD_EXP 32
4168: PPUSH
4169: CALL_OW 261
4173: PUSH
4174: LD_INT 10
4176: LESS
4177: PUSH
4178: LD_INT 2
4180: PPUSH
4181: LD_EXP 32
4185: PPUSH
4186: CALL_OW 292
4190: NOT
4191: AND
4192: IFFALSE 4206
// SetFuel ( usCargo , 100 ) ;
4194: LD_EXP 32
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4206: LD_EXP 32
4210: PPUSH
4211: CALL_OW 314
4215: NOT
4216: PUSH
4217: LD_EXP 32
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 289
4229: PUSH
4230: LD_INT 100
4232: LESS
4233: AND
4234: PUSH
4235: LD_VAR 0 2
4239: NOT
4240: AND
4241: IFFALSE 4307
// begin if cr then
4243: LD_VAR 0 1
4247: IFFALSE 4278
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4249: LD_EXP 32
4253: PPUSH
4254: LD_VAR 0 1
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: PPUSH
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: PPUSH
4272: CALL_OW 117
4276: GO 4305
// if not IsInArea ( usCargo , usCratesArea ) then
4278: LD_EXP 32
4282: PPUSH
4283: LD_INT 12
4285: PPUSH
4286: CALL_OW 308
4290: NOT
4291: IFFALSE 4305
// ComMoveToArea ( usCargo , usCratesArea ) ;
4293: LD_EXP 32
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 113
// exit ;
4305: GO 4371
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_EXP 32
4316: PPUSH
4317: LD_INT 16
4319: PPUSH
4320: CALL_OW 308
4324: NOT
4325: AND
4326: IFFALSE 4345
// ComMoveXY ( usCargo , 80 , 143 ) else
4328: LD_EXP 32
4332: PPUSH
4333: LD_INT 80
4335: PPUSH
4336: LD_INT 143
4338: PPUSH
4339: CALL_OW 111
4343: GO 4371
// if GetCargo ( usCargo , mat_cans ) then
4345: LD_EXP 32
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: CALL_OW 289
4357: IFFALSE 4371
// ComGive ( usCargo , usDepot ) ;
4359: LD_EXP 32
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 161
// end ;
4371: PPOPN 2
4373: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4374: LD_EXP 7
4378: NOT
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 50
4405: PUSH
4406: EMPTY
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 60
4439: PUSH
4440: EMPTY
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 25
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: AND
4467: IFFALSE 4670
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
// begin enable ;
4476: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4477: LD_ADDR_VAR 0 1
4481: PUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 21
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 50
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: PUSH
4525: FOR_IN
4526: IFFALSE 4668
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 60
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 25
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: ST_TO_ADDR
// if not sci then
4576: LD_VAR 0 2
4580: NOT
4581: IFFALSE 4585
// break ;
4583: GO 4668
// sci := sci [ 1 ] ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_VAR 0 2
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: ST_TO_ADDR
// if IsInUnit ( sci ) then
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL_OW 310
4608: IFFALSE 4621
// ComExit ( sci ) else
4610: LD_VAR 0 2
4614: PPUSH
4615: CALL 53550 0 1
4619: GO 4666
// begin ComHeal ( sci , i ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_INT 32
4642: PUSH
4643: LD_INT 33
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 2
4655: PPUSH
4656: CALL_OW 12
4660: ARRAY
4661: PPUSH
4662: CALL_OW 180
// end ; end ;
4666: GO 4525
4668: POP
4669: POP
// end ;
4670: PPOPN 2
4672: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4673: LD_EXP 7
4677: NOT
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 3
4691: PUSH
4692: LD_INT 60
4694: PUSH
4695: EMPTY
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 50
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: LD_INT 34
4710: PUSH
4711: LD_INT 13
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: AND
4729: PUSH
4730: LD_INT 22
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 24
4745: PUSH
4746: LD_INT 1000
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 3
4769: PUSH
4770: LD_INT 30
4772: PUSH
4773: LD_INT 29
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PPUSH
4790: CALL_OW 69
4794: AND
4795: IFFALSE 5064
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// begin enable ;
4805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 24
4826: PUSH
4827: LD_INT 1000
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 21
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 29
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 24
4896: PUSH
4897: LD_INT 600
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 29
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4946: LD_ADDR_VAR 0 1
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 60
4966: PUSH
4967: EMPTY
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 50
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 13
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: PUSH
5001: FOR_IN
5002: IFFALSE 5062
// begin if tmp2 then
5004: LD_VAR 0 3
5008: IFFALSE 5036
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 74
5029: PPUSH
5030: CALL_OW 130
5034: GO 5060
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 74
5055: PPUSH
5056: CALL_OW 130
// end ;
5060: GO 5001
5062: POP
5063: POP
// end ;
5064: PPOPN 3
5066: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5067: LD_EXP 7
5071: NOT
5072: PUSH
5073: LD_INT 16
5075: PPUSH
5076: LD_INT 81
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 50
5088: PUSH
5089: EMPTY
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: NOT
5101: AND
5102: PUSH
5103: LD_EXP 33
5107: AND
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 1
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 60
5124: PUSH
5125: EMPTY
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 50
5134: PUSH
5135: EMPTY
5136: LIST
5137: PUSH
5138: LD_INT 34
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: AND
5159: IFFALSE 5271
5161: GO 5163
5163: DISABLE
// begin enable ;
5164: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5165: LD_INT 22
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 60
5180: PUSH
5181: EMPTY
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 34
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_EXP 33
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_EXP 33
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: LD_EXP 33
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: LD_INT 3
5252: ARRAY
5253: PPUSH
5254: LD_EXP 33
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PUSH
5263: LD_INT 4
5265: ARRAY
5266: PPUSH
5267: CALL_OW 566
// end ;
5271: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5272: LD_INT 22
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 50
5284: PUSH
5285: EMPTY
5286: LIST
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 54
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 25
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 25
5316: PUSH
5317: LD_INT 5
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 25
5326: PUSH
5327: LD_INT 16
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: IFFALSE 5712
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin enable ;
5361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 50
5379: PUSH
5380: EMPTY
5381: LIST
5382: PUSH
5383: LD_INT 3
5385: PUSH
5386: LD_INT 54
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 16
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5446: LD_ADDR_VAR 0 3
5450: PUSH
5451: LD_INT 22
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 50
5463: PUSH
5464: EMPTY
5465: LIST
5466: PUSH
5467: LD_INT 21
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 30
5479: PUSH
5480: LD_INT 32
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 58
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5505: LD_ADDR_VAR 0 4
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 50
5522: PUSH
5523: EMPTY
5524: LIST
5525: PUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 5
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// if not tmp then
5546: LD_VAR 0 2
5550: NOT
5551: IFFALSE 5555
// exit ;
5553: GO 5712
// for i in tmp do
5555: LD_ADDR_VAR 0 1
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5710
// begin btmp := FilterByTag ( btmp , 0 ) ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 0
5580: PPUSH
5581: CALL 50733 0 2
5585: ST_TO_ADDR
// if not btmp then
5586: LD_VAR 0 3
5590: NOT
5591: IFFALSE 5636
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 257
5602: PUSH
5603: LD_INT 16
5605: NONEQUAL
5606: PUSH
5607: LD_VAR 0 4
5611: AND
5612: IFFALSE 5632
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_VAR 0 4
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PPUSH
5628: CALL_OW 120
// continue ;
5632: GO 5565
// end else
5634: GO 5708
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5652: LD_VAR 0 1
5656: PPUSH
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 120
// wait ( 0 0$9 ) ;
5670: LD_INT 315
5672: PPUSH
5673: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 1
5684: ARRAY
5685: PPUSH
5686: CALL 17840 0 1
5690: IFFALSE 5708
// SetTag ( btmp [ 1 ] , 0 ) ;
5692: LD_VAR 0 3
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: PPUSH
5701: LD_INT 0
5703: PPUSH
5704: CALL_OW 109
// end ; end ;
5708: GO 5565
5710: POP
5711: POP
// end ;
5712: PPOPN 4
5714: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5715: LD_INT 22
5717: PUSH
5718: LD_INT 1
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 33
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 50
5737: PUSH
5738: EMPTY
5739: LIST
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 61
5746: PUSH
5747: EMPTY
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PPUSH
5760: CALL_OW 69
5764: IFFALSE 5855
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
// begin enable ;
5773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 50
5801: PUSH
5802: EMPTY
5803: LIST
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 61
5810: PUSH
5811: EMPTY
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: ST_TO_ADDR
// for i in tmp do
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_VAR 0 2
5838: PUSH
5839: FOR_IN
5840: IFFALSE 5853
// Connect ( i ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 23790 0 1
5851: GO 5839
5853: POP
5854: POP
// end ;
5855: PPOPN 2
5857: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5858: LD_EXP 6
5862: PUSH
5863: LD_OWVAR 67
5867: PUSH
5868: LD_INT 1
5870: GREATER
5871: AND
5872: IFFALSE 6314
5874: GO 5876
5876: DISABLE
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5884: LD_INT 31500
5886: PUSH
5887: LD_INT 31500
5889: PUSH
5890: LD_INT 29400
5892: PUSH
5893: LD_INT 27300
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_OWVAR 67
5906: ARRAY
5907: PPUSH
5908: CALL_OW 67
// if usSurrender then
5912: LD_EXP 7
5916: IFFALSE 5920
// exit ;
5918: GO 6314
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5920: LD_ADDR_VAR 0 1
5924: PUSH
5925: DOUBLE
5926: LD_INT 1
5928: DEC
5929: ST_TO_ADDR
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: LD_INT 6
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6259
// begin uc_side := 1 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// uc_nation := 1 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// InitHc_All ( ) ;
5973: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5977: LD_INT 0
5979: PPUSH
5980: LD_INT 3
5982: PPUSH
5983: LD_INT 5
5985: PUSH
5986: LD_INT 6
5988: PUSH
5989: LD_INT 7
5991: PUSH
5992: LD_INT 8
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: PPUSH
6007: CALL_OW 380
// un := CreateHuman ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: CALL_OW 44
6020: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6021: LD_ADDR_VAR 0 4
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6054: LD_VAR 0 4
6058: PUSH
6059: LD_INT 4
6061: EQUAL
6062: IFFALSE 6097
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_INT 6
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: CALL_OW 12
6093: ARRAY
6094: ST_TO_ADDR
6095: GO 6132
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 5
6107: PUSH
6108: LD_INT 7
6110: PUSH
6111: LD_INT 4
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6132: LD_VAR 0 4
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_VAR 0 5
6147: PPUSH
6148: LD_INT 30
6150: PPUSH
6151: CALL 20699 0 5
// veh := CreateVehicle ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: CALL_OW 45
6164: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6165: LD_ADDR_EXP 34
6169: PUSH
6170: LD_EXP 34
6174: PPUSH
6175: LD_EXP 34
6179: PUSH
6180: LD_INT 1
6182: PLUS
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 4
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6221: LD_VAR 0 2
6225: PPUSH
6226: LD_VAR 0 3
6230: PPUSH
6231: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_INT 153
6242: PPUSH
6243: LD_INT 45
6245: PPUSH
6246: CALL_OW 111
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// end ;
6257: GO 5954
6259: POP
6260: POP
// repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6268: LD_ADDR_EXP 34
6272: PUSH
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 150
6280: PUSH
6281: LD_INT 36
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 138
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL 55756 0 2
6306: ST_TO_ADDR
// until not usAdditionalForces ;
6307: LD_EXP 34
6311: NOT
6312: IFFALSE 6261
// end ;
6314: PPOPN 5
6316: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6317: LD_INT 22
6319: PUSH
6320: LD_INT 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 101
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 69
6345: IFFALSE 6365
6347: GO 6349
6349: DISABLE
// begin wait ( 0 0$30 ) ;
6350: LD_INT 1050
6352: PPUSH
6353: CALL_OW 67
// usAttacksAllowed := true ;
6357: LD_ADDR_EXP 6
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// end ; end_of_file
6365: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL 57268 0 1
// if un = Heike then
6375: LD_VAR 0 1
6379: PUSH
6380: LD_EXP 15
6384: EQUAL
6385: IFFALSE 6394
// YouLost ( Heike ) ;
6387: LD_STRING Heike
6389: PPUSH
6390: CALL_OW 104
// if un = usCommander then
6394: LD_VAR 0 1
6398: PUSH
6399: LD_EXP 30
6403: EQUAL
6404: IFFALSE 6413
// YouLost ( Commander ) ;
6406: LD_STRING Commander
6408: PPUSH
6409: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 247
6436: PUSH
6437: LD_INT 2
6439: EQUAL
6440: AND
6441: IFFALSE 6458
// vehLossCounter := Inc ( vehLossCounter ) ;
6443: LD_ADDR_EXP 14
6447: PUSH
6448: LD_EXP 14
6452: PPUSH
6453: CALL 54513 0 1
6457: ST_TO_ADDR
// if GetSide ( un ) = 1 then
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 255
6467: PUSH
6468: LD_INT 1
6470: EQUAL
6471: IFFALSE 6794
// begin if GetClass ( un ) = class_sniper then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 257
6482: PUSH
6483: LD_INT 5
6485: EQUAL
6486: IFFALSE 6503
// sniperKillCounter := Inc ( sniperKillCounter ) ;
6488: LD_ADDR_EXP 13
6492: PUSH
6493: LD_EXP 13
6497: PPUSH
6498: CALL 54513 0 1
6502: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 264
6512: PUSH
6513: LD_INT 13
6515: EQUAL
6516: PUSH
6517: LD_INT 25
6519: PPUSH
6520: CALL_OW 302
6524: AND
6525: IFFALSE 6588
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
6527: LD_INT 175
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 1
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 13
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 69
6558: PPUSH
6559: CALL 17786 0 1
6563: MUL
6564: PPUSH
6565: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6569: LD_INT 25
6571: PPUSH
6572: LD_INT 2
6574: PPUSH
6575: LD_INT 2
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_INT 13
6583: PPUSH
6584: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 264
6597: PUSH
6598: LD_INT 12
6600: EQUAL
6601: PUSH
6602: LD_INT 25
6604: PPUSH
6605: CALL_OW 302
6609: AND
6610: IFFALSE 6631
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6612: LD_INT 25
6614: PPUSH
6615: LD_INT 2
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 12
6626: PPUSH
6627: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 266
6640: PUSH
6641: LD_INT 32
6643: EQUAL
6644: IFFALSE 6709
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6646: LD_ADDR_EXP 33
6650: PUSH
6651: LD_EXP 33
6655: PPUSH
6656: LD_EXP 33
6660: PUSH
6661: LD_INT 1
6663: PLUS
6664: PPUSH
6665: LD_INT 32
6667: PUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 250
6677: PUSH
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 251
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 254
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 1
6708: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 266
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 4
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: IN
6729: IFFALSE 6794
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6731: LD_ADDR_EXP 33
6735: PUSH
6736: LD_EXP 33
6740: PPUSH
6741: LD_EXP 33
6745: PUSH
6746: LD_INT 1
6748: PLUS
6749: PPUSH
6750: LD_INT 4
6752: PUSH
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 254
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// end ; end ;
6794: PPOPN 1
6796: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 255
6806: PUSH
6807: LD_INT 1
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL_OW 110
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: IFFALSE 6839
// SetTag ( un , 0 ) ;
6827: LD_VAR 0 1
6831: PPUSH
6832: LD_INT 0
6834: PPUSH
6835: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 255
6848: PUSH
6849: LD_INT 1
6851: EQUAL
6852: PUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 264
6862: PUSH
6863: LD_INT 6
6865: EQUAL
6866: AND
6867: PUSH
6868: LD_EXP 11
6872: NOT
6873: AND
6874: IFFALSE 6884
// seeHeavyGun := true ;
6876: LD_ADDR_EXP 11
6880: PUSH
6881: LD_INT 1
6883: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 263
6893: PUSH
6894: LD_INT 2
6896: EQUAL
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 255
6907: PUSH
6908: LD_INT 2
6910: NONEQUAL
6911: AND
6912: IFFALSE 6938
// begin ComUnlink ( un ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 136
// if not seeRemoteVehicle then
6923: LD_EXP 10
6927: NOT
6928: IFFALSE 6938
// seeRemoteVehicle := true ;
6930: LD_ADDR_EXP 10
6934: PUSH
6935: LD_INT 1
6937: ST_TO_ADDR
// end ; end ;
6938: PPOPN 1
6940: END
// on BuildingComplete ( b ) do var i , barracks ;
6941: LD_INT 0
6943: PPUSH
6944: PPUSH
// begin if GetSide ( b ) = 2 then
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 255
6954: PUSH
6955: LD_INT 2
6957: EQUAL
6958: IFFALSE 6996
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 266
6969: PUSH
6970: LD_INT 0
6972: EQUAL
6973: PUSH
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 18
6981: PPUSH
6982: CALL_OW 308
6986: AND
6987: IFFALSE 6996
// SetAchievement ( ACH_WEST ) ;
6989: LD_STRING ACH_WEST
6991: PPUSH
6992: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: LD_INT 1
7008: EQUAL
7009: IFFALSE 7161
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7011: LD_ADDR_EXP 33
7015: PUSH
7016: LD_EXP 33
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 3
7028: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 266
7038: PUSH
7039: LD_INT 4
7041: EQUAL
7042: IFFALSE 7053
// ComUpgrade ( b ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 146
// if GetBType ( b ) = b_bunker then
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 266
7062: PUSH
7063: LD_INT 32
7065: EQUAL
7066: IFFALSE 7161
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 6
7075: PUSH
7076: LD_INT 7
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 2
7088: PPUSH
7089: CALL_OW 12
7093: ARRAY
7094: PPUSH
7095: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 5
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// if barracks then
7133: LD_VAR 0 3
7137: IFFALSE 7161
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7139: LD_VAR 0 3
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PPUSH
7148: CALL_OW 313
7152: PUSH
7153: LD_INT 1
7155: ARRAY
7156: PPUSH
7157: CALL_OW 122
// end ; end ; end ;
7161: PPOPN 3
7163: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7164: LD_VAR 0 1
7168: PPUSH
7169: LD_VAR 0 2
7173: PPUSH
7174: CALL 57388 0 2
// if GetSide ( factory ) = 1 then
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 255
7187: PUSH
7188: LD_INT 1
7190: EQUAL
7191: IFFALSE 7270
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7193: LD_VAR 0 1
7197: PPUSH
7198: CALL_OW 264
7202: PUSH
7203: LD_INT 12
7205: EQUAL
7206: IFFALSE 7218
// usCargo := vehicle ;
7208: LD_ADDR_EXP 32
7212: PUSH
7213: LD_VAR 0 1
7217: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 264
7227: PUSH
7228: LD_INT 12
7230: PUSH
7231: LD_INT 13
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: IN
7238: NOT
7239: IFFALSE 7270
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_EXP 31
7250: PPUSH
7251: LD_EXP 31
7255: PUSH
7256: LD_INT 1
7258: PLUS
7259: PPUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 1
7269: ST_TO_ADDR
// end ; end ;
7270: PPOPN 2
7272: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7273: LD_VAR 0 2
7277: PPUSH
7278: CALL_OW 255
7282: PUSH
7283: LD_INT 1
7285: EQUAL
7286: IFFALSE 7300
// AddComEnterUnit ( un , amFac ) ;
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_INT 25
7295: PPUSH
7296: CALL_OW 180
// end ;
7300: PPOPN 4
7302: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 255
7312: PUSH
7313: LD_INT 1
7315: EQUAL
7316: PUSH
7317: LD_VAR 0 1
7321: PPUSH
7322: CALL_OW 266
7326: PUSH
7327: LD_INT 32
7329: EQUAL
7330: AND
7331: PUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 257
7341: PUSH
7342: LD_INT 1
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: IN
7352: AND
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 30
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 50
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: AND
7390: IFFALSE 7460
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7392: LD_INT 74
7394: PPUSH
7395: LD_INT 120
7397: PPUSH
7398: CALL_OW 428
7402: PPUSH
7403: CALL_OW 313
7407: PUSH
7408: LD_INT 6
7410: LESS
7411: IFFALSE 7460
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7413: LD_VAR 0 2
7417: PPUSH
7418: LD_INT 74
7420: PPUSH
7421: LD_INT 120
7423: PPUSH
7424: CALL_OW 428
7428: PPUSH
7429: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7433: LD_VAR 0 2
7437: PPUSH
7438: CALL_OW 257
7442: PUSH
7443: LD_INT 1
7445: EQUAL
7446: IFFALSE 7460
// AddComChangeProfession ( un , class_sniper ) ;
7448: LD_VAR 0 2
7452: PPUSH
7453: LD_INT 5
7455: PPUSH
7456: CALL_OW 183
// end ; end ; end_of_file
7460: PPOPN 2
7462: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
// Video ( true ) ;
7474: LD_INT 1
7476: PPUSH
7477: CALL 53124 0 1
// music_nat := 1 ;
7481: LD_ADDR_OWVAR 71
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// music_class := music_recon ;
7489: LD_ADDR_OWVAR 72
7493: PUSH
7494: LD_INT 3
7496: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7497: LD_INT 184
7499: PPUSH
7500: LD_INT 142
7502: PPUSH
7503: LD_INT 2
7505: PPUSH
7506: LD_INT 10
7508: NEG
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7514: LD_INT 184
7516: PPUSH
7517: LD_INT 142
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7527: LD_INT 204
7529: PPUSH
7530: LD_INT 151
7532: PPUSH
7533: LD_INT 2
7535: PPUSH
7536: LD_INT 10
7538: NEG
7539: PPUSH
7540: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7544: LD_INT 204
7546: PPUSH
7547: LD_INT 151
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7557: LD_INT 184
7559: PPUSH
7560: LD_INT 142
7562: PPUSH
7563: CALL_OW 86
// wait ( 0 0$2 ) ;
7567: LD_INT 70
7569: PPUSH
7570: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7574: LD_ADDR_VAR 0 5
7578: PUSH
7579: LD_EXP 15
7583: PUSH
7584: LD_EXP 16
7588: PUSH
7589: LD_EXP 17
7593: PUSH
7594: LD_EXP 18
7598: PUSH
7599: LD_EXP 19
7603: PUSH
7604: LD_EXP 20
7608: PUSH
7609: LD_EXP 21
7613: PUSH
7614: LD_EXP 22
7618: PUSH
7619: LD_EXP 24
7623: PUSH
7624: LD_EXP 25
7628: PUSH
7629: LD_EXP 26
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: LD_EXP 27
7651: UNION
7652: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 5
7662: PPUSH
7663: LD_INT 25
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: PUSH
7678: LD_INT 0
7680: GREATER
7681: ST_TO_ADDR
// hasCamera := false ;
7682: LD_ADDR_VAR 0 7
7686: PUSH
7687: LD_INT 0
7689: ST_TO_ADDR
// if not hasEng then
7690: LD_VAR 0 6
7694: NOT
7695: IFFALSE 7723
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7697: LD_VAR 0 5
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_VAR 0 5
7709: PPUSH
7710: CALL_OW 12
7714: ARRAY
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 336
// if heikeVehicles then
7723: LD_EXP 29
7727: IFFALSE 8351
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7729: LD_ADDR_VAR 0 5
7733: PUSH
7734: LD_VAR 0 5
7738: PPUSH
7739: LD_INT 3
7741: PPUSH
7742: CALL 55378 0 2
7746: ST_TO_ADDR
// for i in heikeVehicles do
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_EXP 29
7756: PUSH
7757: FOR_IN
7758: IFFALSE 8349
// begin if not tmp then
7760: LD_VAR 0 5
7764: NOT
7765: IFFALSE 7769
// break ;
7767: GO 8349
// uc_side := 2 ;
7769: LD_ADDR_OWVAR 20
7773: PUSH
7774: LD_INT 2
7776: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7777: LD_ADDR_OWVAR 21
7781: PUSH
7782: LD_VAR 0 2
7786: PUSH
7787: LD_INT 5
7789: ARRAY
7790: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7791: LD_ADDR_OWVAR 37
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7805: LD_ADDR_OWVAR 39
7809: PUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: ARRAY
7818: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7819: LD_ADDR_OWVAR 38
7823: PUSH
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 3
7831: ARRAY
7832: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7833: LD_ADDR_OWVAR 40
7837: PUSH
7838: LD_VAR 0 2
7842: PUSH
7843: LD_INT 4
7845: ARRAY
7846: ST_TO_ADDR
// veh := CreateVehicle ;
7847: LD_ADDR_VAR 0 4
7851: PUSH
7852: CALL_OW 45
7856: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7857: LD_VAR 0 4
7861: PPUSH
7862: LD_INT 4
7864: PPUSH
7865: CALL_OW 233
// if i [ 3 ] = control_manual then
7869: LD_VAR 0 2
7873: PUSH
7874: LD_INT 3
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: EQUAL
7881: IFFALSE 7966
// begin PlaceUnitArea ( veh , startArea , false ) ;
7883: LD_VAR 0 4
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 4
7905: ARRAY
7906: PUSH
7907: LD_INT 31
7909: EQUAL
7910: IFFALSE 7928
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7912: LD_VAR 0 5
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_INT 3
7923: PPUSH
7924: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 4
7941: PPUSH
7942: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7946: LD_ADDR_VAR 0 5
7950: PUSH
7951: LD_VAR 0 5
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 3
7963: ST_TO_ADDR
// end else
7964: GO 8027
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7966: LD_INT 22
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 34
7978: PUSH
7979: LD_INT 31
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 69
7994: IFFALSE 8027
// begin PlaceUnitArea ( veh , startArea , false ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 49
// Connect ( veh ) ;
8011: LD_VAR 0 4
8015: PPUSH
8016: CALL 23790 0 1
// wait ( 0 0$2 ) ;
8020: LD_INT 70
8022: PPUSH
8023: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8027: LD_VAR 0 4
8031: PPUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 6
8039: ARRAY
8040: PPUSH
8041: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8045: LD_VAR 0 4
8049: PPUSH
8050: LD_INT 20
8052: PPUSH
8053: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8057: LD_VAR 0 2
8061: PUSH
8062: LD_INT 7
8064: ARRAY
8065: PUSH
8066: LD_VAR 0 4
8070: PPUSH
8071: CALL_OW 264
8075: PUSH
8076: LD_INT 51
8078: PUSH
8079: LD_INT 32
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: IN
8086: AND
8087: IFFALSE 8138
// begin for j := 1 to 2 do
8089: LD_ADDR_VAR 0 3
8093: PUSH
8094: DOUBLE
8095: LD_INT 1
8097: DEC
8098: ST_TO_ADDR
8099: LD_INT 2
8101: PUSH
8102: FOR_TO
8103: IFFALSE 8136
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_VAR 0 3
8114: PPUSH
8115: LD_VAR 0 2
8119: PUSH
8120: LD_INT 7
8122: ARRAY
8123: PUSH
8124: LD_VAR 0 3
8128: ARRAY
8129: PPUSH
8130: CALL_OW 291
8134: GO 8102
8136: POP
8137: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8138: LD_VAR 0 4
8142: PPUSH
8143: LD_INT 185
8145: PPUSH
8146: LD_INT 144
8148: PPUSH
8149: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8153: LD_VAR 0 4
8157: PPUSH
8158: CALL_OW 263
8162: PUSH
8163: LD_INT 1
8165: EQUAL
8166: PUSH
8167: LD_VAR 0 7
8171: NOT
8172: AND
8173: PUSH
8174: LD_VAR 0 4
8178: PPUSH
8179: CALL_OW 311
8183: PPUSH
8184: CALL_OW 257
8188: PUSH
8189: LD_INT 2
8191: EQUAL
8192: AND
8193: IFFALSE 8298
// begin hasCamera := true ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8203: LD_ADDR_VAR 0 8
8207: PUSH
8208: LD_VAR 0 4
8212: PPUSH
8213: CALL_OW 311
8217: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8218: LD_VAR 0 4
8222: PPUSH
8223: LD_INT 177
8225: PPUSH
8226: LD_INT 138
8228: PPUSH
8229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8233: LD_VAR 0 8
8237: PPUSH
8238: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8242: LD_VAR 0 8
8246: PPUSH
8247: LD_INT 190
8249: PPUSH
8250: LD_INT 150
8252: PPUSH
8253: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8257: LD_VAR 0 8
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8271: LD_VAR 0 8
8275: PPUSH
8276: LD_INT 170
8278: PPUSH
8279: LD_INT 103
8281: PPUSH
8282: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8286: LD_INT 190
8288: PPUSH
8289: LD_INT 150
8291: PPUSH
8292: CALL_OW 84
// end else
8296: GO 8340
// begin AddComWait ( veh , 0 0$2 ) ;
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_INT 70
8305: PPUSH
8306: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8310: LD_VAR 0 4
8314: PPUSH
8315: LD_INT 179
8317: PPUSH
8318: LD_INT 129
8320: PPUSH
8321: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8325: LD_VAR 0 4
8329: PPUSH
8330: LD_INT 170
8332: PPUSH
8333: LD_INT 103
8335: PPUSH
8336: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8340: LD_INT 70
8342: PPUSH
8343: CALL_OW 67
// end ;
8347: GO 7757
8349: POP
8350: POP
// end ; if tmp then
8351: LD_VAR 0 5
8355: IFFALSE 8500
// begin for i in tmp do
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8498
// begin SetDir ( i , 4 ) ;
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_INT 4
8377: PPUSH
8378: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: LD_INT 0
8392: PPUSH
8393: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_INT 185
8404: PPUSH
8405: LD_INT 144
8407: PPUSH
8408: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8412: LD_VAR 0 2
8416: PPUSH
8417: CALL_OW 257
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: PUSH
8426: LD_VAR 0 7
8430: NOT
8431: AND
8432: IFFALSE 8459
// begin hasCamera := true ;
8434: LD_ADDR_VAR 0 7
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_INT 190
8449: PPUSH
8450: LD_INT 150
8452: PPUSH
8453: CALL_OW 217
// end else
8457: GO 8474
// AddComMoveXY ( i , 179 , 129 ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_INT 179
8466: PPUSH
8467: LD_INT 129
8469: PPUSH
8470: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_INT 170
8481: PPUSH
8482: LD_INT 103
8484: PPUSH
8485: CALL_OW 171
// wait ( 0 0$2 ) ;
8489: LD_INT 70
8491: PPUSH
8492: CALL_OW 67
// end ;
8496: GO 8367
8498: POP
8499: POP
// end ; if heikeApes then
8500: LD_EXP 28
8504: IFFALSE 8622
// begin counter := 0 ;
8506: LD_ADDR_VAR 0 9
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// for i in heikeApes do
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: LD_EXP 28
8523: PUSH
8524: FOR_IN
8525: IFFALSE 8620
// begin if counter > 2 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_INT 2
8534: GREATER
8535: IFFALSE 8539
// break ;
8537: GO 8620
// counter := Inc ( counter ) ;
8539: LD_ADDR_VAR 0 9
8543: PUSH
8544: LD_VAR 0 9
8548: PPUSH
8549: CALL 54513 0 1
8553: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_INT 4
8561: PPUSH
8562: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_INT 185
8588: PPUSH
8589: LD_INT 144
8591: PPUSH
8592: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8596: LD_VAR 0 2
8600: PPUSH
8601: LD_INT 170
8603: PPUSH
8604: LD_INT 103
8606: PPUSH
8607: CALL_OW 171
// wait ( 0 0$2 ) ;
8611: LD_INT 70
8613: PPUSH
8614: CALL_OW 67
// end ;
8618: GO 8524
8620: POP
8621: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8622: LD_EXP 15
8626: PPUSH
8627: LD_INT 163
8629: PPUSH
8630: LD_INT 89
8632: PPUSH
8633: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8637: LD_EXP 15
8641: PPUSH
8642: LD_STRING DH-Intro-1
8644: PPUSH
8645: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8649: LD_INT 175
8651: PPUSH
8652: LD_INT 117
8654: PPUSH
8655: CALL_OW 84
// if Markov then
8659: LD_EXP 22
8663: IFFALSE 9238
// begin Say ( Markov , DMar-Intro-2 ) ;
8665: LD_EXP 22
8669: PPUSH
8670: LD_STRING DMar-Intro-2
8672: PPUSH
8673: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8677: LD_EXP 22
8681: PPUSH
8682: LD_STRING DMar-Intro-3
8684: PPUSH
8685: CALL_OW 88
// wait ( 0 0$1 ) ;
8689: LD_INT 35
8691: PPUSH
8692: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8696: LD_EXP 15
8700: PPUSH
8701: CALL_OW 85
// if Kurt then
8705: LD_EXP 25
8709: IFFALSE 8761
// begin if IsInUnit ( Kurt ) then
8711: LD_EXP 25
8715: PPUSH
8716: CALL_OW 310
8720: IFFALSE 8731
// ComExit ( Kurt ) ;
8722: LD_EXP 25
8726: PPUSH
8727: CALL 53550 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8731: LD_EXP 25
8735: PPUSH
8736: LD_INT 130
8738: PPUSH
8739: LD_INT 56
8741: PPUSH
8742: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8746: LD_EXP 25
8750: PPUSH
8751: LD_INT 129
8753: PPUSH
8754: LD_INT 56
8756: PPUSH
8757: CALL_OW 178
// end ; if Kaia then
8761: LD_EXP 20
8765: IFFALSE 8945
// begin Say ( Kaia , DK-Intro-4 ) ;
8767: LD_EXP 20
8771: PPUSH
8772: LD_STRING DK-Intro-4
8774: PPUSH
8775: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8779: LD_EXP 22
8783: PPUSH
8784: LD_STRING DMar-Intro-5
8786: PPUSH
8787: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8791: LD_EXP 22
8795: PPUSH
8796: LD_STRING DMar-Intro-6
8798: PPUSH
8799: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8803: LD_EXP 24
8807: PPUSH
8808: LD_STRING DO-Intro-7
8810: PPUSH
8811: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8815: LD_INT 160
8817: PPUSH
8818: LD_INT 85
8820: PPUSH
8821: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8825: LD_EXP 22
8829: PPUSH
8830: LD_STRING DMar-Intro-8
8832: PPUSH
8833: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8837: LD_EXP 22
8841: PPUSH
8842: LD_STRING DMar-Intro-9
8844: PPUSH
8845: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8849: LD_EXP 22
8853: PPUSH
8854: LD_STRING DMar-Intro-10
8856: PPUSH
8857: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8861: LD_EXP 22
8865: PPUSH
8866: LD_STRING DMar-Intro-11
8868: PPUSH
8869: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DG-Intro-12
8880: PPUSH
8881: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8885: LD_EXP 16
8889: PPUSH
8890: LD_STRING DG-Intro-13
8892: PPUSH
8893: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8897: LD_EXP 16
8901: PPUSH
8902: LD_STRING DG-Intro-14
8904: PPUSH
8905: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8909: LD_EXP 16
8913: PPUSH
8914: LD_STRING DG-Intro-15
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8921: LD_EXP 15
8925: PPUSH
8926: LD_STRING DH-Intro-16
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8933: LD_EXP 22
8937: PPUSH
8938: LD_STRING DMar-Intro-17
8940: PPUSH
8941: CALL_OW 88
// end ; if Kurt and Mike then
8945: LD_EXP 25
8949: PUSH
8950: LD_EXP 17
8954: AND
8955: IFFALSE 9238
// begin CenterNowOnUnits ( Kurt ) ;
8957: LD_EXP 25
8961: PPUSH
8962: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8966: LD_EXP 25
8970: PPUSH
8971: LD_EXP 15
8975: PPUSH
8976: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8980: LD_EXP 25
8984: PPUSH
8985: LD_STRING DKs-Intro-18
8987: PPUSH
8988: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8992: LD_EXP 25
8996: PPUSH
8997: LD_STRING DKs-Intro-19
8999: PPUSH
9000: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9004: LD_EXP 17
9008: PPUSH
9009: CALL_OW 87
// if IsInUnit ( Mike ) then
9013: LD_EXP 17
9017: PPUSH
9018: CALL_OW 310
9022: IFFALSE 9033
// ComExit ( Mike ) ;
9024: LD_EXP 17
9028: PPUSH
9029: CALL 53550 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_INT 129
9040: PPUSH
9041: LD_INT 53
9043: PPUSH
9044: CALL_OW 171
// AddComHold ( Mike ) ;
9048: LD_EXP 17
9052: PPUSH
9053: CALL_OW 200
// wait ( 0 0$2 ) ;
9057: LD_INT 70
9059: PPUSH
9060: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9064: LD_EXP 17
9068: PPUSH
9069: LD_STRING DM-Intro-20
9071: PPUSH
9072: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9076: LD_ADDR_EXP 3
9080: PUSH
9081: LD_STRING Scout
9083: PPUSH
9084: CALL_OW 97
9088: ST_TO_ADDR
// if scoutActive = 1 then
9089: LD_EXP 3
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: IFFALSE 9194
// begin CenterNowOnUnits ( Kurt ) ;
9099: LD_EXP 25
9103: PPUSH
9104: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9108: LD_EXP 15
9112: PPUSH
9113: LD_STRING DH-Intro-21
9115: PPUSH
9116: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9120: LD_EXP 17
9124: PPUSH
9125: LD_STRING DM-Intro-22
9127: PPUSH
9128: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9132: LD_EXP 25
9136: PPUSH
9137: LD_STRING DKs-Intro-23
9139: PPUSH
9140: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9144: LD_EXP 25
9148: PPUSH
9149: LD_INT 5
9151: PPUSH
9152: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9156: LD_EXP 17
9160: PPUSH
9161: LD_INT 5
9163: PPUSH
9164: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9168: LD_EXP 25
9172: PUSH
9173: LD_EXP 17
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: LD_INT 104
9184: PPUSH
9185: LD_INT 66
9187: PPUSH
9188: CALL_OW 111
// end else
9192: GO 9238
// begin scoutActive := 0 ;
9194: LD_ADDR_EXP 3
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9202: LD_EXP 15
9206: PPUSH
9207: LD_STRING DH-Intro-a-21
9209: PPUSH
9210: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9214: LD_EXP 17
9218: PPUSH
9219: LD_STRING DM-Intro-a-22
9221: PPUSH
9222: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9226: LD_EXP 25
9230: PPUSH
9231: LD_STRING DKs-Intro-a-23
9233: PPUSH
9234: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9238: LD_INT 0
9240: PPUSH
9241: CALL 53124 0 1
// music_nat := music_auto ;
9245: LD_ADDR_OWVAR 71
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// music_class := music_auto ;
9253: LD_ADDR_OWVAR 72
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9261: LD_STRING M1
9263: PPUSH
9264: CALL_OW 337
// wait ( 0 0$3 ) ;
9268: LD_INT 105
9270: PPUSH
9271: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9275: LD_EXP 15
9279: PPUSH
9280: LD_STRING DH-Base-1
9282: PPUSH
9283: CALL_OW 88
// if Kaia then
9287: LD_EXP 20
9291: IFFALSE 9401
// begin Say ( Kaia , DK-Base-2 ) ;
9293: LD_EXP 20
9297: PPUSH
9298: LD_STRING DK-Base-2
9300: PPUSH
9301: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9305: LD_EXP 15
9309: PPUSH
9310: LD_STRING DH-Base-3
9312: PPUSH
9313: CALL_OW 88
// if Aviradze then
9317: LD_EXP 26
9321: IFFALSE 9401
// begin Say ( Aviradze , DA-Base-4 ) ;
9323: LD_EXP 26
9327: PPUSH
9328: LD_STRING DA-Base-4
9330: PPUSH
9331: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9335: LD_EXP 20
9339: PPUSH
9340: LD_STRING DK-Base-5
9342: PPUSH
9343: CALL_OW 88
// if Markov then
9347: LD_EXP 22
9351: IFFALSE 9401
// begin Say ( Markov , DMar-Base-6 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DMar-Base-6
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9365: LD_EXP 20
9369: PPUSH
9370: LD_STRING DK-Base-7
9372: PPUSH
9373: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9377: LD_EXP 22
9381: PPUSH
9382: LD_STRING DMar-Base-8
9384: PPUSH
9385: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9389: LD_EXP 22
9393: PPUSH
9394: LD_STRING DMar-Base-9
9396: PPUSH
9397: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9401: CALL_OW 22
// end ;
9405: LD_VAR 0 1
9409: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9410: LD_EXP 5
9414: IFFALSE 10525
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin InGameOn ;
9423: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9427: LD_EXP 17
9431: PUSH
9432: LD_EXP 25
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PPUSH
9441: LD_EXP 15
9445: PPUSH
9446: CALL_OW 119
// ComExit ( Heike ) ;
9450: LD_EXP 15
9454: PPUSH
9455: CALL 53550 0 1
// if IsOk ( Mike ) then
9459: LD_EXP 17
9463: PPUSH
9464: CALL_OW 302
9468: IFFALSE 9486
// AddComTurnUnit ( Heike , Mike ) else
9470: LD_EXP 15
9474: PPUSH
9475: LD_EXP 17
9479: PPUSH
9480: CALL_OW 179
9484: GO 9500
// AddComTurnUnit ( Heike , Kurt ) ;
9486: LD_EXP 15
9490: PPUSH
9491: LD_EXP 25
9495: PPUSH
9496: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9500: LD_EXP 17
9504: PPUSH
9505: CALL_OW 302
9509: PUSH
9510: LD_EXP 25
9514: PPUSH
9515: CALL_OW 302
9519: AND
9520: IFFALSE 9771
// begin CenterNowOnUnits ( Mike ) ;
9522: LD_EXP 17
9526: PPUSH
9527: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9531: LD_EXP 17
9535: PPUSH
9536: LD_STRING DM-Scout-1
9538: PPUSH
9539: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9543: LD_EXP 15
9547: PPUSH
9548: LD_STRING DH-Scout-2
9550: PPUSH
9551: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9555: LD_EXP 25
9559: PPUSH
9560: LD_STRING DKs-Scout-3
9562: PPUSH
9563: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9567: LD_EXP 15
9571: PPUSH
9572: LD_STRING DH-Scout-4
9574: PPUSH
9575: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9579: LD_EXP 15
9583: PPUSH
9584: LD_STRING DH-Scout-5
9586: PPUSH
9587: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: LD_INT 72
9598: PUSH
9599: LD_INT 122
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 89
9608: PUSH
9609: LD_INT 131
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 99
9618: PUSH
9619: LD_INT 139
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 100
9628: PUSH
9629: LD_INT 148
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// for i in tmp do
9642: LD_ADDR_VAR 0 1
9646: PUSH
9647: LD_VAR 0 2
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9711
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9655: LD_VAR 0 1
9659: PUSH
9660: LD_INT 1
9662: ARRAY
9663: PPUSH
9664: LD_VAR 0 1
9668: PUSH
9669: LD_INT 2
9671: ARRAY
9672: PPUSH
9673: LD_INT 2
9675: PPUSH
9676: LD_INT 6
9678: NEG
9679: PPUSH
9680: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: LD_INT 2
9704: PPUSH
9705: CALL_OW 331
// end ;
9709: GO 9652
9711: POP
9712: POP
// CenterOnXY ( 83 , 132 ) ;
9713: LD_INT 83
9715: PPUSH
9716: LD_INT 132
9718: PPUSH
9719: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9723: LD_EXP 25
9727: PPUSH
9728: LD_STRING DKs-Scout-6
9730: PPUSH
9731: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9735: LD_EXP 17
9739: PPUSH
9740: LD_STRING DM-Scout-7
9742: PPUSH
9743: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9747: LD_EXP 17
9751: PPUSH
9752: LD_STRING DM-Scout-8
9754: PPUSH
9755: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9759: LD_EXP 25
9763: PPUSH
9764: LD_STRING DKs-Scout-9
9766: PPUSH
9767: CALL_OW 88
// end ; if IsDead ( Mike ) then
9771: LD_EXP 17
9775: PPUSH
9776: CALL_OW 301
9780: IFFALSE 9947
// begin CenterNowOnUnits ( Kurt ) ;
9782: LD_EXP 25
9786: PPUSH
9787: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9791: LD_EXP 25
9795: PPUSH
9796: LD_STRING DKs-Scout-b-1
9798: PPUSH
9799: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9803: LD_EXP 25
9807: PPUSH
9808: LD_STRING DKs-Scout-b-2
9810: PPUSH
9811: CALL_OW 88
// if IsOk ( Givi ) then
9815: LD_EXP 16
9819: PPUSH
9820: CALL_OW 302
9824: IFFALSE 9899
// begin ComExit ( Givi ) ;
9826: LD_EXP 16
9830: PPUSH
9831: CALL 53550 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9835: LD_EXP 16
9839: PPUSH
9840: LD_EXP 25
9844: PPUSH
9845: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9849: LD_EXP 16
9853: PPUSH
9854: LD_STRING DG-Scout-b-3
9856: PPUSH
9857: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9861: LD_EXP 16
9865: PPUSH
9866: LD_STRING DG-Scout-b-4
9868: PPUSH
9869: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9873: LD_EXP 16
9877: PPUSH
9878: LD_STRING DG-Scout-b-5
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9885: LD_EXP 15
9889: PPUSH
9890: LD_STRING DH-Scout-b-6
9892: PPUSH
9893: CALL_OW 88
// end else
9897: GO 9911
// Say ( Heike , DH-Scout-a-4 ) ;
9899: LD_EXP 15
9903: PPUSH
9904: LD_STRING DH-Scout-a-4
9906: PPUSH
9907: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9911: LD_EXP 25
9915: PPUSH
9916: LD_STRING DKs-Scout-b-7
9918: PPUSH
9919: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_STRING DKs-Scout-b-8
9930: PPUSH
9931: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9935: LD_EXP 25
9939: PPUSH
9940: LD_STRING DKs-Scout-b-9
9942: PPUSH
9943: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9947: LD_EXP 25
9951: PPUSH
9952: CALL_OW 301
9956: IFFALSE 10235
// begin CenterNowOnUnits ( Mike ) ;
9958: LD_EXP 17
9962: PPUSH
9963: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9967: LD_EXP 17
9971: PPUSH
9972: LD_STRING DM-Scout-a-1
9974: PPUSH
9975: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9979: LD_EXP 17
9983: PPUSH
9984: LD_STRING DM-Scout-a-2
9986: PPUSH
9987: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9991: LD_EXP 17
9995: PPUSH
9996: CALL_OW 256
10000: PUSH
10001: LD_INT 1000
10003: LESS
10004: IFFALSE 10020
// Say ( Heike , DH-Scout-a-3 ) else
10006: LD_EXP 15
10010: PPUSH
10011: LD_STRING DH-Scout-a-3
10013: PPUSH
10014: CALL_OW 88
10018: GO 10032
// Say ( Heike , DH-Scout-a-4 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING DH-Scout-a-4
10027: PPUSH
10028: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10032: LD_EXP 17
10036: PPUSH
10037: LD_STRING DM-Scout-a-5
10039: PPUSH
10040: CALL_OW 88
// if IsOk ( Kaia ) then
10044: LD_EXP 20
10048: PPUSH
10049: CALL_OW 302
10053: IFFALSE 10235
// begin ComExit ( Kaia ) ;
10055: LD_EXP 20
10059: PPUSH
10060: CALL 53550 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10064: LD_EXP 20
10068: PPUSH
10069: LD_EXP 17
10073: PPUSH
10074: CALL_OW 172
// wait ( 0 0$2 ) ;
10078: LD_INT 70
10080: PPUSH
10081: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10085: LD_EXP 20
10089: PPUSH
10090: LD_EXP 17
10094: PPUSH
10095: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10099: LD_EXP 17
10103: PPUSH
10104: LD_EXP 20
10108: PPUSH
10109: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10113: LD_EXP 20
10117: PPUSH
10118: LD_STRING DK-Scout-a-6
10120: PPUSH
10121: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10125: LD_EXP 17
10129: PPUSH
10130: LD_STRING DM-Scout-a-7
10132: PPUSH
10133: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING DK-Scout-a-8
10144: PPUSH
10145: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10149: LD_EXP 20
10153: PPUSH
10154: LD_STRING DK-Scout-a-9
10156: PPUSH
10157: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Scout-a-10
10168: PPUSH
10169: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10173: LD_EXP 17
10177: PPUSH
10178: LD_EXP 15
10182: PPUSH
10183: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10187: LD_EXP 17
10191: PPUSH
10192: LD_STRING DM-Scout-a-11
10194: PPUSH
10195: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10199: LD_EXP 17
10203: PPUSH
10204: LD_STRING DM-Scout-a-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10211: LD_EXP 17
10215: PPUSH
10216: LD_STRING DM-Scout-a-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10223: LD_EXP 17
10227: PPUSH
10228: LD_STRING DM-Scout-a-14
10230: PPUSH
10231: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10235: LD_EXP 16
10239: PPUSH
10240: CALL_OW 302
10244: IFFALSE 10272
// begin Say ( Givi , DG-Scout-10 ) ;
10246: LD_EXP 16
10250: PPUSH
10251: LD_STRING DG-Scout-10
10253: PPUSH
10254: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10258: LD_EXP 16
10262: PPUSH
10263: LD_STRING DG-Scout-11
10265: PPUSH
10266: CALL_OW 88
// end else
10270: GO 10329
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10272: LD_EXP 27
10276: PPUSH
10277: LD_INT 26
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: CALL_OW 72
10291: PPUSH
10292: LD_STRING DArm-Scout-10
10294: PPUSH
10295: CALL 224 0 2
10299: NOT
10300: IFFALSE 10329
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10302: LD_EXP 27
10306: PPUSH
10307: LD_INT 26
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: LD_STRING DArf-Scout-10
10324: PPUSH
10325: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
10329: LD_EXP 15
10333: PPUSH
10334: LD_STRING DH-Scout-12
10336: PPUSH
10337: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10341: LD_EXP 15
10345: PPUSH
10346: LD_STRING DH-Scout-13
10348: PPUSH
10349: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10353: LD_EXP 17
10357: PPUSH
10358: CALL_OW 302
10362: PUSH
10363: LD_EXP 25
10367: PPUSH
10368: CALL_OW 302
10372: AND
10373: IFFALSE 10401
// begin Say ( Mike , DM-Scout-14 ) ;
10375: LD_EXP 17
10379: PPUSH
10380: LD_STRING DM-Scout-14
10382: PPUSH
10383: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10387: LD_EXP 15
10391: PPUSH
10392: LD_STRING DH-Scout-c-14
10394: PPUSH
10395: CALL_OW 88
// end else
10399: GO 10494
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10401: LD_EXP 17
10405: PPUSH
10406: CALL_OW 302
10410: PUSH
10411: LD_EXP 25
10415: PPUSH
10416: CALL_OW 302
10420: XOR
10421: IFFALSE 10482
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10423: LD_EXP 27
10427: PPUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: LD_STRING DArm-Scout-a-14
10445: PPUSH
10446: CALL 224 0 2
10450: NOT
10451: IFFALSE 10480
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10453: LD_EXP 27
10457: PPUSH
10458: LD_INT 26
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 72
10472: PPUSH
10473: LD_STRING DArf-Scout-a-14
10475: PPUSH
10476: CALL 224 0 2
// end else
10480: GO 10494
// Say ( Heike , DH-Scout-d-14 ) ;
10482: LD_EXP 15
10486: PPUSH
10487: LD_STRING DH-Scout-d-14
10489: PPUSH
10490: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10494: LD_EXP 15
10498: PPUSH
10499: LD_STRING DH-Scout-15
10501: PPUSH
10502: CALL_OW 88
// InGameOff ;
10506: CALL_OW 9
// wait ( 1 1$00 ) ;
10510: LD_INT 2100
10512: PPUSH
10513: CALL_OW 67
// usAttacksAllowed := true ;
10517: LD_ADDR_EXP 6
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// end ;
10525: PPOPN 2
10527: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10528: LD_EXP 4
10532: IFFALSE 10709
10534: GO 10536
10536: DISABLE
10537: LD_INT 0
10539: PPUSH
// begin spoken := true ;
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10548: LD_INT 1050
10550: PPUSH
10551: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10555: LD_EXP 15
10559: PPUSH
10560: LD_STRING DH-Scout-c-1
10562: PPUSH
10563: CALL_OW 88
// if not IsOk ( Givi ) then
10567: LD_EXP 16
10571: PPUSH
10572: CALL_OW 302
10576: NOT
10577: IFFALSE 10581
// exit ;
10579: GO 10709
// if IsOk ( Givi ) then
10581: LD_EXP 16
10585: PPUSH
10586: CALL_OW 302
10590: IFFALSE 10618
// begin Say ( Givi , DG-Scout-c-2 ) ;
10592: LD_EXP 16
10596: PPUSH
10597: LD_STRING DG-Scout-c-2
10599: PPUSH
10600: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10604: LD_EXP 16
10608: PPUSH
10609: LD_STRING DG-Scout-c-3
10611: PPUSH
10612: CALL_OW 88
// end else
10616: GO 10691
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10618: LD_ADDR_VAR 0 1
10622: PUSH
10623: LD_EXP 27
10627: PPUSH
10628: LD_INT 26
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 72
10642: PPUSH
10643: LD_STRING DArm-Scout-c-3
10645: PPUSH
10646: CALL 224 0 2
10650: ST_TO_ADDR
// if not spoken then
10651: LD_VAR 0 1
10655: NOT
10656: IFFALSE 10691
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10658: LD_ADDR_VAR 0 1
10662: PUSH
10663: LD_EXP 27
10667: PPUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 72
10682: PPUSH
10683: LD_STRING DArf-Scout-c-3
10685: PPUSH
10686: CALL 224 0 2
10690: ST_TO_ADDR
// ; end ; if spoken then
10691: LD_VAR 0 1
10695: IFFALSE 10709
// Say ( Heike , DH-Scout-c-4 ) ;
10697: LD_EXP 15
10701: PPUSH
10702: LD_STRING DH-Scout-c-4
10704: PPUSH
10705: CALL_OW 88
// end ;
10709: PPOPN 1
10711: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10712: LD_INT 22
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 7
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: PUSH
10741: LD_EXP 26
10745: PPUSH
10746: CALL_OW 302
10750: AND
10751: IFFALSE 10836
10753: GO 10755
10755: DISABLE
// begin DialogueOn ;
10756: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10760: LD_EXP 26
10764: PPUSH
10765: LD_STRING DA-Lab-1
10767: PPUSH
10768: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10772: LD_EXP 15
10776: PPUSH
10777: LD_STRING DH-Lab-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10784: LD_EXP 26
10788: PPUSH
10789: LD_STRING DA-Lab-3
10791: PPUSH
10792: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10796: LD_EXP 26
10800: PPUSH
10801: LD_STRING DA-Lab-4
10803: PPUSH
10804: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10808: LD_EXP 26
10812: PPUSH
10813: LD_STRING DA-Lab-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10820: LD_EXP 15
10824: PPUSH
10825: LD_STRING DH-Lab-6
10827: PPUSH
10828: CALL_OW 88
// DialogueOff ;
10832: CALL_OW 7
// end ;
10836: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10837: LD_INT 7
10839: PPUSH
10840: LD_INT 2
10842: PPUSH
10843: CALL_OW 321
10847: PUSH
10848: LD_INT 2
10850: EQUAL
10851: PUSH
10852: LD_EXP 16
10856: PPUSH
10857: CALL_OW 302
10861: AND
10862: IFFALSE 11031
10864: GO 10866
10866: DISABLE
// begin DialogueOn ;
10867: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10871: LD_EXP 16
10875: PPUSH
10876: LD_STRING DG-Opt-1
10878: PPUSH
10879: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10883: LD_EXP 15
10887: PPUSH
10888: LD_STRING DH-Opt-2
10890: PPUSH
10891: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10895: LD_EXP 16
10899: PPUSH
10900: LD_STRING DG-Opt-3
10902: PPUSH
10903: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10907: LD_EXP 16
10911: PPUSH
10912: LD_STRING DG-Opt-4
10914: PPUSH
10915: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10919: LD_EXP 15
10923: PPUSH
10924: LD_STRING DH-Opt-5
10926: PPUSH
10927: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10931: LD_EXP 16
10935: PPUSH
10936: LD_STRING DG-Opt-6
10938: PPUSH
10939: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10943: LD_EXP 15
10947: PPUSH
10948: LD_STRING DH-Opt-7
10950: PPUSH
10951: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10955: LD_EXP 16
10959: PPUSH
10960: LD_STRING DG-Opt-8
10962: PPUSH
10963: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10967: LD_EXP 16
10971: PPUSH
10972: LD_STRING DG-Opt-9
10974: PPUSH
10975: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10979: LD_EXP 15
10983: PPUSH
10984: LD_STRING DH-Opt-10
10986: PPUSH
10987: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10991: LD_EXP 16
10995: PPUSH
10996: LD_STRING DG-Opt-11
10998: PPUSH
10999: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11003: LD_EXP 16
11007: PPUSH
11008: LD_STRING DG-Opt-12
11010: PPUSH
11011: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11015: LD_EXP 15
11019: PPUSH
11020: LD_STRING DH-Opt-13
11022: PPUSH
11023: CALL_OW 88
// DialogueOff ;
11027: CALL_OW 7
// end ;
11031: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11032: LD_EXP 27
11036: PPUSH
11037: LD_INT 95
11039: PUSH
11040: LD_INT 7
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 23
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 26
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 72
11076: IFFALSE 11137
11078: GO 11080
11080: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11081: LD_EXP 27
11085: PPUSH
11086: LD_INT 95
11088: PUSH
11089: LD_INT 7
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 23
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 26
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 72
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PPUSH
11130: LD_STRING DArm-River
11132: PPUSH
11133: CALL_OW 88
// end ;
11137: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11138: LD_INT 40
11140: PPUSH
11141: LD_INT 2
11143: PPUSH
11144: CALL_OW 321
11148: PUSH
11149: LD_INT 2
11151: EQUAL
11152: PUSH
11153: LD_EXP 18
11157: PPUSH
11158: CALL_OW 302
11162: AND
11163: IFFALSE 11413
11165: GO 11167
11167: DISABLE
// begin DialogueOn ;
11168: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11172: LD_EXP 18
11176: PPUSH
11177: LD_STRING DI-Roc-1
11179: PPUSH
11180: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11184: LD_EXP 15
11188: PPUSH
11189: LD_STRING DH-Roc-2
11191: PPUSH
11192: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11196: LD_EXP 18
11200: PPUSH
11201: LD_STRING DI-Roc-3
11203: PPUSH
11204: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_STRING DI-Roc-4
11215: PPUSH
11216: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11220: LD_EXP 20
11224: PPUSH
11225: LD_STRING DK-Roc-5
11227: PPUSH
11228: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11232: LD_EXP 20
11236: PPUSH
11237: LD_STRING DK-Roc-6
11239: PPUSH
11240: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11244: LD_EXP 16
11248: PPUSH
11249: LD_STRING DG-Roc-7
11251: PPUSH
11252: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11256: LD_EXP 16
11260: PPUSH
11261: LD_STRING DG-Roc-8
11263: PPUSH
11264: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11268: LD_EXP 22
11272: PPUSH
11273: CALL_OW 302
11277: PUSH
11278: LD_EXP 20
11282: PPUSH
11283: CALL_OW 302
11287: AND
11288: PUSH
11289: LD_EXP 16
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: IFFALSE 11409
// begin Say ( Markov , DMar-Roc-9 ) ;
11301: LD_EXP 22
11305: PPUSH
11306: LD_STRING DMar-Roc-9
11308: PPUSH
11309: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11313: LD_EXP 22
11317: PPUSH
11318: LD_STRING DMar-Roc-10
11320: PPUSH
11321: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11325: LD_EXP 20
11329: PPUSH
11330: LD_STRING DK-Roc-11
11332: PPUSH
11333: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11337: LD_EXP 22
11341: PPUSH
11342: LD_STRING DMar-Roc-12
11344: PPUSH
11345: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11349: LD_EXP 20
11353: PPUSH
11354: LD_STRING DK-Roc-13
11356: PPUSH
11357: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11361: LD_EXP 16
11365: PPUSH
11366: LD_STRING DG-Roc-14
11368: PPUSH
11369: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11373: LD_EXP 22
11377: PPUSH
11378: LD_STRING DMar-Roc-15
11380: PPUSH
11381: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11385: LD_EXP 22
11389: PPUSH
11390: LD_STRING DMar-Roc-16
11392: PPUSH
11393: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11397: LD_EXP 20
11401: PPUSH
11402: LD_STRING DK-Roc-17
11404: PPUSH
11405: CALL_OW 88
// end ; DialogueOff ;
11409: CALL_OW 7
// end ;
11413: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11414: LD_EXP 30
11418: PPUSH
11419: CALL_OW 256
11423: PUSH
11424: LD_INT 1000
11426: LESS
11427: PUSH
11428: LD_INT 22
11430: PUSH
11431: LD_INT 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 23
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 69
11467: PUSH
11468: LD_INT 6
11470: LESS
11471: OR
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 1
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PUSH
11513: LD_INT 2
11515: LESS
11516: OR
11517: IFFALSE 12763
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
11525: PPUSH
11526: PPUSH
// begin usAttacksAllowed := false ;
11527: LD_ADDR_EXP 6
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// usSurrender := true ;
11535: LD_ADDR_EXP 7
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11543: LD_INT 1
11545: PPUSH
11546: LD_INT 2
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 80
// if IsDead ( usCommander ) then
11559: LD_EXP 30
11563: PPUSH
11564: CALL_OW 301
11568: IFFALSE 11572
// exit ;
11570: GO 12763
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 60
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11627
// ComStop ( i ) ;
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 141
11625: GO 11613
11627: POP
11628: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: LD_INT 50
11649: PUSH
11650: EMPTY
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 21
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11694
// SetLives ( i , 251 ) ;
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_INT 251
11687: PPUSH
11688: CALL_OW 234
11692: GO 11677
11694: POP
11695: POP
// InGameOn ;
11696: CALL_OW 8
// ComExit ( usCommander ) ;
11700: LD_EXP 30
11704: PPUSH
11705: CALL 53550 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_INT 81
11716: PPUSH
11717: LD_INT 143
11719: PPUSH
11720: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11724: LD_EXP 30
11728: PPUSH
11729: LD_INT 81
11731: PPUSH
11732: LD_INT 139
11734: PPUSH
11735: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11739: LD_INT 81
11741: PPUSH
11742: LD_INT 144
11744: PPUSH
11745: LD_INT 2
11747: PPUSH
11748: LD_INT 10
11750: NEG
11751: PPUSH
11752: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11756: LD_EXP 30
11760: PPUSH
11761: CALL_OW 87
// wait ( 0 0$2 ) ;
11765: LD_INT 70
11767: PPUSH
11768: CALL_OW 67
// if not IsOk ( usCommander ) then
11772: LD_EXP 30
11776: PPUSH
11777: CALL_OW 302
11781: NOT
11782: IFFALSE 11796
// SetLives ( usCommander , 251 ) ;
11784: LD_EXP 30
11788: PPUSH
11789: LD_INT 251
11791: PPUSH
11792: CALL_OW 234
// Say ( usCommander , DCa-Surrender-1 ) ;
11796: LD_EXP 30
11800: PPUSH
11801: LD_STRING DCa-Surrender-1
11803: PPUSH
11804: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11808: LD_EXP 15
11812: PPUSH
11813: LD_STRING DH-Surrender-2
11815: PPUSH
11816: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11820: LD_EXP 15
11824: PPUSH
11825: CALL_OW 310
11829: PPUSH
11830: CALL_OW 247
11834: PUSH
11835: LD_INT 3
11837: EQUAL
11838: IFFALSE 11856
// begin ComExit ( Heike ) ;
11840: LD_EXP 15
11844: PPUSH
11845: CALL 53550 0 1
// wait ( 3 ) ;
11849: LD_INT 3
11851: PPUSH
11852: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11856: LD_EXP 15
11860: PPUSH
11861: LD_INT 82
11863: PPUSH
11864: LD_INT 133
11866: PPUSH
11867: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11871: LD_EXP 15
11875: PPUSH
11876: LD_EXP 30
11880: PPUSH
11881: CALL_OW 179
// wait ( 0 0$3 ) ;
11885: LD_INT 105
11887: PPUSH
11888: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11892: LD_EXP 15
11896: PPUSH
11897: LD_STRING DH-Surrender-3
11899: PPUSH
11900: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11904: LD_EXP 15
11908: PPUSH
11909: LD_STRING DH-Surrender-4
11911: PPUSH
11912: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11916: LD_INT 81
11918: PPUSH
11919: LD_INT 144
11921: PPUSH
11922: LD_INT 2
11924: PPUSH
11925: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11929: LD_INT 1
11931: PPUSH
11932: LD_INT 2
11934: PPUSH
11935: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_INT 22
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 69
11979: PUSH
11980: FOR_IN
11981: IFFALSE 11994
// ComExit ( i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL 53550 0 1
11992: GO 11980
11994: POP
11995: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 4
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12030: LD_ADDR_VAR 0 2
12034: PUSH
12035: LD_INT 22
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 50
12050: PUSH
12051: EMPTY
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: ST_TO_ADDR
// if sci and hurts then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_VAR 0 2
12076: AND
12077: IFFALSE 12139
// begin for i := 1 to hurts do
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: DOUBLE
12085: LD_INT 1
12087: DEC
12088: ST_TO_ADDR
12089: LD_VAR 0 2
12093: PUSH
12094: FOR_TO
12095: IFFALSE 12137
// if i <= sci then
12097: LD_VAR 0 1
12101: PUSH
12102: LD_VAR 0 3
12106: LESSEQUAL
12107: IFFALSE 12135
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12109: LD_VAR 0 3
12113: PUSH
12114: LD_VAR 0 1
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 2
12124: PUSH
12125: LD_VAR 0 1
12129: ARRAY
12130: PPUSH
12131: CALL_OW 188
12135: GO 12094
12137: POP
12138: POP
// end ; if IsOk ( Givi ) then
12139: LD_EXP 16
12143: PPUSH
12144: CALL_OW 302
12148: IFFALSE 12164
// Say ( Givi , DG-Surrender-5 ) else
12150: LD_EXP 16
12154: PPUSH
12155: LD_STRING DG-Surrender-5
12157: PPUSH
12158: CALL_OW 88
12162: GO 12176
// Say ( Heike , DH-Surrender-a-5 ) ;
12164: LD_EXP 15
12168: PPUSH
12169: LD_STRING DH-Surrender-a-5
12171: PPUSH
12172: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12176: LD_EXP 30
12180: PPUSH
12181: LD_STRING DCa-Surrender-6
12183: PPUSH
12184: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12188: LD_EXP 30
12192: PPUSH
12193: LD_STRING DCa-Surrender-7
12195: PPUSH
12196: CALL_OW 88
// if IsOk ( Givi ) then
12200: LD_EXP 16
12204: PPUSH
12205: CALL_OW 302
12209: IFFALSE 12225
// Say ( Givi , DG-Surrender-8 ) else
12211: LD_EXP 16
12215: PPUSH
12216: LD_STRING DG-Surrender-8
12218: PPUSH
12219: CALL_OW 88
12223: GO 12237
// Say ( Heike , DH-Surrender-a-8 ) ;
12225: LD_EXP 15
12229: PPUSH
12230: LD_STRING DH-Surrender-a-8
12232: PPUSH
12233: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
12237: LD_EXP 30
12241: PPUSH
12242: LD_STRING DCa-Surrender-9
12244: PPUSH
12245: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
12249: LD_EXP 15
12253: PPUSH
12254: LD_STRING DH-Surrender-10
12256: PPUSH
12257: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
12261: LD_EXP 30
12265: PPUSH
12266: LD_STRING DCa-Surrender-11
12268: PPUSH
12269: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
12273: LD_EXP 15
12277: PPUSH
12278: LD_STRING DH-Surrender-12
12280: PPUSH
12281: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
12285: LD_EXP 30
12289: PPUSH
12290: LD_STRING DCa-Surrender-13
12292: PPUSH
12293: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
12297: LD_EXP 30
12301: PPUSH
12302: LD_STRING DCa-Surrender-14
12304: PPUSH
12305: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
12309: LD_EXP 30
12313: PPUSH
12314: LD_STRING DCa-Surrender-15
12316: PPUSH
12317: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12321: LD_EXP 30
12325: PPUSH
12326: LD_STRING DCa-Surrender-16
12328: PPUSH
12329: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12333: LD_EXP 20
12337: PPUSH
12338: LD_STRING DK-Surrender-17
12340: PPUSH
12341: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12345: LD_EXP 24
12349: PPUSH
12350: LD_STRING DO-Surrender-18
12352: PPUSH
12353: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12357: LD_EXP 24
12361: PPUSH
12362: LD_STRING DO-Surrender-19
12364: PPUSH
12365: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12369: LD_EXP 25
12373: PPUSH
12374: LD_STRING DKs-Surrender-20
12376: PPUSH
12377: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12381: LD_EXP 25
12385: PPUSH
12386: LD_STRING DKs-Surrender-21
12388: PPUSH
12389: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12393: LD_EXP 22
12397: PPUSH
12398: LD_STRING DMar-Surrender-22
12400: PPUSH
12401: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12405: LD_EXP 22
12409: PPUSH
12410: LD_STRING DMar-Surrender-23
12412: PPUSH
12413: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12417: LD_EXP 21
12421: PPUSH
12422: LD_STRING DS-Surrender-24
12424: PPUSH
12425: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12429: LD_EXP 26
12433: PPUSH
12434: LD_STRING DA-Surrender-25
12436: PPUSH
12437: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12441: LD_EXP 18
12445: PPUSH
12446: LD_STRING DI-Surrender-26
12448: PPUSH
12449: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12453: LD_EXP 19
12457: PPUSH
12458: LD_STRING DKam-Surrender-27
12460: PPUSH
12461: CALL_OW 88
// if IsOk ( Givi ) then
12465: LD_EXP 16
12469: PPUSH
12470: CALL_OW 302
12474: IFFALSE 12514
// begin Say ( Givi , DG-Surrender-28 ) ;
12476: LD_EXP 16
12480: PPUSH
12481: LD_STRING DG-Surrender-28
12483: PPUSH
12484: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12488: LD_EXP 16
12492: PPUSH
12493: LD_STRING DG-Surrender-29
12495: PPUSH
12496: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12500: LD_EXP 16
12504: PPUSH
12505: LD_STRING DG-Surrender-30
12507: PPUSH
12508: CALL_OW 88
// end else
12512: GO 12550
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12514: LD_EXP 15
12518: PPUSH
12519: LD_STRING DH-Surrender-a-28
12521: PPUSH
12522: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12526: LD_EXP 15
12530: PPUSH
12531: LD_STRING DH-Surrender-a-29
12533: PPUSH
12534: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12538: LD_EXP 15
12542: PPUSH
12543: LD_STRING DH-Surrender-a-30
12545: PPUSH
12546: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12550: CALL 14510 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12554: LD_INT 22
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: PPUSH
12569: LD_INT 176
12571: PUSH
12572: LD_INT 123
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: PPUSH
12582: CALL 55756 0 2
// if not IsEnvironment ( 190 , 150 ) then
12586: LD_INT 190
12588: PPUSH
12589: LD_INT 150
12591: PPUSH
12592: CALL_OW 351
12596: NOT
12597: IFFALSE 12616
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12599: LD_INT 190
12601: PPUSH
12602: LD_INT 150
12604: PPUSH
12605: LD_INT 2
12607: PPUSH
12608: LD_INT 8
12610: NEG
12611: PPUSH
12612: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12616: LD_INT 193
12618: PPUSH
12619: LD_INT 150
12621: PPUSH
12622: CALL_OW 84
// if IsOk ( Markov ) then
12626: LD_EXP 22
12630: PPUSH
12631: CALL_OW 302
12635: IFFALSE 12651
// Say ( Markov , DMar-Surrender-31 ) else
12637: LD_EXP 22
12641: PPUSH
12642: LD_STRING DMar-Surrender-31
12644: PPUSH
12645: CALL_OW 88
12649: GO 12708
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12651: LD_EXP 27
12655: PPUSH
12656: LD_INT 26
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: PPUSH
12671: LD_STRING DArm-Surrender-a-31
12673: PPUSH
12674: CALL 224 0 2
12678: NOT
12679: IFFALSE 12708
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12681: LD_EXP 27
12685: PPUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 72
12700: PPUSH
12701: LD_STRING DArf-Surrender-a-31
12703: PPUSH
12704: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12708: LD_EXP 15
12712: PPUSH
12713: LD_STRING DH-Surrender-32
12715: PPUSH
12716: CALL_OW 88
// InGameOff ;
12720: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12724: LD_STRING M2
12726: PPUSH
12727: CALL_OW 337
// wait ( 0 0$20 ) ;
12731: LD_INT 700
12733: PPUSH
12734: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12738: CALL 14872 0 0
// russianAttack := true ;
12742: LD_ADDR_EXP 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12750: LD_INT 190
12752: PPUSH
12753: LD_INT 150
12755: PPUSH
12756: LD_INT 2
12758: PPUSH
12759: CALL_OW 331
// end ;
12763: PPOPN 3
12765: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12766: LD_EXP 11
12770: PUSH
12771: LD_INT 2
12773: PPUSH
12774: CALL_OW 463
12778: NOT
12779: AND
12780: PUSH
12781: LD_EXP 15
12785: PPUSH
12786: CALL_OW 302
12790: AND
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 3
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: PUSH
12822: LD_EXP 22
12826: PPUSH
12827: CALL_OW 302
12831: PUSH
12832: LD_EXP 27
12836: PPUSH
12837: LD_INT 50
12839: PUSH
12840: EMPTY
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: OR
12848: AND
12849: IFFALSE 13077
12851: GO 12853
12853: DISABLE
// begin DialogueOn ;
12854: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12858: LD_EXP 15
12862: PPUSH
12863: LD_STRING DH-Heavy-1
12865: PPUSH
12866: CALL_OW 88
// if IsOk ( Markov ) then
12870: LD_EXP 22
12874: PPUSH
12875: CALL_OW 302
12879: IFFALSE 13004
// begin Say ( Markov , DMar-Heavy-2 ) ;
12881: LD_EXP 22
12885: PPUSH
12886: LD_STRING DMar-Heavy-2
12888: PPUSH
12889: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12930: LD_EXP 22
12934: PPUSH
12935: LD_STRING DMar-Heavy-3
12937: PPUSH
12938: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12942: LD_EXP 22
12946: PPUSH
12947: LD_STRING DMar-Heavy-4
12949: PPUSH
12950: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12954: LD_EXP 22
12958: PPUSH
12959: LD_STRING DMar-Heavy-5
12961: PPUSH
12962: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12966: LD_EXP 22
12970: PPUSH
12971: LD_STRING DMar-Heavy-6
12973: PPUSH
12974: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12978: LD_EXP 15
12982: PPUSH
12983: LD_STRING DH-Heavy-7
12985: PPUSH
12986: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12990: LD_EXP 15
12994: PPUSH
12995: LD_STRING DH-Heavy-8
12997: PPUSH
12998: CALL_OW 88
// end else
13002: GO 13061
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13004: LD_EXP 27
13008: PPUSH
13009: LD_INT 26
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: PPUSH
13024: LD_STRING DArm-Heavy-a-2
13026: PPUSH
13027: CALL 224 0 2
13031: NOT
13032: IFFALSE 13061
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13034: LD_EXP 27
13038: PPUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 72
13053: PPUSH
13054: LD_STRING DArf-Heavy-a-2
13056: PPUSH
13057: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13061: LD_EXP 15
13065: PPUSH
13066: LD_STRING DH-Heavy-9
13068: PPUSH
13069: CALL_OW 88
// DialogueOff ;
13073: CALL_OW 7
// end ;
13077: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13078: LD_EXP 34
13082: PPUSH
13083: LD_INT 101
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 72
13097: PUSH
13098: LD_EXP 15
13102: PPUSH
13103: CALL_OW 302
13107: AND
13108: PUSH
13109: LD_EXP 7
13113: NOT
13114: AND
13115: IFFALSE 13258
13117: GO 13119
13119: DISABLE
// begin DialogueOn ;
13120: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13124: LD_EXP 34
13128: PPUSH
13129: LD_INT 101
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PPUSH
13144: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13148: LD_EXP 15
13152: PPUSH
13153: LD_STRING DH-Flank-1
13155: PPUSH
13156: CALL_OW 88
// if IsOk ( Mike ) then
13160: LD_EXP 17
13164: PPUSH
13165: CALL_OW 302
13169: IFFALSE 13185
// Say ( Mike , DM-Flank-2 ) else
13171: LD_EXP 17
13175: PPUSH
13176: LD_STRING DM-Flank-2
13178: PPUSH
13179: CALL_OW 88
13183: GO 13242
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13185: LD_EXP 27
13189: PPUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: PPUSH
13205: LD_STRING DArm-Flank-a-2
13207: PPUSH
13208: CALL 224 0 2
13212: NOT
13213: IFFALSE 13242
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13215: LD_EXP 27
13219: PPUSH
13220: LD_INT 26
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: PPUSH
13235: LD_STRING DArm-Flank-a-2
13237: PPUSH
13238: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
13242: LD_EXP 15
13246: PPUSH
13247: LD_STRING DH-Flank-3
13249: PPUSH
13250: CALL_OW 88
// DialogueOff ;
13254: CALL_OW 7
// end ;
13258: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
13259: LD_EXP 10
13263: PUSH
13264: LD_EXP 7
13268: NOT
13269: AND
13270: IFFALSE 13494
13272: GO 13274
13274: DISABLE
// begin DialogueOn ;
13275: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
13279: LD_EXP 15
13283: PPUSH
13284: LD_STRING DH-USRC-1
13286: PPUSH
13287: CALL_OW 88
// if IsOk ( Markov ) then
13291: LD_EXP 22
13295: PPUSH
13296: CALL_OW 302
13300: IFFALSE 13316
// Say ( Markov , DMar-USRC-2 ) else
13302: LD_EXP 22
13306: PPUSH
13307: LD_STRING DMar-USRC-2
13309: PPUSH
13310: CALL_OW 88
13314: GO 13373
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
13316: LD_EXP 27
13320: PPUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: PPUSH
13336: LD_STRING DArm-USRC-a-2
13338: PPUSH
13339: CALL 224 0 2
13343: NOT
13344: IFFALSE 13373
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13346: LD_EXP 27
13350: PPUSH
13351: LD_INT 26
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 72
13365: PPUSH
13366: LD_STRING DArf-USRC-a-2
13368: PPUSH
13369: CALL 224 0 2
// DialogueOff ;
13373: CALL_OW 7
// wait ( 0 0$10 ) ;
13377: LD_INT 350
13379: PPUSH
13380: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13384: LD_EXP 15
13388: PPUSH
13389: LD_STRING DH-USRC-3
13391: PPUSH
13392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13396: LD_INT 35
13398: PPUSH
13399: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13403: LD_INT 2
13405: PPUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 36
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: CALL_OW 292
13443: IFFALSE 13396
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13445: LD_INT 22
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 30
13457: PUSH
13458: LD_INT 36
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13482: LD_EXP 15
13486: PPUSH
13487: LD_STRING DH-USRCFound-1
13489: PPUSH
13490: CALL_OW 88
// end ;
13494: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13495: LD_EXP 20
13499: PPUSH
13500: CALL_OW 256
13504: PUSH
13505: LD_INT 3
13507: LESS
13508: IFFALSE 13545
13510: GO 13512
13512: DISABLE
// begin DialogueOn ;
13513: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13517: LD_EXP 20
13521: PPUSH
13522: LD_STRING DK-Dead-1
13524: PPUSH
13525: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13529: LD_EXP 20
13533: PPUSH
13534: LD_STRING DK-Dead-2
13536: PPUSH
13537: CALL_OW 91
// DialogueOff ;
13541: CALL_OW 7
// end ;
13545: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13546: LD_INT 22
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 2
13558: PUSH
13559: LD_INT 35
13561: PUSH
13562: LD_INT 28
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 34
13571: PUSH
13572: LD_INT 28
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: IFFALSE 13605
13594: GO 13596
13596: DISABLE
// hasRockets := true ;
13597: LD_ADDR_EXP 9
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
13605: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13606: LD_EXP 8
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: NOT
13626: AND
13627: IFFALSE 14289
13629: GO 13631
13631: DISABLE
// begin DialogueOn ;
13632: CALL_OW 6
// if vehLossCounter = 0 then
13636: LD_EXP 14
13640: PUSH
13641: LD_INT 0
13643: EQUAL
13644: IFFALSE 13653
// SetAchievement ( ACH_UNTOUCH ) ;
13646: LD_STRING ACH_UNTOUCH
13648: PPUSH
13649: CALL_OW 543
// if tick < 35 35$00 then
13653: LD_OWVAR 1
13657: PUSH
13658: LD_INT 73500
13660: LESS
13661: IFFALSE 13670
// SetAchievement ( ACH_HSPEED_7 ) ;
13663: LD_STRING ACH_HSPEED_7
13665: PPUSH
13666: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
13670: LD_EXP 15
13674: PPUSH
13675: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13679: LD_EXP 15
13683: PPUSH
13684: LD_STRING DH-End-1
13686: PPUSH
13687: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13691: LD_EXP 23
13695: PPUSH
13696: LD_STRING DShar-End-2
13698: PPUSH
13699: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13703: LD_EXP 20
13707: PPUSH
13708: LD_STRING DK-End-3
13710: PPUSH
13711: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13715: LD_EXP 15
13719: PPUSH
13720: LD_STRING DH-End-4
13722: PPUSH
13723: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13727: LD_EXP 23
13731: PPUSH
13732: LD_STRING DShar-End-5
13734: PPUSH
13735: CALL_OW 94
// if IsOk ( Markov ) then
13739: LD_EXP 22
13743: PPUSH
13744: CALL_OW 302
13748: IFFALSE 13762
// Say ( Kaia , DK-End-6 ) ;
13750: LD_EXP 20
13754: PPUSH
13755: LD_STRING DK-End-6
13757: PPUSH
13758: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13762: LD_EXP 20
13766: PPUSH
13767: LD_STRING DK-End-7
13769: PPUSH
13770: CALL_OW 88
// if IsOk ( Kaia ) then
13774: LD_EXP 20
13778: PPUSH
13779: CALL_OW 302
13783: IFFALSE 13821
// begin Say ( Givi , DG-End-8 ) ;
13785: LD_EXP 16
13789: PPUSH
13790: LD_STRING DG-End-8
13792: PPUSH
13793: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13797: LD_EXP 16
13801: PPUSH
13802: LD_STRING DG-End-9
13804: PPUSH
13805: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13809: LD_EXP 15
13813: PPUSH
13814: LD_STRING DH-End-10
13816: PPUSH
13817: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13821: LD_EXP 15
13825: PPUSH
13826: LD_STRING DH-End-11
13828: PPUSH
13829: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13833: LD_INT 7
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 321
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: IFFALSE 13861
// AddMedal ( med1 , 1 ) else
13849: LD_STRING med1
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 101
13859: GO 13872
// AddMedal ( med1 , - 1 ) ;
13861: LD_STRING med1
13863: PPUSH
13864: LD_INT 1
13866: NEG
13867: PPUSH
13868: CALL_OW 101
// if hasRockets then
13872: LD_EXP 9
13876: IFFALSE 13890
// AddMedal ( med2 , 1 ) else
13878: LD_STRING med2
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 101
13888: GO 13901
// AddMedal ( med2 , - 1 ) ;
13890: LD_STRING med2
13892: PPUSH
13893: LD_INT 1
13895: NEG
13896: PPUSH
13897: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13901: LD_OWVAR 1
13905: PUSH
13906: LD_INT 105000
13908: PUSH
13909: LD_INT 94500
13911: PUSH
13912: LD_INT 84000
13914: PUSH
13915: LD_INT 73500
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: LD_OWVAR 67
13928: ARRAY
13929: LESS
13930: IFFALSE 13944
// AddMedal ( med3 , 1 ) else
13932: LD_STRING med3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 101
13942: GO 13955
// AddMedal ( med3 , - 1 ) ;
13944: LD_STRING med3
13946: PPUSH
13947: LD_INT 1
13949: NEG
13950: PPUSH
13951: CALL_OW 101
// GiveMedals ( MAIN ) ;
13955: LD_STRING MAIN
13957: PPUSH
13958: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13962: LD_INT 22
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PPUSH
14002: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14006: LD_EXP 30
14010: PPUSH
14011: LD_STRING 07_UsCommander
14013: PPUSH
14014: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14018: LD_INT 22
14020: PUSH
14021: LD_INT 1
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 23
14030: PUSH
14031: LD_INT 1
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 21
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: PUSH
14058: LD_EXP 30
14062: DIFF
14063: PPUSH
14064: LD_STRING 07_Americans
14066: PPUSH
14067: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14071: LD_EXP 15
14075: PPUSH
14076: LD_STRING 07_Heike
14078: PPUSH
14079: CALL_OW 38
// if Aviradze then
14083: LD_EXP 26
14087: IFFALSE 14101
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14089: LD_EXP 26
14093: PPUSH
14094: LD_STRING 07_Aviradze
14096: PPUSH
14097: CALL_OW 38
// if Ibrahim then
14101: LD_EXP 18
14105: IFFALSE 14119
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14107: LD_EXP 18
14111: PPUSH
14112: LD_STRING 07_Ibrahim
14114: PPUSH
14115: CALL_OW 38
// if Kamil then
14119: LD_EXP 19
14123: IFFALSE 14137
// SaveCharacters ( Kamil , 07_Kamil ) ;
14125: LD_EXP 19
14129: PPUSH
14130: LD_STRING 07_Kamil
14132: PPUSH
14133: CALL_OW 38
// if Sophia then
14137: LD_EXP 21
14141: IFFALSE 14155
// SaveCharacters ( Sophia , 07_Sophia ) ;
14143: LD_EXP 21
14147: PPUSH
14148: LD_STRING 07_Sophia
14150: PPUSH
14151: CALL_OW 38
// if Kaia then
14155: LD_EXP 20
14159: IFFALSE 14173
// SaveCharacters ( Kaia , 07_Kaia ) ;
14161: LD_EXP 20
14165: PPUSH
14166: LD_STRING 07_Kaia
14168: PPUSH
14169: CALL_OW 38
// if Givi then
14173: LD_EXP 16
14177: IFFALSE 14191
// SaveCharacters ( Givi , 07_Givi ) ;
14179: LD_EXP 16
14183: PPUSH
14184: LD_STRING 07_Givi
14186: PPUSH
14187: CALL_OW 38
// if Mike then
14191: LD_EXP 17
14195: IFFALSE 14209
// SaveCharacters ( Mike , 07_Mike ) ;
14197: LD_EXP 17
14201: PPUSH
14202: LD_STRING 07_Mike
14204: PPUSH
14205: CALL_OW 38
// if Markov then
14209: LD_EXP 22
14213: IFFALSE 14227
// SaveCharacters ( Markov , 07_Markov ) ;
14215: LD_EXP 22
14219: PPUSH
14220: LD_STRING 07_Markov
14222: PPUSH
14223: CALL_OW 38
// if Kurt then
14227: LD_EXP 25
14231: IFFALSE 14245
// SaveCharacters ( Kurt , 07_Kurt ) ;
14233: LD_EXP 25
14237: PPUSH
14238: LD_STRING 07_Kurt
14240: PPUSH
14241: CALL_OW 38
// if Olaf then
14245: LD_EXP 24
14249: IFFALSE 14263
// SaveCharacters ( Olaf , 07_Olaf ) ;
14251: LD_EXP 24
14255: PPUSH
14256: LD_STRING 07_Olaf
14258: PPUSH
14259: CALL_OW 38
// if heikeSecondSquad then
14263: LD_EXP 27
14267: IFFALSE 14281
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
14269: LD_EXP 27
14273: PPUSH
14274: LD_STRING 07_others
14276: PPUSH
14277: CALL_OW 38
// YouWin ;
14281: CALL_OW 103
// DialogueOff ;
14285: CALL_OW 7
// end ; end_of_file
14289: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
14290: LD_INT 7
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 287
14300: PUSH
14301: LD_INT 12
14303: PUSH
14304: LD_INT 10
14306: PUSH
14307: LD_INT 8
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_OWVAR 67
14323: ARRAY
14324: LESS
14325: IFFALSE 14352
14327: GO 14329
14329: DISABLE
// begin enable ;
14330: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 5
14336: PPUSH
14337: CALL_OW 12
14341: PPUSH
14342: LD_INT 7
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 55
// end ;
14352: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
14353: LD_INT 8
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 287
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 17
14372: PUSH
14373: LD_INT 14
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_OWVAR 67
14386: ARRAY
14387: LESS
14388: PUSH
14389: LD_OWVAR 1
14393: PUSH
14394: LD_INT 50400
14396: LESS
14397: AND
14398: IFFALSE 14425
14400: GO 14402
14402: DISABLE
// begin enable ;
14403: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14404: LD_INT 1
14406: PPUSH
14407: LD_INT 5
14409: PPUSH
14410: CALL_OW 12
14414: PPUSH
14415: LD_INT 8
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 55
// end ;
14425: END
// every 0 0$40 trigger tick < 8 8$10 do
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 17150
14433: LESS
14434: IFFALSE 14467
14436: GO 14438
14438: DISABLE
// begin enable ;
14439: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: PPUSH
14451: LD_INT 130
14453: PPUSH
14454: LD_INT 18
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 56
// end ;
14467: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
14468: LD_OWVAR 1
14472: PUSH
14473: LD_INT 12950
14475: LESS
14476: IFFALSE 14509
14478: GO 14480
14480: DISABLE
// begin enable ;
14481: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14482: LD_INT 1
14484: PPUSH
14485: LD_INT 5
14487: PPUSH
14488: CALL_OW 12
14492: PPUSH
14493: LD_INT 172
14495: PPUSH
14496: LD_INT 97
14498: PPUSH
14499: LD_INT 12
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 56
// end ; end_of_file
14509: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// uc_side := 3 ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// uc_nation := 3 ;
14525: LD_ADDR_OWVAR 21
14529: PUSH
14530: LD_INT 3
14532: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 184
14540: PUSH
14541: LD_INT 144
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 191
14554: PUSH
14555: LD_INT 147
14557: PUSH
14558: LD_INT 5
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 202
14568: PUSH
14569: LD_INT 151
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 210
14582: PUSH
14583: LD_INT 152
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: ST_TO_ADDR
// for i := 1 to 3 do
14600: LD_ADDR_VAR 0 2
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_INT 3
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14783
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14616: LD_INT 24
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_INT 43
14627: PUSH
14628: LD_INT 44
14630: PUSH
14631: LD_INT 46
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_VAR 0 2
14643: PUSH
14644: LD_INT 3
14646: MOD
14647: PUSH
14648: LD_INT 1
14650: PLUS
14651: ARRAY
14652: PPUSH
14653: LD_INT 40
14655: PPUSH
14656: CALL 20699 0 5
// veh := CreateVehicle ;
14660: LD_ADDR_VAR 0 5
14664: PUSH
14665: CALL_OW 45
14669: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14670: LD_VAR 0 5
14674: PPUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_VAR 0 2
14684: ARRAY
14685: PUSH
14686: LD_INT 3
14688: ARRAY
14689: PPUSH
14690: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14694: LD_VAR 0 5
14698: PPUSH
14699: LD_VAR 0 3
14703: PUSH
14704: LD_VAR 0 2
14708: ARRAY
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_VAR 0 2
14723: ARRAY
14724: PUSH
14725: LD_INT 2
14727: ARRAY
14728: PPUSH
14729: LD_INT 0
14731: PPUSH
14732: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14736: LD_INT 0
14738: PPUSH
14739: LD_INT 6
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: LD_INT 8
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: PPUSH
14763: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14767: CALL_OW 44
14771: PPUSH
14772: LD_VAR 0 5
14776: PPUSH
14777: CALL_OW 52
// end ;
14781: GO 14613
14783: POP
14784: POP
// for i := 1 to 4 do
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 4
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14865
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14801: LD_INT 0
14803: PPUSH
14804: LD_INT 6
14806: PUSH
14807: LD_INT 7
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 8
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: LD_OWVAR 67
14826: ARRAY
14827: PPUSH
14828: CALL_OW 381
// un := CreateHuman ;
14832: LD_ADDR_VAR 0 4
14836: PUSH
14837: CALL_OW 44
14841: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14842: LD_VAR 0 4
14846: PPUSH
14847: LD_INT 185
14849: PPUSH
14850: LD_INT 145
14852: PPUSH
14853: LD_INT 6
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 50
// end ;
14863: GO 14798
14865: POP
14866: POP
// end ;
14867: LD_VAR 0 1
14871: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// uc_side := 3 ;
14877: LD_ADDR_OWVAR 20
14881: PUSH
14882: LD_INT 3
14884: ST_TO_ADDR
// if Difficulty > 1 then
14885: LD_OWVAR 67
14889: PUSH
14890: LD_INT 1
14892: GREATER
14893: IFFALSE 15055
// begin uc_nation := 0 ;
14895: LD_ADDR_OWVAR 21
14899: PUSH
14900: LD_INT 0
14902: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14903: LD_ADDR_VAR 0 2
14907: PUSH
14908: DOUBLE
14909: LD_INT 1
14911: DEC
14912: ST_TO_ADDR
14913: LD_INT 4
14915: PUSH
14916: LD_INT 5
14918: PUSH
14919: LD_INT 6
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_OWVAR 67
14931: PUSH
14932: LD_INT 1
14934: PLUS
14935: ARRAY
14936: PUSH
14937: FOR_TO
14938: IFFALSE 15053
// begin hc_class := class_apeman_soldier ;
14940: LD_ADDR_OWVAR 28
14944: PUSH
14945: LD_INT 15
14947: ST_TO_ADDR
// hc_gallery :=  ;
14948: LD_ADDR_OWVAR 33
14952: PUSH
14953: LD_STRING 
14955: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14956: LD_ADDR_OWVAR 26
14960: PUSH
14961: LD_STRING Treci
14963: PUSH
14964: LD_STRING Ivan
14966: PUSH
14967: LD_STRING Yaromir
14969: PUSH
14970: LD_STRING Nadzieia
14972: PUSH
14973: LD_STRING Krasna
14975: PUSH
14976: LD_STRING Piaty
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 1
14989: PPUSH
14990: LD_INT 6
14992: PPUSH
14993: CALL_OW 12
14997: ARRAY
14998: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14999: LD_ADDR_OWVAR 31
15003: PUSH
15004: LD_INT 5
15006: PUSH
15007: LD_INT 0
15009: PUSH
15010: LD_INT 0
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: ST_TO_ADDR
// hc_sex := sex_male ;
15022: LD_ADDR_OWVAR 27
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15030: CALL_OW 44
15034: PPUSH
15035: LD_INT 178
15037: PPUSH
15038: LD_INT 148
15040: PPUSH
15041: LD_INT 6
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 50
// end ;
15051: GO 14937
15053: POP
15054: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: DOUBLE
15061: LD_INT 1
15063: DEC
15064: ST_TO_ADDR
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: LD_INT 5
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_OWVAR 67
15087: ARRAY
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15257
// begin uc_nation := 3 ;
15092: LD_ADDR_OWVAR 21
15096: PUSH
15097: LD_INT 3
15099: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15100: LD_INT 22
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: LD_INT 45
15111: PUSH
15112: LD_INT 43
15114: PUSH
15115: LD_INT 44
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 3
15130: MOD
15131: PUSH
15132: LD_INT 1
15134: PLUS
15135: ARRAY
15136: PPUSH
15137: LD_INT 44
15139: PPUSH
15140: CALL 20699 0 5
// veh := CreateVehicle ;
15144: LD_ADDR_VAR 0 3
15148: PUSH
15149: CALL_OW 45
15153: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 4
15161: PPUSH
15162: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: LD_INT 0
15176: PPUSH
15177: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15181: LD_INT 0
15183: PPUSH
15184: LD_INT 6
15186: PUSH
15187: LD_INT 7
15189: PUSH
15190: LD_INT 8
15192: PUSH
15193: LD_INT 8
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: LD_OWVAR 67
15206: ARRAY
15207: PPUSH
15208: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 178
15233: PUSH
15234: LD_INT 137
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: PPUSH
15244: CALL 55756 0 2
// wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// end ;
15255: GO 15089
15257: POP
15258: POP
// end ;
15259: LD_VAR 0 1
15263: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
15264: LD_INT 22
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 32
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 69
15292: IFFALSE 15380
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin enable ;
15301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
15302: LD_ADDR_VAR 0 2
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 32
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 69
15335: ST_TO_ADDR
// for i in tmp do
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_VAR 0 2
15345: PUSH
15346: FOR_IN
15347: IFFALSE 15378
// if GetFuel ( i ) < 3 then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 261
15358: PUSH
15359: LD_INT 3
15361: LESS
15362: IFFALSE 15376
// SetFuel ( i , 3 ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_INT 3
15371: PPUSH
15372: CALL_OW 240
15376: GO 15346
15378: POP
15379: POP
// end ;
15380: PPOPN 2
15382: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15383: LD_EXP 8
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 21
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: AND
15417: IFFALSE 15681
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
// begin enable ;
15427: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 25
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 55
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// if mech then
15476: LD_VAR 0 2
15480: IFFALSE 15550
// for i in mech do
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_VAR 0 2
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15548
// begin if IsInArea ( i , escapeArea ) then
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 13
15502: PPUSH
15503: CALL_OW 308
15507: IFFALSE 15520
// RemoveUnit ( i ) else
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 64
15518: GO 15546
// if IsOk ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 302
15529: IFFALSE 15546
// ComMoveXY ( i , 196 , 155 ) ;
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 196
15538: PPUSH
15539: LD_INT 155
15541: PPUSH
15542: CALL_OW 111
// end ;
15546: GO 15492
15548: POP
15549: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15550: LD_ADDR_VAR 0 3
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 15
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 50
15606: PUSH
15607: EMPTY
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: ST_TO_ADDR
// if tmp then
15620: LD_VAR 0 3
15624: IFFALSE 15681
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 171
15633: PUSH
15634: LD_INT 106
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 145
15643: PUSH
15644: LD_INT 69
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 132
15653: PUSH
15654: LD_INT 38
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 126
15663: PUSH
15664: LD_INT 15
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL 55756 0 2
// end ; end_of_file
15681: PPOPN 3
15683: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// if exist_mode then
15688: LD_VAR 0 2
15692: IFFALSE 15717
// unit := CreateCharacter ( prefix & ident ) else
15694: LD_ADDR_VAR 0 5
15698: PUSH
15699: LD_VAR 0 3
15703: PUSH
15704: LD_VAR 0 1
15708: STR
15709: PPUSH
15710: CALL_OW 34
15714: ST_TO_ADDR
15715: GO 15732
// unit := NewCharacter ( ident ) ;
15717: LD_ADDR_VAR 0 5
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 25
15731: ST_TO_ADDR
// result := unit ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// end ;
15742: LD_VAR 0 4
15746: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
// if not side or not nation then
15751: LD_VAR 0 1
15755: NOT
15756: PUSH
15757: LD_VAR 0 2
15761: NOT
15762: OR
15763: IFFALSE 15767
// exit ;
15765: GO 16535
// case nation of nation_american :
15767: LD_VAR 0 2
15771: PUSH
15772: LD_INT 1
15774: DOUBLE
15775: EQUAL
15776: IFTRUE 15780
15778: GO 15994
15780: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15781: LD_ADDR_VAR 0 4
15785: PUSH
15786: LD_INT 35
15788: PUSH
15789: LD_INT 45
15791: PUSH
15792: LD_INT 46
15794: PUSH
15795: LD_INT 47
15797: PUSH
15798: LD_INT 82
15800: PUSH
15801: LD_INT 83
15803: PUSH
15804: LD_INT 84
15806: PUSH
15807: LD_INT 85
15809: PUSH
15810: LD_INT 86
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 6
15821: PUSH
15822: LD_INT 15
15824: PUSH
15825: LD_INT 16
15827: PUSH
15828: LD_INT 7
15830: PUSH
15831: LD_INT 12
15833: PUSH
15834: LD_INT 13
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: LD_INT 14
15842: PUSH
15843: LD_INT 20
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 25
15854: PUSH
15855: LD_INT 32
15857: PUSH
15858: LD_INT 27
15860: PUSH
15861: LD_INT 36
15863: PUSH
15864: LD_INT 69
15866: PUSH
15867: LD_INT 39
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 40
15875: PUSH
15876: LD_INT 48
15878: PUSH
15879: LD_INT 49
15881: PUSH
15882: LD_INT 50
15884: PUSH
15885: LD_INT 51
15887: PUSH
15888: LD_INT 52
15890: PUSH
15891: LD_INT 53
15893: PUSH
15894: LD_INT 54
15896: PUSH
15897: LD_INT 55
15899: PUSH
15900: LD_INT 56
15902: PUSH
15903: LD_INT 57
15905: PUSH
15906: LD_INT 58
15908: PUSH
15909: LD_INT 59
15911: PUSH
15912: LD_INT 60
15914: PUSH
15915: LD_INT 61
15917: PUSH
15918: LD_INT 62
15920: PUSH
15921: LD_INT 80
15923: PUSH
15924: LD_INT 82
15926: PUSH
15927: LD_INT 83
15929: PUSH
15930: LD_INT 84
15932: PUSH
15933: LD_INT 85
15935: PUSH
15936: LD_INT 86
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 16459
15994: LD_INT 2
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16228
16002: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: LD_INT 35
16010: PUSH
16011: LD_INT 45
16013: PUSH
16014: LD_INT 46
16016: PUSH
16017: LD_INT 47
16019: PUSH
16020: LD_INT 82
16022: PUSH
16023: LD_INT 83
16025: PUSH
16026: LD_INT 84
16028: PUSH
16029: LD_INT 85
16031: PUSH
16032: LD_INT 87
16034: PUSH
16035: LD_INT 70
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: LD_INT 5
16052: PUSH
16053: LD_INT 6
16055: PUSH
16056: LD_INT 15
16058: PUSH
16059: LD_INT 18
16061: PUSH
16062: LD_INT 7
16064: PUSH
16065: LD_INT 17
16067: PUSH
16068: LD_INT 8
16070: PUSH
16071: LD_INT 20
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 72
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: LD_INT 69
16088: PUSH
16089: LD_INT 39
16091: PUSH
16092: LD_INT 40
16094: PUSH
16095: LD_INT 41
16097: PUSH
16098: LD_INT 42
16100: PUSH
16101: LD_INT 43
16103: PUSH
16104: LD_INT 48
16106: PUSH
16107: LD_INT 49
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: LD_INT 51
16115: PUSH
16116: LD_INT 52
16118: PUSH
16119: LD_INT 53
16121: PUSH
16122: LD_INT 54
16124: PUSH
16125: LD_INT 55
16127: PUSH
16128: LD_INT 56
16130: PUSH
16131: LD_INT 60
16133: PUSH
16134: LD_INT 61
16136: PUSH
16137: LD_INT 62
16139: PUSH
16140: LD_INT 66
16142: PUSH
16143: LD_INT 67
16145: PUSH
16146: LD_INT 68
16148: PUSH
16149: LD_INT 81
16151: PUSH
16152: LD_INT 82
16154: PUSH
16155: LD_INT 83
16157: PUSH
16158: LD_INT 84
16160: PUSH
16161: LD_INT 85
16163: PUSH
16164: LD_INT 87
16166: PUSH
16167: LD_INT 88
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: ST_TO_ADDR
16226: GO 16459
16228: LD_INT 3
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16458
16236: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16237: LD_ADDR_VAR 0 4
16241: PUSH
16242: LD_INT 46
16244: PUSH
16245: LD_INT 47
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 82
16256: PUSH
16257: LD_INT 83
16259: PUSH
16260: LD_INT 84
16262: PUSH
16263: LD_INT 85
16265: PUSH
16266: LD_INT 86
16268: PUSH
16269: LD_INT 11
16271: PUSH
16272: LD_INT 9
16274: PUSH
16275: LD_INT 20
16277: PUSH
16278: LD_INT 19
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 24
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 28
16295: PUSH
16296: LD_INT 29
16298: PUSH
16299: LD_INT 30
16301: PUSH
16302: LD_INT 31
16304: PUSH
16305: LD_INT 37
16307: PUSH
16308: LD_INT 38
16310: PUSH
16311: LD_INT 32
16313: PUSH
16314: LD_INT 27
16316: PUSH
16317: LD_INT 33
16319: PUSH
16320: LD_INT 69
16322: PUSH
16323: LD_INT 39
16325: PUSH
16326: LD_INT 34
16328: PUSH
16329: LD_INT 40
16331: PUSH
16332: LD_INT 71
16334: PUSH
16335: LD_INT 23
16337: PUSH
16338: LD_INT 44
16340: PUSH
16341: LD_INT 48
16343: PUSH
16344: LD_INT 49
16346: PUSH
16347: LD_INT 50
16349: PUSH
16350: LD_INT 51
16352: PUSH
16353: LD_INT 52
16355: PUSH
16356: LD_INT 53
16358: PUSH
16359: LD_INT 54
16361: PUSH
16362: LD_INT 55
16364: PUSH
16365: LD_INT 56
16367: PUSH
16368: LD_INT 57
16370: PUSH
16371: LD_INT 58
16373: PUSH
16374: LD_INT 59
16376: PUSH
16377: LD_INT 63
16379: PUSH
16380: LD_INT 64
16382: PUSH
16383: LD_INT 65
16385: PUSH
16386: LD_INT 82
16388: PUSH
16389: LD_INT 83
16391: PUSH
16392: LD_INT 84
16394: PUSH
16395: LD_INT 85
16397: PUSH
16398: LD_INT 86
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
16456: GO 16459
16458: POP
// if state > - 1 and state < 3 then
16459: LD_VAR 0 3
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: GREATER
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 3
16476: LESS
16477: AND
16478: IFFALSE 16535
// for i in result do
16480: LD_ADDR_VAR 0 5
16484: PUSH
16485: LD_VAR 0 4
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16533
// if GetTech ( i , side ) <> state then
16493: LD_VAR 0 5
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 321
16507: PUSH
16508: LD_VAR 0 3
16512: NONEQUAL
16513: IFFALSE 16531
// result := result diff i ;
16515: LD_ADDR_VAR 0 4
16519: PUSH
16520: LD_VAR 0 4
16524: PUSH
16525: LD_VAR 0 5
16529: DIFF
16530: ST_TO_ADDR
16531: GO 16490
16533: POP
16534: POP
// end ;
16535: LD_VAR 0 4
16539: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16540: LD_INT 0
16542: PPUSH
16543: PPUSH
16544: PPUSH
// result := true ;
16545: LD_ADDR_VAR 0 3
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16553: LD_ADDR_VAR 0 5
16557: PUSH
16558: LD_VAR 0 2
16562: PPUSH
16563: CALL_OW 480
16567: ST_TO_ADDR
// if not tmp then
16568: LD_VAR 0 5
16572: NOT
16573: IFFALSE 16577
// exit ;
16575: GO 16626
// for i in tmp do
16577: LD_ADDR_VAR 0 4
16581: PUSH
16582: LD_VAR 0 5
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16624
// if GetTech ( i , side ) <> state_researched then
16590: LD_VAR 0 4
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 321
16604: PUSH
16605: LD_INT 2
16607: NONEQUAL
16608: IFFALSE 16622
// begin result := false ;
16610: LD_ADDR_VAR 0 3
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// exit ;
16618: POP
16619: POP
16620: GO 16626
// end ;
16622: GO 16587
16624: POP
16625: POP
// end ;
16626: LD_VAR 0 3
16630: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
16645: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16646: LD_VAR 0 1
16650: NOT
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 257
16661: PUSH
16662: LD_INT 9
16664: NONEQUAL
16665: OR
16666: IFFALSE 16670
// exit ;
16668: GO 17243
// side := GetSide ( unit ) ;
16670: LD_ADDR_VAR 0 9
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 255
16684: ST_TO_ADDR
// tech_space := tech_spacanom ;
16685: LD_ADDR_VAR 0 12
16689: PUSH
16690: LD_INT 29
16692: ST_TO_ADDR
// tech_time := tech_taurad ;
16693: LD_ADDR_VAR 0 13
16697: PUSH
16698: LD_INT 28
16700: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16701: LD_ADDR_VAR 0 11
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 310
16715: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16716: LD_VAR 0 11
16720: PPUSH
16721: CALL_OW 247
16725: PUSH
16726: LD_INT 2
16728: EQUAL
16729: IFFALSE 16733
// exit ;
16731: GO 17243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16733: LD_ADDR_VAR 0 8
16737: PUSH
16738: LD_INT 81
16740: PUSH
16741: LD_VAR 0 9
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 21
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: ST_TO_ADDR
// if not tmp then
16776: LD_VAR 0 8
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 17243
// if in_unit then
16785: LD_VAR 0 11
16789: IFFALSE 16813
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16791: LD_ADDR_VAR 0 10
16795: PUSH
16796: LD_VAR 0 8
16800: PPUSH
16801: LD_VAR 0 11
16805: PPUSH
16806: CALL_OW 74
16810: ST_TO_ADDR
16811: GO 16833
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16813: LD_ADDR_VAR 0 10
16817: PUSH
16818: LD_VAR 0 8
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 74
16832: ST_TO_ADDR
// if not enemy then
16833: LD_VAR 0 10
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 17243
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16842: LD_VAR 0 11
16846: PUSH
16847: LD_VAR 0 11
16851: PPUSH
16852: LD_VAR 0 10
16856: PPUSH
16857: CALL_OW 296
16861: PUSH
16862: LD_INT 13
16864: GREATER
16865: AND
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_VAR 0 10
16876: PPUSH
16877: CALL_OW 296
16881: PUSH
16882: LD_INT 12
16884: GREATER
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17243
// missile := [ 1 ] ;
16890: LD_ADDR_VAR 0 14
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16901: LD_VAR 0 9
16905: PPUSH
16906: LD_VAR 0 12
16910: PPUSH
16911: CALL_OW 325
16915: IFFALSE 16944
// missile := Replace ( missile , missile + 1 , 2 ) ;
16917: LD_ADDR_VAR 0 14
16921: PUSH
16922: LD_VAR 0 14
16926: PPUSH
16927: LD_VAR 0 14
16931: PUSH
16932: LD_INT 1
16934: PLUS
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16944: LD_VAR 0 9
16948: PPUSH
16949: LD_VAR 0 13
16953: PPUSH
16954: CALL_OW 325
16958: PUSH
16959: LD_VAR 0 10
16963: PPUSH
16964: CALL_OW 255
16968: PPUSH
16969: LD_VAR 0 13
16973: PPUSH
16974: CALL_OW 325
16978: NOT
16979: AND
16980: IFFALSE 17009
// missile := Replace ( missile , missile + 1 , 3 ) ;
16982: LD_ADDR_VAR 0 14
16986: PUSH
16987: LD_VAR 0 14
16991: PPUSH
16992: LD_VAR 0 14
16996: PUSH
16997: LD_INT 1
16999: PLUS
17000: PPUSH
17001: LD_INT 3
17003: PPUSH
17004: CALL_OW 1
17008: ST_TO_ADDR
// if missile < 2 then
17009: LD_VAR 0 14
17013: PUSH
17014: LD_INT 2
17016: LESS
17017: IFFALSE 17021
// exit ;
17019: GO 17243
// x := GetX ( enemy ) ;
17021: LD_ADDR_VAR 0 4
17025: PUSH
17026: LD_VAR 0 10
17030: PPUSH
17031: CALL_OW 250
17035: ST_TO_ADDR
// y := GetY ( enemy ) ;
17036: LD_ADDR_VAR 0 5
17040: PUSH
17041: LD_VAR 0 10
17045: PPUSH
17046: CALL_OW 251
17050: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17051: LD_ADDR_VAR 0 6
17055: PUSH
17056: LD_VAR 0 4
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 12
17072: PLUS
17073: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17074: LD_ADDR_VAR 0 7
17078: PUSH
17079: LD_VAR 0 5
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 12
17095: PLUS
17096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17097: LD_VAR 0 6
17101: PPUSH
17102: LD_VAR 0 7
17106: PPUSH
17107: CALL_OW 488
17111: NOT
17112: IFFALSE 17134
// begin _x := x ;
17114: LD_ADDR_VAR 0 6
17118: PUSH
17119: LD_VAR 0 4
17123: ST_TO_ADDR
// _y := y ;
17124: LD_ADDR_VAR 0 7
17128: PUSH
17129: LD_VAR 0 5
17133: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_INT 1
17141: PPUSH
17142: LD_VAR 0 14
17146: PPUSH
17147: CALL_OW 12
17151: ST_TO_ADDR
// case i of 1 :
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 1
17159: DOUBLE
17160: EQUAL
17161: IFTRUE 17165
17163: GO 17182
17165: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_VAR 0 10
17175: PPUSH
17176: CALL_OW 115
17180: GO 17243
17182: LD_INT 2
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17212
17190: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_VAR 0 6
17200: PPUSH
17201: LD_VAR 0 7
17205: PPUSH
17206: CALL_OW 153
17210: GO 17243
17212: LD_INT 3
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17242
17220: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17221: LD_VAR 0 1
17225: PPUSH
17226: LD_VAR 0 6
17230: PPUSH
17231: LD_VAR 0 7
17235: PPUSH
17236: CALL_OW 154
17240: GO 17243
17242: POP
// end ;
17243: LD_VAR 0 2
17247: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
// if not unit or not building then
17256: LD_VAR 0 1
17260: NOT
17261: PUSH
17262: LD_VAR 0 2
17266: NOT
17267: OR
17268: IFFALSE 17272
// exit ;
17270: GO 17430
// x := GetX ( building ) ;
17272: LD_ADDR_VAR 0 5
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 250
17286: ST_TO_ADDR
// y := GetY ( building ) ;
17287: LD_ADDR_VAR 0 6
17291: PUSH
17292: LD_VAR 0 2
17296: PPUSH
17297: CALL_OW 251
17301: ST_TO_ADDR
// for i = 0 to 5 do
17302: LD_ADDR_VAR 0 4
17306: PUSH
17307: DOUBLE
17308: LD_INT 0
17310: DEC
17311: ST_TO_ADDR
17312: LD_INT 5
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17428
// begin _x := ShiftX ( x , i , 3 ) ;
17318: LD_ADDR_VAR 0 7
17322: PUSH
17323: LD_VAR 0 5
17327: PPUSH
17328: LD_VAR 0 4
17332: PPUSH
17333: LD_INT 3
17335: PPUSH
17336: CALL_OW 272
17340: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17341: LD_ADDR_VAR 0 8
17345: PUSH
17346: LD_VAR 0 6
17350: PPUSH
17351: LD_VAR 0 4
17355: PPUSH
17356: LD_INT 3
17358: PPUSH
17359: CALL_OW 273
17363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17364: LD_VAR 0 7
17368: PPUSH
17369: LD_VAR 0 8
17373: PPUSH
17374: CALL_OW 488
17378: NOT
17379: IFFALSE 17383
// continue ;
17381: GO 17315
// if HexInfo ( _x , _y ) = 0 then
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: CALL_OW 428
17397: PUSH
17398: LD_INT 0
17400: EQUAL
17401: IFFALSE 17426
// begin ComMoveXY ( unit , _x , _y ) ;
17403: LD_VAR 0 1
17407: PPUSH
17408: LD_VAR 0 7
17412: PPUSH
17413: LD_VAR 0 8
17417: PPUSH
17418: CALL_OW 111
// exit ;
17422: POP
17423: POP
17424: GO 17430
// end ; end ;
17426: GO 17315
17428: POP
17429: POP
// end ;
17430: LD_VAR 0 3
17434: RET
// export function ScanBase ( side , base_area ) ; begin
17435: LD_INT 0
17437: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 81
17450: PUSH
17451: LD_VAR 0 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 70
17464: ST_TO_ADDR
// end ;
17465: LD_VAR 0 3
17469: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
// result := false ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// side := GetSide ( unit ) ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 255
17498: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17499: LD_ADDR_VAR 0 4
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 248
17513: ST_TO_ADDR
// case nat of 1 :
17514: LD_VAR 0 4
17518: PUSH
17519: LD_INT 1
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17538
17527: POP
// tech := tech_lassight ; 2 :
17528: LD_ADDR_VAR 0 5
17532: PUSH
17533: LD_INT 12
17535: ST_TO_ADDR
17536: GO 17577
17538: LD_INT 2
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17557
17546: POP
// tech := tech_mortar ; 3 :
17547: LD_ADDR_VAR 0 5
17551: PUSH
17552: LD_INT 41
17554: ST_TO_ADDR
17555: GO 17577
17557: LD_INT 3
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17576
17565: POP
// tech := tech_bazooka ; end ;
17566: LD_ADDR_VAR 0 5
17570: PUSH
17571: LD_INT 44
17573: ST_TO_ADDR
17574: GO 17577
17576: POP
// if Researched ( side , tech ) then
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_VAR 0 5
17586: PPUSH
17587: CALL_OW 325
17591: IFFALSE 17618
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 5
17600: PUSH
17601: LD_INT 8
17603: PUSH
17604: LD_INT 9
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_VAR 0 4
17616: ARRAY
17617: ST_TO_ADDR
// end ;
17618: LD_VAR 0 2
17622: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
17627: PPUSH
// if not mines then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17637: LD_ADDR_VAR 0 5
17641: PUSH
17642: LD_INT 81
17644: PUSH
17645: LD_VAR 0 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// for i in mines do
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17779
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17693: LD_VAR 0 4
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 4
17706: PUSH
17707: LD_INT 2
17709: ARRAY
17710: PPUSH
17711: CALL_OW 458
17715: NOT
17716: IFFALSE 17720
// continue ;
17718: GO 17690
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: LD_VAR 0 4
17733: PUSH
17734: LD_INT 2
17736: ARRAY
17737: PPUSH
17738: CALL_OW 428
17742: PUSH
17743: LD_VAR 0 5
17747: IN
17748: IFFALSE 17777
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17750: LD_VAR 0 4
17754: PUSH
17755: LD_INT 1
17757: ARRAY
17758: PPUSH
17759: LD_VAR 0 4
17763: PUSH
17764: LD_INT 2
17766: ARRAY
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 456
// end ;
17777: GO 17690
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 3
17785: RET
// export function Count ( array ) ; var i ; begin
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
// result := 0 ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_INT 0
17797: ST_TO_ADDR
// for i in array do
17798: LD_ADDR_VAR 0 3
17802: PUSH
17803: LD_VAR 0 1
17807: PUSH
17808: FOR_IN
17809: IFFALSE 17833
// if i then
17811: LD_VAR 0 3
17815: IFFALSE 17831
// result := result + 1 ;
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: PLUS
17830: ST_TO_ADDR
17831: GO 17808
17833: POP
17834: POP
// end ;
17835: LD_VAR 0 2
17839: RET
// export function IsEmpty ( building ) ; begin
17840: LD_INT 0
17842: PPUSH
// if not building then
17843: LD_VAR 0 1
17847: NOT
17848: IFFALSE 17852
// exit ;
17850: GO 17895
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17852: LD_ADDR_VAR 0 2
17856: PUSH
17857: LD_VAR 0 1
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_VAR 0 1
17869: PPUSH
17870: CALL_OW 255
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 58
17881: PUSH
17882: EMPTY
17883: LIST
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PPUSH
17889: CALL_OW 69
17893: IN
17894: ST_TO_ADDR
// end ;
17895: LD_VAR 0 2
17899: RET
// export function IsNotFull ( building ) ; var places ; begin
17900: LD_INT 0
17902: PPUSH
17903: PPUSH
// if not building then
17904: LD_VAR 0 1
17908: NOT
17909: IFFALSE 17913
// exit ;
17911: GO 18084
// result := false ;
17913: LD_ADDR_VAR 0 2
17917: PUSH
17918: LD_INT 0
17920: ST_TO_ADDR
// places := 0 ;
17921: LD_ADDR_VAR 0 3
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17929: LD_VAR 0 1
17933: PPUSH
17934: CALL_OW 266
17938: PUSH
17939: LD_INT 0
17941: DOUBLE
17942: EQUAL
17943: IFTRUE 18001
17945: LD_INT 1
17947: DOUBLE
17948: EQUAL
17949: IFTRUE 18001
17951: LD_INT 6
17953: DOUBLE
17954: EQUAL
17955: IFTRUE 18001
17957: LD_INT 7
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 18001
17963: LD_INT 8
17965: DOUBLE
17966: EQUAL
17967: IFTRUE 18001
17969: LD_INT 4
17971: DOUBLE
17972: EQUAL
17973: IFTRUE 18001
17975: LD_INT 5
17977: DOUBLE
17978: EQUAL
17979: IFTRUE 18001
17981: LD_INT 2
17983: DOUBLE
17984: EQUAL
17985: IFTRUE 18001
17987: LD_INT 3
17989: DOUBLE
17990: EQUAL
17991: IFTRUE 18001
17993: LD_INT 35
17995: DOUBLE
17996: EQUAL
17997: IFTRUE 18001
17999: GO 18012
18001: POP
// places := 6 ; b_bunker , b_breastwork :
18002: LD_ADDR_VAR 0 3
18006: PUSH
18007: LD_INT 6
18009: ST_TO_ADDR
18010: GO 18057
18012: LD_INT 32
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18026
18018: LD_INT 31
18020: DOUBLE
18021: EQUAL
18022: IFTRUE 18026
18024: GO 18037
18026: POP
// places := 1 ; b_control_tower :
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_INT 1
18034: ST_TO_ADDR
18035: GO 18057
18037: LD_INT 36
18039: DOUBLE
18040: EQUAL
18041: IFTRUE 18045
18043: GO 18056
18045: POP
// places := 3 ; end ;
18046: LD_ADDR_VAR 0 3
18050: PUSH
18051: LD_INT 3
18053: ST_TO_ADDR
18054: GO 18057
18056: POP
// if places then
18057: LD_VAR 0 3
18061: IFFALSE 18084
// result := UnitsInside ( building ) < places ;
18063: LD_ADDR_VAR 0 2
18067: PUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 313
18077: PUSH
18078: LD_VAR 0 3
18082: LESS
18083: ST_TO_ADDR
// end ;
18084: LD_VAR 0 2
18088: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
// tmp := [ ] ;
18095: LD_ADDR_VAR 0 3
18099: PUSH
18100: EMPTY
18101: ST_TO_ADDR
// list := [ ] ;
18102: LD_ADDR_VAR 0 5
18106: PUSH
18107: EMPTY
18108: ST_TO_ADDR
// for i = 16 to 25 do
18109: LD_ADDR_VAR 0 4
18113: PUSH
18114: DOUBLE
18115: LD_INT 16
18117: DEC
18118: ST_TO_ADDR
18119: LD_INT 25
18121: PUSH
18122: FOR_TO
18123: IFFALSE 18196
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: LD_VAR 0 3
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 255
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 91
18154: PUSH
18155: LD_VAR 0 1
18159: PUSH
18160: LD_INT 6
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 30
18170: PUSH
18171: LD_VAR 0 4
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: PPUSH
18188: CALL_OW 69
18192: ADD
18193: ST_TO_ADDR
18194: GO 18122
18196: POP
18197: POP
// for i = 1 to tmp do
18198: LD_ADDR_VAR 0 4
18202: PUSH
18203: DOUBLE
18204: LD_INT 1
18206: DEC
18207: ST_TO_ADDR
18208: LD_VAR 0 3
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18302
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18216: LD_ADDR_VAR 0 5
18220: PUSH
18221: LD_VAR 0 5
18225: PUSH
18226: LD_VAR 0 3
18230: PUSH
18231: LD_VAR 0 4
18235: ARRAY
18236: PPUSH
18237: CALL_OW 266
18241: PUSH
18242: LD_VAR 0 3
18246: PUSH
18247: LD_VAR 0 4
18251: ARRAY
18252: PPUSH
18253: CALL_OW 250
18257: PUSH
18258: LD_VAR 0 3
18262: PUSH
18263: LD_VAR 0 4
18267: ARRAY
18268: PPUSH
18269: CALL_OW 251
18273: PUSH
18274: LD_VAR 0 3
18278: PUSH
18279: LD_VAR 0 4
18283: ARRAY
18284: PPUSH
18285: CALL_OW 254
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: ADD
18299: ST_TO_ADDR
18300: GO 18213
18302: POP
18303: POP
// result := list ;
18304: LD_ADDR_VAR 0 2
18308: PUSH
18309: LD_VAR 0 5
18313: ST_TO_ADDR
// end ;
18314: LD_VAR 0 2
18318: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18319: LD_INT 0
18321: PPUSH
18322: PPUSH
18323: PPUSH
18324: PPUSH
18325: PPUSH
18326: PPUSH
18327: PPUSH
// if not factory then
18328: LD_VAR 0 1
18332: NOT
18333: IFFALSE 18337
// exit ;
18335: GO 18930
// if control = control_apeman then
18337: LD_VAR 0 4
18341: PUSH
18342: LD_INT 5
18344: EQUAL
18345: IFFALSE 18454
// begin tmp := UnitsInside ( factory ) ;
18347: LD_ADDR_VAR 0 8
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 313
18361: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18362: LD_VAR 0 8
18366: PPUSH
18367: LD_INT 25
18369: PUSH
18370: LD_INT 12
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 72
18381: NOT
18382: IFFALSE 18392
// control := control_manual ;
18384: LD_ADDR_VAR 0 4
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18392: LD_ADDR_VAR 0 8
18396: PUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL 18089 0 1
18406: ST_TO_ADDR
// if tmp then
18407: LD_VAR 0 8
18411: IFFALSE 18454
// begin for i in tmp do
18413: LD_ADDR_VAR 0 7
18417: PUSH
18418: LD_VAR 0 8
18422: PUSH
18423: FOR_IN
18424: IFFALSE 18452
// if i [ 1 ] = b_ext_radio then
18426: LD_VAR 0 7
18430: PUSH
18431: LD_INT 1
18433: ARRAY
18434: PUSH
18435: LD_INT 22
18437: EQUAL
18438: IFFALSE 18450
// begin control := control_remote ;
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_INT 2
18447: ST_TO_ADDR
// break ;
18448: GO 18452
// end ;
18450: GO 18423
18452: POP
18453: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18454: LD_VAR 0 1
18458: PPUSH
18459: LD_VAR 0 2
18463: PPUSH
18464: LD_VAR 0 3
18468: PPUSH
18469: LD_VAR 0 4
18473: PPUSH
18474: LD_VAR 0 5
18478: PPUSH
18479: CALL_OW 448
18483: IFFALSE 18518
// begin result := [ chassis , engine , control , weapon ] ;
18485: LD_ADDR_VAR 0 6
18489: PUSH
18490: LD_VAR 0 2
18494: PUSH
18495: LD_VAR 0 3
18499: PUSH
18500: LD_VAR 0 4
18504: PUSH
18505: LD_VAR 0 5
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: ST_TO_ADDR
// exit ;
18516: GO 18930
// end ; _chassis := AvailableChassisList ( factory ) ;
18518: LD_ADDR_VAR 0 9
18522: PUSH
18523: LD_VAR 0 1
18527: PPUSH
18528: CALL_OW 475
18532: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18533: LD_ADDR_VAR 0 11
18537: PUSH
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL_OW 476
18547: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18548: LD_ADDR_VAR 0 12
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 477
18562: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18563: LD_ADDR_VAR 0 10
18567: PUSH
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 478
18577: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18578: LD_VAR 0 9
18582: NOT
18583: PUSH
18584: LD_VAR 0 11
18588: NOT
18589: OR
18590: PUSH
18591: LD_VAR 0 12
18595: NOT
18596: OR
18597: PUSH
18598: LD_VAR 0 10
18602: NOT
18603: OR
18604: IFFALSE 18639
// begin result := [ chassis , engine , control , weapon ] ;
18606: LD_ADDR_VAR 0 6
18610: PUSH
18611: LD_VAR 0 2
18615: PUSH
18616: LD_VAR 0 3
18620: PUSH
18621: LD_VAR 0 4
18625: PUSH
18626: LD_VAR 0 5
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: ST_TO_ADDR
// exit ;
18637: GO 18930
// end ; if not chassis in _chassis then
18639: LD_VAR 0 2
18643: PUSH
18644: LD_VAR 0 9
18648: IN
18649: NOT
18650: IFFALSE 18676
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_VAR 0 9
18661: PUSH
18662: LD_INT 1
18664: PPUSH
18665: LD_VAR 0 9
18669: PPUSH
18670: CALL_OW 12
18674: ARRAY
18675: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18676: LD_VAR 0 2
18680: PPUSH
18681: LD_VAR 0 3
18685: PPUSH
18686: CALL 18935 0 2
18690: NOT
18691: IFFALSE 18750
// repeat engine := _engine [ 1 ] ;
18693: LD_ADDR_VAR 0 3
18697: PUSH
18698: LD_VAR 0 11
18702: PUSH
18703: LD_INT 1
18705: ARRAY
18706: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18707: LD_ADDR_VAR 0 11
18711: PUSH
18712: LD_VAR 0 11
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 3
18724: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18725: LD_VAR 0 2
18729: PPUSH
18730: LD_VAR 0 3
18734: PPUSH
18735: CALL 18935 0 2
18739: PUSH
18740: LD_VAR 0 11
18744: PUSH
18745: EMPTY
18746: EQUAL
18747: OR
18748: IFFALSE 18693
// if not control in _control then
18750: LD_VAR 0 4
18754: PUSH
18755: LD_VAR 0 12
18759: IN
18760: NOT
18761: IFFALSE 18787
// control := _control [ rand ( 1 , _control ) ] ;
18763: LD_ADDR_VAR 0 4
18767: PUSH
18768: LD_VAR 0 12
18772: PUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_VAR 0 12
18780: PPUSH
18781: CALL_OW 12
18785: ARRAY
18786: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18787: LD_VAR 0 2
18791: PPUSH
18792: LD_VAR 0 5
18796: PPUSH
18797: CALL 19155 0 2
18801: NOT
18802: IFFALSE 18861
// repeat weapon := _weapon [ 1 ] ;
18804: LD_ADDR_VAR 0 5
18808: PUSH
18809: LD_VAR 0 10
18813: PUSH
18814: LD_INT 1
18816: ARRAY
18817: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18818: LD_ADDR_VAR 0 10
18822: PUSH
18823: LD_VAR 0 10
18827: PPUSH
18828: LD_INT 1
18830: PPUSH
18831: CALL_OW 3
18835: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18836: LD_VAR 0 2
18840: PPUSH
18841: LD_VAR 0 5
18845: PPUSH
18846: CALL 19155 0 2
18850: PUSH
18851: LD_VAR 0 10
18855: PUSH
18856: EMPTY
18857: EQUAL
18858: OR
18859: IFFALSE 18804
// result := [ ] ;
18861: LD_ADDR_VAR 0 6
18865: PUSH
18866: EMPTY
18867: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18868: LD_VAR 0 1
18872: PPUSH
18873: LD_VAR 0 2
18877: PPUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: LD_VAR 0 4
18887: PPUSH
18888: LD_VAR 0 5
18892: PPUSH
18893: CALL_OW 448
18897: IFFALSE 18930
// result := [ chassis , engine , control , weapon ] ;
18899: LD_ADDR_VAR 0 6
18903: PUSH
18904: LD_VAR 0 2
18908: PUSH
18909: LD_VAR 0 3
18913: PUSH
18914: LD_VAR 0 4
18918: PUSH
18919: LD_VAR 0 5
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: ST_TO_ADDR
// end ;
18930: LD_VAR 0 6
18934: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18935: LD_INT 0
18937: PPUSH
// if not chassis or not engine then
18938: LD_VAR 0 1
18942: NOT
18943: PUSH
18944: LD_VAR 0 2
18948: NOT
18949: OR
18950: IFFALSE 18954
// exit ;
18952: GO 19150
// case engine of engine_solar :
18954: LD_VAR 0 2
18958: PUSH
18959: LD_INT 2
18961: DOUBLE
18962: EQUAL
18963: IFTRUE 18967
18965: GO 19005
18967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18968: LD_ADDR_VAR 0 3
18972: PUSH
18973: LD_INT 11
18975: PUSH
18976: LD_INT 12
18978: PUSH
18979: LD_INT 13
18981: PUSH
18982: LD_INT 14
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: ST_TO_ADDR
19003: GO 19134
19005: LD_INT 1
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19075
19013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: LD_INT 11
19021: PUSH
19022: LD_INT 12
19024: PUSH
19025: LD_INT 13
19027: PUSH
19028: LD_INT 14
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: LD_INT 3
19039: PUSH
19040: LD_INT 4
19042: PUSH
19043: LD_INT 5
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 23
19051: PUSH
19052: LD_INT 22
19054: PUSH
19055: LD_INT 24
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: ST_TO_ADDR
19073: GO 19134
19075: LD_INT 3
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19133
19083: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: LD_INT 13
19091: PUSH
19092: LD_INT 14
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: LD_INT 3
19100: PUSH
19101: LD_INT 4
19103: PUSH
19104: LD_INT 5
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_INT 23
19115: PUSH
19116: LD_INT 24
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: ST_TO_ADDR
19131: GO 19134
19133: POP
// result := ( chassis in result ) ;
19134: LD_ADDR_VAR 0 3
19138: PUSH
19139: LD_VAR 0 1
19143: PUSH
19144: LD_VAR 0 3
19148: IN
19149: ST_TO_ADDR
// end ;
19150: LD_VAR 0 3
19154: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19155: LD_INT 0
19157: PPUSH
// if not chassis or not weapon then
19158: LD_VAR 0 1
19162: NOT
19163: PUSH
19164: LD_VAR 0 2
19168: NOT
19169: OR
19170: IFFALSE 19174
// exit ;
19172: GO 20234
// case weapon of us_machine_gun :
19174: LD_VAR 0 2
19178: PUSH
19179: LD_INT 2
19181: DOUBLE
19182: EQUAL
19183: IFTRUE 19187
19185: GO 19217
19187: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19188: LD_ADDR_VAR 0 3
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: LD_INT 3
19201: PUSH
19202: LD_INT 4
19204: PUSH
19205: LD_INT 5
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: ST_TO_ADDR
19215: GO 20218
19217: LD_INT 3
19219: DOUBLE
19220: EQUAL
19221: IFTRUE 19225
19223: GO 19255
19225: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19226: LD_ADDR_VAR 0 3
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: LD_INT 4
19242: PUSH
19243: LD_INT 5
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: ST_TO_ADDR
19253: GO 20218
19255: LD_INT 11
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19293
19263: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19264: LD_ADDR_VAR 0 3
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 3
19277: PUSH
19278: LD_INT 4
19280: PUSH
19281: LD_INT 5
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: ST_TO_ADDR
19291: GO 20218
19293: LD_INT 4
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19327
19301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 3
19312: PUSH
19313: LD_INT 4
19315: PUSH
19316: LD_INT 5
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: ST_TO_ADDR
19325: GO 20218
19327: LD_INT 5
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19335
19333: GO 19361
19335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19336: LD_ADDR_VAR 0 3
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 3
19346: PUSH
19347: LD_INT 4
19349: PUSH
19350: LD_INT 5
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: ST_TO_ADDR
19359: GO 20218
19361: LD_INT 9
19363: DOUBLE
19364: EQUAL
19365: IFTRUE 19369
19367: GO 19395
19369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19370: LD_ADDR_VAR 0 3
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: LD_INT 4
19383: PUSH
19384: LD_INT 5
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: ST_TO_ADDR
19393: GO 20218
19395: LD_INT 7
19397: DOUBLE
19398: EQUAL
19399: IFTRUE 19403
19401: GO 19429
19403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 3
19414: PUSH
19415: LD_INT 4
19417: PUSH
19418: LD_INT 5
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: ST_TO_ADDR
19427: GO 20218
19429: LD_INT 12
19431: DOUBLE
19432: EQUAL
19433: IFTRUE 19437
19435: GO 19463
19437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19438: LD_ADDR_VAR 0 3
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 3
19448: PUSH
19449: LD_INT 4
19451: PUSH
19452: LD_INT 5
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: ST_TO_ADDR
19461: GO 20218
19463: LD_INT 13
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 19497
19471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19472: LD_ADDR_VAR 0 3
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 3
19482: PUSH
19483: LD_INT 4
19485: PUSH
19486: LD_INT 5
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: ST_TO_ADDR
19495: GO 20218
19497: LD_INT 14
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19523
19505: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19506: LD_ADDR_VAR 0 3
19510: PUSH
19511: LD_INT 4
19513: PUSH
19514: LD_INT 5
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: ST_TO_ADDR
19521: GO 20218
19523: LD_INT 6
19525: DOUBLE
19526: EQUAL
19527: IFTRUE 19531
19529: GO 19549
19531: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19532: LD_ADDR_VAR 0 3
19536: PUSH
19537: LD_INT 4
19539: PUSH
19540: LD_INT 5
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: ST_TO_ADDR
19547: GO 20218
19549: LD_INT 10
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19575
19557: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: LD_INT 5
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: ST_TO_ADDR
19573: GO 20218
19575: LD_INT 22
19577: DOUBLE
19578: EQUAL
19579: IFTRUE 19583
19581: GO 19609
19583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19584: LD_ADDR_VAR 0 3
19588: PUSH
19589: LD_INT 11
19591: PUSH
19592: LD_INT 12
19594: PUSH
19595: LD_INT 13
19597: PUSH
19598: LD_INT 14
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: ST_TO_ADDR
19607: GO 20218
19609: LD_INT 23
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19643
19617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: LD_INT 11
19625: PUSH
19626: LD_INT 12
19628: PUSH
19629: LD_INT 13
19631: PUSH
19632: LD_INT 14
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: ST_TO_ADDR
19641: GO 20218
19643: LD_INT 24
19645: DOUBLE
19646: EQUAL
19647: IFTRUE 19651
19649: GO 19677
19651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19652: LD_ADDR_VAR 0 3
19656: PUSH
19657: LD_INT 11
19659: PUSH
19660: LD_INT 12
19662: PUSH
19663: LD_INT 13
19665: PUSH
19666: LD_INT 14
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: ST_TO_ADDR
19675: GO 20218
19677: LD_INT 30
19679: DOUBLE
19680: EQUAL
19681: IFTRUE 19685
19683: GO 19711
19685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: LD_INT 11
19693: PUSH
19694: LD_INT 12
19696: PUSH
19697: LD_INT 13
19699: PUSH
19700: LD_INT 14
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: ST_TO_ADDR
19709: GO 20218
19711: LD_INT 25
19713: DOUBLE
19714: EQUAL
19715: IFTRUE 19719
19717: GO 19737
19719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19720: LD_ADDR_VAR 0 3
19724: PUSH
19725: LD_INT 13
19727: PUSH
19728: LD_INT 14
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: ST_TO_ADDR
19735: GO 20218
19737: LD_INT 27
19739: DOUBLE
19740: EQUAL
19741: IFTRUE 19745
19743: GO 19763
19745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19746: LD_ADDR_VAR 0 3
19750: PUSH
19751: LD_INT 13
19753: PUSH
19754: LD_INT 14
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: ST_TO_ADDR
19761: GO 20218
19763: LD_INT 92
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19797
19771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19772: LD_ADDR_VAR 0 3
19776: PUSH
19777: LD_INT 11
19779: PUSH
19780: LD_INT 12
19782: PUSH
19783: LD_INT 13
19785: PUSH
19786: LD_INT 14
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: ST_TO_ADDR
19795: GO 20218
19797: LD_INT 28
19799: DOUBLE
19800: EQUAL
19801: IFTRUE 19805
19803: GO 19823
19805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19806: LD_ADDR_VAR 0 3
19810: PUSH
19811: LD_INT 13
19813: PUSH
19814: LD_INT 14
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: ST_TO_ADDR
19821: GO 20218
19823: LD_INT 29
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19849
19831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19832: LD_ADDR_VAR 0 3
19836: PUSH
19837: LD_INT 13
19839: PUSH
19840: LD_INT 14
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: ST_TO_ADDR
19847: GO 20218
19849: LD_INT 31
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19857
19855: GO 19875
19857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19858: LD_ADDR_VAR 0 3
19862: PUSH
19863: LD_INT 13
19865: PUSH
19866: LD_INT 14
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: ST_TO_ADDR
19873: GO 20218
19875: LD_INT 26
19877: DOUBLE
19878: EQUAL
19879: IFTRUE 19883
19881: GO 19901
19883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19884: LD_ADDR_VAR 0 3
19888: PUSH
19889: LD_INT 13
19891: PUSH
19892: LD_INT 14
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: ST_TO_ADDR
19899: GO 20218
19901: LD_INT 42
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 19935
19909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_INT 21
19917: PUSH
19918: LD_INT 22
19920: PUSH
19921: LD_INT 23
19923: PUSH
19924: LD_INT 24
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
19933: GO 20218
19935: LD_INT 43
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19969
19943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_INT 21
19951: PUSH
19952: LD_INT 22
19954: PUSH
19955: LD_INT 23
19957: PUSH
19958: LD_INT 24
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
19967: GO 20218
19969: LD_INT 44
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 20003
19977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19978: LD_ADDR_VAR 0 3
19982: PUSH
19983: LD_INT 21
19985: PUSH
19986: LD_INT 22
19988: PUSH
19989: LD_INT 23
19991: PUSH
19992: LD_INT 24
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: ST_TO_ADDR
20001: GO 20218
20003: LD_INT 45
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20037
20011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_INT 21
20019: PUSH
20020: LD_INT 22
20022: PUSH
20023: LD_INT 23
20025: PUSH
20026: LD_INT 24
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: ST_TO_ADDR
20035: GO 20218
20037: LD_INT 49
20039: DOUBLE
20040: EQUAL
20041: IFTRUE 20045
20043: GO 20071
20045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_INT 21
20053: PUSH
20054: LD_INT 22
20056: PUSH
20057: LD_INT 23
20059: PUSH
20060: LD_INT 24
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: ST_TO_ADDR
20069: GO 20218
20071: LD_INT 51
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20105
20079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20080: LD_ADDR_VAR 0 3
20084: PUSH
20085: LD_INT 21
20087: PUSH
20088: LD_INT 22
20090: PUSH
20091: LD_INT 23
20093: PUSH
20094: LD_INT 24
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: ST_TO_ADDR
20103: GO 20218
20105: LD_INT 52
20107: DOUBLE
20108: EQUAL
20109: IFTRUE 20113
20111: GO 20139
20113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20114: LD_ADDR_VAR 0 3
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 22
20124: PUSH
20125: LD_INT 23
20127: PUSH
20128: LD_INT 24
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: ST_TO_ADDR
20137: GO 20218
20139: LD_INT 53
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20165
20147: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20148: LD_ADDR_VAR 0 3
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 24
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: ST_TO_ADDR
20163: GO 20218
20165: LD_INT 46
20167: DOUBLE
20168: EQUAL
20169: IFTRUE 20173
20171: GO 20191
20173: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20174: LD_ADDR_VAR 0 3
20178: PUSH
20179: LD_INT 23
20181: PUSH
20182: LD_INT 24
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: ST_TO_ADDR
20189: GO 20218
20191: LD_INT 47
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20217
20199: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20200: LD_ADDR_VAR 0 3
20204: PUSH
20205: LD_INT 23
20207: PUSH
20208: LD_INT 24
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: ST_TO_ADDR
20215: GO 20218
20217: POP
// result := ( chassis in result ) ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_VAR 0 1
20227: PUSH
20228: LD_VAR 0 3
20232: IN
20233: ST_TO_ADDR
// end ;
20234: LD_VAR 0 3
20238: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20239: LD_INT 0
20241: PPUSH
20242: PPUSH
20243: PPUSH
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
// result := array ;
20248: LD_ADDR_VAR 0 5
20252: PUSH
20253: LD_VAR 0 1
20257: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20258: LD_VAR 0 1
20262: NOT
20263: PUSH
20264: LD_VAR 0 2
20268: NOT
20269: OR
20270: PUSH
20271: LD_VAR 0 3
20275: NOT
20276: OR
20277: PUSH
20278: LD_VAR 0 2
20282: PUSH
20283: LD_VAR 0 1
20287: GREATER
20288: OR
20289: PUSH
20290: LD_VAR 0 3
20294: PUSH
20295: LD_VAR 0 1
20299: GREATER
20300: OR
20301: IFFALSE 20305
// exit ;
20303: GO 20601
// if direction then
20305: LD_VAR 0 4
20309: IFFALSE 20373
// begin d := 1 ;
20311: LD_ADDR_VAR 0 9
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if i_from > i_to then
20319: LD_VAR 0 2
20323: PUSH
20324: LD_VAR 0 3
20328: GREATER
20329: IFFALSE 20355
// length := ( array - i_from ) + i_to else
20331: LD_ADDR_VAR 0 11
20335: PUSH
20336: LD_VAR 0 1
20340: PUSH
20341: LD_VAR 0 2
20345: MINUS
20346: PUSH
20347: LD_VAR 0 3
20351: PLUS
20352: ST_TO_ADDR
20353: GO 20371
// length := i_to - i_from ;
20355: LD_ADDR_VAR 0 11
20359: PUSH
20360: LD_VAR 0 3
20364: PUSH
20365: LD_VAR 0 2
20369: MINUS
20370: ST_TO_ADDR
// end else
20371: GO 20434
// begin d := - 1 ;
20373: LD_ADDR_VAR 0 9
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: ST_TO_ADDR
// if i_from > i_to then
20382: LD_VAR 0 2
20386: PUSH
20387: LD_VAR 0 3
20391: GREATER
20392: IFFALSE 20412
// length := i_from - i_to else
20394: LD_ADDR_VAR 0 11
20398: PUSH
20399: LD_VAR 0 2
20403: PUSH
20404: LD_VAR 0 3
20408: MINUS
20409: ST_TO_ADDR
20410: GO 20434
// length := ( array - i_to ) + i_from ;
20412: LD_ADDR_VAR 0 11
20416: PUSH
20417: LD_VAR 0 1
20421: PUSH
20422: LD_VAR 0 3
20426: MINUS
20427: PUSH
20428: LD_VAR 0 2
20432: PLUS
20433: ST_TO_ADDR
// end ; if not length then
20434: LD_VAR 0 11
20438: NOT
20439: IFFALSE 20443
// exit ;
20441: GO 20601
// tmp := array ;
20443: LD_ADDR_VAR 0 10
20447: PUSH
20448: LD_VAR 0 1
20452: ST_TO_ADDR
// for i = 1 to length do
20453: LD_ADDR_VAR 0 6
20457: PUSH
20458: DOUBLE
20459: LD_INT 1
20461: DEC
20462: ST_TO_ADDR
20463: LD_VAR 0 11
20467: PUSH
20468: FOR_TO
20469: IFFALSE 20589
// begin for j = 1 to array do
20471: LD_ADDR_VAR 0 7
20475: PUSH
20476: DOUBLE
20477: LD_INT 1
20479: DEC
20480: ST_TO_ADDR
20481: LD_VAR 0 1
20485: PUSH
20486: FOR_TO
20487: IFFALSE 20575
// begin k := j + d ;
20489: LD_ADDR_VAR 0 8
20493: PUSH
20494: LD_VAR 0 7
20498: PUSH
20499: LD_VAR 0 9
20503: PLUS
20504: ST_TO_ADDR
// if k > array then
20505: LD_VAR 0 8
20509: PUSH
20510: LD_VAR 0 1
20514: GREATER
20515: IFFALSE 20525
// k := 1 ;
20517: LD_ADDR_VAR 0 8
20521: PUSH
20522: LD_INT 1
20524: ST_TO_ADDR
// if not k then
20525: LD_VAR 0 8
20529: NOT
20530: IFFALSE 20542
// k := array ;
20532: LD_ADDR_VAR 0 8
20536: PUSH
20537: LD_VAR 0 1
20541: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20542: LD_ADDR_VAR 0 10
20546: PUSH
20547: LD_VAR 0 10
20551: PPUSH
20552: LD_VAR 0 8
20556: PPUSH
20557: LD_VAR 0 1
20561: PUSH
20562: LD_VAR 0 7
20566: ARRAY
20567: PPUSH
20568: CALL_OW 1
20572: ST_TO_ADDR
// end ;
20573: GO 20486
20575: POP
20576: POP
// array := tmp ;
20577: LD_ADDR_VAR 0 1
20581: PUSH
20582: LD_VAR 0 10
20586: ST_TO_ADDR
// end ;
20587: GO 20468
20589: POP
20590: POP
// result := array ;
20591: LD_ADDR_VAR 0 5
20595: PUSH
20596: LD_VAR 0 1
20600: ST_TO_ADDR
// end ;
20601: LD_VAR 0 5
20605: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20606: LD_INT 0
20608: PPUSH
20609: PPUSH
// result := 0 ;
20610: LD_ADDR_VAR 0 3
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// if not array or not value in array then
20618: LD_VAR 0 1
20622: NOT
20623: PUSH
20624: LD_VAR 0 2
20628: PUSH
20629: LD_VAR 0 1
20633: IN
20634: NOT
20635: OR
20636: IFFALSE 20640
// exit ;
20638: GO 20694
// for i = 1 to array do
20640: LD_ADDR_VAR 0 4
20644: PUSH
20645: DOUBLE
20646: LD_INT 1
20648: DEC
20649: ST_TO_ADDR
20650: LD_VAR 0 1
20654: PUSH
20655: FOR_TO
20656: IFFALSE 20692
// if value = array [ i ] then
20658: LD_VAR 0 2
20662: PUSH
20663: LD_VAR 0 1
20667: PUSH
20668: LD_VAR 0 4
20672: ARRAY
20673: EQUAL
20674: IFFALSE 20690
// begin result := i ;
20676: LD_ADDR_VAR 0 3
20680: PUSH
20681: LD_VAR 0 4
20685: ST_TO_ADDR
// exit ;
20686: POP
20687: POP
20688: GO 20694
// end ;
20690: GO 20655
20692: POP
20693: POP
// end ;
20694: LD_VAR 0 3
20698: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20699: LD_INT 0
20701: PPUSH
// vc_chassis := chassis ;
20702: LD_ADDR_OWVAR 37
20706: PUSH
20707: LD_VAR 0 1
20711: ST_TO_ADDR
// vc_engine := engine ;
20712: LD_ADDR_OWVAR 39
20716: PUSH
20717: LD_VAR 0 2
20721: ST_TO_ADDR
// vc_control := control ;
20722: LD_ADDR_OWVAR 38
20726: PUSH
20727: LD_VAR 0 3
20731: ST_TO_ADDR
// vc_weapon := weapon ;
20732: LD_ADDR_OWVAR 40
20736: PUSH
20737: LD_VAR 0 4
20741: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20742: LD_ADDR_OWVAR 41
20746: PUSH
20747: LD_VAR 0 5
20751: ST_TO_ADDR
// end ;
20752: LD_VAR 0 6
20756: RET
// export function WantPlant ( unit ) ; var task ; begin
20757: LD_INT 0
20759: PPUSH
20760: PPUSH
// result := false ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: LD_VAR 0 1
20778: PPUSH
20779: CALL_OW 437
20783: ST_TO_ADDR
// if task then
20784: LD_VAR 0 3
20788: IFFALSE 20816
// if task [ 1 ] [ 1 ] = p then
20790: LD_VAR 0 3
20794: PUSH
20795: LD_INT 1
20797: ARRAY
20798: PUSH
20799: LD_INT 1
20801: ARRAY
20802: PUSH
20803: LD_STRING p
20805: EQUAL
20806: IFFALSE 20816
// result := true ;
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// end ;
20816: LD_VAR 0 2
20820: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20821: LD_INT 0
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
// if pos < 1 then
20827: LD_VAR 0 2
20831: PUSH
20832: LD_INT 1
20834: LESS
20835: IFFALSE 20839
// exit ;
20837: GO 21142
// if pos = 1 then
20839: LD_VAR 0 2
20843: PUSH
20844: LD_INT 1
20846: EQUAL
20847: IFFALSE 20880
// result := Replace ( arr , pos [ 1 ] , value ) else
20849: LD_ADDR_VAR 0 4
20853: PUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: LD_VAR 0 2
20863: PUSH
20864: LD_INT 1
20866: ARRAY
20867: PPUSH
20868: LD_VAR 0 3
20872: PPUSH
20873: CALL_OW 1
20877: ST_TO_ADDR
20878: GO 21142
// begin tmp := arr ;
20880: LD_ADDR_VAR 0 6
20884: PUSH
20885: LD_VAR 0 1
20889: ST_TO_ADDR
// s_arr := [ tmp ] ;
20890: LD_ADDR_VAR 0 7
20894: PUSH
20895: LD_VAR 0 6
20899: PUSH
20900: EMPTY
20901: LIST
20902: ST_TO_ADDR
// for i = 1 to pos - 1 do
20903: LD_ADDR_VAR 0 5
20907: PUSH
20908: DOUBLE
20909: LD_INT 1
20911: DEC
20912: ST_TO_ADDR
20913: LD_VAR 0 2
20917: PUSH
20918: LD_INT 1
20920: MINUS
20921: PUSH
20922: FOR_TO
20923: IFFALSE 20968
// begin tmp := tmp [ pos [ i ] ] ;
20925: LD_ADDR_VAR 0 6
20929: PUSH
20930: LD_VAR 0 6
20934: PUSH
20935: LD_VAR 0 2
20939: PUSH
20940: LD_VAR 0 5
20944: ARRAY
20945: ARRAY
20946: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20947: LD_ADDR_VAR 0 7
20951: PUSH
20952: LD_VAR 0 7
20956: PUSH
20957: LD_VAR 0 6
20961: PUSH
20962: EMPTY
20963: LIST
20964: ADD
20965: ST_TO_ADDR
// end ;
20966: GO 20922
20968: POP
20969: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20970: LD_ADDR_VAR 0 6
20974: PUSH
20975: LD_VAR 0 6
20979: PPUSH
20980: LD_VAR 0 2
20984: PUSH
20985: LD_VAR 0 2
20989: ARRAY
20990: PPUSH
20991: LD_VAR 0 3
20995: PPUSH
20996: CALL_OW 1
21000: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21001: LD_ADDR_VAR 0 7
21005: PUSH
21006: LD_VAR 0 7
21010: PPUSH
21011: LD_VAR 0 7
21015: PPUSH
21016: LD_VAR 0 6
21020: PPUSH
21021: CALL_OW 1
21025: ST_TO_ADDR
// for i = s_arr downto 2 do
21026: LD_ADDR_VAR 0 5
21030: PUSH
21031: DOUBLE
21032: LD_VAR 0 7
21036: INC
21037: ST_TO_ADDR
21038: LD_INT 2
21040: PUSH
21041: FOR_DOWNTO
21042: IFFALSE 21126
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21044: LD_ADDR_VAR 0 6
21048: PUSH
21049: LD_VAR 0 7
21053: PUSH
21054: LD_VAR 0 5
21058: PUSH
21059: LD_INT 1
21061: MINUS
21062: ARRAY
21063: PPUSH
21064: LD_VAR 0 2
21068: PUSH
21069: LD_VAR 0 5
21073: PUSH
21074: LD_INT 1
21076: MINUS
21077: ARRAY
21078: PPUSH
21079: LD_VAR 0 7
21083: PUSH
21084: LD_VAR 0 5
21088: ARRAY
21089: PPUSH
21090: CALL_OW 1
21094: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21095: LD_ADDR_VAR 0 7
21099: PUSH
21100: LD_VAR 0 7
21104: PPUSH
21105: LD_VAR 0 5
21109: PUSH
21110: LD_INT 1
21112: MINUS
21113: PPUSH
21114: LD_VAR 0 6
21118: PPUSH
21119: CALL_OW 1
21123: ST_TO_ADDR
// end ;
21124: GO 21041
21126: POP
21127: POP
// result := s_arr [ 1 ] ;
21128: LD_ADDR_VAR 0 4
21132: PUSH
21133: LD_VAR 0 7
21137: PUSH
21138: LD_INT 1
21140: ARRAY
21141: ST_TO_ADDR
// end ; end ;
21142: LD_VAR 0 4
21146: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21147: LD_INT 0
21149: PPUSH
21150: PPUSH
// if not list then
21151: LD_VAR 0 1
21155: NOT
21156: IFFALSE 21160
// exit ;
21158: GO 21251
// i := list [ pos1 ] ;
21160: LD_ADDR_VAR 0 5
21164: PUSH
21165: LD_VAR 0 1
21169: PUSH
21170: LD_VAR 0 2
21174: ARRAY
21175: ST_TO_ADDR
// if not i then
21176: LD_VAR 0 5
21180: NOT
21181: IFFALSE 21185
// exit ;
21183: GO 21251
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21185: LD_ADDR_VAR 0 1
21189: PUSH
21190: LD_VAR 0 1
21194: PPUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: LD_VAR 0 1
21204: PUSH
21205: LD_VAR 0 3
21209: ARRAY
21210: PPUSH
21211: CALL_OW 1
21215: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21216: LD_ADDR_VAR 0 1
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: LD_VAR 0 3
21230: PPUSH
21231: LD_VAR 0 5
21235: PPUSH
21236: CALL_OW 1
21240: ST_TO_ADDR
// result := list ;
21241: LD_ADDR_VAR 0 4
21245: PUSH
21246: LD_VAR 0 1
21250: ST_TO_ADDR
// end ;
21251: LD_VAR 0 4
21255: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21256: LD_INT 0
21258: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21259: LD_ADDR_VAR 0 5
21263: PUSH
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 250
21273: PPUSH
21274: LD_VAR 0 1
21278: PPUSH
21279: CALL_OW 251
21283: PPUSH
21284: LD_VAR 0 2
21288: PPUSH
21289: LD_VAR 0 3
21293: PPUSH
21294: LD_VAR 0 4
21298: PPUSH
21299: CALL 21309 0 5
21303: ST_TO_ADDR
// end ;
21304: LD_VAR 0 5
21308: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
21313: PPUSH
21314: PPUSH
// if not list then
21315: LD_VAR 0 3
21319: NOT
21320: IFFALSE 21324
// exit ;
21322: GO 21712
// result := [ ] ;
21324: LD_ADDR_VAR 0 6
21328: PUSH
21329: EMPTY
21330: ST_TO_ADDR
// for i in list do
21331: LD_ADDR_VAR 0 7
21335: PUSH
21336: LD_VAR 0 3
21340: PUSH
21341: FOR_IN
21342: IFFALSE 21544
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21344: LD_ADDR_VAR 0 9
21348: PUSH
21349: LD_VAR 0 7
21353: PPUSH
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_VAR 0 2
21363: PPUSH
21364: CALL_OW 297
21368: ST_TO_ADDR
// if not result then
21369: LD_VAR 0 6
21373: NOT
21374: IFFALSE 21400
// result := [ [ i , tmp ] ] else
21376: LD_ADDR_VAR 0 6
21380: PUSH
21381: LD_VAR 0 7
21385: PUSH
21386: LD_VAR 0 9
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: ST_TO_ADDR
21398: GO 21542
// begin if result [ result ] [ 2 ] < tmp then
21400: LD_VAR 0 6
21404: PUSH
21405: LD_VAR 0 6
21409: ARRAY
21410: PUSH
21411: LD_INT 2
21413: ARRAY
21414: PUSH
21415: LD_VAR 0 9
21419: LESS
21420: IFFALSE 21462
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21422: LD_ADDR_VAR 0 6
21426: PUSH
21427: LD_VAR 0 6
21431: PPUSH
21432: LD_VAR 0 6
21436: PUSH
21437: LD_INT 1
21439: PLUS
21440: PPUSH
21441: LD_VAR 0 7
21445: PUSH
21446: LD_VAR 0 9
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 2
21459: ST_TO_ADDR
21460: GO 21542
// for j = 1 to result do
21462: LD_ADDR_VAR 0 8
21466: PUSH
21467: DOUBLE
21468: LD_INT 1
21470: DEC
21471: ST_TO_ADDR
21472: LD_VAR 0 6
21476: PUSH
21477: FOR_TO
21478: IFFALSE 21540
// begin if tmp < result [ j ] [ 2 ] then
21480: LD_VAR 0 9
21484: PUSH
21485: LD_VAR 0 6
21489: PUSH
21490: LD_VAR 0 8
21494: ARRAY
21495: PUSH
21496: LD_INT 2
21498: ARRAY
21499: LESS
21500: IFFALSE 21538
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21502: LD_ADDR_VAR 0 6
21506: PUSH
21507: LD_VAR 0 6
21511: PPUSH
21512: LD_VAR 0 8
21516: PPUSH
21517: LD_VAR 0 7
21521: PUSH
21522: LD_VAR 0 9
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 2
21535: ST_TO_ADDR
// break ;
21536: GO 21540
// end ; end ;
21538: GO 21477
21540: POP
21541: POP
// end ; end ;
21542: GO 21341
21544: POP
21545: POP
// if result and not asc then
21546: LD_VAR 0 6
21550: PUSH
21551: LD_VAR 0 4
21555: NOT
21556: AND
21557: IFFALSE 21632
// begin tmp := result ;
21559: LD_ADDR_VAR 0 9
21563: PUSH
21564: LD_VAR 0 6
21568: ST_TO_ADDR
// for i = tmp downto 1 do
21569: LD_ADDR_VAR 0 7
21573: PUSH
21574: DOUBLE
21575: LD_VAR 0 9
21579: INC
21580: ST_TO_ADDR
21581: LD_INT 1
21583: PUSH
21584: FOR_DOWNTO
21585: IFFALSE 21630
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21587: LD_ADDR_VAR 0 6
21591: PUSH
21592: LD_VAR 0 6
21596: PPUSH
21597: LD_VAR 0 9
21601: PUSH
21602: LD_VAR 0 7
21606: MINUS
21607: PUSH
21608: LD_INT 1
21610: PLUS
21611: PPUSH
21612: LD_VAR 0 9
21616: PUSH
21617: LD_VAR 0 7
21621: ARRAY
21622: PPUSH
21623: CALL_OW 1
21627: ST_TO_ADDR
21628: GO 21584
21630: POP
21631: POP
// end ; tmp := [ ] ;
21632: LD_ADDR_VAR 0 9
21636: PUSH
21637: EMPTY
21638: ST_TO_ADDR
// if mode then
21639: LD_VAR 0 5
21643: IFFALSE 21712
// begin for i = 1 to result do
21645: LD_ADDR_VAR 0 7
21649: PUSH
21650: DOUBLE
21651: LD_INT 1
21653: DEC
21654: ST_TO_ADDR
21655: LD_VAR 0 6
21659: PUSH
21660: FOR_TO
21661: IFFALSE 21700
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21663: LD_ADDR_VAR 0 9
21667: PUSH
21668: LD_VAR 0 9
21672: PPUSH
21673: LD_VAR 0 7
21677: PPUSH
21678: LD_VAR 0 6
21682: PUSH
21683: LD_VAR 0 7
21687: ARRAY
21688: PUSH
21689: LD_INT 1
21691: ARRAY
21692: PPUSH
21693: CALL_OW 1
21697: ST_TO_ADDR
21698: GO 21660
21700: POP
21701: POP
// result := tmp ;
21702: LD_ADDR_VAR 0 6
21706: PUSH
21707: LD_VAR 0 9
21711: ST_TO_ADDR
// end ; end ;
21712: LD_VAR 0 6
21716: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21717: LD_INT 0
21719: PPUSH
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
21724: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21725: LD_ADDR_VAR 0 5
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: ST_TO_ADDR
// if not x or not y then
21747: LD_VAR 0 2
21751: NOT
21752: PUSH
21753: LD_VAR 0 3
21757: NOT
21758: OR
21759: IFFALSE 21763
// exit ;
21761: GO 23413
// if not range then
21763: LD_VAR 0 4
21767: NOT
21768: IFFALSE 21778
// range := 10 ;
21770: LD_ADDR_VAR 0 4
21774: PUSH
21775: LD_INT 10
21777: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21778: LD_ADDR_VAR 0 8
21782: PUSH
21783: LD_INT 81
21785: PUSH
21786: LD_VAR 0 1
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 92
21797: PUSH
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 3
21807: PUSH
21808: LD_VAR 0 4
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 3
21821: PUSH
21822: LD_INT 21
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: PPUSH
21841: CALL_OW 69
21845: ST_TO_ADDR
// if not tmp then
21846: LD_VAR 0 8
21850: NOT
21851: IFFALSE 21855
// exit ;
21853: GO 23413
// for i in tmp do
21855: LD_ADDR_VAR 0 6
21859: PUSH
21860: LD_VAR 0 8
21864: PUSH
21865: FOR_IN
21866: IFFALSE 23388
// begin points := [ 0 , 0 , 0 ] ;
21868: LD_ADDR_VAR 0 9
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: ST_TO_ADDR
// bpoints := 1 ;
21887: LD_ADDR_VAR 0 10
21891: PUSH
21892: LD_INT 1
21894: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21895: LD_VAR 0 6
21899: PPUSH
21900: CALL_OW 247
21904: PUSH
21905: LD_INT 1
21907: DOUBLE
21908: EQUAL
21909: IFTRUE 21913
21911: GO 22491
21913: POP
// begin if GetClass ( i ) = 1 then
21914: LD_VAR 0 6
21918: PPUSH
21919: CALL_OW 257
21923: PUSH
21924: LD_INT 1
21926: EQUAL
21927: IFFALSE 21948
// points := [ 10 , 5 , 3 ] ;
21929: LD_ADDR_VAR 0 9
21933: PUSH
21934: LD_INT 10
21936: PUSH
21937: LD_INT 5
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21948: LD_VAR 0 6
21952: PPUSH
21953: CALL_OW 257
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: IN
21972: IFFALSE 21993
// points := [ 3 , 2 , 1 ] ;
21974: LD_ADDR_VAR 0 9
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21993: LD_VAR 0 6
21997: PPUSH
21998: CALL_OW 257
22002: PUSH
22003: LD_INT 5
22005: EQUAL
22006: IFFALSE 22027
// points := [ 130 , 5 , 2 ] ;
22008: LD_ADDR_VAR 0 9
22012: PUSH
22013: LD_INT 130
22015: PUSH
22016: LD_INT 5
22018: PUSH
22019: LD_INT 2
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22027: LD_VAR 0 6
22031: PPUSH
22032: CALL_OW 257
22036: PUSH
22037: LD_INT 8
22039: EQUAL
22040: IFFALSE 22061
// points := [ 35 , 35 , 30 ] ;
22042: LD_ADDR_VAR 0 9
22046: PUSH
22047: LD_INT 35
22049: PUSH
22050: LD_INT 35
22052: PUSH
22053: LD_INT 30
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22061: LD_VAR 0 6
22065: PPUSH
22066: CALL_OW 257
22070: PUSH
22071: LD_INT 9
22073: EQUAL
22074: IFFALSE 22095
// points := [ 20 , 55 , 40 ] ;
22076: LD_ADDR_VAR 0 9
22080: PUSH
22081: LD_INT 20
22083: PUSH
22084: LD_INT 55
22086: PUSH
22087: LD_INT 40
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22095: LD_VAR 0 6
22099: PPUSH
22100: CALL_OW 257
22104: PUSH
22105: LD_INT 12
22107: PUSH
22108: LD_INT 16
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: IN
22115: IFFALSE 22136
// points := [ 5 , 3 , 2 ] ;
22117: LD_ADDR_VAR 0 9
22121: PUSH
22122: LD_INT 5
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: LD_INT 2
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22136: LD_VAR 0 6
22140: PPUSH
22141: CALL_OW 257
22145: PUSH
22146: LD_INT 17
22148: EQUAL
22149: IFFALSE 22170
// points := [ 100 , 50 , 75 ] ;
22151: LD_ADDR_VAR 0 9
22155: PUSH
22156: LD_INT 100
22158: PUSH
22159: LD_INT 50
22161: PUSH
22162: LD_INT 75
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22170: LD_VAR 0 6
22174: PPUSH
22175: CALL_OW 257
22179: PUSH
22180: LD_INT 15
22182: EQUAL
22183: IFFALSE 22204
// points := [ 10 , 5 , 3 ] ;
22185: LD_ADDR_VAR 0 9
22189: PUSH
22190: LD_INT 10
22192: PUSH
22193: LD_INT 5
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22204: LD_VAR 0 6
22208: PPUSH
22209: CALL_OW 257
22213: PUSH
22214: LD_INT 14
22216: EQUAL
22217: IFFALSE 22238
// points := [ 10 , 0 , 0 ] ;
22219: LD_ADDR_VAR 0 9
22223: PUSH
22224: LD_INT 10
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22238: LD_VAR 0 6
22242: PPUSH
22243: CALL_OW 257
22247: PUSH
22248: LD_INT 11
22250: EQUAL
22251: IFFALSE 22272
// points := [ 30 , 10 , 5 ] ;
22253: LD_ADDR_VAR 0 9
22257: PUSH
22258: LD_INT 30
22260: PUSH
22261: LD_INT 10
22263: PUSH
22264: LD_INT 5
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22272: LD_VAR 0 1
22276: PPUSH
22277: LD_INT 5
22279: PPUSH
22280: CALL_OW 321
22284: PUSH
22285: LD_INT 2
22287: EQUAL
22288: IFFALSE 22305
// bpoints := bpoints * 1.8 ;
22290: LD_ADDR_VAR 0 10
22294: PUSH
22295: LD_VAR 0 10
22299: PUSH
22300: LD_REAL  1.80000000000000E+0000
22303: MUL
22304: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22305: LD_VAR 0 6
22309: PPUSH
22310: CALL_OW 257
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 3
22323: PUSH
22324: LD_INT 4
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: IN
22333: PUSH
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 51
22341: PPUSH
22342: CALL_OW 321
22346: PUSH
22347: LD_INT 2
22349: EQUAL
22350: AND
22351: IFFALSE 22368
// bpoints := bpoints * 1.2 ;
22353: LD_ADDR_VAR 0 10
22357: PUSH
22358: LD_VAR 0 10
22362: PUSH
22363: LD_REAL  1.20000000000000E+0000
22366: MUL
22367: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22368: LD_VAR 0 6
22372: PPUSH
22373: CALL_OW 257
22377: PUSH
22378: LD_INT 5
22380: PUSH
22381: LD_INT 7
22383: PUSH
22384: LD_INT 9
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: IN
22392: PUSH
22393: LD_VAR 0 1
22397: PPUSH
22398: LD_INT 52
22400: PPUSH
22401: CALL_OW 321
22405: PUSH
22406: LD_INT 2
22408: EQUAL
22409: AND
22410: IFFALSE 22427
// bpoints := bpoints * 1.5 ;
22412: LD_ADDR_VAR 0 10
22416: PUSH
22417: LD_VAR 0 10
22421: PUSH
22422: LD_REAL  1.50000000000000E+0000
22425: MUL
22426: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22427: LD_VAR 0 1
22431: PPUSH
22432: LD_INT 66
22434: PPUSH
22435: CALL_OW 321
22439: PUSH
22440: LD_INT 2
22442: EQUAL
22443: IFFALSE 22460
// bpoints := bpoints * 1.1 ;
22445: LD_ADDR_VAR 0 10
22449: PUSH
22450: LD_VAR 0 10
22454: PUSH
22455: LD_REAL  1.10000000000000E+0000
22458: MUL
22459: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22460: LD_ADDR_VAR 0 10
22464: PUSH
22465: LD_VAR 0 10
22469: PUSH
22470: LD_VAR 0 6
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: CALL_OW 259
22482: PUSH
22483: LD_REAL  1.15000000000000E+0000
22486: MUL
22487: MUL
22488: ST_TO_ADDR
// end ; unit_vehicle :
22489: GO 23317
22491: LD_INT 2
22493: DOUBLE
22494: EQUAL
22495: IFTRUE 22499
22497: GO 23305
22499: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22500: LD_VAR 0 6
22504: PPUSH
22505: CALL_OW 264
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 42
22515: PUSH
22516: LD_INT 24
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: IN
22524: IFFALSE 22545
// points := [ 25 , 5 , 3 ] ;
22526: LD_ADDR_VAR 0 9
22530: PUSH
22531: LD_INT 25
22533: PUSH
22534: LD_INT 5
22536: PUSH
22537: LD_INT 3
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22545: LD_VAR 0 6
22549: PPUSH
22550: CALL_OW 264
22554: PUSH
22555: LD_INT 4
22557: PUSH
22558: LD_INT 43
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: IN
22569: IFFALSE 22590
// points := [ 40 , 15 , 5 ] ;
22571: LD_ADDR_VAR 0 9
22575: PUSH
22576: LD_INT 40
22578: PUSH
22579: LD_INT 15
22581: PUSH
22582: LD_INT 5
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22590: LD_VAR 0 6
22594: PPUSH
22595: CALL_OW 264
22599: PUSH
22600: LD_INT 3
22602: PUSH
22603: LD_INT 23
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: IN
22610: IFFALSE 22631
// points := [ 7 , 25 , 8 ] ;
22612: LD_ADDR_VAR 0 9
22616: PUSH
22617: LD_INT 7
22619: PUSH
22620: LD_INT 25
22622: PUSH
22623: LD_INT 8
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22631: LD_VAR 0 6
22635: PPUSH
22636: CALL_OW 264
22640: PUSH
22641: LD_INT 5
22643: PUSH
22644: LD_INT 27
22646: PUSH
22647: LD_INT 44
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: IN
22655: IFFALSE 22676
// points := [ 14 , 50 , 16 ] ;
22657: LD_ADDR_VAR 0 9
22661: PUSH
22662: LD_INT 14
22664: PUSH
22665: LD_INT 50
22667: PUSH
22668: LD_INT 16
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22676: LD_VAR 0 6
22680: PPUSH
22681: CALL_OW 264
22685: PUSH
22686: LD_INT 6
22688: PUSH
22689: LD_INT 46
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: IN
22696: IFFALSE 22717
// points := [ 32 , 120 , 70 ] ;
22698: LD_ADDR_VAR 0 9
22702: PUSH
22703: LD_INT 32
22705: PUSH
22706: LD_INT 120
22708: PUSH
22709: LD_INT 70
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22717: LD_VAR 0 6
22721: PPUSH
22722: CALL_OW 264
22726: PUSH
22727: LD_INT 7
22729: PUSH
22730: LD_INT 28
22732: PUSH
22733: LD_INT 45
22735: PUSH
22736: LD_INT 92
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: IN
22745: IFFALSE 22766
// points := [ 35 , 20 , 45 ] ;
22747: LD_ADDR_VAR 0 9
22751: PUSH
22752: LD_INT 35
22754: PUSH
22755: LD_INT 20
22757: PUSH
22758: LD_INT 45
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22766: LD_VAR 0 6
22770: PPUSH
22771: CALL_OW 264
22775: PUSH
22776: LD_INT 47
22778: PUSH
22779: EMPTY
22780: LIST
22781: IN
22782: IFFALSE 22803
// points := [ 67 , 45 , 75 ] ;
22784: LD_ADDR_VAR 0 9
22788: PUSH
22789: LD_INT 67
22791: PUSH
22792: LD_INT 45
22794: PUSH
22795: LD_INT 75
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22803: LD_VAR 0 6
22807: PPUSH
22808: CALL_OW 264
22812: PUSH
22813: LD_INT 26
22815: PUSH
22816: EMPTY
22817: LIST
22818: IN
22819: IFFALSE 22840
// points := [ 120 , 30 , 80 ] ;
22821: LD_ADDR_VAR 0 9
22825: PUSH
22826: LD_INT 120
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 80
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22840: LD_VAR 0 6
22844: PPUSH
22845: CALL_OW 264
22849: PUSH
22850: LD_INT 22
22852: PUSH
22853: EMPTY
22854: LIST
22855: IN
22856: IFFALSE 22877
// points := [ 40 , 1 , 1 ] ;
22858: LD_ADDR_VAR 0 9
22862: PUSH
22863: LD_INT 40
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22877: LD_VAR 0 6
22881: PPUSH
22882: CALL_OW 264
22886: PUSH
22887: LD_INT 29
22889: PUSH
22890: EMPTY
22891: LIST
22892: IN
22893: IFFALSE 22914
// points := [ 70 , 200 , 400 ] ;
22895: LD_ADDR_VAR 0 9
22899: PUSH
22900: LD_INT 70
22902: PUSH
22903: LD_INT 200
22905: PUSH
22906: LD_INT 400
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22914: LD_VAR 0 6
22918: PPUSH
22919: CALL_OW 264
22923: PUSH
22924: LD_INT 14
22926: PUSH
22927: LD_INT 53
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: IN
22934: IFFALSE 22955
// points := [ 40 , 10 , 20 ] ;
22936: LD_ADDR_VAR 0 9
22940: PUSH
22941: LD_INT 40
22943: PUSH
22944: LD_INT 10
22946: PUSH
22947: LD_INT 20
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22955: LD_VAR 0 6
22959: PPUSH
22960: CALL_OW 264
22964: PUSH
22965: LD_INT 9
22967: PUSH
22968: EMPTY
22969: LIST
22970: IN
22971: IFFALSE 22992
// points := [ 5 , 70 , 20 ] ;
22973: LD_ADDR_VAR 0 9
22977: PUSH
22978: LD_INT 5
22980: PUSH
22981: LD_INT 70
22983: PUSH
22984: LD_INT 20
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22992: LD_VAR 0 6
22996: PPUSH
22997: CALL_OW 264
23001: PUSH
23002: LD_INT 10
23004: PUSH
23005: EMPTY
23006: LIST
23007: IN
23008: IFFALSE 23029
// points := [ 35 , 110 , 70 ] ;
23010: LD_ADDR_VAR 0 9
23014: PUSH
23015: LD_INT 35
23017: PUSH
23018: LD_INT 110
23020: PUSH
23021: LD_INT 70
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: LIST
23028: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23029: LD_VAR 0 6
23033: PPUSH
23034: CALL_OW 265
23038: PUSH
23039: LD_INT 25
23041: EQUAL
23042: IFFALSE 23063
// points := [ 80 , 65 , 100 ] ;
23044: LD_ADDR_VAR 0 9
23048: PUSH
23049: LD_INT 80
23051: PUSH
23052: LD_INT 65
23054: PUSH
23055: LD_INT 100
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23063: LD_VAR 0 6
23067: PPUSH
23068: CALL_OW 263
23072: PUSH
23073: LD_INT 1
23075: EQUAL
23076: IFFALSE 23111
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23078: LD_ADDR_VAR 0 10
23082: PUSH
23083: LD_VAR 0 10
23087: PUSH
23088: LD_VAR 0 6
23092: PPUSH
23093: CALL_OW 311
23097: PPUSH
23098: LD_INT 3
23100: PPUSH
23101: CALL_OW 259
23105: PUSH
23106: LD_INT 4
23108: MUL
23109: MUL
23110: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23111: LD_VAR 0 6
23115: PPUSH
23116: CALL_OW 263
23120: PUSH
23121: LD_INT 2
23123: EQUAL
23124: IFFALSE 23175
// begin j := IsControledBy ( i ) ;
23126: LD_ADDR_VAR 0 7
23130: PUSH
23131: LD_VAR 0 6
23135: PPUSH
23136: CALL_OW 312
23140: ST_TO_ADDR
// if j then
23141: LD_VAR 0 7
23145: IFFALSE 23175
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23147: LD_ADDR_VAR 0 10
23151: PUSH
23152: LD_VAR 0 10
23156: PUSH
23157: LD_VAR 0 7
23161: PPUSH
23162: LD_INT 3
23164: PPUSH
23165: CALL_OW 259
23169: PUSH
23170: LD_INT 3
23172: MUL
23173: MUL
23174: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23175: LD_VAR 0 6
23179: PPUSH
23180: CALL_OW 264
23184: PUSH
23185: LD_INT 5
23187: PUSH
23188: LD_INT 6
23190: PUSH
23191: LD_INT 46
23193: PUSH
23194: LD_INT 44
23196: PUSH
23197: LD_INT 47
23199: PUSH
23200: LD_INT 45
23202: PUSH
23203: LD_INT 28
23205: PUSH
23206: LD_INT 7
23208: PUSH
23209: LD_INT 27
23211: PUSH
23212: LD_INT 29
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: IN
23227: PUSH
23228: LD_VAR 0 1
23232: PPUSH
23233: LD_INT 52
23235: PPUSH
23236: CALL_OW 321
23240: PUSH
23241: LD_INT 2
23243: EQUAL
23244: AND
23245: IFFALSE 23262
// bpoints := bpoints * 1.2 ;
23247: LD_ADDR_VAR 0 10
23251: PUSH
23252: LD_VAR 0 10
23256: PUSH
23257: LD_REAL  1.20000000000000E+0000
23260: MUL
23261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23262: LD_VAR 0 6
23266: PPUSH
23267: CALL_OW 264
23271: PUSH
23272: LD_INT 6
23274: PUSH
23275: LD_INT 46
23277: PUSH
23278: LD_INT 47
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: IN
23286: IFFALSE 23303
// bpoints := bpoints * 1.2 ;
23288: LD_ADDR_VAR 0 10
23292: PUSH
23293: LD_VAR 0 10
23297: PUSH
23298: LD_REAL  1.20000000000000E+0000
23301: MUL
23302: ST_TO_ADDR
// end ; unit_building :
23303: GO 23317
23305: LD_INT 3
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23316
23313: POP
// ; end ;
23314: GO 23317
23316: POP
// for j = 1 to 3 do
23317: LD_ADDR_VAR 0 7
23321: PUSH
23322: DOUBLE
23323: LD_INT 1
23325: DEC
23326: ST_TO_ADDR
23327: LD_INT 3
23329: PUSH
23330: FOR_TO
23331: IFFALSE 23384
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23333: LD_ADDR_VAR 0 5
23337: PUSH
23338: LD_VAR 0 5
23342: PPUSH
23343: LD_VAR 0 7
23347: PPUSH
23348: LD_VAR 0 5
23352: PUSH
23353: LD_VAR 0 7
23357: ARRAY
23358: PUSH
23359: LD_VAR 0 9
23363: PUSH
23364: LD_VAR 0 7
23368: ARRAY
23369: PUSH
23370: LD_VAR 0 10
23374: MUL
23375: PLUS
23376: PPUSH
23377: CALL_OW 1
23381: ST_TO_ADDR
23382: GO 23330
23384: POP
23385: POP
// end ;
23386: GO 21865
23388: POP
23389: POP
// result := Replace ( result , 4 , tmp ) ;
23390: LD_ADDR_VAR 0 5
23394: PUSH
23395: LD_VAR 0 5
23399: PPUSH
23400: LD_INT 4
23402: PPUSH
23403: LD_VAR 0 8
23407: PPUSH
23408: CALL_OW 1
23412: ST_TO_ADDR
// end ;
23413: LD_VAR 0 5
23417: RET
// export function DangerAtRange ( unit , range ) ; begin
23418: LD_INT 0
23420: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: LD_VAR 0 1
23430: PPUSH
23431: CALL_OW 255
23435: PPUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 250
23445: PPUSH
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 251
23455: PPUSH
23456: LD_VAR 0 2
23460: PPUSH
23461: CALL 21717 0 4
23465: ST_TO_ADDR
// end ;
23466: LD_VAR 0 3
23470: RET
// export function DangerInArea ( side , area ) ; begin
23471: LD_INT 0
23473: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23474: LD_ADDR_VAR 0 3
23478: PUSH
23479: LD_VAR 0 2
23483: PPUSH
23484: LD_INT 81
23486: PUSH
23487: LD_VAR 0 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PPUSH
23496: CALL_OW 70
23500: ST_TO_ADDR
// end ;
23501: LD_VAR 0 3
23505: RET
// export function IsExtension ( b ) ; begin
23506: LD_INT 0
23508: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: LD_VAR 0 1
23518: PUSH
23519: LD_INT 23
23521: PUSH
23522: LD_INT 20
23524: PUSH
23525: LD_INT 22
23527: PUSH
23528: LD_INT 17
23530: PUSH
23531: LD_INT 24
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 19
23539: PUSH
23540: LD_INT 16
23542: PUSH
23543: LD_INT 25
23545: PUSH
23546: LD_INT 18
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: IN
23561: ST_TO_ADDR
// end ;
23562: LD_VAR 0 2
23566: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23567: LD_INT 0
23569: PPUSH
23570: PPUSH
23571: PPUSH
// result := [ ] ;
23572: LD_ADDR_VAR 0 4
23576: PUSH
23577: EMPTY
23578: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23579: LD_ADDR_VAR 0 5
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_INT 21
23591: PUSH
23592: LD_INT 3
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PPUSH
23599: CALL_OW 70
23603: ST_TO_ADDR
// if not tmp then
23604: LD_VAR 0 5
23608: NOT
23609: IFFALSE 23613
// exit ;
23611: GO 23677
// if checkLink then
23613: LD_VAR 0 3
23617: IFFALSE 23667
// begin for i in tmp do
23619: LD_ADDR_VAR 0 6
23623: PUSH
23624: LD_VAR 0 5
23628: PUSH
23629: FOR_IN
23630: IFFALSE 23665
// if GetBase ( i ) <> base then
23632: LD_VAR 0 6
23636: PPUSH
23637: CALL_OW 274
23641: PUSH
23642: LD_VAR 0 1
23646: NONEQUAL
23647: IFFALSE 23663
// ComLinkToBase ( base , i ) ;
23649: LD_VAR 0 1
23653: PPUSH
23654: LD_VAR 0 6
23658: PPUSH
23659: CALL_OW 169
23663: GO 23629
23665: POP
23666: POP
// end ; result := tmp ;
23667: LD_ADDR_VAR 0 4
23671: PUSH
23672: LD_VAR 0 5
23676: ST_TO_ADDR
// end ;
23677: LD_VAR 0 4
23681: RET
// export function ComComplete ( units , b ) ; var i ; begin
23682: LD_INT 0
23684: PPUSH
23685: PPUSH
// if not units then
23686: LD_VAR 0 1
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23785
// for i in units do
23695: LD_ADDR_VAR 0 4
23699: PUSH
23700: LD_VAR 0 1
23704: PUSH
23705: FOR_IN
23706: IFFALSE 23783
// if BuildingStatus ( b ) = bs_build then
23708: LD_VAR 0 2
23712: PPUSH
23713: CALL_OW 461
23717: PUSH
23718: LD_INT 1
23720: EQUAL
23721: IFFALSE 23781
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23723: LD_VAR 0 4
23727: PPUSH
23728: LD_STRING h
23730: PUSH
23731: LD_VAR 0 2
23735: PPUSH
23736: CALL_OW 250
23740: PUSH
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 251
23750: PUSH
23751: LD_VAR 0 2
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: PUSH
23774: EMPTY
23775: LIST
23776: PPUSH
23777: CALL_OW 446
23781: GO 23705
23783: POP
23784: POP
// end ;
23785: LD_VAR 0 3
23789: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23790: LD_INT 0
23792: PPUSH
23793: PPUSH
23794: PPUSH
23795: PPUSH
23796: PPUSH
23797: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23798: LD_VAR 0 1
23802: NOT
23803: PUSH
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: NONEQUAL
23817: OR
23818: IFFALSE 23822
// exit ;
23820: GO 24138
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23822: LD_ADDR_VAR 0 6
23826: PUSH
23827: LD_INT 22
23829: PUSH
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 255
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: LD_INT 30
23849: PUSH
23850: LD_INT 36
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 34
23859: PUSH
23860: LD_INT 31
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PPUSH
23876: CALL_OW 69
23880: ST_TO_ADDR
// if not tmp then
23881: LD_VAR 0 6
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 24138
// result := [ ] ;
23890: LD_ADDR_VAR 0 2
23894: PUSH
23895: EMPTY
23896: ST_TO_ADDR
// for i in tmp do
23897: LD_ADDR_VAR 0 3
23901: PUSH
23902: LD_VAR 0 6
23906: PUSH
23907: FOR_IN
23908: IFFALSE 23979
// begin t := UnitsInside ( i ) ;
23910: LD_ADDR_VAR 0 4
23914: PUSH
23915: LD_VAR 0 3
23919: PPUSH
23920: CALL_OW 313
23924: ST_TO_ADDR
// if t then
23925: LD_VAR 0 4
23929: IFFALSE 23977
// for j in t do
23931: LD_ADDR_VAR 0 7
23935: PUSH
23936: LD_VAR 0 4
23940: PUSH
23941: FOR_IN
23942: IFFALSE 23975
// result := Replace ( result , result + 1 , j ) ;
23944: LD_ADDR_VAR 0 2
23948: PUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_VAR 0 2
23958: PUSH
23959: LD_INT 1
23961: PLUS
23962: PPUSH
23963: LD_VAR 0 7
23967: PPUSH
23968: CALL_OW 1
23972: ST_TO_ADDR
23973: GO 23941
23975: POP
23976: POP
// end ;
23977: GO 23907
23979: POP
23980: POP
// if not result then
23981: LD_VAR 0 2
23985: NOT
23986: IFFALSE 23990
// exit ;
23988: GO 24138
// mech := result [ 1 ] ;
23990: LD_ADDR_VAR 0 5
23994: PUSH
23995: LD_VAR 0 2
23999: PUSH
24000: LD_INT 1
24002: ARRAY
24003: ST_TO_ADDR
// if result > 1 then
24004: LD_VAR 0 2
24008: PUSH
24009: LD_INT 1
24011: GREATER
24012: IFFALSE 24124
// begin for i = 2 to result do
24014: LD_ADDR_VAR 0 3
24018: PUSH
24019: DOUBLE
24020: LD_INT 2
24022: DEC
24023: ST_TO_ADDR
24024: LD_VAR 0 2
24028: PUSH
24029: FOR_TO
24030: IFFALSE 24122
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24032: LD_ADDR_VAR 0 4
24036: PUSH
24037: LD_VAR 0 2
24041: PUSH
24042: LD_VAR 0 3
24046: ARRAY
24047: PPUSH
24048: LD_INT 3
24050: PPUSH
24051: CALL_OW 259
24055: PUSH
24056: LD_VAR 0 2
24060: PUSH
24061: LD_VAR 0 3
24065: ARRAY
24066: PPUSH
24067: CALL_OW 432
24071: MINUS
24072: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24073: LD_VAR 0 4
24077: PUSH
24078: LD_VAR 0 5
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: CALL_OW 259
24090: PUSH
24091: LD_VAR 0 5
24095: PPUSH
24096: CALL_OW 432
24100: MINUS
24101: GREATEREQUAL
24102: IFFALSE 24120
// mech := result [ i ] ;
24104: LD_ADDR_VAR 0 5
24108: PUSH
24109: LD_VAR 0 2
24113: PUSH
24114: LD_VAR 0 3
24118: ARRAY
24119: ST_TO_ADDR
// end ;
24120: GO 24029
24122: POP
24123: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24124: LD_VAR 0 1
24128: PPUSH
24129: LD_VAR 0 5
24133: PPUSH
24134: CALL_OW 135
// end ;
24138: LD_VAR 0 2
24142: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24143: LD_INT 0
24145: PPUSH
24146: PPUSH
24147: PPUSH
24148: PPUSH
24149: PPUSH
24150: PPUSH
24151: PPUSH
24152: PPUSH
24153: PPUSH
24154: PPUSH
24155: PPUSH
24156: PPUSH
24157: PPUSH
// result := [ ] ;
24158: LD_ADDR_VAR 0 7
24162: PUSH
24163: EMPTY
24164: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24165: LD_VAR 0 1
24169: PPUSH
24170: CALL_OW 266
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: IN
24185: NOT
24186: IFFALSE 24190
// exit ;
24188: GO 25824
// if name then
24190: LD_VAR 0 3
24194: IFFALSE 24210
// SetBName ( base_dep , name ) ;
24196: LD_VAR 0 1
24200: PPUSH
24201: LD_VAR 0 3
24205: PPUSH
24206: CALL_OW 500
// base := GetBase ( base_dep ) ;
24210: LD_ADDR_VAR 0 15
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 274
24224: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24225: LD_ADDR_VAR 0 16
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 255
24239: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24240: LD_ADDR_VAR 0 17
24244: PUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 248
24254: ST_TO_ADDR
// if sources then
24255: LD_VAR 0 5
24259: IFFALSE 24306
// for i = 1 to 3 do
24261: LD_ADDR_VAR 0 8
24265: PUSH
24266: DOUBLE
24267: LD_INT 1
24269: DEC
24270: ST_TO_ADDR
24271: LD_INT 3
24273: PUSH
24274: FOR_TO
24275: IFFALSE 24304
// AddResourceType ( base , i , sources [ i ] ) ;
24277: LD_VAR 0 15
24281: PPUSH
24282: LD_VAR 0 8
24286: PPUSH
24287: LD_VAR 0 5
24291: PUSH
24292: LD_VAR 0 8
24296: ARRAY
24297: PPUSH
24298: CALL_OW 276
24302: GO 24274
24304: POP
24305: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24306: LD_ADDR_VAR 0 18
24310: PUSH
24311: LD_VAR 0 15
24315: PPUSH
24316: LD_VAR 0 2
24320: PPUSH
24321: LD_INT 1
24323: PPUSH
24324: CALL 23567 0 3
24328: ST_TO_ADDR
// InitHc ;
24329: CALL_OW 19
// InitUc ;
24333: CALL_OW 18
// uc_side := side ;
24337: LD_ADDR_OWVAR 20
24341: PUSH
24342: LD_VAR 0 16
24346: ST_TO_ADDR
// uc_nation := nation ;
24347: LD_ADDR_OWVAR 21
24351: PUSH
24352: LD_VAR 0 17
24356: ST_TO_ADDR
// if buildings then
24357: LD_VAR 0 18
24361: IFFALSE 25683
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24363: LD_ADDR_VAR 0 19
24367: PUSH
24368: LD_VAR 0 18
24372: PPUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 30
24378: PUSH
24379: LD_INT 29
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 30
24388: PUSH
24389: LD_INT 30
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: LIST
24400: PPUSH
24401: CALL_OW 72
24405: ST_TO_ADDR
// if tmp then
24406: LD_VAR 0 19
24410: IFFALSE 24458
// for i in tmp do
24412: LD_ADDR_VAR 0 8
24416: PUSH
24417: LD_VAR 0 19
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24456
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24425: LD_VAR 0 8
24429: PPUSH
24430: CALL_OW 250
24434: PPUSH
24435: LD_VAR 0 8
24439: PPUSH
24440: CALL_OW 251
24444: PPUSH
24445: LD_VAR 0 16
24449: PPUSH
24450: CALL_OW 441
24454: GO 24422
24456: POP
24457: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24458: LD_VAR 0 18
24462: PPUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 30
24468: PUSH
24469: LD_INT 32
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 30
24478: PUSH
24479: LD_INT 33
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 72
24495: IFFALSE 24583
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24497: LD_ADDR_VAR 0 8
24501: PUSH
24502: LD_VAR 0 18
24506: PPUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 30
24512: PUSH
24513: LD_INT 32
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 33
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: PPUSH
24535: CALL_OW 72
24539: PUSH
24540: FOR_IN
24541: IFFALSE 24581
// begin if not GetBWeapon ( i ) then
24543: LD_VAR 0 8
24547: PPUSH
24548: CALL_OW 269
24552: NOT
24553: IFFALSE 24579
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24555: LD_VAR 0 8
24559: PPUSH
24560: LD_VAR 0 8
24564: PPUSH
24565: LD_VAR 0 2
24569: PPUSH
24570: CALL 25829 0 2
24574: PPUSH
24575: CALL_OW 431
// end ;
24579: GO 24540
24581: POP
24582: POP
// end ; for i = 1 to personel do
24583: LD_ADDR_VAR 0 8
24587: PUSH
24588: DOUBLE
24589: LD_INT 1
24591: DEC
24592: ST_TO_ADDR
24593: LD_VAR 0 6
24597: PUSH
24598: FOR_TO
24599: IFFALSE 25663
// begin if i > 4 then
24601: LD_VAR 0 8
24605: PUSH
24606: LD_INT 4
24608: GREATER
24609: IFFALSE 24613
// break ;
24611: GO 25663
// case i of 1 :
24613: LD_VAR 0 8
24617: PUSH
24618: LD_INT 1
24620: DOUBLE
24621: EQUAL
24622: IFTRUE 24626
24624: GO 24706
24626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24627: LD_ADDR_VAR 0 12
24631: PUSH
24632: LD_VAR 0 18
24636: PPUSH
24637: LD_INT 22
24639: PUSH
24640: LD_VAR 0 16
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 58
24651: PUSH
24652: EMPTY
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 30
24660: PUSH
24661: LD_INT 32
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 30
24670: PUSH
24671: LD_INT 4
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 30
24680: PUSH
24681: LD_INT 5
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 72
24703: ST_TO_ADDR
24704: GO 24928
24706: LD_INT 2
24708: DOUBLE
24709: EQUAL
24710: IFTRUE 24714
24712: GO 24776
24714: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24715: LD_ADDR_VAR 0 12
24719: PUSH
24720: LD_VAR 0 18
24724: PPUSH
24725: LD_INT 22
24727: PUSH
24728: LD_VAR 0 16
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: LD_INT 30
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 30
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: LIST
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PPUSH
24769: CALL_OW 72
24773: ST_TO_ADDR
24774: GO 24928
24776: LD_INT 3
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24846
24784: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24785: LD_ADDR_VAR 0 12
24789: PUSH
24790: LD_VAR 0 18
24794: PPUSH
24795: LD_INT 22
24797: PUSH
24798: LD_VAR 0 16
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 30
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PPUSH
24839: CALL_OW 72
24843: ST_TO_ADDR
24844: GO 24928
24846: LD_INT 4
24848: DOUBLE
24849: EQUAL
24850: IFTRUE 24854
24852: GO 24927
24854: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24855: LD_ADDR_VAR 0 12
24859: PUSH
24860: LD_VAR 0 18
24864: PPUSH
24865: LD_INT 22
24867: PUSH
24868: LD_VAR 0 16
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 30
24882: PUSH
24883: LD_INT 6
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 30
24892: PUSH
24893: LD_INT 7
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: LD_INT 8
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 72
24924: ST_TO_ADDR
24925: GO 24928
24927: POP
// if i = 1 then
24928: LD_VAR 0 8
24932: PUSH
24933: LD_INT 1
24935: EQUAL
24936: IFFALSE 25047
// begin tmp := [ ] ;
24938: LD_ADDR_VAR 0 19
24942: PUSH
24943: EMPTY
24944: ST_TO_ADDR
// for j in f do
24945: LD_ADDR_VAR 0 9
24949: PUSH
24950: LD_VAR 0 12
24954: PUSH
24955: FOR_IN
24956: IFFALSE 25029
// if GetBType ( j ) = b_bunker then
24958: LD_VAR 0 9
24962: PPUSH
24963: CALL_OW 266
24967: PUSH
24968: LD_INT 32
24970: EQUAL
24971: IFFALSE 24998
// tmp := Insert ( tmp , 1 , j ) else
24973: LD_ADDR_VAR 0 19
24977: PUSH
24978: LD_VAR 0 19
24982: PPUSH
24983: LD_INT 1
24985: PPUSH
24986: LD_VAR 0 9
24990: PPUSH
24991: CALL_OW 2
24995: ST_TO_ADDR
24996: GO 25027
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24998: LD_ADDR_VAR 0 19
25002: PUSH
25003: LD_VAR 0 19
25007: PPUSH
25008: LD_VAR 0 19
25012: PUSH
25013: LD_INT 1
25015: PLUS
25016: PPUSH
25017: LD_VAR 0 9
25021: PPUSH
25022: CALL_OW 2
25026: ST_TO_ADDR
25027: GO 24955
25029: POP
25030: POP
// if tmp then
25031: LD_VAR 0 19
25035: IFFALSE 25047
// f := tmp ;
25037: LD_ADDR_VAR 0 12
25041: PUSH
25042: LD_VAR 0 19
25046: ST_TO_ADDR
// end ; x := personel [ i ] ;
25047: LD_ADDR_VAR 0 13
25051: PUSH
25052: LD_VAR 0 6
25056: PUSH
25057: LD_VAR 0 8
25061: ARRAY
25062: ST_TO_ADDR
// if x = - 1 then
25063: LD_VAR 0 13
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: EQUAL
25072: IFFALSE 25281
// begin for j in f do
25074: LD_ADDR_VAR 0 9
25078: PUSH
25079: LD_VAR 0 12
25083: PUSH
25084: FOR_IN
25085: IFFALSE 25277
// repeat InitHc ;
25087: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25091: LD_VAR 0 9
25095: PPUSH
25096: CALL_OW 266
25100: PUSH
25101: LD_INT 5
25103: EQUAL
25104: IFFALSE 25174
// begin if UnitsInside ( j ) < 3 then
25106: LD_VAR 0 9
25110: PPUSH
25111: CALL_OW 313
25115: PUSH
25116: LD_INT 3
25118: LESS
25119: IFFALSE 25155
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25121: LD_INT 0
25123: PPUSH
25124: LD_INT 5
25126: PUSH
25127: LD_INT 8
25129: PUSH
25130: LD_INT 9
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: PUSH
25138: LD_VAR 0 17
25142: ARRAY
25143: PPUSH
25144: LD_VAR 0 4
25148: PPUSH
25149: CALL_OW 380
25153: GO 25172
// PrepareHuman ( false , i , skill ) ;
25155: LD_INT 0
25157: PPUSH
25158: LD_VAR 0 8
25162: PPUSH
25163: LD_VAR 0 4
25167: PPUSH
25168: CALL_OW 380
// end else
25172: GO 25191
// PrepareHuman ( false , i , skill ) ;
25174: LD_INT 0
25176: PPUSH
25177: LD_VAR 0 8
25181: PPUSH
25182: LD_VAR 0 4
25186: PPUSH
25187: CALL_OW 380
// un := CreateHuman ;
25191: LD_ADDR_VAR 0 14
25195: PUSH
25196: CALL_OW 44
25200: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25201: LD_ADDR_VAR 0 7
25205: PUSH
25206: LD_VAR 0 7
25210: PPUSH
25211: LD_INT 1
25213: PPUSH
25214: LD_VAR 0 14
25218: PPUSH
25219: CALL_OW 2
25223: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25224: LD_VAR 0 14
25228: PPUSH
25229: LD_VAR 0 9
25233: PPUSH
25234: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25238: LD_VAR 0 9
25242: PPUSH
25243: CALL_OW 313
25247: PUSH
25248: LD_INT 6
25250: EQUAL
25251: PUSH
25252: LD_VAR 0 9
25256: PPUSH
25257: CALL_OW 266
25261: PUSH
25262: LD_INT 32
25264: PUSH
25265: LD_INT 31
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: IN
25272: OR
25273: IFFALSE 25087
25275: GO 25084
25277: POP
25278: POP
// end else
25279: GO 25661
// for j = 1 to x do
25281: LD_ADDR_VAR 0 9
25285: PUSH
25286: DOUBLE
25287: LD_INT 1
25289: DEC
25290: ST_TO_ADDR
25291: LD_VAR 0 13
25295: PUSH
25296: FOR_TO
25297: IFFALSE 25659
// begin InitHc ;
25299: CALL_OW 19
// if not f then
25303: LD_VAR 0 12
25307: NOT
25308: IFFALSE 25397
// begin PrepareHuman ( false , i , skill ) ;
25310: LD_INT 0
25312: PPUSH
25313: LD_VAR 0 8
25317: PPUSH
25318: LD_VAR 0 4
25322: PPUSH
25323: CALL_OW 380
// un := CreateHuman ;
25327: LD_ADDR_VAR 0 14
25331: PUSH
25332: CALL_OW 44
25336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25337: LD_ADDR_VAR 0 7
25341: PUSH
25342: LD_VAR 0 7
25346: PPUSH
25347: LD_INT 1
25349: PPUSH
25350: LD_VAR 0 14
25354: PPUSH
25355: CALL_OW 2
25359: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25360: LD_VAR 0 14
25364: PPUSH
25365: LD_VAR 0 1
25369: PPUSH
25370: CALL_OW 250
25374: PPUSH
25375: LD_VAR 0 1
25379: PPUSH
25380: CALL_OW 251
25384: PPUSH
25385: LD_INT 10
25387: PPUSH
25388: LD_INT 0
25390: PPUSH
25391: CALL_OW 50
// continue ;
25395: GO 25296
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25397: LD_VAR 0 12
25401: PUSH
25402: LD_INT 1
25404: ARRAY
25405: PPUSH
25406: CALL_OW 313
25410: PUSH
25411: LD_VAR 0 12
25415: PUSH
25416: LD_INT 1
25418: ARRAY
25419: PPUSH
25420: CALL_OW 266
25424: PUSH
25425: LD_INT 32
25427: PUSH
25428: LD_INT 31
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: IN
25435: AND
25436: PUSH
25437: LD_VAR 0 12
25441: PUSH
25442: LD_INT 1
25444: ARRAY
25445: PPUSH
25446: CALL_OW 313
25450: PUSH
25451: LD_INT 6
25453: EQUAL
25454: OR
25455: IFFALSE 25475
// f := Delete ( f , 1 ) ;
25457: LD_ADDR_VAR 0 12
25461: PUSH
25462: LD_VAR 0 12
25466: PPUSH
25467: LD_INT 1
25469: PPUSH
25470: CALL_OW 3
25474: ST_TO_ADDR
// if not f then
25475: LD_VAR 0 12
25479: NOT
25480: IFFALSE 25498
// begin x := x + 2 ;
25482: LD_ADDR_VAR 0 13
25486: PUSH
25487: LD_VAR 0 13
25491: PUSH
25492: LD_INT 2
25494: PLUS
25495: ST_TO_ADDR
// continue ;
25496: GO 25296
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25498: LD_VAR 0 12
25502: PUSH
25503: LD_INT 1
25505: ARRAY
25506: PPUSH
25507: CALL_OW 266
25511: PUSH
25512: LD_INT 5
25514: EQUAL
25515: IFFALSE 25589
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25517: LD_VAR 0 12
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: PPUSH
25526: CALL_OW 313
25530: PUSH
25531: LD_INT 3
25533: LESS
25534: IFFALSE 25570
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25536: LD_INT 0
25538: PPUSH
25539: LD_INT 5
25541: PUSH
25542: LD_INT 8
25544: PUSH
25545: LD_INT 9
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: PUSH
25553: LD_VAR 0 17
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 4
25563: PPUSH
25564: CALL_OW 380
25568: GO 25587
// PrepareHuman ( false , i , skill ) ;
25570: LD_INT 0
25572: PPUSH
25573: LD_VAR 0 8
25577: PPUSH
25578: LD_VAR 0 4
25582: PPUSH
25583: CALL_OW 380
// end else
25587: GO 25606
// PrepareHuman ( false , i , skill ) ;
25589: LD_INT 0
25591: PPUSH
25592: LD_VAR 0 8
25596: PPUSH
25597: LD_VAR 0 4
25601: PPUSH
25602: CALL_OW 380
// un := CreateHuman ;
25606: LD_ADDR_VAR 0 14
25610: PUSH
25611: CALL_OW 44
25615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25616: LD_ADDR_VAR 0 7
25620: PUSH
25621: LD_VAR 0 7
25625: PPUSH
25626: LD_INT 1
25628: PPUSH
25629: LD_VAR 0 14
25633: PPUSH
25634: CALL_OW 2
25638: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25639: LD_VAR 0 14
25643: PPUSH
25644: LD_VAR 0 12
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: CALL_OW 52
// end ;
25657: GO 25296
25659: POP
25660: POP
// end ;
25661: GO 24598
25663: POP
25664: POP
// result := result ^ buildings ;
25665: LD_ADDR_VAR 0 7
25669: PUSH
25670: LD_VAR 0 7
25674: PUSH
25675: LD_VAR 0 18
25679: ADD
25680: ST_TO_ADDR
// end else
25681: GO 25824
// begin for i = 1 to personel do
25683: LD_ADDR_VAR 0 8
25687: PUSH
25688: DOUBLE
25689: LD_INT 1
25691: DEC
25692: ST_TO_ADDR
25693: LD_VAR 0 6
25697: PUSH
25698: FOR_TO
25699: IFFALSE 25822
// begin if i > 4 then
25701: LD_VAR 0 8
25705: PUSH
25706: LD_INT 4
25708: GREATER
25709: IFFALSE 25713
// break ;
25711: GO 25822
// x := personel [ i ] ;
25713: LD_ADDR_VAR 0 13
25717: PUSH
25718: LD_VAR 0 6
25722: PUSH
25723: LD_VAR 0 8
25727: ARRAY
25728: ST_TO_ADDR
// if x = - 1 then
25729: LD_VAR 0 13
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: EQUAL
25738: IFFALSE 25742
// continue ;
25740: GO 25698
// PrepareHuman ( false , i , skill ) ;
25742: LD_INT 0
25744: PPUSH
25745: LD_VAR 0 8
25749: PPUSH
25750: LD_VAR 0 4
25754: PPUSH
25755: CALL_OW 380
// un := CreateHuman ;
25759: LD_ADDR_VAR 0 14
25763: PUSH
25764: CALL_OW 44
25768: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25769: LD_VAR 0 14
25773: PPUSH
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 250
25783: PPUSH
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 251
25793: PPUSH
25794: LD_INT 10
25796: PPUSH
25797: LD_INT 0
25799: PPUSH
25800: CALL_OW 50
// result := result ^ un ;
25804: LD_ADDR_VAR 0 7
25808: PUSH
25809: LD_VAR 0 7
25813: PUSH
25814: LD_VAR 0 14
25818: ADD
25819: ST_TO_ADDR
// end ;
25820: GO 25698
25822: POP
25823: POP
// end ; end ;
25824: LD_VAR 0 7
25828: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25829: LD_INT 0
25831: PPUSH
25832: PPUSH
25833: PPUSH
25834: PPUSH
25835: PPUSH
25836: PPUSH
25837: PPUSH
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
// result := false ;
25847: LD_ADDR_VAR 0 3
25851: PUSH
25852: LD_INT 0
25854: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25855: LD_VAR 0 1
25859: NOT
25860: PUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 266
25870: PUSH
25871: LD_INT 32
25873: PUSH
25874: LD_INT 33
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: IN
25881: NOT
25882: OR
25883: IFFALSE 25887
// exit ;
25885: GO 26996
// nat := GetNation ( tower ) ;
25887: LD_ADDR_VAR 0 12
25891: PUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 248
25901: ST_TO_ADDR
// side := GetSide ( tower ) ;
25902: LD_ADDR_VAR 0 16
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 255
25916: ST_TO_ADDR
// x := GetX ( tower ) ;
25917: LD_ADDR_VAR 0 10
25921: PUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 250
25931: ST_TO_ADDR
// y := GetY ( tower ) ;
25932: LD_ADDR_VAR 0 11
25936: PUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 251
25946: ST_TO_ADDR
// if not x or not y then
25947: LD_VAR 0 10
25951: NOT
25952: PUSH
25953: LD_VAR 0 11
25957: NOT
25958: OR
25959: IFFALSE 25963
// exit ;
25961: GO 26996
// weapon := 0 ;
25963: LD_ADDR_VAR 0 18
25967: PUSH
25968: LD_INT 0
25970: ST_TO_ADDR
// fac_list := [ ] ;
25971: LD_ADDR_VAR 0 17
25975: PUSH
25976: EMPTY
25977: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25978: LD_ADDR_VAR 0 6
25982: PUSH
25983: LD_VAR 0 1
25987: PPUSH
25988: CALL_OW 274
25992: PPUSH
25993: LD_VAR 0 2
25997: PPUSH
25998: LD_INT 0
26000: PPUSH
26001: CALL 23567 0 3
26005: PPUSH
26006: LD_INT 30
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PPUSH
26016: CALL_OW 72
26020: ST_TO_ADDR
// if not factories then
26021: LD_VAR 0 6
26025: NOT
26026: IFFALSE 26030
// exit ;
26028: GO 26996
// for i in factories do
26030: LD_ADDR_VAR 0 8
26034: PUSH
26035: LD_VAR 0 6
26039: PUSH
26040: FOR_IN
26041: IFFALSE 26066
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26043: LD_ADDR_VAR 0 17
26047: PUSH
26048: LD_VAR 0 17
26052: PUSH
26053: LD_VAR 0 8
26057: PPUSH
26058: CALL_OW 478
26062: UNION
26063: ST_TO_ADDR
26064: GO 26040
26066: POP
26067: POP
// if not fac_list then
26068: LD_VAR 0 17
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26996
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26077: LD_ADDR_VAR 0 5
26081: PUSH
26082: LD_INT 4
26084: PUSH
26085: LD_INT 5
26087: PUSH
26088: LD_INT 9
26090: PUSH
26091: LD_INT 10
26093: PUSH
26094: LD_INT 6
26096: PUSH
26097: LD_INT 7
26099: PUSH
26100: LD_INT 11
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 27
26114: PUSH
26115: LD_INT 28
26117: PUSH
26118: LD_INT 26
26120: PUSH
26121: LD_INT 30
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 43
26132: PUSH
26133: LD_INT 44
26135: PUSH
26136: LD_INT 46
26138: PUSH
26139: LD_INT 45
26141: PUSH
26142: LD_INT 47
26144: PUSH
26145: LD_INT 49
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: PUSH
26161: LD_VAR 0 12
26165: ARRAY
26166: ST_TO_ADDR
// list := list isect fac_list ;
26167: LD_ADDR_VAR 0 5
26171: PUSH
26172: LD_VAR 0 5
26176: PUSH
26177: LD_VAR 0 17
26181: ISECT
26182: ST_TO_ADDR
// if not list then
26183: LD_VAR 0 5
26187: NOT
26188: IFFALSE 26192
// exit ;
26190: GO 26996
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26192: LD_VAR 0 12
26196: PUSH
26197: LD_INT 3
26199: EQUAL
26200: PUSH
26201: LD_INT 49
26203: PUSH
26204: LD_VAR 0 5
26208: IN
26209: AND
26210: PUSH
26211: LD_INT 31
26213: PPUSH
26214: LD_VAR 0 16
26218: PPUSH
26219: CALL_OW 321
26223: PUSH
26224: LD_INT 2
26226: EQUAL
26227: AND
26228: IFFALSE 26288
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26230: LD_INT 22
26232: PUSH
26233: LD_VAR 0 16
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 35
26244: PUSH
26245: LD_INT 49
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 91
26254: PUSH
26255: LD_VAR 0 1
26259: PUSH
26260: LD_INT 10
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: PPUSH
26273: CALL_OW 69
26277: NOT
26278: IFFALSE 26288
// weapon := ru_time_lapser ;
26280: LD_ADDR_VAR 0 18
26284: PUSH
26285: LD_INT 49
26287: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26288: LD_VAR 0 12
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: IN
26303: PUSH
26304: LD_INT 11
26306: PUSH
26307: LD_VAR 0 5
26311: IN
26312: PUSH
26313: LD_INT 30
26315: PUSH
26316: LD_VAR 0 5
26320: IN
26321: OR
26322: AND
26323: PUSH
26324: LD_INT 6
26326: PPUSH
26327: LD_VAR 0 16
26331: PPUSH
26332: CALL_OW 321
26336: PUSH
26337: LD_INT 2
26339: EQUAL
26340: AND
26341: IFFALSE 26506
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26343: LD_INT 22
26345: PUSH
26346: LD_VAR 0 16
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 35
26360: PUSH
26361: LD_INT 11
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 35
26370: PUSH
26371: LD_INT 30
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 91
26385: PUSH
26386: LD_VAR 0 1
26390: PUSH
26391: LD_INT 18
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 69
26408: NOT
26409: PUSH
26410: LD_INT 22
26412: PUSH
26413: LD_VAR 0 16
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 30
26427: PUSH
26428: LD_INT 32
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 30
26437: PUSH
26438: LD_INT 33
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 91
26452: PUSH
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 12
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: PPUSH
26474: CALL_OW 69
26478: PUSH
26479: LD_INT 2
26481: GREATER
26482: AND
26483: IFFALSE 26506
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26485: LD_ADDR_VAR 0 18
26489: PUSH
26490: LD_INT 11
26492: PUSH
26493: LD_INT 30
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_VAR 0 12
26504: ARRAY
26505: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26506: LD_VAR 0 18
26510: NOT
26511: PUSH
26512: LD_INT 40
26514: PPUSH
26515: LD_VAR 0 16
26519: PPUSH
26520: CALL_OW 321
26524: PUSH
26525: LD_INT 2
26527: EQUAL
26528: AND
26529: PUSH
26530: LD_INT 7
26532: PUSH
26533: LD_VAR 0 5
26537: IN
26538: PUSH
26539: LD_INT 28
26541: PUSH
26542: LD_VAR 0 5
26546: IN
26547: OR
26548: PUSH
26549: LD_INT 45
26551: PUSH
26552: LD_VAR 0 5
26556: IN
26557: OR
26558: AND
26559: IFFALSE 26813
// begin hex := GetHexInfo ( x , y ) ;
26561: LD_ADDR_VAR 0 4
26565: PUSH
26566: LD_VAR 0 10
26570: PPUSH
26571: LD_VAR 0 11
26575: PPUSH
26576: CALL_OW 546
26580: ST_TO_ADDR
// if hex [ 1 ] then
26581: LD_VAR 0 4
26585: PUSH
26586: LD_INT 1
26588: ARRAY
26589: IFFALSE 26593
// exit ;
26591: GO 26996
// height := hex [ 2 ] ;
26593: LD_ADDR_VAR 0 15
26597: PUSH
26598: LD_VAR 0 4
26602: PUSH
26603: LD_INT 2
26605: ARRAY
26606: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26607: LD_ADDR_VAR 0 14
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: LD_INT 5
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: ST_TO_ADDR
// for i in tmp do
26630: LD_ADDR_VAR 0 8
26634: PUSH
26635: LD_VAR 0 14
26639: PUSH
26640: FOR_IN
26641: IFFALSE 26811
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26643: LD_ADDR_VAR 0 9
26647: PUSH
26648: LD_VAR 0 10
26652: PPUSH
26653: LD_VAR 0 8
26657: PPUSH
26658: LD_INT 5
26660: PPUSH
26661: CALL_OW 272
26665: PUSH
26666: LD_VAR 0 11
26670: PPUSH
26671: LD_VAR 0 8
26675: PPUSH
26676: LD_INT 5
26678: PPUSH
26679: CALL_OW 273
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26688: LD_VAR 0 9
26692: PUSH
26693: LD_INT 1
26695: ARRAY
26696: PPUSH
26697: LD_VAR 0 9
26701: PUSH
26702: LD_INT 2
26704: ARRAY
26705: PPUSH
26706: CALL_OW 488
26710: IFFALSE 26809
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26712: LD_ADDR_VAR 0 4
26716: PUSH
26717: LD_VAR 0 9
26721: PUSH
26722: LD_INT 1
26724: ARRAY
26725: PPUSH
26726: LD_VAR 0 9
26730: PUSH
26731: LD_INT 2
26733: ARRAY
26734: PPUSH
26735: CALL_OW 546
26739: ST_TO_ADDR
// if hex [ 1 ] then
26740: LD_VAR 0 4
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: IFFALSE 26752
// continue ;
26750: GO 26640
// h := hex [ 2 ] ;
26752: LD_ADDR_VAR 0 13
26756: PUSH
26757: LD_VAR 0 4
26761: PUSH
26762: LD_INT 2
26764: ARRAY
26765: ST_TO_ADDR
// if h + 7 < height then
26766: LD_VAR 0 13
26770: PUSH
26771: LD_INT 7
26773: PLUS
26774: PUSH
26775: LD_VAR 0 15
26779: LESS
26780: IFFALSE 26809
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26782: LD_ADDR_VAR 0 18
26786: PUSH
26787: LD_INT 7
26789: PUSH
26790: LD_INT 28
26792: PUSH
26793: LD_INT 45
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: PUSH
26801: LD_VAR 0 12
26805: ARRAY
26806: ST_TO_ADDR
// break ;
26807: GO 26811
// end ; end ; end ;
26809: GO 26640
26811: POP
26812: POP
// end ; if not weapon then
26813: LD_VAR 0 18
26817: NOT
26818: IFFALSE 26878
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26820: LD_ADDR_VAR 0 5
26824: PUSH
26825: LD_VAR 0 5
26829: PUSH
26830: LD_INT 11
26832: PUSH
26833: LD_INT 30
26835: PUSH
26836: LD_INT 49
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: LIST
26843: DIFF
26844: ST_TO_ADDR
// if not list then
26845: LD_VAR 0 5
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26996
// weapon := list [ rand ( 1 , list ) ] ;
26854: LD_ADDR_VAR 0 18
26858: PUSH
26859: LD_VAR 0 5
26863: PUSH
26864: LD_INT 1
26866: PPUSH
26867: LD_VAR 0 5
26871: PPUSH
26872: CALL_OW 12
26876: ARRAY
26877: ST_TO_ADDR
// end ; if weapon then
26878: LD_VAR 0 18
26882: IFFALSE 26996
// begin tmp := CostOfWeapon ( weapon ) ;
26884: LD_ADDR_VAR 0 14
26888: PUSH
26889: LD_VAR 0 18
26893: PPUSH
26894: CALL_OW 451
26898: ST_TO_ADDR
// j := GetBase ( tower ) ;
26899: LD_ADDR_VAR 0 9
26903: PUSH
26904: LD_VAR 0 1
26908: PPUSH
26909: CALL_OW 274
26913: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26914: LD_VAR 0 9
26918: PPUSH
26919: LD_INT 1
26921: PPUSH
26922: CALL_OW 275
26926: PUSH
26927: LD_VAR 0 14
26931: PUSH
26932: LD_INT 1
26934: ARRAY
26935: GREATEREQUAL
26936: PUSH
26937: LD_VAR 0 9
26941: PPUSH
26942: LD_INT 2
26944: PPUSH
26945: CALL_OW 275
26949: PUSH
26950: LD_VAR 0 14
26954: PUSH
26955: LD_INT 2
26957: ARRAY
26958: GREATEREQUAL
26959: AND
26960: PUSH
26961: LD_VAR 0 9
26965: PPUSH
26966: LD_INT 3
26968: PPUSH
26969: CALL_OW 275
26973: PUSH
26974: LD_VAR 0 14
26978: PUSH
26979: LD_INT 3
26981: ARRAY
26982: GREATEREQUAL
26983: AND
26984: IFFALSE 26996
// result := weapon ;
26986: LD_ADDR_VAR 0 3
26990: PUSH
26991: LD_VAR 0 18
26995: ST_TO_ADDR
// end ; end ;
26996: LD_VAR 0 3
27000: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27001: LD_INT 0
27003: PPUSH
27004: PPUSH
// result := true ;
27005: LD_ADDR_VAR 0 3
27009: PUSH
27010: LD_INT 1
27012: ST_TO_ADDR
// if array1 = array2 then
27013: LD_VAR 0 1
27017: PUSH
27018: LD_VAR 0 2
27022: EQUAL
27023: IFFALSE 27083
// begin for i = 1 to array1 do
27025: LD_ADDR_VAR 0 4
27029: PUSH
27030: DOUBLE
27031: LD_INT 1
27033: DEC
27034: ST_TO_ADDR
27035: LD_VAR 0 1
27039: PUSH
27040: FOR_TO
27041: IFFALSE 27079
// if array1 [ i ] <> array2 [ i ] then
27043: LD_VAR 0 1
27047: PUSH
27048: LD_VAR 0 4
27052: ARRAY
27053: PUSH
27054: LD_VAR 0 2
27058: PUSH
27059: LD_VAR 0 4
27063: ARRAY
27064: NONEQUAL
27065: IFFALSE 27077
// begin result := false ;
27067: LD_ADDR_VAR 0 3
27071: PUSH
27072: LD_INT 0
27074: ST_TO_ADDR
// break ;
27075: GO 27079
// end ;
27077: GO 27040
27079: POP
27080: POP
// end else
27081: GO 27091
// result := false ;
27083: LD_ADDR_VAR 0 3
27087: PUSH
27088: LD_INT 0
27090: ST_TO_ADDR
// end ;
27091: LD_VAR 0 3
27095: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
// if not array1 or not array2 then
27100: LD_VAR 0 1
27104: NOT
27105: PUSH
27106: LD_VAR 0 2
27110: NOT
27111: OR
27112: IFFALSE 27116
// exit ;
27114: GO 27180
// result := true ;
27116: LD_ADDR_VAR 0 3
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// for i = 1 to array1 do
27124: LD_ADDR_VAR 0 4
27128: PUSH
27129: DOUBLE
27130: LD_INT 1
27132: DEC
27133: ST_TO_ADDR
27134: LD_VAR 0 1
27138: PUSH
27139: FOR_TO
27140: IFFALSE 27178
// if array1 [ i ] <> array2 [ i ] then
27142: LD_VAR 0 1
27146: PUSH
27147: LD_VAR 0 4
27151: ARRAY
27152: PUSH
27153: LD_VAR 0 2
27157: PUSH
27158: LD_VAR 0 4
27162: ARRAY
27163: NONEQUAL
27164: IFFALSE 27176
// begin result := false ;
27166: LD_ADDR_VAR 0 3
27170: PUSH
27171: LD_INT 0
27173: ST_TO_ADDR
// break ;
27174: GO 27178
// end ;
27176: GO 27139
27178: POP
27179: POP
// end ;
27180: LD_VAR 0 3
27184: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27185: LD_INT 0
27187: PPUSH
27188: PPUSH
27189: PPUSH
// pom := GetBase ( fac ) ;
27190: LD_ADDR_VAR 0 5
27194: PUSH
27195: LD_VAR 0 1
27199: PPUSH
27200: CALL_OW 274
27204: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_VAR 0 2
27214: PUSH
27215: LD_INT 1
27217: ARRAY
27218: PPUSH
27219: LD_VAR 0 2
27223: PUSH
27224: LD_INT 2
27226: ARRAY
27227: PPUSH
27228: LD_VAR 0 2
27232: PUSH
27233: LD_INT 3
27235: ARRAY
27236: PPUSH
27237: LD_VAR 0 2
27241: PUSH
27242: LD_INT 4
27244: ARRAY
27245: PPUSH
27246: CALL_OW 449
27250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_VAR 0 5
27260: PPUSH
27261: LD_INT 1
27263: PPUSH
27264: CALL_OW 275
27268: PUSH
27269: LD_VAR 0 4
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: GREATEREQUAL
27278: PUSH
27279: LD_VAR 0 5
27283: PPUSH
27284: LD_INT 2
27286: PPUSH
27287: CALL_OW 275
27291: PUSH
27292: LD_VAR 0 4
27296: PUSH
27297: LD_INT 2
27299: ARRAY
27300: GREATEREQUAL
27301: AND
27302: PUSH
27303: LD_VAR 0 5
27307: PPUSH
27308: LD_INT 3
27310: PPUSH
27311: CALL_OW 275
27315: PUSH
27316: LD_VAR 0 4
27320: PUSH
27321: LD_INT 3
27323: ARRAY
27324: GREATEREQUAL
27325: AND
27326: ST_TO_ADDR
// end ;
27327: LD_VAR 0 3
27331: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27332: LD_INT 0
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
// pom := GetBase ( building ) ;
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: CALL_OW 274
27352: ST_TO_ADDR
// if not pom then
27353: LD_VAR 0 3
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27532
// btype := GetBType ( building ) ;
27362: LD_ADDR_VAR 0 5
27366: PUSH
27367: LD_VAR 0 1
27371: PPUSH
27372: CALL_OW 266
27376: ST_TO_ADDR
// if btype = b_armoury then
27377: LD_VAR 0 5
27381: PUSH
27382: LD_INT 4
27384: EQUAL
27385: IFFALSE 27395
// btype := b_barracks ;
27387: LD_ADDR_VAR 0 5
27391: PUSH
27392: LD_INT 5
27394: ST_TO_ADDR
// if btype = b_depot then
27395: LD_VAR 0 5
27399: PUSH
27400: LD_INT 0
27402: EQUAL
27403: IFFALSE 27413
// btype := b_warehouse ;
27405: LD_ADDR_VAR 0 5
27409: PUSH
27410: LD_INT 1
27412: ST_TO_ADDR
// if btype = b_workshop then
27413: LD_VAR 0 5
27417: PUSH
27418: LD_INT 2
27420: EQUAL
27421: IFFALSE 27431
// btype := b_factory ;
27423: LD_ADDR_VAR 0 5
27427: PUSH
27428: LD_INT 3
27430: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27431: LD_ADDR_VAR 0 4
27435: PUSH
27436: LD_VAR 0 5
27440: PPUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 248
27450: PPUSH
27451: CALL_OW 450
27455: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27456: LD_ADDR_VAR 0 2
27460: PUSH
27461: LD_VAR 0 3
27465: PPUSH
27466: LD_INT 1
27468: PPUSH
27469: CALL_OW 275
27473: PUSH
27474: LD_VAR 0 4
27478: PUSH
27479: LD_INT 1
27481: ARRAY
27482: GREATEREQUAL
27483: PUSH
27484: LD_VAR 0 3
27488: PPUSH
27489: LD_INT 2
27491: PPUSH
27492: CALL_OW 275
27496: PUSH
27497: LD_VAR 0 4
27501: PUSH
27502: LD_INT 2
27504: ARRAY
27505: GREATEREQUAL
27506: AND
27507: PUSH
27508: LD_VAR 0 3
27512: PPUSH
27513: LD_INT 3
27515: PPUSH
27516: CALL_OW 275
27520: PUSH
27521: LD_VAR 0 4
27525: PUSH
27526: LD_INT 3
27528: ARRAY
27529: GREATEREQUAL
27530: AND
27531: ST_TO_ADDR
// end ;
27532: LD_VAR 0 2
27536: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
27541: PPUSH
// pom := GetBase ( building ) ;
27542: LD_ADDR_VAR 0 4
27546: PUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 274
27556: ST_TO_ADDR
// if not pom then
27557: LD_VAR 0 4
27561: NOT
27562: IFFALSE 27566
// exit ;
27564: GO 27667
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27566: LD_ADDR_VAR 0 5
27570: PUSH
27571: LD_VAR 0 2
27575: PPUSH
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 248
27585: PPUSH
27586: CALL_OW 450
27590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27591: LD_ADDR_VAR 0 3
27595: PUSH
27596: LD_VAR 0 4
27600: PPUSH
27601: LD_INT 1
27603: PPUSH
27604: CALL_OW 275
27608: PUSH
27609: LD_VAR 0 5
27613: PUSH
27614: LD_INT 1
27616: ARRAY
27617: GREATEREQUAL
27618: PUSH
27619: LD_VAR 0 4
27623: PPUSH
27624: LD_INT 2
27626: PPUSH
27627: CALL_OW 275
27631: PUSH
27632: LD_VAR 0 5
27636: PUSH
27637: LD_INT 2
27639: ARRAY
27640: GREATEREQUAL
27641: AND
27642: PUSH
27643: LD_VAR 0 4
27647: PPUSH
27648: LD_INT 3
27650: PPUSH
27651: CALL_OW 275
27655: PUSH
27656: LD_VAR 0 5
27660: PUSH
27661: LD_INT 3
27663: ARRAY
27664: GREATEREQUAL
27665: AND
27666: ST_TO_ADDR
// end ;
27667: LD_VAR 0 3
27671: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27672: LD_INT 0
27674: PPUSH
27675: PPUSH
27676: PPUSH
27677: PPUSH
27678: PPUSH
27679: PPUSH
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
// result := false ;
27685: LD_ADDR_VAR 0 8
27689: PUSH
27690: LD_INT 0
27692: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27693: LD_VAR 0 5
27697: NOT
27698: PUSH
27699: LD_VAR 0 1
27703: NOT
27704: OR
27705: PUSH
27706: LD_VAR 0 2
27710: NOT
27711: OR
27712: PUSH
27713: LD_VAR 0 3
27717: NOT
27718: OR
27719: IFFALSE 27723
// exit ;
27721: GO 28537
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27723: LD_ADDR_VAR 0 14
27727: PUSH
27728: LD_VAR 0 1
27732: PPUSH
27733: LD_VAR 0 2
27737: PPUSH
27738: LD_VAR 0 3
27742: PPUSH
27743: LD_VAR 0 4
27747: PPUSH
27748: LD_VAR 0 5
27752: PUSH
27753: LD_INT 1
27755: ARRAY
27756: PPUSH
27757: CALL_OW 248
27761: PPUSH
27762: LD_INT 0
27764: PPUSH
27765: CALL 29770 0 6
27769: ST_TO_ADDR
// if not hexes then
27770: LD_VAR 0 14
27774: NOT
27775: IFFALSE 27779
// exit ;
27777: GO 28537
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27779: LD_ADDR_VAR 0 17
27783: PUSH
27784: LD_VAR 0 5
27788: PPUSH
27789: LD_INT 22
27791: PUSH
27792: LD_VAR 0 13
27796: PPUSH
27797: CALL_OW 255
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: LD_INT 30
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 30
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 72
27842: ST_TO_ADDR
// for i = 1 to hexes do
27843: LD_ADDR_VAR 0 9
27847: PUSH
27848: DOUBLE
27849: LD_INT 1
27851: DEC
27852: ST_TO_ADDR
27853: LD_VAR 0 14
27857: PUSH
27858: FOR_TO
27859: IFFALSE 28535
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27861: LD_ADDR_VAR 0 13
27865: PUSH
27866: LD_VAR 0 14
27870: PUSH
27871: LD_VAR 0 9
27875: ARRAY
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: PPUSH
27881: LD_VAR 0 14
27885: PUSH
27886: LD_VAR 0 9
27890: ARRAY
27891: PUSH
27892: LD_INT 2
27894: ARRAY
27895: PPUSH
27896: CALL_OW 428
27900: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27901: LD_VAR 0 14
27905: PUSH
27906: LD_VAR 0 9
27910: ARRAY
27911: PUSH
27912: LD_INT 1
27914: ARRAY
27915: PPUSH
27916: LD_VAR 0 14
27920: PUSH
27921: LD_VAR 0 9
27925: ARRAY
27926: PUSH
27927: LD_INT 2
27929: ARRAY
27930: PPUSH
27931: CALL_OW 351
27935: PUSH
27936: LD_VAR 0 14
27940: PUSH
27941: LD_VAR 0 9
27945: ARRAY
27946: PUSH
27947: LD_INT 1
27949: ARRAY
27950: PPUSH
27951: LD_VAR 0 14
27955: PUSH
27956: LD_VAR 0 9
27960: ARRAY
27961: PUSH
27962: LD_INT 2
27964: ARRAY
27965: PPUSH
27966: CALL_OW 488
27970: NOT
27971: OR
27972: PUSH
27973: LD_VAR 0 13
27977: PPUSH
27978: CALL_OW 247
27982: PUSH
27983: LD_INT 3
27985: EQUAL
27986: OR
27987: IFFALSE 27993
// exit ;
27989: POP
27990: POP
27991: GO 28537
// if not tmp then
27993: LD_VAR 0 13
27997: NOT
27998: IFFALSE 28002
// continue ;
28000: GO 27858
// result := true ;
28002: LD_ADDR_VAR 0 8
28006: PUSH
28007: LD_INT 1
28009: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28010: LD_VAR 0 6
28014: PUSH
28015: LD_VAR 0 13
28019: PPUSH
28020: CALL_OW 247
28024: PUSH
28025: LD_INT 2
28027: EQUAL
28028: AND
28029: PUSH
28030: LD_VAR 0 13
28034: PPUSH
28035: CALL_OW 263
28039: PUSH
28040: LD_INT 1
28042: EQUAL
28043: AND
28044: IFFALSE 28208
// begin if IsDrivenBy ( tmp ) then
28046: LD_VAR 0 13
28050: PPUSH
28051: CALL_OW 311
28055: IFFALSE 28059
// continue ;
28057: GO 27858
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28059: LD_VAR 0 6
28063: PPUSH
28064: LD_INT 3
28066: PUSH
28067: LD_INT 60
28069: PUSH
28070: EMPTY
28071: LIST
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 3
28079: PUSH
28080: LD_INT 55
28082: PUSH
28083: EMPTY
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 72
28098: IFFALSE 28206
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28100: LD_ADDR_VAR 0 18
28104: PUSH
28105: LD_VAR 0 6
28109: PPUSH
28110: LD_INT 3
28112: PUSH
28113: LD_INT 60
28115: PUSH
28116: EMPTY
28117: LIST
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 3
28125: PUSH
28126: LD_INT 55
28128: PUSH
28129: EMPTY
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PPUSH
28140: CALL_OW 72
28144: PUSH
28145: LD_INT 1
28147: ARRAY
28148: ST_TO_ADDR
// if IsInUnit ( driver ) then
28149: LD_VAR 0 18
28153: PPUSH
28154: CALL_OW 310
28158: IFFALSE 28169
// ComExit ( driver ) ;
28160: LD_VAR 0 18
28164: PPUSH
28165: CALL 53550 0 1
// AddComEnterUnit ( driver , tmp ) ;
28169: LD_VAR 0 18
28173: PPUSH
28174: LD_VAR 0 13
28178: PPUSH
28179: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28183: LD_VAR 0 18
28187: PPUSH
28188: LD_VAR 0 7
28192: PPUSH
28193: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28197: LD_VAR 0 18
28201: PPUSH
28202: CALL_OW 181
// end ; continue ;
28206: GO 27858
// end ; if not cleaners or not tmp in cleaners then
28208: LD_VAR 0 6
28212: NOT
28213: PUSH
28214: LD_VAR 0 13
28218: PUSH
28219: LD_VAR 0 6
28223: IN
28224: NOT
28225: OR
28226: IFFALSE 28533
// begin if dep then
28228: LD_VAR 0 17
28232: IFFALSE 28368
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28234: LD_ADDR_VAR 0 16
28238: PUSH
28239: LD_VAR 0 17
28243: PUSH
28244: LD_INT 1
28246: ARRAY
28247: PPUSH
28248: CALL_OW 250
28252: PPUSH
28253: LD_VAR 0 17
28257: PUSH
28258: LD_INT 1
28260: ARRAY
28261: PPUSH
28262: CALL_OW 254
28266: PPUSH
28267: LD_INT 5
28269: PPUSH
28270: CALL_OW 272
28274: PUSH
28275: LD_VAR 0 17
28279: PUSH
28280: LD_INT 1
28282: ARRAY
28283: PPUSH
28284: CALL_OW 251
28288: PPUSH
28289: LD_VAR 0 17
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PPUSH
28298: CALL_OW 254
28302: PPUSH
28303: LD_INT 5
28305: PPUSH
28306: CALL_OW 273
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28315: LD_VAR 0 16
28319: PUSH
28320: LD_INT 1
28322: ARRAY
28323: PPUSH
28324: LD_VAR 0 16
28328: PUSH
28329: LD_INT 2
28331: ARRAY
28332: PPUSH
28333: CALL_OW 488
28337: IFFALSE 28368
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28339: LD_VAR 0 13
28343: PPUSH
28344: LD_VAR 0 16
28348: PUSH
28349: LD_INT 1
28351: ARRAY
28352: PPUSH
28353: LD_VAR 0 16
28357: PUSH
28358: LD_INT 2
28360: ARRAY
28361: PPUSH
28362: CALL_OW 111
// continue ;
28366: GO 27858
// end ; end ; r := GetDir ( tmp ) ;
28368: LD_ADDR_VAR 0 15
28372: PUSH
28373: LD_VAR 0 13
28377: PPUSH
28378: CALL_OW 254
28382: ST_TO_ADDR
// if r = 5 then
28383: LD_VAR 0 15
28387: PUSH
28388: LD_INT 5
28390: EQUAL
28391: IFFALSE 28401
// r := 0 ;
28393: LD_ADDR_VAR 0 15
28397: PUSH
28398: LD_INT 0
28400: ST_TO_ADDR
// for j = r to 5 do
28401: LD_ADDR_VAR 0 10
28405: PUSH
28406: DOUBLE
28407: LD_VAR 0 15
28411: DEC
28412: ST_TO_ADDR
28413: LD_INT 5
28415: PUSH
28416: FOR_TO
28417: IFFALSE 28531
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28419: LD_ADDR_VAR 0 11
28423: PUSH
28424: LD_VAR 0 13
28428: PPUSH
28429: CALL_OW 250
28433: PPUSH
28434: LD_VAR 0 10
28438: PPUSH
28439: LD_INT 2
28441: PPUSH
28442: CALL_OW 272
28446: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28447: LD_ADDR_VAR 0 12
28451: PUSH
28452: LD_VAR 0 13
28456: PPUSH
28457: CALL_OW 251
28461: PPUSH
28462: LD_VAR 0 10
28466: PPUSH
28467: LD_INT 2
28469: PPUSH
28470: CALL_OW 273
28474: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28475: LD_VAR 0 11
28479: PPUSH
28480: LD_VAR 0 12
28484: PPUSH
28485: CALL_OW 488
28489: PUSH
28490: LD_VAR 0 11
28494: PPUSH
28495: LD_VAR 0 12
28499: PPUSH
28500: CALL_OW 428
28504: NOT
28505: AND
28506: IFFALSE 28529
// begin ComMoveXY ( tmp , _x , _y ) ;
28508: LD_VAR 0 13
28512: PPUSH
28513: LD_VAR 0 11
28517: PPUSH
28518: LD_VAR 0 12
28522: PPUSH
28523: CALL_OW 111
// break ;
28527: GO 28531
// end ; end ;
28529: GO 28416
28531: POP
28532: POP
// end ; end ;
28533: GO 27858
28535: POP
28536: POP
// end ;
28537: LD_VAR 0 8
28541: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28542: LD_INT 0
28544: PPUSH
// result := true ;
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_INT 1
28552: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28553: LD_VAR 0 2
28557: PUSH
28558: LD_INT 24
28560: DOUBLE
28561: EQUAL
28562: IFTRUE 28572
28564: LD_INT 33
28566: DOUBLE
28567: EQUAL
28568: IFTRUE 28572
28570: GO 28597
28572: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28573: LD_ADDR_VAR 0 3
28577: PUSH
28578: LD_INT 32
28580: PPUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL_OW 321
28590: PUSH
28591: LD_INT 2
28593: EQUAL
28594: ST_TO_ADDR
28595: GO 28913
28597: LD_INT 20
28599: DOUBLE
28600: EQUAL
28601: IFTRUE 28605
28603: GO 28630
28605: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_INT 6
28613: PPUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: CALL_OW 321
28623: PUSH
28624: LD_INT 2
28626: EQUAL
28627: ST_TO_ADDR
28628: GO 28913
28630: LD_INT 22
28632: DOUBLE
28633: EQUAL
28634: IFTRUE 28644
28636: LD_INT 36
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28669
28644: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28645: LD_ADDR_VAR 0 3
28649: PUSH
28650: LD_INT 15
28652: PPUSH
28653: LD_VAR 0 1
28657: PPUSH
28658: CALL_OW 321
28662: PUSH
28663: LD_INT 2
28665: EQUAL
28666: ST_TO_ADDR
28667: GO 28913
28669: LD_INT 30
28671: DOUBLE
28672: EQUAL
28673: IFTRUE 28677
28675: GO 28702
28677: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_INT 20
28685: PPUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 321
28695: PUSH
28696: LD_INT 2
28698: EQUAL
28699: ST_TO_ADDR
28700: GO 28913
28702: LD_INT 28
28704: DOUBLE
28705: EQUAL
28706: IFTRUE 28716
28708: LD_INT 21
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28741
28716: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 21
28724: PPUSH
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 321
28734: PUSH
28735: LD_INT 2
28737: EQUAL
28738: ST_TO_ADDR
28739: GO 28913
28741: LD_INT 16
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28774
28749: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: LD_INT 84
28757: PPUSH
28758: LD_VAR 0 1
28762: PPUSH
28763: CALL_OW 321
28767: PUSH
28768: LD_INT 2
28770: EQUAL
28771: ST_TO_ADDR
28772: GO 28913
28774: LD_INT 19
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28788
28780: LD_INT 23
28782: DOUBLE
28783: EQUAL
28784: IFTRUE 28788
28786: GO 28813
28788: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28789: LD_ADDR_VAR 0 3
28793: PUSH
28794: LD_INT 83
28796: PPUSH
28797: LD_VAR 0 1
28801: PPUSH
28802: CALL_OW 321
28806: PUSH
28807: LD_INT 2
28809: EQUAL
28810: ST_TO_ADDR
28811: GO 28913
28813: LD_INT 17
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28846
28821: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_INT 39
28829: PPUSH
28830: LD_VAR 0 1
28834: PPUSH
28835: CALL_OW 321
28839: PUSH
28840: LD_INT 2
28842: EQUAL
28843: ST_TO_ADDR
28844: GO 28913
28846: LD_INT 18
28848: DOUBLE
28849: EQUAL
28850: IFTRUE 28854
28852: GO 28879
28854: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_INT 40
28862: PPUSH
28863: LD_VAR 0 1
28867: PPUSH
28868: CALL_OW 321
28872: PUSH
28873: LD_INT 2
28875: EQUAL
28876: ST_TO_ADDR
28877: GO 28913
28879: LD_INT 27
28881: DOUBLE
28882: EQUAL
28883: IFTRUE 28887
28885: GO 28912
28887: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28888: LD_ADDR_VAR 0 3
28892: PUSH
28893: LD_INT 35
28895: PPUSH
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 321
28905: PUSH
28906: LD_INT 2
28908: EQUAL
28909: ST_TO_ADDR
28910: GO 28913
28912: POP
// end ;
28913: LD_VAR 0 3
28917: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28918: LD_INT 0
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
// result := false ;
28931: LD_ADDR_VAR 0 6
28935: PUSH
28936: LD_INT 0
28938: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28939: LD_VAR 0 1
28943: NOT
28944: PUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 266
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: IN
28965: NOT
28966: OR
28967: PUSH
28968: LD_VAR 0 2
28972: NOT
28973: OR
28974: PUSH
28975: LD_VAR 0 5
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: LD_INT 3
28991: PUSH
28992: LD_INT 4
28994: PUSH
28995: LD_INT 5
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: IN
29006: NOT
29007: OR
29008: PUSH
29009: LD_VAR 0 3
29013: PPUSH
29014: LD_VAR 0 4
29018: PPUSH
29019: CALL_OW 488
29023: NOT
29024: OR
29025: IFFALSE 29029
// exit ;
29027: GO 29765
// side := GetSide ( depot ) ;
29029: LD_ADDR_VAR 0 9
29033: PUSH
29034: LD_VAR 0 1
29038: PPUSH
29039: CALL_OW 255
29043: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29044: LD_VAR 0 9
29048: PPUSH
29049: LD_VAR 0 2
29053: PPUSH
29054: CALL 28542 0 2
29058: NOT
29059: IFFALSE 29063
// exit ;
29061: GO 29765
// pom := GetBase ( depot ) ;
29063: LD_ADDR_VAR 0 10
29067: PUSH
29068: LD_VAR 0 1
29072: PPUSH
29073: CALL_OW 274
29077: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29078: LD_ADDR_VAR 0 11
29082: PUSH
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 248
29097: PPUSH
29098: CALL_OW 450
29102: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29103: LD_VAR 0 10
29107: PPUSH
29108: LD_INT 1
29110: PPUSH
29111: CALL_OW 275
29115: PUSH
29116: LD_VAR 0 11
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: GREATEREQUAL
29125: PUSH
29126: LD_VAR 0 10
29130: PPUSH
29131: LD_INT 2
29133: PPUSH
29134: CALL_OW 275
29138: PUSH
29139: LD_VAR 0 11
29143: PUSH
29144: LD_INT 2
29146: ARRAY
29147: GREATEREQUAL
29148: AND
29149: PUSH
29150: LD_VAR 0 10
29154: PPUSH
29155: LD_INT 3
29157: PPUSH
29158: CALL_OW 275
29162: PUSH
29163: LD_VAR 0 11
29167: PUSH
29168: LD_INT 3
29170: ARRAY
29171: GREATEREQUAL
29172: AND
29173: NOT
29174: IFFALSE 29178
// exit ;
29176: GO 29765
// if GetBType ( depot ) = b_depot then
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 266
29187: PUSH
29188: LD_INT 0
29190: EQUAL
29191: IFFALSE 29203
// dist := 28 else
29193: LD_ADDR_VAR 0 14
29197: PUSH
29198: LD_INT 28
29200: ST_TO_ADDR
29201: GO 29211
// dist := 36 ;
29203: LD_ADDR_VAR 0 14
29207: PUSH
29208: LD_INT 36
29210: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29211: LD_VAR 0 1
29215: PPUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: CALL_OW 297
29230: PUSH
29231: LD_VAR 0 14
29235: GREATER
29236: IFFALSE 29240
// exit ;
29238: GO 29765
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29240: LD_ADDR_VAR 0 12
29244: PUSH
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_VAR 0 3
29254: PPUSH
29255: LD_VAR 0 4
29259: PPUSH
29260: LD_VAR 0 5
29264: PPUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 248
29274: PPUSH
29275: LD_INT 0
29277: PPUSH
29278: CALL 29770 0 6
29282: ST_TO_ADDR
// if not hexes then
29283: LD_VAR 0 12
29287: NOT
29288: IFFALSE 29292
// exit ;
29290: GO 29765
// hex := GetHexInfo ( x , y ) ;
29292: LD_ADDR_VAR 0 15
29296: PUSH
29297: LD_VAR 0 3
29301: PPUSH
29302: LD_VAR 0 4
29306: PPUSH
29307: CALL_OW 546
29311: ST_TO_ADDR
// if hex [ 1 ] then
29312: LD_VAR 0 15
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: IFFALSE 29324
// exit ;
29322: GO 29765
// height := hex [ 2 ] ;
29324: LD_ADDR_VAR 0 13
29328: PUSH
29329: LD_VAR 0 15
29333: PUSH
29334: LD_INT 2
29336: ARRAY
29337: ST_TO_ADDR
// for i = 1 to hexes do
29338: LD_ADDR_VAR 0 7
29342: PUSH
29343: DOUBLE
29344: LD_INT 1
29346: DEC
29347: ST_TO_ADDR
29348: LD_VAR 0 12
29352: PUSH
29353: FOR_TO
29354: IFFALSE 29684
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29356: LD_VAR 0 12
29360: PUSH
29361: LD_VAR 0 7
29365: ARRAY
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: LD_VAR 0 12
29375: PUSH
29376: LD_VAR 0 7
29380: ARRAY
29381: PUSH
29382: LD_INT 2
29384: ARRAY
29385: PPUSH
29386: CALL_OW 488
29390: NOT
29391: PUSH
29392: LD_VAR 0 12
29396: PUSH
29397: LD_VAR 0 7
29401: ARRAY
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: LD_VAR 0 12
29411: PUSH
29412: LD_VAR 0 7
29416: ARRAY
29417: PUSH
29418: LD_INT 2
29420: ARRAY
29421: PPUSH
29422: CALL_OW 428
29426: PUSH
29427: LD_INT 0
29429: GREATER
29430: OR
29431: PUSH
29432: LD_VAR 0 12
29436: PUSH
29437: LD_VAR 0 7
29441: ARRAY
29442: PUSH
29443: LD_INT 1
29445: ARRAY
29446: PPUSH
29447: LD_VAR 0 12
29451: PUSH
29452: LD_VAR 0 7
29456: ARRAY
29457: PUSH
29458: LD_INT 2
29460: ARRAY
29461: PPUSH
29462: CALL_OW 351
29466: OR
29467: IFFALSE 29473
// exit ;
29469: POP
29470: POP
29471: GO 29765
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29473: LD_ADDR_VAR 0 8
29477: PUSH
29478: LD_VAR 0 12
29482: PUSH
29483: LD_VAR 0 7
29487: ARRAY
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: LD_VAR 0 12
29497: PUSH
29498: LD_VAR 0 7
29502: ARRAY
29503: PUSH
29504: LD_INT 2
29506: ARRAY
29507: PPUSH
29508: CALL_OW 546
29512: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29513: LD_VAR 0 8
29517: PUSH
29518: LD_INT 1
29520: ARRAY
29521: PUSH
29522: LD_VAR 0 8
29526: PUSH
29527: LD_INT 2
29529: ARRAY
29530: PUSH
29531: LD_VAR 0 13
29535: PUSH
29536: LD_INT 2
29538: PLUS
29539: GREATER
29540: OR
29541: PUSH
29542: LD_VAR 0 8
29546: PUSH
29547: LD_INT 2
29549: ARRAY
29550: PUSH
29551: LD_VAR 0 13
29555: PUSH
29556: LD_INT 2
29558: MINUS
29559: LESS
29560: OR
29561: PUSH
29562: LD_VAR 0 8
29566: PUSH
29567: LD_INT 3
29569: ARRAY
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 8
29576: PUSH
29577: LD_INT 9
29579: PUSH
29580: LD_INT 10
29582: PUSH
29583: LD_INT 11
29585: PUSH
29586: LD_INT 12
29588: PUSH
29589: LD_INT 13
29591: PUSH
29592: LD_INT 16
29594: PUSH
29595: LD_INT 17
29597: PUSH
29598: LD_INT 18
29600: PUSH
29601: LD_INT 19
29603: PUSH
29604: LD_INT 20
29606: PUSH
29607: LD_INT 21
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: IN
29625: NOT
29626: OR
29627: PUSH
29628: LD_VAR 0 8
29632: PUSH
29633: LD_INT 5
29635: ARRAY
29636: NOT
29637: OR
29638: PUSH
29639: LD_VAR 0 8
29643: PUSH
29644: LD_INT 6
29646: ARRAY
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: LD_INT 7
29656: PUSH
29657: LD_INT 9
29659: PUSH
29660: LD_INT 10
29662: PUSH
29663: LD_INT 11
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: IN
29674: NOT
29675: OR
29676: IFFALSE 29682
// exit ;
29678: POP
29679: POP
29680: GO 29765
// end ;
29682: GO 29353
29684: POP
29685: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29686: LD_VAR 0 9
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: LD_VAR 0 4
29700: PPUSH
29701: LD_INT 20
29703: PPUSH
29704: CALL 21717 0 4
29708: PUSH
29709: LD_INT 4
29711: ARRAY
29712: IFFALSE 29716
// exit ;
29714: GO 29765
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29716: LD_VAR 0 2
29720: PUSH
29721: LD_INT 29
29723: PUSH
29724: LD_INT 30
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: IN
29731: PUSH
29732: LD_VAR 0 3
29736: PPUSH
29737: LD_VAR 0 4
29741: PPUSH
29742: LD_VAR 0 9
29746: PPUSH
29747: CALL_OW 440
29751: NOT
29752: AND
29753: IFFALSE 29757
// exit ;
29755: GO 29765
// result := true ;
29757: LD_ADDR_VAR 0 6
29761: PUSH
29762: LD_INT 1
29764: ST_TO_ADDR
// end ;
29765: LD_VAR 0 6
29769: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29770: LD_INT 0
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
// result = [ ] ;
29830: LD_ADDR_VAR 0 7
29834: PUSH
29835: EMPTY
29836: ST_TO_ADDR
// temp_list = [ ] ;
29837: LD_ADDR_VAR 0 9
29841: PUSH
29842: EMPTY
29843: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29844: LD_VAR 0 4
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 3
29860: PUSH
29861: LD_INT 4
29863: PUSH
29864: LD_INT 5
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: IN
29875: NOT
29876: PUSH
29877: LD_VAR 0 1
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: IN
29892: PUSH
29893: LD_VAR 0 5
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: IN
29912: NOT
29913: AND
29914: OR
29915: IFFALSE 29919
// exit ;
29917: GO 48310
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29919: LD_VAR 0 1
29923: PUSH
29924: LD_INT 6
29926: PUSH
29927: LD_INT 7
29929: PUSH
29930: LD_INT 8
29932: PUSH
29933: LD_INT 13
29935: PUSH
29936: LD_INT 12
29938: PUSH
29939: LD_INT 15
29941: PUSH
29942: LD_INT 11
29944: PUSH
29945: LD_INT 14
29947: PUSH
29948: LD_INT 10
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: IN
29962: IFFALSE 29972
// btype = b_lab ;
29964: LD_ADDR_VAR 0 1
29968: PUSH
29969: LD_INT 6
29971: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29972: LD_VAR 0 6
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: IN
29991: NOT
29992: PUSH
29993: LD_VAR 0 1
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 3
30009: PUSH
30010: LD_INT 6
30012: PUSH
30013: LD_INT 36
30015: PUSH
30016: LD_INT 4
30018: PUSH
30019: LD_INT 5
30021: PUSH
30022: LD_INT 31
30024: PUSH
30025: LD_INT 32
30027: PUSH
30028: LD_INT 33
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: IN
30044: NOT
30045: PUSH
30046: LD_VAR 0 6
30050: PUSH
30051: LD_INT 1
30053: EQUAL
30054: AND
30055: OR
30056: PUSH
30057: LD_VAR 0 1
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: IN
30072: NOT
30073: PUSH
30074: LD_VAR 0 6
30078: PUSH
30079: LD_INT 2
30081: EQUAL
30082: AND
30083: OR
30084: IFFALSE 30094
// mode = 0 ;
30086: LD_ADDR_VAR 0 6
30090: PUSH
30091: LD_INT 0
30093: ST_TO_ADDR
// case mode of 0 :
30094: LD_VAR 0 6
30098: PUSH
30099: LD_INT 0
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 41560
30107: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30108: LD_ADDR_VAR 0 11
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 3
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30301: LD_ADDR_VAR 0 12
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 3
30458: NEG
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: NEG
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30497: LD_ADDR_VAR 0 13
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 2
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 3
30668: NEG
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30696: LD_ADDR_VAR 0 14
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: LD_INT 3
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30892: LD_ADDR_VAR 0 15
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31085: LD_ADDR_VAR 0 16
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: NEG
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 2
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 3
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31278: LD_ADDR_VAR 0 17
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31508: LD_ADDR_VAR 0 18
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 2
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: NEG
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31738: LD_ADDR_VAR 0 19
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31968: LD_ADDR_VAR 0 20
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: LD_INT 2
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: NEG
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: NEG
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32198: LD_ADDR_VAR 0 21
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: LD_INT 2
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: LD_INT 2
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32428: LD_ADDR_VAR 0 22
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 2
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: NEG
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32658: LD_ADDR_VAR 0 23
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: LD_INT 2
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: NEG
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32938: LD_ADDR_VAR 0 24
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: LD_INT 2
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 3
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33214: LD_ADDR_VAR 0 25
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33488: LD_ADDR_VAR 0 26
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 3
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33764: LD_ADDR_VAR 0 27
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 1
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: LD_INT 2
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 3
33997: NEG
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 3
34009: NEG
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34044: LD_ADDR_VAR 0 28
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: LD_INT 3
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: NEG
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34326: LD_ADDR_VAR 0 29
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: LD_INT 3
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 3
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 3
34570: NEG
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34605: LD_ADDR_VAR 0 30
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: LD_INT 2
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: LD_INT 3
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: LD_INT 2
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: NEG
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34883: LD_ADDR_VAR 0 31
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: LD_INT 3
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: NEG
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35161: LD_ADDR_VAR 0 32
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: LD_INT 2
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 3
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 3
35404: NEG
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35439: LD_ADDR_VAR 0 33
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: NEG
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 2
35617: NEG
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: LD_INT 3
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 3
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35718: LD_ADDR_VAR 0 34
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 3
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: LD_INT 2
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 3
35963: NEG
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35998: LD_ADDR_VAR 0 35
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36110: LD_ADDR_VAR 0 36
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36222: LD_ADDR_VAR 0 37
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36334: LD_ADDR_VAR 0 38
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36446: LD_ADDR_VAR 0 39
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36558: LD_ADDR_VAR 0 40
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36670: LD_ADDR_VAR 0 41
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: LD_INT 3
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 3
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 3
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: NEG
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: NEG
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 3
36967: NEG
36968: PUSH
36969: LD_INT 2
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 3
36979: NEG
36980: PUSH
36981: LD_INT 3
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37020: LD_ADDR_VAR 0 42
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: NEG
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 2
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 3
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 3
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 3
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 3
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 3
37317: NEG
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: LD_INT 3
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37370: LD_ADDR_VAR 0 43
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 3
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 3
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: NEG
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 3
37677: NEG
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37718: LD_ADDR_VAR 0 44
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: LD_INT 3
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 3
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: NEG
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: NEG
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 3
38015: NEG
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 3
38027: NEG
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38068: LD_ADDR_VAR 0 45
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 3
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: LD_INT 3
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 3
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 3
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 3
38314: PUSH
38315: LD_INT 3
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 3
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 3
38365: NEG
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 3
38377: NEG
38378: PUSH
38379: LD_INT 3
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38418: LD_ADDR_VAR 0 46
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 2
38584: NEG
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: LD_INT 3
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 3
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 3
38725: NEG
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38766: LD_ADDR_VAR 0 47
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38917: LD_ADDR_VAR 0 48
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39064: LD_ADDR_VAR 0 49
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39208: LD_ADDR_VAR 0 50
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39352: LD_ADDR_VAR 0 51
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39499: LD_ADDR_VAR 0 52
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39650: LD_ADDR_VAR 0 53
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39880: LD_ADDR_VAR 0 54
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40110: LD_ADDR_VAR 0 55
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40340: LD_ADDR_VAR 0 56
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40570: LD_ADDR_VAR 0 57
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40800: LD_ADDR_VAR 0 58
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41030: LD_ADDR_VAR 0 59
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41118: LD_ADDR_VAR 0 60
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41206: LD_ADDR_VAR 0 61
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41294: LD_ADDR_VAR 0 62
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41382: LD_ADDR_VAR 0 63
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41470: LD_ADDR_VAR 0 64
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// end ; 1 :
41558: GO 47455
41560: LD_INT 1
41562: DOUBLE
41563: EQUAL
41564: IFTRUE 41568
41566: GO 44191
41568: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41569: LD_ADDR_VAR 0 11
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 3
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 3
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41613: LD_ADDR_VAR 0 12
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 3
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 3
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41654: LD_ADDR_VAR 0 13
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41694: LD_ADDR_VAR 0 14
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41735: LD_ADDR_VAR 0 15
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 3
41753: NEG
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 3
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41779: LD_ADDR_VAR 0 16
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: LD_INT 3
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: LD_INT 3
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41825: LD_ADDR_VAR 0 17
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41869: LD_ADDR_VAR 0 18
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41910: LD_ADDR_VAR 0 19
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 3
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41950: LD_ADDR_VAR 0 20
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 3
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41991: LD_ADDR_VAR 0 21
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 3
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42035: LD_ADDR_VAR 0 22
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42081: LD_ADDR_VAR 0 23
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: LD_INT 4
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 3
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42125: LD_ADDR_VAR 0 24
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 4
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42166: LD_ADDR_VAR 0 25
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 4
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42206: LD_ADDR_VAR 0 26
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 4
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42247: LD_ADDR_VAR 0 27
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 4
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42291: LD_ADDR_VAR 0 28
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: LD_INT 3
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: LD_INT 4
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 4
42322: NEG
42323: PUSH
42324: LD_INT 3
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42337: LD_ADDR_VAR 0 29
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 3
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 3
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 4
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 4
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 3
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 5
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 5
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 4
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 6
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 6
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 5
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42492: LD_ADDR_VAR 0 30
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 3
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 4
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 4
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 4
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 5
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 5
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 5
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 6
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 6
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42635: LD_ADDR_VAR 0 31
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 4
42672: PUSH
42673: LD_INT 3
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 4
42682: PUSH
42683: LD_INT 4
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 5
42702: PUSH
42703: LD_INT 4
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 5
42712: PUSH
42713: LD_INT 5
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 4
42722: PUSH
42723: LD_INT 5
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 6
42732: PUSH
42733: LD_INT 5
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 6
42742: PUSH
42743: LD_INT 6
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 5
42752: PUSH
42753: LD_INT 6
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42774: LD_ADDR_VAR 0 32
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 4
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 4
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 5
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 5
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 4
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 6
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 6
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 5
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42917: LD_ADDR_VAR 0 33
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: NEG
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 3
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 4
42969: NEG
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 4
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 4
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 5
43003: NEG
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 5
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 5
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 6
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 6
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43072: LD_ADDR_VAR 0 34
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: NEG
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 3
43115: NEG
43116: PUSH
43117: LD_INT 4
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 4
43127: NEG
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 4
43139: NEG
43140: PUSH
43141: LD_INT 4
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 4
43151: NEG
43152: PUSH
43153: LD_INT 5
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 5
43163: NEG
43164: PUSH
43165: LD_INT 4
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 5
43175: NEG
43176: PUSH
43177: LD_INT 5
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 5
43187: NEG
43188: PUSH
43189: LD_INT 6
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 6
43199: NEG
43200: PUSH
43201: LD_INT 5
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 6
43211: NEG
43212: PUSH
43213: LD_INT 6
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43235: LD_ADDR_VAR 0 41
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 3
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43279: LD_ADDR_VAR 0 42
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43320: LD_ADDR_VAR 0 43
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 3
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43360: LD_ADDR_VAR 0 44
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43401: LD_ADDR_VAR 0 45
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 3
43430: NEG
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43445: LD_ADDR_VAR 0 46
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: LD_INT 3
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 3
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43491: LD_ADDR_VAR 0 47
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 3
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43524: LD_ADDR_VAR 0 48
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43555: LD_ADDR_VAR 0 49
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43584: LD_ADDR_VAR 0 50
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43613: LD_ADDR_VAR 0 51
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43644: LD_ADDR_VAR 0 52
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43677: LD_ADDR_VAR 0 53
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 3
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 3
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43721: LD_ADDR_VAR 0 54
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43762: LD_ADDR_VAR 0 55
43766: PUSH
43767: LD_INT 3
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 3
43779: PUSH
43780: LD_INT 3
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 3
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43802: LD_ADDR_VAR 0 56
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43843: LD_ADDR_VAR 0 57
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 3
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 3
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43887: LD_ADDR_VAR 0 58
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: NEG
43919: PUSH
43920: LD_INT 3
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43933: LD_ADDR_VAR 0 59
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43977: LD_ADDR_VAR 0 60
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44018: LD_ADDR_VAR 0 61
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44058: LD_ADDR_VAR 0 62
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44099: LD_ADDR_VAR 0 63
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44143: LD_ADDR_VAR 0 64
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: ST_TO_ADDR
// end ; 2 :
44189: GO 47455
44191: LD_INT 2
44193: DOUBLE
44194: EQUAL
44195: IFTRUE 44199
44197: GO 47454
44199: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44200: LD_ADDR_VAR 0 29
44204: PUSH
44205: LD_INT 4
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 4
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 5
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 5
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 4
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 5
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 3
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 4
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 4
44330: PUSH
44331: LD_INT 4
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: LD_INT 4
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 4
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 4
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 4
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 4
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 5
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 5
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 4
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 5
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 3
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 4
44539: NEG
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 4
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 4
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 4
44585: NEG
44586: PUSH
44587: LD_INT 4
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 4
44597: NEG
44598: PUSH
44599: LD_INT 5
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 3
44609: NEG
44610: PUSH
44611: LD_INT 4
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 4
44633: NEG
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 5
44645: NEG
44646: PUSH
44647: LD_INT 4
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 5
44657: NEG
44658: PUSH
44659: LD_INT 5
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 3
44669: NEG
44670: PUSH
44671: LD_INT 5
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 5
44681: NEG
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44738: LD_ADDR_VAR 0 30
44742: PUSH
44743: LD_INT 4
44745: PUSH
44746: LD_INT 4
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 4
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: LD_INT 4
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 5
44775: PUSH
44776: LD_INT 5
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 4
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: LD_INT 4
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 5
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 5
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 3
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 4
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 4
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 4
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 3
44951: NEG
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 3
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 4
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 5
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 5
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 5
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 3
45042: NEG
45043: PUSH
45044: LD_INT 4
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 3
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 4
45090: NEG
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 4
45102: NEG
45103: PUSH
45104: LD_INT 4
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 4
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 4
45126: NEG
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 4
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 5
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 4
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 3
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 3
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 4
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 5
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 3
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 5
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45285: LD_ADDR_VAR 0 31
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 4
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 4
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 5
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 5
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 4
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 3
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 5
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 3
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 3
45385: NEG
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 4
45441: NEG
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 4
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 4
45464: NEG
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 4
45487: NEG
45488: PUSH
45489: LD_INT 4
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 4
45499: NEG
45500: PUSH
45501: LD_INT 5
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: NEG
45512: PUSH
45513: LD_INT 4
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: LD_INT 3
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 4
45535: NEG
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 5
45547: NEG
45548: PUSH
45549: LD_INT 4
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 5
45559: NEG
45560: PUSH
45561: LD_INT 5
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: LD_INT 5
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 5
45583: NEG
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 4
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 4
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 4
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 4
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 5
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 4
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 5
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45835: LD_ADDR_VAR 0 32
45839: PUSH
45840: LD_INT 4
45842: NEG
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 4
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: NEG
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 4
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 5
45898: NEG
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 5
45909: NEG
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 5
45921: NEG
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: NEG
45945: PUSH
45946: LD_INT 3
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: LD_INT 4
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 4
46004: NEG
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 4
46016: NEG
46017: PUSH
46018: LD_INT 4
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 4
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 4
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 4
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 5
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 4
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 3
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 3
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 4
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 5
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: LD_INT 5
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 4
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 4
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 3
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 4
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: LD_INT 4
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 5
46267: PUSH
46268: LD_INT 4
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 5
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 4
46287: PUSH
46288: LD_INT 5
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 4
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 5
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: LD_INT 5
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46382: LD_ADDR_VAR 0 33
46386: PUSH
46387: LD_INT 4
46389: NEG
46390: PUSH
46391: LD_INT 4
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 4
46401: NEG
46402: PUSH
46403: LD_INT 5
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: LD_INT 4
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: NEG
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 4
46437: NEG
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 5
46449: NEG
46450: PUSH
46451: LD_INT 4
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 5
46461: NEG
46462: PUSH
46463: LD_INT 5
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: LD_INT 5
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 5
46485: NEG
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 4
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 3
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 4
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: LD_INT 4
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 4
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 5
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 5
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 4
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 5
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 4
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 4
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 4
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 4
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 4
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46920: LD_ADDR_VAR 0 34
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 4
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 5
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 4
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: LD_INT 4
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 5
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: LD_INT 5
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 4
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 4
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 4
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: LD_INT 4
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 4
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 5
47142: PUSH
47143: LD_INT 4
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 5
47152: PUSH
47153: LD_INT 5
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 4
47162: PUSH
47163: LD_INT 5
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 5
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: LD_INT 5
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 4
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 4
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 4
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 4
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 4
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 5
47361: NEG
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 5
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 5
47384: NEG
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// end ; end ;
47452: GO 47455
47454: POP
// case btype of b_depot , b_warehouse :
47455: LD_VAR 0 1
47459: PUSH
47460: LD_INT 0
47462: DOUBLE
47463: EQUAL
47464: IFTRUE 47474
47466: LD_INT 1
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47474
47472: GO 47675
47474: POP
// case nation of nation_american :
47475: LD_VAR 0 5
47479: PUSH
47480: LD_INT 1
47482: DOUBLE
47483: EQUAL
47484: IFTRUE 47488
47486: GO 47544
47488: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47489: LD_ADDR_VAR 0 9
47493: PUSH
47494: LD_VAR 0 11
47498: PUSH
47499: LD_VAR 0 12
47503: PUSH
47504: LD_VAR 0 13
47508: PUSH
47509: LD_VAR 0 14
47513: PUSH
47514: LD_VAR 0 15
47518: PUSH
47519: LD_VAR 0 16
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: PUSH
47532: LD_VAR 0 4
47536: PUSH
47537: LD_INT 1
47539: PLUS
47540: ARRAY
47541: ST_TO_ADDR
47542: GO 47673
47544: LD_INT 2
47546: DOUBLE
47547: EQUAL
47548: IFTRUE 47552
47550: GO 47608
47552: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47553: LD_ADDR_VAR 0 9
47557: PUSH
47558: LD_VAR 0 17
47562: PUSH
47563: LD_VAR 0 18
47567: PUSH
47568: LD_VAR 0 19
47572: PUSH
47573: LD_VAR 0 20
47577: PUSH
47578: LD_VAR 0 21
47582: PUSH
47583: LD_VAR 0 22
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: PUSH
47596: LD_VAR 0 4
47600: PUSH
47601: LD_INT 1
47603: PLUS
47604: ARRAY
47605: ST_TO_ADDR
47606: GO 47673
47608: LD_INT 3
47610: DOUBLE
47611: EQUAL
47612: IFTRUE 47616
47614: GO 47672
47616: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47617: LD_ADDR_VAR 0 9
47621: PUSH
47622: LD_VAR 0 23
47626: PUSH
47627: LD_VAR 0 24
47631: PUSH
47632: LD_VAR 0 25
47636: PUSH
47637: LD_VAR 0 26
47641: PUSH
47642: LD_VAR 0 27
47646: PUSH
47647: LD_VAR 0 28
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: PUSH
47660: LD_VAR 0 4
47664: PUSH
47665: LD_INT 1
47667: PLUS
47668: ARRAY
47669: ST_TO_ADDR
47670: GO 47673
47672: POP
47673: GO 48228
47675: LD_INT 2
47677: DOUBLE
47678: EQUAL
47679: IFTRUE 47689
47681: LD_INT 3
47683: DOUBLE
47684: EQUAL
47685: IFTRUE 47689
47687: GO 47745
47689: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47690: LD_ADDR_VAR 0 9
47694: PUSH
47695: LD_VAR 0 29
47699: PUSH
47700: LD_VAR 0 30
47704: PUSH
47705: LD_VAR 0 31
47709: PUSH
47710: LD_VAR 0 32
47714: PUSH
47715: LD_VAR 0 33
47719: PUSH
47720: LD_VAR 0 34
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: PUSH
47733: LD_VAR 0 4
47737: PUSH
47738: LD_INT 1
47740: PLUS
47741: ARRAY
47742: ST_TO_ADDR
47743: GO 48228
47745: LD_INT 16
47747: DOUBLE
47748: EQUAL
47749: IFTRUE 47807
47751: LD_INT 17
47753: DOUBLE
47754: EQUAL
47755: IFTRUE 47807
47757: LD_INT 18
47759: DOUBLE
47760: EQUAL
47761: IFTRUE 47807
47763: LD_INT 19
47765: DOUBLE
47766: EQUAL
47767: IFTRUE 47807
47769: LD_INT 22
47771: DOUBLE
47772: EQUAL
47773: IFTRUE 47807
47775: LD_INT 20
47777: DOUBLE
47778: EQUAL
47779: IFTRUE 47807
47781: LD_INT 21
47783: DOUBLE
47784: EQUAL
47785: IFTRUE 47807
47787: LD_INT 23
47789: DOUBLE
47790: EQUAL
47791: IFTRUE 47807
47793: LD_INT 24
47795: DOUBLE
47796: EQUAL
47797: IFTRUE 47807
47799: LD_INT 25
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47807
47805: GO 47863
47807: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47808: LD_ADDR_VAR 0 9
47812: PUSH
47813: LD_VAR 0 35
47817: PUSH
47818: LD_VAR 0 36
47822: PUSH
47823: LD_VAR 0 37
47827: PUSH
47828: LD_VAR 0 38
47832: PUSH
47833: LD_VAR 0 39
47837: PUSH
47838: LD_VAR 0 40
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: PUSH
47851: LD_VAR 0 4
47855: PUSH
47856: LD_INT 1
47858: PLUS
47859: ARRAY
47860: ST_TO_ADDR
47861: GO 48228
47863: LD_INT 6
47865: DOUBLE
47866: EQUAL
47867: IFTRUE 47919
47869: LD_INT 7
47871: DOUBLE
47872: EQUAL
47873: IFTRUE 47919
47875: LD_INT 8
47877: DOUBLE
47878: EQUAL
47879: IFTRUE 47919
47881: LD_INT 13
47883: DOUBLE
47884: EQUAL
47885: IFTRUE 47919
47887: LD_INT 12
47889: DOUBLE
47890: EQUAL
47891: IFTRUE 47919
47893: LD_INT 15
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47919
47899: LD_INT 11
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47919
47905: LD_INT 14
47907: DOUBLE
47908: EQUAL
47909: IFTRUE 47919
47911: LD_INT 10
47913: DOUBLE
47914: EQUAL
47915: IFTRUE 47919
47917: GO 47975
47919: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_VAR 0 41
47929: PUSH
47930: LD_VAR 0 42
47934: PUSH
47935: LD_VAR 0 43
47939: PUSH
47940: LD_VAR 0 44
47944: PUSH
47945: LD_VAR 0 45
47949: PUSH
47950: LD_VAR 0 46
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: PUSH
47963: LD_VAR 0 4
47967: PUSH
47968: LD_INT 1
47970: PLUS
47971: ARRAY
47972: ST_TO_ADDR
47973: GO 48228
47975: LD_INT 36
47977: DOUBLE
47978: EQUAL
47979: IFTRUE 47983
47981: GO 48039
47983: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47984: LD_ADDR_VAR 0 9
47988: PUSH
47989: LD_VAR 0 47
47993: PUSH
47994: LD_VAR 0 48
47998: PUSH
47999: LD_VAR 0 49
48003: PUSH
48004: LD_VAR 0 50
48008: PUSH
48009: LD_VAR 0 51
48013: PUSH
48014: LD_VAR 0 52
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: PUSH
48027: LD_VAR 0 4
48031: PUSH
48032: LD_INT 1
48034: PLUS
48035: ARRAY
48036: ST_TO_ADDR
48037: GO 48228
48039: LD_INT 4
48041: DOUBLE
48042: EQUAL
48043: IFTRUE 48065
48045: LD_INT 5
48047: DOUBLE
48048: EQUAL
48049: IFTRUE 48065
48051: LD_INT 34
48053: DOUBLE
48054: EQUAL
48055: IFTRUE 48065
48057: LD_INT 37
48059: DOUBLE
48060: EQUAL
48061: IFTRUE 48065
48063: GO 48121
48065: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48066: LD_ADDR_VAR 0 9
48070: PUSH
48071: LD_VAR 0 53
48075: PUSH
48076: LD_VAR 0 54
48080: PUSH
48081: LD_VAR 0 55
48085: PUSH
48086: LD_VAR 0 56
48090: PUSH
48091: LD_VAR 0 57
48095: PUSH
48096: LD_VAR 0 58
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: PUSH
48109: LD_VAR 0 4
48113: PUSH
48114: LD_INT 1
48116: PLUS
48117: ARRAY
48118: ST_TO_ADDR
48119: GO 48228
48121: LD_INT 31
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48171
48127: LD_INT 32
48129: DOUBLE
48130: EQUAL
48131: IFTRUE 48171
48133: LD_INT 33
48135: DOUBLE
48136: EQUAL
48137: IFTRUE 48171
48139: LD_INT 27
48141: DOUBLE
48142: EQUAL
48143: IFTRUE 48171
48145: LD_INT 26
48147: DOUBLE
48148: EQUAL
48149: IFTRUE 48171
48151: LD_INT 28
48153: DOUBLE
48154: EQUAL
48155: IFTRUE 48171
48157: LD_INT 29
48159: DOUBLE
48160: EQUAL
48161: IFTRUE 48171
48163: LD_INT 30
48165: DOUBLE
48166: EQUAL
48167: IFTRUE 48171
48169: GO 48227
48171: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48172: LD_ADDR_VAR 0 9
48176: PUSH
48177: LD_VAR 0 59
48181: PUSH
48182: LD_VAR 0 60
48186: PUSH
48187: LD_VAR 0 61
48191: PUSH
48192: LD_VAR 0 62
48196: PUSH
48197: LD_VAR 0 63
48201: PUSH
48202: LD_VAR 0 64
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: PUSH
48215: LD_VAR 0 4
48219: PUSH
48220: LD_INT 1
48222: PLUS
48223: ARRAY
48224: ST_TO_ADDR
48225: GO 48228
48227: POP
// temp_list2 = [ ] ;
48228: LD_ADDR_VAR 0 10
48232: PUSH
48233: EMPTY
48234: ST_TO_ADDR
// for i in temp_list do
48235: LD_ADDR_VAR 0 8
48239: PUSH
48240: LD_VAR 0 9
48244: PUSH
48245: FOR_IN
48246: IFFALSE 48298
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48248: LD_ADDR_VAR 0 10
48252: PUSH
48253: LD_VAR 0 10
48257: PUSH
48258: LD_VAR 0 8
48262: PUSH
48263: LD_INT 1
48265: ARRAY
48266: PUSH
48267: LD_VAR 0 2
48271: PLUS
48272: PUSH
48273: LD_VAR 0 8
48277: PUSH
48278: LD_INT 2
48280: ARRAY
48281: PUSH
48282: LD_VAR 0 3
48286: PLUS
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: ADD
48295: ST_TO_ADDR
48296: GO 48245
48298: POP
48299: POP
// result = temp_list2 ;
48300: LD_ADDR_VAR 0 7
48304: PUSH
48305: LD_VAR 0 10
48309: ST_TO_ADDR
// end ;
48310: LD_VAR 0 7
48314: RET
// export function EnemyInRange ( unit , dist ) ; begin
48315: LD_INT 0
48317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48318: LD_ADDR_VAR 0 3
48322: PUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 255
48332: PPUSH
48333: LD_VAR 0 1
48337: PPUSH
48338: CALL_OW 250
48342: PPUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: CALL_OW 251
48352: PPUSH
48353: LD_VAR 0 2
48357: PPUSH
48358: CALL 21717 0 4
48362: PUSH
48363: LD_INT 4
48365: ARRAY
48366: ST_TO_ADDR
// end ;
48367: LD_VAR 0 3
48371: RET
// export function PlayerSeeMe ( unit ) ; begin
48372: LD_INT 0
48374: PPUSH
// result := See ( your_side , unit ) ;
48375: LD_ADDR_VAR 0 2
48379: PUSH
48380: LD_OWVAR 2
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL_OW 292
48394: ST_TO_ADDR
// end ;
48395: LD_VAR 0 2
48399: RET
// export function ReverseDir ( unit ) ; begin
48400: LD_INT 0
48402: PPUSH
// if not unit then
48403: LD_VAR 0 1
48407: NOT
48408: IFFALSE 48412
// exit ;
48410: GO 48435
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48412: LD_ADDR_VAR 0 2
48416: PUSH
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 254
48426: PUSH
48427: LD_INT 3
48429: PLUS
48430: PUSH
48431: LD_INT 6
48433: MOD
48434: ST_TO_ADDR
// end ;
48435: LD_VAR 0 2
48439: RET
// export function ReverseArray ( array ) ; var i ; begin
48440: LD_INT 0
48442: PPUSH
48443: PPUSH
// if not array then
48444: LD_VAR 0 1
48448: NOT
48449: IFFALSE 48453
// exit ;
48451: GO 48508
// result := [ ] ;
48453: LD_ADDR_VAR 0 2
48457: PUSH
48458: EMPTY
48459: ST_TO_ADDR
// for i := array downto 1 do
48460: LD_ADDR_VAR 0 3
48464: PUSH
48465: DOUBLE
48466: LD_VAR 0 1
48470: INC
48471: ST_TO_ADDR
48472: LD_INT 1
48474: PUSH
48475: FOR_DOWNTO
48476: IFFALSE 48506
// result := Join ( result , array [ i ] ) ;
48478: LD_ADDR_VAR 0 2
48482: PUSH
48483: LD_VAR 0 2
48487: PPUSH
48488: LD_VAR 0 1
48492: PUSH
48493: LD_VAR 0 3
48497: ARRAY
48498: PPUSH
48499: CALL 53152 0 2
48503: ST_TO_ADDR
48504: GO 48475
48506: POP
48507: POP
// end ;
48508: LD_VAR 0 2
48512: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48513: LD_INT 0
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
48520: PPUSH
// if not unit or not hexes then
48521: LD_VAR 0 1
48525: NOT
48526: PUSH
48527: LD_VAR 0 2
48531: NOT
48532: OR
48533: IFFALSE 48537
// exit ;
48535: GO 48660
// dist := 9999 ;
48537: LD_ADDR_VAR 0 5
48541: PUSH
48542: LD_INT 9999
48544: ST_TO_ADDR
// for i = 1 to hexes do
48545: LD_ADDR_VAR 0 4
48549: PUSH
48550: DOUBLE
48551: LD_INT 1
48553: DEC
48554: ST_TO_ADDR
48555: LD_VAR 0 2
48559: PUSH
48560: FOR_TO
48561: IFFALSE 48648
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48563: LD_ADDR_VAR 0 6
48567: PUSH
48568: LD_VAR 0 1
48572: PPUSH
48573: LD_VAR 0 2
48577: PUSH
48578: LD_VAR 0 4
48582: ARRAY
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: PPUSH
48588: LD_VAR 0 2
48592: PUSH
48593: LD_VAR 0 4
48597: ARRAY
48598: PUSH
48599: LD_INT 2
48601: ARRAY
48602: PPUSH
48603: CALL_OW 297
48607: ST_TO_ADDR
// if tdist < dist then
48608: LD_VAR 0 6
48612: PUSH
48613: LD_VAR 0 5
48617: LESS
48618: IFFALSE 48646
// begin hex := hexes [ i ] ;
48620: LD_ADDR_VAR 0 8
48624: PUSH
48625: LD_VAR 0 2
48629: PUSH
48630: LD_VAR 0 4
48634: ARRAY
48635: ST_TO_ADDR
// dist := tdist ;
48636: LD_ADDR_VAR 0 5
48640: PUSH
48641: LD_VAR 0 6
48645: ST_TO_ADDR
// end ; end ;
48646: GO 48560
48648: POP
48649: POP
// result := hex ;
48650: LD_ADDR_VAR 0 3
48654: PUSH
48655: LD_VAR 0 8
48659: ST_TO_ADDR
// end ;
48660: LD_VAR 0 3
48664: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48665: LD_INT 0
48667: PPUSH
48668: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48669: LD_VAR 0 1
48673: NOT
48674: PUSH
48675: LD_VAR 0 1
48679: PUSH
48680: LD_INT 21
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 23
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PPUSH
48704: CALL_OW 69
48708: IN
48709: NOT
48710: OR
48711: IFFALSE 48715
// exit ;
48713: GO 48762
// for i = 1 to 3 do
48715: LD_ADDR_VAR 0 3
48719: PUSH
48720: DOUBLE
48721: LD_INT 1
48723: DEC
48724: ST_TO_ADDR
48725: LD_INT 3
48727: PUSH
48728: FOR_TO
48729: IFFALSE 48760
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48731: LD_VAR 0 1
48735: PPUSH
48736: CALL_OW 250
48740: PPUSH
48741: LD_VAR 0 1
48745: PPUSH
48746: CALL_OW 251
48750: PPUSH
48751: LD_INT 1
48753: PPUSH
48754: CALL_OW 453
48758: GO 48728
48760: POP
48761: POP
// end ;
48762: LD_VAR 0 2
48766: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48767: LD_INT 0
48769: PPUSH
48770: PPUSH
48771: PPUSH
48772: PPUSH
48773: PPUSH
48774: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48775: LD_VAR 0 1
48779: NOT
48780: PUSH
48781: LD_VAR 0 2
48785: NOT
48786: OR
48787: PUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 314
48797: OR
48798: IFFALSE 48802
// exit ;
48800: GO 49269
// if GetLives ( i ) < 250 then
48802: LD_VAR 0 4
48806: PPUSH
48807: CALL_OW 256
48811: PUSH
48812: LD_INT 250
48814: LESS
48815: IFFALSE 48828
// begin ComAutodestruct ( i ) ;
48817: LD_VAR 0 4
48821: PPUSH
48822: CALL 48665 0 1
// exit ;
48826: GO 49269
// end ; x := GetX ( enemy_unit ) ;
48828: LD_ADDR_VAR 0 7
48832: PUSH
48833: LD_VAR 0 2
48837: PPUSH
48838: CALL_OW 250
48842: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48843: LD_ADDR_VAR 0 8
48847: PUSH
48848: LD_VAR 0 2
48852: PPUSH
48853: CALL_OW 251
48857: ST_TO_ADDR
// if not x or not y then
48858: LD_VAR 0 7
48862: NOT
48863: PUSH
48864: LD_VAR 0 8
48868: NOT
48869: OR
48870: IFFALSE 48874
// exit ;
48872: GO 49269
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48874: LD_ADDR_VAR 0 6
48878: PUSH
48879: LD_VAR 0 7
48883: PPUSH
48884: LD_INT 0
48886: PPUSH
48887: LD_INT 4
48889: PPUSH
48890: CALL_OW 272
48894: PUSH
48895: LD_VAR 0 8
48899: PPUSH
48900: LD_INT 0
48902: PPUSH
48903: LD_INT 4
48905: PPUSH
48906: CALL_OW 273
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_VAR 0 7
48919: PPUSH
48920: LD_INT 1
48922: PPUSH
48923: LD_INT 4
48925: PPUSH
48926: CALL_OW 272
48930: PUSH
48931: LD_VAR 0 8
48935: PPUSH
48936: LD_INT 1
48938: PPUSH
48939: LD_INT 4
48941: PPUSH
48942: CALL_OW 273
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_VAR 0 7
48955: PPUSH
48956: LD_INT 2
48958: PPUSH
48959: LD_INT 4
48961: PPUSH
48962: CALL_OW 272
48966: PUSH
48967: LD_VAR 0 8
48971: PPUSH
48972: LD_INT 2
48974: PPUSH
48975: LD_INT 4
48977: PPUSH
48978: CALL_OW 273
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_VAR 0 7
48991: PPUSH
48992: LD_INT 3
48994: PPUSH
48995: LD_INT 4
48997: PPUSH
48998: CALL_OW 272
49002: PUSH
49003: LD_VAR 0 8
49007: PPUSH
49008: LD_INT 3
49010: PPUSH
49011: LD_INT 4
49013: PPUSH
49014: CALL_OW 273
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_VAR 0 7
49027: PPUSH
49028: LD_INT 4
49030: PPUSH
49031: LD_INT 4
49033: PPUSH
49034: CALL_OW 272
49038: PUSH
49039: LD_VAR 0 8
49043: PPUSH
49044: LD_INT 4
49046: PPUSH
49047: LD_INT 4
49049: PPUSH
49050: CALL_OW 273
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_VAR 0 7
49063: PPUSH
49064: LD_INT 5
49066: PPUSH
49067: LD_INT 4
49069: PPUSH
49070: CALL_OW 272
49074: PUSH
49075: LD_VAR 0 8
49079: PPUSH
49080: LD_INT 5
49082: PPUSH
49083: LD_INT 4
49085: PPUSH
49086: CALL_OW 273
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// for i = tmp downto 1 do
49103: LD_ADDR_VAR 0 4
49107: PUSH
49108: DOUBLE
49109: LD_VAR 0 6
49113: INC
49114: ST_TO_ADDR
49115: LD_INT 1
49117: PUSH
49118: FOR_DOWNTO
49119: IFFALSE 49220
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49121: LD_VAR 0 6
49125: PUSH
49126: LD_VAR 0 4
49130: ARRAY
49131: PUSH
49132: LD_INT 1
49134: ARRAY
49135: PPUSH
49136: LD_VAR 0 6
49140: PUSH
49141: LD_VAR 0 4
49145: ARRAY
49146: PUSH
49147: LD_INT 2
49149: ARRAY
49150: PPUSH
49151: CALL_OW 488
49155: NOT
49156: PUSH
49157: LD_VAR 0 6
49161: PUSH
49162: LD_VAR 0 4
49166: ARRAY
49167: PUSH
49168: LD_INT 1
49170: ARRAY
49171: PPUSH
49172: LD_VAR 0 6
49176: PUSH
49177: LD_VAR 0 4
49181: ARRAY
49182: PUSH
49183: LD_INT 2
49185: ARRAY
49186: PPUSH
49187: CALL_OW 428
49191: PUSH
49192: LD_INT 0
49194: NONEQUAL
49195: OR
49196: IFFALSE 49218
// tmp := Delete ( tmp , i ) ;
49198: LD_ADDR_VAR 0 6
49202: PUSH
49203: LD_VAR 0 6
49207: PPUSH
49208: LD_VAR 0 4
49212: PPUSH
49213: CALL_OW 3
49217: ST_TO_ADDR
49218: GO 49118
49220: POP
49221: POP
// j := GetClosestHex ( unit , tmp ) ;
49222: LD_ADDR_VAR 0 5
49226: PUSH
49227: LD_VAR 0 1
49231: PPUSH
49232: LD_VAR 0 6
49236: PPUSH
49237: CALL 48513 0 2
49241: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49242: LD_VAR 0 1
49246: PPUSH
49247: LD_VAR 0 5
49251: PUSH
49252: LD_INT 1
49254: ARRAY
49255: PPUSH
49256: LD_VAR 0 5
49260: PUSH
49261: LD_INT 2
49263: ARRAY
49264: PPUSH
49265: CALL_OW 111
// end ;
49269: LD_VAR 0 3
49273: RET
// export function PrepareApemanSoldier ( ) ; begin
49274: LD_INT 0
49276: PPUSH
// uc_nation := 0 ;
49277: LD_ADDR_OWVAR 21
49281: PUSH
49282: LD_INT 0
49284: ST_TO_ADDR
// hc_sex := sex_male ;
49285: LD_ADDR_OWVAR 27
49289: PUSH
49290: LD_INT 1
49292: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49293: LD_ADDR_OWVAR 28
49297: PUSH
49298: LD_INT 15
49300: ST_TO_ADDR
// hc_gallery :=  ;
49301: LD_ADDR_OWVAR 33
49305: PUSH
49306: LD_STRING 
49308: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49309: LD_ADDR_OWVAR 31
49313: PUSH
49314: LD_INT 0
49316: PPUSH
49317: LD_INT 3
49319: PPUSH
49320: CALL_OW 12
49324: PUSH
49325: LD_INT 0
49327: PPUSH
49328: LD_INT 3
49330: PPUSH
49331: CALL_OW 12
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// end ;
49348: LD_VAR 0 1
49352: RET
// export function PrepareApemanEngineer ( ) ; begin
49353: LD_INT 0
49355: PPUSH
// uc_nation := 0 ;
49356: LD_ADDR_OWVAR 21
49360: PUSH
49361: LD_INT 0
49363: ST_TO_ADDR
// hc_sex := sex_male ;
49364: LD_ADDR_OWVAR 27
49368: PUSH
49369: LD_INT 1
49371: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49372: LD_ADDR_OWVAR 28
49376: PUSH
49377: LD_INT 16
49379: ST_TO_ADDR
// hc_gallery :=  ;
49380: LD_ADDR_OWVAR 33
49384: PUSH
49385: LD_STRING 
49387: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49388: LD_ADDR_OWVAR 31
49392: PUSH
49393: LD_INT 0
49395: PPUSH
49396: LD_INT 3
49398: PPUSH
49399: CALL_OW 12
49403: PUSH
49404: LD_INT 0
49406: PPUSH
49407: LD_INT 3
49409: PPUSH
49410: CALL_OW 12
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// end ;
49427: LD_VAR 0 1
49431: RET
// export function PrepareApeman ( agressivity ) ; begin
49432: LD_INT 0
49434: PPUSH
// uc_side := 0 ;
49435: LD_ADDR_OWVAR 20
49439: PUSH
49440: LD_INT 0
49442: ST_TO_ADDR
// uc_nation := 0 ;
49443: LD_ADDR_OWVAR 21
49447: PUSH
49448: LD_INT 0
49450: ST_TO_ADDR
// hc_sex := sex_male ;
49451: LD_ADDR_OWVAR 27
49455: PUSH
49456: LD_INT 1
49458: ST_TO_ADDR
// hc_class := class_apeman ;
49459: LD_ADDR_OWVAR 28
49463: PUSH
49464: LD_INT 12
49466: ST_TO_ADDR
// hc_gallery :=  ;
49467: LD_ADDR_OWVAR 33
49471: PUSH
49472: LD_STRING 
49474: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49475: LD_ADDR_OWVAR 35
49479: PUSH
49480: LD_VAR 0 1
49484: NEG
49485: PPUSH
49486: LD_VAR 0 1
49490: PPUSH
49491: CALL_OW 12
49495: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49496: LD_ADDR_OWVAR 31
49500: PUSH
49501: LD_INT 0
49503: PPUSH
49504: LD_INT 3
49506: PPUSH
49507: CALL_OW 12
49511: PUSH
49512: LD_INT 0
49514: PPUSH
49515: LD_INT 3
49517: PPUSH
49518: CALL_OW 12
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: ST_TO_ADDR
// end ;
49535: LD_VAR 0 2
49539: RET
// export function PrepareTiger ( agressivity ) ; begin
49540: LD_INT 0
49542: PPUSH
// uc_side := 0 ;
49543: LD_ADDR_OWVAR 20
49547: PUSH
49548: LD_INT 0
49550: ST_TO_ADDR
// uc_nation := 0 ;
49551: LD_ADDR_OWVAR 21
49555: PUSH
49556: LD_INT 0
49558: ST_TO_ADDR
// hc_class := class_tiger ;
49559: LD_ADDR_OWVAR 28
49563: PUSH
49564: LD_INT 14
49566: ST_TO_ADDR
// hc_gallery :=  ;
49567: LD_ADDR_OWVAR 33
49571: PUSH
49572: LD_STRING 
49574: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49575: LD_ADDR_OWVAR 35
49579: PUSH
49580: LD_VAR 0 1
49584: NEG
49585: PPUSH
49586: LD_VAR 0 1
49590: PPUSH
49591: CALL_OW 12
49595: ST_TO_ADDR
// end ;
49596: LD_VAR 0 2
49600: RET
// export function PrepareEnchidna ( ) ; begin
49601: LD_INT 0
49603: PPUSH
// uc_side := 0 ;
49604: LD_ADDR_OWVAR 20
49608: PUSH
49609: LD_INT 0
49611: ST_TO_ADDR
// uc_nation := 0 ;
49612: LD_ADDR_OWVAR 21
49616: PUSH
49617: LD_INT 0
49619: ST_TO_ADDR
// hc_class := class_baggie ;
49620: LD_ADDR_OWVAR 28
49624: PUSH
49625: LD_INT 13
49627: ST_TO_ADDR
// hc_gallery :=  ;
49628: LD_ADDR_OWVAR 33
49632: PUSH
49633: LD_STRING 
49635: ST_TO_ADDR
// end ;
49636: LD_VAR 0 1
49640: RET
// export function PrepareFrog ( ) ; begin
49641: LD_INT 0
49643: PPUSH
// uc_side := 0 ;
49644: LD_ADDR_OWVAR 20
49648: PUSH
49649: LD_INT 0
49651: ST_TO_ADDR
// uc_nation := 0 ;
49652: LD_ADDR_OWVAR 21
49656: PUSH
49657: LD_INT 0
49659: ST_TO_ADDR
// hc_class := class_frog ;
49660: LD_ADDR_OWVAR 28
49664: PUSH
49665: LD_INT 19
49667: ST_TO_ADDR
// hc_gallery :=  ;
49668: LD_ADDR_OWVAR 33
49672: PUSH
49673: LD_STRING 
49675: ST_TO_ADDR
// end ;
49676: LD_VAR 0 1
49680: RET
// export function PrepareFish ( ) ; begin
49681: LD_INT 0
49683: PPUSH
// uc_side := 0 ;
49684: LD_ADDR_OWVAR 20
49688: PUSH
49689: LD_INT 0
49691: ST_TO_ADDR
// uc_nation := 0 ;
49692: LD_ADDR_OWVAR 21
49696: PUSH
49697: LD_INT 0
49699: ST_TO_ADDR
// hc_class := class_fish ;
49700: LD_ADDR_OWVAR 28
49704: PUSH
49705: LD_INT 20
49707: ST_TO_ADDR
// hc_gallery :=  ;
49708: LD_ADDR_OWVAR 33
49712: PUSH
49713: LD_STRING 
49715: ST_TO_ADDR
// end ;
49716: LD_VAR 0 1
49720: RET
// export function PrepareBird ( ) ; begin
49721: LD_INT 0
49723: PPUSH
// uc_side := 0 ;
49724: LD_ADDR_OWVAR 20
49728: PUSH
49729: LD_INT 0
49731: ST_TO_ADDR
// uc_nation := 0 ;
49732: LD_ADDR_OWVAR 21
49736: PUSH
49737: LD_INT 0
49739: ST_TO_ADDR
// hc_class := class_phororhacos ;
49740: LD_ADDR_OWVAR 28
49744: PUSH
49745: LD_INT 18
49747: ST_TO_ADDR
// hc_gallery :=  ;
49748: LD_ADDR_OWVAR 33
49752: PUSH
49753: LD_STRING 
49755: ST_TO_ADDR
// end ;
49756: LD_VAR 0 1
49760: RET
// export function PrepareHorse ( ) ; begin
49761: LD_INT 0
49763: PPUSH
// uc_side := 0 ;
49764: LD_ADDR_OWVAR 20
49768: PUSH
49769: LD_INT 0
49771: ST_TO_ADDR
// uc_nation := 0 ;
49772: LD_ADDR_OWVAR 21
49776: PUSH
49777: LD_INT 0
49779: ST_TO_ADDR
// hc_class := class_horse ;
49780: LD_ADDR_OWVAR 28
49784: PUSH
49785: LD_INT 21
49787: ST_TO_ADDR
// hc_gallery :=  ;
49788: LD_ADDR_OWVAR 33
49792: PUSH
49793: LD_STRING 
49795: ST_TO_ADDR
// end ;
49796: LD_VAR 0 1
49800: RET
// export function PrepareMastodont ( ) ; begin
49801: LD_INT 0
49803: PPUSH
// uc_side := 0 ;
49804: LD_ADDR_OWVAR 20
49808: PUSH
49809: LD_INT 0
49811: ST_TO_ADDR
// uc_nation := 0 ;
49812: LD_ADDR_OWVAR 21
49816: PUSH
49817: LD_INT 0
49819: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49820: LD_ADDR_OWVAR 37
49824: PUSH
49825: LD_INT 31
49827: ST_TO_ADDR
// vc_control := control_rider ;
49828: LD_ADDR_OWVAR 38
49832: PUSH
49833: LD_INT 4
49835: ST_TO_ADDR
// end ;
49836: LD_VAR 0 1
49840: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49841: LD_INT 0
49843: PPUSH
49844: PPUSH
49845: PPUSH
// uc_side = 0 ;
49846: LD_ADDR_OWVAR 20
49850: PUSH
49851: LD_INT 0
49853: ST_TO_ADDR
// uc_nation = 0 ;
49854: LD_ADDR_OWVAR 21
49858: PUSH
49859: LD_INT 0
49861: ST_TO_ADDR
// InitHc_All ( ) ;
49862: CALL_OW 584
// InitVc ;
49866: CALL_OW 20
// if mastodonts then
49870: LD_VAR 0 6
49874: IFFALSE 49941
// for i = 1 to mastodonts do
49876: LD_ADDR_VAR 0 11
49880: PUSH
49881: DOUBLE
49882: LD_INT 1
49884: DEC
49885: ST_TO_ADDR
49886: LD_VAR 0 6
49890: PUSH
49891: FOR_TO
49892: IFFALSE 49939
// begin vc_chassis := 31 ;
49894: LD_ADDR_OWVAR 37
49898: PUSH
49899: LD_INT 31
49901: ST_TO_ADDR
// vc_control := control_rider ;
49902: LD_ADDR_OWVAR 38
49906: PUSH
49907: LD_INT 4
49909: ST_TO_ADDR
// animal := CreateVehicle ;
49910: LD_ADDR_VAR 0 12
49914: PUSH
49915: CALL_OW 45
49919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49920: LD_VAR 0 12
49924: PPUSH
49925: LD_VAR 0 8
49929: PPUSH
49930: LD_INT 0
49932: PPUSH
49933: CALL 52069 0 3
// end ;
49937: GO 49891
49939: POP
49940: POP
// if horses then
49941: LD_VAR 0 5
49945: IFFALSE 50012
// for i = 1 to horses do
49947: LD_ADDR_VAR 0 11
49951: PUSH
49952: DOUBLE
49953: LD_INT 1
49955: DEC
49956: ST_TO_ADDR
49957: LD_VAR 0 5
49961: PUSH
49962: FOR_TO
49963: IFFALSE 50010
// begin hc_class := 21 ;
49965: LD_ADDR_OWVAR 28
49969: PUSH
49970: LD_INT 21
49972: ST_TO_ADDR
// hc_gallery :=  ;
49973: LD_ADDR_OWVAR 33
49977: PUSH
49978: LD_STRING 
49980: ST_TO_ADDR
// animal := CreateHuman ;
49981: LD_ADDR_VAR 0 12
49985: PUSH
49986: CALL_OW 44
49990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49991: LD_VAR 0 12
49995: PPUSH
49996: LD_VAR 0 8
50000: PPUSH
50001: LD_INT 0
50003: PPUSH
50004: CALL 52069 0 3
// end ;
50008: GO 49962
50010: POP
50011: POP
// if birds then
50012: LD_VAR 0 1
50016: IFFALSE 50083
// for i = 1 to birds do
50018: LD_ADDR_VAR 0 11
50022: PUSH
50023: DOUBLE
50024: LD_INT 1
50026: DEC
50027: ST_TO_ADDR
50028: LD_VAR 0 1
50032: PUSH
50033: FOR_TO
50034: IFFALSE 50081
// begin hc_class = 18 ;
50036: LD_ADDR_OWVAR 28
50040: PUSH
50041: LD_INT 18
50043: ST_TO_ADDR
// hc_gallery =  ;
50044: LD_ADDR_OWVAR 33
50048: PUSH
50049: LD_STRING 
50051: ST_TO_ADDR
// animal := CreateHuman ;
50052: LD_ADDR_VAR 0 12
50056: PUSH
50057: CALL_OW 44
50061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50062: LD_VAR 0 12
50066: PPUSH
50067: LD_VAR 0 8
50071: PPUSH
50072: LD_INT 0
50074: PPUSH
50075: CALL 52069 0 3
// end ;
50079: GO 50033
50081: POP
50082: POP
// if tigers then
50083: LD_VAR 0 2
50087: IFFALSE 50171
// for i = 1 to tigers do
50089: LD_ADDR_VAR 0 11
50093: PUSH
50094: DOUBLE
50095: LD_INT 1
50097: DEC
50098: ST_TO_ADDR
50099: LD_VAR 0 2
50103: PUSH
50104: FOR_TO
50105: IFFALSE 50169
// begin hc_class = class_tiger ;
50107: LD_ADDR_OWVAR 28
50111: PUSH
50112: LD_INT 14
50114: ST_TO_ADDR
// hc_gallery =  ;
50115: LD_ADDR_OWVAR 33
50119: PUSH
50120: LD_STRING 
50122: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50123: LD_ADDR_OWVAR 35
50127: PUSH
50128: LD_INT 7
50130: NEG
50131: PPUSH
50132: LD_INT 7
50134: PPUSH
50135: CALL_OW 12
50139: ST_TO_ADDR
// animal := CreateHuman ;
50140: LD_ADDR_VAR 0 12
50144: PUSH
50145: CALL_OW 44
50149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50150: LD_VAR 0 12
50154: PPUSH
50155: LD_VAR 0 8
50159: PPUSH
50160: LD_INT 0
50162: PPUSH
50163: CALL 52069 0 3
// end ;
50167: GO 50104
50169: POP
50170: POP
// if apemans then
50171: LD_VAR 0 3
50175: IFFALSE 50298
// for i = 1 to apemans do
50177: LD_ADDR_VAR 0 11
50181: PUSH
50182: DOUBLE
50183: LD_INT 1
50185: DEC
50186: ST_TO_ADDR
50187: LD_VAR 0 3
50191: PUSH
50192: FOR_TO
50193: IFFALSE 50296
// begin hc_class = class_apeman ;
50195: LD_ADDR_OWVAR 28
50199: PUSH
50200: LD_INT 12
50202: ST_TO_ADDR
// hc_gallery =  ;
50203: LD_ADDR_OWVAR 33
50207: PUSH
50208: LD_STRING 
50210: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50211: LD_ADDR_OWVAR 35
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PPUSH
50220: LD_INT 2
50222: PPUSH
50223: CALL_OW 12
50227: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50228: LD_ADDR_OWVAR 31
50232: PUSH
50233: LD_INT 1
50235: PPUSH
50236: LD_INT 3
50238: PPUSH
50239: CALL_OW 12
50243: PUSH
50244: LD_INT 1
50246: PPUSH
50247: LD_INT 3
50249: PPUSH
50250: CALL_OW 12
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// animal := CreateHuman ;
50267: LD_ADDR_VAR 0 12
50271: PUSH
50272: CALL_OW 44
50276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50277: LD_VAR 0 12
50281: PPUSH
50282: LD_VAR 0 8
50286: PPUSH
50287: LD_INT 0
50289: PPUSH
50290: CALL 52069 0 3
// end ;
50294: GO 50192
50296: POP
50297: POP
// if enchidnas then
50298: LD_VAR 0 4
50302: IFFALSE 50369
// for i = 1 to enchidnas do
50304: LD_ADDR_VAR 0 11
50308: PUSH
50309: DOUBLE
50310: LD_INT 1
50312: DEC
50313: ST_TO_ADDR
50314: LD_VAR 0 4
50318: PUSH
50319: FOR_TO
50320: IFFALSE 50367
// begin hc_class = 13 ;
50322: LD_ADDR_OWVAR 28
50326: PUSH
50327: LD_INT 13
50329: ST_TO_ADDR
// hc_gallery =  ;
50330: LD_ADDR_OWVAR 33
50334: PUSH
50335: LD_STRING 
50337: ST_TO_ADDR
// animal := CreateHuman ;
50338: LD_ADDR_VAR 0 12
50342: PUSH
50343: CALL_OW 44
50347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50348: LD_VAR 0 12
50352: PPUSH
50353: LD_VAR 0 8
50357: PPUSH
50358: LD_INT 0
50360: PPUSH
50361: CALL 52069 0 3
// end ;
50365: GO 50319
50367: POP
50368: POP
// if fishes then
50369: LD_VAR 0 7
50373: IFFALSE 50440
// for i = 1 to fishes do
50375: LD_ADDR_VAR 0 11
50379: PUSH
50380: DOUBLE
50381: LD_INT 1
50383: DEC
50384: ST_TO_ADDR
50385: LD_VAR 0 7
50389: PUSH
50390: FOR_TO
50391: IFFALSE 50438
// begin hc_class = 20 ;
50393: LD_ADDR_OWVAR 28
50397: PUSH
50398: LD_INT 20
50400: ST_TO_ADDR
// hc_gallery =  ;
50401: LD_ADDR_OWVAR 33
50405: PUSH
50406: LD_STRING 
50408: ST_TO_ADDR
// animal := CreateHuman ;
50409: LD_ADDR_VAR 0 12
50413: PUSH
50414: CALL_OW 44
50418: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50419: LD_VAR 0 12
50423: PPUSH
50424: LD_VAR 0 9
50428: PPUSH
50429: LD_INT 0
50431: PPUSH
50432: CALL 52069 0 3
// end ;
50436: GO 50390
50438: POP
50439: POP
// end ;
50440: LD_VAR 0 10
50444: RET
// export function WantHeal ( sci , unit ) ; begin
50445: LD_INT 0
50447: PPUSH
// if GetTaskList ( sci ) > 0 then
50448: LD_VAR 0 1
50452: PPUSH
50453: CALL_OW 437
50457: PUSH
50458: LD_INT 0
50460: GREATER
50461: IFFALSE 50531
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50463: LD_VAR 0 1
50467: PPUSH
50468: CALL_OW 437
50472: PUSH
50473: LD_INT 1
50475: ARRAY
50476: PUSH
50477: LD_INT 1
50479: ARRAY
50480: PUSH
50481: LD_STRING l
50483: EQUAL
50484: PUSH
50485: LD_VAR 0 1
50489: PPUSH
50490: CALL_OW 437
50494: PUSH
50495: LD_INT 1
50497: ARRAY
50498: PUSH
50499: LD_INT 4
50501: ARRAY
50502: PUSH
50503: LD_VAR 0 2
50507: EQUAL
50508: AND
50509: IFFALSE 50521
// result := true else
50511: LD_ADDR_VAR 0 3
50515: PUSH
50516: LD_INT 1
50518: ST_TO_ADDR
50519: GO 50529
// result := false ;
50521: LD_ADDR_VAR 0 3
50525: PUSH
50526: LD_INT 0
50528: ST_TO_ADDR
// end else
50529: GO 50539
// result := false ;
50531: LD_ADDR_VAR 0 3
50535: PUSH
50536: LD_INT 0
50538: ST_TO_ADDR
// end ;
50539: LD_VAR 0 3
50543: RET
// export function HealTarget ( sci ) ; begin
50544: LD_INT 0
50546: PPUSH
// if not sci then
50547: LD_VAR 0 1
50551: NOT
50552: IFFALSE 50556
// exit ;
50554: GO 50621
// result := 0 ;
50556: LD_ADDR_VAR 0 2
50560: PUSH
50561: LD_INT 0
50563: ST_TO_ADDR
// if GetTaskList ( sci ) then
50564: LD_VAR 0 1
50568: PPUSH
50569: CALL_OW 437
50573: IFFALSE 50621
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50575: LD_VAR 0 1
50579: PPUSH
50580: CALL_OW 437
50584: PUSH
50585: LD_INT 1
50587: ARRAY
50588: PUSH
50589: LD_INT 1
50591: ARRAY
50592: PUSH
50593: LD_STRING l
50595: EQUAL
50596: IFFALSE 50621
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50598: LD_ADDR_VAR 0 2
50602: PUSH
50603: LD_VAR 0 1
50607: PPUSH
50608: CALL_OW 437
50612: PUSH
50613: LD_INT 1
50615: ARRAY
50616: PUSH
50617: LD_INT 4
50619: ARRAY
50620: ST_TO_ADDR
// end ;
50621: LD_VAR 0 2
50625: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50626: LD_INT 0
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
// if not base_units then
50632: LD_VAR 0 1
50636: NOT
50637: IFFALSE 50641
// exit ;
50639: GO 50728
// result := false ;
50641: LD_ADDR_VAR 0 2
50645: PUSH
50646: LD_INT 0
50648: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50649: LD_ADDR_VAR 0 5
50653: PUSH
50654: LD_VAR 0 1
50658: PPUSH
50659: LD_INT 21
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PPUSH
50669: CALL_OW 72
50673: ST_TO_ADDR
// if not tmp then
50674: LD_VAR 0 5
50678: NOT
50679: IFFALSE 50683
// exit ;
50681: GO 50728
// for i in tmp do
50683: LD_ADDR_VAR 0 3
50687: PUSH
50688: LD_VAR 0 5
50692: PUSH
50693: FOR_IN
50694: IFFALSE 50726
// begin result := EnemyInRange ( i , 22 ) ;
50696: LD_ADDR_VAR 0 2
50700: PUSH
50701: LD_VAR 0 3
50705: PPUSH
50706: LD_INT 22
50708: PPUSH
50709: CALL 48315 0 2
50713: ST_TO_ADDR
// if result then
50714: LD_VAR 0 2
50718: IFFALSE 50724
// exit ;
50720: POP
50721: POP
50722: GO 50728
// end ;
50724: GO 50693
50726: POP
50727: POP
// end ;
50728: LD_VAR 0 2
50732: RET
// export function FilterByTag ( units , tag ) ; begin
50733: LD_INT 0
50735: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50736: LD_ADDR_VAR 0 3
50740: PUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: LD_INT 120
50748: PUSH
50749: LD_VAR 0 2
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PPUSH
50758: CALL_OW 72
50762: ST_TO_ADDR
// end ;
50763: LD_VAR 0 3
50767: RET
// export function IsDriver ( un ) ; begin
50768: LD_INT 0
50770: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50771: LD_ADDR_VAR 0 2
50775: PUSH
50776: LD_VAR 0 1
50780: PUSH
50781: LD_INT 55
50783: PUSH
50784: EMPTY
50785: LIST
50786: PPUSH
50787: CALL_OW 69
50791: IN
50792: ST_TO_ADDR
// end ;
50793: LD_VAR 0 2
50797: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50798: LD_INT 0
50800: PPUSH
50801: PPUSH
// list := [ ] ;
50802: LD_ADDR_VAR 0 5
50806: PUSH
50807: EMPTY
50808: ST_TO_ADDR
// case d of 0 :
50809: LD_VAR 0 3
50813: PUSH
50814: LD_INT 0
50816: DOUBLE
50817: EQUAL
50818: IFTRUE 50822
50820: GO 50955
50822: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50823: LD_ADDR_VAR 0 5
50827: PUSH
50828: LD_VAR 0 1
50832: PUSH
50833: LD_INT 4
50835: MINUS
50836: PUSH
50837: LD_VAR 0 2
50841: PUSH
50842: LD_INT 4
50844: MINUS
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: PUSH
50854: LD_VAR 0 1
50858: PUSH
50859: LD_INT 3
50861: MINUS
50862: PUSH
50863: LD_VAR 0 2
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: PUSH
50876: LD_VAR 0 1
50880: PUSH
50881: LD_INT 4
50883: PLUS
50884: PUSH
50885: LD_VAR 0 2
50889: PUSH
50890: LD_INT 4
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: PUSH
50898: LD_VAR 0 1
50902: PUSH
50903: LD_INT 3
50905: PLUS
50906: PUSH
50907: LD_VAR 0 2
50911: PUSH
50912: LD_INT 3
50914: PLUS
50915: PUSH
50916: LD_INT 5
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: PUSH
50924: LD_VAR 0 1
50928: PUSH
50929: LD_VAR 0 2
50933: PUSH
50934: LD_INT 4
50936: PLUS
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: ST_TO_ADDR
// end ; 1 :
50953: GO 51653
50955: LD_INT 1
50957: DOUBLE
50958: EQUAL
50959: IFTRUE 50963
50961: GO 51096
50963: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50964: LD_ADDR_VAR 0 5
50968: PUSH
50969: LD_VAR 0 1
50973: PUSH
50974: LD_VAR 0 2
50978: PUSH
50979: LD_INT 4
50981: MINUS
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_INT 3
50998: MINUS
50999: PUSH
51000: LD_VAR 0 2
51004: PUSH
51005: LD_INT 3
51007: MINUS
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: PUSH
51017: LD_VAR 0 1
51021: PUSH
51022: LD_INT 4
51024: MINUS
51025: PUSH
51026: LD_VAR 0 2
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: PUSH
51039: LD_VAR 0 1
51043: PUSH
51044: LD_VAR 0 2
51048: PUSH
51049: LD_INT 3
51051: PLUS
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: PUSH
51061: LD_VAR 0 1
51065: PUSH
51066: LD_INT 4
51068: PLUS
51069: PUSH
51070: LD_VAR 0 2
51074: PUSH
51075: LD_INT 4
51077: PLUS
51078: PUSH
51079: LD_INT 5
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: LIST
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// end ; 2 :
51094: GO 51653
51096: LD_INT 2
51098: DOUBLE
51099: EQUAL
51100: IFTRUE 51104
51102: GO 51233
51104: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51105: LD_ADDR_VAR 0 5
51109: PUSH
51110: LD_VAR 0 1
51114: PUSH
51115: LD_VAR 0 2
51119: PUSH
51120: LD_INT 3
51122: MINUS
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: PUSH
51132: LD_VAR 0 1
51136: PUSH
51137: LD_INT 4
51139: PLUS
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: PUSH
51154: LD_VAR 0 1
51158: PUSH
51159: LD_VAR 0 2
51163: PUSH
51164: LD_INT 4
51166: PLUS
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: PUSH
51176: LD_VAR 0 1
51180: PUSH
51181: LD_INT 3
51183: MINUS
51184: PUSH
51185: LD_VAR 0 2
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: PUSH
51198: LD_VAR 0 1
51202: PUSH
51203: LD_INT 4
51205: MINUS
51206: PUSH
51207: LD_VAR 0 2
51211: PUSH
51212: LD_INT 4
51214: MINUS
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: ST_TO_ADDR
// end ; 3 :
51231: GO 51653
51233: LD_INT 3
51235: DOUBLE
51236: EQUAL
51237: IFTRUE 51241
51239: GO 51374
51241: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51242: LD_ADDR_VAR 0 5
51246: PUSH
51247: LD_VAR 0 1
51251: PUSH
51252: LD_INT 3
51254: PLUS
51255: PUSH
51256: LD_VAR 0 2
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: PUSH
51269: LD_VAR 0 1
51273: PUSH
51274: LD_INT 4
51276: PLUS
51277: PUSH
51278: LD_VAR 0 2
51282: PUSH
51283: LD_INT 4
51285: PLUS
51286: PUSH
51287: LD_INT 5
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: PUSH
51295: LD_VAR 0 1
51299: PUSH
51300: LD_INT 4
51302: MINUS
51303: PUSH
51304: LD_VAR 0 2
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: PUSH
51317: LD_VAR 0 1
51321: PUSH
51322: LD_VAR 0 2
51326: PUSH
51327: LD_INT 4
51329: MINUS
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: PUSH
51339: LD_VAR 0 1
51343: PUSH
51344: LD_INT 3
51346: MINUS
51347: PUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_INT 3
51355: MINUS
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// end ; 4 :
51372: GO 51653
51374: LD_INT 4
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51382
51380: GO 51515
51382: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51383: LD_ADDR_VAR 0 5
51387: PUSH
51388: LD_VAR 0 1
51392: PUSH
51393: LD_VAR 0 2
51397: PUSH
51398: LD_INT 4
51400: PLUS
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: PUSH
51410: LD_VAR 0 1
51414: PUSH
51415: LD_INT 3
51417: PLUS
51418: PUSH
51419: LD_VAR 0 2
51423: PUSH
51424: LD_INT 3
51426: PLUS
51427: PUSH
51428: LD_INT 5
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: LD_VAR 0 1
51440: PUSH
51441: LD_INT 4
51443: PLUS
51444: PUSH
51445: LD_VAR 0 2
51449: PUSH
51450: LD_INT 4
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: PUSH
51458: LD_VAR 0 1
51462: PUSH
51463: LD_VAR 0 2
51467: PUSH
51468: LD_INT 3
51470: MINUS
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: PUSH
51480: LD_VAR 0 1
51484: PUSH
51485: LD_INT 4
51487: MINUS
51488: PUSH
51489: LD_VAR 0 2
51493: PUSH
51494: LD_INT 4
51496: MINUS
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: ST_TO_ADDR
// end ; 5 :
51513: GO 51653
51515: LD_INT 5
51517: DOUBLE
51518: EQUAL
51519: IFTRUE 51523
51521: GO 51652
51523: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51524: LD_ADDR_VAR 0 5
51528: PUSH
51529: LD_VAR 0 1
51533: PUSH
51534: LD_INT 4
51536: MINUS
51537: PUSH
51538: LD_VAR 0 2
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: PUSH
51551: LD_VAR 0 1
51555: PUSH
51556: LD_VAR 0 2
51560: PUSH
51561: LD_INT 4
51563: MINUS
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: PUSH
51573: LD_VAR 0 1
51577: PUSH
51578: LD_INT 4
51580: PLUS
51581: PUSH
51582: LD_VAR 0 2
51586: PUSH
51587: LD_INT 4
51589: PLUS
51590: PUSH
51591: LD_INT 5
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: PUSH
51599: LD_VAR 0 1
51603: PUSH
51604: LD_INT 3
51606: PLUS
51607: PUSH
51608: LD_VAR 0 2
51612: PUSH
51613: LD_INT 4
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: PUSH
51621: LD_VAR 0 1
51625: PUSH
51626: LD_VAR 0 2
51630: PUSH
51631: LD_INT 3
51633: PLUS
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// end ; end ;
51650: GO 51653
51652: POP
// result := list ;
51653: LD_ADDR_VAR 0 4
51657: PUSH
51658: LD_VAR 0 5
51662: ST_TO_ADDR
// end ;
51663: LD_VAR 0 4
51667: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51668: LD_INT 0
51670: PPUSH
51671: PPUSH
51672: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51673: LD_VAR 0 1
51677: NOT
51678: PUSH
51679: LD_VAR 0 2
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: IN
51702: NOT
51703: OR
51704: IFFALSE 51708
// exit ;
51706: GO 51791
// tmp := [ ] ;
51708: LD_ADDR_VAR 0 5
51712: PUSH
51713: EMPTY
51714: ST_TO_ADDR
// for i in units do
51715: LD_ADDR_VAR 0 4
51719: PUSH
51720: LD_VAR 0 1
51724: PUSH
51725: FOR_IN
51726: IFFALSE 51760
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51728: LD_ADDR_VAR 0 5
51732: PUSH
51733: LD_VAR 0 5
51737: PPUSH
51738: LD_VAR 0 4
51742: PPUSH
51743: LD_VAR 0 2
51747: PPUSH
51748: CALL_OW 259
51752: PPUSH
51753: CALL 53152 0 2
51757: ST_TO_ADDR
51758: GO 51725
51760: POP
51761: POP
// if not tmp then
51762: LD_VAR 0 5
51766: NOT
51767: IFFALSE 51771
// exit ;
51769: GO 51791
// result := SortListByListDesc ( units , tmp ) ;
51771: LD_ADDR_VAR 0 3
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: LD_VAR 0 5
51785: PPUSH
51786: CALL_OW 77
51790: ST_TO_ADDR
// end ;
51791: LD_VAR 0 3
51795: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51796: LD_INT 0
51798: PPUSH
51799: PPUSH
51800: PPUSH
// result := false ;
51801: LD_ADDR_VAR 0 3
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// if not building then
51809: LD_VAR 0 2
51813: NOT
51814: IFFALSE 51818
// exit ;
51816: GO 51956
// x := GetX ( building ) ;
51818: LD_ADDR_VAR 0 4
51822: PUSH
51823: LD_VAR 0 2
51827: PPUSH
51828: CALL_OW 250
51832: ST_TO_ADDR
// y := GetY ( building ) ;
51833: LD_ADDR_VAR 0 5
51837: PUSH
51838: LD_VAR 0 2
51842: PPUSH
51843: CALL_OW 251
51847: ST_TO_ADDR
// if not x or not y then
51848: LD_VAR 0 4
51852: NOT
51853: PUSH
51854: LD_VAR 0 5
51858: NOT
51859: OR
51860: IFFALSE 51864
// exit ;
51862: GO 51956
// if GetTaskList ( unit ) then
51864: LD_VAR 0 1
51868: PPUSH
51869: CALL_OW 437
51873: IFFALSE 51956
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51875: LD_STRING e
51877: PUSH
51878: LD_VAR 0 1
51882: PPUSH
51883: CALL_OW 437
51887: PUSH
51888: LD_INT 1
51890: ARRAY
51891: PUSH
51892: LD_INT 1
51894: ARRAY
51895: EQUAL
51896: PUSH
51897: LD_VAR 0 4
51901: PUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 437
51911: PUSH
51912: LD_INT 1
51914: ARRAY
51915: PUSH
51916: LD_INT 2
51918: ARRAY
51919: EQUAL
51920: AND
51921: PUSH
51922: LD_VAR 0 5
51926: PUSH
51927: LD_VAR 0 1
51931: PPUSH
51932: CALL_OW 437
51936: PUSH
51937: LD_INT 1
51939: ARRAY
51940: PUSH
51941: LD_INT 3
51943: ARRAY
51944: EQUAL
51945: AND
51946: IFFALSE 51956
// result := true end ;
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_INT 1
51955: ST_TO_ADDR
// end ;
51956: LD_VAR 0 3
51960: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51961: LD_INT 0
51963: PPUSH
// result := false ;
51964: LD_ADDR_VAR 0 4
51968: PUSH
51969: LD_INT 0
51971: ST_TO_ADDR
// if GetTaskList ( unit ) then
51972: LD_VAR 0 1
51976: PPUSH
51977: CALL_OW 437
51981: IFFALSE 52064
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51983: LD_STRING M
51985: PUSH
51986: LD_VAR 0 1
51990: PPUSH
51991: CALL_OW 437
51995: PUSH
51996: LD_INT 1
51998: ARRAY
51999: PUSH
52000: LD_INT 1
52002: ARRAY
52003: EQUAL
52004: PUSH
52005: LD_VAR 0 2
52009: PUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: CALL_OW 437
52019: PUSH
52020: LD_INT 1
52022: ARRAY
52023: PUSH
52024: LD_INT 2
52026: ARRAY
52027: EQUAL
52028: AND
52029: PUSH
52030: LD_VAR 0 3
52034: PUSH
52035: LD_VAR 0 1
52039: PPUSH
52040: CALL_OW 437
52044: PUSH
52045: LD_INT 1
52047: ARRAY
52048: PUSH
52049: LD_INT 3
52051: ARRAY
52052: EQUAL
52053: AND
52054: IFFALSE 52064
// result := true ;
52056: LD_ADDR_VAR 0 4
52060: PUSH
52061: LD_INT 1
52063: ST_TO_ADDR
// end ; end ;
52064: LD_VAR 0 4
52068: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52069: LD_INT 0
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
// if not unit or not area then
52075: LD_VAR 0 1
52079: NOT
52080: PUSH
52081: LD_VAR 0 2
52085: NOT
52086: OR
52087: IFFALSE 52091
// exit ;
52089: GO 52255
// tmp := AreaToList ( area , i ) ;
52091: LD_ADDR_VAR 0 6
52095: PUSH
52096: LD_VAR 0 2
52100: PPUSH
52101: LD_VAR 0 5
52105: PPUSH
52106: CALL_OW 517
52110: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52111: LD_ADDR_VAR 0 5
52115: PUSH
52116: DOUBLE
52117: LD_INT 1
52119: DEC
52120: ST_TO_ADDR
52121: LD_VAR 0 6
52125: PUSH
52126: LD_INT 1
52128: ARRAY
52129: PUSH
52130: FOR_TO
52131: IFFALSE 52253
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52133: LD_ADDR_VAR 0 7
52137: PUSH
52138: LD_VAR 0 6
52142: PUSH
52143: LD_INT 1
52145: ARRAY
52146: PUSH
52147: LD_VAR 0 5
52151: ARRAY
52152: PUSH
52153: LD_VAR 0 6
52157: PUSH
52158: LD_INT 2
52160: ARRAY
52161: PUSH
52162: LD_VAR 0 5
52166: ARRAY
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52172: LD_VAR 0 7
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: PPUSH
52181: LD_VAR 0 7
52185: PUSH
52186: LD_INT 2
52188: ARRAY
52189: PPUSH
52190: CALL_OW 428
52194: PUSH
52195: LD_INT 0
52197: EQUAL
52198: IFFALSE 52251
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52200: LD_VAR 0 1
52204: PPUSH
52205: LD_VAR 0 7
52209: PUSH
52210: LD_INT 1
52212: ARRAY
52213: PPUSH
52214: LD_VAR 0 7
52218: PUSH
52219: LD_INT 2
52221: ARRAY
52222: PPUSH
52223: LD_VAR 0 3
52227: PPUSH
52228: CALL_OW 48
// result := IsPlaced ( unit ) ;
52232: LD_ADDR_VAR 0 4
52236: PUSH
52237: LD_VAR 0 1
52241: PPUSH
52242: CALL_OW 305
52246: ST_TO_ADDR
// exit ;
52247: POP
52248: POP
52249: GO 52255
// end ; end ;
52251: GO 52130
52253: POP
52254: POP
// end ;
52255: LD_VAR 0 4
52259: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52260: LD_INT 0
52262: PPUSH
52263: PPUSH
52264: PPUSH
// if not side or side > 8 then
52265: LD_VAR 0 1
52269: NOT
52270: PUSH
52271: LD_VAR 0 1
52275: PUSH
52276: LD_INT 8
52278: GREATER
52279: OR
52280: IFFALSE 52284
// exit ;
52282: GO 52471
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52284: LD_ADDR_VAR 0 4
52288: PUSH
52289: LD_INT 22
52291: PUSH
52292: LD_VAR 0 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 21
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PPUSH
52315: CALL_OW 69
52319: ST_TO_ADDR
// if not tmp then
52320: LD_VAR 0 4
52324: NOT
52325: IFFALSE 52329
// exit ;
52327: GO 52471
// enable_addtolog := true ;
52329: LD_ADDR_OWVAR 81
52333: PUSH
52334: LD_INT 1
52336: ST_TO_ADDR
// AddToLog ( [ ) ;
52337: LD_STRING [
52339: PPUSH
52340: CALL_OW 561
// for i in tmp do
52344: LD_ADDR_VAR 0 3
52348: PUSH
52349: LD_VAR 0 4
52353: PUSH
52354: FOR_IN
52355: IFFALSE 52462
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52357: LD_STRING [
52359: PUSH
52360: LD_VAR 0 3
52364: PPUSH
52365: CALL_OW 266
52369: STR
52370: PUSH
52371: LD_STRING , 
52373: STR
52374: PUSH
52375: LD_VAR 0 3
52379: PPUSH
52380: CALL_OW 250
52384: STR
52385: PUSH
52386: LD_STRING , 
52388: STR
52389: PUSH
52390: LD_VAR 0 3
52394: PPUSH
52395: CALL_OW 251
52399: STR
52400: PUSH
52401: LD_STRING , 
52403: STR
52404: PUSH
52405: LD_VAR 0 3
52409: PPUSH
52410: CALL_OW 254
52414: STR
52415: PUSH
52416: LD_STRING , 
52418: STR
52419: PUSH
52420: LD_VAR 0 3
52424: PPUSH
52425: LD_INT 1
52427: PPUSH
52428: CALL_OW 268
52432: STR
52433: PUSH
52434: LD_STRING , 
52436: STR
52437: PUSH
52438: LD_VAR 0 3
52442: PPUSH
52443: LD_INT 2
52445: PPUSH
52446: CALL_OW 268
52450: STR
52451: PUSH
52452: LD_STRING ],
52454: STR
52455: PPUSH
52456: CALL_OW 561
// end ;
52460: GO 52354
52462: POP
52463: POP
// AddToLog ( ]; ) ;
52464: LD_STRING ];
52466: PPUSH
52467: CALL_OW 561
// end ;
52471: LD_VAR 0 2
52475: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52476: LD_INT 0
52478: PPUSH
52479: PPUSH
52480: PPUSH
52481: PPUSH
52482: PPUSH
// if not area or not rate or not max then
52483: LD_VAR 0 1
52487: NOT
52488: PUSH
52489: LD_VAR 0 2
52493: NOT
52494: OR
52495: PUSH
52496: LD_VAR 0 4
52500: NOT
52501: OR
52502: IFFALSE 52506
// exit ;
52504: GO 52695
// while 1 do
52506: LD_INT 1
52508: IFFALSE 52695
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52510: LD_ADDR_VAR 0 9
52514: PUSH
52515: LD_VAR 0 1
52519: PPUSH
52520: LD_INT 1
52522: PPUSH
52523: CALL_OW 287
52527: PUSH
52528: LD_INT 10
52530: MUL
52531: ST_TO_ADDR
// r := rate / 10 ;
52532: LD_ADDR_VAR 0 7
52536: PUSH
52537: LD_VAR 0 2
52541: PUSH
52542: LD_INT 10
52544: DIVREAL
52545: ST_TO_ADDR
// time := 1 1$00 ;
52546: LD_ADDR_VAR 0 8
52550: PUSH
52551: LD_INT 2100
52553: ST_TO_ADDR
// if amount < min then
52554: LD_VAR 0 9
52558: PUSH
52559: LD_VAR 0 3
52563: LESS
52564: IFFALSE 52582
// r := r * 2 else
52566: LD_ADDR_VAR 0 7
52570: PUSH
52571: LD_VAR 0 7
52575: PUSH
52576: LD_INT 2
52578: MUL
52579: ST_TO_ADDR
52580: GO 52608
// if amount > max then
52582: LD_VAR 0 9
52586: PUSH
52587: LD_VAR 0 4
52591: GREATER
52592: IFFALSE 52608
// r := r / 2 ;
52594: LD_ADDR_VAR 0 7
52598: PUSH
52599: LD_VAR 0 7
52603: PUSH
52604: LD_INT 2
52606: DIVREAL
52607: ST_TO_ADDR
// time := time / r ;
52608: LD_ADDR_VAR 0 8
52612: PUSH
52613: LD_VAR 0 8
52617: PUSH
52618: LD_VAR 0 7
52622: DIVREAL
52623: ST_TO_ADDR
// if time < 0 then
52624: LD_VAR 0 8
52628: PUSH
52629: LD_INT 0
52631: LESS
52632: IFFALSE 52649
// time := time * - 1 ;
52634: LD_ADDR_VAR 0 8
52638: PUSH
52639: LD_VAR 0 8
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: MUL
52648: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52649: LD_VAR 0 8
52653: PUSH
52654: LD_INT 35
52656: PPUSH
52657: LD_INT 875
52659: PPUSH
52660: CALL_OW 12
52664: PLUS
52665: PPUSH
52666: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52670: LD_INT 1
52672: PPUSH
52673: LD_INT 5
52675: PPUSH
52676: CALL_OW 12
52680: PPUSH
52681: LD_VAR 0 1
52685: PPUSH
52686: LD_INT 1
52688: PPUSH
52689: CALL_OW 55
// end ;
52693: GO 52506
// end ;
52695: LD_VAR 0 5
52699: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52700: LD_INT 0
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
// if not turrets or not factories then
52710: LD_VAR 0 1
52714: NOT
52715: PUSH
52716: LD_VAR 0 2
52720: NOT
52721: OR
52722: IFFALSE 52726
// exit ;
52724: GO 53033
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52726: LD_ADDR_VAR 0 10
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: LD_INT 6
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 4
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: LD_INT 5
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 24
52768: PUSH
52769: LD_INT 25
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 23
52778: PUSH
52779: LD_INT 27
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 42
52792: PUSH
52793: LD_INT 43
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 44
52802: PUSH
52803: LD_INT 46
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 45
52812: PUSH
52813: LD_INT 47
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: ST_TO_ADDR
// result := [ ] ;
52830: LD_ADDR_VAR 0 3
52834: PUSH
52835: EMPTY
52836: ST_TO_ADDR
// for i in turrets do
52837: LD_ADDR_VAR 0 4
52841: PUSH
52842: LD_VAR 0 1
52846: PUSH
52847: FOR_IN
52848: IFFALSE 53031
// begin nat := GetNation ( i ) ;
52850: LD_ADDR_VAR 0 7
52854: PUSH
52855: LD_VAR 0 4
52859: PPUSH
52860: CALL_OW 248
52864: ST_TO_ADDR
// weapon := 0 ;
52865: LD_ADDR_VAR 0 8
52869: PUSH
52870: LD_INT 0
52872: ST_TO_ADDR
// if not nat then
52873: LD_VAR 0 7
52877: NOT
52878: IFFALSE 52882
// continue ;
52880: GO 52847
// for j in list [ nat ] do
52882: LD_ADDR_VAR 0 5
52886: PUSH
52887: LD_VAR 0 10
52891: PUSH
52892: LD_VAR 0 7
52896: ARRAY
52897: PUSH
52898: FOR_IN
52899: IFFALSE 52940
// if GetBWeapon ( i ) = j [ 1 ] then
52901: LD_VAR 0 4
52905: PPUSH
52906: CALL_OW 269
52910: PUSH
52911: LD_VAR 0 5
52915: PUSH
52916: LD_INT 1
52918: ARRAY
52919: EQUAL
52920: IFFALSE 52938
// begin weapon := j [ 2 ] ;
52922: LD_ADDR_VAR 0 8
52926: PUSH
52927: LD_VAR 0 5
52931: PUSH
52932: LD_INT 2
52934: ARRAY
52935: ST_TO_ADDR
// break ;
52936: GO 52940
// end ;
52938: GO 52898
52940: POP
52941: POP
// if not weapon then
52942: LD_VAR 0 8
52946: NOT
52947: IFFALSE 52951
// continue ;
52949: GO 52847
// for k in factories do
52951: LD_ADDR_VAR 0 6
52955: PUSH
52956: LD_VAR 0 2
52960: PUSH
52961: FOR_IN
52962: IFFALSE 53027
// begin weapons := AvailableWeaponList ( k ) ;
52964: LD_ADDR_VAR 0 9
52968: PUSH
52969: LD_VAR 0 6
52973: PPUSH
52974: CALL_OW 478
52978: ST_TO_ADDR
// if not weapons then
52979: LD_VAR 0 9
52983: NOT
52984: IFFALSE 52988
// continue ;
52986: GO 52961
// if weapon in weapons then
52988: LD_VAR 0 8
52992: PUSH
52993: LD_VAR 0 9
52997: IN
52998: IFFALSE 53025
// begin result := [ i , weapon ] ;
53000: LD_ADDR_VAR 0 3
53004: PUSH
53005: LD_VAR 0 4
53009: PUSH
53010: LD_VAR 0 8
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: ST_TO_ADDR
// exit ;
53019: POP
53020: POP
53021: POP
53022: POP
53023: GO 53033
// end ; end ;
53025: GO 52961
53027: POP
53028: POP
// end ;
53029: GO 52847
53031: POP
53032: POP
// end ;
53033: LD_VAR 0 3
53037: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53038: LD_INT 0
53040: PPUSH
// if not side or side > 8 then
53041: LD_VAR 0 3
53045: NOT
53046: PUSH
53047: LD_VAR 0 3
53051: PUSH
53052: LD_INT 8
53054: GREATER
53055: OR
53056: IFFALSE 53060
// exit ;
53058: GO 53119
// if not range then
53060: LD_VAR 0 4
53064: NOT
53065: IFFALSE 53076
// range := - 12 ;
53067: LD_ADDR_VAR 0 4
53071: PUSH
53072: LD_INT 12
53074: NEG
53075: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53076: LD_VAR 0 1
53080: PPUSH
53081: LD_VAR 0 2
53085: PPUSH
53086: LD_VAR 0 3
53090: PPUSH
53091: LD_VAR 0 4
53095: PPUSH
53096: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53100: LD_VAR 0 1
53104: PPUSH
53105: LD_VAR 0 2
53109: PPUSH
53110: LD_VAR 0 3
53114: PPUSH
53115: CALL_OW 331
// end ;
53119: LD_VAR 0 5
53123: RET
// export function Video ( mode ) ; begin
53124: LD_INT 0
53126: PPUSH
// ingame_video = mode ;
53127: LD_ADDR_OWVAR 52
53131: PUSH
53132: LD_VAR 0 1
53136: ST_TO_ADDR
// interface_hidden = mode ;
53137: LD_ADDR_OWVAR 54
53141: PUSH
53142: LD_VAR 0 1
53146: ST_TO_ADDR
// end ;
53147: LD_VAR 0 2
53151: RET
// export function Join ( array , element ) ; begin
53152: LD_INT 0
53154: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53155: LD_ADDR_VAR 0 3
53159: PUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: LD_VAR 0 1
53169: PUSH
53170: LD_INT 1
53172: PLUS
53173: PPUSH
53174: LD_VAR 0 2
53178: PPUSH
53179: CALL_OW 1
53183: ST_TO_ADDR
// end ;
53184: LD_VAR 0 3
53188: RET
// export function JoinUnion ( array , element ) ; begin
53189: LD_INT 0
53191: PPUSH
// result := array union element ;
53192: LD_ADDR_VAR 0 3
53196: PUSH
53197: LD_VAR 0 1
53201: PUSH
53202: LD_VAR 0 2
53206: UNION
53207: ST_TO_ADDR
// end ;
53208: LD_VAR 0 3
53212: RET
// export function GetBehemoths ( side ) ; begin
53213: LD_INT 0
53215: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53216: LD_ADDR_VAR 0 2
53220: PUSH
53221: LD_INT 22
53223: PUSH
53224: LD_VAR 0 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 31
53235: PUSH
53236: LD_INT 25
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PPUSH
53247: CALL_OW 69
53251: ST_TO_ADDR
// end ;
53252: LD_VAR 0 2
53256: RET
// export function Shuffle ( array ) ; var i , index ; begin
53257: LD_INT 0
53259: PPUSH
53260: PPUSH
53261: PPUSH
// result := [ ] ;
53262: LD_ADDR_VAR 0 2
53266: PUSH
53267: EMPTY
53268: ST_TO_ADDR
// if not array then
53269: LD_VAR 0 1
53273: NOT
53274: IFFALSE 53278
// exit ;
53276: GO 53377
// Randomize ;
53278: CALL_OW 10
// for i = array downto 1 do
53282: LD_ADDR_VAR 0 3
53286: PUSH
53287: DOUBLE
53288: LD_VAR 0 1
53292: INC
53293: ST_TO_ADDR
53294: LD_INT 1
53296: PUSH
53297: FOR_DOWNTO
53298: IFFALSE 53375
// begin index := rand ( 1 , array ) ;
53300: LD_ADDR_VAR 0 4
53304: PUSH
53305: LD_INT 1
53307: PPUSH
53308: LD_VAR 0 1
53312: PPUSH
53313: CALL_OW 12
53317: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53318: LD_ADDR_VAR 0 2
53322: PUSH
53323: LD_VAR 0 2
53327: PPUSH
53328: LD_VAR 0 2
53332: PUSH
53333: LD_INT 1
53335: PLUS
53336: PPUSH
53337: LD_VAR 0 1
53341: PUSH
53342: LD_VAR 0 4
53346: ARRAY
53347: PPUSH
53348: CALL_OW 2
53352: ST_TO_ADDR
// array := Delete ( array , index ) ;
53353: LD_ADDR_VAR 0 1
53357: PUSH
53358: LD_VAR 0 1
53362: PPUSH
53363: LD_VAR 0 4
53367: PPUSH
53368: CALL_OW 3
53372: ST_TO_ADDR
// end ;
53373: GO 53297
53375: POP
53376: POP
// end ;
53377: LD_VAR 0 2
53381: RET
// export function GetBaseMaterials ( base ) ; begin
53382: LD_INT 0
53384: PPUSH
// result := [ 0 , 0 , 0 ] ;
53385: LD_ADDR_VAR 0 2
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// if not base then
53404: LD_VAR 0 1
53408: NOT
53409: IFFALSE 53413
// exit ;
53411: GO 53462
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53413: LD_ADDR_VAR 0 2
53417: PUSH
53418: LD_VAR 0 1
53422: PPUSH
53423: LD_INT 1
53425: PPUSH
53426: CALL_OW 275
53430: PUSH
53431: LD_VAR 0 1
53435: PPUSH
53436: LD_INT 2
53438: PPUSH
53439: CALL_OW 275
53443: PUSH
53444: LD_VAR 0 1
53448: PPUSH
53449: LD_INT 3
53451: PPUSH
53452: CALL_OW 275
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// end ;
53462: LD_VAR 0 2
53466: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53467: LD_INT 0
53469: PPUSH
53470: PPUSH
// result := array ;
53471: LD_ADDR_VAR 0 3
53475: PUSH
53476: LD_VAR 0 1
53480: ST_TO_ADDR
// if size >= result then
53481: LD_VAR 0 2
53485: PUSH
53486: LD_VAR 0 3
53490: GREATEREQUAL
53491: IFFALSE 53495
// exit ;
53493: GO 53545
// if size then
53495: LD_VAR 0 2
53499: IFFALSE 53545
// for i := array downto size do
53501: LD_ADDR_VAR 0 4
53505: PUSH
53506: DOUBLE
53507: LD_VAR 0 1
53511: INC
53512: ST_TO_ADDR
53513: LD_VAR 0 2
53517: PUSH
53518: FOR_DOWNTO
53519: IFFALSE 53543
// result := Delete ( result , result ) ;
53521: LD_ADDR_VAR 0 3
53525: PUSH
53526: LD_VAR 0 3
53530: PPUSH
53531: LD_VAR 0 3
53535: PPUSH
53536: CALL_OW 3
53540: ST_TO_ADDR
53541: GO 53518
53543: POP
53544: POP
// end ;
53545: LD_VAR 0 3
53549: RET
// export function ComExit ( unit ) ; var tmp ; begin
53550: LD_INT 0
53552: PPUSH
53553: PPUSH
// if not IsInUnit ( unit ) then
53554: LD_VAR 0 1
53558: PPUSH
53559: CALL_OW 310
53563: NOT
53564: IFFALSE 53568
// exit ;
53566: GO 53628
// tmp := IsInUnit ( unit ) ;
53568: LD_ADDR_VAR 0 3
53572: PUSH
53573: LD_VAR 0 1
53577: PPUSH
53578: CALL_OW 310
53582: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53583: LD_VAR 0 3
53587: PPUSH
53588: CALL_OW 247
53592: PUSH
53593: LD_INT 2
53595: EQUAL
53596: IFFALSE 53609
// ComExitVehicle ( unit ) else
53598: LD_VAR 0 1
53602: PPUSH
53603: CALL_OW 121
53607: GO 53618
// ComExitBuilding ( unit ) ;
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 122
// result := tmp ;
53618: LD_ADDR_VAR 0 2
53622: PUSH
53623: LD_VAR 0 3
53627: ST_TO_ADDR
// end ;
53628: LD_VAR 0 2
53632: RET
// export function ComExitAll ( units ) ; var i ; begin
53633: LD_INT 0
53635: PPUSH
53636: PPUSH
// if not units then
53637: LD_VAR 0 1
53641: NOT
53642: IFFALSE 53646
// exit ;
53644: GO 53672
// for i in units do
53646: LD_ADDR_VAR 0 3
53650: PUSH
53651: LD_VAR 0 1
53655: PUSH
53656: FOR_IN
53657: IFFALSE 53670
// ComExit ( i ) ;
53659: LD_VAR 0 3
53663: PPUSH
53664: CALL 53550 0 1
53668: GO 53656
53670: POP
53671: POP
// end ;
53672: LD_VAR 0 2
53676: RET
// export function ResetHc ; begin
53677: LD_INT 0
53679: PPUSH
// InitHc ;
53680: CALL_OW 19
// hc_importance := 0 ;
53684: LD_ADDR_OWVAR 32
53688: PUSH
53689: LD_INT 0
53691: ST_TO_ADDR
// end ;
53692: LD_VAR 0 1
53696: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53697: LD_INT 0
53699: PPUSH
53700: PPUSH
53701: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53702: LD_ADDR_VAR 0 6
53706: PUSH
53707: LD_VAR 0 1
53711: PUSH
53712: LD_VAR 0 3
53716: PLUS
53717: PUSH
53718: LD_INT 2
53720: DIV
53721: ST_TO_ADDR
// if _x < 0 then
53722: LD_VAR 0 6
53726: PUSH
53727: LD_INT 0
53729: LESS
53730: IFFALSE 53747
// _x := _x * - 1 ;
53732: LD_ADDR_VAR 0 6
53736: PUSH
53737: LD_VAR 0 6
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: MUL
53746: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53747: LD_ADDR_VAR 0 7
53751: PUSH
53752: LD_VAR 0 2
53756: PUSH
53757: LD_VAR 0 4
53761: PLUS
53762: PUSH
53763: LD_INT 2
53765: DIV
53766: ST_TO_ADDR
// if _y < 0 then
53767: LD_VAR 0 7
53771: PUSH
53772: LD_INT 0
53774: LESS
53775: IFFALSE 53792
// _y := _y * - 1 ;
53777: LD_ADDR_VAR 0 7
53781: PUSH
53782: LD_VAR 0 7
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: MUL
53791: ST_TO_ADDR
// result := [ _x , _y ] ;
53792: LD_ADDR_VAR 0 5
53796: PUSH
53797: LD_VAR 0 6
53801: PUSH
53802: LD_VAR 0 7
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: ST_TO_ADDR
// end ;
53811: LD_VAR 0 5
53815: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53816: LD_INT 0
53818: PPUSH
53819: PPUSH
53820: PPUSH
53821: PPUSH
// task := GetTaskList ( unit ) ;
53822: LD_ADDR_VAR 0 7
53826: PUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: CALL_OW 437
53836: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53837: LD_VAR 0 7
53841: NOT
53842: PUSH
53843: LD_VAR 0 1
53847: PPUSH
53848: LD_VAR 0 2
53852: PPUSH
53853: CALL_OW 308
53857: NOT
53858: AND
53859: IFFALSE 53863
// exit ;
53861: GO 53981
// if IsInArea ( unit , area ) then
53863: LD_VAR 0 1
53867: PPUSH
53868: LD_VAR 0 2
53872: PPUSH
53873: CALL_OW 308
53877: IFFALSE 53895
// begin ComMoveToArea ( unit , goAway ) ;
53879: LD_VAR 0 1
53883: PPUSH
53884: LD_VAR 0 3
53888: PPUSH
53889: CALL_OW 113
// exit ;
53893: GO 53981
// end ; if task [ 1 ] [ 1 ] <> M then
53895: LD_VAR 0 7
53899: PUSH
53900: LD_INT 1
53902: ARRAY
53903: PUSH
53904: LD_INT 1
53906: ARRAY
53907: PUSH
53908: LD_STRING M
53910: NONEQUAL
53911: IFFALSE 53915
// exit ;
53913: GO 53981
// x := task [ 1 ] [ 2 ] ;
53915: LD_ADDR_VAR 0 5
53919: PUSH
53920: LD_VAR 0 7
53924: PUSH
53925: LD_INT 1
53927: ARRAY
53928: PUSH
53929: LD_INT 2
53931: ARRAY
53932: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53933: LD_ADDR_VAR 0 6
53937: PUSH
53938: LD_VAR 0 7
53942: PUSH
53943: LD_INT 1
53945: ARRAY
53946: PUSH
53947: LD_INT 3
53949: ARRAY
53950: ST_TO_ADDR
// if InArea ( x , y , area ) then
53951: LD_VAR 0 5
53955: PPUSH
53956: LD_VAR 0 6
53960: PPUSH
53961: LD_VAR 0 2
53965: PPUSH
53966: CALL_OW 309
53970: IFFALSE 53981
// ComStop ( unit ) ;
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 141
// end ;
53981: LD_VAR 0 4
53985: RET
// export function Abs ( value ) ; begin
53986: LD_INT 0
53988: PPUSH
// result := value ;
53989: LD_ADDR_VAR 0 2
53993: PUSH
53994: LD_VAR 0 1
53998: ST_TO_ADDR
// if value < 0 then
53999: LD_VAR 0 1
54003: PUSH
54004: LD_INT 0
54006: LESS
54007: IFFALSE 54024
// result := value * - 1 ;
54009: LD_ADDR_VAR 0 2
54013: PUSH
54014: LD_VAR 0 1
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: MUL
54023: ST_TO_ADDR
// end ;
54024: LD_VAR 0 2
54028: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54029: LD_INT 0
54031: PPUSH
54032: PPUSH
54033: PPUSH
54034: PPUSH
54035: PPUSH
54036: PPUSH
54037: PPUSH
54038: PPUSH
// if not unit or not building then
54039: LD_VAR 0 1
54043: NOT
54044: PUSH
54045: LD_VAR 0 2
54049: NOT
54050: OR
54051: IFFALSE 54055
// exit ;
54053: GO 54281
// x := GetX ( building ) ;
54055: LD_ADDR_VAR 0 4
54059: PUSH
54060: LD_VAR 0 2
54064: PPUSH
54065: CALL_OW 250
54069: ST_TO_ADDR
// y := GetY ( building ) ;
54070: LD_ADDR_VAR 0 6
54074: PUSH
54075: LD_VAR 0 2
54079: PPUSH
54080: CALL_OW 251
54084: ST_TO_ADDR
// d := GetDir ( building ) ;
54085: LD_ADDR_VAR 0 8
54089: PUSH
54090: LD_VAR 0 2
54094: PPUSH
54095: CALL_OW 254
54099: ST_TO_ADDR
// r := 4 ;
54100: LD_ADDR_VAR 0 9
54104: PUSH
54105: LD_INT 4
54107: ST_TO_ADDR
// for i := 1 to 5 do
54108: LD_ADDR_VAR 0 10
54112: PUSH
54113: DOUBLE
54114: LD_INT 1
54116: DEC
54117: ST_TO_ADDR
54118: LD_INT 5
54120: PUSH
54121: FOR_TO
54122: IFFALSE 54279
// begin _x := ShiftX ( x , d , r + i ) ;
54124: LD_ADDR_VAR 0 5
54128: PUSH
54129: LD_VAR 0 4
54133: PPUSH
54134: LD_VAR 0 8
54138: PPUSH
54139: LD_VAR 0 9
54143: PUSH
54144: LD_VAR 0 10
54148: PLUS
54149: PPUSH
54150: CALL_OW 272
54154: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54155: LD_ADDR_VAR 0 7
54159: PUSH
54160: LD_VAR 0 6
54164: PPUSH
54165: LD_VAR 0 8
54169: PPUSH
54170: LD_VAR 0 9
54174: PUSH
54175: LD_VAR 0 10
54179: PLUS
54180: PPUSH
54181: CALL_OW 273
54185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54186: LD_VAR 0 5
54190: PPUSH
54191: LD_VAR 0 7
54195: PPUSH
54196: CALL_OW 488
54200: PUSH
54201: LD_VAR 0 5
54205: PPUSH
54206: LD_VAR 0 7
54210: PPUSH
54211: CALL_OW 428
54215: PPUSH
54216: CALL_OW 247
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: IN
54231: NOT
54232: AND
54233: IFFALSE 54277
// begin ComMoveXY ( unit , _x , _y ) ;
54235: LD_VAR 0 1
54239: PPUSH
54240: LD_VAR 0 5
54244: PPUSH
54245: LD_VAR 0 7
54249: PPUSH
54250: CALL_OW 111
// result := [ _x , _y ] ;
54254: LD_ADDR_VAR 0 3
54258: PUSH
54259: LD_VAR 0 5
54263: PUSH
54264: LD_VAR 0 7
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// exit ;
54273: POP
54274: POP
54275: GO 54281
// end ; end ;
54277: GO 54121
54279: POP
54280: POP
// end ;
54281: LD_VAR 0 3
54285: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54286: LD_INT 0
54288: PPUSH
54289: PPUSH
54290: PPUSH
// result := 0 ;
54291: LD_ADDR_VAR 0 3
54295: PUSH
54296: LD_INT 0
54298: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54299: LD_VAR 0 1
54303: PUSH
54304: LD_INT 0
54306: LESS
54307: PUSH
54308: LD_VAR 0 1
54312: PUSH
54313: LD_INT 8
54315: GREATER
54316: OR
54317: PUSH
54318: LD_VAR 0 2
54322: PUSH
54323: LD_INT 0
54325: LESS
54326: OR
54327: PUSH
54328: LD_VAR 0 2
54332: PUSH
54333: LD_INT 8
54335: GREATER
54336: OR
54337: IFFALSE 54341
// exit ;
54339: GO 54416
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54341: LD_ADDR_VAR 0 4
54345: PUSH
54346: LD_INT 22
54348: PUSH
54349: LD_VAR 0 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PPUSH
54358: CALL_OW 69
54362: PUSH
54363: FOR_IN
54364: IFFALSE 54414
// begin un := UnitShoot ( i ) ;
54366: LD_ADDR_VAR 0 5
54370: PUSH
54371: LD_VAR 0 4
54375: PPUSH
54376: CALL_OW 504
54380: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54381: LD_VAR 0 5
54385: PPUSH
54386: CALL_OW 255
54390: PUSH
54391: LD_VAR 0 1
54395: EQUAL
54396: IFFALSE 54412
// begin result := un ;
54398: LD_ADDR_VAR 0 3
54402: PUSH
54403: LD_VAR 0 5
54407: ST_TO_ADDR
// exit ;
54408: POP
54409: POP
54410: GO 54416
// end ; end ;
54412: GO 54363
54414: POP
54415: POP
// end ;
54416: LD_VAR 0 3
54420: RET
// export function GetCargoBay ( units ) ; begin
54421: LD_INT 0
54423: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54424: LD_ADDR_VAR 0 2
54428: PUSH
54429: LD_VAR 0 1
54433: PPUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 34
54439: PUSH
54440: LD_INT 12
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 34
54449: PUSH
54450: LD_INT 51
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 34
54459: PUSH
54460: LD_INT 32
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 34
54469: PUSH
54470: LD_INT 89
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: PPUSH
54484: CALL_OW 72
54488: ST_TO_ADDR
// end ;
54489: LD_VAR 0 2
54493: RET
// export function Negate ( value ) ; begin
54494: LD_INT 0
54496: PPUSH
// result := not value ;
54497: LD_ADDR_VAR 0 2
54501: PUSH
54502: LD_VAR 0 1
54506: NOT
54507: ST_TO_ADDR
// end ;
54508: LD_VAR 0 2
54512: RET
// export function Inc ( value ) ; begin
54513: LD_INT 0
54515: PPUSH
// result := value + 1 ;
54516: LD_ADDR_VAR 0 2
54520: PUSH
54521: LD_VAR 0 1
54525: PUSH
54526: LD_INT 1
54528: PLUS
54529: ST_TO_ADDR
// end ;
54530: LD_VAR 0 2
54534: RET
// export function Dec ( value ) ; begin
54535: LD_INT 0
54537: PPUSH
// result := value - 1 ;
54538: LD_ADDR_VAR 0 2
54542: PUSH
54543: LD_VAR 0 1
54547: PUSH
54548: LD_INT 1
54550: MINUS
54551: ST_TO_ADDR
// end ;
54552: LD_VAR 0 2
54556: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54557: LD_INT 0
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54567: LD_VAR 0 1
54571: PPUSH
54572: LD_VAR 0 2
54576: PPUSH
54577: CALL_OW 488
54581: NOT
54582: PUSH
54583: LD_VAR 0 3
54587: PPUSH
54588: LD_VAR 0 4
54592: PPUSH
54593: CALL_OW 488
54597: NOT
54598: OR
54599: IFFALSE 54612
// begin result := - 1 ;
54601: LD_ADDR_VAR 0 5
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: ST_TO_ADDR
// exit ;
54610: GO 54847
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54612: LD_ADDR_VAR 0 12
54616: PUSH
54617: LD_VAR 0 1
54621: PPUSH
54622: LD_VAR 0 2
54626: PPUSH
54627: LD_VAR 0 3
54631: PPUSH
54632: LD_VAR 0 4
54636: PPUSH
54637: CALL 53697 0 4
54641: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54642: LD_ADDR_VAR 0 11
54646: PUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_VAR 0 2
54656: PPUSH
54657: LD_VAR 0 12
54661: PUSH
54662: LD_INT 1
54664: ARRAY
54665: PPUSH
54666: LD_VAR 0 12
54670: PUSH
54671: LD_INT 2
54673: ARRAY
54674: PPUSH
54675: CALL_OW 298
54679: ST_TO_ADDR
// distance := 9999 ;
54680: LD_ADDR_VAR 0 10
54684: PUSH
54685: LD_INT 9999
54687: ST_TO_ADDR
// for i := 0 to 5 do
54688: LD_ADDR_VAR 0 6
54692: PUSH
54693: DOUBLE
54694: LD_INT 0
54696: DEC
54697: ST_TO_ADDR
54698: LD_INT 5
54700: PUSH
54701: FOR_TO
54702: IFFALSE 54845
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54704: LD_ADDR_VAR 0 7
54708: PUSH
54709: LD_VAR 0 1
54713: PPUSH
54714: LD_VAR 0 6
54718: PPUSH
54719: LD_VAR 0 11
54723: PPUSH
54724: CALL_OW 272
54728: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54729: LD_ADDR_VAR 0 8
54733: PUSH
54734: LD_VAR 0 2
54738: PPUSH
54739: LD_VAR 0 6
54743: PPUSH
54744: LD_VAR 0 11
54748: PPUSH
54749: CALL_OW 273
54753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54754: LD_VAR 0 7
54758: PPUSH
54759: LD_VAR 0 8
54763: PPUSH
54764: CALL_OW 488
54768: NOT
54769: IFFALSE 54773
// continue ;
54771: GO 54701
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54773: LD_ADDR_VAR 0 9
54777: PUSH
54778: LD_VAR 0 12
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: PPUSH
54787: LD_VAR 0 12
54791: PUSH
54792: LD_INT 2
54794: ARRAY
54795: PPUSH
54796: LD_VAR 0 7
54800: PPUSH
54801: LD_VAR 0 8
54805: PPUSH
54806: CALL_OW 298
54810: ST_TO_ADDR
// if tmp < distance then
54811: LD_VAR 0 9
54815: PUSH
54816: LD_VAR 0 10
54820: LESS
54821: IFFALSE 54843
// begin result := i ;
54823: LD_ADDR_VAR 0 5
54827: PUSH
54828: LD_VAR 0 6
54832: ST_TO_ADDR
// distance := tmp ;
54833: LD_ADDR_VAR 0 10
54837: PUSH
54838: LD_VAR 0 9
54842: ST_TO_ADDR
// end ; end ;
54843: GO 54701
54845: POP
54846: POP
// end ;
54847: LD_VAR 0 5
54851: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54852: LD_INT 0
54854: PPUSH
54855: PPUSH
// if not driver or not IsInUnit ( driver ) then
54856: LD_VAR 0 1
54860: NOT
54861: PUSH
54862: LD_VAR 0 1
54866: PPUSH
54867: CALL_OW 310
54871: NOT
54872: OR
54873: IFFALSE 54877
// exit ;
54875: GO 54967
// vehicle := IsInUnit ( driver ) ;
54877: LD_ADDR_VAR 0 3
54881: PUSH
54882: LD_VAR 0 1
54886: PPUSH
54887: CALL_OW 310
54891: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54892: LD_VAR 0 1
54896: PPUSH
54897: LD_STRING \
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: PUSH
54927: LD_STRING E
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_VAR 0 3
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PPUSH
54963: CALL_OW 446
// end ;
54967: LD_VAR 0 2
54971: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54972: LD_INT 0
54974: PPUSH
54975: PPUSH
// if not driver or not IsInUnit ( driver ) then
54976: LD_VAR 0 1
54980: NOT
54981: PUSH
54982: LD_VAR 0 1
54986: PPUSH
54987: CALL_OW 310
54991: NOT
54992: OR
54993: IFFALSE 54997
// exit ;
54995: GO 55087
// vehicle := IsInUnit ( driver ) ;
54997: LD_ADDR_VAR 0 3
55001: PUSH
55002: LD_VAR 0 1
55006: PPUSH
55007: CALL_OW 310
55011: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55012: LD_VAR 0 1
55016: PPUSH
55017: LD_STRING \
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: PUSH
55047: LD_STRING E
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_VAR 0 3
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PPUSH
55083: CALL_OW 447
// end ;
55087: LD_VAR 0 2
55091: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55092: LD_INT 0
55094: PPUSH
55095: PPUSH
55096: PPUSH
// tmp := [ ] ;
55097: LD_ADDR_VAR 0 5
55101: PUSH
55102: EMPTY
55103: ST_TO_ADDR
// for i in units do
55104: LD_ADDR_VAR 0 4
55108: PUSH
55109: LD_VAR 0 1
55113: PUSH
55114: FOR_IN
55115: IFFALSE 55153
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55117: LD_ADDR_VAR 0 5
55121: PUSH
55122: LD_VAR 0 5
55126: PPUSH
55127: LD_VAR 0 5
55131: PUSH
55132: LD_INT 1
55134: PLUS
55135: PPUSH
55136: LD_VAR 0 4
55140: PPUSH
55141: CALL_OW 256
55145: PPUSH
55146: CALL_OW 2
55150: ST_TO_ADDR
55151: GO 55114
55153: POP
55154: POP
// if not tmp then
55155: LD_VAR 0 5
55159: NOT
55160: IFFALSE 55164
// exit ;
55162: GO 55212
// if asc then
55164: LD_VAR 0 2
55168: IFFALSE 55192
// result := SortListByListAsc ( units , tmp ) else
55170: LD_ADDR_VAR 0 3
55174: PUSH
55175: LD_VAR 0 1
55179: PPUSH
55180: LD_VAR 0 5
55184: PPUSH
55185: CALL_OW 76
55189: ST_TO_ADDR
55190: GO 55212
// result := SortListByListDesc ( units , tmp ) ;
55192: LD_ADDR_VAR 0 3
55196: PUSH
55197: LD_VAR 0 1
55201: PPUSH
55202: LD_VAR 0 5
55206: PPUSH
55207: CALL_OW 77
55211: ST_TO_ADDR
// end ;
55212: LD_VAR 0 3
55216: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
// task := GetTaskList ( mech ) ;
55221: LD_ADDR_VAR 0 4
55225: PUSH
55226: LD_VAR 0 1
55230: PPUSH
55231: CALL_OW 437
55235: ST_TO_ADDR
// if not task then
55236: LD_VAR 0 4
55240: NOT
55241: IFFALSE 55245
// exit ;
55243: GO 55287
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55245: LD_ADDR_VAR 0 3
55249: PUSH
55250: LD_VAR 0 4
55254: PUSH
55255: LD_INT 1
55257: ARRAY
55258: PUSH
55259: LD_INT 1
55261: ARRAY
55262: PUSH
55263: LD_STRING r
55265: EQUAL
55266: PUSH
55267: LD_VAR 0 4
55271: PUSH
55272: LD_INT 1
55274: ARRAY
55275: PUSH
55276: LD_INT 4
55278: ARRAY
55279: PUSH
55280: LD_VAR 0 2
55284: EQUAL
55285: AND
55286: ST_TO_ADDR
// end ;
55287: LD_VAR 0 3
55291: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55292: LD_INT 0
55294: PPUSH
// SetDir ( unit , d ) ;
55295: LD_VAR 0 1
55299: PPUSH
55300: LD_VAR 0 4
55304: PPUSH
55305: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55309: LD_VAR 0 1
55313: PPUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: LD_VAR 0 3
55323: PPUSH
55324: LD_VAR 0 5
55328: PPUSH
55329: CALL_OW 48
// end ;
55333: LD_VAR 0 6
55337: RET
// export function ToNaturalNumber ( number ) ; begin
55338: LD_INT 0
55340: PPUSH
// result := number div 1 ;
55341: LD_ADDR_VAR 0 2
55345: PUSH
55346: LD_VAR 0 1
55350: PUSH
55351: LD_INT 1
55353: DIV
55354: ST_TO_ADDR
// if number < 0 then
55355: LD_VAR 0 1
55359: PUSH
55360: LD_INT 0
55362: LESS
55363: IFFALSE 55373
// result := 0 ;
55365: LD_ADDR_VAR 0 2
55369: PUSH
55370: LD_INT 0
55372: ST_TO_ADDR
// end ;
55373: LD_VAR 0 2
55377: RET
// export function SortByClass ( units , class ) ; var un ; begin
55378: LD_INT 0
55380: PPUSH
55381: PPUSH
// if not units or not class then
55382: LD_VAR 0 1
55386: NOT
55387: PUSH
55388: LD_VAR 0 2
55392: NOT
55393: OR
55394: IFFALSE 55398
// exit ;
55396: GO 55493
// result := [ ] ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: EMPTY
55404: ST_TO_ADDR
// for un in units do
55405: LD_ADDR_VAR 0 4
55409: PUSH
55410: LD_VAR 0 1
55414: PUSH
55415: FOR_IN
55416: IFFALSE 55491
// if GetClass ( un ) = class then
55418: LD_VAR 0 4
55422: PPUSH
55423: CALL_OW 257
55427: PUSH
55428: LD_VAR 0 2
55432: EQUAL
55433: IFFALSE 55460
// result := Insert ( result , 1 , un ) else
55435: LD_ADDR_VAR 0 3
55439: PUSH
55440: LD_VAR 0 3
55444: PPUSH
55445: LD_INT 1
55447: PPUSH
55448: LD_VAR 0 4
55452: PPUSH
55453: CALL_OW 2
55457: ST_TO_ADDR
55458: GO 55489
// result := Replace ( result , result + 1 , un ) ;
55460: LD_ADDR_VAR 0 3
55464: PUSH
55465: LD_VAR 0 3
55469: PPUSH
55470: LD_VAR 0 3
55474: PUSH
55475: LD_INT 1
55477: PLUS
55478: PPUSH
55479: LD_VAR 0 4
55483: PPUSH
55484: CALL_OW 1
55488: ST_TO_ADDR
55489: GO 55415
55491: POP
55492: POP
// end ;
55493: LD_VAR 0 3
55497: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55498: LD_INT 0
55500: PPUSH
55501: PPUSH
55502: PPUSH
55503: PPUSH
55504: PPUSH
55505: PPUSH
55506: PPUSH
// result := [ ] ;
55507: LD_ADDR_VAR 0 4
55511: PUSH
55512: EMPTY
55513: ST_TO_ADDR
// if x - r < 0 then
55514: LD_VAR 0 1
55518: PUSH
55519: LD_VAR 0 3
55523: MINUS
55524: PUSH
55525: LD_INT 0
55527: LESS
55528: IFFALSE 55540
// min_x := 0 else
55530: LD_ADDR_VAR 0 8
55534: PUSH
55535: LD_INT 0
55537: ST_TO_ADDR
55538: GO 55556
// min_x := x - r ;
55540: LD_ADDR_VAR 0 8
55544: PUSH
55545: LD_VAR 0 1
55549: PUSH
55550: LD_VAR 0 3
55554: MINUS
55555: ST_TO_ADDR
// if y - r < 0 then
55556: LD_VAR 0 2
55560: PUSH
55561: LD_VAR 0 3
55565: MINUS
55566: PUSH
55567: LD_INT 0
55569: LESS
55570: IFFALSE 55582
// min_y := 0 else
55572: LD_ADDR_VAR 0 7
55576: PUSH
55577: LD_INT 0
55579: ST_TO_ADDR
55580: GO 55598
// min_y := y - r ;
55582: LD_ADDR_VAR 0 7
55586: PUSH
55587: LD_VAR 0 2
55591: PUSH
55592: LD_VAR 0 3
55596: MINUS
55597: ST_TO_ADDR
// max_x := x + r ;
55598: LD_ADDR_VAR 0 9
55602: PUSH
55603: LD_VAR 0 1
55607: PUSH
55608: LD_VAR 0 3
55612: PLUS
55613: ST_TO_ADDR
// max_y := y + r ;
55614: LD_ADDR_VAR 0 10
55618: PUSH
55619: LD_VAR 0 2
55623: PUSH
55624: LD_VAR 0 3
55628: PLUS
55629: ST_TO_ADDR
// for _x = min_x to max_x do
55630: LD_ADDR_VAR 0 5
55634: PUSH
55635: DOUBLE
55636: LD_VAR 0 8
55640: DEC
55641: ST_TO_ADDR
55642: LD_VAR 0 9
55646: PUSH
55647: FOR_TO
55648: IFFALSE 55749
// for _y = min_y to max_y do
55650: LD_ADDR_VAR 0 6
55654: PUSH
55655: DOUBLE
55656: LD_VAR 0 7
55660: DEC
55661: ST_TO_ADDR
55662: LD_VAR 0 10
55666: PUSH
55667: FOR_TO
55668: IFFALSE 55745
// begin if not ValidHex ( _x , _y ) then
55670: LD_VAR 0 5
55674: PPUSH
55675: LD_VAR 0 6
55679: PPUSH
55680: CALL_OW 488
55684: NOT
55685: IFFALSE 55689
// continue ;
55687: GO 55667
// if GetResourceTypeXY ( _x , _y ) then
55689: LD_VAR 0 5
55693: PPUSH
55694: LD_VAR 0 6
55698: PPUSH
55699: CALL_OW 283
55703: IFFALSE 55743
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55705: LD_ADDR_VAR 0 4
55709: PUSH
55710: LD_VAR 0 4
55714: PPUSH
55715: LD_VAR 0 4
55719: PUSH
55720: LD_INT 1
55722: PLUS
55723: PPUSH
55724: LD_VAR 0 5
55728: PUSH
55729: LD_VAR 0 6
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PPUSH
55738: CALL_OW 1
55742: ST_TO_ADDR
// end ;
55743: GO 55667
55745: POP
55746: POP
55747: GO 55647
55749: POP
55750: POP
// end ;
55751: LD_VAR 0 4
55755: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
55760: PPUSH
55761: PPUSH
55762: PPUSH
55763: PPUSH
55764: PPUSH
55765: PPUSH
// if not units then
55766: LD_VAR 0 1
55770: NOT
55771: IFFALSE 55775
// exit ;
55773: GO 56299
// result := UnitFilter ( units , [ f_ok ] ) ;
55775: LD_ADDR_VAR 0 3
55779: PUSH
55780: LD_VAR 0 1
55784: PPUSH
55785: LD_INT 50
55787: PUSH
55788: EMPTY
55789: LIST
55790: PPUSH
55791: CALL_OW 72
55795: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55796: LD_ADDR_VAR 0 8
55800: PUSH
55801: LD_VAR 0 1
55805: PUSH
55806: LD_INT 1
55808: ARRAY
55809: PPUSH
55810: CALL_OW 255
55814: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55815: LD_ADDR_VAR 0 10
55819: PUSH
55820: LD_INT 29
55822: PUSH
55823: LD_INT 91
55825: PUSH
55826: LD_INT 49
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: ST_TO_ADDR
// if not result then
55834: LD_VAR 0 3
55838: NOT
55839: IFFALSE 55843
// exit ;
55841: GO 56299
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55843: LD_ADDR_VAR 0 5
55847: PUSH
55848: LD_INT 81
55850: PUSH
55851: LD_VAR 0 8
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PPUSH
55860: CALL_OW 69
55864: ST_TO_ADDR
// for i in result do
55865: LD_ADDR_VAR 0 4
55869: PUSH
55870: LD_VAR 0 3
55874: PUSH
55875: FOR_IN
55876: IFFALSE 56297
// begin tag := GetTag ( i ) + 1 ;
55878: LD_ADDR_VAR 0 9
55882: PUSH
55883: LD_VAR 0 4
55887: PPUSH
55888: CALL_OW 110
55892: PUSH
55893: LD_INT 1
55895: PLUS
55896: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55897: LD_ADDR_VAR 0 7
55901: PUSH
55902: LD_VAR 0 4
55906: PPUSH
55907: CALL_OW 250
55911: PPUSH
55912: LD_VAR 0 4
55916: PPUSH
55917: CALL_OW 251
55921: PPUSH
55922: LD_INT 6
55924: PPUSH
55925: CALL 55498 0 3
55929: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55930: LD_VAR 0 4
55934: PPUSH
55935: CALL_OW 247
55939: PUSH
55940: LD_INT 2
55942: EQUAL
55943: PUSH
55944: LD_VAR 0 7
55948: AND
55949: PUSH
55950: LD_VAR 0 4
55954: PPUSH
55955: CALL_OW 264
55959: PUSH
55960: LD_VAR 0 10
55964: IN
55965: NOT
55966: AND
55967: IFFALSE 56006
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55969: LD_VAR 0 4
55973: PPUSH
55974: LD_VAR 0 7
55978: PUSH
55979: LD_INT 1
55981: ARRAY
55982: PUSH
55983: LD_INT 1
55985: ARRAY
55986: PPUSH
55987: LD_VAR 0 7
55991: PUSH
55992: LD_INT 1
55994: ARRAY
55995: PUSH
55996: LD_INT 2
55998: ARRAY
55999: PPUSH
56000: CALL_OW 116
56004: GO 56295
// if path > tag then
56006: LD_VAR 0 2
56010: PUSH
56011: LD_VAR 0 9
56015: GREATER
56016: IFFALSE 56224
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56018: LD_ADDR_VAR 0 6
56022: PUSH
56023: LD_VAR 0 5
56027: PPUSH
56028: LD_INT 91
56030: PUSH
56031: LD_VAR 0 4
56035: PUSH
56036: LD_INT 8
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: PPUSH
56044: CALL_OW 72
56048: ST_TO_ADDR
// if nearEnemy then
56049: LD_VAR 0 6
56053: IFFALSE 56122
// begin if GetWeapon ( i ) = ru_time_lapser then
56055: LD_VAR 0 4
56059: PPUSH
56060: CALL_OW 264
56064: PUSH
56065: LD_INT 49
56067: EQUAL
56068: IFFALSE 56096
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56070: LD_VAR 0 4
56074: PPUSH
56075: LD_VAR 0 6
56079: PPUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: CALL_OW 74
56089: PPUSH
56090: CALL_OW 112
56094: GO 56120
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56096: LD_VAR 0 4
56100: PPUSH
56101: LD_VAR 0 6
56105: PPUSH
56106: LD_VAR 0 4
56110: PPUSH
56111: CALL_OW 74
56115: PPUSH
56116: CALL_OW 115
// end else
56120: GO 56222
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56122: LD_VAR 0 4
56126: PPUSH
56127: LD_VAR 0 2
56131: PUSH
56132: LD_VAR 0 9
56136: ARRAY
56137: PUSH
56138: LD_INT 1
56140: ARRAY
56141: PPUSH
56142: LD_VAR 0 2
56146: PUSH
56147: LD_VAR 0 9
56151: ARRAY
56152: PUSH
56153: LD_INT 2
56155: ARRAY
56156: PPUSH
56157: CALL_OW 297
56161: PUSH
56162: LD_INT 6
56164: GREATER
56165: IFFALSE 56208
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56167: LD_VAR 0 4
56171: PPUSH
56172: LD_VAR 0 2
56176: PUSH
56177: LD_VAR 0 9
56181: ARRAY
56182: PUSH
56183: LD_INT 1
56185: ARRAY
56186: PPUSH
56187: LD_VAR 0 2
56191: PUSH
56192: LD_VAR 0 9
56196: ARRAY
56197: PUSH
56198: LD_INT 2
56200: ARRAY
56201: PPUSH
56202: CALL_OW 114
56206: GO 56222
// SetTag ( i , tag ) ;
56208: LD_VAR 0 4
56212: PPUSH
56213: LD_VAR 0 9
56217: PPUSH
56218: CALL_OW 109
// end else
56222: GO 56295
// if enemy then
56224: LD_VAR 0 5
56228: IFFALSE 56295
// begin if GetWeapon ( i ) = ru_time_lapser then
56230: LD_VAR 0 4
56234: PPUSH
56235: CALL_OW 264
56239: PUSH
56240: LD_INT 49
56242: EQUAL
56243: IFFALSE 56271
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56245: LD_VAR 0 4
56249: PPUSH
56250: LD_VAR 0 5
56254: PPUSH
56255: LD_VAR 0 4
56259: PPUSH
56260: CALL_OW 74
56264: PPUSH
56265: CALL_OW 112
56269: GO 56295
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56271: LD_VAR 0 4
56275: PPUSH
56276: LD_VAR 0 5
56280: PPUSH
56281: LD_VAR 0 4
56285: PPUSH
56286: CALL_OW 74
56290: PPUSH
56291: CALL_OW 115
// end ; end ;
56295: GO 55875
56297: POP
56298: POP
// end ;
56299: LD_VAR 0 3
56303: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56304: LD_INT 0
56306: PPUSH
56307: PPUSH
56308: PPUSH
// if not unit or IsInUnit ( unit ) then
56309: LD_VAR 0 1
56313: NOT
56314: PUSH
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 310
56324: OR
56325: IFFALSE 56329
// exit ;
56327: GO 56420
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56329: LD_ADDR_VAR 0 4
56333: PUSH
56334: LD_VAR 0 1
56338: PPUSH
56339: CALL_OW 250
56343: PPUSH
56344: LD_VAR 0 2
56348: PPUSH
56349: LD_INT 1
56351: PPUSH
56352: CALL_OW 272
56356: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56357: LD_ADDR_VAR 0 5
56361: PUSH
56362: LD_VAR 0 1
56366: PPUSH
56367: CALL_OW 251
56371: PPUSH
56372: LD_VAR 0 2
56376: PPUSH
56377: LD_INT 1
56379: PPUSH
56380: CALL_OW 273
56384: ST_TO_ADDR
// if ValidHex ( x , y ) then
56385: LD_VAR 0 4
56389: PPUSH
56390: LD_VAR 0 5
56394: PPUSH
56395: CALL_OW 488
56399: IFFALSE 56420
// ComTurnXY ( unit , x , y ) ;
56401: LD_VAR 0 1
56405: PPUSH
56406: LD_VAR 0 4
56410: PPUSH
56411: LD_VAR 0 5
56415: PPUSH
56416: CALL_OW 118
// end ;
56420: LD_VAR 0 3
56424: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56425: LD_INT 0
56427: PPUSH
56428: PPUSH
// result := false ;
56429: LD_ADDR_VAR 0 3
56433: PUSH
56434: LD_INT 0
56436: ST_TO_ADDR
// if not units then
56437: LD_VAR 0 2
56441: NOT
56442: IFFALSE 56446
// exit ;
56444: GO 56491
// for i in units do
56446: LD_ADDR_VAR 0 4
56450: PUSH
56451: LD_VAR 0 2
56455: PUSH
56456: FOR_IN
56457: IFFALSE 56489
// if See ( side , i ) then
56459: LD_VAR 0 1
56463: PPUSH
56464: LD_VAR 0 4
56468: PPUSH
56469: CALL_OW 292
56473: IFFALSE 56487
// begin result := true ;
56475: LD_ADDR_VAR 0 3
56479: PUSH
56480: LD_INT 1
56482: ST_TO_ADDR
// exit ;
56483: POP
56484: POP
56485: GO 56491
// end ;
56487: GO 56456
56489: POP
56490: POP
// end ;
56491: LD_VAR 0 3
56495: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56496: LD_INT 0
56498: PPUSH
56499: PPUSH
56500: PPUSH
56501: PPUSH
// if not unit or not points then
56502: LD_VAR 0 1
56506: NOT
56507: PUSH
56508: LD_VAR 0 2
56512: NOT
56513: OR
56514: IFFALSE 56518
// exit ;
56516: GO 56608
// dist := 99999 ;
56518: LD_ADDR_VAR 0 5
56522: PUSH
56523: LD_INT 99999
56525: ST_TO_ADDR
// for i in points do
56526: LD_ADDR_VAR 0 4
56530: PUSH
56531: LD_VAR 0 2
56535: PUSH
56536: FOR_IN
56537: IFFALSE 56606
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56539: LD_ADDR_VAR 0 6
56543: PUSH
56544: LD_VAR 0 1
56548: PPUSH
56549: LD_VAR 0 4
56553: PUSH
56554: LD_INT 1
56556: ARRAY
56557: PPUSH
56558: LD_VAR 0 4
56562: PUSH
56563: LD_INT 2
56565: ARRAY
56566: PPUSH
56567: CALL_OW 297
56571: ST_TO_ADDR
// if tmpDist < dist then
56572: LD_VAR 0 6
56576: PUSH
56577: LD_VAR 0 5
56581: LESS
56582: IFFALSE 56604
// begin result := i ;
56584: LD_ADDR_VAR 0 3
56588: PUSH
56589: LD_VAR 0 4
56593: ST_TO_ADDR
// dist := tmpDist ;
56594: LD_ADDR_VAR 0 5
56598: PUSH
56599: LD_VAR 0 6
56603: ST_TO_ADDR
// end ; end ;
56604: GO 56536
56606: POP
56607: POP
// end ;
56608: LD_VAR 0 3
56612: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56613: LD_INT 0
56615: PPUSH
// uc_side := side ;
56616: LD_ADDR_OWVAR 20
56620: PUSH
56621: LD_VAR 0 1
56625: ST_TO_ADDR
// uc_nation := 3 ;
56626: LD_ADDR_OWVAR 21
56630: PUSH
56631: LD_INT 3
56633: ST_TO_ADDR
// vc_chassis := 25 ;
56634: LD_ADDR_OWVAR 37
56638: PUSH
56639: LD_INT 25
56641: ST_TO_ADDR
// vc_engine := engine_siberite ;
56642: LD_ADDR_OWVAR 39
56646: PUSH
56647: LD_INT 3
56649: ST_TO_ADDR
// vc_control := control_computer ;
56650: LD_ADDR_OWVAR 38
56654: PUSH
56655: LD_INT 3
56657: ST_TO_ADDR
// vc_weapon := 59 ;
56658: LD_ADDR_OWVAR 40
56662: PUSH
56663: LD_INT 59
56665: ST_TO_ADDR
// result := CreateVehicle ;
56666: LD_ADDR_VAR 0 5
56670: PUSH
56671: CALL_OW 45
56675: ST_TO_ADDR
// SetDir ( result , d ) ;
56676: LD_VAR 0 5
56680: PPUSH
56681: LD_VAR 0 4
56685: PPUSH
56686: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56690: LD_VAR 0 5
56694: PPUSH
56695: LD_VAR 0 2
56699: PPUSH
56700: LD_VAR 0 3
56704: PPUSH
56705: LD_INT 0
56707: PPUSH
56708: CALL_OW 48
// end ;
56712: LD_VAR 0 5
56716: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56717: LD_INT 0
56719: PPUSH
56720: PPUSH
56721: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56722: LD_ADDR_VAR 0 2
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56745: LD_VAR 0 1
56749: NOT
56750: PUSH
56751: LD_VAR 0 1
56755: PPUSH
56756: CALL_OW 264
56760: PUSH
56761: LD_INT 12
56763: PUSH
56764: LD_INT 51
56766: PUSH
56767: LD_INT 32
56769: PUSH
56770: LD_INT 89
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: IN
56779: NOT
56780: OR
56781: IFFALSE 56785
// exit ;
56783: GO 56883
// for i := 1 to 3 do
56785: LD_ADDR_VAR 0 3
56789: PUSH
56790: DOUBLE
56791: LD_INT 1
56793: DEC
56794: ST_TO_ADDR
56795: LD_INT 3
56797: PUSH
56798: FOR_TO
56799: IFFALSE 56881
// begin tmp := GetCargo ( cargo , i ) ;
56801: LD_ADDR_VAR 0 4
56805: PUSH
56806: LD_VAR 0 1
56810: PPUSH
56811: LD_VAR 0 3
56815: PPUSH
56816: CALL_OW 289
56820: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56821: LD_ADDR_VAR 0 2
56825: PUSH
56826: LD_VAR 0 2
56830: PPUSH
56831: LD_VAR 0 3
56835: PPUSH
56836: LD_VAR 0 4
56840: PPUSH
56841: CALL_OW 1
56845: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56846: LD_ADDR_VAR 0 2
56850: PUSH
56851: LD_VAR 0 2
56855: PPUSH
56856: LD_INT 4
56858: PPUSH
56859: LD_VAR 0 2
56863: PUSH
56864: LD_INT 4
56866: ARRAY
56867: PUSH
56868: LD_VAR 0 4
56872: PLUS
56873: PPUSH
56874: CALL_OW 1
56878: ST_TO_ADDR
// end ;
56879: GO 56798
56881: POP
56882: POP
// end ;
56883: LD_VAR 0 2
56887: RET
// export function Length ( array ) ; begin
56888: LD_INT 0
56890: PPUSH
// result := array + 0 ;
56891: LD_ADDR_VAR 0 2
56895: PUSH
56896: LD_VAR 0 1
56900: PUSH
56901: LD_INT 0
56903: PLUS
56904: ST_TO_ADDR
// end ;
56905: LD_VAR 0 2
56909: RET
// export function PrepareArray ( array ) ; begin
56910: LD_INT 0
56912: PPUSH
// result := array diff 0 ;
56913: LD_ADDR_VAR 0 2
56917: PUSH
56918: LD_VAR 0 1
56922: PUSH
56923: LD_INT 0
56925: DIFF
56926: ST_TO_ADDR
// if not result [ 1 ] then
56927: LD_VAR 0 2
56931: PUSH
56932: LD_INT 1
56934: ARRAY
56935: NOT
56936: IFFALSE 56956
// result := Delete ( result , 1 ) ;
56938: LD_ADDR_VAR 0 2
56942: PUSH
56943: LD_VAR 0 2
56947: PPUSH
56948: LD_INT 1
56950: PPUSH
56951: CALL_OW 3
56955: ST_TO_ADDR
// end ;
56956: LD_VAR 0 2
56960: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56961: LD_INT 0
56963: PPUSH
56964: PPUSH
56965: PPUSH
56966: PPUSH
// sibRocketRange := 25 ;
56967: LD_ADDR_VAR 0 6
56971: PUSH
56972: LD_INT 25
56974: ST_TO_ADDR
// result := false ;
56975: LD_ADDR_VAR 0 4
56979: PUSH
56980: LD_INT 0
56982: ST_TO_ADDR
// for i := 0 to 5 do
56983: LD_ADDR_VAR 0 5
56987: PUSH
56988: DOUBLE
56989: LD_INT 0
56991: DEC
56992: ST_TO_ADDR
56993: LD_INT 5
56995: PUSH
56996: FOR_TO
56997: IFFALSE 57064
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56999: LD_VAR 0 1
57003: PPUSH
57004: LD_VAR 0 5
57008: PPUSH
57009: LD_VAR 0 6
57013: PPUSH
57014: CALL_OW 272
57018: PPUSH
57019: LD_VAR 0 2
57023: PPUSH
57024: LD_VAR 0 5
57028: PPUSH
57029: LD_VAR 0 6
57033: PPUSH
57034: CALL_OW 273
57038: PPUSH
57039: LD_VAR 0 3
57043: PPUSH
57044: CALL_OW 309
57048: IFFALSE 57062
// begin result := true ;
57050: LD_ADDR_VAR 0 4
57054: PUSH
57055: LD_INT 1
57057: ST_TO_ADDR
// exit ;
57058: POP
57059: POP
57060: GO 57066
// end ;
57062: GO 56996
57064: POP
57065: POP
// end ;
57066: LD_VAR 0 4
57070: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57071: LD_INT 0
57073: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57074: LD_VAR 0 1
57078: PPUSH
57079: LD_VAR 0 2
57083: PPUSH
57084: LD_INT 0
57086: PPUSH
57087: LD_INT 0
57089: PPUSH
57090: LD_INT 1
57092: PPUSH
57093: LD_INT 0
57095: PPUSH
57096: CALL_OW 587
// end ; end_of_file
57100: LD_VAR 0 3
57104: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57105: LD_VAR 0 1
57109: PUSH
57110: LD_INT 200
57112: DOUBLE
57113: GREATEREQUAL
57114: IFFALSE 57122
57116: LD_INT 299
57118: DOUBLE
57119: LESSEQUAL
57120: IFTRUE 57124
57122: GO 57156
57124: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57125: LD_VAR 0 1
57129: PPUSH
57130: LD_VAR 0 2
57134: PPUSH
57135: LD_VAR 0 3
57139: PPUSH
57140: LD_VAR 0 4
57144: PPUSH
57145: LD_VAR 0 5
57149: PPUSH
57150: CALL 57644 0 5
57154: GO 57233
57156: LD_INT 300
57158: DOUBLE
57159: GREATEREQUAL
57160: IFFALSE 57168
57162: LD_INT 399
57164: DOUBLE
57165: LESSEQUAL
57166: IFTRUE 57170
57168: GO 57232
57170: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57171: LD_VAR 0 1
57175: PPUSH
57176: LD_VAR 0 2
57180: PPUSH
57181: LD_VAR 0 3
57185: PPUSH
57186: LD_VAR 0 4
57190: PPUSH
57191: LD_VAR 0 5
57195: PPUSH
57196: LD_VAR 0 6
57200: PPUSH
57201: LD_VAR 0 7
57205: PPUSH
57206: LD_VAR 0 8
57210: PPUSH
57211: LD_VAR 0 9
57215: PPUSH
57216: LD_VAR 0 10
57220: PPUSH
57221: LD_VAR 0 11
57225: PPUSH
57226: CALL 74060 0 11
57230: GO 57233
57232: POP
// end ;
57233: PPOPN 11
57235: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57236: LD_VAR 0 1
57240: PPUSH
57241: LD_VAR 0 2
57245: PPUSH
57246: LD_VAR 0 3
57250: PPUSH
57251: LD_VAR 0 4
57255: PPUSH
57256: LD_VAR 0 5
57260: PPUSH
57261: CALL 57380 0 5
// end ; end_of_file
57265: PPOPN 5
57267: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57268: LD_INT 0
57270: PPUSH
57271: PPUSH
57272: PPUSH
57273: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 264
57283: PUSH
57284: LD_INT 91
57286: EQUAL
57287: IFFALSE 57359
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57289: LD_INT 68
57291: PPUSH
57292: LD_VAR 0 1
57296: PPUSH
57297: CALL_OW 255
57301: PPUSH
57302: CALL_OW 321
57306: PUSH
57307: LD_INT 2
57309: EQUAL
57310: IFFALSE 57322
// eff := 70 else
57312: LD_ADDR_VAR 0 4
57316: PUSH
57317: LD_INT 70
57319: ST_TO_ADDR
57320: GO 57330
// eff := 30 ;
57322: LD_ADDR_VAR 0 4
57326: PUSH
57327: LD_INT 30
57329: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57330: LD_VAR 0 1
57334: PPUSH
57335: CALL_OW 250
57339: PPUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL_OW 251
57349: PPUSH
57350: LD_VAR 0 4
57354: PPUSH
57355: CALL_OW 495
// end ; end ;
57359: LD_VAR 0 2
57363: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57364: LD_INT 0
57366: PPUSH
// end ;
57367: LD_VAR 0 4
57371: RET
// export function SOS_Command ( cmd ) ; begin
57372: LD_INT 0
57374: PPUSH
// end ;
57375: LD_VAR 0 2
57379: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57380: LD_INT 0
57382: PPUSH
// end ;
57383: LD_VAR 0 6
57387: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57388: LD_INT 0
57390: PPUSH
57391: PPUSH
// if not vehicle or not factory then
57392: LD_VAR 0 1
57396: NOT
57397: PUSH
57398: LD_VAR 0 2
57402: NOT
57403: OR
57404: IFFALSE 57408
// exit ;
57406: GO 57639
// if factoryWaypoints >= factory then
57408: LD_EXP 104
57412: PUSH
57413: LD_VAR 0 2
57417: GREATEREQUAL
57418: IFFALSE 57639
// if factoryWaypoints [ factory ] then
57420: LD_EXP 104
57424: PUSH
57425: LD_VAR 0 2
57429: ARRAY
57430: IFFALSE 57639
// begin if GetControl ( vehicle ) = control_manual then
57432: LD_VAR 0 1
57436: PPUSH
57437: CALL_OW 263
57441: PUSH
57442: LD_INT 1
57444: EQUAL
57445: IFFALSE 57526
// begin driver := IsDrivenBy ( vehicle ) ;
57447: LD_ADDR_VAR 0 4
57451: PUSH
57452: LD_VAR 0 1
57456: PPUSH
57457: CALL_OW 311
57461: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57462: LD_VAR 0 4
57466: PPUSH
57467: LD_EXP 104
57471: PUSH
57472: LD_VAR 0 2
57476: ARRAY
57477: PUSH
57478: LD_INT 3
57480: ARRAY
57481: PPUSH
57482: LD_EXP 104
57486: PUSH
57487: LD_VAR 0 2
57491: ARRAY
57492: PUSH
57493: LD_INT 4
57495: ARRAY
57496: PPUSH
57497: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57501: LD_VAR 0 4
57505: PPUSH
57506: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57510: LD_VAR 0 4
57514: PPUSH
57515: LD_VAR 0 2
57519: PPUSH
57520: CALL_OW 180
// end else
57524: GO 57639
// if GetControl ( vehicle ) = control_remote then
57526: LD_VAR 0 1
57530: PPUSH
57531: CALL_OW 263
57535: PUSH
57536: LD_INT 2
57538: EQUAL
57539: IFFALSE 57600
// begin wait ( 0 0$2 ) ;
57541: LD_INT 70
57543: PPUSH
57544: CALL_OW 67
// if Connect ( vehicle ) then
57548: LD_VAR 0 1
57552: PPUSH
57553: CALL 23790 0 1
57557: IFFALSE 57598
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57559: LD_VAR 0 1
57563: PPUSH
57564: LD_EXP 104
57568: PUSH
57569: LD_VAR 0 2
57573: ARRAY
57574: PUSH
57575: LD_INT 3
57577: ARRAY
57578: PPUSH
57579: LD_EXP 104
57583: PUSH
57584: LD_VAR 0 2
57588: ARRAY
57589: PUSH
57590: LD_INT 4
57592: ARRAY
57593: PPUSH
57594: CALL_OW 171
// end else
57598: GO 57639
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57600: LD_VAR 0 1
57604: PPUSH
57605: LD_EXP 104
57609: PUSH
57610: LD_VAR 0 2
57614: ARRAY
57615: PUSH
57616: LD_INT 3
57618: ARRAY
57619: PPUSH
57620: LD_EXP 104
57624: PUSH
57625: LD_VAR 0 2
57629: ARRAY
57630: PUSH
57631: LD_INT 4
57633: ARRAY
57634: PPUSH
57635: CALL_OW 171
// end ; end ;
57639: LD_VAR 0 3
57643: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57644: LD_INT 0
57646: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57647: LD_VAR 0 1
57651: PUSH
57652: LD_INT 250
57654: EQUAL
57655: PUSH
57656: LD_VAR 0 2
57660: PPUSH
57661: CALL_OW 264
57665: PUSH
57666: LD_INT 81
57668: EQUAL
57669: AND
57670: IFFALSE 57691
// MinerPlaceMine ( unit , x , y ) ;
57672: LD_VAR 0 2
57676: PPUSH
57677: LD_VAR 0 4
57681: PPUSH
57682: LD_VAR 0 5
57686: PPUSH
57687: CALL 60076 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57691: LD_VAR 0 1
57695: PUSH
57696: LD_INT 251
57698: EQUAL
57699: PUSH
57700: LD_VAR 0 2
57704: PPUSH
57705: CALL_OW 264
57709: PUSH
57710: LD_INT 81
57712: EQUAL
57713: AND
57714: IFFALSE 57735
// MinerDetonateMine ( unit , x , y ) ;
57716: LD_VAR 0 2
57720: PPUSH
57721: LD_VAR 0 4
57725: PPUSH
57726: LD_VAR 0 5
57730: PPUSH
57731: CALL 60351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57735: LD_VAR 0 1
57739: PUSH
57740: LD_INT 252
57742: EQUAL
57743: PUSH
57744: LD_VAR 0 2
57748: PPUSH
57749: CALL_OW 264
57753: PUSH
57754: LD_INT 81
57756: EQUAL
57757: AND
57758: IFFALSE 57779
// MinerCreateMinefield ( unit , x , y ) ;
57760: LD_VAR 0 2
57764: PPUSH
57765: LD_VAR 0 4
57769: PPUSH
57770: LD_VAR 0 5
57774: PPUSH
57775: CALL 60768 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57779: LD_VAR 0 1
57783: PUSH
57784: LD_INT 253
57786: EQUAL
57787: PUSH
57788: LD_VAR 0 2
57792: PPUSH
57793: CALL_OW 257
57797: PUSH
57798: LD_INT 5
57800: EQUAL
57801: AND
57802: IFFALSE 57823
// ComBinocular ( unit , x , y ) ;
57804: LD_VAR 0 2
57808: PPUSH
57809: LD_VAR 0 4
57813: PPUSH
57814: LD_VAR 0 5
57818: PPUSH
57819: CALL 61137 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57823: LD_VAR 0 1
57827: PUSH
57828: LD_INT 254
57830: EQUAL
57831: PUSH
57832: LD_VAR 0 2
57836: PPUSH
57837: CALL_OW 264
57841: PUSH
57842: LD_INT 99
57844: EQUAL
57845: AND
57846: PUSH
57847: LD_VAR 0 3
57851: PPUSH
57852: CALL_OW 263
57856: PUSH
57857: LD_INT 3
57859: EQUAL
57860: AND
57861: IFFALSE 57877
// HackDestroyVehicle ( unit , selectedUnit ) ;
57863: LD_VAR 0 2
57867: PPUSH
57868: LD_VAR 0 3
57872: PPUSH
57873: CALL 59440 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57877: LD_VAR 0 1
57881: PUSH
57882: LD_INT 255
57884: EQUAL
57885: PUSH
57886: LD_VAR 0 2
57890: PPUSH
57891: CALL_OW 264
57895: PUSH
57896: LD_INT 14
57898: PUSH
57899: LD_INT 53
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: IN
57906: AND
57907: PUSH
57908: LD_VAR 0 4
57912: PPUSH
57913: LD_VAR 0 5
57917: PPUSH
57918: CALL_OW 488
57922: AND
57923: IFFALSE 57947
// CutTreeXYR ( unit , x , y , 12 ) ;
57925: LD_VAR 0 2
57929: PPUSH
57930: LD_VAR 0 4
57934: PPUSH
57935: LD_VAR 0 5
57939: PPUSH
57940: LD_INT 12
57942: PPUSH
57943: CALL 58010 0 4
// if cmd = 256 then
57947: LD_VAR 0 1
57951: PUSH
57952: LD_INT 256
57954: EQUAL
57955: IFFALSE 57976
// SetFactoryWaypoint ( unit , x , y ) ;
57957: LD_VAR 0 2
57961: PPUSH
57962: LD_VAR 0 4
57966: PPUSH
57967: LD_VAR 0 5
57971: PPUSH
57972: CALL 76040 0 3
// if cmd = 257 then
57976: LD_VAR 0 1
57980: PUSH
57981: LD_INT 257
57983: EQUAL
57984: IFFALSE 58005
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57986: LD_VAR 0 2
57990: PPUSH
57991: LD_VAR 0 4
57995: PPUSH
57996: LD_VAR 0 5
58000: PPUSH
58001: CALL 76402 0 3
// end ;
58005: LD_VAR 0 6
58009: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58010: LD_INT 0
58012: PPUSH
58013: PPUSH
58014: PPUSH
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
58020: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58021: LD_VAR 0 1
58025: NOT
58026: PUSH
58027: LD_VAR 0 2
58031: PPUSH
58032: LD_VAR 0 3
58036: PPUSH
58037: CALL_OW 488
58041: NOT
58042: OR
58043: PUSH
58044: LD_VAR 0 4
58048: NOT
58049: OR
58050: IFFALSE 58054
// exit ;
58052: GO 58394
// list := [ ] ;
58054: LD_ADDR_VAR 0 13
58058: PUSH
58059: EMPTY
58060: ST_TO_ADDR
// if x - r < 0 then
58061: LD_VAR 0 2
58065: PUSH
58066: LD_VAR 0 4
58070: MINUS
58071: PUSH
58072: LD_INT 0
58074: LESS
58075: IFFALSE 58087
// min_x := 0 else
58077: LD_ADDR_VAR 0 7
58081: PUSH
58082: LD_INT 0
58084: ST_TO_ADDR
58085: GO 58103
// min_x := x - r ;
58087: LD_ADDR_VAR 0 7
58091: PUSH
58092: LD_VAR 0 2
58096: PUSH
58097: LD_VAR 0 4
58101: MINUS
58102: ST_TO_ADDR
// if y - r < 0 then
58103: LD_VAR 0 3
58107: PUSH
58108: LD_VAR 0 4
58112: MINUS
58113: PUSH
58114: LD_INT 0
58116: LESS
58117: IFFALSE 58129
// min_y := 0 else
58119: LD_ADDR_VAR 0 8
58123: PUSH
58124: LD_INT 0
58126: ST_TO_ADDR
58127: GO 58145
// min_y := y - r ;
58129: LD_ADDR_VAR 0 8
58133: PUSH
58134: LD_VAR 0 3
58138: PUSH
58139: LD_VAR 0 4
58143: MINUS
58144: ST_TO_ADDR
// max_x := x + r ;
58145: LD_ADDR_VAR 0 9
58149: PUSH
58150: LD_VAR 0 2
58154: PUSH
58155: LD_VAR 0 4
58159: PLUS
58160: ST_TO_ADDR
// max_y := y + r ;
58161: LD_ADDR_VAR 0 10
58165: PUSH
58166: LD_VAR 0 3
58170: PUSH
58171: LD_VAR 0 4
58175: PLUS
58176: ST_TO_ADDR
// for _x = min_x to max_x do
58177: LD_ADDR_VAR 0 11
58181: PUSH
58182: DOUBLE
58183: LD_VAR 0 7
58187: DEC
58188: ST_TO_ADDR
58189: LD_VAR 0 9
58193: PUSH
58194: FOR_TO
58195: IFFALSE 58312
// for _y = min_y to max_y do
58197: LD_ADDR_VAR 0 12
58201: PUSH
58202: DOUBLE
58203: LD_VAR 0 8
58207: DEC
58208: ST_TO_ADDR
58209: LD_VAR 0 10
58213: PUSH
58214: FOR_TO
58215: IFFALSE 58308
// begin if not ValidHex ( _x , _y ) then
58217: LD_VAR 0 11
58221: PPUSH
58222: LD_VAR 0 12
58226: PPUSH
58227: CALL_OW 488
58231: NOT
58232: IFFALSE 58236
// continue ;
58234: GO 58214
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58236: LD_VAR 0 11
58240: PPUSH
58241: LD_VAR 0 12
58245: PPUSH
58246: CALL_OW 351
58250: PUSH
58251: LD_VAR 0 11
58255: PPUSH
58256: LD_VAR 0 12
58260: PPUSH
58261: CALL_OW 554
58265: AND
58266: IFFALSE 58306
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58268: LD_ADDR_VAR 0 13
58272: PUSH
58273: LD_VAR 0 13
58277: PPUSH
58278: LD_VAR 0 13
58282: PUSH
58283: LD_INT 1
58285: PLUS
58286: PPUSH
58287: LD_VAR 0 11
58291: PUSH
58292: LD_VAR 0 12
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PPUSH
58301: CALL_OW 2
58305: ST_TO_ADDR
// end ;
58306: GO 58214
58308: POP
58309: POP
58310: GO 58194
58312: POP
58313: POP
// if not list then
58314: LD_VAR 0 13
58318: NOT
58319: IFFALSE 58323
// exit ;
58321: GO 58394
// for i in list do
58323: LD_ADDR_VAR 0 6
58327: PUSH
58328: LD_VAR 0 13
58332: PUSH
58333: FOR_IN
58334: IFFALSE 58392
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58336: LD_VAR 0 1
58340: PPUSH
58341: LD_STRING M
58343: PUSH
58344: LD_VAR 0 6
58348: PUSH
58349: LD_INT 1
58351: ARRAY
58352: PUSH
58353: LD_VAR 0 6
58357: PUSH
58358: LD_INT 2
58360: ARRAY
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: PPUSH
58386: CALL_OW 447
58390: GO 58333
58392: POP
58393: POP
// end ;
58394: LD_VAR 0 5
58398: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58399: LD_EXP 35
58403: NOT
58404: IFFALSE 58454
58406: GO 58408
58408: DISABLE
// begin initHack := true ;
58409: LD_ADDR_EXP 35
58413: PUSH
58414: LD_INT 1
58416: ST_TO_ADDR
// hackTanks := [ ] ;
58417: LD_ADDR_EXP 36
58421: PUSH
58422: EMPTY
58423: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58424: LD_ADDR_EXP 37
58428: PUSH
58429: EMPTY
58430: ST_TO_ADDR
// hackLimit := 3 ;
58431: LD_ADDR_EXP 38
58435: PUSH
58436: LD_INT 3
58438: ST_TO_ADDR
// hackDist := 12 ;
58439: LD_ADDR_EXP 39
58443: PUSH
58444: LD_INT 12
58446: ST_TO_ADDR
// hackCounter := [ ] ;
58447: LD_ADDR_EXP 40
58451: PUSH
58452: EMPTY
58453: ST_TO_ADDR
// end ;
58454: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58455: LD_EXP 35
58459: PUSH
58460: LD_INT 34
58462: PUSH
58463: LD_INT 99
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PPUSH
58470: CALL_OW 69
58474: AND
58475: IFFALSE 58728
58477: GO 58479
58479: DISABLE
58480: LD_INT 0
58482: PPUSH
58483: PPUSH
// begin enable ;
58484: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58485: LD_ADDR_VAR 0 1
58489: PUSH
58490: LD_INT 34
58492: PUSH
58493: LD_INT 99
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PPUSH
58500: CALL_OW 69
58504: PUSH
58505: FOR_IN
58506: IFFALSE 58726
// begin if not i in hackTanks then
58508: LD_VAR 0 1
58512: PUSH
58513: LD_EXP 36
58517: IN
58518: NOT
58519: IFFALSE 58602
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58521: LD_ADDR_EXP 36
58525: PUSH
58526: LD_EXP 36
58530: PPUSH
58531: LD_EXP 36
58535: PUSH
58536: LD_INT 1
58538: PLUS
58539: PPUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 1
58549: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58550: LD_ADDR_EXP 37
58554: PUSH
58555: LD_EXP 37
58559: PPUSH
58560: LD_EXP 37
58564: PUSH
58565: LD_INT 1
58567: PLUS
58568: PPUSH
58569: EMPTY
58570: PPUSH
58571: CALL_OW 1
58575: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58576: LD_ADDR_EXP 40
58580: PUSH
58581: LD_EXP 40
58585: PPUSH
58586: LD_EXP 40
58590: PUSH
58591: LD_INT 1
58593: PLUS
58594: PPUSH
58595: EMPTY
58596: PPUSH
58597: CALL_OW 1
58601: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58602: LD_VAR 0 1
58606: PPUSH
58607: CALL_OW 302
58611: NOT
58612: IFFALSE 58625
// begin HackUnlinkAll ( i ) ;
58614: LD_VAR 0 1
58618: PPUSH
58619: CALL 58731 0 1
// continue ;
58623: GO 58505
// end ; HackCheckCapturedStatus ( i ) ;
58625: LD_VAR 0 1
58629: PPUSH
58630: CALL 59174 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58634: LD_ADDR_VAR 0 2
58638: PUSH
58639: LD_INT 81
58641: PUSH
58642: LD_VAR 0 1
58646: PPUSH
58647: CALL_OW 255
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 33
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 91
58668: PUSH
58669: LD_VAR 0 1
58673: PUSH
58674: LD_EXP 39
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 50
58686: PUSH
58687: EMPTY
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: PPUSH
58696: CALL_OW 69
58700: ST_TO_ADDR
// if not tmp then
58701: LD_VAR 0 2
58705: NOT
58706: IFFALSE 58710
// continue ;
58708: GO 58505
// HackLink ( i , tmp ) ;
58710: LD_VAR 0 1
58714: PPUSH
58715: LD_VAR 0 2
58719: PPUSH
58720: CALL 58867 0 2
// end ;
58724: GO 58505
58726: POP
58727: POP
// end ;
58728: PPOPN 2
58730: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58731: LD_INT 0
58733: PPUSH
58734: PPUSH
58735: PPUSH
// if not hack in hackTanks then
58736: LD_VAR 0 1
58740: PUSH
58741: LD_EXP 36
58745: IN
58746: NOT
58747: IFFALSE 58751
// exit ;
58749: GO 58862
// index := GetElementIndex ( hackTanks , hack ) ;
58751: LD_ADDR_VAR 0 4
58755: PUSH
58756: LD_EXP 36
58760: PPUSH
58761: LD_VAR 0 1
58765: PPUSH
58766: CALL 20606 0 2
58770: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58771: LD_EXP 37
58775: PUSH
58776: LD_VAR 0 4
58780: ARRAY
58781: IFFALSE 58862
// begin for i in hackTanksCaptured [ index ] do
58783: LD_ADDR_VAR 0 3
58787: PUSH
58788: LD_EXP 37
58792: PUSH
58793: LD_VAR 0 4
58797: ARRAY
58798: PUSH
58799: FOR_IN
58800: IFFALSE 58826
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58802: LD_VAR 0 3
58806: PUSH
58807: LD_INT 1
58809: ARRAY
58810: PPUSH
58811: LD_VAR 0 3
58815: PUSH
58816: LD_INT 2
58818: ARRAY
58819: PPUSH
58820: CALL_OW 235
58824: GO 58799
58826: POP
58827: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58828: LD_ADDR_EXP 37
58832: PUSH
58833: LD_EXP 37
58837: PPUSH
58838: LD_VAR 0 4
58842: PPUSH
58843: EMPTY
58844: PPUSH
58845: CALL_OW 1
58849: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58850: LD_VAR 0 1
58854: PPUSH
58855: LD_INT 0
58857: PPUSH
58858: CALL_OW 505
// end ; end ;
58862: LD_VAR 0 2
58866: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58867: LD_INT 0
58869: PPUSH
58870: PPUSH
58871: PPUSH
// if not hack in hackTanks or not vehicles then
58872: LD_VAR 0 1
58876: PUSH
58877: LD_EXP 36
58881: IN
58882: NOT
58883: PUSH
58884: LD_VAR 0 2
58888: NOT
58889: OR
58890: IFFALSE 58894
// exit ;
58892: GO 59169
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58894: LD_ADDR_VAR 0 2
58898: PUSH
58899: LD_VAR 0 1
58903: PPUSH
58904: LD_VAR 0 2
58908: PPUSH
58909: LD_INT 1
58911: PPUSH
58912: LD_INT 1
58914: PPUSH
58915: CALL 21256 0 4
58919: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58920: LD_ADDR_VAR 0 5
58924: PUSH
58925: LD_EXP 36
58929: PPUSH
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL 20606 0 2
58939: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58940: LD_EXP 37
58944: PUSH
58945: LD_VAR 0 5
58949: ARRAY
58950: PUSH
58951: LD_EXP 38
58955: LESS
58956: IFFALSE 59145
// begin for i := 1 to vehicles do
58958: LD_ADDR_VAR 0 4
58962: PUSH
58963: DOUBLE
58964: LD_INT 1
58966: DEC
58967: ST_TO_ADDR
58968: LD_VAR 0 2
58972: PUSH
58973: FOR_TO
58974: IFFALSE 59143
// begin if hackTanksCaptured [ index ] = hackLimit then
58976: LD_EXP 37
58980: PUSH
58981: LD_VAR 0 5
58985: ARRAY
58986: PUSH
58987: LD_EXP 38
58991: EQUAL
58992: IFFALSE 58996
// break ;
58994: GO 59143
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58996: LD_ADDR_EXP 40
59000: PUSH
59001: LD_EXP 40
59005: PPUSH
59006: LD_VAR 0 5
59010: PPUSH
59011: LD_EXP 40
59015: PUSH
59016: LD_VAR 0 5
59020: ARRAY
59021: PUSH
59022: LD_INT 1
59024: PLUS
59025: PPUSH
59026: CALL_OW 1
59030: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59031: LD_ADDR_EXP 37
59035: PUSH
59036: LD_EXP 37
59040: PPUSH
59041: LD_VAR 0 5
59045: PUSH
59046: LD_EXP 37
59050: PUSH
59051: LD_VAR 0 5
59055: ARRAY
59056: PUSH
59057: LD_INT 1
59059: PLUS
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PPUSH
59065: LD_VAR 0 2
59069: PUSH
59070: LD_VAR 0 4
59074: ARRAY
59075: PUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_VAR 0 4
59085: ARRAY
59086: PPUSH
59087: CALL_OW 255
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PPUSH
59096: CALL 20821 0 3
59100: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59101: LD_VAR 0 2
59105: PUSH
59106: LD_VAR 0 4
59110: ARRAY
59111: PPUSH
59112: LD_VAR 0 1
59116: PPUSH
59117: CALL_OW 255
59121: PPUSH
59122: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59126: LD_VAR 0 2
59130: PUSH
59131: LD_VAR 0 4
59135: ARRAY
59136: PPUSH
59137: CALL_OW 141
// end ;
59141: GO 58973
59143: POP
59144: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59145: LD_VAR 0 1
59149: PPUSH
59150: LD_EXP 37
59154: PUSH
59155: LD_VAR 0 5
59159: ARRAY
59160: PUSH
59161: LD_INT 0
59163: PLUS
59164: PPUSH
59165: CALL_OW 505
// end ;
59169: LD_VAR 0 3
59173: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59174: LD_INT 0
59176: PPUSH
59177: PPUSH
59178: PPUSH
59179: PPUSH
// if not hack in hackTanks then
59180: LD_VAR 0 1
59184: PUSH
59185: LD_EXP 36
59189: IN
59190: NOT
59191: IFFALSE 59195
// exit ;
59193: GO 59435
// index := GetElementIndex ( hackTanks , hack ) ;
59195: LD_ADDR_VAR 0 4
59199: PUSH
59200: LD_EXP 36
59204: PPUSH
59205: LD_VAR 0 1
59209: PPUSH
59210: CALL 20606 0 2
59214: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59215: LD_ADDR_VAR 0 3
59219: PUSH
59220: DOUBLE
59221: LD_EXP 37
59225: PUSH
59226: LD_VAR 0 4
59230: ARRAY
59231: INC
59232: ST_TO_ADDR
59233: LD_INT 1
59235: PUSH
59236: FOR_DOWNTO
59237: IFFALSE 59409
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59239: LD_ADDR_VAR 0 5
59243: PUSH
59244: LD_EXP 37
59248: PUSH
59249: LD_VAR 0 4
59253: ARRAY
59254: PUSH
59255: LD_VAR 0 3
59259: ARRAY
59260: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59261: LD_VAR 0 5
59265: PUSH
59266: LD_INT 1
59268: ARRAY
59269: PPUSH
59270: CALL_OW 302
59274: NOT
59275: PUSH
59276: LD_VAR 0 5
59280: PUSH
59281: LD_INT 1
59283: ARRAY
59284: PPUSH
59285: CALL_OW 255
59289: PUSH
59290: LD_VAR 0 1
59294: PPUSH
59295: CALL_OW 255
59299: NONEQUAL
59300: OR
59301: IFFALSE 59407
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59303: LD_VAR 0 5
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PPUSH
59312: CALL_OW 305
59316: PUSH
59317: LD_VAR 0 5
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PPUSH
59326: CALL_OW 255
59330: PUSH
59331: LD_VAR 0 1
59335: PPUSH
59336: CALL_OW 255
59340: EQUAL
59341: AND
59342: IFFALSE 59366
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59344: LD_VAR 0 5
59348: PUSH
59349: LD_INT 1
59351: ARRAY
59352: PPUSH
59353: LD_VAR 0 5
59357: PUSH
59358: LD_INT 2
59360: ARRAY
59361: PPUSH
59362: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59366: LD_ADDR_EXP 37
59370: PUSH
59371: LD_EXP 37
59375: PPUSH
59376: LD_VAR 0 4
59380: PPUSH
59381: LD_EXP 37
59385: PUSH
59386: LD_VAR 0 4
59390: ARRAY
59391: PPUSH
59392: LD_VAR 0 3
59396: PPUSH
59397: CALL_OW 3
59401: PPUSH
59402: CALL_OW 1
59406: ST_TO_ADDR
// end ; end ;
59407: GO 59236
59409: POP
59410: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_EXP 37
59420: PUSH
59421: LD_VAR 0 4
59425: ARRAY
59426: PUSH
59427: LD_INT 0
59429: PLUS
59430: PPUSH
59431: CALL_OW 505
// end ;
59435: LD_VAR 0 2
59439: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59440: LD_INT 0
59442: PPUSH
59443: PPUSH
59444: PPUSH
59445: PPUSH
// if not hack in hackTanks then
59446: LD_VAR 0 1
59450: PUSH
59451: LD_EXP 36
59455: IN
59456: NOT
59457: IFFALSE 59461
// exit ;
59459: GO 59546
// index := GetElementIndex ( hackTanks , hack ) ;
59461: LD_ADDR_VAR 0 5
59465: PUSH
59466: LD_EXP 36
59470: PPUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL 20606 0 2
59480: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59481: LD_ADDR_VAR 0 4
59485: PUSH
59486: DOUBLE
59487: LD_INT 1
59489: DEC
59490: ST_TO_ADDR
59491: LD_EXP 37
59495: PUSH
59496: LD_VAR 0 5
59500: ARRAY
59501: PUSH
59502: FOR_TO
59503: IFFALSE 59544
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59505: LD_EXP 37
59509: PUSH
59510: LD_VAR 0 5
59514: ARRAY
59515: PUSH
59516: LD_VAR 0 4
59520: ARRAY
59521: PUSH
59522: LD_INT 1
59524: ARRAY
59525: PUSH
59526: LD_VAR 0 2
59530: EQUAL
59531: IFFALSE 59542
// KillUnit ( vehicle ) ;
59533: LD_VAR 0 2
59537: PPUSH
59538: CALL_OW 66
59542: GO 59502
59544: POP
59545: POP
// end ;
59546: LD_VAR 0 3
59550: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59551: LD_EXP 41
59555: NOT
59556: IFFALSE 59591
59558: GO 59560
59560: DISABLE
// begin initMiner := true ;
59561: LD_ADDR_EXP 41
59565: PUSH
59566: LD_INT 1
59568: ST_TO_ADDR
// minersList := [ ] ;
59569: LD_ADDR_EXP 42
59573: PUSH
59574: EMPTY
59575: ST_TO_ADDR
// minerMinesList := [ ] ;
59576: LD_ADDR_EXP 43
59580: PUSH
59581: EMPTY
59582: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59583: LD_ADDR_EXP 44
59587: PUSH
59588: LD_INT 5
59590: ST_TO_ADDR
// end ;
59591: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59592: LD_EXP 41
59596: PUSH
59597: LD_INT 34
59599: PUSH
59600: LD_INT 81
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PPUSH
59607: CALL_OW 69
59611: AND
59612: IFFALSE 60073
59614: GO 59616
59616: DISABLE
59617: LD_INT 0
59619: PPUSH
59620: PPUSH
59621: PPUSH
59622: PPUSH
// begin enable ;
59623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59624: LD_ADDR_VAR 0 1
59628: PUSH
59629: LD_INT 34
59631: PUSH
59632: LD_INT 81
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PPUSH
59639: CALL_OW 69
59643: PUSH
59644: FOR_IN
59645: IFFALSE 59717
// begin if not i in minersList then
59647: LD_VAR 0 1
59651: PUSH
59652: LD_EXP 42
59656: IN
59657: NOT
59658: IFFALSE 59715
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59660: LD_ADDR_EXP 42
59664: PUSH
59665: LD_EXP 42
59669: PPUSH
59670: LD_EXP 42
59674: PUSH
59675: LD_INT 1
59677: PLUS
59678: PPUSH
59679: LD_VAR 0 1
59683: PPUSH
59684: CALL_OW 1
59688: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59689: LD_ADDR_EXP 43
59693: PUSH
59694: LD_EXP 43
59698: PPUSH
59699: LD_EXP 43
59703: PUSH
59704: LD_INT 1
59706: PLUS
59707: PPUSH
59708: EMPTY
59709: PPUSH
59710: CALL_OW 1
59714: ST_TO_ADDR
// end end ;
59715: GO 59644
59717: POP
59718: POP
// for i := minerMinesList downto 1 do
59719: LD_ADDR_VAR 0 1
59723: PUSH
59724: DOUBLE
59725: LD_EXP 43
59729: INC
59730: ST_TO_ADDR
59731: LD_INT 1
59733: PUSH
59734: FOR_DOWNTO
59735: IFFALSE 60071
// begin if IsLive ( minersList [ i ] ) then
59737: LD_EXP 42
59741: PUSH
59742: LD_VAR 0 1
59746: ARRAY
59747: PPUSH
59748: CALL_OW 300
59752: IFFALSE 59780
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59754: LD_EXP 42
59758: PUSH
59759: LD_VAR 0 1
59763: ARRAY
59764: PPUSH
59765: LD_EXP 43
59769: PUSH
59770: LD_VAR 0 1
59774: ARRAY
59775: PPUSH
59776: CALL_OW 505
// if not minerMinesList [ i ] then
59780: LD_EXP 43
59784: PUSH
59785: LD_VAR 0 1
59789: ARRAY
59790: NOT
59791: IFFALSE 59795
// continue ;
59793: GO 59734
// for j := minerMinesList [ i ] downto 1 do
59795: LD_ADDR_VAR 0 2
59799: PUSH
59800: DOUBLE
59801: LD_EXP 43
59805: PUSH
59806: LD_VAR 0 1
59810: ARRAY
59811: INC
59812: ST_TO_ADDR
59813: LD_INT 1
59815: PUSH
59816: FOR_DOWNTO
59817: IFFALSE 60067
// begin side := GetSide ( minersList [ i ] ) ;
59819: LD_ADDR_VAR 0 3
59823: PUSH
59824: LD_EXP 42
59828: PUSH
59829: LD_VAR 0 1
59833: ARRAY
59834: PPUSH
59835: CALL_OW 255
59839: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59840: LD_ADDR_VAR 0 4
59844: PUSH
59845: LD_EXP 43
59849: PUSH
59850: LD_VAR 0 1
59854: ARRAY
59855: PUSH
59856: LD_VAR 0 2
59860: ARRAY
59861: PUSH
59862: LD_INT 1
59864: ARRAY
59865: PPUSH
59866: LD_EXP 43
59870: PUSH
59871: LD_VAR 0 1
59875: ARRAY
59876: PUSH
59877: LD_VAR 0 2
59881: ARRAY
59882: PUSH
59883: LD_INT 2
59885: ARRAY
59886: PPUSH
59887: CALL_OW 428
59891: ST_TO_ADDR
// if not tmp then
59892: LD_VAR 0 4
59896: NOT
59897: IFFALSE 59901
// continue ;
59899: GO 59816
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59901: LD_VAR 0 4
59905: PUSH
59906: LD_INT 81
59908: PUSH
59909: LD_VAR 0 3
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PPUSH
59918: CALL_OW 69
59922: IN
59923: PUSH
59924: LD_EXP 43
59928: PUSH
59929: LD_VAR 0 1
59933: ARRAY
59934: PUSH
59935: LD_VAR 0 2
59939: ARRAY
59940: PUSH
59941: LD_INT 1
59943: ARRAY
59944: PPUSH
59945: LD_EXP 43
59949: PUSH
59950: LD_VAR 0 1
59954: ARRAY
59955: PUSH
59956: LD_VAR 0 2
59960: ARRAY
59961: PUSH
59962: LD_INT 2
59964: ARRAY
59965: PPUSH
59966: CALL_OW 458
59970: AND
59971: IFFALSE 60065
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59973: LD_EXP 43
59977: PUSH
59978: LD_VAR 0 1
59982: ARRAY
59983: PUSH
59984: LD_VAR 0 2
59988: ARRAY
59989: PUSH
59990: LD_INT 1
59992: ARRAY
59993: PPUSH
59994: LD_EXP 43
59998: PUSH
59999: LD_VAR 0 1
60003: ARRAY
60004: PUSH
60005: LD_VAR 0 2
60009: ARRAY
60010: PUSH
60011: LD_INT 2
60013: ARRAY
60014: PPUSH
60015: LD_VAR 0 3
60019: PPUSH
60020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60024: LD_ADDR_EXP 43
60028: PUSH
60029: LD_EXP 43
60033: PPUSH
60034: LD_VAR 0 1
60038: PPUSH
60039: LD_EXP 43
60043: PUSH
60044: LD_VAR 0 1
60048: ARRAY
60049: PPUSH
60050: LD_VAR 0 2
60054: PPUSH
60055: CALL_OW 3
60059: PPUSH
60060: CALL_OW 1
60064: ST_TO_ADDR
// end ; end ;
60065: GO 59816
60067: POP
60068: POP
// end ;
60069: GO 59734
60071: POP
60072: POP
// end ;
60073: PPOPN 4
60075: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60076: LD_INT 0
60078: PPUSH
60079: PPUSH
// result := false ;
60080: LD_ADDR_VAR 0 4
60084: PUSH
60085: LD_INT 0
60087: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60088: LD_VAR 0 1
60092: PPUSH
60093: CALL_OW 264
60097: PUSH
60098: LD_INT 81
60100: EQUAL
60101: NOT
60102: IFFALSE 60106
// exit ;
60104: GO 60346
// index := GetElementIndex ( minersList , unit ) ;
60106: LD_ADDR_VAR 0 5
60110: PUSH
60111: LD_EXP 42
60115: PPUSH
60116: LD_VAR 0 1
60120: PPUSH
60121: CALL 20606 0 2
60125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60126: LD_EXP 43
60130: PUSH
60131: LD_VAR 0 5
60135: ARRAY
60136: PUSH
60137: LD_EXP 44
60141: GREATEREQUAL
60142: IFFALSE 60146
// exit ;
60144: GO 60346
// ComMoveXY ( unit , x , y ) ;
60146: LD_VAR 0 1
60150: PPUSH
60151: LD_VAR 0 2
60155: PPUSH
60156: LD_VAR 0 3
60160: PPUSH
60161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60165: LD_INT 35
60167: PPUSH
60168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60172: LD_VAR 0 1
60176: PPUSH
60177: LD_VAR 0 2
60181: PPUSH
60182: LD_VAR 0 3
60186: PPUSH
60187: CALL 51961 0 3
60191: NOT
60192: PUSH
60193: LD_VAR 0 1
60197: PPUSH
60198: CALL_OW 314
60202: AND
60203: IFFALSE 60207
// exit ;
60205: GO 60346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60207: LD_VAR 0 2
60211: PPUSH
60212: LD_VAR 0 3
60216: PPUSH
60217: CALL_OW 428
60221: PUSH
60222: LD_VAR 0 1
60226: EQUAL
60227: PUSH
60228: LD_VAR 0 1
60232: PPUSH
60233: CALL_OW 314
60237: NOT
60238: AND
60239: IFFALSE 60165
// PlaySoundXY ( x , y , PlantMine ) ;
60241: LD_VAR 0 2
60245: PPUSH
60246: LD_VAR 0 3
60250: PPUSH
60251: LD_STRING PlantMine
60253: PPUSH
60254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60258: LD_VAR 0 2
60262: PPUSH
60263: LD_VAR 0 3
60267: PPUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: CALL_OW 255
60277: PPUSH
60278: LD_INT 0
60280: PPUSH
60281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60285: LD_ADDR_EXP 43
60289: PUSH
60290: LD_EXP 43
60294: PPUSH
60295: LD_VAR 0 5
60299: PUSH
60300: LD_EXP 43
60304: PUSH
60305: LD_VAR 0 5
60309: ARRAY
60310: PUSH
60311: LD_INT 1
60313: PLUS
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PPUSH
60319: LD_VAR 0 2
60323: PUSH
60324: LD_VAR 0 3
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PPUSH
60333: CALL 20821 0 3
60337: ST_TO_ADDR
// result := true ;
60338: LD_ADDR_VAR 0 4
60342: PUSH
60343: LD_INT 1
60345: ST_TO_ADDR
// end ;
60346: LD_VAR 0 4
60350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60351: LD_INT 0
60353: PPUSH
60354: PPUSH
60355: PPUSH
// if not unit in minersList then
60356: LD_VAR 0 1
60360: PUSH
60361: LD_EXP 42
60365: IN
60366: NOT
60367: IFFALSE 60371
// exit ;
60369: GO 60763
// index := GetElementIndex ( minersList , unit ) ;
60371: LD_ADDR_VAR 0 6
60375: PUSH
60376: LD_EXP 42
60380: PPUSH
60381: LD_VAR 0 1
60385: PPUSH
60386: CALL 20606 0 2
60390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60391: LD_ADDR_VAR 0 5
60395: PUSH
60396: DOUBLE
60397: LD_EXP 43
60401: PUSH
60402: LD_VAR 0 6
60406: ARRAY
60407: INC
60408: ST_TO_ADDR
60409: LD_INT 1
60411: PUSH
60412: FOR_DOWNTO
60413: IFFALSE 60574
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60415: LD_EXP 43
60419: PUSH
60420: LD_VAR 0 6
60424: ARRAY
60425: PUSH
60426: LD_VAR 0 5
60430: ARRAY
60431: PUSH
60432: LD_INT 1
60434: ARRAY
60435: PUSH
60436: LD_VAR 0 2
60440: EQUAL
60441: PUSH
60442: LD_EXP 43
60446: PUSH
60447: LD_VAR 0 6
60451: ARRAY
60452: PUSH
60453: LD_VAR 0 5
60457: ARRAY
60458: PUSH
60459: LD_INT 2
60461: ARRAY
60462: PUSH
60463: LD_VAR 0 3
60467: EQUAL
60468: AND
60469: IFFALSE 60572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60471: LD_EXP 43
60475: PUSH
60476: LD_VAR 0 6
60480: ARRAY
60481: PUSH
60482: LD_VAR 0 5
60486: ARRAY
60487: PUSH
60488: LD_INT 1
60490: ARRAY
60491: PPUSH
60492: LD_EXP 43
60496: PUSH
60497: LD_VAR 0 6
60501: ARRAY
60502: PUSH
60503: LD_VAR 0 5
60507: ARRAY
60508: PUSH
60509: LD_INT 2
60511: ARRAY
60512: PPUSH
60513: LD_VAR 0 1
60517: PPUSH
60518: CALL_OW 255
60522: PPUSH
60523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60527: LD_ADDR_EXP 43
60531: PUSH
60532: LD_EXP 43
60536: PPUSH
60537: LD_VAR 0 6
60541: PPUSH
60542: LD_EXP 43
60546: PUSH
60547: LD_VAR 0 6
60551: ARRAY
60552: PPUSH
60553: LD_VAR 0 5
60557: PPUSH
60558: CALL_OW 3
60562: PPUSH
60563: CALL_OW 1
60567: ST_TO_ADDR
// exit ;
60568: POP
60569: POP
60570: GO 60763
// end ; end ;
60572: GO 60412
60574: POP
60575: POP
// for i := minerMinesList [ index ] downto 1 do
60576: LD_ADDR_VAR 0 5
60580: PUSH
60581: DOUBLE
60582: LD_EXP 43
60586: PUSH
60587: LD_VAR 0 6
60591: ARRAY
60592: INC
60593: ST_TO_ADDR
60594: LD_INT 1
60596: PUSH
60597: FOR_DOWNTO
60598: IFFALSE 60761
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60600: LD_EXP 43
60604: PUSH
60605: LD_VAR 0 6
60609: ARRAY
60610: PUSH
60611: LD_VAR 0 5
60615: ARRAY
60616: PUSH
60617: LD_INT 1
60619: ARRAY
60620: PPUSH
60621: LD_EXP 43
60625: PUSH
60626: LD_VAR 0 6
60630: ARRAY
60631: PUSH
60632: LD_VAR 0 5
60636: ARRAY
60637: PUSH
60638: LD_INT 2
60640: ARRAY
60641: PPUSH
60642: LD_VAR 0 2
60646: PPUSH
60647: LD_VAR 0 3
60651: PPUSH
60652: CALL_OW 298
60656: PUSH
60657: LD_INT 6
60659: LESS
60660: IFFALSE 60759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60662: LD_EXP 43
60666: PUSH
60667: LD_VAR 0 6
60671: ARRAY
60672: PUSH
60673: LD_VAR 0 5
60677: ARRAY
60678: PUSH
60679: LD_INT 1
60681: ARRAY
60682: PPUSH
60683: LD_EXP 43
60687: PUSH
60688: LD_VAR 0 6
60692: ARRAY
60693: PUSH
60694: LD_VAR 0 5
60698: ARRAY
60699: PUSH
60700: LD_INT 2
60702: ARRAY
60703: PPUSH
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL_OW 255
60713: PPUSH
60714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60718: LD_ADDR_EXP 43
60722: PUSH
60723: LD_EXP 43
60727: PPUSH
60728: LD_VAR 0 6
60732: PPUSH
60733: LD_EXP 43
60737: PUSH
60738: LD_VAR 0 6
60742: ARRAY
60743: PPUSH
60744: LD_VAR 0 5
60748: PPUSH
60749: CALL_OW 3
60753: PPUSH
60754: CALL_OW 1
60758: ST_TO_ADDR
// end ; end ;
60759: GO 60597
60761: POP
60762: POP
// end ;
60763: LD_VAR 0 4
60767: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60768: LD_INT 0
60770: PPUSH
60771: PPUSH
60772: PPUSH
60773: PPUSH
60774: PPUSH
60775: PPUSH
60776: PPUSH
60777: PPUSH
60778: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60779: LD_VAR 0 1
60783: PPUSH
60784: CALL_OW 264
60788: PUSH
60789: LD_INT 81
60791: EQUAL
60792: NOT
60793: PUSH
60794: LD_VAR 0 1
60798: PUSH
60799: LD_EXP 42
60803: IN
60804: NOT
60805: OR
60806: IFFALSE 60810
// exit ;
60808: GO 61132
// index := GetElementIndex ( minersList , unit ) ;
60810: LD_ADDR_VAR 0 6
60814: PUSH
60815: LD_EXP 42
60819: PPUSH
60820: LD_VAR 0 1
60824: PPUSH
60825: CALL 20606 0 2
60829: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60830: LD_ADDR_VAR 0 8
60834: PUSH
60835: LD_EXP 44
60839: PUSH
60840: LD_EXP 43
60844: PUSH
60845: LD_VAR 0 6
60849: ARRAY
60850: MINUS
60851: ST_TO_ADDR
// if not minesFreeAmount then
60852: LD_VAR 0 8
60856: NOT
60857: IFFALSE 60861
// exit ;
60859: GO 61132
// tmp := [ ] ;
60861: LD_ADDR_VAR 0 7
60865: PUSH
60866: EMPTY
60867: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60868: LD_ADDR_VAR 0 5
60872: PUSH
60873: DOUBLE
60874: LD_INT 1
60876: DEC
60877: ST_TO_ADDR
60878: LD_VAR 0 8
60882: PUSH
60883: FOR_TO
60884: IFFALSE 61079
// begin _d := rand ( 0 , 5 ) ;
60886: LD_ADDR_VAR 0 11
60890: PUSH
60891: LD_INT 0
60893: PPUSH
60894: LD_INT 5
60896: PPUSH
60897: CALL_OW 12
60901: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60902: LD_ADDR_VAR 0 12
60906: PUSH
60907: LD_INT 2
60909: PPUSH
60910: LD_INT 6
60912: PPUSH
60913: CALL_OW 12
60917: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60918: LD_ADDR_VAR 0 9
60922: PUSH
60923: LD_VAR 0 2
60927: PPUSH
60928: LD_VAR 0 11
60932: PPUSH
60933: LD_VAR 0 12
60937: PPUSH
60938: CALL_OW 272
60942: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60943: LD_ADDR_VAR 0 10
60947: PUSH
60948: LD_VAR 0 3
60952: PPUSH
60953: LD_VAR 0 11
60957: PPUSH
60958: LD_VAR 0 12
60962: PPUSH
60963: CALL_OW 273
60967: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60968: LD_VAR 0 9
60972: PPUSH
60973: LD_VAR 0 10
60977: PPUSH
60978: CALL_OW 488
60982: PUSH
60983: LD_VAR 0 9
60987: PUSH
60988: LD_VAR 0 10
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_VAR 0 7
61001: IN
61002: NOT
61003: AND
61004: PUSH
61005: LD_VAR 0 9
61009: PPUSH
61010: LD_VAR 0 10
61014: PPUSH
61015: CALL_OW 458
61019: NOT
61020: AND
61021: IFFALSE 61063
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61023: LD_ADDR_VAR 0 7
61027: PUSH
61028: LD_VAR 0 7
61032: PPUSH
61033: LD_VAR 0 7
61037: PUSH
61038: LD_INT 1
61040: PLUS
61041: PPUSH
61042: LD_VAR 0 9
61046: PUSH
61047: LD_VAR 0 10
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PPUSH
61056: CALL_OW 1
61060: ST_TO_ADDR
61061: GO 61077
// i := i - 1 ;
61063: LD_ADDR_VAR 0 5
61067: PUSH
61068: LD_VAR 0 5
61072: PUSH
61073: LD_INT 1
61075: MINUS
61076: ST_TO_ADDR
// end ;
61077: GO 60883
61079: POP
61080: POP
// for i in tmp do
61081: LD_ADDR_VAR 0 5
61085: PUSH
61086: LD_VAR 0 7
61090: PUSH
61091: FOR_IN
61092: IFFALSE 61130
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61094: LD_VAR 0 1
61098: PPUSH
61099: LD_VAR 0 5
61103: PUSH
61104: LD_INT 1
61106: ARRAY
61107: PPUSH
61108: LD_VAR 0 5
61112: PUSH
61113: LD_INT 2
61115: ARRAY
61116: PPUSH
61117: CALL 60076 0 3
61121: NOT
61122: IFFALSE 61128
// exit ;
61124: POP
61125: POP
61126: GO 61132
61128: GO 61091
61130: POP
61131: POP
// end ;
61132: LD_VAR 0 4
61136: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61137: LD_INT 0
61139: PPUSH
61140: PPUSH
61141: PPUSH
61142: PPUSH
61143: PPUSH
61144: PPUSH
61145: PPUSH
// if not GetClass ( unit ) = class_sniper then
61146: LD_VAR 0 1
61150: PPUSH
61151: CALL_OW 257
61155: PUSH
61156: LD_INT 5
61158: EQUAL
61159: NOT
61160: IFFALSE 61164
// exit ;
61162: GO 61552
// dist := 8 ;
61164: LD_ADDR_VAR 0 5
61168: PUSH
61169: LD_INT 8
61171: ST_TO_ADDR
// viewRange := 12 ;
61172: LD_ADDR_VAR 0 7
61176: PUSH
61177: LD_INT 12
61179: ST_TO_ADDR
// side := GetSide ( unit ) ;
61180: LD_ADDR_VAR 0 6
61184: PUSH
61185: LD_VAR 0 1
61189: PPUSH
61190: CALL_OW 255
61194: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61195: LD_INT 61
61197: PPUSH
61198: LD_VAR 0 6
61202: PPUSH
61203: CALL_OW 321
61207: PUSH
61208: LD_INT 2
61210: EQUAL
61211: IFFALSE 61221
// viewRange := 16 ;
61213: LD_ADDR_VAR 0 7
61217: PUSH
61218: LD_INT 16
61220: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61221: LD_VAR 0 1
61225: PPUSH
61226: LD_VAR 0 2
61230: PPUSH
61231: LD_VAR 0 3
61235: PPUSH
61236: CALL_OW 297
61240: PUSH
61241: LD_VAR 0 5
61245: GREATER
61246: IFFALSE 61325
// begin ComMoveXY ( unit , x , y ) ;
61248: LD_VAR 0 1
61252: PPUSH
61253: LD_VAR 0 2
61257: PPUSH
61258: LD_VAR 0 3
61262: PPUSH
61263: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61267: LD_INT 35
61269: PPUSH
61270: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61274: LD_VAR 0 1
61278: PPUSH
61279: LD_VAR 0 2
61283: PPUSH
61284: LD_VAR 0 3
61288: PPUSH
61289: CALL 51961 0 3
61293: NOT
61294: IFFALSE 61298
// exit ;
61296: GO 61552
// until GetDistUnitXY ( unit , x , y ) < dist ;
61298: LD_VAR 0 1
61302: PPUSH
61303: LD_VAR 0 2
61307: PPUSH
61308: LD_VAR 0 3
61312: PPUSH
61313: CALL_OW 297
61317: PUSH
61318: LD_VAR 0 5
61322: LESS
61323: IFFALSE 61267
// end ; ComTurnXY ( unit , x , y ) ;
61325: LD_VAR 0 1
61329: PPUSH
61330: LD_VAR 0 2
61334: PPUSH
61335: LD_VAR 0 3
61339: PPUSH
61340: CALL_OW 118
// wait ( 5 ) ;
61344: LD_INT 5
61346: PPUSH
61347: CALL_OW 67
// _d := GetDir ( unit ) ;
61351: LD_ADDR_VAR 0 10
61355: PUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 254
61365: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61366: LD_ADDR_VAR 0 8
61370: PUSH
61371: LD_VAR 0 1
61375: PPUSH
61376: CALL_OW 250
61380: PPUSH
61381: LD_VAR 0 10
61385: PPUSH
61386: LD_VAR 0 5
61390: PPUSH
61391: CALL_OW 272
61395: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61396: LD_ADDR_VAR 0 9
61400: PUSH
61401: LD_VAR 0 1
61405: PPUSH
61406: CALL_OW 251
61410: PPUSH
61411: LD_VAR 0 10
61415: PPUSH
61416: LD_VAR 0 5
61420: PPUSH
61421: CALL_OW 273
61425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61426: LD_VAR 0 8
61430: PPUSH
61431: LD_VAR 0 9
61435: PPUSH
61436: CALL_OW 488
61440: NOT
61441: IFFALSE 61445
// exit ;
61443: GO 61552
// ComAnimCustom ( unit , 1 ) ;
61445: LD_VAR 0 1
61449: PPUSH
61450: LD_INT 1
61452: PPUSH
61453: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61457: LD_VAR 0 8
61461: PPUSH
61462: LD_VAR 0 9
61466: PPUSH
61467: LD_VAR 0 6
61471: PPUSH
61472: LD_VAR 0 7
61476: PPUSH
61477: CALL_OW 330
// repeat wait ( 1 ) ;
61481: LD_INT 1
61483: PPUSH
61484: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61488: LD_VAR 0 1
61492: PPUSH
61493: CALL_OW 316
61497: PUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: CALL_OW 314
61507: OR
61508: PUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: CALL_OW 302
61518: NOT
61519: OR
61520: PUSH
61521: LD_VAR 0 1
61525: PPUSH
61526: CALL_OW 301
61530: OR
61531: IFFALSE 61481
// RemoveSeeing ( _x , _y , side ) ;
61533: LD_VAR 0 8
61537: PPUSH
61538: LD_VAR 0 9
61542: PPUSH
61543: LD_VAR 0 6
61547: PPUSH
61548: CALL_OW 331
// end ; end_of_file
61552: LD_VAR 0 4
61556: RET
// export globalGameSaveCounter ; every 0 0$1 do
61557: GO 61559
61559: DISABLE
// begin enable ;
61560: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61561: LD_STRING updateTimer(
61563: PUSH
61564: LD_OWVAR 1
61568: STR
61569: PUSH
61570: LD_STRING );
61572: STR
61573: PPUSH
61574: CALL_OW 559
// end ;
61578: END
// every 0 0$1 do
61579: GO 61581
61581: DISABLE
// begin globalGameSaveCounter := 0 ;
61582: LD_ADDR_EXP 45
61586: PUSH
61587: LD_INT 0
61589: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61590: LD_STRING setGameSaveCounter(0)
61592: PPUSH
61593: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61597: LD_STRING initStreamRollete();
61599: PPUSH
61600: CALL_OW 559
// InitStreamMode ;
61604: CALL 62930 0 0
// DefineStreamItems ( false ) ;
61608: LD_INT 0
61610: PPUSH
61611: CALL 63394 0 1
// end ;
61615: END
// export function SOS_MapStart ( ) ; begin
61616: LD_INT 0
61618: PPUSH
// if streamModeActive then
61619: LD_EXP 46
61623: IFFALSE 61632
// DefineStreamItems ( true ) ;
61625: LD_INT 1
61627: PPUSH
61628: CALL 63394 0 1
// UpdateLuaVariables ( ) ;
61632: CALL 61649 0 0
// UpdateFactoryWaypoints ( ) ;
61636: CALL 76255 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61640: CALL 76512 0 0
// end ;
61644: LD_VAR 0 1
61648: RET
// function UpdateLuaVariables ( ) ; begin
61649: LD_INT 0
61651: PPUSH
// if globalGameSaveCounter then
61652: LD_EXP 45
61656: IFFALSE 61690
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61658: LD_ADDR_EXP 45
61662: PUSH
61663: LD_EXP 45
61667: PPUSH
61668: CALL 54513 0 1
61672: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61673: LD_STRING setGameSaveCounter(
61675: PUSH
61676: LD_EXP 45
61680: STR
61681: PUSH
61682: LD_STRING )
61684: STR
61685: PPUSH
61686: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61690: LD_STRING setGameDifficulty(
61692: PUSH
61693: LD_OWVAR 67
61697: STR
61698: PUSH
61699: LD_STRING )
61701: STR
61702: PPUSH
61703: CALL_OW 559
// end ;
61707: LD_VAR 0 1
61711: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61712: LD_INT 0
61714: PPUSH
// if p2 = stream_mode then
61715: LD_VAR 0 2
61719: PUSH
61720: LD_INT 100
61722: EQUAL
61723: IFFALSE 62726
// begin if not StreamModeActive then
61725: LD_EXP 46
61729: NOT
61730: IFFALSE 61740
// StreamModeActive := true ;
61732: LD_ADDR_EXP 46
61736: PUSH
61737: LD_INT 1
61739: ST_TO_ADDR
// if p3 = 0 then
61740: LD_VAR 0 3
61744: PUSH
61745: LD_INT 0
61747: EQUAL
61748: IFFALSE 61754
// InitStreamMode ;
61750: CALL 62930 0 0
// if p3 = 1 then
61754: LD_VAR 0 3
61758: PUSH
61759: LD_INT 1
61761: EQUAL
61762: IFFALSE 61772
// sRocket := true ;
61764: LD_ADDR_EXP 51
61768: PUSH
61769: LD_INT 1
61771: ST_TO_ADDR
// if p3 = 2 then
61772: LD_VAR 0 3
61776: PUSH
61777: LD_INT 2
61779: EQUAL
61780: IFFALSE 61790
// sSpeed := true ;
61782: LD_ADDR_EXP 50
61786: PUSH
61787: LD_INT 1
61789: ST_TO_ADDR
// if p3 = 3 then
61790: LD_VAR 0 3
61794: PUSH
61795: LD_INT 3
61797: EQUAL
61798: IFFALSE 61808
// sEngine := true ;
61800: LD_ADDR_EXP 52
61804: PUSH
61805: LD_INT 1
61807: ST_TO_ADDR
// if p3 = 4 then
61808: LD_VAR 0 3
61812: PUSH
61813: LD_INT 4
61815: EQUAL
61816: IFFALSE 61826
// sSpec := true ;
61818: LD_ADDR_EXP 49
61822: PUSH
61823: LD_INT 1
61825: ST_TO_ADDR
// if p3 = 5 then
61826: LD_VAR 0 3
61830: PUSH
61831: LD_INT 5
61833: EQUAL
61834: IFFALSE 61844
// sLevel := true ;
61836: LD_ADDR_EXP 53
61840: PUSH
61841: LD_INT 1
61843: ST_TO_ADDR
// if p3 = 6 then
61844: LD_VAR 0 3
61848: PUSH
61849: LD_INT 6
61851: EQUAL
61852: IFFALSE 61862
// sArmoury := true ;
61854: LD_ADDR_EXP 54
61858: PUSH
61859: LD_INT 1
61861: ST_TO_ADDR
// if p3 = 7 then
61862: LD_VAR 0 3
61866: PUSH
61867: LD_INT 7
61869: EQUAL
61870: IFFALSE 61880
// sRadar := true ;
61872: LD_ADDR_EXP 55
61876: PUSH
61877: LD_INT 1
61879: ST_TO_ADDR
// if p3 = 8 then
61880: LD_VAR 0 3
61884: PUSH
61885: LD_INT 8
61887: EQUAL
61888: IFFALSE 61898
// sBunker := true ;
61890: LD_ADDR_EXP 56
61894: PUSH
61895: LD_INT 1
61897: ST_TO_ADDR
// if p3 = 9 then
61898: LD_VAR 0 3
61902: PUSH
61903: LD_INT 9
61905: EQUAL
61906: IFFALSE 61916
// sHack := true ;
61908: LD_ADDR_EXP 57
61912: PUSH
61913: LD_INT 1
61915: ST_TO_ADDR
// if p3 = 10 then
61916: LD_VAR 0 3
61920: PUSH
61921: LD_INT 10
61923: EQUAL
61924: IFFALSE 61934
// sFire := true ;
61926: LD_ADDR_EXP 58
61930: PUSH
61931: LD_INT 1
61933: ST_TO_ADDR
// if p3 = 11 then
61934: LD_VAR 0 3
61938: PUSH
61939: LD_INT 11
61941: EQUAL
61942: IFFALSE 61952
// sRefresh := true ;
61944: LD_ADDR_EXP 59
61948: PUSH
61949: LD_INT 1
61951: ST_TO_ADDR
// if p3 = 12 then
61952: LD_VAR 0 3
61956: PUSH
61957: LD_INT 12
61959: EQUAL
61960: IFFALSE 61970
// sExp := true ;
61962: LD_ADDR_EXP 60
61966: PUSH
61967: LD_INT 1
61969: ST_TO_ADDR
// if p3 = 13 then
61970: LD_VAR 0 3
61974: PUSH
61975: LD_INT 13
61977: EQUAL
61978: IFFALSE 61988
// sDepot := true ;
61980: LD_ADDR_EXP 61
61984: PUSH
61985: LD_INT 1
61987: ST_TO_ADDR
// if p3 = 14 then
61988: LD_VAR 0 3
61992: PUSH
61993: LD_INT 14
61995: EQUAL
61996: IFFALSE 62006
// sFlag := true ;
61998: LD_ADDR_EXP 62
62002: PUSH
62003: LD_INT 1
62005: ST_TO_ADDR
// if p3 = 15 then
62006: LD_VAR 0 3
62010: PUSH
62011: LD_INT 15
62013: EQUAL
62014: IFFALSE 62024
// sKamikadze := true ;
62016: LD_ADDR_EXP 70
62020: PUSH
62021: LD_INT 1
62023: ST_TO_ADDR
// if p3 = 16 then
62024: LD_VAR 0 3
62028: PUSH
62029: LD_INT 16
62031: EQUAL
62032: IFFALSE 62042
// sTroll := true ;
62034: LD_ADDR_EXP 71
62038: PUSH
62039: LD_INT 1
62041: ST_TO_ADDR
// if p3 = 17 then
62042: LD_VAR 0 3
62046: PUSH
62047: LD_INT 17
62049: EQUAL
62050: IFFALSE 62060
// sSlow := true ;
62052: LD_ADDR_EXP 72
62056: PUSH
62057: LD_INT 1
62059: ST_TO_ADDR
// if p3 = 18 then
62060: LD_VAR 0 3
62064: PUSH
62065: LD_INT 18
62067: EQUAL
62068: IFFALSE 62078
// sLack := true ;
62070: LD_ADDR_EXP 73
62074: PUSH
62075: LD_INT 1
62077: ST_TO_ADDR
// if p3 = 19 then
62078: LD_VAR 0 3
62082: PUSH
62083: LD_INT 19
62085: EQUAL
62086: IFFALSE 62096
// sTank := true ;
62088: LD_ADDR_EXP 75
62092: PUSH
62093: LD_INT 1
62095: ST_TO_ADDR
// if p3 = 20 then
62096: LD_VAR 0 3
62100: PUSH
62101: LD_INT 20
62103: EQUAL
62104: IFFALSE 62114
// sRemote := true ;
62106: LD_ADDR_EXP 76
62110: PUSH
62111: LD_INT 1
62113: ST_TO_ADDR
// if p3 = 21 then
62114: LD_VAR 0 3
62118: PUSH
62119: LD_INT 21
62121: EQUAL
62122: IFFALSE 62132
// sPowell := true ;
62124: LD_ADDR_EXP 77
62128: PUSH
62129: LD_INT 1
62131: ST_TO_ADDR
// if p3 = 22 then
62132: LD_VAR 0 3
62136: PUSH
62137: LD_INT 22
62139: EQUAL
62140: IFFALSE 62150
// sTeleport := true ;
62142: LD_ADDR_EXP 80
62146: PUSH
62147: LD_INT 1
62149: ST_TO_ADDR
// if p3 = 23 then
62150: LD_VAR 0 3
62154: PUSH
62155: LD_INT 23
62157: EQUAL
62158: IFFALSE 62168
// sOilTower := true ;
62160: LD_ADDR_EXP 82
62164: PUSH
62165: LD_INT 1
62167: ST_TO_ADDR
// if p3 = 24 then
62168: LD_VAR 0 3
62172: PUSH
62173: LD_INT 24
62175: EQUAL
62176: IFFALSE 62186
// sShovel := true ;
62178: LD_ADDR_EXP 83
62182: PUSH
62183: LD_INT 1
62185: ST_TO_ADDR
// if p3 = 25 then
62186: LD_VAR 0 3
62190: PUSH
62191: LD_INT 25
62193: EQUAL
62194: IFFALSE 62204
// sSheik := true ;
62196: LD_ADDR_EXP 84
62200: PUSH
62201: LD_INT 1
62203: ST_TO_ADDR
// if p3 = 26 then
62204: LD_VAR 0 3
62208: PUSH
62209: LD_INT 26
62211: EQUAL
62212: IFFALSE 62222
// sEarthquake := true ;
62214: LD_ADDR_EXP 86
62218: PUSH
62219: LD_INT 1
62221: ST_TO_ADDR
// if p3 = 27 then
62222: LD_VAR 0 3
62226: PUSH
62227: LD_INT 27
62229: EQUAL
62230: IFFALSE 62240
// sAI := true ;
62232: LD_ADDR_EXP 87
62236: PUSH
62237: LD_INT 1
62239: ST_TO_ADDR
// if p3 = 28 then
62240: LD_VAR 0 3
62244: PUSH
62245: LD_INT 28
62247: EQUAL
62248: IFFALSE 62258
// sCargo := true ;
62250: LD_ADDR_EXP 90
62254: PUSH
62255: LD_INT 1
62257: ST_TO_ADDR
// if p3 = 29 then
62258: LD_VAR 0 3
62262: PUSH
62263: LD_INT 29
62265: EQUAL
62266: IFFALSE 62276
// sDLaser := true ;
62268: LD_ADDR_EXP 91
62272: PUSH
62273: LD_INT 1
62275: ST_TO_ADDR
// if p3 = 30 then
62276: LD_VAR 0 3
62280: PUSH
62281: LD_INT 30
62283: EQUAL
62284: IFFALSE 62294
// sExchange := true ;
62286: LD_ADDR_EXP 92
62290: PUSH
62291: LD_INT 1
62293: ST_TO_ADDR
// if p3 = 31 then
62294: LD_VAR 0 3
62298: PUSH
62299: LD_INT 31
62301: EQUAL
62302: IFFALSE 62312
// sFac := true ;
62304: LD_ADDR_EXP 93
62308: PUSH
62309: LD_INT 1
62311: ST_TO_ADDR
// if p3 = 32 then
62312: LD_VAR 0 3
62316: PUSH
62317: LD_INT 32
62319: EQUAL
62320: IFFALSE 62330
// sPower := true ;
62322: LD_ADDR_EXP 94
62326: PUSH
62327: LD_INT 1
62329: ST_TO_ADDR
// if p3 = 33 then
62330: LD_VAR 0 3
62334: PUSH
62335: LD_INT 33
62337: EQUAL
62338: IFFALSE 62348
// sRandom := true ;
62340: LD_ADDR_EXP 95
62344: PUSH
62345: LD_INT 1
62347: ST_TO_ADDR
// if p3 = 34 then
62348: LD_VAR 0 3
62352: PUSH
62353: LD_INT 34
62355: EQUAL
62356: IFFALSE 62366
// sShield := true ;
62358: LD_ADDR_EXP 96
62362: PUSH
62363: LD_INT 1
62365: ST_TO_ADDR
// if p3 = 35 then
62366: LD_VAR 0 3
62370: PUSH
62371: LD_INT 35
62373: EQUAL
62374: IFFALSE 62384
// sTime := true ;
62376: LD_ADDR_EXP 97
62380: PUSH
62381: LD_INT 1
62383: ST_TO_ADDR
// if p3 = 36 then
62384: LD_VAR 0 3
62388: PUSH
62389: LD_INT 36
62391: EQUAL
62392: IFFALSE 62402
// sTools := true ;
62394: LD_ADDR_EXP 98
62398: PUSH
62399: LD_INT 1
62401: ST_TO_ADDR
// if p3 = 101 then
62402: LD_VAR 0 3
62406: PUSH
62407: LD_INT 101
62409: EQUAL
62410: IFFALSE 62420
// sSold := true ;
62412: LD_ADDR_EXP 63
62416: PUSH
62417: LD_INT 1
62419: ST_TO_ADDR
// if p3 = 102 then
62420: LD_VAR 0 3
62424: PUSH
62425: LD_INT 102
62427: EQUAL
62428: IFFALSE 62438
// sDiff := true ;
62430: LD_ADDR_EXP 64
62434: PUSH
62435: LD_INT 1
62437: ST_TO_ADDR
// if p3 = 103 then
62438: LD_VAR 0 3
62442: PUSH
62443: LD_INT 103
62445: EQUAL
62446: IFFALSE 62456
// sFog := true ;
62448: LD_ADDR_EXP 67
62452: PUSH
62453: LD_INT 1
62455: ST_TO_ADDR
// if p3 = 104 then
62456: LD_VAR 0 3
62460: PUSH
62461: LD_INT 104
62463: EQUAL
62464: IFFALSE 62474
// sReset := true ;
62466: LD_ADDR_EXP 68
62470: PUSH
62471: LD_INT 1
62473: ST_TO_ADDR
// if p3 = 105 then
62474: LD_VAR 0 3
62478: PUSH
62479: LD_INT 105
62481: EQUAL
62482: IFFALSE 62492
// sSun := true ;
62484: LD_ADDR_EXP 69
62488: PUSH
62489: LD_INT 1
62491: ST_TO_ADDR
// if p3 = 106 then
62492: LD_VAR 0 3
62496: PUSH
62497: LD_INT 106
62499: EQUAL
62500: IFFALSE 62510
// sTiger := true ;
62502: LD_ADDR_EXP 65
62506: PUSH
62507: LD_INT 1
62509: ST_TO_ADDR
// if p3 = 107 then
62510: LD_VAR 0 3
62514: PUSH
62515: LD_INT 107
62517: EQUAL
62518: IFFALSE 62528
// sBomb := true ;
62520: LD_ADDR_EXP 66
62524: PUSH
62525: LD_INT 1
62527: ST_TO_ADDR
// if p3 = 108 then
62528: LD_VAR 0 3
62532: PUSH
62533: LD_INT 108
62535: EQUAL
62536: IFFALSE 62546
// sWound := true ;
62538: LD_ADDR_EXP 74
62542: PUSH
62543: LD_INT 1
62545: ST_TO_ADDR
// if p3 = 109 then
62546: LD_VAR 0 3
62550: PUSH
62551: LD_INT 109
62553: EQUAL
62554: IFFALSE 62564
// sBetray := true ;
62556: LD_ADDR_EXP 78
62560: PUSH
62561: LD_INT 1
62563: ST_TO_ADDR
// if p3 = 110 then
62564: LD_VAR 0 3
62568: PUSH
62569: LD_INT 110
62571: EQUAL
62572: IFFALSE 62582
// sContamin := true ;
62574: LD_ADDR_EXP 79
62578: PUSH
62579: LD_INT 1
62581: ST_TO_ADDR
// if p3 = 111 then
62582: LD_VAR 0 3
62586: PUSH
62587: LD_INT 111
62589: EQUAL
62590: IFFALSE 62600
// sOil := true ;
62592: LD_ADDR_EXP 81
62596: PUSH
62597: LD_INT 1
62599: ST_TO_ADDR
// if p3 = 112 then
62600: LD_VAR 0 3
62604: PUSH
62605: LD_INT 112
62607: EQUAL
62608: IFFALSE 62618
// sStu := true ;
62610: LD_ADDR_EXP 85
62614: PUSH
62615: LD_INT 1
62617: ST_TO_ADDR
// if p3 = 113 then
62618: LD_VAR 0 3
62622: PUSH
62623: LD_INT 113
62625: EQUAL
62626: IFFALSE 62636
// sBazooka := true ;
62628: LD_ADDR_EXP 88
62632: PUSH
62633: LD_INT 1
62635: ST_TO_ADDR
// if p3 = 114 then
62636: LD_VAR 0 3
62640: PUSH
62641: LD_INT 114
62643: EQUAL
62644: IFFALSE 62654
// sMortar := true ;
62646: LD_ADDR_EXP 89
62650: PUSH
62651: LD_INT 1
62653: ST_TO_ADDR
// if p3 = 115 then
62654: LD_VAR 0 3
62658: PUSH
62659: LD_INT 115
62661: EQUAL
62662: IFFALSE 62672
// sRanger := true ;
62664: LD_ADDR_EXP 99
62668: PUSH
62669: LD_INT 1
62671: ST_TO_ADDR
// if p3 = 116 then
62672: LD_VAR 0 3
62676: PUSH
62677: LD_INT 116
62679: EQUAL
62680: IFFALSE 62690
// sComputer := true ;
62682: LD_ADDR_EXP 100
62686: PUSH
62687: LD_INT 1
62689: ST_TO_ADDR
// if p3 = 117 then
62690: LD_VAR 0 3
62694: PUSH
62695: LD_INT 117
62697: EQUAL
62698: IFFALSE 62708
// s30 := true ;
62700: LD_ADDR_EXP 101
62704: PUSH
62705: LD_INT 1
62707: ST_TO_ADDR
// if p3 = 118 then
62708: LD_VAR 0 3
62712: PUSH
62713: LD_INT 118
62715: EQUAL
62716: IFFALSE 62726
// s60 := true ;
62718: LD_ADDR_EXP 102
62722: PUSH
62723: LD_INT 1
62725: ST_TO_ADDR
// end ; if p2 = hack_mode then
62726: LD_VAR 0 2
62730: PUSH
62731: LD_INT 101
62733: EQUAL
62734: IFFALSE 62862
// begin case p3 of 1 :
62736: LD_VAR 0 3
62740: PUSH
62741: LD_INT 1
62743: DOUBLE
62744: EQUAL
62745: IFTRUE 62749
62747: GO 62756
62749: POP
// hHackUnlimitedResources ; 2 :
62750: CALL 75001 0 0
62754: GO 62862
62756: LD_INT 2
62758: DOUBLE
62759: EQUAL
62760: IFTRUE 62764
62762: GO 62771
62764: POP
// hHackSetLevel10 ; 3 :
62765: CALL 75134 0 0
62769: GO 62862
62771: LD_INT 3
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62779
62777: GO 62786
62779: POP
// hHackSetLevel10YourUnits ; 4 :
62780: CALL 75219 0 0
62784: GO 62862
62786: LD_INT 4
62788: DOUBLE
62789: EQUAL
62790: IFTRUE 62794
62792: GO 62801
62794: POP
// hHackInvincible ; 5 :
62795: CALL 75667 0 0
62799: GO 62862
62801: LD_INT 5
62803: DOUBLE
62804: EQUAL
62805: IFTRUE 62809
62807: GO 62816
62809: POP
// hHackInvisible ; 6 :
62810: CALL 75778 0 0
62814: GO 62862
62816: LD_INT 6
62818: DOUBLE
62819: EQUAL
62820: IFTRUE 62824
62822: GO 62831
62824: POP
// hHackChangeYourSide ; 7 :
62825: CALL 75835 0 0
62829: GO 62862
62831: LD_INT 7
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62839
62837: GO 62846
62839: POP
// hHackChangeUnitSide ; 8 :
62840: CALL 75877 0 0
62844: GO 62862
62846: LD_INT 8
62848: DOUBLE
62849: EQUAL
62850: IFTRUE 62854
62852: GO 62861
62854: POP
// hHackFog ; end ;
62855: CALL 75978 0 0
62859: GO 62862
62861: POP
// end ; if p2 = game_save_mode then
62862: LD_VAR 0 2
62866: PUSH
62867: LD_INT 102
62869: EQUAL
62870: IFFALSE 62925
// begin if p3 = 1 then
62872: LD_VAR 0 3
62876: PUSH
62877: LD_INT 1
62879: EQUAL
62880: IFFALSE 62892
// globalGameSaveCounter := p4 ;
62882: LD_ADDR_EXP 45
62886: PUSH
62887: LD_VAR 0 4
62891: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62892: LD_VAR 0 3
62896: PUSH
62897: LD_INT 2
62899: EQUAL
62900: PUSH
62901: LD_EXP 45
62905: AND
62906: IFFALSE 62925
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62908: LD_STRING setGameSaveCounter(
62910: PUSH
62911: LD_EXP 45
62915: STR
62916: PUSH
62917: LD_STRING )
62919: STR
62920: PPUSH
62921: CALL_OW 559
// end ; end ;
62925: LD_VAR 0 7
62929: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62930: LD_INT 0
62932: PPUSH
// streamModeActive := false ;
62933: LD_ADDR_EXP 46
62937: PUSH
62938: LD_INT 0
62940: ST_TO_ADDR
// normalCounter := 36 ;
62941: LD_ADDR_EXP 47
62945: PUSH
62946: LD_INT 36
62948: ST_TO_ADDR
// hardcoreCounter := 18 ;
62949: LD_ADDR_EXP 48
62953: PUSH
62954: LD_INT 18
62956: ST_TO_ADDR
// sRocket := false ;
62957: LD_ADDR_EXP 51
62961: PUSH
62962: LD_INT 0
62964: ST_TO_ADDR
// sSpeed := false ;
62965: LD_ADDR_EXP 50
62969: PUSH
62970: LD_INT 0
62972: ST_TO_ADDR
// sEngine := false ;
62973: LD_ADDR_EXP 52
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// sSpec := false ;
62981: LD_ADDR_EXP 49
62985: PUSH
62986: LD_INT 0
62988: ST_TO_ADDR
// sLevel := false ;
62989: LD_ADDR_EXP 53
62993: PUSH
62994: LD_INT 0
62996: ST_TO_ADDR
// sArmoury := false ;
62997: LD_ADDR_EXP 54
63001: PUSH
63002: LD_INT 0
63004: ST_TO_ADDR
// sRadar := false ;
63005: LD_ADDR_EXP 55
63009: PUSH
63010: LD_INT 0
63012: ST_TO_ADDR
// sBunker := false ;
63013: LD_ADDR_EXP 56
63017: PUSH
63018: LD_INT 0
63020: ST_TO_ADDR
// sHack := false ;
63021: LD_ADDR_EXP 57
63025: PUSH
63026: LD_INT 0
63028: ST_TO_ADDR
// sFire := false ;
63029: LD_ADDR_EXP 58
63033: PUSH
63034: LD_INT 0
63036: ST_TO_ADDR
// sRefresh := false ;
63037: LD_ADDR_EXP 59
63041: PUSH
63042: LD_INT 0
63044: ST_TO_ADDR
// sExp := false ;
63045: LD_ADDR_EXP 60
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// sDepot := false ;
63053: LD_ADDR_EXP 61
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// sFlag := false ;
63061: LD_ADDR_EXP 62
63065: PUSH
63066: LD_INT 0
63068: ST_TO_ADDR
// sKamikadze := false ;
63069: LD_ADDR_EXP 70
63073: PUSH
63074: LD_INT 0
63076: ST_TO_ADDR
// sTroll := false ;
63077: LD_ADDR_EXP 71
63081: PUSH
63082: LD_INT 0
63084: ST_TO_ADDR
// sSlow := false ;
63085: LD_ADDR_EXP 72
63089: PUSH
63090: LD_INT 0
63092: ST_TO_ADDR
// sLack := false ;
63093: LD_ADDR_EXP 73
63097: PUSH
63098: LD_INT 0
63100: ST_TO_ADDR
// sTank := false ;
63101: LD_ADDR_EXP 75
63105: PUSH
63106: LD_INT 0
63108: ST_TO_ADDR
// sRemote := false ;
63109: LD_ADDR_EXP 76
63113: PUSH
63114: LD_INT 0
63116: ST_TO_ADDR
// sPowell := false ;
63117: LD_ADDR_EXP 77
63121: PUSH
63122: LD_INT 0
63124: ST_TO_ADDR
// sTeleport := false ;
63125: LD_ADDR_EXP 80
63129: PUSH
63130: LD_INT 0
63132: ST_TO_ADDR
// sOilTower := false ;
63133: LD_ADDR_EXP 82
63137: PUSH
63138: LD_INT 0
63140: ST_TO_ADDR
// sShovel := false ;
63141: LD_ADDR_EXP 83
63145: PUSH
63146: LD_INT 0
63148: ST_TO_ADDR
// sSheik := false ;
63149: LD_ADDR_EXP 84
63153: PUSH
63154: LD_INT 0
63156: ST_TO_ADDR
// sEarthquake := false ;
63157: LD_ADDR_EXP 86
63161: PUSH
63162: LD_INT 0
63164: ST_TO_ADDR
// sAI := false ;
63165: LD_ADDR_EXP 87
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
// sCargo := false ;
63173: LD_ADDR_EXP 90
63177: PUSH
63178: LD_INT 0
63180: ST_TO_ADDR
// sDLaser := false ;
63181: LD_ADDR_EXP 91
63185: PUSH
63186: LD_INT 0
63188: ST_TO_ADDR
// sExchange := false ;
63189: LD_ADDR_EXP 92
63193: PUSH
63194: LD_INT 0
63196: ST_TO_ADDR
// sFac := false ;
63197: LD_ADDR_EXP 93
63201: PUSH
63202: LD_INT 0
63204: ST_TO_ADDR
// sPower := false ;
63205: LD_ADDR_EXP 94
63209: PUSH
63210: LD_INT 0
63212: ST_TO_ADDR
// sRandom := false ;
63213: LD_ADDR_EXP 95
63217: PUSH
63218: LD_INT 0
63220: ST_TO_ADDR
// sShield := false ;
63221: LD_ADDR_EXP 96
63225: PUSH
63226: LD_INT 0
63228: ST_TO_ADDR
// sTime := false ;
63229: LD_ADDR_EXP 97
63233: PUSH
63234: LD_INT 0
63236: ST_TO_ADDR
// sTools := false ;
63237: LD_ADDR_EXP 98
63241: PUSH
63242: LD_INT 0
63244: ST_TO_ADDR
// sSold := false ;
63245: LD_ADDR_EXP 63
63249: PUSH
63250: LD_INT 0
63252: ST_TO_ADDR
// sDiff := false ;
63253: LD_ADDR_EXP 64
63257: PUSH
63258: LD_INT 0
63260: ST_TO_ADDR
// sFog := false ;
63261: LD_ADDR_EXP 67
63265: PUSH
63266: LD_INT 0
63268: ST_TO_ADDR
// sReset := false ;
63269: LD_ADDR_EXP 68
63273: PUSH
63274: LD_INT 0
63276: ST_TO_ADDR
// sSun := false ;
63277: LD_ADDR_EXP 69
63281: PUSH
63282: LD_INT 0
63284: ST_TO_ADDR
// sTiger := false ;
63285: LD_ADDR_EXP 65
63289: PUSH
63290: LD_INT 0
63292: ST_TO_ADDR
// sBomb := false ;
63293: LD_ADDR_EXP 66
63297: PUSH
63298: LD_INT 0
63300: ST_TO_ADDR
// sWound := false ;
63301: LD_ADDR_EXP 74
63305: PUSH
63306: LD_INT 0
63308: ST_TO_ADDR
// sBetray := false ;
63309: LD_ADDR_EXP 78
63313: PUSH
63314: LD_INT 0
63316: ST_TO_ADDR
// sContamin := false ;
63317: LD_ADDR_EXP 79
63321: PUSH
63322: LD_INT 0
63324: ST_TO_ADDR
// sOil := false ;
63325: LD_ADDR_EXP 81
63329: PUSH
63330: LD_INT 0
63332: ST_TO_ADDR
// sStu := false ;
63333: LD_ADDR_EXP 85
63337: PUSH
63338: LD_INT 0
63340: ST_TO_ADDR
// sBazooka := false ;
63341: LD_ADDR_EXP 88
63345: PUSH
63346: LD_INT 0
63348: ST_TO_ADDR
// sMortar := false ;
63349: LD_ADDR_EXP 89
63353: PUSH
63354: LD_INT 0
63356: ST_TO_ADDR
// sRanger := false ;
63357: LD_ADDR_EXP 99
63361: PUSH
63362: LD_INT 0
63364: ST_TO_ADDR
// sComputer := false ;
63365: LD_ADDR_EXP 100
63369: PUSH
63370: LD_INT 0
63372: ST_TO_ADDR
// s30 := false ;
63373: LD_ADDR_EXP 101
63377: PUSH
63378: LD_INT 0
63380: ST_TO_ADDR
// s60 := false ;
63381: LD_ADDR_EXP 102
63385: PUSH
63386: LD_INT 0
63388: ST_TO_ADDR
// end ;
63389: LD_VAR 0 1
63393: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63394: LD_INT 0
63396: PPUSH
63397: PPUSH
63398: PPUSH
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
// result := [ ] ;
63403: LD_ADDR_VAR 0 2
63407: PUSH
63408: EMPTY
63409: ST_TO_ADDR
// if campaign_id = 1 then
63410: LD_OWVAR 69
63414: PUSH
63415: LD_INT 1
63417: EQUAL
63418: IFFALSE 66584
// begin case mission_number of 1 :
63420: LD_OWVAR 70
63424: PUSH
63425: LD_INT 1
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63433
63431: GO 63509
63433: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63434: LD_ADDR_VAR 0 2
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 4
63444: PUSH
63445: LD_INT 11
63447: PUSH
63448: LD_INT 12
63450: PUSH
63451: LD_INT 15
63453: PUSH
63454: LD_INT 16
63456: PUSH
63457: LD_INT 22
63459: PUSH
63460: LD_INT 23
63462: PUSH
63463: LD_INT 26
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 101
63479: PUSH
63480: LD_INT 102
63482: PUSH
63483: LD_INT 106
63485: PUSH
63486: LD_INT 116
63488: PUSH
63489: LD_INT 117
63491: PUSH
63492: LD_INT 118
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: ST_TO_ADDR
63507: GO 66582
63509: LD_INT 2
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63517
63515: GO 63601
63517: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63518: LD_ADDR_VAR 0 2
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: LD_INT 11
63531: PUSH
63532: LD_INT 12
63534: PUSH
63535: LD_INT 15
63537: PUSH
63538: LD_INT 16
63540: PUSH
63541: LD_INT 22
63543: PUSH
63544: LD_INT 23
63546: PUSH
63547: LD_INT 26
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 101
63563: PUSH
63564: LD_INT 102
63566: PUSH
63567: LD_INT 105
63569: PUSH
63570: LD_INT 106
63572: PUSH
63573: LD_INT 108
63575: PUSH
63576: LD_INT 116
63578: PUSH
63579: LD_INT 117
63581: PUSH
63582: LD_INT 118
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: ST_TO_ADDR
63599: GO 66582
63601: LD_INT 3
63603: DOUBLE
63604: EQUAL
63605: IFTRUE 63609
63607: GO 63697
63609: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63610: LD_ADDR_VAR 0 2
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: LD_INT 5
63623: PUSH
63624: LD_INT 11
63626: PUSH
63627: LD_INT 12
63629: PUSH
63630: LD_INT 15
63632: PUSH
63633: LD_INT 16
63635: PUSH
63636: LD_INT 22
63638: PUSH
63639: LD_INT 26
63641: PUSH
63642: LD_INT 36
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 101
63659: PUSH
63660: LD_INT 102
63662: PUSH
63663: LD_INT 105
63665: PUSH
63666: LD_INT 106
63668: PUSH
63669: LD_INT 108
63671: PUSH
63672: LD_INT 116
63674: PUSH
63675: LD_INT 117
63677: PUSH
63678: LD_INT 118
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: ST_TO_ADDR
63695: GO 66582
63697: LD_INT 4
63699: DOUBLE
63700: EQUAL
63701: IFTRUE 63705
63703: GO 63801
63705: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63706: LD_ADDR_VAR 0 2
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: LD_INT 4
63716: PUSH
63717: LD_INT 5
63719: PUSH
63720: LD_INT 8
63722: PUSH
63723: LD_INT 11
63725: PUSH
63726: LD_INT 12
63728: PUSH
63729: LD_INT 15
63731: PUSH
63732: LD_INT 16
63734: PUSH
63735: LD_INT 22
63737: PUSH
63738: LD_INT 23
63740: PUSH
63741: LD_INT 26
63743: PUSH
63744: LD_INT 36
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 101
63763: PUSH
63764: LD_INT 102
63766: PUSH
63767: LD_INT 105
63769: PUSH
63770: LD_INT 106
63772: PUSH
63773: LD_INT 108
63775: PUSH
63776: LD_INT 116
63778: PUSH
63779: LD_INT 117
63781: PUSH
63782: LD_INT 118
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: ST_TO_ADDR
63799: GO 66582
63801: LD_INT 5
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63809
63807: GO 63921
63809: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63810: LD_ADDR_VAR 0 2
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: LD_INT 5
63823: PUSH
63824: LD_INT 6
63826: PUSH
63827: LD_INT 8
63829: PUSH
63830: LD_INT 11
63832: PUSH
63833: LD_INT 12
63835: PUSH
63836: LD_INT 15
63838: PUSH
63839: LD_INT 16
63841: PUSH
63842: LD_INT 22
63844: PUSH
63845: LD_INT 23
63847: PUSH
63848: LD_INT 25
63850: PUSH
63851: LD_INT 26
63853: PUSH
63854: LD_INT 36
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 101
63875: PUSH
63876: LD_INT 102
63878: PUSH
63879: LD_INT 105
63881: PUSH
63882: LD_INT 106
63884: PUSH
63885: LD_INT 108
63887: PUSH
63888: LD_INT 109
63890: PUSH
63891: LD_INT 112
63893: PUSH
63894: LD_INT 116
63896: PUSH
63897: LD_INT 117
63899: PUSH
63900: LD_INT 118
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: ST_TO_ADDR
63919: GO 66582
63921: LD_INT 6
63923: DOUBLE
63924: EQUAL
63925: IFTRUE 63929
63927: GO 64061
63929: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63930: LD_ADDR_VAR 0 2
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: LD_INT 4
63940: PUSH
63941: LD_INT 5
63943: PUSH
63944: LD_INT 6
63946: PUSH
63947: LD_INT 8
63949: PUSH
63950: LD_INT 11
63952: PUSH
63953: LD_INT 12
63955: PUSH
63956: LD_INT 15
63958: PUSH
63959: LD_INT 16
63961: PUSH
63962: LD_INT 20
63964: PUSH
63965: LD_INT 21
63967: PUSH
63968: LD_INT 22
63970: PUSH
63971: LD_INT 23
63973: PUSH
63974: LD_INT 25
63976: PUSH
63977: LD_INT 26
63979: PUSH
63980: LD_INT 30
63982: PUSH
63983: LD_INT 31
63985: PUSH
63986: LD_INT 32
63988: PUSH
63989: LD_INT 36
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 101
64015: PUSH
64016: LD_INT 102
64018: PUSH
64019: LD_INT 105
64021: PUSH
64022: LD_INT 106
64024: PUSH
64025: LD_INT 108
64027: PUSH
64028: LD_INT 109
64030: PUSH
64031: LD_INT 112
64033: PUSH
64034: LD_INT 116
64036: PUSH
64037: LD_INT 117
64039: PUSH
64040: LD_INT 118
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: ST_TO_ADDR
64059: GO 66582
64061: LD_INT 7
64063: DOUBLE
64064: EQUAL
64065: IFTRUE 64069
64067: GO 64181
64069: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64070: LD_ADDR_VAR 0 2
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 4
64080: PUSH
64081: LD_INT 5
64083: PUSH
64084: LD_INT 7
64086: PUSH
64087: LD_INT 11
64089: PUSH
64090: LD_INT 12
64092: PUSH
64093: LD_INT 15
64095: PUSH
64096: LD_INT 16
64098: PUSH
64099: LD_INT 20
64101: PUSH
64102: LD_INT 21
64104: PUSH
64105: LD_INT 22
64107: PUSH
64108: LD_INT 23
64110: PUSH
64111: LD_INT 25
64113: PUSH
64114: LD_INT 26
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 101
64135: PUSH
64136: LD_INT 102
64138: PUSH
64139: LD_INT 103
64141: PUSH
64142: LD_INT 105
64144: PUSH
64145: LD_INT 106
64147: PUSH
64148: LD_INT 108
64150: PUSH
64151: LD_INT 112
64153: PUSH
64154: LD_INT 116
64156: PUSH
64157: LD_INT 117
64159: PUSH
64160: LD_INT 118
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: ST_TO_ADDR
64179: GO 66582
64181: LD_INT 8
64183: DOUBLE
64184: EQUAL
64185: IFTRUE 64189
64187: GO 64329
64189: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64190: LD_ADDR_VAR 0 2
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: LD_INT 5
64203: PUSH
64204: LD_INT 6
64206: PUSH
64207: LD_INT 7
64209: PUSH
64210: LD_INT 8
64212: PUSH
64213: LD_INT 11
64215: PUSH
64216: LD_INT 12
64218: PUSH
64219: LD_INT 15
64221: PUSH
64222: LD_INT 16
64224: PUSH
64225: LD_INT 20
64227: PUSH
64228: LD_INT 21
64230: PUSH
64231: LD_INT 22
64233: PUSH
64234: LD_INT 23
64236: PUSH
64237: LD_INT 25
64239: PUSH
64240: LD_INT 26
64242: PUSH
64243: LD_INT 30
64245: PUSH
64246: LD_INT 31
64248: PUSH
64249: LD_INT 32
64251: PUSH
64252: LD_INT 36
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 101
64279: PUSH
64280: LD_INT 102
64282: PUSH
64283: LD_INT 103
64285: PUSH
64286: LD_INT 105
64288: PUSH
64289: LD_INT 106
64291: PUSH
64292: LD_INT 108
64294: PUSH
64295: LD_INT 109
64297: PUSH
64298: LD_INT 112
64300: PUSH
64301: LD_INT 116
64303: PUSH
64304: LD_INT 117
64306: PUSH
64307: LD_INT 118
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: ST_TO_ADDR
64327: GO 66582
64329: LD_INT 9
64331: DOUBLE
64332: EQUAL
64333: IFTRUE 64337
64335: GO 64485
64337: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64338: LD_ADDR_VAR 0 2
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 4
64348: PUSH
64349: LD_INT 5
64351: PUSH
64352: LD_INT 6
64354: PUSH
64355: LD_INT 7
64357: PUSH
64358: LD_INT 8
64360: PUSH
64361: LD_INT 11
64363: PUSH
64364: LD_INT 12
64366: PUSH
64367: LD_INT 15
64369: PUSH
64370: LD_INT 16
64372: PUSH
64373: LD_INT 20
64375: PUSH
64376: LD_INT 21
64378: PUSH
64379: LD_INT 22
64381: PUSH
64382: LD_INT 23
64384: PUSH
64385: LD_INT 25
64387: PUSH
64388: LD_INT 26
64390: PUSH
64391: LD_INT 28
64393: PUSH
64394: LD_INT 30
64396: PUSH
64397: LD_INT 31
64399: PUSH
64400: LD_INT 32
64402: PUSH
64403: LD_INT 36
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 101
64431: PUSH
64432: LD_INT 102
64434: PUSH
64435: LD_INT 103
64437: PUSH
64438: LD_INT 105
64440: PUSH
64441: LD_INT 106
64443: PUSH
64444: LD_INT 108
64446: PUSH
64447: LD_INT 109
64449: PUSH
64450: LD_INT 112
64452: PUSH
64453: LD_INT 114
64455: PUSH
64456: LD_INT 116
64458: PUSH
64459: LD_INT 117
64461: PUSH
64462: LD_INT 118
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: ST_TO_ADDR
64483: GO 66582
64485: LD_INT 10
64487: DOUBLE
64488: EQUAL
64489: IFTRUE 64493
64491: GO 64689
64493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64494: LD_ADDR_VAR 0 2
64498: PUSH
64499: LD_INT 2
64501: PUSH
64502: LD_INT 4
64504: PUSH
64505: LD_INT 5
64507: PUSH
64508: LD_INT 6
64510: PUSH
64511: LD_INT 7
64513: PUSH
64514: LD_INT 8
64516: PUSH
64517: LD_INT 9
64519: PUSH
64520: LD_INT 10
64522: PUSH
64523: LD_INT 11
64525: PUSH
64526: LD_INT 12
64528: PUSH
64529: LD_INT 13
64531: PUSH
64532: LD_INT 14
64534: PUSH
64535: LD_INT 15
64537: PUSH
64538: LD_INT 16
64540: PUSH
64541: LD_INT 17
64543: PUSH
64544: LD_INT 18
64546: PUSH
64547: LD_INT 19
64549: PUSH
64550: LD_INT 20
64552: PUSH
64553: LD_INT 21
64555: PUSH
64556: LD_INT 22
64558: PUSH
64559: LD_INT 23
64561: PUSH
64562: LD_INT 24
64564: PUSH
64565: LD_INT 25
64567: PUSH
64568: LD_INT 26
64570: PUSH
64571: LD_INT 28
64573: PUSH
64574: LD_INT 30
64576: PUSH
64577: LD_INT 31
64579: PUSH
64580: LD_INT 32
64582: PUSH
64583: LD_INT 36
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 101
64619: PUSH
64620: LD_INT 102
64622: PUSH
64623: LD_INT 103
64625: PUSH
64626: LD_INT 104
64628: PUSH
64629: LD_INT 105
64631: PUSH
64632: LD_INT 106
64634: PUSH
64635: LD_INT 107
64637: PUSH
64638: LD_INT 108
64640: PUSH
64641: LD_INT 109
64643: PUSH
64644: LD_INT 110
64646: PUSH
64647: LD_INT 111
64649: PUSH
64650: LD_INT 112
64652: PUSH
64653: LD_INT 114
64655: PUSH
64656: LD_INT 116
64658: PUSH
64659: LD_INT 117
64661: PUSH
64662: LD_INT 118
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: ST_TO_ADDR
64687: GO 66582
64689: LD_INT 11
64691: DOUBLE
64692: EQUAL
64693: IFTRUE 64697
64695: GO 64901
64697: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64698: LD_ADDR_VAR 0 2
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: LD_INT 4
64711: PUSH
64712: LD_INT 5
64714: PUSH
64715: LD_INT 6
64717: PUSH
64718: LD_INT 7
64720: PUSH
64721: LD_INT 8
64723: PUSH
64724: LD_INT 9
64726: PUSH
64727: LD_INT 10
64729: PUSH
64730: LD_INT 11
64732: PUSH
64733: LD_INT 12
64735: PUSH
64736: LD_INT 13
64738: PUSH
64739: LD_INT 14
64741: PUSH
64742: LD_INT 15
64744: PUSH
64745: LD_INT 16
64747: PUSH
64748: LD_INT 17
64750: PUSH
64751: LD_INT 18
64753: PUSH
64754: LD_INT 19
64756: PUSH
64757: LD_INT 20
64759: PUSH
64760: LD_INT 21
64762: PUSH
64763: LD_INT 22
64765: PUSH
64766: LD_INT 23
64768: PUSH
64769: LD_INT 24
64771: PUSH
64772: LD_INT 25
64774: PUSH
64775: LD_INT 26
64777: PUSH
64778: LD_INT 28
64780: PUSH
64781: LD_INT 30
64783: PUSH
64784: LD_INT 31
64786: PUSH
64787: LD_INT 32
64789: PUSH
64790: LD_INT 34
64792: PUSH
64793: LD_INT 36
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 101
64831: PUSH
64832: LD_INT 102
64834: PUSH
64835: LD_INT 103
64837: PUSH
64838: LD_INT 104
64840: PUSH
64841: LD_INT 105
64843: PUSH
64844: LD_INT 106
64846: PUSH
64847: LD_INT 107
64849: PUSH
64850: LD_INT 108
64852: PUSH
64853: LD_INT 109
64855: PUSH
64856: LD_INT 110
64858: PUSH
64859: LD_INT 111
64861: PUSH
64862: LD_INT 112
64864: PUSH
64865: LD_INT 114
64867: PUSH
64868: LD_INT 116
64870: PUSH
64871: LD_INT 117
64873: PUSH
64874: LD_INT 118
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: ST_TO_ADDR
64899: GO 66582
64901: LD_INT 12
64903: DOUBLE
64904: EQUAL
64905: IFTRUE 64909
64907: GO 65129
64909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64910: LD_ADDR_VAR 0 2
64914: PUSH
64915: LD_INT 1
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: LD_INT 5
64929: PUSH
64930: LD_INT 6
64932: PUSH
64933: LD_INT 7
64935: PUSH
64936: LD_INT 8
64938: PUSH
64939: LD_INT 9
64941: PUSH
64942: LD_INT 10
64944: PUSH
64945: LD_INT 11
64947: PUSH
64948: LD_INT 12
64950: PUSH
64951: LD_INT 13
64953: PUSH
64954: LD_INT 14
64956: PUSH
64957: LD_INT 15
64959: PUSH
64960: LD_INT 16
64962: PUSH
64963: LD_INT 17
64965: PUSH
64966: LD_INT 18
64968: PUSH
64969: LD_INT 19
64971: PUSH
64972: LD_INT 20
64974: PUSH
64975: LD_INT 21
64977: PUSH
64978: LD_INT 22
64980: PUSH
64981: LD_INT 23
64983: PUSH
64984: LD_INT 24
64986: PUSH
64987: LD_INT 25
64989: PUSH
64990: LD_INT 26
64992: PUSH
64993: LD_INT 27
64995: PUSH
64996: LD_INT 28
64998: PUSH
64999: LD_INT 30
65001: PUSH
65002: LD_INT 31
65004: PUSH
65005: LD_INT 32
65007: PUSH
65008: LD_INT 33
65010: PUSH
65011: LD_INT 34
65013: PUSH
65014: LD_INT 36
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 101
65055: PUSH
65056: LD_INT 102
65058: PUSH
65059: LD_INT 103
65061: PUSH
65062: LD_INT 104
65064: PUSH
65065: LD_INT 105
65067: PUSH
65068: LD_INT 106
65070: PUSH
65071: LD_INT 107
65073: PUSH
65074: LD_INT 108
65076: PUSH
65077: LD_INT 109
65079: PUSH
65080: LD_INT 110
65082: PUSH
65083: LD_INT 111
65085: PUSH
65086: LD_INT 112
65088: PUSH
65089: LD_INT 113
65091: PUSH
65092: LD_INT 114
65094: PUSH
65095: LD_INT 116
65097: PUSH
65098: LD_INT 117
65100: PUSH
65101: LD_INT 118
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: ST_TO_ADDR
65127: GO 66582
65129: LD_INT 13
65131: DOUBLE
65132: EQUAL
65133: IFTRUE 65137
65135: GO 65345
65137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65138: LD_ADDR_VAR 0 2
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: LD_INT 3
65151: PUSH
65152: LD_INT 4
65154: PUSH
65155: LD_INT 5
65157: PUSH
65158: LD_INT 8
65160: PUSH
65161: LD_INT 9
65163: PUSH
65164: LD_INT 10
65166: PUSH
65167: LD_INT 11
65169: PUSH
65170: LD_INT 12
65172: PUSH
65173: LD_INT 14
65175: PUSH
65176: LD_INT 15
65178: PUSH
65179: LD_INT 16
65181: PUSH
65182: LD_INT 17
65184: PUSH
65185: LD_INT 18
65187: PUSH
65188: LD_INT 19
65190: PUSH
65191: LD_INT 20
65193: PUSH
65194: LD_INT 21
65196: PUSH
65197: LD_INT 22
65199: PUSH
65200: LD_INT 23
65202: PUSH
65203: LD_INT 24
65205: PUSH
65206: LD_INT 25
65208: PUSH
65209: LD_INT 26
65211: PUSH
65212: LD_INT 27
65214: PUSH
65215: LD_INT 28
65217: PUSH
65218: LD_INT 30
65220: PUSH
65221: LD_INT 31
65223: PUSH
65224: LD_INT 32
65226: PUSH
65227: LD_INT 33
65229: PUSH
65230: LD_INT 34
65232: PUSH
65233: LD_INT 36
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 101
65271: PUSH
65272: LD_INT 102
65274: PUSH
65275: LD_INT 103
65277: PUSH
65278: LD_INT 104
65280: PUSH
65281: LD_INT 105
65283: PUSH
65284: LD_INT 106
65286: PUSH
65287: LD_INT 107
65289: PUSH
65290: LD_INT 108
65292: PUSH
65293: LD_INT 109
65295: PUSH
65296: LD_INT 110
65298: PUSH
65299: LD_INT 111
65301: PUSH
65302: LD_INT 112
65304: PUSH
65305: LD_INT 113
65307: PUSH
65308: LD_INT 114
65310: PUSH
65311: LD_INT 116
65313: PUSH
65314: LD_INT 117
65316: PUSH
65317: LD_INT 118
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: ST_TO_ADDR
65343: GO 66582
65345: LD_INT 14
65347: DOUBLE
65348: EQUAL
65349: IFTRUE 65353
65351: GO 65577
65353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65354: LD_ADDR_VAR 0 2
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: LD_INT 4
65370: PUSH
65371: LD_INT 5
65373: PUSH
65374: LD_INT 6
65376: PUSH
65377: LD_INT 7
65379: PUSH
65380: LD_INT 8
65382: PUSH
65383: LD_INT 9
65385: PUSH
65386: LD_INT 10
65388: PUSH
65389: LD_INT 11
65391: PUSH
65392: LD_INT 12
65394: PUSH
65395: LD_INT 13
65397: PUSH
65398: LD_INT 14
65400: PUSH
65401: LD_INT 15
65403: PUSH
65404: LD_INT 16
65406: PUSH
65407: LD_INT 17
65409: PUSH
65410: LD_INT 18
65412: PUSH
65413: LD_INT 19
65415: PUSH
65416: LD_INT 20
65418: PUSH
65419: LD_INT 21
65421: PUSH
65422: LD_INT 22
65424: PUSH
65425: LD_INT 23
65427: PUSH
65428: LD_INT 24
65430: PUSH
65431: LD_INT 25
65433: PUSH
65434: LD_INT 26
65436: PUSH
65437: LD_INT 27
65439: PUSH
65440: LD_INT 28
65442: PUSH
65443: LD_INT 29
65445: PUSH
65446: LD_INT 30
65448: PUSH
65449: LD_INT 31
65451: PUSH
65452: LD_INT 32
65454: PUSH
65455: LD_INT 33
65457: PUSH
65458: LD_INT 34
65460: PUSH
65461: LD_INT 36
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 101
65503: PUSH
65504: LD_INT 102
65506: PUSH
65507: LD_INT 103
65509: PUSH
65510: LD_INT 104
65512: PUSH
65513: LD_INT 105
65515: PUSH
65516: LD_INT 106
65518: PUSH
65519: LD_INT 107
65521: PUSH
65522: LD_INT 108
65524: PUSH
65525: LD_INT 109
65527: PUSH
65528: LD_INT 110
65530: PUSH
65531: LD_INT 111
65533: PUSH
65534: LD_INT 112
65536: PUSH
65537: LD_INT 113
65539: PUSH
65540: LD_INT 114
65542: PUSH
65543: LD_INT 116
65545: PUSH
65546: LD_INT 117
65548: PUSH
65549: LD_INT 118
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: ST_TO_ADDR
65575: GO 66582
65577: LD_INT 15
65579: DOUBLE
65580: EQUAL
65581: IFTRUE 65585
65583: GO 65809
65585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65586: LD_ADDR_VAR 0 2
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: LD_INT 3
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: LD_INT 5
65605: PUSH
65606: LD_INT 6
65608: PUSH
65609: LD_INT 7
65611: PUSH
65612: LD_INT 8
65614: PUSH
65615: LD_INT 9
65617: PUSH
65618: LD_INT 10
65620: PUSH
65621: LD_INT 11
65623: PUSH
65624: LD_INT 12
65626: PUSH
65627: LD_INT 13
65629: PUSH
65630: LD_INT 14
65632: PUSH
65633: LD_INT 15
65635: PUSH
65636: LD_INT 16
65638: PUSH
65639: LD_INT 17
65641: PUSH
65642: LD_INT 18
65644: PUSH
65645: LD_INT 19
65647: PUSH
65648: LD_INT 20
65650: PUSH
65651: LD_INT 21
65653: PUSH
65654: LD_INT 22
65656: PUSH
65657: LD_INT 23
65659: PUSH
65660: LD_INT 24
65662: PUSH
65663: LD_INT 25
65665: PUSH
65666: LD_INT 26
65668: PUSH
65669: LD_INT 27
65671: PUSH
65672: LD_INT 28
65674: PUSH
65675: LD_INT 29
65677: PUSH
65678: LD_INT 30
65680: PUSH
65681: LD_INT 31
65683: PUSH
65684: LD_INT 32
65686: PUSH
65687: LD_INT 33
65689: PUSH
65690: LD_INT 34
65692: PUSH
65693: LD_INT 36
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 101
65735: PUSH
65736: LD_INT 102
65738: PUSH
65739: LD_INT 103
65741: PUSH
65742: LD_INT 104
65744: PUSH
65745: LD_INT 105
65747: PUSH
65748: LD_INT 106
65750: PUSH
65751: LD_INT 107
65753: PUSH
65754: LD_INT 108
65756: PUSH
65757: LD_INT 109
65759: PUSH
65760: LD_INT 110
65762: PUSH
65763: LD_INT 111
65765: PUSH
65766: LD_INT 112
65768: PUSH
65769: LD_INT 113
65771: PUSH
65772: LD_INT 114
65774: PUSH
65775: LD_INT 116
65777: PUSH
65778: LD_INT 117
65780: PUSH
65781: LD_INT 118
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: ST_TO_ADDR
65807: GO 66582
65809: LD_INT 16
65811: DOUBLE
65812: EQUAL
65813: IFTRUE 65817
65815: GO 65953
65817: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65818: LD_ADDR_VAR 0 2
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: LD_INT 4
65828: PUSH
65829: LD_INT 5
65831: PUSH
65832: LD_INT 7
65834: PUSH
65835: LD_INT 11
65837: PUSH
65838: LD_INT 12
65840: PUSH
65841: LD_INT 15
65843: PUSH
65844: LD_INT 16
65846: PUSH
65847: LD_INT 20
65849: PUSH
65850: LD_INT 21
65852: PUSH
65853: LD_INT 22
65855: PUSH
65856: LD_INT 23
65858: PUSH
65859: LD_INT 25
65861: PUSH
65862: LD_INT 26
65864: PUSH
65865: LD_INT 30
65867: PUSH
65868: LD_INT 31
65870: PUSH
65871: LD_INT 32
65873: PUSH
65874: LD_INT 33
65876: PUSH
65877: LD_INT 34
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 101
65903: PUSH
65904: LD_INT 102
65906: PUSH
65907: LD_INT 103
65909: PUSH
65910: LD_INT 106
65912: PUSH
65913: LD_INT 108
65915: PUSH
65916: LD_INT 112
65918: PUSH
65919: LD_INT 113
65921: PUSH
65922: LD_INT 114
65924: PUSH
65925: LD_INT 116
65927: PUSH
65928: LD_INT 117
65930: PUSH
65931: LD_INT 118
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: ST_TO_ADDR
65951: GO 66582
65953: LD_INT 17
65955: DOUBLE
65956: EQUAL
65957: IFTRUE 65961
65959: GO 66185
65961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65962: LD_ADDR_VAR 0 2
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: LD_INT 4
65978: PUSH
65979: LD_INT 5
65981: PUSH
65982: LD_INT 6
65984: PUSH
65985: LD_INT 7
65987: PUSH
65988: LD_INT 8
65990: PUSH
65991: LD_INT 9
65993: PUSH
65994: LD_INT 10
65996: PUSH
65997: LD_INT 11
65999: PUSH
66000: LD_INT 12
66002: PUSH
66003: LD_INT 13
66005: PUSH
66006: LD_INT 14
66008: PUSH
66009: LD_INT 15
66011: PUSH
66012: LD_INT 16
66014: PUSH
66015: LD_INT 17
66017: PUSH
66018: LD_INT 18
66020: PUSH
66021: LD_INT 19
66023: PUSH
66024: LD_INT 20
66026: PUSH
66027: LD_INT 21
66029: PUSH
66030: LD_INT 22
66032: PUSH
66033: LD_INT 23
66035: PUSH
66036: LD_INT 24
66038: PUSH
66039: LD_INT 25
66041: PUSH
66042: LD_INT 26
66044: PUSH
66045: LD_INT 27
66047: PUSH
66048: LD_INT 28
66050: PUSH
66051: LD_INT 29
66053: PUSH
66054: LD_INT 30
66056: PUSH
66057: LD_INT 31
66059: PUSH
66060: LD_INT 32
66062: PUSH
66063: LD_INT 33
66065: PUSH
66066: LD_INT 34
66068: PUSH
66069: LD_INT 36
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 101
66111: PUSH
66112: LD_INT 102
66114: PUSH
66115: LD_INT 103
66117: PUSH
66118: LD_INT 104
66120: PUSH
66121: LD_INT 105
66123: PUSH
66124: LD_INT 106
66126: PUSH
66127: LD_INT 107
66129: PUSH
66130: LD_INT 108
66132: PUSH
66133: LD_INT 109
66135: PUSH
66136: LD_INT 110
66138: PUSH
66139: LD_INT 111
66141: PUSH
66142: LD_INT 112
66144: PUSH
66145: LD_INT 113
66147: PUSH
66148: LD_INT 114
66150: PUSH
66151: LD_INT 116
66153: PUSH
66154: LD_INT 117
66156: PUSH
66157: LD_INT 118
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: ST_TO_ADDR
66183: GO 66582
66185: LD_INT 18
66187: DOUBLE
66188: EQUAL
66189: IFTRUE 66193
66191: GO 66341
66193: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66194: LD_ADDR_VAR 0 2
66198: PUSH
66199: LD_INT 2
66201: PUSH
66202: LD_INT 4
66204: PUSH
66205: LD_INT 5
66207: PUSH
66208: LD_INT 7
66210: PUSH
66211: LD_INT 11
66213: PUSH
66214: LD_INT 12
66216: PUSH
66217: LD_INT 15
66219: PUSH
66220: LD_INT 16
66222: PUSH
66223: LD_INT 20
66225: PUSH
66226: LD_INT 21
66228: PUSH
66229: LD_INT 22
66231: PUSH
66232: LD_INT 23
66234: PUSH
66235: LD_INT 25
66237: PUSH
66238: LD_INT 26
66240: PUSH
66241: LD_INT 30
66243: PUSH
66244: LD_INT 31
66246: PUSH
66247: LD_INT 32
66249: PUSH
66250: LD_INT 33
66252: PUSH
66253: LD_INT 34
66255: PUSH
66256: LD_INT 35
66258: PUSH
66259: LD_INT 36
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 101
66287: PUSH
66288: LD_INT 102
66290: PUSH
66291: LD_INT 103
66293: PUSH
66294: LD_INT 106
66296: PUSH
66297: LD_INT 108
66299: PUSH
66300: LD_INT 112
66302: PUSH
66303: LD_INT 113
66305: PUSH
66306: LD_INT 114
66308: PUSH
66309: LD_INT 115
66311: PUSH
66312: LD_INT 116
66314: PUSH
66315: LD_INT 117
66317: PUSH
66318: LD_INT 118
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: ST_TO_ADDR
66339: GO 66582
66341: LD_INT 19
66343: DOUBLE
66344: EQUAL
66345: IFTRUE 66349
66347: GO 66581
66349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66350: LD_ADDR_VAR 0 2
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: LD_INT 3
66363: PUSH
66364: LD_INT 4
66366: PUSH
66367: LD_INT 5
66369: PUSH
66370: LD_INT 6
66372: PUSH
66373: LD_INT 7
66375: PUSH
66376: LD_INT 8
66378: PUSH
66379: LD_INT 9
66381: PUSH
66382: LD_INT 10
66384: PUSH
66385: LD_INT 11
66387: PUSH
66388: LD_INT 12
66390: PUSH
66391: LD_INT 13
66393: PUSH
66394: LD_INT 14
66396: PUSH
66397: LD_INT 15
66399: PUSH
66400: LD_INT 16
66402: PUSH
66403: LD_INT 17
66405: PUSH
66406: LD_INT 18
66408: PUSH
66409: LD_INT 19
66411: PUSH
66412: LD_INT 20
66414: PUSH
66415: LD_INT 21
66417: PUSH
66418: LD_INT 22
66420: PUSH
66421: LD_INT 23
66423: PUSH
66424: LD_INT 24
66426: PUSH
66427: LD_INT 25
66429: PUSH
66430: LD_INT 26
66432: PUSH
66433: LD_INT 27
66435: PUSH
66436: LD_INT 28
66438: PUSH
66439: LD_INT 29
66441: PUSH
66442: LD_INT 30
66444: PUSH
66445: LD_INT 31
66447: PUSH
66448: LD_INT 32
66450: PUSH
66451: LD_INT 33
66453: PUSH
66454: LD_INT 34
66456: PUSH
66457: LD_INT 35
66459: PUSH
66460: LD_INT 36
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 101
66503: PUSH
66504: LD_INT 102
66506: PUSH
66507: LD_INT 103
66509: PUSH
66510: LD_INT 104
66512: PUSH
66513: LD_INT 105
66515: PUSH
66516: LD_INT 106
66518: PUSH
66519: LD_INT 107
66521: PUSH
66522: LD_INT 108
66524: PUSH
66525: LD_INT 109
66527: PUSH
66528: LD_INT 110
66530: PUSH
66531: LD_INT 111
66533: PUSH
66534: LD_INT 112
66536: PUSH
66537: LD_INT 113
66539: PUSH
66540: LD_INT 114
66542: PUSH
66543: LD_INT 115
66545: PUSH
66546: LD_INT 116
66548: PUSH
66549: LD_INT 117
66551: PUSH
66552: LD_INT 118
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: ST_TO_ADDR
66579: GO 66582
66581: POP
// end else
66582: GO 66813
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66584: LD_ADDR_VAR 0 2
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: LD_INT 5
66603: PUSH
66604: LD_INT 6
66606: PUSH
66607: LD_INT 7
66609: PUSH
66610: LD_INT 8
66612: PUSH
66613: LD_INT 9
66615: PUSH
66616: LD_INT 10
66618: PUSH
66619: LD_INT 11
66621: PUSH
66622: LD_INT 12
66624: PUSH
66625: LD_INT 13
66627: PUSH
66628: LD_INT 14
66630: PUSH
66631: LD_INT 15
66633: PUSH
66634: LD_INT 16
66636: PUSH
66637: LD_INT 17
66639: PUSH
66640: LD_INT 18
66642: PUSH
66643: LD_INT 19
66645: PUSH
66646: LD_INT 20
66648: PUSH
66649: LD_INT 21
66651: PUSH
66652: LD_INT 22
66654: PUSH
66655: LD_INT 23
66657: PUSH
66658: LD_INT 24
66660: PUSH
66661: LD_INT 25
66663: PUSH
66664: LD_INT 26
66666: PUSH
66667: LD_INT 27
66669: PUSH
66670: LD_INT 28
66672: PUSH
66673: LD_INT 29
66675: PUSH
66676: LD_INT 30
66678: PUSH
66679: LD_INT 31
66681: PUSH
66682: LD_INT 32
66684: PUSH
66685: LD_INT 33
66687: PUSH
66688: LD_INT 34
66690: PUSH
66691: LD_INT 35
66693: PUSH
66694: LD_INT 36
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 101
66737: PUSH
66738: LD_INT 102
66740: PUSH
66741: LD_INT 103
66743: PUSH
66744: LD_INT 104
66746: PUSH
66747: LD_INT 105
66749: PUSH
66750: LD_INT 106
66752: PUSH
66753: LD_INT 107
66755: PUSH
66756: LD_INT 108
66758: PUSH
66759: LD_INT 109
66761: PUSH
66762: LD_INT 110
66764: PUSH
66765: LD_INT 111
66767: PUSH
66768: LD_INT 112
66770: PUSH
66771: LD_INT 113
66773: PUSH
66774: LD_INT 114
66776: PUSH
66777: LD_INT 115
66779: PUSH
66780: LD_INT 116
66782: PUSH
66783: LD_INT 117
66785: PUSH
66786: LD_INT 118
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// if result then
66813: LD_VAR 0 2
66817: IFFALSE 67603
// begin normal :=  ;
66819: LD_ADDR_VAR 0 5
66823: PUSH
66824: LD_STRING 
66826: ST_TO_ADDR
// hardcore :=  ;
66827: LD_ADDR_VAR 0 6
66831: PUSH
66832: LD_STRING 
66834: ST_TO_ADDR
// active :=  ;
66835: LD_ADDR_VAR 0 7
66839: PUSH
66840: LD_STRING 
66842: ST_TO_ADDR
// for i = 1 to normalCounter do
66843: LD_ADDR_VAR 0 8
66847: PUSH
66848: DOUBLE
66849: LD_INT 1
66851: DEC
66852: ST_TO_ADDR
66853: LD_EXP 47
66857: PUSH
66858: FOR_TO
66859: IFFALSE 66960
// begin tmp := 0 ;
66861: LD_ADDR_VAR 0 3
66865: PUSH
66866: LD_STRING 0
66868: ST_TO_ADDR
// if result [ 1 ] then
66869: LD_VAR 0 2
66873: PUSH
66874: LD_INT 1
66876: ARRAY
66877: IFFALSE 66942
// if result [ 1 ] [ 1 ] = i then
66879: LD_VAR 0 2
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PUSH
66888: LD_INT 1
66890: ARRAY
66891: PUSH
66892: LD_VAR 0 8
66896: EQUAL
66897: IFFALSE 66942
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66899: LD_ADDR_VAR 0 2
66903: PUSH
66904: LD_VAR 0 2
66908: PPUSH
66909: LD_INT 1
66911: PPUSH
66912: LD_VAR 0 2
66916: PUSH
66917: LD_INT 1
66919: ARRAY
66920: PPUSH
66921: LD_INT 1
66923: PPUSH
66924: CALL_OW 3
66928: PPUSH
66929: CALL_OW 1
66933: ST_TO_ADDR
// tmp := 1 ;
66934: LD_ADDR_VAR 0 3
66938: PUSH
66939: LD_STRING 1
66941: ST_TO_ADDR
// end ; normal := normal & tmp ;
66942: LD_ADDR_VAR 0 5
66946: PUSH
66947: LD_VAR 0 5
66951: PUSH
66952: LD_VAR 0 3
66956: STR
66957: ST_TO_ADDR
// end ;
66958: GO 66858
66960: POP
66961: POP
// for i = 1 to hardcoreCounter do
66962: LD_ADDR_VAR 0 8
66966: PUSH
66967: DOUBLE
66968: LD_INT 1
66970: DEC
66971: ST_TO_ADDR
66972: LD_EXP 48
66976: PUSH
66977: FOR_TO
66978: IFFALSE 67083
// begin tmp := 0 ;
66980: LD_ADDR_VAR 0 3
66984: PUSH
66985: LD_STRING 0
66987: ST_TO_ADDR
// if result [ 2 ] then
66988: LD_VAR 0 2
66992: PUSH
66993: LD_INT 2
66995: ARRAY
66996: IFFALSE 67065
// if result [ 2 ] [ 1 ] = 100 + i then
66998: LD_VAR 0 2
67002: PUSH
67003: LD_INT 2
67005: ARRAY
67006: PUSH
67007: LD_INT 1
67009: ARRAY
67010: PUSH
67011: LD_INT 100
67013: PUSH
67014: LD_VAR 0 8
67018: PLUS
67019: EQUAL
67020: IFFALSE 67065
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67022: LD_ADDR_VAR 0 2
67026: PUSH
67027: LD_VAR 0 2
67031: PPUSH
67032: LD_INT 2
67034: PPUSH
67035: LD_VAR 0 2
67039: PUSH
67040: LD_INT 2
67042: ARRAY
67043: PPUSH
67044: LD_INT 1
67046: PPUSH
67047: CALL_OW 3
67051: PPUSH
67052: CALL_OW 1
67056: ST_TO_ADDR
// tmp := 1 ;
67057: LD_ADDR_VAR 0 3
67061: PUSH
67062: LD_STRING 1
67064: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67065: LD_ADDR_VAR 0 6
67069: PUSH
67070: LD_VAR 0 6
67074: PUSH
67075: LD_VAR 0 3
67079: STR
67080: ST_TO_ADDR
// end ;
67081: GO 66977
67083: POP
67084: POP
// if isGameLoad then
67085: LD_VAR 0 1
67089: IFFALSE 67564
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67091: LD_ADDR_VAR 0 4
67095: PUSH
67096: LD_EXP 51
67100: PUSH
67101: LD_EXP 50
67105: PUSH
67106: LD_EXP 52
67110: PUSH
67111: LD_EXP 49
67115: PUSH
67116: LD_EXP 53
67120: PUSH
67121: LD_EXP 54
67125: PUSH
67126: LD_EXP 55
67130: PUSH
67131: LD_EXP 56
67135: PUSH
67136: LD_EXP 57
67140: PUSH
67141: LD_EXP 58
67145: PUSH
67146: LD_EXP 59
67150: PUSH
67151: LD_EXP 60
67155: PUSH
67156: LD_EXP 61
67160: PUSH
67161: LD_EXP 62
67165: PUSH
67166: LD_EXP 70
67170: PUSH
67171: LD_EXP 71
67175: PUSH
67176: LD_EXP 72
67180: PUSH
67181: LD_EXP 73
67185: PUSH
67186: LD_EXP 75
67190: PUSH
67191: LD_EXP 76
67195: PUSH
67196: LD_EXP 77
67200: PUSH
67201: LD_EXP 80
67205: PUSH
67206: LD_EXP 82
67210: PUSH
67211: LD_EXP 83
67215: PUSH
67216: LD_EXP 84
67220: PUSH
67221: LD_EXP 86
67225: PUSH
67226: LD_EXP 87
67230: PUSH
67231: LD_EXP 90
67235: PUSH
67236: LD_EXP 91
67240: PUSH
67241: LD_EXP 92
67245: PUSH
67246: LD_EXP 93
67250: PUSH
67251: LD_EXP 94
67255: PUSH
67256: LD_EXP 95
67260: PUSH
67261: LD_EXP 96
67265: PUSH
67266: LD_EXP 97
67270: PUSH
67271: LD_EXP 98
67275: PUSH
67276: LD_EXP 63
67280: PUSH
67281: LD_EXP 64
67285: PUSH
67286: LD_EXP 67
67290: PUSH
67291: LD_EXP 68
67295: PUSH
67296: LD_EXP 69
67300: PUSH
67301: LD_EXP 65
67305: PUSH
67306: LD_EXP 66
67310: PUSH
67311: LD_EXP 74
67315: PUSH
67316: LD_EXP 78
67320: PUSH
67321: LD_EXP 79
67325: PUSH
67326: LD_EXP 81
67330: PUSH
67331: LD_EXP 85
67335: PUSH
67336: LD_EXP 88
67340: PUSH
67341: LD_EXP 89
67345: PUSH
67346: LD_EXP 99
67350: PUSH
67351: LD_EXP 100
67355: PUSH
67356: LD_EXP 101
67360: PUSH
67361: LD_EXP 102
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: ST_TO_ADDR
// tmp :=  ;
67422: LD_ADDR_VAR 0 3
67426: PUSH
67427: LD_STRING 
67429: ST_TO_ADDR
// for i = 1 to normalCounter do
67430: LD_ADDR_VAR 0 8
67434: PUSH
67435: DOUBLE
67436: LD_INT 1
67438: DEC
67439: ST_TO_ADDR
67440: LD_EXP 47
67444: PUSH
67445: FOR_TO
67446: IFFALSE 67482
// begin if flags [ i ] then
67448: LD_VAR 0 4
67452: PUSH
67453: LD_VAR 0 8
67457: ARRAY
67458: IFFALSE 67480
// tmp := tmp & i & ; ;
67460: LD_ADDR_VAR 0 3
67464: PUSH
67465: LD_VAR 0 3
67469: PUSH
67470: LD_VAR 0 8
67474: STR
67475: PUSH
67476: LD_STRING ;
67478: STR
67479: ST_TO_ADDR
// end ;
67480: GO 67445
67482: POP
67483: POP
// for i = 1 to hardcoreCounter do
67484: LD_ADDR_VAR 0 8
67488: PUSH
67489: DOUBLE
67490: LD_INT 1
67492: DEC
67493: ST_TO_ADDR
67494: LD_EXP 48
67498: PUSH
67499: FOR_TO
67500: IFFALSE 67546
// begin if flags [ normalCounter + i ] then
67502: LD_VAR 0 4
67506: PUSH
67507: LD_EXP 47
67511: PUSH
67512: LD_VAR 0 8
67516: PLUS
67517: ARRAY
67518: IFFALSE 67544
// tmp := tmp & ( 100 + i ) & ; ;
67520: LD_ADDR_VAR 0 3
67524: PUSH
67525: LD_VAR 0 3
67529: PUSH
67530: LD_INT 100
67532: PUSH
67533: LD_VAR 0 8
67537: PLUS
67538: STR
67539: PUSH
67540: LD_STRING ;
67542: STR
67543: ST_TO_ADDR
// end ;
67544: GO 67499
67546: POP
67547: POP
// if tmp then
67548: LD_VAR 0 3
67552: IFFALSE 67564
// active := tmp ;
67554: LD_ADDR_VAR 0 7
67558: PUSH
67559: LD_VAR 0 3
67563: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67564: LD_STRING getStreamItemsFromMission("
67566: PUSH
67567: LD_VAR 0 5
67571: STR
67572: PUSH
67573: LD_STRING ","
67575: STR
67576: PUSH
67577: LD_VAR 0 6
67581: STR
67582: PUSH
67583: LD_STRING ","
67585: STR
67586: PUSH
67587: LD_VAR 0 7
67591: STR
67592: PUSH
67593: LD_STRING ")
67595: STR
67596: PPUSH
67597: CALL_OW 559
// end else
67601: GO 67610
// ToLua ( getStreamItemsFromMission("","","") ) ;
67603: LD_STRING getStreamItemsFromMission("","","")
67605: PPUSH
67606: CALL_OW 559
// end ;
67610: LD_VAR 0 2
67614: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67615: LD_EXP 46
67619: PUSH
67620: LD_EXP 51
67624: AND
67625: IFFALSE 67749
67627: GO 67629
67629: DISABLE
67630: LD_INT 0
67632: PPUSH
67633: PPUSH
// begin enable ;
67634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67635: LD_ADDR_VAR 0 2
67639: PUSH
67640: LD_INT 22
67642: PUSH
67643: LD_OWVAR 2
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 2
67654: PUSH
67655: LD_INT 34
67657: PUSH
67658: LD_INT 7
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 34
67667: PUSH
67668: LD_INT 45
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 34
67677: PUSH
67678: LD_INT 28
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 34
67687: PUSH
67688: LD_INT 47
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PPUSH
67706: CALL_OW 69
67710: ST_TO_ADDR
// if not tmp then
67711: LD_VAR 0 2
67715: NOT
67716: IFFALSE 67720
// exit ;
67718: GO 67749
// for i in tmp do
67720: LD_ADDR_VAR 0 1
67724: PUSH
67725: LD_VAR 0 2
67729: PUSH
67730: FOR_IN
67731: IFFALSE 67747
// begin SetLives ( i , 0 ) ;
67733: LD_VAR 0 1
67737: PPUSH
67738: LD_INT 0
67740: PPUSH
67741: CALL_OW 234
// end ;
67745: GO 67730
67747: POP
67748: POP
// end ;
67749: PPOPN 2
67751: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67752: LD_EXP 46
67756: PUSH
67757: LD_EXP 52
67761: AND
67762: IFFALSE 67846
67764: GO 67766
67766: DISABLE
67767: LD_INT 0
67769: PPUSH
67770: PPUSH
// begin enable ;
67771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67772: LD_ADDR_VAR 0 2
67776: PUSH
67777: LD_INT 22
67779: PUSH
67780: LD_OWVAR 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 32
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PPUSH
67803: CALL_OW 69
67807: ST_TO_ADDR
// if not tmp then
67808: LD_VAR 0 2
67812: NOT
67813: IFFALSE 67817
// exit ;
67815: GO 67846
// for i in tmp do
67817: LD_ADDR_VAR 0 1
67821: PUSH
67822: LD_VAR 0 2
67826: PUSH
67827: FOR_IN
67828: IFFALSE 67844
// begin SetLives ( i , 0 ) ;
67830: LD_VAR 0 1
67834: PPUSH
67835: LD_INT 0
67837: PPUSH
67838: CALL_OW 234
// end ;
67842: GO 67827
67844: POP
67845: POP
// end ;
67846: PPOPN 2
67848: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67849: LD_EXP 46
67853: PUSH
67854: LD_EXP 49
67858: AND
67859: IFFALSE 67952
67861: GO 67863
67863: DISABLE
67864: LD_INT 0
67866: PPUSH
// begin enable ;
67867: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67868: LD_ADDR_VAR 0 1
67872: PUSH
67873: LD_INT 22
67875: PUSH
67876: LD_OWVAR 2
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 2
67887: PUSH
67888: LD_INT 25
67890: PUSH
67891: LD_INT 5
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 25
67900: PUSH
67901: LD_INT 9
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 25
67910: PUSH
67911: LD_INT 8
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PPUSH
67928: CALL_OW 69
67932: PUSH
67933: FOR_IN
67934: IFFALSE 67950
// begin SetClass ( i , 1 ) ;
67936: LD_VAR 0 1
67940: PPUSH
67941: LD_INT 1
67943: PPUSH
67944: CALL_OW 336
// end ;
67948: GO 67933
67950: POP
67951: POP
// end ;
67952: PPOPN 1
67954: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67955: LD_EXP 46
67959: PUSH
67960: LD_EXP 50
67964: AND
67965: PUSH
67966: LD_OWVAR 65
67970: PUSH
67971: LD_INT 7
67973: LESS
67974: AND
67975: IFFALSE 67989
67977: GO 67979
67979: DISABLE
// begin enable ;
67980: ENABLE
// game_speed := 7 ;
67981: LD_ADDR_OWVAR 65
67985: PUSH
67986: LD_INT 7
67988: ST_TO_ADDR
// end ;
67989: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67990: LD_EXP 46
67994: PUSH
67995: LD_EXP 53
67999: AND
68000: IFFALSE 68202
68002: GO 68004
68004: DISABLE
68005: LD_INT 0
68007: PPUSH
68008: PPUSH
68009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68010: LD_ADDR_VAR 0 3
68014: PUSH
68015: LD_INT 81
68017: PUSH
68018: LD_OWVAR 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 21
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PPUSH
68041: CALL_OW 69
68045: ST_TO_ADDR
// if not tmp then
68046: LD_VAR 0 3
68050: NOT
68051: IFFALSE 68055
// exit ;
68053: GO 68202
// if tmp > 5 then
68055: LD_VAR 0 3
68059: PUSH
68060: LD_INT 5
68062: GREATER
68063: IFFALSE 68075
// k := 5 else
68065: LD_ADDR_VAR 0 2
68069: PUSH
68070: LD_INT 5
68072: ST_TO_ADDR
68073: GO 68085
// k := tmp ;
68075: LD_ADDR_VAR 0 2
68079: PUSH
68080: LD_VAR 0 3
68084: ST_TO_ADDR
// for i := 1 to k do
68085: LD_ADDR_VAR 0 1
68089: PUSH
68090: DOUBLE
68091: LD_INT 1
68093: DEC
68094: ST_TO_ADDR
68095: LD_VAR 0 2
68099: PUSH
68100: FOR_TO
68101: IFFALSE 68200
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68103: LD_VAR 0 3
68107: PUSH
68108: LD_VAR 0 1
68112: ARRAY
68113: PPUSH
68114: LD_VAR 0 1
68118: PUSH
68119: LD_INT 4
68121: MOD
68122: PUSH
68123: LD_INT 1
68125: PLUS
68126: PPUSH
68127: CALL_OW 259
68131: PUSH
68132: LD_INT 10
68134: LESS
68135: IFFALSE 68198
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68137: LD_VAR 0 3
68141: PUSH
68142: LD_VAR 0 1
68146: ARRAY
68147: PPUSH
68148: LD_VAR 0 1
68152: PUSH
68153: LD_INT 4
68155: MOD
68156: PUSH
68157: LD_INT 1
68159: PLUS
68160: PPUSH
68161: LD_VAR 0 3
68165: PUSH
68166: LD_VAR 0 1
68170: ARRAY
68171: PPUSH
68172: LD_VAR 0 1
68176: PUSH
68177: LD_INT 4
68179: MOD
68180: PUSH
68181: LD_INT 1
68183: PLUS
68184: PPUSH
68185: CALL_OW 259
68189: PUSH
68190: LD_INT 1
68192: PLUS
68193: PPUSH
68194: CALL_OW 237
68198: GO 68100
68200: POP
68201: POP
// end ;
68202: PPOPN 3
68204: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68205: LD_EXP 46
68209: PUSH
68210: LD_EXP 54
68214: AND
68215: IFFALSE 68235
68217: GO 68219
68219: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68220: LD_INT 4
68222: PPUSH
68223: LD_OWVAR 2
68227: PPUSH
68228: LD_INT 0
68230: PPUSH
68231: CALL_OW 324
68235: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68236: LD_EXP 46
68240: PUSH
68241: LD_EXP 83
68245: AND
68246: IFFALSE 68266
68248: GO 68250
68250: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68251: LD_INT 19
68253: PPUSH
68254: LD_OWVAR 2
68258: PPUSH
68259: LD_INT 0
68261: PPUSH
68262: CALL_OW 324
68266: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68267: LD_EXP 46
68271: PUSH
68272: LD_EXP 55
68276: AND
68277: IFFALSE 68379
68279: GO 68281
68281: DISABLE
68282: LD_INT 0
68284: PPUSH
68285: PPUSH
// begin enable ;
68286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68287: LD_ADDR_VAR 0 2
68291: PUSH
68292: LD_INT 22
68294: PUSH
68295: LD_OWVAR 2
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: LD_INT 34
68309: PUSH
68310: LD_INT 11
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 34
68319: PUSH
68320: LD_INT 30
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PPUSH
68336: CALL_OW 69
68340: ST_TO_ADDR
// if not tmp then
68341: LD_VAR 0 2
68345: NOT
68346: IFFALSE 68350
// exit ;
68348: GO 68379
// for i in tmp do
68350: LD_ADDR_VAR 0 1
68354: PUSH
68355: LD_VAR 0 2
68359: PUSH
68360: FOR_IN
68361: IFFALSE 68377
// begin SetLives ( i , 0 ) ;
68363: LD_VAR 0 1
68367: PPUSH
68368: LD_INT 0
68370: PPUSH
68371: CALL_OW 234
// end ;
68375: GO 68360
68377: POP
68378: POP
// end ;
68379: PPOPN 2
68381: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68382: LD_EXP 46
68386: PUSH
68387: LD_EXP 56
68391: AND
68392: IFFALSE 68412
68394: GO 68396
68396: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68397: LD_INT 32
68399: PPUSH
68400: LD_OWVAR 2
68404: PPUSH
68405: LD_INT 0
68407: PPUSH
68408: CALL_OW 324
68412: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68413: LD_EXP 46
68417: PUSH
68418: LD_EXP 57
68422: AND
68423: IFFALSE 68604
68425: GO 68427
68427: DISABLE
68428: LD_INT 0
68430: PPUSH
68431: PPUSH
68432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68433: LD_ADDR_VAR 0 2
68437: PUSH
68438: LD_INT 22
68440: PUSH
68441: LD_OWVAR 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 33
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PPUSH
68464: CALL_OW 69
68468: ST_TO_ADDR
// if not tmp then
68469: LD_VAR 0 2
68473: NOT
68474: IFFALSE 68478
// exit ;
68476: GO 68604
// side := 0 ;
68478: LD_ADDR_VAR 0 3
68482: PUSH
68483: LD_INT 0
68485: ST_TO_ADDR
// for i := 1 to 8 do
68486: LD_ADDR_VAR 0 1
68490: PUSH
68491: DOUBLE
68492: LD_INT 1
68494: DEC
68495: ST_TO_ADDR
68496: LD_INT 8
68498: PUSH
68499: FOR_TO
68500: IFFALSE 68548
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68502: LD_OWVAR 2
68506: PUSH
68507: LD_VAR 0 1
68511: NONEQUAL
68512: PUSH
68513: LD_OWVAR 2
68517: PPUSH
68518: LD_VAR 0 1
68522: PPUSH
68523: CALL_OW 81
68527: PUSH
68528: LD_INT 2
68530: EQUAL
68531: AND
68532: IFFALSE 68546
// begin side := i ;
68534: LD_ADDR_VAR 0 3
68538: PUSH
68539: LD_VAR 0 1
68543: ST_TO_ADDR
// break ;
68544: GO 68548
// end ;
68546: GO 68499
68548: POP
68549: POP
// if not side then
68550: LD_VAR 0 3
68554: NOT
68555: IFFALSE 68559
// exit ;
68557: GO 68604
// for i := 1 to tmp do
68559: LD_ADDR_VAR 0 1
68563: PUSH
68564: DOUBLE
68565: LD_INT 1
68567: DEC
68568: ST_TO_ADDR
68569: LD_VAR 0 2
68573: PUSH
68574: FOR_TO
68575: IFFALSE 68602
// if Prob ( 60 ) then
68577: LD_INT 60
68579: PPUSH
68580: CALL_OW 13
68584: IFFALSE 68600
// SetSide ( i , side ) ;
68586: LD_VAR 0 1
68590: PPUSH
68591: LD_VAR 0 3
68595: PPUSH
68596: CALL_OW 235
68600: GO 68574
68602: POP
68603: POP
// end ;
68604: PPOPN 3
68606: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68607: LD_EXP 46
68611: PUSH
68612: LD_EXP 59
68616: AND
68617: IFFALSE 68736
68619: GO 68621
68621: DISABLE
68622: LD_INT 0
68624: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68625: LD_ADDR_VAR 0 1
68629: PUSH
68630: LD_INT 22
68632: PUSH
68633: LD_OWVAR 2
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 21
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 3
68654: PUSH
68655: LD_INT 23
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: PPUSH
68674: CALL_OW 69
68678: PUSH
68679: FOR_IN
68680: IFFALSE 68734
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68682: LD_VAR 0 1
68686: PPUSH
68687: CALL_OW 257
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: LD_INT 2
68697: PUSH
68698: LD_INT 3
68700: PUSH
68701: LD_INT 4
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: IN
68710: IFFALSE 68732
// SetClass ( un , rand ( 1 , 4 ) ) ;
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_INT 1
68719: PPUSH
68720: LD_INT 4
68722: PPUSH
68723: CALL_OW 12
68727: PPUSH
68728: CALL_OW 336
68732: GO 68679
68734: POP
68735: POP
// end ;
68736: PPOPN 1
68738: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68739: LD_EXP 46
68743: PUSH
68744: LD_EXP 58
68748: AND
68749: IFFALSE 68828
68751: GO 68753
68753: DISABLE
68754: LD_INT 0
68756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68757: LD_ADDR_VAR 0 1
68761: PUSH
68762: LD_INT 22
68764: PUSH
68765: LD_OWVAR 2
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 21
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PPUSH
68788: CALL_OW 69
68792: ST_TO_ADDR
// if not tmp then
68793: LD_VAR 0 1
68797: NOT
68798: IFFALSE 68802
// exit ;
68800: GO 68828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68802: LD_VAR 0 1
68806: PUSH
68807: LD_INT 1
68809: PPUSH
68810: LD_VAR 0 1
68814: PPUSH
68815: CALL_OW 12
68819: ARRAY
68820: PPUSH
68821: LD_INT 100
68823: PPUSH
68824: CALL_OW 234
// end ;
68828: PPOPN 1
68830: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68831: LD_EXP 46
68835: PUSH
68836: LD_EXP 60
68840: AND
68841: IFFALSE 68939
68843: GO 68845
68845: DISABLE
68846: LD_INT 0
68848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68849: LD_ADDR_VAR 0 1
68853: PUSH
68854: LD_INT 22
68856: PUSH
68857: LD_OWVAR 2
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 21
68868: PUSH
68869: LD_INT 1
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PPUSH
68880: CALL_OW 69
68884: ST_TO_ADDR
// if not tmp then
68885: LD_VAR 0 1
68889: NOT
68890: IFFALSE 68894
// exit ;
68892: GO 68939
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68894: LD_VAR 0 1
68898: PUSH
68899: LD_INT 1
68901: PPUSH
68902: LD_VAR 0 1
68906: PPUSH
68907: CALL_OW 12
68911: ARRAY
68912: PPUSH
68913: LD_INT 1
68915: PPUSH
68916: LD_INT 4
68918: PPUSH
68919: CALL_OW 12
68923: PPUSH
68924: LD_INT 3000
68926: PPUSH
68927: LD_INT 9000
68929: PPUSH
68930: CALL_OW 12
68934: PPUSH
68935: CALL_OW 492
// end ;
68939: PPOPN 1
68941: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68942: LD_EXP 46
68946: PUSH
68947: LD_EXP 61
68951: AND
68952: IFFALSE 68972
68954: GO 68956
68956: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68957: LD_INT 1
68959: PPUSH
68960: LD_OWVAR 2
68964: PPUSH
68965: LD_INT 0
68967: PPUSH
68968: CALL_OW 324
68972: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68973: LD_EXP 46
68977: PUSH
68978: LD_EXP 62
68982: AND
68983: IFFALSE 69066
68985: GO 68987
68987: DISABLE
68988: LD_INT 0
68990: PPUSH
68991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68992: LD_ADDR_VAR 0 2
68996: PUSH
68997: LD_INT 22
68999: PUSH
69000: LD_OWVAR 2
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 21
69011: PUSH
69012: LD_INT 3
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PPUSH
69023: CALL_OW 69
69027: ST_TO_ADDR
// if not tmp then
69028: LD_VAR 0 2
69032: NOT
69033: IFFALSE 69037
// exit ;
69035: GO 69066
// for i in tmp do
69037: LD_ADDR_VAR 0 1
69041: PUSH
69042: LD_VAR 0 2
69046: PUSH
69047: FOR_IN
69048: IFFALSE 69064
// SetBLevel ( i , 10 ) ;
69050: LD_VAR 0 1
69054: PPUSH
69055: LD_INT 10
69057: PPUSH
69058: CALL_OW 241
69062: GO 69047
69064: POP
69065: POP
// end ;
69066: PPOPN 2
69068: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69069: LD_EXP 46
69073: PUSH
69074: LD_EXP 63
69078: AND
69079: IFFALSE 69190
69081: GO 69083
69083: DISABLE
69084: LD_INT 0
69086: PPUSH
69087: PPUSH
69088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69089: LD_ADDR_VAR 0 3
69093: PUSH
69094: LD_INT 22
69096: PUSH
69097: LD_OWVAR 2
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 25
69108: PUSH
69109: LD_INT 1
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PPUSH
69120: CALL_OW 69
69124: ST_TO_ADDR
// if not tmp then
69125: LD_VAR 0 3
69129: NOT
69130: IFFALSE 69134
// exit ;
69132: GO 69190
// un := tmp [ rand ( 1 , tmp ) ] ;
69134: LD_ADDR_VAR 0 2
69138: PUSH
69139: LD_VAR 0 3
69143: PUSH
69144: LD_INT 1
69146: PPUSH
69147: LD_VAR 0 3
69151: PPUSH
69152: CALL_OW 12
69156: ARRAY
69157: ST_TO_ADDR
// if Crawls ( un ) then
69158: LD_VAR 0 2
69162: PPUSH
69163: CALL_OW 318
69167: IFFALSE 69178
// ComWalk ( un ) ;
69169: LD_VAR 0 2
69173: PPUSH
69174: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69178: LD_VAR 0 2
69182: PPUSH
69183: LD_INT 5
69185: PPUSH
69186: CALL_OW 336
// end ;
69190: PPOPN 3
69192: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69193: LD_EXP 46
69197: PUSH
69198: LD_EXP 64
69202: AND
69203: PUSH
69204: LD_OWVAR 67
69208: PUSH
69209: LD_INT 4
69211: LESS
69212: AND
69213: IFFALSE 69232
69215: GO 69217
69217: DISABLE
// begin Difficulty := Difficulty + 1 ;
69218: LD_ADDR_OWVAR 67
69222: PUSH
69223: LD_OWVAR 67
69227: PUSH
69228: LD_INT 1
69230: PLUS
69231: ST_TO_ADDR
// end ;
69232: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69233: LD_EXP 46
69237: PUSH
69238: LD_EXP 65
69242: AND
69243: IFFALSE 69346
69245: GO 69247
69247: DISABLE
69248: LD_INT 0
69250: PPUSH
// begin for i := 1 to 5 do
69251: LD_ADDR_VAR 0 1
69255: PUSH
69256: DOUBLE
69257: LD_INT 1
69259: DEC
69260: ST_TO_ADDR
69261: LD_INT 5
69263: PUSH
69264: FOR_TO
69265: IFFALSE 69344
// begin uc_nation := nation_nature ;
69267: LD_ADDR_OWVAR 21
69271: PUSH
69272: LD_INT 0
69274: ST_TO_ADDR
// uc_side := 0 ;
69275: LD_ADDR_OWVAR 20
69279: PUSH
69280: LD_INT 0
69282: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69283: LD_ADDR_OWVAR 29
69287: PUSH
69288: LD_INT 12
69290: PUSH
69291: LD_INT 12
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: ST_TO_ADDR
// hc_agressivity := 20 ;
69298: LD_ADDR_OWVAR 35
69302: PUSH
69303: LD_INT 20
69305: ST_TO_ADDR
// hc_class := class_tiger ;
69306: LD_ADDR_OWVAR 28
69310: PUSH
69311: LD_INT 14
69313: ST_TO_ADDR
// hc_gallery :=  ;
69314: LD_ADDR_OWVAR 33
69318: PUSH
69319: LD_STRING 
69321: ST_TO_ADDR
// hc_name :=  ;
69322: LD_ADDR_OWVAR 26
69326: PUSH
69327: LD_STRING 
69329: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69330: CALL_OW 44
69334: PPUSH
69335: LD_INT 0
69337: PPUSH
69338: CALL_OW 51
// end ;
69342: GO 69264
69344: POP
69345: POP
// end ;
69346: PPOPN 1
69348: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69349: LD_EXP 46
69353: PUSH
69354: LD_EXP 66
69358: AND
69359: IFFALSE 69368
69361: GO 69363
69363: DISABLE
// StreamSibBomb ;
69364: CALL 69369 0 0
69368: END
// export function StreamSibBomb ; var i , x , y ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
69373: PPUSH
69374: PPUSH
// result := false ;
69375: LD_ADDR_VAR 0 1
69379: PUSH
69380: LD_INT 0
69382: ST_TO_ADDR
// for i := 1 to 16 do
69383: LD_ADDR_VAR 0 2
69387: PUSH
69388: DOUBLE
69389: LD_INT 1
69391: DEC
69392: ST_TO_ADDR
69393: LD_INT 16
69395: PUSH
69396: FOR_TO
69397: IFFALSE 69596
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69399: LD_ADDR_VAR 0 3
69403: PUSH
69404: LD_INT 10
69406: PUSH
69407: LD_INT 20
69409: PUSH
69410: LD_INT 30
69412: PUSH
69413: LD_INT 40
69415: PUSH
69416: LD_INT 50
69418: PUSH
69419: LD_INT 60
69421: PUSH
69422: LD_INT 70
69424: PUSH
69425: LD_INT 80
69427: PUSH
69428: LD_INT 90
69430: PUSH
69431: LD_INT 100
69433: PUSH
69434: LD_INT 110
69436: PUSH
69437: LD_INT 120
69439: PUSH
69440: LD_INT 130
69442: PUSH
69443: LD_INT 140
69445: PUSH
69446: LD_INT 150
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PPUSH
69469: LD_INT 15
69471: PPUSH
69472: CALL_OW 12
69476: ARRAY
69477: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69478: LD_ADDR_VAR 0 4
69482: PUSH
69483: LD_INT 10
69485: PUSH
69486: LD_INT 20
69488: PUSH
69489: LD_INT 30
69491: PUSH
69492: LD_INT 40
69494: PUSH
69495: LD_INT 50
69497: PUSH
69498: LD_INT 60
69500: PUSH
69501: LD_INT 70
69503: PUSH
69504: LD_INT 80
69506: PUSH
69507: LD_INT 90
69509: PUSH
69510: LD_INT 100
69512: PUSH
69513: LD_INT 110
69515: PUSH
69516: LD_INT 120
69518: PUSH
69519: LD_INT 130
69521: PUSH
69522: LD_INT 140
69524: PUSH
69525: LD_INT 150
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 1
69547: PPUSH
69548: LD_INT 15
69550: PPUSH
69551: CALL_OW 12
69555: ARRAY
69556: ST_TO_ADDR
// if ValidHex ( x , y ) then
69557: LD_VAR 0 3
69561: PPUSH
69562: LD_VAR 0 4
69566: PPUSH
69567: CALL_OW 488
69571: IFFALSE 69594
// begin result := [ x , y ] ;
69573: LD_ADDR_VAR 0 1
69577: PUSH
69578: LD_VAR 0 3
69582: PUSH
69583: LD_VAR 0 4
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: ST_TO_ADDR
// break ;
69592: GO 69596
// end ; end ;
69594: GO 69396
69596: POP
69597: POP
// if result then
69598: LD_VAR 0 1
69602: IFFALSE 69662
// begin ToLua ( playSibBomb() ) ;
69604: LD_STRING playSibBomb()
69606: PPUSH
69607: CALL_OW 559
// wait ( 0 0$14 ) ;
69611: LD_INT 490
69613: PPUSH
69614: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69618: LD_VAR 0 1
69622: PUSH
69623: LD_INT 1
69625: ARRAY
69626: PPUSH
69627: LD_VAR 0 1
69631: PUSH
69632: LD_INT 2
69634: ARRAY
69635: PPUSH
69636: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69640: LD_VAR 0 1
69644: PUSH
69645: LD_INT 1
69647: ARRAY
69648: PPUSH
69649: LD_VAR 0 1
69653: PUSH
69654: LD_INT 2
69656: ARRAY
69657: PPUSH
69658: CALL_OW 429
// end ; end ;
69662: LD_VAR 0 1
69666: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69667: LD_EXP 46
69671: PUSH
69672: LD_EXP 68
69676: AND
69677: IFFALSE 69689
69679: GO 69681
69681: DISABLE
// YouLost (  ) ;
69682: LD_STRING 
69684: PPUSH
69685: CALL_OW 104
69689: END
// every 0 0$1 trigger StreamModeActive and sFog do
69690: LD_EXP 46
69694: PUSH
69695: LD_EXP 67
69699: AND
69700: IFFALSE 69714
69702: GO 69704
69704: DISABLE
// FogOff ( your_side ) ;
69705: LD_OWVAR 2
69709: PPUSH
69710: CALL_OW 344
69714: END
// every 0 0$1 trigger StreamModeActive and sSun do
69715: LD_EXP 46
69719: PUSH
69720: LD_EXP 69
69724: AND
69725: IFFALSE 69753
69727: GO 69729
69729: DISABLE
// begin solar_recharge_percent := 0 ;
69730: LD_ADDR_OWVAR 79
69734: PUSH
69735: LD_INT 0
69737: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69738: LD_INT 10500
69740: PPUSH
69741: CALL_OW 67
// solar_recharge_percent := 100 ;
69745: LD_ADDR_OWVAR 79
69749: PUSH
69750: LD_INT 100
69752: ST_TO_ADDR
// end ;
69753: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69754: LD_EXP 46
69758: PUSH
69759: LD_EXP 70
69763: AND
69764: IFFALSE 70003
69766: GO 69768
69768: DISABLE
69769: LD_INT 0
69771: PPUSH
69772: PPUSH
69773: PPUSH
// begin tmp := [ ] ;
69774: LD_ADDR_VAR 0 3
69778: PUSH
69779: EMPTY
69780: ST_TO_ADDR
// for i := 1 to 6 do
69781: LD_ADDR_VAR 0 1
69785: PUSH
69786: DOUBLE
69787: LD_INT 1
69789: DEC
69790: ST_TO_ADDR
69791: LD_INT 6
69793: PUSH
69794: FOR_TO
69795: IFFALSE 69900
// begin uc_nation := nation_nature ;
69797: LD_ADDR_OWVAR 21
69801: PUSH
69802: LD_INT 0
69804: ST_TO_ADDR
// uc_side := 0 ;
69805: LD_ADDR_OWVAR 20
69809: PUSH
69810: LD_INT 0
69812: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69813: LD_ADDR_OWVAR 29
69817: PUSH
69818: LD_INT 12
69820: PUSH
69821: LD_INT 12
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: ST_TO_ADDR
// hc_agressivity := 20 ;
69828: LD_ADDR_OWVAR 35
69832: PUSH
69833: LD_INT 20
69835: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69836: LD_ADDR_OWVAR 28
69840: PUSH
69841: LD_INT 17
69843: ST_TO_ADDR
// hc_gallery :=  ;
69844: LD_ADDR_OWVAR 33
69848: PUSH
69849: LD_STRING 
69851: ST_TO_ADDR
// hc_name :=  ;
69852: LD_ADDR_OWVAR 26
69856: PUSH
69857: LD_STRING 
69859: ST_TO_ADDR
// un := CreateHuman ;
69860: LD_ADDR_VAR 0 2
69864: PUSH
69865: CALL_OW 44
69869: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69870: LD_VAR 0 2
69874: PPUSH
69875: LD_INT 1
69877: PPUSH
69878: CALL_OW 51
// tmp := tmp ^ un ;
69882: LD_ADDR_VAR 0 3
69886: PUSH
69887: LD_VAR 0 3
69891: PUSH
69892: LD_VAR 0 2
69896: ADD
69897: ST_TO_ADDR
// end ;
69898: GO 69794
69900: POP
69901: POP
// repeat wait ( 0 0$1 ) ;
69902: LD_INT 35
69904: PPUSH
69905: CALL_OW 67
// for un in tmp do
69909: LD_ADDR_VAR 0 2
69913: PUSH
69914: LD_VAR 0 3
69918: PUSH
69919: FOR_IN
69920: IFFALSE 69994
// begin if IsDead ( un ) then
69922: LD_VAR 0 2
69926: PPUSH
69927: CALL_OW 301
69931: IFFALSE 69951
// begin tmp := tmp diff un ;
69933: LD_ADDR_VAR 0 3
69937: PUSH
69938: LD_VAR 0 3
69942: PUSH
69943: LD_VAR 0 2
69947: DIFF
69948: ST_TO_ADDR
// continue ;
69949: GO 69919
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69951: LD_VAR 0 2
69955: PPUSH
69956: LD_INT 3
69958: PUSH
69959: LD_INT 22
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PPUSH
69973: CALL_OW 69
69977: PPUSH
69978: LD_VAR 0 2
69982: PPUSH
69983: CALL_OW 74
69987: PPUSH
69988: CALL_OW 115
// end ;
69992: GO 69919
69994: POP
69995: POP
// until not tmp ;
69996: LD_VAR 0 3
70000: NOT
70001: IFFALSE 69902
// end ;
70003: PPOPN 3
70005: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70006: LD_EXP 46
70010: PUSH
70011: LD_EXP 71
70015: AND
70016: IFFALSE 70070
70018: GO 70020
70020: DISABLE
// begin ToLua ( displayTroll(); ) ;
70021: LD_STRING displayTroll();
70023: PPUSH
70024: CALL_OW 559
// wait ( 3 3$00 ) ;
70028: LD_INT 6300
70030: PPUSH
70031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70035: LD_STRING hideTroll();
70037: PPUSH
70038: CALL_OW 559
// wait ( 1 1$00 ) ;
70042: LD_INT 2100
70044: PPUSH
70045: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70049: LD_STRING displayTroll();
70051: PPUSH
70052: CALL_OW 559
// wait ( 1 1$00 ) ;
70056: LD_INT 2100
70058: PPUSH
70059: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70063: LD_STRING hideTroll();
70065: PPUSH
70066: CALL_OW 559
// end ;
70070: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70071: LD_EXP 46
70075: PUSH
70076: LD_EXP 72
70080: AND
70081: IFFALSE 70144
70083: GO 70085
70085: DISABLE
70086: LD_INT 0
70088: PPUSH
// begin p := 0 ;
70089: LD_ADDR_VAR 0 1
70093: PUSH
70094: LD_INT 0
70096: ST_TO_ADDR
// repeat game_speed := 1 ;
70097: LD_ADDR_OWVAR 65
70101: PUSH
70102: LD_INT 1
70104: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70105: LD_INT 35
70107: PPUSH
70108: CALL_OW 67
// p := p + 1 ;
70112: LD_ADDR_VAR 0 1
70116: PUSH
70117: LD_VAR 0 1
70121: PUSH
70122: LD_INT 1
70124: PLUS
70125: ST_TO_ADDR
// until p >= 60 ;
70126: LD_VAR 0 1
70130: PUSH
70131: LD_INT 60
70133: GREATEREQUAL
70134: IFFALSE 70097
// game_speed := 4 ;
70136: LD_ADDR_OWVAR 65
70140: PUSH
70141: LD_INT 4
70143: ST_TO_ADDR
// end ;
70144: PPOPN 1
70146: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70147: LD_EXP 46
70151: PUSH
70152: LD_EXP 73
70156: AND
70157: IFFALSE 70303
70159: GO 70161
70161: DISABLE
70162: LD_INT 0
70164: PPUSH
70165: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70166: LD_ADDR_VAR 0 1
70170: PUSH
70171: LD_INT 22
70173: PUSH
70174: LD_OWVAR 2
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 2
70185: PUSH
70186: LD_INT 30
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 30
70198: PUSH
70199: LD_INT 1
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PPUSH
70215: CALL_OW 69
70219: ST_TO_ADDR
// if not depot then
70220: LD_VAR 0 1
70224: NOT
70225: IFFALSE 70229
// exit ;
70227: GO 70303
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70229: LD_ADDR_VAR 0 2
70233: PUSH
70234: LD_VAR 0 1
70238: PUSH
70239: LD_INT 1
70241: PPUSH
70242: LD_VAR 0 1
70246: PPUSH
70247: CALL_OW 12
70251: ARRAY
70252: PPUSH
70253: CALL_OW 274
70257: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70258: LD_VAR 0 2
70262: PPUSH
70263: LD_INT 1
70265: PPUSH
70266: LD_INT 0
70268: PPUSH
70269: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70273: LD_VAR 0 2
70277: PPUSH
70278: LD_INT 2
70280: PPUSH
70281: LD_INT 0
70283: PPUSH
70284: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70288: LD_VAR 0 2
70292: PPUSH
70293: LD_INT 3
70295: PPUSH
70296: LD_INT 0
70298: PPUSH
70299: CALL_OW 277
// end ;
70303: PPOPN 2
70305: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70306: LD_EXP 46
70310: PUSH
70311: LD_EXP 74
70315: AND
70316: IFFALSE 70413
70318: GO 70320
70320: DISABLE
70321: LD_INT 0
70323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70324: LD_ADDR_VAR 0 1
70328: PUSH
70329: LD_INT 22
70331: PUSH
70332: LD_OWVAR 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 21
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 3
70353: PUSH
70354: LD_INT 23
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: LIST
70372: PPUSH
70373: CALL_OW 69
70377: ST_TO_ADDR
// if not tmp then
70378: LD_VAR 0 1
70382: NOT
70383: IFFALSE 70387
// exit ;
70385: GO 70413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70387: LD_VAR 0 1
70391: PUSH
70392: LD_INT 1
70394: PPUSH
70395: LD_VAR 0 1
70399: PPUSH
70400: CALL_OW 12
70404: ARRAY
70405: PPUSH
70406: LD_INT 200
70408: PPUSH
70409: CALL_OW 234
// end ;
70413: PPOPN 1
70415: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70416: LD_EXP 46
70420: PUSH
70421: LD_EXP 75
70425: AND
70426: IFFALSE 70505
70428: GO 70430
70430: DISABLE
70431: LD_INT 0
70433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70434: LD_ADDR_VAR 0 1
70438: PUSH
70439: LD_INT 22
70441: PUSH
70442: LD_OWVAR 2
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 21
70453: PUSH
70454: LD_INT 2
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PPUSH
70465: CALL_OW 69
70469: ST_TO_ADDR
// if not tmp then
70470: LD_VAR 0 1
70474: NOT
70475: IFFALSE 70479
// exit ;
70477: GO 70505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70479: LD_VAR 0 1
70483: PUSH
70484: LD_INT 1
70486: PPUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 12
70496: ARRAY
70497: PPUSH
70498: LD_INT 60
70500: PPUSH
70501: CALL_OW 234
// end ;
70505: PPOPN 1
70507: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70508: LD_EXP 46
70512: PUSH
70513: LD_EXP 76
70517: AND
70518: IFFALSE 70617
70520: GO 70522
70522: DISABLE
70523: LD_INT 0
70525: PPUSH
70526: PPUSH
// begin enable ;
70527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70528: LD_ADDR_VAR 0 1
70532: PUSH
70533: LD_INT 22
70535: PUSH
70536: LD_OWVAR 2
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 61
70547: PUSH
70548: EMPTY
70549: LIST
70550: PUSH
70551: LD_INT 33
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: LIST
70565: PPUSH
70566: CALL_OW 69
70570: ST_TO_ADDR
// if not tmp then
70571: LD_VAR 0 1
70575: NOT
70576: IFFALSE 70580
// exit ;
70578: GO 70617
// for i in tmp do
70580: LD_ADDR_VAR 0 2
70584: PUSH
70585: LD_VAR 0 1
70589: PUSH
70590: FOR_IN
70591: IFFALSE 70615
// if IsControledBy ( i ) then
70593: LD_VAR 0 2
70597: PPUSH
70598: CALL_OW 312
70602: IFFALSE 70613
// ComUnlink ( i ) ;
70604: LD_VAR 0 2
70608: PPUSH
70609: CALL_OW 136
70613: GO 70590
70615: POP
70616: POP
// end ;
70617: PPOPN 2
70619: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70620: LD_EXP 46
70624: PUSH
70625: LD_EXP 77
70629: AND
70630: IFFALSE 70770
70632: GO 70634
70634: DISABLE
70635: LD_INT 0
70637: PPUSH
70638: PPUSH
// begin ToLua ( displayPowell(); ) ;
70639: LD_STRING displayPowell();
70641: PPUSH
70642: CALL_OW 559
// uc_side := 0 ;
70646: LD_ADDR_OWVAR 20
70650: PUSH
70651: LD_INT 0
70653: ST_TO_ADDR
// uc_nation := 2 ;
70654: LD_ADDR_OWVAR 21
70658: PUSH
70659: LD_INT 2
70661: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70662: LD_ADDR_OWVAR 37
70666: PUSH
70667: LD_INT 14
70669: ST_TO_ADDR
// vc_engine := engine_siberite ;
70670: LD_ADDR_OWVAR 39
70674: PUSH
70675: LD_INT 3
70677: ST_TO_ADDR
// vc_control := control_apeman ;
70678: LD_ADDR_OWVAR 38
70682: PUSH
70683: LD_INT 5
70685: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70686: LD_ADDR_OWVAR 40
70690: PUSH
70691: LD_INT 29
70693: ST_TO_ADDR
// un := CreateVehicle ;
70694: LD_ADDR_VAR 0 2
70698: PUSH
70699: CALL_OW 45
70703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70704: LD_VAR 0 2
70708: PPUSH
70709: LD_INT 1
70711: PPUSH
70712: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70716: LD_INT 35
70718: PPUSH
70719: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70723: LD_VAR 0 2
70727: PPUSH
70728: LD_INT 22
70730: PUSH
70731: LD_OWVAR 2
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PPUSH
70740: CALL_OW 69
70744: PPUSH
70745: LD_VAR 0 2
70749: PPUSH
70750: CALL_OW 74
70754: PPUSH
70755: CALL_OW 115
// until IsDead ( un ) ;
70759: LD_VAR 0 2
70763: PPUSH
70764: CALL_OW 301
70768: IFFALSE 70716
// end ;
70770: PPOPN 2
70772: END
// every 0 0$1 trigger StreamModeActive and sStu do
70773: LD_EXP 46
70777: PUSH
70778: LD_EXP 85
70782: AND
70783: IFFALSE 70799
70785: GO 70787
70787: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70788: LD_STRING displayStucuk();
70790: PPUSH
70791: CALL_OW 559
// ResetFog ;
70795: CALL_OW 335
// end ;
70799: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70800: LD_EXP 46
70804: PUSH
70805: LD_EXP 78
70809: AND
70810: IFFALSE 70951
70812: GO 70814
70814: DISABLE
70815: LD_INT 0
70817: PPUSH
70818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70819: LD_ADDR_VAR 0 2
70823: PUSH
70824: LD_INT 22
70826: PUSH
70827: LD_OWVAR 2
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 21
70838: PUSH
70839: LD_INT 1
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PPUSH
70850: CALL_OW 69
70854: ST_TO_ADDR
// if not tmp then
70855: LD_VAR 0 2
70859: NOT
70860: IFFALSE 70864
// exit ;
70862: GO 70951
// un := tmp [ rand ( 1 , tmp ) ] ;
70864: LD_ADDR_VAR 0 1
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 1
70876: PPUSH
70877: LD_VAR 0 2
70881: PPUSH
70882: CALL_OW 12
70886: ARRAY
70887: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70888: LD_VAR 0 1
70892: PPUSH
70893: LD_INT 0
70895: PPUSH
70896: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70900: LD_VAR 0 1
70904: PPUSH
70905: LD_OWVAR 3
70909: PUSH
70910: LD_VAR 0 1
70914: DIFF
70915: PPUSH
70916: LD_VAR 0 1
70920: PPUSH
70921: CALL_OW 74
70925: PPUSH
70926: CALL_OW 115
// wait ( 0 0$20 ) ;
70930: LD_INT 700
70932: PPUSH
70933: CALL_OW 67
// SetSide ( un , your_side ) ;
70937: LD_VAR 0 1
70941: PPUSH
70942: LD_OWVAR 2
70946: PPUSH
70947: CALL_OW 235
// end ;
70951: PPOPN 2
70953: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70954: LD_EXP 46
70958: PUSH
70959: LD_EXP 79
70963: AND
70964: IFFALSE 71070
70966: GO 70968
70968: DISABLE
70969: LD_INT 0
70971: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70972: LD_ADDR_VAR 0 1
70976: PUSH
70977: LD_INT 22
70979: PUSH
70980: LD_OWVAR 2
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 2
70991: PUSH
70992: LD_INT 30
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 30
71004: PUSH
71005: LD_INT 1
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PPUSH
71021: CALL_OW 69
71025: ST_TO_ADDR
// if not depot then
71026: LD_VAR 0 1
71030: NOT
71031: IFFALSE 71035
// exit ;
71033: GO 71070
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71035: LD_VAR 0 1
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PPUSH
71044: CALL_OW 250
71048: PPUSH
71049: LD_VAR 0 1
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: PPUSH
71058: CALL_OW 251
71062: PPUSH
71063: LD_INT 70
71065: PPUSH
71066: CALL_OW 495
// end ;
71070: PPOPN 1
71072: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71073: LD_EXP 46
71077: PUSH
71078: LD_EXP 80
71082: AND
71083: IFFALSE 71294
71085: GO 71087
71087: DISABLE
71088: LD_INT 0
71090: PPUSH
71091: PPUSH
71092: PPUSH
71093: PPUSH
71094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71095: LD_ADDR_VAR 0 5
71099: PUSH
71100: LD_INT 22
71102: PUSH
71103: LD_OWVAR 2
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 21
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PPUSH
71126: CALL_OW 69
71130: ST_TO_ADDR
// if not tmp then
71131: LD_VAR 0 5
71135: NOT
71136: IFFALSE 71140
// exit ;
71138: GO 71294
// for i in tmp do
71140: LD_ADDR_VAR 0 1
71144: PUSH
71145: LD_VAR 0 5
71149: PUSH
71150: FOR_IN
71151: IFFALSE 71292
// begin d := rand ( 0 , 5 ) ;
71153: LD_ADDR_VAR 0 4
71157: PUSH
71158: LD_INT 0
71160: PPUSH
71161: LD_INT 5
71163: PPUSH
71164: CALL_OW 12
71168: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71169: LD_ADDR_VAR 0 2
71173: PUSH
71174: LD_VAR 0 1
71178: PPUSH
71179: CALL_OW 250
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: LD_INT 3
71191: PPUSH
71192: LD_INT 12
71194: PPUSH
71195: CALL_OW 12
71199: PPUSH
71200: CALL_OW 272
71204: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71205: LD_ADDR_VAR 0 3
71209: PUSH
71210: LD_VAR 0 1
71214: PPUSH
71215: CALL_OW 251
71219: PPUSH
71220: LD_VAR 0 4
71224: PPUSH
71225: LD_INT 3
71227: PPUSH
71228: LD_INT 12
71230: PPUSH
71231: CALL_OW 12
71235: PPUSH
71236: CALL_OW 273
71240: ST_TO_ADDR
// if ValidHex ( x , y ) then
71241: LD_VAR 0 2
71245: PPUSH
71246: LD_VAR 0 3
71250: PPUSH
71251: CALL_OW 488
71255: IFFALSE 71290
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71257: LD_VAR 0 1
71261: PPUSH
71262: LD_VAR 0 2
71266: PPUSH
71267: LD_VAR 0 3
71271: PPUSH
71272: LD_INT 3
71274: PPUSH
71275: LD_INT 6
71277: PPUSH
71278: CALL_OW 12
71282: PPUSH
71283: LD_INT 1
71285: PPUSH
71286: CALL_OW 483
// end ;
71290: GO 71150
71292: POP
71293: POP
// end ;
71294: PPOPN 5
71296: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71297: LD_EXP 46
71301: PUSH
71302: LD_EXP 81
71306: AND
71307: IFFALSE 71401
71309: GO 71311
71311: DISABLE
71312: LD_INT 0
71314: PPUSH
71315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71316: LD_ADDR_VAR 0 2
71320: PUSH
71321: LD_INT 22
71323: PUSH
71324: LD_OWVAR 2
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 32
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 21
71345: PUSH
71346: LD_INT 2
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: LIST
71357: PPUSH
71358: CALL_OW 69
71362: ST_TO_ADDR
// if not tmp then
71363: LD_VAR 0 2
71367: NOT
71368: IFFALSE 71372
// exit ;
71370: GO 71401
// for i in tmp do
71372: LD_ADDR_VAR 0 1
71376: PUSH
71377: LD_VAR 0 2
71381: PUSH
71382: FOR_IN
71383: IFFALSE 71399
// SetFuel ( i , 0 ) ;
71385: LD_VAR 0 1
71389: PPUSH
71390: LD_INT 0
71392: PPUSH
71393: CALL_OW 240
71397: GO 71382
71399: POP
71400: POP
// end ;
71401: PPOPN 2
71403: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71404: LD_EXP 46
71408: PUSH
71409: LD_EXP 82
71413: AND
71414: IFFALSE 71480
71416: GO 71418
71418: DISABLE
71419: LD_INT 0
71421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71422: LD_ADDR_VAR 0 1
71426: PUSH
71427: LD_INT 22
71429: PUSH
71430: LD_OWVAR 2
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 30
71441: PUSH
71442: LD_INT 29
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PPUSH
71453: CALL_OW 69
71457: ST_TO_ADDR
// if not tmp then
71458: LD_VAR 0 1
71462: NOT
71463: IFFALSE 71467
// exit ;
71465: GO 71480
// DestroyUnit ( tmp [ 1 ] ) ;
71467: LD_VAR 0 1
71471: PUSH
71472: LD_INT 1
71474: ARRAY
71475: PPUSH
71476: CALL_OW 65
// end ;
71480: PPOPN 1
71482: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71483: LD_EXP 46
71487: PUSH
71488: LD_EXP 84
71492: AND
71493: IFFALSE 71622
71495: GO 71497
71497: DISABLE
71498: LD_INT 0
71500: PPUSH
// begin uc_side := 0 ;
71501: LD_ADDR_OWVAR 20
71505: PUSH
71506: LD_INT 0
71508: ST_TO_ADDR
// uc_nation := nation_arabian ;
71509: LD_ADDR_OWVAR 21
71513: PUSH
71514: LD_INT 2
71516: ST_TO_ADDR
// hc_gallery :=  ;
71517: LD_ADDR_OWVAR 33
71521: PUSH
71522: LD_STRING 
71524: ST_TO_ADDR
// hc_name :=  ;
71525: LD_ADDR_OWVAR 26
71529: PUSH
71530: LD_STRING 
71532: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71533: LD_INT 1
71535: PPUSH
71536: LD_INT 11
71538: PPUSH
71539: LD_INT 10
71541: PPUSH
71542: CALL_OW 380
// un := CreateHuman ;
71546: LD_ADDR_VAR 0 1
71550: PUSH
71551: CALL_OW 44
71555: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71556: LD_VAR 0 1
71560: PPUSH
71561: LD_INT 1
71563: PPUSH
71564: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71568: LD_INT 35
71570: PPUSH
71571: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71575: LD_VAR 0 1
71579: PPUSH
71580: LD_INT 22
71582: PUSH
71583: LD_OWVAR 2
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PPUSH
71592: CALL_OW 69
71596: PPUSH
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 74
71606: PPUSH
71607: CALL_OW 115
// until IsDead ( un ) ;
71611: LD_VAR 0 1
71615: PPUSH
71616: CALL_OW 301
71620: IFFALSE 71568
// end ;
71622: PPOPN 1
71624: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71625: LD_EXP 46
71629: PUSH
71630: LD_EXP 86
71634: AND
71635: IFFALSE 71647
71637: GO 71639
71639: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71640: LD_STRING earthquake(getX(game), 0, 32)
71642: PPUSH
71643: CALL_OW 559
71647: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71648: LD_EXP 46
71652: PUSH
71653: LD_EXP 87
71657: AND
71658: IFFALSE 71749
71660: GO 71662
71662: DISABLE
71663: LD_INT 0
71665: PPUSH
// begin enable ;
71666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71667: LD_ADDR_VAR 0 1
71671: PUSH
71672: LD_INT 22
71674: PUSH
71675: LD_OWVAR 2
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 21
71686: PUSH
71687: LD_INT 2
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 33
71696: PUSH
71697: LD_INT 3
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: PPUSH
71709: CALL_OW 69
71713: ST_TO_ADDR
// if not tmp then
71714: LD_VAR 0 1
71718: NOT
71719: IFFALSE 71723
// exit ;
71721: GO 71749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71723: LD_VAR 0 1
71727: PUSH
71728: LD_INT 1
71730: PPUSH
71731: LD_VAR 0 1
71735: PPUSH
71736: CALL_OW 12
71740: ARRAY
71741: PPUSH
71742: LD_INT 1
71744: PPUSH
71745: CALL_OW 234
// end ;
71749: PPOPN 1
71751: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71752: LD_EXP 46
71756: PUSH
71757: LD_EXP 88
71761: AND
71762: IFFALSE 71903
71764: GO 71766
71766: DISABLE
71767: LD_INT 0
71769: PPUSH
71770: PPUSH
71771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71772: LD_ADDR_VAR 0 3
71776: PUSH
71777: LD_INT 22
71779: PUSH
71780: LD_OWVAR 2
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 25
71791: PUSH
71792: LD_INT 1
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PPUSH
71803: CALL_OW 69
71807: ST_TO_ADDR
// if not tmp then
71808: LD_VAR 0 3
71812: NOT
71813: IFFALSE 71817
// exit ;
71815: GO 71903
// un := tmp [ rand ( 1 , tmp ) ] ;
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_VAR 0 3
71826: PUSH
71827: LD_INT 1
71829: PPUSH
71830: LD_VAR 0 3
71834: PPUSH
71835: CALL_OW 12
71839: ARRAY
71840: ST_TO_ADDR
// if Crawls ( un ) then
71841: LD_VAR 0 2
71845: PPUSH
71846: CALL_OW 318
71850: IFFALSE 71861
// ComWalk ( un ) ;
71852: LD_VAR 0 2
71856: PPUSH
71857: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71861: LD_VAR 0 2
71865: PPUSH
71866: LD_INT 9
71868: PPUSH
71869: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71873: LD_INT 28
71875: PPUSH
71876: LD_OWVAR 2
71880: PPUSH
71881: LD_INT 2
71883: PPUSH
71884: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71888: LD_INT 29
71890: PPUSH
71891: LD_OWVAR 2
71895: PPUSH
71896: LD_INT 2
71898: PPUSH
71899: CALL_OW 322
// end ;
71903: PPOPN 3
71905: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71906: LD_EXP 46
71910: PUSH
71911: LD_EXP 89
71915: AND
71916: IFFALSE 72027
71918: GO 71920
71920: DISABLE
71921: LD_INT 0
71923: PPUSH
71924: PPUSH
71925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71926: LD_ADDR_VAR 0 3
71930: PUSH
71931: LD_INT 22
71933: PUSH
71934: LD_OWVAR 2
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 25
71945: PUSH
71946: LD_INT 1
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PPUSH
71957: CALL_OW 69
71961: ST_TO_ADDR
// if not tmp then
71962: LD_VAR 0 3
71966: NOT
71967: IFFALSE 71971
// exit ;
71969: GO 72027
// un := tmp [ rand ( 1 , tmp ) ] ;
71971: LD_ADDR_VAR 0 2
71975: PUSH
71976: LD_VAR 0 3
71980: PUSH
71981: LD_INT 1
71983: PPUSH
71984: LD_VAR 0 3
71988: PPUSH
71989: CALL_OW 12
71993: ARRAY
71994: ST_TO_ADDR
// if Crawls ( un ) then
71995: LD_VAR 0 2
71999: PPUSH
72000: CALL_OW 318
72004: IFFALSE 72015
// ComWalk ( un ) ;
72006: LD_VAR 0 2
72010: PPUSH
72011: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72015: LD_VAR 0 2
72019: PPUSH
72020: LD_INT 8
72022: PPUSH
72023: CALL_OW 336
// end ;
72027: PPOPN 3
72029: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72030: LD_EXP 46
72034: PUSH
72035: LD_EXP 90
72039: AND
72040: IFFALSE 72184
72042: GO 72044
72044: DISABLE
72045: LD_INT 0
72047: PPUSH
72048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72049: LD_ADDR_VAR 0 2
72053: PUSH
72054: LD_INT 22
72056: PUSH
72057: LD_OWVAR 2
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 21
72068: PUSH
72069: LD_INT 2
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 2
72078: PUSH
72079: LD_INT 34
72081: PUSH
72082: LD_INT 12
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 34
72091: PUSH
72092: LD_INT 51
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 34
72101: PUSH
72102: LD_INT 32
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: LIST
72119: PPUSH
72120: CALL_OW 69
72124: ST_TO_ADDR
// if not tmp then
72125: LD_VAR 0 2
72129: NOT
72130: IFFALSE 72134
// exit ;
72132: GO 72184
// for i in tmp do
72134: LD_ADDR_VAR 0 1
72138: PUSH
72139: LD_VAR 0 2
72143: PUSH
72144: FOR_IN
72145: IFFALSE 72182
// if GetCargo ( i , mat_artifact ) = 0 then
72147: LD_VAR 0 1
72151: PPUSH
72152: LD_INT 4
72154: PPUSH
72155: CALL_OW 289
72159: PUSH
72160: LD_INT 0
72162: EQUAL
72163: IFFALSE 72180
// SetCargo ( i , mat_siberit , 100 ) ;
72165: LD_VAR 0 1
72169: PPUSH
72170: LD_INT 3
72172: PPUSH
72173: LD_INT 100
72175: PPUSH
72176: CALL_OW 290
72180: GO 72144
72182: POP
72183: POP
// end ;
72184: PPOPN 2
72186: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72187: LD_EXP 46
72191: PUSH
72192: LD_EXP 91
72196: AND
72197: IFFALSE 72380
72199: GO 72201
72201: DISABLE
72202: LD_INT 0
72204: PPUSH
72205: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72206: LD_ADDR_VAR 0 2
72210: PUSH
72211: LD_INT 22
72213: PUSH
72214: LD_OWVAR 2
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PPUSH
72223: CALL_OW 69
72227: ST_TO_ADDR
// if not tmp then
72228: LD_VAR 0 2
72232: NOT
72233: IFFALSE 72237
// exit ;
72235: GO 72380
// for i := 1 to 2 do
72237: LD_ADDR_VAR 0 1
72241: PUSH
72242: DOUBLE
72243: LD_INT 1
72245: DEC
72246: ST_TO_ADDR
72247: LD_INT 2
72249: PUSH
72250: FOR_TO
72251: IFFALSE 72378
// begin uc_side := your_side ;
72253: LD_ADDR_OWVAR 20
72257: PUSH
72258: LD_OWVAR 2
72262: ST_TO_ADDR
// uc_nation := nation_american ;
72263: LD_ADDR_OWVAR 21
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
// vc_chassis := us_morphling ;
72271: LD_ADDR_OWVAR 37
72275: PUSH
72276: LD_INT 5
72278: ST_TO_ADDR
// vc_engine := engine_siberite ;
72279: LD_ADDR_OWVAR 39
72283: PUSH
72284: LD_INT 3
72286: ST_TO_ADDR
// vc_control := control_computer ;
72287: LD_ADDR_OWVAR 38
72291: PUSH
72292: LD_INT 3
72294: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72295: LD_ADDR_OWVAR 40
72299: PUSH
72300: LD_INT 10
72302: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72303: LD_VAR 0 2
72307: PUSH
72308: LD_INT 1
72310: ARRAY
72311: PPUSH
72312: CALL_OW 310
72316: NOT
72317: IFFALSE 72364
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72319: CALL_OW 45
72323: PPUSH
72324: LD_VAR 0 2
72328: PUSH
72329: LD_INT 1
72331: ARRAY
72332: PPUSH
72333: CALL_OW 250
72337: PPUSH
72338: LD_VAR 0 2
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: PPUSH
72347: CALL_OW 251
72351: PPUSH
72352: LD_INT 12
72354: PPUSH
72355: LD_INT 1
72357: PPUSH
72358: CALL_OW 50
72362: GO 72376
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72364: CALL_OW 45
72368: PPUSH
72369: LD_INT 1
72371: PPUSH
72372: CALL_OW 51
// end ;
72376: GO 72250
72378: POP
72379: POP
// end ;
72380: PPOPN 2
72382: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72383: LD_EXP 46
72387: PUSH
72388: LD_EXP 92
72392: AND
72393: IFFALSE 72615
72395: GO 72397
72397: DISABLE
72398: LD_INT 0
72400: PPUSH
72401: PPUSH
72402: PPUSH
72403: PPUSH
72404: PPUSH
72405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72406: LD_ADDR_VAR 0 6
72410: PUSH
72411: LD_INT 22
72413: PUSH
72414: LD_OWVAR 2
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 21
72425: PUSH
72426: LD_INT 1
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 3
72435: PUSH
72436: LD_INT 23
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: LIST
72454: PPUSH
72455: CALL_OW 69
72459: ST_TO_ADDR
// if not tmp then
72460: LD_VAR 0 6
72464: NOT
72465: IFFALSE 72469
// exit ;
72467: GO 72615
// s1 := rand ( 1 , 4 ) ;
72469: LD_ADDR_VAR 0 2
72473: PUSH
72474: LD_INT 1
72476: PPUSH
72477: LD_INT 4
72479: PPUSH
72480: CALL_OW 12
72484: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72485: LD_ADDR_VAR 0 4
72489: PUSH
72490: LD_VAR 0 6
72494: PUSH
72495: LD_INT 1
72497: ARRAY
72498: PPUSH
72499: LD_VAR 0 2
72503: PPUSH
72504: CALL_OW 259
72508: ST_TO_ADDR
// if s1 = 1 then
72509: LD_VAR 0 2
72513: PUSH
72514: LD_INT 1
72516: EQUAL
72517: IFFALSE 72537
// s2 := rand ( 2 , 4 ) else
72519: LD_ADDR_VAR 0 3
72523: PUSH
72524: LD_INT 2
72526: PPUSH
72527: LD_INT 4
72529: PPUSH
72530: CALL_OW 12
72534: ST_TO_ADDR
72535: GO 72545
// s2 := 1 ;
72537: LD_ADDR_VAR 0 3
72541: PUSH
72542: LD_INT 1
72544: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72545: LD_ADDR_VAR 0 5
72549: PUSH
72550: LD_VAR 0 6
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: PPUSH
72559: LD_VAR 0 3
72563: PPUSH
72564: CALL_OW 259
72568: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72569: LD_VAR 0 6
72573: PUSH
72574: LD_INT 1
72576: ARRAY
72577: PPUSH
72578: LD_VAR 0 2
72582: PPUSH
72583: LD_VAR 0 5
72587: PPUSH
72588: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72592: LD_VAR 0 6
72596: PUSH
72597: LD_INT 1
72599: ARRAY
72600: PPUSH
72601: LD_VAR 0 3
72605: PPUSH
72606: LD_VAR 0 4
72610: PPUSH
72611: CALL_OW 237
// end ;
72615: PPOPN 6
72617: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72618: LD_EXP 46
72622: PUSH
72623: LD_EXP 93
72627: AND
72628: IFFALSE 72707
72630: GO 72632
72632: DISABLE
72633: LD_INT 0
72635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72636: LD_ADDR_VAR 0 1
72640: PUSH
72641: LD_INT 22
72643: PUSH
72644: LD_OWVAR 2
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 30
72655: PUSH
72656: LD_INT 3
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PPUSH
72667: CALL_OW 69
72671: ST_TO_ADDR
// if not tmp then
72672: LD_VAR 0 1
72676: NOT
72677: IFFALSE 72681
// exit ;
72679: GO 72707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72681: LD_VAR 0 1
72685: PUSH
72686: LD_INT 1
72688: PPUSH
72689: LD_VAR 0 1
72693: PPUSH
72694: CALL_OW 12
72698: ARRAY
72699: PPUSH
72700: LD_INT 1
72702: PPUSH
72703: CALL_OW 234
// end ;
72707: PPOPN 1
72709: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72710: LD_EXP 46
72714: PUSH
72715: LD_EXP 94
72719: AND
72720: IFFALSE 72832
72722: GO 72724
72724: DISABLE
72725: LD_INT 0
72727: PPUSH
72728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72729: LD_ADDR_VAR 0 2
72733: PUSH
72734: LD_INT 22
72736: PUSH
72737: LD_OWVAR 2
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 2
72748: PUSH
72749: LD_INT 30
72751: PUSH
72752: LD_INT 27
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 30
72761: PUSH
72762: LD_INT 26
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 30
72771: PUSH
72772: LD_INT 28
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PPUSH
72789: CALL_OW 69
72793: ST_TO_ADDR
// if not tmp then
72794: LD_VAR 0 2
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 72832
// for i in tmp do
72803: LD_ADDR_VAR 0 1
72807: PUSH
72808: LD_VAR 0 2
72812: PUSH
72813: FOR_IN
72814: IFFALSE 72830
// SetLives ( i , 1 ) ;
72816: LD_VAR 0 1
72820: PPUSH
72821: LD_INT 1
72823: PPUSH
72824: CALL_OW 234
72828: GO 72813
72830: POP
72831: POP
// end ;
72832: PPOPN 2
72834: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72835: LD_EXP 46
72839: PUSH
72840: LD_EXP 95
72844: AND
72845: IFFALSE 73132
72847: GO 72849
72849: DISABLE
72850: LD_INT 0
72852: PPUSH
72853: PPUSH
72854: PPUSH
// begin i := rand ( 1 , 7 ) ;
72855: LD_ADDR_VAR 0 1
72859: PUSH
72860: LD_INT 1
72862: PPUSH
72863: LD_INT 7
72865: PPUSH
72866: CALL_OW 12
72870: ST_TO_ADDR
// case i of 1 :
72871: LD_VAR 0 1
72875: PUSH
72876: LD_INT 1
72878: DOUBLE
72879: EQUAL
72880: IFTRUE 72884
72882: GO 72894
72884: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72885: LD_STRING earthquake(getX(game), 0, 32)
72887: PPUSH
72888: CALL_OW 559
72892: GO 73132
72894: LD_INT 2
72896: DOUBLE
72897: EQUAL
72898: IFTRUE 72902
72900: GO 72916
72902: POP
// begin ToLua ( displayStucuk(); ) ;
72903: LD_STRING displayStucuk();
72905: PPUSH
72906: CALL_OW 559
// ResetFog ;
72910: CALL_OW 335
// end ; 3 :
72914: GO 73132
72916: LD_INT 3
72918: DOUBLE
72919: EQUAL
72920: IFTRUE 72924
72922: GO 73028
72924: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72925: LD_ADDR_VAR 0 2
72929: PUSH
72930: LD_INT 22
72932: PUSH
72933: LD_OWVAR 2
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 25
72944: PUSH
72945: LD_INT 1
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PPUSH
72956: CALL_OW 69
72960: ST_TO_ADDR
// if not tmp then
72961: LD_VAR 0 2
72965: NOT
72966: IFFALSE 72970
// exit ;
72968: GO 73132
// un := tmp [ rand ( 1 , tmp ) ] ;
72970: LD_ADDR_VAR 0 3
72974: PUSH
72975: LD_VAR 0 2
72979: PUSH
72980: LD_INT 1
72982: PPUSH
72983: LD_VAR 0 2
72987: PPUSH
72988: CALL_OW 12
72992: ARRAY
72993: ST_TO_ADDR
// if Crawls ( un ) then
72994: LD_VAR 0 3
72998: PPUSH
72999: CALL_OW 318
73003: IFFALSE 73014
// ComWalk ( un ) ;
73005: LD_VAR 0 3
73009: PPUSH
73010: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73014: LD_VAR 0 3
73018: PPUSH
73019: LD_INT 8
73021: PPUSH
73022: CALL_OW 336
// end ; 4 :
73026: GO 73132
73028: LD_INT 4
73030: DOUBLE
73031: EQUAL
73032: IFTRUE 73036
73034: GO 73110
73036: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73037: LD_ADDR_VAR 0 2
73041: PUSH
73042: LD_INT 22
73044: PUSH
73045: LD_OWVAR 2
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 30
73056: PUSH
73057: LD_INT 29
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PPUSH
73068: CALL_OW 69
73072: ST_TO_ADDR
// if not tmp then
73073: LD_VAR 0 2
73077: NOT
73078: IFFALSE 73082
// exit ;
73080: GO 73132
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73082: LD_VAR 0 2
73086: PUSH
73087: LD_INT 1
73089: ARRAY
73090: PPUSH
73091: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73095: LD_VAR 0 2
73099: PUSH
73100: LD_INT 1
73102: ARRAY
73103: PPUSH
73104: CALL_OW 65
// end ; 5 .. 7 :
73108: GO 73132
73110: LD_INT 5
73112: DOUBLE
73113: GREATEREQUAL
73114: IFFALSE 73122
73116: LD_INT 7
73118: DOUBLE
73119: LESSEQUAL
73120: IFTRUE 73124
73122: GO 73131
73124: POP
// StreamSibBomb ; end ;
73125: CALL 69369 0 0
73129: GO 73132
73131: POP
// end ;
73132: PPOPN 3
73134: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73135: LD_EXP 46
73139: PUSH
73140: LD_EXP 96
73144: AND
73145: IFFALSE 73301
73147: GO 73149
73149: DISABLE
73150: LD_INT 0
73152: PPUSH
73153: PPUSH
73154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73155: LD_ADDR_VAR 0 2
73159: PUSH
73160: LD_INT 81
73162: PUSH
73163: LD_OWVAR 2
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 2
73174: PUSH
73175: LD_INT 21
73177: PUSH
73178: LD_INT 1
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 21
73187: PUSH
73188: LD_INT 2
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: LIST
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PPUSH
73204: CALL_OW 69
73208: ST_TO_ADDR
// if not tmp then
73209: LD_VAR 0 2
73213: NOT
73214: IFFALSE 73218
// exit ;
73216: GO 73301
// p := 0 ;
73218: LD_ADDR_VAR 0 3
73222: PUSH
73223: LD_INT 0
73225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73226: LD_INT 35
73228: PPUSH
73229: CALL_OW 67
// p := p + 1 ;
73233: LD_ADDR_VAR 0 3
73237: PUSH
73238: LD_VAR 0 3
73242: PUSH
73243: LD_INT 1
73245: PLUS
73246: ST_TO_ADDR
// for i in tmp do
73247: LD_ADDR_VAR 0 1
73251: PUSH
73252: LD_VAR 0 2
73256: PUSH
73257: FOR_IN
73258: IFFALSE 73289
// if GetLives ( i ) < 1000 then
73260: LD_VAR 0 1
73264: PPUSH
73265: CALL_OW 256
73269: PUSH
73270: LD_INT 1000
73272: LESS
73273: IFFALSE 73287
// SetLives ( i , 1000 ) ;
73275: LD_VAR 0 1
73279: PPUSH
73280: LD_INT 1000
73282: PPUSH
73283: CALL_OW 234
73287: GO 73257
73289: POP
73290: POP
// until p > 20 ;
73291: LD_VAR 0 3
73295: PUSH
73296: LD_INT 20
73298: GREATER
73299: IFFALSE 73226
// end ;
73301: PPOPN 3
73303: END
// every 0 0$1 trigger StreamModeActive and sTime do
73304: LD_EXP 46
73308: PUSH
73309: LD_EXP 97
73313: AND
73314: IFFALSE 73349
73316: GO 73318
73318: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73319: LD_INT 28
73321: PPUSH
73322: LD_OWVAR 2
73326: PPUSH
73327: LD_INT 2
73329: PPUSH
73330: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73334: LD_INT 30
73336: PPUSH
73337: LD_OWVAR 2
73341: PPUSH
73342: LD_INT 2
73344: PPUSH
73345: CALL_OW 322
// end ;
73349: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73350: LD_EXP 46
73354: PUSH
73355: LD_EXP 98
73359: AND
73360: IFFALSE 73481
73362: GO 73364
73364: DISABLE
73365: LD_INT 0
73367: PPUSH
73368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73369: LD_ADDR_VAR 0 2
73373: PUSH
73374: LD_INT 22
73376: PUSH
73377: LD_OWVAR 2
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 21
73388: PUSH
73389: LD_INT 1
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 3
73398: PUSH
73399: LD_INT 23
73401: PUSH
73402: LD_INT 0
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: LIST
73417: PPUSH
73418: CALL_OW 69
73422: ST_TO_ADDR
// if not tmp then
73423: LD_VAR 0 2
73427: NOT
73428: IFFALSE 73432
// exit ;
73430: GO 73481
// for i in tmp do
73432: LD_ADDR_VAR 0 1
73436: PUSH
73437: LD_VAR 0 2
73441: PUSH
73442: FOR_IN
73443: IFFALSE 73479
// begin if Crawls ( i ) then
73445: LD_VAR 0 1
73449: PPUSH
73450: CALL_OW 318
73454: IFFALSE 73465
// ComWalk ( i ) ;
73456: LD_VAR 0 1
73460: PPUSH
73461: CALL_OW 138
// SetClass ( i , 2 ) ;
73465: LD_VAR 0 1
73469: PPUSH
73470: LD_INT 2
73472: PPUSH
73473: CALL_OW 336
// end ;
73477: GO 73442
73479: POP
73480: POP
// end ;
73481: PPOPN 2
73483: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73484: LD_EXP 46
73488: PUSH
73489: LD_EXP 99
73493: AND
73494: IFFALSE 73782
73496: GO 73498
73498: DISABLE
73499: LD_INT 0
73501: PPUSH
73502: PPUSH
73503: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73504: LD_OWVAR 2
73508: PPUSH
73509: LD_INT 9
73511: PPUSH
73512: LD_INT 1
73514: PPUSH
73515: LD_INT 1
73517: PPUSH
73518: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73522: LD_INT 9
73524: PPUSH
73525: LD_OWVAR 2
73529: PPUSH
73530: CALL_OW 343
// uc_side := 9 ;
73534: LD_ADDR_OWVAR 20
73538: PUSH
73539: LD_INT 9
73541: ST_TO_ADDR
// uc_nation := 2 ;
73542: LD_ADDR_OWVAR 21
73546: PUSH
73547: LD_INT 2
73549: ST_TO_ADDR
// hc_name := Dark Warrior ;
73550: LD_ADDR_OWVAR 26
73554: PUSH
73555: LD_STRING Dark Warrior
73557: ST_TO_ADDR
// hc_gallery :=  ;
73558: LD_ADDR_OWVAR 33
73562: PUSH
73563: LD_STRING 
73565: ST_TO_ADDR
// hc_noskilllimit := true ;
73566: LD_ADDR_OWVAR 76
73570: PUSH
73571: LD_INT 1
73573: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73574: LD_ADDR_OWVAR 31
73578: PUSH
73579: LD_INT 30
73581: PUSH
73582: LD_INT 30
73584: PUSH
73585: LD_INT 30
73587: PUSH
73588: LD_INT 30
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: ST_TO_ADDR
// un := CreateHuman ;
73597: LD_ADDR_VAR 0 3
73601: PUSH
73602: CALL_OW 44
73606: ST_TO_ADDR
// hc_noskilllimit := false ;
73607: LD_ADDR_OWVAR 76
73611: PUSH
73612: LD_INT 0
73614: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73615: LD_VAR 0 3
73619: PPUSH
73620: LD_INT 1
73622: PPUSH
73623: CALL_OW 51
// ToLua ( playRanger() ) ;
73627: LD_STRING playRanger()
73629: PPUSH
73630: CALL_OW 559
// p := 0 ;
73634: LD_ADDR_VAR 0 2
73638: PUSH
73639: LD_INT 0
73641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73642: LD_INT 35
73644: PPUSH
73645: CALL_OW 67
// p := p + 1 ;
73649: LD_ADDR_VAR 0 2
73653: PUSH
73654: LD_VAR 0 2
73658: PUSH
73659: LD_INT 1
73661: PLUS
73662: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73663: LD_VAR 0 3
73667: PPUSH
73668: CALL_OW 256
73672: PUSH
73673: LD_INT 1000
73675: LESS
73676: IFFALSE 73690
// SetLives ( un , 1000 ) ;
73678: LD_VAR 0 3
73682: PPUSH
73683: LD_INT 1000
73685: PPUSH
73686: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73690: LD_VAR 0 3
73694: PPUSH
73695: LD_INT 81
73697: PUSH
73698: LD_OWVAR 2
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 91
73709: PUSH
73710: LD_VAR 0 3
73714: PUSH
73715: LD_INT 30
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PPUSH
73727: CALL_OW 69
73731: PPUSH
73732: LD_VAR 0 3
73736: PPUSH
73737: CALL_OW 74
73741: PPUSH
73742: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73746: LD_VAR 0 2
73750: PUSH
73751: LD_INT 80
73753: GREATER
73754: PUSH
73755: LD_VAR 0 3
73759: PPUSH
73760: CALL_OW 301
73764: OR
73765: IFFALSE 73642
// if un then
73767: LD_VAR 0 3
73771: IFFALSE 73782
// RemoveUnit ( un ) ;
73773: LD_VAR 0 3
73777: PPUSH
73778: CALL_OW 64
// end ;
73782: PPOPN 3
73784: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73785: LD_EXP 100
73789: IFFALSE 73905
73791: GO 73793
73793: DISABLE
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
73798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73799: LD_ADDR_VAR 0 2
73803: PUSH
73804: LD_INT 81
73806: PUSH
73807: LD_OWVAR 2
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 21
73818: PUSH
73819: LD_INT 1
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PPUSH
73830: CALL_OW 69
73834: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73835: LD_STRING playComputer()
73837: PPUSH
73838: CALL_OW 559
// if not tmp then
73842: LD_VAR 0 2
73846: NOT
73847: IFFALSE 73851
// exit ;
73849: GO 73905
// for i in tmp do
73851: LD_ADDR_VAR 0 1
73855: PUSH
73856: LD_VAR 0 2
73860: PUSH
73861: FOR_IN
73862: IFFALSE 73903
// for j := 1 to 4 do
73864: LD_ADDR_VAR 0 3
73868: PUSH
73869: DOUBLE
73870: LD_INT 1
73872: DEC
73873: ST_TO_ADDR
73874: LD_INT 4
73876: PUSH
73877: FOR_TO
73878: IFFALSE 73899
// SetSkill ( i , j , 10 ) ;
73880: LD_VAR 0 1
73884: PPUSH
73885: LD_VAR 0 3
73889: PPUSH
73890: LD_INT 10
73892: PPUSH
73893: CALL_OW 237
73897: GO 73877
73899: POP
73900: POP
73901: GO 73861
73903: POP
73904: POP
// end ;
73905: PPOPN 3
73907: END
// every 0 0$1 trigger s30 do var i , tmp ;
73908: LD_EXP 101
73912: IFFALSE 73981
73914: GO 73916
73916: DISABLE
73917: LD_INT 0
73919: PPUSH
73920: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73921: LD_ADDR_VAR 0 2
73925: PUSH
73926: LD_INT 22
73928: PUSH
73929: LD_OWVAR 2
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PPUSH
73938: CALL_OW 69
73942: ST_TO_ADDR
// if not tmp then
73943: LD_VAR 0 2
73947: NOT
73948: IFFALSE 73952
// exit ;
73950: GO 73981
// for i in tmp do
73952: LD_ADDR_VAR 0 1
73956: PUSH
73957: LD_VAR 0 2
73961: PUSH
73962: FOR_IN
73963: IFFALSE 73979
// SetLives ( i , 300 ) ;
73965: LD_VAR 0 1
73969: PPUSH
73970: LD_INT 300
73972: PPUSH
73973: CALL_OW 234
73977: GO 73962
73979: POP
73980: POP
// end ;
73981: PPOPN 2
73983: END
// every 0 0$1 trigger s60 do var i , tmp ;
73984: LD_EXP 102
73988: IFFALSE 74057
73990: GO 73992
73992: DISABLE
73993: LD_INT 0
73995: PPUSH
73996: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73997: LD_ADDR_VAR 0 2
74001: PUSH
74002: LD_INT 22
74004: PUSH
74005: LD_OWVAR 2
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PPUSH
74014: CALL_OW 69
74018: ST_TO_ADDR
// if not tmp then
74019: LD_VAR 0 2
74023: NOT
74024: IFFALSE 74028
// exit ;
74026: GO 74057
// for i in tmp do
74028: LD_ADDR_VAR 0 1
74032: PUSH
74033: LD_VAR 0 2
74037: PUSH
74038: FOR_IN
74039: IFFALSE 74055
// SetLives ( i , 600 ) ;
74041: LD_VAR 0 1
74045: PPUSH
74046: LD_INT 600
74048: PPUSH
74049: CALL_OW 234
74053: GO 74038
74055: POP
74056: POP
// end ;
74057: PPOPN 2
74059: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74060: LD_INT 0
74062: PPUSH
// case cmd of 301 :
74063: LD_VAR 0 1
74067: PUSH
74068: LD_INT 301
74070: DOUBLE
74071: EQUAL
74072: IFTRUE 74076
74074: GO 74108
74076: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74077: LD_VAR 0 6
74081: PPUSH
74082: LD_VAR 0 7
74086: PPUSH
74087: LD_VAR 0 8
74091: PPUSH
74092: LD_VAR 0 4
74096: PPUSH
74097: LD_VAR 0 5
74101: PPUSH
74102: CALL 75309 0 5
74106: GO 74229
74108: LD_INT 302
74110: DOUBLE
74111: EQUAL
74112: IFTRUE 74116
74114: GO 74153
74116: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74117: LD_VAR 0 6
74121: PPUSH
74122: LD_VAR 0 7
74126: PPUSH
74127: LD_VAR 0 8
74131: PPUSH
74132: LD_VAR 0 9
74136: PPUSH
74137: LD_VAR 0 4
74141: PPUSH
74142: LD_VAR 0 5
74146: PPUSH
74147: CALL 75400 0 6
74151: GO 74229
74153: LD_INT 303
74155: DOUBLE
74156: EQUAL
74157: IFTRUE 74161
74159: GO 74198
74161: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74162: LD_VAR 0 6
74166: PPUSH
74167: LD_VAR 0 7
74171: PPUSH
74172: LD_VAR 0 8
74176: PPUSH
74177: LD_VAR 0 9
74181: PPUSH
74182: LD_VAR 0 4
74186: PPUSH
74187: LD_VAR 0 5
74191: PPUSH
74192: CALL 74234 0 6
74196: GO 74229
74198: LD_INT 304
74200: DOUBLE
74201: EQUAL
74202: IFTRUE 74206
74204: GO 74228
74206: POP
// hHackTeleport ( unit , x , y ) ; end ;
74207: LD_VAR 0 2
74211: PPUSH
74212: LD_VAR 0 4
74216: PPUSH
74217: LD_VAR 0 5
74221: PPUSH
74222: CALL 75993 0 3
74226: GO 74229
74228: POP
// end ;
74229: LD_VAR 0 12
74233: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74234: LD_INT 0
74236: PPUSH
74237: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74238: LD_VAR 0 1
74242: PUSH
74243: LD_INT 1
74245: LESS
74246: PUSH
74247: LD_VAR 0 1
74251: PUSH
74252: LD_INT 3
74254: GREATER
74255: OR
74256: PUSH
74257: LD_VAR 0 5
74261: PPUSH
74262: LD_VAR 0 6
74266: PPUSH
74267: CALL_OW 428
74271: OR
74272: IFFALSE 74276
// exit ;
74274: GO 74996
// uc_side := your_side ;
74276: LD_ADDR_OWVAR 20
74280: PUSH
74281: LD_OWVAR 2
74285: ST_TO_ADDR
// uc_nation := nation ;
74286: LD_ADDR_OWVAR 21
74290: PUSH
74291: LD_VAR 0 1
74295: ST_TO_ADDR
// bc_level = 1 ;
74296: LD_ADDR_OWVAR 43
74300: PUSH
74301: LD_INT 1
74303: ST_TO_ADDR
// case btype of 1 :
74304: LD_VAR 0 2
74308: PUSH
74309: LD_INT 1
74311: DOUBLE
74312: EQUAL
74313: IFTRUE 74317
74315: GO 74328
74317: POP
// bc_type := b_depot ; 2 :
74318: LD_ADDR_OWVAR 42
74322: PUSH
74323: LD_INT 0
74325: ST_TO_ADDR
74326: GO 74940
74328: LD_INT 2
74330: DOUBLE
74331: EQUAL
74332: IFTRUE 74336
74334: GO 74347
74336: POP
// bc_type := b_warehouse ; 3 :
74337: LD_ADDR_OWVAR 42
74341: PUSH
74342: LD_INT 1
74344: ST_TO_ADDR
74345: GO 74940
74347: LD_INT 3
74349: DOUBLE
74350: EQUAL
74351: IFTRUE 74355
74353: GO 74366
74355: POP
// bc_type := b_lab ; 4 .. 9 :
74356: LD_ADDR_OWVAR 42
74360: PUSH
74361: LD_INT 6
74363: ST_TO_ADDR
74364: GO 74940
74366: LD_INT 4
74368: DOUBLE
74369: GREATEREQUAL
74370: IFFALSE 74378
74372: LD_INT 9
74374: DOUBLE
74375: LESSEQUAL
74376: IFTRUE 74380
74378: GO 74432
74380: POP
// begin bc_type := b_lab_half ;
74381: LD_ADDR_OWVAR 42
74385: PUSH
74386: LD_INT 7
74388: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74389: LD_ADDR_OWVAR 44
74393: PUSH
74394: LD_INT 10
74396: PUSH
74397: LD_INT 11
74399: PUSH
74400: LD_INT 12
74402: PUSH
74403: LD_INT 15
74405: PUSH
74406: LD_INT 14
74408: PUSH
74409: LD_INT 13
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: PUSH
74420: LD_VAR 0 2
74424: PUSH
74425: LD_INT 3
74427: MINUS
74428: ARRAY
74429: ST_TO_ADDR
// end ; 10 .. 13 :
74430: GO 74940
74432: LD_INT 10
74434: DOUBLE
74435: GREATEREQUAL
74436: IFFALSE 74444
74438: LD_INT 13
74440: DOUBLE
74441: LESSEQUAL
74442: IFTRUE 74446
74444: GO 74523
74446: POP
// begin bc_type := b_lab_full ;
74447: LD_ADDR_OWVAR 42
74451: PUSH
74452: LD_INT 8
74454: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74455: LD_ADDR_OWVAR 44
74459: PUSH
74460: LD_INT 10
74462: PUSH
74463: LD_INT 12
74465: PUSH
74466: LD_INT 14
74468: PUSH
74469: LD_INT 13
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: PUSH
74478: LD_VAR 0 2
74482: PUSH
74483: LD_INT 9
74485: MINUS
74486: ARRAY
74487: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74488: LD_ADDR_OWVAR 45
74492: PUSH
74493: LD_INT 11
74495: PUSH
74496: LD_INT 15
74498: PUSH
74499: LD_INT 12
74501: PUSH
74502: LD_INT 15
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: PUSH
74511: LD_VAR 0 2
74515: PUSH
74516: LD_INT 9
74518: MINUS
74519: ARRAY
74520: ST_TO_ADDR
// end ; 14 :
74521: GO 74940
74523: LD_INT 14
74525: DOUBLE
74526: EQUAL
74527: IFTRUE 74531
74529: GO 74542
74531: POP
// bc_type := b_workshop ; 15 :
74532: LD_ADDR_OWVAR 42
74536: PUSH
74537: LD_INT 2
74539: ST_TO_ADDR
74540: GO 74940
74542: LD_INT 15
74544: DOUBLE
74545: EQUAL
74546: IFTRUE 74550
74548: GO 74561
74550: POP
// bc_type := b_factory ; 16 :
74551: LD_ADDR_OWVAR 42
74555: PUSH
74556: LD_INT 3
74558: ST_TO_ADDR
74559: GO 74940
74561: LD_INT 16
74563: DOUBLE
74564: EQUAL
74565: IFTRUE 74569
74567: GO 74580
74569: POP
// bc_type := b_ext_gun ; 17 :
74570: LD_ADDR_OWVAR 42
74574: PUSH
74575: LD_INT 17
74577: ST_TO_ADDR
74578: GO 74940
74580: LD_INT 17
74582: DOUBLE
74583: EQUAL
74584: IFTRUE 74588
74586: GO 74616
74588: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74589: LD_ADDR_OWVAR 42
74593: PUSH
74594: LD_INT 19
74596: PUSH
74597: LD_INT 23
74599: PUSH
74600: LD_INT 19
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: LIST
74607: PUSH
74608: LD_VAR 0 1
74612: ARRAY
74613: ST_TO_ADDR
74614: GO 74940
74616: LD_INT 18
74618: DOUBLE
74619: EQUAL
74620: IFTRUE 74624
74622: GO 74635
74624: POP
// bc_type := b_ext_radar ; 19 :
74625: LD_ADDR_OWVAR 42
74629: PUSH
74630: LD_INT 20
74632: ST_TO_ADDR
74633: GO 74940
74635: LD_INT 19
74637: DOUBLE
74638: EQUAL
74639: IFTRUE 74643
74641: GO 74654
74643: POP
// bc_type := b_ext_radio ; 20 :
74644: LD_ADDR_OWVAR 42
74648: PUSH
74649: LD_INT 22
74651: ST_TO_ADDR
74652: GO 74940
74654: LD_INT 20
74656: DOUBLE
74657: EQUAL
74658: IFTRUE 74662
74660: GO 74673
74662: POP
// bc_type := b_ext_siberium ; 21 :
74663: LD_ADDR_OWVAR 42
74667: PUSH
74668: LD_INT 21
74670: ST_TO_ADDR
74671: GO 74940
74673: LD_INT 21
74675: DOUBLE
74676: EQUAL
74677: IFTRUE 74681
74679: GO 74692
74681: POP
// bc_type := b_ext_computer ; 22 :
74682: LD_ADDR_OWVAR 42
74686: PUSH
74687: LD_INT 24
74689: ST_TO_ADDR
74690: GO 74940
74692: LD_INT 22
74694: DOUBLE
74695: EQUAL
74696: IFTRUE 74700
74698: GO 74711
74700: POP
// bc_type := b_ext_track ; 23 :
74701: LD_ADDR_OWVAR 42
74705: PUSH
74706: LD_INT 16
74708: ST_TO_ADDR
74709: GO 74940
74711: LD_INT 23
74713: DOUBLE
74714: EQUAL
74715: IFTRUE 74719
74717: GO 74730
74719: POP
// bc_type := b_ext_laser ; 24 :
74720: LD_ADDR_OWVAR 42
74724: PUSH
74725: LD_INT 25
74727: ST_TO_ADDR
74728: GO 74940
74730: LD_INT 24
74732: DOUBLE
74733: EQUAL
74734: IFTRUE 74738
74736: GO 74749
74738: POP
// bc_type := b_control_tower ; 25 :
74739: LD_ADDR_OWVAR 42
74743: PUSH
74744: LD_INT 36
74746: ST_TO_ADDR
74747: GO 74940
74749: LD_INT 25
74751: DOUBLE
74752: EQUAL
74753: IFTRUE 74757
74755: GO 74768
74757: POP
// bc_type := b_breastwork ; 26 :
74758: LD_ADDR_OWVAR 42
74762: PUSH
74763: LD_INT 31
74765: ST_TO_ADDR
74766: GO 74940
74768: LD_INT 26
74770: DOUBLE
74771: EQUAL
74772: IFTRUE 74776
74774: GO 74787
74776: POP
// bc_type := b_bunker ; 27 :
74777: LD_ADDR_OWVAR 42
74781: PUSH
74782: LD_INT 32
74784: ST_TO_ADDR
74785: GO 74940
74787: LD_INT 27
74789: DOUBLE
74790: EQUAL
74791: IFTRUE 74795
74793: GO 74806
74795: POP
// bc_type := b_turret ; 28 :
74796: LD_ADDR_OWVAR 42
74800: PUSH
74801: LD_INT 33
74803: ST_TO_ADDR
74804: GO 74940
74806: LD_INT 28
74808: DOUBLE
74809: EQUAL
74810: IFTRUE 74814
74812: GO 74825
74814: POP
// bc_type := b_armoury ; 29 :
74815: LD_ADDR_OWVAR 42
74819: PUSH
74820: LD_INT 4
74822: ST_TO_ADDR
74823: GO 74940
74825: LD_INT 29
74827: DOUBLE
74828: EQUAL
74829: IFTRUE 74833
74831: GO 74844
74833: POP
// bc_type := b_barracks ; 30 :
74834: LD_ADDR_OWVAR 42
74838: PUSH
74839: LD_INT 5
74841: ST_TO_ADDR
74842: GO 74940
74844: LD_INT 30
74846: DOUBLE
74847: EQUAL
74848: IFTRUE 74852
74850: GO 74863
74852: POP
// bc_type := b_solar_power ; 31 :
74853: LD_ADDR_OWVAR 42
74857: PUSH
74858: LD_INT 27
74860: ST_TO_ADDR
74861: GO 74940
74863: LD_INT 31
74865: DOUBLE
74866: EQUAL
74867: IFTRUE 74871
74869: GO 74882
74871: POP
// bc_type := b_oil_power ; 32 :
74872: LD_ADDR_OWVAR 42
74876: PUSH
74877: LD_INT 26
74879: ST_TO_ADDR
74880: GO 74940
74882: LD_INT 32
74884: DOUBLE
74885: EQUAL
74886: IFTRUE 74890
74888: GO 74901
74890: POP
// bc_type := b_siberite_power ; 33 :
74891: LD_ADDR_OWVAR 42
74895: PUSH
74896: LD_INT 28
74898: ST_TO_ADDR
74899: GO 74940
74901: LD_INT 33
74903: DOUBLE
74904: EQUAL
74905: IFTRUE 74909
74907: GO 74920
74909: POP
// bc_type := b_oil_mine ; 34 :
74910: LD_ADDR_OWVAR 42
74914: PUSH
74915: LD_INT 29
74917: ST_TO_ADDR
74918: GO 74940
74920: LD_INT 34
74922: DOUBLE
74923: EQUAL
74924: IFTRUE 74928
74926: GO 74939
74928: POP
// bc_type := b_siberite_mine ; end ;
74929: LD_ADDR_OWVAR 42
74933: PUSH
74934: LD_INT 30
74936: ST_TO_ADDR
74937: GO 74940
74939: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74940: LD_ADDR_VAR 0 8
74944: PUSH
74945: LD_VAR 0 5
74949: PPUSH
74950: LD_VAR 0 6
74954: PPUSH
74955: LD_VAR 0 3
74959: PPUSH
74960: CALL_OW 47
74964: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74965: LD_OWVAR 42
74969: PUSH
74970: LD_INT 32
74972: PUSH
74973: LD_INT 33
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: IN
74980: IFFALSE 74996
// PlaceWeaponTurret ( b , weapon ) ;
74982: LD_VAR 0 8
74986: PPUSH
74987: LD_VAR 0 4
74991: PPUSH
74992: CALL_OW 431
// end ;
74996: LD_VAR 0 7
75000: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75001: LD_INT 0
75003: PPUSH
75004: PPUSH
75005: PPUSH
75006: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75007: LD_ADDR_VAR 0 4
75011: PUSH
75012: LD_INT 22
75014: PUSH
75015: LD_OWVAR 2
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: LD_INT 2
75026: PUSH
75027: LD_INT 30
75029: PUSH
75030: LD_INT 0
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 30
75039: PUSH
75040: LD_INT 1
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: LIST
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PPUSH
75056: CALL_OW 69
75060: ST_TO_ADDR
// if not tmp then
75061: LD_VAR 0 4
75065: NOT
75066: IFFALSE 75070
// exit ;
75068: GO 75129
// for i in tmp do
75070: LD_ADDR_VAR 0 2
75074: PUSH
75075: LD_VAR 0 4
75079: PUSH
75080: FOR_IN
75081: IFFALSE 75127
// for j = 1 to 3 do
75083: LD_ADDR_VAR 0 3
75087: PUSH
75088: DOUBLE
75089: LD_INT 1
75091: DEC
75092: ST_TO_ADDR
75093: LD_INT 3
75095: PUSH
75096: FOR_TO
75097: IFFALSE 75123
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75099: LD_VAR 0 2
75103: PPUSH
75104: CALL_OW 274
75108: PPUSH
75109: LD_VAR 0 3
75113: PPUSH
75114: LD_INT 99999
75116: PPUSH
75117: CALL_OW 277
75121: GO 75096
75123: POP
75124: POP
75125: GO 75080
75127: POP
75128: POP
// end ;
75129: LD_VAR 0 1
75133: RET
// export function hHackSetLevel10 ; var i , j ; begin
75134: LD_INT 0
75136: PPUSH
75137: PPUSH
75138: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75139: LD_ADDR_VAR 0 2
75143: PUSH
75144: LD_INT 21
75146: PUSH
75147: LD_INT 1
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PPUSH
75154: CALL_OW 69
75158: PUSH
75159: FOR_IN
75160: IFFALSE 75212
// if IsSelected ( i ) then
75162: LD_VAR 0 2
75166: PPUSH
75167: CALL_OW 306
75171: IFFALSE 75210
// begin for j := 1 to 4 do
75173: LD_ADDR_VAR 0 3
75177: PUSH
75178: DOUBLE
75179: LD_INT 1
75181: DEC
75182: ST_TO_ADDR
75183: LD_INT 4
75185: PUSH
75186: FOR_TO
75187: IFFALSE 75208
// SetSkill ( i , j , 10 ) ;
75189: LD_VAR 0 2
75193: PPUSH
75194: LD_VAR 0 3
75198: PPUSH
75199: LD_INT 10
75201: PPUSH
75202: CALL_OW 237
75206: GO 75186
75208: POP
75209: POP
// end ;
75210: GO 75159
75212: POP
75213: POP
// end ;
75214: LD_VAR 0 1
75218: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75219: LD_INT 0
75221: PPUSH
75222: PPUSH
75223: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75224: LD_ADDR_VAR 0 2
75228: PUSH
75229: LD_INT 22
75231: PUSH
75232: LD_OWVAR 2
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 21
75243: PUSH
75244: LD_INT 1
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PPUSH
75255: CALL_OW 69
75259: PUSH
75260: FOR_IN
75261: IFFALSE 75302
// begin for j := 1 to 4 do
75263: LD_ADDR_VAR 0 3
75267: PUSH
75268: DOUBLE
75269: LD_INT 1
75271: DEC
75272: ST_TO_ADDR
75273: LD_INT 4
75275: PUSH
75276: FOR_TO
75277: IFFALSE 75298
// SetSkill ( i , j , 10 ) ;
75279: LD_VAR 0 2
75283: PPUSH
75284: LD_VAR 0 3
75288: PPUSH
75289: LD_INT 10
75291: PPUSH
75292: CALL_OW 237
75296: GO 75276
75298: POP
75299: POP
// end ;
75300: GO 75260
75302: POP
75303: POP
// end ;
75304: LD_VAR 0 1
75308: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75309: LD_INT 0
75311: PPUSH
// uc_side := your_side ;
75312: LD_ADDR_OWVAR 20
75316: PUSH
75317: LD_OWVAR 2
75321: ST_TO_ADDR
// uc_nation := nation ;
75322: LD_ADDR_OWVAR 21
75326: PUSH
75327: LD_VAR 0 1
75331: ST_TO_ADDR
// InitHc ;
75332: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75336: LD_INT 0
75338: PPUSH
75339: LD_VAR 0 2
75343: PPUSH
75344: LD_VAR 0 3
75348: PPUSH
75349: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75353: LD_VAR 0 4
75357: PPUSH
75358: LD_VAR 0 5
75362: PPUSH
75363: CALL_OW 428
75367: PUSH
75368: LD_INT 0
75370: EQUAL
75371: IFFALSE 75395
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75373: CALL_OW 44
75377: PPUSH
75378: LD_VAR 0 4
75382: PPUSH
75383: LD_VAR 0 5
75387: PPUSH
75388: LD_INT 1
75390: PPUSH
75391: CALL_OW 48
// end ;
75395: LD_VAR 0 6
75399: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75400: LD_INT 0
75402: PPUSH
75403: PPUSH
// uc_side := your_side ;
75404: LD_ADDR_OWVAR 20
75408: PUSH
75409: LD_OWVAR 2
75413: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75414: LD_VAR 0 1
75418: PUSH
75419: LD_INT 1
75421: PUSH
75422: LD_INT 2
75424: PUSH
75425: LD_INT 3
75427: PUSH
75428: LD_INT 4
75430: PUSH
75431: LD_INT 5
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: IN
75441: IFFALSE 75453
// uc_nation := nation_american else
75443: LD_ADDR_OWVAR 21
75447: PUSH
75448: LD_INT 1
75450: ST_TO_ADDR
75451: GO 75496
// if chassis in [ 11 , 12 , 13 , 14 ] then
75453: LD_VAR 0 1
75457: PUSH
75458: LD_INT 11
75460: PUSH
75461: LD_INT 12
75463: PUSH
75464: LD_INT 13
75466: PUSH
75467: LD_INT 14
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: IN
75476: IFFALSE 75488
// uc_nation := nation_arabian else
75478: LD_ADDR_OWVAR 21
75482: PUSH
75483: LD_INT 2
75485: ST_TO_ADDR
75486: GO 75496
// uc_nation := nation_russian ;
75488: LD_ADDR_OWVAR 21
75492: PUSH
75493: LD_INT 3
75495: ST_TO_ADDR
// vc_chassis := chassis ;
75496: LD_ADDR_OWVAR 37
75500: PUSH
75501: LD_VAR 0 1
75505: ST_TO_ADDR
// vc_engine := engine ;
75506: LD_ADDR_OWVAR 39
75510: PUSH
75511: LD_VAR 0 2
75515: ST_TO_ADDR
// vc_control := control ;
75516: LD_ADDR_OWVAR 38
75520: PUSH
75521: LD_VAR 0 3
75525: ST_TO_ADDR
// vc_weapon := weapon ;
75526: LD_ADDR_OWVAR 40
75530: PUSH
75531: LD_VAR 0 4
75535: ST_TO_ADDR
// un := CreateVehicle ;
75536: LD_ADDR_VAR 0 8
75540: PUSH
75541: CALL_OW 45
75545: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75546: LD_VAR 0 8
75550: PPUSH
75551: LD_INT 0
75553: PPUSH
75554: LD_INT 5
75556: PPUSH
75557: CALL_OW 12
75561: PPUSH
75562: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75566: LD_VAR 0 8
75570: PPUSH
75571: LD_VAR 0 5
75575: PPUSH
75576: LD_VAR 0 6
75580: PPUSH
75581: LD_INT 1
75583: PPUSH
75584: CALL_OW 48
// end ;
75588: LD_VAR 0 7
75592: RET
// export hInvincible ; every 1 do
75593: GO 75595
75595: DISABLE
// hInvincible := [ ] ;
75596: LD_ADDR_EXP 103
75600: PUSH
75601: EMPTY
75602: ST_TO_ADDR
75603: END
// every 10 do var i ;
75604: GO 75606
75606: DISABLE
75607: LD_INT 0
75609: PPUSH
// begin enable ;
75610: ENABLE
// if not hInvincible then
75611: LD_EXP 103
75615: NOT
75616: IFFALSE 75620
// exit ;
75618: GO 75664
// for i in hInvincible do
75620: LD_ADDR_VAR 0 1
75624: PUSH
75625: LD_EXP 103
75629: PUSH
75630: FOR_IN
75631: IFFALSE 75662
// if GetLives ( i ) < 1000 then
75633: LD_VAR 0 1
75637: PPUSH
75638: CALL_OW 256
75642: PUSH
75643: LD_INT 1000
75645: LESS
75646: IFFALSE 75660
// SetLives ( i , 1000 ) ;
75648: LD_VAR 0 1
75652: PPUSH
75653: LD_INT 1000
75655: PPUSH
75656: CALL_OW 234
75660: GO 75630
75662: POP
75663: POP
// end ;
75664: PPOPN 1
75666: END
// export function hHackInvincible ; var i ; begin
75667: LD_INT 0
75669: PPUSH
75670: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75671: LD_ADDR_VAR 0 2
75675: PUSH
75676: LD_INT 2
75678: PUSH
75679: LD_INT 21
75681: PUSH
75682: LD_INT 1
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: LD_INT 21
75691: PUSH
75692: LD_INT 2
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: LIST
75703: PPUSH
75704: CALL_OW 69
75708: PUSH
75709: FOR_IN
75710: IFFALSE 75771
// if IsSelected ( i ) then
75712: LD_VAR 0 2
75716: PPUSH
75717: CALL_OW 306
75721: IFFALSE 75769
// begin if i in hInvincible then
75723: LD_VAR 0 2
75727: PUSH
75728: LD_EXP 103
75732: IN
75733: IFFALSE 75753
// hInvincible := hInvincible diff i else
75735: LD_ADDR_EXP 103
75739: PUSH
75740: LD_EXP 103
75744: PUSH
75745: LD_VAR 0 2
75749: DIFF
75750: ST_TO_ADDR
75751: GO 75769
// hInvincible := hInvincible union i ;
75753: LD_ADDR_EXP 103
75757: PUSH
75758: LD_EXP 103
75762: PUSH
75763: LD_VAR 0 2
75767: UNION
75768: ST_TO_ADDR
// end ;
75769: GO 75709
75771: POP
75772: POP
// end ;
75773: LD_VAR 0 1
75777: RET
// export function hHackInvisible ; var i , j ; begin
75778: LD_INT 0
75780: PPUSH
75781: PPUSH
75782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75783: LD_ADDR_VAR 0 2
75787: PUSH
75788: LD_INT 21
75790: PUSH
75791: LD_INT 1
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PPUSH
75798: CALL_OW 69
75802: PUSH
75803: FOR_IN
75804: IFFALSE 75828
// if IsSelected ( i ) then
75806: LD_VAR 0 2
75810: PPUSH
75811: CALL_OW 306
75815: IFFALSE 75826
// ComForceInvisible ( i ) ;
75817: LD_VAR 0 2
75821: PPUSH
75822: CALL_OW 496
75826: GO 75803
75828: POP
75829: POP
// end ;
75830: LD_VAR 0 1
75834: RET
// export function hHackChangeYourSide ; begin
75835: LD_INT 0
75837: PPUSH
// if your_side = 8 then
75838: LD_OWVAR 2
75842: PUSH
75843: LD_INT 8
75845: EQUAL
75846: IFFALSE 75858
// your_side := 0 else
75848: LD_ADDR_OWVAR 2
75852: PUSH
75853: LD_INT 0
75855: ST_TO_ADDR
75856: GO 75872
// your_side := your_side + 1 ;
75858: LD_ADDR_OWVAR 2
75862: PUSH
75863: LD_OWVAR 2
75867: PUSH
75868: LD_INT 1
75870: PLUS
75871: ST_TO_ADDR
// end ;
75872: LD_VAR 0 1
75876: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75877: LD_INT 0
75879: PPUSH
75880: PPUSH
75881: PPUSH
// for i in all_units do
75882: LD_ADDR_VAR 0 2
75886: PUSH
75887: LD_OWVAR 3
75891: PUSH
75892: FOR_IN
75893: IFFALSE 75971
// if IsSelected ( i ) then
75895: LD_VAR 0 2
75899: PPUSH
75900: CALL_OW 306
75904: IFFALSE 75969
// begin j := GetSide ( i ) ;
75906: LD_ADDR_VAR 0 3
75910: PUSH
75911: LD_VAR 0 2
75915: PPUSH
75916: CALL_OW 255
75920: ST_TO_ADDR
// if j = 8 then
75921: LD_VAR 0 3
75925: PUSH
75926: LD_INT 8
75928: EQUAL
75929: IFFALSE 75941
// j := 0 else
75931: LD_ADDR_VAR 0 3
75935: PUSH
75936: LD_INT 0
75938: ST_TO_ADDR
75939: GO 75955
// j := j + 1 ;
75941: LD_ADDR_VAR 0 3
75945: PUSH
75946: LD_VAR 0 3
75950: PUSH
75951: LD_INT 1
75953: PLUS
75954: ST_TO_ADDR
// SetSide ( i , j ) ;
75955: LD_VAR 0 2
75959: PPUSH
75960: LD_VAR 0 3
75964: PPUSH
75965: CALL_OW 235
// end ;
75969: GO 75892
75971: POP
75972: POP
// end ;
75973: LD_VAR 0 1
75977: RET
// export function hHackFog ; begin
75978: LD_INT 0
75980: PPUSH
// FogOff ( true ) ;
75981: LD_INT 1
75983: PPUSH
75984: CALL_OW 344
// end ;
75988: LD_VAR 0 1
75992: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75993: LD_INT 0
75995: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75996: LD_VAR 0 1
76000: PPUSH
76001: LD_VAR 0 2
76005: PPUSH
76006: LD_VAR 0 3
76010: PPUSH
76011: LD_INT 1
76013: PPUSH
76014: LD_INT 1
76016: PPUSH
76017: CALL_OW 483
// CenterOnXY ( x , y ) ;
76021: LD_VAR 0 2
76025: PPUSH
76026: LD_VAR 0 3
76030: PPUSH
76031: CALL_OW 84
// end ;
76035: LD_VAR 0 4
76039: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76040: LD_INT 0
76042: PPUSH
76043: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76044: LD_VAR 0 1
76048: NOT
76049: PUSH
76050: LD_VAR 0 2
76054: PPUSH
76055: LD_VAR 0 3
76059: PPUSH
76060: CALL_OW 488
76064: NOT
76065: OR
76066: PUSH
76067: LD_VAR 0 1
76071: PPUSH
76072: CALL_OW 266
76076: PUSH
76077: LD_INT 3
76079: NONEQUAL
76080: PUSH
76081: LD_VAR 0 1
76085: PPUSH
76086: CALL_OW 247
76090: PUSH
76091: LD_INT 1
76093: EQUAL
76094: NOT
76095: AND
76096: OR
76097: IFFALSE 76101
// exit ;
76099: GO 76250
// if GetType ( factory ) = unit_human then
76101: LD_VAR 0 1
76105: PPUSH
76106: CALL_OW 247
76110: PUSH
76111: LD_INT 1
76113: EQUAL
76114: IFFALSE 76131
// factory := IsInUnit ( factory ) ;
76116: LD_ADDR_VAR 0 1
76120: PUSH
76121: LD_VAR 0 1
76125: PPUSH
76126: CALL_OW 310
76130: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76131: LD_VAR 0 1
76135: PPUSH
76136: CALL_OW 266
76140: PUSH
76141: LD_INT 3
76143: NONEQUAL
76144: IFFALSE 76148
// exit ;
76146: GO 76250
// if HexInfo ( x , y ) = factory then
76148: LD_VAR 0 2
76152: PPUSH
76153: LD_VAR 0 3
76157: PPUSH
76158: CALL_OW 428
76162: PUSH
76163: LD_VAR 0 1
76167: EQUAL
76168: IFFALSE 76195
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76170: LD_ADDR_EXP 104
76174: PUSH
76175: LD_EXP 104
76179: PPUSH
76180: LD_VAR 0 1
76184: PPUSH
76185: LD_INT 0
76187: PPUSH
76188: CALL_OW 1
76192: ST_TO_ADDR
76193: GO 76246
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76195: LD_ADDR_EXP 104
76199: PUSH
76200: LD_EXP 104
76204: PPUSH
76205: LD_VAR 0 1
76209: PPUSH
76210: LD_VAR 0 1
76214: PPUSH
76215: CALL_OW 255
76219: PUSH
76220: LD_VAR 0 1
76224: PUSH
76225: LD_VAR 0 2
76229: PUSH
76230: LD_VAR 0 3
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: PPUSH
76241: CALL_OW 1
76245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76246: CALL 76255 0 0
// end ;
76250: LD_VAR 0 4
76254: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76255: LD_INT 0
76257: PPUSH
76258: PPUSH
76259: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76260: LD_STRING resetFactoryWaypoint();
76262: PPUSH
76263: CALL_OW 559
// if factoryWaypoints then
76267: LD_EXP 104
76271: IFFALSE 76397
// begin list := PrepareArray ( factoryWaypoints ) ;
76273: LD_ADDR_VAR 0 3
76277: PUSH
76278: LD_EXP 104
76282: PPUSH
76283: CALL 56910 0 1
76287: ST_TO_ADDR
// for i := 1 to list do
76288: LD_ADDR_VAR 0 2
76292: PUSH
76293: DOUBLE
76294: LD_INT 1
76296: DEC
76297: ST_TO_ADDR
76298: LD_VAR 0 3
76302: PUSH
76303: FOR_TO
76304: IFFALSE 76395
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76306: LD_STRING setFactoryWaypointXY(
76308: PUSH
76309: LD_VAR 0 3
76313: PUSH
76314: LD_VAR 0 2
76318: ARRAY
76319: PUSH
76320: LD_INT 1
76322: ARRAY
76323: STR
76324: PUSH
76325: LD_STRING ,
76327: STR
76328: PUSH
76329: LD_VAR 0 3
76333: PUSH
76334: LD_VAR 0 2
76338: ARRAY
76339: PUSH
76340: LD_INT 2
76342: ARRAY
76343: STR
76344: PUSH
76345: LD_STRING ,
76347: STR
76348: PUSH
76349: LD_VAR 0 3
76353: PUSH
76354: LD_VAR 0 2
76358: ARRAY
76359: PUSH
76360: LD_INT 3
76362: ARRAY
76363: STR
76364: PUSH
76365: LD_STRING ,
76367: STR
76368: PUSH
76369: LD_VAR 0 3
76373: PUSH
76374: LD_VAR 0 2
76378: ARRAY
76379: PUSH
76380: LD_INT 4
76382: ARRAY
76383: STR
76384: PUSH
76385: LD_STRING )
76387: STR
76388: PPUSH
76389: CALL_OW 559
76393: GO 76303
76395: POP
76396: POP
// end ; end ;
76397: LD_VAR 0 1
76401: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76402: LD_INT 0
76404: PPUSH
// if HexInfo ( x , y ) = warehouse then
76405: LD_VAR 0 2
76409: PPUSH
76410: LD_VAR 0 3
76414: PPUSH
76415: CALL_OW 428
76419: PUSH
76420: LD_VAR 0 1
76424: EQUAL
76425: IFFALSE 76452
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76427: LD_ADDR_EXP 105
76431: PUSH
76432: LD_EXP 105
76436: PPUSH
76437: LD_VAR 0 1
76441: PPUSH
76442: LD_INT 0
76444: PPUSH
76445: CALL_OW 1
76449: ST_TO_ADDR
76450: GO 76503
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76452: LD_ADDR_EXP 105
76456: PUSH
76457: LD_EXP 105
76461: PPUSH
76462: LD_VAR 0 1
76466: PPUSH
76467: LD_VAR 0 1
76471: PPUSH
76472: CALL_OW 255
76476: PUSH
76477: LD_VAR 0 1
76481: PUSH
76482: LD_VAR 0 2
76486: PUSH
76487: LD_VAR 0 3
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: PPUSH
76498: CALL_OW 1
76502: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76503: CALL 76512 0 0
// end ;
76507: LD_VAR 0 4
76511: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76512: LD_INT 0
76514: PPUSH
76515: PPUSH
76516: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76517: LD_STRING resetWarehouseGatheringPoints();
76519: PPUSH
76520: CALL_OW 559
// if warehouseGatheringPoints then
76524: LD_EXP 105
76528: IFFALSE 76654
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76530: LD_ADDR_VAR 0 3
76534: PUSH
76535: LD_EXP 105
76539: PPUSH
76540: CALL 56910 0 1
76544: ST_TO_ADDR
// for i := 1 to list do
76545: LD_ADDR_VAR 0 2
76549: PUSH
76550: DOUBLE
76551: LD_INT 1
76553: DEC
76554: ST_TO_ADDR
76555: LD_VAR 0 3
76559: PUSH
76560: FOR_TO
76561: IFFALSE 76652
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76563: LD_STRING setWarehouseGatheringPointXY(
76565: PUSH
76566: LD_VAR 0 3
76570: PUSH
76571: LD_VAR 0 2
76575: ARRAY
76576: PUSH
76577: LD_INT 1
76579: ARRAY
76580: STR
76581: PUSH
76582: LD_STRING ,
76584: STR
76585: PUSH
76586: LD_VAR 0 3
76590: PUSH
76591: LD_VAR 0 2
76595: ARRAY
76596: PUSH
76597: LD_INT 2
76599: ARRAY
76600: STR
76601: PUSH
76602: LD_STRING ,
76604: STR
76605: PUSH
76606: LD_VAR 0 3
76610: PUSH
76611: LD_VAR 0 2
76615: ARRAY
76616: PUSH
76617: LD_INT 3
76619: ARRAY
76620: STR
76621: PUSH
76622: LD_STRING ,
76624: STR
76625: PUSH
76626: LD_VAR 0 3
76630: PUSH
76631: LD_VAR 0 2
76635: ARRAY
76636: PUSH
76637: LD_INT 4
76639: ARRAY
76640: STR
76641: PUSH
76642: LD_STRING )
76644: STR
76645: PPUSH
76646: CALL_OW 559
76650: GO 76560
76652: POP
76653: POP
// end ; end ;
76654: LD_VAR 0 1
76658: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76659: LD_EXP 105
76663: IFFALSE 77348
76665: GO 76667
76667: DISABLE
76668: LD_INT 0
76670: PPUSH
76671: PPUSH
76672: PPUSH
76673: PPUSH
76674: PPUSH
76675: PPUSH
76676: PPUSH
76677: PPUSH
76678: PPUSH
// begin enable ;
76679: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76680: LD_ADDR_VAR 0 3
76684: PUSH
76685: LD_EXP 105
76689: PPUSH
76690: CALL 56910 0 1
76694: ST_TO_ADDR
// if not list then
76695: LD_VAR 0 3
76699: NOT
76700: IFFALSE 76704
// exit ;
76702: GO 77348
// for i := 1 to list do
76704: LD_ADDR_VAR 0 1
76708: PUSH
76709: DOUBLE
76710: LD_INT 1
76712: DEC
76713: ST_TO_ADDR
76714: LD_VAR 0 3
76718: PUSH
76719: FOR_TO
76720: IFFALSE 77346
// begin depot := list [ i ] [ 2 ] ;
76722: LD_ADDR_VAR 0 8
76726: PUSH
76727: LD_VAR 0 3
76731: PUSH
76732: LD_VAR 0 1
76736: ARRAY
76737: PUSH
76738: LD_INT 2
76740: ARRAY
76741: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76742: LD_ADDR_VAR 0 5
76746: PUSH
76747: LD_VAR 0 3
76751: PUSH
76752: LD_VAR 0 1
76756: ARRAY
76757: PUSH
76758: LD_INT 1
76760: ARRAY
76761: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76762: LD_VAR 0 8
76766: PPUSH
76767: CALL_OW 301
76771: PUSH
76772: LD_VAR 0 5
76776: PUSH
76777: LD_VAR 0 8
76781: PPUSH
76782: CALL_OW 255
76786: NONEQUAL
76787: OR
76788: IFFALSE 76817
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76790: LD_ADDR_EXP 105
76794: PUSH
76795: LD_EXP 105
76799: PPUSH
76800: LD_VAR 0 8
76804: PPUSH
76805: LD_INT 0
76807: PPUSH
76808: CALL_OW 1
76812: ST_TO_ADDR
// exit ;
76813: POP
76814: POP
76815: GO 77348
// end ; x := list [ i ] [ 3 ] ;
76817: LD_ADDR_VAR 0 6
76821: PUSH
76822: LD_VAR 0 3
76826: PUSH
76827: LD_VAR 0 1
76831: ARRAY
76832: PUSH
76833: LD_INT 3
76835: ARRAY
76836: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76837: LD_ADDR_VAR 0 7
76841: PUSH
76842: LD_VAR 0 3
76846: PUSH
76847: LD_VAR 0 1
76851: ARRAY
76852: PUSH
76853: LD_INT 4
76855: ARRAY
76856: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76857: LD_ADDR_VAR 0 9
76861: PUSH
76862: LD_VAR 0 6
76866: PPUSH
76867: LD_VAR 0 7
76871: PPUSH
76872: LD_INT 16
76874: PPUSH
76875: CALL 55498 0 3
76879: ST_TO_ADDR
// if not cratesNearbyPoint then
76880: LD_VAR 0 9
76884: NOT
76885: IFFALSE 76891
// exit ;
76887: POP
76888: POP
76889: GO 77348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76891: LD_ADDR_VAR 0 4
76895: PUSH
76896: LD_INT 22
76898: PUSH
76899: LD_VAR 0 5
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 3
76910: PUSH
76911: LD_INT 60
76913: PUSH
76914: EMPTY
76915: LIST
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: LD_INT 91
76923: PUSH
76924: LD_VAR 0 8
76928: PUSH
76929: LD_INT 6
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 2
76939: PUSH
76940: LD_INT 25
76942: PUSH
76943: LD_INT 2
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_INT 25
76952: PUSH
76953: LD_INT 16
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: LIST
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 69
76975: PUSH
76976: LD_VAR 0 8
76980: PPUSH
76981: CALL_OW 313
76985: PPUSH
76986: LD_INT 3
76988: PUSH
76989: LD_INT 60
76991: PUSH
76992: EMPTY
76993: LIST
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 2
77001: PUSH
77002: LD_INT 25
77004: PUSH
77005: LD_INT 2
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: LD_INT 25
77014: PUSH
77015: LD_INT 16
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: LIST
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PPUSH
77031: CALL_OW 72
77035: UNION
77036: ST_TO_ADDR
// if tmp then
77037: LD_VAR 0 4
77041: IFFALSE 77121
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77043: LD_ADDR_VAR 0 4
77047: PUSH
77048: LD_VAR 0 4
77052: PPUSH
77053: LD_INT 3
77055: PPUSH
77056: CALL 53467 0 2
77060: ST_TO_ADDR
// for j in tmp do
77061: LD_ADDR_VAR 0 2
77065: PUSH
77066: LD_VAR 0 4
77070: PUSH
77071: FOR_IN
77072: IFFALSE 77115
// begin if IsInUnit ( j ) then
77074: LD_VAR 0 2
77078: PPUSH
77079: CALL_OW 310
77083: IFFALSE 77094
// ComExit ( j ) ;
77085: LD_VAR 0 2
77089: PPUSH
77090: CALL 53550 0 1
// AddComCollect ( j , x , y ) ;
77094: LD_VAR 0 2
77098: PPUSH
77099: LD_VAR 0 6
77103: PPUSH
77104: LD_VAR 0 7
77108: PPUSH
77109: CALL_OW 177
// end ;
77113: GO 77071
77115: POP
77116: POP
// exit ;
77117: POP
77118: POP
77119: GO 77348
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77121: LD_ADDR_VAR 0 4
77125: PUSH
77126: LD_INT 22
77128: PUSH
77129: LD_VAR 0 5
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: PUSH
77138: LD_INT 91
77140: PUSH
77141: LD_VAR 0 8
77145: PUSH
77146: LD_INT 8
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 2
77156: PUSH
77157: LD_INT 34
77159: PUSH
77160: LD_INT 12
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PUSH
77167: LD_INT 34
77169: PUSH
77170: LD_INT 51
77172: PUSH
77173: EMPTY
77174: LIST
77175: LIST
77176: PUSH
77177: LD_INT 34
77179: PUSH
77180: LD_INT 32
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PUSH
77187: LD_INT 34
77189: PUSH
77190: LD_INT 89
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: LIST
77208: PPUSH
77209: CALL_OW 69
77213: ST_TO_ADDR
// if tmp then
77214: LD_VAR 0 4
77218: IFFALSE 77344
// begin for j in tmp do
77220: LD_ADDR_VAR 0 2
77224: PUSH
77225: LD_VAR 0 4
77229: PUSH
77230: FOR_IN
77231: IFFALSE 77342
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77233: LD_VAR 0 2
77237: PPUSH
77238: CALL_OW 262
77242: PUSH
77243: LD_INT 3
77245: EQUAL
77246: PUSH
77247: LD_VAR 0 2
77251: PPUSH
77252: CALL_OW 261
77256: PUSH
77257: LD_INT 20
77259: GREATER
77260: OR
77261: PUSH
77262: LD_VAR 0 2
77266: PPUSH
77267: CALL_OW 314
77271: NOT
77272: AND
77273: PUSH
77274: LD_VAR 0 2
77278: PPUSH
77279: CALL_OW 263
77283: PUSH
77284: LD_INT 1
77286: NONEQUAL
77287: PUSH
77288: LD_VAR 0 2
77292: PPUSH
77293: CALL_OW 311
77297: OR
77298: AND
77299: IFFALSE 77340
// begin ComCollect ( j , x , y ) ;
77301: LD_VAR 0 2
77305: PPUSH
77306: LD_VAR 0 6
77310: PPUSH
77311: LD_VAR 0 7
77315: PPUSH
77316: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77320: LD_VAR 0 2
77324: PPUSH
77325: LD_VAR 0 8
77329: PPUSH
77330: CALL_OW 172
// exit ;
77334: POP
77335: POP
77336: POP
77337: POP
77338: GO 77348
// end ;
77340: GO 77230
77342: POP
77343: POP
// end ; end ;
77344: GO 76719
77346: POP
77347: POP
// end ; end_of_file
77348: PPOPN 9
77350: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77351: LD_VAR 0 1
77355: PPUSH
77356: LD_VAR 0 2
77360: PPUSH
77361: LD_VAR 0 3
77365: PPUSH
77366: LD_VAR 0 4
77370: PPUSH
77371: LD_VAR 0 5
77375: PPUSH
77376: LD_VAR 0 6
77380: PPUSH
77381: CALL 61712 0 6
// end ;
77385: PPOPN 6
77387: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77388: LD_INT 0
77390: PPUSH
// begin if not units then
77391: LD_VAR 0 1
77395: NOT
77396: IFFALSE 77400
// exit ;
77398: GO 77400
// end ;
77400: PPOPN 7
77402: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77403: CALL 61616 0 0
// end ; end_of_file
77407: PPOPN 1
77409: END
