// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 8166 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 16485 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 16485 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 16485 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16485 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16485 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16485 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 16485 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 16485 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 16485 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 16485 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 16485 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 16485 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 55548 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usCratesCollector := [ ] ;
2620: LD_ADDR_EXP 35
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 3 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 3
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2695
// begin PrepareApemanEngineer ( ) ;
2643: CALL 50376 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_EXP 35
2656: PPUSH
2657: CALL_OW 44
2661: PPUSH
2662: CALL 54187 0 2
2666: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2667: LD_EXP 35
2671: PPUSH
2672: CALL 58684 0 1
2676: PPUSH
2677: LD_INT 81
2679: PPUSH
2680: LD_INT 142
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// end ;
2693: GO 2640
2695: POP
2696: POP
// InitHc ;
2697: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_INT 21
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: FOR_IN
2722: IFFALSE 2759
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 7
2734: PUSH
2735: LD_INT 8
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PUSH
2747: LD_OWVAR 67
2751: ARRAY
2752: PPUSH
2753: CALL_OW 241
2757: GO 2721
2759: POP
2760: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 32
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: FOR_IN
2782: IFFALSE 2872
// begin if GetBWeapon ( i ) = us_radar then
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 269
2793: PUSH
2794: LD_INT 11
2796: EQUAL
2797: IFFALSE 2822
// begin uc_nation := 0 ;
2799: LD_ADDR_OWVAR 21
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2807: LD_INT 0
2809: PPUSH
2810: LD_INT 16
2812: PPUSH
2813: LD_INT 2
2815: PPUSH
2816: CALL_OW 380
// end else
2820: GO 2856
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2822: LD_INT 0
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 5
2830: PUSH
2831: LD_INT 6
2833: PUSH
2834: LD_INT 7
2836: PUSH
2837: LD_INT 8
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PPUSH
2852: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2856: CALL_OW 44
2860: PPUSH
2861: LD_VAR 0 2
2865: PPUSH
2866: CALL_OW 52
// end ;
2870: GO 2781
2872: POP
2873: POP
// b := HexInfo ( 74 , 120 ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 74
2881: PPUSH
2882: LD_INT 120
2884: PPUSH
2885: CALL_OW 428
2889: ST_TO_ADDR
// uc_nation := 1 ;
2890: LD_ADDR_OWVAR 21
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2898: LD_ADDR_VAR 0 2
2902: PUSH
2903: DOUBLE
2904: LD_INT 1
2906: DEC
2907: ST_TO_ADDR
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 3
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: PUSH
2932: FOR_TO
2933: IFFALSE 2985
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 6
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: LD_INT 8
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_OWVAR 67
2963: ARRAY
2964: PPUSH
2965: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2969: CALL_OW 44
2973: PPUSH
2974: LD_VAR 0 3
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2932
2985: POP
2986: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2987: LD_VAR 0 3
2991: PPUSH
2992: CALL_OW 313
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: CALL_OW 336
// for i := 1 to 6 do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 6
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3068
// begin PrepareHuman ( false , 4 , 6 ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 4
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3033: CALL_OW 44
3037: PPUSH
3038: LD_INT 32
3040: PUSH
3041: LD_INT 33
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_VAR 0 2
3052: PUSH
3053: LD_INT 2
3055: MOD
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: ARRAY
3061: PPUSH
3062: CALL_OW 52
// end ;
3066: GO 3017
3068: POP
3069: POP
// for i := 1 to 3 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 3
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3113
// begin PrepareHuman ( false , 3 , 6 ) ;
3086: LD_INT 0
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 6
3094: PPUSH
3095: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3099: CALL_OW 44
3103: PPUSH
3104: LD_INT 25
3106: PPUSH
3107: CALL_OW 52
// end ;
3111: GO 3083
3113: POP
3114: POP
// for i := 1 to 3 do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: DOUBLE
3121: LD_INT 1
3123: DEC
3124: ST_TO_ADDR
3125: LD_INT 3
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3187
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3131: LD_INT 0
3133: PPUSH
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 6
3139: PUSH
3140: LD_INT 7
3142: PUSH
3143: LD_INT 7
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PPUSH
3161: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3165: CALL_OW 44
3169: PPUSH
3170: LD_INT 78
3172: PPUSH
3173: LD_INT 130
3175: PPUSH
3176: CALL_OW 428
3180: PPUSH
3181: CALL_OW 52
// end ;
3185: GO 3128
3187: POP
3188: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 1
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_OWVAR 67
3221: ARRAY
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3311
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3226: LD_INT 2
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 13
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 21325 0 5
// veh := CreateVehicle ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3267: LD_VAR 0 4
3271: PPUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 0
3277: PPUSH
3278: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 6
3290: PPUSH
3291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3295: CALL_OW 44
3299: PPUSH
3300: LD_VAR 0 4
3304: PPUSH
3305: CALL_OW 52
// end ;
3309: GO 3223
3311: POP
3312: POP
// InitHc ;
3313: CALL_OW 19
// hc_gallery := sandar ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING sandar
3324: ST_TO_ADDR
// hc_face_number := 38 ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_INT 38
3332: ST_TO_ADDR
// hc_name := Doug Callahan ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Doug Callahan
3340: ST_TO_ADDR
// hc_class := class_engineer ;
3341: LD_ADDR_OWVAR 28
3345: PUSH
3346: LD_INT 2
3348: ST_TO_ADDR
// hc_sex := sex_male ;
3349: LD_ADDR_OWVAR 27
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3357: LD_ADDR_OWVAR 29
3361: PUSH
3362: LD_INT 10
3364: PUSH
3365: LD_INT 11
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3372: LD_ADDR_OWVAR 30
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3395: LD_ADDR_OWVAR 31
3399: PUSH
3400: LD_INT 4
3402: PUSH
3403: LD_INT 6
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 1
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: ST_TO_ADDR
// usCommander := CreateHuman ;
3418: LD_ADDR_EXP 30
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3428: LD_EXP 30
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3440: LD_INT 2
3442: PPUSH
3443: LD_EXP 30
3447: PPUSH
3448: CALL_OW 471
// InitHC_All ( ) ;
3452: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 2
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: CALL 21325 0 5
// usCargo := CreateVehicle ;
3475: LD_ADDR_EXP 32
3479: PUSH
3480: CALL_OW 45
3484: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3485: LD_EXP 32
3489: PPUSH
3490: LD_INT 81
3492: PPUSH
3493: LD_INT 143
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: CALL_OW 48
// Connect ( usCargo ) ;
3503: LD_EXP 32
3507: PPUSH
3508: CALL 24793 0 1
// DoNotAttack ( 5 , usCargo ) ;
3512: LD_INT 5
3514: PPUSH
3515: LD_EXP 32
3519: PPUSH
3520: CALL_OW 471
// end ;
3524: LD_VAR 0 1
3528: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3529: LD_EXP 6
3533: PUSH
3534: LD_INT 25
3536: PPUSH
3537: CALL_OW 302
3541: AND
3542: PUSH
3543: LD_INT 25
3545: PPUSH
3546: CALL_OW 461
3550: PUSH
3551: LD_INT 2
3553: EQUAL
3554: AND
3555: IFFALSE 3712
3557: GO 3559
3559: DISABLE
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// begin enable ;
3565: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3566: LD_ADDR_VAR 0 1
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_INT 4
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 6
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: PUSH
3600: FOR_TO
3601: IFFALSE 3710
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3603: LD_ADDR_VAR 0 2
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3634: LD_VAR 0 2
3638: PUSH
3639: LD_INT 4
3641: EQUAL
3642: IFFALSE 3654
// weapon := us_heavy_gun else
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_INT 6
3651: ST_TO_ADDR
3652: GO 3685
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: LD_INT 5
3661: PUSH
3662: LD_INT 7
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 1
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 12
3683: ARRAY
3684: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3685: LD_INT 25
3687: PPUSH
3688: LD_VAR 0 2
3692: PPUSH
3693: LD_INT 1
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: CALL_OW 185
// end ;
3708: GO 3600
3710: POP
3711: POP
// end ;
3712: PPOPN 3
3714: END
// every 0 0$01 do var i , un , tmp ;
3715: GO 3717
3717: DISABLE
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
// begin if Difficulty < 2 then
3723: LD_OWVAR 67
3727: PUSH
3728: LD_INT 2
3730: LESS
3731: IFFALSE 3735
// exit ;
3733: GO 4018
// tmp := [ ] ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// for i := 1 to Difficulty do
3742: LD_ADDR_VAR 0 1
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_OWVAR 67
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3854
// begin uc_side := 4 ;
3760: LD_ADDR_OWVAR 20
3764: PUSH
3765: LD_INT 4
3767: ST_TO_ADDR
// uc_nation := nation_american ;
3768: LD_ADDR_OWVAR 21
3772: PUSH
3773: LD_INT 1
3775: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: LD_INT 6
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PPUSH
3803: CALL_OW 381
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 2
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: LD_VAR 0 2
3831: PPUSH
3832: CALL 54187 0 2
3836: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_INT 19
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// end ;
3852: GO 3757
3854: POP
3855: POP
// for i in tmp do
3856: LD_ADDR_VAR 0 1
3860: PUSH
3861: LD_VAR 0 3
3865: PUSH
3866: FOR_IN
3867: IFFALSE 3913
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3869: LD_VAR 0 1
3873: PPUSH
3874: LD_INT 54
3876: PPUSH
3877: LD_INT 51
3879: PPUSH
3880: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_INT 700
3891: PPUSH
3892: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_INT 35
3903: PPUSH
3904: LD_INT 6
3906: PPUSH
3907: CALL_OW 174
// end ;
3911: GO 3866
3913: POP
3914: POP
// repeat wait ( 7 7$00 ) ;
3915: LD_INT 14700
3917: PPUSH
3918: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: LD_INT 50
3934: PUSH
3935: EMPTY
3936: LIST
3937: PPUSH
3938: CALL_OW 72
3942: ST_TO_ADDR
// if not tmp then
3943: LD_VAR 0 3
3947: NOT
3948: IFFALSE 3952
// exit ;
3950: GO 4018
// for i in tmp do
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4009
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: LD_INT 51
3975: PPUSH
3976: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_INT 700
3987: PPUSH
3988: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_INT 35
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: CALL_OW 174
// end ;
4007: GO 3962
4009: POP
4010: POP
// until not tmp ;
4011: LD_VAR 0 3
4015: NOT
4016: IFFALSE 3915
// end ;
4018: PPOPN 3
4020: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4021: LD_EXP 31
4025: PUSH
4026: LD_INT 4
4028: PUSH
4029: LD_INT 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_INT 6
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: GREATEREQUAL
4050: IFFALSE 4232
4052: GO 4054
4054: DISABLE
4055: LD_INT 0
4057: PPUSH
4058: PPUSH
// begin enable ;
4059: ENABLE
// tmp := usForces ;
4060: LD_ADDR_VAR 0 2
4064: PUSH
4065: LD_EXP 31
4069: ST_TO_ADDR
// usForces := [ ] ;
4070: LD_ADDR_EXP 31
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// if not tmp then
4077: LD_VAR 0 2
4081: NOT
4082: IFFALSE 4086
// exit ;
4084: GO 4232
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 92
4098: PUSH
4099: LD_INT 123
4101: PUSH
4102: LD_INT 141
4104: PUSH
4105: LD_INT 20
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PPUSH
4118: CALL_OW 69
4122: IFFALSE 4146
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4124: LD_VAR 0 2
4128: PPUSH
4129: LD_INT 126
4131: PPUSH
4132: LD_INT 143
4134: PPUSH
4135: CALL_OW 114
// wait ( 0 0$30 ) ;
4139: LD_INT 1050
4141: PPUSH
4142: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_VAR 0 2
4162: PPUSH
4163: LD_INT 51
4165: PUSH
4166: LD_INT 50
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 98
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 114
4185: PUSH
4186: LD_INT 50
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 127
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 131
4205: PUSH
4206: LD_INT 35
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL 56791 0 2
4224: ST_TO_ADDR
// until not tmp ;
4225: LD_VAR 0 2
4229: NOT
4230: IFFALSE 4146
// end ;
4232: PPOPN 2
4234: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4235: LD_EXP 3
4239: PUSH
4240: LD_EXP 5
4244: NOT
4245: AND
4246: PUSH
4247: LD_INT 11
4249: PPUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 70
4264: AND
4265: IFFALSE 4386
4267: GO 4269
4269: DISABLE
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
// begin uc_side := 1 ;
4275: LD_ADDR_OWVAR 20
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// uc_nation := 1 ;
4283: LD_ADDR_OWVAR 21
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// tmp := [ ] ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// for i := 1 to 2 do
4298: LD_ADDR_VAR 0 1
4302: PUSH
4303: DOUBLE
4304: LD_INT 1
4306: DEC
4307: ST_TO_ADDR
4308: LD_INT 2
4310: PUSH
4311: FOR_TO
4312: IFFALSE 4384
// begin PrepareSoldier ( false , 7 ) ;
4314: LD_INT 0
4316: PPUSH
4317: LD_INT 7
4319: PPUSH
4320: CALL_OW 381
// un := CreateHuman ;
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: CALL_OW 44
4333: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4334: LD_VAR 0 2
4338: PPUSH
4339: LD_INT 130
4341: PPUSH
4342: LD_INT 153
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 0
4350: PPUSH
4351: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_INT 108
4374: PPUSH
4375: LD_INT 108
4377: PPUSH
4378: CALL_OW 174
// end ;
4382: GO 4311
4384: POP
4385: POP
// end ;
4386: PPOPN 3
4388: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4389: LD_EXP 3
4393: PUSH
4394: LD_EXP 5
4398: NOT
4399: AND
4400: PUSH
4401: LD_INT 10
4403: PPUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 70
4418: AND
4419: IFFALSE 4540
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
4428: PPUSH
// begin uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// tmp := [ ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: EMPTY
4451: ST_TO_ADDR
// for i := 1 to 2 do
4452: LD_ADDR_VAR 0 1
4456: PUSH
4457: DOUBLE
4458: LD_INT 1
4460: DEC
4461: ST_TO_ADDR
4462: LD_INT 2
4464: PUSH
4465: FOR_TO
4466: IFFALSE 4538
// begin PrepareSoldier ( false , 7 ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 7
4473: PPUSH
4474: CALL_OW 381
// un := CreateHuman ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 56
4495: PPUSH
4496: LD_INT 101
4498: PPUSH
4499: LD_INT 3
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_INT 5
4516: PPUSH
4517: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4521: LD_VAR 0 2
4525: PPUSH
4526: LD_INT 72
4528: PPUSH
4529: LD_INT 92
4531: PPUSH
4532: CALL_OW 174
// end ;
4536: GO 4465
4538: POP
4539: POP
// end ;
4540: PPOPN 3
4542: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4543: LD_EXP 7
4547: NOT
4548: IFFALSE 4749
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// begin enable ;
4559: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: LD_INT 81
4567: PUSH
4568: LD_INT 1
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 92
4577: PUSH
4578: LD_INT 113
4580: PUSH
4581: LD_INT 139
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4602: LD_ADDR_VAR 0 3
4606: PUSH
4607: LD_INT 20
4609: PPUSH
4610: CALL_OW 435
4614: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 35
4624: PPUSH
4625: LD_INT 50
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 72
4635: ST_TO_ADDR
// if not tmp then
4636: LD_VAR 0 2
4640: NOT
4641: IFFALSE 4646
// begin disable ;
4643: DISABLE
// exit ;
4644: GO 4749
// end ; for i in tmp do
4646: LD_ADDR_VAR 0 1
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: FOR_IN
4657: IFFALSE 4747
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4659: LD_VAR 0 4
4663: PUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 12
4679: GREATER
4680: AND
4681: IFFALSE 4700
// ComMoveXY ( i , 83 , 147 ) else
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 83
4690: PPUSH
4691: LD_INT 147
4693: PPUSH
4694: CALL_OW 111
4698: GO 4745
// if not HasTask ( i ) and cr then
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 314
4709: NOT
4710: PUSH
4711: LD_VAR 0 3
4715: AND
4716: IFFALSE 4745
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4718: LD_VAR 0 1
4722: PPUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: LD_VAR 0 3
4736: PUSH
4737: LD_INT 2
4739: ARRAY
4740: PPUSH
4741: CALL_OW 117
// end ;
4745: GO 4656
4747: POP
4748: POP
// end ;
4749: PPOPN 4
4751: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4752: LD_EXP 32
4756: PPUSH
4757: CALL_OW 302
4761: PUSH
4762: LD_EXP 7
4766: NOT
4767: AND
4768: IFFALSE 5031
4770: GO 4772
4772: DISABLE
4773: LD_INT 0
4775: PPUSH
4776: PPUSH
// begin enable ;
4777: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: LD_INT 16
4785: PPUSH
4786: LD_INT 81
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 50
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_INT 12
4818: PPUSH
4819: CALL_OW 435
4823: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4824: LD_EXP 32
4828: PPUSH
4829: CALL_OW 261
4833: PUSH
4834: LD_INT 10
4836: LESS
4837: PUSH
4838: LD_INT 2
4840: PPUSH
4841: LD_EXP 32
4845: PPUSH
4846: CALL_OW 292
4850: NOT
4851: AND
4852: IFFALSE 4866
// SetFuel ( usCargo , 100 ) ;
4854: LD_EXP 32
4858: PPUSH
4859: LD_INT 100
4861: PPUSH
4862: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4866: LD_EXP 32
4870: PPUSH
4871: CALL_OW 314
4875: NOT
4876: PUSH
4877: LD_EXP 32
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 289
4889: PUSH
4890: LD_INT 100
4892: LESS
4893: AND
4894: PUSH
4895: LD_VAR 0 2
4899: NOT
4900: AND
4901: IFFALSE 4967
// begin if cr then
4903: LD_VAR 0 1
4907: IFFALSE 4938
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4909: LD_EXP 32
4913: PPUSH
4914: LD_VAR 0 1
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 117
4936: GO 4965
// if not IsInArea ( usCargo , usCratesArea ) then
4938: LD_EXP 32
4942: PPUSH
4943: LD_INT 12
4945: PPUSH
4946: CALL_OW 308
4950: NOT
4951: IFFALSE 4965
// ComMoveToArea ( usCargo , usCratesArea ) ;
4953: LD_EXP 32
4957: PPUSH
4958: LD_INT 12
4960: PPUSH
4961: CALL_OW 113
// exit ;
4965: GO 5031
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_EXP 32
4976: PPUSH
4977: LD_INT 16
4979: PPUSH
4980: CALL_OW 308
4984: NOT
4985: AND
4986: IFFALSE 5005
// ComMoveXY ( usCargo , 80 , 143 ) else
4988: LD_EXP 32
4992: PPUSH
4993: LD_INT 80
4995: PPUSH
4996: LD_INT 143
4998: PPUSH
4999: CALL_OW 111
5003: GO 5031
// if GetCargo ( usCargo , mat_cans ) then
5005: LD_EXP 32
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 289
5017: IFFALSE 5031
// ComGive ( usCargo , usDepot ) ;
5019: LD_EXP 32
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 161
// end ;
5031: PPOPN 2
5033: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5034: LD_EXP 7
5038: NOT
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 69
5082: AND
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 60
5099: PUSH
5100: EMPTY
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: LD_INT 25
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: AND
5127: IFFALSE 5330
5129: GO 5131
5131: DISABLE
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
// begin enable ;
5136: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 50
5167: PUSH
5168: EMPTY
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL_OW 69
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5328
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 60
5208: PUSH
5209: EMPTY
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: ST_TO_ADDR
// if not sci then
5236: LD_VAR 0 2
5240: NOT
5241: IFFALSE 5245
// break ;
5243: GO 5328
// sci := sci [ 1 ] ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: LD_INT 1
5257: ARRAY
5258: ST_TO_ADDR
// if IsInUnit ( sci ) then
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 310
5268: IFFALSE 5281
// ComExit ( sci ) else
5270: LD_VAR 0 2
5274: PPUSH
5275: CALL 54585 0 1
5279: GO 5326
// begin ComHeal ( sci , i ) ;
5281: LD_VAR 0 2
5285: PPUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_INT 32
5302: PUSH
5303: LD_INT 33
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: PPUSH
5322: CALL_OW 180
// end ; end ;
5326: GO 5185
5328: POP
5329: POP
// end ;
5330: PPOPN 2
5332: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5333: LD_EXP 7
5337: NOT
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 60
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 50
5364: PUSH
5365: EMPTY
5366: LIST
5367: PUSH
5368: LD_INT 34
5370: PUSH
5371: LD_INT 13
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 69
5388: AND
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: LD_INT 24
5405: PUSH
5406: LD_INT 1000
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 3
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_INT 29
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: AND
5455: IFFALSE 5724
5457: GO 5459
5459: DISABLE
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 3
5483: PUSH
5484: LD_INT 24
5486: PUSH
5487: LD_INT 1000
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: LD_INT 30
5513: PUSH
5514: LD_INT 29
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 22
5543: PUSH
5544: LD_INT 1
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 600
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 21
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 29
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5606: LD_ADDR_VAR 0 1
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 60
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 50
5636: PUSH
5637: EMPTY
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PPUSH
5656: CALL_OW 69
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5722
// begin if tmp2 then
5664: LD_VAR 0 3
5668: IFFALSE 5696
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_VAR 0 3
5679: PPUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 74
5689: PPUSH
5690: CALL_OW 130
5694: GO 5720
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 74
5715: PPUSH
5716: CALL_OW 130
// end ;
5720: GO 5661
5722: POP
5723: POP
// end ;
5724: PPOPN 3
5726: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5727: LD_EXP 7
5731: NOT
5732: PUSH
5733: LD_INT 16
5735: PPUSH
5736: LD_INT 81
5738: PUSH
5739: LD_INT 1
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 50
5748: PUSH
5749: EMPTY
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 70
5760: NOT
5761: AND
5762: PUSH
5763: LD_EXP 33
5767: AND
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 3
5781: PUSH
5782: LD_INT 60
5784: PUSH
5785: EMPTY
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 50
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: LD_INT 34
5800: PUSH
5801: LD_INT 13
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: AND
5819: IFFALSE 5931
5821: GO 5823
5823: DISABLE
// begin enable ;
5824: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 60
5840: PUSH
5841: EMPTY
5842: LIST
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 50
5850: PUSH
5851: EMPTY
5852: LIST
5853: PUSH
5854: LD_INT 34
5856: PUSH
5857: LD_INT 13
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PPUSH
5875: LD_EXP 33
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: LD_EXP 33
5892: PUSH
5893: LD_INT 1
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: LD_EXP 33
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PUSH
5910: LD_INT 3
5912: ARRAY
5913: PPUSH
5914: LD_EXP 33
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: PUSH
5923: LD_INT 4
5925: ARRAY
5926: PPUSH
5927: CALL_OW 566
// end ;
5931: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 54
5953: PUSH
5954: EMPTY
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 2
5963: PUSH
5964: LD_INT 25
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 25
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 16
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: IFFALSE 6372
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
// begin enable ;
6021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 50
6039: PUSH
6040: EMPTY
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 54
6048: PUSH
6049: EMPTY
6050: LIST
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 16
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 69
6105: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 50
6123: PUSH
6124: EMPTY
6125: LIST
6126: PUSH
6127: LD_INT 21
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 32
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 58
6149: PUSH
6150: EMPTY
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PPUSH
6160: CALL_OW 69
6164: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6165: LD_ADDR_VAR 0 4
6169: PUSH
6170: LD_INT 22
6172: PUSH
6173: LD_INT 1
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: ST_TO_ADDR
// if not tmp then
6206: LD_VAR 0 2
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6372
// for i in tmp do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_VAR 0 2
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6370
// begin btmp := FilterByTag ( btmp , 0 ) ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL 51756 0 2
6245: ST_TO_ADDR
// if not btmp then
6246: LD_VAR 0 3
6250: NOT
6251: IFFALSE 6296
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 257
6262: PUSH
6263: LD_INT 16
6265: NONEQUAL
6266: PUSH
6267: LD_VAR 0 4
6271: AND
6272: IFFALSE 6292
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6274: LD_VAR 0 1
6278: PPUSH
6279: LD_VAR 0 4
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 120
// continue ;
6292: GO 6225
// end else
6294: GO 6368
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: CALL_OW 120
// wait ( 0 0$9 ) ;
6330: LD_INT 315
6332: PPUSH
6333: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL 18609 0 1
6350: IFFALSE 6368
// SetTag ( btmp [ 1 ] , 0 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL_OW 109
// end ; end ;
6368: GO 6225
6370: POP
6371: POP
// end ;
6372: PPOPN 4
6374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6375: LD_INT 22
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 33
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 50
6397: PUSH
6398: EMPTY
6399: LIST
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 61
6406: PUSH
6407: EMPTY
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: IFFALSE 6515
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
// begin enable ;
6433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 50
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 61
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: ST_TO_ADDR
// for i in tmp do
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: FOR_IN
6500: IFFALSE 6513
// Connect ( i ) ;
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL 24793 0 1
6511: GO 6499
6513: POP
6514: POP
// end ;
6515: PPOPN 2
6517: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6518: LD_EXP 6
6522: PUSH
6523: LD_OWVAR 67
6527: PUSH
6528: LD_INT 1
6530: GREATER
6531: AND
6532: IFFALSE 6974
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6544: LD_INT 31500
6546: PUSH
6547: LD_INT 31500
6549: PUSH
6550: LD_INT 29400
6552: PUSH
6553: LD_INT 27300
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_OWVAR 67
6566: ARRAY
6567: PPUSH
6568: CALL_OW 67
// if usSurrender then
6572: LD_EXP 7
6576: IFFALSE 6580
// exit ;
6578: GO 6974
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6580: LD_ADDR_VAR 0 1
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: LD_INT 6
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_OWVAR 67
6612: ARRAY
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6919
// begin uc_side := 1 ;
6617: LD_ADDR_OWVAR 20
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// uc_nation := 1 ;
6625: LD_ADDR_OWVAR 21
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// InitHc_All ( ) ;
6633: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_OWVAR 67
6665: ARRAY
6666: PPUSH
6667: CALL_OW 380
// un := CreateHuman ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: CALL_OW 44
6680: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 3
6707: MOD
6708: PUSH
6709: LD_INT 1
6711: PLUS
6712: ARRAY
6713: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6714: LD_VAR 0 4
6718: PUSH
6719: LD_INT 4
6721: EQUAL
6722: IFFALSE 6757
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 6
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 3
6748: PPUSH
6749: CALL_OW 12
6753: ARRAY
6754: ST_TO_ADDR
6755: GO 6792
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6757: LD_ADDR_VAR 0 5
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 7
6770: PUSH
6771: LD_INT 4
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 4
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: LD_INT 30
6810: PPUSH
6811: CALL 21325 0 5
// veh := CreateVehicle ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 45
6824: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6825: LD_ADDR_EXP 34
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_EXP 34
6839: PUSH
6840: LD_INT 1
6842: PLUS
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: CALL_OW 1
6853: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_INT 4
6861: PPUSH
6862: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_INT 17
6873: PPUSH
6874: LD_INT 0
6876: PPUSH
6877: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_VAR 0 3
6890: PPUSH
6891: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 153
6902: PPUSH
6903: LD_INT 45
6905: PPUSH
6906: CALL_OW 111
// wait ( 0 0$2 ) ;
6910: LD_INT 70
6912: PPUSH
6913: CALL_OW 67
// end ;
6917: GO 6614
6919: POP
6920: POP
// repeat wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6928: LD_ADDR_EXP 34
6932: PUSH
6933: LD_EXP 34
6937: PPUSH
6938: LD_INT 150
6940: PUSH
6941: LD_INT 36
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 138
6950: PUSH
6951: LD_INT 25
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL 56791 0 2
6966: ST_TO_ADDR
// until not usAdditionalForces ;
6967: LD_EXP 34
6971: NOT
6972: IFFALSE 6921
// end ;
6974: PPOPN 5
6976: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6977: LD_INT 22
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 101
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: IFFALSE 7025
7007: GO 7009
7009: DISABLE
// begin wait ( 0 0$30 ) ;
7010: LD_INT 1050
7012: PPUSH
7013: CALL_OW 67
// usAttacksAllowed := true ;
7017: LD_ADDR_EXP 6
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// end ; end_of_file
7025: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL 58880 0 1
// if un = Heike then
7035: LD_VAR 0 1
7039: PUSH
7040: LD_EXP 15
7044: EQUAL
7045: IFFALSE 7054
// YouLost ( Heike ) ;
7047: LD_STRING Heike
7049: PPUSH
7050: CALL_OW 104
// if un = usCommander then
7054: LD_VAR 0 1
7058: PUSH
7059: LD_EXP 30
7063: EQUAL
7064: IFFALSE 7073
// YouLost ( Commander ) ;
7066: LD_STRING Commander
7068: PPUSH
7069: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 2
7085: EQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7118
// vehLossCounter := Inc ( vehLossCounter ) ;
7103: LD_ADDR_EXP 14
7107: PUSH
7108: LD_EXP 14
7112: PPUSH
7113: CALL 55548 0 1
7117: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: IFFALSE 7473
// begin if GetClass ( un ) = class_sniper then
7133: LD_VAR 0 1
7137: PPUSH
7138: CALL_OW 257
7142: PUSH
7143: LD_INT 5
7145: EQUAL
7146: IFFALSE 7163
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7148: LD_ADDR_EXP 13
7152: PUSH
7153: LD_EXP 13
7157: PPUSH
7158: CALL 55548 0 1
7162: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 264
7172: PUSH
7173: LD_INT 13
7175: EQUAL
7176: PUSH
7177: LD_INT 25
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7248
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7187: LD_INT 175
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 34
7202: PUSH
7203: LD_INT 13
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PPUSH
7219: CALL 18587 0 1
7223: MUL
7224: PPUSH
7225: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7229: LD_INT 25
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 13
7243: PPUSH
7244: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 264
7257: PUSH
7258: LD_INT 12
7260: EQUAL
7261: PUSH
7262: LD_INT 25
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7291
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7272: LD_INT 25
7274: PPUSH
7275: LD_INT 2
7277: PPUSH
7278: LD_INT 1
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: PPUSH
7287: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 266
7300: PUSH
7301: LD_INT 32
7303: EQUAL
7304: IFFALSE 7388
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7306: LD_ADDR_EXP 33
7310: PUSH
7311: LD_EXP 33
7315: PPUSH
7316: LD_EXP 33
7320: PUSH
7321: LD_INT 1
7323: PLUS
7324: PPUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 33
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 250
7356: PUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PUSH
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 254
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 1
7387: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 266
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: LD_INT 4
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: IN
7408: IFFALSE 7473
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7410: LD_ADDR_EXP 33
7414: PUSH
7415: LD_EXP 33
7419: PPUSH
7420: LD_EXP 33
7424: PUSH
7425: LD_INT 1
7427: PLUS
7428: PPUSH
7429: LD_INT 4
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 250
7441: PUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 251
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 254
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 1
7472: ST_TO_ADDR
// end ; end ;
7473: PPOPN 1
7475: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 255
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: PUSH
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 110
7499: PUSH
7500: LD_INT 1
7502: EQUAL
7503: AND
7504: IFFALSE 7518
// SetTag ( un , 0 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 0
7513: PPUSH
7514: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 255
7527: PUSH
7528: LD_INT 1
7530: EQUAL
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 264
7541: PUSH
7542: LD_INT 6
7544: EQUAL
7545: AND
7546: PUSH
7547: LD_EXP 11
7551: NOT
7552: AND
7553: IFFALSE 7563
// seeHeavyGun := true ;
7555: LD_ADDR_EXP 11
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 263
7572: PUSH
7573: LD_INT 2
7575: EQUAL
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PUSH
7587: LD_INT 2
7589: NONEQUAL
7590: AND
7591: IFFALSE 7617
// begin ComUnlink ( un ) ;
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 136
// if not seeRemoteVehicle then
7602: LD_EXP 10
7606: NOT
7607: IFFALSE 7617
// seeRemoteVehicle := true ;
7609: LD_ADDR_EXP 10
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// end ; end ;
7617: PPOPN 1
7619: END
// on BuildingComplete ( b ) do var i , barracks ;
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin if GetSide ( b ) = 2 then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 255
7633: PUSH
7634: LD_INT 2
7636: EQUAL
7637: IFFALSE 7675
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 266
7648: PUSH
7649: LD_INT 0
7651: EQUAL
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: LD_INT 18
7660: PPUSH
7661: CALL_OW 308
7665: AND
7666: IFFALSE 7675
// SetAchievement ( ACH_WEST ) ;
7668: LD_STRING ACH_WEST
7670: PPUSH
7671: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 255
7684: PUSH
7685: LD_INT 1
7687: EQUAL
7688: IFFALSE 7864
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7690: LD_ADDR_EXP 33
7694: PUSH
7695: LD_EXP 33
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: CALL_OW 3
7707: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 266
7717: PUSH
7718: LD_INT 4
7720: EQUAL
7721: IFFALSE 7732
// ComUpgrade ( b ) ;
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 266
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: IN
7752: IFFALSE 7864
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 6
7761: PUSH
7762: LD_INT 7
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ARRAY
7780: PPUSH
7781: CALL_OW 208
// if GetBType ( b ) = b_turret then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 266
7794: PUSH
7795: LD_INT 33
7797: EQUAL
7798: IFFALSE 7802
// exit ;
7800: GO 7864
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: ST_TO_ADDR
// if barracks then
7836: LD_VAR 0 3
7840: IFFALSE 7864
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: CALL_OW 313
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: CALL_OW 122
// end ; end ; end ;
7864: PPOPN 3
7866: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL 59000 0 2
// if GetSide ( factory ) = 1 then
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 255
7890: PUSH
7891: LD_INT 1
7893: EQUAL
7894: IFFALSE 7973
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 264
7905: PUSH
7906: LD_INT 12
7908: EQUAL
7909: IFFALSE 7921
// usCargo := vehicle ;
7911: LD_ADDR_EXP 32
7915: PUSH
7916: LD_VAR 0 1
7920: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 264
7930: PUSH
7931: LD_INT 12
7933: PUSH
7934: LD_INT 13
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: IN
7941: NOT
7942: IFFALSE 7973
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7944: LD_ADDR_EXP 31
7948: PUSH
7949: LD_EXP 31
7953: PPUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_INT 1
7961: PLUS
7962: PPUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 1
7972: ST_TO_ADDR
// end ; end ;
7973: PPOPN 2
7975: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7976: LD_VAR 0 2
7980: PPUSH
7981: CALL_OW 255
7985: PUSH
7986: LD_INT 1
7988: EQUAL
7989: IFFALSE 8003
// AddComEnterUnit ( un , amFac ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_INT 25
7998: PPUSH
7999: CALL_OW 180
// end ;
8003: PPOPN 4
8005: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 255
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: PUSH
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 266
8029: PUSH
8030: LD_INT 32
8032: EQUAL
8033: AND
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 257
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: IN
8055: AND
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 50
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 69
8092: AND
8093: IFFALSE 8163
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8095: LD_INT 74
8097: PPUSH
8098: LD_INT 120
8100: PPUSH
8101: CALL_OW 428
8105: PPUSH
8106: CALL_OW 313
8110: PUSH
8111: LD_INT 6
8113: LESS
8114: IFFALSE 8163
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 74
8123: PPUSH
8124: LD_INT 120
8126: PPUSH
8127: CALL_OW 428
8131: PPUSH
8132: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: IFFALSE 8163
// AddComChangeProfession ( un , class_sniper ) ;
8151: LD_VAR 0 2
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: CALL_OW 183
// end ; end ; end_of_file
8163: PPOPN 2
8165: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
// Video ( true ) ;
8178: LD_INT 1
8180: PPUSH
8181: CALL 54159 0 1
// music_nat := 1 ;
8185: LD_ADDR_OWVAR 71
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// music_class := music_recon ;
8193: LD_ADDR_OWVAR 72
8197: PUSH
8198: LD_INT 3
8200: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8201: LD_INT 184
8203: PPUSH
8204: LD_INT 142
8206: PPUSH
8207: LD_INT 2
8209: PPUSH
8210: LD_INT 10
8212: NEG
8213: PPUSH
8214: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8218: LD_INT 184
8220: PPUSH
8221: LD_INT 142
8223: PPUSH
8224: LD_INT 2
8226: PPUSH
8227: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8231: LD_INT 204
8233: PPUSH
8234: LD_INT 151
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 10
8242: NEG
8243: PPUSH
8244: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8248: LD_INT 204
8250: PPUSH
8251: LD_INT 151
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8261: LD_INT 184
8263: PPUSH
8264: LD_INT 142
8266: PPUSH
8267: CALL_OW 86
// wait ( 0 0$2 ) ;
8271: LD_INT 70
8273: PPUSH
8274: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8278: LD_ADDR_VAR 0 5
8282: PUSH
8283: LD_EXP 15
8287: PUSH
8288: LD_EXP 16
8292: PUSH
8293: LD_EXP 17
8297: PUSH
8298: LD_EXP 18
8302: PUSH
8303: LD_EXP 19
8307: PUSH
8308: LD_EXP 20
8312: PUSH
8313: LD_EXP 21
8317: PUSH
8318: LD_EXP 22
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_EXP 27
8355: UNION
8356: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: LD_VAR 0 5
8366: PPUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 2
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 72
8381: PUSH
8382: LD_INT 0
8384: GREATER
8385: ST_TO_ADDR
// hasCamera := false ;
8386: LD_ADDR_VAR 0 8
8390: PUSH
8391: LD_INT 0
8393: ST_TO_ADDR
// if not hasEng then
8394: LD_VAR 0 7
8398: NOT
8399: IFFALSE 8452
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8401: LD_ADDR_VAR 0 6
8405: PUSH
8406: LD_VAR 0 5
8410: PUSH
8411: LD_EXP 25
8415: PUSH
8416: LD_EXP 17
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: DIFF
8425: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8426: LD_VAR 0 6
8430: PUSH
8431: LD_INT 1
8433: PPUSH
8434: LD_VAR 0 6
8438: PPUSH
8439: CALL_OW 12
8443: ARRAY
8444: PPUSH
8445: LD_INT 2
8447: PPUSH
8448: CALL_OW 336
// end ; if heikeVehicles then
8452: LD_EXP 29
8456: IFFALSE 9080
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8458: LD_ADDR_VAR 0 5
8462: PUSH
8463: LD_VAR 0 5
8467: PPUSH
8468: LD_INT 3
8470: PPUSH
8471: CALL 56413 0 2
8475: ST_TO_ADDR
// for i in heikeVehicles do
8476: LD_ADDR_VAR 0 2
8480: PUSH
8481: LD_EXP 29
8485: PUSH
8486: FOR_IN
8487: IFFALSE 9078
// begin if not tmp then
8489: LD_VAR 0 5
8493: NOT
8494: IFFALSE 8498
// break ;
8496: GO 9078
// uc_side := 2 ;
8498: LD_ADDR_OWVAR 20
8502: PUSH
8503: LD_INT 2
8505: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8506: LD_ADDR_OWVAR 21
8510: PUSH
8511: LD_VAR 0 2
8515: PUSH
8516: LD_INT 5
8518: ARRAY
8519: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8520: LD_ADDR_OWVAR 37
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8534: LD_ADDR_OWVAR 39
8538: PUSH
8539: LD_VAR 0 2
8543: PUSH
8544: LD_INT 2
8546: ARRAY
8547: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8548: LD_ADDR_OWVAR 38
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 3
8560: ARRAY
8561: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8562: LD_ADDR_OWVAR 40
8566: PUSH
8567: LD_VAR 0 2
8571: PUSH
8572: LD_INT 4
8574: ARRAY
8575: ST_TO_ADDR
// veh := CreateVehicle ;
8576: LD_ADDR_VAR 0 4
8580: PUSH
8581: CALL_OW 45
8585: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8586: LD_VAR 0 4
8590: PPUSH
8591: LD_INT 4
8593: PPUSH
8594: CALL_OW 233
// if i [ 3 ] = control_manual then
8598: LD_VAR 0 2
8602: PUSH
8603: LD_INT 3
8605: ARRAY
8606: PUSH
8607: LD_INT 1
8609: EQUAL
8610: IFFALSE 8695
// begin PlaceUnitArea ( veh , startArea , false ) ;
8612: LD_VAR 0 4
8616: PPUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
8627: LD_VAR 0 2
8631: PUSH
8632: LD_INT 4
8634: ARRAY
8635: PUSH
8636: LD_INT 31
8638: EQUAL
8639: IFFALSE 8657
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8641: LD_VAR 0 5
8645: PUSH
8646: LD_INT 1
8648: ARRAY
8649: PPUSH
8650: LD_INT 3
8652: PPUSH
8653: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8657: LD_VAR 0 5
8661: PUSH
8662: LD_INT 1
8664: ARRAY
8665: PPUSH
8666: LD_VAR 0 4
8670: PPUSH
8671: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8675: LD_ADDR_VAR 0 5
8679: PUSH
8680: LD_VAR 0 5
8684: PPUSH
8685: LD_INT 1
8687: PPUSH
8688: CALL_OW 3
8692: ST_TO_ADDR
// end else
8693: GO 8756
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8695: LD_INT 22
8697: PUSH
8698: LD_INT 2
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 34
8707: PUSH
8708: LD_INT 31
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 69
8723: IFFALSE 8756
// begin PlaceUnitArea ( veh , startArea , false ) ;
8725: LD_VAR 0 4
8729: PPUSH
8730: LD_INT 1
8732: PPUSH
8733: LD_INT 0
8735: PPUSH
8736: CALL_OW 49
// Connect ( veh ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: CALL 24793 0 1
// wait ( 0 0$2 ) ;
8749: LD_INT 70
8751: PPUSH
8752: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8756: LD_VAR 0 4
8760: PPUSH
8761: LD_VAR 0 2
8765: PUSH
8766: LD_INT 6
8768: ARRAY
8769: PPUSH
8770: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8774: LD_VAR 0 4
8778: PPUSH
8779: LD_INT 20
8781: PPUSH
8782: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8786: LD_VAR 0 2
8790: PUSH
8791: LD_INT 7
8793: ARRAY
8794: PUSH
8795: LD_VAR 0 4
8799: PPUSH
8800: CALL_OW 264
8804: PUSH
8805: LD_INT 51
8807: PUSH
8808: LD_INT 32
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: IN
8815: AND
8816: IFFALSE 8867
// begin for j := 1 to 2 do
8818: LD_ADDR_VAR 0 3
8822: PUSH
8823: DOUBLE
8824: LD_INT 1
8826: DEC
8827: ST_TO_ADDR
8828: LD_INT 2
8830: PUSH
8831: FOR_TO
8832: IFFALSE 8865
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8834: LD_VAR 0 4
8838: PPUSH
8839: LD_VAR 0 3
8843: PPUSH
8844: LD_VAR 0 2
8848: PUSH
8849: LD_INT 7
8851: ARRAY
8852: PUSH
8853: LD_VAR 0 3
8857: ARRAY
8858: PPUSH
8859: CALL_OW 291
8863: GO 8831
8865: POP
8866: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8867: LD_VAR 0 4
8871: PPUSH
8872: LD_INT 185
8874: PPUSH
8875: LD_INT 144
8877: PPUSH
8878: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8882: LD_VAR 0 4
8886: PPUSH
8887: CALL_OW 263
8891: PUSH
8892: LD_INT 1
8894: EQUAL
8895: PUSH
8896: LD_VAR 0 8
8900: NOT
8901: AND
8902: PUSH
8903: LD_VAR 0 4
8907: PPUSH
8908: CALL_OW 311
8912: PPUSH
8913: CALL_OW 257
8917: PUSH
8918: LD_INT 2
8920: EQUAL
8921: AND
8922: IFFALSE 9027
// begin hasCamera := true ;
8924: LD_ADDR_VAR 0 8
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8932: LD_ADDR_VAR 0 9
8936: PUSH
8937: LD_VAR 0 4
8941: PPUSH
8942: CALL_OW 311
8946: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8947: LD_VAR 0 4
8951: PPUSH
8952: LD_INT 177
8954: PPUSH
8955: LD_INT 138
8957: PPUSH
8958: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8962: LD_VAR 0 9
8966: PPUSH
8967: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8971: LD_VAR 0 9
8975: PPUSH
8976: LD_INT 190
8978: PPUSH
8979: LD_INT 150
8981: PPUSH
8982: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8986: LD_VAR 0 9
8990: PPUSH
8991: LD_VAR 0 4
8995: PPUSH
8996: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9000: LD_VAR 0 9
9004: PPUSH
9005: LD_INT 170
9007: PPUSH
9008: LD_INT 103
9010: PPUSH
9011: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9015: LD_INT 190
9017: PPUSH
9018: LD_INT 150
9020: PPUSH
9021: CALL_OW 84
// end else
9025: GO 9069
// begin AddComWait ( veh , 0 0$2 ) ;
9027: LD_VAR 0 4
9031: PPUSH
9032: LD_INT 70
9034: PPUSH
9035: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9039: LD_VAR 0 4
9043: PPUSH
9044: LD_INT 179
9046: PPUSH
9047: LD_INT 129
9049: PPUSH
9050: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9054: LD_VAR 0 4
9058: PPUSH
9059: LD_INT 170
9061: PPUSH
9062: LD_INT 103
9064: PPUSH
9065: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9069: LD_INT 70
9071: PPUSH
9072: CALL_OW 67
// end ;
9076: GO 8486
9078: POP
9079: POP
// end ; if tmp then
9080: LD_VAR 0 5
9084: IFFALSE 9229
// begin for i in tmp do
9086: LD_ADDR_VAR 0 2
9090: PUSH
9091: LD_VAR 0 5
9095: PUSH
9096: FOR_IN
9097: IFFALSE 9227
// begin SetDir ( i , 4 ) ;
9099: LD_VAR 0 2
9103: PPUSH
9104: LD_INT 4
9106: PPUSH
9107: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
9111: LD_VAR 0 2
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 0
9121: PPUSH
9122: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
9126: LD_VAR 0 2
9130: PPUSH
9131: LD_INT 185
9133: PPUSH
9134: LD_INT 144
9136: PPUSH
9137: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9141: LD_VAR 0 2
9145: PPUSH
9146: CALL_OW 257
9150: PUSH
9151: LD_INT 2
9153: EQUAL
9154: PUSH
9155: LD_VAR 0 8
9159: NOT
9160: AND
9161: IFFALSE 9188
// begin hasCamera := true ;
9163: LD_ADDR_VAR 0 8
9167: PUSH
9168: LD_INT 1
9170: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9171: LD_VAR 0 2
9175: PPUSH
9176: LD_INT 190
9178: PPUSH
9179: LD_INT 150
9181: PPUSH
9182: CALL_OW 217
// end else
9186: GO 9203
// AddComMoveXY ( i , 179 , 129 ) ;
9188: LD_VAR 0 2
9192: PPUSH
9193: LD_INT 179
9195: PPUSH
9196: LD_INT 129
9198: PPUSH
9199: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9203: LD_VAR 0 2
9207: PPUSH
9208: LD_INT 170
9210: PPUSH
9211: LD_INT 103
9213: PPUSH
9214: CALL_OW 171
// wait ( 0 0$2 ) ;
9218: LD_INT 70
9220: PPUSH
9221: CALL_OW 67
// end ;
9225: GO 9096
9227: POP
9228: POP
// end ; if heikeApes then
9229: LD_EXP 28
9233: IFFALSE 9351
// begin counter := 0 ;
9235: LD_ADDR_VAR 0 10
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// for i in heikeApes do
9243: LD_ADDR_VAR 0 2
9247: PUSH
9248: LD_EXP 28
9252: PUSH
9253: FOR_IN
9254: IFFALSE 9349
// begin if counter > 2 then
9256: LD_VAR 0 10
9260: PUSH
9261: LD_INT 2
9263: GREATER
9264: IFFALSE 9268
// break ;
9266: GO 9349
// counter := Inc ( counter ) ;
9268: LD_ADDR_VAR 0 10
9272: PUSH
9273: LD_VAR 0 10
9277: PPUSH
9278: CALL 55548 0 1
9282: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9283: LD_VAR 0 2
9287: PPUSH
9288: LD_INT 4
9290: PPUSH
9291: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
9295: LD_VAR 0 2
9299: PPUSH
9300: LD_INT 1
9302: PPUSH
9303: LD_INT 0
9305: PPUSH
9306: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
9310: LD_VAR 0 2
9314: PPUSH
9315: LD_INT 185
9317: PPUSH
9318: LD_INT 144
9320: PPUSH
9321: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9325: LD_VAR 0 2
9329: PPUSH
9330: LD_INT 170
9332: PPUSH
9333: LD_INT 103
9335: PPUSH
9336: CALL_OW 171
// wait ( 0 0$2 ) ;
9340: LD_INT 70
9342: PPUSH
9343: CALL_OW 67
// end ;
9347: GO 9253
9349: POP
9350: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9351: LD_EXP 15
9355: PPUSH
9356: LD_INT 163
9358: PPUSH
9359: LD_INT 89
9361: PPUSH
9362: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9366: LD_EXP 15
9370: PPUSH
9371: LD_STRING DH-Intro-1
9373: PPUSH
9374: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9378: LD_INT 175
9380: PPUSH
9381: LD_INT 117
9383: PPUSH
9384: CALL_OW 84
// if Markov then
9388: LD_EXP 22
9392: IFFALSE 9967
// begin Say ( Markov , DMar-Intro-2 ) ;
9394: LD_EXP 22
9398: PPUSH
9399: LD_STRING DMar-Intro-2
9401: PPUSH
9402: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9406: LD_EXP 22
9410: PPUSH
9411: LD_STRING DMar-Intro-3
9413: PPUSH
9414: CALL_OW 88
// wait ( 0 0$1 ) ;
9418: LD_INT 35
9420: PPUSH
9421: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9425: LD_EXP 15
9429: PPUSH
9430: CALL_OW 85
// if Kurt then
9434: LD_EXP 25
9438: IFFALSE 9490
// begin if IsInUnit ( Kurt ) then
9440: LD_EXP 25
9444: PPUSH
9445: CALL_OW 310
9449: IFFALSE 9460
// ComExit ( Kurt ) ;
9451: LD_EXP 25
9455: PPUSH
9456: CALL 54585 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9460: LD_EXP 25
9464: PPUSH
9465: LD_INT 130
9467: PPUSH
9468: LD_INT 56
9470: PPUSH
9471: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9475: LD_EXP 25
9479: PPUSH
9480: LD_INT 129
9482: PPUSH
9483: LD_INT 56
9485: PPUSH
9486: CALL_OW 178
// end ; if Kaia then
9490: LD_EXP 20
9494: IFFALSE 9674
// begin Say ( Kaia , DK-Intro-4 ) ;
9496: LD_EXP 20
9500: PPUSH
9501: LD_STRING DK-Intro-4
9503: PPUSH
9504: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9508: LD_EXP 22
9512: PPUSH
9513: LD_STRING DMar-Intro-5
9515: PPUSH
9516: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9520: LD_EXP 22
9524: PPUSH
9525: LD_STRING DMar-Intro-6
9527: PPUSH
9528: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9532: LD_EXP 24
9536: PPUSH
9537: LD_STRING DO-Intro-7
9539: PPUSH
9540: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9544: LD_INT 160
9546: PPUSH
9547: LD_INT 85
9549: PPUSH
9550: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9554: LD_EXP 22
9558: PPUSH
9559: LD_STRING DMar-Intro-8
9561: PPUSH
9562: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9566: LD_EXP 22
9570: PPUSH
9571: LD_STRING DMar-Intro-9
9573: PPUSH
9574: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9578: LD_EXP 22
9582: PPUSH
9583: LD_STRING DMar-Intro-10
9585: PPUSH
9586: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9590: LD_EXP 22
9594: PPUSH
9595: LD_STRING DMar-Intro-11
9597: PPUSH
9598: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9602: LD_EXP 16
9606: PPUSH
9607: LD_STRING DG-Intro-12
9609: PPUSH
9610: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9614: LD_EXP 16
9618: PPUSH
9619: LD_STRING DG-Intro-13
9621: PPUSH
9622: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9626: LD_EXP 16
9630: PPUSH
9631: LD_STRING DG-Intro-14
9633: PPUSH
9634: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9638: LD_EXP 16
9642: PPUSH
9643: LD_STRING DG-Intro-15
9645: PPUSH
9646: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DH-Intro-16
9657: PPUSH
9658: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9662: LD_EXP 22
9666: PPUSH
9667: LD_STRING DMar-Intro-17
9669: PPUSH
9670: CALL_OW 88
// end ; if Kurt and Mike then
9674: LD_EXP 25
9678: PUSH
9679: LD_EXP 17
9683: AND
9684: IFFALSE 9967
// begin CenterNowOnUnits ( Kurt ) ;
9686: LD_EXP 25
9690: PPUSH
9691: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9695: LD_EXP 25
9699: PPUSH
9700: LD_EXP 15
9704: PPUSH
9705: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9709: LD_EXP 25
9713: PPUSH
9714: LD_STRING DKs-Intro-18
9716: PPUSH
9717: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9721: LD_EXP 25
9725: PPUSH
9726: LD_STRING DKs-Intro-19
9728: PPUSH
9729: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9733: LD_EXP 17
9737: PPUSH
9738: CALL_OW 87
// if IsInUnit ( Mike ) then
9742: LD_EXP 17
9746: PPUSH
9747: CALL_OW 310
9751: IFFALSE 9762
// ComExit ( Mike ) ;
9753: LD_EXP 17
9757: PPUSH
9758: CALL 54585 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9762: LD_EXP 17
9766: PPUSH
9767: LD_INT 129
9769: PPUSH
9770: LD_INT 53
9772: PPUSH
9773: CALL_OW 171
// AddComHold ( Mike ) ;
9777: LD_EXP 17
9781: PPUSH
9782: CALL_OW 200
// wait ( 0 0$2 ) ;
9786: LD_INT 70
9788: PPUSH
9789: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9793: LD_EXP 17
9797: PPUSH
9798: LD_STRING DM-Intro-20
9800: PPUSH
9801: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9805: LD_ADDR_EXP 3
9809: PUSH
9810: LD_STRING Scout
9812: PPUSH
9813: CALL_OW 97
9817: ST_TO_ADDR
// if scoutActive = 1 then
9818: LD_EXP 3
9822: PUSH
9823: LD_INT 1
9825: EQUAL
9826: IFFALSE 9923
// begin CenterNowOnUnits ( Kurt ) ;
9828: LD_EXP 25
9832: PPUSH
9833: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9837: LD_EXP 15
9841: PPUSH
9842: LD_STRING DH-Intro-21
9844: PPUSH
9845: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9849: LD_EXP 17
9853: PPUSH
9854: LD_STRING DM-Intro-22
9856: PPUSH
9857: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9861: LD_EXP 25
9865: PPUSH
9866: LD_STRING DKs-Intro-23
9868: PPUSH
9869: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9873: LD_EXP 25
9877: PPUSH
9878: LD_INT 5
9880: PPUSH
9881: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9885: LD_EXP 17
9889: PPUSH
9890: LD_INT 5
9892: PPUSH
9893: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9897: LD_EXP 25
9901: PUSH
9902: LD_EXP 17
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: LD_INT 104
9913: PPUSH
9914: LD_INT 66
9916: PPUSH
9917: CALL_OW 111
// end else
9921: GO 9967
// begin scoutActive := 0 ;
9923: LD_ADDR_EXP 3
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9931: LD_EXP 15
9935: PPUSH
9936: LD_STRING DH-Intro-a-21
9938: PPUSH
9939: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9943: LD_EXP 17
9947: PPUSH
9948: LD_STRING DM-Intro-a-22
9950: PPUSH
9951: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9955: LD_EXP 25
9959: PPUSH
9960: LD_STRING DKs-Intro-a-23
9962: PPUSH
9963: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9967: LD_INT 0
9969: PPUSH
9970: CALL 54159 0 1
// music_nat := music_auto ;
9974: LD_ADDR_OWVAR 71
9978: PUSH
9979: LD_INT 0
9981: ST_TO_ADDR
// music_class := music_auto ;
9982: LD_ADDR_OWVAR 72
9986: PUSH
9987: LD_INT 0
9989: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9990: LD_STRING M1
9992: PPUSH
9993: CALL_OW 337
// wait ( 0 0$3 ) ;
9997: LD_INT 105
9999: PPUSH
10000: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10004: LD_EXP 15
10008: PPUSH
10009: LD_STRING DH-Base-1
10011: PPUSH
10012: CALL_OW 88
// if Kaia then
10016: LD_EXP 20
10020: IFFALSE 10130
// begin Say ( Kaia , DK-Base-2 ) ;
10022: LD_EXP 20
10026: PPUSH
10027: LD_STRING DK-Base-2
10029: PPUSH
10030: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10034: LD_EXP 15
10038: PPUSH
10039: LD_STRING DH-Base-3
10041: PPUSH
10042: CALL_OW 88
// if Aviradze then
10046: LD_EXP 26
10050: IFFALSE 10130
// begin Say ( Aviradze , DA-Base-4 ) ;
10052: LD_EXP 26
10056: PPUSH
10057: LD_STRING DA-Base-4
10059: PPUSH
10060: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10064: LD_EXP 20
10068: PPUSH
10069: LD_STRING DK-Base-5
10071: PPUSH
10072: CALL_OW 88
// if Markov then
10076: LD_EXP 22
10080: IFFALSE 10130
// begin Say ( Markov , DMar-Base-6 ) ;
10082: LD_EXP 22
10086: PPUSH
10087: LD_STRING DMar-Base-6
10089: PPUSH
10090: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10094: LD_EXP 20
10098: PPUSH
10099: LD_STRING DK-Base-7
10101: PPUSH
10102: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10106: LD_EXP 22
10110: PPUSH
10111: LD_STRING DMar-Base-8
10113: PPUSH
10114: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10118: LD_EXP 22
10122: PPUSH
10123: LD_STRING DMar-Base-9
10125: PPUSH
10126: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10130: CALL_OW 22
// end ;
10134: LD_VAR 0 1
10138: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10139: LD_EXP 5
10143: IFFALSE 11254
10145: GO 10147
10147: DISABLE
10148: LD_INT 0
10150: PPUSH
10151: PPUSH
// begin InGameOn ;
10152: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10156: LD_EXP 17
10160: PUSH
10161: LD_EXP 25
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: LD_EXP 15
10174: PPUSH
10175: CALL_OW 119
// ComExit ( Heike ) ;
10179: LD_EXP 15
10183: PPUSH
10184: CALL 54585 0 1
// if IsOk ( Mike ) then
10188: LD_EXP 17
10192: PPUSH
10193: CALL_OW 302
10197: IFFALSE 10215
// AddComTurnUnit ( Heike , Mike ) else
10199: LD_EXP 15
10203: PPUSH
10204: LD_EXP 17
10208: PPUSH
10209: CALL_OW 179
10213: GO 10229
// AddComTurnUnit ( Heike , Kurt ) ;
10215: LD_EXP 15
10219: PPUSH
10220: LD_EXP 25
10224: PPUSH
10225: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10229: LD_EXP 17
10233: PPUSH
10234: CALL_OW 302
10238: PUSH
10239: LD_EXP 25
10243: PPUSH
10244: CALL_OW 302
10248: AND
10249: IFFALSE 10500
// begin CenterNowOnUnits ( Mike ) ;
10251: LD_EXP 17
10255: PPUSH
10256: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10260: LD_EXP 17
10264: PPUSH
10265: LD_STRING DM-Scout-1
10267: PPUSH
10268: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10272: LD_EXP 15
10276: PPUSH
10277: LD_STRING DH-Scout-2
10279: PPUSH
10280: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10284: LD_EXP 25
10288: PPUSH
10289: LD_STRING DKs-Scout-3
10291: PPUSH
10292: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10296: LD_EXP 15
10300: PPUSH
10301: LD_STRING DH-Scout-4
10303: PPUSH
10304: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10308: LD_EXP 15
10312: PPUSH
10313: LD_STRING DH-Scout-5
10315: PPUSH
10316: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10320: LD_ADDR_VAR 0 2
10324: PUSH
10325: LD_INT 72
10327: PUSH
10328: LD_INT 122
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 89
10337: PUSH
10338: LD_INT 131
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 99
10347: PUSH
10348: LD_INT 139
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 100
10357: PUSH
10358: LD_INT 148
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: ST_TO_ADDR
// for i in tmp do
10371: LD_ADDR_VAR 0 1
10375: PUSH
10376: LD_VAR 0 2
10380: PUSH
10381: FOR_IN
10382: IFFALSE 10440
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10384: LD_VAR 0 1
10388: PUSH
10389: LD_INT 1
10391: ARRAY
10392: PPUSH
10393: LD_VAR 0 1
10397: PUSH
10398: LD_INT 2
10400: ARRAY
10401: PPUSH
10402: LD_INT 2
10404: PPUSH
10405: LD_INT 6
10407: NEG
10408: PPUSH
10409: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10413: LD_VAR 0 1
10417: PUSH
10418: LD_INT 1
10420: ARRAY
10421: PPUSH
10422: LD_VAR 0 1
10426: PUSH
10427: LD_INT 2
10429: ARRAY
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: CALL_OW 331
// end ;
10438: GO 10381
10440: POP
10441: POP
// CenterOnXY ( 83 , 132 ) ;
10442: LD_INT 83
10444: PPUSH
10445: LD_INT 132
10447: PPUSH
10448: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10452: LD_EXP 25
10456: PPUSH
10457: LD_STRING DKs-Scout-6
10459: PPUSH
10460: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10464: LD_EXP 17
10468: PPUSH
10469: LD_STRING DM-Scout-7
10471: PPUSH
10472: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10476: LD_EXP 17
10480: PPUSH
10481: LD_STRING DM-Scout-8
10483: PPUSH
10484: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10488: LD_EXP 25
10492: PPUSH
10493: LD_STRING DKs-Scout-9
10495: PPUSH
10496: CALL_OW 88
// end ; if IsDead ( Mike ) then
10500: LD_EXP 17
10504: PPUSH
10505: CALL_OW 301
10509: IFFALSE 10676
// begin CenterNowOnUnits ( Kurt ) ;
10511: LD_EXP 25
10515: PPUSH
10516: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10520: LD_EXP 25
10524: PPUSH
10525: LD_STRING DKs-Scout-b-1
10527: PPUSH
10528: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10532: LD_EXP 25
10536: PPUSH
10537: LD_STRING DKs-Scout-b-2
10539: PPUSH
10540: CALL_OW 88
// if IsOk ( Givi ) then
10544: LD_EXP 16
10548: PPUSH
10549: CALL_OW 302
10553: IFFALSE 10628
// begin ComExit ( Givi ) ;
10555: LD_EXP 16
10559: PPUSH
10560: CALL 54585 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10564: LD_EXP 16
10568: PPUSH
10569: LD_EXP 25
10573: PPUSH
10574: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10578: LD_EXP 16
10582: PPUSH
10583: LD_STRING DG-Scout-b-3
10585: PPUSH
10586: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10590: LD_EXP 16
10594: PPUSH
10595: LD_STRING DG-Scout-b-4
10597: PPUSH
10598: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10602: LD_EXP 16
10606: PPUSH
10607: LD_STRING DG-Scout-b-5
10609: PPUSH
10610: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10614: LD_EXP 15
10618: PPUSH
10619: LD_STRING DH-Scout-b-6
10621: PPUSH
10622: CALL_OW 88
// end else
10626: GO 10640
// Say ( Heike , DH-Scout-a-4 ) ;
10628: LD_EXP 15
10632: PPUSH
10633: LD_STRING DH-Scout-a-4
10635: PPUSH
10636: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10640: LD_EXP 25
10644: PPUSH
10645: LD_STRING DKs-Scout-b-7
10647: PPUSH
10648: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10652: LD_EXP 25
10656: PPUSH
10657: LD_STRING DKs-Scout-b-8
10659: PPUSH
10660: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10664: LD_EXP 25
10668: PPUSH
10669: LD_STRING DKs-Scout-b-9
10671: PPUSH
10672: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10676: LD_EXP 25
10680: PPUSH
10681: CALL_OW 301
10685: IFFALSE 10964
// begin CenterNowOnUnits ( Mike ) ;
10687: LD_EXP 17
10691: PPUSH
10692: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10696: LD_EXP 17
10700: PPUSH
10701: LD_STRING DM-Scout-a-1
10703: PPUSH
10704: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10708: LD_EXP 17
10712: PPUSH
10713: LD_STRING DM-Scout-a-2
10715: PPUSH
10716: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10720: LD_EXP 17
10724: PPUSH
10725: CALL_OW 256
10729: PUSH
10730: LD_INT 1000
10732: LESS
10733: IFFALSE 10749
// Say ( Heike , DH-Scout-a-3 ) else
10735: LD_EXP 15
10739: PPUSH
10740: LD_STRING DH-Scout-a-3
10742: PPUSH
10743: CALL_OW 88
10747: GO 10761
// Say ( Heike , DH-Scout-a-4 ) ;
10749: LD_EXP 15
10753: PPUSH
10754: LD_STRING DH-Scout-a-4
10756: PPUSH
10757: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10761: LD_EXP 17
10765: PPUSH
10766: LD_STRING DM-Scout-a-5
10768: PPUSH
10769: CALL_OW 88
// if IsOk ( Kaia ) then
10773: LD_EXP 20
10777: PPUSH
10778: CALL_OW 302
10782: IFFALSE 10964
// begin ComExit ( Kaia ) ;
10784: LD_EXP 20
10788: PPUSH
10789: CALL 54585 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10793: LD_EXP 20
10797: PPUSH
10798: LD_EXP 17
10802: PPUSH
10803: CALL_OW 172
// wait ( 0 0$2 ) ;
10807: LD_INT 70
10809: PPUSH
10810: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10814: LD_EXP 20
10818: PPUSH
10819: LD_EXP 17
10823: PPUSH
10824: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10828: LD_EXP 17
10832: PPUSH
10833: LD_EXP 20
10837: PPUSH
10838: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10842: LD_EXP 20
10846: PPUSH
10847: LD_STRING DK-Scout-a-6
10849: PPUSH
10850: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10854: LD_EXP 17
10858: PPUSH
10859: LD_STRING DM-Scout-a-7
10861: PPUSH
10862: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10866: LD_EXP 20
10870: PPUSH
10871: LD_STRING DK-Scout-a-8
10873: PPUSH
10874: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10878: LD_EXP 20
10882: PPUSH
10883: LD_STRING DK-Scout-a-9
10885: PPUSH
10886: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10890: LD_EXP 15
10894: PPUSH
10895: LD_STRING DH-Scout-a-10
10897: PPUSH
10898: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10902: LD_EXP 17
10906: PPUSH
10907: LD_EXP 15
10911: PPUSH
10912: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10916: LD_EXP 17
10920: PPUSH
10921: LD_STRING DM-Scout-a-11
10923: PPUSH
10924: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10928: LD_EXP 17
10932: PPUSH
10933: LD_STRING DM-Scout-a-12
10935: PPUSH
10936: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10940: LD_EXP 17
10944: PPUSH
10945: LD_STRING DM-Scout-a-13
10947: PPUSH
10948: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10952: LD_EXP 17
10956: PPUSH
10957: LD_STRING DM-Scout-a-14
10959: PPUSH
10960: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10964: LD_EXP 16
10968: PPUSH
10969: CALL_OW 302
10973: IFFALSE 11001
// begin Say ( Givi , DG-Scout-10 ) ;
10975: LD_EXP 16
10979: PPUSH
10980: LD_STRING DG-Scout-10
10982: PPUSH
10983: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10987: LD_EXP 16
10991: PPUSH
10992: LD_STRING DG-Scout-11
10994: PPUSH
10995: CALL_OW 88
// end else
10999: GO 11058
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11001: LD_EXP 27
11005: PPUSH
11006: LD_INT 26
11008: PUSH
11009: LD_INT 1
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PPUSH
11016: CALL_OW 72
11020: PPUSH
11021: LD_STRING DArm-Scout-10
11023: PPUSH
11024: CALL 224 0 2
11028: NOT
11029: IFFALSE 11058
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11031: LD_EXP 27
11035: PPUSH
11036: LD_INT 26
11038: PUSH
11039: LD_INT 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PPUSH
11046: CALL_OW 72
11050: PPUSH
11051: LD_STRING DArf-Scout-10
11053: PPUSH
11054: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11058: LD_EXP 15
11062: PPUSH
11063: LD_STRING DH-Scout-12
11065: PPUSH
11066: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11070: LD_EXP 15
11074: PPUSH
11075: LD_STRING DH-Scout-13
11077: PPUSH
11078: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11082: LD_EXP 17
11086: PPUSH
11087: CALL_OW 302
11091: PUSH
11092: LD_EXP 25
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11130
// begin Say ( Mike , DM-Scout-14 ) ;
11104: LD_EXP 17
11108: PPUSH
11109: LD_STRING DM-Scout-14
11111: PPUSH
11112: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11116: LD_EXP 15
11120: PPUSH
11121: LD_STRING DH-Scout-c-14
11123: PPUSH
11124: CALL_OW 88
// end else
11128: GO 11223
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11130: LD_EXP 17
11134: PPUSH
11135: CALL_OW 302
11139: PUSH
11140: LD_EXP 25
11144: PPUSH
11145: CALL_OW 302
11149: XOR
11150: IFFALSE 11211
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11152: LD_EXP 27
11156: PPUSH
11157: LD_INT 26
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 72
11171: PPUSH
11172: LD_STRING DArm-Scout-a-14
11174: PPUSH
11175: CALL 224 0 2
11179: NOT
11180: IFFALSE 11209
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11182: LD_EXP 27
11186: PPUSH
11187: LD_INT 26
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 72
11201: PPUSH
11202: LD_STRING DArf-Scout-a-14
11204: PPUSH
11205: CALL 224 0 2
// end else
11209: GO 11223
// Say ( Heike , DH-Scout-d-14 ) ;
11211: LD_EXP 15
11215: PPUSH
11216: LD_STRING DH-Scout-d-14
11218: PPUSH
11219: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11223: LD_EXP 15
11227: PPUSH
11228: LD_STRING DH-Scout-15
11230: PPUSH
11231: CALL_OW 88
// InGameOff ;
11235: CALL_OW 9
// wait ( 1 1$00 ) ;
11239: LD_INT 2100
11241: PPUSH
11242: CALL_OW 67
// usAttacksAllowed := true ;
11246: LD_ADDR_EXP 6
11250: PUSH
11251: LD_INT 1
11253: ST_TO_ADDR
// end ;
11254: PPOPN 2
11256: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11257: LD_EXP 4
11261: IFFALSE 11438
11263: GO 11265
11265: DISABLE
11266: LD_INT 0
11268: PPUSH
// begin spoken := true ;
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 1
11276: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11277: LD_INT 1050
11279: PPUSH
11280: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11284: LD_EXP 15
11288: PPUSH
11289: LD_STRING DH-Scout-c-1
11291: PPUSH
11292: CALL_OW 88
// if not IsOk ( Givi ) then
11296: LD_EXP 16
11300: PPUSH
11301: CALL_OW 302
11305: NOT
11306: IFFALSE 11310
// exit ;
11308: GO 11438
// if IsOk ( Givi ) then
11310: LD_EXP 16
11314: PPUSH
11315: CALL_OW 302
11319: IFFALSE 11347
// begin Say ( Givi , DG-Scout-c-2 ) ;
11321: LD_EXP 16
11325: PPUSH
11326: LD_STRING DG-Scout-c-2
11328: PPUSH
11329: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11333: LD_EXP 16
11337: PPUSH
11338: LD_STRING DG-Scout-c-3
11340: PPUSH
11341: CALL_OW 88
// end else
11345: GO 11420
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11347: LD_ADDR_VAR 0 1
11351: PUSH
11352: LD_EXP 27
11356: PPUSH
11357: LD_INT 26
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PPUSH
11367: CALL_OW 72
11371: PPUSH
11372: LD_STRING DArm-Scout-c-3
11374: PPUSH
11375: CALL 224 0 2
11379: ST_TO_ADDR
// if not spoken then
11380: LD_VAR 0 1
11384: NOT
11385: IFFALSE 11420
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: LD_EXP 27
11396: PPUSH
11397: LD_INT 26
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PPUSH
11407: CALL_OW 72
11411: PPUSH
11412: LD_STRING DArf-Scout-c-3
11414: PPUSH
11415: CALL 224 0 2
11419: ST_TO_ADDR
// ; end ; if spoken then
11420: LD_VAR 0 1
11424: IFFALSE 11438
// Say ( Heike , DH-Scout-c-4 ) ;
11426: LD_EXP 15
11430: PPUSH
11431: LD_STRING DH-Scout-c-4
11433: PPUSH
11434: CALL_OW 88
// end ;
11438: PPOPN 1
11440: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11441: LD_INT 22
11443: PUSH
11444: LD_INT 2
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 30
11453: PUSH
11454: LD_INT 7
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 69
11469: PUSH
11470: LD_EXP 26
11474: PPUSH
11475: CALL_OW 302
11479: AND
11480: IFFALSE 11565
11482: GO 11484
11484: DISABLE
// begin DialogueOn ;
11485: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11489: LD_EXP 26
11493: PPUSH
11494: LD_STRING DA-Lab-1
11496: PPUSH
11497: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11501: LD_EXP 15
11505: PPUSH
11506: LD_STRING DH-Lab-2
11508: PPUSH
11509: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11513: LD_EXP 26
11517: PPUSH
11518: LD_STRING DA-Lab-3
11520: PPUSH
11521: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11525: LD_EXP 26
11529: PPUSH
11530: LD_STRING DA-Lab-4
11532: PPUSH
11533: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11537: LD_EXP 26
11541: PPUSH
11542: LD_STRING DA-Lab-5
11544: PPUSH
11545: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11549: LD_EXP 15
11553: PPUSH
11554: LD_STRING DH-Lab-6
11556: PPUSH
11557: CALL_OW 88
// DialogueOff ;
11561: CALL_OW 7
// end ;
11565: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11566: LD_INT 7
11568: PPUSH
11569: LD_INT 2
11571: PPUSH
11572: CALL_OW 321
11576: PUSH
11577: LD_INT 2
11579: EQUAL
11580: PUSH
11581: LD_EXP 16
11585: PPUSH
11586: CALL_OW 302
11590: AND
11591: IFFALSE 11760
11593: GO 11595
11595: DISABLE
// begin DialogueOn ;
11596: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11600: LD_EXP 16
11604: PPUSH
11605: LD_STRING DG-Opt-1
11607: PPUSH
11608: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11612: LD_EXP 15
11616: PPUSH
11617: LD_STRING DH-Opt-2
11619: PPUSH
11620: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11624: LD_EXP 16
11628: PPUSH
11629: LD_STRING DG-Opt-3
11631: PPUSH
11632: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11636: LD_EXP 16
11640: PPUSH
11641: LD_STRING DG-Opt-4
11643: PPUSH
11644: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11648: LD_EXP 15
11652: PPUSH
11653: LD_STRING DH-Opt-5
11655: PPUSH
11656: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11660: LD_EXP 16
11664: PPUSH
11665: LD_STRING DG-Opt-6
11667: PPUSH
11668: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11672: LD_EXP 15
11676: PPUSH
11677: LD_STRING DH-Opt-7
11679: PPUSH
11680: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11684: LD_EXP 16
11688: PPUSH
11689: LD_STRING DG-Opt-8
11691: PPUSH
11692: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11696: LD_EXP 16
11700: PPUSH
11701: LD_STRING DG-Opt-9
11703: PPUSH
11704: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11708: LD_EXP 15
11712: PPUSH
11713: LD_STRING DH-Opt-10
11715: PPUSH
11716: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11720: LD_EXP 16
11724: PPUSH
11725: LD_STRING DG-Opt-11
11727: PPUSH
11728: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11732: LD_EXP 16
11736: PPUSH
11737: LD_STRING DG-Opt-12
11739: PPUSH
11740: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11744: LD_EXP 15
11748: PPUSH
11749: LD_STRING DH-Opt-13
11751: PPUSH
11752: CALL_OW 88
// DialogueOff ;
11756: CALL_OW 7
// end ;
11760: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11761: LD_EXP 27
11765: PPUSH
11766: LD_INT 95
11768: PUSH
11769: LD_INT 7
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 23
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 26
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 72
11805: IFFALSE 11866
11807: GO 11809
11809: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11810: LD_EXP 27
11814: PPUSH
11815: LD_INT 95
11817: PUSH
11818: LD_INT 7
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 23
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 26
11837: PUSH
11838: LD_INT 1
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 72
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: PPUSH
11859: LD_STRING DArm-River
11861: PPUSH
11862: CALL_OW 88
// end ;
11866: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11867: LD_INT 40
11869: PPUSH
11870: LD_INT 2
11872: PPUSH
11873: CALL_OW 321
11877: PUSH
11878: LD_INT 2
11880: EQUAL
11881: PUSH
11882: LD_EXP 18
11886: PPUSH
11887: CALL_OW 302
11891: AND
11892: IFFALSE 12142
11894: GO 11896
11896: DISABLE
// begin DialogueOn ;
11897: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11901: LD_EXP 18
11905: PPUSH
11906: LD_STRING DI-Roc-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11913: LD_EXP 15
11917: PPUSH
11918: LD_STRING DH-Roc-2
11920: PPUSH
11921: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11925: LD_EXP 18
11929: PPUSH
11930: LD_STRING DI-Roc-3
11932: PPUSH
11933: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11937: LD_EXP 18
11941: PPUSH
11942: LD_STRING DI-Roc-4
11944: PPUSH
11945: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11949: LD_EXP 20
11953: PPUSH
11954: LD_STRING DK-Roc-5
11956: PPUSH
11957: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11961: LD_EXP 20
11965: PPUSH
11966: LD_STRING DK-Roc-6
11968: PPUSH
11969: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11973: LD_EXP 16
11977: PPUSH
11978: LD_STRING DG-Roc-7
11980: PPUSH
11981: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11985: LD_EXP 16
11989: PPUSH
11990: LD_STRING DG-Roc-8
11992: PPUSH
11993: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11997: LD_EXP 22
12001: PPUSH
12002: CALL_OW 302
12006: PUSH
12007: LD_EXP 20
12011: PPUSH
12012: CALL_OW 302
12016: AND
12017: PUSH
12018: LD_EXP 16
12022: PPUSH
12023: CALL_OW 302
12027: AND
12028: IFFALSE 12138
// begin Say ( Markov , DMar-Roc-9 ) ;
12030: LD_EXP 22
12034: PPUSH
12035: LD_STRING DMar-Roc-9
12037: PPUSH
12038: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12042: LD_EXP 22
12046: PPUSH
12047: LD_STRING DMar-Roc-10
12049: PPUSH
12050: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12054: LD_EXP 20
12058: PPUSH
12059: LD_STRING DK-Roc-11
12061: PPUSH
12062: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12066: LD_EXP 22
12070: PPUSH
12071: LD_STRING DMar-Roc-12
12073: PPUSH
12074: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12078: LD_EXP 20
12082: PPUSH
12083: LD_STRING DK-Roc-13
12085: PPUSH
12086: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12090: LD_EXP 16
12094: PPUSH
12095: LD_STRING DG-Roc-14
12097: PPUSH
12098: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12102: LD_EXP 22
12106: PPUSH
12107: LD_STRING DMar-Roc-15
12109: PPUSH
12110: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12114: LD_EXP 22
12118: PPUSH
12119: LD_STRING DMar-Roc-16
12121: PPUSH
12122: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12126: LD_EXP 20
12130: PPUSH
12131: LD_STRING DK-Roc-17
12133: PPUSH
12134: CALL_OW 88
// end ; DialogueOff ;
12138: CALL_OW 7
// end ;
12142: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12143: LD_EXP 30
12147: PPUSH
12148: CALL_OW 256
12152: PUSH
12153: LD_INT 1000
12155: LESS
12156: PUSH
12157: LD_INT 22
12159: PUSH
12160: LD_INT 1
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 23
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 69
12196: PUSH
12197: LD_INT 6
12199: LESS
12200: OR
12201: PUSH
12202: LD_INT 22
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 21
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 25
12224: PUSH
12225: LD_INT 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: PUSH
12242: LD_INT 2
12244: LESS
12245: OR
12246: IFFALSE 13522
12248: GO 12250
12250: DISABLE
12251: LD_INT 0
12253: PPUSH
12254: PPUSH
12255: PPUSH
// begin usAttacksAllowed := false ;
12256: LD_ADDR_EXP 6
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// usSurrender := true ;
12264: LD_ADDR_EXP 7
12268: PUSH
12269: LD_INT 1
12271: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12272: LD_INT 1
12274: PPUSH
12275: LD_INT 2
12277: PPUSH
12278: LD_INT 1
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 80
// if IsDead ( usCommander ) then
12288: LD_EXP 30
12292: PPUSH
12293: CALL_OW 301
12297: IFFALSE 12301
// exit ;
12299: GO 13522
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12301: LD_ADDR_VAR 0 1
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 21
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 60
12328: PUSH
12329: EMPTY
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL_OW 69
12341: PUSH
12342: FOR_IN
12343: IFFALSE 12356
// ComStop ( i ) ;
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL_OW 141
12354: GO 12342
12356: POP
12357: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12358: LD_ADDR_VAR 0 1
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 3
12375: PUSH
12376: LD_INT 50
12378: PUSH
12379: EMPTY
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 21
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: PUSH
12406: FOR_IN
12407: IFFALSE 12423
// SetLives ( i , 251 ) ;
12409: LD_VAR 0 1
12413: PPUSH
12414: LD_INT 251
12416: PPUSH
12417: CALL_OW 234
12421: GO 12406
12423: POP
12424: POP
// Video ( true ) ;
12425: LD_INT 1
12427: PPUSH
12428: CALL 54159 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12432: LD_ADDR_VAR 0 1
12436: PUSH
12437: LD_INT 22
12439: PUSH
12440: LD_INT 2
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: PUSH
12452: FOR_IN
12453: IFFALSE 12466
// ComStop ( i ) ;
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 141
12464: GO 12452
12466: POP
12467: POP
// if not IsOk ( usCommander ) then
12468: LD_EXP 30
12472: PPUSH
12473: CALL_OW 302
12477: NOT
12478: IFFALSE 12492
// SetLives ( usCommander , 1000 ) ;
12480: LD_EXP 30
12484: PPUSH
12485: LD_INT 1000
12487: PPUSH
12488: CALL_OW 234
// InGameOn ;
12492: CALL_OW 8
// ComExit ( usCommander ) ;
12496: LD_EXP 30
12500: PPUSH
12501: CALL 54585 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12505: LD_EXP 30
12509: PPUSH
12510: LD_INT 81
12512: PPUSH
12513: LD_INT 143
12515: PPUSH
12516: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12520: LD_EXP 30
12524: PPUSH
12525: LD_INT 81
12527: PPUSH
12528: LD_INT 139
12530: PPUSH
12531: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12535: LD_INT 81
12537: PPUSH
12538: LD_INT 144
12540: PPUSH
12541: LD_INT 2
12543: PPUSH
12544: LD_INT 10
12546: NEG
12547: PPUSH
12548: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12552: LD_EXP 30
12556: PPUSH
12557: CALL_OW 87
// wait ( 0 0$2 ) ;
12561: LD_INT 70
12563: PPUSH
12564: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12568: LD_EXP 30
12572: PPUSH
12573: LD_STRING DCa-Surrender-1
12575: PPUSH
12576: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12580: LD_EXP 15
12584: PPUSH
12585: LD_STRING DH-Surrender-2
12587: PPUSH
12588: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12592: LD_EXP 15
12596: PPUSH
12597: CALL_OW 310
12601: PPUSH
12602: CALL_OW 247
12606: PUSH
12607: LD_INT 3
12609: EQUAL
12610: IFFALSE 12628
// begin ComExit ( Heike ) ;
12612: LD_EXP 15
12616: PPUSH
12617: CALL 54585 0 1
// wait ( 3 ) ;
12621: LD_INT 3
12623: PPUSH
12624: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12628: LD_EXP 15
12632: PPUSH
12633: LD_INT 82
12635: PPUSH
12636: LD_INT 133
12638: PPUSH
12639: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12643: LD_EXP 15
12647: PPUSH
12648: LD_EXP 30
12652: PPUSH
12653: CALL_OW 179
// wait ( 0 0$3 ) ;
12657: LD_INT 105
12659: PPUSH
12660: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12664: LD_EXP 15
12668: PPUSH
12669: LD_STRING DH-Surrender-3
12671: PPUSH
12672: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12676: LD_EXP 15
12680: PPUSH
12681: LD_STRING DH-Surrender-4
12683: PPUSH
12684: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12688: LD_INT 81
12690: PPUSH
12691: LD_INT 144
12693: PPUSH
12694: LD_INT 2
12696: PPUSH
12697: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12701: LD_INT 1
12703: PPUSH
12704: LD_INT 2
12706: PPUSH
12707: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12711: LD_ADDR_VAR 0 1
12715: PUSH
12716: LD_INT 22
12718: PUSH
12719: LD_INT 1
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 23
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 54
12738: PUSH
12739: EMPTY
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: PPUSH
12747: CALL_OW 69
12751: PUSH
12752: FOR_IN
12753: IFFALSE 12766
// ComExit ( i ) ;
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL 54585 0 1
12764: GO 12752
12766: POP
12767: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12768: LD_ADDR_VAR 0 3
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_INT 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 25
12785: PUSH
12786: LD_INT 4
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 69
12801: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12802: LD_ADDR_VAR 0 2
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 3
12819: PUSH
12820: LD_INT 50
12822: PUSH
12823: EMPTY
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 69
12838: ST_TO_ADDR
// if sci and hurts then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_VAR 0 2
12848: AND
12849: IFFALSE 12911
// begin for i := 1 to hurts do
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: DOUBLE
12857: LD_INT 1
12859: DEC
12860: ST_TO_ADDR
12861: LD_VAR 0 2
12865: PUSH
12866: FOR_TO
12867: IFFALSE 12909
// if i <= sci then
12869: LD_VAR 0 1
12873: PUSH
12874: LD_VAR 0 3
12878: LESSEQUAL
12879: IFFALSE 12907
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12881: LD_VAR 0 3
12885: PUSH
12886: LD_VAR 0 1
12890: ARRAY
12891: PPUSH
12892: LD_VAR 0 2
12896: PUSH
12897: LD_VAR 0 1
12901: ARRAY
12902: PPUSH
12903: CALL_OW 188
12907: GO 12866
12909: POP
12910: POP
// end ; if IsOk ( Givi ) then
12911: LD_EXP 16
12915: PPUSH
12916: CALL_OW 302
12920: IFFALSE 12936
// Say ( Givi , DG-Surrender-5 ) else
12922: LD_EXP 16
12926: PPUSH
12927: LD_STRING DG-Surrender-5
12929: PPUSH
12930: CALL_OW 88
12934: GO 12948
// Say ( Heike , DH-Surrender-a-5 ) ;
12936: LD_EXP 15
12940: PPUSH
12941: LD_STRING DH-Surrender-a-5
12943: PPUSH
12944: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12948: LD_EXP 30
12952: PPUSH
12953: LD_STRING DCa-Surrender-6
12955: PPUSH
12956: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12960: LD_EXP 30
12964: PPUSH
12965: LD_STRING DCa-Surrender-7
12967: PPUSH
12968: CALL_OW 88
// if IsOk ( Givi ) then
12972: LD_EXP 16
12976: PPUSH
12977: CALL_OW 302
12981: IFFALSE 12997
// Say ( Givi , DG-Surrender-8 ) else
12983: LD_EXP 16
12987: PPUSH
12988: LD_STRING DG-Surrender-8
12990: PPUSH
12991: CALL_OW 88
12995: GO 13009
// Say ( Heike , DH-Surrender-a-8 ) ;
12997: LD_EXP 15
13001: PPUSH
13002: LD_STRING DH-Surrender-a-8
13004: PPUSH
13005: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13009: LD_EXP 30
13013: PPUSH
13014: LD_STRING DCa-Surrender-9
13016: PPUSH
13017: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13021: LD_EXP 15
13025: PPUSH
13026: LD_STRING DH-Surrender-10
13028: PPUSH
13029: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13033: LD_EXP 30
13037: PPUSH
13038: LD_STRING DCa-Surrender-11
13040: PPUSH
13041: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13045: LD_EXP 15
13049: PPUSH
13050: LD_STRING DH-Surrender-12
13052: PPUSH
13053: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13057: LD_EXP 30
13061: PPUSH
13062: LD_STRING DCa-Surrender-13
13064: PPUSH
13065: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13069: LD_EXP 30
13073: PPUSH
13074: LD_STRING DCa-Surrender-14
13076: PPUSH
13077: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13081: LD_EXP 30
13085: PPUSH
13086: LD_STRING DCa-Surrender-15
13088: PPUSH
13089: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13093: LD_EXP 30
13097: PPUSH
13098: LD_STRING DCa-Surrender-16
13100: PPUSH
13101: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13105: LD_EXP 20
13109: PPUSH
13110: LD_STRING DK-Surrender-17
13112: PPUSH
13113: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13117: LD_EXP 24
13121: PPUSH
13122: LD_STRING DO-Surrender-18
13124: PPUSH
13125: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13129: LD_EXP 24
13133: PPUSH
13134: LD_STRING DO-Surrender-19
13136: PPUSH
13137: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13141: LD_EXP 25
13145: PPUSH
13146: LD_STRING DKs-Surrender-20
13148: PPUSH
13149: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13153: LD_EXP 25
13157: PPUSH
13158: LD_STRING DKs-Surrender-21
13160: PPUSH
13161: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13165: LD_EXP 22
13169: PPUSH
13170: LD_STRING DMar-Surrender-22
13172: PPUSH
13173: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13177: LD_EXP 22
13181: PPUSH
13182: LD_STRING DMar-Surrender-23
13184: PPUSH
13185: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13189: LD_EXP 21
13193: PPUSH
13194: LD_STRING DS-Surrender-24
13196: PPUSH
13197: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13201: LD_EXP 26
13205: PPUSH
13206: LD_STRING DA-Surrender-25
13208: PPUSH
13209: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13213: LD_EXP 18
13217: PPUSH
13218: LD_STRING DI-Surrender-26
13220: PPUSH
13221: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13225: LD_EXP 19
13229: PPUSH
13230: LD_STRING DKam-Surrender-27
13232: PPUSH
13233: CALL_OW 88
// if IsOk ( Givi ) then
13237: LD_EXP 16
13241: PPUSH
13242: CALL_OW 302
13246: IFFALSE 13286
// begin Say ( Givi , DG-Surrender-28 ) ;
13248: LD_EXP 16
13252: PPUSH
13253: LD_STRING DG-Surrender-28
13255: PPUSH
13256: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13260: LD_EXP 16
13264: PPUSH
13265: LD_STRING DG-Surrender-29
13267: PPUSH
13268: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13272: LD_EXP 16
13276: PPUSH
13277: LD_STRING DG-Surrender-30
13279: PPUSH
13280: CALL_OW 88
// end else
13284: GO 13322
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13286: LD_EXP 15
13290: PPUSH
13291: LD_STRING DH-Surrender-a-28
13293: PPUSH
13294: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13298: LD_EXP 15
13302: PPUSH
13303: LD_STRING DH-Surrender-a-29
13305: PPUSH
13306: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13310: LD_EXP 15
13314: PPUSH
13315: LD_STRING DH-Surrender-a-30
13317: PPUSH
13318: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13322: CALL 15311 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13326: LD_INT 22
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: PPUSH
13341: LD_INT 176
13343: PUSH
13344: LD_INT 123
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: PPUSH
13354: CALL 56791 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13358: LD_INT 190
13360: PPUSH
13361: LD_INT 150
13363: PPUSH
13364: LD_INT 2
13366: PPUSH
13367: LD_INT 8
13369: NEG
13370: PPUSH
13371: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13375: LD_INT 193
13377: PPUSH
13378: LD_INT 150
13380: PPUSH
13381: CALL_OW 84
// if IsOk ( Markov ) then
13385: LD_EXP 22
13389: PPUSH
13390: CALL_OW 302
13394: IFFALSE 13410
// Say ( Markov , DMar-Surrender-31 ) else
13396: LD_EXP 22
13400: PPUSH
13401: LD_STRING DMar-Surrender-31
13403: PPUSH
13404: CALL_OW 88
13408: GO 13467
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13410: LD_EXP 27
13414: PPUSH
13415: LD_INT 26
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 72
13429: PPUSH
13430: LD_STRING DArm-Surrender-a-31
13432: PPUSH
13433: CALL 224 0 2
13437: NOT
13438: IFFALSE 13467
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13440: LD_EXP 27
13444: PPUSH
13445: LD_INT 26
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PPUSH
13455: CALL_OW 72
13459: PPUSH
13460: LD_STRING DArf-Surrender-a-31
13462: PPUSH
13463: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13467: LD_EXP 15
13471: PPUSH
13472: LD_STRING DH-Surrender-32
13474: PPUSH
13475: CALL_OW 88
// InGameOff ;
13479: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13483: LD_STRING M2
13485: PPUSH
13486: CALL_OW 337
// wait ( 0 0$20 ) ;
13490: LD_INT 700
13492: PPUSH
13493: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13497: CALL 15673 0 0
// russianAttack := true ;
13501: LD_ADDR_EXP 8
13505: PUSH
13506: LD_INT 1
13508: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13509: LD_INT 190
13511: PPUSH
13512: LD_INT 150
13514: PPUSH
13515: LD_INT 2
13517: PPUSH
13518: CALL_OW 331
// end ;
13522: PPOPN 3
13524: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13525: LD_EXP 11
13529: PUSH
13530: LD_INT 2
13532: PPUSH
13533: CALL_OW 463
13537: NOT
13538: AND
13539: PUSH
13540: LD_EXP 15
13544: PPUSH
13545: CALL_OW 302
13549: AND
13550: PUSH
13551: LD_INT 22
13553: PUSH
13554: LD_INT 2
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 30
13563: PUSH
13564: LD_INT 3
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 69
13579: AND
13580: PUSH
13581: LD_EXP 22
13585: PPUSH
13586: CALL_OW 302
13590: PUSH
13591: LD_EXP 27
13595: PPUSH
13596: LD_INT 50
13598: PUSH
13599: EMPTY
13600: LIST
13601: PPUSH
13602: CALL_OW 72
13606: OR
13607: AND
13608: IFFALSE 13836
13610: GO 13612
13612: DISABLE
// begin DialogueOn ;
13613: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13617: LD_EXP 15
13621: PPUSH
13622: LD_STRING DH-Heavy-1
13624: PPUSH
13625: CALL_OW 88
// if IsOk ( Markov ) then
13629: LD_EXP 22
13633: PPUSH
13634: CALL_OW 302
13638: IFFALSE 13763
// begin Say ( Markov , DMar-Heavy-2 ) ;
13640: LD_EXP 22
13644: PPUSH
13645: LD_STRING DMar-Heavy-2
13647: PPUSH
13648: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13652: LD_INT 22
13654: PUSH
13655: LD_INT 2
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 30
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: PUSH
13681: LD_INT 1
13683: ARRAY
13684: PPUSH
13685: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13689: LD_EXP 22
13693: PPUSH
13694: LD_STRING DMar-Heavy-3
13696: PPUSH
13697: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13701: LD_EXP 22
13705: PPUSH
13706: LD_STRING DMar-Heavy-4
13708: PPUSH
13709: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13713: LD_EXP 22
13717: PPUSH
13718: LD_STRING DMar-Heavy-5
13720: PPUSH
13721: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13725: LD_EXP 22
13729: PPUSH
13730: LD_STRING DMar-Heavy-6
13732: PPUSH
13733: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13737: LD_EXP 15
13741: PPUSH
13742: LD_STRING DH-Heavy-7
13744: PPUSH
13745: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13749: LD_EXP 15
13753: PPUSH
13754: LD_STRING DH-Heavy-8
13756: PPUSH
13757: CALL_OW 88
// end else
13761: GO 13820
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13763: LD_EXP 27
13767: PPUSH
13768: LD_INT 26
13770: PUSH
13771: LD_INT 1
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PPUSH
13778: CALL_OW 72
13782: PPUSH
13783: LD_STRING DArm-Heavy-a-2
13785: PPUSH
13786: CALL 224 0 2
13790: NOT
13791: IFFALSE 13820
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13793: LD_EXP 27
13797: PPUSH
13798: LD_INT 26
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 72
13812: PPUSH
13813: LD_STRING DArf-Heavy-a-2
13815: PPUSH
13816: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13820: LD_EXP 15
13824: PPUSH
13825: LD_STRING DH-Heavy-9
13827: PPUSH
13828: CALL_OW 88
// DialogueOff ;
13832: CALL_OW 7
// end ;
13836: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13837: LD_EXP 34
13841: PPUSH
13842: LD_INT 101
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 72
13856: PUSH
13857: LD_EXP 15
13861: PPUSH
13862: CALL_OW 302
13866: AND
13867: PUSH
13868: LD_EXP 7
13872: NOT
13873: AND
13874: IFFALSE 14017
13876: GO 13878
13878: DISABLE
// begin DialogueOn ;
13879: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13883: LD_EXP 34
13887: PPUSH
13888: LD_INT 101
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 72
13902: PPUSH
13903: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13907: LD_EXP 15
13911: PPUSH
13912: LD_STRING DH-Flank-1
13914: PPUSH
13915: CALL_OW 88
// if IsOk ( Mike ) then
13919: LD_EXP 17
13923: PPUSH
13924: CALL_OW 302
13928: IFFALSE 13944
// Say ( Mike , DM-Flank-2 ) else
13930: LD_EXP 17
13934: PPUSH
13935: LD_STRING DM-Flank-2
13937: PPUSH
13938: CALL_OW 88
13942: GO 14001
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13944: LD_EXP 27
13948: PPUSH
13949: LD_INT 26
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 72
13963: PPUSH
13964: LD_STRING DArm-Flank-a-2
13966: PPUSH
13967: CALL 224 0 2
13971: NOT
13972: IFFALSE 14001
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13974: LD_EXP 27
13978: PPUSH
13979: LD_INT 26
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PPUSH
13989: CALL_OW 72
13993: PPUSH
13994: LD_STRING DArm-Flank-a-2
13996: PPUSH
13997: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14001: LD_EXP 15
14005: PPUSH
14006: LD_STRING DH-Flank-3
14008: PPUSH
14009: CALL_OW 88
// DialogueOff ;
14013: CALL_OW 7
// end ;
14017: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14018: LD_EXP 10
14022: PUSH
14023: LD_EXP 7
14027: NOT
14028: AND
14029: IFFALSE 14253
14031: GO 14033
14033: DISABLE
// begin DialogueOn ;
14034: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14038: LD_EXP 15
14042: PPUSH
14043: LD_STRING DH-USRC-1
14045: PPUSH
14046: CALL_OW 88
// if IsOk ( Markov ) then
14050: LD_EXP 22
14054: PPUSH
14055: CALL_OW 302
14059: IFFALSE 14075
// Say ( Markov , DMar-USRC-2 ) else
14061: LD_EXP 22
14065: PPUSH
14066: LD_STRING DMar-USRC-2
14068: PPUSH
14069: CALL_OW 88
14073: GO 14132
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14075: LD_EXP 27
14079: PPUSH
14080: LD_INT 26
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PPUSH
14090: CALL_OW 72
14094: PPUSH
14095: LD_STRING DArm-USRC-a-2
14097: PPUSH
14098: CALL 224 0 2
14102: NOT
14103: IFFALSE 14132
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14105: LD_EXP 27
14109: PPUSH
14110: LD_INT 26
14112: PUSH
14113: LD_INT 2
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 72
14124: PPUSH
14125: LD_STRING DArf-USRC-a-2
14127: PPUSH
14128: CALL 224 0 2
// DialogueOff ;
14132: CALL_OW 7
// wait ( 0 0$10 ) ;
14136: LD_INT 350
14138: PPUSH
14139: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14143: LD_EXP 15
14147: PPUSH
14148: LD_STRING DH-USRC-3
14150: PPUSH
14151: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14155: LD_INT 35
14157: PPUSH
14158: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14162: LD_INT 2
14164: PPUSH
14165: LD_INT 22
14167: PUSH
14168: LD_INT 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 30
14177: PUSH
14178: LD_INT 36
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 69
14193: PUSH
14194: LD_INT 1
14196: ARRAY
14197: PPUSH
14198: CALL_OW 292
14202: IFFALSE 14155
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14204: LD_INT 22
14206: PUSH
14207: LD_INT 1
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: LD_INT 36
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14241: LD_EXP 15
14245: PPUSH
14246: LD_STRING DH-USRCFound-1
14248: PPUSH
14249: CALL_OW 88
// end ;
14253: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14254: LD_EXP 20
14258: PPUSH
14259: CALL_OW 256
14263: PUSH
14264: LD_INT 3
14266: LESS
14267: IFFALSE 14304
14269: GO 14271
14271: DISABLE
// begin DialogueOn ;
14272: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14276: LD_EXP 20
14280: PPUSH
14281: LD_STRING DK-Dead-1
14283: PPUSH
14284: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14288: LD_EXP 20
14292: PPUSH
14293: LD_STRING DK-Dead-2
14295: PPUSH
14296: CALL_OW 91
// DialogueOff ;
14300: CALL_OW 7
// end ;
14304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14305: LD_INT 22
14307: PUSH
14308: LD_INT 2
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: LD_INT 35
14320: PUSH
14321: LD_INT 28
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 34
14330: PUSH
14331: LD_INT 28
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 69
14351: IFFALSE 14364
14353: GO 14355
14355: DISABLE
// hasRockets := true ;
14356: LD_ADDR_EXP 9
14360: PUSH
14361: LD_INT 1
14363: ST_TO_ADDR
14364: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14365: LD_EXP 8
14369: PUSH
14370: LD_INT 22
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: CALL_OW 69
14384: NOT
14385: AND
14386: IFFALSE 15048
14388: GO 14390
14390: DISABLE
// begin DialogueOn ;
14391: CALL_OW 6
// if vehLossCounter = 0 then
14395: LD_EXP 14
14399: PUSH
14400: LD_INT 0
14402: EQUAL
14403: IFFALSE 14412
// SetAchievement ( ACH_UNTOUCH ) ;
14405: LD_STRING ACH_UNTOUCH
14407: PPUSH
14408: CALL_OW 543
// if tick < 35 35$00 then
14412: LD_OWVAR 1
14416: PUSH
14417: LD_INT 73500
14419: LESS
14420: IFFALSE 14429
// SetAchievement ( ACH_HSPEED_7 ) ;
14422: LD_STRING ACH_HSPEED_7
14424: PPUSH
14425: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14429: LD_EXP 15
14433: PPUSH
14434: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14438: LD_EXP 15
14442: PPUSH
14443: LD_STRING DH-End-1
14445: PPUSH
14446: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14450: LD_EXP 23
14454: PPUSH
14455: LD_STRING DShar-End-2
14457: PPUSH
14458: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14462: LD_EXP 20
14466: PPUSH
14467: LD_STRING DK-End-3
14469: PPUSH
14470: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14474: LD_EXP 15
14478: PPUSH
14479: LD_STRING DH-End-4
14481: PPUSH
14482: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14486: LD_EXP 23
14490: PPUSH
14491: LD_STRING DShar-End-5
14493: PPUSH
14494: CALL_OW 94
// if IsOk ( Markov ) then
14498: LD_EXP 22
14502: PPUSH
14503: CALL_OW 302
14507: IFFALSE 14521
// Say ( Kaia , DK-End-6 ) ;
14509: LD_EXP 20
14513: PPUSH
14514: LD_STRING DK-End-6
14516: PPUSH
14517: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14521: LD_EXP 20
14525: PPUSH
14526: LD_STRING DK-End-7
14528: PPUSH
14529: CALL_OW 88
// if IsOk ( Kaia ) then
14533: LD_EXP 20
14537: PPUSH
14538: CALL_OW 302
14542: IFFALSE 14580
// begin Say ( Givi , DG-End-8 ) ;
14544: LD_EXP 16
14548: PPUSH
14549: LD_STRING DG-End-8
14551: PPUSH
14552: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14556: LD_EXP 16
14560: PPUSH
14561: LD_STRING DG-End-9
14563: PPUSH
14564: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14568: LD_EXP 15
14572: PPUSH
14573: LD_STRING DH-End-10
14575: PPUSH
14576: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14580: LD_EXP 15
14584: PPUSH
14585: LD_STRING DH-End-11
14587: PPUSH
14588: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14592: LD_INT 7
14594: PPUSH
14595: LD_INT 2
14597: PPUSH
14598: CALL_OW 321
14602: PUSH
14603: LD_INT 2
14605: EQUAL
14606: IFFALSE 14620
// AddMedal ( med1 , 1 ) else
14608: LD_STRING med1
14610: PPUSH
14611: LD_INT 1
14613: PPUSH
14614: CALL_OW 101
14618: GO 14631
// AddMedal ( med1 , - 1 ) ;
14620: LD_STRING med1
14622: PPUSH
14623: LD_INT 1
14625: NEG
14626: PPUSH
14627: CALL_OW 101
// if hasRockets then
14631: LD_EXP 9
14635: IFFALSE 14649
// AddMedal ( med2 , 1 ) else
14637: LD_STRING med2
14639: PPUSH
14640: LD_INT 1
14642: PPUSH
14643: CALL_OW 101
14647: GO 14660
// AddMedal ( med2 , - 1 ) ;
14649: LD_STRING med2
14651: PPUSH
14652: LD_INT 1
14654: NEG
14655: PPUSH
14656: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14660: LD_OWVAR 1
14664: PUSH
14665: LD_INT 105000
14667: PUSH
14668: LD_INT 94500
14670: PUSH
14671: LD_INT 84000
14673: PUSH
14674: LD_INT 73500
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: LD_OWVAR 67
14687: ARRAY
14688: LESS
14689: IFFALSE 14703
// AddMedal ( med3 , 1 ) else
14691: LD_STRING med3
14693: PPUSH
14694: LD_INT 1
14696: PPUSH
14697: CALL_OW 101
14701: GO 14714
// AddMedal ( med3 , - 1 ) ;
14703: LD_STRING med3
14705: PPUSH
14706: LD_INT 1
14708: NEG
14709: PPUSH
14710: CALL_OW 101
// GiveMedals ( MAIN ) ;
14714: LD_STRING MAIN
14716: PPUSH
14717: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14721: LD_INT 22
14723: PUSH
14724: LD_INT 2
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 23
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 21
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: PPUSH
14761: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14765: LD_EXP 30
14769: PPUSH
14770: LD_STRING 07_UsCommander
14772: PPUSH
14773: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 1
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 23
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 1
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 69
14816: PUSH
14817: LD_EXP 30
14821: DIFF
14822: PPUSH
14823: LD_STRING 07_Americans
14825: PPUSH
14826: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14830: LD_EXP 15
14834: PPUSH
14835: LD_STRING 07_Heike
14837: PPUSH
14838: CALL_OW 38
// if Aviradze then
14842: LD_EXP 26
14846: IFFALSE 14860
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14848: LD_EXP 26
14852: PPUSH
14853: LD_STRING 07_Aviradze
14855: PPUSH
14856: CALL_OW 38
// if Ibrahim then
14860: LD_EXP 18
14864: IFFALSE 14878
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14866: LD_EXP 18
14870: PPUSH
14871: LD_STRING 07_Ibrahim
14873: PPUSH
14874: CALL_OW 38
// if Kamil then
14878: LD_EXP 19
14882: IFFALSE 14896
// SaveCharacters ( Kamil , 07_Kamil ) ;
14884: LD_EXP 19
14888: PPUSH
14889: LD_STRING 07_Kamil
14891: PPUSH
14892: CALL_OW 38
// if Sophia then
14896: LD_EXP 21
14900: IFFALSE 14914
// SaveCharacters ( Sophia , 07_Sophia ) ;
14902: LD_EXP 21
14906: PPUSH
14907: LD_STRING 07_Sophia
14909: PPUSH
14910: CALL_OW 38
// if Kaia then
14914: LD_EXP 20
14918: IFFALSE 14932
// SaveCharacters ( Kaia , 07_Kaia ) ;
14920: LD_EXP 20
14924: PPUSH
14925: LD_STRING 07_Kaia
14927: PPUSH
14928: CALL_OW 38
// if Givi then
14932: LD_EXP 16
14936: IFFALSE 14950
// SaveCharacters ( Givi , 07_Givi ) ;
14938: LD_EXP 16
14942: PPUSH
14943: LD_STRING 07_Givi
14945: PPUSH
14946: CALL_OW 38
// if Mike then
14950: LD_EXP 17
14954: IFFALSE 14968
// SaveCharacters ( Mike , 07_Mike ) ;
14956: LD_EXP 17
14960: PPUSH
14961: LD_STRING 07_Mike
14963: PPUSH
14964: CALL_OW 38
// if Markov then
14968: LD_EXP 22
14972: IFFALSE 14986
// SaveCharacters ( Markov , 07_Markov ) ;
14974: LD_EXP 22
14978: PPUSH
14979: LD_STRING 07_Markov
14981: PPUSH
14982: CALL_OW 38
// if Kurt then
14986: LD_EXP 25
14990: IFFALSE 15004
// SaveCharacters ( Kurt , 07_Kurt ) ;
14992: LD_EXP 25
14996: PPUSH
14997: LD_STRING 07_Kurt
14999: PPUSH
15000: CALL_OW 38
// if Olaf then
15004: LD_EXP 24
15008: IFFALSE 15022
// SaveCharacters ( Olaf , 07_Olaf ) ;
15010: LD_EXP 24
15014: PPUSH
15015: LD_STRING 07_Olaf
15017: PPUSH
15018: CALL_OW 38
// if heikeSecondSquad then
15022: LD_EXP 27
15026: IFFALSE 15040
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15028: LD_EXP 27
15032: PPUSH
15033: LD_STRING 07_others
15035: PPUSH
15036: CALL_OW 38
// YouWin ;
15040: CALL_OW 103
// DialogueOff ;
15044: CALL_OW 7
// end ; end_of_file
15048: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15049: LD_INT 7
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 287
15059: PUSH
15060: LD_INT 12
15062: PUSH
15063: LD_INT 10
15065: PUSH
15066: LD_INT 8
15068: PUSH
15069: LD_INT 8
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: PUSH
15078: LD_OWVAR 67
15082: ARRAY
15083: LESS
15084: IFFALSE 15111
15086: GO 15088
15088: DISABLE
// begin enable ;
15089: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15090: LD_INT 1
15092: PPUSH
15093: LD_INT 5
15095: PPUSH
15096: CALL_OW 12
15100: PPUSH
15101: LD_INT 7
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 55
// end ;
15111: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15112: LD_INT 8
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 287
15122: PUSH
15123: LD_INT 25
15125: PUSH
15126: LD_INT 22
15128: PUSH
15129: LD_INT 17
15131: PUSH
15132: LD_INT 14
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: LD_OWVAR 67
15145: ARRAY
15146: LESS
15147: PUSH
15148: LD_OWVAR 1
15152: PUSH
15153: LD_INT 50400
15155: LESS
15156: AND
15157: IFFALSE 15184
15159: GO 15161
15161: DISABLE
// begin enable ;
15162: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15163: LD_INT 1
15165: PPUSH
15166: LD_INT 5
15168: PPUSH
15169: CALL_OW 12
15173: PPUSH
15174: LD_INT 8
15176: PPUSH
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 55
// end ;
15184: END
// every 0 0$40 trigger tick < 8 8$10 do
15185: LD_OWVAR 1
15189: PUSH
15190: LD_INT 17150
15192: LESS
15193: IFFALSE 15226
15195: GO 15197
15197: DISABLE
// begin enable ;
15198: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15199: LD_INT 1
15201: PPUSH
15202: LD_INT 5
15204: PPUSH
15205: CALL_OW 12
15209: PPUSH
15210: LD_INT 130
15212: PPUSH
15213: LD_INT 18
15215: PPUSH
15216: LD_INT 12
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: CALL_OW 56
// end ;
15226: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15227: LD_OWVAR 1
15231: PUSH
15232: LD_INT 12950
15234: LESS
15235: IFFALSE 15268
15237: GO 15239
15239: DISABLE
// begin enable ;
15240: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15241: LD_INT 1
15243: PPUSH
15244: LD_INT 5
15246: PPUSH
15247: CALL_OW 12
15251: PPUSH
15252: LD_INT 172
15254: PPUSH
15255: LD_INT 97
15257: PPUSH
15258: LD_INT 12
15260: PPUSH
15261: LD_INT 1
15263: PPUSH
15264: CALL_OW 56
// end ;
15268: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15269: LD_INT 20
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 287
15279: PUSH
15280: LD_INT 6
15282: LESS
15283: IFFALSE 15310
15285: GO 15287
15287: DISABLE
// begin enable ;
15288: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15289: LD_INT 1
15291: PPUSH
15292: LD_INT 5
15294: PPUSH
15295: CALL_OW 12
15299: PPUSH
15300: LD_INT 20
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: CALL_OW 55
// end ; end_of_file
15310: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
15317: PPUSH
// uc_side := 3 ;
15318: LD_ADDR_OWVAR 20
15322: PUSH
15323: LD_INT 3
15325: ST_TO_ADDR
// uc_nation := 3 ;
15326: LD_ADDR_OWVAR 21
15330: PUSH
15331: LD_INT 3
15333: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_INT 184
15341: PUSH
15342: LD_INT 144
15344: PUSH
15345: LD_INT 5
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 191
15355: PUSH
15356: LD_INT 147
15358: PUSH
15359: LD_INT 5
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 202
15369: PUSH
15370: LD_INT 151
15372: PUSH
15373: LD_INT 4
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 210
15383: PUSH
15384: LD_INT 152
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: ST_TO_ADDR
// for i := 1 to 3 do
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: DOUBLE
15407: LD_INT 1
15409: DEC
15410: ST_TO_ADDR
15411: LD_INT 3
15413: PUSH
15414: FOR_TO
15415: IFFALSE 15584
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15417: LD_INT 24
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: LD_INT 43
15428: PUSH
15429: LD_INT 44
15431: PUSH
15432: LD_INT 46
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: LD_VAR 0 2
15444: PUSH
15445: LD_INT 3
15447: MOD
15448: PUSH
15449: LD_INT 1
15451: PLUS
15452: ARRAY
15453: PPUSH
15454: LD_INT 40
15456: PPUSH
15457: CALL 21325 0 5
// veh := CreateVehicle ;
15461: LD_ADDR_VAR 0 5
15465: PUSH
15466: CALL_OW 45
15470: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15471: LD_VAR 0 5
15475: PPUSH
15476: LD_VAR 0 3
15480: PUSH
15481: LD_VAR 0 2
15485: ARRAY
15486: PUSH
15487: LD_INT 3
15489: ARRAY
15490: PPUSH
15491: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15495: LD_VAR 0 5
15499: PPUSH
15500: LD_VAR 0 3
15504: PUSH
15505: LD_VAR 0 2
15509: ARRAY
15510: PUSH
15511: LD_INT 1
15513: ARRAY
15514: PPUSH
15515: LD_VAR 0 3
15519: PUSH
15520: LD_VAR 0 2
15524: ARRAY
15525: PUSH
15526: LD_INT 2
15528: ARRAY
15529: PPUSH
15530: LD_INT 0
15532: PPUSH
15533: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15537: LD_INT 0
15539: PPUSH
15540: LD_INT 6
15542: PUSH
15543: LD_INT 7
15545: PUSH
15546: LD_INT 8
15548: PUSH
15549: LD_INT 8
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: PUSH
15558: LD_OWVAR 67
15562: ARRAY
15563: PPUSH
15564: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15568: CALL_OW 44
15572: PPUSH
15573: LD_VAR 0 5
15577: PPUSH
15578: CALL_OW 52
// end ;
15582: GO 15414
15584: POP
15585: POP
// for i := 1 to 4 do
15586: LD_ADDR_VAR 0 2
15590: PUSH
15591: DOUBLE
15592: LD_INT 1
15594: DEC
15595: ST_TO_ADDR
15596: LD_INT 4
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15666
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15602: LD_INT 0
15604: PPUSH
15605: LD_INT 6
15607: PUSH
15608: LD_INT 7
15610: PUSH
15611: LD_INT 8
15613: PUSH
15614: LD_INT 8
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: LD_OWVAR 67
15627: ARRAY
15628: PPUSH
15629: CALL_OW 381
// un := CreateHuman ;
15633: LD_ADDR_VAR 0 4
15637: PUSH
15638: CALL_OW 44
15642: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15643: LD_VAR 0 4
15647: PPUSH
15648: LD_INT 185
15650: PPUSH
15651: LD_INT 145
15653: PPUSH
15654: LD_INT 6
15656: PPUSH
15657: LD_INT 0
15659: PPUSH
15660: CALL_OW 50
// end ;
15664: GO 15599
15666: POP
15667: POP
// end ;
15668: LD_VAR 0 1
15672: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15673: LD_INT 0
15675: PPUSH
15676: PPUSH
15677: PPUSH
// uc_side := 3 ;
15678: LD_ADDR_OWVAR 20
15682: PUSH
15683: LD_INT 3
15685: ST_TO_ADDR
// if Difficulty > 1 then
15686: LD_OWVAR 67
15690: PUSH
15691: LD_INT 1
15693: GREATER
15694: IFFALSE 15856
// begin uc_nation := 0 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 0
15703: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: DOUBLE
15710: LD_INT 1
15712: DEC
15713: ST_TO_ADDR
15714: LD_INT 4
15716: PUSH
15717: LD_INT 5
15719: PUSH
15720: LD_INT 6
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: LD_OWVAR 67
15732: PUSH
15733: LD_INT 1
15735: PLUS
15736: ARRAY
15737: PUSH
15738: FOR_TO
15739: IFFALSE 15854
// begin hc_class := class_apeman_soldier ;
15741: LD_ADDR_OWVAR 28
15745: PUSH
15746: LD_INT 15
15748: ST_TO_ADDR
// hc_gallery :=  ;
15749: LD_ADDR_OWVAR 33
15753: PUSH
15754: LD_STRING 
15756: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15757: LD_ADDR_OWVAR 26
15761: PUSH
15762: LD_STRING Treci
15764: PUSH
15765: LD_STRING Ivan
15767: PUSH
15768: LD_STRING Yaromir
15770: PUSH
15771: LD_STRING Nadzieia
15773: PUSH
15774: LD_STRING Krasna
15776: PUSH
15777: LD_STRING Piaty
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: PPUSH
15791: LD_INT 6
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15800: LD_ADDR_OWVAR 31
15804: PUSH
15805: LD_INT 5
15807: PUSH
15808: LD_INT 0
15810: PUSH
15811: LD_INT 0
15813: PUSH
15814: LD_INT 0
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: ST_TO_ADDR
// hc_sex := sex_male ;
15823: LD_ADDR_OWVAR 27
15827: PUSH
15828: LD_INT 1
15830: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15831: CALL_OW 44
15835: PPUSH
15836: LD_INT 178
15838: PPUSH
15839: LD_INT 148
15841: PPUSH
15842: LD_INT 6
15844: PPUSH
15845: LD_INT 0
15847: PPUSH
15848: CALL_OW 50
// end ;
15852: GO 15738
15854: POP
15855: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: DOUBLE
15862: LD_INT 1
15864: DEC
15865: ST_TO_ADDR
15866: LD_INT 2
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: LD_INT 4
15874: PUSH
15875: LD_INT 5
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: PUSH
15884: LD_OWVAR 67
15888: ARRAY
15889: PUSH
15890: FOR_TO
15891: IFFALSE 16058
// begin uc_nation := 3 ;
15893: LD_ADDR_OWVAR 21
15897: PUSH
15898: LD_INT 3
15900: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15901: LD_INT 22
15903: PPUSH
15904: LD_INT 1
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: LD_INT 45
15912: PUSH
15913: LD_INT 43
15915: PUSH
15916: LD_INT 44
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: LD_VAR 0 2
15928: PUSH
15929: LD_INT 3
15931: MOD
15932: PUSH
15933: LD_INT 1
15935: PLUS
15936: ARRAY
15937: PPUSH
15938: LD_INT 44
15940: PPUSH
15941: CALL 21325 0 5
// veh := CreateVehicle ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: CALL_OW 45
15954: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15955: LD_VAR 0 3
15959: PPUSH
15960: LD_INT 4
15962: PPUSH
15963: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15967: LD_VAR 0 3
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 0
15977: PPUSH
15978: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15982: LD_INT 0
15984: PPUSH
15985: LD_INT 6
15987: PUSH
15988: LD_INT 7
15990: PUSH
15991: LD_INT 8
15993: PUSH
15994: LD_INT 8
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: LD_OWVAR 67
16007: ARRAY
16008: PPUSH
16009: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16013: CALL_OW 44
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16027: LD_VAR 0 3
16031: PPUSH
16032: LD_INT 178
16034: PUSH
16035: LD_INT 137
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: PPUSH
16045: CALL 56791 0 2
// wait ( 0 0$2 ) ;
16049: LD_INT 70
16051: PPUSH
16052: CALL_OW 67
// end ;
16056: GO 15890
16058: POP
16059: POP
// end ;
16060: LD_VAR 0 1
16064: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16065: LD_INT 22
16067: PUSH
16068: LD_INT 3
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 32
16077: PUSH
16078: LD_INT 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 69
16093: IFFALSE 16181
16095: GO 16097
16097: DISABLE
16098: LD_INT 0
16100: PPUSH
16101: PPUSH
// begin enable ;
16102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16103: LD_ADDR_VAR 0 2
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 32
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: ST_TO_ADDR
// for i in tmp do
16137: LD_ADDR_VAR 0 1
16141: PUSH
16142: LD_VAR 0 2
16146: PUSH
16147: FOR_IN
16148: IFFALSE 16179
// if GetFuel ( i ) < 3 then
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL_OW 261
16159: PUSH
16160: LD_INT 3
16162: LESS
16163: IFFALSE 16177
// SetFuel ( i , 3 ) ;
16165: LD_VAR 0 1
16169: PPUSH
16170: LD_INT 3
16172: PPUSH
16173: CALL_OW 240
16177: GO 16147
16179: POP
16180: POP
// end ;
16181: PPOPN 2
16183: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16184: LD_EXP 8
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 3
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 21
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: AND
16218: IFFALSE 16482
16220: GO 16222
16222: DISABLE
16223: LD_INT 0
16225: PPUSH
16226: PPUSH
16227: PPUSH
// begin enable ;
16228: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16229: LD_ADDR_VAR 0 2
16233: PUSH
16234: LD_INT 22
16236: PUSH
16237: LD_INT 3
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 25
16246: PUSH
16247: LD_INT 3
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 3
16256: PUSH
16257: LD_INT 55
16259: PUSH
16260: EMPTY
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: PPUSH
16272: CALL_OW 69
16276: ST_TO_ADDR
// if mech then
16277: LD_VAR 0 2
16281: IFFALSE 16351
// for i in mech do
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_VAR 0 2
16292: PUSH
16293: FOR_IN
16294: IFFALSE 16349
// begin if IsInArea ( i , escapeArea ) then
16296: LD_VAR 0 1
16300: PPUSH
16301: LD_INT 13
16303: PPUSH
16304: CALL_OW 308
16308: IFFALSE 16321
// RemoveUnit ( i ) else
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 64
16319: GO 16347
// if IsOk ( i ) then
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 302
16330: IFFALSE 16347
// ComMoveXY ( i , 196 , 155 ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: LD_INT 196
16339: PPUSH
16340: LD_INT 155
16342: PPUSH
16343: CALL_OW 111
// end ;
16347: GO 16293
16349: POP
16350: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16351: LD_ADDR_VAR 0 3
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: LD_INT 25
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 25
16381: PUSH
16382: LD_INT 15
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 50
16407: PUSH
16408: EMPTY
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: ST_TO_ADDR
// if tmp then
16421: LD_VAR 0 3
16425: IFFALSE 16482
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 171
16434: PUSH
16435: LD_INT 106
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 145
16444: PUSH
16445: LD_INT 69
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 132
16454: PUSH
16455: LD_INT 38
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 126
16464: PUSH
16465: LD_INT 15
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PPUSH
16478: CALL 56791 0 2
// end ; end_of_file
16482: PPOPN 3
16484: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16485: LD_INT 0
16487: PPUSH
16488: PPUSH
// if exist_mode then
16489: LD_VAR 0 2
16493: IFFALSE 16518
// unit := CreateCharacter ( prefix & ident ) else
16495: LD_ADDR_VAR 0 5
16499: PUSH
16500: LD_VAR 0 3
16504: PUSH
16505: LD_VAR 0 1
16509: STR
16510: PPUSH
16511: CALL_OW 34
16515: ST_TO_ADDR
16516: GO 16533
// unit := NewCharacter ( ident ) ;
16518: LD_ADDR_VAR 0 5
16522: PUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 25
16532: ST_TO_ADDR
// result := unit ;
16533: LD_ADDR_VAR 0 4
16537: PUSH
16538: LD_VAR 0 5
16542: ST_TO_ADDR
// end ;
16543: LD_VAR 0 4
16547: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
// if not side or not nation then
16552: LD_VAR 0 1
16556: NOT
16557: PUSH
16558: LD_VAR 0 2
16562: NOT
16563: OR
16564: IFFALSE 16568
// exit ;
16566: GO 17336
// case nation of nation_american :
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 1
16575: DOUBLE
16576: EQUAL
16577: IFTRUE 16581
16579: GO 16795
16581: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16582: LD_ADDR_VAR 0 4
16586: PUSH
16587: LD_INT 35
16589: PUSH
16590: LD_INT 45
16592: PUSH
16593: LD_INT 46
16595: PUSH
16596: LD_INT 47
16598: PUSH
16599: LD_INT 82
16601: PUSH
16602: LD_INT 83
16604: PUSH
16605: LD_INT 84
16607: PUSH
16608: LD_INT 85
16610: PUSH
16611: LD_INT 86
16613: PUSH
16614: LD_INT 1
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: LD_INT 15
16625: PUSH
16626: LD_INT 16
16628: PUSH
16629: LD_INT 7
16631: PUSH
16632: LD_INT 12
16634: PUSH
16635: LD_INT 13
16637: PUSH
16638: LD_INT 10
16640: PUSH
16641: LD_INT 14
16643: PUSH
16644: LD_INT 20
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 22
16652: PUSH
16653: LD_INT 25
16655: PUSH
16656: LD_INT 32
16658: PUSH
16659: LD_INT 27
16661: PUSH
16662: LD_INT 36
16664: PUSH
16665: LD_INT 69
16667: PUSH
16668: LD_INT 39
16670: PUSH
16671: LD_INT 34
16673: PUSH
16674: LD_INT 40
16676: PUSH
16677: LD_INT 48
16679: PUSH
16680: LD_INT 49
16682: PUSH
16683: LD_INT 50
16685: PUSH
16686: LD_INT 51
16688: PUSH
16689: LD_INT 52
16691: PUSH
16692: LD_INT 53
16694: PUSH
16695: LD_INT 54
16697: PUSH
16698: LD_INT 55
16700: PUSH
16701: LD_INT 56
16703: PUSH
16704: LD_INT 57
16706: PUSH
16707: LD_INT 58
16709: PUSH
16710: LD_INT 59
16712: PUSH
16713: LD_INT 60
16715: PUSH
16716: LD_INT 61
16718: PUSH
16719: LD_INT 62
16721: PUSH
16722: LD_INT 80
16724: PUSH
16725: LD_INT 82
16727: PUSH
16728: LD_INT 83
16730: PUSH
16731: LD_INT 84
16733: PUSH
16734: LD_INT 85
16736: PUSH
16737: LD_INT 86
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: ST_TO_ADDR
16793: GO 17260
16795: LD_INT 2
16797: DOUBLE
16798: EQUAL
16799: IFTRUE 16803
16801: GO 17029
16803: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16804: LD_ADDR_VAR 0 4
16808: PUSH
16809: LD_INT 35
16811: PUSH
16812: LD_INT 45
16814: PUSH
16815: LD_INT 46
16817: PUSH
16818: LD_INT 47
16820: PUSH
16821: LD_INT 82
16823: PUSH
16824: LD_INT 83
16826: PUSH
16827: LD_INT 84
16829: PUSH
16830: LD_INT 85
16832: PUSH
16833: LD_INT 87
16835: PUSH
16836: LD_INT 70
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: LD_INT 11
16844: PUSH
16845: LD_INT 3
16847: PUSH
16848: LD_INT 4
16850: PUSH
16851: LD_INT 5
16853: PUSH
16854: LD_INT 6
16856: PUSH
16857: LD_INT 15
16859: PUSH
16860: LD_INT 18
16862: PUSH
16863: LD_INT 7
16865: PUSH
16866: LD_INT 17
16868: PUSH
16869: LD_INT 8
16871: PUSH
16872: LD_INT 20
16874: PUSH
16875: LD_INT 21
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_INT 72
16883: PUSH
16884: LD_INT 26
16886: PUSH
16887: LD_INT 69
16889: PUSH
16890: LD_INT 39
16892: PUSH
16893: LD_INT 40
16895: PUSH
16896: LD_INT 41
16898: PUSH
16899: LD_INT 42
16901: PUSH
16902: LD_INT 43
16904: PUSH
16905: LD_INT 48
16907: PUSH
16908: LD_INT 49
16910: PUSH
16911: LD_INT 50
16913: PUSH
16914: LD_INT 51
16916: PUSH
16917: LD_INT 52
16919: PUSH
16920: LD_INT 53
16922: PUSH
16923: LD_INT 54
16925: PUSH
16926: LD_INT 55
16928: PUSH
16929: LD_INT 56
16931: PUSH
16932: LD_INT 60
16934: PUSH
16935: LD_INT 61
16937: PUSH
16938: LD_INT 62
16940: PUSH
16941: LD_INT 66
16943: PUSH
16944: LD_INT 67
16946: PUSH
16947: LD_INT 68
16949: PUSH
16950: LD_INT 81
16952: PUSH
16953: LD_INT 82
16955: PUSH
16956: LD_INT 83
16958: PUSH
16959: LD_INT 84
16961: PUSH
16962: LD_INT 85
16964: PUSH
16965: LD_INT 87
16967: PUSH
16968: LD_INT 88
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: ST_TO_ADDR
17027: GO 17260
17029: LD_INT 3
17031: DOUBLE
17032: EQUAL
17033: IFTRUE 17037
17035: GO 17259
17037: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17038: LD_ADDR_VAR 0 4
17042: PUSH
17043: LD_INT 46
17045: PUSH
17046: LD_INT 47
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: LD_INT 2
17054: PUSH
17055: LD_INT 82
17057: PUSH
17058: LD_INT 83
17060: PUSH
17061: LD_INT 84
17063: PUSH
17064: LD_INT 85
17066: PUSH
17067: LD_INT 86
17069: PUSH
17070: LD_INT 11
17072: PUSH
17073: LD_INT 9
17075: PUSH
17076: LD_INT 20
17078: PUSH
17079: LD_INT 19
17081: PUSH
17082: LD_INT 21
17084: PUSH
17085: LD_INT 24
17087: PUSH
17088: LD_INT 22
17090: PUSH
17091: LD_INT 25
17093: PUSH
17094: LD_INT 28
17096: PUSH
17097: LD_INT 29
17099: PUSH
17100: LD_INT 30
17102: PUSH
17103: LD_INT 31
17105: PUSH
17106: LD_INT 37
17108: PUSH
17109: LD_INT 38
17111: PUSH
17112: LD_INT 32
17114: PUSH
17115: LD_INT 27
17117: PUSH
17118: LD_INT 33
17120: PUSH
17121: LD_INT 69
17123: PUSH
17124: LD_INT 39
17126: PUSH
17127: LD_INT 34
17129: PUSH
17130: LD_INT 40
17132: PUSH
17133: LD_INT 71
17135: PUSH
17136: LD_INT 23
17138: PUSH
17139: LD_INT 44
17141: PUSH
17142: LD_INT 48
17144: PUSH
17145: LD_INT 49
17147: PUSH
17148: LD_INT 50
17150: PUSH
17151: LD_INT 51
17153: PUSH
17154: LD_INT 52
17156: PUSH
17157: LD_INT 53
17159: PUSH
17160: LD_INT 54
17162: PUSH
17163: LD_INT 55
17165: PUSH
17166: LD_INT 56
17168: PUSH
17169: LD_INT 57
17171: PUSH
17172: LD_INT 58
17174: PUSH
17175: LD_INT 59
17177: PUSH
17178: LD_INT 63
17180: PUSH
17181: LD_INT 64
17183: PUSH
17184: LD_INT 65
17186: PUSH
17187: LD_INT 82
17189: PUSH
17190: LD_INT 83
17192: PUSH
17193: LD_INT 84
17195: PUSH
17196: LD_INT 85
17198: PUSH
17199: LD_INT 86
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: ST_TO_ADDR
17257: GO 17260
17259: POP
// if state > - 1 and state < 3 then
17260: LD_VAR 0 3
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: GREATER
17269: PUSH
17270: LD_VAR 0 3
17274: PUSH
17275: LD_INT 3
17277: LESS
17278: AND
17279: IFFALSE 17336
// for i in result do
17281: LD_ADDR_VAR 0 5
17285: PUSH
17286: LD_VAR 0 4
17290: PUSH
17291: FOR_IN
17292: IFFALSE 17334
// if GetTech ( i , side ) <> state then
17294: LD_VAR 0 5
17298: PPUSH
17299: LD_VAR 0 1
17303: PPUSH
17304: CALL_OW 321
17308: PUSH
17309: LD_VAR 0 3
17313: NONEQUAL
17314: IFFALSE 17332
// result := result diff i ;
17316: LD_ADDR_VAR 0 4
17320: PUSH
17321: LD_VAR 0 4
17325: PUSH
17326: LD_VAR 0 5
17330: DIFF
17331: ST_TO_ADDR
17332: GO 17291
17334: POP
17335: POP
// end ;
17336: LD_VAR 0 4
17340: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17341: LD_INT 0
17343: PPUSH
17344: PPUSH
17345: PPUSH
// result := true ;
17346: LD_ADDR_VAR 0 3
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17354: LD_ADDR_VAR 0 5
17358: PUSH
17359: LD_VAR 0 2
17363: PPUSH
17364: CALL_OW 480
17368: ST_TO_ADDR
// if not tmp then
17369: LD_VAR 0 5
17373: NOT
17374: IFFALSE 17378
// exit ;
17376: GO 17427
// for i in tmp do
17378: LD_ADDR_VAR 0 4
17382: PUSH
17383: LD_VAR 0 5
17387: PUSH
17388: FOR_IN
17389: IFFALSE 17425
// if GetTech ( i , side ) <> state_researched then
17391: LD_VAR 0 4
17395: PPUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: CALL_OW 321
17405: PUSH
17406: LD_INT 2
17408: NONEQUAL
17409: IFFALSE 17423
// begin result := false ;
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// exit ;
17419: POP
17420: POP
17421: GO 17427
// end ;
17423: GO 17388
17425: POP
17426: POP
// end ;
17427: LD_VAR 0 3
17431: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
17446: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17447: LD_VAR 0 1
17451: NOT
17452: PUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 257
17462: PUSH
17463: LD_INT 9
17465: NONEQUAL
17466: OR
17467: IFFALSE 17471
// exit ;
17469: GO 18044
// side := GetSide ( unit ) ;
17471: LD_ADDR_VAR 0 9
17475: PUSH
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 255
17485: ST_TO_ADDR
// tech_space := tech_spacanom ;
17486: LD_ADDR_VAR 0 12
17490: PUSH
17491: LD_INT 29
17493: ST_TO_ADDR
// tech_time := tech_taurad ;
17494: LD_ADDR_VAR 0 13
17498: PUSH
17499: LD_INT 28
17501: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17502: LD_ADDR_VAR 0 11
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 310
17516: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17517: LD_VAR 0 11
17521: PPUSH
17522: CALL_OW 247
17526: PUSH
17527: LD_INT 2
17529: EQUAL
17530: IFFALSE 17534
// exit ;
17532: GO 18044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17534: LD_ADDR_VAR 0 8
17538: PUSH
17539: LD_INT 81
17541: PUSH
17542: LD_VAR 0 9
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 21
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PPUSH
17572: CALL_OW 69
17576: ST_TO_ADDR
// if not tmp then
17577: LD_VAR 0 8
17581: NOT
17582: IFFALSE 17586
// exit ;
17584: GO 18044
// if in_unit then
17586: LD_VAR 0 11
17590: IFFALSE 17614
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17592: LD_ADDR_VAR 0 10
17596: PUSH
17597: LD_VAR 0 8
17601: PPUSH
17602: LD_VAR 0 11
17606: PPUSH
17607: CALL_OW 74
17611: ST_TO_ADDR
17612: GO 17634
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17614: LD_ADDR_VAR 0 10
17618: PUSH
17619: LD_VAR 0 8
17623: PPUSH
17624: LD_VAR 0 1
17628: PPUSH
17629: CALL_OW 74
17633: ST_TO_ADDR
// if not enemy then
17634: LD_VAR 0 10
17638: NOT
17639: IFFALSE 17643
// exit ;
17641: GO 18044
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17643: LD_VAR 0 11
17647: PUSH
17648: LD_VAR 0 11
17652: PPUSH
17653: LD_VAR 0 10
17657: PPUSH
17658: CALL_OW 296
17662: PUSH
17663: LD_INT 13
17665: GREATER
17666: AND
17667: PUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: LD_VAR 0 10
17677: PPUSH
17678: CALL_OW 296
17682: PUSH
17683: LD_INT 12
17685: GREATER
17686: OR
17687: IFFALSE 17691
// exit ;
17689: GO 18044
// missile := [ 1 ] ;
17691: LD_ADDR_VAR 0 14
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17702: LD_VAR 0 9
17706: PPUSH
17707: LD_VAR 0 12
17711: PPUSH
17712: CALL_OW 325
17716: IFFALSE 17745
// missile := Replace ( missile , missile + 1 , 2 ) ;
17718: LD_ADDR_VAR 0 14
17722: PUSH
17723: LD_VAR 0 14
17727: PPUSH
17728: LD_VAR 0 14
17732: PUSH
17733: LD_INT 1
17735: PLUS
17736: PPUSH
17737: LD_INT 2
17739: PPUSH
17740: CALL_OW 1
17744: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17745: LD_VAR 0 9
17749: PPUSH
17750: LD_VAR 0 13
17754: PPUSH
17755: CALL_OW 325
17759: PUSH
17760: LD_VAR 0 10
17764: PPUSH
17765: CALL_OW 255
17769: PPUSH
17770: LD_VAR 0 13
17774: PPUSH
17775: CALL_OW 325
17779: NOT
17780: AND
17781: IFFALSE 17810
// missile := Replace ( missile , missile + 1 , 3 ) ;
17783: LD_ADDR_VAR 0 14
17787: PUSH
17788: LD_VAR 0 14
17792: PPUSH
17793: LD_VAR 0 14
17797: PUSH
17798: LD_INT 1
17800: PLUS
17801: PPUSH
17802: LD_INT 3
17804: PPUSH
17805: CALL_OW 1
17809: ST_TO_ADDR
// if missile < 2 then
17810: LD_VAR 0 14
17814: PUSH
17815: LD_INT 2
17817: LESS
17818: IFFALSE 17822
// exit ;
17820: GO 18044
// x := GetX ( enemy ) ;
17822: LD_ADDR_VAR 0 4
17826: PUSH
17827: LD_VAR 0 10
17831: PPUSH
17832: CALL_OW 250
17836: ST_TO_ADDR
// y := GetY ( enemy ) ;
17837: LD_ADDR_VAR 0 5
17841: PUSH
17842: LD_VAR 0 10
17846: PPUSH
17847: CALL_OW 251
17851: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17852: LD_ADDR_VAR 0 6
17856: PUSH
17857: LD_VAR 0 4
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 12
17873: PLUS
17874: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17875: LD_ADDR_VAR 0 7
17879: PUSH
17880: LD_VAR 0 5
17884: PUSH
17885: LD_INT 1
17887: NEG
17888: PPUSH
17889: LD_INT 1
17891: PPUSH
17892: CALL_OW 12
17896: PLUS
17897: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17898: LD_VAR 0 6
17902: PPUSH
17903: LD_VAR 0 7
17907: PPUSH
17908: CALL_OW 488
17912: NOT
17913: IFFALSE 17935
// begin _x := x ;
17915: LD_ADDR_VAR 0 6
17919: PUSH
17920: LD_VAR 0 4
17924: ST_TO_ADDR
// _y := y ;
17925: LD_ADDR_VAR 0 7
17929: PUSH
17930: LD_VAR 0 5
17934: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_VAR 0 14
17947: PPUSH
17948: CALL_OW 12
17952: ST_TO_ADDR
// case i of 1 :
17953: LD_VAR 0 3
17957: PUSH
17958: LD_INT 1
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17983
17966: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17967: LD_VAR 0 1
17971: PPUSH
17972: LD_VAR 0 10
17976: PPUSH
17977: CALL_OW 115
17981: GO 18044
17983: LD_INT 2
17985: DOUBLE
17986: EQUAL
17987: IFTRUE 17991
17989: GO 18013
17991: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17992: LD_VAR 0 1
17996: PPUSH
17997: LD_VAR 0 6
18001: PPUSH
18002: LD_VAR 0 7
18006: PPUSH
18007: CALL_OW 153
18011: GO 18044
18013: LD_INT 3
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18043
18021: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_VAR 0 6
18031: PPUSH
18032: LD_VAR 0 7
18036: PPUSH
18037: CALL_OW 154
18041: GO 18044
18043: POP
// end ;
18044: LD_VAR 0 2
18048: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18049: LD_INT 0
18051: PPUSH
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
18056: PPUSH
// if not unit or not building then
18057: LD_VAR 0 1
18061: NOT
18062: PUSH
18063: LD_VAR 0 2
18067: NOT
18068: OR
18069: IFFALSE 18073
// exit ;
18071: GO 18231
// x := GetX ( building ) ;
18073: LD_ADDR_VAR 0 5
18077: PUSH
18078: LD_VAR 0 2
18082: PPUSH
18083: CALL_OW 250
18087: ST_TO_ADDR
// y := GetY ( building ) ;
18088: LD_ADDR_VAR 0 6
18092: PUSH
18093: LD_VAR 0 2
18097: PPUSH
18098: CALL_OW 251
18102: ST_TO_ADDR
// for i = 0 to 5 do
18103: LD_ADDR_VAR 0 4
18107: PUSH
18108: DOUBLE
18109: LD_INT 0
18111: DEC
18112: ST_TO_ADDR
18113: LD_INT 5
18115: PUSH
18116: FOR_TO
18117: IFFALSE 18229
// begin _x := ShiftX ( x , i , 3 ) ;
18119: LD_ADDR_VAR 0 7
18123: PUSH
18124: LD_VAR 0 5
18128: PPUSH
18129: LD_VAR 0 4
18133: PPUSH
18134: LD_INT 3
18136: PPUSH
18137: CALL_OW 272
18141: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18142: LD_ADDR_VAR 0 8
18146: PUSH
18147: LD_VAR 0 6
18151: PPUSH
18152: LD_VAR 0 4
18156: PPUSH
18157: LD_INT 3
18159: PPUSH
18160: CALL_OW 273
18164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18165: LD_VAR 0 7
18169: PPUSH
18170: LD_VAR 0 8
18174: PPUSH
18175: CALL_OW 488
18179: NOT
18180: IFFALSE 18184
// continue ;
18182: GO 18116
// if HexInfo ( _x , _y ) = 0 then
18184: LD_VAR 0 7
18188: PPUSH
18189: LD_VAR 0 8
18193: PPUSH
18194: CALL_OW 428
18198: PUSH
18199: LD_INT 0
18201: EQUAL
18202: IFFALSE 18227
// begin ComMoveXY ( unit , _x , _y ) ;
18204: LD_VAR 0 1
18208: PPUSH
18209: LD_VAR 0 7
18213: PPUSH
18214: LD_VAR 0 8
18218: PPUSH
18219: CALL_OW 111
// exit ;
18223: POP
18224: POP
18225: GO 18231
// end ; end ;
18227: GO 18116
18229: POP
18230: POP
// end ;
18231: LD_VAR 0 3
18235: RET
// export function ScanBase ( side , base_area ) ; begin
18236: LD_INT 0
18238: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18239: LD_ADDR_VAR 0 3
18243: PUSH
18244: LD_VAR 0 2
18248: PPUSH
18249: LD_INT 81
18251: PUSH
18252: LD_VAR 0 1
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 70
18265: ST_TO_ADDR
// end ;
18266: LD_VAR 0 3
18270: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18271: LD_INT 0
18273: PPUSH
18274: PPUSH
18275: PPUSH
18276: PPUSH
// result := false ;
18277: LD_ADDR_VAR 0 2
18281: PUSH
18282: LD_INT 0
18284: ST_TO_ADDR
// side := GetSide ( unit ) ;
18285: LD_ADDR_VAR 0 3
18289: PUSH
18290: LD_VAR 0 1
18294: PPUSH
18295: CALL_OW 255
18299: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18300: LD_ADDR_VAR 0 4
18304: PUSH
18305: LD_VAR 0 1
18309: PPUSH
18310: CALL_OW 248
18314: ST_TO_ADDR
// case nat of 1 :
18315: LD_VAR 0 4
18319: PUSH
18320: LD_INT 1
18322: DOUBLE
18323: EQUAL
18324: IFTRUE 18328
18326: GO 18339
18328: POP
// tech := tech_lassight ; 2 :
18329: LD_ADDR_VAR 0 5
18333: PUSH
18334: LD_INT 12
18336: ST_TO_ADDR
18337: GO 18378
18339: LD_INT 2
18341: DOUBLE
18342: EQUAL
18343: IFTRUE 18347
18345: GO 18358
18347: POP
// tech := tech_mortar ; 3 :
18348: LD_ADDR_VAR 0 5
18352: PUSH
18353: LD_INT 41
18355: ST_TO_ADDR
18356: GO 18378
18358: LD_INT 3
18360: DOUBLE
18361: EQUAL
18362: IFTRUE 18366
18364: GO 18377
18366: POP
// tech := tech_bazooka ; end ;
18367: LD_ADDR_VAR 0 5
18371: PUSH
18372: LD_INT 44
18374: ST_TO_ADDR
18375: GO 18378
18377: POP
// if Researched ( side , tech ) then
18378: LD_VAR 0 3
18382: PPUSH
18383: LD_VAR 0 5
18387: PPUSH
18388: CALL_OW 325
18392: IFFALSE 18419
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18394: LD_ADDR_VAR 0 2
18398: PUSH
18399: LD_INT 5
18401: PUSH
18402: LD_INT 8
18404: PUSH
18405: LD_INT 9
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: PUSH
18413: LD_VAR 0 4
18417: ARRAY
18418: ST_TO_ADDR
// end ;
18419: LD_VAR 0 2
18423: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18424: LD_INT 0
18426: PPUSH
18427: PPUSH
18428: PPUSH
// if not mines then
18429: LD_VAR 0 2
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18582
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18438: LD_ADDR_VAR 0 5
18442: PUSH
18443: LD_INT 81
18445: PUSH
18446: LD_VAR 0 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 3
18457: PUSH
18458: LD_INT 21
18460: PUSH
18461: LD_INT 3
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 69
18480: ST_TO_ADDR
// for i in mines do
18481: LD_ADDR_VAR 0 4
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18580
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18494: LD_VAR 0 4
18498: PUSH
18499: LD_INT 1
18501: ARRAY
18502: PPUSH
18503: LD_VAR 0 4
18507: PUSH
18508: LD_INT 2
18510: ARRAY
18511: PPUSH
18512: CALL_OW 458
18516: NOT
18517: IFFALSE 18521
// continue ;
18519: GO 18491
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18521: LD_VAR 0 4
18525: PUSH
18526: LD_INT 1
18528: ARRAY
18529: PPUSH
18530: LD_VAR 0 4
18534: PUSH
18535: LD_INT 2
18537: ARRAY
18538: PPUSH
18539: CALL_OW 428
18543: PUSH
18544: LD_VAR 0 5
18548: IN
18549: IFFALSE 18578
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18551: LD_VAR 0 4
18555: PUSH
18556: LD_INT 1
18558: ARRAY
18559: PPUSH
18560: LD_VAR 0 4
18564: PUSH
18565: LD_INT 2
18567: ARRAY
18568: PPUSH
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 456
// end ;
18578: GO 18491
18580: POP
18581: POP
// end ;
18582: LD_VAR 0 3
18586: RET
// export function Count ( array ) ; begin
18587: LD_INT 0
18589: PPUSH
// result := array + 0 ;
18590: LD_ADDR_VAR 0 2
18594: PUSH
18595: LD_VAR 0 1
18599: PUSH
18600: LD_INT 0
18602: PLUS
18603: ST_TO_ADDR
// end ;
18604: LD_VAR 0 2
18608: RET
// export function IsEmpty ( building ) ; begin
18609: LD_INT 0
18611: PPUSH
// if not building then
18612: LD_VAR 0 1
18616: NOT
18617: IFFALSE 18621
// exit ;
18619: GO 18664
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: LD_VAR 0 1
18630: PUSH
18631: LD_INT 22
18633: PUSH
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 255
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 58
18650: PUSH
18651: EMPTY
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PPUSH
18658: CALL_OW 69
18662: IN
18663: ST_TO_ADDR
// end ;
18664: LD_VAR 0 2
18668: RET
// export function IsNotFull ( building ) ; var places ; begin
18669: LD_INT 0
18671: PPUSH
18672: PPUSH
// if not building then
18673: LD_VAR 0 1
18677: NOT
18678: IFFALSE 18682
// exit ;
18680: GO 18710
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18682: LD_ADDR_VAR 0 2
18686: PUSH
18687: LD_VAR 0 1
18691: PPUSH
18692: LD_INT 3
18694: PUSH
18695: LD_INT 62
18697: PUSH
18698: EMPTY
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PPUSH
18705: CALL_OW 72
18709: ST_TO_ADDR
// end ;
18710: LD_VAR 0 2
18714: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18715: LD_INT 0
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
// tmp := [ ] ;
18721: LD_ADDR_VAR 0 3
18725: PUSH
18726: EMPTY
18727: ST_TO_ADDR
// list := [ ] ;
18728: LD_ADDR_VAR 0 5
18732: PUSH
18733: EMPTY
18734: ST_TO_ADDR
// for i = 16 to 25 do
18735: LD_ADDR_VAR 0 4
18739: PUSH
18740: DOUBLE
18741: LD_INT 16
18743: DEC
18744: ST_TO_ADDR
18745: LD_INT 25
18747: PUSH
18748: FOR_TO
18749: IFFALSE 18822
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18751: LD_ADDR_VAR 0 3
18755: PUSH
18756: LD_VAR 0 3
18760: PUSH
18761: LD_INT 22
18763: PUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 255
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 91
18780: PUSH
18781: LD_VAR 0 1
18785: PUSH
18786: LD_INT 6
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 30
18796: PUSH
18797: LD_VAR 0 4
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: PUSH
18811: EMPTY
18812: LIST
18813: PPUSH
18814: CALL_OW 69
18818: ADD
18819: ST_TO_ADDR
18820: GO 18748
18822: POP
18823: POP
// for i = 1 to tmp do
18824: LD_ADDR_VAR 0 4
18828: PUSH
18829: DOUBLE
18830: LD_INT 1
18832: DEC
18833: ST_TO_ADDR
18834: LD_VAR 0 3
18838: PUSH
18839: FOR_TO
18840: IFFALSE 18928
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18842: LD_ADDR_VAR 0 5
18846: PUSH
18847: LD_VAR 0 5
18851: PUSH
18852: LD_VAR 0 3
18856: PUSH
18857: LD_VAR 0 4
18861: ARRAY
18862: PPUSH
18863: CALL_OW 266
18867: PUSH
18868: LD_VAR 0 3
18872: PUSH
18873: LD_VAR 0 4
18877: ARRAY
18878: PPUSH
18879: CALL_OW 250
18883: PUSH
18884: LD_VAR 0 3
18888: PUSH
18889: LD_VAR 0 4
18893: ARRAY
18894: PPUSH
18895: CALL_OW 251
18899: PUSH
18900: LD_VAR 0 3
18904: PUSH
18905: LD_VAR 0 4
18909: ARRAY
18910: PPUSH
18911: CALL_OW 254
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: ADD
18925: ST_TO_ADDR
18926: GO 18839
18928: POP
18929: POP
// result := list ;
18930: LD_ADDR_VAR 0 2
18934: PUSH
18935: LD_VAR 0 5
18939: ST_TO_ADDR
// end ;
18940: LD_VAR 0 2
18944: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18945: LD_INT 0
18947: PPUSH
18948: PPUSH
18949: PPUSH
18950: PPUSH
18951: PPUSH
18952: PPUSH
18953: PPUSH
// if not factory then
18954: LD_VAR 0 1
18958: NOT
18959: IFFALSE 18963
// exit ;
18961: GO 19556
// if control = control_apeman then
18963: LD_VAR 0 4
18967: PUSH
18968: LD_INT 5
18970: EQUAL
18971: IFFALSE 19080
// begin tmp := UnitsInside ( factory ) ;
18973: LD_ADDR_VAR 0 8
18977: PUSH
18978: LD_VAR 0 1
18982: PPUSH
18983: CALL_OW 313
18987: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18988: LD_VAR 0 8
18992: PPUSH
18993: LD_INT 25
18995: PUSH
18996: LD_INT 12
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 72
19007: NOT
19008: IFFALSE 19018
// control := control_manual ;
19010: LD_ADDR_VAR 0 4
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19018: LD_ADDR_VAR 0 8
19022: PUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL 18715 0 1
19032: ST_TO_ADDR
// if tmp then
19033: LD_VAR 0 8
19037: IFFALSE 19080
// begin for i in tmp do
19039: LD_ADDR_VAR 0 7
19043: PUSH
19044: LD_VAR 0 8
19048: PUSH
19049: FOR_IN
19050: IFFALSE 19078
// if i [ 1 ] = b_ext_radio then
19052: LD_VAR 0 7
19056: PUSH
19057: LD_INT 1
19059: ARRAY
19060: PUSH
19061: LD_INT 22
19063: EQUAL
19064: IFFALSE 19076
// begin control := control_remote ;
19066: LD_ADDR_VAR 0 4
19070: PUSH
19071: LD_INT 2
19073: ST_TO_ADDR
// break ;
19074: GO 19078
// end ;
19076: GO 19049
19078: POP
19079: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19080: LD_VAR 0 1
19084: PPUSH
19085: LD_VAR 0 2
19089: PPUSH
19090: LD_VAR 0 3
19094: PPUSH
19095: LD_VAR 0 4
19099: PPUSH
19100: LD_VAR 0 5
19104: PPUSH
19105: CALL_OW 448
19109: IFFALSE 19144
// begin result := [ chassis , engine , control , weapon ] ;
19111: LD_ADDR_VAR 0 6
19115: PUSH
19116: LD_VAR 0 2
19120: PUSH
19121: LD_VAR 0 3
19125: PUSH
19126: LD_VAR 0 4
19130: PUSH
19131: LD_VAR 0 5
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: ST_TO_ADDR
// exit ;
19142: GO 19556
// end ; _chassis := AvailableChassisList ( factory ) ;
19144: LD_ADDR_VAR 0 9
19148: PUSH
19149: LD_VAR 0 1
19153: PPUSH
19154: CALL_OW 475
19158: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19159: LD_ADDR_VAR 0 11
19163: PUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 476
19173: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19174: LD_ADDR_VAR 0 12
19178: PUSH
19179: LD_VAR 0 1
19183: PPUSH
19184: CALL_OW 477
19188: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19189: LD_ADDR_VAR 0 10
19193: PUSH
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 478
19203: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19204: LD_VAR 0 9
19208: NOT
19209: PUSH
19210: LD_VAR 0 11
19214: NOT
19215: OR
19216: PUSH
19217: LD_VAR 0 12
19221: NOT
19222: OR
19223: PUSH
19224: LD_VAR 0 10
19228: NOT
19229: OR
19230: IFFALSE 19265
// begin result := [ chassis , engine , control , weapon ] ;
19232: LD_ADDR_VAR 0 6
19236: PUSH
19237: LD_VAR 0 2
19241: PUSH
19242: LD_VAR 0 3
19246: PUSH
19247: LD_VAR 0 4
19251: PUSH
19252: LD_VAR 0 5
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: ST_TO_ADDR
// exit ;
19263: GO 19556
// end ; if not chassis in _chassis then
19265: LD_VAR 0 2
19269: PUSH
19270: LD_VAR 0 9
19274: IN
19275: NOT
19276: IFFALSE 19302
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19278: LD_ADDR_VAR 0 2
19282: PUSH
19283: LD_VAR 0 9
19287: PUSH
19288: LD_INT 1
19290: PPUSH
19291: LD_VAR 0 9
19295: PPUSH
19296: CALL_OW 12
19300: ARRAY
19301: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19302: LD_VAR 0 2
19306: PPUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: CALL 19561 0 2
19316: NOT
19317: IFFALSE 19376
// repeat engine := _engine [ 1 ] ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_VAR 0 11
19328: PUSH
19329: LD_INT 1
19331: ARRAY
19332: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19333: LD_ADDR_VAR 0 11
19337: PUSH
19338: LD_VAR 0 11
19342: PPUSH
19343: LD_INT 1
19345: PPUSH
19346: CALL_OW 3
19350: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19351: LD_VAR 0 2
19355: PPUSH
19356: LD_VAR 0 3
19360: PPUSH
19361: CALL 19561 0 2
19365: PUSH
19366: LD_VAR 0 11
19370: PUSH
19371: EMPTY
19372: EQUAL
19373: OR
19374: IFFALSE 19319
// if not control in _control then
19376: LD_VAR 0 4
19380: PUSH
19381: LD_VAR 0 12
19385: IN
19386: NOT
19387: IFFALSE 19413
// control := _control [ rand ( 1 , _control ) ] ;
19389: LD_ADDR_VAR 0 4
19393: PUSH
19394: LD_VAR 0 12
19398: PUSH
19399: LD_INT 1
19401: PPUSH
19402: LD_VAR 0 12
19406: PPUSH
19407: CALL_OW 12
19411: ARRAY
19412: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19413: LD_VAR 0 2
19417: PPUSH
19418: LD_VAR 0 5
19422: PPUSH
19423: CALL 19781 0 2
19427: NOT
19428: IFFALSE 19487
// repeat weapon := _weapon [ 1 ] ;
19430: LD_ADDR_VAR 0 5
19434: PUSH
19435: LD_VAR 0 10
19439: PUSH
19440: LD_INT 1
19442: ARRAY
19443: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19444: LD_ADDR_VAR 0 10
19448: PUSH
19449: LD_VAR 0 10
19453: PPUSH
19454: LD_INT 1
19456: PPUSH
19457: CALL_OW 3
19461: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19462: LD_VAR 0 2
19466: PPUSH
19467: LD_VAR 0 5
19471: PPUSH
19472: CALL 19781 0 2
19476: PUSH
19477: LD_VAR 0 10
19481: PUSH
19482: EMPTY
19483: EQUAL
19484: OR
19485: IFFALSE 19430
// result := [ ] ;
19487: LD_ADDR_VAR 0 6
19491: PUSH
19492: EMPTY
19493: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19494: LD_VAR 0 1
19498: PPUSH
19499: LD_VAR 0 2
19503: PPUSH
19504: LD_VAR 0 3
19508: PPUSH
19509: LD_VAR 0 4
19513: PPUSH
19514: LD_VAR 0 5
19518: PPUSH
19519: CALL_OW 448
19523: IFFALSE 19556
// result := [ chassis , engine , control , weapon ] ;
19525: LD_ADDR_VAR 0 6
19529: PUSH
19530: LD_VAR 0 2
19534: PUSH
19535: LD_VAR 0 3
19539: PUSH
19540: LD_VAR 0 4
19544: PUSH
19545: LD_VAR 0 5
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: ST_TO_ADDR
// end ;
19556: LD_VAR 0 6
19560: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19561: LD_INT 0
19563: PPUSH
// if not chassis or not engine then
19564: LD_VAR 0 1
19568: NOT
19569: PUSH
19570: LD_VAR 0 2
19574: NOT
19575: OR
19576: IFFALSE 19580
// exit ;
19578: GO 19776
// case engine of engine_solar :
19580: LD_VAR 0 2
19584: PUSH
19585: LD_INT 2
19587: DOUBLE
19588: EQUAL
19589: IFTRUE 19593
19591: GO 19631
19593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19594: LD_ADDR_VAR 0 3
19598: PUSH
19599: LD_INT 11
19601: PUSH
19602: LD_INT 12
19604: PUSH
19605: LD_INT 13
19607: PUSH
19608: LD_INT 14
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: LD_INT 3
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: ST_TO_ADDR
19629: GO 19760
19631: LD_INT 1
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19701
19639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19640: LD_ADDR_VAR 0 3
19644: PUSH
19645: LD_INT 11
19647: PUSH
19648: LD_INT 12
19650: PUSH
19651: LD_INT 13
19653: PUSH
19654: LD_INT 14
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: LD_INT 2
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: LD_INT 4
19668: PUSH
19669: LD_INT 5
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 22
19680: PUSH
19681: LD_INT 24
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: ST_TO_ADDR
19699: GO 19760
19701: LD_INT 3
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19759
19709: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19710: LD_ADDR_VAR 0 3
19714: PUSH
19715: LD_INT 13
19717: PUSH
19718: LD_INT 14
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 3
19726: PUSH
19727: LD_INT 4
19729: PUSH
19730: LD_INT 5
19732: PUSH
19733: LD_INT 21
19735: PUSH
19736: LD_INT 22
19738: PUSH
19739: LD_INT 23
19741: PUSH
19742: LD_INT 24
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: ST_TO_ADDR
19757: GO 19760
19759: POP
// result := ( chassis in result ) ;
19760: LD_ADDR_VAR 0 3
19764: PUSH
19765: LD_VAR 0 1
19769: PUSH
19770: LD_VAR 0 3
19774: IN
19775: ST_TO_ADDR
// end ;
19776: LD_VAR 0 3
19780: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19781: LD_INT 0
19783: PPUSH
// if not chassis or not weapon then
19784: LD_VAR 0 1
19788: NOT
19789: PUSH
19790: LD_VAR 0 2
19794: NOT
19795: OR
19796: IFFALSE 19800
// exit ;
19798: GO 20860
// case weapon of us_machine_gun :
19800: LD_VAR 0 2
19804: PUSH
19805: LD_INT 2
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19843
19813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19814: LD_ADDR_VAR 0 3
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: LD_INT 4
19830: PUSH
19831: LD_INT 5
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: ST_TO_ADDR
19841: GO 20844
19843: LD_INT 3
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19881
19851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19852: LD_ADDR_VAR 0 3
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 3
19865: PUSH
19866: LD_INT 4
19868: PUSH
19869: LD_INT 5
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: ST_TO_ADDR
19879: GO 20844
19881: LD_INT 11
19883: DOUBLE
19884: EQUAL
19885: IFTRUE 19889
19887: GO 19919
19889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19890: LD_ADDR_VAR 0 3
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: LD_INT 4
19906: PUSH
19907: LD_INT 5
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: ST_TO_ADDR
19917: GO 20844
19919: LD_INT 4
19921: DOUBLE
19922: EQUAL
19923: IFTRUE 19927
19925: GO 19953
19927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19928: LD_ADDR_VAR 0 3
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 3
19938: PUSH
19939: LD_INT 4
19941: PUSH
19942: LD_INT 5
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: ST_TO_ADDR
19951: GO 20844
19953: LD_INT 5
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19987
19961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19962: LD_ADDR_VAR 0 3
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: LD_INT 3
19972: PUSH
19973: LD_INT 4
19975: PUSH
19976: LD_INT 5
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: ST_TO_ADDR
19985: GO 20844
19987: LD_INT 9
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20021
19995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19996: LD_ADDR_VAR 0 3
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 3
20006: PUSH
20007: LD_INT 4
20009: PUSH
20010: LD_INT 5
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: ST_TO_ADDR
20019: GO 20844
20021: LD_INT 7
20023: DOUBLE
20024: EQUAL
20025: IFTRUE 20029
20027: GO 20055
20029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 3
20040: PUSH
20041: LD_INT 4
20043: PUSH
20044: LD_INT 5
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: ST_TO_ADDR
20053: GO 20844
20055: LD_INT 12
20057: DOUBLE
20058: EQUAL
20059: IFTRUE 20063
20061: GO 20089
20063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20064: LD_ADDR_VAR 0 3
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: LD_INT 3
20074: PUSH
20075: LD_INT 4
20077: PUSH
20078: LD_INT 5
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: ST_TO_ADDR
20087: GO 20844
20089: LD_INT 13
20091: DOUBLE
20092: EQUAL
20093: IFTRUE 20097
20095: GO 20123
20097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20098: LD_ADDR_VAR 0 3
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: LD_INT 3
20108: PUSH
20109: LD_INT 4
20111: PUSH
20112: LD_INT 5
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: ST_TO_ADDR
20121: GO 20844
20123: LD_INT 14
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20149
20131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: LD_INT 4
20139: PUSH
20140: LD_INT 5
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: ST_TO_ADDR
20147: GO 20844
20149: LD_INT 6
20151: DOUBLE
20152: EQUAL
20153: IFTRUE 20157
20155: GO 20175
20157: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: LD_INT 4
20165: PUSH
20166: LD_INT 5
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: ST_TO_ADDR
20173: GO 20844
20175: LD_INT 10
20177: DOUBLE
20178: EQUAL
20179: IFTRUE 20183
20181: GO 20201
20183: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20184: LD_ADDR_VAR 0 3
20188: PUSH
20189: LD_INT 4
20191: PUSH
20192: LD_INT 5
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: ST_TO_ADDR
20199: GO 20844
20201: LD_INT 22
20203: DOUBLE
20204: EQUAL
20205: IFTRUE 20209
20207: GO 20235
20209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_INT 11
20217: PUSH
20218: LD_INT 12
20220: PUSH
20221: LD_INT 13
20223: PUSH
20224: LD_INT 14
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: ST_TO_ADDR
20233: GO 20844
20235: LD_INT 23
20237: DOUBLE
20238: EQUAL
20239: IFTRUE 20243
20241: GO 20269
20243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20244: LD_ADDR_VAR 0 3
20248: PUSH
20249: LD_INT 11
20251: PUSH
20252: LD_INT 12
20254: PUSH
20255: LD_INT 13
20257: PUSH
20258: LD_INT 14
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: ST_TO_ADDR
20267: GO 20844
20269: LD_INT 24
20271: DOUBLE
20272: EQUAL
20273: IFTRUE 20277
20275: GO 20303
20277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20278: LD_ADDR_VAR 0 3
20282: PUSH
20283: LD_INT 11
20285: PUSH
20286: LD_INT 12
20288: PUSH
20289: LD_INT 13
20291: PUSH
20292: LD_INT 14
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: ST_TO_ADDR
20301: GO 20844
20303: LD_INT 30
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20337
20311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20312: LD_ADDR_VAR 0 3
20316: PUSH
20317: LD_INT 11
20319: PUSH
20320: LD_INT 12
20322: PUSH
20323: LD_INT 13
20325: PUSH
20326: LD_INT 14
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: ST_TO_ADDR
20335: GO 20844
20337: LD_INT 25
20339: DOUBLE
20340: EQUAL
20341: IFTRUE 20345
20343: GO 20363
20345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20346: LD_ADDR_VAR 0 3
20350: PUSH
20351: LD_INT 13
20353: PUSH
20354: LD_INT 14
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: ST_TO_ADDR
20361: GO 20844
20363: LD_INT 27
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20389
20371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20372: LD_ADDR_VAR 0 3
20376: PUSH
20377: LD_INT 13
20379: PUSH
20380: LD_INT 14
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: ST_TO_ADDR
20387: GO 20844
20389: LD_INT 92
20391: DOUBLE
20392: EQUAL
20393: IFTRUE 20397
20395: GO 20423
20397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20398: LD_ADDR_VAR 0 3
20402: PUSH
20403: LD_INT 11
20405: PUSH
20406: LD_INT 12
20408: PUSH
20409: LD_INT 13
20411: PUSH
20412: LD_INT 14
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: ST_TO_ADDR
20421: GO 20844
20423: LD_INT 28
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20449
20431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_INT 13
20439: PUSH
20440: LD_INT 14
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: ST_TO_ADDR
20447: GO 20844
20449: LD_INT 29
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20475
20457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20458: LD_ADDR_VAR 0 3
20462: PUSH
20463: LD_INT 13
20465: PUSH
20466: LD_INT 14
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: ST_TO_ADDR
20473: GO 20844
20475: LD_INT 31
20477: DOUBLE
20478: EQUAL
20479: IFTRUE 20483
20481: GO 20501
20483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20484: LD_ADDR_VAR 0 3
20488: PUSH
20489: LD_INT 13
20491: PUSH
20492: LD_INT 14
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 20844
20501: LD_INT 26
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20527
20509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_INT 13
20517: PUSH
20518: LD_INT 14
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
20525: GO 20844
20527: LD_INT 42
20529: DOUBLE
20530: EQUAL
20531: IFTRUE 20535
20533: GO 20561
20535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20536: LD_ADDR_VAR 0 3
20540: PUSH
20541: LD_INT 21
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_INT 23
20549: PUSH
20550: LD_INT 24
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: ST_TO_ADDR
20559: GO 20844
20561: LD_INT 43
20563: DOUBLE
20564: EQUAL
20565: IFTRUE 20569
20567: GO 20595
20569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20570: LD_ADDR_VAR 0 3
20574: PUSH
20575: LD_INT 21
20577: PUSH
20578: LD_INT 22
20580: PUSH
20581: LD_INT 23
20583: PUSH
20584: LD_INT 24
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: ST_TO_ADDR
20593: GO 20844
20595: LD_INT 44
20597: DOUBLE
20598: EQUAL
20599: IFTRUE 20603
20601: GO 20629
20603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20604: LD_ADDR_VAR 0 3
20608: PUSH
20609: LD_INT 21
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 23
20617: PUSH
20618: LD_INT 24
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: ST_TO_ADDR
20627: GO 20844
20629: LD_INT 45
20631: DOUBLE
20632: EQUAL
20633: IFTRUE 20637
20635: GO 20663
20637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20638: LD_ADDR_VAR 0 3
20642: PUSH
20643: LD_INT 21
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_INT 23
20651: PUSH
20652: LD_INT 24
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 20844
20663: LD_INT 49
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20697
20671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: LD_INT 21
20679: PUSH
20680: LD_INT 22
20682: PUSH
20683: LD_INT 23
20685: PUSH
20686: LD_INT 24
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: ST_TO_ADDR
20695: GO 20844
20697: LD_INT 51
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20731
20705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20706: LD_ADDR_VAR 0 3
20710: PUSH
20711: LD_INT 21
20713: PUSH
20714: LD_INT 22
20716: PUSH
20717: LD_INT 23
20719: PUSH
20720: LD_INT 24
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: ST_TO_ADDR
20729: GO 20844
20731: LD_INT 52
20733: DOUBLE
20734: EQUAL
20735: IFTRUE 20739
20737: GO 20765
20739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20740: LD_ADDR_VAR 0 3
20744: PUSH
20745: LD_INT 21
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_INT 23
20753: PUSH
20754: LD_INT 24
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: ST_TO_ADDR
20763: GO 20844
20765: LD_INT 53
20767: DOUBLE
20768: EQUAL
20769: IFTRUE 20773
20771: GO 20791
20773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20774: LD_ADDR_VAR 0 3
20778: PUSH
20779: LD_INT 23
20781: PUSH
20782: LD_INT 24
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: ST_TO_ADDR
20789: GO 20844
20791: LD_INT 46
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20817
20799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_INT 23
20807: PUSH
20808: LD_INT 24
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 20844
20817: LD_INT 47
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20843
20825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: LD_INT 23
20833: PUSH
20834: LD_INT 24
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: ST_TO_ADDR
20841: GO 20844
20843: POP
// result := ( chassis in result ) ;
20844: LD_ADDR_VAR 0 3
20848: PUSH
20849: LD_VAR 0 1
20853: PUSH
20854: LD_VAR 0 3
20858: IN
20859: ST_TO_ADDR
// end ;
20860: LD_VAR 0 3
20864: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20865: LD_INT 0
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
// result := array ;
20874: LD_ADDR_VAR 0 5
20878: PUSH
20879: LD_VAR 0 1
20883: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20884: LD_VAR 0 1
20888: NOT
20889: PUSH
20890: LD_VAR 0 2
20894: NOT
20895: OR
20896: PUSH
20897: LD_VAR 0 3
20901: NOT
20902: OR
20903: PUSH
20904: LD_VAR 0 2
20908: PUSH
20909: LD_VAR 0 1
20913: GREATER
20914: OR
20915: PUSH
20916: LD_VAR 0 3
20920: PUSH
20921: LD_VAR 0 1
20925: GREATER
20926: OR
20927: IFFALSE 20931
// exit ;
20929: GO 21227
// if direction then
20931: LD_VAR 0 4
20935: IFFALSE 20999
// begin d := 1 ;
20937: LD_ADDR_VAR 0 9
20941: PUSH
20942: LD_INT 1
20944: ST_TO_ADDR
// if i_from > i_to then
20945: LD_VAR 0 2
20949: PUSH
20950: LD_VAR 0 3
20954: GREATER
20955: IFFALSE 20981
// length := ( array - i_from ) + i_to else
20957: LD_ADDR_VAR 0 11
20961: PUSH
20962: LD_VAR 0 1
20966: PUSH
20967: LD_VAR 0 2
20971: MINUS
20972: PUSH
20973: LD_VAR 0 3
20977: PLUS
20978: ST_TO_ADDR
20979: GO 20997
// length := i_to - i_from ;
20981: LD_ADDR_VAR 0 11
20985: PUSH
20986: LD_VAR 0 3
20990: PUSH
20991: LD_VAR 0 2
20995: MINUS
20996: ST_TO_ADDR
// end else
20997: GO 21060
// begin d := - 1 ;
20999: LD_ADDR_VAR 0 9
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: ST_TO_ADDR
// if i_from > i_to then
21008: LD_VAR 0 2
21012: PUSH
21013: LD_VAR 0 3
21017: GREATER
21018: IFFALSE 21038
// length := i_from - i_to else
21020: LD_ADDR_VAR 0 11
21024: PUSH
21025: LD_VAR 0 2
21029: PUSH
21030: LD_VAR 0 3
21034: MINUS
21035: ST_TO_ADDR
21036: GO 21060
// length := ( array - i_to ) + i_from ;
21038: LD_ADDR_VAR 0 11
21042: PUSH
21043: LD_VAR 0 1
21047: PUSH
21048: LD_VAR 0 3
21052: MINUS
21053: PUSH
21054: LD_VAR 0 2
21058: PLUS
21059: ST_TO_ADDR
// end ; if not length then
21060: LD_VAR 0 11
21064: NOT
21065: IFFALSE 21069
// exit ;
21067: GO 21227
// tmp := array ;
21069: LD_ADDR_VAR 0 10
21073: PUSH
21074: LD_VAR 0 1
21078: ST_TO_ADDR
// for i = 1 to length do
21079: LD_ADDR_VAR 0 6
21083: PUSH
21084: DOUBLE
21085: LD_INT 1
21087: DEC
21088: ST_TO_ADDR
21089: LD_VAR 0 11
21093: PUSH
21094: FOR_TO
21095: IFFALSE 21215
// begin for j = 1 to array do
21097: LD_ADDR_VAR 0 7
21101: PUSH
21102: DOUBLE
21103: LD_INT 1
21105: DEC
21106: ST_TO_ADDR
21107: LD_VAR 0 1
21111: PUSH
21112: FOR_TO
21113: IFFALSE 21201
// begin k := j + d ;
21115: LD_ADDR_VAR 0 8
21119: PUSH
21120: LD_VAR 0 7
21124: PUSH
21125: LD_VAR 0 9
21129: PLUS
21130: ST_TO_ADDR
// if k > array then
21131: LD_VAR 0 8
21135: PUSH
21136: LD_VAR 0 1
21140: GREATER
21141: IFFALSE 21151
// k := 1 ;
21143: LD_ADDR_VAR 0 8
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
// if not k then
21151: LD_VAR 0 8
21155: NOT
21156: IFFALSE 21168
// k := array ;
21158: LD_ADDR_VAR 0 8
21162: PUSH
21163: LD_VAR 0 1
21167: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21168: LD_ADDR_VAR 0 10
21172: PUSH
21173: LD_VAR 0 10
21177: PPUSH
21178: LD_VAR 0 8
21182: PPUSH
21183: LD_VAR 0 1
21187: PUSH
21188: LD_VAR 0 7
21192: ARRAY
21193: PPUSH
21194: CALL_OW 1
21198: ST_TO_ADDR
// end ;
21199: GO 21112
21201: POP
21202: POP
// array := tmp ;
21203: LD_ADDR_VAR 0 1
21207: PUSH
21208: LD_VAR 0 10
21212: ST_TO_ADDR
// end ;
21213: GO 21094
21215: POP
21216: POP
// result := array ;
21217: LD_ADDR_VAR 0 5
21221: PUSH
21222: LD_VAR 0 1
21226: ST_TO_ADDR
// end ;
21227: LD_VAR 0 5
21231: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21232: LD_INT 0
21234: PPUSH
21235: PPUSH
// result := 0 ;
21236: LD_ADDR_VAR 0 3
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// if not array or not value in array then
21244: LD_VAR 0 1
21248: NOT
21249: PUSH
21250: LD_VAR 0 2
21254: PUSH
21255: LD_VAR 0 1
21259: IN
21260: NOT
21261: OR
21262: IFFALSE 21266
// exit ;
21264: GO 21320
// for i = 1 to array do
21266: LD_ADDR_VAR 0 4
21270: PUSH
21271: DOUBLE
21272: LD_INT 1
21274: DEC
21275: ST_TO_ADDR
21276: LD_VAR 0 1
21280: PUSH
21281: FOR_TO
21282: IFFALSE 21318
// if value = array [ i ] then
21284: LD_VAR 0 2
21288: PUSH
21289: LD_VAR 0 1
21293: PUSH
21294: LD_VAR 0 4
21298: ARRAY
21299: EQUAL
21300: IFFALSE 21316
// begin result := i ;
21302: LD_ADDR_VAR 0 3
21306: PUSH
21307: LD_VAR 0 4
21311: ST_TO_ADDR
// exit ;
21312: POP
21313: POP
21314: GO 21320
// end ;
21316: GO 21281
21318: POP
21319: POP
// end ;
21320: LD_VAR 0 3
21324: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21325: LD_INT 0
21327: PPUSH
// vc_chassis := chassis ;
21328: LD_ADDR_OWVAR 37
21332: PUSH
21333: LD_VAR 0 1
21337: ST_TO_ADDR
// vc_engine := engine ;
21338: LD_ADDR_OWVAR 39
21342: PUSH
21343: LD_VAR 0 2
21347: ST_TO_ADDR
// vc_control := control ;
21348: LD_ADDR_OWVAR 38
21352: PUSH
21353: LD_VAR 0 3
21357: ST_TO_ADDR
// vc_weapon := weapon ;
21358: LD_ADDR_OWVAR 40
21362: PUSH
21363: LD_VAR 0 4
21367: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21368: LD_ADDR_OWVAR 41
21372: PUSH
21373: LD_VAR 0 5
21377: ST_TO_ADDR
// end ;
21378: LD_VAR 0 6
21382: RET
// export function WantPlant ( unit ) ; var task ; begin
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
// result := false ;
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21395: LD_ADDR_VAR 0 3
21399: PUSH
21400: LD_VAR 0 1
21404: PPUSH
21405: CALL_OW 437
21409: ST_TO_ADDR
// if task then
21410: LD_VAR 0 3
21414: IFFALSE 21442
// if task [ 1 ] [ 1 ] = p then
21416: LD_VAR 0 3
21420: PUSH
21421: LD_INT 1
21423: ARRAY
21424: PUSH
21425: LD_INT 1
21427: ARRAY
21428: PUSH
21429: LD_STRING p
21431: EQUAL
21432: IFFALSE 21442
// result := true ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// end ;
21442: LD_VAR 0 2
21446: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21447: LD_INT 0
21449: PPUSH
21450: PPUSH
21451: PPUSH
21452: PPUSH
// if pos < 1 then
21453: LD_VAR 0 2
21457: PUSH
21458: LD_INT 1
21460: LESS
21461: IFFALSE 21465
// exit ;
21463: GO 21768
// if pos = 1 then
21465: LD_VAR 0 2
21469: PUSH
21470: LD_INT 1
21472: EQUAL
21473: IFFALSE 21506
// result := Replace ( arr , pos [ 1 ] , value ) else
21475: LD_ADDR_VAR 0 4
21479: PUSH
21480: LD_VAR 0 1
21484: PPUSH
21485: LD_VAR 0 2
21489: PUSH
21490: LD_INT 1
21492: ARRAY
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: CALL_OW 1
21503: ST_TO_ADDR
21504: GO 21768
// begin tmp := arr ;
21506: LD_ADDR_VAR 0 6
21510: PUSH
21511: LD_VAR 0 1
21515: ST_TO_ADDR
// s_arr := [ tmp ] ;
21516: LD_ADDR_VAR 0 7
21520: PUSH
21521: LD_VAR 0 6
21525: PUSH
21526: EMPTY
21527: LIST
21528: ST_TO_ADDR
// for i = 1 to pos - 1 do
21529: LD_ADDR_VAR 0 5
21533: PUSH
21534: DOUBLE
21535: LD_INT 1
21537: DEC
21538: ST_TO_ADDR
21539: LD_VAR 0 2
21543: PUSH
21544: LD_INT 1
21546: MINUS
21547: PUSH
21548: FOR_TO
21549: IFFALSE 21594
// begin tmp := tmp [ pos [ i ] ] ;
21551: LD_ADDR_VAR 0 6
21555: PUSH
21556: LD_VAR 0 6
21560: PUSH
21561: LD_VAR 0 2
21565: PUSH
21566: LD_VAR 0 5
21570: ARRAY
21571: ARRAY
21572: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21573: LD_ADDR_VAR 0 7
21577: PUSH
21578: LD_VAR 0 7
21582: PUSH
21583: LD_VAR 0 6
21587: PUSH
21588: EMPTY
21589: LIST
21590: ADD
21591: ST_TO_ADDR
// end ;
21592: GO 21548
21594: POP
21595: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21596: LD_ADDR_VAR 0 6
21600: PUSH
21601: LD_VAR 0 6
21605: PPUSH
21606: LD_VAR 0 2
21610: PUSH
21611: LD_VAR 0 2
21615: ARRAY
21616: PPUSH
21617: LD_VAR 0 3
21621: PPUSH
21622: CALL_OW 1
21626: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21627: LD_ADDR_VAR 0 7
21631: PUSH
21632: LD_VAR 0 7
21636: PPUSH
21637: LD_VAR 0 7
21641: PPUSH
21642: LD_VAR 0 6
21646: PPUSH
21647: CALL_OW 1
21651: ST_TO_ADDR
// for i = s_arr downto 2 do
21652: LD_ADDR_VAR 0 5
21656: PUSH
21657: DOUBLE
21658: LD_VAR 0 7
21662: INC
21663: ST_TO_ADDR
21664: LD_INT 2
21666: PUSH
21667: FOR_DOWNTO
21668: IFFALSE 21752
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21670: LD_ADDR_VAR 0 6
21674: PUSH
21675: LD_VAR 0 7
21679: PUSH
21680: LD_VAR 0 5
21684: PUSH
21685: LD_INT 1
21687: MINUS
21688: ARRAY
21689: PPUSH
21690: LD_VAR 0 2
21694: PUSH
21695: LD_VAR 0 5
21699: PUSH
21700: LD_INT 1
21702: MINUS
21703: ARRAY
21704: PPUSH
21705: LD_VAR 0 7
21709: PUSH
21710: LD_VAR 0 5
21714: ARRAY
21715: PPUSH
21716: CALL_OW 1
21720: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21721: LD_ADDR_VAR 0 7
21725: PUSH
21726: LD_VAR 0 7
21730: PPUSH
21731: LD_VAR 0 5
21735: PUSH
21736: LD_INT 1
21738: MINUS
21739: PPUSH
21740: LD_VAR 0 6
21744: PPUSH
21745: CALL_OW 1
21749: ST_TO_ADDR
// end ;
21750: GO 21667
21752: POP
21753: POP
// result := s_arr [ 1 ] ;
21754: LD_ADDR_VAR 0 4
21758: PUSH
21759: LD_VAR 0 7
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: ST_TO_ADDR
// end ; end ;
21768: LD_VAR 0 4
21772: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21773: LD_INT 0
21775: PPUSH
21776: PPUSH
// if not list then
21777: LD_VAR 0 1
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21877
// i := list [ pos1 ] ;
21786: LD_ADDR_VAR 0 5
21790: PUSH
21791: LD_VAR 0 1
21795: PUSH
21796: LD_VAR 0 2
21800: ARRAY
21801: ST_TO_ADDR
// if not i then
21802: LD_VAR 0 5
21806: NOT
21807: IFFALSE 21811
// exit ;
21809: GO 21877
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21811: LD_ADDR_VAR 0 1
21815: PUSH
21816: LD_VAR 0 1
21820: PPUSH
21821: LD_VAR 0 2
21825: PPUSH
21826: LD_VAR 0 1
21830: PUSH
21831: LD_VAR 0 3
21835: ARRAY
21836: PPUSH
21837: CALL_OW 1
21841: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21842: LD_ADDR_VAR 0 1
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: LD_VAR 0 3
21856: PPUSH
21857: LD_VAR 0 5
21861: PPUSH
21862: CALL_OW 1
21866: ST_TO_ADDR
// result := list ;
21867: LD_ADDR_VAR 0 4
21871: PUSH
21872: LD_VAR 0 1
21876: ST_TO_ADDR
// end ;
21877: LD_VAR 0 4
21881: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21882: LD_INT 0
21884: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21885: LD_ADDR_VAR 0 5
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 250
21899: PPUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 251
21909: PPUSH
21910: LD_VAR 0 2
21914: PPUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: LD_VAR 0 4
21924: PPUSH
21925: CALL 22303 0 5
21929: ST_TO_ADDR
// end ;
21930: LD_VAR 0 5
21934: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21935: LD_INT 0
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
// if not list or not unit then
21941: LD_VAR 0 2
21945: NOT
21946: PUSH
21947: LD_VAR 0 1
21951: NOT
21952: OR
21953: IFFALSE 21957
// exit ;
21955: GO 22298
// result := [ ] ;
21957: LD_ADDR_VAR 0 5
21961: PUSH
21962: EMPTY
21963: ST_TO_ADDR
// for i in list do
21964: LD_ADDR_VAR 0 6
21968: PUSH
21969: LD_VAR 0 2
21973: PUSH
21974: FOR_IN
21975: IFFALSE 22193
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21977: LD_ADDR_VAR 0 8
21981: PUSH
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_VAR 0 6
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: LD_VAR 0 6
22000: PUSH
22001: LD_INT 2
22003: ARRAY
22004: PPUSH
22005: CALL_OW 297
22009: ST_TO_ADDR
// if not Count ( result ) then
22010: LD_VAR 0 5
22014: PPUSH
22015: CALL 18587 0 1
22019: NOT
22020: IFFALSE 22053
// begin result := Join ( result , [ i , tmp ] ) ;
22022: LD_ADDR_VAR 0 5
22026: PUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: LD_VAR 0 6
22036: PUSH
22037: LD_VAR 0 8
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL 54187 0 2
22050: ST_TO_ADDR
// continue ;
22051: GO 21974
// end ; if result [ result ] [ 2 ] <= tmp then
22053: LD_VAR 0 5
22057: PUSH
22058: LD_VAR 0 5
22062: ARRAY
22063: PUSH
22064: LD_INT 2
22066: ARRAY
22067: PUSH
22068: LD_VAR 0 8
22072: LESSEQUAL
22073: IFFALSE 22106
// result := Join ( result , [ i , tmp ] ) else
22075: LD_ADDR_VAR 0 5
22079: PUSH
22080: LD_VAR 0 5
22084: PPUSH
22085: LD_VAR 0 6
22089: PUSH
22090: LD_VAR 0 8
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL 54187 0 2
22103: ST_TO_ADDR
22104: GO 22191
// begin for j := 1 to Count ( result ) do
22106: LD_ADDR_VAR 0 7
22110: PUSH
22111: DOUBLE
22112: LD_INT 1
22114: DEC
22115: ST_TO_ADDR
22116: LD_VAR 0 5
22120: PPUSH
22121: CALL 18587 0 1
22125: PUSH
22126: FOR_TO
22127: IFFALSE 22189
// begin if tmp < result [ j ] [ 2 ] then
22129: LD_VAR 0 8
22133: PUSH
22134: LD_VAR 0 5
22138: PUSH
22139: LD_VAR 0 7
22143: ARRAY
22144: PUSH
22145: LD_INT 2
22147: ARRAY
22148: LESS
22149: IFFALSE 22187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: LD_VAR 0 5
22160: PPUSH
22161: LD_VAR 0 7
22165: PPUSH
22166: LD_VAR 0 6
22170: PUSH
22171: LD_VAR 0 8
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PPUSH
22180: CALL_OW 2
22184: ST_TO_ADDR
// break ;
22185: GO 22189
// end ; end ;
22187: GO 22126
22189: POP
22190: POP
// end ; end ;
22191: GO 21974
22193: POP
22194: POP
// if result and not asc then
22195: LD_VAR 0 5
22199: PUSH
22200: LD_VAR 0 3
22204: NOT
22205: AND
22206: IFFALSE 22223
// result := ReverseArray ( result ) ;
22208: LD_ADDR_VAR 0 5
22212: PUSH
22213: LD_VAR 0 5
22217: PPUSH
22218: CALL 49463 0 1
22222: ST_TO_ADDR
// tmp := [ ] ;
22223: LD_ADDR_VAR 0 8
22227: PUSH
22228: EMPTY
22229: ST_TO_ADDR
// if mode then
22230: LD_VAR 0 4
22234: IFFALSE 22298
// begin for i := 1 to result do
22236: LD_ADDR_VAR 0 6
22240: PUSH
22241: DOUBLE
22242: LD_INT 1
22244: DEC
22245: ST_TO_ADDR
22246: LD_VAR 0 5
22250: PUSH
22251: FOR_TO
22252: IFFALSE 22286
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22254: LD_ADDR_VAR 0 8
22258: PUSH
22259: LD_VAR 0 8
22263: PPUSH
22264: LD_VAR 0 5
22268: PUSH
22269: LD_VAR 0 6
22273: ARRAY
22274: PUSH
22275: LD_INT 1
22277: ARRAY
22278: PPUSH
22279: CALL 54187 0 2
22283: ST_TO_ADDR
22284: GO 22251
22286: POP
22287: POP
// result := tmp ;
22288: LD_ADDR_VAR 0 5
22292: PUSH
22293: LD_VAR 0 8
22297: ST_TO_ADDR
// end ; end ;
22298: LD_VAR 0 5
22302: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22303: LD_INT 0
22305: PPUSH
22306: PPUSH
22307: PPUSH
22308: PPUSH
// if not list then
22309: LD_VAR 0 3
22313: NOT
22314: IFFALSE 22318
// exit ;
22316: GO 22706
// result := [ ] ;
22318: LD_ADDR_VAR 0 6
22322: PUSH
22323: EMPTY
22324: ST_TO_ADDR
// for i in list do
22325: LD_ADDR_VAR 0 7
22329: PUSH
22330: LD_VAR 0 3
22334: PUSH
22335: FOR_IN
22336: IFFALSE 22538
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22338: LD_ADDR_VAR 0 9
22342: PUSH
22343: LD_VAR 0 7
22347: PPUSH
22348: LD_VAR 0 1
22352: PPUSH
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL_OW 297
22362: ST_TO_ADDR
// if not result then
22363: LD_VAR 0 6
22367: NOT
22368: IFFALSE 22394
// result := [ [ i , tmp ] ] else
22370: LD_ADDR_VAR 0 6
22374: PUSH
22375: LD_VAR 0 7
22379: PUSH
22380: LD_VAR 0 9
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: ST_TO_ADDR
22392: GO 22536
// begin if result [ result ] [ 2 ] < tmp then
22394: LD_VAR 0 6
22398: PUSH
22399: LD_VAR 0 6
22403: ARRAY
22404: PUSH
22405: LD_INT 2
22407: ARRAY
22408: PUSH
22409: LD_VAR 0 9
22413: LESS
22414: IFFALSE 22456
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22416: LD_ADDR_VAR 0 6
22420: PUSH
22421: LD_VAR 0 6
22425: PPUSH
22426: LD_VAR 0 6
22430: PUSH
22431: LD_INT 1
22433: PLUS
22434: PPUSH
22435: LD_VAR 0 7
22439: PUSH
22440: LD_VAR 0 9
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PPUSH
22449: CALL_OW 2
22453: ST_TO_ADDR
22454: GO 22536
// for j = 1 to result do
22456: LD_ADDR_VAR 0 8
22460: PUSH
22461: DOUBLE
22462: LD_INT 1
22464: DEC
22465: ST_TO_ADDR
22466: LD_VAR 0 6
22470: PUSH
22471: FOR_TO
22472: IFFALSE 22534
// begin if tmp < result [ j ] [ 2 ] then
22474: LD_VAR 0 9
22478: PUSH
22479: LD_VAR 0 6
22483: PUSH
22484: LD_VAR 0 8
22488: ARRAY
22489: PUSH
22490: LD_INT 2
22492: ARRAY
22493: LESS
22494: IFFALSE 22532
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22496: LD_ADDR_VAR 0 6
22500: PUSH
22501: LD_VAR 0 6
22505: PPUSH
22506: LD_VAR 0 8
22510: PPUSH
22511: LD_VAR 0 7
22515: PUSH
22516: LD_VAR 0 9
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PPUSH
22525: CALL_OW 2
22529: ST_TO_ADDR
// break ;
22530: GO 22534
// end ; end ;
22532: GO 22471
22534: POP
22535: POP
// end ; end ;
22536: GO 22335
22538: POP
22539: POP
// if result and not asc then
22540: LD_VAR 0 6
22544: PUSH
22545: LD_VAR 0 4
22549: NOT
22550: AND
22551: IFFALSE 22626
// begin tmp := result ;
22553: LD_ADDR_VAR 0 9
22557: PUSH
22558: LD_VAR 0 6
22562: ST_TO_ADDR
// for i = tmp downto 1 do
22563: LD_ADDR_VAR 0 7
22567: PUSH
22568: DOUBLE
22569: LD_VAR 0 9
22573: INC
22574: ST_TO_ADDR
22575: LD_INT 1
22577: PUSH
22578: FOR_DOWNTO
22579: IFFALSE 22624
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22581: LD_ADDR_VAR 0 6
22585: PUSH
22586: LD_VAR 0 6
22590: PPUSH
22591: LD_VAR 0 9
22595: PUSH
22596: LD_VAR 0 7
22600: MINUS
22601: PUSH
22602: LD_INT 1
22604: PLUS
22605: PPUSH
22606: LD_VAR 0 9
22610: PUSH
22611: LD_VAR 0 7
22615: ARRAY
22616: PPUSH
22617: CALL_OW 1
22621: ST_TO_ADDR
22622: GO 22578
22624: POP
22625: POP
// end ; tmp := [ ] ;
22626: LD_ADDR_VAR 0 9
22630: PUSH
22631: EMPTY
22632: ST_TO_ADDR
// if mode then
22633: LD_VAR 0 5
22637: IFFALSE 22706
// begin for i = 1 to result do
22639: LD_ADDR_VAR 0 7
22643: PUSH
22644: DOUBLE
22645: LD_INT 1
22647: DEC
22648: ST_TO_ADDR
22649: LD_VAR 0 6
22653: PUSH
22654: FOR_TO
22655: IFFALSE 22694
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22657: LD_ADDR_VAR 0 9
22661: PUSH
22662: LD_VAR 0 9
22666: PPUSH
22667: LD_VAR 0 7
22671: PPUSH
22672: LD_VAR 0 6
22676: PUSH
22677: LD_VAR 0 7
22681: ARRAY
22682: PUSH
22683: LD_INT 1
22685: ARRAY
22686: PPUSH
22687: CALL_OW 1
22691: ST_TO_ADDR
22692: GO 22654
22694: POP
22695: POP
// result := tmp ;
22696: LD_ADDR_VAR 0 6
22700: PUSH
22701: LD_VAR 0 9
22705: ST_TO_ADDR
// end ; end ;
22706: LD_VAR 0 6
22710: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22711: LD_INT 0
22713: PPUSH
22714: PPUSH
22715: PPUSH
22716: PPUSH
22717: PPUSH
22718: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22719: LD_ADDR_VAR 0 5
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// if not x or not y then
22741: LD_VAR 0 2
22745: NOT
22746: PUSH
22747: LD_VAR 0 3
22751: NOT
22752: OR
22753: IFFALSE 22757
// exit ;
22755: GO 24407
// if not range then
22757: LD_VAR 0 4
22761: NOT
22762: IFFALSE 22772
// range := 10 ;
22764: LD_ADDR_VAR 0 4
22768: PUSH
22769: LD_INT 10
22771: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22772: LD_ADDR_VAR 0 8
22776: PUSH
22777: LD_INT 81
22779: PUSH
22780: LD_VAR 0 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 92
22791: PUSH
22792: LD_VAR 0 2
22796: PUSH
22797: LD_VAR 0 3
22801: PUSH
22802: LD_VAR 0 4
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: LD_INT 21
22818: PUSH
22819: LD_INT 3
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 69
22839: ST_TO_ADDR
// if not tmp then
22840: LD_VAR 0 8
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 24407
// for i in tmp do
22849: LD_ADDR_VAR 0 6
22853: PUSH
22854: LD_VAR 0 8
22858: PUSH
22859: FOR_IN
22860: IFFALSE 24382
// begin points := [ 0 , 0 , 0 ] ;
22862: LD_ADDR_VAR 0 9
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: ST_TO_ADDR
// bpoints := 1 ;
22881: LD_ADDR_VAR 0 10
22885: PUSH
22886: LD_INT 1
22888: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22889: LD_VAR 0 6
22893: PPUSH
22894: CALL_OW 247
22898: PUSH
22899: LD_INT 1
22901: DOUBLE
22902: EQUAL
22903: IFTRUE 22907
22905: GO 23485
22907: POP
// begin if GetClass ( i ) = 1 then
22908: LD_VAR 0 6
22912: PPUSH
22913: CALL_OW 257
22917: PUSH
22918: LD_INT 1
22920: EQUAL
22921: IFFALSE 22942
// points := [ 10 , 5 , 3 ] ;
22923: LD_ADDR_VAR 0 9
22927: PUSH
22928: LD_INT 10
22930: PUSH
22931: LD_INT 5
22933: PUSH
22934: LD_INT 3
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22942: LD_VAR 0 6
22946: PPUSH
22947: CALL_OW 257
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: LD_INT 4
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: IN
22966: IFFALSE 22987
// points := [ 3 , 2 , 1 ] ;
22968: LD_ADDR_VAR 0 9
22972: PUSH
22973: LD_INT 3
22975: PUSH
22976: LD_INT 2
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22987: LD_VAR 0 6
22991: PPUSH
22992: CALL_OW 257
22996: PUSH
22997: LD_INT 5
22999: EQUAL
23000: IFFALSE 23021
// points := [ 130 , 5 , 2 ] ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_INT 130
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23021: LD_VAR 0 6
23025: PPUSH
23026: CALL_OW 257
23030: PUSH
23031: LD_INT 8
23033: EQUAL
23034: IFFALSE 23055
// points := [ 35 , 35 , 30 ] ;
23036: LD_ADDR_VAR 0 9
23040: PUSH
23041: LD_INT 35
23043: PUSH
23044: LD_INT 35
23046: PUSH
23047: LD_INT 30
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23055: LD_VAR 0 6
23059: PPUSH
23060: CALL_OW 257
23064: PUSH
23065: LD_INT 9
23067: EQUAL
23068: IFFALSE 23089
// points := [ 20 , 55 , 40 ] ;
23070: LD_ADDR_VAR 0 9
23074: PUSH
23075: LD_INT 20
23077: PUSH
23078: LD_INT 55
23080: PUSH
23081: LD_INT 40
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23089: LD_VAR 0 6
23093: PPUSH
23094: CALL_OW 257
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 16
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: IN
23109: IFFALSE 23130
// points := [ 5 , 3 , 2 ] ;
23111: LD_ADDR_VAR 0 9
23115: PUSH
23116: LD_INT 5
23118: PUSH
23119: LD_INT 3
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23130: LD_VAR 0 6
23134: PPUSH
23135: CALL_OW 257
23139: PUSH
23140: LD_INT 17
23142: EQUAL
23143: IFFALSE 23164
// points := [ 100 , 50 , 75 ] ;
23145: LD_ADDR_VAR 0 9
23149: PUSH
23150: LD_INT 100
23152: PUSH
23153: LD_INT 50
23155: PUSH
23156: LD_INT 75
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23164: LD_VAR 0 6
23168: PPUSH
23169: CALL_OW 257
23173: PUSH
23174: LD_INT 15
23176: EQUAL
23177: IFFALSE 23198
// points := [ 10 , 5 , 3 ] ;
23179: LD_ADDR_VAR 0 9
23183: PUSH
23184: LD_INT 10
23186: PUSH
23187: LD_INT 5
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23198: LD_VAR 0 6
23202: PPUSH
23203: CALL_OW 257
23207: PUSH
23208: LD_INT 14
23210: EQUAL
23211: IFFALSE 23232
// points := [ 10 , 0 , 0 ] ;
23213: LD_ADDR_VAR 0 9
23217: PUSH
23218: LD_INT 10
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23232: LD_VAR 0 6
23236: PPUSH
23237: CALL_OW 257
23241: PUSH
23242: LD_INT 11
23244: EQUAL
23245: IFFALSE 23266
// points := [ 30 , 10 , 5 ] ;
23247: LD_ADDR_VAR 0 9
23251: PUSH
23252: LD_INT 30
23254: PUSH
23255: LD_INT 10
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23266: LD_VAR 0 1
23270: PPUSH
23271: LD_INT 5
23273: PPUSH
23274: CALL_OW 321
23278: PUSH
23279: LD_INT 2
23281: EQUAL
23282: IFFALSE 23299
// bpoints := bpoints * 1.8 ;
23284: LD_ADDR_VAR 0 10
23288: PUSH
23289: LD_VAR 0 10
23293: PUSH
23294: LD_REAL  1.80000000000000E+0000
23297: MUL
23298: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23299: LD_VAR 0 6
23303: PPUSH
23304: CALL_OW 257
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 3
23317: PUSH
23318: LD_INT 4
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: IN
23327: PUSH
23328: LD_VAR 0 1
23332: PPUSH
23333: LD_INT 51
23335: PPUSH
23336: CALL_OW 321
23340: PUSH
23341: LD_INT 2
23343: EQUAL
23344: AND
23345: IFFALSE 23362
// bpoints := bpoints * 1.2 ;
23347: LD_ADDR_VAR 0 10
23351: PUSH
23352: LD_VAR 0 10
23356: PUSH
23357: LD_REAL  1.20000000000000E+0000
23360: MUL
23361: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23362: LD_VAR 0 6
23366: PPUSH
23367: CALL_OW 257
23371: PUSH
23372: LD_INT 5
23374: PUSH
23375: LD_INT 7
23377: PUSH
23378: LD_INT 9
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: IN
23386: PUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: LD_INT 52
23394: PPUSH
23395: CALL_OW 321
23399: PUSH
23400: LD_INT 2
23402: EQUAL
23403: AND
23404: IFFALSE 23421
// bpoints := bpoints * 1.5 ;
23406: LD_ADDR_VAR 0 10
23410: PUSH
23411: LD_VAR 0 10
23415: PUSH
23416: LD_REAL  1.50000000000000E+0000
23419: MUL
23420: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23421: LD_VAR 0 1
23425: PPUSH
23426: LD_INT 66
23428: PPUSH
23429: CALL_OW 321
23433: PUSH
23434: LD_INT 2
23436: EQUAL
23437: IFFALSE 23454
// bpoints := bpoints * 1.1 ;
23439: LD_ADDR_VAR 0 10
23443: PUSH
23444: LD_VAR 0 10
23448: PUSH
23449: LD_REAL  1.10000000000000E+0000
23452: MUL
23453: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23454: LD_ADDR_VAR 0 10
23458: PUSH
23459: LD_VAR 0 10
23463: PUSH
23464: LD_VAR 0 6
23468: PPUSH
23469: LD_INT 1
23471: PPUSH
23472: CALL_OW 259
23476: PUSH
23477: LD_REAL  1.15000000000000E+0000
23480: MUL
23481: MUL
23482: ST_TO_ADDR
// end ; unit_vehicle :
23483: GO 24311
23485: LD_INT 2
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 24299
23493: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23494: LD_VAR 0 6
23498: PPUSH
23499: CALL_OW 264
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 42
23509: PUSH
23510: LD_INT 24
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: IN
23518: IFFALSE 23539
// points := [ 25 , 5 , 3 ] ;
23520: LD_ADDR_VAR 0 9
23524: PUSH
23525: LD_INT 25
23527: PUSH
23528: LD_INT 5
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23539: LD_VAR 0 6
23543: PPUSH
23544: CALL_OW 264
23548: PUSH
23549: LD_INT 4
23551: PUSH
23552: LD_INT 43
23554: PUSH
23555: LD_INT 25
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: IN
23563: IFFALSE 23584
// points := [ 40 , 15 , 5 ] ;
23565: LD_ADDR_VAR 0 9
23569: PUSH
23570: LD_INT 40
23572: PUSH
23573: LD_INT 15
23575: PUSH
23576: LD_INT 5
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23584: LD_VAR 0 6
23588: PPUSH
23589: CALL_OW 264
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: LD_INT 23
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: IN
23604: IFFALSE 23625
// points := [ 7 , 25 , 8 ] ;
23606: LD_ADDR_VAR 0 9
23610: PUSH
23611: LD_INT 7
23613: PUSH
23614: LD_INT 25
23616: PUSH
23617: LD_INT 8
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23625: LD_VAR 0 6
23629: PPUSH
23630: CALL_OW 264
23634: PUSH
23635: LD_INT 5
23637: PUSH
23638: LD_INT 27
23640: PUSH
23641: LD_INT 44
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: IN
23649: IFFALSE 23670
// points := [ 14 , 50 , 16 ] ;
23651: LD_ADDR_VAR 0 9
23655: PUSH
23656: LD_INT 14
23658: PUSH
23659: LD_INT 50
23661: PUSH
23662: LD_INT 16
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23670: LD_VAR 0 6
23674: PPUSH
23675: CALL_OW 264
23679: PUSH
23680: LD_INT 6
23682: PUSH
23683: LD_INT 46
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: IN
23690: IFFALSE 23711
// points := [ 32 , 120 , 70 ] ;
23692: LD_ADDR_VAR 0 9
23696: PUSH
23697: LD_INT 32
23699: PUSH
23700: LD_INT 120
23702: PUSH
23703: LD_INT 70
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23711: LD_VAR 0 6
23715: PPUSH
23716: CALL_OW 264
23720: PUSH
23721: LD_INT 7
23723: PUSH
23724: LD_INT 28
23726: PUSH
23727: LD_INT 45
23729: PUSH
23730: LD_INT 92
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: IN
23739: IFFALSE 23760
// points := [ 35 , 20 , 45 ] ;
23741: LD_ADDR_VAR 0 9
23745: PUSH
23746: LD_INT 35
23748: PUSH
23749: LD_INT 20
23751: PUSH
23752: LD_INT 45
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23760: LD_VAR 0 6
23764: PPUSH
23765: CALL_OW 264
23769: PUSH
23770: LD_INT 47
23772: PUSH
23773: EMPTY
23774: LIST
23775: IN
23776: IFFALSE 23797
// points := [ 67 , 45 , 75 ] ;
23778: LD_ADDR_VAR 0 9
23782: PUSH
23783: LD_INT 67
23785: PUSH
23786: LD_INT 45
23788: PUSH
23789: LD_INT 75
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23797: LD_VAR 0 6
23801: PPUSH
23802: CALL_OW 264
23806: PUSH
23807: LD_INT 26
23809: PUSH
23810: EMPTY
23811: LIST
23812: IN
23813: IFFALSE 23834
// points := [ 120 , 30 , 80 ] ;
23815: LD_ADDR_VAR 0 9
23819: PUSH
23820: LD_INT 120
23822: PUSH
23823: LD_INT 30
23825: PUSH
23826: LD_INT 80
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23834: LD_VAR 0 6
23838: PPUSH
23839: CALL_OW 264
23843: PUSH
23844: LD_INT 22
23846: PUSH
23847: EMPTY
23848: LIST
23849: IN
23850: IFFALSE 23871
// points := [ 40 , 1 , 1 ] ;
23852: LD_ADDR_VAR 0 9
23856: PUSH
23857: LD_INT 40
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23871: LD_VAR 0 6
23875: PPUSH
23876: CALL_OW 264
23880: PUSH
23881: LD_INT 29
23883: PUSH
23884: EMPTY
23885: LIST
23886: IN
23887: IFFALSE 23908
// points := [ 70 , 200 , 400 ] ;
23889: LD_ADDR_VAR 0 9
23893: PUSH
23894: LD_INT 70
23896: PUSH
23897: LD_INT 200
23899: PUSH
23900: LD_INT 400
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23908: LD_VAR 0 6
23912: PPUSH
23913: CALL_OW 264
23917: PUSH
23918: LD_INT 14
23920: PUSH
23921: LD_INT 53
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: IN
23928: IFFALSE 23949
// points := [ 40 , 10 , 20 ] ;
23930: LD_ADDR_VAR 0 9
23934: PUSH
23935: LD_INT 40
23937: PUSH
23938: LD_INT 10
23940: PUSH
23941: LD_INT 20
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23949: LD_VAR 0 6
23953: PPUSH
23954: CALL_OW 264
23958: PUSH
23959: LD_INT 9
23961: PUSH
23962: EMPTY
23963: LIST
23964: IN
23965: IFFALSE 23986
// points := [ 5 , 70 , 20 ] ;
23967: LD_ADDR_VAR 0 9
23971: PUSH
23972: LD_INT 5
23974: PUSH
23975: LD_INT 70
23977: PUSH
23978: LD_INT 20
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23986: LD_VAR 0 6
23990: PPUSH
23991: CALL_OW 264
23995: PUSH
23996: LD_INT 10
23998: PUSH
23999: EMPTY
24000: LIST
24001: IN
24002: IFFALSE 24023
// points := [ 35 , 110 , 70 ] ;
24004: LD_ADDR_VAR 0 9
24008: PUSH
24009: LD_INT 35
24011: PUSH
24012: LD_INT 110
24014: PUSH
24015: LD_INT 70
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24023: LD_VAR 0 6
24027: PPUSH
24028: CALL_OW 265
24032: PUSH
24033: LD_INT 25
24035: EQUAL
24036: IFFALSE 24057
// points := [ 80 , 65 , 100 ] ;
24038: LD_ADDR_VAR 0 9
24042: PUSH
24043: LD_INT 80
24045: PUSH
24046: LD_INT 65
24048: PUSH
24049: LD_INT 100
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24057: LD_VAR 0 6
24061: PPUSH
24062: CALL_OW 263
24066: PUSH
24067: LD_INT 1
24069: EQUAL
24070: IFFALSE 24105
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24072: LD_ADDR_VAR 0 10
24076: PUSH
24077: LD_VAR 0 10
24081: PUSH
24082: LD_VAR 0 6
24086: PPUSH
24087: CALL_OW 311
24091: PPUSH
24092: LD_INT 3
24094: PPUSH
24095: CALL_OW 259
24099: PUSH
24100: LD_INT 4
24102: MUL
24103: MUL
24104: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24105: LD_VAR 0 6
24109: PPUSH
24110: CALL_OW 263
24114: PUSH
24115: LD_INT 2
24117: EQUAL
24118: IFFALSE 24169
// begin j := IsControledBy ( i ) ;
24120: LD_ADDR_VAR 0 7
24124: PUSH
24125: LD_VAR 0 6
24129: PPUSH
24130: CALL_OW 312
24134: ST_TO_ADDR
// if j then
24135: LD_VAR 0 7
24139: IFFALSE 24169
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24141: LD_ADDR_VAR 0 10
24145: PUSH
24146: LD_VAR 0 10
24150: PUSH
24151: LD_VAR 0 7
24155: PPUSH
24156: LD_INT 3
24158: PPUSH
24159: CALL_OW 259
24163: PUSH
24164: LD_INT 3
24166: MUL
24167: MUL
24168: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24169: LD_VAR 0 6
24173: PPUSH
24174: CALL_OW 264
24178: PUSH
24179: LD_INT 5
24181: PUSH
24182: LD_INT 6
24184: PUSH
24185: LD_INT 46
24187: PUSH
24188: LD_INT 44
24190: PUSH
24191: LD_INT 47
24193: PUSH
24194: LD_INT 45
24196: PUSH
24197: LD_INT 28
24199: PUSH
24200: LD_INT 7
24202: PUSH
24203: LD_INT 27
24205: PUSH
24206: LD_INT 29
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: IN
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: LD_INT 52
24229: PPUSH
24230: CALL_OW 321
24234: PUSH
24235: LD_INT 2
24237: EQUAL
24238: AND
24239: IFFALSE 24256
// bpoints := bpoints * 1.2 ;
24241: LD_ADDR_VAR 0 10
24245: PUSH
24246: LD_VAR 0 10
24250: PUSH
24251: LD_REAL  1.20000000000000E+0000
24254: MUL
24255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24256: LD_VAR 0 6
24260: PPUSH
24261: CALL_OW 264
24265: PUSH
24266: LD_INT 6
24268: PUSH
24269: LD_INT 46
24271: PUSH
24272: LD_INT 47
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: IN
24280: IFFALSE 24297
// bpoints := bpoints * 1.2 ;
24282: LD_ADDR_VAR 0 10
24286: PUSH
24287: LD_VAR 0 10
24291: PUSH
24292: LD_REAL  1.20000000000000E+0000
24295: MUL
24296: ST_TO_ADDR
// end ; unit_building :
24297: GO 24311
24299: LD_INT 3
24301: DOUBLE
24302: EQUAL
24303: IFTRUE 24307
24305: GO 24310
24307: POP
// ; end ;
24308: GO 24311
24310: POP
// for j = 1 to 3 do
24311: LD_ADDR_VAR 0 7
24315: PUSH
24316: DOUBLE
24317: LD_INT 1
24319: DEC
24320: ST_TO_ADDR
24321: LD_INT 3
24323: PUSH
24324: FOR_TO
24325: IFFALSE 24378
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24327: LD_ADDR_VAR 0 5
24331: PUSH
24332: LD_VAR 0 5
24336: PPUSH
24337: LD_VAR 0 7
24341: PPUSH
24342: LD_VAR 0 5
24346: PUSH
24347: LD_VAR 0 7
24351: ARRAY
24352: PUSH
24353: LD_VAR 0 9
24357: PUSH
24358: LD_VAR 0 7
24362: ARRAY
24363: PUSH
24364: LD_VAR 0 10
24368: MUL
24369: PLUS
24370: PPUSH
24371: CALL_OW 1
24375: ST_TO_ADDR
24376: GO 24324
24378: POP
24379: POP
// end ;
24380: GO 22859
24382: POP
24383: POP
// result := Replace ( result , 4 , tmp ) ;
24384: LD_ADDR_VAR 0 5
24388: PUSH
24389: LD_VAR 0 5
24393: PPUSH
24394: LD_INT 4
24396: PPUSH
24397: LD_VAR 0 8
24401: PPUSH
24402: CALL_OW 1
24406: ST_TO_ADDR
// end ;
24407: LD_VAR 0 5
24411: RET
// export function DangerAtRange ( unit , range ) ; begin
24412: LD_INT 0
24414: PPUSH
// if not unit then
24415: LD_VAR 0 1
24419: NOT
24420: IFFALSE 24424
// exit ;
24422: GO 24469
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 255
24438: PPUSH
24439: LD_VAR 0 1
24443: PPUSH
24444: CALL_OW 250
24448: PPUSH
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 251
24458: PPUSH
24459: LD_VAR 0 2
24463: PPUSH
24464: CALL 22711 0 4
24468: ST_TO_ADDR
// end ;
24469: LD_VAR 0 3
24473: RET
// export function DangerInArea ( side , area ) ; begin
24474: LD_INT 0
24476: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24477: LD_ADDR_VAR 0 3
24481: PUSH
24482: LD_VAR 0 2
24486: PPUSH
24487: LD_INT 81
24489: PUSH
24490: LD_VAR 0 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PPUSH
24499: CALL_OW 70
24503: ST_TO_ADDR
// end ;
24504: LD_VAR 0 3
24508: RET
// export function IsExtension ( b ) ; begin
24509: LD_INT 0
24511: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_VAR 0 1
24521: PUSH
24522: LD_INT 23
24524: PUSH
24525: LD_INT 20
24527: PUSH
24528: LD_INT 22
24530: PUSH
24531: LD_INT 17
24533: PUSH
24534: LD_INT 24
24536: PUSH
24537: LD_INT 21
24539: PUSH
24540: LD_INT 19
24542: PUSH
24543: LD_INT 16
24545: PUSH
24546: LD_INT 25
24548: PUSH
24549: LD_INT 18
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: IN
24564: ST_TO_ADDR
// end ;
24565: LD_VAR 0 2
24569: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24570: LD_INT 0
24572: PPUSH
24573: PPUSH
24574: PPUSH
// result := [ ] ;
24575: LD_ADDR_VAR 0 4
24579: PUSH
24580: EMPTY
24581: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24582: LD_ADDR_VAR 0 5
24586: PUSH
24587: LD_VAR 0 2
24591: PPUSH
24592: LD_INT 21
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 70
24606: ST_TO_ADDR
// if not tmp then
24607: LD_VAR 0 5
24611: NOT
24612: IFFALSE 24616
// exit ;
24614: GO 24680
// if checkLink then
24616: LD_VAR 0 3
24620: IFFALSE 24670
// begin for i in tmp do
24622: LD_ADDR_VAR 0 6
24626: PUSH
24627: LD_VAR 0 5
24631: PUSH
24632: FOR_IN
24633: IFFALSE 24668
// if GetBase ( i ) <> base then
24635: LD_VAR 0 6
24639: PPUSH
24640: CALL_OW 274
24644: PUSH
24645: LD_VAR 0 1
24649: NONEQUAL
24650: IFFALSE 24666
// ComLinkToBase ( base , i ) ;
24652: LD_VAR 0 1
24656: PPUSH
24657: LD_VAR 0 6
24661: PPUSH
24662: CALL_OW 169
24666: GO 24632
24668: POP
24669: POP
// end ; result := tmp ;
24670: LD_ADDR_VAR 0 4
24674: PUSH
24675: LD_VAR 0 5
24679: ST_TO_ADDR
// end ;
24680: LD_VAR 0 4
24684: RET
// export function ComComplete ( units , b ) ; var i ; begin
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
// if not units then
24689: LD_VAR 0 1
24693: NOT
24694: IFFALSE 24698
// exit ;
24696: GO 24788
// for i in units do
24698: LD_ADDR_VAR 0 4
24702: PUSH
24703: LD_VAR 0 1
24707: PUSH
24708: FOR_IN
24709: IFFALSE 24786
// if BuildingStatus ( b ) = bs_build then
24711: LD_VAR 0 2
24715: PPUSH
24716: CALL_OW 461
24720: PUSH
24721: LD_INT 1
24723: EQUAL
24724: IFFALSE 24784
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24726: LD_VAR 0 4
24730: PPUSH
24731: LD_STRING h
24733: PUSH
24734: LD_VAR 0 2
24738: PPUSH
24739: CALL_OW 250
24743: PUSH
24744: LD_VAR 0 2
24748: PPUSH
24749: CALL_OW 251
24753: PUSH
24754: LD_VAR 0 2
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: PPUSH
24780: CALL_OW 446
24784: GO 24708
24786: POP
24787: POP
// end ;
24788: LD_VAR 0 3
24792: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24793: LD_INT 0
24795: PPUSH
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
24800: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24801: LD_VAR 0 1
24805: NOT
24806: PUSH
24807: LD_VAR 0 1
24811: PPUSH
24812: CALL_OW 263
24816: PUSH
24817: LD_INT 2
24819: NONEQUAL
24820: OR
24821: IFFALSE 24825
// exit ;
24823: GO 25141
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24825: LD_ADDR_VAR 0 6
24829: PUSH
24830: LD_INT 22
24832: PUSH
24833: LD_VAR 0 1
24837: PPUSH
24838: CALL_OW 255
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: LD_INT 30
24852: PUSH
24853: LD_INT 36
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 31
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PPUSH
24879: CALL_OW 69
24883: ST_TO_ADDR
// if not tmp then
24884: LD_VAR 0 6
24888: NOT
24889: IFFALSE 24893
// exit ;
24891: GO 25141
// result := [ ] ;
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: EMPTY
24899: ST_TO_ADDR
// for i in tmp do
24900: LD_ADDR_VAR 0 3
24904: PUSH
24905: LD_VAR 0 6
24909: PUSH
24910: FOR_IN
24911: IFFALSE 24982
// begin t := UnitsInside ( i ) ;
24913: LD_ADDR_VAR 0 4
24917: PUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: CALL_OW 313
24927: ST_TO_ADDR
// if t then
24928: LD_VAR 0 4
24932: IFFALSE 24980
// for j in t do
24934: LD_ADDR_VAR 0 7
24938: PUSH
24939: LD_VAR 0 4
24943: PUSH
24944: FOR_IN
24945: IFFALSE 24978
// result := Replace ( result , result + 1 , j ) ;
24947: LD_ADDR_VAR 0 2
24951: PUSH
24952: LD_VAR 0 2
24956: PPUSH
24957: LD_VAR 0 2
24961: PUSH
24962: LD_INT 1
24964: PLUS
24965: PPUSH
24966: LD_VAR 0 7
24970: PPUSH
24971: CALL_OW 1
24975: ST_TO_ADDR
24976: GO 24944
24978: POP
24979: POP
// end ;
24980: GO 24910
24982: POP
24983: POP
// if not result then
24984: LD_VAR 0 2
24988: NOT
24989: IFFALSE 24993
// exit ;
24991: GO 25141
// mech := result [ 1 ] ;
24993: LD_ADDR_VAR 0 5
24997: PUSH
24998: LD_VAR 0 2
25002: PUSH
25003: LD_INT 1
25005: ARRAY
25006: ST_TO_ADDR
// if result > 1 then
25007: LD_VAR 0 2
25011: PUSH
25012: LD_INT 1
25014: GREATER
25015: IFFALSE 25127
// begin for i = 2 to result do
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: DOUBLE
25023: LD_INT 2
25025: DEC
25026: ST_TO_ADDR
25027: LD_VAR 0 2
25031: PUSH
25032: FOR_TO
25033: IFFALSE 25125
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25035: LD_ADDR_VAR 0 4
25039: PUSH
25040: LD_VAR 0 2
25044: PUSH
25045: LD_VAR 0 3
25049: ARRAY
25050: PPUSH
25051: LD_INT 3
25053: PPUSH
25054: CALL_OW 259
25058: PUSH
25059: LD_VAR 0 2
25063: PUSH
25064: LD_VAR 0 3
25068: ARRAY
25069: PPUSH
25070: CALL_OW 432
25074: MINUS
25075: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25076: LD_VAR 0 4
25080: PUSH
25081: LD_VAR 0 5
25085: PPUSH
25086: LD_INT 3
25088: PPUSH
25089: CALL_OW 259
25093: PUSH
25094: LD_VAR 0 5
25098: PPUSH
25099: CALL_OW 432
25103: MINUS
25104: GREATEREQUAL
25105: IFFALSE 25123
// mech := result [ i ] ;
25107: LD_ADDR_VAR 0 5
25111: PUSH
25112: LD_VAR 0 2
25116: PUSH
25117: LD_VAR 0 3
25121: ARRAY
25122: ST_TO_ADDR
// end ;
25123: GO 25032
25125: POP
25126: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25127: LD_VAR 0 1
25131: PPUSH
25132: LD_VAR 0 5
25136: PPUSH
25137: CALL_OW 135
// end ;
25141: LD_VAR 0 2
25145: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25146: LD_INT 0
25148: PPUSH
25149: PPUSH
25150: PPUSH
25151: PPUSH
25152: PPUSH
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
// result := [ ] ;
25161: LD_ADDR_VAR 0 7
25165: PUSH
25166: EMPTY
25167: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 266
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: IN
25188: NOT
25189: IFFALSE 25193
// exit ;
25191: GO 26827
// if name then
25193: LD_VAR 0 3
25197: IFFALSE 25213
// SetBName ( base_dep , name ) ;
25199: LD_VAR 0 1
25203: PPUSH
25204: LD_VAR 0 3
25208: PPUSH
25209: CALL_OW 500
// base := GetBase ( base_dep ) ;
25213: LD_ADDR_VAR 0 15
25217: PUSH
25218: LD_VAR 0 1
25222: PPUSH
25223: CALL_OW 274
25227: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25228: LD_ADDR_VAR 0 16
25232: PUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL_OW 255
25242: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25243: LD_ADDR_VAR 0 17
25247: PUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL_OW 248
25257: ST_TO_ADDR
// if sources then
25258: LD_VAR 0 5
25262: IFFALSE 25309
// for i = 1 to 3 do
25264: LD_ADDR_VAR 0 8
25268: PUSH
25269: DOUBLE
25270: LD_INT 1
25272: DEC
25273: ST_TO_ADDR
25274: LD_INT 3
25276: PUSH
25277: FOR_TO
25278: IFFALSE 25307
// AddResourceType ( base , i , sources [ i ] ) ;
25280: LD_VAR 0 15
25284: PPUSH
25285: LD_VAR 0 8
25289: PPUSH
25290: LD_VAR 0 5
25294: PUSH
25295: LD_VAR 0 8
25299: ARRAY
25300: PPUSH
25301: CALL_OW 276
25305: GO 25277
25307: POP
25308: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25309: LD_ADDR_VAR 0 18
25313: PUSH
25314: LD_VAR 0 15
25318: PPUSH
25319: LD_VAR 0 2
25323: PPUSH
25324: LD_INT 1
25326: PPUSH
25327: CALL 24570 0 3
25331: ST_TO_ADDR
// InitHc ;
25332: CALL_OW 19
// InitUc ;
25336: CALL_OW 18
// uc_side := side ;
25340: LD_ADDR_OWVAR 20
25344: PUSH
25345: LD_VAR 0 16
25349: ST_TO_ADDR
// uc_nation := nation ;
25350: LD_ADDR_OWVAR 21
25354: PUSH
25355: LD_VAR 0 17
25359: ST_TO_ADDR
// if buildings then
25360: LD_VAR 0 18
25364: IFFALSE 26686
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25366: LD_ADDR_VAR 0 19
25370: PUSH
25371: LD_VAR 0 18
25375: PPUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 30
25381: PUSH
25382: LD_INT 29
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 30
25391: PUSH
25392: LD_INT 30
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: PPUSH
25404: CALL_OW 72
25408: ST_TO_ADDR
// if tmp then
25409: LD_VAR 0 19
25413: IFFALSE 25461
// for i in tmp do
25415: LD_ADDR_VAR 0 8
25419: PUSH
25420: LD_VAR 0 19
25424: PUSH
25425: FOR_IN
25426: IFFALSE 25459
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25428: LD_VAR 0 8
25432: PPUSH
25433: CALL_OW 250
25437: PPUSH
25438: LD_VAR 0 8
25442: PPUSH
25443: CALL_OW 251
25447: PPUSH
25448: LD_VAR 0 16
25452: PPUSH
25453: CALL_OW 441
25457: GO 25425
25459: POP
25460: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25461: LD_VAR 0 18
25465: PPUSH
25466: LD_INT 2
25468: PUSH
25469: LD_INT 30
25471: PUSH
25472: LD_INT 32
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 30
25481: PUSH
25482: LD_INT 33
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: LIST
25493: PPUSH
25494: CALL_OW 72
25498: IFFALSE 25586
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25500: LD_ADDR_VAR 0 8
25504: PUSH
25505: LD_VAR 0 18
25509: PPUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 30
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 30
25525: PUSH
25526: LD_INT 33
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: PPUSH
25538: CALL_OW 72
25542: PUSH
25543: FOR_IN
25544: IFFALSE 25584
// begin if not GetBWeapon ( i ) then
25546: LD_VAR 0 8
25550: PPUSH
25551: CALL_OW 269
25555: NOT
25556: IFFALSE 25582
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25558: LD_VAR 0 8
25562: PPUSH
25563: LD_VAR 0 8
25567: PPUSH
25568: LD_VAR 0 2
25572: PPUSH
25573: CALL 26832 0 2
25577: PPUSH
25578: CALL_OW 431
// end ;
25582: GO 25543
25584: POP
25585: POP
// end ; for i = 1 to personel do
25586: LD_ADDR_VAR 0 8
25590: PUSH
25591: DOUBLE
25592: LD_INT 1
25594: DEC
25595: ST_TO_ADDR
25596: LD_VAR 0 6
25600: PUSH
25601: FOR_TO
25602: IFFALSE 26666
// begin if i > 4 then
25604: LD_VAR 0 8
25608: PUSH
25609: LD_INT 4
25611: GREATER
25612: IFFALSE 25616
// break ;
25614: GO 26666
// case i of 1 :
25616: LD_VAR 0 8
25620: PUSH
25621: LD_INT 1
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25709
25629: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25630: LD_ADDR_VAR 0 12
25634: PUSH
25635: LD_VAR 0 18
25639: PPUSH
25640: LD_INT 22
25642: PUSH
25643: LD_VAR 0 16
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 58
25654: PUSH
25655: EMPTY
25656: LIST
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: LD_INT 30
25663: PUSH
25664: LD_INT 32
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 30
25673: PUSH
25674: LD_INT 4
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 30
25683: PUSH
25684: LD_INT 5
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: PPUSH
25702: CALL_OW 72
25706: ST_TO_ADDR
25707: GO 25931
25709: LD_INT 2
25711: DOUBLE
25712: EQUAL
25713: IFTRUE 25717
25715: GO 25779
25717: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25718: LD_ADDR_VAR 0 12
25722: PUSH
25723: LD_VAR 0 18
25727: PPUSH
25728: LD_INT 22
25730: PUSH
25731: LD_VAR 0 16
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: LD_INT 30
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PPUSH
25772: CALL_OW 72
25776: ST_TO_ADDR
25777: GO 25931
25779: LD_INT 3
25781: DOUBLE
25782: EQUAL
25783: IFTRUE 25787
25785: GO 25849
25787: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25788: LD_ADDR_VAR 0 12
25792: PUSH
25793: LD_VAR 0 18
25797: PPUSH
25798: LD_INT 22
25800: PUSH
25801: LD_VAR 0 16
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 30
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PPUSH
25842: CALL_OW 72
25846: ST_TO_ADDR
25847: GO 25931
25849: LD_INT 4
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25930
25857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25858: LD_ADDR_VAR 0 12
25862: PUSH
25863: LD_VAR 0 18
25867: PPUSH
25868: LD_INT 22
25870: PUSH
25871: LD_VAR 0 16
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: LD_INT 30
25885: PUSH
25886: LD_INT 6
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 30
25895: PUSH
25896: LD_INT 7
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 8
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 72
25927: ST_TO_ADDR
25928: GO 25931
25930: POP
// if i = 1 then
25931: LD_VAR 0 8
25935: PUSH
25936: LD_INT 1
25938: EQUAL
25939: IFFALSE 26050
// begin tmp := [ ] ;
25941: LD_ADDR_VAR 0 19
25945: PUSH
25946: EMPTY
25947: ST_TO_ADDR
// for j in f do
25948: LD_ADDR_VAR 0 9
25952: PUSH
25953: LD_VAR 0 12
25957: PUSH
25958: FOR_IN
25959: IFFALSE 26032
// if GetBType ( j ) = b_bunker then
25961: LD_VAR 0 9
25965: PPUSH
25966: CALL_OW 266
25970: PUSH
25971: LD_INT 32
25973: EQUAL
25974: IFFALSE 26001
// tmp := Insert ( tmp , 1 , j ) else
25976: LD_ADDR_VAR 0 19
25980: PUSH
25981: LD_VAR 0 19
25985: PPUSH
25986: LD_INT 1
25988: PPUSH
25989: LD_VAR 0 9
25993: PPUSH
25994: CALL_OW 2
25998: ST_TO_ADDR
25999: GO 26030
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26001: LD_ADDR_VAR 0 19
26005: PUSH
26006: LD_VAR 0 19
26010: PPUSH
26011: LD_VAR 0 19
26015: PUSH
26016: LD_INT 1
26018: PLUS
26019: PPUSH
26020: LD_VAR 0 9
26024: PPUSH
26025: CALL_OW 2
26029: ST_TO_ADDR
26030: GO 25958
26032: POP
26033: POP
// if tmp then
26034: LD_VAR 0 19
26038: IFFALSE 26050
// f := tmp ;
26040: LD_ADDR_VAR 0 12
26044: PUSH
26045: LD_VAR 0 19
26049: ST_TO_ADDR
// end ; x := personel [ i ] ;
26050: LD_ADDR_VAR 0 13
26054: PUSH
26055: LD_VAR 0 6
26059: PUSH
26060: LD_VAR 0 8
26064: ARRAY
26065: ST_TO_ADDR
// if x = - 1 then
26066: LD_VAR 0 13
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: EQUAL
26075: IFFALSE 26284
// begin for j in f do
26077: LD_ADDR_VAR 0 9
26081: PUSH
26082: LD_VAR 0 12
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26280
// repeat InitHc ;
26090: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26094: LD_VAR 0 9
26098: PPUSH
26099: CALL_OW 266
26103: PUSH
26104: LD_INT 5
26106: EQUAL
26107: IFFALSE 26177
// begin if UnitsInside ( j ) < 3 then
26109: LD_VAR 0 9
26113: PPUSH
26114: CALL_OW 313
26118: PUSH
26119: LD_INT 3
26121: LESS
26122: IFFALSE 26158
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26124: LD_INT 0
26126: PPUSH
26127: LD_INT 5
26129: PUSH
26130: LD_INT 8
26132: PUSH
26133: LD_INT 9
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: PUSH
26141: LD_VAR 0 17
26145: ARRAY
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: CALL_OW 380
26156: GO 26175
// PrepareHuman ( false , i , skill ) ;
26158: LD_INT 0
26160: PPUSH
26161: LD_VAR 0 8
26165: PPUSH
26166: LD_VAR 0 4
26170: PPUSH
26171: CALL_OW 380
// end else
26175: GO 26194
// PrepareHuman ( false , i , skill ) ;
26177: LD_INT 0
26179: PPUSH
26180: LD_VAR 0 8
26184: PPUSH
26185: LD_VAR 0 4
26189: PPUSH
26190: CALL_OW 380
// un := CreateHuman ;
26194: LD_ADDR_VAR 0 14
26198: PUSH
26199: CALL_OW 44
26203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26204: LD_ADDR_VAR 0 7
26208: PUSH
26209: LD_VAR 0 7
26213: PPUSH
26214: LD_INT 1
26216: PPUSH
26217: LD_VAR 0 14
26221: PPUSH
26222: CALL_OW 2
26226: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26227: LD_VAR 0 14
26231: PPUSH
26232: LD_VAR 0 9
26236: PPUSH
26237: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26241: LD_VAR 0 9
26245: PPUSH
26246: CALL_OW 313
26250: PUSH
26251: LD_INT 6
26253: EQUAL
26254: PUSH
26255: LD_VAR 0 9
26259: PPUSH
26260: CALL_OW 266
26264: PUSH
26265: LD_INT 32
26267: PUSH
26268: LD_INT 31
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: IN
26275: OR
26276: IFFALSE 26090
26278: GO 26087
26280: POP
26281: POP
// end else
26282: GO 26664
// for j = 1 to x do
26284: LD_ADDR_VAR 0 9
26288: PUSH
26289: DOUBLE
26290: LD_INT 1
26292: DEC
26293: ST_TO_ADDR
26294: LD_VAR 0 13
26298: PUSH
26299: FOR_TO
26300: IFFALSE 26662
// begin InitHc ;
26302: CALL_OW 19
// if not f then
26306: LD_VAR 0 12
26310: NOT
26311: IFFALSE 26400
// begin PrepareHuman ( false , i , skill ) ;
26313: LD_INT 0
26315: PPUSH
26316: LD_VAR 0 8
26320: PPUSH
26321: LD_VAR 0 4
26325: PPUSH
26326: CALL_OW 380
// un := CreateHuman ;
26330: LD_ADDR_VAR 0 14
26334: PUSH
26335: CALL_OW 44
26339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26340: LD_ADDR_VAR 0 7
26344: PUSH
26345: LD_VAR 0 7
26349: PPUSH
26350: LD_INT 1
26352: PPUSH
26353: LD_VAR 0 14
26357: PPUSH
26358: CALL_OW 2
26362: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26363: LD_VAR 0 14
26367: PPUSH
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 250
26377: PPUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 251
26387: PPUSH
26388: LD_INT 10
26390: PPUSH
26391: LD_INT 0
26393: PPUSH
26394: CALL_OW 50
// continue ;
26398: GO 26299
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26400: LD_VAR 0 12
26404: PUSH
26405: LD_INT 1
26407: ARRAY
26408: PPUSH
26409: CALL_OW 313
26413: PUSH
26414: LD_VAR 0 12
26418: PUSH
26419: LD_INT 1
26421: ARRAY
26422: PPUSH
26423: CALL_OW 266
26427: PUSH
26428: LD_INT 32
26430: PUSH
26431: LD_INT 31
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: IN
26438: AND
26439: PUSH
26440: LD_VAR 0 12
26444: PUSH
26445: LD_INT 1
26447: ARRAY
26448: PPUSH
26449: CALL_OW 313
26453: PUSH
26454: LD_INT 6
26456: EQUAL
26457: OR
26458: IFFALSE 26478
// f := Delete ( f , 1 ) ;
26460: LD_ADDR_VAR 0 12
26464: PUSH
26465: LD_VAR 0 12
26469: PPUSH
26470: LD_INT 1
26472: PPUSH
26473: CALL_OW 3
26477: ST_TO_ADDR
// if not f then
26478: LD_VAR 0 12
26482: NOT
26483: IFFALSE 26501
// begin x := x + 2 ;
26485: LD_ADDR_VAR 0 13
26489: PUSH
26490: LD_VAR 0 13
26494: PUSH
26495: LD_INT 2
26497: PLUS
26498: ST_TO_ADDR
// continue ;
26499: GO 26299
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26501: LD_VAR 0 12
26505: PUSH
26506: LD_INT 1
26508: ARRAY
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 5
26517: EQUAL
26518: IFFALSE 26592
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26520: LD_VAR 0 12
26524: PUSH
26525: LD_INT 1
26527: ARRAY
26528: PPUSH
26529: CALL_OW 313
26533: PUSH
26534: LD_INT 3
26536: LESS
26537: IFFALSE 26573
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26539: LD_INT 0
26541: PPUSH
26542: LD_INT 5
26544: PUSH
26545: LD_INT 8
26547: PUSH
26548: LD_INT 9
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: PUSH
26556: LD_VAR 0 17
26560: ARRAY
26561: PPUSH
26562: LD_VAR 0 4
26566: PPUSH
26567: CALL_OW 380
26571: GO 26590
// PrepareHuman ( false , i , skill ) ;
26573: LD_INT 0
26575: PPUSH
26576: LD_VAR 0 8
26580: PPUSH
26581: LD_VAR 0 4
26585: PPUSH
26586: CALL_OW 380
// end else
26590: GO 26609
// PrepareHuman ( false , i , skill ) ;
26592: LD_INT 0
26594: PPUSH
26595: LD_VAR 0 8
26599: PPUSH
26600: LD_VAR 0 4
26604: PPUSH
26605: CALL_OW 380
// un := CreateHuman ;
26609: LD_ADDR_VAR 0 14
26613: PUSH
26614: CALL_OW 44
26618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26619: LD_ADDR_VAR 0 7
26623: PUSH
26624: LD_VAR 0 7
26628: PPUSH
26629: LD_INT 1
26631: PPUSH
26632: LD_VAR 0 14
26636: PPUSH
26637: CALL_OW 2
26641: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26642: LD_VAR 0 14
26646: PPUSH
26647: LD_VAR 0 12
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PPUSH
26656: CALL_OW 52
// end ;
26660: GO 26299
26662: POP
26663: POP
// end ;
26664: GO 25601
26666: POP
26667: POP
// result := result ^ buildings ;
26668: LD_ADDR_VAR 0 7
26672: PUSH
26673: LD_VAR 0 7
26677: PUSH
26678: LD_VAR 0 18
26682: ADD
26683: ST_TO_ADDR
// end else
26684: GO 26827
// begin for i = 1 to personel do
26686: LD_ADDR_VAR 0 8
26690: PUSH
26691: DOUBLE
26692: LD_INT 1
26694: DEC
26695: ST_TO_ADDR
26696: LD_VAR 0 6
26700: PUSH
26701: FOR_TO
26702: IFFALSE 26825
// begin if i > 4 then
26704: LD_VAR 0 8
26708: PUSH
26709: LD_INT 4
26711: GREATER
26712: IFFALSE 26716
// break ;
26714: GO 26825
// x := personel [ i ] ;
26716: LD_ADDR_VAR 0 13
26720: PUSH
26721: LD_VAR 0 6
26725: PUSH
26726: LD_VAR 0 8
26730: ARRAY
26731: ST_TO_ADDR
// if x = - 1 then
26732: LD_VAR 0 13
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: EQUAL
26741: IFFALSE 26745
// continue ;
26743: GO 26701
// PrepareHuman ( false , i , skill ) ;
26745: LD_INT 0
26747: PPUSH
26748: LD_VAR 0 8
26752: PPUSH
26753: LD_VAR 0 4
26757: PPUSH
26758: CALL_OW 380
// un := CreateHuman ;
26762: LD_ADDR_VAR 0 14
26766: PUSH
26767: CALL_OW 44
26771: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26772: LD_VAR 0 14
26776: PPUSH
26777: LD_VAR 0 1
26781: PPUSH
26782: CALL_OW 250
26786: PPUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 251
26796: PPUSH
26797: LD_INT 10
26799: PPUSH
26800: LD_INT 0
26802: PPUSH
26803: CALL_OW 50
// result := result ^ un ;
26807: LD_ADDR_VAR 0 7
26811: PUSH
26812: LD_VAR 0 7
26816: PUSH
26817: LD_VAR 0 14
26821: ADD
26822: ST_TO_ADDR
// end ;
26823: GO 26701
26825: POP
26826: POP
// end ; end ;
26827: LD_VAR 0 7
26831: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
26838: PPUSH
26839: PPUSH
26840: PPUSH
26841: PPUSH
26842: PPUSH
26843: PPUSH
26844: PPUSH
26845: PPUSH
26846: PPUSH
26847: PPUSH
26848: PPUSH
26849: PPUSH
// result := false ;
26850: LD_ADDR_VAR 0 3
26854: PUSH
26855: LD_INT 0
26857: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26858: LD_VAR 0 1
26862: NOT
26863: PUSH
26864: LD_VAR 0 1
26868: PPUSH
26869: CALL_OW 266
26873: PUSH
26874: LD_INT 32
26876: PUSH
26877: LD_INT 33
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: IN
26884: NOT
26885: OR
26886: IFFALSE 26890
// exit ;
26888: GO 27999
// nat := GetNation ( tower ) ;
26890: LD_ADDR_VAR 0 12
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 248
26904: ST_TO_ADDR
// side := GetSide ( tower ) ;
26905: LD_ADDR_VAR 0 16
26909: PUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: CALL_OW 255
26919: ST_TO_ADDR
// x := GetX ( tower ) ;
26920: LD_ADDR_VAR 0 10
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL_OW 250
26934: ST_TO_ADDR
// y := GetY ( tower ) ;
26935: LD_ADDR_VAR 0 11
26939: PUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: CALL_OW 251
26949: ST_TO_ADDR
// if not x or not y then
26950: LD_VAR 0 10
26954: NOT
26955: PUSH
26956: LD_VAR 0 11
26960: NOT
26961: OR
26962: IFFALSE 26966
// exit ;
26964: GO 27999
// weapon := 0 ;
26966: LD_ADDR_VAR 0 18
26970: PUSH
26971: LD_INT 0
26973: ST_TO_ADDR
// fac_list := [ ] ;
26974: LD_ADDR_VAR 0 17
26978: PUSH
26979: EMPTY
26980: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26981: LD_ADDR_VAR 0 6
26985: PUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 274
26995: PPUSH
26996: LD_VAR 0 2
27000: PPUSH
27001: LD_INT 0
27003: PPUSH
27004: CALL 24570 0 3
27008: PPUSH
27009: LD_INT 30
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 72
27023: ST_TO_ADDR
// if not factories then
27024: LD_VAR 0 6
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27999
// for i in factories do
27033: LD_ADDR_VAR 0 8
27037: PUSH
27038: LD_VAR 0 6
27042: PUSH
27043: FOR_IN
27044: IFFALSE 27069
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27046: LD_ADDR_VAR 0 17
27050: PUSH
27051: LD_VAR 0 17
27055: PUSH
27056: LD_VAR 0 8
27060: PPUSH
27061: CALL_OW 478
27065: UNION
27066: ST_TO_ADDR
27067: GO 27043
27069: POP
27070: POP
// if not fac_list then
27071: LD_VAR 0 17
27075: NOT
27076: IFFALSE 27080
// exit ;
27078: GO 27999
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_INT 4
27087: PUSH
27088: LD_INT 5
27090: PUSH
27091: LD_INT 9
27093: PUSH
27094: LD_INT 10
27096: PUSH
27097: LD_INT 6
27099: PUSH
27100: LD_INT 7
27102: PUSH
27103: LD_INT 11
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 27
27117: PUSH
27118: LD_INT 28
27120: PUSH
27121: LD_INT 26
27123: PUSH
27124: LD_INT 30
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 43
27135: PUSH
27136: LD_INT 44
27138: PUSH
27139: LD_INT 46
27141: PUSH
27142: LD_INT 45
27144: PUSH
27145: LD_INT 47
27147: PUSH
27148: LD_INT 49
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: PUSH
27164: LD_VAR 0 12
27168: ARRAY
27169: ST_TO_ADDR
// list := list isect fac_list ;
27170: LD_ADDR_VAR 0 5
27174: PUSH
27175: LD_VAR 0 5
27179: PUSH
27180: LD_VAR 0 17
27184: ISECT
27185: ST_TO_ADDR
// if not list then
27186: LD_VAR 0 5
27190: NOT
27191: IFFALSE 27195
// exit ;
27193: GO 27999
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27195: LD_VAR 0 12
27199: PUSH
27200: LD_INT 3
27202: EQUAL
27203: PUSH
27204: LD_INT 49
27206: PUSH
27207: LD_VAR 0 5
27211: IN
27212: AND
27213: PUSH
27214: LD_INT 31
27216: PPUSH
27217: LD_VAR 0 16
27221: PPUSH
27222: CALL_OW 321
27226: PUSH
27227: LD_INT 2
27229: EQUAL
27230: AND
27231: IFFALSE 27291
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27233: LD_INT 22
27235: PUSH
27236: LD_VAR 0 16
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 35
27247: PUSH
27248: LD_INT 49
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 91
27257: PUSH
27258: LD_VAR 0 1
27262: PUSH
27263: LD_INT 10
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: NOT
27281: IFFALSE 27291
// weapon := ru_time_lapser ;
27283: LD_ADDR_VAR 0 18
27287: PUSH
27288: LD_INT 49
27290: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27291: LD_VAR 0 12
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: IN
27306: PUSH
27307: LD_INT 11
27309: PUSH
27310: LD_VAR 0 5
27314: IN
27315: PUSH
27316: LD_INT 30
27318: PUSH
27319: LD_VAR 0 5
27323: IN
27324: OR
27325: AND
27326: PUSH
27327: LD_INT 6
27329: PPUSH
27330: LD_VAR 0 16
27334: PPUSH
27335: CALL_OW 321
27339: PUSH
27340: LD_INT 2
27342: EQUAL
27343: AND
27344: IFFALSE 27509
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27346: LD_INT 22
27348: PUSH
27349: LD_VAR 0 16
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 35
27363: PUSH
27364: LD_INT 11
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 35
27373: PUSH
27374: LD_INT 30
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 91
27388: PUSH
27389: LD_VAR 0 1
27393: PUSH
27394: LD_INT 18
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: PPUSH
27407: CALL_OW 69
27411: NOT
27412: PUSH
27413: LD_INT 22
27415: PUSH
27416: LD_VAR 0 16
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: LD_INT 30
27430: PUSH
27431: LD_INT 32
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 30
27440: PUSH
27441: LD_INT 33
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 91
27455: PUSH
27456: LD_VAR 0 1
27460: PUSH
27461: LD_INT 12
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: PPUSH
27477: CALL_OW 69
27481: PUSH
27482: LD_INT 2
27484: GREATER
27485: AND
27486: IFFALSE 27509
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27488: LD_ADDR_VAR 0 18
27492: PUSH
27493: LD_INT 11
27495: PUSH
27496: LD_INT 30
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_VAR 0 12
27507: ARRAY
27508: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27509: LD_VAR 0 18
27513: NOT
27514: PUSH
27515: LD_INT 40
27517: PPUSH
27518: LD_VAR 0 16
27522: PPUSH
27523: CALL_OW 321
27527: PUSH
27528: LD_INT 2
27530: EQUAL
27531: AND
27532: PUSH
27533: LD_INT 7
27535: PUSH
27536: LD_VAR 0 5
27540: IN
27541: PUSH
27542: LD_INT 28
27544: PUSH
27545: LD_VAR 0 5
27549: IN
27550: OR
27551: PUSH
27552: LD_INT 45
27554: PUSH
27555: LD_VAR 0 5
27559: IN
27560: OR
27561: AND
27562: IFFALSE 27816
// begin hex := GetHexInfo ( x , y ) ;
27564: LD_ADDR_VAR 0 4
27568: PUSH
27569: LD_VAR 0 10
27573: PPUSH
27574: LD_VAR 0 11
27578: PPUSH
27579: CALL_OW 546
27583: ST_TO_ADDR
// if hex [ 1 ] then
27584: LD_VAR 0 4
27588: PUSH
27589: LD_INT 1
27591: ARRAY
27592: IFFALSE 27596
// exit ;
27594: GO 27999
// height := hex [ 2 ] ;
27596: LD_ADDR_VAR 0 15
27600: PUSH
27601: LD_VAR 0 4
27605: PUSH
27606: LD_INT 2
27608: ARRAY
27609: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27610: LD_ADDR_VAR 0 14
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 3
27623: PUSH
27624: LD_INT 5
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// for i in tmp do
27633: LD_ADDR_VAR 0 8
27637: PUSH
27638: LD_VAR 0 14
27642: PUSH
27643: FOR_IN
27644: IFFALSE 27814
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27646: LD_ADDR_VAR 0 9
27650: PUSH
27651: LD_VAR 0 10
27655: PPUSH
27656: LD_VAR 0 8
27660: PPUSH
27661: LD_INT 5
27663: PPUSH
27664: CALL_OW 272
27668: PUSH
27669: LD_VAR 0 11
27673: PPUSH
27674: LD_VAR 0 8
27678: PPUSH
27679: LD_INT 5
27681: PPUSH
27682: CALL_OW 273
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27691: LD_VAR 0 9
27695: PUSH
27696: LD_INT 1
27698: ARRAY
27699: PPUSH
27700: LD_VAR 0 9
27704: PUSH
27705: LD_INT 2
27707: ARRAY
27708: PPUSH
27709: CALL_OW 488
27713: IFFALSE 27812
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27715: LD_ADDR_VAR 0 4
27719: PUSH
27720: LD_VAR 0 9
27724: PUSH
27725: LD_INT 1
27727: ARRAY
27728: PPUSH
27729: LD_VAR 0 9
27733: PUSH
27734: LD_INT 2
27736: ARRAY
27737: PPUSH
27738: CALL_OW 546
27742: ST_TO_ADDR
// if hex [ 1 ] then
27743: LD_VAR 0 4
27747: PUSH
27748: LD_INT 1
27750: ARRAY
27751: IFFALSE 27755
// continue ;
27753: GO 27643
// h := hex [ 2 ] ;
27755: LD_ADDR_VAR 0 13
27759: PUSH
27760: LD_VAR 0 4
27764: PUSH
27765: LD_INT 2
27767: ARRAY
27768: ST_TO_ADDR
// if h + 7 < height then
27769: LD_VAR 0 13
27773: PUSH
27774: LD_INT 7
27776: PLUS
27777: PUSH
27778: LD_VAR 0 15
27782: LESS
27783: IFFALSE 27812
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27785: LD_ADDR_VAR 0 18
27789: PUSH
27790: LD_INT 7
27792: PUSH
27793: LD_INT 28
27795: PUSH
27796: LD_INT 45
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: PUSH
27804: LD_VAR 0 12
27808: ARRAY
27809: ST_TO_ADDR
// break ;
27810: GO 27814
// end ; end ; end ;
27812: GO 27643
27814: POP
27815: POP
// end ; if not weapon then
27816: LD_VAR 0 18
27820: NOT
27821: IFFALSE 27881
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27823: LD_ADDR_VAR 0 5
27827: PUSH
27828: LD_VAR 0 5
27832: PUSH
27833: LD_INT 11
27835: PUSH
27836: LD_INT 30
27838: PUSH
27839: LD_INT 49
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: DIFF
27847: ST_TO_ADDR
// if not list then
27848: LD_VAR 0 5
27852: NOT
27853: IFFALSE 27857
// exit ;
27855: GO 27999
// weapon := list [ rand ( 1 , list ) ] ;
27857: LD_ADDR_VAR 0 18
27861: PUSH
27862: LD_VAR 0 5
27866: PUSH
27867: LD_INT 1
27869: PPUSH
27870: LD_VAR 0 5
27874: PPUSH
27875: CALL_OW 12
27879: ARRAY
27880: ST_TO_ADDR
// end ; if weapon then
27881: LD_VAR 0 18
27885: IFFALSE 27999
// begin tmp := CostOfWeapon ( weapon ) ;
27887: LD_ADDR_VAR 0 14
27891: PUSH
27892: LD_VAR 0 18
27896: PPUSH
27897: CALL_OW 451
27901: ST_TO_ADDR
// j := GetBase ( tower ) ;
27902: LD_ADDR_VAR 0 9
27906: PUSH
27907: LD_VAR 0 1
27911: PPUSH
27912: CALL_OW 274
27916: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27917: LD_VAR 0 9
27921: PPUSH
27922: LD_INT 1
27924: PPUSH
27925: CALL_OW 275
27929: PUSH
27930: LD_VAR 0 14
27934: PUSH
27935: LD_INT 1
27937: ARRAY
27938: GREATEREQUAL
27939: PUSH
27940: LD_VAR 0 9
27944: PPUSH
27945: LD_INT 2
27947: PPUSH
27948: CALL_OW 275
27952: PUSH
27953: LD_VAR 0 14
27957: PUSH
27958: LD_INT 2
27960: ARRAY
27961: GREATEREQUAL
27962: AND
27963: PUSH
27964: LD_VAR 0 9
27968: PPUSH
27969: LD_INT 3
27971: PPUSH
27972: CALL_OW 275
27976: PUSH
27977: LD_VAR 0 14
27981: PUSH
27982: LD_INT 3
27984: ARRAY
27985: GREATEREQUAL
27986: AND
27987: IFFALSE 27999
// result := weapon ;
27989: LD_ADDR_VAR 0 3
27993: PUSH
27994: LD_VAR 0 18
27998: ST_TO_ADDR
// end ; end ;
27999: LD_VAR 0 3
28003: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
// result := true ;
28008: LD_ADDR_VAR 0 3
28012: PUSH
28013: LD_INT 1
28015: ST_TO_ADDR
// if array1 = array2 then
28016: LD_VAR 0 1
28020: PUSH
28021: LD_VAR 0 2
28025: EQUAL
28026: IFFALSE 28086
// begin for i = 1 to array1 do
28028: LD_ADDR_VAR 0 4
28032: PUSH
28033: DOUBLE
28034: LD_INT 1
28036: DEC
28037: ST_TO_ADDR
28038: LD_VAR 0 1
28042: PUSH
28043: FOR_TO
28044: IFFALSE 28082
// if array1 [ i ] <> array2 [ i ] then
28046: LD_VAR 0 1
28050: PUSH
28051: LD_VAR 0 4
28055: ARRAY
28056: PUSH
28057: LD_VAR 0 2
28061: PUSH
28062: LD_VAR 0 4
28066: ARRAY
28067: NONEQUAL
28068: IFFALSE 28080
// begin result := false ;
28070: LD_ADDR_VAR 0 3
28074: PUSH
28075: LD_INT 0
28077: ST_TO_ADDR
// break ;
28078: GO 28082
// end ;
28080: GO 28043
28082: POP
28083: POP
// end else
28084: GO 28094
// result := false ;
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 0
28093: ST_TO_ADDR
// end ;
28094: LD_VAR 0 3
28098: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28099: LD_INT 0
28101: PPUSH
28102: PPUSH
// if not array1 or not array2 then
28103: LD_VAR 0 1
28107: NOT
28108: PUSH
28109: LD_VAR 0 2
28113: NOT
28114: OR
28115: IFFALSE 28119
// exit ;
28117: GO 28183
// result := true ;
28119: LD_ADDR_VAR 0 3
28123: PUSH
28124: LD_INT 1
28126: ST_TO_ADDR
// for i = 1 to array1 do
28127: LD_ADDR_VAR 0 4
28131: PUSH
28132: DOUBLE
28133: LD_INT 1
28135: DEC
28136: ST_TO_ADDR
28137: LD_VAR 0 1
28141: PUSH
28142: FOR_TO
28143: IFFALSE 28181
// if array1 [ i ] <> array2 [ i ] then
28145: LD_VAR 0 1
28149: PUSH
28150: LD_VAR 0 4
28154: ARRAY
28155: PUSH
28156: LD_VAR 0 2
28160: PUSH
28161: LD_VAR 0 4
28165: ARRAY
28166: NONEQUAL
28167: IFFALSE 28179
// begin result := false ;
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 0
28176: ST_TO_ADDR
// break ;
28177: GO 28181
// end ;
28179: GO 28142
28181: POP
28182: POP
// end ;
28183: LD_VAR 0 3
28187: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28188: LD_INT 0
28190: PPUSH
28191: PPUSH
28192: PPUSH
// pom := GetBase ( fac ) ;
28193: LD_ADDR_VAR 0 5
28197: PUSH
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 274
28207: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28208: LD_ADDR_VAR 0 4
28212: PUSH
28213: LD_VAR 0 2
28217: PUSH
28218: LD_INT 1
28220: ARRAY
28221: PPUSH
28222: LD_VAR 0 2
28226: PUSH
28227: LD_INT 2
28229: ARRAY
28230: PPUSH
28231: LD_VAR 0 2
28235: PUSH
28236: LD_INT 3
28238: ARRAY
28239: PPUSH
28240: LD_VAR 0 2
28244: PUSH
28245: LD_INT 4
28247: ARRAY
28248: PPUSH
28249: CALL_OW 449
28253: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_VAR 0 5
28263: PPUSH
28264: LD_INT 1
28266: PPUSH
28267: CALL_OW 275
28271: PUSH
28272: LD_VAR 0 4
28276: PUSH
28277: LD_INT 1
28279: ARRAY
28280: GREATEREQUAL
28281: PUSH
28282: LD_VAR 0 5
28286: PPUSH
28287: LD_INT 2
28289: PPUSH
28290: CALL_OW 275
28294: PUSH
28295: LD_VAR 0 4
28299: PUSH
28300: LD_INT 2
28302: ARRAY
28303: GREATEREQUAL
28304: AND
28305: PUSH
28306: LD_VAR 0 5
28310: PPUSH
28311: LD_INT 3
28313: PPUSH
28314: CALL_OW 275
28318: PUSH
28319: LD_VAR 0 4
28323: PUSH
28324: LD_INT 3
28326: ARRAY
28327: GREATEREQUAL
28328: AND
28329: ST_TO_ADDR
// end ;
28330: LD_VAR 0 3
28334: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28335: LD_INT 0
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
// pom := GetBase ( building ) ;
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 274
28355: ST_TO_ADDR
// if not pom then
28356: LD_VAR 0 3
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28535
// btype := GetBType ( building ) ;
28365: LD_ADDR_VAR 0 5
28369: PUSH
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 266
28379: ST_TO_ADDR
// if btype = b_armoury then
28380: LD_VAR 0 5
28384: PUSH
28385: LD_INT 4
28387: EQUAL
28388: IFFALSE 28398
// btype := b_barracks ;
28390: LD_ADDR_VAR 0 5
28394: PUSH
28395: LD_INT 5
28397: ST_TO_ADDR
// if btype = b_depot then
28398: LD_VAR 0 5
28402: PUSH
28403: LD_INT 0
28405: EQUAL
28406: IFFALSE 28416
// btype := b_warehouse ;
28408: LD_ADDR_VAR 0 5
28412: PUSH
28413: LD_INT 1
28415: ST_TO_ADDR
// if btype = b_workshop then
28416: LD_VAR 0 5
28420: PUSH
28421: LD_INT 2
28423: EQUAL
28424: IFFALSE 28434
// btype := b_factory ;
28426: LD_ADDR_VAR 0 5
28430: PUSH
28431: LD_INT 3
28433: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28434: LD_ADDR_VAR 0 4
28438: PUSH
28439: LD_VAR 0 5
28443: PPUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: CALL_OW 248
28453: PPUSH
28454: CALL_OW 450
28458: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28459: LD_ADDR_VAR 0 2
28463: PUSH
28464: LD_VAR 0 3
28468: PPUSH
28469: LD_INT 1
28471: PPUSH
28472: CALL_OW 275
28476: PUSH
28477: LD_VAR 0 4
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: GREATEREQUAL
28486: PUSH
28487: LD_VAR 0 3
28491: PPUSH
28492: LD_INT 2
28494: PPUSH
28495: CALL_OW 275
28499: PUSH
28500: LD_VAR 0 4
28504: PUSH
28505: LD_INT 2
28507: ARRAY
28508: GREATEREQUAL
28509: AND
28510: PUSH
28511: LD_VAR 0 3
28515: PPUSH
28516: LD_INT 3
28518: PPUSH
28519: CALL_OW 275
28523: PUSH
28524: LD_VAR 0 4
28528: PUSH
28529: LD_INT 3
28531: ARRAY
28532: GREATEREQUAL
28533: AND
28534: ST_TO_ADDR
// end ;
28535: LD_VAR 0 2
28539: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28540: LD_INT 0
28542: PPUSH
28543: PPUSH
28544: PPUSH
// pom := GetBase ( building ) ;
28545: LD_ADDR_VAR 0 4
28549: PUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 274
28559: ST_TO_ADDR
// if not pom then
28560: LD_VAR 0 4
28564: NOT
28565: IFFALSE 28569
// exit ;
28567: GO 28670
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28569: LD_ADDR_VAR 0 5
28573: PUSH
28574: LD_VAR 0 2
28578: PPUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 248
28588: PPUSH
28589: CALL_OW 450
28593: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28594: LD_ADDR_VAR 0 3
28598: PUSH
28599: LD_VAR 0 4
28603: PPUSH
28604: LD_INT 1
28606: PPUSH
28607: CALL_OW 275
28611: PUSH
28612: LD_VAR 0 5
28616: PUSH
28617: LD_INT 1
28619: ARRAY
28620: GREATEREQUAL
28621: PUSH
28622: LD_VAR 0 4
28626: PPUSH
28627: LD_INT 2
28629: PPUSH
28630: CALL_OW 275
28634: PUSH
28635: LD_VAR 0 5
28639: PUSH
28640: LD_INT 2
28642: ARRAY
28643: GREATEREQUAL
28644: AND
28645: PUSH
28646: LD_VAR 0 4
28650: PPUSH
28651: LD_INT 3
28653: PPUSH
28654: CALL_OW 275
28658: PUSH
28659: LD_VAR 0 5
28663: PUSH
28664: LD_INT 3
28666: ARRAY
28667: GREATEREQUAL
28668: AND
28669: ST_TO_ADDR
// end ;
28670: LD_VAR 0 3
28674: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28675: LD_INT 0
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
// result := false ;
28688: LD_ADDR_VAR 0 8
28692: PUSH
28693: LD_INT 0
28695: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28696: LD_VAR 0 5
28700: NOT
28701: PUSH
28702: LD_VAR 0 1
28706: NOT
28707: OR
28708: PUSH
28709: LD_VAR 0 2
28713: NOT
28714: OR
28715: PUSH
28716: LD_VAR 0 3
28720: NOT
28721: OR
28722: IFFALSE 28726
// exit ;
28724: GO 29540
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28726: LD_ADDR_VAR 0 14
28730: PUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_VAR 0 2
28740: PPUSH
28741: LD_VAR 0 3
28745: PPUSH
28746: LD_VAR 0 4
28750: PPUSH
28751: LD_VAR 0 5
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: CALL_OW 248
28764: PPUSH
28765: LD_INT 0
28767: PPUSH
28768: CALL 30793 0 6
28772: ST_TO_ADDR
// if not hexes then
28773: LD_VAR 0 14
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 29540
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28782: LD_ADDR_VAR 0 17
28786: PUSH
28787: LD_VAR 0 5
28791: PPUSH
28792: LD_INT 22
28794: PUSH
28795: LD_VAR 0 13
28799: PPUSH
28800: CALL_OW 255
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 72
28845: ST_TO_ADDR
// for i = 1 to hexes do
28846: LD_ADDR_VAR 0 9
28850: PUSH
28851: DOUBLE
28852: LD_INT 1
28854: DEC
28855: ST_TO_ADDR
28856: LD_VAR 0 14
28860: PUSH
28861: FOR_TO
28862: IFFALSE 29538
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28864: LD_ADDR_VAR 0 13
28868: PUSH
28869: LD_VAR 0 14
28873: PUSH
28874: LD_VAR 0 9
28878: ARRAY
28879: PUSH
28880: LD_INT 1
28882: ARRAY
28883: PPUSH
28884: LD_VAR 0 14
28888: PUSH
28889: LD_VAR 0 9
28893: ARRAY
28894: PUSH
28895: LD_INT 2
28897: ARRAY
28898: PPUSH
28899: CALL_OW 428
28903: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28904: LD_VAR 0 14
28908: PUSH
28909: LD_VAR 0 9
28913: ARRAY
28914: PUSH
28915: LD_INT 1
28917: ARRAY
28918: PPUSH
28919: LD_VAR 0 14
28923: PUSH
28924: LD_VAR 0 9
28928: ARRAY
28929: PUSH
28930: LD_INT 2
28932: ARRAY
28933: PPUSH
28934: CALL_OW 351
28938: PUSH
28939: LD_VAR 0 14
28943: PUSH
28944: LD_VAR 0 9
28948: ARRAY
28949: PUSH
28950: LD_INT 1
28952: ARRAY
28953: PPUSH
28954: LD_VAR 0 14
28958: PUSH
28959: LD_VAR 0 9
28963: ARRAY
28964: PUSH
28965: LD_INT 2
28967: ARRAY
28968: PPUSH
28969: CALL_OW 488
28973: NOT
28974: OR
28975: PUSH
28976: LD_VAR 0 13
28980: PPUSH
28981: CALL_OW 247
28985: PUSH
28986: LD_INT 3
28988: EQUAL
28989: OR
28990: IFFALSE 28996
// exit ;
28992: POP
28993: POP
28994: GO 29540
// if not tmp then
28996: LD_VAR 0 13
29000: NOT
29001: IFFALSE 29005
// continue ;
29003: GO 28861
// result := true ;
29005: LD_ADDR_VAR 0 8
29009: PUSH
29010: LD_INT 1
29012: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29013: LD_VAR 0 6
29017: PUSH
29018: LD_VAR 0 13
29022: PPUSH
29023: CALL_OW 247
29027: PUSH
29028: LD_INT 2
29030: EQUAL
29031: AND
29032: PUSH
29033: LD_VAR 0 13
29037: PPUSH
29038: CALL_OW 263
29042: PUSH
29043: LD_INT 1
29045: EQUAL
29046: AND
29047: IFFALSE 29211
// begin if IsDrivenBy ( tmp ) then
29049: LD_VAR 0 13
29053: PPUSH
29054: CALL_OW 311
29058: IFFALSE 29062
// continue ;
29060: GO 28861
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29062: LD_VAR 0 6
29066: PPUSH
29067: LD_INT 3
29069: PUSH
29070: LD_INT 60
29072: PUSH
29073: EMPTY
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: LD_INT 55
29085: PUSH
29086: EMPTY
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 72
29101: IFFALSE 29209
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29103: LD_ADDR_VAR 0 18
29107: PUSH
29108: LD_VAR 0 6
29112: PPUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 60
29118: PUSH
29119: EMPTY
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 3
29128: PUSH
29129: LD_INT 55
29131: PUSH
29132: EMPTY
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 72
29147: PUSH
29148: LD_INT 1
29150: ARRAY
29151: ST_TO_ADDR
// if IsInUnit ( driver ) then
29152: LD_VAR 0 18
29156: PPUSH
29157: CALL_OW 310
29161: IFFALSE 29172
// ComExit ( driver ) ;
29163: LD_VAR 0 18
29167: PPUSH
29168: CALL 54585 0 1
// AddComEnterUnit ( driver , tmp ) ;
29172: LD_VAR 0 18
29176: PPUSH
29177: LD_VAR 0 13
29181: PPUSH
29182: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29186: LD_VAR 0 18
29190: PPUSH
29191: LD_VAR 0 7
29195: PPUSH
29196: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29200: LD_VAR 0 18
29204: PPUSH
29205: CALL_OW 181
// end ; continue ;
29209: GO 28861
// end ; if not cleaners or not tmp in cleaners then
29211: LD_VAR 0 6
29215: NOT
29216: PUSH
29217: LD_VAR 0 13
29221: PUSH
29222: LD_VAR 0 6
29226: IN
29227: NOT
29228: OR
29229: IFFALSE 29536
// begin if dep then
29231: LD_VAR 0 17
29235: IFFALSE 29371
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29237: LD_ADDR_VAR 0 16
29241: PUSH
29242: LD_VAR 0 17
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: PPUSH
29251: CALL_OW 250
29255: PPUSH
29256: LD_VAR 0 17
29260: PUSH
29261: LD_INT 1
29263: ARRAY
29264: PPUSH
29265: CALL_OW 254
29269: PPUSH
29270: LD_INT 5
29272: PPUSH
29273: CALL_OW 272
29277: PUSH
29278: LD_VAR 0 17
29282: PUSH
29283: LD_INT 1
29285: ARRAY
29286: PPUSH
29287: CALL_OW 251
29291: PPUSH
29292: LD_VAR 0 17
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: CALL_OW 254
29305: PPUSH
29306: LD_INT 5
29308: PPUSH
29309: CALL_OW 273
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29318: LD_VAR 0 16
29322: PUSH
29323: LD_INT 1
29325: ARRAY
29326: PPUSH
29327: LD_VAR 0 16
29331: PUSH
29332: LD_INT 2
29334: ARRAY
29335: PPUSH
29336: CALL_OW 488
29340: IFFALSE 29371
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29342: LD_VAR 0 13
29346: PPUSH
29347: LD_VAR 0 16
29351: PUSH
29352: LD_INT 1
29354: ARRAY
29355: PPUSH
29356: LD_VAR 0 16
29360: PUSH
29361: LD_INT 2
29363: ARRAY
29364: PPUSH
29365: CALL_OW 111
// continue ;
29369: GO 28861
// end ; end ; r := GetDir ( tmp ) ;
29371: LD_ADDR_VAR 0 15
29375: PUSH
29376: LD_VAR 0 13
29380: PPUSH
29381: CALL_OW 254
29385: ST_TO_ADDR
// if r = 5 then
29386: LD_VAR 0 15
29390: PUSH
29391: LD_INT 5
29393: EQUAL
29394: IFFALSE 29404
// r := 0 ;
29396: LD_ADDR_VAR 0 15
29400: PUSH
29401: LD_INT 0
29403: ST_TO_ADDR
// for j = r to 5 do
29404: LD_ADDR_VAR 0 10
29408: PUSH
29409: DOUBLE
29410: LD_VAR 0 15
29414: DEC
29415: ST_TO_ADDR
29416: LD_INT 5
29418: PUSH
29419: FOR_TO
29420: IFFALSE 29534
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29422: LD_ADDR_VAR 0 11
29426: PUSH
29427: LD_VAR 0 13
29431: PPUSH
29432: CALL_OW 250
29436: PPUSH
29437: LD_VAR 0 10
29441: PPUSH
29442: LD_INT 2
29444: PPUSH
29445: CALL_OW 272
29449: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29450: LD_ADDR_VAR 0 12
29454: PUSH
29455: LD_VAR 0 13
29459: PPUSH
29460: CALL_OW 251
29464: PPUSH
29465: LD_VAR 0 10
29469: PPUSH
29470: LD_INT 2
29472: PPUSH
29473: CALL_OW 273
29477: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29478: LD_VAR 0 11
29482: PPUSH
29483: LD_VAR 0 12
29487: PPUSH
29488: CALL_OW 488
29492: PUSH
29493: LD_VAR 0 11
29497: PPUSH
29498: LD_VAR 0 12
29502: PPUSH
29503: CALL_OW 428
29507: NOT
29508: AND
29509: IFFALSE 29532
// begin ComMoveXY ( tmp , _x , _y ) ;
29511: LD_VAR 0 13
29515: PPUSH
29516: LD_VAR 0 11
29520: PPUSH
29521: LD_VAR 0 12
29525: PPUSH
29526: CALL_OW 111
// break ;
29530: GO 29534
// end ; end ;
29532: GO 29419
29534: POP
29535: POP
// end ; end ;
29536: GO 28861
29538: POP
29539: POP
// end ;
29540: LD_VAR 0 8
29544: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29545: LD_INT 0
29547: PPUSH
// result := true ;
29548: LD_ADDR_VAR 0 3
29552: PUSH
29553: LD_INT 1
29555: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29556: LD_VAR 0 2
29560: PUSH
29561: LD_INT 24
29563: DOUBLE
29564: EQUAL
29565: IFTRUE 29575
29567: LD_INT 33
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29600
29575: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 32
29583: PPUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 321
29593: PUSH
29594: LD_INT 2
29596: EQUAL
29597: ST_TO_ADDR
29598: GO 29916
29600: LD_INT 20
29602: DOUBLE
29603: EQUAL
29604: IFTRUE 29608
29606: GO 29633
29608: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29609: LD_ADDR_VAR 0 3
29613: PUSH
29614: LD_INT 6
29616: PPUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 321
29626: PUSH
29627: LD_INT 2
29629: EQUAL
29630: ST_TO_ADDR
29631: GO 29916
29633: LD_INT 22
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29647
29639: LD_INT 36
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29647
29645: GO 29672
29647: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_INT 15
29655: PPUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 321
29665: PUSH
29666: LD_INT 2
29668: EQUAL
29669: ST_TO_ADDR
29670: GO 29916
29672: LD_INT 30
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29705
29680: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29681: LD_ADDR_VAR 0 3
29685: PUSH
29686: LD_INT 20
29688: PPUSH
29689: LD_VAR 0 1
29693: PPUSH
29694: CALL_OW 321
29698: PUSH
29699: LD_INT 2
29701: EQUAL
29702: ST_TO_ADDR
29703: GO 29916
29705: LD_INT 28
29707: DOUBLE
29708: EQUAL
29709: IFTRUE 29719
29711: LD_INT 21
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29744
29719: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29720: LD_ADDR_VAR 0 3
29724: PUSH
29725: LD_INT 21
29727: PPUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 321
29737: PUSH
29738: LD_INT 2
29740: EQUAL
29741: ST_TO_ADDR
29742: GO 29916
29744: LD_INT 16
29746: DOUBLE
29747: EQUAL
29748: IFTRUE 29752
29750: GO 29777
29752: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29753: LD_ADDR_VAR 0 3
29757: PUSH
29758: LD_INT 84
29760: PPUSH
29761: LD_VAR 0 1
29765: PPUSH
29766: CALL_OW 321
29770: PUSH
29771: LD_INT 2
29773: EQUAL
29774: ST_TO_ADDR
29775: GO 29916
29777: LD_INT 19
29779: DOUBLE
29780: EQUAL
29781: IFTRUE 29791
29783: LD_INT 23
29785: DOUBLE
29786: EQUAL
29787: IFTRUE 29791
29789: GO 29816
29791: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29792: LD_ADDR_VAR 0 3
29796: PUSH
29797: LD_INT 83
29799: PPUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 321
29809: PUSH
29810: LD_INT 2
29812: EQUAL
29813: ST_TO_ADDR
29814: GO 29916
29816: LD_INT 17
29818: DOUBLE
29819: EQUAL
29820: IFTRUE 29824
29822: GO 29849
29824: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29825: LD_ADDR_VAR 0 3
29829: PUSH
29830: LD_INT 39
29832: PPUSH
29833: LD_VAR 0 1
29837: PPUSH
29838: CALL_OW 321
29842: PUSH
29843: LD_INT 2
29845: EQUAL
29846: ST_TO_ADDR
29847: GO 29916
29849: LD_INT 18
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29882
29857: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29858: LD_ADDR_VAR 0 3
29862: PUSH
29863: LD_INT 40
29865: PPUSH
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 321
29875: PUSH
29876: LD_INT 2
29878: EQUAL
29879: ST_TO_ADDR
29880: GO 29916
29882: LD_INT 27
29884: DOUBLE
29885: EQUAL
29886: IFTRUE 29890
29888: GO 29915
29890: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: LD_INT 35
29898: PPUSH
29899: LD_VAR 0 1
29903: PPUSH
29904: CALL_OW 321
29908: PUSH
29909: LD_INT 2
29911: EQUAL
29912: ST_TO_ADDR
29913: GO 29916
29915: POP
// end ;
29916: LD_VAR 0 3
29920: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29921: LD_INT 0
29923: PPUSH
29924: PPUSH
29925: PPUSH
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
29933: PPUSH
// result := false ;
29934: LD_ADDR_VAR 0 6
29938: PUSH
29939: LD_INT 0
29941: ST_TO_ADDR
// if btype = b_depot then
29942: LD_VAR 0 2
29946: PUSH
29947: LD_INT 0
29949: EQUAL
29950: IFFALSE 29962
// begin result := true ;
29952: LD_ADDR_VAR 0 6
29956: PUSH
29957: LD_INT 1
29959: ST_TO_ADDR
// exit ;
29960: GO 30788
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29962: LD_VAR 0 1
29966: NOT
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 266
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: IN
29988: NOT
29989: OR
29990: PUSH
29991: LD_VAR 0 2
29995: NOT
29996: OR
29997: PUSH
29998: LD_VAR 0 5
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: LD_INT 5
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: IN
30029: NOT
30030: OR
30031: PUSH
30032: LD_VAR 0 3
30036: PPUSH
30037: LD_VAR 0 4
30041: PPUSH
30042: CALL_OW 488
30046: NOT
30047: OR
30048: IFFALSE 30052
// exit ;
30050: GO 30788
// side := GetSide ( depot ) ;
30052: LD_ADDR_VAR 0 9
30056: PUSH
30057: LD_VAR 0 1
30061: PPUSH
30062: CALL_OW 255
30066: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30067: LD_VAR 0 9
30071: PPUSH
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL 29545 0 2
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30788
// pom := GetBase ( depot ) ;
30086: LD_ADDR_VAR 0 10
30090: PUSH
30091: LD_VAR 0 1
30095: PPUSH
30096: CALL_OW 274
30100: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30101: LD_ADDR_VAR 0 11
30105: PUSH
30106: LD_VAR 0 2
30110: PPUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 248
30120: PPUSH
30121: CALL_OW 450
30125: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30126: LD_VAR 0 10
30130: PPUSH
30131: LD_INT 1
30133: PPUSH
30134: CALL_OW 275
30138: PUSH
30139: LD_VAR 0 11
30143: PUSH
30144: LD_INT 1
30146: ARRAY
30147: GREATEREQUAL
30148: PUSH
30149: LD_VAR 0 10
30153: PPUSH
30154: LD_INT 2
30156: PPUSH
30157: CALL_OW 275
30161: PUSH
30162: LD_VAR 0 11
30166: PUSH
30167: LD_INT 2
30169: ARRAY
30170: GREATEREQUAL
30171: AND
30172: PUSH
30173: LD_VAR 0 10
30177: PPUSH
30178: LD_INT 3
30180: PPUSH
30181: CALL_OW 275
30185: PUSH
30186: LD_VAR 0 11
30190: PUSH
30191: LD_INT 3
30193: ARRAY
30194: GREATEREQUAL
30195: AND
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30788
// if GetBType ( depot ) = b_depot then
30201: LD_VAR 0 1
30205: PPUSH
30206: CALL_OW 266
30210: PUSH
30211: LD_INT 0
30213: EQUAL
30214: IFFALSE 30226
// dist := 28 else
30216: LD_ADDR_VAR 0 14
30220: PUSH
30221: LD_INT 28
30223: ST_TO_ADDR
30224: GO 30234
// dist := 36 ;
30226: LD_ADDR_VAR 0 14
30230: PUSH
30231: LD_INT 36
30233: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30234: LD_VAR 0 1
30238: PPUSH
30239: LD_VAR 0 3
30243: PPUSH
30244: LD_VAR 0 4
30248: PPUSH
30249: CALL_OW 297
30253: PUSH
30254: LD_VAR 0 14
30258: GREATER
30259: IFFALSE 30263
// exit ;
30261: GO 30788
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30263: LD_ADDR_VAR 0 12
30267: PUSH
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_VAR 0 3
30277: PPUSH
30278: LD_VAR 0 4
30282: PPUSH
30283: LD_VAR 0 5
30287: PPUSH
30288: LD_VAR 0 1
30292: PPUSH
30293: CALL_OW 248
30297: PPUSH
30298: LD_INT 0
30300: PPUSH
30301: CALL 30793 0 6
30305: ST_TO_ADDR
// if not hexes then
30306: LD_VAR 0 12
30310: NOT
30311: IFFALSE 30315
// exit ;
30313: GO 30788
// hex := GetHexInfo ( x , y ) ;
30315: LD_ADDR_VAR 0 15
30319: PUSH
30320: LD_VAR 0 3
30324: PPUSH
30325: LD_VAR 0 4
30329: PPUSH
30330: CALL_OW 546
30334: ST_TO_ADDR
// if hex [ 1 ] then
30335: LD_VAR 0 15
30339: PUSH
30340: LD_INT 1
30342: ARRAY
30343: IFFALSE 30347
// exit ;
30345: GO 30788
// height := hex [ 2 ] ;
30347: LD_ADDR_VAR 0 13
30351: PUSH
30352: LD_VAR 0 15
30356: PUSH
30357: LD_INT 2
30359: ARRAY
30360: ST_TO_ADDR
// for i = 1 to hexes do
30361: LD_ADDR_VAR 0 7
30365: PUSH
30366: DOUBLE
30367: LD_INT 1
30369: DEC
30370: ST_TO_ADDR
30371: LD_VAR 0 12
30375: PUSH
30376: FOR_TO
30377: IFFALSE 30707
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30379: LD_VAR 0 12
30383: PUSH
30384: LD_VAR 0 7
30388: ARRAY
30389: PUSH
30390: LD_INT 1
30392: ARRAY
30393: PPUSH
30394: LD_VAR 0 12
30398: PUSH
30399: LD_VAR 0 7
30403: ARRAY
30404: PUSH
30405: LD_INT 2
30407: ARRAY
30408: PPUSH
30409: CALL_OW 488
30413: NOT
30414: PUSH
30415: LD_VAR 0 12
30419: PUSH
30420: LD_VAR 0 7
30424: ARRAY
30425: PUSH
30426: LD_INT 1
30428: ARRAY
30429: PPUSH
30430: LD_VAR 0 12
30434: PUSH
30435: LD_VAR 0 7
30439: ARRAY
30440: PUSH
30441: LD_INT 2
30443: ARRAY
30444: PPUSH
30445: CALL_OW 428
30449: PUSH
30450: LD_INT 0
30452: GREATER
30453: OR
30454: PUSH
30455: LD_VAR 0 12
30459: PUSH
30460: LD_VAR 0 7
30464: ARRAY
30465: PUSH
30466: LD_INT 1
30468: ARRAY
30469: PPUSH
30470: LD_VAR 0 12
30474: PUSH
30475: LD_VAR 0 7
30479: ARRAY
30480: PUSH
30481: LD_INT 2
30483: ARRAY
30484: PPUSH
30485: CALL_OW 351
30489: OR
30490: IFFALSE 30496
// exit ;
30492: POP
30493: POP
30494: GO 30788
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30496: LD_ADDR_VAR 0 8
30500: PUSH
30501: LD_VAR 0 12
30505: PUSH
30506: LD_VAR 0 7
30510: ARRAY
30511: PUSH
30512: LD_INT 1
30514: ARRAY
30515: PPUSH
30516: LD_VAR 0 12
30520: PUSH
30521: LD_VAR 0 7
30525: ARRAY
30526: PUSH
30527: LD_INT 2
30529: ARRAY
30530: PPUSH
30531: CALL_OW 546
30535: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30536: LD_VAR 0 8
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PUSH
30545: LD_VAR 0 8
30549: PUSH
30550: LD_INT 2
30552: ARRAY
30553: PUSH
30554: LD_VAR 0 13
30558: PUSH
30559: LD_INT 2
30561: PLUS
30562: GREATER
30563: OR
30564: PUSH
30565: LD_VAR 0 8
30569: PUSH
30570: LD_INT 2
30572: ARRAY
30573: PUSH
30574: LD_VAR 0 13
30578: PUSH
30579: LD_INT 2
30581: MINUS
30582: LESS
30583: OR
30584: PUSH
30585: LD_VAR 0 8
30589: PUSH
30590: LD_INT 3
30592: ARRAY
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 8
30599: PUSH
30600: LD_INT 9
30602: PUSH
30603: LD_INT 10
30605: PUSH
30606: LD_INT 11
30608: PUSH
30609: LD_INT 12
30611: PUSH
30612: LD_INT 13
30614: PUSH
30615: LD_INT 16
30617: PUSH
30618: LD_INT 17
30620: PUSH
30621: LD_INT 18
30623: PUSH
30624: LD_INT 19
30626: PUSH
30627: LD_INT 20
30629: PUSH
30630: LD_INT 21
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: IN
30648: NOT
30649: OR
30650: PUSH
30651: LD_VAR 0 8
30655: PUSH
30656: LD_INT 5
30658: ARRAY
30659: NOT
30660: OR
30661: PUSH
30662: LD_VAR 0 8
30666: PUSH
30667: LD_INT 6
30669: ARRAY
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: LD_INT 7
30679: PUSH
30680: LD_INT 9
30682: PUSH
30683: LD_INT 10
30685: PUSH
30686: LD_INT 11
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: IN
30697: NOT
30698: OR
30699: IFFALSE 30705
// exit ;
30701: POP
30702: POP
30703: GO 30788
// end ;
30705: GO 30376
30707: POP
30708: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30709: LD_VAR 0 9
30713: PPUSH
30714: LD_VAR 0 3
30718: PPUSH
30719: LD_VAR 0 4
30723: PPUSH
30724: LD_INT 20
30726: PPUSH
30727: CALL 22711 0 4
30731: PUSH
30732: LD_INT 4
30734: ARRAY
30735: IFFALSE 30739
// exit ;
30737: GO 30788
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30739: LD_VAR 0 2
30743: PUSH
30744: LD_INT 29
30746: PUSH
30747: LD_INT 30
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: IN
30754: PUSH
30755: LD_VAR 0 3
30759: PPUSH
30760: LD_VAR 0 4
30764: PPUSH
30765: LD_VAR 0 9
30769: PPUSH
30770: CALL_OW 440
30774: NOT
30775: AND
30776: IFFALSE 30780
// exit ;
30778: GO 30788
// result := true ;
30780: LD_ADDR_VAR 0 6
30784: PUSH
30785: LD_INT 1
30787: ST_TO_ADDR
// end ;
30788: LD_VAR 0 6
30792: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30793: LD_INT 0
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
30807: PPUSH
30808: PPUSH
30809: PPUSH
30810: PPUSH
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
30819: PPUSH
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
// result = [ ] ;
30853: LD_ADDR_VAR 0 7
30857: PUSH
30858: EMPTY
30859: ST_TO_ADDR
// temp_list = [ ] ;
30860: LD_ADDR_VAR 0 9
30864: PUSH
30865: EMPTY
30866: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30867: LD_VAR 0 4
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: LD_INT 5
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: IN
30898: NOT
30899: PUSH
30900: LD_VAR 0 1
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: IN
30915: PUSH
30916: LD_VAR 0 5
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: IN
30935: NOT
30936: AND
30937: OR
30938: IFFALSE 30942
// exit ;
30940: GO 49333
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30942: LD_VAR 0 1
30946: PUSH
30947: LD_INT 6
30949: PUSH
30950: LD_INT 7
30952: PUSH
30953: LD_INT 8
30955: PUSH
30956: LD_INT 13
30958: PUSH
30959: LD_INT 12
30961: PUSH
30962: LD_INT 15
30964: PUSH
30965: LD_INT 11
30967: PUSH
30968: LD_INT 14
30970: PUSH
30971: LD_INT 10
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: IN
30985: IFFALSE 30995
// btype = b_lab ;
30987: LD_ADDR_VAR 0 1
30991: PUSH
30992: LD_INT 6
30994: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30995: LD_VAR 0 6
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: IN
31014: NOT
31015: PUSH
31016: LD_VAR 0 1
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: LD_INT 6
31035: PUSH
31036: LD_INT 36
31038: PUSH
31039: LD_INT 4
31041: PUSH
31042: LD_INT 5
31044: PUSH
31045: LD_INT 31
31047: PUSH
31048: LD_INT 32
31050: PUSH
31051: LD_INT 33
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: IN
31067: NOT
31068: PUSH
31069: LD_VAR 0 6
31073: PUSH
31074: LD_INT 1
31076: EQUAL
31077: AND
31078: OR
31079: PUSH
31080: LD_VAR 0 1
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: IN
31095: NOT
31096: PUSH
31097: LD_VAR 0 6
31101: PUSH
31102: LD_INT 2
31104: EQUAL
31105: AND
31106: OR
31107: IFFALSE 31117
// mode = 0 ;
31109: LD_ADDR_VAR 0 6
31113: PUSH
31114: LD_INT 0
31116: ST_TO_ADDR
// case mode of 0 :
31117: LD_VAR 0 6
31121: PUSH
31122: LD_INT 0
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 42583
31130: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31131: LD_ADDR_VAR 0 11
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: LD_INT 2
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31324: LD_ADDR_VAR 0 12
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: NEG
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 3
31492: NEG
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31520: LD_ADDR_VAR 0 13
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 3
31679: NEG
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 3
31691: NEG
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31719: LD_ADDR_VAR 0 14
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 3
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31915: LD_ADDR_VAR 0 15
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32108: LD_ADDR_VAR 0 16
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 1
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: NEG
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32301: LD_ADDR_VAR 0 17
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: LD_INT 2
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32531: LD_ADDR_VAR 0 18
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32761: LD_ADDR_VAR 0 19
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32991: LD_ADDR_VAR 0 20
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33221: LD_ADDR_VAR 0 21
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33451: LD_ADDR_VAR 0 22
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: NEG
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33681: LD_ADDR_VAR 0 23
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: LD_INT 3
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 2
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33961: LD_ADDR_VAR 0 24
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 2
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: NEG
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 3
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34237: LD_ADDR_VAR 0 25
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: LD_INT 2
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34511: LD_ADDR_VAR 0 26
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34787: LD_ADDR_VAR 0 27
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 2
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: LD_INT 2
34990: NEG
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 3
35020: NEG
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: NEG
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35067: LD_ADDR_VAR 0 28
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 2
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: LD_INT 3
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 3
35302: NEG
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 3
35314: NEG
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35349: LD_ADDR_VAR 0 29
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: LD_INT 2
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 2
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: LD_INT 3
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: NEG
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35628: LD_ADDR_VAR 0 30
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 2
35860: NEG
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 3
35871: NEG
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35906: LD_ADDR_VAR 0 31
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: LD_INT 2
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 2
36083: NEG
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 2
36095: NEG
36096: PUSH
36097: LD_INT 3
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 3
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 3
36149: NEG
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36184: LD_ADDR_VAR 0 32
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: LD_INT 3
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 3
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 3
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 3
36427: NEG
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36462: LD_ADDR_VAR 0 33
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: NEG
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: LD_INT 3
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 3
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 3
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 3
36706: NEG
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36741: LD_ADDR_VAR 0 34
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 2
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 3
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: LD_INT 3
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 3
36986: NEG
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37021: LD_ADDR_VAR 0 35
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37133: LD_ADDR_VAR 0 36
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37245: LD_ADDR_VAR 0 37
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37357: LD_ADDR_VAR 0 38
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37469: LD_ADDR_VAR 0 39
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37581: LD_ADDR_VAR 0 40
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37693: LD_ADDR_VAR 0 41
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: NEG
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: LD_INT 3
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 3
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 3
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 3
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 3
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 3
37967: NEG
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: NEG
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 3
37990: NEG
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 3
38002: NEG
38003: PUSH
38004: LD_INT 3
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38043: LD_ADDR_VAR 0 42
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: LD_INT 2
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: NEG
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 3
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 3
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 3
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: NEG
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: LD_INT 3
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38393: LD_ADDR_VAR 0 43
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: LD_INT 2
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 3
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 3
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 3
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 3
38689: NEG
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38741: LD_ADDR_VAR 0 44
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 3
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 3
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 3
39015: NEG
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 3
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 3
39038: NEG
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: NEG
39051: PUSH
39052: LD_INT 3
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39091: LD_ADDR_VAR 0 45
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: LD_INT 3
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 3
39388: NEG
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 3
39400: NEG
39401: PUSH
39402: LD_INT 3
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39441: LD_ADDR_VAR 0 46
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 3
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 3
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 3
39737: NEG
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 3
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39789: LD_ADDR_VAR 0 47
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39940: LD_ADDR_VAR 0 48
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40087: LD_ADDR_VAR 0 49
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40231: LD_ADDR_VAR 0 50
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40375: LD_ADDR_VAR 0 51
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40522: LD_ADDR_VAR 0 52
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40673: LD_ADDR_VAR 0 53
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40903: LD_ADDR_VAR 0 54
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41133: LD_ADDR_VAR 0 55
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41363: LD_ADDR_VAR 0 56
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41593: LD_ADDR_VAR 0 57
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41823: LD_ADDR_VAR 0 58
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42053: LD_ADDR_VAR 0 59
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42141: LD_ADDR_VAR 0 60
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42229: LD_ADDR_VAR 0 61
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42317: LD_ADDR_VAR 0 62
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42405: LD_ADDR_VAR 0 63
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42493: LD_ADDR_VAR 0 64
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// end ; 1 :
42581: GO 48478
42583: LD_INT 1
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42591
42589: GO 45214
42591: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42592: LD_ADDR_VAR 0 11
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 3
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42636: LD_ADDR_VAR 0 12
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 3
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42677: LD_ADDR_VAR 0 13
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42717: LD_ADDR_VAR 0 14
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 3
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42758: LD_ADDR_VAR 0 15
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: NEG
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42802: LD_ADDR_VAR 0 16
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42848: LD_ADDR_VAR 0 17
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 3
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 3
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42892: LD_ADDR_VAR 0 18
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42933: LD_ADDR_VAR 0 19
42937: PUSH
42938: LD_INT 3
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: LD_INT 3
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 3
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42973: LD_ADDR_VAR 0 20
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 3
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43014: LD_ADDR_VAR 0 21
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43058: LD_ADDR_VAR 0 22
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: NEG
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43104: LD_ADDR_VAR 0 23
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 3
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 4
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 3
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43148: LD_ADDR_VAR 0 24
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43189: LD_ADDR_VAR 0 25
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 4
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 4
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43229: LD_ADDR_VAR 0 26
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 4
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43270: LD_ADDR_VAR 0 27
43274: PUSH
43275: LD_INT 3
43277: NEG
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 3
43288: NEG
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 4
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43314: LD_ADDR_VAR 0 28
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 3
43333: NEG
43334: PUSH
43335: LD_INT 4
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 4
43345: NEG
43346: PUSH
43347: LD_INT 3
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43360: LD_ADDR_VAR 0 29
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 3
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 4
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 4
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 3
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: LD_INT 5
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 5
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 4
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 6
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 6
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 5
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43515: LD_ADDR_VAR 0 30
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 4
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 4
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 4
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 5
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 5
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 5
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 6
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 6
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43658: LD_ADDR_VAR 0 31
43662: PUSH
43663: LD_INT 3
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 4
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 4
43705: PUSH
43706: LD_INT 4
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: LD_INT 4
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 5
43725: PUSH
43726: LD_INT 4
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 5
43735: PUSH
43736: LD_INT 5
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: LD_INT 5
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 6
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 6
43765: PUSH
43766: LD_INT 6
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 5
43775: PUSH
43776: LD_INT 6
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43797: LD_ADDR_VAR 0 32
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 4
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 4
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 5
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 5
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 4
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 6
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 6
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 5
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43940: LD_ADDR_VAR 0 33
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 4
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 4
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 4
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 5
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 5
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 5
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 6
44060: NEG
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 6
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44095: LD_ADDR_VAR 0 34
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 3
44114: NEG
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: NEG
44127: PUSH
44128: LD_INT 3
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 3
44138: NEG
44139: PUSH
44140: LD_INT 4
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 4
44150: NEG
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 4
44162: NEG
44163: PUSH
44164: LD_INT 4
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 4
44174: NEG
44175: PUSH
44176: LD_INT 5
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 5
44186: NEG
44187: PUSH
44188: LD_INT 4
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 5
44198: NEG
44199: PUSH
44200: LD_INT 5
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 5
44210: NEG
44211: PUSH
44212: LD_INT 6
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 6
44222: NEG
44223: PUSH
44224: LD_INT 5
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 6
44234: NEG
44235: PUSH
44236: LD_INT 6
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44258: LD_ADDR_VAR 0 41
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 3
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44302: LD_ADDR_VAR 0 42
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44343: LD_ADDR_VAR 0 43
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44383: LD_ADDR_VAR 0 44
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44424: LD_ADDR_VAR 0 45
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44468: LD_ADDR_VAR 0 46
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44514: LD_ADDR_VAR 0 47
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 3
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 3
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44547: LD_ADDR_VAR 0 48
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44578: LD_ADDR_VAR 0 49
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44607: LD_ADDR_VAR 0 50
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 3
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44636: LD_ADDR_VAR 0 51
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44667: LD_ADDR_VAR 0 52
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44700: LD_ADDR_VAR 0 53
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 3
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 3
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44744: LD_ADDR_VAR 0 54
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44785: LD_ADDR_VAR 0 55
44789: PUSH
44790: LD_INT 3
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44825: LD_ADDR_VAR 0 56
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44866: LD_ADDR_VAR 0 57
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44910: LD_ADDR_VAR 0 58
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 3
44929: NEG
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44956: LD_ADDR_VAR 0 59
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45000: LD_ADDR_VAR 0 60
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45041: LD_ADDR_VAR 0 61
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45081: LD_ADDR_VAR 0 62
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45122: LD_ADDR_VAR 0 63
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45166: LD_ADDR_VAR 0 64
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// end ; 2 :
45212: GO 48478
45214: LD_INT 2
45216: DOUBLE
45217: EQUAL
45218: IFTRUE 45222
45220: GO 48477
45222: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45223: LD_ADDR_VAR 0 29
45227: PUSH
45228: LD_INT 4
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 4
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 5
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 5
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 5
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 4
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 4
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 4
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 4
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 5
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 5
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 4
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 5
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 4
45562: NEG
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 4
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 4
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 4
45608: NEG
45609: PUSH
45610: LD_INT 4
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 4
45620: NEG
45621: PUSH
45622: LD_INT 5
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: LD_INT 4
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 3
45644: NEG
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 5
45668: NEG
45669: PUSH
45670: LD_INT 4
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 5
45680: NEG
45681: PUSH
45682: LD_INT 5
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: LD_INT 5
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 5
45704: NEG
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45761: LD_ADDR_VAR 0 30
45765: PUSH
45766: LD_INT 4
45768: PUSH
45769: LD_INT 4
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 4
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 5
45788: PUSH
45789: LD_INT 4
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 5
45798: PUSH
45799: LD_INT 5
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 4
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: LD_INT 4
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 3
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 4
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 3
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 4
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 4
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 4
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 4
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 5
46007: NEG
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 5
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 5
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: LD_INT 3
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 4
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 3
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 4
46113: NEG
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: LD_INT 4
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 4
46149: NEG
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 4
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 5
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 4
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 3
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 5
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 5
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46308: LD_ADDR_VAR 0 31
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 4
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 4
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 5
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 5
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 5
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 3
46419: NEG
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 4
46464: NEG
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 4
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 4
46487: NEG
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 4
46510: NEG
46511: PUSH
46512: LD_INT 4
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 4
46522: NEG
46523: PUSH
46524: LD_INT 5
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: NEG
46535: PUSH
46536: LD_INT 4
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 4
46558: NEG
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 5
46570: NEG
46571: PUSH
46572: LD_INT 4
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 5
46582: NEG
46583: PUSH
46584: LD_INT 5
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 5
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 5
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 3
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 4
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 4
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 4
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 4
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 4
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 5
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 5
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 5
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46858: LD_ADDR_VAR 0 32
46862: PUSH
46863: LD_INT 4
46865: NEG
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 4
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 5
46921: NEG
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 5
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 5
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 4
47027: NEG
47028: PUSH
47029: LD_INT 3
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 4
47039: NEG
47040: PUSH
47041: LD_INT 4
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 4
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 4
47063: NEG
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 4
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 5
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 4
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 3
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 4
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 5
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 5
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 4
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 4
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 4
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 4
47270: PUSH
47271: LD_INT 4
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 4
47280: PUSH
47281: LD_INT 3
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 5
47290: PUSH
47291: LD_INT 4
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 5
47300: PUSH
47301: LD_INT 5
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 4
47310: PUSH
47311: LD_INT 5
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: LD_INT 4
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 5
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 5
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47405: LD_ADDR_VAR 0 33
47409: PUSH
47410: LD_INT 4
47412: NEG
47413: PUSH
47414: LD_INT 4
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: NEG
47425: PUSH
47426: LD_INT 5
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: NEG
47437: PUSH
47438: LD_INT 4
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: NEG
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 4
47460: NEG
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 5
47472: NEG
47473: PUSH
47474: LD_INT 4
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 5
47484: NEG
47485: PUSH
47486: LD_INT 5
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 3
47496: NEG
47497: PUSH
47498: LD_INT 5
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 5
47508: NEG
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 4
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 3
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 4
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 4
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 4
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 4
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 5
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 5
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 5
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 4
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 4
47745: PUSH
47746: LD_INT 4
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: LD_INT 4
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 4
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 4
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 4
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 4
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 5
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47943: LD_ADDR_VAR 0 34
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 4
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 5
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 4
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 3
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 4
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 5
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 5
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 4
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 4
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 4
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 4
48145: PUSH
48146: LD_INT 4
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 4
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 5
48165: PUSH
48166: LD_INT 4
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 5
48175: PUSH
48176: LD_INT 5
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 4
48185: PUSH
48186: LD_INT 5
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 4
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: LD_INT 5
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 4
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 4
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 4
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 4
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 4
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: NEG
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: NEG
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 5
48384: NEG
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 5
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 5
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
// end ; end ;
48475: GO 48478
48477: POP
// case btype of b_depot , b_warehouse :
48478: LD_VAR 0 1
48482: PUSH
48483: LD_INT 0
48485: DOUBLE
48486: EQUAL
48487: IFTRUE 48497
48489: LD_INT 1
48491: DOUBLE
48492: EQUAL
48493: IFTRUE 48497
48495: GO 48698
48497: POP
// case nation of nation_american :
48498: LD_VAR 0 5
48502: PUSH
48503: LD_INT 1
48505: DOUBLE
48506: EQUAL
48507: IFTRUE 48511
48509: GO 48567
48511: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48512: LD_ADDR_VAR 0 9
48516: PUSH
48517: LD_VAR 0 11
48521: PUSH
48522: LD_VAR 0 12
48526: PUSH
48527: LD_VAR 0 13
48531: PUSH
48532: LD_VAR 0 14
48536: PUSH
48537: LD_VAR 0 15
48541: PUSH
48542: LD_VAR 0 16
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: PUSH
48555: LD_VAR 0 4
48559: PUSH
48560: LD_INT 1
48562: PLUS
48563: ARRAY
48564: ST_TO_ADDR
48565: GO 48696
48567: LD_INT 2
48569: DOUBLE
48570: EQUAL
48571: IFTRUE 48575
48573: GO 48631
48575: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_VAR 0 17
48585: PUSH
48586: LD_VAR 0 18
48590: PUSH
48591: LD_VAR 0 19
48595: PUSH
48596: LD_VAR 0 20
48600: PUSH
48601: LD_VAR 0 21
48605: PUSH
48606: LD_VAR 0 22
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: PUSH
48619: LD_VAR 0 4
48623: PUSH
48624: LD_INT 1
48626: PLUS
48627: ARRAY
48628: ST_TO_ADDR
48629: GO 48696
48631: LD_INT 3
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48639
48637: GO 48695
48639: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48640: LD_ADDR_VAR 0 9
48644: PUSH
48645: LD_VAR 0 23
48649: PUSH
48650: LD_VAR 0 24
48654: PUSH
48655: LD_VAR 0 25
48659: PUSH
48660: LD_VAR 0 26
48664: PUSH
48665: LD_VAR 0 27
48669: PUSH
48670: LD_VAR 0 28
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: PUSH
48683: LD_VAR 0 4
48687: PUSH
48688: LD_INT 1
48690: PLUS
48691: ARRAY
48692: ST_TO_ADDR
48693: GO 48696
48695: POP
48696: GO 49251
48698: LD_INT 2
48700: DOUBLE
48701: EQUAL
48702: IFTRUE 48712
48704: LD_INT 3
48706: DOUBLE
48707: EQUAL
48708: IFTRUE 48712
48710: GO 48768
48712: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48713: LD_ADDR_VAR 0 9
48717: PUSH
48718: LD_VAR 0 29
48722: PUSH
48723: LD_VAR 0 30
48727: PUSH
48728: LD_VAR 0 31
48732: PUSH
48733: LD_VAR 0 32
48737: PUSH
48738: LD_VAR 0 33
48742: PUSH
48743: LD_VAR 0 34
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: PUSH
48756: LD_VAR 0 4
48760: PUSH
48761: LD_INT 1
48763: PLUS
48764: ARRAY
48765: ST_TO_ADDR
48766: GO 49251
48768: LD_INT 16
48770: DOUBLE
48771: EQUAL
48772: IFTRUE 48830
48774: LD_INT 17
48776: DOUBLE
48777: EQUAL
48778: IFTRUE 48830
48780: LD_INT 18
48782: DOUBLE
48783: EQUAL
48784: IFTRUE 48830
48786: LD_INT 19
48788: DOUBLE
48789: EQUAL
48790: IFTRUE 48830
48792: LD_INT 22
48794: DOUBLE
48795: EQUAL
48796: IFTRUE 48830
48798: LD_INT 20
48800: DOUBLE
48801: EQUAL
48802: IFTRUE 48830
48804: LD_INT 21
48806: DOUBLE
48807: EQUAL
48808: IFTRUE 48830
48810: LD_INT 23
48812: DOUBLE
48813: EQUAL
48814: IFTRUE 48830
48816: LD_INT 24
48818: DOUBLE
48819: EQUAL
48820: IFTRUE 48830
48822: LD_INT 25
48824: DOUBLE
48825: EQUAL
48826: IFTRUE 48830
48828: GO 48886
48830: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48831: LD_ADDR_VAR 0 9
48835: PUSH
48836: LD_VAR 0 35
48840: PUSH
48841: LD_VAR 0 36
48845: PUSH
48846: LD_VAR 0 37
48850: PUSH
48851: LD_VAR 0 38
48855: PUSH
48856: LD_VAR 0 39
48860: PUSH
48861: LD_VAR 0 40
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: PUSH
48874: LD_VAR 0 4
48878: PUSH
48879: LD_INT 1
48881: PLUS
48882: ARRAY
48883: ST_TO_ADDR
48884: GO 49251
48886: LD_INT 6
48888: DOUBLE
48889: EQUAL
48890: IFTRUE 48942
48892: LD_INT 7
48894: DOUBLE
48895: EQUAL
48896: IFTRUE 48942
48898: LD_INT 8
48900: DOUBLE
48901: EQUAL
48902: IFTRUE 48942
48904: LD_INT 13
48906: DOUBLE
48907: EQUAL
48908: IFTRUE 48942
48910: LD_INT 12
48912: DOUBLE
48913: EQUAL
48914: IFTRUE 48942
48916: LD_INT 15
48918: DOUBLE
48919: EQUAL
48920: IFTRUE 48942
48922: LD_INT 11
48924: DOUBLE
48925: EQUAL
48926: IFTRUE 48942
48928: LD_INT 14
48930: DOUBLE
48931: EQUAL
48932: IFTRUE 48942
48934: LD_INT 10
48936: DOUBLE
48937: EQUAL
48938: IFTRUE 48942
48940: GO 48998
48942: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48943: LD_ADDR_VAR 0 9
48947: PUSH
48948: LD_VAR 0 41
48952: PUSH
48953: LD_VAR 0 42
48957: PUSH
48958: LD_VAR 0 43
48962: PUSH
48963: LD_VAR 0 44
48967: PUSH
48968: LD_VAR 0 45
48972: PUSH
48973: LD_VAR 0 46
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: PUSH
48986: LD_VAR 0 4
48990: PUSH
48991: LD_INT 1
48993: PLUS
48994: ARRAY
48995: ST_TO_ADDR
48996: GO 49251
48998: LD_INT 36
49000: DOUBLE
49001: EQUAL
49002: IFTRUE 49006
49004: GO 49062
49006: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49007: LD_ADDR_VAR 0 9
49011: PUSH
49012: LD_VAR 0 47
49016: PUSH
49017: LD_VAR 0 48
49021: PUSH
49022: LD_VAR 0 49
49026: PUSH
49027: LD_VAR 0 50
49031: PUSH
49032: LD_VAR 0 51
49036: PUSH
49037: LD_VAR 0 52
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: PUSH
49050: LD_VAR 0 4
49054: PUSH
49055: LD_INT 1
49057: PLUS
49058: ARRAY
49059: ST_TO_ADDR
49060: GO 49251
49062: LD_INT 4
49064: DOUBLE
49065: EQUAL
49066: IFTRUE 49088
49068: LD_INT 5
49070: DOUBLE
49071: EQUAL
49072: IFTRUE 49088
49074: LD_INT 34
49076: DOUBLE
49077: EQUAL
49078: IFTRUE 49088
49080: LD_INT 37
49082: DOUBLE
49083: EQUAL
49084: IFTRUE 49088
49086: GO 49144
49088: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49089: LD_ADDR_VAR 0 9
49093: PUSH
49094: LD_VAR 0 53
49098: PUSH
49099: LD_VAR 0 54
49103: PUSH
49104: LD_VAR 0 55
49108: PUSH
49109: LD_VAR 0 56
49113: PUSH
49114: LD_VAR 0 57
49118: PUSH
49119: LD_VAR 0 58
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: PUSH
49132: LD_VAR 0 4
49136: PUSH
49137: LD_INT 1
49139: PLUS
49140: ARRAY
49141: ST_TO_ADDR
49142: GO 49251
49144: LD_INT 31
49146: DOUBLE
49147: EQUAL
49148: IFTRUE 49194
49150: LD_INT 32
49152: DOUBLE
49153: EQUAL
49154: IFTRUE 49194
49156: LD_INT 33
49158: DOUBLE
49159: EQUAL
49160: IFTRUE 49194
49162: LD_INT 27
49164: DOUBLE
49165: EQUAL
49166: IFTRUE 49194
49168: LD_INT 26
49170: DOUBLE
49171: EQUAL
49172: IFTRUE 49194
49174: LD_INT 28
49176: DOUBLE
49177: EQUAL
49178: IFTRUE 49194
49180: LD_INT 29
49182: DOUBLE
49183: EQUAL
49184: IFTRUE 49194
49186: LD_INT 30
49188: DOUBLE
49189: EQUAL
49190: IFTRUE 49194
49192: GO 49250
49194: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49195: LD_ADDR_VAR 0 9
49199: PUSH
49200: LD_VAR 0 59
49204: PUSH
49205: LD_VAR 0 60
49209: PUSH
49210: LD_VAR 0 61
49214: PUSH
49215: LD_VAR 0 62
49219: PUSH
49220: LD_VAR 0 63
49224: PUSH
49225: LD_VAR 0 64
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: PUSH
49238: LD_VAR 0 4
49242: PUSH
49243: LD_INT 1
49245: PLUS
49246: ARRAY
49247: ST_TO_ADDR
49248: GO 49251
49250: POP
// temp_list2 = [ ] ;
49251: LD_ADDR_VAR 0 10
49255: PUSH
49256: EMPTY
49257: ST_TO_ADDR
// for i in temp_list do
49258: LD_ADDR_VAR 0 8
49262: PUSH
49263: LD_VAR 0 9
49267: PUSH
49268: FOR_IN
49269: IFFALSE 49321
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49271: LD_ADDR_VAR 0 10
49275: PUSH
49276: LD_VAR 0 10
49280: PUSH
49281: LD_VAR 0 8
49285: PUSH
49286: LD_INT 1
49288: ARRAY
49289: PUSH
49290: LD_VAR 0 2
49294: PLUS
49295: PUSH
49296: LD_VAR 0 8
49300: PUSH
49301: LD_INT 2
49303: ARRAY
49304: PUSH
49305: LD_VAR 0 3
49309: PLUS
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: EMPTY
49316: LIST
49317: ADD
49318: ST_TO_ADDR
49319: GO 49268
49321: POP
49322: POP
// result = temp_list2 ;
49323: LD_ADDR_VAR 0 7
49327: PUSH
49328: LD_VAR 0 10
49332: ST_TO_ADDR
// end ;
49333: LD_VAR 0 7
49337: RET
// export function EnemyInRange ( unit , dist ) ; begin
49338: LD_INT 0
49340: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49341: LD_ADDR_VAR 0 3
49345: PUSH
49346: LD_VAR 0 1
49350: PPUSH
49351: CALL_OW 255
49355: PPUSH
49356: LD_VAR 0 1
49360: PPUSH
49361: CALL_OW 250
49365: PPUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: CALL_OW 251
49375: PPUSH
49376: LD_VAR 0 2
49380: PPUSH
49381: CALL 22711 0 4
49385: PUSH
49386: LD_INT 4
49388: ARRAY
49389: ST_TO_ADDR
// end ;
49390: LD_VAR 0 3
49394: RET
// export function PlayerSeeMe ( unit ) ; begin
49395: LD_INT 0
49397: PPUSH
// result := See ( your_side , unit ) ;
49398: LD_ADDR_VAR 0 2
49402: PUSH
49403: LD_OWVAR 2
49407: PPUSH
49408: LD_VAR 0 1
49412: PPUSH
49413: CALL_OW 292
49417: ST_TO_ADDR
// end ;
49418: LD_VAR 0 2
49422: RET
// export function ReverseDir ( unit ) ; begin
49423: LD_INT 0
49425: PPUSH
// if not unit then
49426: LD_VAR 0 1
49430: NOT
49431: IFFALSE 49435
// exit ;
49433: GO 49458
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49435: LD_ADDR_VAR 0 2
49439: PUSH
49440: LD_VAR 0 1
49444: PPUSH
49445: CALL_OW 254
49449: PUSH
49450: LD_INT 3
49452: PLUS
49453: PUSH
49454: LD_INT 6
49456: MOD
49457: ST_TO_ADDR
// end ;
49458: LD_VAR 0 2
49462: RET
// export function ReverseArray ( array ) ; var i ; begin
49463: LD_INT 0
49465: PPUSH
49466: PPUSH
// if not array then
49467: LD_VAR 0 1
49471: NOT
49472: IFFALSE 49476
// exit ;
49474: GO 49531
// result := [ ] ;
49476: LD_ADDR_VAR 0 2
49480: PUSH
49481: EMPTY
49482: ST_TO_ADDR
// for i := array downto 1 do
49483: LD_ADDR_VAR 0 3
49487: PUSH
49488: DOUBLE
49489: LD_VAR 0 1
49493: INC
49494: ST_TO_ADDR
49495: LD_INT 1
49497: PUSH
49498: FOR_DOWNTO
49499: IFFALSE 49529
// result := Join ( result , array [ i ] ) ;
49501: LD_ADDR_VAR 0 2
49505: PUSH
49506: LD_VAR 0 2
49510: PPUSH
49511: LD_VAR 0 1
49515: PUSH
49516: LD_VAR 0 3
49520: ARRAY
49521: PPUSH
49522: CALL 54187 0 2
49526: ST_TO_ADDR
49527: GO 49498
49529: POP
49530: POP
// end ;
49531: LD_VAR 0 2
49535: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49536: LD_INT 0
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
// if not unit or not hexes then
49544: LD_VAR 0 1
49548: NOT
49549: PUSH
49550: LD_VAR 0 2
49554: NOT
49555: OR
49556: IFFALSE 49560
// exit ;
49558: GO 49683
// dist := 9999 ;
49560: LD_ADDR_VAR 0 5
49564: PUSH
49565: LD_INT 9999
49567: ST_TO_ADDR
// for i = 1 to hexes do
49568: LD_ADDR_VAR 0 4
49572: PUSH
49573: DOUBLE
49574: LD_INT 1
49576: DEC
49577: ST_TO_ADDR
49578: LD_VAR 0 2
49582: PUSH
49583: FOR_TO
49584: IFFALSE 49671
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49586: LD_ADDR_VAR 0 6
49590: PUSH
49591: LD_VAR 0 1
49595: PPUSH
49596: LD_VAR 0 2
49600: PUSH
49601: LD_VAR 0 4
49605: ARRAY
49606: PUSH
49607: LD_INT 1
49609: ARRAY
49610: PPUSH
49611: LD_VAR 0 2
49615: PUSH
49616: LD_VAR 0 4
49620: ARRAY
49621: PUSH
49622: LD_INT 2
49624: ARRAY
49625: PPUSH
49626: CALL_OW 297
49630: ST_TO_ADDR
// if tdist < dist then
49631: LD_VAR 0 6
49635: PUSH
49636: LD_VAR 0 5
49640: LESS
49641: IFFALSE 49669
// begin hex := hexes [ i ] ;
49643: LD_ADDR_VAR 0 8
49647: PUSH
49648: LD_VAR 0 2
49652: PUSH
49653: LD_VAR 0 4
49657: ARRAY
49658: ST_TO_ADDR
// dist := tdist ;
49659: LD_ADDR_VAR 0 5
49663: PUSH
49664: LD_VAR 0 6
49668: ST_TO_ADDR
// end ; end ;
49669: GO 49583
49671: POP
49672: POP
// result := hex ;
49673: LD_ADDR_VAR 0 3
49677: PUSH
49678: LD_VAR 0 8
49682: ST_TO_ADDR
// end ;
49683: LD_VAR 0 3
49687: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49688: LD_INT 0
49690: PPUSH
49691: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49692: LD_VAR 0 1
49696: NOT
49697: PUSH
49698: LD_VAR 0 1
49702: PUSH
49703: LD_INT 21
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 23
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PPUSH
49727: CALL_OW 69
49731: IN
49732: NOT
49733: OR
49734: IFFALSE 49738
// exit ;
49736: GO 49785
// for i = 1 to 3 do
49738: LD_ADDR_VAR 0 3
49742: PUSH
49743: DOUBLE
49744: LD_INT 1
49746: DEC
49747: ST_TO_ADDR
49748: LD_INT 3
49750: PUSH
49751: FOR_TO
49752: IFFALSE 49783
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49754: LD_VAR 0 1
49758: PPUSH
49759: CALL_OW 250
49763: PPUSH
49764: LD_VAR 0 1
49768: PPUSH
49769: CALL_OW 251
49773: PPUSH
49774: LD_INT 1
49776: PPUSH
49777: CALL_OW 453
49781: GO 49751
49783: POP
49784: POP
// end ;
49785: LD_VAR 0 2
49789: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49790: LD_INT 0
49792: PPUSH
49793: PPUSH
49794: PPUSH
49795: PPUSH
49796: PPUSH
49797: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49798: LD_VAR 0 1
49802: NOT
49803: PUSH
49804: LD_VAR 0 2
49808: NOT
49809: OR
49810: PUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: CALL_OW 314
49820: OR
49821: IFFALSE 49825
// exit ;
49823: GO 50292
// if GetLives ( i ) < 250 then
49825: LD_VAR 0 4
49829: PPUSH
49830: CALL_OW 256
49834: PUSH
49835: LD_INT 250
49837: LESS
49838: IFFALSE 49851
// begin ComAutodestruct ( i ) ;
49840: LD_VAR 0 4
49844: PPUSH
49845: CALL 49688 0 1
// exit ;
49849: GO 50292
// end ; x := GetX ( enemy_unit ) ;
49851: LD_ADDR_VAR 0 7
49855: PUSH
49856: LD_VAR 0 2
49860: PPUSH
49861: CALL_OW 250
49865: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49866: LD_ADDR_VAR 0 8
49870: PUSH
49871: LD_VAR 0 2
49875: PPUSH
49876: CALL_OW 251
49880: ST_TO_ADDR
// if not x or not y then
49881: LD_VAR 0 7
49885: NOT
49886: PUSH
49887: LD_VAR 0 8
49891: NOT
49892: OR
49893: IFFALSE 49897
// exit ;
49895: GO 50292
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49897: LD_ADDR_VAR 0 6
49901: PUSH
49902: LD_VAR 0 7
49906: PPUSH
49907: LD_INT 0
49909: PPUSH
49910: LD_INT 4
49912: PPUSH
49913: CALL_OW 272
49917: PUSH
49918: LD_VAR 0 8
49922: PPUSH
49923: LD_INT 0
49925: PPUSH
49926: LD_INT 4
49928: PPUSH
49929: CALL_OW 273
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_VAR 0 7
49942: PPUSH
49943: LD_INT 1
49945: PPUSH
49946: LD_INT 4
49948: PPUSH
49949: CALL_OW 272
49953: PUSH
49954: LD_VAR 0 8
49958: PPUSH
49959: LD_INT 1
49961: PPUSH
49962: LD_INT 4
49964: PPUSH
49965: CALL_OW 273
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_VAR 0 7
49978: PPUSH
49979: LD_INT 2
49981: PPUSH
49982: LD_INT 4
49984: PPUSH
49985: CALL_OW 272
49989: PUSH
49990: LD_VAR 0 8
49994: PPUSH
49995: LD_INT 2
49997: PPUSH
49998: LD_INT 4
50000: PPUSH
50001: CALL_OW 273
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_VAR 0 7
50014: PPUSH
50015: LD_INT 3
50017: PPUSH
50018: LD_INT 4
50020: PPUSH
50021: CALL_OW 272
50025: PUSH
50026: LD_VAR 0 8
50030: PPUSH
50031: LD_INT 3
50033: PPUSH
50034: LD_INT 4
50036: PPUSH
50037: CALL_OW 273
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_VAR 0 7
50050: PPUSH
50051: LD_INT 4
50053: PPUSH
50054: LD_INT 4
50056: PPUSH
50057: CALL_OW 272
50061: PUSH
50062: LD_VAR 0 8
50066: PPUSH
50067: LD_INT 4
50069: PPUSH
50070: LD_INT 4
50072: PPUSH
50073: CALL_OW 273
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_VAR 0 7
50086: PPUSH
50087: LD_INT 5
50089: PPUSH
50090: LD_INT 4
50092: PPUSH
50093: CALL_OW 272
50097: PUSH
50098: LD_VAR 0 8
50102: PPUSH
50103: LD_INT 5
50105: PPUSH
50106: LD_INT 4
50108: PPUSH
50109: CALL_OW 273
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// for i = tmp downto 1 do
50126: LD_ADDR_VAR 0 4
50130: PUSH
50131: DOUBLE
50132: LD_VAR 0 6
50136: INC
50137: ST_TO_ADDR
50138: LD_INT 1
50140: PUSH
50141: FOR_DOWNTO
50142: IFFALSE 50243
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50144: LD_VAR 0 6
50148: PUSH
50149: LD_VAR 0 4
50153: ARRAY
50154: PUSH
50155: LD_INT 1
50157: ARRAY
50158: PPUSH
50159: LD_VAR 0 6
50163: PUSH
50164: LD_VAR 0 4
50168: ARRAY
50169: PUSH
50170: LD_INT 2
50172: ARRAY
50173: PPUSH
50174: CALL_OW 488
50178: NOT
50179: PUSH
50180: LD_VAR 0 6
50184: PUSH
50185: LD_VAR 0 4
50189: ARRAY
50190: PUSH
50191: LD_INT 1
50193: ARRAY
50194: PPUSH
50195: LD_VAR 0 6
50199: PUSH
50200: LD_VAR 0 4
50204: ARRAY
50205: PUSH
50206: LD_INT 2
50208: ARRAY
50209: PPUSH
50210: CALL_OW 428
50214: PUSH
50215: LD_INT 0
50217: NONEQUAL
50218: OR
50219: IFFALSE 50241
// tmp := Delete ( tmp , i ) ;
50221: LD_ADDR_VAR 0 6
50225: PUSH
50226: LD_VAR 0 6
50230: PPUSH
50231: LD_VAR 0 4
50235: PPUSH
50236: CALL_OW 3
50240: ST_TO_ADDR
50241: GO 50141
50243: POP
50244: POP
// j := GetClosestHex ( unit , tmp ) ;
50245: LD_ADDR_VAR 0 5
50249: PUSH
50250: LD_VAR 0 1
50254: PPUSH
50255: LD_VAR 0 6
50259: PPUSH
50260: CALL 49536 0 2
50264: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50265: LD_VAR 0 1
50269: PPUSH
50270: LD_VAR 0 5
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 5
50283: PUSH
50284: LD_INT 2
50286: ARRAY
50287: PPUSH
50288: CALL_OW 111
// end ;
50292: LD_VAR 0 3
50296: RET
// export function PrepareApemanSoldier ( ) ; begin
50297: LD_INT 0
50299: PPUSH
// uc_nation := 0 ;
50300: LD_ADDR_OWVAR 21
50304: PUSH
50305: LD_INT 0
50307: ST_TO_ADDR
// hc_sex := sex_male ;
50308: LD_ADDR_OWVAR 27
50312: PUSH
50313: LD_INT 1
50315: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50316: LD_ADDR_OWVAR 28
50320: PUSH
50321: LD_INT 15
50323: ST_TO_ADDR
// hc_gallery :=  ;
50324: LD_ADDR_OWVAR 33
50328: PUSH
50329: LD_STRING 
50331: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50332: LD_ADDR_OWVAR 31
50336: PUSH
50337: LD_INT 0
50339: PPUSH
50340: LD_INT 3
50342: PPUSH
50343: CALL_OW 12
50347: PUSH
50348: LD_INT 0
50350: PPUSH
50351: LD_INT 3
50353: PPUSH
50354: CALL_OW 12
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// end ;
50371: LD_VAR 0 1
50375: RET
// export function PrepareApemanEngineer ( ) ; begin
50376: LD_INT 0
50378: PPUSH
// uc_nation := 0 ;
50379: LD_ADDR_OWVAR 21
50383: PUSH
50384: LD_INT 0
50386: ST_TO_ADDR
// hc_sex := sex_male ;
50387: LD_ADDR_OWVAR 27
50391: PUSH
50392: LD_INT 1
50394: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50395: LD_ADDR_OWVAR 28
50399: PUSH
50400: LD_INT 16
50402: ST_TO_ADDR
// hc_gallery :=  ;
50403: LD_ADDR_OWVAR 33
50407: PUSH
50408: LD_STRING 
50410: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50411: LD_ADDR_OWVAR 31
50415: PUSH
50416: LD_INT 0
50418: PPUSH
50419: LD_INT 3
50421: PPUSH
50422: CALL_OW 12
50426: PUSH
50427: LD_INT 0
50429: PPUSH
50430: LD_INT 3
50432: PPUSH
50433: CALL_OW 12
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// end ;
50450: LD_VAR 0 1
50454: RET
// export function PrepareApeman ( agressivity ) ; begin
50455: LD_INT 0
50457: PPUSH
// uc_side := 0 ;
50458: LD_ADDR_OWVAR 20
50462: PUSH
50463: LD_INT 0
50465: ST_TO_ADDR
// uc_nation := 0 ;
50466: LD_ADDR_OWVAR 21
50470: PUSH
50471: LD_INT 0
50473: ST_TO_ADDR
// hc_sex := sex_male ;
50474: LD_ADDR_OWVAR 27
50478: PUSH
50479: LD_INT 1
50481: ST_TO_ADDR
// hc_class := class_apeman ;
50482: LD_ADDR_OWVAR 28
50486: PUSH
50487: LD_INT 12
50489: ST_TO_ADDR
// hc_gallery :=  ;
50490: LD_ADDR_OWVAR 33
50494: PUSH
50495: LD_STRING 
50497: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50498: LD_ADDR_OWVAR 35
50502: PUSH
50503: LD_VAR 0 1
50507: NEG
50508: PPUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: CALL_OW 12
50518: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50519: LD_ADDR_OWVAR 31
50523: PUSH
50524: LD_INT 0
50526: PPUSH
50527: LD_INT 3
50529: PPUSH
50530: CALL_OW 12
50534: PUSH
50535: LD_INT 0
50537: PPUSH
50538: LD_INT 3
50540: PPUSH
50541: CALL_OW 12
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// end ;
50558: LD_VAR 0 2
50562: RET
// export function PrepareTiger ( agressivity ) ; begin
50563: LD_INT 0
50565: PPUSH
// uc_side := 0 ;
50566: LD_ADDR_OWVAR 20
50570: PUSH
50571: LD_INT 0
50573: ST_TO_ADDR
// uc_nation := 0 ;
50574: LD_ADDR_OWVAR 21
50578: PUSH
50579: LD_INT 0
50581: ST_TO_ADDR
// hc_class := class_tiger ;
50582: LD_ADDR_OWVAR 28
50586: PUSH
50587: LD_INT 14
50589: ST_TO_ADDR
// hc_gallery :=  ;
50590: LD_ADDR_OWVAR 33
50594: PUSH
50595: LD_STRING 
50597: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50598: LD_ADDR_OWVAR 35
50602: PUSH
50603: LD_VAR 0 1
50607: NEG
50608: PPUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: CALL_OW 12
50618: ST_TO_ADDR
// end ;
50619: LD_VAR 0 2
50623: RET
// export function PrepareEnchidna ( ) ; begin
50624: LD_INT 0
50626: PPUSH
// uc_side := 0 ;
50627: LD_ADDR_OWVAR 20
50631: PUSH
50632: LD_INT 0
50634: ST_TO_ADDR
// uc_nation := 0 ;
50635: LD_ADDR_OWVAR 21
50639: PUSH
50640: LD_INT 0
50642: ST_TO_ADDR
// hc_class := class_baggie ;
50643: LD_ADDR_OWVAR 28
50647: PUSH
50648: LD_INT 13
50650: ST_TO_ADDR
// hc_gallery :=  ;
50651: LD_ADDR_OWVAR 33
50655: PUSH
50656: LD_STRING 
50658: ST_TO_ADDR
// end ;
50659: LD_VAR 0 1
50663: RET
// export function PrepareFrog ( ) ; begin
50664: LD_INT 0
50666: PPUSH
// uc_side := 0 ;
50667: LD_ADDR_OWVAR 20
50671: PUSH
50672: LD_INT 0
50674: ST_TO_ADDR
// uc_nation := 0 ;
50675: LD_ADDR_OWVAR 21
50679: PUSH
50680: LD_INT 0
50682: ST_TO_ADDR
// hc_class := class_frog ;
50683: LD_ADDR_OWVAR 28
50687: PUSH
50688: LD_INT 19
50690: ST_TO_ADDR
// hc_gallery :=  ;
50691: LD_ADDR_OWVAR 33
50695: PUSH
50696: LD_STRING 
50698: ST_TO_ADDR
// end ;
50699: LD_VAR 0 1
50703: RET
// export function PrepareFish ( ) ; begin
50704: LD_INT 0
50706: PPUSH
// uc_side := 0 ;
50707: LD_ADDR_OWVAR 20
50711: PUSH
50712: LD_INT 0
50714: ST_TO_ADDR
// uc_nation := 0 ;
50715: LD_ADDR_OWVAR 21
50719: PUSH
50720: LD_INT 0
50722: ST_TO_ADDR
// hc_class := class_fish ;
50723: LD_ADDR_OWVAR 28
50727: PUSH
50728: LD_INT 20
50730: ST_TO_ADDR
// hc_gallery :=  ;
50731: LD_ADDR_OWVAR 33
50735: PUSH
50736: LD_STRING 
50738: ST_TO_ADDR
// end ;
50739: LD_VAR 0 1
50743: RET
// export function PrepareBird ( ) ; begin
50744: LD_INT 0
50746: PPUSH
// uc_side := 0 ;
50747: LD_ADDR_OWVAR 20
50751: PUSH
50752: LD_INT 0
50754: ST_TO_ADDR
// uc_nation := 0 ;
50755: LD_ADDR_OWVAR 21
50759: PUSH
50760: LD_INT 0
50762: ST_TO_ADDR
// hc_class := class_phororhacos ;
50763: LD_ADDR_OWVAR 28
50767: PUSH
50768: LD_INT 18
50770: ST_TO_ADDR
// hc_gallery :=  ;
50771: LD_ADDR_OWVAR 33
50775: PUSH
50776: LD_STRING 
50778: ST_TO_ADDR
// end ;
50779: LD_VAR 0 1
50783: RET
// export function PrepareHorse ( ) ; begin
50784: LD_INT 0
50786: PPUSH
// uc_side := 0 ;
50787: LD_ADDR_OWVAR 20
50791: PUSH
50792: LD_INT 0
50794: ST_TO_ADDR
// uc_nation := 0 ;
50795: LD_ADDR_OWVAR 21
50799: PUSH
50800: LD_INT 0
50802: ST_TO_ADDR
// hc_class := class_horse ;
50803: LD_ADDR_OWVAR 28
50807: PUSH
50808: LD_INT 21
50810: ST_TO_ADDR
// hc_gallery :=  ;
50811: LD_ADDR_OWVAR 33
50815: PUSH
50816: LD_STRING 
50818: ST_TO_ADDR
// end ;
50819: LD_VAR 0 1
50823: RET
// export function PrepareMastodont ( ) ; begin
50824: LD_INT 0
50826: PPUSH
// uc_side := 0 ;
50827: LD_ADDR_OWVAR 20
50831: PUSH
50832: LD_INT 0
50834: ST_TO_ADDR
// uc_nation := 0 ;
50835: LD_ADDR_OWVAR 21
50839: PUSH
50840: LD_INT 0
50842: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50843: LD_ADDR_OWVAR 37
50847: PUSH
50848: LD_INT 31
50850: ST_TO_ADDR
// vc_control := control_rider ;
50851: LD_ADDR_OWVAR 38
50855: PUSH
50856: LD_INT 4
50858: ST_TO_ADDR
// end ;
50859: LD_VAR 0 1
50863: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50864: LD_INT 0
50866: PPUSH
50867: PPUSH
50868: PPUSH
// uc_side = 0 ;
50869: LD_ADDR_OWVAR 20
50873: PUSH
50874: LD_INT 0
50876: ST_TO_ADDR
// uc_nation = 0 ;
50877: LD_ADDR_OWVAR 21
50881: PUSH
50882: LD_INT 0
50884: ST_TO_ADDR
// InitHc_All ( ) ;
50885: CALL_OW 584
// InitVc ;
50889: CALL_OW 20
// if mastodonts then
50893: LD_VAR 0 6
50897: IFFALSE 50964
// for i = 1 to mastodonts do
50899: LD_ADDR_VAR 0 11
50903: PUSH
50904: DOUBLE
50905: LD_INT 1
50907: DEC
50908: ST_TO_ADDR
50909: LD_VAR 0 6
50913: PUSH
50914: FOR_TO
50915: IFFALSE 50962
// begin vc_chassis := 31 ;
50917: LD_ADDR_OWVAR 37
50921: PUSH
50922: LD_INT 31
50924: ST_TO_ADDR
// vc_control := control_rider ;
50925: LD_ADDR_OWVAR 38
50929: PUSH
50930: LD_INT 4
50932: ST_TO_ADDR
// animal := CreateVehicle ;
50933: LD_ADDR_VAR 0 12
50937: PUSH
50938: CALL_OW 45
50942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50943: LD_VAR 0 12
50947: PPUSH
50948: LD_VAR 0 8
50952: PPUSH
50953: LD_INT 0
50955: PPUSH
50956: CALL 53092 0 3
// end ;
50960: GO 50914
50962: POP
50963: POP
// if horses then
50964: LD_VAR 0 5
50968: IFFALSE 51035
// for i = 1 to horses do
50970: LD_ADDR_VAR 0 11
50974: PUSH
50975: DOUBLE
50976: LD_INT 1
50978: DEC
50979: ST_TO_ADDR
50980: LD_VAR 0 5
50984: PUSH
50985: FOR_TO
50986: IFFALSE 51033
// begin hc_class := 21 ;
50988: LD_ADDR_OWVAR 28
50992: PUSH
50993: LD_INT 21
50995: ST_TO_ADDR
// hc_gallery :=  ;
50996: LD_ADDR_OWVAR 33
51000: PUSH
51001: LD_STRING 
51003: ST_TO_ADDR
// animal := CreateHuman ;
51004: LD_ADDR_VAR 0 12
51008: PUSH
51009: CALL_OW 44
51013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51014: LD_VAR 0 12
51018: PPUSH
51019: LD_VAR 0 8
51023: PPUSH
51024: LD_INT 0
51026: PPUSH
51027: CALL 53092 0 3
// end ;
51031: GO 50985
51033: POP
51034: POP
// if birds then
51035: LD_VAR 0 1
51039: IFFALSE 51106
// for i = 1 to birds do
51041: LD_ADDR_VAR 0 11
51045: PUSH
51046: DOUBLE
51047: LD_INT 1
51049: DEC
51050: ST_TO_ADDR
51051: LD_VAR 0 1
51055: PUSH
51056: FOR_TO
51057: IFFALSE 51104
// begin hc_class := 18 ;
51059: LD_ADDR_OWVAR 28
51063: PUSH
51064: LD_INT 18
51066: ST_TO_ADDR
// hc_gallery =  ;
51067: LD_ADDR_OWVAR 33
51071: PUSH
51072: LD_STRING 
51074: ST_TO_ADDR
// animal := CreateHuman ;
51075: LD_ADDR_VAR 0 12
51079: PUSH
51080: CALL_OW 44
51084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51085: LD_VAR 0 12
51089: PPUSH
51090: LD_VAR 0 8
51094: PPUSH
51095: LD_INT 0
51097: PPUSH
51098: CALL 53092 0 3
// end ;
51102: GO 51056
51104: POP
51105: POP
// if tigers then
51106: LD_VAR 0 2
51110: IFFALSE 51194
// for i = 1 to tigers do
51112: LD_ADDR_VAR 0 11
51116: PUSH
51117: DOUBLE
51118: LD_INT 1
51120: DEC
51121: ST_TO_ADDR
51122: LD_VAR 0 2
51126: PUSH
51127: FOR_TO
51128: IFFALSE 51192
// begin hc_class = class_tiger ;
51130: LD_ADDR_OWVAR 28
51134: PUSH
51135: LD_INT 14
51137: ST_TO_ADDR
// hc_gallery =  ;
51138: LD_ADDR_OWVAR 33
51142: PUSH
51143: LD_STRING 
51145: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51146: LD_ADDR_OWVAR 35
51150: PUSH
51151: LD_INT 7
51153: NEG
51154: PPUSH
51155: LD_INT 7
51157: PPUSH
51158: CALL_OW 12
51162: ST_TO_ADDR
// animal := CreateHuman ;
51163: LD_ADDR_VAR 0 12
51167: PUSH
51168: CALL_OW 44
51172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51173: LD_VAR 0 12
51177: PPUSH
51178: LD_VAR 0 8
51182: PPUSH
51183: LD_INT 0
51185: PPUSH
51186: CALL 53092 0 3
// end ;
51190: GO 51127
51192: POP
51193: POP
// if apemans then
51194: LD_VAR 0 3
51198: IFFALSE 51321
// for i = 1 to apemans do
51200: LD_ADDR_VAR 0 11
51204: PUSH
51205: DOUBLE
51206: LD_INT 1
51208: DEC
51209: ST_TO_ADDR
51210: LD_VAR 0 3
51214: PUSH
51215: FOR_TO
51216: IFFALSE 51319
// begin hc_class = class_apeman ;
51218: LD_ADDR_OWVAR 28
51222: PUSH
51223: LD_INT 12
51225: ST_TO_ADDR
// hc_gallery =  ;
51226: LD_ADDR_OWVAR 33
51230: PUSH
51231: LD_STRING 
51233: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51234: LD_ADDR_OWVAR 35
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PPUSH
51243: LD_INT 2
51245: PPUSH
51246: CALL_OW 12
51250: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51251: LD_ADDR_OWVAR 31
51255: PUSH
51256: LD_INT 1
51258: PPUSH
51259: LD_INT 3
51261: PPUSH
51262: CALL_OW 12
51266: PUSH
51267: LD_INT 1
51269: PPUSH
51270: LD_INT 3
51272: PPUSH
51273: CALL_OW 12
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// animal := CreateHuman ;
51290: LD_ADDR_VAR 0 12
51294: PUSH
51295: CALL_OW 44
51299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51300: LD_VAR 0 12
51304: PPUSH
51305: LD_VAR 0 8
51309: PPUSH
51310: LD_INT 0
51312: PPUSH
51313: CALL 53092 0 3
// end ;
51317: GO 51215
51319: POP
51320: POP
// if enchidnas then
51321: LD_VAR 0 4
51325: IFFALSE 51392
// for i = 1 to enchidnas do
51327: LD_ADDR_VAR 0 11
51331: PUSH
51332: DOUBLE
51333: LD_INT 1
51335: DEC
51336: ST_TO_ADDR
51337: LD_VAR 0 4
51341: PUSH
51342: FOR_TO
51343: IFFALSE 51390
// begin hc_class = 13 ;
51345: LD_ADDR_OWVAR 28
51349: PUSH
51350: LD_INT 13
51352: ST_TO_ADDR
// hc_gallery =  ;
51353: LD_ADDR_OWVAR 33
51357: PUSH
51358: LD_STRING 
51360: ST_TO_ADDR
// animal := CreateHuman ;
51361: LD_ADDR_VAR 0 12
51365: PUSH
51366: CALL_OW 44
51370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51371: LD_VAR 0 12
51375: PPUSH
51376: LD_VAR 0 8
51380: PPUSH
51381: LD_INT 0
51383: PPUSH
51384: CALL 53092 0 3
// end ;
51388: GO 51342
51390: POP
51391: POP
// if fishes then
51392: LD_VAR 0 7
51396: IFFALSE 51463
// for i = 1 to fishes do
51398: LD_ADDR_VAR 0 11
51402: PUSH
51403: DOUBLE
51404: LD_INT 1
51406: DEC
51407: ST_TO_ADDR
51408: LD_VAR 0 7
51412: PUSH
51413: FOR_TO
51414: IFFALSE 51461
// begin hc_class = 20 ;
51416: LD_ADDR_OWVAR 28
51420: PUSH
51421: LD_INT 20
51423: ST_TO_ADDR
// hc_gallery =  ;
51424: LD_ADDR_OWVAR 33
51428: PUSH
51429: LD_STRING 
51431: ST_TO_ADDR
// animal := CreateHuman ;
51432: LD_ADDR_VAR 0 12
51436: PUSH
51437: CALL_OW 44
51441: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51442: LD_VAR 0 12
51446: PPUSH
51447: LD_VAR 0 9
51451: PPUSH
51452: LD_INT 0
51454: PPUSH
51455: CALL 53092 0 3
// end ;
51459: GO 51413
51461: POP
51462: POP
// end ;
51463: LD_VAR 0 10
51467: RET
// export function WantHeal ( sci , unit ) ; begin
51468: LD_INT 0
51470: PPUSH
// if GetTaskList ( sci ) > 0 then
51471: LD_VAR 0 1
51475: PPUSH
51476: CALL_OW 437
51480: PUSH
51481: LD_INT 0
51483: GREATER
51484: IFFALSE 51554
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51486: LD_VAR 0 1
51490: PPUSH
51491: CALL_OW 437
51495: PUSH
51496: LD_INT 1
51498: ARRAY
51499: PUSH
51500: LD_INT 1
51502: ARRAY
51503: PUSH
51504: LD_STRING l
51506: EQUAL
51507: PUSH
51508: LD_VAR 0 1
51512: PPUSH
51513: CALL_OW 437
51517: PUSH
51518: LD_INT 1
51520: ARRAY
51521: PUSH
51522: LD_INT 4
51524: ARRAY
51525: PUSH
51526: LD_VAR 0 2
51530: EQUAL
51531: AND
51532: IFFALSE 51544
// result := true else
51534: LD_ADDR_VAR 0 3
51538: PUSH
51539: LD_INT 1
51541: ST_TO_ADDR
51542: GO 51552
// result := false ;
51544: LD_ADDR_VAR 0 3
51548: PUSH
51549: LD_INT 0
51551: ST_TO_ADDR
// end else
51552: GO 51562
// result := false ;
51554: LD_ADDR_VAR 0 3
51558: PUSH
51559: LD_INT 0
51561: ST_TO_ADDR
// end ;
51562: LD_VAR 0 3
51566: RET
// export function HealTarget ( sci ) ; begin
51567: LD_INT 0
51569: PPUSH
// if not sci then
51570: LD_VAR 0 1
51574: NOT
51575: IFFALSE 51579
// exit ;
51577: GO 51644
// result := 0 ;
51579: LD_ADDR_VAR 0 2
51583: PUSH
51584: LD_INT 0
51586: ST_TO_ADDR
// if GetTaskList ( sci ) then
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 437
51596: IFFALSE 51644
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51598: LD_VAR 0 1
51602: PPUSH
51603: CALL_OW 437
51607: PUSH
51608: LD_INT 1
51610: ARRAY
51611: PUSH
51612: LD_INT 1
51614: ARRAY
51615: PUSH
51616: LD_STRING l
51618: EQUAL
51619: IFFALSE 51644
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51621: LD_ADDR_VAR 0 2
51625: PUSH
51626: LD_VAR 0 1
51630: PPUSH
51631: CALL_OW 437
51635: PUSH
51636: LD_INT 1
51638: ARRAY
51639: PUSH
51640: LD_INT 4
51642: ARRAY
51643: ST_TO_ADDR
// end ;
51644: LD_VAR 0 2
51648: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51649: LD_INT 0
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
// if not base_units then
51655: LD_VAR 0 1
51659: NOT
51660: IFFALSE 51664
// exit ;
51662: GO 51751
// result := false ;
51664: LD_ADDR_VAR 0 2
51668: PUSH
51669: LD_INT 0
51671: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51672: LD_ADDR_VAR 0 5
51676: PUSH
51677: LD_VAR 0 1
51681: PPUSH
51682: LD_INT 21
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PPUSH
51692: CALL_OW 72
51696: ST_TO_ADDR
// if not tmp then
51697: LD_VAR 0 5
51701: NOT
51702: IFFALSE 51706
// exit ;
51704: GO 51751
// for i in tmp do
51706: LD_ADDR_VAR 0 3
51710: PUSH
51711: LD_VAR 0 5
51715: PUSH
51716: FOR_IN
51717: IFFALSE 51749
// begin result := EnemyInRange ( i , 22 ) ;
51719: LD_ADDR_VAR 0 2
51723: PUSH
51724: LD_VAR 0 3
51728: PPUSH
51729: LD_INT 22
51731: PPUSH
51732: CALL 49338 0 2
51736: ST_TO_ADDR
// if result then
51737: LD_VAR 0 2
51741: IFFALSE 51747
// exit ;
51743: POP
51744: POP
51745: GO 51751
// end ;
51747: GO 51716
51749: POP
51750: POP
// end ;
51751: LD_VAR 0 2
51755: RET
// export function FilterByTag ( units , tag ) ; begin
51756: LD_INT 0
51758: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51759: LD_ADDR_VAR 0 3
51763: PUSH
51764: LD_VAR 0 1
51768: PPUSH
51769: LD_INT 120
51771: PUSH
51772: LD_VAR 0 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PPUSH
51781: CALL_OW 72
51785: ST_TO_ADDR
// end ;
51786: LD_VAR 0 3
51790: RET
// export function IsDriver ( un ) ; begin
51791: LD_INT 0
51793: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51794: LD_ADDR_VAR 0 2
51798: PUSH
51799: LD_VAR 0 1
51803: PUSH
51804: LD_INT 55
51806: PUSH
51807: EMPTY
51808: LIST
51809: PPUSH
51810: CALL_OW 69
51814: IN
51815: ST_TO_ADDR
// end ;
51816: LD_VAR 0 2
51820: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51821: LD_INT 0
51823: PPUSH
51824: PPUSH
// list := [ ] ;
51825: LD_ADDR_VAR 0 5
51829: PUSH
51830: EMPTY
51831: ST_TO_ADDR
// case d of 0 :
51832: LD_VAR 0 3
51836: PUSH
51837: LD_INT 0
51839: DOUBLE
51840: EQUAL
51841: IFTRUE 51845
51843: GO 51978
51845: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51846: LD_ADDR_VAR 0 5
51850: PUSH
51851: LD_VAR 0 1
51855: PUSH
51856: LD_INT 4
51858: MINUS
51859: PUSH
51860: LD_VAR 0 2
51864: PUSH
51865: LD_INT 4
51867: MINUS
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: PUSH
51877: LD_VAR 0 1
51881: PUSH
51882: LD_INT 3
51884: MINUS
51885: PUSH
51886: LD_VAR 0 2
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: PUSH
51899: LD_VAR 0 1
51903: PUSH
51904: LD_INT 4
51906: PLUS
51907: PUSH
51908: LD_VAR 0 2
51912: PUSH
51913: LD_INT 4
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: PUSH
51921: LD_VAR 0 1
51925: PUSH
51926: LD_INT 3
51928: PLUS
51929: PUSH
51930: LD_VAR 0 2
51934: PUSH
51935: LD_INT 3
51937: PLUS
51938: PUSH
51939: LD_INT 5
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: PUSH
51947: LD_VAR 0 1
51951: PUSH
51952: LD_VAR 0 2
51956: PUSH
51957: LD_INT 4
51959: PLUS
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// end ; 1 :
51976: GO 52676
51978: LD_INT 1
51980: DOUBLE
51981: EQUAL
51982: IFTRUE 51986
51984: GO 52119
51986: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51987: LD_ADDR_VAR 0 5
51991: PUSH
51992: LD_VAR 0 1
51996: PUSH
51997: LD_VAR 0 2
52001: PUSH
52002: LD_INT 4
52004: MINUS
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: PUSH
52014: LD_VAR 0 1
52018: PUSH
52019: LD_INT 3
52021: MINUS
52022: PUSH
52023: LD_VAR 0 2
52027: PUSH
52028: LD_INT 3
52030: MINUS
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: PUSH
52040: LD_VAR 0 1
52044: PUSH
52045: LD_INT 4
52047: MINUS
52048: PUSH
52049: LD_VAR 0 2
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: PUSH
52062: LD_VAR 0 1
52066: PUSH
52067: LD_VAR 0 2
52071: PUSH
52072: LD_INT 3
52074: PLUS
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: PUSH
52084: LD_VAR 0 1
52088: PUSH
52089: LD_INT 4
52091: PLUS
52092: PUSH
52093: LD_VAR 0 2
52097: PUSH
52098: LD_INT 4
52100: PLUS
52101: PUSH
52102: LD_INT 5
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// end ; 2 :
52117: GO 52676
52119: LD_INT 2
52121: DOUBLE
52122: EQUAL
52123: IFTRUE 52127
52125: GO 52256
52127: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52128: LD_ADDR_VAR 0 5
52132: PUSH
52133: LD_VAR 0 1
52137: PUSH
52138: LD_VAR 0 2
52142: PUSH
52143: LD_INT 3
52145: MINUS
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: PUSH
52155: LD_VAR 0 1
52159: PUSH
52160: LD_INT 4
52162: PLUS
52163: PUSH
52164: LD_VAR 0 2
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: PUSH
52177: LD_VAR 0 1
52181: PUSH
52182: LD_VAR 0 2
52186: PUSH
52187: LD_INT 4
52189: PLUS
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: PUSH
52199: LD_VAR 0 1
52203: PUSH
52204: LD_INT 3
52206: MINUS
52207: PUSH
52208: LD_VAR 0 2
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: LD_VAR 0 1
52225: PUSH
52226: LD_INT 4
52228: MINUS
52229: PUSH
52230: LD_VAR 0 2
52234: PUSH
52235: LD_INT 4
52237: MINUS
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// end ; 3 :
52254: GO 52676
52256: LD_INT 3
52258: DOUBLE
52259: EQUAL
52260: IFTRUE 52264
52262: GO 52397
52264: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52265: LD_ADDR_VAR 0 5
52269: PUSH
52270: LD_VAR 0 1
52274: PUSH
52275: LD_INT 3
52277: PLUS
52278: PUSH
52279: LD_VAR 0 2
52283: PUSH
52284: LD_INT 4
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: PUSH
52292: LD_VAR 0 1
52296: PUSH
52297: LD_INT 4
52299: PLUS
52300: PUSH
52301: LD_VAR 0 2
52305: PUSH
52306: LD_INT 4
52308: PLUS
52309: PUSH
52310: LD_INT 5
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: PUSH
52318: LD_VAR 0 1
52322: PUSH
52323: LD_INT 4
52325: MINUS
52326: PUSH
52327: LD_VAR 0 2
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: PUSH
52340: LD_VAR 0 1
52344: PUSH
52345: LD_VAR 0 2
52349: PUSH
52350: LD_INT 4
52352: MINUS
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: PUSH
52362: LD_VAR 0 1
52366: PUSH
52367: LD_INT 3
52369: MINUS
52370: PUSH
52371: LD_VAR 0 2
52375: PUSH
52376: LD_INT 3
52378: MINUS
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: ST_TO_ADDR
// end ; 4 :
52395: GO 52676
52397: LD_INT 4
52399: DOUBLE
52400: EQUAL
52401: IFTRUE 52405
52403: GO 52538
52405: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52406: LD_ADDR_VAR 0 5
52410: PUSH
52411: LD_VAR 0 1
52415: PUSH
52416: LD_VAR 0 2
52420: PUSH
52421: LD_INT 4
52423: PLUS
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: PUSH
52433: LD_VAR 0 1
52437: PUSH
52438: LD_INT 3
52440: PLUS
52441: PUSH
52442: LD_VAR 0 2
52446: PUSH
52447: LD_INT 3
52449: PLUS
52450: PUSH
52451: LD_INT 5
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: PUSH
52459: LD_VAR 0 1
52463: PUSH
52464: LD_INT 4
52466: PLUS
52467: PUSH
52468: LD_VAR 0 2
52472: PUSH
52473: LD_INT 4
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: PUSH
52481: LD_VAR 0 1
52485: PUSH
52486: LD_VAR 0 2
52490: PUSH
52491: LD_INT 3
52493: MINUS
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: PUSH
52503: LD_VAR 0 1
52507: PUSH
52508: LD_INT 4
52510: MINUS
52511: PUSH
52512: LD_VAR 0 2
52516: PUSH
52517: LD_INT 4
52519: MINUS
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// end ; 5 :
52536: GO 52676
52538: LD_INT 5
52540: DOUBLE
52541: EQUAL
52542: IFTRUE 52546
52544: GO 52675
52546: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52547: LD_ADDR_VAR 0 5
52551: PUSH
52552: LD_VAR 0 1
52556: PUSH
52557: LD_INT 4
52559: MINUS
52560: PUSH
52561: LD_VAR 0 2
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: PUSH
52574: LD_VAR 0 1
52578: PUSH
52579: LD_VAR 0 2
52583: PUSH
52584: LD_INT 4
52586: MINUS
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: PUSH
52596: LD_VAR 0 1
52600: PUSH
52601: LD_INT 4
52603: PLUS
52604: PUSH
52605: LD_VAR 0 2
52609: PUSH
52610: LD_INT 4
52612: PLUS
52613: PUSH
52614: LD_INT 5
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: PUSH
52622: LD_VAR 0 1
52626: PUSH
52627: LD_INT 3
52629: PLUS
52630: PUSH
52631: LD_VAR 0 2
52635: PUSH
52636: LD_INT 4
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: PUSH
52644: LD_VAR 0 1
52648: PUSH
52649: LD_VAR 0 2
52653: PUSH
52654: LD_INT 3
52656: PLUS
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// end ; end ;
52673: GO 52676
52675: POP
// result := list ;
52676: LD_ADDR_VAR 0 4
52680: PUSH
52681: LD_VAR 0 5
52685: ST_TO_ADDR
// end ;
52686: LD_VAR 0 4
52690: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52691: LD_INT 0
52693: PPUSH
52694: PPUSH
52695: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52696: LD_VAR 0 1
52700: NOT
52701: PUSH
52702: LD_VAR 0 2
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: IN
52725: NOT
52726: OR
52727: IFFALSE 52731
// exit ;
52729: GO 52814
// tmp := [ ] ;
52731: LD_ADDR_VAR 0 5
52735: PUSH
52736: EMPTY
52737: ST_TO_ADDR
// for i in units do
52738: LD_ADDR_VAR 0 4
52742: PUSH
52743: LD_VAR 0 1
52747: PUSH
52748: FOR_IN
52749: IFFALSE 52783
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52751: LD_ADDR_VAR 0 5
52755: PUSH
52756: LD_VAR 0 5
52760: PPUSH
52761: LD_VAR 0 4
52765: PPUSH
52766: LD_VAR 0 2
52770: PPUSH
52771: CALL_OW 259
52775: PPUSH
52776: CALL 54187 0 2
52780: ST_TO_ADDR
52781: GO 52748
52783: POP
52784: POP
// if not tmp then
52785: LD_VAR 0 5
52789: NOT
52790: IFFALSE 52794
// exit ;
52792: GO 52814
// result := SortListByListDesc ( units , tmp ) ;
52794: LD_ADDR_VAR 0 3
52798: PUSH
52799: LD_VAR 0 1
52803: PPUSH
52804: LD_VAR 0 5
52808: PPUSH
52809: CALL_OW 77
52813: ST_TO_ADDR
// end ;
52814: LD_VAR 0 3
52818: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52819: LD_INT 0
52821: PPUSH
52822: PPUSH
52823: PPUSH
// result := false ;
52824: LD_ADDR_VAR 0 3
52828: PUSH
52829: LD_INT 0
52831: ST_TO_ADDR
// if not building then
52832: LD_VAR 0 2
52836: NOT
52837: IFFALSE 52841
// exit ;
52839: GO 52979
// x := GetX ( building ) ;
52841: LD_ADDR_VAR 0 4
52845: PUSH
52846: LD_VAR 0 2
52850: PPUSH
52851: CALL_OW 250
52855: ST_TO_ADDR
// y := GetY ( building ) ;
52856: LD_ADDR_VAR 0 5
52860: PUSH
52861: LD_VAR 0 2
52865: PPUSH
52866: CALL_OW 251
52870: ST_TO_ADDR
// if not x or not y then
52871: LD_VAR 0 4
52875: NOT
52876: PUSH
52877: LD_VAR 0 5
52881: NOT
52882: OR
52883: IFFALSE 52887
// exit ;
52885: GO 52979
// if GetTaskList ( unit ) then
52887: LD_VAR 0 1
52891: PPUSH
52892: CALL_OW 437
52896: IFFALSE 52979
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52898: LD_STRING e
52900: PUSH
52901: LD_VAR 0 1
52905: PPUSH
52906: CALL_OW 437
52910: PUSH
52911: LD_INT 1
52913: ARRAY
52914: PUSH
52915: LD_INT 1
52917: ARRAY
52918: EQUAL
52919: PUSH
52920: LD_VAR 0 4
52924: PUSH
52925: LD_VAR 0 1
52929: PPUSH
52930: CALL_OW 437
52934: PUSH
52935: LD_INT 1
52937: ARRAY
52938: PUSH
52939: LD_INT 2
52941: ARRAY
52942: EQUAL
52943: AND
52944: PUSH
52945: LD_VAR 0 5
52949: PUSH
52950: LD_VAR 0 1
52954: PPUSH
52955: CALL_OW 437
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PUSH
52964: LD_INT 3
52966: ARRAY
52967: EQUAL
52968: AND
52969: IFFALSE 52979
// result := true end ;
52971: LD_ADDR_VAR 0 3
52975: PUSH
52976: LD_INT 1
52978: ST_TO_ADDR
// end ;
52979: LD_VAR 0 3
52983: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52984: LD_INT 0
52986: PPUSH
// result := false ;
52987: LD_ADDR_VAR 0 4
52991: PUSH
52992: LD_INT 0
52994: ST_TO_ADDR
// if GetTaskList ( unit ) then
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL_OW 437
53004: IFFALSE 53087
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53006: LD_STRING M
53008: PUSH
53009: LD_VAR 0 1
53013: PPUSH
53014: CALL_OW 437
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PUSH
53023: LD_INT 1
53025: ARRAY
53026: EQUAL
53027: PUSH
53028: LD_VAR 0 2
53032: PUSH
53033: LD_VAR 0 1
53037: PPUSH
53038: CALL_OW 437
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: PUSH
53047: LD_INT 2
53049: ARRAY
53050: EQUAL
53051: AND
53052: PUSH
53053: LD_VAR 0 3
53057: PUSH
53058: LD_VAR 0 1
53062: PPUSH
53063: CALL_OW 437
53067: PUSH
53068: LD_INT 1
53070: ARRAY
53071: PUSH
53072: LD_INT 3
53074: ARRAY
53075: EQUAL
53076: AND
53077: IFFALSE 53087
// result := true ;
53079: LD_ADDR_VAR 0 4
53083: PUSH
53084: LD_INT 1
53086: ST_TO_ADDR
// end ; end ;
53087: LD_VAR 0 4
53091: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53092: LD_INT 0
53094: PPUSH
53095: PPUSH
53096: PPUSH
53097: PPUSH
// if not unit or not area then
53098: LD_VAR 0 1
53102: NOT
53103: PUSH
53104: LD_VAR 0 2
53108: NOT
53109: OR
53110: IFFALSE 53114
// exit ;
53112: GO 53290
// tmp := AreaToList ( area , i ) ;
53114: LD_ADDR_VAR 0 6
53118: PUSH
53119: LD_VAR 0 2
53123: PPUSH
53124: LD_VAR 0 5
53128: PPUSH
53129: CALL_OW 517
53133: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53134: LD_ADDR_VAR 0 5
53138: PUSH
53139: DOUBLE
53140: LD_INT 1
53142: DEC
53143: ST_TO_ADDR
53144: LD_VAR 0 6
53148: PUSH
53149: LD_INT 1
53151: ARRAY
53152: PUSH
53153: FOR_TO
53154: IFFALSE 53288
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53156: LD_ADDR_VAR 0 7
53160: PUSH
53161: LD_VAR 0 6
53165: PUSH
53166: LD_INT 1
53168: ARRAY
53169: PUSH
53170: LD_VAR 0 5
53174: ARRAY
53175: PUSH
53176: LD_VAR 0 6
53180: PUSH
53181: LD_INT 2
53183: ARRAY
53184: PUSH
53185: LD_VAR 0 5
53189: ARRAY
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53195: LD_INT 92
53197: PUSH
53198: LD_VAR 0 7
53202: PUSH
53203: LD_INT 1
53205: ARRAY
53206: PUSH
53207: LD_VAR 0 7
53211: PUSH
53212: LD_INT 2
53214: ARRAY
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: PPUSH
53225: CALL_OW 69
53229: PUSH
53230: LD_INT 0
53232: EQUAL
53233: IFFALSE 53286
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53235: LD_VAR 0 1
53239: PPUSH
53240: LD_VAR 0 7
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: PPUSH
53249: LD_VAR 0 7
53253: PUSH
53254: LD_INT 2
53256: ARRAY
53257: PPUSH
53258: LD_VAR 0 3
53262: PPUSH
53263: CALL_OW 48
// result := IsPlaced ( unit ) ;
53267: LD_ADDR_VAR 0 4
53271: PUSH
53272: LD_VAR 0 1
53276: PPUSH
53277: CALL_OW 305
53281: ST_TO_ADDR
// exit ;
53282: POP
53283: POP
53284: GO 53290
// end ; end ;
53286: GO 53153
53288: POP
53289: POP
// end ;
53290: LD_VAR 0 4
53294: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53295: LD_INT 0
53297: PPUSH
53298: PPUSH
53299: PPUSH
// if not side or side > 8 then
53300: LD_VAR 0 1
53304: NOT
53305: PUSH
53306: LD_VAR 0 1
53310: PUSH
53311: LD_INT 8
53313: GREATER
53314: OR
53315: IFFALSE 53319
// exit ;
53317: GO 53506
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53319: LD_ADDR_VAR 0 4
53323: PUSH
53324: LD_INT 22
53326: PUSH
53327: LD_VAR 0 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 21
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PPUSH
53350: CALL_OW 69
53354: ST_TO_ADDR
// if not tmp then
53355: LD_VAR 0 4
53359: NOT
53360: IFFALSE 53364
// exit ;
53362: GO 53506
// enable_addtolog := true ;
53364: LD_ADDR_OWVAR 81
53368: PUSH
53369: LD_INT 1
53371: ST_TO_ADDR
// AddToLog ( [ ) ;
53372: LD_STRING [
53374: PPUSH
53375: CALL_OW 561
// for i in tmp do
53379: LD_ADDR_VAR 0 3
53383: PUSH
53384: LD_VAR 0 4
53388: PUSH
53389: FOR_IN
53390: IFFALSE 53497
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53392: LD_STRING [
53394: PUSH
53395: LD_VAR 0 3
53399: PPUSH
53400: CALL_OW 266
53404: STR
53405: PUSH
53406: LD_STRING , 
53408: STR
53409: PUSH
53410: LD_VAR 0 3
53414: PPUSH
53415: CALL_OW 250
53419: STR
53420: PUSH
53421: LD_STRING , 
53423: STR
53424: PUSH
53425: LD_VAR 0 3
53429: PPUSH
53430: CALL_OW 251
53434: STR
53435: PUSH
53436: LD_STRING , 
53438: STR
53439: PUSH
53440: LD_VAR 0 3
53444: PPUSH
53445: CALL_OW 254
53449: STR
53450: PUSH
53451: LD_STRING , 
53453: STR
53454: PUSH
53455: LD_VAR 0 3
53459: PPUSH
53460: LD_INT 1
53462: PPUSH
53463: CALL_OW 268
53467: STR
53468: PUSH
53469: LD_STRING , 
53471: STR
53472: PUSH
53473: LD_VAR 0 3
53477: PPUSH
53478: LD_INT 2
53480: PPUSH
53481: CALL_OW 268
53485: STR
53486: PUSH
53487: LD_STRING ],
53489: STR
53490: PPUSH
53491: CALL_OW 561
// end ;
53495: GO 53389
53497: POP
53498: POP
// AddToLog ( ]; ) ;
53499: LD_STRING ];
53501: PPUSH
53502: CALL_OW 561
// end ;
53506: LD_VAR 0 2
53510: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53511: LD_INT 0
53513: PPUSH
53514: PPUSH
53515: PPUSH
53516: PPUSH
53517: PPUSH
// if not area or not rate or not max then
53518: LD_VAR 0 1
53522: NOT
53523: PUSH
53524: LD_VAR 0 2
53528: NOT
53529: OR
53530: PUSH
53531: LD_VAR 0 4
53535: NOT
53536: OR
53537: IFFALSE 53541
// exit ;
53539: GO 53730
// while 1 do
53541: LD_INT 1
53543: IFFALSE 53730
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53545: LD_ADDR_VAR 0 9
53549: PUSH
53550: LD_VAR 0 1
53554: PPUSH
53555: LD_INT 1
53557: PPUSH
53558: CALL_OW 287
53562: PUSH
53563: LD_INT 10
53565: MUL
53566: ST_TO_ADDR
// r := rate / 10 ;
53567: LD_ADDR_VAR 0 7
53571: PUSH
53572: LD_VAR 0 2
53576: PUSH
53577: LD_INT 10
53579: DIVREAL
53580: ST_TO_ADDR
// time := 1 1$00 ;
53581: LD_ADDR_VAR 0 8
53585: PUSH
53586: LD_INT 2100
53588: ST_TO_ADDR
// if amount < min then
53589: LD_VAR 0 9
53593: PUSH
53594: LD_VAR 0 3
53598: LESS
53599: IFFALSE 53617
// r := r * 2 else
53601: LD_ADDR_VAR 0 7
53605: PUSH
53606: LD_VAR 0 7
53610: PUSH
53611: LD_INT 2
53613: MUL
53614: ST_TO_ADDR
53615: GO 53643
// if amount > max then
53617: LD_VAR 0 9
53621: PUSH
53622: LD_VAR 0 4
53626: GREATER
53627: IFFALSE 53643
// r := r / 2 ;
53629: LD_ADDR_VAR 0 7
53633: PUSH
53634: LD_VAR 0 7
53638: PUSH
53639: LD_INT 2
53641: DIVREAL
53642: ST_TO_ADDR
// time := time / r ;
53643: LD_ADDR_VAR 0 8
53647: PUSH
53648: LD_VAR 0 8
53652: PUSH
53653: LD_VAR 0 7
53657: DIVREAL
53658: ST_TO_ADDR
// if time < 0 then
53659: LD_VAR 0 8
53663: PUSH
53664: LD_INT 0
53666: LESS
53667: IFFALSE 53684
// time := time * - 1 ;
53669: LD_ADDR_VAR 0 8
53673: PUSH
53674: LD_VAR 0 8
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: MUL
53683: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53684: LD_VAR 0 8
53688: PUSH
53689: LD_INT 35
53691: PPUSH
53692: LD_INT 875
53694: PPUSH
53695: CALL_OW 12
53699: PLUS
53700: PPUSH
53701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53705: LD_INT 1
53707: PPUSH
53708: LD_INT 5
53710: PPUSH
53711: CALL_OW 12
53715: PPUSH
53716: LD_VAR 0 1
53720: PPUSH
53721: LD_INT 1
53723: PPUSH
53724: CALL_OW 55
// end ;
53728: GO 53541
// end ;
53730: LD_VAR 0 5
53734: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53735: LD_INT 0
53737: PPUSH
53738: PPUSH
53739: PPUSH
53740: PPUSH
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
// if not turrets or not factories then
53745: LD_VAR 0 1
53749: NOT
53750: PUSH
53751: LD_VAR 0 2
53755: NOT
53756: OR
53757: IFFALSE 53761
// exit ;
53759: GO 54068
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53761: LD_ADDR_VAR 0 10
53765: PUSH
53766: LD_INT 5
53768: PUSH
53769: LD_INT 6
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: LD_INT 5
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 24
53803: PUSH
53804: LD_INT 25
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 23
53813: PUSH
53814: LD_INT 27
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 42
53827: PUSH
53828: LD_INT 43
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 44
53837: PUSH
53838: LD_INT 46
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 45
53847: PUSH
53848: LD_INT 47
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// result := [ ] ;
53865: LD_ADDR_VAR 0 3
53869: PUSH
53870: EMPTY
53871: ST_TO_ADDR
// for i in turrets do
53872: LD_ADDR_VAR 0 4
53876: PUSH
53877: LD_VAR 0 1
53881: PUSH
53882: FOR_IN
53883: IFFALSE 54066
// begin nat := GetNation ( i ) ;
53885: LD_ADDR_VAR 0 7
53889: PUSH
53890: LD_VAR 0 4
53894: PPUSH
53895: CALL_OW 248
53899: ST_TO_ADDR
// weapon := 0 ;
53900: LD_ADDR_VAR 0 8
53904: PUSH
53905: LD_INT 0
53907: ST_TO_ADDR
// if not nat then
53908: LD_VAR 0 7
53912: NOT
53913: IFFALSE 53917
// continue ;
53915: GO 53882
// for j in list [ nat ] do
53917: LD_ADDR_VAR 0 5
53921: PUSH
53922: LD_VAR 0 10
53926: PUSH
53927: LD_VAR 0 7
53931: ARRAY
53932: PUSH
53933: FOR_IN
53934: IFFALSE 53975
// if GetBWeapon ( i ) = j [ 1 ] then
53936: LD_VAR 0 4
53940: PPUSH
53941: CALL_OW 269
53945: PUSH
53946: LD_VAR 0 5
53950: PUSH
53951: LD_INT 1
53953: ARRAY
53954: EQUAL
53955: IFFALSE 53973
// begin weapon := j [ 2 ] ;
53957: LD_ADDR_VAR 0 8
53961: PUSH
53962: LD_VAR 0 5
53966: PUSH
53967: LD_INT 2
53969: ARRAY
53970: ST_TO_ADDR
// break ;
53971: GO 53975
// end ;
53973: GO 53933
53975: POP
53976: POP
// if not weapon then
53977: LD_VAR 0 8
53981: NOT
53982: IFFALSE 53986
// continue ;
53984: GO 53882
// for k in factories do
53986: LD_ADDR_VAR 0 6
53990: PUSH
53991: LD_VAR 0 2
53995: PUSH
53996: FOR_IN
53997: IFFALSE 54062
// begin weapons := AvailableWeaponList ( k ) ;
53999: LD_ADDR_VAR 0 9
54003: PUSH
54004: LD_VAR 0 6
54008: PPUSH
54009: CALL_OW 478
54013: ST_TO_ADDR
// if not weapons then
54014: LD_VAR 0 9
54018: NOT
54019: IFFALSE 54023
// continue ;
54021: GO 53996
// if weapon in weapons then
54023: LD_VAR 0 8
54027: PUSH
54028: LD_VAR 0 9
54032: IN
54033: IFFALSE 54060
// begin result := [ i , weapon ] ;
54035: LD_ADDR_VAR 0 3
54039: PUSH
54040: LD_VAR 0 4
54044: PUSH
54045: LD_VAR 0 8
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// exit ;
54054: POP
54055: POP
54056: POP
54057: POP
54058: GO 54068
// end ; end ;
54060: GO 53996
54062: POP
54063: POP
// end ;
54064: GO 53882
54066: POP
54067: POP
// end ;
54068: LD_VAR 0 3
54072: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54073: LD_INT 0
54075: PPUSH
// if not side or side > 8 then
54076: LD_VAR 0 3
54080: NOT
54081: PUSH
54082: LD_VAR 0 3
54086: PUSH
54087: LD_INT 8
54089: GREATER
54090: OR
54091: IFFALSE 54095
// exit ;
54093: GO 54154
// if not range then
54095: LD_VAR 0 4
54099: NOT
54100: IFFALSE 54111
// range := - 12 ;
54102: LD_ADDR_VAR 0 4
54106: PUSH
54107: LD_INT 12
54109: NEG
54110: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54111: LD_VAR 0 1
54115: PPUSH
54116: LD_VAR 0 2
54120: PPUSH
54121: LD_VAR 0 3
54125: PPUSH
54126: LD_VAR 0 4
54130: PPUSH
54131: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54135: LD_VAR 0 1
54139: PPUSH
54140: LD_VAR 0 2
54144: PPUSH
54145: LD_VAR 0 3
54149: PPUSH
54150: CALL_OW 331
// end ;
54154: LD_VAR 0 5
54158: RET
// export function Video ( mode ) ; begin
54159: LD_INT 0
54161: PPUSH
// ingame_video = mode ;
54162: LD_ADDR_OWVAR 52
54166: PUSH
54167: LD_VAR 0 1
54171: ST_TO_ADDR
// interface_hidden = mode ;
54172: LD_ADDR_OWVAR 54
54176: PUSH
54177: LD_VAR 0 1
54181: ST_TO_ADDR
// end ;
54182: LD_VAR 0 2
54186: RET
// export function Join ( array , element ) ; begin
54187: LD_INT 0
54189: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54190: LD_ADDR_VAR 0 3
54194: PUSH
54195: LD_VAR 0 1
54199: PPUSH
54200: LD_VAR 0 1
54204: PUSH
54205: LD_INT 1
54207: PLUS
54208: PPUSH
54209: LD_VAR 0 2
54213: PPUSH
54214: CALL_OW 1
54218: ST_TO_ADDR
// end ;
54219: LD_VAR 0 3
54223: RET
// export function JoinUnion ( array , element ) ; begin
54224: LD_INT 0
54226: PPUSH
// result := array union element ;
54227: LD_ADDR_VAR 0 3
54231: PUSH
54232: LD_VAR 0 1
54236: PUSH
54237: LD_VAR 0 2
54241: UNION
54242: ST_TO_ADDR
// end ;
54243: LD_VAR 0 3
54247: RET
// export function GetBehemoths ( side ) ; begin
54248: LD_INT 0
54250: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54251: LD_ADDR_VAR 0 2
54255: PUSH
54256: LD_INT 22
54258: PUSH
54259: LD_VAR 0 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 31
54270: PUSH
54271: LD_INT 25
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PPUSH
54282: CALL_OW 69
54286: ST_TO_ADDR
// end ;
54287: LD_VAR 0 2
54291: RET
// export function Shuffle ( array ) ; var i , index ; begin
54292: LD_INT 0
54294: PPUSH
54295: PPUSH
54296: PPUSH
// result := [ ] ;
54297: LD_ADDR_VAR 0 2
54301: PUSH
54302: EMPTY
54303: ST_TO_ADDR
// if not array then
54304: LD_VAR 0 1
54308: NOT
54309: IFFALSE 54313
// exit ;
54311: GO 54412
// Randomize ;
54313: CALL_OW 10
// for i = array downto 1 do
54317: LD_ADDR_VAR 0 3
54321: PUSH
54322: DOUBLE
54323: LD_VAR 0 1
54327: INC
54328: ST_TO_ADDR
54329: LD_INT 1
54331: PUSH
54332: FOR_DOWNTO
54333: IFFALSE 54410
// begin index := rand ( 1 , array ) ;
54335: LD_ADDR_VAR 0 4
54339: PUSH
54340: LD_INT 1
54342: PPUSH
54343: LD_VAR 0 1
54347: PPUSH
54348: CALL_OW 12
54352: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54353: LD_ADDR_VAR 0 2
54357: PUSH
54358: LD_VAR 0 2
54362: PPUSH
54363: LD_VAR 0 2
54367: PUSH
54368: LD_INT 1
54370: PLUS
54371: PPUSH
54372: LD_VAR 0 1
54376: PUSH
54377: LD_VAR 0 4
54381: ARRAY
54382: PPUSH
54383: CALL_OW 2
54387: ST_TO_ADDR
// array := Delete ( array , index ) ;
54388: LD_ADDR_VAR 0 1
54392: PUSH
54393: LD_VAR 0 1
54397: PPUSH
54398: LD_VAR 0 4
54402: PPUSH
54403: CALL_OW 3
54407: ST_TO_ADDR
// end ;
54408: GO 54332
54410: POP
54411: POP
// end ;
54412: LD_VAR 0 2
54416: RET
// export function GetBaseMaterials ( base ) ; begin
54417: LD_INT 0
54419: PPUSH
// result := [ 0 , 0 , 0 ] ;
54420: LD_ADDR_VAR 0 2
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// if not base then
54439: LD_VAR 0 1
54443: NOT
54444: IFFALSE 54448
// exit ;
54446: GO 54497
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54448: LD_ADDR_VAR 0 2
54452: PUSH
54453: LD_VAR 0 1
54457: PPUSH
54458: LD_INT 1
54460: PPUSH
54461: CALL_OW 275
54465: PUSH
54466: LD_VAR 0 1
54470: PPUSH
54471: LD_INT 2
54473: PPUSH
54474: CALL_OW 275
54478: PUSH
54479: LD_VAR 0 1
54483: PPUSH
54484: LD_INT 3
54486: PPUSH
54487: CALL_OW 275
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: ST_TO_ADDR
// end ;
54497: LD_VAR 0 2
54501: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54502: LD_INT 0
54504: PPUSH
54505: PPUSH
// result := array ;
54506: LD_ADDR_VAR 0 3
54510: PUSH
54511: LD_VAR 0 1
54515: ST_TO_ADDR
// if size >= result then
54516: LD_VAR 0 2
54520: PUSH
54521: LD_VAR 0 3
54525: GREATEREQUAL
54526: IFFALSE 54530
// exit ;
54528: GO 54580
// if size then
54530: LD_VAR 0 2
54534: IFFALSE 54580
// for i := array downto size do
54536: LD_ADDR_VAR 0 4
54540: PUSH
54541: DOUBLE
54542: LD_VAR 0 1
54546: INC
54547: ST_TO_ADDR
54548: LD_VAR 0 2
54552: PUSH
54553: FOR_DOWNTO
54554: IFFALSE 54578
// result := Delete ( result , result ) ;
54556: LD_ADDR_VAR 0 3
54560: PUSH
54561: LD_VAR 0 3
54565: PPUSH
54566: LD_VAR 0 3
54570: PPUSH
54571: CALL_OW 3
54575: ST_TO_ADDR
54576: GO 54553
54578: POP
54579: POP
// end ;
54580: LD_VAR 0 3
54584: RET
// export function ComExit ( unit ) ; var tmp ; begin
54585: LD_INT 0
54587: PPUSH
54588: PPUSH
// if not IsInUnit ( unit ) then
54589: LD_VAR 0 1
54593: PPUSH
54594: CALL_OW 310
54598: NOT
54599: IFFALSE 54603
// exit ;
54601: GO 54663
// tmp := IsInUnit ( unit ) ;
54603: LD_ADDR_VAR 0 3
54607: PUSH
54608: LD_VAR 0 1
54612: PPUSH
54613: CALL_OW 310
54617: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54618: LD_VAR 0 3
54622: PPUSH
54623: CALL_OW 247
54627: PUSH
54628: LD_INT 2
54630: EQUAL
54631: IFFALSE 54644
// ComExitVehicle ( unit ) else
54633: LD_VAR 0 1
54637: PPUSH
54638: CALL_OW 121
54642: GO 54653
// ComExitBuilding ( unit ) ;
54644: LD_VAR 0 1
54648: PPUSH
54649: CALL_OW 122
// result := tmp ;
54653: LD_ADDR_VAR 0 2
54657: PUSH
54658: LD_VAR 0 3
54662: ST_TO_ADDR
// end ;
54663: LD_VAR 0 2
54667: RET
// export function ComExitAll ( units ) ; var i ; begin
54668: LD_INT 0
54670: PPUSH
54671: PPUSH
// if not units then
54672: LD_VAR 0 1
54676: NOT
54677: IFFALSE 54681
// exit ;
54679: GO 54707
// for i in units do
54681: LD_ADDR_VAR 0 3
54685: PUSH
54686: LD_VAR 0 1
54690: PUSH
54691: FOR_IN
54692: IFFALSE 54705
// ComExit ( i ) ;
54694: LD_VAR 0 3
54698: PPUSH
54699: CALL 54585 0 1
54703: GO 54691
54705: POP
54706: POP
// end ;
54707: LD_VAR 0 2
54711: RET
// export function ResetHc ; begin
54712: LD_INT 0
54714: PPUSH
// InitHc ;
54715: CALL_OW 19
// hc_importance := 0 ;
54719: LD_ADDR_OWVAR 32
54723: PUSH
54724: LD_INT 0
54726: ST_TO_ADDR
// end ;
54727: LD_VAR 0 1
54731: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54732: LD_INT 0
54734: PPUSH
54735: PPUSH
54736: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54737: LD_ADDR_VAR 0 6
54741: PUSH
54742: LD_VAR 0 1
54746: PUSH
54747: LD_VAR 0 3
54751: PLUS
54752: PUSH
54753: LD_INT 2
54755: DIV
54756: ST_TO_ADDR
// if _x < 0 then
54757: LD_VAR 0 6
54761: PUSH
54762: LD_INT 0
54764: LESS
54765: IFFALSE 54782
// _x := _x * - 1 ;
54767: LD_ADDR_VAR 0 6
54771: PUSH
54772: LD_VAR 0 6
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: MUL
54781: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54782: LD_ADDR_VAR 0 7
54786: PUSH
54787: LD_VAR 0 2
54791: PUSH
54792: LD_VAR 0 4
54796: PLUS
54797: PUSH
54798: LD_INT 2
54800: DIV
54801: ST_TO_ADDR
// if _y < 0 then
54802: LD_VAR 0 7
54806: PUSH
54807: LD_INT 0
54809: LESS
54810: IFFALSE 54827
// _y := _y * - 1 ;
54812: LD_ADDR_VAR 0 7
54816: PUSH
54817: LD_VAR 0 7
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: MUL
54826: ST_TO_ADDR
// result := [ _x , _y ] ;
54827: LD_ADDR_VAR 0 5
54831: PUSH
54832: LD_VAR 0 6
54836: PUSH
54837: LD_VAR 0 7
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: ST_TO_ADDR
// end ;
54846: LD_VAR 0 5
54850: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54851: LD_INT 0
54853: PPUSH
54854: PPUSH
54855: PPUSH
54856: PPUSH
// task := GetTaskList ( unit ) ;
54857: LD_ADDR_VAR 0 7
54861: PUSH
54862: LD_VAR 0 1
54866: PPUSH
54867: CALL_OW 437
54871: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54872: LD_VAR 0 7
54876: NOT
54877: PUSH
54878: LD_VAR 0 1
54882: PPUSH
54883: LD_VAR 0 2
54887: PPUSH
54888: CALL_OW 308
54892: NOT
54893: AND
54894: IFFALSE 54898
// exit ;
54896: GO 55016
// if IsInArea ( unit , area ) then
54898: LD_VAR 0 1
54902: PPUSH
54903: LD_VAR 0 2
54907: PPUSH
54908: CALL_OW 308
54912: IFFALSE 54930
// begin ComMoveToArea ( unit , goAway ) ;
54914: LD_VAR 0 1
54918: PPUSH
54919: LD_VAR 0 3
54923: PPUSH
54924: CALL_OW 113
// exit ;
54928: GO 55016
// end ; if task [ 1 ] [ 1 ] <> M then
54930: LD_VAR 0 7
54934: PUSH
54935: LD_INT 1
54937: ARRAY
54938: PUSH
54939: LD_INT 1
54941: ARRAY
54942: PUSH
54943: LD_STRING M
54945: NONEQUAL
54946: IFFALSE 54950
// exit ;
54948: GO 55016
// x := task [ 1 ] [ 2 ] ;
54950: LD_ADDR_VAR 0 5
54954: PUSH
54955: LD_VAR 0 7
54959: PUSH
54960: LD_INT 1
54962: ARRAY
54963: PUSH
54964: LD_INT 2
54966: ARRAY
54967: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54968: LD_ADDR_VAR 0 6
54972: PUSH
54973: LD_VAR 0 7
54977: PUSH
54978: LD_INT 1
54980: ARRAY
54981: PUSH
54982: LD_INT 3
54984: ARRAY
54985: ST_TO_ADDR
// if InArea ( x , y , area ) then
54986: LD_VAR 0 5
54990: PPUSH
54991: LD_VAR 0 6
54995: PPUSH
54996: LD_VAR 0 2
55000: PPUSH
55001: CALL_OW 309
55005: IFFALSE 55016
// ComStop ( unit ) ;
55007: LD_VAR 0 1
55011: PPUSH
55012: CALL_OW 141
// end ;
55016: LD_VAR 0 4
55020: RET
// export function Abs ( value ) ; begin
55021: LD_INT 0
55023: PPUSH
// result := value ;
55024: LD_ADDR_VAR 0 2
55028: PUSH
55029: LD_VAR 0 1
55033: ST_TO_ADDR
// if value < 0 then
55034: LD_VAR 0 1
55038: PUSH
55039: LD_INT 0
55041: LESS
55042: IFFALSE 55059
// result := value * - 1 ;
55044: LD_ADDR_VAR 0 2
55048: PUSH
55049: LD_VAR 0 1
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: MUL
55058: ST_TO_ADDR
// end ;
55059: LD_VAR 0 2
55063: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55064: LD_INT 0
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
// if not unit or not building then
55074: LD_VAR 0 1
55078: NOT
55079: PUSH
55080: LD_VAR 0 2
55084: NOT
55085: OR
55086: IFFALSE 55090
// exit ;
55088: GO 55316
// x := GetX ( building ) ;
55090: LD_ADDR_VAR 0 4
55094: PUSH
55095: LD_VAR 0 2
55099: PPUSH
55100: CALL_OW 250
55104: ST_TO_ADDR
// y := GetY ( building ) ;
55105: LD_ADDR_VAR 0 6
55109: PUSH
55110: LD_VAR 0 2
55114: PPUSH
55115: CALL_OW 251
55119: ST_TO_ADDR
// d := GetDir ( building ) ;
55120: LD_ADDR_VAR 0 8
55124: PUSH
55125: LD_VAR 0 2
55129: PPUSH
55130: CALL_OW 254
55134: ST_TO_ADDR
// r := 4 ;
55135: LD_ADDR_VAR 0 9
55139: PUSH
55140: LD_INT 4
55142: ST_TO_ADDR
// for i := 1 to 5 do
55143: LD_ADDR_VAR 0 10
55147: PUSH
55148: DOUBLE
55149: LD_INT 1
55151: DEC
55152: ST_TO_ADDR
55153: LD_INT 5
55155: PUSH
55156: FOR_TO
55157: IFFALSE 55314
// begin _x := ShiftX ( x , d , r + i ) ;
55159: LD_ADDR_VAR 0 5
55163: PUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: LD_VAR 0 8
55173: PPUSH
55174: LD_VAR 0 9
55178: PUSH
55179: LD_VAR 0 10
55183: PLUS
55184: PPUSH
55185: CALL_OW 272
55189: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55190: LD_ADDR_VAR 0 7
55194: PUSH
55195: LD_VAR 0 6
55199: PPUSH
55200: LD_VAR 0 8
55204: PPUSH
55205: LD_VAR 0 9
55209: PUSH
55210: LD_VAR 0 10
55214: PLUS
55215: PPUSH
55216: CALL_OW 273
55220: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55221: LD_VAR 0 5
55225: PPUSH
55226: LD_VAR 0 7
55230: PPUSH
55231: CALL_OW 488
55235: PUSH
55236: LD_VAR 0 5
55240: PPUSH
55241: LD_VAR 0 7
55245: PPUSH
55246: CALL_OW 428
55250: PPUSH
55251: CALL_OW 247
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: IN
55266: NOT
55267: AND
55268: IFFALSE 55312
// begin ComMoveXY ( unit , _x , _y ) ;
55270: LD_VAR 0 1
55274: PPUSH
55275: LD_VAR 0 5
55279: PPUSH
55280: LD_VAR 0 7
55284: PPUSH
55285: CALL_OW 111
// result := [ _x , _y ] ;
55289: LD_ADDR_VAR 0 3
55293: PUSH
55294: LD_VAR 0 5
55298: PUSH
55299: LD_VAR 0 7
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// exit ;
55308: POP
55309: POP
55310: GO 55316
// end ; end ;
55312: GO 55156
55314: POP
55315: POP
// end ;
55316: LD_VAR 0 3
55320: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55321: LD_INT 0
55323: PPUSH
55324: PPUSH
55325: PPUSH
// result := 0 ;
55326: LD_ADDR_VAR 0 3
55330: PUSH
55331: LD_INT 0
55333: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55334: LD_VAR 0 1
55338: PUSH
55339: LD_INT 0
55341: LESS
55342: PUSH
55343: LD_VAR 0 1
55347: PUSH
55348: LD_INT 8
55350: GREATER
55351: OR
55352: PUSH
55353: LD_VAR 0 2
55357: PUSH
55358: LD_INT 0
55360: LESS
55361: OR
55362: PUSH
55363: LD_VAR 0 2
55367: PUSH
55368: LD_INT 8
55370: GREATER
55371: OR
55372: IFFALSE 55376
// exit ;
55374: GO 55451
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55376: LD_ADDR_VAR 0 4
55380: PUSH
55381: LD_INT 22
55383: PUSH
55384: LD_VAR 0 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PPUSH
55393: CALL_OW 69
55397: PUSH
55398: FOR_IN
55399: IFFALSE 55449
// begin un := UnitShoot ( i ) ;
55401: LD_ADDR_VAR 0 5
55405: PUSH
55406: LD_VAR 0 4
55410: PPUSH
55411: CALL_OW 504
55415: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55416: LD_VAR 0 5
55420: PPUSH
55421: CALL_OW 255
55425: PUSH
55426: LD_VAR 0 1
55430: EQUAL
55431: IFFALSE 55447
// begin result := un ;
55433: LD_ADDR_VAR 0 3
55437: PUSH
55438: LD_VAR 0 5
55442: ST_TO_ADDR
// exit ;
55443: POP
55444: POP
55445: GO 55451
// end ; end ;
55447: GO 55398
55449: POP
55450: POP
// end ;
55451: LD_VAR 0 3
55455: RET
// export function GetCargoBay ( units ) ; begin
55456: LD_INT 0
55458: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55459: LD_ADDR_VAR 0 2
55463: PUSH
55464: LD_VAR 0 1
55468: PPUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 34
55474: PUSH
55475: LD_INT 12
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 34
55484: PUSH
55485: LD_INT 51
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 34
55494: PUSH
55495: LD_INT 32
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 34
55504: PUSH
55505: LD_INT 89
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: PPUSH
55519: CALL_OW 72
55523: ST_TO_ADDR
// end ;
55524: LD_VAR 0 2
55528: RET
// export function Negate ( value ) ; begin
55529: LD_INT 0
55531: PPUSH
// result := not value ;
55532: LD_ADDR_VAR 0 2
55536: PUSH
55537: LD_VAR 0 1
55541: NOT
55542: ST_TO_ADDR
// end ;
55543: LD_VAR 0 2
55547: RET
// export function Inc ( value ) ; begin
55548: LD_INT 0
55550: PPUSH
// result := value + 1 ;
55551: LD_ADDR_VAR 0 2
55555: PUSH
55556: LD_VAR 0 1
55560: PUSH
55561: LD_INT 1
55563: PLUS
55564: ST_TO_ADDR
// end ;
55565: LD_VAR 0 2
55569: RET
// export function Dec ( value ) ; begin
55570: LD_INT 0
55572: PPUSH
// result := value - 1 ;
55573: LD_ADDR_VAR 0 2
55577: PUSH
55578: LD_VAR 0 1
55582: PUSH
55583: LD_INT 1
55585: MINUS
55586: ST_TO_ADDR
// end ;
55587: LD_VAR 0 2
55591: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55592: LD_INT 0
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55602: LD_VAR 0 1
55606: PPUSH
55607: LD_VAR 0 2
55611: PPUSH
55612: CALL_OW 488
55616: NOT
55617: PUSH
55618: LD_VAR 0 3
55622: PPUSH
55623: LD_VAR 0 4
55627: PPUSH
55628: CALL_OW 488
55632: NOT
55633: OR
55634: IFFALSE 55647
// begin result := - 1 ;
55636: LD_ADDR_VAR 0 5
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: ST_TO_ADDR
// exit ;
55645: GO 55882
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55647: LD_ADDR_VAR 0 12
55651: PUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: LD_VAR 0 2
55661: PPUSH
55662: LD_VAR 0 3
55666: PPUSH
55667: LD_VAR 0 4
55671: PPUSH
55672: CALL 54732 0 4
55676: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55677: LD_ADDR_VAR 0 11
55681: PUSH
55682: LD_VAR 0 1
55686: PPUSH
55687: LD_VAR 0 2
55691: PPUSH
55692: LD_VAR 0 12
55696: PUSH
55697: LD_INT 1
55699: ARRAY
55700: PPUSH
55701: LD_VAR 0 12
55705: PUSH
55706: LD_INT 2
55708: ARRAY
55709: PPUSH
55710: CALL_OW 298
55714: ST_TO_ADDR
// distance := 9999 ;
55715: LD_ADDR_VAR 0 10
55719: PUSH
55720: LD_INT 9999
55722: ST_TO_ADDR
// for i := 0 to 5 do
55723: LD_ADDR_VAR 0 6
55727: PUSH
55728: DOUBLE
55729: LD_INT 0
55731: DEC
55732: ST_TO_ADDR
55733: LD_INT 5
55735: PUSH
55736: FOR_TO
55737: IFFALSE 55880
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55739: LD_ADDR_VAR 0 7
55743: PUSH
55744: LD_VAR 0 1
55748: PPUSH
55749: LD_VAR 0 6
55753: PPUSH
55754: LD_VAR 0 11
55758: PPUSH
55759: CALL_OW 272
55763: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55764: LD_ADDR_VAR 0 8
55768: PUSH
55769: LD_VAR 0 2
55773: PPUSH
55774: LD_VAR 0 6
55778: PPUSH
55779: LD_VAR 0 11
55783: PPUSH
55784: CALL_OW 273
55788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55789: LD_VAR 0 7
55793: PPUSH
55794: LD_VAR 0 8
55798: PPUSH
55799: CALL_OW 488
55803: NOT
55804: IFFALSE 55808
// continue ;
55806: GO 55736
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55808: LD_ADDR_VAR 0 9
55812: PUSH
55813: LD_VAR 0 12
55817: PUSH
55818: LD_INT 1
55820: ARRAY
55821: PPUSH
55822: LD_VAR 0 12
55826: PUSH
55827: LD_INT 2
55829: ARRAY
55830: PPUSH
55831: LD_VAR 0 7
55835: PPUSH
55836: LD_VAR 0 8
55840: PPUSH
55841: CALL_OW 298
55845: ST_TO_ADDR
// if tmp < distance then
55846: LD_VAR 0 9
55850: PUSH
55851: LD_VAR 0 10
55855: LESS
55856: IFFALSE 55878
// begin result := i ;
55858: LD_ADDR_VAR 0 5
55862: PUSH
55863: LD_VAR 0 6
55867: ST_TO_ADDR
// distance := tmp ;
55868: LD_ADDR_VAR 0 10
55872: PUSH
55873: LD_VAR 0 9
55877: ST_TO_ADDR
// end ; end ;
55878: GO 55736
55880: POP
55881: POP
// end ;
55882: LD_VAR 0 5
55886: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55887: LD_INT 0
55889: PPUSH
55890: PPUSH
// if not driver or not IsInUnit ( driver ) then
55891: LD_VAR 0 1
55895: NOT
55896: PUSH
55897: LD_VAR 0 1
55901: PPUSH
55902: CALL_OW 310
55906: NOT
55907: OR
55908: IFFALSE 55912
// exit ;
55910: GO 56002
// vehicle := IsInUnit ( driver ) ;
55912: LD_ADDR_VAR 0 3
55916: PUSH
55917: LD_VAR 0 1
55921: PPUSH
55922: CALL_OW 310
55926: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55927: LD_VAR 0 1
55931: PPUSH
55932: LD_STRING \
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: PUSH
55962: LD_STRING E
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_VAR 0 3
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PPUSH
55998: CALL_OW 446
// end ;
56002: LD_VAR 0 2
56006: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56007: LD_INT 0
56009: PPUSH
56010: PPUSH
// if not driver or not IsInUnit ( driver ) then
56011: LD_VAR 0 1
56015: NOT
56016: PUSH
56017: LD_VAR 0 1
56021: PPUSH
56022: CALL_OW 310
56026: NOT
56027: OR
56028: IFFALSE 56032
// exit ;
56030: GO 56122
// vehicle := IsInUnit ( driver ) ;
56032: LD_ADDR_VAR 0 3
56036: PUSH
56037: LD_VAR 0 1
56041: PPUSH
56042: CALL_OW 310
56046: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56047: LD_VAR 0 1
56051: PPUSH
56052: LD_STRING \
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: PUSH
56082: LD_STRING E
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_VAR 0 3
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PPUSH
56118: CALL_OW 447
// end ;
56122: LD_VAR 0 2
56126: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56127: LD_INT 0
56129: PPUSH
56130: PPUSH
56131: PPUSH
// tmp := [ ] ;
56132: LD_ADDR_VAR 0 5
56136: PUSH
56137: EMPTY
56138: ST_TO_ADDR
// for i in units do
56139: LD_ADDR_VAR 0 4
56143: PUSH
56144: LD_VAR 0 1
56148: PUSH
56149: FOR_IN
56150: IFFALSE 56188
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56152: LD_ADDR_VAR 0 5
56156: PUSH
56157: LD_VAR 0 5
56161: PPUSH
56162: LD_VAR 0 5
56166: PUSH
56167: LD_INT 1
56169: PLUS
56170: PPUSH
56171: LD_VAR 0 4
56175: PPUSH
56176: CALL_OW 256
56180: PPUSH
56181: CALL_OW 2
56185: ST_TO_ADDR
56186: GO 56149
56188: POP
56189: POP
// if not tmp then
56190: LD_VAR 0 5
56194: NOT
56195: IFFALSE 56199
// exit ;
56197: GO 56247
// if asc then
56199: LD_VAR 0 2
56203: IFFALSE 56227
// result := SortListByListAsc ( units , tmp ) else
56205: LD_ADDR_VAR 0 3
56209: PUSH
56210: LD_VAR 0 1
56214: PPUSH
56215: LD_VAR 0 5
56219: PPUSH
56220: CALL_OW 76
56224: ST_TO_ADDR
56225: GO 56247
// result := SortListByListDesc ( units , tmp ) ;
56227: LD_ADDR_VAR 0 3
56231: PUSH
56232: LD_VAR 0 1
56236: PPUSH
56237: LD_VAR 0 5
56241: PPUSH
56242: CALL_OW 77
56246: ST_TO_ADDR
// end ;
56247: LD_VAR 0 3
56251: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56252: LD_INT 0
56254: PPUSH
56255: PPUSH
// task := GetTaskList ( mech ) ;
56256: LD_ADDR_VAR 0 4
56260: PUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 437
56270: ST_TO_ADDR
// if not task then
56271: LD_VAR 0 4
56275: NOT
56276: IFFALSE 56280
// exit ;
56278: GO 56322
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56280: LD_ADDR_VAR 0 3
56284: PUSH
56285: LD_VAR 0 4
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PUSH
56294: LD_INT 1
56296: ARRAY
56297: PUSH
56298: LD_STRING r
56300: EQUAL
56301: PUSH
56302: LD_VAR 0 4
56306: PUSH
56307: LD_INT 1
56309: ARRAY
56310: PUSH
56311: LD_INT 4
56313: ARRAY
56314: PUSH
56315: LD_VAR 0 2
56319: EQUAL
56320: AND
56321: ST_TO_ADDR
// end ;
56322: LD_VAR 0 3
56326: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56327: LD_INT 0
56329: PPUSH
// SetDir ( unit , d ) ;
56330: LD_VAR 0 1
56334: PPUSH
56335: LD_VAR 0 4
56339: PPUSH
56340: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56344: LD_VAR 0 1
56348: PPUSH
56349: LD_VAR 0 2
56353: PPUSH
56354: LD_VAR 0 3
56358: PPUSH
56359: LD_VAR 0 5
56363: PPUSH
56364: CALL_OW 48
// end ;
56368: LD_VAR 0 6
56372: RET
// export function ToNaturalNumber ( number ) ; begin
56373: LD_INT 0
56375: PPUSH
// result := number div 1 ;
56376: LD_ADDR_VAR 0 2
56380: PUSH
56381: LD_VAR 0 1
56385: PUSH
56386: LD_INT 1
56388: DIV
56389: ST_TO_ADDR
// if number < 0 then
56390: LD_VAR 0 1
56394: PUSH
56395: LD_INT 0
56397: LESS
56398: IFFALSE 56408
// result := 0 ;
56400: LD_ADDR_VAR 0 2
56404: PUSH
56405: LD_INT 0
56407: ST_TO_ADDR
// end ;
56408: LD_VAR 0 2
56412: RET
// export function SortByClass ( units , class ) ; var un ; begin
56413: LD_INT 0
56415: PPUSH
56416: PPUSH
// if not units or not class then
56417: LD_VAR 0 1
56421: NOT
56422: PUSH
56423: LD_VAR 0 2
56427: NOT
56428: OR
56429: IFFALSE 56433
// exit ;
56431: GO 56528
// result := [ ] ;
56433: LD_ADDR_VAR 0 3
56437: PUSH
56438: EMPTY
56439: ST_TO_ADDR
// for un in units do
56440: LD_ADDR_VAR 0 4
56444: PUSH
56445: LD_VAR 0 1
56449: PUSH
56450: FOR_IN
56451: IFFALSE 56526
// if GetClass ( un ) = class then
56453: LD_VAR 0 4
56457: PPUSH
56458: CALL_OW 257
56462: PUSH
56463: LD_VAR 0 2
56467: EQUAL
56468: IFFALSE 56495
// result := Insert ( result , 1 , un ) else
56470: LD_ADDR_VAR 0 3
56474: PUSH
56475: LD_VAR 0 3
56479: PPUSH
56480: LD_INT 1
56482: PPUSH
56483: LD_VAR 0 4
56487: PPUSH
56488: CALL_OW 2
56492: ST_TO_ADDR
56493: GO 56524
// result := Replace ( result , result + 1 , un ) ;
56495: LD_ADDR_VAR 0 3
56499: PUSH
56500: LD_VAR 0 3
56504: PPUSH
56505: LD_VAR 0 3
56509: PUSH
56510: LD_INT 1
56512: PLUS
56513: PPUSH
56514: LD_VAR 0 4
56518: PPUSH
56519: CALL_OW 1
56523: ST_TO_ADDR
56524: GO 56450
56526: POP
56527: POP
// end ;
56528: LD_VAR 0 3
56532: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56533: LD_INT 0
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
56539: PPUSH
56540: PPUSH
56541: PPUSH
// result := [ ] ;
56542: LD_ADDR_VAR 0 4
56546: PUSH
56547: EMPTY
56548: ST_TO_ADDR
// if x - r < 0 then
56549: LD_VAR 0 1
56553: PUSH
56554: LD_VAR 0 3
56558: MINUS
56559: PUSH
56560: LD_INT 0
56562: LESS
56563: IFFALSE 56575
// min_x := 0 else
56565: LD_ADDR_VAR 0 8
56569: PUSH
56570: LD_INT 0
56572: ST_TO_ADDR
56573: GO 56591
// min_x := x - r ;
56575: LD_ADDR_VAR 0 8
56579: PUSH
56580: LD_VAR 0 1
56584: PUSH
56585: LD_VAR 0 3
56589: MINUS
56590: ST_TO_ADDR
// if y - r < 0 then
56591: LD_VAR 0 2
56595: PUSH
56596: LD_VAR 0 3
56600: MINUS
56601: PUSH
56602: LD_INT 0
56604: LESS
56605: IFFALSE 56617
// min_y := 0 else
56607: LD_ADDR_VAR 0 7
56611: PUSH
56612: LD_INT 0
56614: ST_TO_ADDR
56615: GO 56633
// min_y := y - r ;
56617: LD_ADDR_VAR 0 7
56621: PUSH
56622: LD_VAR 0 2
56626: PUSH
56627: LD_VAR 0 3
56631: MINUS
56632: ST_TO_ADDR
// max_x := x + r ;
56633: LD_ADDR_VAR 0 9
56637: PUSH
56638: LD_VAR 0 1
56642: PUSH
56643: LD_VAR 0 3
56647: PLUS
56648: ST_TO_ADDR
// max_y := y + r ;
56649: LD_ADDR_VAR 0 10
56653: PUSH
56654: LD_VAR 0 2
56658: PUSH
56659: LD_VAR 0 3
56663: PLUS
56664: ST_TO_ADDR
// for _x = min_x to max_x do
56665: LD_ADDR_VAR 0 5
56669: PUSH
56670: DOUBLE
56671: LD_VAR 0 8
56675: DEC
56676: ST_TO_ADDR
56677: LD_VAR 0 9
56681: PUSH
56682: FOR_TO
56683: IFFALSE 56784
// for _y = min_y to max_y do
56685: LD_ADDR_VAR 0 6
56689: PUSH
56690: DOUBLE
56691: LD_VAR 0 7
56695: DEC
56696: ST_TO_ADDR
56697: LD_VAR 0 10
56701: PUSH
56702: FOR_TO
56703: IFFALSE 56780
// begin if not ValidHex ( _x , _y ) then
56705: LD_VAR 0 5
56709: PPUSH
56710: LD_VAR 0 6
56714: PPUSH
56715: CALL_OW 488
56719: NOT
56720: IFFALSE 56724
// continue ;
56722: GO 56702
// if GetResourceTypeXY ( _x , _y ) then
56724: LD_VAR 0 5
56728: PPUSH
56729: LD_VAR 0 6
56733: PPUSH
56734: CALL_OW 283
56738: IFFALSE 56778
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56740: LD_ADDR_VAR 0 4
56744: PUSH
56745: LD_VAR 0 4
56749: PPUSH
56750: LD_VAR 0 4
56754: PUSH
56755: LD_INT 1
56757: PLUS
56758: PPUSH
56759: LD_VAR 0 5
56763: PUSH
56764: LD_VAR 0 6
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PPUSH
56773: CALL_OW 1
56777: ST_TO_ADDR
// end ;
56778: GO 56702
56780: POP
56781: POP
56782: GO 56682
56784: POP
56785: POP
// end ;
56786: LD_VAR 0 4
56790: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56791: LD_INT 0
56793: PPUSH
56794: PPUSH
56795: PPUSH
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
56800: PPUSH
// if not units then
56801: LD_VAR 0 1
56805: NOT
56806: IFFALSE 56810
// exit ;
56808: GO 57334
// result := UnitFilter ( units , [ f_ok ] ) ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_INT 50
56822: PUSH
56823: EMPTY
56824: LIST
56825: PPUSH
56826: CALL_OW 72
56830: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56831: LD_ADDR_VAR 0 8
56835: PUSH
56836: LD_VAR 0 1
56840: PUSH
56841: LD_INT 1
56843: ARRAY
56844: PPUSH
56845: CALL_OW 255
56849: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56850: LD_ADDR_VAR 0 10
56854: PUSH
56855: LD_INT 29
56857: PUSH
56858: LD_INT 91
56860: PUSH
56861: LD_INT 49
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// if not result then
56869: LD_VAR 0 3
56873: NOT
56874: IFFALSE 56878
// exit ;
56876: GO 57334
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56878: LD_ADDR_VAR 0 5
56882: PUSH
56883: LD_INT 81
56885: PUSH
56886: LD_VAR 0 8
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PPUSH
56895: CALL_OW 69
56899: ST_TO_ADDR
// for i in result do
56900: LD_ADDR_VAR 0 4
56904: PUSH
56905: LD_VAR 0 3
56909: PUSH
56910: FOR_IN
56911: IFFALSE 57332
// begin tag := GetTag ( i ) + 1 ;
56913: LD_ADDR_VAR 0 9
56917: PUSH
56918: LD_VAR 0 4
56922: PPUSH
56923: CALL_OW 110
56927: PUSH
56928: LD_INT 1
56930: PLUS
56931: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56932: LD_ADDR_VAR 0 7
56936: PUSH
56937: LD_VAR 0 4
56941: PPUSH
56942: CALL_OW 250
56946: PPUSH
56947: LD_VAR 0 4
56951: PPUSH
56952: CALL_OW 251
56956: PPUSH
56957: LD_INT 6
56959: PPUSH
56960: CALL 56533 0 3
56964: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56965: LD_VAR 0 4
56969: PPUSH
56970: CALL_OW 247
56974: PUSH
56975: LD_INT 2
56977: EQUAL
56978: PUSH
56979: LD_VAR 0 7
56983: AND
56984: PUSH
56985: LD_VAR 0 4
56989: PPUSH
56990: CALL_OW 264
56994: PUSH
56995: LD_VAR 0 10
56999: IN
57000: NOT
57001: AND
57002: IFFALSE 57041
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57004: LD_VAR 0 4
57008: PPUSH
57009: LD_VAR 0 7
57013: PUSH
57014: LD_INT 1
57016: ARRAY
57017: PUSH
57018: LD_INT 1
57020: ARRAY
57021: PPUSH
57022: LD_VAR 0 7
57026: PUSH
57027: LD_INT 1
57029: ARRAY
57030: PUSH
57031: LD_INT 2
57033: ARRAY
57034: PPUSH
57035: CALL_OW 116
57039: GO 57330
// if path > tag then
57041: LD_VAR 0 2
57045: PUSH
57046: LD_VAR 0 9
57050: GREATER
57051: IFFALSE 57259
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57053: LD_ADDR_VAR 0 6
57057: PUSH
57058: LD_VAR 0 5
57062: PPUSH
57063: LD_INT 91
57065: PUSH
57066: LD_VAR 0 4
57070: PUSH
57071: LD_INT 8
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: PPUSH
57079: CALL_OW 72
57083: ST_TO_ADDR
// if nearEnemy then
57084: LD_VAR 0 6
57088: IFFALSE 57157
// begin if GetWeapon ( i ) = ru_time_lapser then
57090: LD_VAR 0 4
57094: PPUSH
57095: CALL_OW 264
57099: PUSH
57100: LD_INT 49
57102: EQUAL
57103: IFFALSE 57131
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57105: LD_VAR 0 4
57109: PPUSH
57110: LD_VAR 0 6
57114: PPUSH
57115: LD_VAR 0 4
57119: PPUSH
57120: CALL_OW 74
57124: PPUSH
57125: CALL_OW 112
57129: GO 57155
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57131: LD_VAR 0 4
57135: PPUSH
57136: LD_VAR 0 6
57140: PPUSH
57141: LD_VAR 0 4
57145: PPUSH
57146: CALL_OW 74
57150: PPUSH
57151: CALL 58259 0 2
// end else
57155: GO 57257
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57157: LD_VAR 0 4
57161: PPUSH
57162: LD_VAR 0 2
57166: PUSH
57167: LD_VAR 0 9
57171: ARRAY
57172: PUSH
57173: LD_INT 1
57175: ARRAY
57176: PPUSH
57177: LD_VAR 0 2
57181: PUSH
57182: LD_VAR 0 9
57186: ARRAY
57187: PUSH
57188: LD_INT 2
57190: ARRAY
57191: PPUSH
57192: CALL_OW 297
57196: PUSH
57197: LD_INT 6
57199: GREATER
57200: IFFALSE 57243
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57202: LD_VAR 0 4
57206: PPUSH
57207: LD_VAR 0 2
57211: PUSH
57212: LD_VAR 0 9
57216: ARRAY
57217: PUSH
57218: LD_INT 1
57220: ARRAY
57221: PPUSH
57222: LD_VAR 0 2
57226: PUSH
57227: LD_VAR 0 9
57231: ARRAY
57232: PUSH
57233: LD_INT 2
57235: ARRAY
57236: PPUSH
57237: CALL_OW 114
57241: GO 57257
// SetTag ( i , tag ) ;
57243: LD_VAR 0 4
57247: PPUSH
57248: LD_VAR 0 9
57252: PPUSH
57253: CALL_OW 109
// end else
57257: GO 57330
// if enemy then
57259: LD_VAR 0 5
57263: IFFALSE 57330
// begin if GetWeapon ( i ) = ru_time_lapser then
57265: LD_VAR 0 4
57269: PPUSH
57270: CALL_OW 264
57274: PUSH
57275: LD_INT 49
57277: EQUAL
57278: IFFALSE 57306
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57280: LD_VAR 0 4
57284: PPUSH
57285: LD_VAR 0 5
57289: PPUSH
57290: LD_VAR 0 4
57294: PPUSH
57295: CALL_OW 74
57299: PPUSH
57300: CALL_OW 112
57304: GO 57330
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57306: LD_VAR 0 4
57310: PPUSH
57311: LD_VAR 0 5
57315: PPUSH
57316: LD_VAR 0 4
57320: PPUSH
57321: CALL_OW 74
57325: PPUSH
57326: CALL 58259 0 2
// end ; end ;
57330: GO 56910
57332: POP
57333: POP
// end ;
57334: LD_VAR 0 3
57338: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57339: LD_INT 0
57341: PPUSH
57342: PPUSH
57343: PPUSH
// if not unit or IsInUnit ( unit ) then
57344: LD_VAR 0 1
57348: NOT
57349: PUSH
57350: LD_VAR 0 1
57354: PPUSH
57355: CALL_OW 310
57359: OR
57360: IFFALSE 57364
// exit ;
57362: GO 57455
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57364: LD_ADDR_VAR 0 4
57368: PUSH
57369: LD_VAR 0 1
57373: PPUSH
57374: CALL_OW 250
57378: PPUSH
57379: LD_VAR 0 2
57383: PPUSH
57384: LD_INT 1
57386: PPUSH
57387: CALL_OW 272
57391: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57392: LD_ADDR_VAR 0 5
57396: PUSH
57397: LD_VAR 0 1
57401: PPUSH
57402: CALL_OW 251
57406: PPUSH
57407: LD_VAR 0 2
57411: PPUSH
57412: LD_INT 1
57414: PPUSH
57415: CALL_OW 273
57419: ST_TO_ADDR
// if ValidHex ( x , y ) then
57420: LD_VAR 0 4
57424: PPUSH
57425: LD_VAR 0 5
57429: PPUSH
57430: CALL_OW 488
57434: IFFALSE 57455
// ComTurnXY ( unit , x , y ) ;
57436: LD_VAR 0 1
57440: PPUSH
57441: LD_VAR 0 4
57445: PPUSH
57446: LD_VAR 0 5
57450: PPUSH
57451: CALL_OW 118
// end ;
57455: LD_VAR 0 3
57459: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57460: LD_INT 0
57462: PPUSH
57463: PPUSH
// result := false ;
57464: LD_ADDR_VAR 0 3
57468: PUSH
57469: LD_INT 0
57471: ST_TO_ADDR
// if not units then
57472: LD_VAR 0 2
57476: NOT
57477: IFFALSE 57481
// exit ;
57479: GO 57526
// for i in units do
57481: LD_ADDR_VAR 0 4
57485: PUSH
57486: LD_VAR 0 2
57490: PUSH
57491: FOR_IN
57492: IFFALSE 57524
// if See ( side , i ) then
57494: LD_VAR 0 1
57498: PPUSH
57499: LD_VAR 0 4
57503: PPUSH
57504: CALL_OW 292
57508: IFFALSE 57522
// begin result := true ;
57510: LD_ADDR_VAR 0 3
57514: PUSH
57515: LD_INT 1
57517: ST_TO_ADDR
// exit ;
57518: POP
57519: POP
57520: GO 57526
// end ;
57522: GO 57491
57524: POP
57525: POP
// end ;
57526: LD_VAR 0 3
57530: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57531: LD_INT 0
57533: PPUSH
57534: PPUSH
57535: PPUSH
57536: PPUSH
// if not unit or not points then
57537: LD_VAR 0 1
57541: NOT
57542: PUSH
57543: LD_VAR 0 2
57547: NOT
57548: OR
57549: IFFALSE 57553
// exit ;
57551: GO 57643
// dist := 99999 ;
57553: LD_ADDR_VAR 0 5
57557: PUSH
57558: LD_INT 99999
57560: ST_TO_ADDR
// for i in points do
57561: LD_ADDR_VAR 0 4
57565: PUSH
57566: LD_VAR 0 2
57570: PUSH
57571: FOR_IN
57572: IFFALSE 57641
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57574: LD_ADDR_VAR 0 6
57578: PUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: LD_VAR 0 4
57588: PUSH
57589: LD_INT 1
57591: ARRAY
57592: PPUSH
57593: LD_VAR 0 4
57597: PUSH
57598: LD_INT 2
57600: ARRAY
57601: PPUSH
57602: CALL_OW 297
57606: ST_TO_ADDR
// if tmpDist < dist then
57607: LD_VAR 0 6
57611: PUSH
57612: LD_VAR 0 5
57616: LESS
57617: IFFALSE 57639
// begin result := i ;
57619: LD_ADDR_VAR 0 3
57623: PUSH
57624: LD_VAR 0 4
57628: ST_TO_ADDR
// dist := tmpDist ;
57629: LD_ADDR_VAR 0 5
57633: PUSH
57634: LD_VAR 0 6
57638: ST_TO_ADDR
// end ; end ;
57639: GO 57571
57641: POP
57642: POP
// end ;
57643: LD_VAR 0 3
57647: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57648: LD_INT 0
57650: PPUSH
// uc_side := side ;
57651: LD_ADDR_OWVAR 20
57655: PUSH
57656: LD_VAR 0 1
57660: ST_TO_ADDR
// uc_nation := 3 ;
57661: LD_ADDR_OWVAR 21
57665: PUSH
57666: LD_INT 3
57668: ST_TO_ADDR
// vc_chassis := 25 ;
57669: LD_ADDR_OWVAR 37
57673: PUSH
57674: LD_INT 25
57676: ST_TO_ADDR
// vc_engine := engine_siberite ;
57677: LD_ADDR_OWVAR 39
57681: PUSH
57682: LD_INT 3
57684: ST_TO_ADDR
// vc_control := control_computer ;
57685: LD_ADDR_OWVAR 38
57689: PUSH
57690: LD_INT 3
57692: ST_TO_ADDR
// vc_weapon := 59 ;
57693: LD_ADDR_OWVAR 40
57697: PUSH
57698: LD_INT 59
57700: ST_TO_ADDR
// result := CreateVehicle ;
57701: LD_ADDR_VAR 0 5
57705: PUSH
57706: CALL_OW 45
57710: ST_TO_ADDR
// SetDir ( result , d ) ;
57711: LD_VAR 0 5
57715: PPUSH
57716: LD_VAR 0 4
57720: PPUSH
57721: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57725: LD_VAR 0 5
57729: PPUSH
57730: LD_VAR 0 2
57734: PPUSH
57735: LD_VAR 0 3
57739: PPUSH
57740: LD_INT 0
57742: PPUSH
57743: CALL_OW 48
// end ;
57747: LD_VAR 0 5
57751: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57752: LD_INT 0
57754: PPUSH
57755: PPUSH
57756: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57757: LD_ADDR_VAR 0 2
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57780: LD_VAR 0 1
57784: NOT
57785: PUSH
57786: LD_VAR 0 1
57790: PPUSH
57791: CALL_OW 264
57795: PUSH
57796: LD_INT 12
57798: PUSH
57799: LD_INT 51
57801: PUSH
57802: LD_INT 32
57804: PUSH
57805: LD_INT 89
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: IN
57814: NOT
57815: OR
57816: IFFALSE 57820
// exit ;
57818: GO 57918
// for i := 1 to 3 do
57820: LD_ADDR_VAR 0 3
57824: PUSH
57825: DOUBLE
57826: LD_INT 1
57828: DEC
57829: ST_TO_ADDR
57830: LD_INT 3
57832: PUSH
57833: FOR_TO
57834: IFFALSE 57916
// begin tmp := GetCargo ( cargo , i ) ;
57836: LD_ADDR_VAR 0 4
57840: PUSH
57841: LD_VAR 0 1
57845: PPUSH
57846: LD_VAR 0 3
57850: PPUSH
57851: CALL_OW 289
57855: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57856: LD_ADDR_VAR 0 2
57860: PUSH
57861: LD_VAR 0 2
57865: PPUSH
57866: LD_VAR 0 3
57870: PPUSH
57871: LD_VAR 0 4
57875: PPUSH
57876: CALL_OW 1
57880: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57881: LD_ADDR_VAR 0 2
57885: PUSH
57886: LD_VAR 0 2
57890: PPUSH
57891: LD_INT 4
57893: PPUSH
57894: LD_VAR 0 2
57898: PUSH
57899: LD_INT 4
57901: ARRAY
57902: PUSH
57903: LD_VAR 0 4
57907: PLUS
57908: PPUSH
57909: CALL_OW 1
57913: ST_TO_ADDR
// end ;
57914: GO 57833
57916: POP
57917: POP
// end ;
57918: LD_VAR 0 2
57922: RET
// export function Length ( array ) ; begin
57923: LD_INT 0
57925: PPUSH
// result := array + 0 ;
57926: LD_ADDR_VAR 0 2
57930: PUSH
57931: LD_VAR 0 1
57935: PUSH
57936: LD_INT 0
57938: PLUS
57939: ST_TO_ADDR
// end ;
57940: LD_VAR 0 2
57944: RET
// export function PrepareArray ( array ) ; begin
57945: LD_INT 0
57947: PPUSH
// result := array diff 0 ;
57948: LD_ADDR_VAR 0 2
57952: PUSH
57953: LD_VAR 0 1
57957: PUSH
57958: LD_INT 0
57960: DIFF
57961: ST_TO_ADDR
// if not result [ 1 ] then
57962: LD_VAR 0 2
57966: PUSH
57967: LD_INT 1
57969: ARRAY
57970: NOT
57971: IFFALSE 57991
// result := Delete ( result , 1 ) ;
57973: LD_ADDR_VAR 0 2
57977: PUSH
57978: LD_VAR 0 2
57982: PPUSH
57983: LD_INT 1
57985: PPUSH
57986: CALL_OW 3
57990: ST_TO_ADDR
// end ;
57991: LD_VAR 0 2
57995: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57996: LD_INT 0
57998: PPUSH
57999: PPUSH
58000: PPUSH
58001: PPUSH
// sibRocketRange := 25 ;
58002: LD_ADDR_VAR 0 6
58006: PUSH
58007: LD_INT 25
58009: ST_TO_ADDR
// result := false ;
58010: LD_ADDR_VAR 0 4
58014: PUSH
58015: LD_INT 0
58017: ST_TO_ADDR
// for i := 0 to 5 do
58018: LD_ADDR_VAR 0 5
58022: PUSH
58023: DOUBLE
58024: LD_INT 0
58026: DEC
58027: ST_TO_ADDR
58028: LD_INT 5
58030: PUSH
58031: FOR_TO
58032: IFFALSE 58099
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58034: LD_VAR 0 1
58038: PPUSH
58039: LD_VAR 0 5
58043: PPUSH
58044: LD_VAR 0 6
58048: PPUSH
58049: CALL_OW 272
58053: PPUSH
58054: LD_VAR 0 2
58058: PPUSH
58059: LD_VAR 0 5
58063: PPUSH
58064: LD_VAR 0 6
58068: PPUSH
58069: CALL_OW 273
58073: PPUSH
58074: LD_VAR 0 3
58078: PPUSH
58079: CALL_OW 309
58083: IFFALSE 58097
// begin result := true ;
58085: LD_ADDR_VAR 0 4
58089: PUSH
58090: LD_INT 1
58092: ST_TO_ADDR
// exit ;
58093: POP
58094: POP
58095: GO 58101
// end ;
58097: GO 58031
58099: POP
58100: POP
// end ;
58101: LD_VAR 0 4
58105: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58106: LD_INT 0
58108: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58109: LD_VAR 0 1
58113: PPUSH
58114: LD_VAR 0 2
58118: PPUSH
58119: LD_INT 0
58121: PPUSH
58122: LD_INT 0
58124: PPUSH
58125: LD_INT 1
58127: PPUSH
58128: LD_INT 0
58130: PPUSH
58131: CALL_OW 587
// end ;
58135: LD_VAR 0 3
58139: RET
// export function CenterOnNow ( unit ) ; begin
58140: LD_INT 0
58142: PPUSH
// result := IsInUnit ( unit ) ;
58143: LD_ADDR_VAR 0 2
58147: PUSH
58148: LD_VAR 0 1
58152: PPUSH
58153: CALL_OW 310
58157: ST_TO_ADDR
// if not result then
58158: LD_VAR 0 2
58162: NOT
58163: IFFALSE 58175
// result := unit ;
58165: LD_ADDR_VAR 0 2
58169: PUSH
58170: LD_VAR 0 1
58174: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 87
// end ;
58184: LD_VAR 0 2
58188: RET
// export function ComMoveHex ( unit , hex ) ; begin
58189: LD_INT 0
58191: PPUSH
// if not hex then
58192: LD_VAR 0 2
58196: NOT
58197: IFFALSE 58201
// exit ;
58199: GO 58254
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58201: LD_VAR 0 2
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: PPUSH
58210: LD_VAR 0 2
58214: PUSH
58215: LD_INT 2
58217: ARRAY
58218: PPUSH
58219: CALL_OW 428
58223: IFFALSE 58227
// exit ;
58225: GO 58254
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58227: LD_VAR 0 1
58231: PPUSH
58232: LD_VAR 0 2
58236: PUSH
58237: LD_INT 1
58239: ARRAY
58240: PPUSH
58241: LD_VAR 0 2
58245: PUSH
58246: LD_INT 2
58248: ARRAY
58249: PPUSH
58250: CALL_OW 111
// end ;
58254: LD_VAR 0 3
58258: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58259: LD_INT 0
58261: PPUSH
58262: PPUSH
58263: PPUSH
// if not unit or not enemy then
58264: LD_VAR 0 1
58268: NOT
58269: PUSH
58270: LD_VAR 0 2
58274: NOT
58275: OR
58276: IFFALSE 58280
// exit ;
58278: GO 58404
// x := GetX ( enemy ) ;
58280: LD_ADDR_VAR 0 4
58284: PUSH
58285: LD_VAR 0 2
58289: PPUSH
58290: CALL_OW 250
58294: ST_TO_ADDR
// y := GetY ( enemy ) ;
58295: LD_ADDR_VAR 0 5
58299: PUSH
58300: LD_VAR 0 2
58304: PPUSH
58305: CALL_OW 251
58309: ST_TO_ADDR
// if ValidHex ( x , y ) then
58310: LD_VAR 0 4
58314: PPUSH
58315: LD_VAR 0 5
58319: PPUSH
58320: CALL_OW 488
58324: IFFALSE 58404
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58326: LD_VAR 0 2
58330: PPUSH
58331: CALL_OW 247
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: IN
58346: PUSH
58347: LD_VAR 0 1
58351: PPUSH
58352: CALL_OW 255
58356: PPUSH
58357: LD_VAR 0 2
58361: PPUSH
58362: CALL_OW 292
58366: AND
58367: IFFALSE 58385
// ComAttackUnit ( unit , enemy ) else
58369: LD_VAR 0 1
58373: PPUSH
58374: LD_VAR 0 2
58378: PPUSH
58379: CALL_OW 115
58383: GO 58404
// ComAgressiveMove ( unit , x , y ) ;
58385: LD_VAR 0 1
58389: PPUSH
58390: LD_VAR 0 4
58394: PPUSH
58395: LD_VAR 0 5
58399: PPUSH
58400: CALL_OW 114
// end ;
58404: LD_VAR 0 3
58408: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58409: LD_INT 0
58411: PPUSH
58412: PPUSH
58413: PPUSH
// list := AreaToList ( area , 0 ) ;
58414: LD_ADDR_VAR 0 5
58418: PUSH
58419: LD_VAR 0 1
58423: PPUSH
58424: LD_INT 0
58426: PPUSH
58427: CALL_OW 517
58431: ST_TO_ADDR
// if not list then
58432: LD_VAR 0 5
58436: NOT
58437: IFFALSE 58441
// exit ;
58439: GO 58571
// if all then
58441: LD_VAR 0 2
58445: IFFALSE 58533
// begin for i := 1 to list [ 1 ] do
58447: LD_ADDR_VAR 0 4
58451: PUSH
58452: DOUBLE
58453: LD_INT 1
58455: DEC
58456: ST_TO_ADDR
58457: LD_VAR 0 5
58461: PUSH
58462: LD_INT 1
58464: ARRAY
58465: PUSH
58466: FOR_TO
58467: IFFALSE 58529
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58469: LD_ADDR_VAR 0 3
58473: PUSH
58474: LD_VAR 0 3
58478: PPUSH
58479: LD_VAR 0 3
58483: PUSH
58484: LD_INT 1
58486: PLUS
58487: PPUSH
58488: LD_VAR 0 5
58492: PUSH
58493: LD_INT 1
58495: ARRAY
58496: PUSH
58497: LD_VAR 0 4
58501: ARRAY
58502: PUSH
58503: LD_VAR 0 5
58507: PUSH
58508: LD_INT 2
58510: ARRAY
58511: PUSH
58512: LD_VAR 0 4
58516: ARRAY
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PPUSH
58522: CALL_OW 1
58526: ST_TO_ADDR
58527: GO 58466
58529: POP
58530: POP
// exit ;
58531: GO 58571
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58533: LD_ADDR_VAR 0 3
58537: PUSH
58538: LD_VAR 0 5
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PUSH
58547: LD_INT 1
58549: ARRAY
58550: PUSH
58551: LD_VAR 0 5
58555: PUSH
58556: LD_INT 2
58558: ARRAY
58559: PUSH
58560: LD_INT 1
58562: ARRAY
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: ST_TO_ADDR
// end ;
58571: LD_VAR 0 3
58575: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58576: LD_INT 0
58578: PPUSH
58579: PPUSH
// list := AreaToList ( area , 0 ) ;
58580: LD_ADDR_VAR 0 4
58584: PUSH
58585: LD_VAR 0 1
58589: PPUSH
58590: LD_INT 0
58592: PPUSH
58593: CALL_OW 517
58597: ST_TO_ADDR
// if not list then
58598: LD_VAR 0 4
58602: NOT
58603: IFFALSE 58607
// exit ;
58605: GO 58648
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58607: LD_ADDR_VAR 0 3
58611: PUSH
58612: LD_VAR 0 4
58616: PUSH
58617: LD_INT 1
58619: ARRAY
58620: PUSH
58621: LD_INT 1
58623: ARRAY
58624: PUSH
58625: LD_VAR 0 4
58629: PUSH
58630: LD_INT 2
58632: ARRAY
58633: PUSH
58634: LD_INT 1
58636: ARRAY
58637: PUSH
58638: LD_VAR 0 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// end ;
58648: LD_VAR 0 3
58652: RET
// export function First ( array ) ; begin
58653: LD_INT 0
58655: PPUSH
// if not array then
58656: LD_VAR 0 1
58660: NOT
58661: IFFALSE 58665
// exit ;
58663: GO 58679
// result := array [ 1 ] ;
58665: LD_ADDR_VAR 0 2
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: LD_INT 1
58677: ARRAY
58678: ST_TO_ADDR
// end ;
58679: LD_VAR 0 2
58683: RET
// export function Last ( array ) ; begin
58684: LD_INT 0
58686: PPUSH
// if not array then
58687: LD_VAR 0 1
58691: NOT
58692: IFFALSE 58696
// exit ;
58694: GO 58712
// result := array [ array ] ;
58696: LD_ADDR_VAR 0 2
58700: PUSH
58701: LD_VAR 0 1
58705: PUSH
58706: LD_VAR 0 1
58710: ARRAY
58711: ST_TO_ADDR
// end ; end_of_file
58712: LD_VAR 0 2
58716: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
58717: LD_VAR 0 1
58721: PUSH
58722: LD_INT 200
58724: DOUBLE
58725: GREATEREQUAL
58726: IFFALSE 58734
58728: LD_INT 299
58730: DOUBLE
58731: LESSEQUAL
58732: IFTRUE 58736
58734: GO 58768
58736: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
58737: LD_VAR 0 1
58741: PPUSH
58742: LD_VAR 0 2
58746: PPUSH
58747: LD_VAR 0 3
58751: PPUSH
58752: LD_VAR 0 4
58756: PPUSH
58757: LD_VAR 0 5
58761: PPUSH
58762: CALL 59256 0 5
58766: GO 58845
58768: LD_INT 300
58770: DOUBLE
58771: GREATEREQUAL
58772: IFFALSE 58780
58774: LD_INT 399
58776: DOUBLE
58777: LESSEQUAL
58778: IFTRUE 58782
58780: GO 58844
58782: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
58783: LD_VAR 0 1
58787: PPUSH
58788: LD_VAR 0 2
58792: PPUSH
58793: LD_VAR 0 3
58797: PPUSH
58798: LD_VAR 0 4
58802: PPUSH
58803: LD_VAR 0 5
58807: PPUSH
58808: LD_VAR 0 6
58812: PPUSH
58813: LD_VAR 0 7
58817: PPUSH
58818: LD_VAR 0 8
58822: PPUSH
58823: LD_VAR 0 9
58827: PPUSH
58828: LD_VAR 0 10
58832: PPUSH
58833: LD_VAR 0 11
58837: PPUSH
58838: CALL 76277 0 11
58842: GO 58845
58844: POP
// end ;
58845: PPOPN 11
58847: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
58848: LD_VAR 0 1
58852: PPUSH
58853: LD_VAR 0 2
58857: PPUSH
58858: LD_VAR 0 3
58862: PPUSH
58863: LD_VAR 0 4
58867: PPUSH
58868: LD_VAR 0 5
58872: PPUSH
58873: CALL 58992 0 5
// end ; end_of_file
58877: PPOPN 5
58879: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58880: LD_INT 0
58882: PPUSH
58883: PPUSH
58884: PPUSH
58885: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58886: LD_VAR 0 1
58890: PPUSH
58891: CALL_OW 264
58895: PUSH
58896: LD_INT 91
58898: EQUAL
58899: IFFALSE 58971
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58901: LD_INT 68
58903: PPUSH
58904: LD_VAR 0 1
58908: PPUSH
58909: CALL_OW 255
58913: PPUSH
58914: CALL_OW 321
58918: PUSH
58919: LD_INT 2
58921: EQUAL
58922: IFFALSE 58934
// eff := 70 else
58924: LD_ADDR_VAR 0 4
58928: PUSH
58929: LD_INT 70
58931: ST_TO_ADDR
58932: GO 58942
// eff := 30 ;
58934: LD_ADDR_VAR 0 4
58938: PUSH
58939: LD_INT 30
58941: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 250
58951: PPUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 251
58961: PPUSH
58962: LD_VAR 0 4
58966: PPUSH
58967: CALL_OW 495
// end ; end ;
58971: LD_VAR 0 2
58975: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58976: LD_INT 0
58978: PPUSH
// end ;
58979: LD_VAR 0 4
58983: RET
// export function SOS_Command ( cmd ) ; begin
58984: LD_INT 0
58986: PPUSH
// end ;
58987: LD_VAR 0 2
58991: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58992: LD_INT 0
58994: PPUSH
// end ;
58995: LD_VAR 0 6
58999: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59000: LD_INT 0
59002: PPUSH
59003: PPUSH
// if not vehicle or not factory then
59004: LD_VAR 0 1
59008: NOT
59009: PUSH
59010: LD_VAR 0 2
59014: NOT
59015: OR
59016: IFFALSE 59020
// exit ;
59018: GO 59251
// if factoryWaypoints >= factory then
59020: LD_EXP 105
59024: PUSH
59025: LD_VAR 0 2
59029: GREATEREQUAL
59030: IFFALSE 59251
// if factoryWaypoints [ factory ] then
59032: LD_EXP 105
59036: PUSH
59037: LD_VAR 0 2
59041: ARRAY
59042: IFFALSE 59251
// begin if GetControl ( vehicle ) = control_manual then
59044: LD_VAR 0 1
59048: PPUSH
59049: CALL_OW 263
59053: PUSH
59054: LD_INT 1
59056: EQUAL
59057: IFFALSE 59138
// begin driver := IsDrivenBy ( vehicle ) ;
59059: LD_ADDR_VAR 0 4
59063: PUSH
59064: LD_VAR 0 1
59068: PPUSH
59069: CALL_OW 311
59073: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59074: LD_VAR 0 4
59078: PPUSH
59079: LD_EXP 105
59083: PUSH
59084: LD_VAR 0 2
59088: ARRAY
59089: PUSH
59090: LD_INT 3
59092: ARRAY
59093: PPUSH
59094: LD_EXP 105
59098: PUSH
59099: LD_VAR 0 2
59103: ARRAY
59104: PUSH
59105: LD_INT 4
59107: ARRAY
59108: PPUSH
59109: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59113: LD_VAR 0 4
59117: PPUSH
59118: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59122: LD_VAR 0 4
59126: PPUSH
59127: LD_VAR 0 2
59131: PPUSH
59132: CALL_OW 180
// end else
59136: GO 59251
// if GetControl ( vehicle ) = control_remote then
59138: LD_VAR 0 1
59142: PPUSH
59143: CALL_OW 263
59147: PUSH
59148: LD_INT 2
59150: EQUAL
59151: IFFALSE 59212
// begin wait ( 0 0$2 ) ;
59153: LD_INT 70
59155: PPUSH
59156: CALL_OW 67
// if Connect ( vehicle ) then
59160: LD_VAR 0 1
59164: PPUSH
59165: CALL 24793 0 1
59169: IFFALSE 59210
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59171: LD_VAR 0 1
59175: PPUSH
59176: LD_EXP 105
59180: PUSH
59181: LD_VAR 0 2
59185: ARRAY
59186: PUSH
59187: LD_INT 3
59189: ARRAY
59190: PPUSH
59191: LD_EXP 105
59195: PUSH
59196: LD_VAR 0 2
59200: ARRAY
59201: PUSH
59202: LD_INT 4
59204: ARRAY
59205: PPUSH
59206: CALL_OW 171
// end else
59210: GO 59251
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59212: LD_VAR 0 1
59216: PPUSH
59217: LD_EXP 105
59221: PUSH
59222: LD_VAR 0 2
59226: ARRAY
59227: PUSH
59228: LD_INT 3
59230: ARRAY
59231: PPUSH
59232: LD_EXP 105
59236: PUSH
59237: LD_VAR 0 2
59241: ARRAY
59242: PUSH
59243: LD_INT 4
59245: ARRAY
59246: PPUSH
59247: CALL_OW 171
// end ; end ;
59251: LD_VAR 0 3
59255: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59256: LD_INT 0
59258: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 250
59266: EQUAL
59267: PUSH
59268: LD_VAR 0 2
59272: PPUSH
59273: CALL_OW 264
59277: PUSH
59278: LD_INT 81
59280: EQUAL
59281: AND
59282: IFFALSE 59303
// MinerPlaceMine ( unit , x , y ) ;
59284: LD_VAR 0 2
59288: PPUSH
59289: LD_VAR 0 4
59293: PPUSH
59294: LD_VAR 0 5
59298: PPUSH
59299: CALL 62293 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59303: LD_VAR 0 1
59307: PUSH
59308: LD_INT 251
59310: EQUAL
59311: PUSH
59312: LD_VAR 0 2
59316: PPUSH
59317: CALL_OW 264
59321: PUSH
59322: LD_INT 81
59324: EQUAL
59325: AND
59326: IFFALSE 59347
// MinerDetonateMine ( unit , x , y ) ;
59328: LD_VAR 0 2
59332: PPUSH
59333: LD_VAR 0 4
59337: PPUSH
59338: LD_VAR 0 5
59342: PPUSH
59343: CALL 62568 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59347: LD_VAR 0 1
59351: PUSH
59352: LD_INT 252
59354: EQUAL
59355: PUSH
59356: LD_VAR 0 2
59360: PPUSH
59361: CALL_OW 264
59365: PUSH
59366: LD_INT 81
59368: EQUAL
59369: AND
59370: IFFALSE 59391
// MinerCreateMinefield ( unit , x , y ) ;
59372: LD_VAR 0 2
59376: PPUSH
59377: LD_VAR 0 4
59381: PPUSH
59382: LD_VAR 0 5
59386: PPUSH
59387: CALL 62985 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59391: LD_VAR 0 1
59395: PUSH
59396: LD_INT 253
59398: EQUAL
59399: PUSH
59400: LD_VAR 0 2
59404: PPUSH
59405: CALL_OW 257
59409: PUSH
59410: LD_INT 5
59412: EQUAL
59413: AND
59414: IFFALSE 59435
// ComBinocular ( unit , x , y ) ;
59416: LD_VAR 0 2
59420: PPUSH
59421: LD_VAR 0 4
59425: PPUSH
59426: LD_VAR 0 5
59430: PPUSH
59431: CALL 63354 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59435: LD_VAR 0 1
59439: PUSH
59440: LD_INT 254
59442: EQUAL
59443: PUSH
59444: LD_VAR 0 2
59448: PPUSH
59449: CALL_OW 264
59453: PUSH
59454: LD_INT 99
59456: EQUAL
59457: AND
59458: PUSH
59459: LD_VAR 0 3
59463: PPUSH
59464: CALL_OW 263
59468: PUSH
59469: LD_INT 3
59471: EQUAL
59472: AND
59473: IFFALSE 59489
// HackDestroyVehicle ( unit , selectedUnit ) ;
59475: LD_VAR 0 2
59479: PPUSH
59480: LD_VAR 0 3
59484: PPUSH
59485: CALL 61657 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59489: LD_VAR 0 1
59493: PUSH
59494: LD_INT 255
59496: EQUAL
59497: PUSH
59498: LD_VAR 0 2
59502: PPUSH
59503: CALL_OW 264
59507: PUSH
59508: LD_INT 14
59510: PUSH
59511: LD_INT 53
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: IN
59518: AND
59519: PUSH
59520: LD_VAR 0 4
59524: PPUSH
59525: LD_VAR 0 5
59529: PPUSH
59530: CALL_OW 488
59534: AND
59535: IFFALSE 59559
// CutTreeXYR ( unit , x , y , 12 ) ;
59537: LD_VAR 0 2
59541: PPUSH
59542: LD_VAR 0 4
59546: PPUSH
59547: LD_VAR 0 5
59551: PPUSH
59552: LD_INT 12
59554: PPUSH
59555: CALL 59654 0 4
// if cmd = 256 then
59559: LD_VAR 0 1
59563: PUSH
59564: LD_INT 256
59566: EQUAL
59567: IFFALSE 59588
// SetFactoryWaypoint ( unit , x , y ) ;
59569: LD_VAR 0 2
59573: PPUSH
59574: LD_VAR 0 4
59578: PPUSH
59579: LD_VAR 0 5
59583: PPUSH
59584: CALL 78265 0 3
// if cmd = 257 then
59588: LD_VAR 0 1
59592: PUSH
59593: LD_INT 257
59595: EQUAL
59596: IFFALSE 59617
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59598: LD_VAR 0 2
59602: PPUSH
59603: LD_VAR 0 4
59607: PPUSH
59608: LD_VAR 0 5
59612: PPUSH
59613: CALL 78627 0 3
// if cmd = 258 then
59617: LD_VAR 0 1
59621: PUSH
59622: LD_INT 258
59624: EQUAL
59625: IFFALSE 59649
// BurnTreeXYR ( unit , x , y , 8 ) ;
59627: LD_VAR 0 2
59631: PPUSH
59632: LD_VAR 0 4
59636: PPUSH
59637: LD_VAR 0 5
59641: PPUSH
59642: LD_INT 8
59644: PPUSH
59645: CALL 60048 0 4
// end ;
59649: LD_VAR 0 6
59653: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59654: LD_INT 0
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59665: LD_VAR 0 1
59669: PPUSH
59670: CALL_OW 302
59674: NOT
59675: PUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: LD_VAR 0 3
59685: PPUSH
59686: CALL_OW 488
59690: NOT
59691: OR
59692: PUSH
59693: LD_VAR 0 4
59697: NOT
59698: OR
59699: IFFALSE 59703
// exit ;
59701: GO 60043
// list := [ ] ;
59703: LD_ADDR_VAR 0 13
59707: PUSH
59708: EMPTY
59709: ST_TO_ADDR
// if x - r < 0 then
59710: LD_VAR 0 2
59714: PUSH
59715: LD_VAR 0 4
59719: MINUS
59720: PUSH
59721: LD_INT 0
59723: LESS
59724: IFFALSE 59736
// min_x := 0 else
59726: LD_ADDR_VAR 0 7
59730: PUSH
59731: LD_INT 0
59733: ST_TO_ADDR
59734: GO 59752
// min_x := x - r ;
59736: LD_ADDR_VAR 0 7
59740: PUSH
59741: LD_VAR 0 2
59745: PUSH
59746: LD_VAR 0 4
59750: MINUS
59751: ST_TO_ADDR
// if y - r < 0 then
59752: LD_VAR 0 3
59756: PUSH
59757: LD_VAR 0 4
59761: MINUS
59762: PUSH
59763: LD_INT 0
59765: LESS
59766: IFFALSE 59778
// min_y := 0 else
59768: LD_ADDR_VAR 0 8
59772: PUSH
59773: LD_INT 0
59775: ST_TO_ADDR
59776: GO 59794
// min_y := y - r ;
59778: LD_ADDR_VAR 0 8
59782: PUSH
59783: LD_VAR 0 3
59787: PUSH
59788: LD_VAR 0 4
59792: MINUS
59793: ST_TO_ADDR
// max_x := x + r ;
59794: LD_ADDR_VAR 0 9
59798: PUSH
59799: LD_VAR 0 2
59803: PUSH
59804: LD_VAR 0 4
59808: PLUS
59809: ST_TO_ADDR
// max_y := y + r ;
59810: LD_ADDR_VAR 0 10
59814: PUSH
59815: LD_VAR 0 3
59819: PUSH
59820: LD_VAR 0 4
59824: PLUS
59825: ST_TO_ADDR
// for _x = min_x to max_x do
59826: LD_ADDR_VAR 0 11
59830: PUSH
59831: DOUBLE
59832: LD_VAR 0 7
59836: DEC
59837: ST_TO_ADDR
59838: LD_VAR 0 9
59842: PUSH
59843: FOR_TO
59844: IFFALSE 59961
// for _y = min_y to max_y do
59846: LD_ADDR_VAR 0 12
59850: PUSH
59851: DOUBLE
59852: LD_VAR 0 8
59856: DEC
59857: ST_TO_ADDR
59858: LD_VAR 0 10
59862: PUSH
59863: FOR_TO
59864: IFFALSE 59957
// begin if not ValidHex ( _x , _y ) then
59866: LD_VAR 0 11
59870: PPUSH
59871: LD_VAR 0 12
59875: PPUSH
59876: CALL_OW 488
59880: NOT
59881: IFFALSE 59885
// continue ;
59883: GO 59863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59885: LD_VAR 0 11
59889: PPUSH
59890: LD_VAR 0 12
59894: PPUSH
59895: CALL_OW 351
59899: PUSH
59900: LD_VAR 0 11
59904: PPUSH
59905: LD_VAR 0 12
59909: PPUSH
59910: CALL_OW 554
59914: AND
59915: IFFALSE 59955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59917: LD_ADDR_VAR 0 13
59921: PUSH
59922: LD_VAR 0 13
59926: PPUSH
59927: LD_VAR 0 13
59931: PUSH
59932: LD_INT 1
59934: PLUS
59935: PPUSH
59936: LD_VAR 0 11
59940: PUSH
59941: LD_VAR 0 12
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PPUSH
59950: CALL_OW 2
59954: ST_TO_ADDR
// end ;
59955: GO 59863
59957: POP
59958: POP
59959: GO 59843
59961: POP
59962: POP
// if not list then
59963: LD_VAR 0 13
59967: NOT
59968: IFFALSE 59972
// exit ;
59970: GO 60043
// for i in list do
59972: LD_ADDR_VAR 0 6
59976: PUSH
59977: LD_VAR 0 13
59981: PUSH
59982: FOR_IN
59983: IFFALSE 60041
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59985: LD_VAR 0 1
59989: PPUSH
59990: LD_STRING M
59992: PUSH
59993: LD_VAR 0 6
59997: PUSH
59998: LD_INT 1
60000: ARRAY
60001: PUSH
60002: LD_VAR 0 6
60006: PUSH
60007: LD_INT 2
60009: ARRAY
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: PUSH
60032: EMPTY
60033: LIST
60034: PPUSH
60035: CALL_OW 447
60039: GO 59982
60041: POP
60042: POP
// end ;
60043: LD_VAR 0 5
60047: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60048: LD_INT 0
60050: PPUSH
60051: PPUSH
60052: PPUSH
60053: PPUSH
60054: PPUSH
60055: PPUSH
60056: PPUSH
60057: PPUSH
60058: PPUSH
60059: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60060: LD_VAR 0 1
60064: PPUSH
60065: CALL_OW 302
60069: NOT
60070: PUSH
60071: LD_VAR 0 2
60075: PPUSH
60076: LD_VAR 0 3
60080: PPUSH
60081: CALL_OW 488
60085: NOT
60086: OR
60087: PUSH
60088: LD_VAR 0 4
60092: NOT
60093: OR
60094: IFFALSE 60098
// exit ;
60096: GO 60611
// list := [ ] ;
60098: LD_ADDR_VAR 0 13
60102: PUSH
60103: EMPTY
60104: ST_TO_ADDR
// if x - r < 0 then
60105: LD_VAR 0 2
60109: PUSH
60110: LD_VAR 0 4
60114: MINUS
60115: PUSH
60116: LD_INT 0
60118: LESS
60119: IFFALSE 60131
// min_x := 0 else
60121: LD_ADDR_VAR 0 7
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
60129: GO 60147
// min_x := x - r ;
60131: LD_ADDR_VAR 0 7
60135: PUSH
60136: LD_VAR 0 2
60140: PUSH
60141: LD_VAR 0 4
60145: MINUS
60146: ST_TO_ADDR
// if y - r < 0 then
60147: LD_VAR 0 3
60151: PUSH
60152: LD_VAR 0 4
60156: MINUS
60157: PUSH
60158: LD_INT 0
60160: LESS
60161: IFFALSE 60173
// min_y := 0 else
60163: LD_ADDR_VAR 0 8
60167: PUSH
60168: LD_INT 0
60170: ST_TO_ADDR
60171: GO 60189
// min_y := y - r ;
60173: LD_ADDR_VAR 0 8
60177: PUSH
60178: LD_VAR 0 3
60182: PUSH
60183: LD_VAR 0 4
60187: MINUS
60188: ST_TO_ADDR
// max_x := x + r ;
60189: LD_ADDR_VAR 0 9
60193: PUSH
60194: LD_VAR 0 2
60198: PUSH
60199: LD_VAR 0 4
60203: PLUS
60204: ST_TO_ADDR
// max_y := y + r ;
60205: LD_ADDR_VAR 0 10
60209: PUSH
60210: LD_VAR 0 3
60214: PUSH
60215: LD_VAR 0 4
60219: PLUS
60220: ST_TO_ADDR
// for _x = min_x to max_x do
60221: LD_ADDR_VAR 0 11
60225: PUSH
60226: DOUBLE
60227: LD_VAR 0 7
60231: DEC
60232: ST_TO_ADDR
60233: LD_VAR 0 9
60237: PUSH
60238: FOR_TO
60239: IFFALSE 60356
// for _y = min_y to max_y do
60241: LD_ADDR_VAR 0 12
60245: PUSH
60246: DOUBLE
60247: LD_VAR 0 8
60251: DEC
60252: ST_TO_ADDR
60253: LD_VAR 0 10
60257: PUSH
60258: FOR_TO
60259: IFFALSE 60352
// begin if not ValidHex ( _x , _y ) then
60261: LD_VAR 0 11
60265: PPUSH
60266: LD_VAR 0 12
60270: PPUSH
60271: CALL_OW 488
60275: NOT
60276: IFFALSE 60280
// continue ;
60278: GO 60258
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60280: LD_VAR 0 11
60284: PPUSH
60285: LD_VAR 0 12
60289: PPUSH
60290: CALL_OW 351
60294: PUSH
60295: LD_VAR 0 11
60299: PPUSH
60300: LD_VAR 0 12
60304: PPUSH
60305: CALL_OW 554
60309: AND
60310: IFFALSE 60350
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60312: LD_ADDR_VAR 0 13
60316: PUSH
60317: LD_VAR 0 13
60321: PPUSH
60322: LD_VAR 0 13
60326: PUSH
60327: LD_INT 1
60329: PLUS
60330: PPUSH
60331: LD_VAR 0 11
60335: PUSH
60336: LD_VAR 0 12
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PPUSH
60345: CALL_OW 2
60349: ST_TO_ADDR
// end ;
60350: GO 60258
60352: POP
60353: POP
60354: GO 60238
60356: POP
60357: POP
// if not list then
60358: LD_VAR 0 13
60362: NOT
60363: IFFALSE 60367
// exit ;
60365: GO 60611
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60367: LD_ADDR_VAR 0 13
60371: PUSH
60372: LD_VAR 0 1
60376: PPUSH
60377: LD_VAR 0 13
60381: PPUSH
60382: LD_INT 1
60384: PPUSH
60385: LD_INT 1
60387: PPUSH
60388: CALL 21935 0 4
60392: ST_TO_ADDR
// ComStop ( flame ) ;
60393: LD_VAR 0 1
60397: PPUSH
60398: CALL_OW 141
// for i in list do
60402: LD_ADDR_VAR 0 6
60406: PUSH
60407: LD_VAR 0 13
60411: PUSH
60412: FOR_IN
60413: IFFALSE 60444
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_VAR 0 6
60424: PUSH
60425: LD_INT 1
60427: ARRAY
60428: PPUSH
60429: LD_VAR 0 6
60433: PUSH
60434: LD_INT 2
60436: ARRAY
60437: PPUSH
60438: CALL_OW 176
60442: GO 60412
60444: POP
60445: POP
// repeat wait ( 0 0$1 ) ;
60446: LD_INT 35
60448: PPUSH
60449: CALL_OW 67
// task := GetTaskList ( flame ) ;
60453: LD_ADDR_VAR 0 14
60457: PUSH
60458: LD_VAR 0 1
60462: PPUSH
60463: CALL_OW 437
60467: ST_TO_ADDR
// if not task then
60468: LD_VAR 0 14
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60611
// if task [ 1 ] [ 1 ] <> | then
60477: LD_VAR 0 14
60481: PUSH
60482: LD_INT 1
60484: ARRAY
60485: PUSH
60486: LD_INT 1
60488: ARRAY
60489: PUSH
60490: LD_STRING |
60492: NONEQUAL
60493: IFFALSE 60497
// exit ;
60495: GO 60611
// _x := task [ 1 ] [ 2 ] ;
60497: LD_ADDR_VAR 0 11
60501: PUSH
60502: LD_VAR 0 14
60506: PUSH
60507: LD_INT 1
60509: ARRAY
60510: PUSH
60511: LD_INT 2
60513: ARRAY
60514: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60515: LD_ADDR_VAR 0 12
60519: PUSH
60520: LD_VAR 0 14
60524: PUSH
60525: LD_INT 1
60527: ARRAY
60528: PUSH
60529: LD_INT 3
60531: ARRAY
60532: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60533: LD_VAR 0 11
60537: PPUSH
60538: LD_VAR 0 12
60542: PPUSH
60543: CALL_OW 351
60547: NOT
60548: PUSH
60549: LD_VAR 0 11
60553: PPUSH
60554: LD_VAR 0 12
60558: PPUSH
60559: CALL_OW 554
60563: NOT
60564: OR
60565: IFFALSE 60599
// begin task := Delete ( task , 1 ) ;
60567: LD_ADDR_VAR 0 14
60571: PUSH
60572: LD_VAR 0 14
60576: PPUSH
60577: LD_INT 1
60579: PPUSH
60580: CALL_OW 3
60584: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60585: LD_VAR 0 1
60589: PPUSH
60590: LD_VAR 0 14
60594: PPUSH
60595: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60599: LD_VAR 0 1
60603: PPUSH
60604: CALL_OW 314
60608: NOT
60609: IFFALSE 60446
// end ;
60611: LD_VAR 0 5
60615: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60616: LD_EXP 36
60620: NOT
60621: IFFALSE 60671
60623: GO 60625
60625: DISABLE
// begin initHack := true ;
60626: LD_ADDR_EXP 36
60630: PUSH
60631: LD_INT 1
60633: ST_TO_ADDR
// hackTanks := [ ] ;
60634: LD_ADDR_EXP 37
60638: PUSH
60639: EMPTY
60640: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60641: LD_ADDR_EXP 38
60645: PUSH
60646: EMPTY
60647: ST_TO_ADDR
// hackLimit := 3 ;
60648: LD_ADDR_EXP 39
60652: PUSH
60653: LD_INT 3
60655: ST_TO_ADDR
// hackDist := 12 ;
60656: LD_ADDR_EXP 40
60660: PUSH
60661: LD_INT 12
60663: ST_TO_ADDR
// hackCounter := [ ] ;
60664: LD_ADDR_EXP 41
60668: PUSH
60669: EMPTY
60670: ST_TO_ADDR
// end ;
60671: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60672: LD_EXP 36
60676: PUSH
60677: LD_INT 34
60679: PUSH
60680: LD_INT 99
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PPUSH
60687: CALL_OW 69
60691: AND
60692: IFFALSE 60945
60694: GO 60696
60696: DISABLE
60697: LD_INT 0
60699: PPUSH
60700: PPUSH
// begin enable ;
60701: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60702: LD_ADDR_VAR 0 1
60706: PUSH
60707: LD_INT 34
60709: PUSH
60710: LD_INT 99
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PPUSH
60717: CALL_OW 69
60721: PUSH
60722: FOR_IN
60723: IFFALSE 60943
// begin if not i in hackTanks then
60725: LD_VAR 0 1
60729: PUSH
60730: LD_EXP 37
60734: IN
60735: NOT
60736: IFFALSE 60819
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60738: LD_ADDR_EXP 37
60742: PUSH
60743: LD_EXP 37
60747: PPUSH
60748: LD_EXP 37
60752: PUSH
60753: LD_INT 1
60755: PLUS
60756: PPUSH
60757: LD_VAR 0 1
60761: PPUSH
60762: CALL_OW 1
60766: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60767: LD_ADDR_EXP 38
60771: PUSH
60772: LD_EXP 38
60776: PPUSH
60777: LD_EXP 38
60781: PUSH
60782: LD_INT 1
60784: PLUS
60785: PPUSH
60786: EMPTY
60787: PPUSH
60788: CALL_OW 1
60792: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60793: LD_ADDR_EXP 41
60797: PUSH
60798: LD_EXP 41
60802: PPUSH
60803: LD_EXP 41
60807: PUSH
60808: LD_INT 1
60810: PLUS
60811: PPUSH
60812: EMPTY
60813: PPUSH
60814: CALL_OW 1
60818: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60819: LD_VAR 0 1
60823: PPUSH
60824: CALL_OW 302
60828: NOT
60829: IFFALSE 60842
// begin HackUnlinkAll ( i ) ;
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL 60948 0 1
// continue ;
60840: GO 60722
// end ; HackCheckCapturedStatus ( i ) ;
60842: LD_VAR 0 1
60846: PPUSH
60847: CALL 61391 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60851: LD_ADDR_VAR 0 2
60855: PUSH
60856: LD_INT 81
60858: PUSH
60859: LD_VAR 0 1
60863: PPUSH
60864: CALL_OW 255
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 33
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 91
60885: PUSH
60886: LD_VAR 0 1
60890: PUSH
60891: LD_EXP 40
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 50
60903: PUSH
60904: EMPTY
60905: LIST
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: PPUSH
60913: CALL_OW 69
60917: ST_TO_ADDR
// if not tmp then
60918: LD_VAR 0 2
60922: NOT
60923: IFFALSE 60927
// continue ;
60925: GO 60722
// HackLink ( i , tmp ) ;
60927: LD_VAR 0 1
60931: PPUSH
60932: LD_VAR 0 2
60936: PPUSH
60937: CALL 61084 0 2
// end ;
60941: GO 60722
60943: POP
60944: POP
// end ;
60945: PPOPN 2
60947: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60948: LD_INT 0
60950: PPUSH
60951: PPUSH
60952: PPUSH
// if not hack in hackTanks then
60953: LD_VAR 0 1
60957: PUSH
60958: LD_EXP 37
60962: IN
60963: NOT
60964: IFFALSE 60968
// exit ;
60966: GO 61079
// index := GetElementIndex ( hackTanks , hack ) ;
60968: LD_ADDR_VAR 0 4
60972: PUSH
60973: LD_EXP 37
60977: PPUSH
60978: LD_VAR 0 1
60982: PPUSH
60983: CALL 21232 0 2
60987: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60988: LD_EXP 38
60992: PUSH
60993: LD_VAR 0 4
60997: ARRAY
60998: IFFALSE 61079
// begin for i in hackTanksCaptured [ index ] do
61000: LD_ADDR_VAR 0 3
61004: PUSH
61005: LD_EXP 38
61009: PUSH
61010: LD_VAR 0 4
61014: ARRAY
61015: PUSH
61016: FOR_IN
61017: IFFALSE 61043
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61019: LD_VAR 0 3
61023: PUSH
61024: LD_INT 1
61026: ARRAY
61027: PPUSH
61028: LD_VAR 0 3
61032: PUSH
61033: LD_INT 2
61035: ARRAY
61036: PPUSH
61037: CALL_OW 235
61041: GO 61016
61043: POP
61044: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61045: LD_ADDR_EXP 38
61049: PUSH
61050: LD_EXP 38
61054: PPUSH
61055: LD_VAR 0 4
61059: PPUSH
61060: EMPTY
61061: PPUSH
61062: CALL_OW 1
61066: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61067: LD_VAR 0 1
61071: PPUSH
61072: LD_INT 0
61074: PPUSH
61075: CALL_OW 505
// end ; end ;
61079: LD_VAR 0 2
61083: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61084: LD_INT 0
61086: PPUSH
61087: PPUSH
61088: PPUSH
// if not hack in hackTanks or not vehicles then
61089: LD_VAR 0 1
61093: PUSH
61094: LD_EXP 37
61098: IN
61099: NOT
61100: PUSH
61101: LD_VAR 0 2
61105: NOT
61106: OR
61107: IFFALSE 61111
// exit ;
61109: GO 61386
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61111: LD_ADDR_VAR 0 2
61115: PUSH
61116: LD_VAR 0 1
61120: PPUSH
61121: LD_VAR 0 2
61125: PPUSH
61126: LD_INT 1
61128: PPUSH
61129: LD_INT 1
61131: PPUSH
61132: CALL 21882 0 4
61136: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61137: LD_ADDR_VAR 0 5
61141: PUSH
61142: LD_EXP 37
61146: PPUSH
61147: LD_VAR 0 1
61151: PPUSH
61152: CALL 21232 0 2
61156: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61157: LD_EXP 38
61161: PUSH
61162: LD_VAR 0 5
61166: ARRAY
61167: PUSH
61168: LD_EXP 39
61172: LESS
61173: IFFALSE 61362
// begin for i := 1 to vehicles do
61175: LD_ADDR_VAR 0 4
61179: PUSH
61180: DOUBLE
61181: LD_INT 1
61183: DEC
61184: ST_TO_ADDR
61185: LD_VAR 0 2
61189: PUSH
61190: FOR_TO
61191: IFFALSE 61360
// begin if hackTanksCaptured [ index ] = hackLimit then
61193: LD_EXP 38
61197: PUSH
61198: LD_VAR 0 5
61202: ARRAY
61203: PUSH
61204: LD_EXP 39
61208: EQUAL
61209: IFFALSE 61213
// break ;
61211: GO 61360
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61213: LD_ADDR_EXP 41
61217: PUSH
61218: LD_EXP 41
61222: PPUSH
61223: LD_VAR 0 5
61227: PPUSH
61228: LD_EXP 41
61232: PUSH
61233: LD_VAR 0 5
61237: ARRAY
61238: PUSH
61239: LD_INT 1
61241: PLUS
61242: PPUSH
61243: CALL_OW 1
61247: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61248: LD_ADDR_EXP 38
61252: PUSH
61253: LD_EXP 38
61257: PPUSH
61258: LD_VAR 0 5
61262: PUSH
61263: LD_EXP 38
61267: PUSH
61268: LD_VAR 0 5
61272: ARRAY
61273: PUSH
61274: LD_INT 1
61276: PLUS
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PPUSH
61282: LD_VAR 0 2
61286: PUSH
61287: LD_VAR 0 4
61291: ARRAY
61292: PUSH
61293: LD_VAR 0 2
61297: PUSH
61298: LD_VAR 0 4
61302: ARRAY
61303: PPUSH
61304: CALL_OW 255
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PPUSH
61313: CALL 21447 0 3
61317: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61318: LD_VAR 0 2
61322: PUSH
61323: LD_VAR 0 4
61327: ARRAY
61328: PPUSH
61329: LD_VAR 0 1
61333: PPUSH
61334: CALL_OW 255
61338: PPUSH
61339: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61343: LD_VAR 0 2
61347: PUSH
61348: LD_VAR 0 4
61352: ARRAY
61353: PPUSH
61354: CALL_OW 141
// end ;
61358: GO 61190
61360: POP
61361: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61362: LD_VAR 0 1
61366: PPUSH
61367: LD_EXP 38
61371: PUSH
61372: LD_VAR 0 5
61376: ARRAY
61377: PUSH
61378: LD_INT 0
61380: PLUS
61381: PPUSH
61382: CALL_OW 505
// end ;
61386: LD_VAR 0 3
61390: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61391: LD_INT 0
61393: PPUSH
61394: PPUSH
61395: PPUSH
61396: PPUSH
// if not hack in hackTanks then
61397: LD_VAR 0 1
61401: PUSH
61402: LD_EXP 37
61406: IN
61407: NOT
61408: IFFALSE 61412
// exit ;
61410: GO 61652
// index := GetElementIndex ( hackTanks , hack ) ;
61412: LD_ADDR_VAR 0 4
61416: PUSH
61417: LD_EXP 37
61421: PPUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL 21232 0 2
61431: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61432: LD_ADDR_VAR 0 3
61436: PUSH
61437: DOUBLE
61438: LD_EXP 38
61442: PUSH
61443: LD_VAR 0 4
61447: ARRAY
61448: INC
61449: ST_TO_ADDR
61450: LD_INT 1
61452: PUSH
61453: FOR_DOWNTO
61454: IFFALSE 61626
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61456: LD_ADDR_VAR 0 5
61460: PUSH
61461: LD_EXP 38
61465: PUSH
61466: LD_VAR 0 4
61470: ARRAY
61471: PUSH
61472: LD_VAR 0 3
61476: ARRAY
61477: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61478: LD_VAR 0 5
61482: PUSH
61483: LD_INT 1
61485: ARRAY
61486: PPUSH
61487: CALL_OW 302
61491: NOT
61492: PUSH
61493: LD_VAR 0 5
61497: PUSH
61498: LD_INT 1
61500: ARRAY
61501: PPUSH
61502: CALL_OW 255
61506: PUSH
61507: LD_VAR 0 1
61511: PPUSH
61512: CALL_OW 255
61516: NONEQUAL
61517: OR
61518: IFFALSE 61624
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61520: LD_VAR 0 5
61524: PUSH
61525: LD_INT 1
61527: ARRAY
61528: PPUSH
61529: CALL_OW 305
61533: PUSH
61534: LD_VAR 0 5
61538: PUSH
61539: LD_INT 1
61541: ARRAY
61542: PPUSH
61543: CALL_OW 255
61547: PUSH
61548: LD_VAR 0 1
61552: PPUSH
61553: CALL_OW 255
61557: EQUAL
61558: AND
61559: IFFALSE 61583
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61561: LD_VAR 0 5
61565: PUSH
61566: LD_INT 1
61568: ARRAY
61569: PPUSH
61570: LD_VAR 0 5
61574: PUSH
61575: LD_INT 2
61577: ARRAY
61578: PPUSH
61579: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61583: LD_ADDR_EXP 38
61587: PUSH
61588: LD_EXP 38
61592: PPUSH
61593: LD_VAR 0 4
61597: PPUSH
61598: LD_EXP 38
61602: PUSH
61603: LD_VAR 0 4
61607: ARRAY
61608: PPUSH
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL_OW 3
61618: PPUSH
61619: CALL_OW 1
61623: ST_TO_ADDR
// end ; end ;
61624: GO 61453
61626: POP
61627: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61628: LD_VAR 0 1
61632: PPUSH
61633: LD_EXP 38
61637: PUSH
61638: LD_VAR 0 4
61642: ARRAY
61643: PUSH
61644: LD_INT 0
61646: PLUS
61647: PPUSH
61648: CALL_OW 505
// end ;
61652: LD_VAR 0 2
61656: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61657: LD_INT 0
61659: PPUSH
61660: PPUSH
61661: PPUSH
61662: PPUSH
// if not hack in hackTanks then
61663: LD_VAR 0 1
61667: PUSH
61668: LD_EXP 37
61672: IN
61673: NOT
61674: IFFALSE 61678
// exit ;
61676: GO 61763
// index := GetElementIndex ( hackTanks , hack ) ;
61678: LD_ADDR_VAR 0 5
61682: PUSH
61683: LD_EXP 37
61687: PPUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL 21232 0 2
61697: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61698: LD_ADDR_VAR 0 4
61702: PUSH
61703: DOUBLE
61704: LD_INT 1
61706: DEC
61707: ST_TO_ADDR
61708: LD_EXP 38
61712: PUSH
61713: LD_VAR 0 5
61717: ARRAY
61718: PUSH
61719: FOR_TO
61720: IFFALSE 61761
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61722: LD_EXP 38
61726: PUSH
61727: LD_VAR 0 5
61731: ARRAY
61732: PUSH
61733: LD_VAR 0 4
61737: ARRAY
61738: PUSH
61739: LD_INT 1
61741: ARRAY
61742: PUSH
61743: LD_VAR 0 2
61747: EQUAL
61748: IFFALSE 61759
// KillUnit ( vehicle ) ;
61750: LD_VAR 0 2
61754: PPUSH
61755: CALL_OW 66
61759: GO 61719
61761: POP
61762: POP
// end ;
61763: LD_VAR 0 3
61767: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61768: LD_EXP 42
61772: NOT
61773: IFFALSE 61808
61775: GO 61777
61777: DISABLE
// begin initMiner := true ;
61778: LD_ADDR_EXP 42
61782: PUSH
61783: LD_INT 1
61785: ST_TO_ADDR
// minersList := [ ] ;
61786: LD_ADDR_EXP 43
61790: PUSH
61791: EMPTY
61792: ST_TO_ADDR
// minerMinesList := [ ] ;
61793: LD_ADDR_EXP 44
61797: PUSH
61798: EMPTY
61799: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61800: LD_ADDR_EXP 45
61804: PUSH
61805: LD_INT 5
61807: ST_TO_ADDR
// end ;
61808: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61809: LD_EXP 42
61813: PUSH
61814: LD_INT 34
61816: PUSH
61817: LD_INT 81
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PPUSH
61824: CALL_OW 69
61828: AND
61829: IFFALSE 62290
61831: GO 61833
61833: DISABLE
61834: LD_INT 0
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
// begin enable ;
61840: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61841: LD_ADDR_VAR 0 1
61845: PUSH
61846: LD_INT 34
61848: PUSH
61849: LD_INT 81
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PPUSH
61856: CALL_OW 69
61860: PUSH
61861: FOR_IN
61862: IFFALSE 61934
// begin if not i in minersList then
61864: LD_VAR 0 1
61868: PUSH
61869: LD_EXP 43
61873: IN
61874: NOT
61875: IFFALSE 61932
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61877: LD_ADDR_EXP 43
61881: PUSH
61882: LD_EXP 43
61886: PPUSH
61887: LD_EXP 43
61891: PUSH
61892: LD_INT 1
61894: PLUS
61895: PPUSH
61896: LD_VAR 0 1
61900: PPUSH
61901: CALL_OW 1
61905: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61906: LD_ADDR_EXP 44
61910: PUSH
61911: LD_EXP 44
61915: PPUSH
61916: LD_EXP 44
61920: PUSH
61921: LD_INT 1
61923: PLUS
61924: PPUSH
61925: EMPTY
61926: PPUSH
61927: CALL_OW 1
61931: ST_TO_ADDR
// end end ;
61932: GO 61861
61934: POP
61935: POP
// for i := minerMinesList downto 1 do
61936: LD_ADDR_VAR 0 1
61940: PUSH
61941: DOUBLE
61942: LD_EXP 44
61946: INC
61947: ST_TO_ADDR
61948: LD_INT 1
61950: PUSH
61951: FOR_DOWNTO
61952: IFFALSE 62288
// begin if IsLive ( minersList [ i ] ) then
61954: LD_EXP 43
61958: PUSH
61959: LD_VAR 0 1
61963: ARRAY
61964: PPUSH
61965: CALL_OW 300
61969: IFFALSE 61997
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61971: LD_EXP 43
61975: PUSH
61976: LD_VAR 0 1
61980: ARRAY
61981: PPUSH
61982: LD_EXP 44
61986: PUSH
61987: LD_VAR 0 1
61991: ARRAY
61992: PPUSH
61993: CALL_OW 505
// if not minerMinesList [ i ] then
61997: LD_EXP 44
62001: PUSH
62002: LD_VAR 0 1
62006: ARRAY
62007: NOT
62008: IFFALSE 62012
// continue ;
62010: GO 61951
// for j := minerMinesList [ i ] downto 1 do
62012: LD_ADDR_VAR 0 2
62016: PUSH
62017: DOUBLE
62018: LD_EXP 44
62022: PUSH
62023: LD_VAR 0 1
62027: ARRAY
62028: INC
62029: ST_TO_ADDR
62030: LD_INT 1
62032: PUSH
62033: FOR_DOWNTO
62034: IFFALSE 62284
// begin side := GetSide ( minersList [ i ] ) ;
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_EXP 43
62045: PUSH
62046: LD_VAR 0 1
62050: ARRAY
62051: PPUSH
62052: CALL_OW 255
62056: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62057: LD_ADDR_VAR 0 4
62061: PUSH
62062: LD_EXP 44
62066: PUSH
62067: LD_VAR 0 1
62071: ARRAY
62072: PUSH
62073: LD_VAR 0 2
62077: ARRAY
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PPUSH
62083: LD_EXP 44
62087: PUSH
62088: LD_VAR 0 1
62092: ARRAY
62093: PUSH
62094: LD_VAR 0 2
62098: ARRAY
62099: PUSH
62100: LD_INT 2
62102: ARRAY
62103: PPUSH
62104: CALL_OW 428
62108: ST_TO_ADDR
// if not tmp then
62109: LD_VAR 0 4
62113: NOT
62114: IFFALSE 62118
// continue ;
62116: GO 62033
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62118: LD_VAR 0 4
62122: PUSH
62123: LD_INT 81
62125: PUSH
62126: LD_VAR 0 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PPUSH
62135: CALL_OW 69
62139: IN
62140: PUSH
62141: LD_EXP 44
62145: PUSH
62146: LD_VAR 0 1
62150: ARRAY
62151: PUSH
62152: LD_VAR 0 2
62156: ARRAY
62157: PUSH
62158: LD_INT 1
62160: ARRAY
62161: PPUSH
62162: LD_EXP 44
62166: PUSH
62167: LD_VAR 0 1
62171: ARRAY
62172: PUSH
62173: LD_VAR 0 2
62177: ARRAY
62178: PUSH
62179: LD_INT 2
62181: ARRAY
62182: PPUSH
62183: CALL_OW 458
62187: AND
62188: IFFALSE 62282
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62190: LD_EXP 44
62194: PUSH
62195: LD_VAR 0 1
62199: ARRAY
62200: PUSH
62201: LD_VAR 0 2
62205: ARRAY
62206: PUSH
62207: LD_INT 1
62209: ARRAY
62210: PPUSH
62211: LD_EXP 44
62215: PUSH
62216: LD_VAR 0 1
62220: ARRAY
62221: PUSH
62222: LD_VAR 0 2
62226: ARRAY
62227: PUSH
62228: LD_INT 2
62230: ARRAY
62231: PPUSH
62232: LD_VAR 0 3
62236: PPUSH
62237: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62241: LD_ADDR_EXP 44
62245: PUSH
62246: LD_EXP 44
62250: PPUSH
62251: LD_VAR 0 1
62255: PPUSH
62256: LD_EXP 44
62260: PUSH
62261: LD_VAR 0 1
62265: ARRAY
62266: PPUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: CALL_OW 3
62276: PPUSH
62277: CALL_OW 1
62281: ST_TO_ADDR
// end ; end ;
62282: GO 62033
62284: POP
62285: POP
// end ;
62286: GO 61951
62288: POP
62289: POP
// end ;
62290: PPOPN 4
62292: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62293: LD_INT 0
62295: PPUSH
62296: PPUSH
// result := false ;
62297: LD_ADDR_VAR 0 4
62301: PUSH
62302: LD_INT 0
62304: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62305: LD_VAR 0 1
62309: PPUSH
62310: CALL_OW 264
62314: PUSH
62315: LD_INT 81
62317: EQUAL
62318: NOT
62319: IFFALSE 62323
// exit ;
62321: GO 62563
// index := GetElementIndex ( minersList , unit ) ;
62323: LD_ADDR_VAR 0 5
62327: PUSH
62328: LD_EXP 43
62332: PPUSH
62333: LD_VAR 0 1
62337: PPUSH
62338: CALL 21232 0 2
62342: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62343: LD_EXP 44
62347: PUSH
62348: LD_VAR 0 5
62352: ARRAY
62353: PUSH
62354: LD_EXP 45
62358: GREATEREQUAL
62359: IFFALSE 62363
// exit ;
62361: GO 62563
// ComMoveXY ( unit , x , y ) ;
62363: LD_VAR 0 1
62367: PPUSH
62368: LD_VAR 0 2
62372: PPUSH
62373: LD_VAR 0 3
62377: PPUSH
62378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62382: LD_INT 35
62384: PPUSH
62385: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62389: LD_VAR 0 1
62393: PPUSH
62394: LD_VAR 0 2
62398: PPUSH
62399: LD_VAR 0 3
62403: PPUSH
62404: CALL 52984 0 3
62408: NOT
62409: PUSH
62410: LD_VAR 0 1
62414: PPUSH
62415: CALL_OW 314
62419: AND
62420: IFFALSE 62424
// exit ;
62422: GO 62563
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62424: LD_VAR 0 2
62428: PPUSH
62429: LD_VAR 0 3
62433: PPUSH
62434: CALL_OW 428
62438: PUSH
62439: LD_VAR 0 1
62443: EQUAL
62444: PUSH
62445: LD_VAR 0 1
62449: PPUSH
62450: CALL_OW 314
62454: NOT
62455: AND
62456: IFFALSE 62382
// PlaySoundXY ( x , y , PlantMine ) ;
62458: LD_VAR 0 2
62462: PPUSH
62463: LD_VAR 0 3
62467: PPUSH
62468: LD_STRING PlantMine
62470: PPUSH
62471: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62475: LD_VAR 0 2
62479: PPUSH
62480: LD_VAR 0 3
62484: PPUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: CALL_OW 255
62494: PPUSH
62495: LD_INT 0
62497: PPUSH
62498: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62502: LD_ADDR_EXP 44
62506: PUSH
62507: LD_EXP 44
62511: PPUSH
62512: LD_VAR 0 5
62516: PUSH
62517: LD_EXP 44
62521: PUSH
62522: LD_VAR 0 5
62526: ARRAY
62527: PUSH
62528: LD_INT 1
62530: PLUS
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PPUSH
62536: LD_VAR 0 2
62540: PUSH
62541: LD_VAR 0 3
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PPUSH
62550: CALL 21447 0 3
62554: ST_TO_ADDR
// result := true ;
62555: LD_ADDR_VAR 0 4
62559: PUSH
62560: LD_INT 1
62562: ST_TO_ADDR
// end ;
62563: LD_VAR 0 4
62567: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62568: LD_INT 0
62570: PPUSH
62571: PPUSH
62572: PPUSH
// if not unit in minersList then
62573: LD_VAR 0 1
62577: PUSH
62578: LD_EXP 43
62582: IN
62583: NOT
62584: IFFALSE 62588
// exit ;
62586: GO 62980
// index := GetElementIndex ( minersList , unit ) ;
62588: LD_ADDR_VAR 0 6
62592: PUSH
62593: LD_EXP 43
62597: PPUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: CALL 21232 0 2
62607: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62608: LD_ADDR_VAR 0 5
62612: PUSH
62613: DOUBLE
62614: LD_EXP 44
62618: PUSH
62619: LD_VAR 0 6
62623: ARRAY
62624: INC
62625: ST_TO_ADDR
62626: LD_INT 1
62628: PUSH
62629: FOR_DOWNTO
62630: IFFALSE 62791
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62632: LD_EXP 44
62636: PUSH
62637: LD_VAR 0 6
62641: ARRAY
62642: PUSH
62643: LD_VAR 0 5
62647: ARRAY
62648: PUSH
62649: LD_INT 1
62651: ARRAY
62652: PUSH
62653: LD_VAR 0 2
62657: EQUAL
62658: PUSH
62659: LD_EXP 44
62663: PUSH
62664: LD_VAR 0 6
62668: ARRAY
62669: PUSH
62670: LD_VAR 0 5
62674: ARRAY
62675: PUSH
62676: LD_INT 2
62678: ARRAY
62679: PUSH
62680: LD_VAR 0 3
62684: EQUAL
62685: AND
62686: IFFALSE 62789
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62688: LD_EXP 44
62692: PUSH
62693: LD_VAR 0 6
62697: ARRAY
62698: PUSH
62699: LD_VAR 0 5
62703: ARRAY
62704: PUSH
62705: LD_INT 1
62707: ARRAY
62708: PPUSH
62709: LD_EXP 44
62713: PUSH
62714: LD_VAR 0 6
62718: ARRAY
62719: PUSH
62720: LD_VAR 0 5
62724: ARRAY
62725: PUSH
62726: LD_INT 2
62728: ARRAY
62729: PPUSH
62730: LD_VAR 0 1
62734: PPUSH
62735: CALL_OW 255
62739: PPUSH
62740: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62744: LD_ADDR_EXP 44
62748: PUSH
62749: LD_EXP 44
62753: PPUSH
62754: LD_VAR 0 6
62758: PPUSH
62759: LD_EXP 44
62763: PUSH
62764: LD_VAR 0 6
62768: ARRAY
62769: PPUSH
62770: LD_VAR 0 5
62774: PPUSH
62775: CALL_OW 3
62779: PPUSH
62780: CALL_OW 1
62784: ST_TO_ADDR
// exit ;
62785: POP
62786: POP
62787: GO 62980
// end ; end ;
62789: GO 62629
62791: POP
62792: POP
// for i := minerMinesList [ index ] downto 1 do
62793: LD_ADDR_VAR 0 5
62797: PUSH
62798: DOUBLE
62799: LD_EXP 44
62803: PUSH
62804: LD_VAR 0 6
62808: ARRAY
62809: INC
62810: ST_TO_ADDR
62811: LD_INT 1
62813: PUSH
62814: FOR_DOWNTO
62815: IFFALSE 62978
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62817: LD_EXP 44
62821: PUSH
62822: LD_VAR 0 6
62826: ARRAY
62827: PUSH
62828: LD_VAR 0 5
62832: ARRAY
62833: PUSH
62834: LD_INT 1
62836: ARRAY
62837: PPUSH
62838: LD_EXP 44
62842: PUSH
62843: LD_VAR 0 6
62847: ARRAY
62848: PUSH
62849: LD_VAR 0 5
62853: ARRAY
62854: PUSH
62855: LD_INT 2
62857: ARRAY
62858: PPUSH
62859: LD_VAR 0 2
62863: PPUSH
62864: LD_VAR 0 3
62868: PPUSH
62869: CALL_OW 298
62873: PUSH
62874: LD_INT 6
62876: LESS
62877: IFFALSE 62976
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62879: LD_EXP 44
62883: PUSH
62884: LD_VAR 0 6
62888: ARRAY
62889: PUSH
62890: LD_VAR 0 5
62894: ARRAY
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PPUSH
62900: LD_EXP 44
62904: PUSH
62905: LD_VAR 0 6
62909: ARRAY
62910: PUSH
62911: LD_VAR 0 5
62915: ARRAY
62916: PUSH
62917: LD_INT 2
62919: ARRAY
62920: PPUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: CALL_OW 255
62930: PPUSH
62931: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62935: LD_ADDR_EXP 44
62939: PUSH
62940: LD_EXP 44
62944: PPUSH
62945: LD_VAR 0 6
62949: PPUSH
62950: LD_EXP 44
62954: PUSH
62955: LD_VAR 0 6
62959: ARRAY
62960: PPUSH
62961: LD_VAR 0 5
62965: PPUSH
62966: CALL_OW 3
62970: PPUSH
62971: CALL_OW 1
62975: ST_TO_ADDR
// end ; end ;
62976: GO 62814
62978: POP
62979: POP
// end ;
62980: LD_VAR 0 4
62984: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62985: LD_INT 0
62987: PPUSH
62988: PPUSH
62989: PPUSH
62990: PPUSH
62991: PPUSH
62992: PPUSH
62993: PPUSH
62994: PPUSH
62995: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62996: LD_VAR 0 1
63000: PPUSH
63001: CALL_OW 264
63005: PUSH
63006: LD_INT 81
63008: EQUAL
63009: NOT
63010: PUSH
63011: LD_VAR 0 1
63015: PUSH
63016: LD_EXP 43
63020: IN
63021: NOT
63022: OR
63023: IFFALSE 63027
// exit ;
63025: GO 63349
// index := GetElementIndex ( minersList , unit ) ;
63027: LD_ADDR_VAR 0 6
63031: PUSH
63032: LD_EXP 43
63036: PPUSH
63037: LD_VAR 0 1
63041: PPUSH
63042: CALL 21232 0 2
63046: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63047: LD_ADDR_VAR 0 8
63051: PUSH
63052: LD_EXP 45
63056: PUSH
63057: LD_EXP 44
63061: PUSH
63062: LD_VAR 0 6
63066: ARRAY
63067: MINUS
63068: ST_TO_ADDR
// if not minesFreeAmount then
63069: LD_VAR 0 8
63073: NOT
63074: IFFALSE 63078
// exit ;
63076: GO 63349
// tmp := [ ] ;
63078: LD_ADDR_VAR 0 7
63082: PUSH
63083: EMPTY
63084: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63085: LD_ADDR_VAR 0 5
63089: PUSH
63090: DOUBLE
63091: LD_INT 1
63093: DEC
63094: ST_TO_ADDR
63095: LD_VAR 0 8
63099: PUSH
63100: FOR_TO
63101: IFFALSE 63296
// begin _d := rand ( 0 , 5 ) ;
63103: LD_ADDR_VAR 0 11
63107: PUSH
63108: LD_INT 0
63110: PPUSH
63111: LD_INT 5
63113: PPUSH
63114: CALL_OW 12
63118: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63119: LD_ADDR_VAR 0 12
63123: PUSH
63124: LD_INT 2
63126: PPUSH
63127: LD_INT 6
63129: PPUSH
63130: CALL_OW 12
63134: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63135: LD_ADDR_VAR 0 9
63139: PUSH
63140: LD_VAR 0 2
63144: PPUSH
63145: LD_VAR 0 11
63149: PPUSH
63150: LD_VAR 0 12
63154: PPUSH
63155: CALL_OW 272
63159: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63160: LD_ADDR_VAR 0 10
63164: PUSH
63165: LD_VAR 0 3
63169: PPUSH
63170: LD_VAR 0 11
63174: PPUSH
63175: LD_VAR 0 12
63179: PPUSH
63180: CALL_OW 273
63184: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63185: LD_VAR 0 9
63189: PPUSH
63190: LD_VAR 0 10
63194: PPUSH
63195: CALL_OW 488
63199: PUSH
63200: LD_VAR 0 9
63204: PUSH
63205: LD_VAR 0 10
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_VAR 0 7
63218: IN
63219: NOT
63220: AND
63221: PUSH
63222: LD_VAR 0 9
63226: PPUSH
63227: LD_VAR 0 10
63231: PPUSH
63232: CALL_OW 458
63236: NOT
63237: AND
63238: IFFALSE 63280
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63240: LD_ADDR_VAR 0 7
63244: PUSH
63245: LD_VAR 0 7
63249: PPUSH
63250: LD_VAR 0 7
63254: PUSH
63255: LD_INT 1
63257: PLUS
63258: PPUSH
63259: LD_VAR 0 9
63263: PUSH
63264: LD_VAR 0 10
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PPUSH
63273: CALL_OW 1
63277: ST_TO_ADDR
63278: GO 63294
// i := i - 1 ;
63280: LD_ADDR_VAR 0 5
63284: PUSH
63285: LD_VAR 0 5
63289: PUSH
63290: LD_INT 1
63292: MINUS
63293: ST_TO_ADDR
// end ;
63294: GO 63100
63296: POP
63297: POP
// for i in tmp do
63298: LD_ADDR_VAR 0 5
63302: PUSH
63303: LD_VAR 0 7
63307: PUSH
63308: FOR_IN
63309: IFFALSE 63347
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63311: LD_VAR 0 1
63315: PPUSH
63316: LD_VAR 0 5
63320: PUSH
63321: LD_INT 1
63323: ARRAY
63324: PPUSH
63325: LD_VAR 0 5
63329: PUSH
63330: LD_INT 2
63332: ARRAY
63333: PPUSH
63334: CALL 62293 0 3
63338: NOT
63339: IFFALSE 63345
// exit ;
63341: POP
63342: POP
63343: GO 63349
63345: GO 63308
63347: POP
63348: POP
// end ;
63349: LD_VAR 0 4
63353: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
63358: PPUSH
63359: PPUSH
63360: PPUSH
63361: PPUSH
63362: PPUSH
// if not GetClass ( unit ) = class_sniper then
63363: LD_VAR 0 1
63367: PPUSH
63368: CALL_OW 257
63372: PUSH
63373: LD_INT 5
63375: EQUAL
63376: NOT
63377: IFFALSE 63381
// exit ;
63379: GO 63769
// dist := 8 ;
63381: LD_ADDR_VAR 0 5
63385: PUSH
63386: LD_INT 8
63388: ST_TO_ADDR
// viewRange := 12 ;
63389: LD_ADDR_VAR 0 7
63393: PUSH
63394: LD_INT 12
63396: ST_TO_ADDR
// side := GetSide ( unit ) ;
63397: LD_ADDR_VAR 0 6
63401: PUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 255
63411: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63412: LD_INT 61
63414: PPUSH
63415: LD_VAR 0 6
63419: PPUSH
63420: CALL_OW 321
63424: PUSH
63425: LD_INT 2
63427: EQUAL
63428: IFFALSE 63438
// viewRange := 16 ;
63430: LD_ADDR_VAR 0 7
63434: PUSH
63435: LD_INT 16
63437: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63438: LD_VAR 0 1
63442: PPUSH
63443: LD_VAR 0 2
63447: PPUSH
63448: LD_VAR 0 3
63452: PPUSH
63453: CALL_OW 297
63457: PUSH
63458: LD_VAR 0 5
63462: GREATER
63463: IFFALSE 63542
// begin ComMoveXY ( unit , x , y ) ;
63465: LD_VAR 0 1
63469: PPUSH
63470: LD_VAR 0 2
63474: PPUSH
63475: LD_VAR 0 3
63479: PPUSH
63480: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63484: LD_INT 35
63486: PPUSH
63487: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63491: LD_VAR 0 1
63495: PPUSH
63496: LD_VAR 0 2
63500: PPUSH
63501: LD_VAR 0 3
63505: PPUSH
63506: CALL 52984 0 3
63510: NOT
63511: IFFALSE 63515
// exit ;
63513: GO 63769
// until GetDistUnitXY ( unit , x , y ) < dist ;
63515: LD_VAR 0 1
63519: PPUSH
63520: LD_VAR 0 2
63524: PPUSH
63525: LD_VAR 0 3
63529: PPUSH
63530: CALL_OW 297
63534: PUSH
63535: LD_VAR 0 5
63539: LESS
63540: IFFALSE 63484
// end ; ComTurnXY ( unit , x , y ) ;
63542: LD_VAR 0 1
63546: PPUSH
63547: LD_VAR 0 2
63551: PPUSH
63552: LD_VAR 0 3
63556: PPUSH
63557: CALL_OW 118
// wait ( 5 ) ;
63561: LD_INT 5
63563: PPUSH
63564: CALL_OW 67
// _d := GetDir ( unit ) ;
63568: LD_ADDR_VAR 0 10
63572: PUSH
63573: LD_VAR 0 1
63577: PPUSH
63578: CALL_OW 254
63582: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63583: LD_ADDR_VAR 0 8
63587: PUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: CALL_OW 250
63597: PPUSH
63598: LD_VAR 0 10
63602: PPUSH
63603: LD_VAR 0 5
63607: PPUSH
63608: CALL_OW 272
63612: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63613: LD_ADDR_VAR 0 9
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: CALL_OW 251
63627: PPUSH
63628: LD_VAR 0 10
63632: PPUSH
63633: LD_VAR 0 5
63637: PPUSH
63638: CALL_OW 273
63642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63643: LD_VAR 0 8
63647: PPUSH
63648: LD_VAR 0 9
63652: PPUSH
63653: CALL_OW 488
63657: NOT
63658: IFFALSE 63662
// exit ;
63660: GO 63769
// ComAnimCustom ( unit , 1 ) ;
63662: LD_VAR 0 1
63666: PPUSH
63667: LD_INT 1
63669: PPUSH
63670: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63674: LD_VAR 0 8
63678: PPUSH
63679: LD_VAR 0 9
63683: PPUSH
63684: LD_VAR 0 6
63688: PPUSH
63689: LD_VAR 0 7
63693: PPUSH
63694: CALL_OW 330
// repeat wait ( 1 ) ;
63698: LD_INT 1
63700: PPUSH
63701: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL_OW 316
63714: PUSH
63715: LD_VAR 0 1
63719: PPUSH
63720: CALL_OW 314
63724: OR
63725: PUSH
63726: LD_VAR 0 1
63730: PPUSH
63731: CALL_OW 302
63735: NOT
63736: OR
63737: PUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: CALL_OW 301
63747: OR
63748: IFFALSE 63698
// RemoveSeeing ( _x , _y , side ) ;
63750: LD_VAR 0 8
63754: PPUSH
63755: LD_VAR 0 9
63759: PPUSH
63760: LD_VAR 0 6
63764: PPUSH
63765: CALL_OW 331
// end ; end_of_file
63769: LD_VAR 0 4
63773: RET
// export globalGameSaveCounter ; every 0 0$1 do
63774: GO 63776
63776: DISABLE
// begin enable ;
63777: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63778: LD_STRING updateTimer(
63780: PUSH
63781: LD_OWVAR 1
63785: STR
63786: PUSH
63787: LD_STRING );
63789: STR
63790: PPUSH
63791: CALL_OW 559
// end ;
63795: END
// every 0 0$1 do
63796: GO 63798
63798: DISABLE
// begin globalGameSaveCounter := 0 ;
63799: LD_ADDR_EXP 46
63803: PUSH
63804: LD_INT 0
63806: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63807: LD_STRING setGameSaveCounter(0)
63809: PPUSH
63810: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63814: LD_STRING initStreamRollete();
63816: PPUSH
63817: CALL_OW 559
// InitStreamMode ;
63821: CALL 65147 0 0
// DefineStreamItems ( false ) ;
63825: LD_INT 0
63827: PPUSH
63828: CALL 65611 0 1
// end ;
63832: END
// export function SOS_MapStart ( ) ; begin
63833: LD_INT 0
63835: PPUSH
// if streamModeActive then
63836: LD_EXP 47
63840: IFFALSE 63849
// DefineStreamItems ( true ) ;
63842: LD_INT 1
63844: PPUSH
63845: CALL 65611 0 1
// UpdateLuaVariables ( ) ;
63849: CALL 63866 0 0
// UpdateFactoryWaypoints ( ) ;
63853: CALL 78480 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63857: CALL 78737 0 0
// end ;
63861: LD_VAR 0 1
63865: RET
// function UpdateLuaVariables ( ) ; begin
63866: LD_INT 0
63868: PPUSH
// if globalGameSaveCounter then
63869: LD_EXP 46
63873: IFFALSE 63907
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63875: LD_ADDR_EXP 46
63879: PUSH
63880: LD_EXP 46
63884: PPUSH
63885: CALL 55548 0 1
63889: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63890: LD_STRING setGameSaveCounter(
63892: PUSH
63893: LD_EXP 46
63897: STR
63898: PUSH
63899: LD_STRING )
63901: STR
63902: PPUSH
63903: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63907: LD_STRING setGameDifficulty(
63909: PUSH
63910: LD_OWVAR 67
63914: STR
63915: PUSH
63916: LD_STRING )
63918: STR
63919: PPUSH
63920: CALL_OW 559
// end ;
63924: LD_VAR 0 1
63928: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63929: LD_INT 0
63931: PPUSH
// if p2 = stream_mode then
63932: LD_VAR 0 2
63936: PUSH
63937: LD_INT 100
63939: EQUAL
63940: IFFALSE 64943
// begin if not StreamModeActive then
63942: LD_EXP 47
63946: NOT
63947: IFFALSE 63957
// StreamModeActive := true ;
63949: LD_ADDR_EXP 47
63953: PUSH
63954: LD_INT 1
63956: ST_TO_ADDR
// if p3 = 0 then
63957: LD_VAR 0 3
63961: PUSH
63962: LD_INT 0
63964: EQUAL
63965: IFFALSE 63971
// InitStreamMode ;
63967: CALL 65147 0 0
// if p3 = 1 then
63971: LD_VAR 0 3
63975: PUSH
63976: LD_INT 1
63978: EQUAL
63979: IFFALSE 63989
// sRocket := true ;
63981: LD_ADDR_EXP 52
63985: PUSH
63986: LD_INT 1
63988: ST_TO_ADDR
// if p3 = 2 then
63989: LD_VAR 0 3
63993: PUSH
63994: LD_INT 2
63996: EQUAL
63997: IFFALSE 64007
// sSpeed := true ;
63999: LD_ADDR_EXP 51
64003: PUSH
64004: LD_INT 1
64006: ST_TO_ADDR
// if p3 = 3 then
64007: LD_VAR 0 3
64011: PUSH
64012: LD_INT 3
64014: EQUAL
64015: IFFALSE 64025
// sEngine := true ;
64017: LD_ADDR_EXP 53
64021: PUSH
64022: LD_INT 1
64024: ST_TO_ADDR
// if p3 = 4 then
64025: LD_VAR 0 3
64029: PUSH
64030: LD_INT 4
64032: EQUAL
64033: IFFALSE 64043
// sSpec := true ;
64035: LD_ADDR_EXP 50
64039: PUSH
64040: LD_INT 1
64042: ST_TO_ADDR
// if p3 = 5 then
64043: LD_VAR 0 3
64047: PUSH
64048: LD_INT 5
64050: EQUAL
64051: IFFALSE 64061
// sLevel := true ;
64053: LD_ADDR_EXP 54
64057: PUSH
64058: LD_INT 1
64060: ST_TO_ADDR
// if p3 = 6 then
64061: LD_VAR 0 3
64065: PUSH
64066: LD_INT 6
64068: EQUAL
64069: IFFALSE 64079
// sArmoury := true ;
64071: LD_ADDR_EXP 55
64075: PUSH
64076: LD_INT 1
64078: ST_TO_ADDR
// if p3 = 7 then
64079: LD_VAR 0 3
64083: PUSH
64084: LD_INT 7
64086: EQUAL
64087: IFFALSE 64097
// sRadar := true ;
64089: LD_ADDR_EXP 56
64093: PUSH
64094: LD_INT 1
64096: ST_TO_ADDR
// if p3 = 8 then
64097: LD_VAR 0 3
64101: PUSH
64102: LD_INT 8
64104: EQUAL
64105: IFFALSE 64115
// sBunker := true ;
64107: LD_ADDR_EXP 57
64111: PUSH
64112: LD_INT 1
64114: ST_TO_ADDR
// if p3 = 9 then
64115: LD_VAR 0 3
64119: PUSH
64120: LD_INT 9
64122: EQUAL
64123: IFFALSE 64133
// sHack := true ;
64125: LD_ADDR_EXP 58
64129: PUSH
64130: LD_INT 1
64132: ST_TO_ADDR
// if p3 = 10 then
64133: LD_VAR 0 3
64137: PUSH
64138: LD_INT 10
64140: EQUAL
64141: IFFALSE 64151
// sFire := true ;
64143: LD_ADDR_EXP 59
64147: PUSH
64148: LD_INT 1
64150: ST_TO_ADDR
// if p3 = 11 then
64151: LD_VAR 0 3
64155: PUSH
64156: LD_INT 11
64158: EQUAL
64159: IFFALSE 64169
// sRefresh := true ;
64161: LD_ADDR_EXP 60
64165: PUSH
64166: LD_INT 1
64168: ST_TO_ADDR
// if p3 = 12 then
64169: LD_VAR 0 3
64173: PUSH
64174: LD_INT 12
64176: EQUAL
64177: IFFALSE 64187
// sExp := true ;
64179: LD_ADDR_EXP 61
64183: PUSH
64184: LD_INT 1
64186: ST_TO_ADDR
// if p3 = 13 then
64187: LD_VAR 0 3
64191: PUSH
64192: LD_INT 13
64194: EQUAL
64195: IFFALSE 64205
// sDepot := true ;
64197: LD_ADDR_EXP 62
64201: PUSH
64202: LD_INT 1
64204: ST_TO_ADDR
// if p3 = 14 then
64205: LD_VAR 0 3
64209: PUSH
64210: LD_INT 14
64212: EQUAL
64213: IFFALSE 64223
// sFlag := true ;
64215: LD_ADDR_EXP 63
64219: PUSH
64220: LD_INT 1
64222: ST_TO_ADDR
// if p3 = 15 then
64223: LD_VAR 0 3
64227: PUSH
64228: LD_INT 15
64230: EQUAL
64231: IFFALSE 64241
// sKamikadze := true ;
64233: LD_ADDR_EXP 71
64237: PUSH
64238: LD_INT 1
64240: ST_TO_ADDR
// if p3 = 16 then
64241: LD_VAR 0 3
64245: PUSH
64246: LD_INT 16
64248: EQUAL
64249: IFFALSE 64259
// sTroll := true ;
64251: LD_ADDR_EXP 72
64255: PUSH
64256: LD_INT 1
64258: ST_TO_ADDR
// if p3 = 17 then
64259: LD_VAR 0 3
64263: PUSH
64264: LD_INT 17
64266: EQUAL
64267: IFFALSE 64277
// sSlow := true ;
64269: LD_ADDR_EXP 73
64273: PUSH
64274: LD_INT 1
64276: ST_TO_ADDR
// if p3 = 18 then
64277: LD_VAR 0 3
64281: PUSH
64282: LD_INT 18
64284: EQUAL
64285: IFFALSE 64295
// sLack := true ;
64287: LD_ADDR_EXP 74
64291: PUSH
64292: LD_INT 1
64294: ST_TO_ADDR
// if p3 = 19 then
64295: LD_VAR 0 3
64299: PUSH
64300: LD_INT 19
64302: EQUAL
64303: IFFALSE 64313
// sTank := true ;
64305: LD_ADDR_EXP 76
64309: PUSH
64310: LD_INT 1
64312: ST_TO_ADDR
// if p3 = 20 then
64313: LD_VAR 0 3
64317: PUSH
64318: LD_INT 20
64320: EQUAL
64321: IFFALSE 64331
// sRemote := true ;
64323: LD_ADDR_EXP 77
64327: PUSH
64328: LD_INT 1
64330: ST_TO_ADDR
// if p3 = 21 then
64331: LD_VAR 0 3
64335: PUSH
64336: LD_INT 21
64338: EQUAL
64339: IFFALSE 64349
// sPowell := true ;
64341: LD_ADDR_EXP 78
64345: PUSH
64346: LD_INT 1
64348: ST_TO_ADDR
// if p3 = 22 then
64349: LD_VAR 0 3
64353: PUSH
64354: LD_INT 22
64356: EQUAL
64357: IFFALSE 64367
// sTeleport := true ;
64359: LD_ADDR_EXP 81
64363: PUSH
64364: LD_INT 1
64366: ST_TO_ADDR
// if p3 = 23 then
64367: LD_VAR 0 3
64371: PUSH
64372: LD_INT 23
64374: EQUAL
64375: IFFALSE 64385
// sOilTower := true ;
64377: LD_ADDR_EXP 83
64381: PUSH
64382: LD_INT 1
64384: ST_TO_ADDR
// if p3 = 24 then
64385: LD_VAR 0 3
64389: PUSH
64390: LD_INT 24
64392: EQUAL
64393: IFFALSE 64403
// sShovel := true ;
64395: LD_ADDR_EXP 84
64399: PUSH
64400: LD_INT 1
64402: ST_TO_ADDR
// if p3 = 25 then
64403: LD_VAR 0 3
64407: PUSH
64408: LD_INT 25
64410: EQUAL
64411: IFFALSE 64421
// sSheik := true ;
64413: LD_ADDR_EXP 85
64417: PUSH
64418: LD_INT 1
64420: ST_TO_ADDR
// if p3 = 26 then
64421: LD_VAR 0 3
64425: PUSH
64426: LD_INT 26
64428: EQUAL
64429: IFFALSE 64439
// sEarthquake := true ;
64431: LD_ADDR_EXP 87
64435: PUSH
64436: LD_INT 1
64438: ST_TO_ADDR
// if p3 = 27 then
64439: LD_VAR 0 3
64443: PUSH
64444: LD_INT 27
64446: EQUAL
64447: IFFALSE 64457
// sAI := true ;
64449: LD_ADDR_EXP 88
64453: PUSH
64454: LD_INT 1
64456: ST_TO_ADDR
// if p3 = 28 then
64457: LD_VAR 0 3
64461: PUSH
64462: LD_INT 28
64464: EQUAL
64465: IFFALSE 64475
// sCargo := true ;
64467: LD_ADDR_EXP 91
64471: PUSH
64472: LD_INT 1
64474: ST_TO_ADDR
// if p3 = 29 then
64475: LD_VAR 0 3
64479: PUSH
64480: LD_INT 29
64482: EQUAL
64483: IFFALSE 64493
// sDLaser := true ;
64485: LD_ADDR_EXP 92
64489: PUSH
64490: LD_INT 1
64492: ST_TO_ADDR
// if p3 = 30 then
64493: LD_VAR 0 3
64497: PUSH
64498: LD_INT 30
64500: EQUAL
64501: IFFALSE 64511
// sExchange := true ;
64503: LD_ADDR_EXP 93
64507: PUSH
64508: LD_INT 1
64510: ST_TO_ADDR
// if p3 = 31 then
64511: LD_VAR 0 3
64515: PUSH
64516: LD_INT 31
64518: EQUAL
64519: IFFALSE 64529
// sFac := true ;
64521: LD_ADDR_EXP 94
64525: PUSH
64526: LD_INT 1
64528: ST_TO_ADDR
// if p3 = 32 then
64529: LD_VAR 0 3
64533: PUSH
64534: LD_INT 32
64536: EQUAL
64537: IFFALSE 64547
// sPower := true ;
64539: LD_ADDR_EXP 95
64543: PUSH
64544: LD_INT 1
64546: ST_TO_ADDR
// if p3 = 33 then
64547: LD_VAR 0 3
64551: PUSH
64552: LD_INT 33
64554: EQUAL
64555: IFFALSE 64565
// sRandom := true ;
64557: LD_ADDR_EXP 96
64561: PUSH
64562: LD_INT 1
64564: ST_TO_ADDR
// if p3 = 34 then
64565: LD_VAR 0 3
64569: PUSH
64570: LD_INT 34
64572: EQUAL
64573: IFFALSE 64583
// sShield := true ;
64575: LD_ADDR_EXP 97
64579: PUSH
64580: LD_INT 1
64582: ST_TO_ADDR
// if p3 = 35 then
64583: LD_VAR 0 3
64587: PUSH
64588: LD_INT 35
64590: EQUAL
64591: IFFALSE 64601
// sTime := true ;
64593: LD_ADDR_EXP 98
64597: PUSH
64598: LD_INT 1
64600: ST_TO_ADDR
// if p3 = 36 then
64601: LD_VAR 0 3
64605: PUSH
64606: LD_INT 36
64608: EQUAL
64609: IFFALSE 64619
// sTools := true ;
64611: LD_ADDR_EXP 99
64615: PUSH
64616: LD_INT 1
64618: ST_TO_ADDR
// if p3 = 101 then
64619: LD_VAR 0 3
64623: PUSH
64624: LD_INT 101
64626: EQUAL
64627: IFFALSE 64637
// sSold := true ;
64629: LD_ADDR_EXP 64
64633: PUSH
64634: LD_INT 1
64636: ST_TO_ADDR
// if p3 = 102 then
64637: LD_VAR 0 3
64641: PUSH
64642: LD_INT 102
64644: EQUAL
64645: IFFALSE 64655
// sDiff := true ;
64647: LD_ADDR_EXP 65
64651: PUSH
64652: LD_INT 1
64654: ST_TO_ADDR
// if p3 = 103 then
64655: LD_VAR 0 3
64659: PUSH
64660: LD_INT 103
64662: EQUAL
64663: IFFALSE 64673
// sFog := true ;
64665: LD_ADDR_EXP 68
64669: PUSH
64670: LD_INT 1
64672: ST_TO_ADDR
// if p3 = 104 then
64673: LD_VAR 0 3
64677: PUSH
64678: LD_INT 104
64680: EQUAL
64681: IFFALSE 64691
// sReset := true ;
64683: LD_ADDR_EXP 69
64687: PUSH
64688: LD_INT 1
64690: ST_TO_ADDR
// if p3 = 105 then
64691: LD_VAR 0 3
64695: PUSH
64696: LD_INT 105
64698: EQUAL
64699: IFFALSE 64709
// sSun := true ;
64701: LD_ADDR_EXP 70
64705: PUSH
64706: LD_INT 1
64708: ST_TO_ADDR
// if p3 = 106 then
64709: LD_VAR 0 3
64713: PUSH
64714: LD_INT 106
64716: EQUAL
64717: IFFALSE 64727
// sTiger := true ;
64719: LD_ADDR_EXP 66
64723: PUSH
64724: LD_INT 1
64726: ST_TO_ADDR
// if p3 = 107 then
64727: LD_VAR 0 3
64731: PUSH
64732: LD_INT 107
64734: EQUAL
64735: IFFALSE 64745
// sBomb := true ;
64737: LD_ADDR_EXP 67
64741: PUSH
64742: LD_INT 1
64744: ST_TO_ADDR
// if p3 = 108 then
64745: LD_VAR 0 3
64749: PUSH
64750: LD_INT 108
64752: EQUAL
64753: IFFALSE 64763
// sWound := true ;
64755: LD_ADDR_EXP 75
64759: PUSH
64760: LD_INT 1
64762: ST_TO_ADDR
// if p3 = 109 then
64763: LD_VAR 0 3
64767: PUSH
64768: LD_INT 109
64770: EQUAL
64771: IFFALSE 64781
// sBetray := true ;
64773: LD_ADDR_EXP 79
64777: PUSH
64778: LD_INT 1
64780: ST_TO_ADDR
// if p3 = 110 then
64781: LD_VAR 0 3
64785: PUSH
64786: LD_INT 110
64788: EQUAL
64789: IFFALSE 64799
// sContamin := true ;
64791: LD_ADDR_EXP 80
64795: PUSH
64796: LD_INT 1
64798: ST_TO_ADDR
// if p3 = 111 then
64799: LD_VAR 0 3
64803: PUSH
64804: LD_INT 111
64806: EQUAL
64807: IFFALSE 64817
// sOil := true ;
64809: LD_ADDR_EXP 82
64813: PUSH
64814: LD_INT 1
64816: ST_TO_ADDR
// if p3 = 112 then
64817: LD_VAR 0 3
64821: PUSH
64822: LD_INT 112
64824: EQUAL
64825: IFFALSE 64835
// sStu := true ;
64827: LD_ADDR_EXP 86
64831: PUSH
64832: LD_INT 1
64834: ST_TO_ADDR
// if p3 = 113 then
64835: LD_VAR 0 3
64839: PUSH
64840: LD_INT 113
64842: EQUAL
64843: IFFALSE 64853
// sBazooka := true ;
64845: LD_ADDR_EXP 89
64849: PUSH
64850: LD_INT 1
64852: ST_TO_ADDR
// if p3 = 114 then
64853: LD_VAR 0 3
64857: PUSH
64858: LD_INT 114
64860: EQUAL
64861: IFFALSE 64871
// sMortar := true ;
64863: LD_ADDR_EXP 90
64867: PUSH
64868: LD_INT 1
64870: ST_TO_ADDR
// if p3 = 115 then
64871: LD_VAR 0 3
64875: PUSH
64876: LD_INT 115
64878: EQUAL
64879: IFFALSE 64889
// sRanger := true ;
64881: LD_ADDR_EXP 100
64885: PUSH
64886: LD_INT 1
64888: ST_TO_ADDR
// if p3 = 116 then
64889: LD_VAR 0 3
64893: PUSH
64894: LD_INT 116
64896: EQUAL
64897: IFFALSE 64907
// sComputer := true ;
64899: LD_ADDR_EXP 101
64903: PUSH
64904: LD_INT 1
64906: ST_TO_ADDR
// if p3 = 117 then
64907: LD_VAR 0 3
64911: PUSH
64912: LD_INT 117
64914: EQUAL
64915: IFFALSE 64925
// s30 := true ;
64917: LD_ADDR_EXP 102
64921: PUSH
64922: LD_INT 1
64924: ST_TO_ADDR
// if p3 = 118 then
64925: LD_VAR 0 3
64929: PUSH
64930: LD_INT 118
64932: EQUAL
64933: IFFALSE 64943
// s60 := true ;
64935: LD_ADDR_EXP 103
64939: PUSH
64940: LD_INT 1
64942: ST_TO_ADDR
// end ; if p2 = hack_mode then
64943: LD_VAR 0 2
64947: PUSH
64948: LD_INT 101
64950: EQUAL
64951: IFFALSE 65079
// begin case p3 of 1 :
64953: LD_VAR 0 3
64957: PUSH
64958: LD_INT 1
64960: DOUBLE
64961: EQUAL
64962: IFTRUE 64966
64964: GO 64973
64966: POP
// hHackUnlimitedResources ; 2 :
64967: CALL 77226 0 0
64971: GO 65079
64973: LD_INT 2
64975: DOUBLE
64976: EQUAL
64977: IFTRUE 64981
64979: GO 64988
64981: POP
// hHackSetLevel10 ; 3 :
64982: CALL 77359 0 0
64986: GO 65079
64988: LD_INT 3
64990: DOUBLE
64991: EQUAL
64992: IFTRUE 64996
64994: GO 65003
64996: POP
// hHackSetLevel10YourUnits ; 4 :
64997: CALL 77444 0 0
65001: GO 65079
65003: LD_INT 4
65005: DOUBLE
65006: EQUAL
65007: IFTRUE 65011
65009: GO 65018
65011: POP
// hHackInvincible ; 5 :
65012: CALL 77892 0 0
65016: GO 65079
65018: LD_INT 5
65020: DOUBLE
65021: EQUAL
65022: IFTRUE 65026
65024: GO 65033
65026: POP
// hHackInvisible ; 6 :
65027: CALL 78003 0 0
65031: GO 65079
65033: LD_INT 6
65035: DOUBLE
65036: EQUAL
65037: IFTRUE 65041
65039: GO 65048
65041: POP
// hHackChangeYourSide ; 7 :
65042: CALL 78060 0 0
65046: GO 65079
65048: LD_INT 7
65050: DOUBLE
65051: EQUAL
65052: IFTRUE 65056
65054: GO 65063
65056: POP
// hHackChangeUnitSide ; 8 :
65057: CALL 78102 0 0
65061: GO 65079
65063: LD_INT 8
65065: DOUBLE
65066: EQUAL
65067: IFTRUE 65071
65069: GO 65078
65071: POP
// hHackFog ; end ;
65072: CALL 78203 0 0
65076: GO 65079
65078: POP
// end ; if p2 = game_save_mode then
65079: LD_VAR 0 2
65083: PUSH
65084: LD_INT 102
65086: EQUAL
65087: IFFALSE 65142
// begin if p3 = 1 then
65089: LD_VAR 0 3
65093: PUSH
65094: LD_INT 1
65096: EQUAL
65097: IFFALSE 65109
// globalGameSaveCounter := p4 ;
65099: LD_ADDR_EXP 46
65103: PUSH
65104: LD_VAR 0 4
65108: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65109: LD_VAR 0 3
65113: PUSH
65114: LD_INT 2
65116: EQUAL
65117: PUSH
65118: LD_EXP 46
65122: AND
65123: IFFALSE 65142
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65125: LD_STRING setGameSaveCounter(
65127: PUSH
65128: LD_EXP 46
65132: STR
65133: PUSH
65134: LD_STRING )
65136: STR
65137: PPUSH
65138: CALL_OW 559
// end ; end ;
65142: LD_VAR 0 7
65146: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65147: LD_INT 0
65149: PPUSH
// streamModeActive := false ;
65150: LD_ADDR_EXP 47
65154: PUSH
65155: LD_INT 0
65157: ST_TO_ADDR
// normalCounter := 36 ;
65158: LD_ADDR_EXP 48
65162: PUSH
65163: LD_INT 36
65165: ST_TO_ADDR
// hardcoreCounter := 18 ;
65166: LD_ADDR_EXP 49
65170: PUSH
65171: LD_INT 18
65173: ST_TO_ADDR
// sRocket := false ;
65174: LD_ADDR_EXP 52
65178: PUSH
65179: LD_INT 0
65181: ST_TO_ADDR
// sSpeed := false ;
65182: LD_ADDR_EXP 51
65186: PUSH
65187: LD_INT 0
65189: ST_TO_ADDR
// sEngine := false ;
65190: LD_ADDR_EXP 53
65194: PUSH
65195: LD_INT 0
65197: ST_TO_ADDR
// sSpec := false ;
65198: LD_ADDR_EXP 50
65202: PUSH
65203: LD_INT 0
65205: ST_TO_ADDR
// sLevel := false ;
65206: LD_ADDR_EXP 54
65210: PUSH
65211: LD_INT 0
65213: ST_TO_ADDR
// sArmoury := false ;
65214: LD_ADDR_EXP 55
65218: PUSH
65219: LD_INT 0
65221: ST_TO_ADDR
// sRadar := false ;
65222: LD_ADDR_EXP 56
65226: PUSH
65227: LD_INT 0
65229: ST_TO_ADDR
// sBunker := false ;
65230: LD_ADDR_EXP 57
65234: PUSH
65235: LD_INT 0
65237: ST_TO_ADDR
// sHack := false ;
65238: LD_ADDR_EXP 58
65242: PUSH
65243: LD_INT 0
65245: ST_TO_ADDR
// sFire := false ;
65246: LD_ADDR_EXP 59
65250: PUSH
65251: LD_INT 0
65253: ST_TO_ADDR
// sRefresh := false ;
65254: LD_ADDR_EXP 60
65258: PUSH
65259: LD_INT 0
65261: ST_TO_ADDR
// sExp := false ;
65262: LD_ADDR_EXP 61
65266: PUSH
65267: LD_INT 0
65269: ST_TO_ADDR
// sDepot := false ;
65270: LD_ADDR_EXP 62
65274: PUSH
65275: LD_INT 0
65277: ST_TO_ADDR
// sFlag := false ;
65278: LD_ADDR_EXP 63
65282: PUSH
65283: LD_INT 0
65285: ST_TO_ADDR
// sKamikadze := false ;
65286: LD_ADDR_EXP 71
65290: PUSH
65291: LD_INT 0
65293: ST_TO_ADDR
// sTroll := false ;
65294: LD_ADDR_EXP 72
65298: PUSH
65299: LD_INT 0
65301: ST_TO_ADDR
// sSlow := false ;
65302: LD_ADDR_EXP 73
65306: PUSH
65307: LD_INT 0
65309: ST_TO_ADDR
// sLack := false ;
65310: LD_ADDR_EXP 74
65314: PUSH
65315: LD_INT 0
65317: ST_TO_ADDR
// sTank := false ;
65318: LD_ADDR_EXP 76
65322: PUSH
65323: LD_INT 0
65325: ST_TO_ADDR
// sRemote := false ;
65326: LD_ADDR_EXP 77
65330: PUSH
65331: LD_INT 0
65333: ST_TO_ADDR
// sPowell := false ;
65334: LD_ADDR_EXP 78
65338: PUSH
65339: LD_INT 0
65341: ST_TO_ADDR
// sTeleport := false ;
65342: LD_ADDR_EXP 81
65346: PUSH
65347: LD_INT 0
65349: ST_TO_ADDR
// sOilTower := false ;
65350: LD_ADDR_EXP 83
65354: PUSH
65355: LD_INT 0
65357: ST_TO_ADDR
// sShovel := false ;
65358: LD_ADDR_EXP 84
65362: PUSH
65363: LD_INT 0
65365: ST_TO_ADDR
// sSheik := false ;
65366: LD_ADDR_EXP 85
65370: PUSH
65371: LD_INT 0
65373: ST_TO_ADDR
// sEarthquake := false ;
65374: LD_ADDR_EXP 87
65378: PUSH
65379: LD_INT 0
65381: ST_TO_ADDR
// sAI := false ;
65382: LD_ADDR_EXP 88
65386: PUSH
65387: LD_INT 0
65389: ST_TO_ADDR
// sCargo := false ;
65390: LD_ADDR_EXP 91
65394: PUSH
65395: LD_INT 0
65397: ST_TO_ADDR
// sDLaser := false ;
65398: LD_ADDR_EXP 92
65402: PUSH
65403: LD_INT 0
65405: ST_TO_ADDR
// sExchange := false ;
65406: LD_ADDR_EXP 93
65410: PUSH
65411: LD_INT 0
65413: ST_TO_ADDR
// sFac := false ;
65414: LD_ADDR_EXP 94
65418: PUSH
65419: LD_INT 0
65421: ST_TO_ADDR
// sPower := false ;
65422: LD_ADDR_EXP 95
65426: PUSH
65427: LD_INT 0
65429: ST_TO_ADDR
// sRandom := false ;
65430: LD_ADDR_EXP 96
65434: PUSH
65435: LD_INT 0
65437: ST_TO_ADDR
// sShield := false ;
65438: LD_ADDR_EXP 97
65442: PUSH
65443: LD_INT 0
65445: ST_TO_ADDR
// sTime := false ;
65446: LD_ADDR_EXP 98
65450: PUSH
65451: LD_INT 0
65453: ST_TO_ADDR
// sTools := false ;
65454: LD_ADDR_EXP 99
65458: PUSH
65459: LD_INT 0
65461: ST_TO_ADDR
// sSold := false ;
65462: LD_ADDR_EXP 64
65466: PUSH
65467: LD_INT 0
65469: ST_TO_ADDR
// sDiff := false ;
65470: LD_ADDR_EXP 65
65474: PUSH
65475: LD_INT 0
65477: ST_TO_ADDR
// sFog := false ;
65478: LD_ADDR_EXP 68
65482: PUSH
65483: LD_INT 0
65485: ST_TO_ADDR
// sReset := false ;
65486: LD_ADDR_EXP 69
65490: PUSH
65491: LD_INT 0
65493: ST_TO_ADDR
// sSun := false ;
65494: LD_ADDR_EXP 70
65498: PUSH
65499: LD_INT 0
65501: ST_TO_ADDR
// sTiger := false ;
65502: LD_ADDR_EXP 66
65506: PUSH
65507: LD_INT 0
65509: ST_TO_ADDR
// sBomb := false ;
65510: LD_ADDR_EXP 67
65514: PUSH
65515: LD_INT 0
65517: ST_TO_ADDR
// sWound := false ;
65518: LD_ADDR_EXP 75
65522: PUSH
65523: LD_INT 0
65525: ST_TO_ADDR
// sBetray := false ;
65526: LD_ADDR_EXP 79
65530: PUSH
65531: LD_INT 0
65533: ST_TO_ADDR
// sContamin := false ;
65534: LD_ADDR_EXP 80
65538: PUSH
65539: LD_INT 0
65541: ST_TO_ADDR
// sOil := false ;
65542: LD_ADDR_EXP 82
65546: PUSH
65547: LD_INT 0
65549: ST_TO_ADDR
// sStu := false ;
65550: LD_ADDR_EXP 86
65554: PUSH
65555: LD_INT 0
65557: ST_TO_ADDR
// sBazooka := false ;
65558: LD_ADDR_EXP 89
65562: PUSH
65563: LD_INT 0
65565: ST_TO_ADDR
// sMortar := false ;
65566: LD_ADDR_EXP 90
65570: PUSH
65571: LD_INT 0
65573: ST_TO_ADDR
// sRanger := false ;
65574: LD_ADDR_EXP 100
65578: PUSH
65579: LD_INT 0
65581: ST_TO_ADDR
// sComputer := false ;
65582: LD_ADDR_EXP 101
65586: PUSH
65587: LD_INT 0
65589: ST_TO_ADDR
// s30 := false ;
65590: LD_ADDR_EXP 102
65594: PUSH
65595: LD_INT 0
65597: ST_TO_ADDR
// s60 := false ;
65598: LD_ADDR_EXP 103
65602: PUSH
65603: LD_INT 0
65605: ST_TO_ADDR
// end ;
65606: LD_VAR 0 1
65610: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
65611: LD_INT 0
65613: PPUSH
65614: PPUSH
65615: PPUSH
65616: PPUSH
65617: PPUSH
65618: PPUSH
65619: PPUSH
// result := [ ] ;
65620: LD_ADDR_VAR 0 2
65624: PUSH
65625: EMPTY
65626: ST_TO_ADDR
// if campaign_id = 1 then
65627: LD_OWVAR 69
65631: PUSH
65632: LD_INT 1
65634: EQUAL
65635: IFFALSE 68801
// begin case mission_number of 1 :
65637: LD_OWVAR 70
65641: PUSH
65642: LD_INT 1
65644: DOUBLE
65645: EQUAL
65646: IFTRUE 65650
65648: GO 65726
65650: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65651: LD_ADDR_VAR 0 2
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: LD_INT 4
65661: PUSH
65662: LD_INT 11
65664: PUSH
65665: LD_INT 12
65667: PUSH
65668: LD_INT 15
65670: PUSH
65671: LD_INT 16
65673: PUSH
65674: LD_INT 22
65676: PUSH
65677: LD_INT 23
65679: PUSH
65680: LD_INT 26
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 101
65696: PUSH
65697: LD_INT 102
65699: PUSH
65700: LD_INT 106
65702: PUSH
65703: LD_INT 116
65705: PUSH
65706: LD_INT 117
65708: PUSH
65709: LD_INT 118
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: ST_TO_ADDR
65724: GO 68799
65726: LD_INT 2
65728: DOUBLE
65729: EQUAL
65730: IFTRUE 65734
65732: GO 65818
65734: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65735: LD_ADDR_VAR 0 2
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: LD_INT 4
65745: PUSH
65746: LD_INT 11
65748: PUSH
65749: LD_INT 12
65751: PUSH
65752: LD_INT 15
65754: PUSH
65755: LD_INT 16
65757: PUSH
65758: LD_INT 22
65760: PUSH
65761: LD_INT 23
65763: PUSH
65764: LD_INT 26
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 101
65780: PUSH
65781: LD_INT 102
65783: PUSH
65784: LD_INT 105
65786: PUSH
65787: LD_INT 106
65789: PUSH
65790: LD_INT 108
65792: PUSH
65793: LD_INT 116
65795: PUSH
65796: LD_INT 117
65798: PUSH
65799: LD_INT 118
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: ST_TO_ADDR
65816: GO 68799
65818: LD_INT 3
65820: DOUBLE
65821: EQUAL
65822: IFTRUE 65826
65824: GO 65914
65826: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65827: LD_ADDR_VAR 0 2
65831: PUSH
65832: LD_INT 2
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: LD_INT 5
65840: PUSH
65841: LD_INT 11
65843: PUSH
65844: LD_INT 12
65846: PUSH
65847: LD_INT 15
65849: PUSH
65850: LD_INT 16
65852: PUSH
65853: LD_INT 22
65855: PUSH
65856: LD_INT 26
65858: PUSH
65859: LD_INT 36
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 101
65876: PUSH
65877: LD_INT 102
65879: PUSH
65880: LD_INT 105
65882: PUSH
65883: LD_INT 106
65885: PUSH
65886: LD_INT 108
65888: PUSH
65889: LD_INT 116
65891: PUSH
65892: LD_INT 117
65894: PUSH
65895: LD_INT 118
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: ST_TO_ADDR
65912: GO 68799
65914: LD_INT 4
65916: DOUBLE
65917: EQUAL
65918: IFTRUE 65922
65920: GO 66018
65922: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65923: LD_ADDR_VAR 0 2
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 4
65933: PUSH
65934: LD_INT 5
65936: PUSH
65937: LD_INT 8
65939: PUSH
65940: LD_INT 11
65942: PUSH
65943: LD_INT 12
65945: PUSH
65946: LD_INT 15
65948: PUSH
65949: LD_INT 16
65951: PUSH
65952: LD_INT 22
65954: PUSH
65955: LD_INT 23
65957: PUSH
65958: LD_INT 26
65960: PUSH
65961: LD_INT 36
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 101
65980: PUSH
65981: LD_INT 102
65983: PUSH
65984: LD_INT 105
65986: PUSH
65987: LD_INT 106
65989: PUSH
65990: LD_INT 108
65992: PUSH
65993: LD_INT 116
65995: PUSH
65996: LD_INT 117
65998: PUSH
65999: LD_INT 118
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: ST_TO_ADDR
66016: GO 68799
66018: LD_INT 5
66020: DOUBLE
66021: EQUAL
66022: IFTRUE 66026
66024: GO 66138
66026: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66027: LD_ADDR_VAR 0 2
66031: PUSH
66032: LD_INT 2
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: LD_INT 6
66043: PUSH
66044: LD_INT 8
66046: PUSH
66047: LD_INT 11
66049: PUSH
66050: LD_INT 12
66052: PUSH
66053: LD_INT 15
66055: PUSH
66056: LD_INT 16
66058: PUSH
66059: LD_INT 22
66061: PUSH
66062: LD_INT 23
66064: PUSH
66065: LD_INT 25
66067: PUSH
66068: LD_INT 26
66070: PUSH
66071: LD_INT 36
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 101
66092: PUSH
66093: LD_INT 102
66095: PUSH
66096: LD_INT 105
66098: PUSH
66099: LD_INT 106
66101: PUSH
66102: LD_INT 108
66104: PUSH
66105: LD_INT 109
66107: PUSH
66108: LD_INT 112
66110: PUSH
66111: LD_INT 116
66113: PUSH
66114: LD_INT 117
66116: PUSH
66117: LD_INT 118
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: ST_TO_ADDR
66136: GO 68799
66138: LD_INT 6
66140: DOUBLE
66141: EQUAL
66142: IFTRUE 66146
66144: GO 66278
66146: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66147: LD_ADDR_VAR 0 2
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 4
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: LD_INT 6
66163: PUSH
66164: LD_INT 8
66166: PUSH
66167: LD_INT 11
66169: PUSH
66170: LD_INT 12
66172: PUSH
66173: LD_INT 15
66175: PUSH
66176: LD_INT 16
66178: PUSH
66179: LD_INT 20
66181: PUSH
66182: LD_INT 21
66184: PUSH
66185: LD_INT 22
66187: PUSH
66188: LD_INT 23
66190: PUSH
66191: LD_INT 25
66193: PUSH
66194: LD_INT 26
66196: PUSH
66197: LD_INT 30
66199: PUSH
66200: LD_INT 31
66202: PUSH
66203: LD_INT 32
66205: PUSH
66206: LD_INT 36
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 101
66232: PUSH
66233: LD_INT 102
66235: PUSH
66236: LD_INT 105
66238: PUSH
66239: LD_INT 106
66241: PUSH
66242: LD_INT 108
66244: PUSH
66245: LD_INT 109
66247: PUSH
66248: LD_INT 112
66250: PUSH
66251: LD_INT 116
66253: PUSH
66254: LD_INT 117
66256: PUSH
66257: LD_INT 118
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: ST_TO_ADDR
66276: GO 68799
66278: LD_INT 7
66280: DOUBLE
66281: EQUAL
66282: IFTRUE 66286
66284: GO 66398
66286: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66287: LD_ADDR_VAR 0 2
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: LD_INT 4
66297: PUSH
66298: LD_INT 5
66300: PUSH
66301: LD_INT 7
66303: PUSH
66304: LD_INT 11
66306: PUSH
66307: LD_INT 12
66309: PUSH
66310: LD_INT 15
66312: PUSH
66313: LD_INT 16
66315: PUSH
66316: LD_INT 20
66318: PUSH
66319: LD_INT 21
66321: PUSH
66322: LD_INT 22
66324: PUSH
66325: LD_INT 23
66327: PUSH
66328: LD_INT 25
66330: PUSH
66331: LD_INT 26
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 101
66352: PUSH
66353: LD_INT 102
66355: PUSH
66356: LD_INT 103
66358: PUSH
66359: LD_INT 105
66361: PUSH
66362: LD_INT 106
66364: PUSH
66365: LD_INT 108
66367: PUSH
66368: LD_INT 112
66370: PUSH
66371: LD_INT 116
66373: PUSH
66374: LD_INT 117
66376: PUSH
66377: LD_INT 118
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: ST_TO_ADDR
66396: GO 68799
66398: LD_INT 8
66400: DOUBLE
66401: EQUAL
66402: IFTRUE 66406
66404: GO 66546
66406: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66407: LD_ADDR_VAR 0 2
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: LD_INT 4
66417: PUSH
66418: LD_INT 5
66420: PUSH
66421: LD_INT 6
66423: PUSH
66424: LD_INT 7
66426: PUSH
66427: LD_INT 8
66429: PUSH
66430: LD_INT 11
66432: PUSH
66433: LD_INT 12
66435: PUSH
66436: LD_INT 15
66438: PUSH
66439: LD_INT 16
66441: PUSH
66442: LD_INT 20
66444: PUSH
66445: LD_INT 21
66447: PUSH
66448: LD_INT 22
66450: PUSH
66451: LD_INT 23
66453: PUSH
66454: LD_INT 25
66456: PUSH
66457: LD_INT 26
66459: PUSH
66460: LD_INT 30
66462: PUSH
66463: LD_INT 31
66465: PUSH
66466: LD_INT 32
66468: PUSH
66469: LD_INT 36
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 101
66496: PUSH
66497: LD_INT 102
66499: PUSH
66500: LD_INT 103
66502: PUSH
66503: LD_INT 105
66505: PUSH
66506: LD_INT 106
66508: PUSH
66509: LD_INT 108
66511: PUSH
66512: LD_INT 109
66514: PUSH
66515: LD_INT 112
66517: PUSH
66518: LD_INT 116
66520: PUSH
66521: LD_INT 117
66523: PUSH
66524: LD_INT 118
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: ST_TO_ADDR
66544: GO 68799
66546: LD_INT 9
66548: DOUBLE
66549: EQUAL
66550: IFTRUE 66554
66552: GO 66702
66554: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66555: LD_ADDR_VAR 0 2
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: LD_INT 6
66571: PUSH
66572: LD_INT 7
66574: PUSH
66575: LD_INT 8
66577: PUSH
66578: LD_INT 11
66580: PUSH
66581: LD_INT 12
66583: PUSH
66584: LD_INT 15
66586: PUSH
66587: LD_INT 16
66589: PUSH
66590: LD_INT 20
66592: PUSH
66593: LD_INT 21
66595: PUSH
66596: LD_INT 22
66598: PUSH
66599: LD_INT 23
66601: PUSH
66602: LD_INT 25
66604: PUSH
66605: LD_INT 26
66607: PUSH
66608: LD_INT 28
66610: PUSH
66611: LD_INT 30
66613: PUSH
66614: LD_INT 31
66616: PUSH
66617: LD_INT 32
66619: PUSH
66620: LD_INT 36
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 101
66648: PUSH
66649: LD_INT 102
66651: PUSH
66652: LD_INT 103
66654: PUSH
66655: LD_INT 105
66657: PUSH
66658: LD_INT 106
66660: PUSH
66661: LD_INT 108
66663: PUSH
66664: LD_INT 109
66666: PUSH
66667: LD_INT 112
66669: PUSH
66670: LD_INT 114
66672: PUSH
66673: LD_INT 116
66675: PUSH
66676: LD_INT 117
66678: PUSH
66679: LD_INT 118
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: ST_TO_ADDR
66700: GO 68799
66702: LD_INT 10
66704: DOUBLE
66705: EQUAL
66706: IFTRUE 66710
66708: GO 66906
66710: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66711: LD_ADDR_VAR 0 2
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: LD_INT 4
66721: PUSH
66722: LD_INT 5
66724: PUSH
66725: LD_INT 6
66727: PUSH
66728: LD_INT 7
66730: PUSH
66731: LD_INT 8
66733: PUSH
66734: LD_INT 9
66736: PUSH
66737: LD_INT 10
66739: PUSH
66740: LD_INT 11
66742: PUSH
66743: LD_INT 12
66745: PUSH
66746: LD_INT 13
66748: PUSH
66749: LD_INT 14
66751: PUSH
66752: LD_INT 15
66754: PUSH
66755: LD_INT 16
66757: PUSH
66758: LD_INT 17
66760: PUSH
66761: LD_INT 18
66763: PUSH
66764: LD_INT 19
66766: PUSH
66767: LD_INT 20
66769: PUSH
66770: LD_INT 21
66772: PUSH
66773: LD_INT 22
66775: PUSH
66776: LD_INT 23
66778: PUSH
66779: LD_INT 24
66781: PUSH
66782: LD_INT 25
66784: PUSH
66785: LD_INT 26
66787: PUSH
66788: LD_INT 28
66790: PUSH
66791: LD_INT 30
66793: PUSH
66794: LD_INT 31
66796: PUSH
66797: LD_INT 32
66799: PUSH
66800: LD_INT 36
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 101
66836: PUSH
66837: LD_INT 102
66839: PUSH
66840: LD_INT 103
66842: PUSH
66843: LD_INT 104
66845: PUSH
66846: LD_INT 105
66848: PUSH
66849: LD_INT 106
66851: PUSH
66852: LD_INT 107
66854: PUSH
66855: LD_INT 108
66857: PUSH
66858: LD_INT 109
66860: PUSH
66861: LD_INT 110
66863: PUSH
66864: LD_INT 111
66866: PUSH
66867: LD_INT 112
66869: PUSH
66870: LD_INT 114
66872: PUSH
66873: LD_INT 116
66875: PUSH
66876: LD_INT 117
66878: PUSH
66879: LD_INT 118
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: ST_TO_ADDR
66904: GO 68799
66906: LD_INT 11
66908: DOUBLE
66909: EQUAL
66910: IFTRUE 66914
66912: GO 67118
66914: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66915: LD_ADDR_VAR 0 2
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: LD_INT 5
66931: PUSH
66932: LD_INT 6
66934: PUSH
66935: LD_INT 7
66937: PUSH
66938: LD_INT 8
66940: PUSH
66941: LD_INT 9
66943: PUSH
66944: LD_INT 10
66946: PUSH
66947: LD_INT 11
66949: PUSH
66950: LD_INT 12
66952: PUSH
66953: LD_INT 13
66955: PUSH
66956: LD_INT 14
66958: PUSH
66959: LD_INT 15
66961: PUSH
66962: LD_INT 16
66964: PUSH
66965: LD_INT 17
66967: PUSH
66968: LD_INT 18
66970: PUSH
66971: LD_INT 19
66973: PUSH
66974: LD_INT 20
66976: PUSH
66977: LD_INT 21
66979: PUSH
66980: LD_INT 22
66982: PUSH
66983: LD_INT 23
66985: PUSH
66986: LD_INT 24
66988: PUSH
66989: LD_INT 25
66991: PUSH
66992: LD_INT 26
66994: PUSH
66995: LD_INT 28
66997: PUSH
66998: LD_INT 30
67000: PUSH
67001: LD_INT 31
67003: PUSH
67004: LD_INT 32
67006: PUSH
67007: LD_INT 34
67009: PUSH
67010: LD_INT 36
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 101
67048: PUSH
67049: LD_INT 102
67051: PUSH
67052: LD_INT 103
67054: PUSH
67055: LD_INT 104
67057: PUSH
67058: LD_INT 105
67060: PUSH
67061: LD_INT 106
67063: PUSH
67064: LD_INT 107
67066: PUSH
67067: LD_INT 108
67069: PUSH
67070: LD_INT 109
67072: PUSH
67073: LD_INT 110
67075: PUSH
67076: LD_INT 111
67078: PUSH
67079: LD_INT 112
67081: PUSH
67082: LD_INT 114
67084: PUSH
67085: LD_INT 116
67087: PUSH
67088: LD_INT 117
67090: PUSH
67091: LD_INT 118
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: ST_TO_ADDR
67116: GO 68799
67118: LD_INT 12
67120: DOUBLE
67121: EQUAL
67122: IFTRUE 67126
67124: GO 67346
67126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67127: LD_ADDR_VAR 0 2
67131: PUSH
67132: LD_INT 1
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: LD_INT 3
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: LD_INT 5
67146: PUSH
67147: LD_INT 6
67149: PUSH
67150: LD_INT 7
67152: PUSH
67153: LD_INT 8
67155: PUSH
67156: LD_INT 9
67158: PUSH
67159: LD_INT 10
67161: PUSH
67162: LD_INT 11
67164: PUSH
67165: LD_INT 12
67167: PUSH
67168: LD_INT 13
67170: PUSH
67171: LD_INT 14
67173: PUSH
67174: LD_INT 15
67176: PUSH
67177: LD_INT 16
67179: PUSH
67180: LD_INT 17
67182: PUSH
67183: LD_INT 18
67185: PUSH
67186: LD_INT 19
67188: PUSH
67189: LD_INT 20
67191: PUSH
67192: LD_INT 21
67194: PUSH
67195: LD_INT 22
67197: PUSH
67198: LD_INT 23
67200: PUSH
67201: LD_INT 24
67203: PUSH
67204: LD_INT 25
67206: PUSH
67207: LD_INT 26
67209: PUSH
67210: LD_INT 27
67212: PUSH
67213: LD_INT 28
67215: PUSH
67216: LD_INT 30
67218: PUSH
67219: LD_INT 31
67221: PUSH
67222: LD_INT 32
67224: PUSH
67225: LD_INT 33
67227: PUSH
67228: LD_INT 34
67230: PUSH
67231: LD_INT 36
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 101
67272: PUSH
67273: LD_INT 102
67275: PUSH
67276: LD_INT 103
67278: PUSH
67279: LD_INT 104
67281: PUSH
67282: LD_INT 105
67284: PUSH
67285: LD_INT 106
67287: PUSH
67288: LD_INT 107
67290: PUSH
67291: LD_INT 108
67293: PUSH
67294: LD_INT 109
67296: PUSH
67297: LD_INT 110
67299: PUSH
67300: LD_INT 111
67302: PUSH
67303: LD_INT 112
67305: PUSH
67306: LD_INT 113
67308: PUSH
67309: LD_INT 114
67311: PUSH
67312: LD_INT 116
67314: PUSH
67315: LD_INT 117
67317: PUSH
67318: LD_INT 118
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: ST_TO_ADDR
67344: GO 68799
67346: LD_INT 13
67348: DOUBLE
67349: EQUAL
67350: IFTRUE 67354
67352: GO 67562
67354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67355: LD_ADDR_VAR 0 2
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: LD_INT 2
67365: PUSH
67366: LD_INT 3
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: LD_INT 5
67374: PUSH
67375: LD_INT 8
67377: PUSH
67378: LD_INT 9
67380: PUSH
67381: LD_INT 10
67383: PUSH
67384: LD_INT 11
67386: PUSH
67387: LD_INT 12
67389: PUSH
67390: LD_INT 14
67392: PUSH
67393: LD_INT 15
67395: PUSH
67396: LD_INT 16
67398: PUSH
67399: LD_INT 17
67401: PUSH
67402: LD_INT 18
67404: PUSH
67405: LD_INT 19
67407: PUSH
67408: LD_INT 20
67410: PUSH
67411: LD_INT 21
67413: PUSH
67414: LD_INT 22
67416: PUSH
67417: LD_INT 23
67419: PUSH
67420: LD_INT 24
67422: PUSH
67423: LD_INT 25
67425: PUSH
67426: LD_INT 26
67428: PUSH
67429: LD_INT 27
67431: PUSH
67432: LD_INT 28
67434: PUSH
67435: LD_INT 30
67437: PUSH
67438: LD_INT 31
67440: PUSH
67441: LD_INT 32
67443: PUSH
67444: LD_INT 33
67446: PUSH
67447: LD_INT 34
67449: PUSH
67450: LD_INT 36
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 101
67488: PUSH
67489: LD_INT 102
67491: PUSH
67492: LD_INT 103
67494: PUSH
67495: LD_INT 104
67497: PUSH
67498: LD_INT 105
67500: PUSH
67501: LD_INT 106
67503: PUSH
67504: LD_INT 107
67506: PUSH
67507: LD_INT 108
67509: PUSH
67510: LD_INT 109
67512: PUSH
67513: LD_INT 110
67515: PUSH
67516: LD_INT 111
67518: PUSH
67519: LD_INT 112
67521: PUSH
67522: LD_INT 113
67524: PUSH
67525: LD_INT 114
67527: PUSH
67528: LD_INT 116
67530: PUSH
67531: LD_INT 117
67533: PUSH
67534: LD_INT 118
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: ST_TO_ADDR
67560: GO 68799
67562: LD_INT 14
67564: DOUBLE
67565: EQUAL
67566: IFTRUE 67570
67568: GO 67794
67570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67571: LD_ADDR_VAR 0 2
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: LD_INT 4
67587: PUSH
67588: LD_INT 5
67590: PUSH
67591: LD_INT 6
67593: PUSH
67594: LD_INT 7
67596: PUSH
67597: LD_INT 8
67599: PUSH
67600: LD_INT 9
67602: PUSH
67603: LD_INT 10
67605: PUSH
67606: LD_INT 11
67608: PUSH
67609: LD_INT 12
67611: PUSH
67612: LD_INT 13
67614: PUSH
67615: LD_INT 14
67617: PUSH
67618: LD_INT 15
67620: PUSH
67621: LD_INT 16
67623: PUSH
67624: LD_INT 17
67626: PUSH
67627: LD_INT 18
67629: PUSH
67630: LD_INT 19
67632: PUSH
67633: LD_INT 20
67635: PUSH
67636: LD_INT 21
67638: PUSH
67639: LD_INT 22
67641: PUSH
67642: LD_INT 23
67644: PUSH
67645: LD_INT 24
67647: PUSH
67648: LD_INT 25
67650: PUSH
67651: LD_INT 26
67653: PUSH
67654: LD_INT 27
67656: PUSH
67657: LD_INT 28
67659: PUSH
67660: LD_INT 29
67662: PUSH
67663: LD_INT 30
67665: PUSH
67666: LD_INT 31
67668: PUSH
67669: LD_INT 32
67671: PUSH
67672: LD_INT 33
67674: PUSH
67675: LD_INT 34
67677: PUSH
67678: LD_INT 36
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 101
67720: PUSH
67721: LD_INT 102
67723: PUSH
67724: LD_INT 103
67726: PUSH
67727: LD_INT 104
67729: PUSH
67730: LD_INT 105
67732: PUSH
67733: LD_INT 106
67735: PUSH
67736: LD_INT 107
67738: PUSH
67739: LD_INT 108
67741: PUSH
67742: LD_INT 109
67744: PUSH
67745: LD_INT 110
67747: PUSH
67748: LD_INT 111
67750: PUSH
67751: LD_INT 112
67753: PUSH
67754: LD_INT 113
67756: PUSH
67757: LD_INT 114
67759: PUSH
67760: LD_INT 116
67762: PUSH
67763: LD_INT 117
67765: PUSH
67766: LD_INT 118
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: ST_TO_ADDR
67792: GO 68799
67794: LD_INT 15
67796: DOUBLE
67797: EQUAL
67798: IFTRUE 67802
67800: GO 68026
67802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67803: LD_ADDR_VAR 0 2
67807: PUSH
67808: LD_INT 1
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: LD_INT 4
67819: PUSH
67820: LD_INT 5
67822: PUSH
67823: LD_INT 6
67825: PUSH
67826: LD_INT 7
67828: PUSH
67829: LD_INT 8
67831: PUSH
67832: LD_INT 9
67834: PUSH
67835: LD_INT 10
67837: PUSH
67838: LD_INT 11
67840: PUSH
67841: LD_INT 12
67843: PUSH
67844: LD_INT 13
67846: PUSH
67847: LD_INT 14
67849: PUSH
67850: LD_INT 15
67852: PUSH
67853: LD_INT 16
67855: PUSH
67856: LD_INT 17
67858: PUSH
67859: LD_INT 18
67861: PUSH
67862: LD_INT 19
67864: PUSH
67865: LD_INT 20
67867: PUSH
67868: LD_INT 21
67870: PUSH
67871: LD_INT 22
67873: PUSH
67874: LD_INT 23
67876: PUSH
67877: LD_INT 24
67879: PUSH
67880: LD_INT 25
67882: PUSH
67883: LD_INT 26
67885: PUSH
67886: LD_INT 27
67888: PUSH
67889: LD_INT 28
67891: PUSH
67892: LD_INT 29
67894: PUSH
67895: LD_INT 30
67897: PUSH
67898: LD_INT 31
67900: PUSH
67901: LD_INT 32
67903: PUSH
67904: LD_INT 33
67906: PUSH
67907: LD_INT 34
67909: PUSH
67910: LD_INT 36
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 101
67952: PUSH
67953: LD_INT 102
67955: PUSH
67956: LD_INT 103
67958: PUSH
67959: LD_INT 104
67961: PUSH
67962: LD_INT 105
67964: PUSH
67965: LD_INT 106
67967: PUSH
67968: LD_INT 107
67970: PUSH
67971: LD_INT 108
67973: PUSH
67974: LD_INT 109
67976: PUSH
67977: LD_INT 110
67979: PUSH
67980: LD_INT 111
67982: PUSH
67983: LD_INT 112
67985: PUSH
67986: LD_INT 113
67988: PUSH
67989: LD_INT 114
67991: PUSH
67992: LD_INT 116
67994: PUSH
67995: LD_INT 117
67997: PUSH
67998: LD_INT 118
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: ST_TO_ADDR
68024: GO 68799
68026: LD_INT 16
68028: DOUBLE
68029: EQUAL
68030: IFTRUE 68034
68032: GO 68170
68034: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68035: LD_ADDR_VAR 0 2
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: LD_INT 5
68048: PUSH
68049: LD_INT 7
68051: PUSH
68052: LD_INT 11
68054: PUSH
68055: LD_INT 12
68057: PUSH
68058: LD_INT 15
68060: PUSH
68061: LD_INT 16
68063: PUSH
68064: LD_INT 20
68066: PUSH
68067: LD_INT 21
68069: PUSH
68070: LD_INT 22
68072: PUSH
68073: LD_INT 23
68075: PUSH
68076: LD_INT 25
68078: PUSH
68079: LD_INT 26
68081: PUSH
68082: LD_INT 30
68084: PUSH
68085: LD_INT 31
68087: PUSH
68088: LD_INT 32
68090: PUSH
68091: LD_INT 33
68093: PUSH
68094: LD_INT 34
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 101
68120: PUSH
68121: LD_INT 102
68123: PUSH
68124: LD_INT 103
68126: PUSH
68127: LD_INT 106
68129: PUSH
68130: LD_INT 108
68132: PUSH
68133: LD_INT 112
68135: PUSH
68136: LD_INT 113
68138: PUSH
68139: LD_INT 114
68141: PUSH
68142: LD_INT 116
68144: PUSH
68145: LD_INT 117
68147: PUSH
68148: LD_INT 118
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: ST_TO_ADDR
68168: GO 68799
68170: LD_INT 17
68172: DOUBLE
68173: EQUAL
68174: IFTRUE 68178
68176: GO 68402
68178: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68179: LD_ADDR_VAR 0 2
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: LD_INT 3
68192: PUSH
68193: LD_INT 4
68195: PUSH
68196: LD_INT 5
68198: PUSH
68199: LD_INT 6
68201: PUSH
68202: LD_INT 7
68204: PUSH
68205: LD_INT 8
68207: PUSH
68208: LD_INT 9
68210: PUSH
68211: LD_INT 10
68213: PUSH
68214: LD_INT 11
68216: PUSH
68217: LD_INT 12
68219: PUSH
68220: LD_INT 13
68222: PUSH
68223: LD_INT 14
68225: PUSH
68226: LD_INT 15
68228: PUSH
68229: LD_INT 16
68231: PUSH
68232: LD_INT 17
68234: PUSH
68235: LD_INT 18
68237: PUSH
68238: LD_INT 19
68240: PUSH
68241: LD_INT 20
68243: PUSH
68244: LD_INT 21
68246: PUSH
68247: LD_INT 22
68249: PUSH
68250: LD_INT 23
68252: PUSH
68253: LD_INT 24
68255: PUSH
68256: LD_INT 25
68258: PUSH
68259: LD_INT 26
68261: PUSH
68262: LD_INT 27
68264: PUSH
68265: LD_INT 28
68267: PUSH
68268: LD_INT 29
68270: PUSH
68271: LD_INT 30
68273: PUSH
68274: LD_INT 31
68276: PUSH
68277: LD_INT 32
68279: PUSH
68280: LD_INT 33
68282: PUSH
68283: LD_INT 34
68285: PUSH
68286: LD_INT 36
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 101
68328: PUSH
68329: LD_INT 102
68331: PUSH
68332: LD_INT 103
68334: PUSH
68335: LD_INT 104
68337: PUSH
68338: LD_INT 105
68340: PUSH
68341: LD_INT 106
68343: PUSH
68344: LD_INT 107
68346: PUSH
68347: LD_INT 108
68349: PUSH
68350: LD_INT 109
68352: PUSH
68353: LD_INT 110
68355: PUSH
68356: LD_INT 111
68358: PUSH
68359: LD_INT 112
68361: PUSH
68362: LD_INT 113
68364: PUSH
68365: LD_INT 114
68367: PUSH
68368: LD_INT 116
68370: PUSH
68371: LD_INT 117
68373: PUSH
68374: LD_INT 118
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: ST_TO_ADDR
68400: GO 68799
68402: LD_INT 18
68404: DOUBLE
68405: EQUAL
68406: IFTRUE 68410
68408: GO 68558
68410: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68411: LD_ADDR_VAR 0 2
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 4
68421: PUSH
68422: LD_INT 5
68424: PUSH
68425: LD_INT 7
68427: PUSH
68428: LD_INT 11
68430: PUSH
68431: LD_INT 12
68433: PUSH
68434: LD_INT 15
68436: PUSH
68437: LD_INT 16
68439: PUSH
68440: LD_INT 20
68442: PUSH
68443: LD_INT 21
68445: PUSH
68446: LD_INT 22
68448: PUSH
68449: LD_INT 23
68451: PUSH
68452: LD_INT 25
68454: PUSH
68455: LD_INT 26
68457: PUSH
68458: LD_INT 30
68460: PUSH
68461: LD_INT 31
68463: PUSH
68464: LD_INT 32
68466: PUSH
68467: LD_INT 33
68469: PUSH
68470: LD_INT 34
68472: PUSH
68473: LD_INT 35
68475: PUSH
68476: LD_INT 36
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 101
68504: PUSH
68505: LD_INT 102
68507: PUSH
68508: LD_INT 103
68510: PUSH
68511: LD_INT 106
68513: PUSH
68514: LD_INT 108
68516: PUSH
68517: LD_INT 112
68519: PUSH
68520: LD_INT 113
68522: PUSH
68523: LD_INT 114
68525: PUSH
68526: LD_INT 115
68528: PUSH
68529: LD_INT 116
68531: PUSH
68532: LD_INT 117
68534: PUSH
68535: LD_INT 118
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: ST_TO_ADDR
68556: GO 68799
68558: LD_INT 19
68560: DOUBLE
68561: EQUAL
68562: IFTRUE 68566
68564: GO 68798
68566: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: LD_INT 4
68583: PUSH
68584: LD_INT 5
68586: PUSH
68587: LD_INT 6
68589: PUSH
68590: LD_INT 7
68592: PUSH
68593: LD_INT 8
68595: PUSH
68596: LD_INT 9
68598: PUSH
68599: LD_INT 10
68601: PUSH
68602: LD_INT 11
68604: PUSH
68605: LD_INT 12
68607: PUSH
68608: LD_INT 13
68610: PUSH
68611: LD_INT 14
68613: PUSH
68614: LD_INT 15
68616: PUSH
68617: LD_INT 16
68619: PUSH
68620: LD_INT 17
68622: PUSH
68623: LD_INT 18
68625: PUSH
68626: LD_INT 19
68628: PUSH
68629: LD_INT 20
68631: PUSH
68632: LD_INT 21
68634: PUSH
68635: LD_INT 22
68637: PUSH
68638: LD_INT 23
68640: PUSH
68641: LD_INT 24
68643: PUSH
68644: LD_INT 25
68646: PUSH
68647: LD_INT 26
68649: PUSH
68650: LD_INT 27
68652: PUSH
68653: LD_INT 28
68655: PUSH
68656: LD_INT 29
68658: PUSH
68659: LD_INT 30
68661: PUSH
68662: LD_INT 31
68664: PUSH
68665: LD_INT 32
68667: PUSH
68668: LD_INT 33
68670: PUSH
68671: LD_INT 34
68673: PUSH
68674: LD_INT 35
68676: PUSH
68677: LD_INT 36
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 101
68720: PUSH
68721: LD_INT 102
68723: PUSH
68724: LD_INT 103
68726: PUSH
68727: LD_INT 104
68729: PUSH
68730: LD_INT 105
68732: PUSH
68733: LD_INT 106
68735: PUSH
68736: LD_INT 107
68738: PUSH
68739: LD_INT 108
68741: PUSH
68742: LD_INT 109
68744: PUSH
68745: LD_INT 110
68747: PUSH
68748: LD_INT 111
68750: PUSH
68751: LD_INT 112
68753: PUSH
68754: LD_INT 113
68756: PUSH
68757: LD_INT 114
68759: PUSH
68760: LD_INT 115
68762: PUSH
68763: LD_INT 116
68765: PUSH
68766: LD_INT 117
68768: PUSH
68769: LD_INT 118
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: ST_TO_ADDR
68796: GO 68799
68798: POP
// end else
68799: GO 69030
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: LD_INT 4
68817: PUSH
68818: LD_INT 5
68820: PUSH
68821: LD_INT 6
68823: PUSH
68824: LD_INT 7
68826: PUSH
68827: LD_INT 8
68829: PUSH
68830: LD_INT 9
68832: PUSH
68833: LD_INT 10
68835: PUSH
68836: LD_INT 11
68838: PUSH
68839: LD_INT 12
68841: PUSH
68842: LD_INT 13
68844: PUSH
68845: LD_INT 14
68847: PUSH
68848: LD_INT 15
68850: PUSH
68851: LD_INT 16
68853: PUSH
68854: LD_INT 17
68856: PUSH
68857: LD_INT 18
68859: PUSH
68860: LD_INT 19
68862: PUSH
68863: LD_INT 20
68865: PUSH
68866: LD_INT 21
68868: PUSH
68869: LD_INT 22
68871: PUSH
68872: LD_INT 23
68874: PUSH
68875: LD_INT 24
68877: PUSH
68878: LD_INT 25
68880: PUSH
68881: LD_INT 26
68883: PUSH
68884: LD_INT 27
68886: PUSH
68887: LD_INT 28
68889: PUSH
68890: LD_INT 29
68892: PUSH
68893: LD_INT 30
68895: PUSH
68896: LD_INT 31
68898: PUSH
68899: LD_INT 32
68901: PUSH
68902: LD_INT 33
68904: PUSH
68905: LD_INT 34
68907: PUSH
68908: LD_INT 35
68910: PUSH
68911: LD_INT 36
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 101
68954: PUSH
68955: LD_INT 102
68957: PUSH
68958: LD_INT 103
68960: PUSH
68961: LD_INT 104
68963: PUSH
68964: LD_INT 105
68966: PUSH
68967: LD_INT 106
68969: PUSH
68970: LD_INT 107
68972: PUSH
68973: LD_INT 108
68975: PUSH
68976: LD_INT 109
68978: PUSH
68979: LD_INT 110
68981: PUSH
68982: LD_INT 111
68984: PUSH
68985: LD_INT 112
68987: PUSH
68988: LD_INT 113
68990: PUSH
68991: LD_INT 114
68993: PUSH
68994: LD_INT 115
68996: PUSH
68997: LD_INT 116
68999: PUSH
69000: LD_INT 117
69002: PUSH
69003: LD_INT 118
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: ST_TO_ADDR
// if result then
69030: LD_VAR 0 2
69034: IFFALSE 69820
// begin normal :=  ;
69036: LD_ADDR_VAR 0 5
69040: PUSH
69041: LD_STRING 
69043: ST_TO_ADDR
// hardcore :=  ;
69044: LD_ADDR_VAR 0 6
69048: PUSH
69049: LD_STRING 
69051: ST_TO_ADDR
// active :=  ;
69052: LD_ADDR_VAR 0 7
69056: PUSH
69057: LD_STRING 
69059: ST_TO_ADDR
// for i = 1 to normalCounter do
69060: LD_ADDR_VAR 0 8
69064: PUSH
69065: DOUBLE
69066: LD_INT 1
69068: DEC
69069: ST_TO_ADDR
69070: LD_EXP 48
69074: PUSH
69075: FOR_TO
69076: IFFALSE 69177
// begin tmp := 0 ;
69078: LD_ADDR_VAR 0 3
69082: PUSH
69083: LD_STRING 0
69085: ST_TO_ADDR
// if result [ 1 ] then
69086: LD_VAR 0 2
69090: PUSH
69091: LD_INT 1
69093: ARRAY
69094: IFFALSE 69159
// if result [ 1 ] [ 1 ] = i then
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 1
69103: ARRAY
69104: PUSH
69105: LD_INT 1
69107: ARRAY
69108: PUSH
69109: LD_VAR 0 8
69113: EQUAL
69114: IFFALSE 69159
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69116: LD_ADDR_VAR 0 2
69120: PUSH
69121: LD_VAR 0 2
69125: PPUSH
69126: LD_INT 1
69128: PPUSH
69129: LD_VAR 0 2
69133: PUSH
69134: LD_INT 1
69136: ARRAY
69137: PPUSH
69138: LD_INT 1
69140: PPUSH
69141: CALL_OW 3
69145: PPUSH
69146: CALL_OW 1
69150: ST_TO_ADDR
// tmp := 1 ;
69151: LD_ADDR_VAR 0 3
69155: PUSH
69156: LD_STRING 1
69158: ST_TO_ADDR
// end ; normal := normal & tmp ;
69159: LD_ADDR_VAR 0 5
69163: PUSH
69164: LD_VAR 0 5
69168: PUSH
69169: LD_VAR 0 3
69173: STR
69174: ST_TO_ADDR
// end ;
69175: GO 69075
69177: POP
69178: POP
// for i = 1 to hardcoreCounter do
69179: LD_ADDR_VAR 0 8
69183: PUSH
69184: DOUBLE
69185: LD_INT 1
69187: DEC
69188: ST_TO_ADDR
69189: LD_EXP 49
69193: PUSH
69194: FOR_TO
69195: IFFALSE 69300
// begin tmp := 0 ;
69197: LD_ADDR_VAR 0 3
69201: PUSH
69202: LD_STRING 0
69204: ST_TO_ADDR
// if result [ 2 ] then
69205: LD_VAR 0 2
69209: PUSH
69210: LD_INT 2
69212: ARRAY
69213: IFFALSE 69282
// if result [ 2 ] [ 1 ] = 100 + i then
69215: LD_VAR 0 2
69219: PUSH
69220: LD_INT 2
69222: ARRAY
69223: PUSH
69224: LD_INT 1
69226: ARRAY
69227: PUSH
69228: LD_INT 100
69230: PUSH
69231: LD_VAR 0 8
69235: PLUS
69236: EQUAL
69237: IFFALSE 69282
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69239: LD_ADDR_VAR 0 2
69243: PUSH
69244: LD_VAR 0 2
69248: PPUSH
69249: LD_INT 2
69251: PPUSH
69252: LD_VAR 0 2
69256: PUSH
69257: LD_INT 2
69259: ARRAY
69260: PPUSH
69261: LD_INT 1
69263: PPUSH
69264: CALL_OW 3
69268: PPUSH
69269: CALL_OW 1
69273: ST_TO_ADDR
// tmp := 1 ;
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_STRING 1
69281: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69282: LD_ADDR_VAR 0 6
69286: PUSH
69287: LD_VAR 0 6
69291: PUSH
69292: LD_VAR 0 3
69296: STR
69297: ST_TO_ADDR
// end ;
69298: GO 69194
69300: POP
69301: POP
// if isGameLoad then
69302: LD_VAR 0 1
69306: IFFALSE 69781
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69308: LD_ADDR_VAR 0 4
69312: PUSH
69313: LD_EXP 52
69317: PUSH
69318: LD_EXP 51
69322: PUSH
69323: LD_EXP 53
69327: PUSH
69328: LD_EXP 50
69332: PUSH
69333: LD_EXP 54
69337: PUSH
69338: LD_EXP 55
69342: PUSH
69343: LD_EXP 56
69347: PUSH
69348: LD_EXP 57
69352: PUSH
69353: LD_EXP 58
69357: PUSH
69358: LD_EXP 59
69362: PUSH
69363: LD_EXP 60
69367: PUSH
69368: LD_EXP 61
69372: PUSH
69373: LD_EXP 62
69377: PUSH
69378: LD_EXP 63
69382: PUSH
69383: LD_EXP 71
69387: PUSH
69388: LD_EXP 72
69392: PUSH
69393: LD_EXP 73
69397: PUSH
69398: LD_EXP 74
69402: PUSH
69403: LD_EXP 76
69407: PUSH
69408: LD_EXP 77
69412: PUSH
69413: LD_EXP 78
69417: PUSH
69418: LD_EXP 81
69422: PUSH
69423: LD_EXP 83
69427: PUSH
69428: LD_EXP 84
69432: PUSH
69433: LD_EXP 85
69437: PUSH
69438: LD_EXP 87
69442: PUSH
69443: LD_EXP 88
69447: PUSH
69448: LD_EXP 91
69452: PUSH
69453: LD_EXP 92
69457: PUSH
69458: LD_EXP 93
69462: PUSH
69463: LD_EXP 94
69467: PUSH
69468: LD_EXP 95
69472: PUSH
69473: LD_EXP 96
69477: PUSH
69478: LD_EXP 97
69482: PUSH
69483: LD_EXP 98
69487: PUSH
69488: LD_EXP 99
69492: PUSH
69493: LD_EXP 64
69497: PUSH
69498: LD_EXP 65
69502: PUSH
69503: LD_EXP 68
69507: PUSH
69508: LD_EXP 69
69512: PUSH
69513: LD_EXP 70
69517: PUSH
69518: LD_EXP 66
69522: PUSH
69523: LD_EXP 67
69527: PUSH
69528: LD_EXP 75
69532: PUSH
69533: LD_EXP 79
69537: PUSH
69538: LD_EXP 80
69542: PUSH
69543: LD_EXP 82
69547: PUSH
69548: LD_EXP 86
69552: PUSH
69553: LD_EXP 89
69557: PUSH
69558: LD_EXP 90
69562: PUSH
69563: LD_EXP 100
69567: PUSH
69568: LD_EXP 101
69572: PUSH
69573: LD_EXP 102
69577: PUSH
69578: LD_EXP 103
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: ST_TO_ADDR
// tmp :=  ;
69639: LD_ADDR_VAR 0 3
69643: PUSH
69644: LD_STRING 
69646: ST_TO_ADDR
// for i = 1 to normalCounter do
69647: LD_ADDR_VAR 0 8
69651: PUSH
69652: DOUBLE
69653: LD_INT 1
69655: DEC
69656: ST_TO_ADDR
69657: LD_EXP 48
69661: PUSH
69662: FOR_TO
69663: IFFALSE 69699
// begin if flags [ i ] then
69665: LD_VAR 0 4
69669: PUSH
69670: LD_VAR 0 8
69674: ARRAY
69675: IFFALSE 69697
// tmp := tmp & i & ; ;
69677: LD_ADDR_VAR 0 3
69681: PUSH
69682: LD_VAR 0 3
69686: PUSH
69687: LD_VAR 0 8
69691: STR
69692: PUSH
69693: LD_STRING ;
69695: STR
69696: ST_TO_ADDR
// end ;
69697: GO 69662
69699: POP
69700: POP
// for i = 1 to hardcoreCounter do
69701: LD_ADDR_VAR 0 8
69705: PUSH
69706: DOUBLE
69707: LD_INT 1
69709: DEC
69710: ST_TO_ADDR
69711: LD_EXP 49
69715: PUSH
69716: FOR_TO
69717: IFFALSE 69763
// begin if flags [ normalCounter + i ] then
69719: LD_VAR 0 4
69723: PUSH
69724: LD_EXP 48
69728: PUSH
69729: LD_VAR 0 8
69733: PLUS
69734: ARRAY
69735: IFFALSE 69761
// tmp := tmp & ( 100 + i ) & ; ;
69737: LD_ADDR_VAR 0 3
69741: PUSH
69742: LD_VAR 0 3
69746: PUSH
69747: LD_INT 100
69749: PUSH
69750: LD_VAR 0 8
69754: PLUS
69755: STR
69756: PUSH
69757: LD_STRING ;
69759: STR
69760: ST_TO_ADDR
// end ;
69761: GO 69716
69763: POP
69764: POP
// if tmp then
69765: LD_VAR 0 3
69769: IFFALSE 69781
// active := tmp ;
69771: LD_ADDR_VAR 0 7
69775: PUSH
69776: LD_VAR 0 3
69780: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69781: LD_STRING getStreamItemsFromMission("
69783: PUSH
69784: LD_VAR 0 5
69788: STR
69789: PUSH
69790: LD_STRING ","
69792: STR
69793: PUSH
69794: LD_VAR 0 6
69798: STR
69799: PUSH
69800: LD_STRING ","
69802: STR
69803: PUSH
69804: LD_VAR 0 7
69808: STR
69809: PUSH
69810: LD_STRING ")
69812: STR
69813: PPUSH
69814: CALL_OW 559
// end else
69818: GO 69827
// ToLua ( getStreamItemsFromMission("","","") ) ;
69820: LD_STRING getStreamItemsFromMission("","","")
69822: PPUSH
69823: CALL_OW 559
// end ;
69827: LD_VAR 0 2
69831: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69832: LD_EXP 47
69836: PUSH
69837: LD_EXP 52
69841: AND
69842: IFFALSE 69966
69844: GO 69846
69846: DISABLE
69847: LD_INT 0
69849: PPUSH
69850: PPUSH
// begin enable ;
69851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69852: LD_ADDR_VAR 0 2
69856: PUSH
69857: LD_INT 22
69859: PUSH
69860: LD_OWVAR 2
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 2
69871: PUSH
69872: LD_INT 34
69874: PUSH
69875: LD_INT 7
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 34
69884: PUSH
69885: LD_INT 45
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 34
69894: PUSH
69895: LD_INT 28
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 34
69904: PUSH
69905: LD_INT 47
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PPUSH
69923: CALL_OW 69
69927: ST_TO_ADDR
// if not tmp then
69928: LD_VAR 0 2
69932: NOT
69933: IFFALSE 69937
// exit ;
69935: GO 69966
// for i in tmp do
69937: LD_ADDR_VAR 0 1
69941: PUSH
69942: LD_VAR 0 2
69946: PUSH
69947: FOR_IN
69948: IFFALSE 69964
// begin SetLives ( i , 0 ) ;
69950: LD_VAR 0 1
69954: PPUSH
69955: LD_INT 0
69957: PPUSH
69958: CALL_OW 234
// end ;
69962: GO 69947
69964: POP
69965: POP
// end ;
69966: PPOPN 2
69968: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69969: LD_EXP 47
69973: PUSH
69974: LD_EXP 53
69978: AND
69979: IFFALSE 70063
69981: GO 69983
69983: DISABLE
69984: LD_INT 0
69986: PPUSH
69987: PPUSH
// begin enable ;
69988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69989: LD_ADDR_VAR 0 2
69993: PUSH
69994: LD_INT 22
69996: PUSH
69997: LD_OWVAR 2
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 32
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PPUSH
70020: CALL_OW 69
70024: ST_TO_ADDR
// if not tmp then
70025: LD_VAR 0 2
70029: NOT
70030: IFFALSE 70034
// exit ;
70032: GO 70063
// for i in tmp do
70034: LD_ADDR_VAR 0 1
70038: PUSH
70039: LD_VAR 0 2
70043: PUSH
70044: FOR_IN
70045: IFFALSE 70061
// begin SetLives ( i , 0 ) ;
70047: LD_VAR 0 1
70051: PPUSH
70052: LD_INT 0
70054: PPUSH
70055: CALL_OW 234
// end ;
70059: GO 70044
70061: POP
70062: POP
// end ;
70063: PPOPN 2
70065: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70066: LD_EXP 47
70070: PUSH
70071: LD_EXP 50
70075: AND
70076: IFFALSE 70169
70078: GO 70080
70080: DISABLE
70081: LD_INT 0
70083: PPUSH
// begin enable ;
70084: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70085: LD_ADDR_VAR 0 1
70089: PUSH
70090: LD_INT 22
70092: PUSH
70093: LD_OWVAR 2
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 2
70104: PUSH
70105: LD_INT 25
70107: PUSH
70108: LD_INT 5
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 25
70117: PUSH
70118: LD_INT 9
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 25
70127: PUSH
70128: LD_INT 8
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PPUSH
70145: CALL_OW 69
70149: PUSH
70150: FOR_IN
70151: IFFALSE 70167
// begin SetClass ( i , 1 ) ;
70153: LD_VAR 0 1
70157: PPUSH
70158: LD_INT 1
70160: PPUSH
70161: CALL_OW 336
// end ;
70165: GO 70150
70167: POP
70168: POP
// end ;
70169: PPOPN 1
70171: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70172: LD_EXP 47
70176: PUSH
70177: LD_EXP 51
70181: AND
70182: PUSH
70183: LD_OWVAR 65
70187: PUSH
70188: LD_INT 7
70190: LESS
70191: AND
70192: IFFALSE 70206
70194: GO 70196
70196: DISABLE
// begin enable ;
70197: ENABLE
// game_speed := 7 ;
70198: LD_ADDR_OWVAR 65
70202: PUSH
70203: LD_INT 7
70205: ST_TO_ADDR
// end ;
70206: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70207: LD_EXP 47
70211: PUSH
70212: LD_EXP 54
70216: AND
70217: IFFALSE 70419
70219: GO 70221
70221: DISABLE
70222: LD_INT 0
70224: PPUSH
70225: PPUSH
70226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70227: LD_ADDR_VAR 0 3
70231: PUSH
70232: LD_INT 81
70234: PUSH
70235: LD_OWVAR 2
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 21
70246: PUSH
70247: LD_INT 1
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PPUSH
70258: CALL_OW 69
70262: ST_TO_ADDR
// if not tmp then
70263: LD_VAR 0 3
70267: NOT
70268: IFFALSE 70272
// exit ;
70270: GO 70419
// if tmp > 5 then
70272: LD_VAR 0 3
70276: PUSH
70277: LD_INT 5
70279: GREATER
70280: IFFALSE 70292
// k := 5 else
70282: LD_ADDR_VAR 0 2
70286: PUSH
70287: LD_INT 5
70289: ST_TO_ADDR
70290: GO 70302
// k := tmp ;
70292: LD_ADDR_VAR 0 2
70296: PUSH
70297: LD_VAR 0 3
70301: ST_TO_ADDR
// for i := 1 to k do
70302: LD_ADDR_VAR 0 1
70306: PUSH
70307: DOUBLE
70308: LD_INT 1
70310: DEC
70311: ST_TO_ADDR
70312: LD_VAR 0 2
70316: PUSH
70317: FOR_TO
70318: IFFALSE 70417
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70320: LD_VAR 0 3
70324: PUSH
70325: LD_VAR 0 1
70329: ARRAY
70330: PPUSH
70331: LD_VAR 0 1
70335: PUSH
70336: LD_INT 4
70338: MOD
70339: PUSH
70340: LD_INT 1
70342: PLUS
70343: PPUSH
70344: CALL_OW 259
70348: PUSH
70349: LD_INT 10
70351: LESS
70352: IFFALSE 70415
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70354: LD_VAR 0 3
70358: PUSH
70359: LD_VAR 0 1
70363: ARRAY
70364: PPUSH
70365: LD_VAR 0 1
70369: PUSH
70370: LD_INT 4
70372: MOD
70373: PUSH
70374: LD_INT 1
70376: PLUS
70377: PPUSH
70378: LD_VAR 0 3
70382: PUSH
70383: LD_VAR 0 1
70387: ARRAY
70388: PPUSH
70389: LD_VAR 0 1
70393: PUSH
70394: LD_INT 4
70396: MOD
70397: PUSH
70398: LD_INT 1
70400: PLUS
70401: PPUSH
70402: CALL_OW 259
70406: PUSH
70407: LD_INT 1
70409: PLUS
70410: PPUSH
70411: CALL_OW 237
70415: GO 70317
70417: POP
70418: POP
// end ;
70419: PPOPN 3
70421: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70422: LD_EXP 47
70426: PUSH
70427: LD_EXP 55
70431: AND
70432: IFFALSE 70452
70434: GO 70436
70436: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70437: LD_INT 4
70439: PPUSH
70440: LD_OWVAR 2
70444: PPUSH
70445: LD_INT 0
70447: PPUSH
70448: CALL_OW 324
70452: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70453: LD_EXP 47
70457: PUSH
70458: LD_EXP 84
70462: AND
70463: IFFALSE 70483
70465: GO 70467
70467: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70468: LD_INT 19
70470: PPUSH
70471: LD_OWVAR 2
70475: PPUSH
70476: LD_INT 0
70478: PPUSH
70479: CALL_OW 324
70483: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70484: LD_EXP 47
70488: PUSH
70489: LD_EXP 56
70493: AND
70494: IFFALSE 70596
70496: GO 70498
70498: DISABLE
70499: LD_INT 0
70501: PPUSH
70502: PPUSH
// begin enable ;
70503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70504: LD_ADDR_VAR 0 2
70508: PUSH
70509: LD_INT 22
70511: PUSH
70512: LD_OWVAR 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: LD_INT 34
70526: PUSH
70527: LD_INT 11
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 34
70536: PUSH
70537: LD_INT 30
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PPUSH
70553: CALL_OW 69
70557: ST_TO_ADDR
// if not tmp then
70558: LD_VAR 0 2
70562: NOT
70563: IFFALSE 70567
// exit ;
70565: GO 70596
// for i in tmp do
70567: LD_ADDR_VAR 0 1
70571: PUSH
70572: LD_VAR 0 2
70576: PUSH
70577: FOR_IN
70578: IFFALSE 70594
// begin SetLives ( i , 0 ) ;
70580: LD_VAR 0 1
70584: PPUSH
70585: LD_INT 0
70587: PPUSH
70588: CALL_OW 234
// end ;
70592: GO 70577
70594: POP
70595: POP
// end ;
70596: PPOPN 2
70598: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70599: LD_EXP 47
70603: PUSH
70604: LD_EXP 57
70608: AND
70609: IFFALSE 70629
70611: GO 70613
70613: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70614: LD_INT 32
70616: PPUSH
70617: LD_OWVAR 2
70621: PPUSH
70622: LD_INT 0
70624: PPUSH
70625: CALL_OW 324
70629: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70630: LD_EXP 47
70634: PUSH
70635: LD_EXP 58
70639: AND
70640: IFFALSE 70821
70642: GO 70644
70644: DISABLE
70645: LD_INT 0
70647: PPUSH
70648: PPUSH
70649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70650: LD_ADDR_VAR 0 2
70654: PUSH
70655: LD_INT 22
70657: PUSH
70658: LD_OWVAR 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 33
70669: PUSH
70670: LD_INT 3
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PPUSH
70681: CALL_OW 69
70685: ST_TO_ADDR
// if not tmp then
70686: LD_VAR 0 2
70690: NOT
70691: IFFALSE 70695
// exit ;
70693: GO 70821
// side := 0 ;
70695: LD_ADDR_VAR 0 3
70699: PUSH
70700: LD_INT 0
70702: ST_TO_ADDR
// for i := 1 to 8 do
70703: LD_ADDR_VAR 0 1
70707: PUSH
70708: DOUBLE
70709: LD_INT 1
70711: DEC
70712: ST_TO_ADDR
70713: LD_INT 8
70715: PUSH
70716: FOR_TO
70717: IFFALSE 70765
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70719: LD_OWVAR 2
70723: PUSH
70724: LD_VAR 0 1
70728: NONEQUAL
70729: PUSH
70730: LD_OWVAR 2
70734: PPUSH
70735: LD_VAR 0 1
70739: PPUSH
70740: CALL_OW 81
70744: PUSH
70745: LD_INT 2
70747: EQUAL
70748: AND
70749: IFFALSE 70763
// begin side := i ;
70751: LD_ADDR_VAR 0 3
70755: PUSH
70756: LD_VAR 0 1
70760: ST_TO_ADDR
// break ;
70761: GO 70765
// end ;
70763: GO 70716
70765: POP
70766: POP
// if not side then
70767: LD_VAR 0 3
70771: NOT
70772: IFFALSE 70776
// exit ;
70774: GO 70821
// for i := 1 to tmp do
70776: LD_ADDR_VAR 0 1
70780: PUSH
70781: DOUBLE
70782: LD_INT 1
70784: DEC
70785: ST_TO_ADDR
70786: LD_VAR 0 2
70790: PUSH
70791: FOR_TO
70792: IFFALSE 70819
// if Prob ( 60 ) then
70794: LD_INT 60
70796: PPUSH
70797: CALL_OW 13
70801: IFFALSE 70817
// SetSide ( i , side ) ;
70803: LD_VAR 0 1
70807: PPUSH
70808: LD_VAR 0 3
70812: PPUSH
70813: CALL_OW 235
70817: GO 70791
70819: POP
70820: POP
// end ;
70821: PPOPN 3
70823: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70824: LD_EXP 47
70828: PUSH
70829: LD_EXP 60
70833: AND
70834: IFFALSE 70953
70836: GO 70838
70838: DISABLE
70839: LD_INT 0
70841: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70842: LD_ADDR_VAR 0 1
70846: PUSH
70847: LD_INT 22
70849: PUSH
70850: LD_OWVAR 2
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 21
70861: PUSH
70862: LD_INT 1
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 3
70871: PUSH
70872: LD_INT 23
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: PPUSH
70891: CALL_OW 69
70895: PUSH
70896: FOR_IN
70897: IFFALSE 70951
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70899: LD_VAR 0 1
70903: PPUSH
70904: CALL_OW 257
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: LD_INT 2
70914: PUSH
70915: LD_INT 3
70917: PUSH
70918: LD_INT 4
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: IN
70927: IFFALSE 70949
// SetClass ( un , rand ( 1 , 4 ) ) ;
70929: LD_VAR 0 1
70933: PPUSH
70934: LD_INT 1
70936: PPUSH
70937: LD_INT 4
70939: PPUSH
70940: CALL_OW 12
70944: PPUSH
70945: CALL_OW 336
70949: GO 70896
70951: POP
70952: POP
// end ;
70953: PPOPN 1
70955: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70956: LD_EXP 47
70960: PUSH
70961: LD_EXP 59
70965: AND
70966: IFFALSE 71045
70968: GO 70970
70970: DISABLE
70971: LD_INT 0
70973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70974: LD_ADDR_VAR 0 1
70978: PUSH
70979: LD_INT 22
70981: PUSH
70982: LD_OWVAR 2
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 21
70993: PUSH
70994: LD_INT 3
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PPUSH
71005: CALL_OW 69
71009: ST_TO_ADDR
// if not tmp then
71010: LD_VAR 0 1
71014: NOT
71015: IFFALSE 71019
// exit ;
71017: GO 71045
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71019: LD_VAR 0 1
71023: PUSH
71024: LD_INT 1
71026: PPUSH
71027: LD_VAR 0 1
71031: PPUSH
71032: CALL_OW 12
71036: ARRAY
71037: PPUSH
71038: LD_INT 100
71040: PPUSH
71041: CALL_OW 234
// end ;
71045: PPOPN 1
71047: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71048: LD_EXP 47
71052: PUSH
71053: LD_EXP 61
71057: AND
71058: IFFALSE 71156
71060: GO 71062
71062: DISABLE
71063: LD_INT 0
71065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71066: LD_ADDR_VAR 0 1
71070: PUSH
71071: LD_INT 22
71073: PUSH
71074: LD_OWVAR 2
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 21
71085: PUSH
71086: LD_INT 1
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PPUSH
71097: CALL_OW 69
71101: ST_TO_ADDR
// if not tmp then
71102: LD_VAR 0 1
71106: NOT
71107: IFFALSE 71111
// exit ;
71109: GO 71156
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71111: LD_VAR 0 1
71115: PUSH
71116: LD_INT 1
71118: PPUSH
71119: LD_VAR 0 1
71123: PPUSH
71124: CALL_OW 12
71128: ARRAY
71129: PPUSH
71130: LD_INT 1
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: CALL_OW 12
71140: PPUSH
71141: LD_INT 3000
71143: PPUSH
71144: LD_INT 9000
71146: PPUSH
71147: CALL_OW 12
71151: PPUSH
71152: CALL_OW 492
// end ;
71156: PPOPN 1
71158: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71159: LD_EXP 47
71163: PUSH
71164: LD_EXP 62
71168: AND
71169: IFFALSE 71189
71171: GO 71173
71173: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71174: LD_INT 1
71176: PPUSH
71177: LD_OWVAR 2
71181: PPUSH
71182: LD_INT 0
71184: PPUSH
71185: CALL_OW 324
71189: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71190: LD_EXP 47
71194: PUSH
71195: LD_EXP 63
71199: AND
71200: IFFALSE 71283
71202: GO 71204
71204: DISABLE
71205: LD_INT 0
71207: PPUSH
71208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71209: LD_ADDR_VAR 0 2
71213: PUSH
71214: LD_INT 22
71216: PUSH
71217: LD_OWVAR 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 21
71228: PUSH
71229: LD_INT 3
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PPUSH
71240: CALL_OW 69
71244: ST_TO_ADDR
// if not tmp then
71245: LD_VAR 0 2
71249: NOT
71250: IFFALSE 71254
// exit ;
71252: GO 71283
// for i in tmp do
71254: LD_ADDR_VAR 0 1
71258: PUSH
71259: LD_VAR 0 2
71263: PUSH
71264: FOR_IN
71265: IFFALSE 71281
// SetBLevel ( i , 10 ) ;
71267: LD_VAR 0 1
71271: PPUSH
71272: LD_INT 10
71274: PPUSH
71275: CALL_OW 241
71279: GO 71264
71281: POP
71282: POP
// end ;
71283: PPOPN 2
71285: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71286: LD_EXP 47
71290: PUSH
71291: LD_EXP 64
71295: AND
71296: IFFALSE 71407
71298: GO 71300
71300: DISABLE
71301: LD_INT 0
71303: PPUSH
71304: PPUSH
71305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71306: LD_ADDR_VAR 0 3
71310: PUSH
71311: LD_INT 22
71313: PUSH
71314: LD_OWVAR 2
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 25
71325: PUSH
71326: LD_INT 1
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PPUSH
71337: CALL_OW 69
71341: ST_TO_ADDR
// if not tmp then
71342: LD_VAR 0 3
71346: NOT
71347: IFFALSE 71351
// exit ;
71349: GO 71407
// un := tmp [ rand ( 1 , tmp ) ] ;
71351: LD_ADDR_VAR 0 2
71355: PUSH
71356: LD_VAR 0 3
71360: PUSH
71361: LD_INT 1
71363: PPUSH
71364: LD_VAR 0 3
71368: PPUSH
71369: CALL_OW 12
71373: ARRAY
71374: ST_TO_ADDR
// if Crawls ( un ) then
71375: LD_VAR 0 2
71379: PPUSH
71380: CALL_OW 318
71384: IFFALSE 71395
// ComWalk ( un ) ;
71386: LD_VAR 0 2
71390: PPUSH
71391: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71395: LD_VAR 0 2
71399: PPUSH
71400: LD_INT 5
71402: PPUSH
71403: CALL_OW 336
// end ;
71407: PPOPN 3
71409: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71410: LD_EXP 47
71414: PUSH
71415: LD_EXP 65
71419: AND
71420: PUSH
71421: LD_OWVAR 67
71425: PUSH
71426: LD_INT 4
71428: LESS
71429: AND
71430: IFFALSE 71449
71432: GO 71434
71434: DISABLE
// begin Difficulty := Difficulty + 1 ;
71435: LD_ADDR_OWVAR 67
71439: PUSH
71440: LD_OWVAR 67
71444: PUSH
71445: LD_INT 1
71447: PLUS
71448: ST_TO_ADDR
// end ;
71449: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71450: LD_EXP 47
71454: PUSH
71455: LD_EXP 66
71459: AND
71460: IFFALSE 71563
71462: GO 71464
71464: DISABLE
71465: LD_INT 0
71467: PPUSH
// begin for i := 1 to 5 do
71468: LD_ADDR_VAR 0 1
71472: PUSH
71473: DOUBLE
71474: LD_INT 1
71476: DEC
71477: ST_TO_ADDR
71478: LD_INT 5
71480: PUSH
71481: FOR_TO
71482: IFFALSE 71561
// begin uc_nation := nation_nature ;
71484: LD_ADDR_OWVAR 21
71488: PUSH
71489: LD_INT 0
71491: ST_TO_ADDR
// uc_side := 0 ;
71492: LD_ADDR_OWVAR 20
71496: PUSH
71497: LD_INT 0
71499: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71500: LD_ADDR_OWVAR 29
71504: PUSH
71505: LD_INT 12
71507: PUSH
71508: LD_INT 12
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: ST_TO_ADDR
// hc_agressivity := 20 ;
71515: LD_ADDR_OWVAR 35
71519: PUSH
71520: LD_INT 20
71522: ST_TO_ADDR
// hc_class := class_tiger ;
71523: LD_ADDR_OWVAR 28
71527: PUSH
71528: LD_INT 14
71530: ST_TO_ADDR
// hc_gallery :=  ;
71531: LD_ADDR_OWVAR 33
71535: PUSH
71536: LD_STRING 
71538: ST_TO_ADDR
// hc_name :=  ;
71539: LD_ADDR_OWVAR 26
71543: PUSH
71544: LD_STRING 
71546: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71547: CALL_OW 44
71551: PPUSH
71552: LD_INT 0
71554: PPUSH
71555: CALL_OW 51
// end ;
71559: GO 71481
71561: POP
71562: POP
// end ;
71563: PPOPN 1
71565: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71566: LD_EXP 47
71570: PUSH
71571: LD_EXP 67
71575: AND
71576: IFFALSE 71585
71578: GO 71580
71580: DISABLE
// StreamSibBomb ;
71581: CALL 71586 0 0
71585: END
// export function StreamSibBomb ; var i , x , y ; begin
71586: LD_INT 0
71588: PPUSH
71589: PPUSH
71590: PPUSH
71591: PPUSH
// result := false ;
71592: LD_ADDR_VAR 0 1
71596: PUSH
71597: LD_INT 0
71599: ST_TO_ADDR
// for i := 1 to 16 do
71600: LD_ADDR_VAR 0 2
71604: PUSH
71605: DOUBLE
71606: LD_INT 1
71608: DEC
71609: ST_TO_ADDR
71610: LD_INT 16
71612: PUSH
71613: FOR_TO
71614: IFFALSE 71813
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: LD_INT 10
71623: PUSH
71624: LD_INT 20
71626: PUSH
71627: LD_INT 30
71629: PUSH
71630: LD_INT 40
71632: PUSH
71633: LD_INT 50
71635: PUSH
71636: LD_INT 60
71638: PUSH
71639: LD_INT 70
71641: PUSH
71642: LD_INT 80
71644: PUSH
71645: LD_INT 90
71647: PUSH
71648: LD_INT 100
71650: PUSH
71651: LD_INT 110
71653: PUSH
71654: LD_INT 120
71656: PUSH
71657: LD_INT 130
71659: PUSH
71660: LD_INT 140
71662: PUSH
71663: LD_INT 150
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 1
71685: PPUSH
71686: LD_INT 15
71688: PPUSH
71689: CALL_OW 12
71693: ARRAY
71694: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71695: LD_ADDR_VAR 0 4
71699: PUSH
71700: LD_INT 10
71702: PUSH
71703: LD_INT 20
71705: PUSH
71706: LD_INT 30
71708: PUSH
71709: LD_INT 40
71711: PUSH
71712: LD_INT 50
71714: PUSH
71715: LD_INT 60
71717: PUSH
71718: LD_INT 70
71720: PUSH
71721: LD_INT 80
71723: PUSH
71724: LD_INT 90
71726: PUSH
71727: LD_INT 100
71729: PUSH
71730: LD_INT 110
71732: PUSH
71733: LD_INT 120
71735: PUSH
71736: LD_INT 130
71738: PUSH
71739: LD_INT 140
71741: PUSH
71742: LD_INT 150
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 1
71764: PPUSH
71765: LD_INT 15
71767: PPUSH
71768: CALL_OW 12
71772: ARRAY
71773: ST_TO_ADDR
// if ValidHex ( x , y ) then
71774: LD_VAR 0 3
71778: PPUSH
71779: LD_VAR 0 4
71783: PPUSH
71784: CALL_OW 488
71788: IFFALSE 71811
// begin result := [ x , y ] ;
71790: LD_ADDR_VAR 0 1
71794: PUSH
71795: LD_VAR 0 3
71799: PUSH
71800: LD_VAR 0 4
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: ST_TO_ADDR
// break ;
71809: GO 71813
// end ; end ;
71811: GO 71613
71813: POP
71814: POP
// if result then
71815: LD_VAR 0 1
71819: IFFALSE 71879
// begin ToLua ( playSibBomb() ) ;
71821: LD_STRING playSibBomb()
71823: PPUSH
71824: CALL_OW 559
// wait ( 0 0$14 ) ;
71828: LD_INT 490
71830: PPUSH
71831: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71835: LD_VAR 0 1
71839: PUSH
71840: LD_INT 1
71842: ARRAY
71843: PPUSH
71844: LD_VAR 0 1
71848: PUSH
71849: LD_INT 2
71851: ARRAY
71852: PPUSH
71853: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71857: LD_VAR 0 1
71861: PUSH
71862: LD_INT 1
71864: ARRAY
71865: PPUSH
71866: LD_VAR 0 1
71870: PUSH
71871: LD_INT 2
71873: ARRAY
71874: PPUSH
71875: CALL_OW 429
// end ; end ;
71879: LD_VAR 0 1
71883: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71884: LD_EXP 47
71888: PUSH
71889: LD_EXP 69
71893: AND
71894: IFFALSE 71906
71896: GO 71898
71898: DISABLE
// YouLost (  ) ;
71899: LD_STRING 
71901: PPUSH
71902: CALL_OW 104
71906: END
// every 0 0$1 trigger StreamModeActive and sFog do
71907: LD_EXP 47
71911: PUSH
71912: LD_EXP 68
71916: AND
71917: IFFALSE 71931
71919: GO 71921
71921: DISABLE
// FogOff ( your_side ) ;
71922: LD_OWVAR 2
71926: PPUSH
71927: CALL_OW 344
71931: END
// every 0 0$1 trigger StreamModeActive and sSun do
71932: LD_EXP 47
71936: PUSH
71937: LD_EXP 70
71941: AND
71942: IFFALSE 71970
71944: GO 71946
71946: DISABLE
// begin solar_recharge_percent := 0 ;
71947: LD_ADDR_OWVAR 79
71951: PUSH
71952: LD_INT 0
71954: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71955: LD_INT 10500
71957: PPUSH
71958: CALL_OW 67
// solar_recharge_percent := 100 ;
71962: LD_ADDR_OWVAR 79
71966: PUSH
71967: LD_INT 100
71969: ST_TO_ADDR
// end ;
71970: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71971: LD_EXP 47
71975: PUSH
71976: LD_EXP 71
71980: AND
71981: IFFALSE 72220
71983: GO 71985
71985: DISABLE
71986: LD_INT 0
71988: PPUSH
71989: PPUSH
71990: PPUSH
// begin tmp := [ ] ;
71991: LD_ADDR_VAR 0 3
71995: PUSH
71996: EMPTY
71997: ST_TO_ADDR
// for i := 1 to 6 do
71998: LD_ADDR_VAR 0 1
72002: PUSH
72003: DOUBLE
72004: LD_INT 1
72006: DEC
72007: ST_TO_ADDR
72008: LD_INT 6
72010: PUSH
72011: FOR_TO
72012: IFFALSE 72117
// begin uc_nation := nation_nature ;
72014: LD_ADDR_OWVAR 21
72018: PUSH
72019: LD_INT 0
72021: ST_TO_ADDR
// uc_side := 0 ;
72022: LD_ADDR_OWVAR 20
72026: PUSH
72027: LD_INT 0
72029: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72030: LD_ADDR_OWVAR 29
72034: PUSH
72035: LD_INT 12
72037: PUSH
72038: LD_INT 12
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: ST_TO_ADDR
// hc_agressivity := 20 ;
72045: LD_ADDR_OWVAR 35
72049: PUSH
72050: LD_INT 20
72052: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72053: LD_ADDR_OWVAR 28
72057: PUSH
72058: LD_INT 17
72060: ST_TO_ADDR
// hc_gallery :=  ;
72061: LD_ADDR_OWVAR 33
72065: PUSH
72066: LD_STRING 
72068: ST_TO_ADDR
// hc_name :=  ;
72069: LD_ADDR_OWVAR 26
72073: PUSH
72074: LD_STRING 
72076: ST_TO_ADDR
// un := CreateHuman ;
72077: LD_ADDR_VAR 0 2
72081: PUSH
72082: CALL_OW 44
72086: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72087: LD_VAR 0 2
72091: PPUSH
72092: LD_INT 1
72094: PPUSH
72095: CALL_OW 51
// tmp := tmp ^ un ;
72099: LD_ADDR_VAR 0 3
72103: PUSH
72104: LD_VAR 0 3
72108: PUSH
72109: LD_VAR 0 2
72113: ADD
72114: ST_TO_ADDR
// end ;
72115: GO 72011
72117: POP
72118: POP
// repeat wait ( 0 0$1 ) ;
72119: LD_INT 35
72121: PPUSH
72122: CALL_OW 67
// for un in tmp do
72126: LD_ADDR_VAR 0 2
72130: PUSH
72131: LD_VAR 0 3
72135: PUSH
72136: FOR_IN
72137: IFFALSE 72211
// begin if IsDead ( un ) then
72139: LD_VAR 0 2
72143: PPUSH
72144: CALL_OW 301
72148: IFFALSE 72168
// begin tmp := tmp diff un ;
72150: LD_ADDR_VAR 0 3
72154: PUSH
72155: LD_VAR 0 3
72159: PUSH
72160: LD_VAR 0 2
72164: DIFF
72165: ST_TO_ADDR
// continue ;
72166: GO 72136
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72168: LD_VAR 0 2
72172: PPUSH
72173: LD_INT 3
72175: PUSH
72176: LD_INT 22
72178: PUSH
72179: LD_INT 0
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PPUSH
72190: CALL_OW 69
72194: PPUSH
72195: LD_VAR 0 2
72199: PPUSH
72200: CALL_OW 74
72204: PPUSH
72205: CALL_OW 115
// end ;
72209: GO 72136
72211: POP
72212: POP
// until not tmp ;
72213: LD_VAR 0 3
72217: NOT
72218: IFFALSE 72119
// end ;
72220: PPOPN 3
72222: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72223: LD_EXP 47
72227: PUSH
72228: LD_EXP 72
72232: AND
72233: IFFALSE 72287
72235: GO 72237
72237: DISABLE
// begin ToLua ( displayTroll(); ) ;
72238: LD_STRING displayTroll();
72240: PPUSH
72241: CALL_OW 559
// wait ( 3 3$00 ) ;
72245: LD_INT 6300
72247: PPUSH
72248: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72252: LD_STRING hideTroll();
72254: PPUSH
72255: CALL_OW 559
// wait ( 1 1$00 ) ;
72259: LD_INT 2100
72261: PPUSH
72262: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72266: LD_STRING displayTroll();
72268: PPUSH
72269: CALL_OW 559
// wait ( 1 1$00 ) ;
72273: LD_INT 2100
72275: PPUSH
72276: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72280: LD_STRING hideTroll();
72282: PPUSH
72283: CALL_OW 559
// end ;
72287: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72288: LD_EXP 47
72292: PUSH
72293: LD_EXP 73
72297: AND
72298: IFFALSE 72361
72300: GO 72302
72302: DISABLE
72303: LD_INT 0
72305: PPUSH
// begin p := 0 ;
72306: LD_ADDR_VAR 0 1
72310: PUSH
72311: LD_INT 0
72313: ST_TO_ADDR
// repeat game_speed := 1 ;
72314: LD_ADDR_OWVAR 65
72318: PUSH
72319: LD_INT 1
72321: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72322: LD_INT 35
72324: PPUSH
72325: CALL_OW 67
// p := p + 1 ;
72329: LD_ADDR_VAR 0 1
72333: PUSH
72334: LD_VAR 0 1
72338: PUSH
72339: LD_INT 1
72341: PLUS
72342: ST_TO_ADDR
// until p >= 60 ;
72343: LD_VAR 0 1
72347: PUSH
72348: LD_INT 60
72350: GREATEREQUAL
72351: IFFALSE 72314
// game_speed := 4 ;
72353: LD_ADDR_OWVAR 65
72357: PUSH
72358: LD_INT 4
72360: ST_TO_ADDR
// end ;
72361: PPOPN 1
72363: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72364: LD_EXP 47
72368: PUSH
72369: LD_EXP 74
72373: AND
72374: IFFALSE 72520
72376: GO 72378
72378: DISABLE
72379: LD_INT 0
72381: PPUSH
72382: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72383: LD_ADDR_VAR 0 1
72387: PUSH
72388: LD_INT 22
72390: PUSH
72391: LD_OWVAR 2
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 2
72402: PUSH
72403: LD_INT 30
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 30
72415: PUSH
72416: LD_INT 1
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: LIST
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PPUSH
72432: CALL_OW 69
72436: ST_TO_ADDR
// if not depot then
72437: LD_VAR 0 1
72441: NOT
72442: IFFALSE 72446
// exit ;
72444: GO 72520
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_VAR 0 1
72455: PUSH
72456: LD_INT 1
72458: PPUSH
72459: LD_VAR 0 1
72463: PPUSH
72464: CALL_OW 12
72468: ARRAY
72469: PPUSH
72470: CALL_OW 274
72474: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72475: LD_VAR 0 2
72479: PPUSH
72480: LD_INT 1
72482: PPUSH
72483: LD_INT 0
72485: PPUSH
72486: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72490: LD_VAR 0 2
72494: PPUSH
72495: LD_INT 2
72497: PPUSH
72498: LD_INT 0
72500: PPUSH
72501: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72505: LD_VAR 0 2
72509: PPUSH
72510: LD_INT 3
72512: PPUSH
72513: LD_INT 0
72515: PPUSH
72516: CALL_OW 277
// end ;
72520: PPOPN 2
72522: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72523: LD_EXP 47
72527: PUSH
72528: LD_EXP 75
72532: AND
72533: IFFALSE 72630
72535: GO 72537
72537: DISABLE
72538: LD_INT 0
72540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72541: LD_ADDR_VAR 0 1
72545: PUSH
72546: LD_INT 22
72548: PUSH
72549: LD_OWVAR 2
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 21
72560: PUSH
72561: LD_INT 1
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: PUSH
72571: LD_INT 23
72573: PUSH
72574: LD_INT 0
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: PPUSH
72590: CALL_OW 69
72594: ST_TO_ADDR
// if not tmp then
72595: LD_VAR 0 1
72599: NOT
72600: IFFALSE 72604
// exit ;
72602: GO 72630
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72604: LD_VAR 0 1
72608: PUSH
72609: LD_INT 1
72611: PPUSH
72612: LD_VAR 0 1
72616: PPUSH
72617: CALL_OW 12
72621: ARRAY
72622: PPUSH
72623: LD_INT 200
72625: PPUSH
72626: CALL_OW 234
// end ;
72630: PPOPN 1
72632: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72633: LD_EXP 47
72637: PUSH
72638: LD_EXP 76
72642: AND
72643: IFFALSE 72722
72645: GO 72647
72647: DISABLE
72648: LD_INT 0
72650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72651: LD_ADDR_VAR 0 1
72655: PUSH
72656: LD_INT 22
72658: PUSH
72659: LD_OWVAR 2
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 21
72670: PUSH
72671: LD_INT 2
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PPUSH
72682: CALL_OW 69
72686: ST_TO_ADDR
// if not tmp then
72687: LD_VAR 0 1
72691: NOT
72692: IFFALSE 72696
// exit ;
72694: GO 72722
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72696: LD_VAR 0 1
72700: PUSH
72701: LD_INT 1
72703: PPUSH
72704: LD_VAR 0 1
72708: PPUSH
72709: CALL_OW 12
72713: ARRAY
72714: PPUSH
72715: LD_INT 60
72717: PPUSH
72718: CALL_OW 234
// end ;
72722: PPOPN 1
72724: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72725: LD_EXP 47
72729: PUSH
72730: LD_EXP 77
72734: AND
72735: IFFALSE 72834
72737: GO 72739
72739: DISABLE
72740: LD_INT 0
72742: PPUSH
72743: PPUSH
// begin enable ;
72744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72745: LD_ADDR_VAR 0 1
72749: PUSH
72750: LD_INT 22
72752: PUSH
72753: LD_OWVAR 2
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 61
72764: PUSH
72765: EMPTY
72766: LIST
72767: PUSH
72768: LD_INT 33
72770: PUSH
72771: LD_INT 2
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: LIST
72782: PPUSH
72783: CALL_OW 69
72787: ST_TO_ADDR
// if not tmp then
72788: LD_VAR 0 1
72792: NOT
72793: IFFALSE 72797
// exit ;
72795: GO 72834
// for i in tmp do
72797: LD_ADDR_VAR 0 2
72801: PUSH
72802: LD_VAR 0 1
72806: PUSH
72807: FOR_IN
72808: IFFALSE 72832
// if IsControledBy ( i ) then
72810: LD_VAR 0 2
72814: PPUSH
72815: CALL_OW 312
72819: IFFALSE 72830
// ComUnlink ( i ) ;
72821: LD_VAR 0 2
72825: PPUSH
72826: CALL_OW 136
72830: GO 72807
72832: POP
72833: POP
// end ;
72834: PPOPN 2
72836: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72837: LD_EXP 47
72841: PUSH
72842: LD_EXP 78
72846: AND
72847: IFFALSE 72987
72849: GO 72851
72851: DISABLE
72852: LD_INT 0
72854: PPUSH
72855: PPUSH
// begin ToLua ( displayPowell(); ) ;
72856: LD_STRING displayPowell();
72858: PPUSH
72859: CALL_OW 559
// uc_side := 0 ;
72863: LD_ADDR_OWVAR 20
72867: PUSH
72868: LD_INT 0
72870: ST_TO_ADDR
// uc_nation := 2 ;
72871: LD_ADDR_OWVAR 21
72875: PUSH
72876: LD_INT 2
72878: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72879: LD_ADDR_OWVAR 37
72883: PUSH
72884: LD_INT 14
72886: ST_TO_ADDR
// vc_engine := engine_siberite ;
72887: LD_ADDR_OWVAR 39
72891: PUSH
72892: LD_INT 3
72894: ST_TO_ADDR
// vc_control := control_apeman ;
72895: LD_ADDR_OWVAR 38
72899: PUSH
72900: LD_INT 5
72902: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72903: LD_ADDR_OWVAR 40
72907: PUSH
72908: LD_INT 29
72910: ST_TO_ADDR
// un := CreateVehicle ;
72911: LD_ADDR_VAR 0 2
72915: PUSH
72916: CALL_OW 45
72920: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72921: LD_VAR 0 2
72925: PPUSH
72926: LD_INT 1
72928: PPUSH
72929: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72933: LD_INT 35
72935: PPUSH
72936: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72940: LD_VAR 0 2
72944: PPUSH
72945: LD_INT 22
72947: PUSH
72948: LD_OWVAR 2
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PPUSH
72957: CALL_OW 69
72961: PPUSH
72962: LD_VAR 0 2
72966: PPUSH
72967: CALL_OW 74
72971: PPUSH
72972: CALL_OW 115
// until IsDead ( un ) ;
72976: LD_VAR 0 2
72980: PPUSH
72981: CALL_OW 301
72985: IFFALSE 72933
// end ;
72987: PPOPN 2
72989: END
// every 0 0$1 trigger StreamModeActive and sStu do
72990: LD_EXP 47
72994: PUSH
72995: LD_EXP 86
72999: AND
73000: IFFALSE 73016
73002: GO 73004
73004: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73005: LD_STRING displayStucuk();
73007: PPUSH
73008: CALL_OW 559
// ResetFog ;
73012: CALL_OW 335
// end ;
73016: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73017: LD_EXP 47
73021: PUSH
73022: LD_EXP 79
73026: AND
73027: IFFALSE 73168
73029: GO 73031
73031: DISABLE
73032: LD_INT 0
73034: PPUSH
73035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73036: LD_ADDR_VAR 0 2
73040: PUSH
73041: LD_INT 22
73043: PUSH
73044: LD_OWVAR 2
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 21
73055: PUSH
73056: LD_INT 1
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PPUSH
73067: CALL_OW 69
73071: ST_TO_ADDR
// if not tmp then
73072: LD_VAR 0 2
73076: NOT
73077: IFFALSE 73081
// exit ;
73079: GO 73168
// un := tmp [ rand ( 1 , tmp ) ] ;
73081: LD_ADDR_VAR 0 1
73085: PUSH
73086: LD_VAR 0 2
73090: PUSH
73091: LD_INT 1
73093: PPUSH
73094: LD_VAR 0 2
73098: PPUSH
73099: CALL_OW 12
73103: ARRAY
73104: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73105: LD_VAR 0 1
73109: PPUSH
73110: LD_INT 0
73112: PPUSH
73113: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73117: LD_VAR 0 1
73121: PPUSH
73122: LD_OWVAR 3
73126: PUSH
73127: LD_VAR 0 1
73131: DIFF
73132: PPUSH
73133: LD_VAR 0 1
73137: PPUSH
73138: CALL_OW 74
73142: PPUSH
73143: CALL_OW 115
// wait ( 0 0$20 ) ;
73147: LD_INT 700
73149: PPUSH
73150: CALL_OW 67
// SetSide ( un , your_side ) ;
73154: LD_VAR 0 1
73158: PPUSH
73159: LD_OWVAR 2
73163: PPUSH
73164: CALL_OW 235
// end ;
73168: PPOPN 2
73170: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73171: LD_EXP 47
73175: PUSH
73176: LD_EXP 80
73180: AND
73181: IFFALSE 73287
73183: GO 73185
73185: DISABLE
73186: LD_INT 0
73188: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73189: LD_ADDR_VAR 0 1
73193: PUSH
73194: LD_INT 22
73196: PUSH
73197: LD_OWVAR 2
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 2
73208: PUSH
73209: LD_INT 30
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 30
73221: PUSH
73222: LD_INT 1
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: LIST
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PPUSH
73238: CALL_OW 69
73242: ST_TO_ADDR
// if not depot then
73243: LD_VAR 0 1
73247: NOT
73248: IFFALSE 73252
// exit ;
73250: GO 73287
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73252: LD_VAR 0 1
73256: PUSH
73257: LD_INT 1
73259: ARRAY
73260: PPUSH
73261: CALL_OW 250
73265: PPUSH
73266: LD_VAR 0 1
73270: PUSH
73271: LD_INT 1
73273: ARRAY
73274: PPUSH
73275: CALL_OW 251
73279: PPUSH
73280: LD_INT 70
73282: PPUSH
73283: CALL_OW 495
// end ;
73287: PPOPN 1
73289: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73290: LD_EXP 47
73294: PUSH
73295: LD_EXP 81
73299: AND
73300: IFFALSE 73511
73302: GO 73304
73304: DISABLE
73305: LD_INT 0
73307: PPUSH
73308: PPUSH
73309: PPUSH
73310: PPUSH
73311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73312: LD_ADDR_VAR 0 5
73316: PUSH
73317: LD_INT 22
73319: PUSH
73320: LD_OWVAR 2
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 21
73331: PUSH
73332: LD_INT 1
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PPUSH
73343: CALL_OW 69
73347: ST_TO_ADDR
// if not tmp then
73348: LD_VAR 0 5
73352: NOT
73353: IFFALSE 73357
// exit ;
73355: GO 73511
// for i in tmp do
73357: LD_ADDR_VAR 0 1
73361: PUSH
73362: LD_VAR 0 5
73366: PUSH
73367: FOR_IN
73368: IFFALSE 73509
// begin d := rand ( 0 , 5 ) ;
73370: LD_ADDR_VAR 0 4
73374: PUSH
73375: LD_INT 0
73377: PPUSH
73378: LD_INT 5
73380: PPUSH
73381: CALL_OW 12
73385: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73386: LD_ADDR_VAR 0 2
73390: PUSH
73391: LD_VAR 0 1
73395: PPUSH
73396: CALL_OW 250
73400: PPUSH
73401: LD_VAR 0 4
73405: PPUSH
73406: LD_INT 3
73408: PPUSH
73409: LD_INT 12
73411: PPUSH
73412: CALL_OW 12
73416: PPUSH
73417: CALL_OW 272
73421: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73422: LD_ADDR_VAR 0 3
73426: PUSH
73427: LD_VAR 0 1
73431: PPUSH
73432: CALL_OW 251
73436: PPUSH
73437: LD_VAR 0 4
73441: PPUSH
73442: LD_INT 3
73444: PPUSH
73445: LD_INT 12
73447: PPUSH
73448: CALL_OW 12
73452: PPUSH
73453: CALL_OW 273
73457: ST_TO_ADDR
// if ValidHex ( x , y ) then
73458: LD_VAR 0 2
73462: PPUSH
73463: LD_VAR 0 3
73467: PPUSH
73468: CALL_OW 488
73472: IFFALSE 73507
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73474: LD_VAR 0 1
73478: PPUSH
73479: LD_VAR 0 2
73483: PPUSH
73484: LD_VAR 0 3
73488: PPUSH
73489: LD_INT 3
73491: PPUSH
73492: LD_INT 6
73494: PPUSH
73495: CALL_OW 12
73499: PPUSH
73500: LD_INT 1
73502: PPUSH
73503: CALL_OW 483
// end ;
73507: GO 73367
73509: POP
73510: POP
// end ;
73511: PPOPN 5
73513: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73514: LD_EXP 47
73518: PUSH
73519: LD_EXP 82
73523: AND
73524: IFFALSE 73618
73526: GO 73528
73528: DISABLE
73529: LD_INT 0
73531: PPUSH
73532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73533: LD_ADDR_VAR 0 2
73537: PUSH
73538: LD_INT 22
73540: PUSH
73541: LD_OWVAR 2
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 32
73552: PUSH
73553: LD_INT 1
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: LD_INT 21
73562: PUSH
73563: LD_INT 2
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: LIST
73574: PPUSH
73575: CALL_OW 69
73579: ST_TO_ADDR
// if not tmp then
73580: LD_VAR 0 2
73584: NOT
73585: IFFALSE 73589
// exit ;
73587: GO 73618
// for i in tmp do
73589: LD_ADDR_VAR 0 1
73593: PUSH
73594: LD_VAR 0 2
73598: PUSH
73599: FOR_IN
73600: IFFALSE 73616
// SetFuel ( i , 0 ) ;
73602: LD_VAR 0 1
73606: PPUSH
73607: LD_INT 0
73609: PPUSH
73610: CALL_OW 240
73614: GO 73599
73616: POP
73617: POP
// end ;
73618: PPOPN 2
73620: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73621: LD_EXP 47
73625: PUSH
73626: LD_EXP 83
73630: AND
73631: IFFALSE 73697
73633: GO 73635
73635: DISABLE
73636: LD_INT 0
73638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73639: LD_ADDR_VAR 0 1
73643: PUSH
73644: LD_INT 22
73646: PUSH
73647: LD_OWVAR 2
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 30
73658: PUSH
73659: LD_INT 29
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PPUSH
73670: CALL_OW 69
73674: ST_TO_ADDR
// if not tmp then
73675: LD_VAR 0 1
73679: NOT
73680: IFFALSE 73684
// exit ;
73682: GO 73697
// DestroyUnit ( tmp [ 1 ] ) ;
73684: LD_VAR 0 1
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PPUSH
73693: CALL_OW 65
// end ;
73697: PPOPN 1
73699: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73700: LD_EXP 47
73704: PUSH
73705: LD_EXP 85
73709: AND
73710: IFFALSE 73839
73712: GO 73714
73714: DISABLE
73715: LD_INT 0
73717: PPUSH
// begin uc_side := 0 ;
73718: LD_ADDR_OWVAR 20
73722: PUSH
73723: LD_INT 0
73725: ST_TO_ADDR
// uc_nation := nation_arabian ;
73726: LD_ADDR_OWVAR 21
73730: PUSH
73731: LD_INT 2
73733: ST_TO_ADDR
// hc_gallery :=  ;
73734: LD_ADDR_OWVAR 33
73738: PUSH
73739: LD_STRING 
73741: ST_TO_ADDR
// hc_name :=  ;
73742: LD_ADDR_OWVAR 26
73746: PUSH
73747: LD_STRING 
73749: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73750: LD_INT 1
73752: PPUSH
73753: LD_INT 11
73755: PPUSH
73756: LD_INT 10
73758: PPUSH
73759: CALL_OW 380
// un := CreateHuman ;
73763: LD_ADDR_VAR 0 1
73767: PUSH
73768: CALL_OW 44
73772: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73773: LD_VAR 0 1
73777: PPUSH
73778: LD_INT 1
73780: PPUSH
73781: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73785: LD_INT 35
73787: PPUSH
73788: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73792: LD_VAR 0 1
73796: PPUSH
73797: LD_INT 22
73799: PUSH
73800: LD_OWVAR 2
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PPUSH
73809: CALL_OW 69
73813: PPUSH
73814: LD_VAR 0 1
73818: PPUSH
73819: CALL_OW 74
73823: PPUSH
73824: CALL_OW 115
// until IsDead ( un ) ;
73828: LD_VAR 0 1
73832: PPUSH
73833: CALL_OW 301
73837: IFFALSE 73785
// end ;
73839: PPOPN 1
73841: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73842: LD_EXP 47
73846: PUSH
73847: LD_EXP 87
73851: AND
73852: IFFALSE 73864
73854: GO 73856
73856: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73857: LD_STRING earthquake(getX(game), 0, 32)
73859: PPUSH
73860: CALL_OW 559
73864: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73865: LD_EXP 47
73869: PUSH
73870: LD_EXP 88
73874: AND
73875: IFFALSE 73966
73877: GO 73879
73879: DISABLE
73880: LD_INT 0
73882: PPUSH
// begin enable ;
73883: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73884: LD_ADDR_VAR 0 1
73888: PUSH
73889: LD_INT 22
73891: PUSH
73892: LD_OWVAR 2
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 21
73903: PUSH
73904: LD_INT 2
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 33
73913: PUSH
73914: LD_INT 3
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: LIST
73925: PPUSH
73926: CALL_OW 69
73930: ST_TO_ADDR
// if not tmp then
73931: LD_VAR 0 1
73935: NOT
73936: IFFALSE 73940
// exit ;
73938: GO 73966
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73940: LD_VAR 0 1
73944: PUSH
73945: LD_INT 1
73947: PPUSH
73948: LD_VAR 0 1
73952: PPUSH
73953: CALL_OW 12
73957: ARRAY
73958: PPUSH
73959: LD_INT 1
73961: PPUSH
73962: CALL_OW 234
// end ;
73966: PPOPN 1
73968: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73969: LD_EXP 47
73973: PUSH
73974: LD_EXP 89
73978: AND
73979: IFFALSE 74120
73981: GO 73983
73983: DISABLE
73984: LD_INT 0
73986: PPUSH
73987: PPUSH
73988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73989: LD_ADDR_VAR 0 3
73993: PUSH
73994: LD_INT 22
73996: PUSH
73997: LD_OWVAR 2
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: LD_INT 25
74008: PUSH
74009: LD_INT 1
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PPUSH
74020: CALL_OW 69
74024: ST_TO_ADDR
// if not tmp then
74025: LD_VAR 0 3
74029: NOT
74030: IFFALSE 74034
// exit ;
74032: GO 74120
// un := tmp [ rand ( 1 , tmp ) ] ;
74034: LD_ADDR_VAR 0 2
74038: PUSH
74039: LD_VAR 0 3
74043: PUSH
74044: LD_INT 1
74046: PPUSH
74047: LD_VAR 0 3
74051: PPUSH
74052: CALL_OW 12
74056: ARRAY
74057: ST_TO_ADDR
// if Crawls ( un ) then
74058: LD_VAR 0 2
74062: PPUSH
74063: CALL_OW 318
74067: IFFALSE 74078
// ComWalk ( un ) ;
74069: LD_VAR 0 2
74073: PPUSH
74074: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74078: LD_VAR 0 2
74082: PPUSH
74083: LD_INT 9
74085: PPUSH
74086: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74090: LD_INT 28
74092: PPUSH
74093: LD_OWVAR 2
74097: PPUSH
74098: LD_INT 2
74100: PPUSH
74101: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74105: LD_INT 29
74107: PPUSH
74108: LD_OWVAR 2
74112: PPUSH
74113: LD_INT 2
74115: PPUSH
74116: CALL_OW 322
// end ;
74120: PPOPN 3
74122: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74123: LD_EXP 47
74127: PUSH
74128: LD_EXP 90
74132: AND
74133: IFFALSE 74244
74135: GO 74137
74137: DISABLE
74138: LD_INT 0
74140: PPUSH
74141: PPUSH
74142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74143: LD_ADDR_VAR 0 3
74147: PUSH
74148: LD_INT 22
74150: PUSH
74151: LD_OWVAR 2
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 25
74162: PUSH
74163: LD_INT 1
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PPUSH
74174: CALL_OW 69
74178: ST_TO_ADDR
// if not tmp then
74179: LD_VAR 0 3
74183: NOT
74184: IFFALSE 74188
// exit ;
74186: GO 74244
// un := tmp [ rand ( 1 , tmp ) ] ;
74188: LD_ADDR_VAR 0 2
74192: PUSH
74193: LD_VAR 0 3
74197: PUSH
74198: LD_INT 1
74200: PPUSH
74201: LD_VAR 0 3
74205: PPUSH
74206: CALL_OW 12
74210: ARRAY
74211: ST_TO_ADDR
// if Crawls ( un ) then
74212: LD_VAR 0 2
74216: PPUSH
74217: CALL_OW 318
74221: IFFALSE 74232
// ComWalk ( un ) ;
74223: LD_VAR 0 2
74227: PPUSH
74228: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74232: LD_VAR 0 2
74236: PPUSH
74237: LD_INT 8
74239: PPUSH
74240: CALL_OW 336
// end ;
74244: PPOPN 3
74246: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74247: LD_EXP 47
74251: PUSH
74252: LD_EXP 91
74256: AND
74257: IFFALSE 74401
74259: GO 74261
74261: DISABLE
74262: LD_INT 0
74264: PPUSH
74265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74266: LD_ADDR_VAR 0 2
74270: PUSH
74271: LD_INT 22
74273: PUSH
74274: LD_OWVAR 2
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_INT 21
74285: PUSH
74286: LD_INT 2
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: LD_INT 2
74295: PUSH
74296: LD_INT 34
74298: PUSH
74299: LD_INT 12
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 34
74308: PUSH
74309: LD_INT 51
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: PUSH
74316: LD_INT 34
74318: PUSH
74319: LD_INT 32
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: PPUSH
74337: CALL_OW 69
74341: ST_TO_ADDR
// if not tmp then
74342: LD_VAR 0 2
74346: NOT
74347: IFFALSE 74351
// exit ;
74349: GO 74401
// for i in tmp do
74351: LD_ADDR_VAR 0 1
74355: PUSH
74356: LD_VAR 0 2
74360: PUSH
74361: FOR_IN
74362: IFFALSE 74399
// if GetCargo ( i , mat_artifact ) = 0 then
74364: LD_VAR 0 1
74368: PPUSH
74369: LD_INT 4
74371: PPUSH
74372: CALL_OW 289
74376: PUSH
74377: LD_INT 0
74379: EQUAL
74380: IFFALSE 74397
// SetCargo ( i , mat_siberit , 100 ) ;
74382: LD_VAR 0 1
74386: PPUSH
74387: LD_INT 3
74389: PPUSH
74390: LD_INT 100
74392: PPUSH
74393: CALL_OW 290
74397: GO 74361
74399: POP
74400: POP
// end ;
74401: PPOPN 2
74403: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74404: LD_EXP 47
74408: PUSH
74409: LD_EXP 92
74413: AND
74414: IFFALSE 74597
74416: GO 74418
74418: DISABLE
74419: LD_INT 0
74421: PPUSH
74422: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74423: LD_ADDR_VAR 0 2
74427: PUSH
74428: LD_INT 22
74430: PUSH
74431: LD_OWVAR 2
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PPUSH
74440: CALL_OW 69
74444: ST_TO_ADDR
// if not tmp then
74445: LD_VAR 0 2
74449: NOT
74450: IFFALSE 74454
// exit ;
74452: GO 74597
// for i := 1 to 2 do
74454: LD_ADDR_VAR 0 1
74458: PUSH
74459: DOUBLE
74460: LD_INT 1
74462: DEC
74463: ST_TO_ADDR
74464: LD_INT 2
74466: PUSH
74467: FOR_TO
74468: IFFALSE 74595
// begin uc_side := your_side ;
74470: LD_ADDR_OWVAR 20
74474: PUSH
74475: LD_OWVAR 2
74479: ST_TO_ADDR
// uc_nation := nation_american ;
74480: LD_ADDR_OWVAR 21
74484: PUSH
74485: LD_INT 1
74487: ST_TO_ADDR
// vc_chassis := us_morphling ;
74488: LD_ADDR_OWVAR 37
74492: PUSH
74493: LD_INT 5
74495: ST_TO_ADDR
// vc_engine := engine_siberite ;
74496: LD_ADDR_OWVAR 39
74500: PUSH
74501: LD_INT 3
74503: ST_TO_ADDR
// vc_control := control_computer ;
74504: LD_ADDR_OWVAR 38
74508: PUSH
74509: LD_INT 3
74511: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74512: LD_ADDR_OWVAR 40
74516: PUSH
74517: LD_INT 10
74519: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74520: LD_VAR 0 2
74524: PUSH
74525: LD_INT 1
74527: ARRAY
74528: PPUSH
74529: CALL_OW 310
74533: NOT
74534: IFFALSE 74581
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74536: CALL_OW 45
74540: PPUSH
74541: LD_VAR 0 2
74545: PUSH
74546: LD_INT 1
74548: ARRAY
74549: PPUSH
74550: CALL_OW 250
74554: PPUSH
74555: LD_VAR 0 2
74559: PUSH
74560: LD_INT 1
74562: ARRAY
74563: PPUSH
74564: CALL_OW 251
74568: PPUSH
74569: LD_INT 12
74571: PPUSH
74572: LD_INT 1
74574: PPUSH
74575: CALL_OW 50
74579: GO 74593
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74581: CALL_OW 45
74585: PPUSH
74586: LD_INT 1
74588: PPUSH
74589: CALL_OW 51
// end ;
74593: GO 74467
74595: POP
74596: POP
// end ;
74597: PPOPN 2
74599: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74600: LD_EXP 47
74604: PUSH
74605: LD_EXP 93
74609: AND
74610: IFFALSE 74832
74612: GO 74614
74614: DISABLE
74615: LD_INT 0
74617: PPUSH
74618: PPUSH
74619: PPUSH
74620: PPUSH
74621: PPUSH
74622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74623: LD_ADDR_VAR 0 6
74627: PUSH
74628: LD_INT 22
74630: PUSH
74631: LD_OWVAR 2
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 21
74642: PUSH
74643: LD_INT 1
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 3
74652: PUSH
74653: LD_INT 23
74655: PUSH
74656: LD_INT 0
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: PPUSH
74672: CALL_OW 69
74676: ST_TO_ADDR
// if not tmp then
74677: LD_VAR 0 6
74681: NOT
74682: IFFALSE 74686
// exit ;
74684: GO 74832
// s1 := rand ( 1 , 4 ) ;
74686: LD_ADDR_VAR 0 2
74690: PUSH
74691: LD_INT 1
74693: PPUSH
74694: LD_INT 4
74696: PPUSH
74697: CALL_OW 12
74701: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74702: LD_ADDR_VAR 0 4
74706: PUSH
74707: LD_VAR 0 6
74711: PUSH
74712: LD_INT 1
74714: ARRAY
74715: PPUSH
74716: LD_VAR 0 2
74720: PPUSH
74721: CALL_OW 259
74725: ST_TO_ADDR
// if s1 = 1 then
74726: LD_VAR 0 2
74730: PUSH
74731: LD_INT 1
74733: EQUAL
74734: IFFALSE 74754
// s2 := rand ( 2 , 4 ) else
74736: LD_ADDR_VAR 0 3
74740: PUSH
74741: LD_INT 2
74743: PPUSH
74744: LD_INT 4
74746: PPUSH
74747: CALL_OW 12
74751: ST_TO_ADDR
74752: GO 74762
// s2 := 1 ;
74754: LD_ADDR_VAR 0 3
74758: PUSH
74759: LD_INT 1
74761: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74762: LD_ADDR_VAR 0 5
74766: PUSH
74767: LD_VAR 0 6
74771: PUSH
74772: LD_INT 1
74774: ARRAY
74775: PPUSH
74776: LD_VAR 0 3
74780: PPUSH
74781: CALL_OW 259
74785: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74786: LD_VAR 0 6
74790: PUSH
74791: LD_INT 1
74793: ARRAY
74794: PPUSH
74795: LD_VAR 0 2
74799: PPUSH
74800: LD_VAR 0 5
74804: PPUSH
74805: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74809: LD_VAR 0 6
74813: PUSH
74814: LD_INT 1
74816: ARRAY
74817: PPUSH
74818: LD_VAR 0 3
74822: PPUSH
74823: LD_VAR 0 4
74827: PPUSH
74828: CALL_OW 237
// end ;
74832: PPOPN 6
74834: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74835: LD_EXP 47
74839: PUSH
74840: LD_EXP 94
74844: AND
74845: IFFALSE 74924
74847: GO 74849
74849: DISABLE
74850: LD_INT 0
74852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74853: LD_ADDR_VAR 0 1
74857: PUSH
74858: LD_INT 22
74860: PUSH
74861: LD_OWVAR 2
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 30
74872: PUSH
74873: LD_INT 3
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PPUSH
74884: CALL_OW 69
74888: ST_TO_ADDR
// if not tmp then
74889: LD_VAR 0 1
74893: NOT
74894: IFFALSE 74898
// exit ;
74896: GO 74924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74898: LD_VAR 0 1
74902: PUSH
74903: LD_INT 1
74905: PPUSH
74906: LD_VAR 0 1
74910: PPUSH
74911: CALL_OW 12
74915: ARRAY
74916: PPUSH
74917: LD_INT 1
74919: PPUSH
74920: CALL_OW 234
// end ;
74924: PPOPN 1
74926: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74927: LD_EXP 47
74931: PUSH
74932: LD_EXP 95
74936: AND
74937: IFFALSE 75049
74939: GO 74941
74941: DISABLE
74942: LD_INT 0
74944: PPUSH
74945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74946: LD_ADDR_VAR 0 2
74950: PUSH
74951: LD_INT 22
74953: PUSH
74954: LD_OWVAR 2
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 2
74965: PUSH
74966: LD_INT 30
74968: PUSH
74969: LD_INT 27
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: PUSH
74976: LD_INT 30
74978: PUSH
74979: LD_INT 26
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 30
74988: PUSH
74989: LD_INT 28
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PPUSH
75006: CALL_OW 69
75010: ST_TO_ADDR
// if not tmp then
75011: LD_VAR 0 2
75015: NOT
75016: IFFALSE 75020
// exit ;
75018: GO 75049
// for i in tmp do
75020: LD_ADDR_VAR 0 1
75024: PUSH
75025: LD_VAR 0 2
75029: PUSH
75030: FOR_IN
75031: IFFALSE 75047
// SetLives ( i , 1 ) ;
75033: LD_VAR 0 1
75037: PPUSH
75038: LD_INT 1
75040: PPUSH
75041: CALL_OW 234
75045: GO 75030
75047: POP
75048: POP
// end ;
75049: PPOPN 2
75051: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75052: LD_EXP 47
75056: PUSH
75057: LD_EXP 96
75061: AND
75062: IFFALSE 75349
75064: GO 75066
75066: DISABLE
75067: LD_INT 0
75069: PPUSH
75070: PPUSH
75071: PPUSH
// begin i := rand ( 1 , 7 ) ;
75072: LD_ADDR_VAR 0 1
75076: PUSH
75077: LD_INT 1
75079: PPUSH
75080: LD_INT 7
75082: PPUSH
75083: CALL_OW 12
75087: ST_TO_ADDR
// case i of 1 :
75088: LD_VAR 0 1
75092: PUSH
75093: LD_INT 1
75095: DOUBLE
75096: EQUAL
75097: IFTRUE 75101
75099: GO 75111
75101: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75102: LD_STRING earthquake(getX(game), 0, 32)
75104: PPUSH
75105: CALL_OW 559
75109: GO 75349
75111: LD_INT 2
75113: DOUBLE
75114: EQUAL
75115: IFTRUE 75119
75117: GO 75133
75119: POP
// begin ToLua ( displayStucuk(); ) ;
75120: LD_STRING displayStucuk();
75122: PPUSH
75123: CALL_OW 559
// ResetFog ;
75127: CALL_OW 335
// end ; 3 :
75131: GO 75349
75133: LD_INT 3
75135: DOUBLE
75136: EQUAL
75137: IFTRUE 75141
75139: GO 75245
75141: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75142: LD_ADDR_VAR 0 2
75146: PUSH
75147: LD_INT 22
75149: PUSH
75150: LD_OWVAR 2
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 25
75161: PUSH
75162: LD_INT 1
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PPUSH
75173: CALL_OW 69
75177: ST_TO_ADDR
// if not tmp then
75178: LD_VAR 0 2
75182: NOT
75183: IFFALSE 75187
// exit ;
75185: GO 75349
// un := tmp [ rand ( 1 , tmp ) ] ;
75187: LD_ADDR_VAR 0 3
75191: PUSH
75192: LD_VAR 0 2
75196: PUSH
75197: LD_INT 1
75199: PPUSH
75200: LD_VAR 0 2
75204: PPUSH
75205: CALL_OW 12
75209: ARRAY
75210: ST_TO_ADDR
// if Crawls ( un ) then
75211: LD_VAR 0 3
75215: PPUSH
75216: CALL_OW 318
75220: IFFALSE 75231
// ComWalk ( un ) ;
75222: LD_VAR 0 3
75226: PPUSH
75227: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75231: LD_VAR 0 3
75235: PPUSH
75236: LD_INT 8
75238: PPUSH
75239: CALL_OW 336
// end ; 4 :
75243: GO 75349
75245: LD_INT 4
75247: DOUBLE
75248: EQUAL
75249: IFTRUE 75253
75251: GO 75327
75253: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75254: LD_ADDR_VAR 0 2
75258: PUSH
75259: LD_INT 22
75261: PUSH
75262: LD_OWVAR 2
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 30
75273: PUSH
75274: LD_INT 29
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PPUSH
75285: CALL_OW 69
75289: ST_TO_ADDR
// if not tmp then
75290: LD_VAR 0 2
75294: NOT
75295: IFFALSE 75299
// exit ;
75297: GO 75349
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75299: LD_VAR 0 2
75303: PUSH
75304: LD_INT 1
75306: ARRAY
75307: PPUSH
75308: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75312: LD_VAR 0 2
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PPUSH
75321: CALL_OW 65
// end ; 5 .. 7 :
75325: GO 75349
75327: LD_INT 5
75329: DOUBLE
75330: GREATEREQUAL
75331: IFFALSE 75339
75333: LD_INT 7
75335: DOUBLE
75336: LESSEQUAL
75337: IFTRUE 75341
75339: GO 75348
75341: POP
// StreamSibBomb ; end ;
75342: CALL 71586 0 0
75346: GO 75349
75348: POP
// end ;
75349: PPOPN 3
75351: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75352: LD_EXP 47
75356: PUSH
75357: LD_EXP 97
75361: AND
75362: IFFALSE 75518
75364: GO 75366
75366: DISABLE
75367: LD_INT 0
75369: PPUSH
75370: PPUSH
75371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75372: LD_ADDR_VAR 0 2
75376: PUSH
75377: LD_INT 81
75379: PUSH
75380: LD_OWVAR 2
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: LD_INT 2
75391: PUSH
75392: LD_INT 21
75394: PUSH
75395: LD_INT 1
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: LD_INT 21
75404: PUSH
75405: LD_INT 2
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PPUSH
75421: CALL_OW 69
75425: ST_TO_ADDR
// if not tmp then
75426: LD_VAR 0 2
75430: NOT
75431: IFFALSE 75435
// exit ;
75433: GO 75518
// p := 0 ;
75435: LD_ADDR_VAR 0 3
75439: PUSH
75440: LD_INT 0
75442: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75443: LD_INT 35
75445: PPUSH
75446: CALL_OW 67
// p := p + 1 ;
75450: LD_ADDR_VAR 0 3
75454: PUSH
75455: LD_VAR 0 3
75459: PUSH
75460: LD_INT 1
75462: PLUS
75463: ST_TO_ADDR
// for i in tmp do
75464: LD_ADDR_VAR 0 1
75468: PUSH
75469: LD_VAR 0 2
75473: PUSH
75474: FOR_IN
75475: IFFALSE 75506
// if GetLives ( i ) < 1000 then
75477: LD_VAR 0 1
75481: PPUSH
75482: CALL_OW 256
75486: PUSH
75487: LD_INT 1000
75489: LESS
75490: IFFALSE 75504
// SetLives ( i , 1000 ) ;
75492: LD_VAR 0 1
75496: PPUSH
75497: LD_INT 1000
75499: PPUSH
75500: CALL_OW 234
75504: GO 75474
75506: POP
75507: POP
// until p > 20 ;
75508: LD_VAR 0 3
75512: PUSH
75513: LD_INT 20
75515: GREATER
75516: IFFALSE 75443
// end ;
75518: PPOPN 3
75520: END
// every 0 0$1 trigger StreamModeActive and sTime do
75521: LD_EXP 47
75525: PUSH
75526: LD_EXP 98
75530: AND
75531: IFFALSE 75566
75533: GO 75535
75535: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75536: LD_INT 28
75538: PPUSH
75539: LD_OWVAR 2
75543: PPUSH
75544: LD_INT 2
75546: PPUSH
75547: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75551: LD_INT 30
75553: PPUSH
75554: LD_OWVAR 2
75558: PPUSH
75559: LD_INT 2
75561: PPUSH
75562: CALL_OW 322
// end ;
75566: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75567: LD_EXP 47
75571: PUSH
75572: LD_EXP 99
75576: AND
75577: IFFALSE 75698
75579: GO 75581
75581: DISABLE
75582: LD_INT 0
75584: PPUSH
75585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75586: LD_ADDR_VAR 0 2
75590: PUSH
75591: LD_INT 22
75593: PUSH
75594: LD_OWVAR 2
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: PUSH
75603: LD_INT 21
75605: PUSH
75606: LD_INT 1
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PUSH
75613: LD_INT 3
75615: PUSH
75616: LD_INT 23
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: PPUSH
75635: CALL_OW 69
75639: ST_TO_ADDR
// if not tmp then
75640: LD_VAR 0 2
75644: NOT
75645: IFFALSE 75649
// exit ;
75647: GO 75698
// for i in tmp do
75649: LD_ADDR_VAR 0 1
75653: PUSH
75654: LD_VAR 0 2
75658: PUSH
75659: FOR_IN
75660: IFFALSE 75696
// begin if Crawls ( i ) then
75662: LD_VAR 0 1
75666: PPUSH
75667: CALL_OW 318
75671: IFFALSE 75682
// ComWalk ( i ) ;
75673: LD_VAR 0 1
75677: PPUSH
75678: CALL_OW 138
// SetClass ( i , 2 ) ;
75682: LD_VAR 0 1
75686: PPUSH
75687: LD_INT 2
75689: PPUSH
75690: CALL_OW 336
// end ;
75694: GO 75659
75696: POP
75697: POP
// end ;
75698: PPOPN 2
75700: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75701: LD_EXP 47
75705: PUSH
75706: LD_EXP 100
75710: AND
75711: IFFALSE 75999
75713: GO 75715
75715: DISABLE
75716: LD_INT 0
75718: PPUSH
75719: PPUSH
75720: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75721: LD_OWVAR 2
75725: PPUSH
75726: LD_INT 9
75728: PPUSH
75729: LD_INT 1
75731: PPUSH
75732: LD_INT 1
75734: PPUSH
75735: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75739: LD_INT 9
75741: PPUSH
75742: LD_OWVAR 2
75746: PPUSH
75747: CALL_OW 343
// uc_side := 9 ;
75751: LD_ADDR_OWVAR 20
75755: PUSH
75756: LD_INT 9
75758: ST_TO_ADDR
// uc_nation := 2 ;
75759: LD_ADDR_OWVAR 21
75763: PUSH
75764: LD_INT 2
75766: ST_TO_ADDR
// hc_name := Dark Warrior ;
75767: LD_ADDR_OWVAR 26
75771: PUSH
75772: LD_STRING Dark Warrior
75774: ST_TO_ADDR
// hc_gallery :=  ;
75775: LD_ADDR_OWVAR 33
75779: PUSH
75780: LD_STRING 
75782: ST_TO_ADDR
// hc_noskilllimit := true ;
75783: LD_ADDR_OWVAR 76
75787: PUSH
75788: LD_INT 1
75790: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75791: LD_ADDR_OWVAR 31
75795: PUSH
75796: LD_INT 30
75798: PUSH
75799: LD_INT 30
75801: PUSH
75802: LD_INT 30
75804: PUSH
75805: LD_INT 30
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: ST_TO_ADDR
// un := CreateHuman ;
75814: LD_ADDR_VAR 0 3
75818: PUSH
75819: CALL_OW 44
75823: ST_TO_ADDR
// hc_noskilllimit := false ;
75824: LD_ADDR_OWVAR 76
75828: PUSH
75829: LD_INT 0
75831: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75832: LD_VAR 0 3
75836: PPUSH
75837: LD_INT 1
75839: PPUSH
75840: CALL_OW 51
// ToLua ( playRanger() ) ;
75844: LD_STRING playRanger()
75846: PPUSH
75847: CALL_OW 559
// p := 0 ;
75851: LD_ADDR_VAR 0 2
75855: PUSH
75856: LD_INT 0
75858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75859: LD_INT 35
75861: PPUSH
75862: CALL_OW 67
// p := p + 1 ;
75866: LD_ADDR_VAR 0 2
75870: PUSH
75871: LD_VAR 0 2
75875: PUSH
75876: LD_INT 1
75878: PLUS
75879: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75880: LD_VAR 0 3
75884: PPUSH
75885: CALL_OW 256
75889: PUSH
75890: LD_INT 1000
75892: LESS
75893: IFFALSE 75907
// SetLives ( un , 1000 ) ;
75895: LD_VAR 0 3
75899: PPUSH
75900: LD_INT 1000
75902: PPUSH
75903: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75907: LD_VAR 0 3
75911: PPUSH
75912: LD_INT 81
75914: PUSH
75915: LD_OWVAR 2
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 91
75926: PUSH
75927: LD_VAR 0 3
75931: PUSH
75932: LD_INT 30
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: LIST
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PPUSH
75944: CALL_OW 69
75948: PPUSH
75949: LD_VAR 0 3
75953: PPUSH
75954: CALL_OW 74
75958: PPUSH
75959: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
75963: LD_VAR 0 2
75967: PUSH
75968: LD_INT 80
75970: GREATER
75971: PUSH
75972: LD_VAR 0 3
75976: PPUSH
75977: CALL_OW 301
75981: OR
75982: IFFALSE 75859
// if un then
75984: LD_VAR 0 3
75988: IFFALSE 75999
// RemoveUnit ( un ) ;
75990: LD_VAR 0 3
75994: PPUSH
75995: CALL_OW 64
// end ;
75999: PPOPN 3
76001: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76002: LD_EXP 101
76006: IFFALSE 76122
76008: GO 76010
76010: DISABLE
76011: LD_INT 0
76013: PPUSH
76014: PPUSH
76015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76016: LD_ADDR_VAR 0 2
76020: PUSH
76021: LD_INT 81
76023: PUSH
76024: LD_OWVAR 2
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: LD_INT 21
76035: PUSH
76036: LD_INT 1
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PPUSH
76047: CALL_OW 69
76051: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76052: LD_STRING playComputer()
76054: PPUSH
76055: CALL_OW 559
// if not tmp then
76059: LD_VAR 0 2
76063: NOT
76064: IFFALSE 76068
// exit ;
76066: GO 76122
// for i in tmp do
76068: LD_ADDR_VAR 0 1
76072: PUSH
76073: LD_VAR 0 2
76077: PUSH
76078: FOR_IN
76079: IFFALSE 76120
// for j := 1 to 4 do
76081: LD_ADDR_VAR 0 3
76085: PUSH
76086: DOUBLE
76087: LD_INT 1
76089: DEC
76090: ST_TO_ADDR
76091: LD_INT 4
76093: PUSH
76094: FOR_TO
76095: IFFALSE 76116
// SetSkill ( i , j , 10 ) ;
76097: LD_VAR 0 1
76101: PPUSH
76102: LD_VAR 0 3
76106: PPUSH
76107: LD_INT 10
76109: PPUSH
76110: CALL_OW 237
76114: GO 76094
76116: POP
76117: POP
76118: GO 76078
76120: POP
76121: POP
// end ;
76122: PPOPN 3
76124: END
// every 0 0$1 trigger s30 do var i , tmp ;
76125: LD_EXP 102
76129: IFFALSE 76198
76131: GO 76133
76133: DISABLE
76134: LD_INT 0
76136: PPUSH
76137: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76138: LD_ADDR_VAR 0 2
76142: PUSH
76143: LD_INT 22
76145: PUSH
76146: LD_OWVAR 2
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PPUSH
76155: CALL_OW 69
76159: ST_TO_ADDR
// if not tmp then
76160: LD_VAR 0 2
76164: NOT
76165: IFFALSE 76169
// exit ;
76167: GO 76198
// for i in tmp do
76169: LD_ADDR_VAR 0 1
76173: PUSH
76174: LD_VAR 0 2
76178: PUSH
76179: FOR_IN
76180: IFFALSE 76196
// SetLives ( i , 300 ) ;
76182: LD_VAR 0 1
76186: PPUSH
76187: LD_INT 300
76189: PPUSH
76190: CALL_OW 234
76194: GO 76179
76196: POP
76197: POP
// end ;
76198: PPOPN 2
76200: END
// every 0 0$1 trigger s60 do var i , tmp ;
76201: LD_EXP 103
76205: IFFALSE 76274
76207: GO 76209
76209: DISABLE
76210: LD_INT 0
76212: PPUSH
76213: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76214: LD_ADDR_VAR 0 2
76218: PUSH
76219: LD_INT 22
76221: PUSH
76222: LD_OWVAR 2
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PPUSH
76231: CALL_OW 69
76235: ST_TO_ADDR
// if not tmp then
76236: LD_VAR 0 2
76240: NOT
76241: IFFALSE 76245
// exit ;
76243: GO 76274
// for i in tmp do
76245: LD_ADDR_VAR 0 1
76249: PUSH
76250: LD_VAR 0 2
76254: PUSH
76255: FOR_IN
76256: IFFALSE 76272
// SetLives ( i , 600 ) ;
76258: LD_VAR 0 1
76262: PPUSH
76263: LD_INT 600
76265: PPUSH
76266: CALL_OW 234
76270: GO 76255
76272: POP
76273: POP
// end ;
76274: PPOPN 2
76276: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76277: LD_INT 0
76279: PPUSH
// case cmd of 301 :
76280: LD_VAR 0 1
76284: PUSH
76285: LD_INT 301
76287: DOUBLE
76288: EQUAL
76289: IFTRUE 76293
76291: GO 76325
76293: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76294: LD_VAR 0 6
76298: PPUSH
76299: LD_VAR 0 7
76303: PPUSH
76304: LD_VAR 0 8
76308: PPUSH
76309: LD_VAR 0 4
76313: PPUSH
76314: LD_VAR 0 5
76318: PPUSH
76319: CALL 77534 0 5
76323: GO 76446
76325: LD_INT 302
76327: DOUBLE
76328: EQUAL
76329: IFTRUE 76333
76331: GO 76370
76333: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76334: LD_VAR 0 6
76338: PPUSH
76339: LD_VAR 0 7
76343: PPUSH
76344: LD_VAR 0 8
76348: PPUSH
76349: LD_VAR 0 9
76353: PPUSH
76354: LD_VAR 0 4
76358: PPUSH
76359: LD_VAR 0 5
76363: PPUSH
76364: CALL 77625 0 6
76368: GO 76446
76370: LD_INT 303
76372: DOUBLE
76373: EQUAL
76374: IFTRUE 76378
76376: GO 76415
76378: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76379: LD_VAR 0 6
76383: PPUSH
76384: LD_VAR 0 7
76388: PPUSH
76389: LD_VAR 0 8
76393: PPUSH
76394: LD_VAR 0 9
76398: PPUSH
76399: LD_VAR 0 4
76403: PPUSH
76404: LD_VAR 0 5
76408: PPUSH
76409: CALL 76451 0 6
76413: GO 76446
76415: LD_INT 304
76417: DOUBLE
76418: EQUAL
76419: IFTRUE 76423
76421: GO 76445
76423: POP
// hHackTeleport ( unit , x , y ) ; end ;
76424: LD_VAR 0 2
76428: PPUSH
76429: LD_VAR 0 4
76433: PPUSH
76434: LD_VAR 0 5
76438: PPUSH
76439: CALL 78218 0 3
76443: GO 76446
76445: POP
// end ;
76446: LD_VAR 0 12
76450: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76451: LD_INT 0
76453: PPUSH
76454: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76455: LD_VAR 0 1
76459: PUSH
76460: LD_INT 1
76462: LESS
76463: PUSH
76464: LD_VAR 0 1
76468: PUSH
76469: LD_INT 3
76471: GREATER
76472: OR
76473: PUSH
76474: LD_VAR 0 5
76478: PPUSH
76479: LD_VAR 0 6
76483: PPUSH
76484: CALL_OW 428
76488: OR
76489: IFFALSE 76493
// exit ;
76491: GO 77221
// uc_side := your_side ;
76493: LD_ADDR_OWVAR 20
76497: PUSH
76498: LD_OWVAR 2
76502: ST_TO_ADDR
// uc_nation := nation ;
76503: LD_ADDR_OWVAR 21
76507: PUSH
76508: LD_VAR 0 1
76512: ST_TO_ADDR
// bc_level = 1 ;
76513: LD_ADDR_OWVAR 43
76517: PUSH
76518: LD_INT 1
76520: ST_TO_ADDR
// case btype of 1 :
76521: LD_VAR 0 2
76525: PUSH
76526: LD_INT 1
76528: DOUBLE
76529: EQUAL
76530: IFTRUE 76534
76532: GO 76545
76534: POP
// bc_type := b_depot ; 2 :
76535: LD_ADDR_OWVAR 42
76539: PUSH
76540: LD_INT 0
76542: ST_TO_ADDR
76543: GO 77165
76545: LD_INT 2
76547: DOUBLE
76548: EQUAL
76549: IFTRUE 76553
76551: GO 76564
76553: POP
// bc_type := b_warehouse ; 3 :
76554: LD_ADDR_OWVAR 42
76558: PUSH
76559: LD_INT 1
76561: ST_TO_ADDR
76562: GO 77165
76564: LD_INT 3
76566: DOUBLE
76567: EQUAL
76568: IFTRUE 76572
76570: GO 76583
76572: POP
// bc_type := b_lab ; 4 .. 9 :
76573: LD_ADDR_OWVAR 42
76577: PUSH
76578: LD_INT 6
76580: ST_TO_ADDR
76581: GO 77165
76583: LD_INT 4
76585: DOUBLE
76586: GREATEREQUAL
76587: IFFALSE 76595
76589: LD_INT 9
76591: DOUBLE
76592: LESSEQUAL
76593: IFTRUE 76597
76595: GO 76657
76597: POP
// begin bc_type := b_lab_half ;
76598: LD_ADDR_OWVAR 42
76602: PUSH
76603: LD_INT 7
76605: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76606: LD_ADDR_OWVAR 44
76610: PUSH
76611: LD_INT 10
76613: PUSH
76614: LD_INT 11
76616: PUSH
76617: LD_INT 12
76619: PUSH
76620: LD_INT 15
76622: PUSH
76623: LD_INT 14
76625: PUSH
76626: LD_INT 13
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: LD_VAR 0 2
76641: PUSH
76642: LD_INT 3
76644: MINUS
76645: ARRAY
76646: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76647: LD_ADDR_OWVAR 45
76651: PUSH
76652: LD_INT 9
76654: ST_TO_ADDR
// end ; 10 .. 13 :
76655: GO 77165
76657: LD_INT 10
76659: DOUBLE
76660: GREATEREQUAL
76661: IFFALSE 76669
76663: LD_INT 13
76665: DOUBLE
76666: LESSEQUAL
76667: IFTRUE 76671
76669: GO 76748
76671: POP
// begin bc_type := b_lab_full ;
76672: LD_ADDR_OWVAR 42
76676: PUSH
76677: LD_INT 8
76679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76680: LD_ADDR_OWVAR 44
76684: PUSH
76685: LD_INT 10
76687: PUSH
76688: LD_INT 12
76690: PUSH
76691: LD_INT 14
76693: PUSH
76694: LD_INT 13
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: PUSH
76703: LD_VAR 0 2
76707: PUSH
76708: LD_INT 9
76710: MINUS
76711: ARRAY
76712: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76713: LD_ADDR_OWVAR 45
76717: PUSH
76718: LD_INT 11
76720: PUSH
76721: LD_INT 15
76723: PUSH
76724: LD_INT 12
76726: PUSH
76727: LD_INT 15
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: PUSH
76736: LD_VAR 0 2
76740: PUSH
76741: LD_INT 9
76743: MINUS
76744: ARRAY
76745: ST_TO_ADDR
// end ; 14 :
76746: GO 77165
76748: LD_INT 14
76750: DOUBLE
76751: EQUAL
76752: IFTRUE 76756
76754: GO 76767
76756: POP
// bc_type := b_workshop ; 15 :
76757: LD_ADDR_OWVAR 42
76761: PUSH
76762: LD_INT 2
76764: ST_TO_ADDR
76765: GO 77165
76767: LD_INT 15
76769: DOUBLE
76770: EQUAL
76771: IFTRUE 76775
76773: GO 76786
76775: POP
// bc_type := b_factory ; 16 :
76776: LD_ADDR_OWVAR 42
76780: PUSH
76781: LD_INT 3
76783: ST_TO_ADDR
76784: GO 77165
76786: LD_INT 16
76788: DOUBLE
76789: EQUAL
76790: IFTRUE 76794
76792: GO 76805
76794: POP
// bc_type := b_ext_gun ; 17 :
76795: LD_ADDR_OWVAR 42
76799: PUSH
76800: LD_INT 17
76802: ST_TO_ADDR
76803: GO 77165
76805: LD_INT 17
76807: DOUBLE
76808: EQUAL
76809: IFTRUE 76813
76811: GO 76841
76813: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76814: LD_ADDR_OWVAR 42
76818: PUSH
76819: LD_INT 19
76821: PUSH
76822: LD_INT 23
76824: PUSH
76825: LD_INT 19
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: LIST
76832: PUSH
76833: LD_VAR 0 1
76837: ARRAY
76838: ST_TO_ADDR
76839: GO 77165
76841: LD_INT 18
76843: DOUBLE
76844: EQUAL
76845: IFTRUE 76849
76847: GO 76860
76849: POP
// bc_type := b_ext_radar ; 19 :
76850: LD_ADDR_OWVAR 42
76854: PUSH
76855: LD_INT 20
76857: ST_TO_ADDR
76858: GO 77165
76860: LD_INT 19
76862: DOUBLE
76863: EQUAL
76864: IFTRUE 76868
76866: GO 76879
76868: POP
// bc_type := b_ext_radio ; 20 :
76869: LD_ADDR_OWVAR 42
76873: PUSH
76874: LD_INT 22
76876: ST_TO_ADDR
76877: GO 77165
76879: LD_INT 20
76881: DOUBLE
76882: EQUAL
76883: IFTRUE 76887
76885: GO 76898
76887: POP
// bc_type := b_ext_siberium ; 21 :
76888: LD_ADDR_OWVAR 42
76892: PUSH
76893: LD_INT 21
76895: ST_TO_ADDR
76896: GO 77165
76898: LD_INT 21
76900: DOUBLE
76901: EQUAL
76902: IFTRUE 76906
76904: GO 76917
76906: POP
// bc_type := b_ext_computer ; 22 :
76907: LD_ADDR_OWVAR 42
76911: PUSH
76912: LD_INT 24
76914: ST_TO_ADDR
76915: GO 77165
76917: LD_INT 22
76919: DOUBLE
76920: EQUAL
76921: IFTRUE 76925
76923: GO 76936
76925: POP
// bc_type := b_ext_track ; 23 :
76926: LD_ADDR_OWVAR 42
76930: PUSH
76931: LD_INT 16
76933: ST_TO_ADDR
76934: GO 77165
76936: LD_INT 23
76938: DOUBLE
76939: EQUAL
76940: IFTRUE 76944
76942: GO 76955
76944: POP
// bc_type := b_ext_laser ; 24 :
76945: LD_ADDR_OWVAR 42
76949: PUSH
76950: LD_INT 25
76952: ST_TO_ADDR
76953: GO 77165
76955: LD_INT 24
76957: DOUBLE
76958: EQUAL
76959: IFTRUE 76963
76961: GO 76974
76963: POP
// bc_type := b_control_tower ; 25 :
76964: LD_ADDR_OWVAR 42
76968: PUSH
76969: LD_INT 36
76971: ST_TO_ADDR
76972: GO 77165
76974: LD_INT 25
76976: DOUBLE
76977: EQUAL
76978: IFTRUE 76982
76980: GO 76993
76982: POP
// bc_type := b_breastwork ; 26 :
76983: LD_ADDR_OWVAR 42
76987: PUSH
76988: LD_INT 31
76990: ST_TO_ADDR
76991: GO 77165
76993: LD_INT 26
76995: DOUBLE
76996: EQUAL
76997: IFTRUE 77001
76999: GO 77012
77001: POP
// bc_type := b_bunker ; 27 :
77002: LD_ADDR_OWVAR 42
77006: PUSH
77007: LD_INT 32
77009: ST_TO_ADDR
77010: GO 77165
77012: LD_INT 27
77014: DOUBLE
77015: EQUAL
77016: IFTRUE 77020
77018: GO 77031
77020: POP
// bc_type := b_turret ; 28 :
77021: LD_ADDR_OWVAR 42
77025: PUSH
77026: LD_INT 33
77028: ST_TO_ADDR
77029: GO 77165
77031: LD_INT 28
77033: DOUBLE
77034: EQUAL
77035: IFTRUE 77039
77037: GO 77050
77039: POP
// bc_type := b_armoury ; 29 :
77040: LD_ADDR_OWVAR 42
77044: PUSH
77045: LD_INT 4
77047: ST_TO_ADDR
77048: GO 77165
77050: LD_INT 29
77052: DOUBLE
77053: EQUAL
77054: IFTRUE 77058
77056: GO 77069
77058: POP
// bc_type := b_barracks ; 30 :
77059: LD_ADDR_OWVAR 42
77063: PUSH
77064: LD_INT 5
77066: ST_TO_ADDR
77067: GO 77165
77069: LD_INT 30
77071: DOUBLE
77072: EQUAL
77073: IFTRUE 77077
77075: GO 77088
77077: POP
// bc_type := b_solar_power ; 31 :
77078: LD_ADDR_OWVAR 42
77082: PUSH
77083: LD_INT 27
77085: ST_TO_ADDR
77086: GO 77165
77088: LD_INT 31
77090: DOUBLE
77091: EQUAL
77092: IFTRUE 77096
77094: GO 77107
77096: POP
// bc_type := b_oil_power ; 32 :
77097: LD_ADDR_OWVAR 42
77101: PUSH
77102: LD_INT 26
77104: ST_TO_ADDR
77105: GO 77165
77107: LD_INT 32
77109: DOUBLE
77110: EQUAL
77111: IFTRUE 77115
77113: GO 77126
77115: POP
// bc_type := b_siberite_power ; 33 :
77116: LD_ADDR_OWVAR 42
77120: PUSH
77121: LD_INT 28
77123: ST_TO_ADDR
77124: GO 77165
77126: LD_INT 33
77128: DOUBLE
77129: EQUAL
77130: IFTRUE 77134
77132: GO 77145
77134: POP
// bc_type := b_oil_mine ; 34 :
77135: LD_ADDR_OWVAR 42
77139: PUSH
77140: LD_INT 29
77142: ST_TO_ADDR
77143: GO 77165
77145: LD_INT 34
77147: DOUBLE
77148: EQUAL
77149: IFTRUE 77153
77151: GO 77164
77153: POP
// bc_type := b_siberite_mine ; end ;
77154: LD_ADDR_OWVAR 42
77158: PUSH
77159: LD_INT 30
77161: ST_TO_ADDR
77162: GO 77165
77164: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77165: LD_ADDR_VAR 0 8
77169: PUSH
77170: LD_VAR 0 5
77174: PPUSH
77175: LD_VAR 0 6
77179: PPUSH
77180: LD_VAR 0 3
77184: PPUSH
77185: CALL_OW 47
77189: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77190: LD_OWVAR 42
77194: PUSH
77195: LD_INT 32
77197: PUSH
77198: LD_INT 33
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: IN
77205: IFFALSE 77221
// PlaceWeaponTurret ( b , weapon ) ;
77207: LD_VAR 0 8
77211: PPUSH
77212: LD_VAR 0 4
77216: PPUSH
77217: CALL_OW 431
// end ;
77221: LD_VAR 0 7
77225: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77226: LD_INT 0
77228: PPUSH
77229: PPUSH
77230: PPUSH
77231: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77232: LD_ADDR_VAR 0 4
77236: PUSH
77237: LD_INT 22
77239: PUSH
77240: LD_OWVAR 2
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 2
77251: PUSH
77252: LD_INT 30
77254: PUSH
77255: LD_INT 0
77257: PUSH
77258: EMPTY
77259: LIST
77260: LIST
77261: PUSH
77262: LD_INT 30
77264: PUSH
77265: LD_INT 1
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: LIST
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: PPUSH
77281: CALL_OW 69
77285: ST_TO_ADDR
// if not tmp then
77286: LD_VAR 0 4
77290: NOT
77291: IFFALSE 77295
// exit ;
77293: GO 77354
// for i in tmp do
77295: LD_ADDR_VAR 0 2
77299: PUSH
77300: LD_VAR 0 4
77304: PUSH
77305: FOR_IN
77306: IFFALSE 77352
// for j = 1 to 3 do
77308: LD_ADDR_VAR 0 3
77312: PUSH
77313: DOUBLE
77314: LD_INT 1
77316: DEC
77317: ST_TO_ADDR
77318: LD_INT 3
77320: PUSH
77321: FOR_TO
77322: IFFALSE 77348
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77324: LD_VAR 0 2
77328: PPUSH
77329: CALL_OW 274
77333: PPUSH
77334: LD_VAR 0 3
77338: PPUSH
77339: LD_INT 99999
77341: PPUSH
77342: CALL_OW 277
77346: GO 77321
77348: POP
77349: POP
77350: GO 77305
77352: POP
77353: POP
// end ;
77354: LD_VAR 0 1
77358: RET
// export function hHackSetLevel10 ; var i , j ; begin
77359: LD_INT 0
77361: PPUSH
77362: PPUSH
77363: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77364: LD_ADDR_VAR 0 2
77368: PUSH
77369: LD_INT 21
77371: PUSH
77372: LD_INT 1
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PPUSH
77379: CALL_OW 69
77383: PUSH
77384: FOR_IN
77385: IFFALSE 77437
// if IsSelected ( i ) then
77387: LD_VAR 0 2
77391: PPUSH
77392: CALL_OW 306
77396: IFFALSE 77435
// begin for j := 1 to 4 do
77398: LD_ADDR_VAR 0 3
77402: PUSH
77403: DOUBLE
77404: LD_INT 1
77406: DEC
77407: ST_TO_ADDR
77408: LD_INT 4
77410: PUSH
77411: FOR_TO
77412: IFFALSE 77433
// SetSkill ( i , j , 10 ) ;
77414: LD_VAR 0 2
77418: PPUSH
77419: LD_VAR 0 3
77423: PPUSH
77424: LD_INT 10
77426: PPUSH
77427: CALL_OW 237
77431: GO 77411
77433: POP
77434: POP
// end ;
77435: GO 77384
77437: POP
77438: POP
// end ;
77439: LD_VAR 0 1
77443: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77444: LD_INT 0
77446: PPUSH
77447: PPUSH
77448: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77449: LD_ADDR_VAR 0 2
77453: PUSH
77454: LD_INT 22
77456: PUSH
77457: LD_OWVAR 2
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: PUSH
77466: LD_INT 21
77468: PUSH
77469: LD_INT 1
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: PPUSH
77480: CALL_OW 69
77484: PUSH
77485: FOR_IN
77486: IFFALSE 77527
// begin for j := 1 to 4 do
77488: LD_ADDR_VAR 0 3
77492: PUSH
77493: DOUBLE
77494: LD_INT 1
77496: DEC
77497: ST_TO_ADDR
77498: LD_INT 4
77500: PUSH
77501: FOR_TO
77502: IFFALSE 77523
// SetSkill ( i , j , 10 ) ;
77504: LD_VAR 0 2
77508: PPUSH
77509: LD_VAR 0 3
77513: PPUSH
77514: LD_INT 10
77516: PPUSH
77517: CALL_OW 237
77521: GO 77501
77523: POP
77524: POP
// end ;
77525: GO 77485
77527: POP
77528: POP
// end ;
77529: LD_VAR 0 1
77533: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77534: LD_INT 0
77536: PPUSH
// uc_side := your_side ;
77537: LD_ADDR_OWVAR 20
77541: PUSH
77542: LD_OWVAR 2
77546: ST_TO_ADDR
// uc_nation := nation ;
77547: LD_ADDR_OWVAR 21
77551: PUSH
77552: LD_VAR 0 1
77556: ST_TO_ADDR
// InitHc ;
77557: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77561: LD_INT 0
77563: PPUSH
77564: LD_VAR 0 2
77568: PPUSH
77569: LD_VAR 0 3
77573: PPUSH
77574: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77578: LD_VAR 0 4
77582: PPUSH
77583: LD_VAR 0 5
77587: PPUSH
77588: CALL_OW 428
77592: PUSH
77593: LD_INT 0
77595: EQUAL
77596: IFFALSE 77620
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77598: CALL_OW 44
77602: PPUSH
77603: LD_VAR 0 4
77607: PPUSH
77608: LD_VAR 0 5
77612: PPUSH
77613: LD_INT 1
77615: PPUSH
77616: CALL_OW 48
// end ;
77620: LD_VAR 0 6
77624: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77625: LD_INT 0
77627: PPUSH
77628: PPUSH
// uc_side := your_side ;
77629: LD_ADDR_OWVAR 20
77633: PUSH
77634: LD_OWVAR 2
77638: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77639: LD_VAR 0 1
77643: PUSH
77644: LD_INT 1
77646: PUSH
77647: LD_INT 2
77649: PUSH
77650: LD_INT 3
77652: PUSH
77653: LD_INT 4
77655: PUSH
77656: LD_INT 5
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: IN
77666: IFFALSE 77678
// uc_nation := nation_american else
77668: LD_ADDR_OWVAR 21
77672: PUSH
77673: LD_INT 1
77675: ST_TO_ADDR
77676: GO 77721
// if chassis in [ 11 , 12 , 13 , 14 ] then
77678: LD_VAR 0 1
77682: PUSH
77683: LD_INT 11
77685: PUSH
77686: LD_INT 12
77688: PUSH
77689: LD_INT 13
77691: PUSH
77692: LD_INT 14
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: IN
77701: IFFALSE 77713
// uc_nation := nation_arabian else
77703: LD_ADDR_OWVAR 21
77707: PUSH
77708: LD_INT 2
77710: ST_TO_ADDR
77711: GO 77721
// uc_nation := nation_russian ;
77713: LD_ADDR_OWVAR 21
77717: PUSH
77718: LD_INT 3
77720: ST_TO_ADDR
// vc_chassis := chassis ;
77721: LD_ADDR_OWVAR 37
77725: PUSH
77726: LD_VAR 0 1
77730: ST_TO_ADDR
// vc_engine := engine ;
77731: LD_ADDR_OWVAR 39
77735: PUSH
77736: LD_VAR 0 2
77740: ST_TO_ADDR
// vc_control := control ;
77741: LD_ADDR_OWVAR 38
77745: PUSH
77746: LD_VAR 0 3
77750: ST_TO_ADDR
// vc_weapon := weapon ;
77751: LD_ADDR_OWVAR 40
77755: PUSH
77756: LD_VAR 0 4
77760: ST_TO_ADDR
// un := CreateVehicle ;
77761: LD_ADDR_VAR 0 8
77765: PUSH
77766: CALL_OW 45
77770: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77771: LD_VAR 0 8
77775: PPUSH
77776: LD_INT 0
77778: PPUSH
77779: LD_INT 5
77781: PPUSH
77782: CALL_OW 12
77786: PPUSH
77787: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77791: LD_VAR 0 8
77795: PPUSH
77796: LD_VAR 0 5
77800: PPUSH
77801: LD_VAR 0 6
77805: PPUSH
77806: LD_INT 1
77808: PPUSH
77809: CALL_OW 48
// end ;
77813: LD_VAR 0 7
77817: RET
// export hInvincible ; every 1 do
77818: GO 77820
77820: DISABLE
// hInvincible := [ ] ;
77821: LD_ADDR_EXP 104
77825: PUSH
77826: EMPTY
77827: ST_TO_ADDR
77828: END
// every 10 do var i ;
77829: GO 77831
77831: DISABLE
77832: LD_INT 0
77834: PPUSH
// begin enable ;
77835: ENABLE
// if not hInvincible then
77836: LD_EXP 104
77840: NOT
77841: IFFALSE 77845
// exit ;
77843: GO 77889
// for i in hInvincible do
77845: LD_ADDR_VAR 0 1
77849: PUSH
77850: LD_EXP 104
77854: PUSH
77855: FOR_IN
77856: IFFALSE 77887
// if GetLives ( i ) < 1000 then
77858: LD_VAR 0 1
77862: PPUSH
77863: CALL_OW 256
77867: PUSH
77868: LD_INT 1000
77870: LESS
77871: IFFALSE 77885
// SetLives ( i , 1000 ) ;
77873: LD_VAR 0 1
77877: PPUSH
77878: LD_INT 1000
77880: PPUSH
77881: CALL_OW 234
77885: GO 77855
77887: POP
77888: POP
// end ;
77889: PPOPN 1
77891: END
// export function hHackInvincible ; var i ; begin
77892: LD_INT 0
77894: PPUSH
77895: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77896: LD_ADDR_VAR 0 2
77900: PUSH
77901: LD_INT 2
77903: PUSH
77904: LD_INT 21
77906: PUSH
77907: LD_INT 1
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: PUSH
77914: LD_INT 21
77916: PUSH
77917: LD_INT 2
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: LIST
77928: PPUSH
77929: CALL_OW 69
77933: PUSH
77934: FOR_IN
77935: IFFALSE 77996
// if IsSelected ( i ) then
77937: LD_VAR 0 2
77941: PPUSH
77942: CALL_OW 306
77946: IFFALSE 77994
// begin if i in hInvincible then
77948: LD_VAR 0 2
77952: PUSH
77953: LD_EXP 104
77957: IN
77958: IFFALSE 77978
// hInvincible := hInvincible diff i else
77960: LD_ADDR_EXP 104
77964: PUSH
77965: LD_EXP 104
77969: PUSH
77970: LD_VAR 0 2
77974: DIFF
77975: ST_TO_ADDR
77976: GO 77994
// hInvincible := hInvincible union i ;
77978: LD_ADDR_EXP 104
77982: PUSH
77983: LD_EXP 104
77987: PUSH
77988: LD_VAR 0 2
77992: UNION
77993: ST_TO_ADDR
// end ;
77994: GO 77934
77996: POP
77997: POP
// end ;
77998: LD_VAR 0 1
78002: RET
// export function hHackInvisible ; var i , j ; begin
78003: LD_INT 0
78005: PPUSH
78006: PPUSH
78007: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78008: LD_ADDR_VAR 0 2
78012: PUSH
78013: LD_INT 21
78015: PUSH
78016: LD_INT 1
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PPUSH
78023: CALL_OW 69
78027: PUSH
78028: FOR_IN
78029: IFFALSE 78053
// if IsSelected ( i ) then
78031: LD_VAR 0 2
78035: PPUSH
78036: CALL_OW 306
78040: IFFALSE 78051
// ComForceInvisible ( i ) ;
78042: LD_VAR 0 2
78046: PPUSH
78047: CALL_OW 496
78051: GO 78028
78053: POP
78054: POP
// end ;
78055: LD_VAR 0 1
78059: RET
// export function hHackChangeYourSide ; begin
78060: LD_INT 0
78062: PPUSH
// if your_side = 8 then
78063: LD_OWVAR 2
78067: PUSH
78068: LD_INT 8
78070: EQUAL
78071: IFFALSE 78083
// your_side := 0 else
78073: LD_ADDR_OWVAR 2
78077: PUSH
78078: LD_INT 0
78080: ST_TO_ADDR
78081: GO 78097
// your_side := your_side + 1 ;
78083: LD_ADDR_OWVAR 2
78087: PUSH
78088: LD_OWVAR 2
78092: PUSH
78093: LD_INT 1
78095: PLUS
78096: ST_TO_ADDR
// end ;
78097: LD_VAR 0 1
78101: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78102: LD_INT 0
78104: PPUSH
78105: PPUSH
78106: PPUSH
// for i in all_units do
78107: LD_ADDR_VAR 0 2
78111: PUSH
78112: LD_OWVAR 3
78116: PUSH
78117: FOR_IN
78118: IFFALSE 78196
// if IsSelected ( i ) then
78120: LD_VAR 0 2
78124: PPUSH
78125: CALL_OW 306
78129: IFFALSE 78194
// begin j := GetSide ( i ) ;
78131: LD_ADDR_VAR 0 3
78135: PUSH
78136: LD_VAR 0 2
78140: PPUSH
78141: CALL_OW 255
78145: ST_TO_ADDR
// if j = 8 then
78146: LD_VAR 0 3
78150: PUSH
78151: LD_INT 8
78153: EQUAL
78154: IFFALSE 78166
// j := 0 else
78156: LD_ADDR_VAR 0 3
78160: PUSH
78161: LD_INT 0
78163: ST_TO_ADDR
78164: GO 78180
// j := j + 1 ;
78166: LD_ADDR_VAR 0 3
78170: PUSH
78171: LD_VAR 0 3
78175: PUSH
78176: LD_INT 1
78178: PLUS
78179: ST_TO_ADDR
// SetSide ( i , j ) ;
78180: LD_VAR 0 2
78184: PPUSH
78185: LD_VAR 0 3
78189: PPUSH
78190: CALL_OW 235
// end ;
78194: GO 78117
78196: POP
78197: POP
// end ;
78198: LD_VAR 0 1
78202: RET
// export function hHackFog ; begin
78203: LD_INT 0
78205: PPUSH
// FogOff ( true ) ;
78206: LD_INT 1
78208: PPUSH
78209: CALL_OW 344
// end ;
78213: LD_VAR 0 1
78217: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78218: LD_INT 0
78220: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78221: LD_VAR 0 1
78225: PPUSH
78226: LD_VAR 0 2
78230: PPUSH
78231: LD_VAR 0 3
78235: PPUSH
78236: LD_INT 1
78238: PPUSH
78239: LD_INT 1
78241: PPUSH
78242: CALL_OW 483
// CenterOnXY ( x , y ) ;
78246: LD_VAR 0 2
78250: PPUSH
78251: LD_VAR 0 3
78255: PPUSH
78256: CALL_OW 84
// end ;
78260: LD_VAR 0 4
78264: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78265: LD_INT 0
78267: PPUSH
78268: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78269: LD_VAR 0 1
78273: NOT
78274: PUSH
78275: LD_VAR 0 2
78279: PPUSH
78280: LD_VAR 0 3
78284: PPUSH
78285: CALL_OW 488
78289: NOT
78290: OR
78291: PUSH
78292: LD_VAR 0 1
78296: PPUSH
78297: CALL_OW 266
78301: PUSH
78302: LD_INT 3
78304: NONEQUAL
78305: PUSH
78306: LD_VAR 0 1
78310: PPUSH
78311: CALL_OW 247
78315: PUSH
78316: LD_INT 1
78318: EQUAL
78319: NOT
78320: AND
78321: OR
78322: IFFALSE 78326
// exit ;
78324: GO 78475
// if GetType ( factory ) = unit_human then
78326: LD_VAR 0 1
78330: PPUSH
78331: CALL_OW 247
78335: PUSH
78336: LD_INT 1
78338: EQUAL
78339: IFFALSE 78356
// factory := IsInUnit ( factory ) ;
78341: LD_ADDR_VAR 0 1
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: CALL_OW 310
78355: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78356: LD_VAR 0 1
78360: PPUSH
78361: CALL_OW 266
78365: PUSH
78366: LD_INT 3
78368: NONEQUAL
78369: IFFALSE 78373
// exit ;
78371: GO 78475
// if HexInfo ( x , y ) = factory then
78373: LD_VAR 0 2
78377: PPUSH
78378: LD_VAR 0 3
78382: PPUSH
78383: CALL_OW 428
78387: PUSH
78388: LD_VAR 0 1
78392: EQUAL
78393: IFFALSE 78420
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
78395: LD_ADDR_EXP 105
78399: PUSH
78400: LD_EXP 105
78404: PPUSH
78405: LD_VAR 0 1
78409: PPUSH
78410: LD_INT 0
78412: PPUSH
78413: CALL_OW 1
78417: ST_TO_ADDR
78418: GO 78471
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
78420: LD_ADDR_EXP 105
78424: PUSH
78425: LD_EXP 105
78429: PPUSH
78430: LD_VAR 0 1
78434: PPUSH
78435: LD_VAR 0 1
78439: PPUSH
78440: CALL_OW 255
78444: PUSH
78445: LD_VAR 0 1
78449: PUSH
78450: LD_VAR 0 2
78454: PUSH
78455: LD_VAR 0 3
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: LIST
78464: LIST
78465: PPUSH
78466: CALL_OW 1
78470: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78471: CALL 78480 0 0
// end ;
78475: LD_VAR 0 4
78479: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78480: LD_INT 0
78482: PPUSH
78483: PPUSH
78484: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78485: LD_STRING resetFactoryWaypoint();
78487: PPUSH
78488: CALL_OW 559
// if factoryWaypoints then
78492: LD_EXP 105
78496: IFFALSE 78622
// begin list := PrepareArray ( factoryWaypoints ) ;
78498: LD_ADDR_VAR 0 3
78502: PUSH
78503: LD_EXP 105
78507: PPUSH
78508: CALL 57945 0 1
78512: ST_TO_ADDR
// for i := 1 to list do
78513: LD_ADDR_VAR 0 2
78517: PUSH
78518: DOUBLE
78519: LD_INT 1
78521: DEC
78522: ST_TO_ADDR
78523: LD_VAR 0 3
78527: PUSH
78528: FOR_TO
78529: IFFALSE 78620
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78531: LD_STRING setFactoryWaypointXY(
78533: PUSH
78534: LD_VAR 0 3
78538: PUSH
78539: LD_VAR 0 2
78543: ARRAY
78544: PUSH
78545: LD_INT 1
78547: ARRAY
78548: STR
78549: PUSH
78550: LD_STRING ,
78552: STR
78553: PUSH
78554: LD_VAR 0 3
78558: PUSH
78559: LD_VAR 0 2
78563: ARRAY
78564: PUSH
78565: LD_INT 2
78567: ARRAY
78568: STR
78569: PUSH
78570: LD_STRING ,
78572: STR
78573: PUSH
78574: LD_VAR 0 3
78578: PUSH
78579: LD_VAR 0 2
78583: ARRAY
78584: PUSH
78585: LD_INT 3
78587: ARRAY
78588: STR
78589: PUSH
78590: LD_STRING ,
78592: STR
78593: PUSH
78594: LD_VAR 0 3
78598: PUSH
78599: LD_VAR 0 2
78603: ARRAY
78604: PUSH
78605: LD_INT 4
78607: ARRAY
78608: STR
78609: PUSH
78610: LD_STRING )
78612: STR
78613: PPUSH
78614: CALL_OW 559
78618: GO 78528
78620: POP
78621: POP
// end ; end ;
78622: LD_VAR 0 1
78626: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
78627: LD_INT 0
78629: PPUSH
// if HexInfo ( x , y ) = warehouse then
78630: LD_VAR 0 2
78634: PPUSH
78635: LD_VAR 0 3
78639: PPUSH
78640: CALL_OW 428
78644: PUSH
78645: LD_VAR 0 1
78649: EQUAL
78650: IFFALSE 78677
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78652: LD_ADDR_EXP 106
78656: PUSH
78657: LD_EXP 106
78661: PPUSH
78662: LD_VAR 0 1
78666: PPUSH
78667: LD_INT 0
78669: PPUSH
78670: CALL_OW 1
78674: ST_TO_ADDR
78675: GO 78728
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78677: LD_ADDR_EXP 106
78681: PUSH
78682: LD_EXP 106
78686: PPUSH
78687: LD_VAR 0 1
78691: PPUSH
78692: LD_VAR 0 1
78696: PPUSH
78697: CALL_OW 255
78701: PUSH
78702: LD_VAR 0 1
78706: PUSH
78707: LD_VAR 0 2
78711: PUSH
78712: LD_VAR 0 3
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: LIST
78721: LIST
78722: PPUSH
78723: CALL_OW 1
78727: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78728: CALL 78737 0 0
// end ;
78732: LD_VAR 0 4
78736: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78737: LD_INT 0
78739: PPUSH
78740: PPUSH
78741: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78742: LD_STRING resetWarehouseGatheringPoints();
78744: PPUSH
78745: CALL_OW 559
// if warehouseGatheringPoints then
78749: LD_EXP 106
78753: IFFALSE 78879
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78755: LD_ADDR_VAR 0 3
78759: PUSH
78760: LD_EXP 106
78764: PPUSH
78765: CALL 57945 0 1
78769: ST_TO_ADDR
// for i := 1 to list do
78770: LD_ADDR_VAR 0 2
78774: PUSH
78775: DOUBLE
78776: LD_INT 1
78778: DEC
78779: ST_TO_ADDR
78780: LD_VAR 0 3
78784: PUSH
78785: FOR_TO
78786: IFFALSE 78877
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78788: LD_STRING setWarehouseGatheringPointXY(
78790: PUSH
78791: LD_VAR 0 3
78795: PUSH
78796: LD_VAR 0 2
78800: ARRAY
78801: PUSH
78802: LD_INT 1
78804: ARRAY
78805: STR
78806: PUSH
78807: LD_STRING ,
78809: STR
78810: PUSH
78811: LD_VAR 0 3
78815: PUSH
78816: LD_VAR 0 2
78820: ARRAY
78821: PUSH
78822: LD_INT 2
78824: ARRAY
78825: STR
78826: PUSH
78827: LD_STRING ,
78829: STR
78830: PUSH
78831: LD_VAR 0 3
78835: PUSH
78836: LD_VAR 0 2
78840: ARRAY
78841: PUSH
78842: LD_INT 3
78844: ARRAY
78845: STR
78846: PUSH
78847: LD_STRING ,
78849: STR
78850: PUSH
78851: LD_VAR 0 3
78855: PUSH
78856: LD_VAR 0 2
78860: ARRAY
78861: PUSH
78862: LD_INT 4
78864: ARRAY
78865: STR
78866: PUSH
78867: LD_STRING )
78869: STR
78870: PPUSH
78871: CALL_OW 559
78875: GO 78785
78877: POP
78878: POP
// end ; end ;
78879: LD_VAR 0 1
78883: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
78884: LD_EXP 106
78888: IFFALSE 79573
78890: GO 78892
78892: DISABLE
78893: LD_INT 0
78895: PPUSH
78896: PPUSH
78897: PPUSH
78898: PPUSH
78899: PPUSH
78900: PPUSH
78901: PPUSH
78902: PPUSH
78903: PPUSH
// begin enable ;
78904: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
78905: LD_ADDR_VAR 0 3
78909: PUSH
78910: LD_EXP 106
78914: PPUSH
78915: CALL 57945 0 1
78919: ST_TO_ADDR
// if not list then
78920: LD_VAR 0 3
78924: NOT
78925: IFFALSE 78929
// exit ;
78927: GO 79573
// for i := 1 to list do
78929: LD_ADDR_VAR 0 1
78933: PUSH
78934: DOUBLE
78935: LD_INT 1
78937: DEC
78938: ST_TO_ADDR
78939: LD_VAR 0 3
78943: PUSH
78944: FOR_TO
78945: IFFALSE 79571
// begin depot := list [ i ] [ 2 ] ;
78947: LD_ADDR_VAR 0 8
78951: PUSH
78952: LD_VAR 0 3
78956: PUSH
78957: LD_VAR 0 1
78961: ARRAY
78962: PUSH
78963: LD_INT 2
78965: ARRAY
78966: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
78967: LD_ADDR_VAR 0 5
78971: PUSH
78972: LD_VAR 0 3
78976: PUSH
78977: LD_VAR 0 1
78981: ARRAY
78982: PUSH
78983: LD_INT 1
78985: ARRAY
78986: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
78987: LD_VAR 0 8
78991: PPUSH
78992: CALL_OW 301
78996: PUSH
78997: LD_VAR 0 5
79001: PUSH
79002: LD_VAR 0 8
79006: PPUSH
79007: CALL_OW 255
79011: NONEQUAL
79012: OR
79013: IFFALSE 79042
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79015: LD_ADDR_EXP 106
79019: PUSH
79020: LD_EXP 106
79024: PPUSH
79025: LD_VAR 0 8
79029: PPUSH
79030: LD_INT 0
79032: PPUSH
79033: CALL_OW 1
79037: ST_TO_ADDR
// exit ;
79038: POP
79039: POP
79040: GO 79573
// end ; x := list [ i ] [ 3 ] ;
79042: LD_ADDR_VAR 0 6
79046: PUSH
79047: LD_VAR 0 3
79051: PUSH
79052: LD_VAR 0 1
79056: ARRAY
79057: PUSH
79058: LD_INT 3
79060: ARRAY
79061: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79062: LD_ADDR_VAR 0 7
79066: PUSH
79067: LD_VAR 0 3
79071: PUSH
79072: LD_VAR 0 1
79076: ARRAY
79077: PUSH
79078: LD_INT 4
79080: ARRAY
79081: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79082: LD_ADDR_VAR 0 9
79086: PUSH
79087: LD_VAR 0 6
79091: PPUSH
79092: LD_VAR 0 7
79096: PPUSH
79097: LD_INT 16
79099: PPUSH
79100: CALL 56533 0 3
79104: ST_TO_ADDR
// if not cratesNearbyPoint then
79105: LD_VAR 0 9
79109: NOT
79110: IFFALSE 79116
// exit ;
79112: POP
79113: POP
79114: GO 79573
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79116: LD_ADDR_VAR 0 4
79120: PUSH
79121: LD_INT 22
79123: PUSH
79124: LD_VAR 0 5
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: PUSH
79133: LD_INT 3
79135: PUSH
79136: LD_INT 60
79138: PUSH
79139: EMPTY
79140: LIST
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: PUSH
79146: LD_INT 91
79148: PUSH
79149: LD_VAR 0 8
79153: PUSH
79154: LD_INT 6
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 2
79164: PUSH
79165: LD_INT 25
79167: PUSH
79168: LD_INT 2
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PUSH
79175: LD_INT 25
79177: PUSH
79178: LD_INT 16
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: LIST
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: PPUSH
79196: CALL_OW 69
79200: PUSH
79201: LD_VAR 0 8
79205: PPUSH
79206: CALL_OW 313
79210: PPUSH
79211: LD_INT 3
79213: PUSH
79214: LD_INT 60
79216: PUSH
79217: EMPTY
79218: LIST
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 2
79226: PUSH
79227: LD_INT 25
79229: PUSH
79230: LD_INT 2
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: PUSH
79237: LD_INT 25
79239: PUSH
79240: LD_INT 16
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: LIST
79251: PUSH
79252: EMPTY
79253: LIST
79254: LIST
79255: PPUSH
79256: CALL_OW 72
79260: UNION
79261: ST_TO_ADDR
// if tmp then
79262: LD_VAR 0 4
79266: IFFALSE 79346
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79268: LD_ADDR_VAR 0 4
79272: PUSH
79273: LD_VAR 0 4
79277: PPUSH
79278: LD_INT 3
79280: PPUSH
79281: CALL 54502 0 2
79285: ST_TO_ADDR
// for j in tmp do
79286: LD_ADDR_VAR 0 2
79290: PUSH
79291: LD_VAR 0 4
79295: PUSH
79296: FOR_IN
79297: IFFALSE 79340
// begin if IsInUnit ( j ) then
79299: LD_VAR 0 2
79303: PPUSH
79304: CALL_OW 310
79308: IFFALSE 79319
// ComExit ( j ) ;
79310: LD_VAR 0 2
79314: PPUSH
79315: CALL 54585 0 1
// AddComCollect ( j , x , y ) ;
79319: LD_VAR 0 2
79323: PPUSH
79324: LD_VAR 0 6
79328: PPUSH
79329: LD_VAR 0 7
79333: PPUSH
79334: CALL_OW 177
// end ;
79338: GO 79296
79340: POP
79341: POP
// exit ;
79342: POP
79343: POP
79344: GO 79573
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79346: LD_ADDR_VAR 0 4
79350: PUSH
79351: LD_INT 22
79353: PUSH
79354: LD_VAR 0 5
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: PUSH
79363: LD_INT 91
79365: PUSH
79366: LD_VAR 0 8
79370: PUSH
79371: LD_INT 8
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: LIST
79378: PUSH
79379: LD_INT 2
79381: PUSH
79382: LD_INT 34
79384: PUSH
79385: LD_INT 12
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: PUSH
79392: LD_INT 34
79394: PUSH
79395: LD_INT 51
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PUSH
79402: LD_INT 34
79404: PUSH
79405: LD_INT 32
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: LD_INT 34
79414: PUSH
79415: LD_INT 89
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PUSH
79422: EMPTY
79423: LIST
79424: LIST
79425: LIST
79426: LIST
79427: LIST
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: LIST
79433: PPUSH
79434: CALL_OW 69
79438: ST_TO_ADDR
// if tmp then
79439: LD_VAR 0 4
79443: IFFALSE 79569
// begin for j in tmp do
79445: LD_ADDR_VAR 0 2
79449: PUSH
79450: LD_VAR 0 4
79454: PUSH
79455: FOR_IN
79456: IFFALSE 79567
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79458: LD_VAR 0 2
79462: PPUSH
79463: CALL_OW 262
79467: PUSH
79468: LD_INT 3
79470: EQUAL
79471: PUSH
79472: LD_VAR 0 2
79476: PPUSH
79477: CALL_OW 261
79481: PUSH
79482: LD_INT 20
79484: GREATER
79485: OR
79486: PUSH
79487: LD_VAR 0 2
79491: PPUSH
79492: CALL_OW 314
79496: NOT
79497: AND
79498: PUSH
79499: LD_VAR 0 2
79503: PPUSH
79504: CALL_OW 263
79508: PUSH
79509: LD_INT 1
79511: NONEQUAL
79512: PUSH
79513: LD_VAR 0 2
79517: PPUSH
79518: CALL_OW 311
79522: OR
79523: AND
79524: IFFALSE 79565
// begin ComCollect ( j , x , y ) ;
79526: LD_VAR 0 2
79530: PPUSH
79531: LD_VAR 0 6
79535: PPUSH
79536: LD_VAR 0 7
79540: PPUSH
79541: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79545: LD_VAR 0 2
79549: PPUSH
79550: LD_VAR 0 8
79554: PPUSH
79555: CALL_OW 172
// exit ;
79559: POP
79560: POP
79561: POP
79562: POP
79563: GO 79573
// end ;
79565: GO 79455
79567: POP
79568: POP
// end ; end ;
79569: GO 78944
79571: POP
79572: POP
// end ; end_of_file
79573: PPOPN 9
79575: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79576: LD_VAR 0 1
79580: PPUSH
79581: LD_VAR 0 2
79585: PPUSH
79586: LD_VAR 0 3
79590: PPUSH
79591: LD_VAR 0 4
79595: PPUSH
79596: LD_VAR 0 5
79600: PPUSH
79601: LD_VAR 0 6
79605: PPUSH
79606: CALL 63929 0 6
// end ;
79610: PPOPN 6
79612: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79613: LD_INT 0
79615: PPUSH
// begin if not units then
79616: LD_VAR 0 1
79620: NOT
79621: IFFALSE 79625
// exit ;
79623: GO 79625
// end ;
79625: PPOPN 7
79627: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79628: CALL 63833 0 0
// end ; end_of_file
79632: PPOPN 1
79634: END
