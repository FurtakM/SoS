// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2534 0 0
// PrepareArabian ;
  32: CALL 1165 0 0
// Action ;
  36: CALL 8255 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: IFTRUE 800
 793: PUSH
 794: LD_VAR 0 2
 798: NOT
 799: OR
 800: IFFALSE 804
// exit ;
 802: GO 852
// if not See ( GetSide ( observer ) , unit ) then
 804: LD_VAR 0 1
 808: PPUSH
 809: CALL_OW 255
 813: PPUSH
 814: LD_VAR 0 2
 818: PPUSH
 819: CALL_OW 292
 823: NOT
 824: IFFALSE 828
// exit ;
 826: GO 852
// result := GetDistUnits ( observer , unit ) < 12 ;
 828: LD_ADDR_VAR 0 3
 832: PUSH
 833: LD_VAR 0 1
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 296
 847: PUSH
 848: LD_INT 12
 850: LESS
 851: ST_TO_ADDR
// end ;
 852: LD_VAR 0 3
 856: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 857: LD_INT 0
 859: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: CALL_OW 488
 882: IFFALSE 912
 884: PUSH
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: CALL_OW 428
 907: PUSH
 908: LD_INT 0
 910: EQUAL
 911: AND
 912: IFFALSE 946
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 3
 941: PPUSH
 942: CALL_OW 48
// end ;
 946: LD_VAR 0 4
 950: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 951: LD_INT 0
 953: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_VAR 0 4
 973: PPUSH
 974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 978: LD_VAR 0 1
 982: PPUSH
 983: LD_VAR 0 2
 987: PPUSH
 988: LD_VAR 0 3
 992: PPUSH
 993: CALL_OW 331
// end ;
 997: LD_VAR 0 5
1001: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1002: LD_INT 0
1004: PPUSH
// if not units then
1005: LD_VAR 0 1
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1097
// result := true ;
1014: LD_ADDR_VAR 0 4
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PPUSH
1051: CALL_OW 88
1055: NOT
1056: IFFALSE 1097
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 2
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: LD_VAR 0 3
1091: PPUSH
1092: CALL_OW 88
1096: ST_TO_ADDR
// end ;
1097: LD_VAR 0 4
1101: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
// if not group then
1106: LD_VAR 0 2
1110: NOT
1111: IFFALSE 1115
// exit ;
1113: GO 1160
// for i in group do
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_VAR 0 2
1124: PUSH
1125: FOR_IN
1126: IFFALSE 1158
// if See ( side , i ) then
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 4
1137: PPUSH
1138: CALL_OW 292
1142: IFFALSE 1156
// begin result := true ;
1144: LD_ADDR_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// exit ;
1152: POP
1153: POP
1154: GO 1160
// end ;
1156: GO 1125
1158: POP
1159: POP
// end ; end_of_file
1160: LD_VAR 0 3
1164: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: LD_STRING 05_DrugsTested
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 30
1189: ST_TO_ADDR
// if hasDrugs then
1190: LD_VAR 0 5
1194: IFFALSE 1209
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1196: LD_INT 5
1198: PPUSH
1199: LD_INT 2
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 322
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// uc_side := 5 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1225: LD_ADDR_EXP 23
1229: PUSH
1230: LD_STRING Abdul
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: LD_STRING 
1238: PPUSH
1239: CALL 16684 0 3
1243: ST_TO_ADDR
// uc_side := 2 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1252: LD_ADDR_EXP 15
1256: PUSH
1257: LD_STRING Heike
1259: PPUSH
1260: LD_EXP 1
1264: NOT
1265: PPUSH
1266: LD_EXP 2
1270: PPUSH
1271: CALL 16684 0 3
1275: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1276: LD_ADDR_EXP 18
1280: PUSH
1281: LD_STRING Ibrahim
1283: PPUSH
1284: LD_EXP 1
1288: NOT
1289: PPUSH
1290: LD_EXP 2
1294: PPUSH
1295: CALL 16684 0 3
1299: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1300: LD_ADDR_EXP 16
1304: PUSH
1305: LD_STRING Givi
1307: PPUSH
1308: LD_EXP 1
1312: NOT
1313: PPUSH
1314: LD_EXP 2
1318: PPUSH
1319: CALL 16684 0 3
1323: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 19
1328: PUSH
1329: LD_STRING Kamil
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 16684 0 3
1347: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 20
1352: PUSH
1353: LD_STRING Kaia
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 16684 0 3
1371: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 21
1376: PUSH
1377: LD_STRING Sophia
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 16684 0 3
1395: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 22
1400: PUSH
1401: LD_STRING Markov
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 16684 0 3
1419: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 26
1424: PUSH
1425: LD_STRING Aviradze
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 16684 0 3
1443: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 25
1448: PUSH
1449: LD_STRING Kurt
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 16684 0 3
1467: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 17
1472: PUSH
1473: LD_STRING Mike
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 16684 0 3
1491: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 24
1496: PUSH
1497: LD_STRING Olaf
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 16684 0 3
1515: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1516: LD_ADDR_EXP 27
1520: PUSH
1521: LD_STRING 06_others
1523: PPUSH
1524: CALL_OW 31
1528: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1529: LD_ADDR_EXP 28
1533: PUSH
1534: LD_STRING 06_apes
1536: PPUSH
1537: CALL_OW 31
1541: ST_TO_ADDR
// if debug then
1542: LD_EXP 1
1546: IFFALSE 1819
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1548: LD_ADDR_VAR 0 3
1552: PUSH
1553: LD_INT 14
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: LD_INT 25
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 1000
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 14
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: LD_INT 2
1597: PUSH
1598: LD_INT 1000
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 14
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 27
1624: PUSH
1625: LD_INT 2
1627: PUSH
1628: LD_INT 750
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 14
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: LD_INT 27
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 900
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 14
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: LD_INT 2
1687: PUSH
1688: LD_INT 1000
1690: PUSH
1691: LD_INT 100
1693: PUSH
1694: LD_INT 0
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 14
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 50
1730: PUSH
1731: LD_INT 50
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 14
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 27
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: LD_INT 1000
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 14
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: LD_INT 1
1785: PUSH
1786: LD_INT 92
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 1000
1794: PUSH
1795: LD_INT 0
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1826
// tmp := [ ] ;
1819: LD_ADDR_VAR 0 3
1823: PUSH
1824: EMPTY
1825: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1826: LD_ADDR_EXP 29
1830: PUSH
1831: LD_STRING 06_Vehicles
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: CALL_OW 30
1843: ST_TO_ADDR
// counter := 0 ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 0
1851: ST_TO_ADDR
// if heikeVehicles then
1852: LD_EXP 29
1856: IFFALSE 1978
// begin for i := heikeVehicles downto 1 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_EXP 29
1868: INC
1869: ST_TO_ADDR
1870: LD_INT 1
1872: PUSH
1873: FOR_DOWNTO
1874: IFFALSE 1976
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1876: LD_EXP 29
1880: PUSH
1881: LD_VAR 0 2
1885: ARRAY
1886: PUSH
1887: LD_INT 3
1889: ARRAY
1890: PUSH
1891: LD_INT 2
1893: EQUAL
1894: IFFALSE 1974
// begin if counter < remoteControlLimit then
1896: LD_VAR 0 4
1900: PUSH
1901: LD_EXP 12
1905: LESS
1906: IFFALSE 1954
// begin counter := Inc ( counter ) ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: LD_VAR 0 4
1917: PPUSH
1918: CALL 56189 0 1
1922: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1923: LD_ADDR_EXP 29
1927: PUSH
1928: LD_EXP 29
1932: PPUSH
1933: LD_EXP 29
1937: PPUSH
1938: LD_EXP 29
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: CALL_OW 2
1953: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1954: LD_ADDR_EXP 29
1958: PUSH
1959: LD_EXP 29
1963: PPUSH
1964: LD_VAR 0 2
1968: PPUSH
1969: CALL_OW 3
1973: ST_TO_ADDR
// end ; end ;
1974: GO 1873
1976: POP
1977: POP
// end ; end ;
1978: LD_VAR 0 1
1982: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1983: LD_EXP 3
1987: IFFALSE 2531
1989: GO 1991
1991: DISABLE
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_INT 96
2003: PUSH
2004: LD_INT 50
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 49
2013: PUSH
2014: LD_INT 52
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 34
2023: PUSH
2024: LD_INT 55
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 41
2033: PUSH
2034: LD_INT 70
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 53
2043: PUSH
2044: LD_INT 96
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 103
2053: PUSH
2054: LD_INT 64
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 104
2071: PUSH
2072: LD_INT 70
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 111
2081: PUSH
2082: LD_INT 103
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 131
2091: PUSH
2092: LD_INT 147
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 130
2101: PUSH
2102: LD_INT 153
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 110
2111: PUSH
2112: LD_INT 93
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 103
2121: PUSH
2122: LD_INT 65
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// for i in tmp [ 1 ] do
2141: LD_ADDR_VAR 0 1
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 1
2153: ARRAY
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2208
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2158: LD_EXP 17
2162: PPUSH
2163: LD_VAR 0 1
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 1
2176: PUSH
2177: LD_INT 2
2179: ARRAY
2180: PPUSH
2181: CALL_OW 174
// AddComHold ( Mike ) ;
2185: LD_EXP 17
2189: PPUSH
2190: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2194: LD_EXP 17
2198: PPUSH
2199: LD_INT 175
2201: PPUSH
2202: CALL_OW 202
// end ;
2206: GO 2155
2208: POP
2209: POP
// for i in tmp [ 2 ] do
2210: LD_ADDR_VAR 0 1
2214: PUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_INT 2
2222: ARRAY
2223: PUSH
2224: FOR_IN
2225: IFFALSE 2277
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2227: LD_EXP 25
2231: PPUSH
2232: LD_VAR 0 1
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: LD_VAR 0 1
2245: PUSH
2246: LD_INT 2
2248: ARRAY
2249: PPUSH
2250: CALL_OW 174
// AddComHold ( Kurt ) ;
2254: LD_EXP 25
2258: PPUSH
2259: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2263: LD_EXP 25
2267: PPUSH
2268: LD_INT 175
2270: PPUSH
2271: CALL_OW 202
// end ;
2275: GO 2224
2277: POP
2278: POP
// wait ( 2 2$00 ) ;
2279: LD_INT 4200
2281: PPUSH
2282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2286: LD_INT 35
2288: PPUSH
2289: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2293: LD_EXP 17
2297: PPUSH
2298: CALL_OW 314
2302: NOT
2303: IFTRUE 2316
2305: PUSH
2306: LD_EXP 17
2310: PPUSH
2311: CALL_OW 301
2315: OR
2316: IFFALSE 2343
2318: PUSH
2319: LD_EXP 25
2323: PPUSH
2324: CALL_OW 314
2328: NOT
2329: IFTRUE 2342
2331: PUSH
2332: LD_EXP 25
2336: PPUSH
2337: CALL_OW 301
2341: OR
2342: AND
2343: IFFALSE 2286
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2345: LD_EXP 25
2349: PPUSH
2350: CALL_OW 301
2354: IFFALSE 2367
2356: PUSH
2357: LD_EXP 17
2361: PPUSH
2362: CALL_OW 301
2366: AND
2367: IFFALSE 2379
// begin scoutFailed := true ;
2369: LD_ADDR_EXP 4
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// exit ;
2377: GO 2531
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2379: LD_EXP 25
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: LD_INT 132
2395: PPUSH
2396: LD_INT 52
2398: PPUSH
2399: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2403: LD_EXP 25
2407: PUSH
2408: LD_EXP 17
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: LD_INT 22
2419: PUSH
2420: LD_INT 2
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2440: LD_INT 35
2442: PPUSH
2443: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 25
2454: PPUSH
2455: CALL_OW 292
2459: IFTRUE 2475
2461: PUSH
2462: LD_INT 2
2464: PPUSH
2465: LD_EXP 17
2469: PPUSH
2470: CALL_OW 292
2474: OR
2475: IFFALSE 2440
// if IsLive ( Kurt ) then
2477: LD_EXP 25
2481: PPUSH
2482: CALL_OW 300
2486: IFFALSE 2500
// SetSide ( Kurt , 2 ) ;
2488: LD_EXP 25
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: CALL_OW 235
// if IsLive ( Mike ) then
2500: LD_EXP 17
2504: PPUSH
2505: CALL_OW 300
2509: IFFALSE 2523
// SetSide ( Mike , 2 ) ;
2511: LD_EXP 17
2515: PPUSH
2516: LD_INT 2
2518: PPUSH
2519: CALL_OW 235
// scoutSuccess := true ;
2523: LD_ADDR_EXP 5
2527: PUSH
2528: LD_INT 1
2530: ST_TO_ADDR
// end ; end_of_file
2531: PPOPN 2
2533: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
// uc_side := 1 ;
2540: LD_ADDR_OWVAR 20
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// uc_nation := 1 ;
2548: LD_ADDR_OWVAR 21
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 1500
2569: PUSH
2570: LD_INT 2200
2572: PUSH
2573: LD_INT 3500
2575: PUSH
2576: LD_INT 3900
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2595: LD_INT 1
2597: PPUSH
2598: CALL_OW 274
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 800
2608: PPUSH
2609: CALL_OW 277
// usForces := [ ] ;
2613: LD_ADDR_EXP 31
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usToBuild := [ ] ;
2620: LD_ADDR_EXP 33
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2627: LD_ADDR_EXP 34
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// usCratesCollector := [ ] ;
2634: LD_ADDR_EXP 35
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// for i := 1 to 3 do
2641: LD_ADDR_VAR 0 2
2645: PUSH
2646: DOUBLE
2647: LD_INT 1
2649: DEC
2650: ST_TO_ADDR
2651: LD_INT 3
2653: PUSH
2654: FOR_TO
2655: IFFALSE 2709
// begin PrepareApemanEngineer ( ) ;
2657: CALL 50841 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2661: LD_ADDR_EXP 35
2665: PUSH
2666: LD_EXP 35
2670: PPUSH
2671: CALL_OW 44
2675: PPUSH
2676: CALL 54816 0 2
2680: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2681: LD_EXP 35
2685: PPUSH
2686: CALL 59643 0 1
2690: PPUSH
2691: LD_INT 81
2693: PPUSH
2694: LD_INT 142
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 50
// end ;
2707: GO 2654
2709: POP
2710: POP
// InitHc ;
2711: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: LD_INT 21
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2773
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2738: LD_VAR 0 2
2742: PPUSH
2743: LD_INT 6
2745: PUSH
2746: LD_INT 7
2748: PUSH
2749: LD_INT 8
2751: PUSH
2752: LD_INT 8
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_OWVAR 67
2765: ARRAY
2766: PPUSH
2767: CALL_OW 241
2771: GO 2735
2773: POP
2774: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 32
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 69
2794: PUSH
2795: FOR_IN
2796: IFFALSE 2886
// begin if GetBWeapon ( i ) = us_radar then
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 269
2807: PUSH
2808: LD_INT 11
2810: EQUAL
2811: IFFALSE 2836
// begin uc_nation := 0 ;
2813: LD_ADDR_OWVAR 21
2817: PUSH
2818: LD_INT 0
2820: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 16
2826: PPUSH
2827: LD_INT 2
2829: PPUSH
2830: CALL_OW 380
// end else
2834: GO 2870
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2836: LD_INT 0
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 5
2844: PUSH
2845: LD_INT 6
2847: PUSH
2848: LD_INT 7
2850: PUSH
2851: LD_INT 8
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PPUSH
2866: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2870: CALL_OW 44
2874: PPUSH
2875: LD_VAR 0 2
2879: PPUSH
2880: CALL_OW 52
// end ;
2884: GO 2795
2886: POP
2887: POP
// b := HexInfo ( 74 , 120 ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_INT 74
2895: PPUSH
2896: LD_INT 120
2898: PPUSH
2899: CALL_OW 428
2903: ST_TO_ADDR
// uc_nation := 1 ;
2904: LD_ADDR_OWVAR 21
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: DOUBLE
2918: LD_INT 1
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 1
2924: PUSH
2925: LD_INT 2
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 4
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: LD_OWVAR 67
2944: ARRAY
2945: PUSH
2946: FOR_TO
2947: IFFALSE 2999
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 5
2957: PUSH
2958: LD_INT 6
2960: PUSH
2961: LD_INT 7
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PPUSH
2979: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2946
2999: POP
3000: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
3001: LD_VAR 0 3
3005: PPUSH
3006: CALL_OW 313
3010: PPUSH
3011: LD_INT 5
3013: PPUSH
3014: CALL_OW 336
// for i := 1 to 6 do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 6
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3082
// begin PrepareHuman ( false , 4 , 6 ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_INT 6
3042: PPUSH
3043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3047: CALL_OW 44
3051: PPUSH
3052: LD_INT 32
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_VAR 0 2
3066: PUSH
3067: LD_INT 2
3069: MOD
3070: PUSH
3071: LD_INT 1
3073: PLUS
3074: ARRAY
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: GO 3031
3082: POP
3083: POP
// for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3127
// begin PrepareHuman ( false , 3 , 6 ) ;
3100: LD_INT 0
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3113: CALL_OW 44
3117: PPUSH
3118: LD_INT 25
3120: PPUSH
3121: CALL_OW 52
// end ;
3125: GO 3097
3127: POP
3128: POP
// for i := 1 to 3 do
3129: LD_ADDR_VAR 0 2
3133: PUSH
3134: DOUBLE
3135: LD_INT 1
3137: DEC
3138: ST_TO_ADDR
3139: LD_INT 3
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3201
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3145: LD_INT 0
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 6
3153: PUSH
3154: LD_INT 7
3156: PUSH
3157: LD_INT 7
3159: PUSH
3160: LD_INT 7
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: PUSH
3169: LD_OWVAR 67
3173: ARRAY
3174: PPUSH
3175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3179: CALL_OW 44
3183: PPUSH
3184: LD_INT 78
3186: PPUSH
3187: LD_INT 130
3189: PPUSH
3190: CALL_OW 428
3194: PPUSH
3195: CALL_OW 52
// end ;
3199: GO 3142
3201: POP
3202: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: DOUBLE
3209: LD_INT 1
3211: DEC
3212: ST_TO_ADDR
3213: LD_INT 1
3215: PUSH
3216: LD_INT 2
3218: PUSH
3219: LD_INT 3
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_OWVAR 67
3235: ARRAY
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3325
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3240: LD_INT 2
3242: PPUSH
3243: LD_INT 2
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 13
3251: PPUSH
3252: LD_INT 100
3254: PPUSH
3255: CALL 21646 0 5
// veh := CreateVehicle ;
3259: LD_ADDR_VAR 0 4
3263: PUSH
3264: CALL_OW 45
3268: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3281: LD_VAR 0 4
3285: PPUSH
3286: LD_INT 9
3288: PPUSH
3289: LD_INT 0
3291: PPUSH
3292: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3296: LD_INT 0
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 6
3304: PPUSH
3305: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3309: CALL_OW 44
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 52
// end ;
3323: GO 3237
3325: POP
3326: POP
// InitHc ;
3327: CALL_OW 19
// hc_gallery := sandar ;
3331: LD_ADDR_OWVAR 33
3335: PUSH
3336: LD_STRING sandar
3338: ST_TO_ADDR
// hc_face_number := 38 ;
3339: LD_ADDR_OWVAR 34
3343: PUSH
3344: LD_INT 38
3346: ST_TO_ADDR
// hc_name := Doug Callahan ;
3347: LD_ADDR_OWVAR 26
3351: PUSH
3352: LD_STRING Doug Callahan
3354: ST_TO_ADDR
// hc_class := class_engineer ;
3355: LD_ADDR_OWVAR 28
3359: PUSH
3360: LD_INT 2
3362: ST_TO_ADDR
// hc_sex := sex_male ;
3363: LD_ADDR_OWVAR 27
3367: PUSH
3368: LD_INT 1
3370: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3371: LD_ADDR_OWVAR 29
3375: PUSH
3376: LD_INT 10
3378: PUSH
3379: LD_INT 11
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3386: LD_ADDR_OWVAR 30
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 1
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3409: LD_ADDR_OWVAR 31
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: ST_TO_ADDR
// usCommander := CreateHuman ;
3432: LD_ADDR_EXP 30
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3442: LD_EXP 30
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3454: LD_INT 2
3456: PPUSH
3457: LD_EXP 30
3461: PPUSH
3462: CALL_OW 471
// InitHC_All ( ) ;
3466: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3470: LD_INT 2
3472: PPUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: LD_INT 12
3481: PPUSH
3482: LD_INT 100
3484: PPUSH
3485: CALL 21646 0 5
// usCargo := CreateVehicle ;
3489: LD_ADDR_EXP 32
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3499: LD_EXP 32
3503: PPUSH
3504: LD_INT 81
3506: PPUSH
3507: LD_INT 143
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL_OW 48
// Connect ( usCargo ) ;
3517: LD_EXP 32
3521: PPUSH
3522: CALL 25128 0 1
// DoNotAttack ( 5 , usCargo ) ;
3526: LD_INT 5
3528: PPUSH
3529: LD_EXP 32
3533: PPUSH
3534: CALL_OW 471
// end ;
3538: LD_VAR 0 1
3542: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3543: LD_EXP 6
3547: IFFALSE 3558
3549: PUSH
3550: LD_INT 25
3552: PPUSH
3553: CALL_OW 302
3557: AND
3558: IFFALSE 3573
3560: PUSH
3561: LD_INT 25
3563: PPUSH
3564: CALL_OW 461
3568: PUSH
3569: LD_INT 2
3571: EQUAL
3572: AND
3573: IFFALSE 3730
3575: GO 3577
3577: DISABLE
3578: LD_INT 0
3580: PPUSH
3581: PPUSH
3582: PPUSH
// begin enable ;
3583: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3584: LD_ADDR_VAR 0 1
3588: PUSH
3589: DOUBLE
3590: LD_INT 1
3592: DEC
3593: ST_TO_ADDR
3594: LD_INT 4
3596: PUSH
3597: LD_INT 5
3599: PUSH
3600: LD_INT 6
3602: PUSH
3603: LD_INT 6
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: LD_OWVAR 67
3616: ARRAY
3617: PUSH
3618: FOR_TO
3619: IFFALSE 3728
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3652: LD_VAR 0 2
3656: PUSH
3657: LD_INT 4
3659: EQUAL
3660: IFFALSE 3672
// weapon := us_heavy_gun else
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: LD_INT 6
3669: ST_TO_ADDR
3670: GO 3703
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: LD_INT 7
3682: PUSH
3683: LD_INT 4
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 3
3696: PPUSH
3697: CALL_OW 12
3701: ARRAY
3702: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3703: LD_INT 25
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_INT 2
3716: PPUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 185
// end ;
3726: GO 3618
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$01 do var i , un , tmp ;
3733: GO 3735
3735: DISABLE
3736: LD_INT 0
3738: PPUSH
3739: PPUSH
3740: PPUSH
// begin if Difficulty < 2 then
3741: LD_OWVAR 67
3745: PUSH
3746: LD_INT 2
3748: LESS
3749: IFFALSE 3753
// exit ;
3751: GO 4036
// tmp := [ ] ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// for i := 1 to Difficulty do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_OWVAR 67
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3872
// begin uc_side := 4 ;
3778: LD_ADDR_OWVAR 20
3782: PUSH
3783: LD_INT 4
3785: ST_TO_ADDR
// uc_nation := nation_american ;
3786: LD_ADDR_OWVAR 21
3790: PUSH
3791: LD_INT 1
3793: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3794: LD_INT 0
3796: PPUSH
3797: LD_INT 3
3799: PUSH
3800: LD_INT 4
3802: PUSH
3803: LD_INT 5
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: LD_OWVAR 67
3819: ARRAY
3820: PPUSH
3821: CALL_OW 381
// un := CreateHuman ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: CALL 54816 0 2
3854: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3855: LD_VAR 0 2
3859: PPUSH
3860: LD_INT 19
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 49
// end ;
3870: GO 3775
3872: POP
3873: POP
// for i in tmp do
3874: LD_ADDR_VAR 0 1
3878: PUSH
3879: LD_VAR 0 3
3883: PUSH
3884: FOR_IN
3885: IFFALSE 3931
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_INT 54
3894: PPUSH
3895: LD_INT 51
3897: PPUSH
3898: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3902: LD_VAR 0 1
3906: PPUSH
3907: LD_INT 700
3909: PPUSH
3910: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 35
3921: PPUSH
3922: LD_INT 6
3924: PPUSH
3925: CALL_OW 174
// end ;
3929: GO 3884
3931: POP
3932: POP
// repeat wait ( 7 7$00 ) ;
3933: LD_INT 14700
3935: PPUSH
3936: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_VAR 0 3
3949: PPUSH
3950: LD_INT 50
3952: PUSH
3953: EMPTY
3954: LIST
3955: PPUSH
3956: CALL_OW 72
3960: ST_TO_ADDR
// if not tmp then
3961: LD_VAR 0 3
3965: NOT
3966: IFFALSE 3970
// exit ;
3968: GO 4036
// for i in tmp do
3970: LD_ADDR_VAR 0 1
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: FOR_IN
3981: IFFALSE 4027
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_INT 54
3990: PPUSH
3991: LD_INT 51
3993: PPUSH
3994: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3998: LD_VAR 0 1
4002: PPUSH
4003: LD_INT 700
4005: PPUSH
4006: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 35
4017: PPUSH
4018: LD_INT 6
4020: PPUSH
4021: CALL_OW 174
// end ;
4025: GO 3980
4027: POP
4028: POP
// until not tmp ;
4029: LD_VAR 0 3
4033: NOT
4034: IFFALSE 3933
// end ;
4036: PPOPN 3
4038: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4039: LD_EXP 31
4043: PUSH
4044: LD_INT 4
4046: PUSH
4047: LD_INT 5
4049: PUSH
4050: LD_INT 6
4052: PUSH
4053: LD_INT 6
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_OWVAR 67
4066: ARRAY
4067: GREATEREQUAL
4068: IFFALSE 4250
4070: GO 4072
4072: DISABLE
4073: LD_INT 0
4075: PPUSH
4076: PPUSH
// begin enable ;
4077: ENABLE
// tmp := usForces ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: LD_EXP 31
4087: ST_TO_ADDR
// usForces := [ ] ;
4088: LD_ADDR_EXP 31
4092: PUSH
4093: EMPTY
4094: ST_TO_ADDR
// if not tmp then
4095: LD_VAR 0 2
4099: NOT
4100: IFFALSE 4104
// exit ;
4102: GO 4250
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4104: LD_INT 22
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 92
4116: PUSH
4117: LD_INT 123
4119: PUSH
4120: LD_INT 141
4122: PUSH
4123: LD_INT 20
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: IFFALSE 4164
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_INT 126
4149: PPUSH
4150: LD_INT 143
4152: PPUSH
4153: CALL_OW 114
// wait ( 0 0$30 ) ;
4157: LD_INT 1050
4159: PPUSH
4160: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4164: LD_INT 35
4166: PPUSH
4167: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: LD_INT 51
4183: PUSH
4184: LD_INT 50
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 98
4193: PUSH
4194: LD_INT 50
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 114
4203: PUSH
4204: LD_INT 50
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 127
4213: PUSH
4214: LD_INT 51
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 131
4223: PUSH
4224: LD_INT 35
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL 57582 0 2
4242: ST_TO_ADDR
// until not tmp ;
4243: LD_VAR 0 2
4247: NOT
4248: IFFALSE 4164
// end ;
4250: PPOPN 2
4252: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4253: LD_EXP 3
4257: IFFALSE 4266
4259: PUSH
4260: LD_EXP 5
4264: NOT
4265: AND
4266: IFFALSE 4287
4268: PUSH
4269: LD_INT 11
4271: PPUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 70
4286: AND
4287: IFFALSE 4408
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
4296: PPUSH
// begin uc_side := 1 ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// uc_nation := 1 ;
4305: LD_ADDR_OWVAR 21
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// tmp := [ ] ;
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: EMPTY
4319: ST_TO_ADDR
// for i := 1 to 2 do
4320: LD_ADDR_VAR 0 1
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 2
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4406
// begin PrepareSoldier ( false , 7 ) ;
4336: LD_INT 0
4338: PPUSH
4339: LD_INT 7
4341: PPUSH
4342: CALL_OW 381
// un := CreateHuman ;
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4356: LD_VAR 0 2
4360: PPUSH
4361: LD_INT 130
4363: PPUSH
4364: LD_INT 153
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_INT 5
4384: PPUSH
4385: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4389: LD_VAR 0 2
4393: PPUSH
4394: LD_INT 108
4396: PPUSH
4397: LD_INT 108
4399: PPUSH
4400: CALL_OW 174
// end ;
4404: GO 4333
4406: POP
4407: POP
// end ;
4408: PPOPN 3
4410: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4411: LD_EXP 3
4415: IFFALSE 4424
4417: PUSH
4418: LD_EXP 5
4422: NOT
4423: AND
4424: IFFALSE 4445
4426: PUSH
4427: LD_INT 10
4429: PPUSH
4430: LD_INT 22
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 70
4444: AND
4445: IFFALSE 4566
4447: GO 4449
4449: DISABLE
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
4454: PPUSH
// begin uc_side := 1 ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// uc_nation := 1 ;
4463: LD_ADDR_OWVAR 21
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// tmp := [ ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: EMPTY
4477: ST_TO_ADDR
// for i := 1 to 2 do
4478: LD_ADDR_VAR 0 1
4482: PUSH
4483: DOUBLE
4484: LD_INT 1
4486: DEC
4487: ST_TO_ADDR
4488: LD_INT 2
4490: PUSH
4491: FOR_TO
4492: IFFALSE 4564
// begin PrepareSoldier ( false , 7 ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 7
4499: PPUSH
4500: CALL_OW 381
// un := CreateHuman ;
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: CALL_OW 44
4513: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4514: LD_VAR 0 2
4518: PPUSH
4519: LD_INT 56
4521: PPUSH
4522: LD_INT 101
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4535: LD_VAR 0 2
4539: PPUSH
4540: LD_INT 5
4542: PPUSH
4543: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4547: LD_VAR 0 2
4551: PPUSH
4552: LD_INT 72
4554: PPUSH
4555: LD_INT 92
4557: PPUSH
4558: CALL_OW 174
// end ;
4562: GO 4491
4564: POP
4565: POP
// end ;
4566: PPOPN 3
4568: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4569: LD_EXP 7
4573: NOT
4574: IFFALSE 4779
4576: GO 4578
4578: DISABLE
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
// begin enable ;
4585: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4586: LD_ADDR_VAR 0 4
4590: PUSH
4591: LD_INT 81
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 92
4603: PUSH
4604: LD_INT 113
4606: PUSH
4607: LD_INT 139
4609: PUSH
4610: LD_INT 15
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PPUSH
4623: CALL_OW 69
4627: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 20
4635: PPUSH
4636: CALL_OW 435
4640: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_EXP 35
4650: PPUSH
4651: LD_INT 50
4653: PUSH
4654: EMPTY
4655: LIST
4656: PPUSH
4657: CALL_OW 72
4661: ST_TO_ADDR
// if not tmp then
4662: LD_VAR 0 2
4666: NOT
4667: IFFALSE 4672
// begin disable ;
4669: DISABLE
// exit ;
4670: GO 4779
// end ; for i in tmp do
4672: LD_ADDR_VAR 0 1
4676: PUSH
4677: LD_VAR 0 2
4681: PUSH
4682: FOR_IN
4683: IFFALSE 4777
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4685: LD_VAR 0 4
4689: IFFALSE 4709
4691: PUSH
4692: LD_VAR 0 1
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 296
4704: PUSH
4705: LD_INT 12
4707: GREATER
4708: AND
4709: IFFALSE 4728
// ComMoveXY ( i , 83 , 147 ) else
4711: LD_VAR 0 1
4715: PPUSH
4716: LD_INT 83
4718: PPUSH
4719: LD_INT 147
4721: PPUSH
4722: CALL_OW 111
4726: GO 4775
// if not HasTask ( i ) and cr then
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL_OW 314
4737: NOT
4738: IFFALSE 4746
4740: PUSH
4741: LD_VAR 0 3
4745: AND
4746: IFFALSE 4775
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_VAR 0 3
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: PPUSH
4771: CALL_OW 117
// end ;
4775: GO 4682
4777: POP
4778: POP
// end ;
4779: PPOPN 4
4781: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4782: LD_EXP 32
4786: PPUSH
4787: CALL_OW 302
4791: IFFALSE 4800
4793: PUSH
4794: LD_EXP 7
4798: NOT
4799: AND
4800: IFFALSE 5071
4802: GO 4804
4804: DISABLE
4805: LD_INT 0
4807: PPUSH
4808: PPUSH
// begin enable ;
4809: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: LD_INT 16
4817: PPUSH
4818: LD_INT 81
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 50
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4843: LD_ADDR_VAR 0 1
4847: PUSH
4848: LD_INT 12
4850: PPUSH
4851: CALL_OW 435
4855: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4856: LD_EXP 32
4860: PPUSH
4861: CALL_OW 261
4865: PUSH
4866: LD_INT 10
4868: LESS
4869: IFFALSE 4886
4871: PUSH
4872: LD_INT 2
4874: PPUSH
4875: LD_EXP 32
4879: PPUSH
4880: CALL_OW 292
4884: NOT
4885: AND
4886: IFFALSE 4900
// SetFuel ( usCargo , 100 ) ;
4888: LD_EXP 32
4892: PPUSH
4893: LD_INT 100
4895: PPUSH
4896: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4900: LD_EXP 32
4904: PPUSH
4905: CALL_OW 314
4909: NOT
4910: IFFALSE 4930
4912: PUSH
4913: LD_EXP 32
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 289
4925: PUSH
4926: LD_INT 100
4928: LESS
4929: AND
4930: IFFALSE 4939
4932: PUSH
4933: LD_VAR 0 2
4937: NOT
4938: AND
4939: IFFALSE 5005
// begin if cr then
4941: LD_VAR 0 1
4945: IFFALSE 4976
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4947: LD_EXP 32
4951: PPUSH
4952: LD_VAR 0 1
4956: PUSH
4957: LD_INT 1
4959: ARRAY
4960: PPUSH
4961: LD_VAR 0 1
4965: PUSH
4966: LD_INT 2
4968: ARRAY
4969: PPUSH
4970: CALL_OW 117
4974: GO 5003
// if not IsInArea ( usCargo , usCratesArea ) then
4976: LD_EXP 32
4980: PPUSH
4981: LD_INT 12
4983: PPUSH
4984: CALL_OW 308
4988: NOT
4989: IFFALSE 5003
// ComMoveToArea ( usCargo , usCratesArea ) ;
4991: LD_EXP 32
4995: PPUSH
4996: LD_INT 12
4998: PPUSH
4999: CALL_OW 113
// exit ;
5003: GO 5071
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
5005: LD_VAR 0 2
5009: IFFALSE 5026
5011: PUSH
5012: LD_EXP 32
5016: PPUSH
5017: LD_INT 16
5019: PPUSH
5020: CALL_OW 308
5024: NOT
5025: AND
5026: IFFALSE 5045
// ComMoveXY ( usCargo , 80 , 143 ) else
5028: LD_EXP 32
5032: PPUSH
5033: LD_INT 80
5035: PPUSH
5036: LD_INT 143
5038: PPUSH
5039: CALL_OW 111
5043: GO 5071
// if GetCargo ( usCargo , mat_cans ) then
5045: LD_EXP 32
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 289
5057: IFFALSE 5071
// ComGive ( usCargo , usDepot ) ;
5059: LD_EXP 32
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 161
// end ;
5071: PPOPN 2
5073: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5074: LD_EXP 7
5078: NOT
5079: IFFALSE 5125
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 1
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 21
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 3
5104: PUSH
5105: LD_INT 50
5107: PUSH
5108: EMPTY
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: AND
5125: IFFALSE 5171
5127: PUSH
5128: LD_INT 22
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 60
5143: PUSH
5144: EMPTY
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 25
5153: PUSH
5154: LD_INT 4
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: AND
5171: IFFALSE 5374
5173: GO 5175
5175: DISABLE
5176: LD_INT 0
5178: PPUSH
5179: PPUSH
// begin enable ;
5180: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5181: LD_ADDR_VAR 0 1
5185: PUSH
5186: LD_INT 22
5188: PUSH
5189: LD_INT 1
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: LD_INT 50
5211: PUSH
5212: EMPTY
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PUSH
5229: FOR_IN
5230: IFFALSE 5372
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 60
5252: PUSH
5253: EMPTY
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 25
5262: PUSH
5263: LD_INT 4
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if not sci then
5280: LD_VAR 0 2
5284: NOT
5285: IFFALSE 5289
// break ;
5287: GO 5372
// sci := sci [ 1 ] ;
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: LD_VAR 0 2
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: ST_TO_ADDR
// if IsInUnit ( sci ) then
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 310
5312: IFFALSE 5325
// ComExit ( sci ) else
5314: LD_VAR 0 2
5318: PPUSH
5319: CALL 55214 0 1
5323: GO 5370
// begin ComHeal ( sci , i ) ;
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 32
5346: PUSH
5347: LD_INT 33
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 1
5356: PPUSH
5357: LD_INT 2
5359: PPUSH
5360: CALL_OW 12
5364: ARRAY
5365: PPUSH
5366: CALL_OW 180
// end ; end ;
5370: GO 5229
5372: POP
5373: POP
// end ;
5374: PPOPN 2
5376: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5377: LD_EXP 7
5381: NOT
5382: IFFALSE 5435
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: LD_INT 60
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 50
5410: PUSH
5411: EMPTY
5412: LIST
5413: PUSH
5414: LD_INT 34
5416: PUSH
5417: LD_INT 13
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: PPUSH
5430: CALL_OW 69
5434: AND
5435: IFFALSE 5503
5437: PUSH
5438: LD_INT 22
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 3
5450: PUSH
5451: LD_INT 24
5453: PUSH
5454: LD_INT 1000
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 21
5467: PUSH
5468: LD_INT 3
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 3
5477: PUSH
5478: LD_INT 30
5480: PUSH
5481: LD_INT 29
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: AND
5503: IFFALSE 5772
5505: GO 5507
5507: DISABLE
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
// begin enable ;
5513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 3
5531: PUSH
5532: LD_INT 24
5534: PUSH
5535: LD_INT 1000
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5584: LD_ADDR_VAR 0 3
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 3
5601: PUSH
5602: LD_INT 24
5604: PUSH
5605: LD_INT 600
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 21
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 29
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 22
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 3
5671: PUSH
5672: LD_INT 60
5674: PUSH
5675: EMPTY
5676: LIST
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 50
5684: PUSH
5685: EMPTY
5686: LIST
5687: PUSH
5688: LD_INT 34
5690: PUSH
5691: LD_INT 13
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5770
// begin if tmp2 then
5712: LD_VAR 0 3
5716: IFFALSE 5744
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 3
5727: PPUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: CALL_OW 74
5737: PPUSH
5738: CALL_OW 130
5742: GO 5768
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: CALL_OW 74
5763: PPUSH
5764: CALL_OW 130
// end ;
5768: GO 5709
5770: POP
5771: POP
// end ;
5772: PPOPN 3
5774: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5775: LD_EXP 7
5779: NOT
5780: IFFALSE 5812
5782: PUSH
5783: LD_INT 16
5785: PPUSH
5786: LD_INT 81
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 70
5810: NOT
5811: AND
5812: IFFALSE 5820
5814: PUSH
5815: LD_EXP 33
5819: AND
5820: IFFALSE 5873
5822: PUSH
5823: LD_INT 22
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 60
5838: PUSH
5839: EMPTY
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 50
5848: PUSH
5849: EMPTY
5850: LIST
5851: PUSH
5852: LD_INT 34
5854: PUSH
5855: LD_INT 13
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: AND
5873: IFFALSE 5985
5875: GO 5877
5877: DISABLE
// begin enable ;
5878: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5879: LD_INT 22
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 60
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 50
5904: PUSH
5905: EMPTY
5906: LIST
5907: PUSH
5908: LD_INT 34
5910: PUSH
5911: LD_INT 13
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PPUSH
5924: CALL_OW 69
5928: PPUSH
5929: LD_EXP 33
5933: PUSH
5934: LD_INT 1
5936: ARRAY
5937: PUSH
5938: LD_INT 1
5940: ARRAY
5941: PPUSH
5942: LD_EXP 33
5946: PUSH
5947: LD_INT 1
5949: ARRAY
5950: PUSH
5951: LD_INT 2
5953: ARRAY
5954: PPUSH
5955: LD_EXP 33
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PUSH
5964: LD_INT 3
5966: ARRAY
5967: PPUSH
5968: LD_EXP 33
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: PUSH
5977: LD_INT 4
5979: ARRAY
5980: PPUSH
5981: CALL_OW 566
// end ;
5985: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5986: LD_INT 22
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 50
5998: PUSH
5999: EMPTY
6000: LIST
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 54
6007: PUSH
6008: EMPTY
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: LD_INT 1
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 25
6030: PUSH
6031: LD_INT 5
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 25
6040: PUSH
6041: LD_INT 16
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 69
6064: IFFALSE 6428
6066: GO 6068
6068: DISABLE
6069: LD_INT 0
6071: PPUSH
6072: PPUSH
6073: PPUSH
6074: PPUSH
// begin enable ;
6075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6076: LD_ADDR_VAR 0 2
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 50
6093: PUSH
6094: EMPTY
6095: LIST
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 54
6102: PUSH
6103: EMPTY
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 2
6112: PUSH
6113: LD_INT 25
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 25
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 25
6135: PUSH
6136: LD_INT 16
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6160: LD_ADDR_VAR 0 3
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_INT 1
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 50
6177: PUSH
6178: EMPTY
6179: LIST
6180: PUSH
6181: LD_INT 21
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 30
6193: PUSH
6194: LD_INT 32
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 58
6203: PUSH
6204: EMPTY
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 50
6236: PUSH
6237: EMPTY
6238: LIST
6239: PUSH
6240: LD_INT 30
6242: PUSH
6243: LD_INT 5
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: ST_TO_ADDR
// if not tmp then
6260: LD_VAR 0 2
6264: NOT
6265: IFFALSE 6269
// exit ;
6267: GO 6428
// for i in tmp do
6269: LD_ADDR_VAR 0 1
6273: PUSH
6274: LD_VAR 0 2
6278: PUSH
6279: FOR_IN
6280: IFFALSE 6426
// begin btmp := FilterByTag ( btmp , 0 ) ;
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_VAR 0 3
6291: PPUSH
6292: LD_INT 0
6294: PPUSH
6295: CALL 52361 0 2
6299: ST_TO_ADDR
// if not btmp then
6300: LD_VAR 0 3
6304: NOT
6305: IFFALSE 6352
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 257
6316: PUSH
6317: LD_INT 16
6319: NONEQUAL
6320: IFFALSE 6328
6322: PUSH
6323: LD_VAR 0 4
6327: AND
6328: IFFALSE 6348
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6330: LD_VAR 0 1
6334: PPUSH
6335: LD_VAR 0 4
6339: PUSH
6340: LD_INT 1
6342: ARRAY
6343: PPUSH
6344: CALL_OW 120
// continue ;
6348: GO 6279
// end else
6350: GO 6424
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6368: LD_VAR 0 1
6372: PPUSH
6373: LD_VAR 0 3
6377: PUSH
6378: LD_INT 1
6380: ARRAY
6381: PPUSH
6382: CALL_OW 120
// wait ( 0 0$9 ) ;
6386: LD_INT 315
6388: PPUSH
6389: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: PPUSH
6402: CALL 18906 0 1
6406: IFFALSE 6424
// SetTag ( btmp [ 1 ] , 0 ) ;
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: LD_INT 0
6419: PPUSH
6420: CALL_OW 109
// end ; end ;
6424: GO 6279
6426: POP
6427: POP
// end ;
6428: PPOPN 4
6430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6431: LD_INT 22
6433: PUSH
6434: LD_INT 1
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 33
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 61
6462: PUSH
6463: EMPTY
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: PPUSH
6476: CALL_OW 69
6480: IFFALSE 6571
6482: GO 6484
6484: DISABLE
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// begin enable ;
6489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_INT 22
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 33
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 50
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: LD_INT 61
6526: PUSH
6527: EMPTY
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: ST_TO_ADDR
// for i in tmp do
6545: LD_ADDR_VAR 0 1
6549: PUSH
6550: LD_VAR 0 2
6554: PUSH
6555: FOR_IN
6556: IFFALSE 6569
// Connect ( i ) ;
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL 25128 0 1
6567: GO 6555
6569: POP
6570: POP
// end ;
6571: PPOPN 2
6573: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6574: LD_EXP 6
6578: IFFALSE 6590
6580: PUSH
6581: LD_OWVAR 67
6585: PUSH
6586: LD_INT 1
6588: GREATER
6589: AND
6590: IFFALSE 7041
6592: GO 6594
6594: DISABLE
6595: LD_INT 0
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6602: LD_INT 31500
6604: PUSH
6605: LD_INT 31500
6607: PUSH
6608: LD_INT 29400
6610: PUSH
6611: LD_INT 27300
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_OWVAR 67
6624: ARRAY
6625: PPUSH
6626: CALL_OW 67
// if usSurrender then
6630: LD_EXP 7
6634: IFFALSE 6638
// exit ;
6636: GO 7041
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6638: LD_ADDR_VAR 0 1
6642: PUSH
6643: DOUBLE
6644: LD_INT 1
6646: DEC
6647: ST_TO_ADDR
6648: LD_INT 4
6650: PUSH
6651: LD_INT 5
6653: PUSH
6654: LD_INT 5
6656: PUSH
6657: LD_INT 6
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_OWVAR 67
6670: ARRAY
6671: PUSH
6672: FOR_TO
6673: IFFALSE 6986
// begin uc_side := 1 ;
6675: LD_ADDR_OWVAR 20
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// uc_nation := 1 ;
6683: LD_ADDR_OWVAR 21
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// InitHc_All ( ) ;
6691: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6695: LD_INT 0
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 5
6703: PUSH
6704: LD_INT 6
6706: PUSH
6707: LD_INT 7
6709: PUSH
6710: LD_INT 8
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_OWVAR 67
6723: ARRAY
6724: PPUSH
6725: CALL_OW 380
// un := CreateHuman ;
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: CALL_OW 44
6738: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6739: LD_ADDR_VAR 0 4
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 4
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: LD_INT 3
6765: MOD
6766: PUSH
6767: LD_INT 1
6769: PLUS
6770: ARRAY
6771: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6772: LD_VAR 0 4
6776: PUSH
6777: LD_INT 4
6779: EQUAL
6780: IFFALSE 6815
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6782: LD_ADDR_VAR 0 5
6786: PUSH
6787: LD_INT 6
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: ST_TO_ADDR
6813: GO 6850
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 5
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 7
6828: PUSH
6829: LD_INT 4
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 1
6840: PPUSH
6841: LD_INT 4
6843: PPUSH
6844: CALL_OW 12
6848: ARRAY
6849: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6850: LD_VAR 0 4
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 1
6860: PPUSH
6861: LD_VAR 0 5
6865: PPUSH
6866: LD_INT 30
6868: PPUSH
6869: CALL 21646 0 5
// veh := CreateVehicle ;
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: CALL_OW 45
6882: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6883: LD_ADDR_EXP 34
6887: PUSH
6888: LD_EXP 34
6892: PPUSH
6893: LD_EXP 34
6897: PUSH
6898: LD_INT 1
6900: PLUS
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 1
6911: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6912: LD_VAR 0 3
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
6924: LD_INT 35
6926: PPUSH
6927: CALL_OW 67
// until PlaceUnitArea ( veh , americanEastArea , false ) ;
6931: LD_VAR 0 3
6935: PPUSH
6936: LD_INT 17
6938: PPUSH
6939: LD_INT 0
6941: PPUSH
6942: CALL_OW 49
6946: IFFALSE 6924
// PlaceHumanInUnit ( un , veh ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_INT 153
6969: PPUSH
6970: LD_INT 45
6972: PPUSH
6973: CALL_OW 111
// wait ( 0 0$2 ) ;
6977: LD_INT 70
6979: PPUSH
6980: CALL_OW 67
// end ;
6984: GO 6672
6986: POP
6987: POP
// repeat wait ( 0 0$1 ) ;
6988: LD_INT 35
6990: PPUSH
6991: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6995: LD_ADDR_EXP 34
6999: PUSH
7000: LD_EXP 34
7004: PPUSH
7005: LD_INT 150
7007: PUSH
7008: LD_INT 36
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 138
7017: PUSH
7018: LD_INT 25
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL 57582 0 2
7033: ST_TO_ADDR
// until not usAdditionalForces ;
7034: LD_EXP 34
7038: NOT
7039: IFFALSE 6988
// end ;
7041: PPOPN 5
7043: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
7044: LD_INT 22
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 101
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: IFFALSE 7092
7074: GO 7076
7076: DISABLE
// begin wait ( 0 0$30 ) ;
7077: LD_INT 1050
7079: PPUSH
7080: CALL_OW 67
// usAttacksAllowed := true ;
7084: LD_ADDR_EXP 6
7088: PUSH
7089: LD_INT 1
7091: ST_TO_ADDR
// end ; end_of_file
7092: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL 60247 0 1
// if un = Heike then
7102: LD_VAR 0 1
7106: PUSH
7107: LD_EXP 15
7111: EQUAL
7112: IFFALSE 7121
// YouLost ( Heike ) ;
7114: LD_STRING Heike
7116: PPUSH
7117: CALL_OW 104
// if un = usCommander then
7121: LD_VAR 0 1
7125: PUSH
7126: LD_EXP 30
7130: EQUAL
7131: IFFALSE 7140
// YouLost ( Commander ) ;
7133: LD_STRING Commander
7135: PPUSH
7136: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 255
7149: PUSH
7150: LD_INT 2
7152: EQUAL
7153: IFFALSE 7170
7155: PUSH
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 247
7165: PUSH
7166: LD_INT 2
7168: EQUAL
7169: AND
7170: IFFALSE 7187
// vehLossCounter := Inc ( vehLossCounter ) ;
7172: LD_ADDR_EXP 14
7176: PUSH
7177: LD_EXP 14
7181: PPUSH
7182: CALL 56189 0 1
7186: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_INT 1
7199: EQUAL
7200: IFFALSE 7546
// begin if GetClass ( un ) = class_sniper then
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 257
7211: PUSH
7212: LD_INT 5
7214: EQUAL
7215: IFFALSE 7232
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7217: LD_ADDR_EXP 13
7221: PUSH
7222: LD_EXP 13
7226: PPUSH
7227: CALL 56189 0 1
7231: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7232: LD_VAR 0 1
7236: PPUSH
7237: CALL_OW 264
7241: PUSH
7242: LD_INT 13
7244: EQUAL
7245: IFFALSE 7256
7247: PUSH
7248: LD_INT 25
7250: PPUSH
7251: CALL_OW 302
7255: AND
7256: IFFALSE 7319
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7258: LD_INT 175
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 34
7273: PUSH
7274: LD_INT 13
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: PPUSH
7290: CALL 18884 0 1
7294: MUL
7295: PPUSH
7296: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7300: LD_INT 25
7302: PPUSH
7303: LD_INT 2
7305: PPUSH
7306: LD_INT 2
7308: PPUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 13
7314: PPUSH
7315: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 264
7328: PUSH
7329: LD_INT 12
7331: EQUAL
7332: IFFALSE 7343
7334: PUSH
7335: LD_INT 25
7337: PPUSH
7338: CALL_OW 302
7342: AND
7343: IFFALSE 7364
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7345: LD_INT 25
7347: PPUSH
7348: LD_INT 2
7350: PPUSH
7351: LD_INT 1
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 12
7359: PPUSH
7360: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 266
7373: PUSH
7374: LD_INT 32
7376: EQUAL
7377: IFFALSE 7461
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7379: LD_ADDR_EXP 33
7383: PUSH
7384: LD_EXP 33
7388: PPUSH
7389: LD_EXP 33
7393: PUSH
7394: LD_INT 1
7396: PLUS
7397: PPUSH
7398: LD_INT 32
7400: PUSH
7401: LD_INT 33
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 1
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 12
7418: ARRAY
7419: PUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 250
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 251
7439: PUSH
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 254
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 1
7460: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7461: LD_VAR 0 1
7465: PPUSH
7466: CALL_OW 266
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: LD_INT 4
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: IN
7481: IFFALSE 7546
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7483: LD_ADDR_EXP 33
7487: PUSH
7488: LD_EXP 33
7492: PPUSH
7493: LD_EXP 33
7497: PUSH
7498: LD_INT 1
7500: PLUS
7501: PPUSH
7502: LD_INT 4
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: CALL_OW 250
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 251
7524: PUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 254
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 1
7545: ST_TO_ADDR
// end ; end ;
7546: PPOPN 1
7548: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7549: LD_VAR 0 1
7553: PPUSH
7554: CALL_OW 255
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7579
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 110
7574: PUSH
7575: LD_INT 1
7577: EQUAL
7578: AND
7579: IFFALSE 7593
// SetTag ( un , 0 ) ;
7581: LD_VAR 0 1
7585: PPUSH
7586: LD_INT 0
7588: PPUSH
7589: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 255
7602: PUSH
7603: LD_INT 1
7605: EQUAL
7606: IFFALSE 7623
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 264
7618: PUSH
7619: LD_INT 6
7621: EQUAL
7622: AND
7623: IFFALSE 7632
7625: PUSH
7626: LD_EXP 11
7630: NOT
7631: AND
7632: IFFALSE 7642
// seeHeavyGun := true ;
7634: LD_ADDR_EXP 11
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 263
7651: PUSH
7652: LD_INT 2
7654: EQUAL
7655: IFFALSE 7672
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 255
7667: PUSH
7668: LD_INT 2
7670: NONEQUAL
7671: AND
7672: IFFALSE 7698
// begin ComUnlink ( un ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 136
// if not seeRemoteVehicle then
7683: LD_EXP 10
7687: NOT
7688: IFFALSE 7698
// seeRemoteVehicle := true ;
7690: LD_ADDR_EXP 10
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// end ; end ;
7698: PPOPN 1
7700: END
// on BuildingComplete ( b ) do var i , barracks ;
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
// begin if GetSide ( b ) = 2 then
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 255
7714: PUSH
7715: LD_INT 2
7717: EQUAL
7718: IFFALSE 7758
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 266
7729: PUSH
7730: LD_INT 0
7732: EQUAL
7733: IFFALSE 7749
7735: PUSH
7736: LD_VAR 0 1
7740: PPUSH
7741: LD_INT 18
7743: PPUSH
7744: CALL_OW 308
7748: AND
7749: IFFALSE 7758
// SetAchievement ( ACH_WEST ) ;
7751: LD_STRING ACH_WEST
7753: PPUSH
7754: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 255
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 7947
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7773: LD_ADDR_EXP 33
7777: PUSH
7778: LD_EXP 33
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: CALL_OW 3
7790: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 266
7800: PUSH
7801: LD_INT 4
7803: EQUAL
7804: IFFALSE 7815
// ComUpgrade ( b ) ;
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 266
7824: PUSH
7825: LD_INT 32
7827: PUSH
7828: LD_INT 33
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: IN
7835: IFFALSE 7947
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 6
7844: PUSH
7845: LD_INT 7
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 1
7854: PPUSH
7855: LD_INT 2
7857: PPUSH
7858: CALL_OW 12
7862: ARRAY
7863: PPUSH
7864: CALL_OW 208
// if GetBType ( b ) = b_turret then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 266
7877: PUSH
7878: LD_INT 33
7880: EQUAL
7881: IFFALSE 7885
// exit ;
7883: GO 7947
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 30
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PPUSH
7914: CALL_OW 69
7918: ST_TO_ADDR
// if barracks then
7919: LD_VAR 0 3
7923: IFFALSE 7947
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 1
7932: ARRAY
7933: PPUSH
7934: CALL_OW 313
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PPUSH
7943: CALL_OW 122
// end ; end ; end ;
7947: PPOPN 3
7949: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7950: LD_VAR 0 1
7954: PPUSH
7955: LD_VAR 0 2
7959: PPUSH
7960: CALL 60305 0 2
// if GetSide ( factory ) = 1 then
7964: LD_VAR 0 2
7968: PPUSH
7969: CALL_OW 255
7973: PUSH
7974: LD_INT 1
7976: EQUAL
7977: IFFALSE 8056
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7979: LD_VAR 0 1
7983: PPUSH
7984: CALL_OW 264
7988: PUSH
7989: LD_INT 12
7991: EQUAL
7992: IFFALSE 8004
// usCargo := vehicle ;
7994: LD_ADDR_EXP 32
7998: PUSH
7999: LD_VAR 0 1
8003: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 12
8016: PUSH
8017: LD_INT 13
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: IN
8024: NOT
8025: IFFALSE 8056
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
8027: LD_ADDR_EXP 31
8031: PUSH
8032: LD_EXP 31
8036: PPUSH
8037: LD_EXP 31
8041: PUSH
8042: LD_INT 1
8044: PLUS
8045: PPUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 1
8055: ST_TO_ADDR
// end ; end ;
8056: PPOPN 2
8058: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
8059: LD_VAR 0 2
8063: PPUSH
8064: CALL_OW 255
8068: PUSH
8069: LD_INT 1
8071: EQUAL
8072: IFFALSE 8086
// AddComEnterUnit ( un , amFac ) ;
8074: LD_VAR 0 1
8078: PPUSH
8079: LD_INT 25
8081: PPUSH
8082: CALL_OW 180
// end ;
8086: PPOPN 4
8088: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 255
8098: PUSH
8099: LD_INT 1
8101: EQUAL
8102: IFFALSE 8119
8104: PUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 266
8114: PUSH
8115: LD_INT 32
8117: EQUAL
8118: AND
8119: IFFALSE 8143
8121: PUSH
8122: LD_VAR 0 2
8126: PPUSH
8127: CALL_OW 257
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: IN
8142: AND
8143: IFFALSE 8182
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: AND
8182: IFFALSE 8252
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8184: LD_INT 74
8186: PPUSH
8187: LD_INT 120
8189: PPUSH
8190: CALL_OW 428
8194: PPUSH
8195: CALL_OW 313
8199: PUSH
8200: LD_INT 6
8202: LESS
8203: IFFALSE 8252
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 74
8212: PPUSH
8213: LD_INT 120
8215: PPUSH
8216: CALL_OW 428
8220: PPUSH
8221: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8225: LD_VAR 0 2
8229: PPUSH
8230: CALL_OW 257
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8252
// AddComChangeProfession ( un , class_sniper ) ;
8240: LD_VAR 0 2
8244: PPUSH
8245: LD_INT 5
8247: PPUSH
8248: CALL_OW 183
// end ; end ; end_of_file
8252: PPOPN 2
8254: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
// Video ( true ) ;
8267: LD_INT 1
8269: PPUSH
8270: CALL 54788 0 1
// music_nat := 1 ;
8274: LD_ADDR_OWVAR 71
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// music_class := music_recon ;
8282: LD_ADDR_OWVAR 72
8286: PUSH
8287: LD_INT 3
8289: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8290: LD_INT 184
8292: PPUSH
8293: LD_INT 142
8295: PPUSH
8296: LD_INT 2
8298: PPUSH
8299: LD_INT 10
8301: NEG
8302: PPUSH
8303: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8307: LD_INT 184
8309: PPUSH
8310: LD_INT 142
8312: PPUSH
8313: LD_INT 2
8315: PPUSH
8316: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8320: LD_INT 204
8322: PPUSH
8323: LD_INT 151
8325: PPUSH
8326: LD_INT 2
8328: PPUSH
8329: LD_INT 10
8331: NEG
8332: PPUSH
8333: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8337: LD_INT 204
8339: PPUSH
8340: LD_INT 151
8342: PPUSH
8343: LD_INT 2
8345: PPUSH
8346: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8350: LD_INT 184
8352: PPUSH
8353: LD_INT 142
8355: PPUSH
8356: CALL_OW 86
// wait ( 0 0$2 ) ;
8360: LD_INT 70
8362: PPUSH
8363: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8367: LD_ADDR_VAR 0 5
8371: PUSH
8372: LD_EXP 15
8376: PUSH
8377: LD_EXP 16
8381: PUSH
8382: LD_EXP 17
8386: PUSH
8387: LD_EXP 18
8391: PUSH
8392: LD_EXP 19
8396: PUSH
8397: LD_EXP 20
8401: PUSH
8402: LD_EXP 21
8406: PUSH
8407: LD_EXP 22
8411: PUSH
8412: LD_EXP 24
8416: PUSH
8417: LD_EXP 25
8421: PUSH
8422: LD_EXP 26
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_EXP 27
8444: UNION
8445: ST_TO_ADDR
// tmp := tmp diff 0 ;
8446: LD_ADDR_VAR 0 5
8450: PUSH
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 0
8458: DIFF
8459: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8460: LD_ADDR_VAR 0 7
8464: PUSH
8465: LD_VAR 0 5
8469: PPUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PPUSH
8480: CALL_OW 72
8484: PUSH
8485: LD_INT 0
8487: GREATER
8488: ST_TO_ADDR
// hasCamera := false ;
8489: LD_ADDR_VAR 0 8
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// if not hasEng then
8497: LD_VAR 0 7
8501: NOT
8502: IFFALSE 8555
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8504: LD_ADDR_VAR 0 6
8508: PUSH
8509: LD_VAR 0 5
8513: PUSH
8514: LD_EXP 25
8518: PUSH
8519: LD_EXP 17
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: DIFF
8528: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8529: LD_VAR 0 6
8533: PUSH
8534: LD_INT 1
8536: PPUSH
8537: LD_VAR 0 6
8541: PPUSH
8542: CALL_OW 12
8546: ARRAY
8547: PPUSH
8548: LD_INT 2
8550: PPUSH
8551: CALL_OW 336
// end ; if heikeVehicles then
8555: LD_EXP 29
8559: IFFALSE 9207
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8561: LD_ADDR_VAR 0 5
8565: PUSH
8566: LD_VAR 0 5
8570: PPUSH
8571: LD_INT 3
8573: PPUSH
8574: CALL 57202 0 2
8578: ST_TO_ADDR
// for i in heikeVehicles do
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: LD_EXP 29
8588: PUSH
8589: FOR_IN
8590: IFFALSE 9205
// begin if not tmp then
8592: LD_VAR 0 5
8596: NOT
8597: IFFALSE 8601
// break ;
8599: GO 9205
// uc_side := 2 ;
8601: LD_ADDR_OWVAR 20
8605: PUSH
8606: LD_INT 2
8608: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8609: LD_ADDR_OWVAR 21
8613: PUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 5
8621: ARRAY
8622: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8623: LD_ADDR_OWVAR 37
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: LD_INT 1
8635: ARRAY
8636: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8637: LD_ADDR_OWVAR 39
8641: PUSH
8642: LD_VAR 0 2
8646: PUSH
8647: LD_INT 2
8649: ARRAY
8650: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8651: LD_ADDR_OWVAR 38
8655: PUSH
8656: LD_VAR 0 2
8660: PUSH
8661: LD_INT 3
8663: ARRAY
8664: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8665: LD_ADDR_OWVAR 40
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_INT 4
8677: ARRAY
8678: ST_TO_ADDR
// veh := CreateVehicle ;
8679: LD_ADDR_VAR 0 4
8683: PUSH
8684: CALL_OW 45
8688: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8689: LD_VAR 0 4
8693: PPUSH
8694: LD_INT 4
8696: PPUSH
8697: CALL_OW 233
// if i [ 3 ] = control_manual then
8701: LD_VAR 0 2
8705: PUSH
8706: LD_INT 3
8708: ARRAY
8709: PUSH
8710: LD_INT 1
8712: EQUAL
8713: IFFALSE 8807
// begin repeat wait ( 1 ) ;
8715: LD_INT 1
8717: PPUSH
8718: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_INT 1
8729: PPUSH
8730: LD_INT 0
8732: PPUSH
8733: CALL_OW 49
8737: IFFALSE 8715
// if i [ 4 ] = ar_control_tower then
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 4
8746: ARRAY
8747: PUSH
8748: LD_INT 31
8750: EQUAL
8751: IFFALSE 8769
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8753: LD_VAR 0 5
8757: PUSH
8758: LD_INT 1
8760: ARRAY
8761: PPUSH
8762: LD_INT 3
8764: PPUSH
8765: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8769: LD_VAR 0 5
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: LD_VAR 0 4
8782: PPUSH
8783: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8787: LD_ADDR_VAR 0 5
8791: PUSH
8792: LD_VAR 0 5
8796: PPUSH
8797: LD_INT 1
8799: PPUSH
8800: CALL_OW 3
8804: ST_TO_ADDR
// end else
8805: GO 8877
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8807: LD_INT 22
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 34
8819: PUSH
8820: LD_INT 31
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: IFFALSE 8877
// begin repeat wait ( 1 ) ;
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8844: LD_VAR 0 4
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 49
8859: IFFALSE 8837
// Connect ( veh ) ;
8861: LD_VAR 0 4
8865: PPUSH
8866: CALL 25128 0 1
// wait ( 0 0$2 ) ;
8870: LD_INT 70
8872: PPUSH
8873: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8877: LD_VAR 0 4
8881: PPUSH
8882: LD_VAR 0 2
8886: PUSH
8887: LD_INT 6
8889: ARRAY
8890: PPUSH
8891: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8895: LD_VAR 0 4
8899: PPUSH
8900: LD_INT 20
8902: PPUSH
8903: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8907: LD_VAR 0 2
8911: PUSH
8912: LD_INT 7
8914: ARRAY
8915: IFFALSE 8939
8917: PUSH
8918: LD_VAR 0 4
8922: PPUSH
8923: CALL_OW 264
8927: PUSH
8928: LD_INT 51
8930: PUSH
8931: LD_INT 32
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: IN
8938: AND
8939: IFFALSE 8990
// begin for j := 1 to 2 do
8941: LD_ADDR_VAR 0 3
8945: PUSH
8946: DOUBLE
8947: LD_INT 1
8949: DEC
8950: ST_TO_ADDR
8951: LD_INT 2
8953: PUSH
8954: FOR_TO
8955: IFFALSE 8988
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8957: LD_VAR 0 4
8961: PPUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PUSH
8972: LD_INT 7
8974: ARRAY
8975: PUSH
8976: LD_VAR 0 3
8980: ARRAY
8981: PPUSH
8982: CALL_OW 291
8986: GO 8954
8988: POP
8989: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8990: LD_VAR 0 4
8994: PPUSH
8995: LD_INT 185
8997: PPUSH
8998: LD_INT 144
9000: PPUSH
9001: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
9005: LD_VAR 0 4
9009: PPUSH
9010: CALL_OW 263
9014: PUSH
9015: LD_INT 1
9017: EQUAL
9018: IFFALSE 9027
9020: PUSH
9021: LD_VAR 0 8
9025: NOT
9026: AND
9027: IFFALSE 9049
9029: PUSH
9030: LD_VAR 0 4
9034: PPUSH
9035: CALL_OW 311
9039: PPUSH
9040: CALL_OW 257
9044: PUSH
9045: LD_INT 2
9047: EQUAL
9048: AND
9049: IFFALSE 9154
// begin hasCamera := true ;
9051: LD_ADDR_VAR 0 8
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 4
9068: PPUSH
9069: CALL_OW 311
9073: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
9074: LD_VAR 0 4
9078: PPUSH
9079: LD_INT 177
9081: PPUSH
9082: LD_INT 138
9084: PPUSH
9085: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9089: LD_VAR 0 9
9093: PPUSH
9094: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
9098: LD_VAR 0 9
9102: PPUSH
9103: LD_INT 190
9105: PPUSH
9106: LD_INT 150
9108: PPUSH
9109: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9113: LD_VAR 0 9
9117: PPUSH
9118: LD_VAR 0 4
9122: PPUSH
9123: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9127: LD_VAR 0 9
9131: PPUSH
9132: LD_INT 170
9134: PPUSH
9135: LD_INT 103
9137: PPUSH
9138: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9142: LD_INT 190
9144: PPUSH
9145: LD_INT 150
9147: PPUSH
9148: CALL_OW 84
// end else
9152: GO 9196
// begin AddComWait ( veh , 0 0$2 ) ;
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 70
9161: PPUSH
9162: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9166: LD_VAR 0 4
9170: PPUSH
9171: LD_INT 179
9173: PPUSH
9174: LD_INT 129
9176: PPUSH
9177: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9181: LD_VAR 0 4
9185: PPUSH
9186: LD_INT 170
9188: PPUSH
9189: LD_INT 103
9191: PPUSH
9192: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9196: LD_INT 70
9198: PPUSH
9199: CALL_OW 67
// end ;
9203: GO 8589
9205: POP
9206: POP
// end ; if tmp then
9207: LD_VAR 0 5
9211: IFFALSE 9367
// begin for i in tmp do
9213: LD_ADDR_VAR 0 2
9217: PUSH
9218: LD_VAR 0 5
9222: PUSH
9223: FOR_IN
9224: IFFALSE 9365
// begin SetDir ( i , 4 ) ;
9226: LD_VAR 0 2
9230: PPUSH
9231: LD_INT 4
9233: PPUSH
9234: CALL_OW 233
// repeat wait ( 1 ) ;
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9245: LD_VAR 0 2
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 0
9255: PPUSH
9256: CALL_OW 49
9260: IFFALSE 9238
// ComMoveXY ( i , 185 , 144 ) ;
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_INT 185
9269: PPUSH
9270: LD_INT 144
9272: PPUSH
9273: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9277: LD_VAR 0 2
9281: PPUSH
9282: CALL_OW 257
9286: PUSH
9287: LD_INT 2
9289: EQUAL
9290: IFFALSE 9299
9292: PUSH
9293: LD_VAR 0 8
9297: NOT
9298: AND
9299: IFFALSE 9326
// begin hasCamera := true ;
9301: LD_ADDR_VAR 0 8
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_INT 190
9316: PPUSH
9317: LD_INT 150
9319: PPUSH
9320: CALL_OW 217
// end else
9324: GO 9341
// AddComMoveXY ( i , 179 , 129 ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: LD_INT 179
9333: PPUSH
9334: LD_INT 129
9336: PPUSH
9337: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9341: LD_VAR 0 2
9345: PPUSH
9346: LD_INT 170
9348: PPUSH
9349: LD_INT 103
9351: PPUSH
9352: CALL_OW 171
// wait ( 0 0$2 ) ;
9356: LD_INT 70
9358: PPUSH
9359: CALL_OW 67
// end ;
9363: GO 9223
9365: POP
9366: POP
// end ; if heikeApes then
9367: LD_EXP 28
9371: IFFALSE 9498
// begin counter := 0 ;
9373: LD_ADDR_VAR 0 10
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// for i in heikeApes do
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_EXP 28
9390: PUSH
9391: FOR_IN
9392: IFFALSE 9496
// begin if counter > 2 then
9394: LD_VAR 0 10
9398: PUSH
9399: LD_INT 2
9401: GREATER
9402: IFFALSE 9406
// break ;
9404: GO 9496
// counter := Inc ( counter ) ;
9406: LD_ADDR_VAR 0 10
9410: PUSH
9411: LD_VAR 0 10
9415: PPUSH
9416: CALL 56189 0 1
9420: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9421: LD_VAR 0 2
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 233
// repeat wait ( 1 ) ;
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9440: LD_VAR 0 2
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: LD_INT 0
9450: PPUSH
9451: CALL_OW 49
9455: IFFALSE 9433
// ComMoveXY ( i , 185 , 144 ) ;
9457: LD_VAR 0 2
9461: PPUSH
9462: LD_INT 185
9464: PPUSH
9465: LD_INT 144
9467: PPUSH
9468: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: LD_INT 170
9479: PPUSH
9480: LD_INT 103
9482: PPUSH
9483: CALL_OW 171
// wait ( 0 0$2 ) ;
9487: LD_INT 70
9489: PPUSH
9490: CALL_OW 67
// end ;
9494: GO 9391
9496: POP
9497: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9498: LD_EXP 15
9502: PPUSH
9503: LD_INT 163
9505: PPUSH
9506: LD_INT 89
9508: PPUSH
9509: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9513: LD_EXP 15
9517: PPUSH
9518: LD_STRING DH-Intro-1
9520: PPUSH
9521: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9525: LD_INT 175
9527: PPUSH
9528: LD_INT 117
9530: PPUSH
9531: CALL_OW 84
// if Markov then
9535: LD_EXP 22
9539: IFFALSE 10116
// begin Say ( Markov , DMar-Intro-2 ) ;
9541: LD_EXP 22
9545: PPUSH
9546: LD_STRING DMar-Intro-2
9548: PPUSH
9549: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9553: LD_EXP 22
9557: PPUSH
9558: LD_STRING DMar-Intro-3
9560: PPUSH
9561: CALL_OW 88
// wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9572: LD_EXP 15
9576: PPUSH
9577: CALL_OW 85
// if Kurt then
9581: LD_EXP 25
9585: IFFALSE 9637
// begin if IsInUnit ( Kurt ) then
9587: LD_EXP 25
9591: PPUSH
9592: CALL_OW 310
9596: IFFALSE 9607
// ComExit ( Kurt ) ;
9598: LD_EXP 25
9602: PPUSH
9603: CALL 55214 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9607: LD_EXP 25
9611: PPUSH
9612: LD_INT 130
9614: PPUSH
9615: LD_INT 56
9617: PPUSH
9618: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9622: LD_EXP 25
9626: PPUSH
9627: LD_INT 129
9629: PPUSH
9630: LD_INT 56
9632: PPUSH
9633: CALL_OW 178
// end ; if Kaia then
9637: LD_EXP 20
9641: IFFALSE 9821
// begin Say ( Kaia , DK-Intro-4 ) ;
9643: LD_EXP 20
9647: PPUSH
9648: LD_STRING DK-Intro-4
9650: PPUSH
9651: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9655: LD_EXP 22
9659: PPUSH
9660: LD_STRING DMar-Intro-5
9662: PPUSH
9663: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9667: LD_EXP 22
9671: PPUSH
9672: LD_STRING DMar-Intro-6
9674: PPUSH
9675: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9679: LD_EXP 24
9683: PPUSH
9684: LD_STRING DO-Intro-7
9686: PPUSH
9687: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9691: LD_INT 160
9693: PPUSH
9694: LD_INT 85
9696: PPUSH
9697: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9701: LD_EXP 22
9705: PPUSH
9706: LD_STRING DMar-Intro-8
9708: PPUSH
9709: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9713: LD_EXP 22
9717: PPUSH
9718: LD_STRING DMar-Intro-9
9720: PPUSH
9721: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9725: LD_EXP 22
9729: PPUSH
9730: LD_STRING DMar-Intro-10
9732: PPUSH
9733: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9737: LD_EXP 22
9741: PPUSH
9742: LD_STRING DMar-Intro-11
9744: PPUSH
9745: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9749: LD_EXP 16
9753: PPUSH
9754: LD_STRING DG-Intro-12
9756: PPUSH
9757: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9761: LD_EXP 16
9765: PPUSH
9766: LD_STRING DG-Intro-13
9768: PPUSH
9769: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9773: LD_EXP 16
9777: PPUSH
9778: LD_STRING DG-Intro-14
9780: PPUSH
9781: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9785: LD_EXP 16
9789: PPUSH
9790: LD_STRING DG-Intro-15
9792: PPUSH
9793: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9797: LD_EXP 15
9801: PPUSH
9802: LD_STRING DH-Intro-16
9804: PPUSH
9805: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9809: LD_EXP 22
9813: PPUSH
9814: LD_STRING DMar-Intro-17
9816: PPUSH
9817: CALL_OW 88
// end ; if Kurt and Mike then
9821: LD_EXP 25
9825: IFFALSE 9833
9827: PUSH
9828: LD_EXP 17
9832: AND
9833: IFFALSE 10116
// begin CenterNowOnUnits ( Kurt ) ;
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 15
9853: PPUSH
9854: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9858: LD_EXP 25
9862: PPUSH
9863: LD_STRING DKs-Intro-18
9865: PPUSH
9866: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9870: LD_EXP 25
9874: PPUSH
9875: LD_STRING DKs-Intro-19
9877: PPUSH
9878: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9882: LD_EXP 17
9886: PPUSH
9887: CALL_OW 87
// if IsInUnit ( Mike ) then
9891: LD_EXP 17
9895: PPUSH
9896: CALL_OW 310
9900: IFFALSE 9911
// ComExit ( Mike ) ;
9902: LD_EXP 17
9906: PPUSH
9907: CALL 55214 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9911: LD_EXP 17
9915: PPUSH
9916: LD_INT 129
9918: PPUSH
9919: LD_INT 53
9921: PPUSH
9922: CALL_OW 171
// AddComHold ( Mike ) ;
9926: LD_EXP 17
9930: PPUSH
9931: CALL_OW 200
// wait ( 0 0$2 ) ;
9935: LD_INT 70
9937: PPUSH
9938: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9942: LD_EXP 17
9946: PPUSH
9947: LD_STRING DM-Intro-20
9949: PPUSH
9950: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9954: LD_ADDR_EXP 3
9958: PUSH
9959: LD_STRING Scout
9961: PPUSH
9962: CALL_OW 97
9966: ST_TO_ADDR
// if scoutActive = 1 then
9967: LD_EXP 3
9971: PUSH
9972: LD_INT 1
9974: EQUAL
9975: IFFALSE 10072
// begin CenterNowOnUnits ( Kurt ) ;
9977: LD_EXP 25
9981: PPUSH
9982: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9986: LD_EXP 15
9990: PPUSH
9991: LD_STRING DH-Intro-21
9993: PPUSH
9994: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9998: LD_EXP 17
10002: PPUSH
10003: LD_STRING DM-Intro-22
10005: PPUSH
10006: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
10010: LD_EXP 25
10014: PPUSH
10015: LD_STRING DKs-Intro-23
10017: PPUSH
10018: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
10022: LD_EXP 25
10026: PPUSH
10027: LD_INT 5
10029: PPUSH
10030: CALL_OW 235
// SetSide ( Mike , 5 ) ;
10034: LD_EXP 17
10038: PPUSH
10039: LD_INT 5
10041: PPUSH
10042: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
10046: LD_EXP 25
10050: PUSH
10051: LD_EXP 17
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: LD_INT 104
10062: PPUSH
10063: LD_INT 66
10065: PPUSH
10066: CALL_OW 111
// end else
10070: GO 10116
// begin scoutActive := 0 ;
10072: LD_ADDR_EXP 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
10080: LD_EXP 15
10084: PPUSH
10085: LD_STRING DH-Intro-a-21
10087: PPUSH
10088: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
10092: LD_EXP 17
10096: PPUSH
10097: LD_STRING DM-Intro-a-22
10099: PPUSH
10100: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
10104: LD_EXP 25
10108: PPUSH
10109: LD_STRING DKs-Intro-a-23
10111: PPUSH
10112: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
10116: LD_INT 0
10118: PPUSH
10119: CALL 54788 0 1
// tick := 0 ;
10123: LD_ADDR_OWVAR 1
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// music_nat := music_auto ;
10131: LD_ADDR_OWVAR 71
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// music_class := music_auto ;
10139: LD_ADDR_OWVAR 72
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10147: LD_STRING M1
10149: PPUSH
10150: CALL_OW 337
// wait ( 0 0$3 ) ;
10154: LD_INT 105
10156: PPUSH
10157: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Base-1
10168: PPUSH
10169: CALL_OW 88
// if Kaia then
10173: LD_EXP 20
10177: IFFALSE 10287
// begin Say ( Kaia , DK-Base-2 ) ;
10179: LD_EXP 20
10183: PPUSH
10184: LD_STRING DK-Base-2
10186: PPUSH
10187: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10191: LD_EXP 15
10195: PPUSH
10196: LD_STRING DH-Base-3
10198: PPUSH
10199: CALL_OW 88
// if Aviradze then
10203: LD_EXP 26
10207: IFFALSE 10287
// begin Say ( Aviradze , DA-Base-4 ) ;
10209: LD_EXP 26
10213: PPUSH
10214: LD_STRING DA-Base-4
10216: PPUSH
10217: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10221: LD_EXP 20
10225: PPUSH
10226: LD_STRING DK-Base-5
10228: PPUSH
10229: CALL_OW 88
// if Markov then
10233: LD_EXP 22
10237: IFFALSE 10287
// begin Say ( Markov , DMar-Base-6 ) ;
10239: LD_EXP 22
10243: PPUSH
10244: LD_STRING DMar-Base-6
10246: PPUSH
10247: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10251: LD_EXP 20
10255: PPUSH
10256: LD_STRING DK-Base-7
10258: PPUSH
10259: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10263: LD_EXP 22
10267: PPUSH
10268: LD_STRING DMar-Base-8
10270: PPUSH
10271: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10275: LD_EXP 22
10279: PPUSH
10280: LD_STRING DMar-Base-9
10282: PPUSH
10283: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10287: CALL_OW 22
// end ;
10291: LD_VAR 0 1
10295: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10296: LD_EXP 5
10300: IFFALSE 11415
10302: GO 10304
10304: DISABLE
10305: LD_INT 0
10307: PPUSH
10308: PPUSH
// begin InGameOn ;
10309: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10313: LD_EXP 17
10317: PUSH
10318: LD_EXP 25
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PPUSH
10327: LD_EXP 15
10331: PPUSH
10332: CALL_OW 119
// ComExit ( Heike ) ;
10336: LD_EXP 15
10340: PPUSH
10341: CALL 55214 0 1
// if IsOk ( Mike ) then
10345: LD_EXP 17
10349: PPUSH
10350: CALL_OW 302
10354: IFFALSE 10372
// AddComTurnUnit ( Heike , Mike ) else
10356: LD_EXP 15
10360: PPUSH
10361: LD_EXP 17
10365: PPUSH
10366: CALL_OW 179
10370: GO 10386
// AddComTurnUnit ( Heike , Kurt ) ;
10372: LD_EXP 15
10376: PPUSH
10377: LD_EXP 25
10381: PPUSH
10382: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10386: LD_EXP 17
10390: PPUSH
10391: CALL_OW 302
10395: IFFALSE 10408
10397: PUSH
10398: LD_EXP 25
10402: PPUSH
10403: CALL_OW 302
10407: AND
10408: IFFALSE 10659
// begin CenterNowOnUnits ( Mike ) ;
10410: LD_EXP 17
10414: PPUSH
10415: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10419: LD_EXP 17
10423: PPUSH
10424: LD_STRING DM-Scout-1
10426: PPUSH
10427: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10431: LD_EXP 15
10435: PPUSH
10436: LD_STRING DH-Scout-2
10438: PPUSH
10439: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10443: LD_EXP 25
10447: PPUSH
10448: LD_STRING DKs-Scout-3
10450: PPUSH
10451: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10455: LD_EXP 15
10459: PPUSH
10460: LD_STRING DH-Scout-4
10462: PPUSH
10463: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10467: LD_EXP 15
10471: PPUSH
10472: LD_STRING DH-Scout-5
10474: PPUSH
10475: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_INT 72
10486: PUSH
10487: LD_INT 122
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 89
10496: PUSH
10497: LD_INT 131
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 99
10506: PUSH
10507: LD_INT 139
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 100
10516: PUSH
10517: LD_INT 148
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// for i in tmp do
10530: LD_ADDR_VAR 0 1
10534: PUSH
10535: LD_VAR 0 2
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10599
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10543: LD_VAR 0 1
10547: PUSH
10548: LD_INT 1
10550: ARRAY
10551: PPUSH
10552: LD_VAR 0 1
10556: PUSH
10557: LD_INT 2
10559: ARRAY
10560: PPUSH
10561: LD_INT 2
10563: PPUSH
10564: LD_INT 6
10566: NEG
10567: PPUSH
10568: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10572: LD_VAR 0 1
10576: PUSH
10577: LD_INT 1
10579: ARRAY
10580: PPUSH
10581: LD_VAR 0 1
10585: PUSH
10586: LD_INT 2
10588: ARRAY
10589: PPUSH
10590: LD_INT 2
10592: PPUSH
10593: CALL_OW 331
// end ;
10597: GO 10540
10599: POP
10600: POP
// CenterOnXY ( 83 , 132 ) ;
10601: LD_INT 83
10603: PPUSH
10604: LD_INT 132
10606: PPUSH
10607: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10611: LD_EXP 25
10615: PPUSH
10616: LD_STRING DKs-Scout-6
10618: PPUSH
10619: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10623: LD_EXP 17
10627: PPUSH
10628: LD_STRING DM-Scout-7
10630: PPUSH
10631: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10635: LD_EXP 17
10639: PPUSH
10640: LD_STRING DM-Scout-8
10642: PPUSH
10643: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10647: LD_EXP 25
10651: PPUSH
10652: LD_STRING DKs-Scout-9
10654: PPUSH
10655: CALL_OW 88
// end ; if IsDead ( Mike ) then
10659: LD_EXP 17
10663: PPUSH
10664: CALL_OW 301
10668: IFFALSE 10835
// begin CenterNowOnUnits ( Kurt ) ;
10670: LD_EXP 25
10674: PPUSH
10675: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10679: LD_EXP 25
10683: PPUSH
10684: LD_STRING DKs-Scout-b-1
10686: PPUSH
10687: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10691: LD_EXP 25
10695: PPUSH
10696: LD_STRING DKs-Scout-b-2
10698: PPUSH
10699: CALL_OW 88
// if IsOk ( Givi ) then
10703: LD_EXP 16
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10787
// begin ComExit ( Givi ) ;
10714: LD_EXP 16
10718: PPUSH
10719: CALL 55214 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10723: LD_EXP 16
10727: PPUSH
10728: LD_EXP 25
10732: PPUSH
10733: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10737: LD_EXP 16
10741: PPUSH
10742: LD_STRING DG-Scout-b-3
10744: PPUSH
10745: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10749: LD_EXP 16
10753: PPUSH
10754: LD_STRING DG-Scout-b-4
10756: PPUSH
10757: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10761: LD_EXP 16
10765: PPUSH
10766: LD_STRING DG-Scout-b-5
10768: PPUSH
10769: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10773: LD_EXP 15
10777: PPUSH
10778: LD_STRING DH-Scout-b-6
10780: PPUSH
10781: CALL_OW 88
// end else
10785: GO 10799
// Say ( Heike , DH-Scout-a-4 ) ;
10787: LD_EXP 15
10791: PPUSH
10792: LD_STRING DH-Scout-a-4
10794: PPUSH
10795: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10799: LD_EXP 25
10803: PPUSH
10804: LD_STRING DKs-Scout-b-7
10806: PPUSH
10807: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10811: LD_EXP 25
10815: PPUSH
10816: LD_STRING DKs-Scout-b-8
10818: PPUSH
10819: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10823: LD_EXP 25
10827: PPUSH
10828: LD_STRING DKs-Scout-b-9
10830: PPUSH
10831: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10835: LD_EXP 25
10839: PPUSH
10840: CALL_OW 301
10844: IFFALSE 11123
// begin CenterNowOnUnits ( Mike ) ;
10846: LD_EXP 17
10850: PPUSH
10851: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10855: LD_EXP 17
10859: PPUSH
10860: LD_STRING DM-Scout-a-1
10862: PPUSH
10863: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10867: LD_EXP 17
10871: PPUSH
10872: LD_STRING DM-Scout-a-2
10874: PPUSH
10875: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10879: LD_EXP 17
10883: PPUSH
10884: CALL_OW 256
10888: PUSH
10889: LD_INT 1000
10891: LESS
10892: IFFALSE 10908
// Say ( Heike , DH-Scout-a-3 ) else
10894: LD_EXP 15
10898: PPUSH
10899: LD_STRING DH-Scout-a-3
10901: PPUSH
10902: CALL_OW 88
10906: GO 10920
// Say ( Heike , DH-Scout-a-4 ) ;
10908: LD_EXP 15
10912: PPUSH
10913: LD_STRING DH-Scout-a-4
10915: PPUSH
10916: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10920: LD_EXP 17
10924: PPUSH
10925: LD_STRING DM-Scout-a-5
10927: PPUSH
10928: CALL_OW 88
// if IsOk ( Kaia ) then
10932: LD_EXP 20
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 11123
// begin ComExit ( Kaia ) ;
10943: LD_EXP 20
10947: PPUSH
10948: CALL 55214 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10952: LD_EXP 20
10956: PPUSH
10957: LD_EXP 17
10961: PPUSH
10962: CALL_OW 172
// wait ( 0 0$2 ) ;
10966: LD_INT 70
10968: PPUSH
10969: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10973: LD_EXP 20
10977: PPUSH
10978: LD_EXP 17
10982: PPUSH
10983: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10987: LD_EXP 17
10991: PPUSH
10992: LD_EXP 20
10996: PPUSH
10997: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
11001: LD_EXP 20
11005: PPUSH
11006: LD_STRING DK-Scout-a-6
11008: PPUSH
11009: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
11013: LD_EXP 17
11017: PPUSH
11018: LD_STRING DM-Scout-a-7
11020: PPUSH
11021: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
11025: LD_EXP 20
11029: PPUSH
11030: LD_STRING DK-Scout-a-8
11032: PPUSH
11033: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
11037: LD_EXP 20
11041: PPUSH
11042: LD_STRING DK-Scout-a-9
11044: PPUSH
11045: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
11049: LD_EXP 15
11053: PPUSH
11054: LD_STRING DH-Scout-a-10
11056: PPUSH
11057: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
11061: LD_EXP 17
11065: PPUSH
11066: LD_EXP 15
11070: PPUSH
11071: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
11075: LD_EXP 17
11079: PPUSH
11080: LD_STRING DM-Scout-a-11
11082: PPUSH
11083: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
11087: LD_EXP 17
11091: PPUSH
11092: LD_STRING DM-Scout-a-12
11094: PPUSH
11095: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
11099: LD_EXP 17
11103: PPUSH
11104: LD_STRING DM-Scout-a-13
11106: PPUSH
11107: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
11111: LD_EXP 17
11115: PPUSH
11116: LD_STRING DM-Scout-a-14
11118: PPUSH
11119: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
11123: LD_EXP 16
11127: PPUSH
11128: CALL_OW 302
11132: IFFALSE 11160
// begin Say ( Givi , DG-Scout-10 ) ;
11134: LD_EXP 16
11138: PPUSH
11139: LD_STRING DG-Scout-10
11141: PPUSH
11142: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11146: LD_EXP 16
11150: PPUSH
11151: LD_STRING DG-Scout-11
11153: PPUSH
11154: CALL_OW 88
// end else
11158: GO 11217
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11160: LD_EXP 27
11164: PPUSH
11165: LD_INT 26
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 72
11179: PPUSH
11180: LD_STRING DArm-Scout-10
11182: PPUSH
11183: CALL 224 0 2
11187: NOT
11188: IFFALSE 11217
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11190: LD_EXP 27
11194: PPUSH
11195: LD_INT 26
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PPUSH
11205: CALL_OW 72
11209: PPUSH
11210: LD_STRING DArf-Scout-10
11212: PPUSH
11213: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11217: LD_EXP 15
11221: PPUSH
11222: LD_STRING DH-Scout-12
11224: PPUSH
11225: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11229: LD_EXP 15
11233: PPUSH
11234: LD_STRING DH-Scout-13
11236: PPUSH
11237: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11241: LD_EXP 17
11245: PPUSH
11246: CALL_OW 302
11250: IFFALSE 11263
11252: PUSH
11253: LD_EXP 25
11257: PPUSH
11258: CALL_OW 302
11262: AND
11263: IFFALSE 11291
// begin Say ( Mike , DM-Scout-14 ) ;
11265: LD_EXP 17
11269: PPUSH
11270: LD_STRING DM-Scout-14
11272: PPUSH
11273: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11277: LD_EXP 15
11281: PPUSH
11282: LD_STRING DH-Scout-c-14
11284: PPUSH
11285: CALL_OW 88
// end else
11289: GO 11384
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11291: LD_EXP 17
11295: PPUSH
11296: CALL_OW 302
11300: PUSH
11301: LD_EXP 25
11305: PPUSH
11306: CALL_OW 302
11310: XOR
11311: IFFALSE 11372
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11313: LD_EXP 27
11317: PPUSH
11318: LD_INT 26
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: PPUSH
11333: LD_STRING DArm-Scout-a-14
11335: PPUSH
11336: CALL 224 0 2
11340: NOT
11341: IFFALSE 11370
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11343: LD_EXP 27
11347: PPUSH
11348: LD_INT 26
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PPUSH
11358: CALL_OW 72
11362: PPUSH
11363: LD_STRING DArf-Scout-a-14
11365: PPUSH
11366: CALL 224 0 2
// end else
11370: GO 11384
// Say ( Heike , DH-Scout-d-14 ) ;
11372: LD_EXP 15
11376: PPUSH
11377: LD_STRING DH-Scout-d-14
11379: PPUSH
11380: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11384: LD_EXP 15
11388: PPUSH
11389: LD_STRING DH-Scout-15
11391: PPUSH
11392: CALL_OW 88
// InGameOff ;
11396: CALL_OW 9
// wait ( 1 1$00 ) ;
11400: LD_INT 2100
11402: PPUSH
11403: CALL_OW 67
// usAttacksAllowed := true ;
11407: LD_ADDR_EXP 6
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// end ;
11415: PPOPN 2
11417: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11418: LD_EXP 4
11422: IFFALSE 11599
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
// begin spoken := true ;
11430: LD_ADDR_VAR 0 1
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11438: LD_INT 1050
11440: PPUSH
11441: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11445: LD_EXP 15
11449: PPUSH
11450: LD_STRING DH-Scout-c-1
11452: PPUSH
11453: CALL_OW 88
// if not IsOk ( Givi ) then
11457: LD_EXP 16
11461: PPUSH
11462: CALL_OW 302
11466: NOT
11467: IFFALSE 11471
// exit ;
11469: GO 11599
// if IsOk ( Givi ) then
11471: LD_EXP 16
11475: PPUSH
11476: CALL_OW 302
11480: IFFALSE 11508
// begin Say ( Givi , DG-Scout-c-2 ) ;
11482: LD_EXP 16
11486: PPUSH
11487: LD_STRING DG-Scout-c-2
11489: PPUSH
11490: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11494: LD_EXP 16
11498: PPUSH
11499: LD_STRING DG-Scout-c-3
11501: PPUSH
11502: CALL_OW 88
// end else
11506: GO 11581
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_EXP 27
11517: PPUSH
11518: LD_INT 26
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 72
11532: PPUSH
11533: LD_STRING DArm-Scout-c-3
11535: PPUSH
11536: CALL 224 0 2
11540: ST_TO_ADDR
// if not spoken then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11581
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11548: LD_ADDR_VAR 0 1
11552: PUSH
11553: LD_EXP 27
11557: PPUSH
11558: LD_INT 26
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 72
11572: PPUSH
11573: LD_STRING DArf-Scout-c-3
11575: PPUSH
11576: CALL 224 0 2
11580: ST_TO_ADDR
// ; end ; if spoken then
11581: LD_VAR 0 1
11585: IFFALSE 11599
// Say ( Heike , DH-Scout-c-4 ) ;
11587: LD_EXP 15
11591: PPUSH
11592: LD_STRING DH-Scout-c-4
11594: PPUSH
11595: CALL_OW 88
// end ;
11599: PPOPN 1
11601: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11602: LD_INT 22
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 7
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 69
11630: IFFALSE 11643
11632: PUSH
11633: LD_EXP 26
11637: PPUSH
11638: CALL_OW 302
11642: AND
11643: IFFALSE 11728
11645: GO 11647
11647: DISABLE
// begin DialogueOn ;
11648: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11652: LD_EXP 26
11656: PPUSH
11657: LD_STRING DA-Lab-1
11659: PPUSH
11660: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11664: LD_EXP 15
11668: PPUSH
11669: LD_STRING DH-Lab-2
11671: PPUSH
11672: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11676: LD_EXP 26
11680: PPUSH
11681: LD_STRING DA-Lab-3
11683: PPUSH
11684: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11688: LD_EXP 26
11692: PPUSH
11693: LD_STRING DA-Lab-4
11695: PPUSH
11696: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11700: LD_EXP 26
11704: PPUSH
11705: LD_STRING DA-Lab-5
11707: PPUSH
11708: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11712: LD_EXP 15
11716: PPUSH
11717: LD_STRING DH-Lab-6
11719: PPUSH
11720: CALL_OW 88
// DialogueOff ;
11724: CALL_OW 7
// end ;
11728: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11729: LD_INT 7
11731: PPUSH
11732: LD_INT 2
11734: PPUSH
11735: CALL_OW 321
11739: PUSH
11740: LD_INT 2
11742: EQUAL
11743: IFFALSE 11756
11745: PUSH
11746: LD_EXP 16
11750: PPUSH
11751: CALL_OW 302
11755: AND
11756: IFFALSE 11925
11758: GO 11760
11760: DISABLE
// begin DialogueOn ;
11761: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11765: LD_EXP 16
11769: PPUSH
11770: LD_STRING DG-Opt-1
11772: PPUSH
11773: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11777: LD_EXP 15
11781: PPUSH
11782: LD_STRING DH-Opt-2
11784: PPUSH
11785: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11789: LD_EXP 16
11793: PPUSH
11794: LD_STRING DG-Opt-3
11796: PPUSH
11797: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11801: LD_EXP 16
11805: PPUSH
11806: LD_STRING DG-Opt-4
11808: PPUSH
11809: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11813: LD_EXP 15
11817: PPUSH
11818: LD_STRING DH-Opt-5
11820: PPUSH
11821: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11825: LD_EXP 16
11829: PPUSH
11830: LD_STRING DG-Opt-6
11832: PPUSH
11833: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11837: LD_EXP 15
11841: PPUSH
11842: LD_STRING DH-Opt-7
11844: PPUSH
11845: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11849: LD_EXP 16
11853: PPUSH
11854: LD_STRING DG-Opt-8
11856: PPUSH
11857: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11861: LD_EXP 16
11865: PPUSH
11866: LD_STRING DG-Opt-9
11868: PPUSH
11869: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11873: LD_EXP 15
11877: PPUSH
11878: LD_STRING DH-Opt-10
11880: PPUSH
11881: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11885: LD_EXP 16
11889: PPUSH
11890: LD_STRING DG-Opt-11
11892: PPUSH
11893: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11897: LD_EXP 16
11901: PPUSH
11902: LD_STRING DG-Opt-12
11904: PPUSH
11905: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11909: LD_EXP 15
11913: PPUSH
11914: LD_STRING DH-Opt-13
11916: PPUSH
11917: CALL_OW 88
// DialogueOff ;
11921: CALL_OW 7
// end ;
11925: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 95
11933: PUSH
11934: LD_INT 7
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 23
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 26
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 72
11970: IFFALSE 12031
11972: GO 11974
11974: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11975: LD_EXP 27
11979: PPUSH
11980: LD_INT 95
11982: PUSH
11983: LD_INT 7
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 23
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 26
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PPUSH
12024: LD_STRING DArm-River
12026: PPUSH
12027: CALL_OW 88
// end ;
12031: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
12032: LD_INT 40
12034: PPUSH
12035: LD_INT 2
12037: PPUSH
12038: CALL_OW 321
12042: PUSH
12043: LD_INT 2
12045: EQUAL
12046: IFFALSE 12059
12048: PUSH
12049: LD_EXP 18
12053: PPUSH
12054: CALL_OW 302
12058: AND
12059: IFFALSE 12313
12061: GO 12063
12063: DISABLE
// begin DialogueOn ;
12064: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
12068: LD_EXP 18
12072: PPUSH
12073: LD_STRING DI-Roc-1
12075: PPUSH
12076: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
12080: LD_EXP 15
12084: PPUSH
12085: LD_STRING DH-Roc-2
12087: PPUSH
12088: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
12092: LD_EXP 18
12096: PPUSH
12097: LD_STRING DI-Roc-3
12099: PPUSH
12100: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
12104: LD_EXP 18
12108: PPUSH
12109: LD_STRING DI-Roc-4
12111: PPUSH
12112: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
12116: LD_EXP 20
12120: PPUSH
12121: LD_STRING DK-Roc-5
12123: PPUSH
12124: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
12128: LD_EXP 20
12132: PPUSH
12133: LD_STRING DK-Roc-6
12135: PPUSH
12136: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
12140: LD_EXP 16
12144: PPUSH
12145: LD_STRING DG-Roc-7
12147: PPUSH
12148: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
12152: LD_EXP 16
12156: PPUSH
12157: LD_STRING DG-Roc-8
12159: PPUSH
12160: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12164: LD_EXP 22
12168: PPUSH
12169: CALL_OW 302
12173: IFFALSE 12186
12175: PUSH
12176: LD_EXP 20
12180: PPUSH
12181: CALL_OW 302
12185: AND
12186: IFFALSE 12199
12188: PUSH
12189: LD_EXP 16
12193: PPUSH
12194: CALL_OW 302
12198: AND
12199: IFFALSE 12309
// begin Say ( Markov , DMar-Roc-9 ) ;
12201: LD_EXP 22
12205: PPUSH
12206: LD_STRING DMar-Roc-9
12208: PPUSH
12209: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12213: LD_EXP 22
12217: PPUSH
12218: LD_STRING DMar-Roc-10
12220: PPUSH
12221: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12225: LD_EXP 20
12229: PPUSH
12230: LD_STRING DK-Roc-11
12232: PPUSH
12233: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12237: LD_EXP 22
12241: PPUSH
12242: LD_STRING DMar-Roc-12
12244: PPUSH
12245: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12249: LD_EXP 20
12253: PPUSH
12254: LD_STRING DK-Roc-13
12256: PPUSH
12257: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12261: LD_EXP 16
12265: PPUSH
12266: LD_STRING DG-Roc-14
12268: PPUSH
12269: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12273: LD_EXP 22
12277: PPUSH
12278: LD_STRING DMar-Roc-15
12280: PPUSH
12281: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12285: LD_EXP 22
12289: PPUSH
12290: LD_STRING DMar-Roc-16
12292: PPUSH
12293: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12297: LD_EXP 20
12301: PPUSH
12302: LD_STRING DK-Roc-17
12304: PPUSH
12305: CALL_OW 88
// end ; DialogueOff ;
12309: CALL_OW 7
// end ;
12313: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12314: LD_EXP 30
12318: PPUSH
12319: CALL_OW 256
12323: PUSH
12324: LD_INT 1000
12326: LESS
12327: IFTRUE 12374
12329: PUSH
12330: LD_INT 22
12332: PUSH
12333: LD_INT 1
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 21
12342: PUSH
12343: LD_INT 1
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 23
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 6
12372: LESS
12373: OR
12374: IFTRUE 12421
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 21
12389: PUSH
12390: LD_INT 1
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: PUSH
12417: LD_INT 2
12419: LESS
12420: OR
12421: IFFALSE 13699
12423: GO 12425
12425: DISABLE
12426: LD_INT 0
12428: PPUSH
12429: PPUSH
12430: PPUSH
// begin usAttacksAllowed := false ;
12431: LD_ADDR_EXP 6
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// usSurrender := true ;
12439: LD_ADDR_EXP 7
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12447: LD_INT 1
12449: PPUSH
12450: LD_INT 2
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 80
// if IsDead ( usCommander ) then
12463: LD_EXP 30
12467: PPUSH
12468: CALL_OW 301
12472: IFFALSE 12476
// exit ;
12474: GO 13699
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12476: LD_ADDR_VAR 0 1
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 60
12503: PUSH
12504: EMPTY
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: PUSH
12517: FOR_IN
12518: IFFALSE 12531
// ComStop ( i ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 141
12529: GO 12517
12531: POP
12532: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12533: LD_ADDR_VAR 0 1
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 3
12550: PUSH
12551: LD_INT 50
12553: PUSH
12554: EMPTY
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: PUSH
12581: FOR_IN
12582: IFFALSE 12598
// SetLives ( i , 251 ) ;
12584: LD_VAR 0 1
12588: PPUSH
12589: LD_INT 251
12591: PPUSH
12592: CALL_OW 234
12596: GO 12581
12598: POP
12599: POP
// Video ( true ) ;
12600: LD_INT 1
12602: PPUSH
12603: CALL 54788 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12641
// ComStop ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 141
12639: GO 12627
12641: POP
12642: POP
// if not IsOk ( usCommander ) then
12643: LD_EXP 30
12647: PPUSH
12648: CALL_OW 302
12652: NOT
12653: IFFALSE 12667
// SetLives ( usCommander , 1000 ) ;
12655: LD_EXP 30
12659: PPUSH
12660: LD_INT 1000
12662: PPUSH
12663: CALL_OW 234
// InGameOn ;
12667: CALL_OW 8
// ComExit ( usCommander ) ;
12671: LD_EXP 30
12675: PPUSH
12676: CALL 55214 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12680: LD_EXP 30
12684: PPUSH
12685: LD_INT 81
12687: PPUSH
12688: LD_INT 143
12690: PPUSH
12691: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12695: LD_EXP 30
12699: PPUSH
12700: LD_INT 81
12702: PPUSH
12703: LD_INT 139
12705: PPUSH
12706: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12710: LD_INT 81
12712: PPUSH
12713: LD_INT 144
12715: PPUSH
12716: LD_INT 2
12718: PPUSH
12719: LD_INT 10
12721: NEG
12722: PPUSH
12723: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12727: LD_EXP 30
12731: PPUSH
12732: CALL_OW 87
// wait ( 0 0$2 ) ;
12736: LD_INT 70
12738: PPUSH
12739: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12743: LD_EXP 30
12747: PPUSH
12748: LD_STRING DCa-Surrender-1
12750: PPUSH
12751: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12755: LD_EXP 15
12759: PPUSH
12760: LD_STRING DH-Surrender-2
12762: PPUSH
12763: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12767: LD_EXP 15
12771: PPUSH
12772: CALL_OW 310
12776: PPUSH
12777: CALL_OW 247
12781: PUSH
12782: LD_INT 3
12784: EQUAL
12785: IFFALSE 12803
// begin ComExit ( Heike ) ;
12787: LD_EXP 15
12791: PPUSH
12792: CALL 55214 0 1
// wait ( 3 ) ;
12796: LD_INT 3
12798: PPUSH
12799: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12803: LD_EXP 15
12807: PPUSH
12808: LD_INT 82
12810: PPUSH
12811: LD_INT 133
12813: PPUSH
12814: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12818: LD_EXP 15
12822: PPUSH
12823: LD_EXP 30
12827: PPUSH
12828: CALL_OW 179
// wait ( 0 0$3 ) ;
12832: LD_INT 105
12834: PPUSH
12835: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12839: LD_EXP 15
12843: PPUSH
12844: LD_STRING DH-Surrender-3
12846: PPUSH
12847: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12851: LD_EXP 15
12855: PPUSH
12856: LD_STRING DH-Surrender-4
12858: PPUSH
12859: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12863: LD_INT 81
12865: PPUSH
12866: LD_INT 144
12868: PPUSH
12869: LD_INT 2
12871: PPUSH
12872: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12876: LD_INT 1
12878: PPUSH
12879: LD_INT 2
12881: PPUSH
12882: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12886: LD_ADDR_VAR 0 1
12890: PUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 23
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 54
12913: PUSH
12914: EMPTY
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PPUSH
12922: CALL_OW 69
12926: PUSH
12927: FOR_IN
12928: IFFALSE 12941
// ComExit ( i ) ;
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL 55214 0 1
12939: GO 12927
12941: POP
12942: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12943: LD_ADDR_VAR 0 3
12947: PUSH
12948: LD_INT 22
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 25
12960: PUSH
12961: LD_INT 4
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 69
12976: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12977: LD_ADDR_VAR 0 2
12981: PUSH
12982: LD_INT 22
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 3
12994: PUSH
12995: LD_INT 50
12997: PUSH
12998: EMPTY
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PPUSH
13009: CALL_OW 69
13013: ST_TO_ADDR
// if sci and hurts then
13014: LD_VAR 0 3
13018: IFFALSE 13026
13020: PUSH
13021: LD_VAR 0 2
13025: AND
13026: IFFALSE 13088
// begin for i := 1 to hurts do
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: DOUBLE
13034: LD_INT 1
13036: DEC
13037: ST_TO_ADDR
13038: LD_VAR 0 2
13042: PUSH
13043: FOR_TO
13044: IFFALSE 13086
// if i <= sci then
13046: LD_VAR 0 1
13050: PUSH
13051: LD_VAR 0 3
13055: LESSEQUAL
13056: IFFALSE 13084
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
13058: LD_VAR 0 3
13062: PUSH
13063: LD_VAR 0 1
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 2
13073: PUSH
13074: LD_VAR 0 1
13078: ARRAY
13079: PPUSH
13080: CALL_OW 188
13084: GO 13043
13086: POP
13087: POP
// end ; if IsOk ( Givi ) then
13088: LD_EXP 16
13092: PPUSH
13093: CALL_OW 302
13097: IFFALSE 13113
// Say ( Givi , DG-Surrender-5 ) else
13099: LD_EXP 16
13103: PPUSH
13104: LD_STRING DG-Surrender-5
13106: PPUSH
13107: CALL_OW 88
13111: GO 13125
// Say ( Heike , DH-Surrender-a-5 ) ;
13113: LD_EXP 15
13117: PPUSH
13118: LD_STRING DH-Surrender-a-5
13120: PPUSH
13121: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
13125: LD_EXP 30
13129: PPUSH
13130: LD_STRING DCa-Surrender-6
13132: PPUSH
13133: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
13137: LD_EXP 30
13141: PPUSH
13142: LD_STRING DCa-Surrender-7
13144: PPUSH
13145: CALL_OW 88
// if IsOk ( Givi ) then
13149: LD_EXP 16
13153: PPUSH
13154: CALL_OW 302
13158: IFFALSE 13174
// Say ( Givi , DG-Surrender-8 ) else
13160: LD_EXP 16
13164: PPUSH
13165: LD_STRING DG-Surrender-8
13167: PPUSH
13168: CALL_OW 88
13172: GO 13186
// Say ( Heike , DH-Surrender-a-8 ) ;
13174: LD_EXP 15
13178: PPUSH
13179: LD_STRING DH-Surrender-a-8
13181: PPUSH
13182: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13186: LD_EXP 30
13190: PPUSH
13191: LD_STRING DCa-Surrender-9
13193: PPUSH
13194: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13198: LD_EXP 15
13202: PPUSH
13203: LD_STRING DH-Surrender-10
13205: PPUSH
13206: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13210: LD_EXP 30
13214: PPUSH
13215: LD_STRING DCa-Surrender-11
13217: PPUSH
13218: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13222: LD_EXP 15
13226: PPUSH
13227: LD_STRING DH-Surrender-12
13229: PPUSH
13230: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13234: LD_EXP 30
13238: PPUSH
13239: LD_STRING DCa-Surrender-13
13241: PPUSH
13242: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13246: LD_EXP 30
13250: PPUSH
13251: LD_STRING DCa-Surrender-14
13253: PPUSH
13254: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13258: LD_EXP 30
13262: PPUSH
13263: LD_STRING DCa-Surrender-15
13265: PPUSH
13266: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13270: LD_EXP 30
13274: PPUSH
13275: LD_STRING DCa-Surrender-16
13277: PPUSH
13278: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13282: LD_EXP 20
13286: PPUSH
13287: LD_STRING DK-Surrender-17
13289: PPUSH
13290: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13294: LD_EXP 24
13298: PPUSH
13299: LD_STRING DO-Surrender-18
13301: PPUSH
13302: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13306: LD_EXP 24
13310: PPUSH
13311: LD_STRING DO-Surrender-19
13313: PPUSH
13314: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13318: LD_EXP 25
13322: PPUSH
13323: LD_STRING DKs-Surrender-20
13325: PPUSH
13326: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13330: LD_EXP 25
13334: PPUSH
13335: LD_STRING DKs-Surrender-21
13337: PPUSH
13338: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13342: LD_EXP 22
13346: PPUSH
13347: LD_STRING DMar-Surrender-22
13349: PPUSH
13350: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13354: LD_EXP 22
13358: PPUSH
13359: LD_STRING DMar-Surrender-23
13361: PPUSH
13362: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13366: LD_EXP 21
13370: PPUSH
13371: LD_STRING DS-Surrender-24
13373: PPUSH
13374: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13378: LD_EXP 26
13382: PPUSH
13383: LD_STRING DA-Surrender-25
13385: PPUSH
13386: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13390: LD_EXP 18
13394: PPUSH
13395: LD_STRING DI-Surrender-26
13397: PPUSH
13398: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13402: LD_EXP 19
13406: PPUSH
13407: LD_STRING DKam-Surrender-27
13409: PPUSH
13410: CALL_OW 88
// if IsOk ( Givi ) then
13414: LD_EXP 16
13418: PPUSH
13419: CALL_OW 302
13423: IFFALSE 13463
// begin Say ( Givi , DG-Surrender-28 ) ;
13425: LD_EXP 16
13429: PPUSH
13430: LD_STRING DG-Surrender-28
13432: PPUSH
13433: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13437: LD_EXP 16
13441: PPUSH
13442: LD_STRING DG-Surrender-29
13444: PPUSH
13445: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13449: LD_EXP 16
13453: PPUSH
13454: LD_STRING DG-Surrender-30
13456: PPUSH
13457: CALL_OW 88
// end else
13461: GO 13499
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13463: LD_EXP 15
13467: PPUSH
13468: LD_STRING DH-Surrender-a-28
13470: PPUSH
13471: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13475: LD_EXP 15
13479: PPUSH
13480: LD_STRING DH-Surrender-a-29
13482: PPUSH
13483: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13487: LD_EXP 15
13491: PPUSH
13492: LD_STRING DH-Surrender-a-30
13494: PPUSH
13495: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13499: CALL 15508 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13503: LD_INT 22
13505: PUSH
13506: LD_INT 3
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PPUSH
13513: CALL_OW 69
13517: PPUSH
13518: LD_INT 176
13520: PUSH
13521: LD_INT 123
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: PPUSH
13531: CALL 57582 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13535: LD_INT 190
13537: PPUSH
13538: LD_INT 150
13540: PPUSH
13541: LD_INT 2
13543: PPUSH
13544: LD_INT 8
13546: NEG
13547: PPUSH
13548: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13552: LD_INT 193
13554: PPUSH
13555: LD_INT 150
13557: PPUSH
13558: CALL_OW 84
// if IsOk ( Markov ) then
13562: LD_EXP 22
13566: PPUSH
13567: CALL_OW 302
13571: IFFALSE 13587
// Say ( Markov , DMar-Surrender-31 ) else
13573: LD_EXP 22
13577: PPUSH
13578: LD_STRING DMar-Surrender-31
13580: PPUSH
13581: CALL_OW 88
13585: GO 13644
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13587: LD_EXP 27
13591: PPUSH
13592: LD_INT 26
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 72
13606: PPUSH
13607: LD_STRING DArm-Surrender-a-31
13609: PPUSH
13610: CALL 224 0 2
13614: NOT
13615: IFFALSE 13644
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13617: LD_EXP 27
13621: PPUSH
13622: LD_INT 26
13624: PUSH
13625: LD_INT 2
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 72
13636: PPUSH
13637: LD_STRING DArf-Surrender-a-31
13639: PPUSH
13640: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13644: LD_EXP 15
13648: PPUSH
13649: LD_STRING DH-Surrender-32
13651: PPUSH
13652: CALL_OW 88
// InGameOff ;
13656: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13660: LD_STRING M2
13662: PPUSH
13663: CALL_OW 337
// wait ( 0 0$20 ) ;
13667: LD_INT 700
13669: PPUSH
13670: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13674: CALL 15870 0 0
// russianAttack := true ;
13678: LD_ADDR_EXP 8
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13686: LD_INT 190
13688: PPUSH
13689: LD_INT 150
13691: PPUSH
13692: LD_INT 2
13694: PPUSH
13695: CALL_OW 331
// end ;
13699: PPOPN 3
13701: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13702: LD_EXP 11
13706: IFFALSE 13718
13708: PUSH
13709: LD_INT 2
13711: PPUSH
13712: CALL_OW 463
13716: NOT
13717: AND
13718: IFFALSE 13731
13720: PUSH
13721: LD_EXP 15
13725: PPUSH
13726: CALL_OW 302
13730: AND
13731: IFFALSE 13763
13733: PUSH
13734: LD_INT 22
13736: PUSH
13737: LD_INT 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 30
13746: PUSH
13747: LD_INT 3
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: AND
13763: IFFALSE 13795
13765: PUSH
13766: LD_EXP 22
13770: PPUSH
13771: CALL_OW 302
13775: IFTRUE 13794
13777: PUSH
13778: LD_EXP 27
13782: PPUSH
13783: LD_INT 50
13785: PUSH
13786: EMPTY
13787: LIST
13788: PPUSH
13789: CALL_OW 72
13793: OR
13794: AND
13795: IFFALSE 14023
13797: GO 13799
13799: DISABLE
// begin DialogueOn ;
13800: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13804: LD_EXP 15
13808: PPUSH
13809: LD_STRING DH-Heavy-1
13811: PPUSH
13812: CALL_OW 88
// if IsOk ( Markov ) then
13816: LD_EXP 22
13820: PPUSH
13821: CALL_OW 302
13825: IFFALSE 13950
// begin Say ( Markov , DMar-Heavy-2 ) ;
13827: LD_EXP 22
13831: PPUSH
13832: LD_STRING DMar-Heavy-2
13834: PPUSH
13835: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13839: LD_INT 22
13841: PUSH
13842: LD_INT 2
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 30
13851: PUSH
13852: LD_INT 3
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: PUSH
13868: LD_INT 1
13870: ARRAY
13871: PPUSH
13872: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13876: LD_EXP 22
13880: PPUSH
13881: LD_STRING DMar-Heavy-3
13883: PPUSH
13884: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13888: LD_EXP 22
13892: PPUSH
13893: LD_STRING DMar-Heavy-4
13895: PPUSH
13896: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13900: LD_EXP 22
13904: PPUSH
13905: LD_STRING DMar-Heavy-5
13907: PPUSH
13908: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13912: LD_EXP 22
13916: PPUSH
13917: LD_STRING DMar-Heavy-6
13919: PPUSH
13920: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13924: LD_EXP 15
13928: PPUSH
13929: LD_STRING DH-Heavy-7
13931: PPUSH
13932: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13936: LD_EXP 15
13940: PPUSH
13941: LD_STRING DH-Heavy-8
13943: PPUSH
13944: CALL_OW 88
// end else
13948: GO 14007
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13950: LD_EXP 27
13954: PPUSH
13955: LD_INT 26
13957: PUSH
13958: LD_INT 1
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 72
13969: PPUSH
13970: LD_STRING DArm-Heavy-a-2
13972: PPUSH
13973: CALL 224 0 2
13977: NOT
13978: IFFALSE 14007
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13980: LD_EXP 27
13984: PPUSH
13985: LD_INT 26
13987: PUSH
13988: LD_INT 2
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 72
13999: PPUSH
14000: LD_STRING DArf-Heavy-a-2
14002: PPUSH
14003: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
14007: LD_EXP 15
14011: PPUSH
14012: LD_STRING DH-Heavy-9
14014: PPUSH
14015: CALL_OW 88
// DialogueOff ;
14019: CALL_OW 7
// end ;
14023: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
14024: LD_EXP 34
14028: PPUSH
14029: LD_INT 101
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 72
14043: IFFALSE 14056
14045: PUSH
14046: LD_EXP 15
14050: PPUSH
14051: CALL_OW 302
14055: AND
14056: IFFALSE 14065
14058: PUSH
14059: LD_EXP 7
14063: NOT
14064: AND
14065: IFFALSE 14208
14067: GO 14069
14069: DISABLE
// begin DialogueOn ;
14070: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
14074: LD_EXP 34
14078: PPUSH
14079: LD_INT 101
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 72
14093: PPUSH
14094: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
14098: LD_EXP 15
14102: PPUSH
14103: LD_STRING DH-Flank-1
14105: PPUSH
14106: CALL_OW 88
// if IsOk ( Mike ) then
14110: LD_EXP 17
14114: PPUSH
14115: CALL_OW 302
14119: IFFALSE 14135
// Say ( Mike , DM-Flank-2 ) else
14121: LD_EXP 17
14125: PPUSH
14126: LD_STRING DM-Flank-2
14128: PPUSH
14129: CALL_OW 88
14133: GO 14192
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
14135: LD_EXP 27
14139: PPUSH
14140: LD_INT 26
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 72
14154: PPUSH
14155: LD_STRING DArm-Flank-a-2
14157: PPUSH
14158: CALL 224 0 2
14162: NOT
14163: IFFALSE 14192
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
14165: LD_EXP 27
14169: PPUSH
14170: LD_INT 26
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PPUSH
14180: CALL_OW 72
14184: PPUSH
14185: LD_STRING DArm-Flank-a-2
14187: PPUSH
14188: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14192: LD_EXP 15
14196: PPUSH
14197: LD_STRING DH-Flank-3
14199: PPUSH
14200: CALL_OW 88
// DialogueOff ;
14204: CALL_OW 7
// end ;
14208: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14209: LD_EXP 10
14213: IFFALSE 14222
14215: PUSH
14216: LD_EXP 7
14220: NOT
14221: AND
14222: IFFALSE 14446
14224: GO 14226
14226: DISABLE
// begin DialogueOn ;
14227: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14231: LD_EXP 15
14235: PPUSH
14236: LD_STRING DH-USRC-1
14238: PPUSH
14239: CALL_OW 88
// if IsOk ( Markov ) then
14243: LD_EXP 22
14247: PPUSH
14248: CALL_OW 302
14252: IFFALSE 14268
// Say ( Markov , DMar-USRC-2 ) else
14254: LD_EXP 22
14258: PPUSH
14259: LD_STRING DMar-USRC-2
14261: PPUSH
14262: CALL_OW 88
14266: GO 14325
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14268: LD_EXP 27
14272: PPUSH
14273: LD_INT 26
14275: PUSH
14276: LD_INT 1
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 72
14287: PPUSH
14288: LD_STRING DArm-USRC-a-2
14290: PPUSH
14291: CALL 224 0 2
14295: NOT
14296: IFFALSE 14325
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14298: LD_EXP 27
14302: PPUSH
14303: LD_INT 26
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 72
14317: PPUSH
14318: LD_STRING DArf-USRC-a-2
14320: PPUSH
14321: CALL 224 0 2
// DialogueOff ;
14325: CALL_OW 7
// wait ( 0 0$10 ) ;
14329: LD_INT 350
14331: PPUSH
14332: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14336: LD_EXP 15
14340: PPUSH
14341: LD_STRING DH-USRC-3
14343: PPUSH
14344: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14348: LD_INT 35
14350: PPUSH
14351: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 30
14370: PUSH
14371: LD_INT 36
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: CALL_OW 292
14395: IFFALSE 14348
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14397: LD_INT 22
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 30
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14434: LD_EXP 15
14438: PPUSH
14439: LD_STRING DH-USRCFound-1
14441: PPUSH
14442: CALL_OW 88
// end ;
14446: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14447: LD_EXP 20
14451: PPUSH
14452: CALL_OW 256
14456: PUSH
14457: LD_INT 3
14459: LESS
14460: IFFALSE 14497
14462: GO 14464
14464: DISABLE
// begin DialogueOn ;
14465: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14469: LD_EXP 20
14473: PPUSH
14474: LD_STRING DK-Dead-1
14476: PPUSH
14477: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14481: LD_EXP 20
14485: PPUSH
14486: LD_STRING DK-Dead-2
14488: PPUSH
14489: CALL_OW 91
// DialogueOff ;
14493: CALL_OW 7
// end ;
14497: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14498: LD_INT 22
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: LD_INT 35
14513: PUSH
14514: LD_INT 28
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 34
14523: PUSH
14524: LD_INT 28
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: IFFALSE 14557
14546: GO 14548
14548: DISABLE
// hasRockets := true ;
14549: LD_ADDR_EXP 9
14553: PUSH
14554: LD_INT 1
14556: ST_TO_ADDR
14557: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14558: LD_EXP 8
14562: IFFALSE 14581
14564: PUSH
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: NOT
14580: AND
14581: IFFALSE 15243
14583: GO 14585
14585: DISABLE
// begin DialogueOn ;
14586: CALL_OW 6
// if vehLossCounter = 0 then
14590: LD_EXP 14
14594: PUSH
14595: LD_INT 0
14597: EQUAL
14598: IFFALSE 14607
// SetAchievement ( ACH_UNTOUCH ) ;
14600: LD_STRING ACH_UNTOUCH
14602: PPUSH
14603: CALL_OW 543
// if tick < 35 35$00 then
14607: LD_OWVAR 1
14611: PUSH
14612: LD_INT 73500
14614: LESS
14615: IFFALSE 14624
// SetAchievement ( ACH_HSPEED_7 ) ;
14617: LD_STRING ACH_HSPEED_7
14619: PPUSH
14620: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14624: LD_EXP 15
14628: PPUSH
14629: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14633: LD_EXP 15
14637: PPUSH
14638: LD_STRING DH-End-1
14640: PPUSH
14641: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14645: LD_EXP 23
14649: PPUSH
14650: LD_STRING DShar-End-2
14652: PPUSH
14653: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14657: LD_EXP 20
14661: PPUSH
14662: LD_STRING DK-End-3
14664: PPUSH
14665: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14669: LD_EXP 15
14673: PPUSH
14674: LD_STRING DH-End-4
14676: PPUSH
14677: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14681: LD_EXP 23
14685: PPUSH
14686: LD_STRING DShar-End-5
14688: PPUSH
14689: CALL_OW 94
// if IsOk ( Markov ) then
14693: LD_EXP 22
14697: PPUSH
14698: CALL_OW 302
14702: IFFALSE 14716
// Say ( Kaia , DK-End-6 ) ;
14704: LD_EXP 20
14708: PPUSH
14709: LD_STRING DK-End-6
14711: PPUSH
14712: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14716: LD_EXP 20
14720: PPUSH
14721: LD_STRING DK-End-7
14723: PPUSH
14724: CALL_OW 88
// if IsOk ( Kaia ) then
14728: LD_EXP 20
14732: PPUSH
14733: CALL_OW 302
14737: IFFALSE 14775
// begin Say ( Givi , DG-End-8 ) ;
14739: LD_EXP 16
14743: PPUSH
14744: LD_STRING DG-End-8
14746: PPUSH
14747: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14751: LD_EXP 16
14755: PPUSH
14756: LD_STRING DG-End-9
14758: PPUSH
14759: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14763: LD_EXP 15
14767: PPUSH
14768: LD_STRING DH-End-10
14770: PPUSH
14771: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14775: LD_EXP 15
14779: PPUSH
14780: LD_STRING DH-End-11
14782: PPUSH
14783: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14787: LD_INT 7
14789: PPUSH
14790: LD_INT 2
14792: PPUSH
14793: CALL_OW 321
14797: PUSH
14798: LD_INT 2
14800: EQUAL
14801: IFFALSE 14815
// AddMedal ( med1 , 1 ) else
14803: LD_STRING med1
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 101
14813: GO 14826
// AddMedal ( med1 , - 1 ) ;
14815: LD_STRING med1
14817: PPUSH
14818: LD_INT 1
14820: NEG
14821: PPUSH
14822: CALL_OW 101
// if hasRockets then
14826: LD_EXP 9
14830: IFFALSE 14844
// AddMedal ( med2 , 1 ) else
14832: LD_STRING med2
14834: PPUSH
14835: LD_INT 1
14837: PPUSH
14838: CALL_OW 101
14842: GO 14855
// AddMedal ( med2 , - 1 ) ;
14844: LD_STRING med2
14846: PPUSH
14847: LD_INT 1
14849: NEG
14850: PPUSH
14851: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14855: LD_OWVAR 1
14859: PUSH
14860: LD_INT 105000
14862: PUSH
14863: LD_INT 94500
14865: PUSH
14866: LD_INT 84000
14868: PUSH
14869: LD_INT 73500
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: LD_OWVAR 67
14882: ARRAY
14883: LESS
14884: IFFALSE 14898
// AddMedal ( med3 , 1 ) else
14886: LD_STRING med3
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 101
14896: GO 14909
// AddMedal ( med3 , - 1 ) ;
14898: LD_STRING med3
14900: PPUSH
14901: LD_INT 1
14903: NEG
14904: PPUSH
14905: CALL_OW 101
// GiveMedals ( MAIN ) ;
14909: LD_STRING MAIN
14911: PPUSH
14912: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14916: LD_INT 22
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 23
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: PPUSH
14951: CALL_OW 69
14955: PPUSH
14956: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14960: LD_EXP 30
14964: PPUSH
14965: LD_STRING 07_UsCommander
14967: PPUSH
14968: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14972: LD_INT 22
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 23
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 69
15011: PUSH
15012: LD_EXP 30
15016: DIFF
15017: PPUSH
15018: LD_STRING 07_Americans
15020: PPUSH
15021: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
15025: LD_EXP 15
15029: PPUSH
15030: LD_STRING 07_Heike
15032: PPUSH
15033: CALL_OW 38
// if Aviradze then
15037: LD_EXP 26
15041: IFFALSE 15055
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
15043: LD_EXP 26
15047: PPUSH
15048: LD_STRING 07_Aviradze
15050: PPUSH
15051: CALL_OW 38
// if Ibrahim then
15055: LD_EXP 18
15059: IFFALSE 15073
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
15061: LD_EXP 18
15065: PPUSH
15066: LD_STRING 07_Ibrahim
15068: PPUSH
15069: CALL_OW 38
// if Kamil then
15073: LD_EXP 19
15077: IFFALSE 15091
// SaveCharacters ( Kamil , 07_Kamil ) ;
15079: LD_EXP 19
15083: PPUSH
15084: LD_STRING 07_Kamil
15086: PPUSH
15087: CALL_OW 38
// if Sophia then
15091: LD_EXP 21
15095: IFFALSE 15109
// SaveCharacters ( Sophia , 07_Sophia ) ;
15097: LD_EXP 21
15101: PPUSH
15102: LD_STRING 07_Sophia
15104: PPUSH
15105: CALL_OW 38
// if Kaia then
15109: LD_EXP 20
15113: IFFALSE 15127
// SaveCharacters ( Kaia , 07_Kaia ) ;
15115: LD_EXP 20
15119: PPUSH
15120: LD_STRING 07_Kaia
15122: PPUSH
15123: CALL_OW 38
// if Givi then
15127: LD_EXP 16
15131: IFFALSE 15145
// SaveCharacters ( Givi , 07_Givi ) ;
15133: LD_EXP 16
15137: PPUSH
15138: LD_STRING 07_Givi
15140: PPUSH
15141: CALL_OW 38
// if Mike then
15145: LD_EXP 17
15149: IFFALSE 15163
// SaveCharacters ( Mike , 07_Mike ) ;
15151: LD_EXP 17
15155: PPUSH
15156: LD_STRING 07_Mike
15158: PPUSH
15159: CALL_OW 38
// if Markov then
15163: LD_EXP 22
15167: IFFALSE 15181
// SaveCharacters ( Markov , 07_Markov ) ;
15169: LD_EXP 22
15173: PPUSH
15174: LD_STRING 07_Markov
15176: PPUSH
15177: CALL_OW 38
// if Kurt then
15181: LD_EXP 25
15185: IFFALSE 15199
// SaveCharacters ( Kurt , 07_Kurt ) ;
15187: LD_EXP 25
15191: PPUSH
15192: LD_STRING 07_Kurt
15194: PPUSH
15195: CALL_OW 38
// if Olaf then
15199: LD_EXP 24
15203: IFFALSE 15217
// SaveCharacters ( Olaf , 07_Olaf ) ;
15205: LD_EXP 24
15209: PPUSH
15210: LD_STRING 07_Olaf
15212: PPUSH
15213: CALL_OW 38
// if heikeSecondSquad then
15217: LD_EXP 27
15221: IFFALSE 15235
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15223: LD_EXP 27
15227: PPUSH
15228: LD_STRING 07_others
15230: PPUSH
15231: CALL_OW 38
// YouWin ;
15235: CALL_OW 103
// DialogueOff ;
15239: CALL_OW 7
// end ; end_of_file
15243: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15244: LD_INT 7
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 287
15254: PUSH
15255: LD_INT 12
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: LD_INT 8
15263: PUSH
15264: LD_INT 8
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: PUSH
15273: LD_OWVAR 67
15277: ARRAY
15278: LESS
15279: IFFALSE 15306
15281: GO 15283
15283: DISABLE
// begin enable ;
15284: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15285: LD_INT 1
15287: PPUSH
15288: LD_INT 5
15290: PPUSH
15291: CALL_OW 12
15295: PPUSH
15296: LD_INT 7
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 55
// end ;
15306: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15307: LD_INT 8
15309: PPUSH
15310: LD_INT 1
15312: PPUSH
15313: CALL_OW 287
15317: PUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_INT 17
15326: PUSH
15327: LD_INT 14
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_OWVAR 67
15340: ARRAY
15341: LESS
15342: IFFALSE 15354
15344: PUSH
15345: LD_OWVAR 1
15349: PUSH
15350: LD_INT 50400
15352: LESS
15353: AND
15354: IFFALSE 15381
15356: GO 15358
15358: DISABLE
// begin enable ;
15359: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15360: LD_INT 1
15362: PPUSH
15363: LD_INT 5
15365: PPUSH
15366: CALL_OW 12
15370: PPUSH
15371: LD_INT 8
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: CALL_OW 55
// end ;
15381: END
// every 0 0$40 trigger tick < 8 8$10 do
15382: LD_OWVAR 1
15386: PUSH
15387: LD_INT 17150
15389: LESS
15390: IFFALSE 15423
15392: GO 15394
15394: DISABLE
// begin enable ;
15395: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15396: LD_INT 1
15398: PPUSH
15399: LD_INT 5
15401: PPUSH
15402: CALL_OW 12
15406: PPUSH
15407: LD_INT 130
15409: PPUSH
15410: LD_INT 18
15412: PPUSH
15413: LD_INT 12
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 56
// end ;
15423: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15424: LD_OWVAR 1
15428: PUSH
15429: LD_INT 12950
15431: LESS
15432: IFFALSE 15465
15434: GO 15436
15436: DISABLE
// begin enable ;
15437: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15438: LD_INT 1
15440: PPUSH
15441: LD_INT 5
15443: PPUSH
15444: CALL_OW 12
15448: PPUSH
15449: LD_INT 172
15451: PPUSH
15452: LD_INT 97
15454: PPUSH
15455: LD_INT 12
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: CALL_OW 56
// end ;
15465: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15466: LD_INT 20
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 287
15476: PUSH
15477: LD_INT 6
15479: LESS
15480: IFFALSE 15507
15482: GO 15484
15484: DISABLE
// begin enable ;
15485: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15486: LD_INT 1
15488: PPUSH
15489: LD_INT 5
15491: PPUSH
15492: CALL_OW 12
15496: PPUSH
15497: LD_INT 20
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 55
// end ; end_of_file
15507: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15508: LD_INT 0
15510: PPUSH
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
// uc_side := 3 ;
15515: LD_ADDR_OWVAR 20
15519: PUSH
15520: LD_INT 3
15522: ST_TO_ADDR
// uc_nation := 3 ;
15523: LD_ADDR_OWVAR 21
15527: PUSH
15528: LD_INT 3
15530: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_INT 184
15538: PUSH
15539: LD_INT 144
15541: PUSH
15542: LD_INT 5
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 191
15552: PUSH
15553: LD_INT 147
15555: PUSH
15556: LD_INT 5
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 202
15566: PUSH
15567: LD_INT 151
15569: PUSH
15570: LD_INT 4
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 210
15580: PUSH
15581: LD_INT 152
15583: PUSH
15584: LD_INT 4
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: ST_TO_ADDR
// for i := 1 to 3 do
15598: LD_ADDR_VAR 0 2
15602: PUSH
15603: DOUBLE
15604: LD_INT 1
15606: DEC
15607: ST_TO_ADDR
15608: LD_INT 3
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15781
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15614: LD_INT 24
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_INT 43
15625: PUSH
15626: LD_INT 44
15628: PUSH
15629: LD_INT 46
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: LD_INT 3
15644: MOD
15645: PUSH
15646: LD_INT 1
15648: PLUS
15649: ARRAY
15650: PPUSH
15651: LD_INT 40
15653: PPUSH
15654: CALL 21646 0 5
// veh := CreateVehicle ;
15658: LD_ADDR_VAR 0 5
15662: PUSH
15663: CALL_OW 45
15667: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15668: LD_VAR 0 5
15672: PPUSH
15673: LD_VAR 0 3
15677: PUSH
15678: LD_VAR 0 2
15682: ARRAY
15683: PUSH
15684: LD_INT 3
15686: ARRAY
15687: PPUSH
15688: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15692: LD_VAR 0 5
15696: PPUSH
15697: LD_VAR 0 3
15701: PUSH
15702: LD_VAR 0 2
15706: ARRAY
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: LD_VAR 0 3
15716: PUSH
15717: LD_VAR 0 2
15721: ARRAY
15722: PUSH
15723: LD_INT 2
15725: ARRAY
15726: PPUSH
15727: LD_INT 0
15729: PPUSH
15730: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15734: LD_INT 0
15736: PPUSH
15737: LD_INT 6
15739: PUSH
15740: LD_INT 7
15742: PUSH
15743: LD_INT 8
15745: PUSH
15746: LD_INT 8
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: LD_OWVAR 67
15759: ARRAY
15760: PPUSH
15761: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15765: CALL_OW 44
15769: PPUSH
15770: LD_VAR 0 5
15774: PPUSH
15775: CALL_OW 52
// end ;
15779: GO 15611
15781: POP
15782: POP
// for i := 1 to 4 do
15783: LD_ADDR_VAR 0 2
15787: PUSH
15788: DOUBLE
15789: LD_INT 1
15791: DEC
15792: ST_TO_ADDR
15793: LD_INT 4
15795: PUSH
15796: FOR_TO
15797: IFFALSE 15863
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15799: LD_INT 0
15801: PPUSH
15802: LD_INT 6
15804: PUSH
15805: LD_INT 7
15807: PUSH
15808: LD_INT 8
15810: PUSH
15811: LD_INT 8
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: LD_OWVAR 67
15824: ARRAY
15825: PPUSH
15826: CALL_OW 381
// un := CreateHuman ;
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: CALL_OW 44
15839: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15840: LD_VAR 0 4
15844: PPUSH
15845: LD_INT 185
15847: PPUSH
15848: LD_INT 145
15850: PPUSH
15851: LD_INT 6
15853: PPUSH
15854: LD_INT 0
15856: PPUSH
15857: CALL_OW 50
// end ;
15861: GO 15796
15863: POP
15864: POP
// end ;
15865: LD_VAR 0 1
15869: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15870: LD_INT 0
15872: PPUSH
15873: PPUSH
15874: PPUSH
// uc_side := 3 ;
15875: LD_ADDR_OWVAR 20
15879: PUSH
15880: LD_INT 3
15882: ST_TO_ADDR
// if Difficulty > 1 then
15883: LD_OWVAR 67
15887: PUSH
15888: LD_INT 1
15890: GREATER
15891: IFFALSE 16053
// begin uc_nation := 0 ;
15893: LD_ADDR_OWVAR 21
15897: PUSH
15898: LD_INT 0
15900: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15901: LD_ADDR_VAR 0 2
15905: PUSH
15906: DOUBLE
15907: LD_INT 1
15909: DEC
15910: ST_TO_ADDR
15911: LD_INT 4
15913: PUSH
15914: LD_INT 5
15916: PUSH
15917: LD_INT 6
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: PUSH
15925: LD_OWVAR 67
15929: PUSH
15930: LD_INT 1
15932: PLUS
15933: ARRAY
15934: PUSH
15935: FOR_TO
15936: IFFALSE 16051
// begin hc_class := class_apeman_soldier ;
15938: LD_ADDR_OWVAR 28
15942: PUSH
15943: LD_INT 15
15945: ST_TO_ADDR
// hc_gallery :=  ;
15946: LD_ADDR_OWVAR 33
15950: PUSH
15951: LD_STRING 
15953: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15954: LD_ADDR_OWVAR 26
15958: PUSH
15959: LD_STRING Treci
15961: PUSH
15962: LD_STRING Ivan
15964: PUSH
15965: LD_STRING Yaromir
15967: PUSH
15968: LD_STRING Nadzieia
15970: PUSH
15971: LD_STRING Krasna
15973: PUSH
15974: LD_STRING Piaty
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_INT 6
15990: PPUSH
15991: CALL_OW 12
15995: ARRAY
15996: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15997: LD_ADDR_OWVAR 31
16001: PUSH
16002: LD_INT 5
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: ST_TO_ADDR
// hc_sex := sex_male ;
16020: LD_ADDR_OWVAR 27
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
16028: CALL_OW 44
16032: PPUSH
16033: LD_INT 178
16035: PPUSH
16036: LD_INT 148
16038: PPUSH
16039: LD_INT 6
16041: PPUSH
16042: LD_INT 0
16044: PPUSH
16045: CALL_OW 50
// end ;
16049: GO 15935
16051: POP
16052: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
16053: LD_ADDR_VAR 0 2
16057: PUSH
16058: DOUBLE
16059: LD_INT 1
16061: DEC
16062: ST_TO_ADDR
16063: LD_INT 2
16065: PUSH
16066: LD_INT 3
16068: PUSH
16069: LD_INT 4
16071: PUSH
16072: LD_INT 5
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: LD_OWVAR 67
16085: ARRAY
16086: PUSH
16087: FOR_TO
16088: IFFALSE 16255
// begin uc_nation := 3 ;
16090: LD_ADDR_OWVAR 21
16094: PUSH
16095: LD_INT 3
16097: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
16098: LD_INT 22
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: LD_INT 45
16109: PUSH
16110: LD_INT 43
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: PUSH
16121: LD_VAR 0 2
16125: PUSH
16126: LD_INT 3
16128: MOD
16129: PUSH
16130: LD_INT 1
16132: PLUS
16133: ARRAY
16134: PPUSH
16135: LD_INT 44
16137: PPUSH
16138: CALL 21646 0 5
// veh := CreateVehicle ;
16142: LD_ADDR_VAR 0 3
16146: PUSH
16147: CALL_OW 45
16151: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16152: LD_VAR 0 3
16156: PPUSH
16157: LD_INT 4
16159: PPUSH
16160: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
16164: LD_VAR 0 3
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: LD_INT 0
16174: PPUSH
16175: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16179: LD_INT 0
16181: PPUSH
16182: LD_INT 6
16184: PUSH
16185: LD_INT 7
16187: PUSH
16188: LD_INT 8
16190: PUSH
16191: LD_INT 8
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: PUSH
16200: LD_OWVAR 67
16204: ARRAY
16205: PPUSH
16206: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16210: CALL_OW 44
16214: PPUSH
16215: LD_VAR 0 3
16219: PPUSH
16220: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16224: LD_VAR 0 3
16228: PPUSH
16229: LD_INT 178
16231: PUSH
16232: LD_INT 137
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: PPUSH
16242: CALL 57582 0 2
// wait ( 0 0$2 ) ;
16246: LD_INT 70
16248: PPUSH
16249: CALL_OW 67
// end ;
16253: GO 16087
16255: POP
16256: POP
// end ;
16257: LD_VAR 0 1
16261: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16262: LD_INT 22
16264: PUSH
16265: LD_INT 3
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 32
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: IFFALSE 16378
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
// begin enable ;
16299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16300: LD_ADDR_VAR 0 2
16304: PUSH
16305: LD_INT 22
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 32
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: ST_TO_ADDR
// for i in tmp do
16334: LD_ADDR_VAR 0 1
16338: PUSH
16339: LD_VAR 0 2
16343: PUSH
16344: FOR_IN
16345: IFFALSE 16376
// if GetFuel ( i ) < 3 then
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 261
16356: PUSH
16357: LD_INT 3
16359: LESS
16360: IFFALSE 16374
// SetFuel ( i , 3 ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_INT 3
16369: PPUSH
16370: CALL_OW 240
16374: GO 16344
16376: POP
16377: POP
// end ;
16378: PPOPN 2
16380: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16381: LD_EXP 8
16385: IFFALSE 16417
16387: PUSH
16388: LD_INT 22
16390: PUSH
16391: LD_INT 3
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 21
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: AND
16417: IFFALSE 16681
16419: GO 16421
16421: DISABLE
16422: LD_INT 0
16424: PPUSH
16425: PPUSH
16426: PPUSH
// begin enable ;
16427: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_INT 3
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 25
16445: PUSH
16446: LD_INT 3
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 3
16455: PUSH
16456: LD_INT 55
16458: PUSH
16459: EMPTY
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL_OW 69
16475: ST_TO_ADDR
// if mech then
16476: LD_VAR 0 2
16480: IFFALSE 16550
// for i in mech do
16482: LD_ADDR_VAR 0 1
16486: PUSH
16487: LD_VAR 0 2
16491: PUSH
16492: FOR_IN
16493: IFFALSE 16548
// begin if IsInArea ( i , escapeArea ) then
16495: LD_VAR 0 1
16499: PPUSH
16500: LD_INT 13
16502: PPUSH
16503: CALL_OW 308
16507: IFFALSE 16520
// RemoveUnit ( i ) else
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 64
16518: GO 16546
// if IsOk ( i ) then
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 302
16529: IFFALSE 16546
// ComMoveXY ( i , 196 , 155 ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_INT 196
16538: PPUSH
16539: LD_INT 155
16541: PPUSH
16542: CALL_OW 111
// end ;
16546: GO 16492
16548: POP
16549: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 2
16567: PUSH
16568: LD_INT 25
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 25
16580: PUSH
16581: LD_INT 15
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 21
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 50
16606: PUSH
16607: EMPTY
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: PPUSH
16615: CALL_OW 69
16619: ST_TO_ADDR
// if tmp then
16620: LD_VAR 0 3
16624: IFFALSE 16681
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16626: LD_VAR 0 3
16630: PPUSH
16631: LD_INT 171
16633: PUSH
16634: LD_INT 106
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 145
16643: PUSH
16644: LD_INT 69
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 132
16653: PUSH
16654: LD_INT 38
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 126
16663: PUSH
16664: LD_INT 15
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL 57582 0 2
// end ; end_of_file
16681: PPOPN 3
16683: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
// if exist_mode then
16688: LD_VAR 0 2
16692: IFFALSE 16738
// begin unit := CreateCharacter ( prefix & ident ) ;
16694: LD_ADDR_VAR 0 5
16698: PUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_VAR 0 1
16708: STR
16709: PPUSH
16710: CALL_OW 34
16714: ST_TO_ADDR
// if unit then
16715: LD_VAR 0 5
16719: IFFALSE 16736
// DeleteCharacters ( prefix & ident ) ;
16721: LD_VAR 0 3
16725: PUSH
16726: LD_VAR 0 1
16730: STR
16731: PPUSH
16732: CALL_OW 40
// end else
16736: GO 16753
// unit := NewCharacter ( ident ) ;
16738: LD_ADDR_VAR 0 5
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 25
16752: ST_TO_ADDR
// result := unit ;
16753: LD_ADDR_VAR 0 4
16757: PUSH
16758: LD_VAR 0 5
16762: ST_TO_ADDR
// end ;
16763: LD_VAR 0 4
16767: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16768: LD_INT 0
16770: PPUSH
16771: PPUSH
// if exist_mode then
16772: LD_VAR 0 2
16776: IFFALSE 16801
// unit := CreateCharacter ( prefix & ident ) else
16778: LD_ADDR_VAR 0 5
16782: PUSH
16783: LD_VAR 0 3
16787: PUSH
16788: LD_VAR 0 1
16792: STR
16793: PPUSH
16794: CALL_OW 34
16798: ST_TO_ADDR
16799: GO 16816
// unit := NewCharacter ( ident ) ;
16801: LD_ADDR_VAR 0 5
16805: PUSH
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL_OW 25
16815: ST_TO_ADDR
// result := unit ;
16816: LD_ADDR_VAR 0 4
16820: PUSH
16821: LD_VAR 0 5
16825: ST_TO_ADDR
// end ;
16826: LD_VAR 0 4
16830: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16831: LD_INT 0
16833: PPUSH
16834: PPUSH
// if not side or not nation then
16835: LD_VAR 0 1
16839: NOT
16840: IFTRUE 16849
16842: PUSH
16843: LD_VAR 0 2
16847: NOT
16848: OR
16849: IFFALSE 16853
// exit ;
16851: GO 17623
// case nation of nation_american :
16853: LD_VAR 0 2
16857: PUSH
16858: LD_INT 1
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 17080
16866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16867: LD_ADDR_VAR 0 4
16871: PUSH
16872: LD_INT 35
16874: PUSH
16875: LD_INT 45
16877: PUSH
16878: LD_INT 46
16880: PUSH
16881: LD_INT 47
16883: PUSH
16884: LD_INT 82
16886: PUSH
16887: LD_INT 83
16889: PUSH
16890: LD_INT 84
16892: PUSH
16893: LD_INT 85
16895: PUSH
16896: LD_INT 86
16898: PUSH
16899: LD_INT 1
16901: PUSH
16902: LD_INT 2
16904: PUSH
16905: LD_INT 6
16907: PUSH
16908: LD_INT 15
16910: PUSH
16911: LD_INT 16
16913: PUSH
16914: LD_INT 7
16916: PUSH
16917: LD_INT 12
16919: PUSH
16920: LD_INT 13
16922: PUSH
16923: LD_INT 10
16925: PUSH
16926: LD_INT 14
16928: PUSH
16929: LD_INT 20
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_INT 25
16940: PUSH
16941: LD_INT 32
16943: PUSH
16944: LD_INT 27
16946: PUSH
16947: LD_INT 36
16949: PUSH
16950: LD_INT 69
16952: PUSH
16953: LD_INT 39
16955: PUSH
16956: LD_INT 34
16958: PUSH
16959: LD_INT 40
16961: PUSH
16962: LD_INT 48
16964: PUSH
16965: LD_INT 49
16967: PUSH
16968: LD_INT 50
16970: PUSH
16971: LD_INT 51
16973: PUSH
16974: LD_INT 52
16976: PUSH
16977: LD_INT 53
16979: PUSH
16980: LD_INT 54
16982: PUSH
16983: LD_INT 55
16985: PUSH
16986: LD_INT 56
16988: PUSH
16989: LD_INT 57
16991: PUSH
16992: LD_INT 58
16994: PUSH
16995: LD_INT 59
16997: PUSH
16998: LD_INT 60
17000: PUSH
17001: LD_INT 61
17003: PUSH
17004: LD_INT 62
17006: PUSH
17007: LD_INT 80
17009: PUSH
17010: LD_INT 82
17012: PUSH
17013: LD_INT 83
17015: PUSH
17016: LD_INT 84
17018: PUSH
17019: LD_INT 85
17021: PUSH
17022: LD_INT 86
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: ST_TO_ADDR
17078: GO 17545
17080: LD_INT 2
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17314
17088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17089: LD_ADDR_VAR 0 4
17093: PUSH
17094: LD_INT 35
17096: PUSH
17097: LD_INT 45
17099: PUSH
17100: LD_INT 46
17102: PUSH
17103: LD_INT 47
17105: PUSH
17106: LD_INT 82
17108: PUSH
17109: LD_INT 83
17111: PUSH
17112: LD_INT 84
17114: PUSH
17115: LD_INT 85
17117: PUSH
17118: LD_INT 87
17120: PUSH
17121: LD_INT 70
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: LD_INT 11
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 4
17135: PUSH
17136: LD_INT 5
17138: PUSH
17139: LD_INT 6
17141: PUSH
17142: LD_INT 15
17144: PUSH
17145: LD_INT 18
17147: PUSH
17148: LD_INT 7
17150: PUSH
17151: LD_INT 17
17153: PUSH
17154: LD_INT 8
17156: PUSH
17157: LD_INT 20
17159: PUSH
17160: LD_INT 21
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_INT 72
17168: PUSH
17169: LD_INT 26
17171: PUSH
17172: LD_INT 69
17174: PUSH
17175: LD_INT 39
17177: PUSH
17178: LD_INT 40
17180: PUSH
17181: LD_INT 41
17183: PUSH
17184: LD_INT 42
17186: PUSH
17187: LD_INT 43
17189: PUSH
17190: LD_INT 48
17192: PUSH
17193: LD_INT 49
17195: PUSH
17196: LD_INT 50
17198: PUSH
17199: LD_INT 51
17201: PUSH
17202: LD_INT 52
17204: PUSH
17205: LD_INT 53
17207: PUSH
17208: LD_INT 54
17210: PUSH
17211: LD_INT 55
17213: PUSH
17214: LD_INT 56
17216: PUSH
17217: LD_INT 60
17219: PUSH
17220: LD_INT 61
17222: PUSH
17223: LD_INT 62
17225: PUSH
17226: LD_INT 66
17228: PUSH
17229: LD_INT 67
17231: PUSH
17232: LD_INT 68
17234: PUSH
17235: LD_INT 81
17237: PUSH
17238: LD_INT 82
17240: PUSH
17241: LD_INT 83
17243: PUSH
17244: LD_INT 84
17246: PUSH
17247: LD_INT 85
17249: PUSH
17250: LD_INT 87
17252: PUSH
17253: LD_INT 88
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: ST_TO_ADDR
17312: GO 17545
17314: LD_INT 3
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17544
17322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17323: LD_ADDR_VAR 0 4
17327: PUSH
17328: LD_INT 46
17330: PUSH
17331: LD_INT 47
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 82
17342: PUSH
17343: LD_INT 83
17345: PUSH
17346: LD_INT 84
17348: PUSH
17349: LD_INT 85
17351: PUSH
17352: LD_INT 86
17354: PUSH
17355: LD_INT 11
17357: PUSH
17358: LD_INT 9
17360: PUSH
17361: LD_INT 20
17363: PUSH
17364: LD_INT 19
17366: PUSH
17367: LD_INT 21
17369: PUSH
17370: LD_INT 24
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 25
17378: PUSH
17379: LD_INT 28
17381: PUSH
17382: LD_INT 29
17384: PUSH
17385: LD_INT 30
17387: PUSH
17388: LD_INT 31
17390: PUSH
17391: LD_INT 37
17393: PUSH
17394: LD_INT 38
17396: PUSH
17397: LD_INT 32
17399: PUSH
17400: LD_INT 27
17402: PUSH
17403: LD_INT 33
17405: PUSH
17406: LD_INT 69
17408: PUSH
17409: LD_INT 39
17411: PUSH
17412: LD_INT 34
17414: PUSH
17415: LD_INT 40
17417: PUSH
17418: LD_INT 71
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 44
17426: PUSH
17427: LD_INT 48
17429: PUSH
17430: LD_INT 49
17432: PUSH
17433: LD_INT 50
17435: PUSH
17436: LD_INT 51
17438: PUSH
17439: LD_INT 52
17441: PUSH
17442: LD_INT 53
17444: PUSH
17445: LD_INT 54
17447: PUSH
17448: LD_INT 55
17450: PUSH
17451: LD_INT 56
17453: PUSH
17454: LD_INT 57
17456: PUSH
17457: LD_INT 58
17459: PUSH
17460: LD_INT 59
17462: PUSH
17463: LD_INT 63
17465: PUSH
17466: LD_INT 64
17468: PUSH
17469: LD_INT 65
17471: PUSH
17472: LD_INT 82
17474: PUSH
17475: LD_INT 83
17477: PUSH
17478: LD_INT 84
17480: PUSH
17481: LD_INT 85
17483: PUSH
17484: LD_INT 86
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: ST_TO_ADDR
17542: GO 17545
17544: POP
// if state > - 1 and state < 3 then
17545: LD_VAR 0 3
17549: PUSH
17550: LD_INT 1
17552: NEG
17553: GREATER
17554: IFFALSE 17566
17556: PUSH
17557: LD_VAR 0 3
17561: PUSH
17562: LD_INT 3
17564: LESS
17565: AND
17566: IFFALSE 17623
// for i in result do
17568: LD_ADDR_VAR 0 5
17572: PUSH
17573: LD_VAR 0 4
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17621
// if GetTech ( i , side ) <> state then
17581: LD_VAR 0 5
17585: PPUSH
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 321
17595: PUSH
17596: LD_VAR 0 3
17600: NONEQUAL
17601: IFFALSE 17619
// result := result diff i ;
17603: LD_ADDR_VAR 0 4
17607: PUSH
17608: LD_VAR 0 4
17612: PUSH
17613: LD_VAR 0 5
17617: DIFF
17618: ST_TO_ADDR
17619: GO 17578
17621: POP
17622: POP
// end ;
17623: LD_VAR 0 4
17627: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
// result := true ;
17633: LD_ADDR_VAR 0 3
17637: PUSH
17638: LD_INT 1
17640: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17641: LD_ADDR_VAR 0 5
17645: PUSH
17646: LD_VAR 0 2
17650: PPUSH
17651: CALL_OW 480
17655: ST_TO_ADDR
// if not tmp then
17656: LD_VAR 0 5
17660: NOT
17661: IFFALSE 17665
// exit ;
17663: GO 17714
// for i in tmp do
17665: LD_ADDR_VAR 0 4
17669: PUSH
17670: LD_VAR 0 5
17674: PUSH
17675: FOR_IN
17676: IFFALSE 17712
// if GetTech ( i , side ) <> state_researched then
17678: LD_VAR 0 4
17682: PPUSH
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 321
17692: PUSH
17693: LD_INT 2
17695: NONEQUAL
17696: IFFALSE 17710
// begin result := false ;
17698: LD_ADDR_VAR 0 3
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// exit ;
17706: POP
17707: POP
17708: GO 17714
// end ;
17710: GO 17675
17712: POP
17713: POP
// end ;
17714: LD_VAR 0 3
17718: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17719: LD_INT 0
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17734: LD_VAR 0 1
17738: NOT
17739: IFTRUE 17756
17741: PUSH
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 257
17751: PUSH
17752: LD_INT 9
17754: NONEQUAL
17755: OR
17756: IFFALSE 17760
// exit ;
17758: GO 18339
// side := GetSide ( unit ) ;
17760: LD_ADDR_VAR 0 9
17764: PUSH
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 255
17774: ST_TO_ADDR
// tech_space := tech_spacanom ;
17775: LD_ADDR_VAR 0 12
17779: PUSH
17780: LD_INT 29
17782: ST_TO_ADDR
// tech_time := tech_taurad ;
17783: LD_ADDR_VAR 0 13
17787: PUSH
17788: LD_INT 28
17790: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17791: LD_ADDR_VAR 0 11
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 310
17805: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17806: LD_VAR 0 11
17810: PPUSH
17811: CALL_OW 247
17815: PUSH
17816: LD_INT 2
17818: EQUAL
17819: IFFALSE 17823
// exit ;
17821: GO 18339
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17823: LD_ADDR_VAR 0 8
17827: PUSH
17828: LD_INT 81
17830: PUSH
17831: LD_VAR 0 9
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 3
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 3
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// if not tmp then
17866: LD_VAR 0 8
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 18339
// if in_unit then
17875: LD_VAR 0 11
17879: IFFALSE 17903
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17881: LD_ADDR_VAR 0 10
17885: PUSH
17886: LD_VAR 0 8
17890: PPUSH
17891: LD_VAR 0 11
17895: PPUSH
17896: CALL_OW 74
17900: ST_TO_ADDR
17901: GO 17923
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17903: LD_ADDR_VAR 0 10
17907: PUSH
17908: LD_VAR 0 8
17912: PPUSH
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 74
17922: ST_TO_ADDR
// if not enemy then
17923: LD_VAR 0 10
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 18339
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17932: LD_VAR 0 11
17936: IFFALSE 17958
17938: PUSH
17939: LD_VAR 0 11
17943: PPUSH
17944: LD_VAR 0 10
17948: PPUSH
17949: CALL_OW 296
17953: PUSH
17954: LD_INT 13
17956: GREATER
17957: AND
17958: IFTRUE 17980
17960: PUSH
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_VAR 0 10
17970: PPUSH
17971: CALL_OW 296
17975: PUSH
17976: LD_INT 12
17978: GREATER
17979: OR
17980: IFFALSE 17984
// exit ;
17982: GO 18339
// missile := [ 1 ] ;
17984: LD_ADDR_VAR 0 14
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17995: LD_VAR 0 9
17999: PPUSH
18000: LD_VAR 0 12
18004: PPUSH
18005: CALL_OW 325
18009: IFFALSE 18038
// missile := Replace ( missile , missile + 1 , 2 ) ;
18011: LD_ADDR_VAR 0 14
18015: PUSH
18016: LD_VAR 0 14
18020: PPUSH
18021: LD_VAR 0 14
18025: PUSH
18026: LD_INT 1
18028: PLUS
18029: PPUSH
18030: LD_INT 2
18032: PPUSH
18033: CALL_OW 1
18037: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18038: LD_VAR 0 9
18042: PPUSH
18043: LD_VAR 0 13
18047: PPUSH
18048: CALL_OW 325
18052: IFFALSE 18076
18054: PUSH
18055: LD_VAR 0 10
18059: PPUSH
18060: CALL_OW 255
18064: PPUSH
18065: LD_VAR 0 13
18069: PPUSH
18070: CALL_OW 325
18074: NOT
18075: AND
18076: IFFALSE 18105
// missile := Replace ( missile , missile + 1 , 3 ) ;
18078: LD_ADDR_VAR 0 14
18082: PUSH
18083: LD_VAR 0 14
18087: PPUSH
18088: LD_VAR 0 14
18092: PUSH
18093: LD_INT 1
18095: PLUS
18096: PPUSH
18097: LD_INT 3
18099: PPUSH
18100: CALL_OW 1
18104: ST_TO_ADDR
// if missile < 2 then
18105: LD_VAR 0 14
18109: PUSH
18110: LD_INT 2
18112: LESS
18113: IFFALSE 18117
// exit ;
18115: GO 18339
// x := GetX ( enemy ) ;
18117: LD_ADDR_VAR 0 4
18121: PUSH
18122: LD_VAR 0 10
18126: PPUSH
18127: CALL_OW 250
18131: ST_TO_ADDR
// y := GetY ( enemy ) ;
18132: LD_ADDR_VAR 0 5
18136: PUSH
18137: LD_VAR 0 10
18141: PPUSH
18142: CALL_OW 251
18146: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18147: LD_ADDR_VAR 0 6
18151: PUSH
18152: LD_VAR 0 4
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 12
18168: PLUS
18169: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18170: LD_ADDR_VAR 0 7
18174: PUSH
18175: LD_VAR 0 5
18179: PUSH
18180: LD_INT 1
18182: NEG
18183: PPUSH
18184: LD_INT 1
18186: PPUSH
18187: CALL_OW 12
18191: PLUS
18192: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18193: LD_VAR 0 6
18197: PPUSH
18198: LD_VAR 0 7
18202: PPUSH
18203: CALL_OW 488
18207: NOT
18208: IFFALSE 18230
// begin _x := x ;
18210: LD_ADDR_VAR 0 6
18214: PUSH
18215: LD_VAR 0 4
18219: ST_TO_ADDR
// _y := y ;
18220: LD_ADDR_VAR 0 7
18224: PUSH
18225: LD_VAR 0 5
18229: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18230: LD_ADDR_VAR 0 3
18234: PUSH
18235: LD_INT 1
18237: PPUSH
18238: LD_VAR 0 14
18242: PPUSH
18243: CALL_OW 12
18247: ST_TO_ADDR
// case i of 1 :
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 1
18255: DOUBLE
18256: EQUAL
18257: IFTRUE 18261
18259: GO 18278
18261: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18262: LD_VAR 0 1
18266: PPUSH
18267: LD_VAR 0 10
18271: PPUSH
18272: CALL_OW 115
18276: GO 18339
18278: LD_INT 2
18280: DOUBLE
18281: EQUAL
18282: IFTRUE 18286
18284: GO 18308
18286: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_VAR 0 6
18296: PPUSH
18297: LD_VAR 0 7
18301: PPUSH
18302: CALL_OW 153
18306: GO 18339
18308: LD_INT 3
18310: DOUBLE
18311: EQUAL
18312: IFTRUE 18316
18314: GO 18338
18316: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18317: LD_VAR 0 1
18321: PPUSH
18322: LD_VAR 0 6
18326: PPUSH
18327: LD_VAR 0 7
18331: PPUSH
18332: CALL_OW 154
18336: GO 18339
18338: POP
// end ;
18339: LD_VAR 0 2
18343: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18344: LD_INT 0
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
// if not unit or not building then
18352: LD_VAR 0 1
18356: NOT
18357: IFTRUE 18366
18359: PUSH
18360: LD_VAR 0 2
18364: NOT
18365: OR
18366: IFFALSE 18370
// exit ;
18368: GO 18528
// x := GetX ( building ) ;
18370: LD_ADDR_VAR 0 5
18374: PUSH
18375: LD_VAR 0 2
18379: PPUSH
18380: CALL_OW 250
18384: ST_TO_ADDR
// y := GetY ( building ) ;
18385: LD_ADDR_VAR 0 6
18389: PUSH
18390: LD_VAR 0 2
18394: PPUSH
18395: CALL_OW 251
18399: ST_TO_ADDR
// for i := 0 to 5 do
18400: LD_ADDR_VAR 0 4
18404: PUSH
18405: DOUBLE
18406: LD_INT 0
18408: DEC
18409: ST_TO_ADDR
18410: LD_INT 5
18412: PUSH
18413: FOR_TO
18414: IFFALSE 18526
// begin _x := ShiftX ( x , i , 3 ) ;
18416: LD_ADDR_VAR 0 7
18420: PUSH
18421: LD_VAR 0 5
18425: PPUSH
18426: LD_VAR 0 4
18430: PPUSH
18431: LD_INT 3
18433: PPUSH
18434: CALL_OW 272
18438: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18439: LD_ADDR_VAR 0 8
18443: PUSH
18444: LD_VAR 0 6
18448: PPUSH
18449: LD_VAR 0 4
18453: PPUSH
18454: LD_INT 3
18456: PPUSH
18457: CALL_OW 273
18461: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18462: LD_VAR 0 7
18466: PPUSH
18467: LD_VAR 0 8
18471: PPUSH
18472: CALL_OW 488
18476: NOT
18477: IFFALSE 18481
// continue ;
18479: GO 18413
// if HexInfo ( _x , _y ) = 0 then
18481: LD_VAR 0 7
18485: PPUSH
18486: LD_VAR 0 8
18490: PPUSH
18491: CALL_OW 428
18495: PUSH
18496: LD_INT 0
18498: EQUAL
18499: IFFALSE 18524
// begin ComMoveXY ( unit , _x , _y ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_VAR 0 7
18510: PPUSH
18511: LD_VAR 0 8
18515: PPUSH
18516: CALL_OW 111
// exit ;
18520: POP
18521: POP
18522: GO 18528
// end ; end ;
18524: GO 18413
18526: POP
18527: POP
// end ;
18528: LD_VAR 0 3
18532: RET
// export function ScanBase ( side , base_area ) ; begin
18533: LD_INT 0
18535: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18536: LD_ADDR_VAR 0 3
18540: PUSH
18541: LD_VAR 0 2
18545: PPUSH
18546: LD_INT 81
18548: PUSH
18549: LD_VAR 0 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PPUSH
18558: CALL_OW 70
18562: ST_TO_ADDR
// end ;
18563: LD_VAR 0 3
18567: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18568: LD_INT 0
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
// result := false ;
18574: LD_ADDR_VAR 0 2
18578: PUSH
18579: LD_INT 0
18581: ST_TO_ADDR
// side := GetSide ( unit ) ;
18582: LD_ADDR_VAR 0 3
18586: PUSH
18587: LD_VAR 0 1
18591: PPUSH
18592: CALL_OW 255
18596: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18597: LD_ADDR_VAR 0 4
18601: PUSH
18602: LD_VAR 0 1
18606: PPUSH
18607: CALL_OW 248
18611: ST_TO_ADDR
// case nat of 1 :
18612: LD_VAR 0 4
18616: PUSH
18617: LD_INT 1
18619: DOUBLE
18620: EQUAL
18621: IFTRUE 18625
18623: GO 18636
18625: POP
// tech := tech_lassight ; 2 :
18626: LD_ADDR_VAR 0 5
18630: PUSH
18631: LD_INT 12
18633: ST_TO_ADDR
18634: GO 18675
18636: LD_INT 2
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18655
18644: POP
// tech := tech_mortar ; 3 :
18645: LD_ADDR_VAR 0 5
18649: PUSH
18650: LD_INT 41
18652: ST_TO_ADDR
18653: GO 18675
18655: LD_INT 3
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18674
18663: POP
// tech := tech_bazooka ; end ;
18664: LD_ADDR_VAR 0 5
18668: PUSH
18669: LD_INT 44
18671: ST_TO_ADDR
18672: GO 18675
18674: POP
// if Researched ( side , tech ) then
18675: LD_VAR 0 3
18679: PPUSH
18680: LD_VAR 0 5
18684: PPUSH
18685: CALL_OW 325
18689: IFFALSE 18716
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18691: LD_ADDR_VAR 0 2
18695: PUSH
18696: LD_INT 5
18698: PUSH
18699: LD_INT 8
18701: PUSH
18702: LD_INT 9
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: PUSH
18710: LD_VAR 0 4
18714: ARRAY
18715: ST_TO_ADDR
// end ;
18716: LD_VAR 0 2
18720: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18721: LD_INT 0
18723: PPUSH
18724: PPUSH
18725: PPUSH
// if not mines then
18726: LD_VAR 0 2
18730: NOT
18731: IFFALSE 18735
// exit ;
18733: GO 18879
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18735: LD_ADDR_VAR 0 5
18739: PUSH
18740: LD_INT 81
18742: PUSH
18743: LD_VAR 0 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 3
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 3
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: ST_TO_ADDR
// for i in mines do
18778: LD_ADDR_VAR 0 4
18782: PUSH
18783: LD_VAR 0 2
18787: PUSH
18788: FOR_IN
18789: IFFALSE 18877
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18791: LD_VAR 0 4
18795: PUSH
18796: LD_INT 1
18798: ARRAY
18799: PPUSH
18800: LD_VAR 0 4
18804: PUSH
18805: LD_INT 2
18807: ARRAY
18808: PPUSH
18809: CALL_OW 458
18813: NOT
18814: IFFALSE 18818
// continue ;
18816: GO 18788
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18818: LD_VAR 0 4
18822: PUSH
18823: LD_INT 1
18825: ARRAY
18826: PPUSH
18827: LD_VAR 0 4
18831: PUSH
18832: LD_INT 2
18834: ARRAY
18835: PPUSH
18836: CALL_OW 428
18840: PUSH
18841: LD_VAR 0 5
18845: IN
18846: IFFALSE 18875
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18848: LD_VAR 0 4
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PPUSH
18857: LD_VAR 0 4
18861: PUSH
18862: LD_INT 2
18864: ARRAY
18865: PPUSH
18866: LD_VAR 0 1
18870: PPUSH
18871: CALL_OW 456
// end ;
18875: GO 18788
18877: POP
18878: POP
// end ;
18879: LD_VAR 0 3
18883: RET
// export function Count ( array ) ; begin
18884: LD_INT 0
18886: PPUSH
// result := array + 0 ;
18887: LD_ADDR_VAR 0 2
18891: PUSH
18892: LD_VAR 0 1
18896: PUSH
18897: LD_INT 0
18899: PLUS
18900: ST_TO_ADDR
// end ;
18901: LD_VAR 0 2
18905: RET
// export function IsEmpty ( building ) ; begin
18906: LD_INT 0
18908: PPUSH
// if not building then
18909: LD_VAR 0 1
18913: NOT
18914: IFFALSE 18918
// exit ;
18916: GO 18961
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18918: LD_ADDR_VAR 0 2
18922: PUSH
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 22
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 255
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 58
18947: PUSH
18948: EMPTY
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: IN
18960: ST_TO_ADDR
// end ;
18961: LD_VAR 0 2
18965: RET
// export function IsNotFull ( building ) ; var places ; begin
18966: LD_INT 0
18968: PPUSH
18969: PPUSH
// if not building then
18970: LD_VAR 0 1
18974: NOT
18975: IFFALSE 18979
// exit ;
18977: GO 19007
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18979: LD_ADDR_VAR 0 2
18983: PUSH
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_INT 3
18991: PUSH
18992: LD_INT 62
18994: PUSH
18995: EMPTY
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PPUSH
19002: CALL_OW 72
19006: ST_TO_ADDR
// end ;
19007: LD_VAR 0 2
19011: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
// tmp := [ ] ;
19018: LD_ADDR_VAR 0 3
19022: PUSH
19023: EMPTY
19024: ST_TO_ADDR
// list := [ ] ;
19025: LD_ADDR_VAR 0 5
19029: PUSH
19030: EMPTY
19031: ST_TO_ADDR
// for i = 16 to 25 do
19032: LD_ADDR_VAR 0 4
19036: PUSH
19037: DOUBLE
19038: LD_INT 16
19040: DEC
19041: ST_TO_ADDR
19042: LD_INT 25
19044: PUSH
19045: FOR_TO
19046: IFFALSE 19119
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 255
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 91
19077: PUSH
19078: LD_VAR 0 1
19082: PUSH
19083: LD_INT 6
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_VAR 0 4
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: PPUSH
19111: CALL_OW 69
19115: ADD
19116: ST_TO_ADDR
19117: GO 19045
19119: POP
19120: POP
// for i = 1 to tmp do
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: DOUBLE
19127: LD_INT 1
19129: DEC
19130: ST_TO_ADDR
19131: LD_VAR 0 3
19135: PUSH
19136: FOR_TO
19137: IFFALSE 19225
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19139: LD_ADDR_VAR 0 5
19143: PUSH
19144: LD_VAR 0 5
19148: PUSH
19149: LD_VAR 0 3
19153: PUSH
19154: LD_VAR 0 4
19158: ARRAY
19159: PPUSH
19160: CALL_OW 266
19164: PUSH
19165: LD_VAR 0 3
19169: PUSH
19170: LD_VAR 0 4
19174: ARRAY
19175: PPUSH
19176: CALL_OW 250
19180: PUSH
19181: LD_VAR 0 3
19185: PUSH
19186: LD_VAR 0 4
19190: ARRAY
19191: PPUSH
19192: CALL_OW 251
19196: PUSH
19197: LD_VAR 0 3
19201: PUSH
19202: LD_VAR 0 4
19206: ARRAY
19207: PPUSH
19208: CALL_OW 254
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: ADD
19222: ST_TO_ADDR
19223: GO 19136
19225: POP
19226: POP
// result := list ;
19227: LD_ADDR_VAR 0 2
19231: PUSH
19232: LD_VAR 0 5
19236: ST_TO_ADDR
// end ;
19237: LD_VAR 0 2
19241: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
19250: PPUSH
// if not factory then
19251: LD_VAR 0 1
19255: NOT
19256: IFFALSE 19260
// exit ;
19258: GO 19863
// if control = control_apeman then
19260: LD_VAR 0 4
19264: PUSH
19265: LD_INT 5
19267: EQUAL
19268: IFFALSE 19377
// begin tmp := UnitsInside ( factory ) ;
19270: LD_ADDR_VAR 0 8
19274: PUSH
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL_OW 313
19284: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19285: LD_VAR 0 8
19289: PPUSH
19290: LD_INT 25
19292: PUSH
19293: LD_INT 12
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 72
19304: NOT
19305: IFFALSE 19315
// control := control_manual ;
19307: LD_ADDR_VAR 0 4
19311: PUSH
19312: LD_INT 1
19314: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19315: LD_ADDR_VAR 0 8
19319: PUSH
19320: LD_VAR 0 1
19324: PPUSH
19325: CALL 19012 0 1
19329: ST_TO_ADDR
// if tmp then
19330: LD_VAR 0 8
19334: IFFALSE 19377
// begin for i in tmp do
19336: LD_ADDR_VAR 0 7
19340: PUSH
19341: LD_VAR 0 8
19345: PUSH
19346: FOR_IN
19347: IFFALSE 19375
// if i [ 1 ] = b_ext_radio then
19349: LD_VAR 0 7
19353: PUSH
19354: LD_INT 1
19356: ARRAY
19357: PUSH
19358: LD_INT 22
19360: EQUAL
19361: IFFALSE 19373
// begin control := control_remote ;
19363: LD_ADDR_VAR 0 4
19367: PUSH
19368: LD_INT 2
19370: ST_TO_ADDR
// break ;
19371: GO 19375
// end ;
19373: GO 19346
19375: POP
19376: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19377: LD_VAR 0 1
19381: PPUSH
19382: LD_VAR 0 2
19386: PPUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: LD_VAR 0 4
19396: PPUSH
19397: LD_VAR 0 5
19401: PPUSH
19402: CALL_OW 448
19406: IFFALSE 19441
// begin result := [ chassis , engine , control , weapon ] ;
19408: LD_ADDR_VAR 0 6
19412: PUSH
19413: LD_VAR 0 2
19417: PUSH
19418: LD_VAR 0 3
19422: PUSH
19423: LD_VAR 0 4
19427: PUSH
19428: LD_VAR 0 5
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: ST_TO_ADDR
// exit ;
19439: GO 19863
// end ; _chassis := AvailableChassisList ( factory ) ;
19441: LD_ADDR_VAR 0 9
19445: PUSH
19446: LD_VAR 0 1
19450: PPUSH
19451: CALL_OW 475
19455: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19456: LD_ADDR_VAR 0 11
19460: PUSH
19461: LD_VAR 0 1
19465: PPUSH
19466: CALL_OW 476
19470: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19471: LD_ADDR_VAR 0 12
19475: PUSH
19476: LD_VAR 0 1
19480: PPUSH
19481: CALL_OW 477
19485: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19486: LD_ADDR_VAR 0 10
19490: PUSH
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 478
19500: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19501: LD_VAR 0 9
19505: NOT
19506: IFTRUE 19515
19508: PUSH
19509: LD_VAR 0 11
19513: NOT
19514: OR
19515: IFTRUE 19524
19517: PUSH
19518: LD_VAR 0 12
19522: NOT
19523: OR
19524: IFTRUE 19533
19526: PUSH
19527: LD_VAR 0 10
19531: NOT
19532: OR
19533: IFFALSE 19568
// begin result := [ chassis , engine , control , weapon ] ;
19535: LD_ADDR_VAR 0 6
19539: PUSH
19540: LD_VAR 0 2
19544: PUSH
19545: LD_VAR 0 3
19549: PUSH
19550: LD_VAR 0 4
19554: PUSH
19555: LD_VAR 0 5
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: ST_TO_ADDR
// exit ;
19566: GO 19863
// end ; if not chassis in _chassis then
19568: LD_VAR 0 2
19572: PUSH
19573: LD_VAR 0 9
19577: IN
19578: NOT
19579: IFFALSE 19605
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19581: LD_ADDR_VAR 0 2
19585: PUSH
19586: LD_VAR 0 9
19590: PUSH
19591: LD_INT 1
19593: PPUSH
19594: LD_VAR 0 9
19598: PPUSH
19599: CALL_OW 12
19603: ARRAY
19604: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19605: LD_VAR 0 2
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: CALL 19868 0 2
19619: NOT
19620: IFFALSE 19681
// repeat engine := _engine [ 1 ] ;
19622: LD_ADDR_VAR 0 3
19626: PUSH
19627: LD_VAR 0 11
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19636: LD_ADDR_VAR 0 11
19640: PUSH
19641: LD_VAR 0 11
19645: PPUSH
19646: LD_INT 1
19648: PPUSH
19649: CALL_OW 3
19653: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_VAR 0 3
19663: PPUSH
19664: CALL 19868 0 2
19668: IFTRUE 19679
19670: PUSH
19671: LD_VAR 0 11
19675: PUSH
19676: EMPTY
19677: EQUAL
19678: OR
19679: IFFALSE 19622
// if not control in _control then
19681: LD_VAR 0 4
19685: PUSH
19686: LD_VAR 0 12
19690: IN
19691: NOT
19692: IFFALSE 19718
// control := _control [ rand ( 1 , _control ) ] ;
19694: LD_ADDR_VAR 0 4
19698: PUSH
19699: LD_VAR 0 12
19703: PUSH
19704: LD_INT 1
19706: PPUSH
19707: LD_VAR 0 12
19711: PPUSH
19712: CALL_OW 12
19716: ARRAY
19717: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19718: LD_VAR 0 2
19722: PPUSH
19723: LD_VAR 0 5
19727: PPUSH
19728: CALL 20090 0 2
19732: NOT
19733: IFFALSE 19794
// repeat weapon := _weapon [ 1 ] ;
19735: LD_ADDR_VAR 0 5
19739: PUSH
19740: LD_VAR 0 10
19744: PUSH
19745: LD_INT 1
19747: ARRAY
19748: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19749: LD_ADDR_VAR 0 10
19753: PUSH
19754: LD_VAR 0 10
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 3
19766: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19767: LD_VAR 0 2
19771: PPUSH
19772: LD_VAR 0 5
19776: PPUSH
19777: CALL 20090 0 2
19781: IFTRUE 19792
19783: PUSH
19784: LD_VAR 0 10
19788: PUSH
19789: EMPTY
19790: EQUAL
19791: OR
19792: IFFALSE 19735
// result := [ ] ;
19794: LD_ADDR_VAR 0 6
19798: PUSH
19799: EMPTY
19800: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19801: LD_VAR 0 1
19805: PPUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: LD_VAR 0 3
19815: PPUSH
19816: LD_VAR 0 4
19820: PPUSH
19821: LD_VAR 0 5
19825: PPUSH
19826: CALL_OW 448
19830: IFFALSE 19863
// result := [ chassis , engine , control , weapon ] ;
19832: LD_ADDR_VAR 0 6
19836: PUSH
19837: LD_VAR 0 2
19841: PUSH
19842: LD_VAR 0 3
19846: PUSH
19847: LD_VAR 0 4
19851: PUSH
19852: LD_VAR 0 5
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: ST_TO_ADDR
// end ;
19863: LD_VAR 0 6
19867: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19868: LD_INT 0
19870: PPUSH
// if not chassis or not engine then
19871: LD_VAR 0 1
19875: NOT
19876: IFTRUE 19885
19878: PUSH
19879: LD_VAR 0 2
19883: NOT
19884: OR
19885: IFFALSE 19889
// exit ;
19887: GO 20085
// case engine of engine_solar :
19889: LD_VAR 0 2
19893: PUSH
19894: LD_INT 2
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 19940
19902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19903: LD_ADDR_VAR 0 3
19907: PUSH
19908: LD_INT 11
19910: PUSH
19911: LD_INT 12
19913: PUSH
19914: LD_INT 13
19916: PUSH
19917: LD_INT 14
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 3
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: ST_TO_ADDR
19938: GO 20069
19940: LD_INT 1
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 20010
19948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_INT 11
19956: PUSH
19957: LD_INT 12
19959: PUSH
19960: LD_INT 13
19962: PUSH
19963: LD_INT 14
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: LD_INT 4
19977: PUSH
19978: LD_INT 5
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 23
19986: PUSH
19987: LD_INT 22
19989: PUSH
19990: LD_INT 24
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: ST_TO_ADDR
20008: GO 20069
20010: LD_INT 3
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20068
20018: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20019: LD_ADDR_VAR 0 3
20023: PUSH
20024: LD_INT 13
20026: PUSH
20027: LD_INT 14
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 3
20035: PUSH
20036: LD_INT 4
20038: PUSH
20039: LD_INT 5
20041: PUSH
20042: LD_INT 21
20044: PUSH
20045: LD_INT 22
20047: PUSH
20048: LD_INT 23
20050: PUSH
20051: LD_INT 24
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: ST_TO_ADDR
20066: GO 20069
20068: POP
// result := ( chassis in result ) ;
20069: LD_ADDR_VAR 0 3
20073: PUSH
20074: LD_VAR 0 1
20078: PUSH
20079: LD_VAR 0 3
20083: IN
20084: ST_TO_ADDR
// end ;
20085: LD_VAR 0 3
20089: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20090: LD_INT 0
20092: PPUSH
// if not chassis or not weapon then
20093: LD_VAR 0 1
20097: NOT
20098: IFTRUE 20107
20100: PUSH
20101: LD_VAR 0 2
20105: NOT
20106: OR
20107: IFFALSE 20111
// exit ;
20109: GO 21171
// case weapon of us_machine_gun :
20111: LD_VAR 0 2
20115: PUSH
20116: LD_INT 2
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20154
20124: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20125: LD_ADDR_VAR 0 3
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 3
20138: PUSH
20139: LD_INT 4
20141: PUSH
20142: LD_INT 5
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: ST_TO_ADDR
20152: GO 21155
20154: LD_INT 3
20156: DOUBLE
20157: EQUAL
20158: IFTRUE 20162
20160: GO 20192
20162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20163: LD_ADDR_VAR 0 3
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 3
20176: PUSH
20177: LD_INT 4
20179: PUSH
20180: LD_INT 5
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: ST_TO_ADDR
20190: GO 21155
20192: LD_INT 11
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20230
20200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20201: LD_ADDR_VAR 0 3
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 3
20214: PUSH
20215: LD_INT 4
20217: PUSH
20218: LD_INT 5
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: ST_TO_ADDR
20228: GO 21155
20230: LD_INT 4
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20264
20238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: LD_INT 3
20249: PUSH
20250: LD_INT 4
20252: PUSH
20253: LD_INT 5
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: ST_TO_ADDR
20262: GO 21155
20264: LD_INT 5
20266: DOUBLE
20267: EQUAL
20268: IFTRUE 20272
20270: GO 20298
20272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 3
20283: PUSH
20284: LD_INT 4
20286: PUSH
20287: LD_INT 5
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: ST_TO_ADDR
20296: GO 21155
20298: LD_INT 9
20300: DOUBLE
20301: EQUAL
20302: IFTRUE 20306
20304: GO 20332
20306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20307: LD_ADDR_VAR 0 3
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: LD_INT 3
20317: PUSH
20318: LD_INT 4
20320: PUSH
20321: LD_INT 5
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: ST_TO_ADDR
20330: GO 21155
20332: LD_INT 7
20334: DOUBLE
20335: EQUAL
20336: IFTRUE 20340
20338: GO 20366
20340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20341: LD_ADDR_VAR 0 3
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: LD_INT 3
20351: PUSH
20352: LD_INT 4
20354: PUSH
20355: LD_INT 5
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
20364: GO 21155
20366: LD_INT 12
20368: DOUBLE
20369: EQUAL
20370: IFTRUE 20374
20372: GO 20400
20374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 3
20385: PUSH
20386: LD_INT 4
20388: PUSH
20389: LD_INT 5
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: ST_TO_ADDR
20398: GO 21155
20400: LD_INT 13
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20434
20408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 4
20422: PUSH
20423: LD_INT 5
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: ST_TO_ADDR
20432: GO 21155
20434: LD_INT 14
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20460
20442: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_INT 4
20450: PUSH
20451: LD_INT 5
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 21155
20460: LD_INT 6
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20486
20468: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_INT 4
20476: PUSH
20477: LD_INT 5
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: ST_TO_ADDR
20484: GO 21155
20486: LD_INT 10
20488: DOUBLE
20489: EQUAL
20490: IFTRUE 20494
20492: GO 20512
20494: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20495: LD_ADDR_VAR 0 3
20499: PUSH
20500: LD_INT 4
20502: PUSH
20503: LD_INT 5
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: ST_TO_ADDR
20510: GO 21155
20512: LD_INT 22
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20546
20520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20521: LD_ADDR_VAR 0 3
20525: PUSH
20526: LD_INT 11
20528: PUSH
20529: LD_INT 12
20531: PUSH
20532: LD_INT 13
20534: PUSH
20535: LD_INT 14
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: ST_TO_ADDR
20544: GO 21155
20546: LD_INT 23
20548: DOUBLE
20549: EQUAL
20550: IFTRUE 20554
20552: GO 20580
20554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20555: LD_ADDR_VAR 0 3
20559: PUSH
20560: LD_INT 11
20562: PUSH
20563: LD_INT 12
20565: PUSH
20566: LD_INT 13
20568: PUSH
20569: LD_INT 14
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: ST_TO_ADDR
20578: GO 21155
20580: LD_INT 24
20582: DOUBLE
20583: EQUAL
20584: IFTRUE 20588
20586: GO 20614
20588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20589: LD_ADDR_VAR 0 3
20593: PUSH
20594: LD_INT 11
20596: PUSH
20597: LD_INT 12
20599: PUSH
20600: LD_INT 13
20602: PUSH
20603: LD_INT 14
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: ST_TO_ADDR
20612: GO 21155
20614: LD_INT 30
20616: DOUBLE
20617: EQUAL
20618: IFTRUE 20622
20620: GO 20648
20622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_INT 11
20630: PUSH
20631: LD_INT 12
20633: PUSH
20634: LD_INT 13
20636: PUSH
20637: LD_INT 14
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: ST_TO_ADDR
20646: GO 21155
20648: LD_INT 25
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20674
20656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_INT 13
20664: PUSH
20665: LD_INT 14
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: ST_TO_ADDR
20672: GO 21155
20674: LD_INT 27
20676: DOUBLE
20677: EQUAL
20678: IFTRUE 20682
20680: GO 20700
20682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20683: LD_ADDR_VAR 0 3
20687: PUSH
20688: LD_INT 13
20690: PUSH
20691: LD_INT 14
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: ST_TO_ADDR
20698: GO 21155
20700: LD_INT 92
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20734
20708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: LD_INT 11
20716: PUSH
20717: LD_INT 12
20719: PUSH
20720: LD_INT 13
20722: PUSH
20723: LD_INT 14
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: ST_TO_ADDR
20732: GO 21155
20734: LD_INT 28
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20760
20742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20743: LD_ADDR_VAR 0 3
20747: PUSH
20748: LD_INT 13
20750: PUSH
20751: LD_INT 14
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: ST_TO_ADDR
20758: GO 21155
20760: LD_INT 29
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20786
20768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: LD_INT 13
20776: PUSH
20777: LD_INT 14
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: ST_TO_ADDR
20784: GO 21155
20786: LD_INT 31
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20812
20794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20795: LD_ADDR_VAR 0 3
20799: PUSH
20800: LD_INT 13
20802: PUSH
20803: LD_INT 14
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: ST_TO_ADDR
20810: GO 21155
20812: LD_INT 26
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20838
20820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20821: LD_ADDR_VAR 0 3
20825: PUSH
20826: LD_INT 13
20828: PUSH
20829: LD_INT 14
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 21155
20838: LD_INT 42
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20872
20846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20847: LD_ADDR_VAR 0 3
20851: PUSH
20852: LD_INT 21
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: LD_INT 23
20860: PUSH
20861: LD_INT 24
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: ST_TO_ADDR
20870: GO 21155
20872: LD_INT 43
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20906
20880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20881: LD_ADDR_VAR 0 3
20885: PUSH
20886: LD_INT 21
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_INT 23
20894: PUSH
20895: LD_INT 24
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: ST_TO_ADDR
20904: GO 21155
20906: LD_INT 44
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20940
20914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20915: LD_ADDR_VAR 0 3
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 24
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: ST_TO_ADDR
20938: GO 21155
20940: LD_INT 45
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 20974
20948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: LD_INT 21
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_INT 23
20962: PUSH
20963: LD_INT 24
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 21155
20974: LD_INT 49
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21008
20982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 22
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 24
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 21155
21008: LD_INT 51
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21042
21016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 21
21024: PUSH
21025: LD_INT 22
21027: PUSH
21028: LD_INT 23
21030: PUSH
21031: LD_INT 24
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: ST_TO_ADDR
21040: GO 21155
21042: LD_INT 52
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21076
21050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 21
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_INT 23
21064: PUSH
21065: LD_INT 24
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
21074: GO 21155
21076: LD_INT 53
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21102
21084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_INT 23
21092: PUSH
21093: LD_INT 24
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: ST_TO_ADDR
21100: GO 21155
21102: LD_INT 46
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21128
21110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21111: LD_ADDR_VAR 0 3
21115: PUSH
21116: LD_INT 23
21118: PUSH
21119: LD_INT 24
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: ST_TO_ADDR
21126: GO 21155
21128: LD_INT 47
21130: DOUBLE
21131: EQUAL
21132: IFTRUE 21136
21134: GO 21154
21136: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21137: LD_ADDR_VAR 0 3
21141: PUSH
21142: LD_INT 23
21144: PUSH
21145: LD_INT 24
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: ST_TO_ADDR
21152: GO 21155
21154: POP
// result := ( chassis in result ) ;
21155: LD_ADDR_VAR 0 3
21159: PUSH
21160: LD_VAR 0 1
21164: PUSH
21165: LD_VAR 0 3
21169: IN
21170: ST_TO_ADDR
// end ;
21171: LD_VAR 0 3
21175: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21176: LD_INT 0
21178: PPUSH
21179: PPUSH
21180: PPUSH
21181: PPUSH
21182: PPUSH
21183: PPUSH
21184: PPUSH
// result := array ;
21185: LD_ADDR_VAR 0 5
21189: PUSH
21190: LD_VAR 0 1
21194: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21195: LD_VAR 0 1
21199: NOT
21200: IFTRUE 21209
21202: PUSH
21203: LD_VAR 0 2
21207: NOT
21208: OR
21209: IFTRUE 21218
21211: PUSH
21212: LD_VAR 0 3
21216: NOT
21217: OR
21218: IFTRUE 21232
21220: PUSH
21221: LD_VAR 0 2
21225: PUSH
21226: LD_VAR 0 1
21230: GREATER
21231: OR
21232: IFTRUE 21246
21234: PUSH
21235: LD_VAR 0 3
21239: PUSH
21240: LD_VAR 0 1
21244: GREATER
21245: OR
21246: IFFALSE 21250
// exit ;
21248: GO 21546
// if direction then
21250: LD_VAR 0 4
21254: IFFALSE 21318
// begin d := 1 ;
21256: LD_ADDR_VAR 0 9
21260: PUSH
21261: LD_INT 1
21263: ST_TO_ADDR
// if i_from > i_to then
21264: LD_VAR 0 2
21268: PUSH
21269: LD_VAR 0 3
21273: GREATER
21274: IFFALSE 21300
// length := ( array - i_from ) + i_to else
21276: LD_ADDR_VAR 0 11
21280: PUSH
21281: LD_VAR 0 1
21285: PUSH
21286: LD_VAR 0 2
21290: MINUS
21291: PUSH
21292: LD_VAR 0 3
21296: PLUS
21297: ST_TO_ADDR
21298: GO 21316
// length := i_to - i_from ;
21300: LD_ADDR_VAR 0 11
21304: PUSH
21305: LD_VAR 0 3
21309: PUSH
21310: LD_VAR 0 2
21314: MINUS
21315: ST_TO_ADDR
// end else
21316: GO 21379
// begin d := - 1 ;
21318: LD_ADDR_VAR 0 9
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: ST_TO_ADDR
// if i_from > i_to then
21327: LD_VAR 0 2
21331: PUSH
21332: LD_VAR 0 3
21336: GREATER
21337: IFFALSE 21357
// length := i_from - i_to else
21339: LD_ADDR_VAR 0 11
21343: PUSH
21344: LD_VAR 0 2
21348: PUSH
21349: LD_VAR 0 3
21353: MINUS
21354: ST_TO_ADDR
21355: GO 21379
// length := ( array - i_to ) + i_from ;
21357: LD_ADDR_VAR 0 11
21361: PUSH
21362: LD_VAR 0 1
21366: PUSH
21367: LD_VAR 0 3
21371: MINUS
21372: PUSH
21373: LD_VAR 0 2
21377: PLUS
21378: ST_TO_ADDR
// end ; if not length then
21379: LD_VAR 0 11
21383: NOT
21384: IFFALSE 21388
// exit ;
21386: GO 21546
// tmp := array ;
21388: LD_ADDR_VAR 0 10
21392: PUSH
21393: LD_VAR 0 1
21397: ST_TO_ADDR
// for i = 1 to length do
21398: LD_ADDR_VAR 0 6
21402: PUSH
21403: DOUBLE
21404: LD_INT 1
21406: DEC
21407: ST_TO_ADDR
21408: LD_VAR 0 11
21412: PUSH
21413: FOR_TO
21414: IFFALSE 21534
// begin for j = 1 to array do
21416: LD_ADDR_VAR 0 7
21420: PUSH
21421: DOUBLE
21422: LD_INT 1
21424: DEC
21425: ST_TO_ADDR
21426: LD_VAR 0 1
21430: PUSH
21431: FOR_TO
21432: IFFALSE 21520
// begin k := j + d ;
21434: LD_ADDR_VAR 0 8
21438: PUSH
21439: LD_VAR 0 7
21443: PUSH
21444: LD_VAR 0 9
21448: PLUS
21449: ST_TO_ADDR
// if k > array then
21450: LD_VAR 0 8
21454: PUSH
21455: LD_VAR 0 1
21459: GREATER
21460: IFFALSE 21470
// k := 1 ;
21462: LD_ADDR_VAR 0 8
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// if not k then
21470: LD_VAR 0 8
21474: NOT
21475: IFFALSE 21487
// k := array ;
21477: LD_ADDR_VAR 0 8
21481: PUSH
21482: LD_VAR 0 1
21486: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21487: LD_ADDR_VAR 0 10
21491: PUSH
21492: LD_VAR 0 10
21496: PPUSH
21497: LD_VAR 0 8
21501: PPUSH
21502: LD_VAR 0 1
21506: PUSH
21507: LD_VAR 0 7
21511: ARRAY
21512: PPUSH
21513: CALL_OW 1
21517: ST_TO_ADDR
// end ;
21518: GO 21431
21520: POP
21521: POP
// array := tmp ;
21522: LD_ADDR_VAR 0 1
21526: PUSH
21527: LD_VAR 0 10
21531: ST_TO_ADDR
// end ;
21532: GO 21413
21534: POP
21535: POP
// result := array ;
21536: LD_ADDR_VAR 0 5
21540: PUSH
21541: LD_VAR 0 1
21545: ST_TO_ADDR
// end ;
21546: LD_VAR 0 5
21550: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21551: LD_INT 0
21553: PPUSH
21554: PPUSH
// result := 0 ;
21555: LD_ADDR_VAR 0 3
21559: PUSH
21560: LD_INT 0
21562: ST_TO_ADDR
// if not array or not value in array then
21563: LD_VAR 0 1
21567: NOT
21568: IFTRUE 21583
21570: PUSH
21571: LD_VAR 0 2
21575: PUSH
21576: LD_VAR 0 1
21580: IN
21581: NOT
21582: OR
21583: IFFALSE 21587
// exit ;
21585: GO 21641
// for i = 1 to array do
21587: LD_ADDR_VAR 0 4
21591: PUSH
21592: DOUBLE
21593: LD_INT 1
21595: DEC
21596: ST_TO_ADDR
21597: LD_VAR 0 1
21601: PUSH
21602: FOR_TO
21603: IFFALSE 21639
// if value = array [ i ] then
21605: LD_VAR 0 2
21609: PUSH
21610: LD_VAR 0 1
21614: PUSH
21615: LD_VAR 0 4
21619: ARRAY
21620: EQUAL
21621: IFFALSE 21637
// begin result := i ;
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: LD_VAR 0 4
21632: ST_TO_ADDR
// exit ;
21633: POP
21634: POP
21635: GO 21641
// end ;
21637: GO 21602
21639: POP
21640: POP
// end ;
21641: LD_VAR 0 3
21645: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21646: LD_INT 0
21648: PPUSH
// vc_chassis := chassis ;
21649: LD_ADDR_OWVAR 37
21653: PUSH
21654: LD_VAR 0 1
21658: ST_TO_ADDR
// vc_engine := engine ;
21659: LD_ADDR_OWVAR 39
21663: PUSH
21664: LD_VAR 0 2
21668: ST_TO_ADDR
// vc_control := control ;
21669: LD_ADDR_OWVAR 38
21673: PUSH
21674: LD_VAR 0 3
21678: ST_TO_ADDR
// vc_weapon := weapon ;
21679: LD_ADDR_OWVAR 40
21683: PUSH
21684: LD_VAR 0 4
21688: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21689: LD_ADDR_OWVAR 41
21693: PUSH
21694: LD_VAR 0 5
21698: ST_TO_ADDR
// end ;
21699: LD_VAR 0 6
21703: RET
// export function WantPlant ( unit ) ; var task ; begin
21704: LD_INT 0
21706: PPUSH
21707: PPUSH
// result := false ;
21708: LD_ADDR_VAR 0 2
21712: PUSH
21713: LD_INT 0
21715: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21716: LD_ADDR_VAR 0 3
21720: PUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 437
21730: ST_TO_ADDR
// if task then
21731: LD_VAR 0 3
21735: IFFALSE 21763
// if task [ 1 ] [ 1 ] = p then
21737: LD_VAR 0 3
21741: PUSH
21742: LD_INT 1
21744: ARRAY
21745: PUSH
21746: LD_INT 1
21748: ARRAY
21749: PUSH
21750: LD_STRING p
21752: EQUAL
21753: IFFALSE 21763
// result := true ;
21755: LD_ADDR_VAR 0 2
21759: PUSH
21760: LD_INT 1
21762: ST_TO_ADDR
// end ;
21763: LD_VAR 0 2
21767: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21768: LD_INT 0
21770: PPUSH
21771: PPUSH
21772: PPUSH
21773: PPUSH
// if pos < 1 then
21774: LD_VAR 0 2
21778: PUSH
21779: LD_INT 1
21781: LESS
21782: IFFALSE 21786
// exit ;
21784: GO 22089
// if pos = 1 then
21786: LD_VAR 0 2
21790: PUSH
21791: LD_INT 1
21793: EQUAL
21794: IFFALSE 21827
// result := Replace ( arr , pos [ 1 ] , value ) else
21796: LD_ADDR_VAR 0 4
21800: PUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_VAR 0 2
21810: PUSH
21811: LD_INT 1
21813: ARRAY
21814: PPUSH
21815: LD_VAR 0 3
21819: PPUSH
21820: CALL_OW 1
21824: ST_TO_ADDR
21825: GO 22089
// begin tmp := arr ;
21827: LD_ADDR_VAR 0 6
21831: PUSH
21832: LD_VAR 0 1
21836: ST_TO_ADDR
// s_arr := [ tmp ] ;
21837: LD_ADDR_VAR 0 7
21841: PUSH
21842: LD_VAR 0 6
21846: PUSH
21847: EMPTY
21848: LIST
21849: ST_TO_ADDR
// for i = 1 to pos - 1 do
21850: LD_ADDR_VAR 0 5
21854: PUSH
21855: DOUBLE
21856: LD_INT 1
21858: DEC
21859: ST_TO_ADDR
21860: LD_VAR 0 2
21864: PUSH
21865: LD_INT 1
21867: MINUS
21868: PUSH
21869: FOR_TO
21870: IFFALSE 21915
// begin tmp := tmp [ pos [ i ] ] ;
21872: LD_ADDR_VAR 0 6
21876: PUSH
21877: LD_VAR 0 6
21881: PUSH
21882: LD_VAR 0 2
21886: PUSH
21887: LD_VAR 0 5
21891: ARRAY
21892: ARRAY
21893: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21894: LD_ADDR_VAR 0 7
21898: PUSH
21899: LD_VAR 0 7
21903: PUSH
21904: LD_VAR 0 6
21908: PUSH
21909: EMPTY
21910: LIST
21911: ADD
21912: ST_TO_ADDR
// end ;
21913: GO 21869
21915: POP
21916: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21917: LD_ADDR_VAR 0 6
21921: PUSH
21922: LD_VAR 0 6
21926: PPUSH
21927: LD_VAR 0 2
21931: PUSH
21932: LD_VAR 0 2
21936: ARRAY
21937: PPUSH
21938: LD_VAR 0 3
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21948: LD_ADDR_VAR 0 7
21952: PUSH
21953: LD_VAR 0 7
21957: PPUSH
21958: LD_VAR 0 7
21962: PPUSH
21963: LD_VAR 0 6
21967: PPUSH
21968: CALL_OW 1
21972: ST_TO_ADDR
// for i = s_arr downto 2 do
21973: LD_ADDR_VAR 0 5
21977: PUSH
21978: DOUBLE
21979: LD_VAR 0 7
21983: INC
21984: ST_TO_ADDR
21985: LD_INT 2
21987: PUSH
21988: FOR_DOWNTO
21989: IFFALSE 22073
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21991: LD_ADDR_VAR 0 6
21995: PUSH
21996: LD_VAR 0 7
22000: PUSH
22001: LD_VAR 0 5
22005: PUSH
22006: LD_INT 1
22008: MINUS
22009: ARRAY
22010: PPUSH
22011: LD_VAR 0 2
22015: PUSH
22016: LD_VAR 0 5
22020: PUSH
22021: LD_INT 1
22023: MINUS
22024: ARRAY
22025: PPUSH
22026: LD_VAR 0 7
22030: PUSH
22031: LD_VAR 0 5
22035: ARRAY
22036: PPUSH
22037: CALL_OW 1
22041: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22042: LD_ADDR_VAR 0 7
22046: PUSH
22047: LD_VAR 0 7
22051: PPUSH
22052: LD_VAR 0 5
22056: PUSH
22057: LD_INT 1
22059: MINUS
22060: PPUSH
22061: LD_VAR 0 6
22065: PPUSH
22066: CALL_OW 1
22070: ST_TO_ADDR
// end ;
22071: GO 21988
22073: POP
22074: POP
// result := s_arr [ 1 ] ;
22075: LD_ADDR_VAR 0 4
22079: PUSH
22080: LD_VAR 0 7
22084: PUSH
22085: LD_INT 1
22087: ARRAY
22088: ST_TO_ADDR
// end ; end ;
22089: LD_VAR 0 4
22093: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22094: LD_INT 0
22096: PPUSH
22097: PPUSH
// if not list then
22098: LD_VAR 0 1
22102: NOT
22103: IFFALSE 22107
// exit ;
22105: GO 22198
// i := list [ pos1 ] ;
22107: LD_ADDR_VAR 0 5
22111: PUSH
22112: LD_VAR 0 1
22116: PUSH
22117: LD_VAR 0 2
22121: ARRAY
22122: ST_TO_ADDR
// if not i then
22123: LD_VAR 0 5
22127: NOT
22128: IFFALSE 22132
// exit ;
22130: GO 22198
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22132: LD_ADDR_VAR 0 1
22136: PUSH
22137: LD_VAR 0 1
22141: PPUSH
22142: LD_VAR 0 2
22146: PPUSH
22147: LD_VAR 0 1
22151: PUSH
22152: LD_VAR 0 3
22156: ARRAY
22157: PPUSH
22158: CALL_OW 1
22162: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22163: LD_ADDR_VAR 0 1
22167: PUSH
22168: LD_VAR 0 1
22172: PPUSH
22173: LD_VAR 0 3
22177: PPUSH
22178: LD_VAR 0 5
22182: PPUSH
22183: CALL_OW 1
22187: ST_TO_ADDR
// result := list ;
22188: LD_ADDR_VAR 0 4
22192: PUSH
22193: LD_VAR 0 1
22197: ST_TO_ADDR
// end ;
22198: LD_VAR 0 4
22202: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22203: LD_INT 0
22205: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22206: LD_ADDR_VAR 0 5
22210: PUSH
22211: LD_VAR 0 1
22215: PPUSH
22216: CALL_OW 250
22220: PPUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 251
22230: PPUSH
22231: LD_VAR 0 2
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: LD_VAR 0 4
22245: PPUSH
22246: CALL 22628 0 5
22250: ST_TO_ADDR
// end ;
22251: LD_VAR 0 5
22255: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22256: LD_INT 0
22258: PPUSH
22259: PPUSH
22260: PPUSH
22261: PPUSH
// if not list or not unit then
22262: LD_VAR 0 2
22266: NOT
22267: IFTRUE 22276
22269: PUSH
22270: LD_VAR 0 1
22274: NOT
22275: OR
22276: IFFALSE 22280
// exit ;
22278: GO 22623
// result := [ ] ;
22280: LD_ADDR_VAR 0 5
22284: PUSH
22285: EMPTY
22286: ST_TO_ADDR
// for i in list do
22287: LD_ADDR_VAR 0 6
22291: PUSH
22292: LD_VAR 0 2
22296: PUSH
22297: FOR_IN
22298: IFFALSE 22516
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22300: LD_ADDR_VAR 0 8
22304: PUSH
22305: LD_VAR 0 1
22309: PPUSH
22310: LD_VAR 0 6
22314: PUSH
22315: LD_INT 1
22317: ARRAY
22318: PPUSH
22319: LD_VAR 0 6
22323: PUSH
22324: LD_INT 2
22326: ARRAY
22327: PPUSH
22328: CALL_OW 297
22332: ST_TO_ADDR
// if not Count ( result ) then
22333: LD_VAR 0 5
22337: PPUSH
22338: CALL 18884 0 1
22342: NOT
22343: IFFALSE 22376
// begin result := Join ( result , [ i , tmp ] ) ;
22345: LD_ADDR_VAR 0 5
22349: PUSH
22350: LD_VAR 0 5
22354: PPUSH
22355: LD_VAR 0 6
22359: PUSH
22360: LD_VAR 0 8
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PPUSH
22369: CALL 54816 0 2
22373: ST_TO_ADDR
// continue ;
22374: GO 22297
// end ; if result [ result ] [ 2 ] <= tmp then
22376: LD_VAR 0 5
22380: PUSH
22381: LD_VAR 0 5
22385: ARRAY
22386: PUSH
22387: LD_INT 2
22389: ARRAY
22390: PUSH
22391: LD_VAR 0 8
22395: LESSEQUAL
22396: IFFALSE 22429
// result := Join ( result , [ i , tmp ] ) else
22398: LD_ADDR_VAR 0 5
22402: PUSH
22403: LD_VAR 0 5
22407: PPUSH
22408: LD_VAR 0 6
22412: PUSH
22413: LD_VAR 0 8
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PPUSH
22422: CALL 54816 0 2
22426: ST_TO_ADDR
22427: GO 22514
// begin for j := 1 to Count ( result ) do
22429: LD_ADDR_VAR 0 7
22433: PUSH
22434: DOUBLE
22435: LD_INT 1
22437: DEC
22438: ST_TO_ADDR
22439: LD_VAR 0 5
22443: PPUSH
22444: CALL 18884 0 1
22448: PUSH
22449: FOR_TO
22450: IFFALSE 22512
// begin if tmp < result [ j ] [ 2 ] then
22452: LD_VAR 0 8
22456: PUSH
22457: LD_VAR 0 5
22461: PUSH
22462: LD_VAR 0 7
22466: ARRAY
22467: PUSH
22468: LD_INT 2
22470: ARRAY
22471: LESS
22472: IFFALSE 22510
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22474: LD_ADDR_VAR 0 5
22478: PUSH
22479: LD_VAR 0 5
22483: PPUSH
22484: LD_VAR 0 7
22488: PPUSH
22489: LD_VAR 0 6
22493: PUSH
22494: LD_VAR 0 8
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PPUSH
22503: CALL_OW 2
22507: ST_TO_ADDR
// break ;
22508: GO 22512
// end ; end ;
22510: GO 22449
22512: POP
22513: POP
// end ; end ;
22514: GO 22297
22516: POP
22517: POP
// if result and not asc then
22518: LD_VAR 0 5
22522: IFFALSE 22531
22524: PUSH
22525: LD_VAR 0 3
22529: NOT
22530: AND
22531: IFFALSE 22548
// result := ReverseArray ( result ) ;
22533: LD_ADDR_VAR 0 5
22537: PUSH
22538: LD_VAR 0 5
22542: PPUSH
22543: CALL 49906 0 1
22547: ST_TO_ADDR
// tmp := [ ] ;
22548: LD_ADDR_VAR 0 8
22552: PUSH
22553: EMPTY
22554: ST_TO_ADDR
// if mode then
22555: LD_VAR 0 4
22559: IFFALSE 22623
// begin for i := 1 to result do
22561: LD_ADDR_VAR 0 6
22565: PUSH
22566: DOUBLE
22567: LD_INT 1
22569: DEC
22570: ST_TO_ADDR
22571: LD_VAR 0 5
22575: PUSH
22576: FOR_TO
22577: IFFALSE 22611
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22579: LD_ADDR_VAR 0 8
22583: PUSH
22584: LD_VAR 0 8
22588: PPUSH
22589: LD_VAR 0 5
22593: PUSH
22594: LD_VAR 0 6
22598: ARRAY
22599: PUSH
22600: LD_INT 1
22602: ARRAY
22603: PPUSH
22604: CALL 54816 0 2
22608: ST_TO_ADDR
22609: GO 22576
22611: POP
22612: POP
// result := tmp ;
22613: LD_ADDR_VAR 0 5
22617: PUSH
22618: LD_VAR 0 8
22622: ST_TO_ADDR
// end ; end ;
22623: LD_VAR 0 5
22627: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
22632: PPUSH
22633: PPUSH
// if not list then
22634: LD_VAR 0 3
22638: NOT
22639: IFFALSE 22643
// exit ;
22641: GO 23033
// result := [ ] ;
22643: LD_ADDR_VAR 0 6
22647: PUSH
22648: EMPTY
22649: ST_TO_ADDR
// for i in list do
22650: LD_ADDR_VAR 0 7
22654: PUSH
22655: LD_VAR 0 3
22659: PUSH
22660: FOR_IN
22661: IFFALSE 22863
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22663: LD_ADDR_VAR 0 9
22667: PUSH
22668: LD_VAR 0 7
22672: PPUSH
22673: LD_VAR 0 1
22677: PPUSH
22678: LD_VAR 0 2
22682: PPUSH
22683: CALL_OW 297
22687: ST_TO_ADDR
// if not result then
22688: LD_VAR 0 6
22692: NOT
22693: IFFALSE 22719
// result := [ [ i , tmp ] ] else
22695: LD_ADDR_VAR 0 6
22699: PUSH
22700: LD_VAR 0 7
22704: PUSH
22705: LD_VAR 0 9
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: ST_TO_ADDR
22717: GO 22861
// begin if result [ result ] [ 2 ] <= tmp then
22719: LD_VAR 0 6
22723: PUSH
22724: LD_VAR 0 6
22728: ARRAY
22729: PUSH
22730: LD_INT 2
22732: ARRAY
22733: PUSH
22734: LD_VAR 0 9
22738: LESSEQUAL
22739: IFFALSE 22781
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22741: LD_ADDR_VAR 0 6
22745: PUSH
22746: LD_VAR 0 6
22750: PPUSH
22751: LD_VAR 0 6
22755: PUSH
22756: LD_INT 1
22758: PLUS
22759: PPUSH
22760: LD_VAR 0 7
22764: PUSH
22765: LD_VAR 0 9
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PPUSH
22774: CALL_OW 2
22778: ST_TO_ADDR
22779: GO 22861
// for j := 1 to result do
22781: LD_ADDR_VAR 0 8
22785: PUSH
22786: DOUBLE
22787: LD_INT 1
22789: DEC
22790: ST_TO_ADDR
22791: LD_VAR 0 6
22795: PUSH
22796: FOR_TO
22797: IFFALSE 22859
// begin if tmp < result [ j ] [ 2 ] then
22799: LD_VAR 0 9
22803: PUSH
22804: LD_VAR 0 6
22808: PUSH
22809: LD_VAR 0 8
22813: ARRAY
22814: PUSH
22815: LD_INT 2
22817: ARRAY
22818: LESS
22819: IFFALSE 22857
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22821: LD_ADDR_VAR 0 6
22825: PUSH
22826: LD_VAR 0 6
22830: PPUSH
22831: LD_VAR 0 8
22835: PPUSH
22836: LD_VAR 0 7
22840: PUSH
22841: LD_VAR 0 9
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PPUSH
22850: CALL_OW 2
22854: ST_TO_ADDR
// break ;
22855: GO 22859
// end ; end ;
22857: GO 22796
22859: POP
22860: POP
// end ; end ;
22861: GO 22660
22863: POP
22864: POP
// if result and not asc then
22865: LD_VAR 0 6
22869: IFFALSE 22878
22871: PUSH
22872: LD_VAR 0 4
22876: NOT
22877: AND
22878: IFFALSE 22953
// begin tmp := result ;
22880: LD_ADDR_VAR 0 9
22884: PUSH
22885: LD_VAR 0 6
22889: ST_TO_ADDR
// for i = tmp downto 1 do
22890: LD_ADDR_VAR 0 7
22894: PUSH
22895: DOUBLE
22896: LD_VAR 0 9
22900: INC
22901: ST_TO_ADDR
22902: LD_INT 1
22904: PUSH
22905: FOR_DOWNTO
22906: IFFALSE 22951
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22908: LD_ADDR_VAR 0 6
22912: PUSH
22913: LD_VAR 0 6
22917: PPUSH
22918: LD_VAR 0 9
22922: PUSH
22923: LD_VAR 0 7
22927: MINUS
22928: PUSH
22929: LD_INT 1
22931: PLUS
22932: PPUSH
22933: LD_VAR 0 9
22937: PUSH
22938: LD_VAR 0 7
22942: ARRAY
22943: PPUSH
22944: CALL_OW 1
22948: ST_TO_ADDR
22949: GO 22905
22951: POP
22952: POP
// end ; tmp := [ ] ;
22953: LD_ADDR_VAR 0 9
22957: PUSH
22958: EMPTY
22959: ST_TO_ADDR
// if mode then
22960: LD_VAR 0 5
22964: IFFALSE 23033
// begin for i = 1 to result do
22966: LD_ADDR_VAR 0 7
22970: PUSH
22971: DOUBLE
22972: LD_INT 1
22974: DEC
22975: ST_TO_ADDR
22976: LD_VAR 0 6
22980: PUSH
22981: FOR_TO
22982: IFFALSE 23021
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22984: LD_ADDR_VAR 0 9
22988: PUSH
22989: LD_VAR 0 9
22993: PPUSH
22994: LD_VAR 0 7
22998: PPUSH
22999: LD_VAR 0 6
23003: PUSH
23004: LD_VAR 0 7
23008: ARRAY
23009: PUSH
23010: LD_INT 1
23012: ARRAY
23013: PPUSH
23014: CALL_OW 1
23018: ST_TO_ADDR
23019: GO 22981
23021: POP
23022: POP
// result := tmp ;
23023: LD_ADDR_VAR 0 6
23027: PUSH
23028: LD_VAR 0 9
23032: ST_TO_ADDR
// end ; end ;
23033: LD_VAR 0 6
23037: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23038: LD_INT 0
23040: PPUSH
23041: PPUSH
23042: PPUSH
23043: PPUSH
23044: PPUSH
23045: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23046: LD_ADDR_VAR 0 5
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: EMPTY
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: ST_TO_ADDR
// if not x or not y then
23068: LD_VAR 0 2
23072: NOT
23073: IFTRUE 23082
23075: PUSH
23076: LD_VAR 0 3
23080: NOT
23081: OR
23082: IFFALSE 23086
// exit ;
23084: GO 24742
// if not range then
23086: LD_VAR 0 4
23090: NOT
23091: IFFALSE 23101
// range := 10 ;
23093: LD_ADDR_VAR 0 4
23097: PUSH
23098: LD_INT 10
23100: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23101: LD_ADDR_VAR 0 8
23105: PUSH
23106: LD_INT 81
23108: PUSH
23109: LD_VAR 0 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 92
23120: PUSH
23121: LD_VAR 0 2
23125: PUSH
23126: LD_VAR 0 3
23130: PUSH
23131: LD_VAR 0 4
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: LD_INT 21
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: PPUSH
23164: CALL_OW 69
23168: ST_TO_ADDR
// if not tmp then
23169: LD_VAR 0 8
23173: NOT
23174: IFFALSE 23178
// exit ;
23176: GO 24742
// for i in tmp do
23178: LD_ADDR_VAR 0 6
23182: PUSH
23183: LD_VAR 0 8
23187: PUSH
23188: FOR_IN
23189: IFFALSE 24717
// begin points := [ 0 , 0 , 0 ] ;
23191: LD_ADDR_VAR 0 9
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: ST_TO_ADDR
// bpoints := 1 ;
23210: LD_ADDR_VAR 0 10
23214: PUSH
23215: LD_INT 1
23217: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23218: LD_VAR 0 6
23222: PPUSH
23223: CALL_OW 247
23227: PUSH
23228: LD_INT 1
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23818
23236: POP
// begin if GetClass ( i ) = 1 then
23237: LD_VAR 0 6
23241: PPUSH
23242: CALL_OW 257
23246: PUSH
23247: LD_INT 1
23249: EQUAL
23250: IFFALSE 23271
// points := [ 10 , 5 , 3 ] ;
23252: LD_ADDR_VAR 0 9
23256: PUSH
23257: LD_INT 10
23259: PUSH
23260: LD_INT 5
23262: PUSH
23263: LD_INT 3
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23271: LD_VAR 0 6
23275: PPUSH
23276: CALL_OW 257
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 3
23286: PUSH
23287: LD_INT 4
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: IN
23295: IFFALSE 23316
// points := [ 3 , 2 , 1 ] ;
23297: LD_ADDR_VAR 0 9
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23316: LD_VAR 0 6
23320: PPUSH
23321: CALL_OW 257
23325: PUSH
23326: LD_INT 5
23328: EQUAL
23329: IFFALSE 23350
// points := [ 130 , 5 , 2 ] ;
23331: LD_ADDR_VAR 0 9
23335: PUSH
23336: LD_INT 130
23338: PUSH
23339: LD_INT 5
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23350: LD_VAR 0 6
23354: PPUSH
23355: CALL_OW 257
23359: PUSH
23360: LD_INT 8
23362: EQUAL
23363: IFFALSE 23384
// points := [ 35 , 35 , 30 ] ;
23365: LD_ADDR_VAR 0 9
23369: PUSH
23370: LD_INT 35
23372: PUSH
23373: LD_INT 35
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23384: LD_VAR 0 6
23388: PPUSH
23389: CALL_OW 257
23393: PUSH
23394: LD_INT 9
23396: EQUAL
23397: IFFALSE 23418
// points := [ 20 , 55 , 40 ] ;
23399: LD_ADDR_VAR 0 9
23403: PUSH
23404: LD_INT 20
23406: PUSH
23407: LD_INT 55
23409: PUSH
23410: LD_INT 40
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23418: LD_VAR 0 6
23422: PPUSH
23423: CALL_OW 257
23427: PUSH
23428: LD_INT 12
23430: PUSH
23431: LD_INT 16
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: IN
23438: IFFALSE 23459
// points := [ 5 , 3 , 2 ] ;
23440: LD_ADDR_VAR 0 9
23444: PUSH
23445: LD_INT 5
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23459: LD_VAR 0 6
23463: PPUSH
23464: CALL_OW 257
23468: PUSH
23469: LD_INT 17
23471: EQUAL
23472: IFFALSE 23493
// points := [ 100 , 50 , 75 ] ;
23474: LD_ADDR_VAR 0 9
23478: PUSH
23479: LD_INT 100
23481: PUSH
23482: LD_INT 50
23484: PUSH
23485: LD_INT 75
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23493: LD_VAR 0 6
23497: PPUSH
23498: CALL_OW 257
23502: PUSH
23503: LD_INT 15
23505: EQUAL
23506: IFFALSE 23527
// points := [ 10 , 5 , 3 ] ;
23508: LD_ADDR_VAR 0 9
23512: PUSH
23513: LD_INT 10
23515: PUSH
23516: LD_INT 5
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23527: LD_VAR 0 6
23531: PPUSH
23532: CALL_OW 257
23536: PUSH
23537: LD_INT 14
23539: EQUAL
23540: IFFALSE 23561
// points := [ 10 , 0 , 0 ] ;
23542: LD_ADDR_VAR 0 9
23546: PUSH
23547: LD_INT 10
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23561: LD_VAR 0 6
23565: PPUSH
23566: CALL_OW 257
23570: PUSH
23571: LD_INT 11
23573: EQUAL
23574: IFFALSE 23595
// points := [ 30 , 10 , 5 ] ;
23576: LD_ADDR_VAR 0 9
23580: PUSH
23581: LD_INT 30
23583: PUSH
23584: LD_INT 10
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23595: LD_VAR 0 1
23599: PPUSH
23600: LD_INT 5
23602: PPUSH
23603: CALL_OW 321
23607: PUSH
23608: LD_INT 2
23610: EQUAL
23611: IFFALSE 23628
// bpoints := bpoints * 1.8 ;
23613: LD_ADDR_VAR 0 10
23617: PUSH
23618: LD_VAR 0 10
23622: PUSH
23623: LD_REAL  1.80000000000000E+0000
23626: MUL
23627: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23628: LD_VAR 0 6
23632: PPUSH
23633: CALL_OW 257
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: LD_INT 4
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: IN
23656: IFFALSE 23676
23658: PUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: LD_INT 51
23666: PPUSH
23667: CALL_OW 321
23671: PUSH
23672: LD_INT 2
23674: EQUAL
23675: AND
23676: IFFALSE 23693
// bpoints := bpoints * 1.2 ;
23678: LD_ADDR_VAR 0 10
23682: PUSH
23683: LD_VAR 0 10
23687: PUSH
23688: LD_REAL  1.20000000000000E+0000
23691: MUL
23692: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23693: LD_VAR 0 6
23697: PPUSH
23698: CALL_OW 257
23702: PUSH
23703: LD_INT 5
23705: PUSH
23706: LD_INT 7
23708: PUSH
23709: LD_INT 9
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: IN
23717: IFFALSE 23737
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: LD_INT 52
23727: PPUSH
23728: CALL_OW 321
23732: PUSH
23733: LD_INT 2
23735: EQUAL
23736: AND
23737: IFFALSE 23754
// bpoints := bpoints * 1.5 ;
23739: LD_ADDR_VAR 0 10
23743: PUSH
23744: LD_VAR 0 10
23748: PUSH
23749: LD_REAL  1.50000000000000E+0000
23752: MUL
23753: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23754: LD_VAR 0 1
23758: PPUSH
23759: LD_INT 66
23761: PPUSH
23762: CALL_OW 321
23766: PUSH
23767: LD_INT 2
23769: EQUAL
23770: IFFALSE 23787
// bpoints := bpoints * 1.1 ;
23772: LD_ADDR_VAR 0 10
23776: PUSH
23777: LD_VAR 0 10
23781: PUSH
23782: LD_REAL  1.10000000000000E+0000
23785: MUL
23786: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23787: LD_ADDR_VAR 0 10
23791: PUSH
23792: LD_VAR 0 10
23796: PUSH
23797: LD_VAR 0 6
23801: PPUSH
23802: LD_INT 1
23804: PPUSH
23805: CALL_OW 259
23809: PUSH
23810: LD_REAL  1.15000000000000E+0000
23813: MUL
23814: MUL
23815: ST_TO_ADDR
// end ; unit_vehicle :
23816: GO 24646
23818: LD_INT 2
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23826
23824: GO 24634
23826: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23827: LD_VAR 0 6
23831: PPUSH
23832: CALL_OW 264
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 42
23842: PUSH
23843: LD_INT 24
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: IN
23851: IFFALSE 23872
// points := [ 25 , 5 , 3 ] ;
23853: LD_ADDR_VAR 0 9
23857: PUSH
23858: LD_INT 25
23860: PUSH
23861: LD_INT 5
23863: PUSH
23864: LD_INT 3
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23872: LD_VAR 0 6
23876: PPUSH
23877: CALL_OW 264
23881: PUSH
23882: LD_INT 4
23884: PUSH
23885: LD_INT 43
23887: PUSH
23888: LD_INT 25
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: IN
23896: IFFALSE 23917
// points := [ 40 , 15 , 5 ] ;
23898: LD_ADDR_VAR 0 9
23902: PUSH
23903: LD_INT 40
23905: PUSH
23906: LD_INT 15
23908: PUSH
23909: LD_INT 5
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23917: LD_VAR 0 6
23921: PPUSH
23922: CALL_OW 264
23926: PUSH
23927: LD_INT 3
23929: PUSH
23930: LD_INT 23
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: IN
23937: IFFALSE 23958
// points := [ 7 , 25 , 8 ] ;
23939: LD_ADDR_VAR 0 9
23943: PUSH
23944: LD_INT 7
23946: PUSH
23947: LD_INT 25
23949: PUSH
23950: LD_INT 8
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23958: LD_VAR 0 6
23962: PPUSH
23963: CALL_OW 264
23967: PUSH
23968: LD_INT 5
23970: PUSH
23971: LD_INT 27
23973: PUSH
23974: LD_INT 44
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: IN
23982: IFFALSE 24003
// points := [ 14 , 50 , 16 ] ;
23984: LD_ADDR_VAR 0 9
23988: PUSH
23989: LD_INT 14
23991: PUSH
23992: LD_INT 50
23994: PUSH
23995: LD_INT 16
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24003: LD_VAR 0 6
24007: PPUSH
24008: CALL_OW 264
24012: PUSH
24013: LD_INT 6
24015: PUSH
24016: LD_INT 46
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: IN
24023: IFFALSE 24044
// points := [ 32 , 120 , 70 ] ;
24025: LD_ADDR_VAR 0 9
24029: PUSH
24030: LD_INT 32
24032: PUSH
24033: LD_INT 120
24035: PUSH
24036: LD_INT 70
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24044: LD_VAR 0 6
24048: PPUSH
24049: CALL_OW 264
24053: PUSH
24054: LD_INT 7
24056: PUSH
24057: LD_INT 28
24059: PUSH
24060: LD_INT 45
24062: PUSH
24063: LD_INT 92
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: IN
24072: IFFALSE 24093
// points := [ 35 , 20 , 45 ] ;
24074: LD_ADDR_VAR 0 9
24078: PUSH
24079: LD_INT 35
24081: PUSH
24082: LD_INT 20
24084: PUSH
24085: LD_INT 45
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: LIST
24092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24093: LD_VAR 0 6
24097: PPUSH
24098: CALL_OW 264
24102: PUSH
24103: LD_INT 47
24105: PUSH
24106: EMPTY
24107: LIST
24108: IN
24109: IFFALSE 24130
// points := [ 67 , 45 , 75 ] ;
24111: LD_ADDR_VAR 0 9
24115: PUSH
24116: LD_INT 67
24118: PUSH
24119: LD_INT 45
24121: PUSH
24122: LD_INT 75
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24130: LD_VAR 0 6
24134: PPUSH
24135: CALL_OW 264
24139: PUSH
24140: LD_INT 26
24142: PUSH
24143: EMPTY
24144: LIST
24145: IN
24146: IFFALSE 24167
// points := [ 120 , 30 , 80 ] ;
24148: LD_ADDR_VAR 0 9
24152: PUSH
24153: LD_INT 120
24155: PUSH
24156: LD_INT 30
24158: PUSH
24159: LD_INT 80
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24167: LD_VAR 0 6
24171: PPUSH
24172: CALL_OW 264
24176: PUSH
24177: LD_INT 22
24179: PUSH
24180: EMPTY
24181: LIST
24182: IN
24183: IFFALSE 24204
// points := [ 40 , 1 , 1 ] ;
24185: LD_ADDR_VAR 0 9
24189: PUSH
24190: LD_INT 40
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24204: LD_VAR 0 6
24208: PPUSH
24209: CALL_OW 264
24213: PUSH
24214: LD_INT 29
24216: PUSH
24217: EMPTY
24218: LIST
24219: IN
24220: IFFALSE 24241
// points := [ 70 , 200 , 400 ] ;
24222: LD_ADDR_VAR 0 9
24226: PUSH
24227: LD_INT 70
24229: PUSH
24230: LD_INT 200
24232: PUSH
24233: LD_INT 400
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24241: LD_VAR 0 6
24245: PPUSH
24246: CALL_OW 264
24250: PUSH
24251: LD_INT 14
24253: PUSH
24254: LD_INT 53
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: IN
24261: IFFALSE 24282
// points := [ 40 , 10 , 20 ] ;
24263: LD_ADDR_VAR 0 9
24267: PUSH
24268: LD_INT 40
24270: PUSH
24271: LD_INT 10
24273: PUSH
24274: LD_INT 20
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24282: LD_VAR 0 6
24286: PPUSH
24287: CALL_OW 264
24291: PUSH
24292: LD_INT 9
24294: PUSH
24295: EMPTY
24296: LIST
24297: IN
24298: IFFALSE 24319
// points := [ 5 , 70 , 20 ] ;
24300: LD_ADDR_VAR 0 9
24304: PUSH
24305: LD_INT 5
24307: PUSH
24308: LD_INT 70
24310: PUSH
24311: LD_INT 20
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24319: LD_VAR 0 6
24323: PPUSH
24324: CALL_OW 264
24328: PUSH
24329: LD_INT 10
24331: PUSH
24332: EMPTY
24333: LIST
24334: IN
24335: IFFALSE 24356
// points := [ 35 , 110 , 70 ] ;
24337: LD_ADDR_VAR 0 9
24341: PUSH
24342: LD_INT 35
24344: PUSH
24345: LD_INT 110
24347: PUSH
24348: LD_INT 70
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24356: LD_VAR 0 6
24360: PPUSH
24361: CALL_OW 265
24365: PUSH
24366: LD_INT 25
24368: EQUAL
24369: IFFALSE 24390
// points := [ 80 , 65 , 100 ] ;
24371: LD_ADDR_VAR 0 9
24375: PUSH
24376: LD_INT 80
24378: PUSH
24379: LD_INT 65
24381: PUSH
24382: LD_INT 100
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24390: LD_VAR 0 6
24394: PPUSH
24395: CALL_OW 263
24399: PUSH
24400: LD_INT 1
24402: EQUAL
24403: IFFALSE 24438
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24405: LD_ADDR_VAR 0 10
24409: PUSH
24410: LD_VAR 0 10
24414: PUSH
24415: LD_VAR 0 6
24419: PPUSH
24420: CALL_OW 311
24424: PPUSH
24425: LD_INT 3
24427: PPUSH
24428: CALL_OW 259
24432: PUSH
24433: LD_INT 4
24435: MUL
24436: MUL
24437: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24438: LD_VAR 0 6
24442: PPUSH
24443: CALL_OW 263
24447: PUSH
24448: LD_INT 2
24450: EQUAL
24451: IFFALSE 24502
// begin j := IsControledBy ( i ) ;
24453: LD_ADDR_VAR 0 7
24457: PUSH
24458: LD_VAR 0 6
24462: PPUSH
24463: CALL_OW 312
24467: ST_TO_ADDR
// if j then
24468: LD_VAR 0 7
24472: IFFALSE 24502
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24474: LD_ADDR_VAR 0 10
24478: PUSH
24479: LD_VAR 0 10
24483: PUSH
24484: LD_VAR 0 7
24488: PPUSH
24489: LD_INT 3
24491: PPUSH
24492: CALL_OW 259
24496: PUSH
24497: LD_INT 3
24499: MUL
24500: MUL
24501: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24502: LD_VAR 0 6
24506: PPUSH
24507: CALL_OW 264
24511: PUSH
24512: LD_INT 5
24514: PUSH
24515: LD_INT 6
24517: PUSH
24518: LD_INT 46
24520: PUSH
24521: LD_INT 44
24523: PUSH
24524: LD_INT 47
24526: PUSH
24527: LD_INT 45
24529: PUSH
24530: LD_INT 28
24532: PUSH
24533: LD_INT 7
24535: PUSH
24536: LD_INT 27
24538: PUSH
24539: LD_INT 29
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: IN
24554: IFFALSE 24574
24556: PUSH
24557: LD_VAR 0 1
24561: PPUSH
24562: LD_INT 52
24564: PPUSH
24565: CALL_OW 321
24569: PUSH
24570: LD_INT 2
24572: EQUAL
24573: AND
24574: IFFALSE 24591
// bpoints := bpoints * 1.2 ;
24576: LD_ADDR_VAR 0 10
24580: PUSH
24581: LD_VAR 0 10
24585: PUSH
24586: LD_REAL  1.20000000000000E+0000
24589: MUL
24590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24591: LD_VAR 0 6
24595: PPUSH
24596: CALL_OW 264
24600: PUSH
24601: LD_INT 6
24603: PUSH
24604: LD_INT 46
24606: PUSH
24607: LD_INT 47
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: IN
24615: IFFALSE 24632
// bpoints := bpoints * 1.2 ;
24617: LD_ADDR_VAR 0 10
24621: PUSH
24622: LD_VAR 0 10
24626: PUSH
24627: LD_REAL  1.20000000000000E+0000
24630: MUL
24631: ST_TO_ADDR
// end ; unit_building :
24632: GO 24646
24634: LD_INT 3
24636: DOUBLE
24637: EQUAL
24638: IFTRUE 24642
24640: GO 24645
24642: POP
// ; end ;
24643: GO 24646
24645: POP
// for j = 1 to 3 do
24646: LD_ADDR_VAR 0 7
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_INT 3
24658: PUSH
24659: FOR_TO
24660: IFFALSE 24713
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24662: LD_ADDR_VAR 0 5
24666: PUSH
24667: LD_VAR 0 5
24671: PPUSH
24672: LD_VAR 0 7
24676: PPUSH
24677: LD_VAR 0 5
24681: PUSH
24682: LD_VAR 0 7
24686: ARRAY
24687: PUSH
24688: LD_VAR 0 9
24692: PUSH
24693: LD_VAR 0 7
24697: ARRAY
24698: PUSH
24699: LD_VAR 0 10
24703: MUL
24704: PLUS
24705: PPUSH
24706: CALL_OW 1
24710: ST_TO_ADDR
24711: GO 24659
24713: POP
24714: POP
// end ;
24715: GO 23188
24717: POP
24718: POP
// result := Replace ( result , 4 , tmp ) ;
24719: LD_ADDR_VAR 0 5
24723: PUSH
24724: LD_VAR 0 5
24728: PPUSH
24729: LD_INT 4
24731: PPUSH
24732: LD_VAR 0 8
24736: PPUSH
24737: CALL_OW 1
24741: ST_TO_ADDR
// end ;
24742: LD_VAR 0 5
24746: RET
// export function DangerAtRange ( unit , range ) ; begin
24747: LD_INT 0
24749: PPUSH
// if not unit then
24750: LD_VAR 0 1
24754: NOT
24755: IFFALSE 24759
// exit ;
24757: GO 24804
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL_OW 255
24773: PPUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 250
24783: PPUSH
24784: LD_VAR 0 1
24788: PPUSH
24789: CALL_OW 251
24793: PPUSH
24794: LD_VAR 0 2
24798: PPUSH
24799: CALL 23038 0 4
24803: ST_TO_ADDR
// end ;
24804: LD_VAR 0 3
24808: RET
// export function DangerInArea ( side , area ) ; begin
24809: LD_INT 0
24811: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_VAR 0 2
24821: PPUSH
24822: LD_INT 81
24824: PUSH
24825: LD_VAR 0 1
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PPUSH
24834: CALL_OW 70
24838: ST_TO_ADDR
// end ;
24839: LD_VAR 0 3
24843: RET
// export function IsExtension ( b ) ; begin
24844: LD_INT 0
24846: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24847: LD_ADDR_VAR 0 2
24851: PUSH
24852: LD_VAR 0 1
24856: PUSH
24857: LD_INT 23
24859: PUSH
24860: LD_INT 20
24862: PUSH
24863: LD_INT 22
24865: PUSH
24866: LD_INT 17
24868: PUSH
24869: LD_INT 24
24871: PUSH
24872: LD_INT 21
24874: PUSH
24875: LD_INT 19
24877: PUSH
24878: LD_INT 16
24880: PUSH
24881: LD_INT 25
24883: PUSH
24884: LD_INT 18
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: IN
24899: ST_TO_ADDR
// end ;
24900: LD_VAR 0 2
24904: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24905: LD_INT 0
24907: PPUSH
24908: PPUSH
24909: PPUSH
// result := [ ] ;
24910: LD_ADDR_VAR 0 4
24914: PUSH
24915: EMPTY
24916: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24917: LD_ADDR_VAR 0 5
24921: PUSH
24922: LD_VAR 0 2
24926: PPUSH
24927: LD_INT 21
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PPUSH
24937: CALL_OW 70
24941: ST_TO_ADDR
// if not tmp then
24942: LD_VAR 0 5
24946: NOT
24947: IFFALSE 24951
// exit ;
24949: GO 25015
// if checkLink then
24951: LD_VAR 0 3
24955: IFFALSE 25005
// begin for i in tmp do
24957: LD_ADDR_VAR 0 6
24961: PUSH
24962: LD_VAR 0 5
24966: PUSH
24967: FOR_IN
24968: IFFALSE 25003
// if GetBase ( i ) <> base then
24970: LD_VAR 0 6
24974: PPUSH
24975: CALL_OW 274
24979: PUSH
24980: LD_VAR 0 1
24984: NONEQUAL
24985: IFFALSE 25001
// ComLinkToBase ( base , i ) ;
24987: LD_VAR 0 1
24991: PPUSH
24992: LD_VAR 0 6
24996: PPUSH
24997: CALL_OW 169
25001: GO 24967
25003: POP
25004: POP
// end ; result := tmp ;
25005: LD_ADDR_VAR 0 4
25009: PUSH
25010: LD_VAR 0 5
25014: ST_TO_ADDR
// end ;
25015: LD_VAR 0 4
25019: RET
// export function ComComplete ( units , b ) ; var i ; begin
25020: LD_INT 0
25022: PPUSH
25023: PPUSH
// if not units then
25024: LD_VAR 0 1
25028: NOT
25029: IFFALSE 25033
// exit ;
25031: GO 25123
// for i in units do
25033: LD_ADDR_VAR 0 4
25037: PUSH
25038: LD_VAR 0 1
25042: PUSH
25043: FOR_IN
25044: IFFALSE 25121
// if BuildingStatus ( b ) = bs_build then
25046: LD_VAR 0 2
25050: PPUSH
25051: CALL_OW 461
25055: PUSH
25056: LD_INT 1
25058: EQUAL
25059: IFFALSE 25119
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25061: LD_VAR 0 4
25065: PPUSH
25066: LD_STRING h
25068: PUSH
25069: LD_VAR 0 2
25073: PPUSH
25074: CALL_OW 250
25078: PUSH
25079: LD_VAR 0 2
25083: PPUSH
25084: CALL_OW 251
25088: PUSH
25089: LD_VAR 0 2
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: PPUSH
25115: CALL_OW 446
25119: GO 25043
25121: POP
25122: POP
// end ;
25123: LD_VAR 0 3
25127: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25128: LD_INT 0
25130: PPUSH
25131: PPUSH
25132: PPUSH
25133: PPUSH
25134: PPUSH
25135: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25136: LD_VAR 0 1
25140: NOT
25141: IFTRUE 25158
25143: PUSH
25144: LD_VAR 0 1
25148: PPUSH
25149: CALL_OW 263
25153: PUSH
25154: LD_INT 2
25156: NONEQUAL
25157: OR
25158: IFFALSE 25162
// exit ;
25160: GO 25478
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25162: LD_ADDR_VAR 0 6
25166: PUSH
25167: LD_INT 22
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: CALL_OW 255
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 30
25189: PUSH
25190: LD_INT 36
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 34
25199: PUSH
25200: LD_INT 31
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PPUSH
25216: CALL_OW 69
25220: ST_TO_ADDR
// if not tmp then
25221: LD_VAR 0 6
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25478
// result := [ ] ;
25230: LD_ADDR_VAR 0 2
25234: PUSH
25235: EMPTY
25236: ST_TO_ADDR
// for i in tmp do
25237: LD_ADDR_VAR 0 3
25241: PUSH
25242: LD_VAR 0 6
25246: PUSH
25247: FOR_IN
25248: IFFALSE 25319
// begin t := UnitsInside ( i ) ;
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: LD_VAR 0 3
25259: PPUSH
25260: CALL_OW 313
25264: ST_TO_ADDR
// if t then
25265: LD_VAR 0 4
25269: IFFALSE 25317
// for j in t do
25271: LD_ADDR_VAR 0 7
25275: PUSH
25276: LD_VAR 0 4
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25315
// result := Replace ( result , result + 1 , j ) ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_VAR 0 2
25298: PUSH
25299: LD_INT 1
25301: PLUS
25302: PPUSH
25303: LD_VAR 0 7
25307: PPUSH
25308: CALL_OW 1
25312: ST_TO_ADDR
25313: GO 25281
25315: POP
25316: POP
// end ;
25317: GO 25247
25319: POP
25320: POP
// if not result then
25321: LD_VAR 0 2
25325: NOT
25326: IFFALSE 25330
// exit ;
25328: GO 25478
// mech := result [ 1 ] ;
25330: LD_ADDR_VAR 0 5
25334: PUSH
25335: LD_VAR 0 2
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: ST_TO_ADDR
// if result > 1 then
25344: LD_VAR 0 2
25348: PUSH
25349: LD_INT 1
25351: GREATER
25352: IFFALSE 25464
// begin for i = 2 to result do
25354: LD_ADDR_VAR 0 3
25358: PUSH
25359: DOUBLE
25360: LD_INT 2
25362: DEC
25363: ST_TO_ADDR
25364: LD_VAR 0 2
25368: PUSH
25369: FOR_TO
25370: IFFALSE 25462
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25372: LD_ADDR_VAR 0 4
25376: PUSH
25377: LD_VAR 0 2
25381: PUSH
25382: LD_VAR 0 3
25386: ARRAY
25387: PPUSH
25388: LD_INT 3
25390: PPUSH
25391: CALL_OW 259
25395: PUSH
25396: LD_VAR 0 2
25400: PUSH
25401: LD_VAR 0 3
25405: ARRAY
25406: PPUSH
25407: CALL_OW 432
25411: MINUS
25412: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25413: LD_VAR 0 4
25417: PUSH
25418: LD_VAR 0 5
25422: PPUSH
25423: LD_INT 3
25425: PPUSH
25426: CALL_OW 259
25430: PUSH
25431: LD_VAR 0 5
25435: PPUSH
25436: CALL_OW 432
25440: MINUS
25441: GREATEREQUAL
25442: IFFALSE 25460
// mech := result [ i ] ;
25444: LD_ADDR_VAR 0 5
25448: PUSH
25449: LD_VAR 0 2
25453: PUSH
25454: LD_VAR 0 3
25458: ARRAY
25459: ST_TO_ADDR
// end ;
25460: GO 25369
25462: POP
25463: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25464: LD_VAR 0 1
25468: PPUSH
25469: LD_VAR 0 5
25473: PPUSH
25474: CALL_OW 135
// end ;
25478: LD_VAR 0 2
25482: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25483: LD_INT 0
25485: PPUSH
25486: PPUSH
25487: PPUSH
25488: PPUSH
25489: PPUSH
25490: PPUSH
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
25495: PPUSH
25496: PPUSH
25497: PPUSH
// result := [ ] ;
25498: LD_ADDR_VAR 0 7
25502: PUSH
25503: EMPTY
25504: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25505: LD_VAR 0 1
25509: PPUSH
25510: CALL_OW 266
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: IN
25525: NOT
25526: IFFALSE 25530
// exit ;
25528: GO 27170
// if name then
25530: LD_VAR 0 3
25534: IFFALSE 25550
// SetBName ( base_dep , name ) ;
25536: LD_VAR 0 1
25540: PPUSH
25541: LD_VAR 0 3
25545: PPUSH
25546: CALL_OW 500
// base := GetBase ( base_dep ) ;
25550: LD_ADDR_VAR 0 15
25554: PUSH
25555: LD_VAR 0 1
25559: PPUSH
25560: CALL_OW 274
25564: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25565: LD_ADDR_VAR 0 16
25569: PUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 255
25579: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25580: LD_ADDR_VAR 0 17
25584: PUSH
25585: LD_VAR 0 1
25589: PPUSH
25590: CALL_OW 248
25594: ST_TO_ADDR
// if sources then
25595: LD_VAR 0 5
25599: IFFALSE 25646
// for i = 1 to 3 do
25601: LD_ADDR_VAR 0 8
25605: PUSH
25606: DOUBLE
25607: LD_INT 1
25609: DEC
25610: ST_TO_ADDR
25611: LD_INT 3
25613: PUSH
25614: FOR_TO
25615: IFFALSE 25644
// AddResourceType ( base , i , sources [ i ] ) ;
25617: LD_VAR 0 15
25621: PPUSH
25622: LD_VAR 0 8
25626: PPUSH
25627: LD_VAR 0 5
25631: PUSH
25632: LD_VAR 0 8
25636: ARRAY
25637: PPUSH
25638: CALL_OW 276
25642: GO 25614
25644: POP
25645: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25646: LD_ADDR_VAR 0 18
25650: PUSH
25651: LD_VAR 0 15
25655: PPUSH
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 1
25663: PPUSH
25664: CALL 24905 0 3
25668: ST_TO_ADDR
// InitHc ;
25669: CALL_OW 19
// InitUc ;
25673: CALL_OW 18
// uc_side := side ;
25677: LD_ADDR_OWVAR 20
25681: PUSH
25682: LD_VAR 0 16
25686: ST_TO_ADDR
// uc_nation := nation ;
25687: LD_ADDR_OWVAR 21
25691: PUSH
25692: LD_VAR 0 17
25696: ST_TO_ADDR
// if buildings then
25697: LD_VAR 0 18
25701: IFFALSE 27029
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25703: LD_ADDR_VAR 0 19
25707: PUSH
25708: LD_VAR 0 18
25712: PPUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 30
25718: PUSH
25719: LD_INT 29
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 30
25728: PUSH
25729: LD_INT 30
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: PPUSH
25741: CALL_OW 72
25745: ST_TO_ADDR
// if tmp then
25746: LD_VAR 0 19
25750: IFFALSE 25798
// for i in tmp do
25752: LD_ADDR_VAR 0 8
25756: PUSH
25757: LD_VAR 0 19
25761: PUSH
25762: FOR_IN
25763: IFFALSE 25796
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25765: LD_VAR 0 8
25769: PPUSH
25770: CALL_OW 250
25774: PPUSH
25775: LD_VAR 0 8
25779: PPUSH
25780: CALL_OW 251
25784: PPUSH
25785: LD_VAR 0 16
25789: PPUSH
25790: CALL_OW 441
25794: GO 25762
25796: POP
25797: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25798: LD_VAR 0 18
25802: PPUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 30
25808: PUSH
25809: LD_INT 32
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 30
25818: PUSH
25819: LD_INT 33
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: PPUSH
25831: CALL_OW 72
25835: IFFALSE 25923
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25837: LD_ADDR_VAR 0 8
25841: PUSH
25842: LD_VAR 0 18
25846: PPUSH
25847: LD_INT 2
25849: PUSH
25850: LD_INT 30
25852: PUSH
25853: LD_INT 32
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 30
25862: PUSH
25863: LD_INT 33
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: LIST
25874: PPUSH
25875: CALL_OW 72
25879: PUSH
25880: FOR_IN
25881: IFFALSE 25921
// begin if not GetBWeapon ( i ) then
25883: LD_VAR 0 8
25887: PPUSH
25888: CALL_OW 269
25892: NOT
25893: IFFALSE 25919
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25895: LD_VAR 0 8
25899: PPUSH
25900: LD_VAR 0 8
25904: PPUSH
25905: LD_VAR 0 2
25909: PPUSH
25910: CALL 27175 0 2
25914: PPUSH
25915: CALL_OW 431
// end ;
25919: GO 25880
25921: POP
25922: POP
// end ; for i = 1 to personel do
25923: LD_ADDR_VAR 0 8
25927: PUSH
25928: DOUBLE
25929: LD_INT 1
25931: DEC
25932: ST_TO_ADDR
25933: LD_VAR 0 6
25937: PUSH
25938: FOR_TO
25939: IFFALSE 27009
// begin if i > 4 then
25941: LD_VAR 0 8
25945: PUSH
25946: LD_INT 4
25948: GREATER
25949: IFFALSE 25953
// break ;
25951: GO 27009
// case i of 1 :
25953: LD_VAR 0 8
25957: PUSH
25958: LD_INT 1
25960: DOUBLE
25961: EQUAL
25962: IFTRUE 25966
25964: GO 26046
25966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25967: LD_ADDR_VAR 0 12
25971: PUSH
25972: LD_VAR 0 18
25976: PPUSH
25977: LD_INT 22
25979: PUSH
25980: LD_VAR 0 16
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 58
25991: PUSH
25992: EMPTY
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 30
26000: PUSH
26001: LD_INT 32
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 30
26010: PUSH
26011: LD_INT 4
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 30
26020: PUSH
26021: LD_INT 5
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 72
26043: ST_TO_ADDR
26044: GO 26268
26046: LD_INT 2
26048: DOUBLE
26049: EQUAL
26050: IFTRUE 26054
26052: GO 26116
26054: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26055: LD_ADDR_VAR 0 12
26059: PUSH
26060: LD_VAR 0 18
26064: PPUSH
26065: LD_INT 22
26067: PUSH
26068: LD_VAR 0 16
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 30
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 30
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PPUSH
26109: CALL_OW 72
26113: ST_TO_ADDR
26114: GO 26268
26116: LD_INT 3
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26186
26124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26125: LD_ADDR_VAR 0 12
26129: PUSH
26130: LD_VAR 0 18
26134: PPUSH
26135: LD_INT 22
26137: PUSH
26138: LD_VAR 0 16
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: LD_INT 30
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 30
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: LIST
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PPUSH
26179: CALL_OW 72
26183: ST_TO_ADDR
26184: GO 26268
26186: LD_INT 4
26188: DOUBLE
26189: EQUAL
26190: IFTRUE 26194
26192: GO 26267
26194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26195: LD_ADDR_VAR 0 12
26199: PUSH
26200: LD_VAR 0 18
26204: PPUSH
26205: LD_INT 22
26207: PUSH
26208: LD_VAR 0 16
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 30
26222: PUSH
26223: LD_INT 6
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 30
26232: PUSH
26233: LD_INT 7
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 30
26242: PUSH
26243: LD_INT 8
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PPUSH
26260: CALL_OW 72
26264: ST_TO_ADDR
26265: GO 26268
26267: POP
// if i = 1 then
26268: LD_VAR 0 8
26272: PUSH
26273: LD_INT 1
26275: EQUAL
26276: IFFALSE 26387
// begin tmp := [ ] ;
26278: LD_ADDR_VAR 0 19
26282: PUSH
26283: EMPTY
26284: ST_TO_ADDR
// for j in f do
26285: LD_ADDR_VAR 0 9
26289: PUSH
26290: LD_VAR 0 12
26294: PUSH
26295: FOR_IN
26296: IFFALSE 26369
// if GetBType ( j ) = b_bunker then
26298: LD_VAR 0 9
26302: PPUSH
26303: CALL_OW 266
26307: PUSH
26308: LD_INT 32
26310: EQUAL
26311: IFFALSE 26338
// tmp := Insert ( tmp , 1 , j ) else
26313: LD_ADDR_VAR 0 19
26317: PUSH
26318: LD_VAR 0 19
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_VAR 0 9
26330: PPUSH
26331: CALL_OW 2
26335: ST_TO_ADDR
26336: GO 26367
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26338: LD_ADDR_VAR 0 19
26342: PUSH
26343: LD_VAR 0 19
26347: PPUSH
26348: LD_VAR 0 19
26352: PUSH
26353: LD_INT 1
26355: PLUS
26356: PPUSH
26357: LD_VAR 0 9
26361: PPUSH
26362: CALL_OW 2
26366: ST_TO_ADDR
26367: GO 26295
26369: POP
26370: POP
// if tmp then
26371: LD_VAR 0 19
26375: IFFALSE 26387
// f := tmp ;
26377: LD_ADDR_VAR 0 12
26381: PUSH
26382: LD_VAR 0 19
26386: ST_TO_ADDR
// end ; x := personel [ i ] ;
26387: LD_ADDR_VAR 0 13
26391: PUSH
26392: LD_VAR 0 6
26396: PUSH
26397: LD_VAR 0 8
26401: ARRAY
26402: ST_TO_ADDR
// if x = - 1 then
26403: LD_VAR 0 13
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: EQUAL
26412: IFFALSE 26623
// begin for j in f do
26414: LD_ADDR_VAR 0 9
26418: PUSH
26419: LD_VAR 0 12
26423: PUSH
26424: FOR_IN
26425: IFFALSE 26619
// repeat InitHc ;
26427: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26431: LD_VAR 0 9
26435: PPUSH
26436: CALL_OW 266
26440: PUSH
26441: LD_INT 5
26443: EQUAL
26444: IFFALSE 26514
// begin if UnitsInside ( j ) < 3 then
26446: LD_VAR 0 9
26450: PPUSH
26451: CALL_OW 313
26455: PUSH
26456: LD_INT 3
26458: LESS
26459: IFFALSE 26495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26461: LD_INT 0
26463: PPUSH
26464: LD_INT 5
26466: PUSH
26467: LD_INT 8
26469: PUSH
26470: LD_INT 9
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: LD_VAR 0 17
26482: ARRAY
26483: PPUSH
26484: LD_VAR 0 4
26488: PPUSH
26489: CALL_OW 380
26493: GO 26512
// PrepareHuman ( false , i , skill ) ;
26495: LD_INT 0
26497: PPUSH
26498: LD_VAR 0 8
26502: PPUSH
26503: LD_VAR 0 4
26507: PPUSH
26508: CALL_OW 380
// end else
26512: GO 26531
// PrepareHuman ( false , i , skill ) ;
26514: LD_INT 0
26516: PPUSH
26517: LD_VAR 0 8
26521: PPUSH
26522: LD_VAR 0 4
26526: PPUSH
26527: CALL_OW 380
// un := CreateHuman ;
26531: LD_ADDR_VAR 0 14
26535: PUSH
26536: CALL_OW 44
26540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26541: LD_ADDR_VAR 0 7
26545: PUSH
26546: LD_VAR 0 7
26550: PPUSH
26551: LD_INT 1
26553: PPUSH
26554: LD_VAR 0 14
26558: PPUSH
26559: CALL_OW 2
26563: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26564: LD_VAR 0 14
26568: PPUSH
26569: LD_VAR 0 9
26573: PPUSH
26574: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26578: LD_VAR 0 9
26582: PPUSH
26583: CALL_OW 313
26587: PUSH
26588: LD_INT 6
26590: EQUAL
26591: IFTRUE 26615
26593: PUSH
26594: LD_VAR 0 9
26598: PPUSH
26599: CALL_OW 266
26603: PUSH
26604: LD_INT 32
26606: PUSH
26607: LD_INT 31
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: IN
26614: OR
26615: IFFALSE 26427
26617: GO 26424
26619: POP
26620: POP
// end else
26621: GO 27007
// for j = 1 to x do
26623: LD_ADDR_VAR 0 9
26627: PUSH
26628: DOUBLE
26629: LD_INT 1
26631: DEC
26632: ST_TO_ADDR
26633: LD_VAR 0 13
26637: PUSH
26638: FOR_TO
26639: IFFALSE 27005
// begin InitHc ;
26641: CALL_OW 19
// if not f then
26645: LD_VAR 0 12
26649: NOT
26650: IFFALSE 26739
// begin PrepareHuman ( false , i , skill ) ;
26652: LD_INT 0
26654: PPUSH
26655: LD_VAR 0 8
26659: PPUSH
26660: LD_VAR 0 4
26664: PPUSH
26665: CALL_OW 380
// un := CreateHuman ;
26669: LD_ADDR_VAR 0 14
26673: PUSH
26674: CALL_OW 44
26678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26679: LD_ADDR_VAR 0 7
26683: PUSH
26684: LD_VAR 0 7
26688: PPUSH
26689: LD_INT 1
26691: PPUSH
26692: LD_VAR 0 14
26696: PPUSH
26697: CALL_OW 2
26701: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26702: LD_VAR 0 14
26706: PPUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 250
26716: PPUSH
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 251
26726: PPUSH
26727: LD_INT 10
26729: PPUSH
26730: LD_INT 0
26732: PPUSH
26733: CALL_OW 50
// continue ;
26737: GO 26638
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26739: LD_VAR 0 12
26743: PUSH
26744: LD_INT 1
26746: ARRAY
26747: PPUSH
26748: CALL_OW 313
26752: IFFALSE 26780
26754: PUSH
26755: LD_VAR 0 12
26759: PUSH
26760: LD_INT 1
26762: ARRAY
26763: PPUSH
26764: CALL_OW 266
26768: PUSH
26769: LD_INT 32
26771: PUSH
26772: LD_INT 31
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: IN
26779: AND
26780: IFTRUE 26801
26782: PUSH
26783: LD_VAR 0 12
26787: PUSH
26788: LD_INT 1
26790: ARRAY
26791: PPUSH
26792: CALL_OW 313
26796: PUSH
26797: LD_INT 6
26799: EQUAL
26800: OR
26801: IFFALSE 26821
// f := Delete ( f , 1 ) ;
26803: LD_ADDR_VAR 0 12
26807: PUSH
26808: LD_VAR 0 12
26812: PPUSH
26813: LD_INT 1
26815: PPUSH
26816: CALL_OW 3
26820: ST_TO_ADDR
// if not f then
26821: LD_VAR 0 12
26825: NOT
26826: IFFALSE 26844
// begin x := x + 2 ;
26828: LD_ADDR_VAR 0 13
26832: PUSH
26833: LD_VAR 0 13
26837: PUSH
26838: LD_INT 2
26840: PLUS
26841: ST_TO_ADDR
// continue ;
26842: GO 26638
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26844: LD_VAR 0 12
26848: PUSH
26849: LD_INT 1
26851: ARRAY
26852: PPUSH
26853: CALL_OW 266
26857: PUSH
26858: LD_INT 5
26860: EQUAL
26861: IFFALSE 26935
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26863: LD_VAR 0 12
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PPUSH
26872: CALL_OW 313
26876: PUSH
26877: LD_INT 3
26879: LESS
26880: IFFALSE 26916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26882: LD_INT 0
26884: PPUSH
26885: LD_INT 5
26887: PUSH
26888: LD_INT 8
26890: PUSH
26891: LD_INT 9
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: PUSH
26899: LD_VAR 0 17
26903: ARRAY
26904: PPUSH
26905: LD_VAR 0 4
26909: PPUSH
26910: CALL_OW 380
26914: GO 26933
// PrepareHuman ( false , i , skill ) ;
26916: LD_INT 0
26918: PPUSH
26919: LD_VAR 0 8
26923: PPUSH
26924: LD_VAR 0 4
26928: PPUSH
26929: CALL_OW 380
// end else
26933: GO 26952
// PrepareHuman ( false , i , skill ) ;
26935: LD_INT 0
26937: PPUSH
26938: LD_VAR 0 8
26942: PPUSH
26943: LD_VAR 0 4
26947: PPUSH
26948: CALL_OW 380
// un := CreateHuman ;
26952: LD_ADDR_VAR 0 14
26956: PUSH
26957: CALL_OW 44
26961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26962: LD_ADDR_VAR 0 7
26966: PUSH
26967: LD_VAR 0 7
26971: PPUSH
26972: LD_INT 1
26974: PPUSH
26975: LD_VAR 0 14
26979: PPUSH
26980: CALL_OW 2
26984: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26985: LD_VAR 0 14
26989: PPUSH
26990: LD_VAR 0 12
26994: PUSH
26995: LD_INT 1
26997: ARRAY
26998: PPUSH
26999: CALL_OW 52
// end ;
27003: GO 26638
27005: POP
27006: POP
// end ;
27007: GO 25938
27009: POP
27010: POP
// result := result ^ buildings ;
27011: LD_ADDR_VAR 0 7
27015: PUSH
27016: LD_VAR 0 7
27020: PUSH
27021: LD_VAR 0 18
27025: ADD
27026: ST_TO_ADDR
// end else
27027: GO 27170
// begin for i = 1 to personel do
27029: LD_ADDR_VAR 0 8
27033: PUSH
27034: DOUBLE
27035: LD_INT 1
27037: DEC
27038: ST_TO_ADDR
27039: LD_VAR 0 6
27043: PUSH
27044: FOR_TO
27045: IFFALSE 27168
// begin if i > 4 then
27047: LD_VAR 0 8
27051: PUSH
27052: LD_INT 4
27054: GREATER
27055: IFFALSE 27059
// break ;
27057: GO 27168
// x := personel [ i ] ;
27059: LD_ADDR_VAR 0 13
27063: PUSH
27064: LD_VAR 0 6
27068: PUSH
27069: LD_VAR 0 8
27073: ARRAY
27074: ST_TO_ADDR
// if x = - 1 then
27075: LD_VAR 0 13
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: EQUAL
27084: IFFALSE 27088
// continue ;
27086: GO 27044
// PrepareHuman ( false , i , skill ) ;
27088: LD_INT 0
27090: PPUSH
27091: LD_VAR 0 8
27095: PPUSH
27096: LD_VAR 0 4
27100: PPUSH
27101: CALL_OW 380
// un := CreateHuman ;
27105: LD_ADDR_VAR 0 14
27109: PUSH
27110: CALL_OW 44
27114: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27115: LD_VAR 0 14
27119: PPUSH
27120: LD_VAR 0 1
27124: PPUSH
27125: CALL_OW 250
27129: PPUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 251
27139: PPUSH
27140: LD_INT 10
27142: PPUSH
27143: LD_INT 0
27145: PPUSH
27146: CALL_OW 50
// result := result ^ un ;
27150: LD_ADDR_VAR 0 7
27154: PUSH
27155: LD_VAR 0 7
27159: PUSH
27160: LD_VAR 0 14
27164: ADD
27165: ST_TO_ADDR
// end ;
27166: GO 27044
27168: POP
27169: POP
// end ; end ;
27170: LD_VAR 0 7
27174: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27175: LD_INT 0
27177: PPUSH
27178: PPUSH
27179: PPUSH
27180: PPUSH
27181: PPUSH
27182: PPUSH
27183: PPUSH
27184: PPUSH
27185: PPUSH
27186: PPUSH
27187: PPUSH
27188: PPUSH
27189: PPUSH
27190: PPUSH
27191: PPUSH
27192: PPUSH
// result := false ;
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_INT 0
27200: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27201: LD_VAR 0 1
27205: NOT
27206: IFTRUE 27231
27208: PUSH
27209: LD_VAR 0 1
27213: PPUSH
27214: CALL_OW 266
27218: PUSH
27219: LD_INT 32
27221: PUSH
27222: LD_INT 33
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: IN
27229: NOT
27230: OR
27231: IFFALSE 27235
// exit ;
27233: GO 28370
// nat := GetNation ( tower ) ;
27235: LD_ADDR_VAR 0 12
27239: PUSH
27240: LD_VAR 0 1
27244: PPUSH
27245: CALL_OW 248
27249: ST_TO_ADDR
// side := GetSide ( tower ) ;
27250: LD_ADDR_VAR 0 16
27254: PUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 255
27264: ST_TO_ADDR
// x := GetX ( tower ) ;
27265: LD_ADDR_VAR 0 10
27269: PUSH
27270: LD_VAR 0 1
27274: PPUSH
27275: CALL_OW 250
27279: ST_TO_ADDR
// y := GetY ( tower ) ;
27280: LD_ADDR_VAR 0 11
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 251
27294: ST_TO_ADDR
// if not x or not y then
27295: LD_VAR 0 10
27299: NOT
27300: IFTRUE 27309
27302: PUSH
27303: LD_VAR 0 11
27307: NOT
27308: OR
27309: IFFALSE 27313
// exit ;
27311: GO 28370
// weapon := 0 ;
27313: LD_ADDR_VAR 0 18
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// fac_list := [ ] ;
27321: LD_ADDR_VAR 0 17
27325: PUSH
27326: EMPTY
27327: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27328: LD_ADDR_VAR 0 6
27332: PUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 274
27342: PPUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: LD_INT 0
27350: PPUSH
27351: CALL 24905 0 3
27355: PPUSH
27356: LD_INT 30
27358: PUSH
27359: LD_INT 3
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 72
27370: ST_TO_ADDR
// if not factories then
27371: LD_VAR 0 6
27375: NOT
27376: IFFALSE 27380
// exit ;
27378: GO 28370
// for i in factories do
27380: LD_ADDR_VAR 0 8
27384: PUSH
27385: LD_VAR 0 6
27389: PUSH
27390: FOR_IN
27391: IFFALSE 27416
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27393: LD_ADDR_VAR 0 17
27397: PUSH
27398: LD_VAR 0 17
27402: PUSH
27403: LD_VAR 0 8
27407: PPUSH
27408: CALL_OW 478
27412: UNION
27413: ST_TO_ADDR
27414: GO 27390
27416: POP
27417: POP
// if not fac_list then
27418: LD_VAR 0 17
27422: NOT
27423: IFFALSE 27427
// exit ;
27425: GO 28370
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27427: LD_ADDR_VAR 0 5
27431: PUSH
27432: LD_INT 4
27434: PUSH
27435: LD_INT 5
27437: PUSH
27438: LD_INT 9
27440: PUSH
27441: LD_INT 10
27443: PUSH
27444: LD_INT 6
27446: PUSH
27447: LD_INT 7
27449: PUSH
27450: LD_INT 11
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 27
27464: PUSH
27465: LD_INT 28
27467: PUSH
27468: LD_INT 26
27470: PUSH
27471: LD_INT 30
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 43
27482: PUSH
27483: LD_INT 44
27485: PUSH
27486: LD_INT 46
27488: PUSH
27489: LD_INT 45
27491: PUSH
27492: LD_INT 47
27494: PUSH
27495: LD_INT 49
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: LIST
27510: PUSH
27511: LD_VAR 0 12
27515: ARRAY
27516: ST_TO_ADDR
// list := list isect fac_list ;
27517: LD_ADDR_VAR 0 5
27521: PUSH
27522: LD_VAR 0 5
27526: PUSH
27527: LD_VAR 0 17
27531: ISECT
27532: ST_TO_ADDR
// if not list then
27533: LD_VAR 0 5
27537: NOT
27538: IFFALSE 27542
// exit ;
27540: GO 28370
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27542: LD_VAR 0 12
27546: PUSH
27547: LD_INT 3
27549: EQUAL
27550: IFFALSE 27562
27552: PUSH
27553: LD_INT 49
27555: PUSH
27556: LD_VAR 0 5
27560: IN
27561: AND
27562: IFFALSE 27582
27564: PUSH
27565: LD_INT 31
27567: PPUSH
27568: LD_VAR 0 16
27572: PPUSH
27573: CALL_OW 321
27577: PUSH
27578: LD_INT 2
27580: EQUAL
27581: AND
27582: IFFALSE 27642
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27584: LD_INT 22
27586: PUSH
27587: LD_VAR 0 16
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 35
27598: PUSH
27599: LD_INT 49
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 91
27608: PUSH
27609: LD_VAR 0 1
27613: PUSH
27614: LD_INT 10
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: PPUSH
27627: CALL_OW 69
27631: NOT
27632: IFFALSE 27642
// weapon := ru_time_lapser ;
27634: LD_ADDR_VAR 0 18
27638: PUSH
27639: LD_INT 49
27641: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27642: LD_VAR 0 12
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: IN
27657: IFFALSE 27681
27659: PUSH
27660: LD_INT 11
27662: PUSH
27663: LD_VAR 0 5
27667: IN
27668: IFTRUE 27680
27670: PUSH
27671: LD_INT 30
27673: PUSH
27674: LD_VAR 0 5
27678: IN
27679: OR
27680: AND
27681: IFFALSE 27701
27683: PUSH
27684: LD_INT 6
27686: PPUSH
27687: LD_VAR 0 16
27691: PPUSH
27692: CALL_OW 321
27696: PUSH
27697: LD_INT 2
27699: EQUAL
27700: AND
27701: IFFALSE 27868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27703: LD_INT 22
27705: PUSH
27706: LD_VAR 0 16
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: LD_INT 35
27720: PUSH
27721: LD_INT 11
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 35
27730: PUSH
27731: LD_INT 30
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 91
27745: PUSH
27746: LD_VAR 0 1
27750: PUSH
27751: LD_INT 18
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: PPUSH
27764: CALL_OW 69
27768: NOT
27769: IFFALSE 27845
27771: PUSH
27772: LD_INT 22
27774: PUSH
27775: LD_VAR 0 16
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 30
27789: PUSH
27790: LD_INT 32
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 30
27799: PUSH
27800: LD_INT 33
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 91
27814: PUSH
27815: LD_VAR 0 1
27819: PUSH
27820: LD_INT 12
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: PPUSH
27836: CALL_OW 69
27840: PUSH
27841: LD_INT 2
27843: GREATER
27844: AND
27845: IFFALSE 27868
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27847: LD_ADDR_VAR 0 18
27851: PUSH
27852: LD_INT 11
27854: PUSH
27855: LD_INT 30
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_VAR 0 12
27866: ARRAY
27867: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27868: LD_VAR 0 18
27872: NOT
27873: IFFALSE 27893
27875: PUSH
27876: LD_INT 40
27878: PPUSH
27879: LD_VAR 0 16
27883: PPUSH
27884: CALL_OW 321
27888: PUSH
27889: LD_INT 2
27891: EQUAL
27892: AND
27893: IFFALSE 27929
27895: PUSH
27896: LD_INT 7
27898: PUSH
27899: LD_VAR 0 5
27903: IN
27904: IFTRUE 27916
27906: PUSH
27907: LD_INT 28
27909: PUSH
27910: LD_VAR 0 5
27914: IN
27915: OR
27916: IFTRUE 27928
27918: PUSH
27919: LD_INT 45
27921: PUSH
27922: LD_VAR 0 5
27926: IN
27927: OR
27928: AND
27929: IFFALSE 28183
// begin hex := GetHexInfo ( x , y ) ;
27931: LD_ADDR_VAR 0 4
27935: PUSH
27936: LD_VAR 0 10
27940: PPUSH
27941: LD_VAR 0 11
27945: PPUSH
27946: CALL_OW 546
27950: ST_TO_ADDR
// if hex [ 1 ] then
27951: LD_VAR 0 4
27955: PUSH
27956: LD_INT 1
27958: ARRAY
27959: IFFALSE 27963
// exit ;
27961: GO 28370
// height := hex [ 2 ] ;
27963: LD_ADDR_VAR 0 15
27967: PUSH
27968: LD_VAR 0 4
27972: PUSH
27973: LD_INT 2
27975: ARRAY
27976: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27977: LD_ADDR_VAR 0 14
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 3
27990: PUSH
27991: LD_INT 5
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// for i in tmp do
28000: LD_ADDR_VAR 0 8
28004: PUSH
28005: LD_VAR 0 14
28009: PUSH
28010: FOR_IN
28011: IFFALSE 28181
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28013: LD_ADDR_VAR 0 9
28017: PUSH
28018: LD_VAR 0 10
28022: PPUSH
28023: LD_VAR 0 8
28027: PPUSH
28028: LD_INT 5
28030: PPUSH
28031: CALL_OW 272
28035: PUSH
28036: LD_VAR 0 11
28040: PPUSH
28041: LD_VAR 0 8
28045: PPUSH
28046: LD_INT 5
28048: PPUSH
28049: CALL_OW 273
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28058: LD_VAR 0 9
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: PPUSH
28067: LD_VAR 0 9
28071: PUSH
28072: LD_INT 2
28074: ARRAY
28075: PPUSH
28076: CALL_OW 488
28080: IFFALSE 28179
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28082: LD_ADDR_VAR 0 4
28086: PUSH
28087: LD_VAR 0 9
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: LD_VAR 0 9
28100: PUSH
28101: LD_INT 2
28103: ARRAY
28104: PPUSH
28105: CALL_OW 546
28109: ST_TO_ADDR
// if hex [ 1 ] then
28110: LD_VAR 0 4
28114: PUSH
28115: LD_INT 1
28117: ARRAY
28118: IFFALSE 28122
// continue ;
28120: GO 28010
// h := hex [ 2 ] ;
28122: LD_ADDR_VAR 0 13
28126: PUSH
28127: LD_VAR 0 4
28131: PUSH
28132: LD_INT 2
28134: ARRAY
28135: ST_TO_ADDR
// if h + 7 < height then
28136: LD_VAR 0 13
28140: PUSH
28141: LD_INT 7
28143: PLUS
28144: PUSH
28145: LD_VAR 0 15
28149: LESS
28150: IFFALSE 28179
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28152: LD_ADDR_VAR 0 18
28156: PUSH
28157: LD_INT 7
28159: PUSH
28160: LD_INT 28
28162: PUSH
28163: LD_INT 45
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: LD_VAR 0 12
28175: ARRAY
28176: ST_TO_ADDR
// break ;
28177: GO 28181
// end ; end ; end ;
28179: GO 28010
28181: POP
28182: POP
// end ; if not weapon then
28183: LD_VAR 0 18
28187: NOT
28188: IFFALSE 28248
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28190: LD_ADDR_VAR 0 5
28194: PUSH
28195: LD_VAR 0 5
28199: PUSH
28200: LD_INT 11
28202: PUSH
28203: LD_INT 30
28205: PUSH
28206: LD_INT 49
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: DIFF
28214: ST_TO_ADDR
// if not list then
28215: LD_VAR 0 5
28219: NOT
28220: IFFALSE 28224
// exit ;
28222: GO 28370
// weapon := list [ rand ( 1 , list ) ] ;
28224: LD_ADDR_VAR 0 18
28228: PUSH
28229: LD_VAR 0 5
28233: PUSH
28234: LD_INT 1
28236: PPUSH
28237: LD_VAR 0 5
28241: PPUSH
28242: CALL_OW 12
28246: ARRAY
28247: ST_TO_ADDR
// end ; if weapon then
28248: LD_VAR 0 18
28252: IFFALSE 28370
// begin tmp := CostOfWeapon ( weapon ) ;
28254: LD_ADDR_VAR 0 14
28258: PUSH
28259: LD_VAR 0 18
28263: PPUSH
28264: CALL_OW 451
28268: ST_TO_ADDR
// j := GetBase ( tower ) ;
28269: LD_ADDR_VAR 0 9
28273: PUSH
28274: LD_VAR 0 1
28278: PPUSH
28279: CALL_OW 274
28283: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28284: LD_VAR 0 9
28288: PPUSH
28289: LD_INT 1
28291: PPUSH
28292: CALL_OW 275
28296: PUSH
28297: LD_VAR 0 14
28301: PUSH
28302: LD_INT 1
28304: ARRAY
28305: GREATEREQUAL
28306: IFFALSE 28332
28308: PUSH
28309: LD_VAR 0 9
28313: PPUSH
28314: LD_INT 2
28316: PPUSH
28317: CALL_OW 275
28321: PUSH
28322: LD_VAR 0 14
28326: PUSH
28327: LD_INT 2
28329: ARRAY
28330: GREATEREQUAL
28331: AND
28332: IFFALSE 28358
28334: PUSH
28335: LD_VAR 0 9
28339: PPUSH
28340: LD_INT 3
28342: PPUSH
28343: CALL_OW 275
28347: PUSH
28348: LD_VAR 0 14
28352: PUSH
28353: LD_INT 3
28355: ARRAY
28356: GREATEREQUAL
28357: AND
28358: IFFALSE 28370
// result := weapon ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 18
28369: ST_TO_ADDR
// end ; end ;
28370: LD_VAR 0 3
28374: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28375: LD_INT 0
28377: PPUSH
28378: PPUSH
// result := true ;
28379: LD_ADDR_VAR 0 3
28383: PUSH
28384: LD_INT 1
28386: ST_TO_ADDR
// if array1 = array2 then
28387: LD_VAR 0 1
28391: PUSH
28392: LD_VAR 0 2
28396: EQUAL
28397: IFFALSE 28457
// begin for i = 1 to array1 do
28399: LD_ADDR_VAR 0 4
28403: PUSH
28404: DOUBLE
28405: LD_INT 1
28407: DEC
28408: ST_TO_ADDR
28409: LD_VAR 0 1
28413: PUSH
28414: FOR_TO
28415: IFFALSE 28453
// if array1 [ i ] <> array2 [ i ] then
28417: LD_VAR 0 1
28421: PUSH
28422: LD_VAR 0 4
28426: ARRAY
28427: PUSH
28428: LD_VAR 0 2
28432: PUSH
28433: LD_VAR 0 4
28437: ARRAY
28438: NONEQUAL
28439: IFFALSE 28451
// begin result := false ;
28441: LD_ADDR_VAR 0 3
28445: PUSH
28446: LD_INT 0
28448: ST_TO_ADDR
// break ;
28449: GO 28453
// end ;
28451: GO 28414
28453: POP
28454: POP
// end else
28455: GO 28465
// result := false ;
28457: LD_ADDR_VAR 0 3
28461: PUSH
28462: LD_INT 0
28464: ST_TO_ADDR
// end ;
28465: LD_VAR 0 3
28469: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28470: LD_INT 0
28472: PPUSH
28473: PPUSH
// if not array1 or not array2 then
28474: LD_VAR 0 1
28478: NOT
28479: IFTRUE 28488
28481: PUSH
28482: LD_VAR 0 2
28486: NOT
28487: OR
28488: IFFALSE 28492
// exit ;
28490: GO 28556
// result := true ;
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_INT 1
28499: ST_TO_ADDR
// for i = 1 to array1 do
28500: LD_ADDR_VAR 0 4
28504: PUSH
28505: DOUBLE
28506: LD_INT 1
28508: DEC
28509: ST_TO_ADDR
28510: LD_VAR 0 1
28514: PUSH
28515: FOR_TO
28516: IFFALSE 28554
// if array1 [ i ] <> array2 [ i ] then
28518: LD_VAR 0 1
28522: PUSH
28523: LD_VAR 0 4
28527: ARRAY
28528: PUSH
28529: LD_VAR 0 2
28533: PUSH
28534: LD_VAR 0 4
28538: ARRAY
28539: NONEQUAL
28540: IFFALSE 28552
// begin result := false ;
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_INT 0
28549: ST_TO_ADDR
// break ;
28550: GO 28554
// end ;
28552: GO 28515
28554: POP
28555: POP
// end ;
28556: LD_VAR 0 3
28560: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28561: LD_INT 0
28563: PPUSH
28564: PPUSH
28565: PPUSH
// pom := GetBase ( fac ) ;
28566: LD_ADDR_VAR 0 5
28570: PUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 274
28580: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28581: LD_ADDR_VAR 0 4
28585: PUSH
28586: LD_VAR 0 2
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: LD_VAR 0 2
28599: PUSH
28600: LD_INT 2
28602: ARRAY
28603: PPUSH
28604: LD_VAR 0 2
28608: PUSH
28609: LD_INT 3
28611: ARRAY
28612: PPUSH
28613: LD_VAR 0 2
28617: PUSH
28618: LD_INT 4
28620: ARRAY
28621: PPUSH
28622: CALL_OW 449
28626: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28627: LD_ADDR_VAR 0 3
28631: PUSH
28632: LD_VAR 0 5
28636: PPUSH
28637: LD_INT 1
28639: PPUSH
28640: CALL_OW 275
28644: PUSH
28645: LD_VAR 0 4
28649: PUSH
28650: LD_INT 1
28652: ARRAY
28653: GREATEREQUAL
28654: IFFALSE 28680
28656: PUSH
28657: LD_VAR 0 5
28661: PPUSH
28662: LD_INT 2
28664: PPUSH
28665: CALL_OW 275
28669: PUSH
28670: LD_VAR 0 4
28674: PUSH
28675: LD_INT 2
28677: ARRAY
28678: GREATEREQUAL
28679: AND
28680: IFFALSE 28706
28682: PUSH
28683: LD_VAR 0 5
28687: PPUSH
28688: LD_INT 3
28690: PPUSH
28691: CALL_OW 275
28695: PUSH
28696: LD_VAR 0 4
28700: PUSH
28701: LD_INT 3
28703: ARRAY
28704: GREATEREQUAL
28705: AND
28706: ST_TO_ADDR
// end ;
28707: LD_VAR 0 3
28711: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28712: LD_INT 0
28714: PPUSH
28715: PPUSH
28716: PPUSH
28717: PPUSH
// pom := GetBase ( building ) ;
28718: LD_ADDR_VAR 0 3
28722: PUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 274
28732: ST_TO_ADDR
// if not pom then
28733: LD_VAR 0 3
28737: NOT
28738: IFFALSE 28742
// exit ;
28740: GO 28916
// btype := GetBType ( building ) ;
28742: LD_ADDR_VAR 0 5
28746: PUSH
28747: LD_VAR 0 1
28751: PPUSH
28752: CALL_OW 266
28756: ST_TO_ADDR
// if btype = b_armoury then
28757: LD_VAR 0 5
28761: PUSH
28762: LD_INT 4
28764: EQUAL
28765: IFFALSE 28775
// btype := b_barracks ;
28767: LD_ADDR_VAR 0 5
28771: PUSH
28772: LD_INT 5
28774: ST_TO_ADDR
// if btype = b_depot then
28775: LD_VAR 0 5
28779: PUSH
28780: LD_INT 0
28782: EQUAL
28783: IFFALSE 28793
// btype := b_warehouse ;
28785: LD_ADDR_VAR 0 5
28789: PUSH
28790: LD_INT 1
28792: ST_TO_ADDR
// if btype = b_workshop then
28793: LD_VAR 0 5
28797: PUSH
28798: LD_INT 2
28800: EQUAL
28801: IFFALSE 28811
// btype := b_factory ;
28803: LD_ADDR_VAR 0 5
28807: PUSH
28808: LD_INT 3
28810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28811: LD_ADDR_VAR 0 4
28815: PUSH
28816: LD_VAR 0 5
28820: PPUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 248
28830: PPUSH
28831: CALL_OW 450
28835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28836: LD_ADDR_VAR 0 2
28840: PUSH
28841: LD_VAR 0 3
28845: PPUSH
28846: LD_INT 1
28848: PPUSH
28849: CALL_OW 275
28853: PUSH
28854: LD_VAR 0 4
28858: PUSH
28859: LD_INT 1
28861: ARRAY
28862: GREATEREQUAL
28863: IFFALSE 28889
28865: PUSH
28866: LD_VAR 0 3
28870: PPUSH
28871: LD_INT 2
28873: PPUSH
28874: CALL_OW 275
28878: PUSH
28879: LD_VAR 0 4
28883: PUSH
28884: LD_INT 2
28886: ARRAY
28887: GREATEREQUAL
28888: AND
28889: IFFALSE 28915
28891: PUSH
28892: LD_VAR 0 3
28896: PPUSH
28897: LD_INT 3
28899: PPUSH
28900: CALL_OW 275
28904: PUSH
28905: LD_VAR 0 4
28909: PUSH
28910: LD_INT 3
28912: ARRAY
28913: GREATEREQUAL
28914: AND
28915: ST_TO_ADDR
// end ;
28916: LD_VAR 0 2
28920: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
28925: PPUSH
// pom := GetBase ( building ) ;
28926: LD_ADDR_VAR 0 4
28930: PUSH
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL_OW 274
28940: ST_TO_ADDR
// if not pom then
28941: LD_VAR 0 4
28945: NOT
28946: IFFALSE 28950
// exit ;
28948: GO 29055
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28950: LD_ADDR_VAR 0 5
28954: PUSH
28955: LD_VAR 0 2
28959: PPUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 248
28969: PPUSH
28970: CALL_OW 450
28974: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_VAR 0 4
28984: PPUSH
28985: LD_INT 1
28987: PPUSH
28988: CALL_OW 275
28992: PUSH
28993: LD_VAR 0 5
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: GREATEREQUAL
29002: IFFALSE 29028
29004: PUSH
29005: LD_VAR 0 4
29009: PPUSH
29010: LD_INT 2
29012: PPUSH
29013: CALL_OW 275
29017: PUSH
29018: LD_VAR 0 5
29022: PUSH
29023: LD_INT 2
29025: ARRAY
29026: GREATEREQUAL
29027: AND
29028: IFFALSE 29054
29030: PUSH
29031: LD_VAR 0 4
29035: PPUSH
29036: LD_INT 3
29038: PPUSH
29039: CALL_OW 275
29043: PUSH
29044: LD_VAR 0 5
29048: PUSH
29049: LD_INT 3
29051: ARRAY
29052: GREATEREQUAL
29053: AND
29054: ST_TO_ADDR
// end ;
29055: LD_VAR 0 3
29059: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29060: LD_INT 0
29062: PPUSH
29063: PPUSH
29064: PPUSH
29065: PPUSH
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
// result := false ;
29073: LD_ADDR_VAR 0 8
29077: PUSH
29078: LD_INT 0
29080: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29081: LD_VAR 0 5
29085: NOT
29086: IFTRUE 29095
29088: PUSH
29089: LD_VAR 0 1
29093: NOT
29094: OR
29095: IFTRUE 29104
29097: PUSH
29098: LD_VAR 0 2
29102: NOT
29103: OR
29104: IFTRUE 29113
29106: PUSH
29107: LD_VAR 0 3
29111: NOT
29112: OR
29113: IFFALSE 29117
// exit ;
29115: GO 29943
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29117: LD_ADDR_VAR 0 14
29121: PUSH
29122: LD_VAR 0 1
29126: PPUSH
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: LD_VAR 0 4
29141: PPUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PPUSH
29151: CALL_OW 248
29155: PPUSH
29156: LD_INT 0
29158: PPUSH
29159: CALL 31224 0 6
29163: ST_TO_ADDR
// if not hexes then
29164: LD_VAR 0 14
29168: NOT
29169: IFFALSE 29173
// exit ;
29171: GO 29943
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29173: LD_ADDR_VAR 0 17
29177: PUSH
29178: LD_VAR 0 5
29182: PPUSH
29183: LD_INT 22
29185: PUSH
29186: LD_VAR 0 13
29190: PPUSH
29191: CALL_OW 255
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 30
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 30
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PPUSH
29232: CALL_OW 72
29236: ST_TO_ADDR
// for i = 1 to hexes do
29237: LD_ADDR_VAR 0 9
29241: PUSH
29242: DOUBLE
29243: LD_INT 1
29245: DEC
29246: ST_TO_ADDR
29247: LD_VAR 0 14
29251: PUSH
29252: FOR_TO
29253: IFFALSE 29941
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29255: LD_ADDR_VAR 0 13
29259: PUSH
29260: LD_VAR 0 14
29264: PUSH
29265: LD_VAR 0 9
29269: ARRAY
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: LD_VAR 0 14
29279: PUSH
29280: LD_VAR 0 9
29284: ARRAY
29285: PUSH
29286: LD_INT 2
29288: ARRAY
29289: PPUSH
29290: CALL_OW 428
29294: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29295: LD_VAR 0 14
29299: PUSH
29300: LD_VAR 0 9
29304: ARRAY
29305: PUSH
29306: LD_INT 1
29308: ARRAY
29309: PPUSH
29310: LD_VAR 0 14
29314: PUSH
29315: LD_VAR 0 9
29319: ARRAY
29320: PUSH
29321: LD_INT 2
29323: ARRAY
29324: PPUSH
29325: CALL_OW 351
29329: IFTRUE 29368
29331: PUSH
29332: LD_VAR 0 14
29336: PUSH
29337: LD_VAR 0 9
29341: ARRAY
29342: PUSH
29343: LD_INT 1
29345: ARRAY
29346: PPUSH
29347: LD_VAR 0 14
29351: PUSH
29352: LD_VAR 0 9
29356: ARRAY
29357: PUSH
29358: LD_INT 2
29360: ARRAY
29361: PPUSH
29362: CALL_OW 488
29366: NOT
29367: OR
29368: IFTRUE 29385
29370: PUSH
29371: LD_VAR 0 13
29375: PPUSH
29376: CALL_OW 247
29380: PUSH
29381: LD_INT 3
29383: EQUAL
29384: OR
29385: IFFALSE 29391
// exit ;
29387: POP
29388: POP
29389: GO 29943
// if not tmp then
29391: LD_VAR 0 13
29395: NOT
29396: IFFALSE 29400
// continue ;
29398: GO 29252
// result := true ;
29400: LD_ADDR_VAR 0 8
29404: PUSH
29405: LD_INT 1
29407: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29408: LD_VAR 0 6
29412: IFFALSE 29429
29414: PUSH
29415: LD_VAR 0 13
29419: PPUSH
29420: CALL_OW 247
29424: PUSH
29425: LD_INT 2
29427: EQUAL
29428: AND
29429: IFFALSE 29446
29431: PUSH
29432: LD_VAR 0 13
29436: PPUSH
29437: CALL_OW 263
29441: PUSH
29442: LD_INT 1
29444: EQUAL
29445: AND
29446: IFFALSE 29610
// begin if IsDrivenBy ( tmp ) then
29448: LD_VAR 0 13
29452: PPUSH
29453: CALL_OW 311
29457: IFFALSE 29461
// continue ;
29459: GO 29252
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29461: LD_VAR 0 6
29465: PPUSH
29466: LD_INT 3
29468: PUSH
29469: LD_INT 60
29471: PUSH
29472: EMPTY
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 55
29484: PUSH
29485: EMPTY
29486: LIST
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PPUSH
29496: CALL_OW 72
29500: IFFALSE 29608
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29502: LD_ADDR_VAR 0 18
29506: PUSH
29507: LD_VAR 0 6
29511: PPUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 60
29517: PUSH
29518: EMPTY
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: LD_INT 55
29530: PUSH
29531: EMPTY
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 72
29546: PUSH
29547: LD_INT 1
29549: ARRAY
29550: ST_TO_ADDR
// if IsInUnit ( driver ) then
29551: LD_VAR 0 18
29555: PPUSH
29556: CALL_OW 310
29560: IFFALSE 29571
// ComExit ( driver ) ;
29562: LD_VAR 0 18
29566: PPUSH
29567: CALL 55214 0 1
// AddComEnterUnit ( driver , tmp ) ;
29571: LD_VAR 0 18
29575: PPUSH
29576: LD_VAR 0 13
29580: PPUSH
29581: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29585: LD_VAR 0 18
29589: PPUSH
29590: LD_VAR 0 7
29594: PPUSH
29595: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29599: LD_VAR 0 18
29603: PPUSH
29604: CALL_OW 181
// end ; continue ;
29608: GO 29252
// end ; if not cleaners or not tmp in cleaners then
29610: LD_VAR 0 6
29614: NOT
29615: IFTRUE 29630
29617: PUSH
29618: LD_VAR 0 13
29622: PUSH
29623: LD_VAR 0 6
29627: IN
29628: NOT
29629: OR
29630: IFFALSE 29939
// begin if dep then
29632: LD_VAR 0 17
29636: IFFALSE 29772
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29638: LD_ADDR_VAR 0 16
29642: PUSH
29643: LD_VAR 0 17
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: CALL_OW 250
29656: PPUSH
29657: LD_VAR 0 17
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PPUSH
29666: CALL_OW 254
29670: PPUSH
29671: LD_INT 5
29673: PPUSH
29674: CALL_OW 272
29678: PUSH
29679: LD_VAR 0 17
29683: PUSH
29684: LD_INT 1
29686: ARRAY
29687: PPUSH
29688: CALL_OW 251
29692: PPUSH
29693: LD_VAR 0 17
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: PPUSH
29702: CALL_OW 254
29706: PPUSH
29707: LD_INT 5
29709: PPUSH
29710: CALL_OW 273
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29719: LD_VAR 0 16
29723: PUSH
29724: LD_INT 1
29726: ARRAY
29727: PPUSH
29728: LD_VAR 0 16
29732: PUSH
29733: LD_INT 2
29735: ARRAY
29736: PPUSH
29737: CALL_OW 488
29741: IFFALSE 29772
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29743: LD_VAR 0 13
29747: PPUSH
29748: LD_VAR 0 16
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: LD_VAR 0 16
29761: PUSH
29762: LD_INT 2
29764: ARRAY
29765: PPUSH
29766: CALL_OW 111
// continue ;
29770: GO 29252
// end ; end ; r := GetDir ( tmp ) ;
29772: LD_ADDR_VAR 0 15
29776: PUSH
29777: LD_VAR 0 13
29781: PPUSH
29782: CALL_OW 254
29786: ST_TO_ADDR
// if r = 5 then
29787: LD_VAR 0 15
29791: PUSH
29792: LD_INT 5
29794: EQUAL
29795: IFFALSE 29805
// r := 0 ;
29797: LD_ADDR_VAR 0 15
29801: PUSH
29802: LD_INT 0
29804: ST_TO_ADDR
// for j = r to 5 do
29805: LD_ADDR_VAR 0 10
29809: PUSH
29810: DOUBLE
29811: LD_VAR 0 15
29815: DEC
29816: ST_TO_ADDR
29817: LD_INT 5
29819: PUSH
29820: FOR_TO
29821: IFFALSE 29937
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29823: LD_ADDR_VAR 0 11
29827: PUSH
29828: LD_VAR 0 13
29832: PPUSH
29833: CALL_OW 250
29837: PPUSH
29838: LD_VAR 0 10
29842: PPUSH
29843: LD_INT 2
29845: PPUSH
29846: CALL_OW 272
29850: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29851: LD_ADDR_VAR 0 12
29855: PUSH
29856: LD_VAR 0 13
29860: PPUSH
29861: CALL_OW 251
29865: PPUSH
29866: LD_VAR 0 10
29870: PPUSH
29871: LD_INT 2
29873: PPUSH
29874: CALL_OW 273
29878: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29879: LD_VAR 0 11
29883: PPUSH
29884: LD_VAR 0 12
29888: PPUSH
29889: CALL_OW 488
29893: IFFALSE 29912
29895: PUSH
29896: LD_VAR 0 11
29900: PPUSH
29901: LD_VAR 0 12
29905: PPUSH
29906: CALL_OW 428
29910: NOT
29911: AND
29912: IFFALSE 29935
// begin ComMoveXY ( tmp , _x , _y ) ;
29914: LD_VAR 0 13
29918: PPUSH
29919: LD_VAR 0 11
29923: PPUSH
29924: LD_VAR 0 12
29928: PPUSH
29929: CALL_OW 111
// break ;
29933: GO 29937
// end ; end ;
29935: GO 29820
29937: POP
29938: POP
// end ; end ;
29939: GO 29252
29941: POP
29942: POP
// end ;
29943: LD_VAR 0 8
29947: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29948: LD_INT 0
29950: PPUSH
// result := true ;
29951: LD_ADDR_VAR 0 3
29955: PUSH
29956: LD_INT 1
29958: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29959: LD_VAR 0 2
29963: PUSH
29964: LD_INT 24
29966: DOUBLE
29967: EQUAL
29968: IFTRUE 29978
29970: LD_INT 33
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30003
29978: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_INT 32
29986: PPUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: CALL_OW 321
29996: PUSH
29997: LD_INT 2
29999: EQUAL
30000: ST_TO_ADDR
30001: GO 30319
30003: LD_INT 20
30005: DOUBLE
30006: EQUAL
30007: IFTRUE 30011
30009: GO 30036
30011: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30012: LD_ADDR_VAR 0 3
30016: PUSH
30017: LD_INT 6
30019: PPUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 321
30029: PUSH
30030: LD_INT 2
30032: EQUAL
30033: ST_TO_ADDR
30034: GO 30319
30036: LD_INT 22
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30050
30042: LD_INT 36
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30075
30050: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30051: LD_ADDR_VAR 0 3
30055: PUSH
30056: LD_INT 15
30058: PPUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 321
30068: PUSH
30069: LD_INT 2
30071: EQUAL
30072: ST_TO_ADDR
30073: GO 30319
30075: LD_INT 30
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30108
30083: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30084: LD_ADDR_VAR 0 3
30088: PUSH
30089: LD_INT 20
30091: PPUSH
30092: LD_VAR 0 1
30096: PPUSH
30097: CALL_OW 321
30101: PUSH
30102: LD_INT 2
30104: EQUAL
30105: ST_TO_ADDR
30106: GO 30319
30108: LD_INT 28
30110: DOUBLE
30111: EQUAL
30112: IFTRUE 30122
30114: LD_INT 21
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30147
30122: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 21
30130: PPUSH
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 321
30140: PUSH
30141: LD_INT 2
30143: EQUAL
30144: ST_TO_ADDR
30145: GO 30319
30147: LD_INT 16
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30155
30153: GO 30180
30155: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30156: LD_ADDR_VAR 0 3
30160: PUSH
30161: LD_INT 84
30163: PPUSH
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 321
30173: PUSH
30174: LD_INT 2
30176: EQUAL
30177: ST_TO_ADDR
30178: GO 30319
30180: LD_INT 19
30182: DOUBLE
30183: EQUAL
30184: IFTRUE 30194
30186: LD_INT 23
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30219
30194: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_INT 83
30202: PPUSH
30203: LD_VAR 0 1
30207: PPUSH
30208: CALL_OW 321
30212: PUSH
30213: LD_INT 2
30215: EQUAL
30216: ST_TO_ADDR
30217: GO 30319
30219: LD_INT 17
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30252
30227: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: LD_INT 39
30235: PPUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 321
30245: PUSH
30246: LD_INT 2
30248: EQUAL
30249: ST_TO_ADDR
30250: GO 30319
30252: LD_INT 18
30254: DOUBLE
30255: EQUAL
30256: IFTRUE 30260
30258: GO 30285
30260: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: LD_INT 40
30268: PPUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: CALL_OW 321
30278: PUSH
30279: LD_INT 2
30281: EQUAL
30282: ST_TO_ADDR
30283: GO 30319
30285: LD_INT 27
30287: DOUBLE
30288: EQUAL
30289: IFTRUE 30293
30291: GO 30318
30293: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_INT 35
30301: PPUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: CALL_OW 321
30311: PUSH
30312: LD_INT 2
30314: EQUAL
30315: ST_TO_ADDR
30316: GO 30319
30318: POP
// end ;
30319: LD_VAR 0 3
30323: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30324: LD_INT 0
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
// result := false ;
30337: LD_ADDR_VAR 0 6
30341: PUSH
30342: LD_INT 0
30344: ST_TO_ADDR
// if btype = b_depot then
30345: LD_VAR 0 2
30349: PUSH
30350: LD_INT 0
30352: EQUAL
30353: IFFALSE 30365
// begin result := true ;
30355: LD_ADDR_VAR 0 6
30359: PUSH
30360: LD_INT 1
30362: ST_TO_ADDR
// exit ;
30363: GO 31219
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30365: LD_VAR 0 1
30369: NOT
30370: IFTRUE 30395
30372: PUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 266
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: IN
30393: NOT
30394: OR
30395: IFTRUE 30404
30397: PUSH
30398: LD_VAR 0 2
30402: NOT
30403: OR
30404: IFTRUE 30440
30406: PUSH
30407: LD_VAR 0 5
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 4
30426: PUSH
30427: LD_INT 5
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: IN
30438: NOT
30439: OR
30440: IFTRUE 30459
30442: PUSH
30443: LD_VAR 0 3
30447: PPUSH
30448: LD_VAR 0 4
30452: PPUSH
30453: CALL_OW 488
30457: NOT
30458: OR
30459: IFFALSE 30463
// exit ;
30461: GO 31219
// side := GetSide ( depot ) ;
30463: LD_ADDR_VAR 0 9
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 255
30477: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30478: LD_VAR 0 9
30482: PPUSH
30483: LD_VAR 0 2
30487: PPUSH
30488: CALL 29948 0 2
30492: NOT
30493: IFFALSE 30497
// exit ;
30495: GO 31219
// pom := GetBase ( depot ) ;
30497: LD_ADDR_VAR 0 10
30501: PUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: CALL_OW 274
30511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30512: LD_ADDR_VAR 0 11
30516: PUSH
30517: LD_VAR 0 2
30521: PPUSH
30522: LD_VAR 0 1
30526: PPUSH
30527: CALL_OW 248
30531: PPUSH
30532: CALL_OW 450
30536: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30537: LD_VAR 0 10
30541: PPUSH
30542: LD_INT 1
30544: PPUSH
30545: CALL_OW 275
30549: PUSH
30550: LD_VAR 0 11
30554: PUSH
30555: LD_INT 1
30557: ARRAY
30558: GREATEREQUAL
30559: IFFALSE 30585
30561: PUSH
30562: LD_VAR 0 10
30566: PPUSH
30567: LD_INT 2
30569: PPUSH
30570: CALL_OW 275
30574: PUSH
30575: LD_VAR 0 11
30579: PUSH
30580: LD_INT 2
30582: ARRAY
30583: GREATEREQUAL
30584: AND
30585: IFFALSE 30611
30587: PUSH
30588: LD_VAR 0 10
30592: PPUSH
30593: LD_INT 3
30595: PPUSH
30596: CALL_OW 275
30600: PUSH
30601: LD_VAR 0 11
30605: PUSH
30606: LD_INT 3
30608: ARRAY
30609: GREATEREQUAL
30610: AND
30611: NOT
30612: IFFALSE 30616
// exit ;
30614: GO 31219
// if GetBType ( depot ) = b_depot then
30616: LD_VAR 0 1
30620: PPUSH
30621: CALL_OW 266
30625: PUSH
30626: LD_INT 0
30628: EQUAL
30629: IFFALSE 30641
// dist := 28 else
30631: LD_ADDR_VAR 0 14
30635: PUSH
30636: LD_INT 28
30638: ST_TO_ADDR
30639: GO 30649
// dist := 36 ;
30641: LD_ADDR_VAR 0 14
30645: PUSH
30646: LD_INT 36
30648: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30649: LD_VAR 0 1
30653: PPUSH
30654: LD_VAR 0 3
30658: PPUSH
30659: LD_VAR 0 4
30663: PPUSH
30664: CALL_OW 297
30668: PUSH
30669: LD_VAR 0 14
30673: GREATER
30674: IFFALSE 30678
// exit ;
30676: GO 31219
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30678: LD_ADDR_VAR 0 12
30682: PUSH
30683: LD_VAR 0 2
30687: PPUSH
30688: LD_VAR 0 3
30692: PPUSH
30693: LD_VAR 0 4
30697: PPUSH
30698: LD_VAR 0 5
30702: PPUSH
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 248
30712: PPUSH
30713: LD_INT 0
30715: PPUSH
30716: CALL 31224 0 6
30720: ST_TO_ADDR
// if not hexes then
30721: LD_VAR 0 12
30725: NOT
30726: IFFALSE 30730
// exit ;
30728: GO 31219
// hex := GetHexInfo ( x , y ) ;
30730: LD_ADDR_VAR 0 15
30734: PUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: LD_VAR 0 4
30744: PPUSH
30745: CALL_OW 546
30749: ST_TO_ADDR
// if hex [ 1 ] then
30750: LD_VAR 0 15
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: IFFALSE 30762
// exit ;
30760: GO 31219
// height := hex [ 2 ] ;
30762: LD_ADDR_VAR 0 13
30766: PUSH
30767: LD_VAR 0 15
30771: PUSH
30772: LD_INT 2
30774: ARRAY
30775: ST_TO_ADDR
// for i = 1 to hexes do
30776: LD_ADDR_VAR 0 7
30780: PUSH
30781: DOUBLE
30782: LD_INT 1
30784: DEC
30785: ST_TO_ADDR
30786: LD_VAR 0 12
30790: PUSH
30791: FOR_TO
30792: IFFALSE 31136
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30794: LD_VAR 0 12
30798: PUSH
30799: LD_VAR 0 7
30803: ARRAY
30804: PUSH
30805: LD_INT 1
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 12
30813: PUSH
30814: LD_VAR 0 7
30818: ARRAY
30819: PUSH
30820: LD_INT 2
30822: ARRAY
30823: PPUSH
30824: CALL_OW 488
30828: NOT
30829: IFTRUE 30871
30831: PUSH
30832: LD_VAR 0 12
30836: PUSH
30837: LD_VAR 0 7
30841: ARRAY
30842: PUSH
30843: LD_INT 1
30845: ARRAY
30846: PPUSH
30847: LD_VAR 0 12
30851: PUSH
30852: LD_VAR 0 7
30856: ARRAY
30857: PUSH
30858: LD_INT 2
30860: ARRAY
30861: PPUSH
30862: CALL_OW 428
30866: PUSH
30867: LD_INT 0
30869: GREATER
30870: OR
30871: IFTRUE 30909
30873: PUSH
30874: LD_VAR 0 12
30878: PUSH
30879: LD_VAR 0 7
30883: ARRAY
30884: PUSH
30885: LD_INT 1
30887: ARRAY
30888: PPUSH
30889: LD_VAR 0 12
30893: PUSH
30894: LD_VAR 0 7
30898: ARRAY
30899: PUSH
30900: LD_INT 2
30902: ARRAY
30903: PPUSH
30904: CALL_OW 351
30908: OR
30909: IFFALSE 30915
// exit ;
30911: POP
30912: POP
30913: GO 31219
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30915: LD_ADDR_VAR 0 8
30919: PUSH
30920: LD_VAR 0 12
30924: PUSH
30925: LD_VAR 0 7
30929: ARRAY
30930: PUSH
30931: LD_INT 1
30933: ARRAY
30934: PPUSH
30935: LD_VAR 0 12
30939: PUSH
30940: LD_VAR 0 7
30944: ARRAY
30945: PUSH
30946: LD_INT 2
30948: ARRAY
30949: PPUSH
30950: CALL_OW 546
30954: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30955: LD_VAR 0 8
30959: PUSH
30960: LD_INT 1
30962: ARRAY
30963: IFTRUE 30985
30965: PUSH
30966: LD_VAR 0 8
30970: PUSH
30971: LD_INT 2
30973: ARRAY
30974: PUSH
30975: LD_VAR 0 13
30979: PUSH
30980: LD_INT 2
30982: PLUS
30983: GREATER
30984: OR
30985: IFTRUE 31007
30987: PUSH
30988: LD_VAR 0 8
30992: PUSH
30993: LD_INT 2
30995: ARRAY
30996: PUSH
30997: LD_VAR 0 13
31001: PUSH
31002: LD_INT 2
31004: MINUS
31005: LESS
31006: OR
31007: IFTRUE 31075
31009: PUSH
31010: LD_VAR 0 8
31014: PUSH
31015: LD_INT 3
31017: ARRAY
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 8
31024: PUSH
31025: LD_INT 9
31027: PUSH
31028: LD_INT 10
31030: PUSH
31031: LD_INT 11
31033: PUSH
31034: LD_INT 12
31036: PUSH
31037: LD_INT 13
31039: PUSH
31040: LD_INT 16
31042: PUSH
31043: LD_INT 17
31045: PUSH
31046: LD_INT 18
31048: PUSH
31049: LD_INT 19
31051: PUSH
31052: LD_INT 20
31054: PUSH
31055: LD_INT 21
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: IN
31073: NOT
31074: OR
31075: IFTRUE 31088
31077: PUSH
31078: LD_VAR 0 8
31082: PUSH
31083: LD_INT 5
31085: ARRAY
31086: NOT
31087: OR
31088: IFTRUE 31128
31090: PUSH
31091: LD_VAR 0 8
31095: PUSH
31096: LD_INT 6
31098: ARRAY
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: LD_INT 7
31108: PUSH
31109: LD_INT 9
31111: PUSH
31112: LD_INT 10
31114: PUSH
31115: LD_INT 11
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: IN
31126: NOT
31127: OR
31128: IFFALSE 31134
// exit ;
31130: POP
31131: POP
31132: GO 31219
// end ;
31134: GO 30791
31136: POP
31137: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31138: LD_VAR 0 9
31142: PPUSH
31143: LD_VAR 0 3
31147: PPUSH
31148: LD_VAR 0 4
31152: PPUSH
31153: LD_INT 20
31155: PPUSH
31156: CALL 23038 0 4
31160: PUSH
31161: LD_INT 4
31163: ARRAY
31164: IFFALSE 31168
// exit ;
31166: GO 31219
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31168: LD_VAR 0 2
31172: PUSH
31173: LD_INT 29
31175: PUSH
31176: LD_INT 30
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: IN
31183: IFFALSE 31207
31185: PUSH
31186: LD_VAR 0 3
31190: PPUSH
31191: LD_VAR 0 4
31195: PPUSH
31196: LD_VAR 0 9
31200: PPUSH
31201: CALL_OW 440
31205: NOT
31206: AND
31207: IFFALSE 31211
// exit ;
31209: GO 31219
// result := true ;
31211: LD_ADDR_VAR 0 6
31215: PUSH
31216: LD_INT 1
31218: ST_TO_ADDR
// end ;
31219: LD_VAR 0 6
31223: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31224: LD_INT 0
31226: PPUSH
31227: PPUSH
31228: PPUSH
31229: PPUSH
31230: PPUSH
31231: PPUSH
31232: PPUSH
31233: PPUSH
31234: PPUSH
31235: PPUSH
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
// result = [ ] ;
31284: LD_ADDR_VAR 0 7
31288: PUSH
31289: EMPTY
31290: ST_TO_ADDR
// temp_list = [ ] ;
31291: LD_ADDR_VAR 0 9
31295: PUSH
31296: EMPTY
31297: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31298: LD_VAR 0 4
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: LD_INT 4
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: IN
31329: NOT
31330: IFTRUE 31373
31332: PUSH
31333: LD_VAR 0 1
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: IN
31348: IFFALSE 31372
31350: PUSH
31351: LD_VAR 0 5
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: IN
31370: NOT
31371: AND
31372: OR
31373: IFFALSE 31377
// exit ;
31375: GO 49776
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31377: LD_VAR 0 1
31381: PUSH
31382: LD_INT 6
31384: PUSH
31385: LD_INT 7
31387: PUSH
31388: LD_INT 8
31390: PUSH
31391: LD_INT 13
31393: PUSH
31394: LD_INT 12
31396: PUSH
31397: LD_INT 15
31399: PUSH
31400: LD_INT 11
31402: PUSH
31403: LD_INT 14
31405: PUSH
31406: LD_INT 10
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: IN
31420: IFFALSE 31430
// btype = b_lab ;
31422: LD_ADDR_VAR 0 1
31426: PUSH
31427: LD_INT 6
31429: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31430: LD_VAR 0 6
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: IN
31449: NOT
31450: IFTRUE 31518
31452: PUSH
31453: LD_VAR 0 1
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: LD_INT 6
31472: PUSH
31473: LD_INT 36
31475: PUSH
31476: LD_INT 4
31478: PUSH
31479: LD_INT 5
31481: PUSH
31482: LD_INT 31
31484: PUSH
31485: LD_INT 32
31487: PUSH
31488: LD_INT 33
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: IN
31504: NOT
31505: IFFALSE 31517
31507: PUSH
31508: LD_VAR 0 6
31512: PUSH
31513: LD_INT 1
31515: EQUAL
31516: AND
31517: OR
31518: IFTRUE 31550
31520: PUSH
31521: LD_VAR 0 1
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: IN
31536: NOT
31537: IFFALSE 31549
31539: PUSH
31540: LD_VAR 0 6
31544: PUSH
31545: LD_INT 2
31547: EQUAL
31548: AND
31549: OR
31550: IFFALSE 31560
// mode = 0 ;
31552: LD_ADDR_VAR 0 6
31556: PUSH
31557: LD_INT 0
31559: ST_TO_ADDR
// case mode of 0 :
31560: LD_VAR 0 6
31564: PUSH
31565: LD_INT 0
31567: DOUBLE
31568: EQUAL
31569: IFTRUE 31573
31571: GO 43026
31573: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31574: LD_ADDR_VAR 0 11
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31767: LD_ADDR_VAR 0 12
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 3
31935: NEG
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31963: LD_ADDR_VAR 0 13
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: LD_INT 3
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32162: LD_ADDR_VAR 0 14
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 3
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32358: LD_ADDR_VAR 0 15
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32551: LD_ADDR_VAR 0 16
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32744: LD_ADDR_VAR 0 17
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32974: LD_ADDR_VAR 0 18
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: NEG
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33204: LD_ADDR_VAR 0 19
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 2
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 1
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33434: LD_ADDR_VAR 0 20
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 1
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: LD_INT 2
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33664: LD_ADDR_VAR 0 21
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33894: LD_ADDR_VAR 0 22
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: NEG
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 2
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 2
34093: NEG
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34124: LD_ADDR_VAR 0 23
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: LD_INT 3
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 3
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34404: LD_ADDR_VAR 0 24
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 3
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34680: LD_ADDR_VAR 0 25
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: NEG
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34954: LD_ADDR_VAR 0 26
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: LD_INT 2
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 3
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35230: LD_ADDR_VAR 0 27
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 1
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 2
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 2
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: NEG
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: LD_INT 2
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 3
35463: NEG
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: NEG
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35510: LD_ADDR_VAR 0 28
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: NEG
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: NEG
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PUSH
35723: LD_INT 3
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 3
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 3
35757: NEG
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35792: LD_ADDR_VAR 0 29
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 3
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 3
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 3
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 3
36036: NEG
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36071: LD_ADDR_VAR 0 30
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: LD_INT 2
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 2
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 2
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 2
36237: NEG
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: NEG
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 3
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 3
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 3
36314: NEG
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36349: LD_ADDR_VAR 0 31
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 3
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: NEG
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: LD_INT 2
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36627: LD_ADDR_VAR 0 32
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: LD_INT 3
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 3
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36905: LD_ADDR_VAR 0 33
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: LD_INT 3
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 3
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37184: LD_ADDR_VAR 0 34
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: LD_INT 1
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 3
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 3
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: LD_INT 3
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 3
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37464: LD_ADDR_VAR 0 35
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37576: LD_ADDR_VAR 0 36
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37688: LD_ADDR_VAR 0 37
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37800: LD_ADDR_VAR 0 38
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37912: LD_ADDR_VAR 0 39
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38024: LD_ADDR_VAR 0 40
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38136: LD_ADDR_VAR 0 41
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 3
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 3
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: LD_INT 3
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 3
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 3
38433: NEG
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 3
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38486: LD_ADDR_VAR 0 42
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 3
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 3
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 3
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 3
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 3
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 3
38783: NEG
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 3
38795: NEG
38796: PUSH
38797: LD_INT 3
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38836: LD_ADDR_VAR 0 43
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 3
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 3
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: NEG
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39184: LD_ADDR_VAR 0 44
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 3
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 3
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 3
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 3
39469: NEG
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 3
39481: NEG
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: LD_INT 3
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39534: LD_ADDR_VAR 0 45
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 3
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 3
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 3
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 3
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39884: LD_ADDR_VAR 0 46
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 3
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 3
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 3
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: NEG
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40232: LD_ADDR_VAR 0 47
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40383: LD_ADDR_VAR 0 48
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40530: LD_ADDR_VAR 0 49
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40674: LD_ADDR_VAR 0 50
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40818: LD_ADDR_VAR 0 51
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40965: LD_ADDR_VAR 0 52
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41116: LD_ADDR_VAR 0 53
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41346: LD_ADDR_VAR 0 54
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 2
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: NEG
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41576: LD_ADDR_VAR 0 55
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41806: LD_ADDR_VAR 0 56
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42036: LD_ADDR_VAR 0 57
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42266: LD_ADDR_VAR 0 58
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42496: LD_ADDR_VAR 0 59
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42584: LD_ADDR_VAR 0 60
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42672: LD_ADDR_VAR 0 61
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42760: LD_ADDR_VAR 0 62
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42848: LD_ADDR_VAR 0 63
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42936: LD_ADDR_VAR 0 64
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// end ; 1 :
43024: GO 48921
43026: LD_INT 1
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43034
43032: GO 45657
43034: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43035: LD_ADDR_VAR 0 11
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 3
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43079: LD_ADDR_VAR 0 12
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43120: LD_ADDR_VAR 0 13
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43160: LD_ADDR_VAR 0 14
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43201: LD_ADDR_VAR 0 15
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 3
43219: NEG
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43245: LD_ADDR_VAR 0 16
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: LD_INT 3
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 3
43276: NEG
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43291: LD_ADDR_VAR 0 17
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43335: LD_ADDR_VAR 0 18
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43376: LD_ADDR_VAR 0 19
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43416: LD_ADDR_VAR 0 20
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43457: LD_ADDR_VAR 0 21
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43501: LD_ADDR_VAR 0 22
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 3
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 3
43532: NEG
43533: PUSH
43534: LD_INT 3
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43547: LD_ADDR_VAR 0 23
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 4
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 3
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43591: LD_ADDR_VAR 0 24
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43632: LD_ADDR_VAR 0 25
43636: PUSH
43637: LD_INT 3
43639: PUSH
43640: LD_INT 3
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 4
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 3
43659: PUSH
43660: LD_INT 4
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43672: LD_ADDR_VAR 0 26
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 3
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 4
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43713: LD_ADDR_VAR 0 27
43717: PUSH
43718: LD_INT 3
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 3
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 4
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43757: LD_ADDR_VAR 0 28
43761: PUSH
43762: LD_INT 3
43764: NEG
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 3
43776: NEG
43777: PUSH
43778: LD_INT 4
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 4
43788: NEG
43789: PUSH
43790: LD_INT 3
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43803: LD_ADDR_VAR 0 29
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 3
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 3
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 4
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 4
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 5
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 5
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 4
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 6
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 6
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 5
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43958: LD_ADDR_VAR 0 30
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 4
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 4
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 4
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 5
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 5
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 5
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 6
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 6
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44101: LD_ADDR_VAR 0 31
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 3
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 4
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 4
44148: PUSH
44149: LD_INT 4
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: LD_INT 4
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 5
44168: PUSH
44169: LD_INT 4
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 5
44178: PUSH
44179: LD_INT 5
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 4
44188: PUSH
44189: LD_INT 5
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 6
44198: PUSH
44199: LD_INT 5
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 6
44208: PUSH
44209: LD_INT 6
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 5
44218: PUSH
44219: LD_INT 6
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44240: LD_ADDR_VAR 0 32
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 4
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 4
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 5
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 5
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 4
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 6
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 6
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 5
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44383: LD_ADDR_VAR 0 33
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 3
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 4
44435: NEG
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 4
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 4
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 5
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 5
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 5
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 6
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 6
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44538: LD_ADDR_VAR 0 34
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 4
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 4
44593: NEG
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 4
44605: NEG
44606: PUSH
44607: LD_INT 4
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 4
44617: NEG
44618: PUSH
44619: LD_INT 5
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 5
44629: NEG
44630: PUSH
44631: LD_INT 4
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 5
44641: NEG
44642: PUSH
44643: LD_INT 5
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 5
44653: NEG
44654: PUSH
44655: LD_INT 6
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 6
44665: NEG
44666: PUSH
44667: LD_INT 5
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 6
44677: NEG
44678: PUSH
44679: LD_INT 6
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44701: LD_ADDR_VAR 0 41
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 3
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44745: LD_ADDR_VAR 0 42
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44786: LD_ADDR_VAR 0 43
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44826: LD_ADDR_VAR 0 44
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 3
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44867: LD_ADDR_VAR 0 45
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 3
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44911: LD_ADDR_VAR 0 46
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44957: LD_ADDR_VAR 0 47
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44990: LD_ADDR_VAR 0 48
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45021: LD_ADDR_VAR 0 49
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45050: LD_ADDR_VAR 0 50
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45079: LD_ADDR_VAR 0 51
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45110: LD_ADDR_VAR 0 52
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45143: LD_ADDR_VAR 0 53
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 3
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 3
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45187: LD_ADDR_VAR 0 54
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 3
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45228: LD_ADDR_VAR 0 55
45232: PUSH
45233: LD_INT 3
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45268: LD_ADDR_VAR 0 56
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45309: LD_ADDR_VAR 0 57
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45353: LD_ADDR_VAR 0 58
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 3
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45399: LD_ADDR_VAR 0 59
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45443: LD_ADDR_VAR 0 60
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45484: LD_ADDR_VAR 0 61
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45524: LD_ADDR_VAR 0 62
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45565: LD_ADDR_VAR 0 63
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45609: LD_ADDR_VAR 0 64
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: ST_TO_ADDR
// end ; 2 :
45655: GO 48921
45657: LD_INT 2
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45665
45663: GO 48920
45665: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45666: LD_ADDR_VAR 0 29
45670: PUSH
45671: LD_INT 4
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 4
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 5
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 5
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 4
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 5
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 4
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 4
45796: PUSH
45797: LD_INT 4
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: LD_INT 4
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 4
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 4
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 4
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 5
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 5
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 4
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 5
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 3
45949: NEG
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 3
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 4
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 4
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 4
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 4
46051: NEG
46052: PUSH
46053: LD_INT 4
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 4
46063: NEG
46064: PUSH
46065: LD_INT 5
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: NEG
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: NEG
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 5
46111: NEG
46112: PUSH
46113: LD_INT 4
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 5
46123: NEG
46124: PUSH
46125: LD_INT 5
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: LD_INT 5
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 5
46147: NEG
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46204: LD_ADDR_VAR 0 30
46208: PUSH
46209: LD_INT 4
46211: PUSH
46212: LD_INT 4
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 4
46221: PUSH
46222: LD_INT 3
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 5
46231: PUSH
46232: LD_INT 4
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 5
46241: PUSH
46242: LD_INT 5
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 4
46251: PUSH
46252: LD_INT 5
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: LD_INT 4
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 3
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 5
46281: PUSH
46282: LD_INT 3
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 5
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 4
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 4
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 4
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 4
46394: NEG
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 4
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 4
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 5
46450: NEG
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 5
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 5
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 3
46496: NEG
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: LD_INT 4
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 3
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 4
46556: NEG
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 4
46568: NEG
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 4
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 4
46592: NEG
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 4
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 5
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 4
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 4
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: LD_INT 5
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 5
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46751: LD_ADDR_VAR 0 31
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 5
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 5
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 4
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 5
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 4
46907: NEG
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 4
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 4
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 4
46953: NEG
46954: PUSH
46955: LD_INT 4
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 4
46965: NEG
46966: PUSH
46967: LD_INT 5
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: LD_INT 4
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 5
47013: NEG
47014: PUSH
47015: LD_INT 4
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 5
47025: NEG
47026: PUSH
47027: LD_INT 5
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: LD_INT 5
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 5
47049: NEG
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 4
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 4
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 4
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 4
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 4
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 5
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 5
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 4
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 5
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47301: LD_ADDR_VAR 0 32
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 4
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 5
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 5
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 5
47387: NEG
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 4
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 4
47470: NEG
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 4
47482: NEG
47483: PUSH
47484: LD_INT 4
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 4
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 4
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 4
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 5
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 4
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 3
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 4
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 5
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 3
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 5
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 4
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 4
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: LD_INT 4
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 4
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 5
47733: PUSH
47734: LD_INT 4
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: LD_INT 5
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 4
47753: PUSH
47754: LD_INT 5
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 4
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 5
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: LD_INT 5
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47848: LD_ADDR_VAR 0 33
47852: PUSH
47853: LD_INT 4
47855: NEG
47856: PUSH
47857: LD_INT 4
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 4
47867: NEG
47868: PUSH
47869: LD_INT 5
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: LD_INT 4
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 4
47903: NEG
47904: PUSH
47905: LD_INT 3
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 5
47915: NEG
47916: PUSH
47917: LD_INT 4
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 5
47927: NEG
47928: PUSH
47929: LD_INT 5
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: LD_INT 5
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 5
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 4
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 3
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 4
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 4
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 4
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 4
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 5
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 4
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 5
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 4
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 4
48188: PUSH
48189: LD_INT 4
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: LD_INT 4
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 4
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 4
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 4
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 4
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 5
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 5
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 4
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 5
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48386: LD_ADDR_VAR 0 34
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 4
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 5
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 4
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 3
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 3
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 4
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 5
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 3
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 5
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 4
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 4
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 4
48588: PUSH
48589: LD_INT 4
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 5
48608: PUSH
48609: LD_INT 4
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 5
48618: PUSH
48619: LD_INT 5
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 4
48628: PUSH
48629: LD_INT 5
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: LD_INT 4
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 3
48648: PUSH
48649: LD_INT 3
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 5
48658: PUSH
48659: LD_INT 3
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: PUSH
48669: LD_INT 5
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 4
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 4
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 4
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 4
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 4
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 5
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 5
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 5
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: ST_TO_ADDR
// end ; end ;
48918: GO 48921
48920: POP
// case btype of b_depot , b_warehouse :
48921: LD_VAR 0 1
48925: PUSH
48926: LD_INT 0
48928: DOUBLE
48929: EQUAL
48930: IFTRUE 48940
48932: LD_INT 1
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48940
48938: GO 49141
48940: POP
// case nation of nation_american :
48941: LD_VAR 0 5
48945: PUSH
48946: LD_INT 1
48948: DOUBLE
48949: EQUAL
48950: IFTRUE 48954
48952: GO 49010
48954: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48955: LD_ADDR_VAR 0 9
48959: PUSH
48960: LD_VAR 0 11
48964: PUSH
48965: LD_VAR 0 12
48969: PUSH
48970: LD_VAR 0 13
48974: PUSH
48975: LD_VAR 0 14
48979: PUSH
48980: LD_VAR 0 15
48984: PUSH
48985: LD_VAR 0 16
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: PUSH
48998: LD_VAR 0 4
49002: PUSH
49003: LD_INT 1
49005: PLUS
49006: ARRAY
49007: ST_TO_ADDR
49008: GO 49139
49010: LD_INT 2
49012: DOUBLE
49013: EQUAL
49014: IFTRUE 49018
49016: GO 49074
49018: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49019: LD_ADDR_VAR 0 9
49023: PUSH
49024: LD_VAR 0 17
49028: PUSH
49029: LD_VAR 0 18
49033: PUSH
49034: LD_VAR 0 19
49038: PUSH
49039: LD_VAR 0 20
49043: PUSH
49044: LD_VAR 0 21
49048: PUSH
49049: LD_VAR 0 22
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: PUSH
49062: LD_VAR 0 4
49066: PUSH
49067: LD_INT 1
49069: PLUS
49070: ARRAY
49071: ST_TO_ADDR
49072: GO 49139
49074: LD_INT 3
49076: DOUBLE
49077: EQUAL
49078: IFTRUE 49082
49080: GO 49138
49082: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49083: LD_ADDR_VAR 0 9
49087: PUSH
49088: LD_VAR 0 23
49092: PUSH
49093: LD_VAR 0 24
49097: PUSH
49098: LD_VAR 0 25
49102: PUSH
49103: LD_VAR 0 26
49107: PUSH
49108: LD_VAR 0 27
49112: PUSH
49113: LD_VAR 0 28
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: PUSH
49126: LD_VAR 0 4
49130: PUSH
49131: LD_INT 1
49133: PLUS
49134: ARRAY
49135: ST_TO_ADDR
49136: GO 49139
49138: POP
49139: GO 49694
49141: LD_INT 2
49143: DOUBLE
49144: EQUAL
49145: IFTRUE 49155
49147: LD_INT 3
49149: DOUBLE
49150: EQUAL
49151: IFTRUE 49155
49153: GO 49211
49155: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49156: LD_ADDR_VAR 0 9
49160: PUSH
49161: LD_VAR 0 29
49165: PUSH
49166: LD_VAR 0 30
49170: PUSH
49171: LD_VAR 0 31
49175: PUSH
49176: LD_VAR 0 32
49180: PUSH
49181: LD_VAR 0 33
49185: PUSH
49186: LD_VAR 0 34
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: PUSH
49199: LD_VAR 0 4
49203: PUSH
49204: LD_INT 1
49206: PLUS
49207: ARRAY
49208: ST_TO_ADDR
49209: GO 49694
49211: LD_INT 16
49213: DOUBLE
49214: EQUAL
49215: IFTRUE 49273
49217: LD_INT 17
49219: DOUBLE
49220: EQUAL
49221: IFTRUE 49273
49223: LD_INT 18
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49273
49229: LD_INT 19
49231: DOUBLE
49232: EQUAL
49233: IFTRUE 49273
49235: LD_INT 22
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49273
49241: LD_INT 20
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49273
49247: LD_INT 21
49249: DOUBLE
49250: EQUAL
49251: IFTRUE 49273
49253: LD_INT 23
49255: DOUBLE
49256: EQUAL
49257: IFTRUE 49273
49259: LD_INT 24
49261: DOUBLE
49262: EQUAL
49263: IFTRUE 49273
49265: LD_INT 25
49267: DOUBLE
49268: EQUAL
49269: IFTRUE 49273
49271: GO 49329
49273: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49274: LD_ADDR_VAR 0 9
49278: PUSH
49279: LD_VAR 0 35
49283: PUSH
49284: LD_VAR 0 36
49288: PUSH
49289: LD_VAR 0 37
49293: PUSH
49294: LD_VAR 0 38
49298: PUSH
49299: LD_VAR 0 39
49303: PUSH
49304: LD_VAR 0 40
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: LD_VAR 0 4
49321: PUSH
49322: LD_INT 1
49324: PLUS
49325: ARRAY
49326: ST_TO_ADDR
49327: GO 49694
49329: LD_INT 6
49331: DOUBLE
49332: EQUAL
49333: IFTRUE 49385
49335: LD_INT 7
49337: DOUBLE
49338: EQUAL
49339: IFTRUE 49385
49341: LD_INT 8
49343: DOUBLE
49344: EQUAL
49345: IFTRUE 49385
49347: LD_INT 13
49349: DOUBLE
49350: EQUAL
49351: IFTRUE 49385
49353: LD_INT 12
49355: DOUBLE
49356: EQUAL
49357: IFTRUE 49385
49359: LD_INT 15
49361: DOUBLE
49362: EQUAL
49363: IFTRUE 49385
49365: LD_INT 11
49367: DOUBLE
49368: EQUAL
49369: IFTRUE 49385
49371: LD_INT 14
49373: DOUBLE
49374: EQUAL
49375: IFTRUE 49385
49377: LD_INT 10
49379: DOUBLE
49380: EQUAL
49381: IFTRUE 49385
49383: GO 49441
49385: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49386: LD_ADDR_VAR 0 9
49390: PUSH
49391: LD_VAR 0 41
49395: PUSH
49396: LD_VAR 0 42
49400: PUSH
49401: LD_VAR 0 43
49405: PUSH
49406: LD_VAR 0 44
49410: PUSH
49411: LD_VAR 0 45
49415: PUSH
49416: LD_VAR 0 46
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: PUSH
49429: LD_VAR 0 4
49433: PUSH
49434: LD_INT 1
49436: PLUS
49437: ARRAY
49438: ST_TO_ADDR
49439: GO 49694
49441: LD_INT 36
49443: DOUBLE
49444: EQUAL
49445: IFTRUE 49449
49447: GO 49505
49449: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49450: LD_ADDR_VAR 0 9
49454: PUSH
49455: LD_VAR 0 47
49459: PUSH
49460: LD_VAR 0 48
49464: PUSH
49465: LD_VAR 0 49
49469: PUSH
49470: LD_VAR 0 50
49474: PUSH
49475: LD_VAR 0 51
49479: PUSH
49480: LD_VAR 0 52
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: PUSH
49493: LD_VAR 0 4
49497: PUSH
49498: LD_INT 1
49500: PLUS
49501: ARRAY
49502: ST_TO_ADDR
49503: GO 49694
49505: LD_INT 4
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49531
49511: LD_INT 5
49513: DOUBLE
49514: EQUAL
49515: IFTRUE 49531
49517: LD_INT 34
49519: DOUBLE
49520: EQUAL
49521: IFTRUE 49531
49523: LD_INT 37
49525: DOUBLE
49526: EQUAL
49527: IFTRUE 49531
49529: GO 49587
49531: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49532: LD_ADDR_VAR 0 9
49536: PUSH
49537: LD_VAR 0 53
49541: PUSH
49542: LD_VAR 0 54
49546: PUSH
49547: LD_VAR 0 55
49551: PUSH
49552: LD_VAR 0 56
49556: PUSH
49557: LD_VAR 0 57
49561: PUSH
49562: LD_VAR 0 58
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: PUSH
49575: LD_VAR 0 4
49579: PUSH
49580: LD_INT 1
49582: PLUS
49583: ARRAY
49584: ST_TO_ADDR
49585: GO 49694
49587: LD_INT 31
49589: DOUBLE
49590: EQUAL
49591: IFTRUE 49637
49593: LD_INT 32
49595: DOUBLE
49596: EQUAL
49597: IFTRUE 49637
49599: LD_INT 33
49601: DOUBLE
49602: EQUAL
49603: IFTRUE 49637
49605: LD_INT 27
49607: DOUBLE
49608: EQUAL
49609: IFTRUE 49637
49611: LD_INT 26
49613: DOUBLE
49614: EQUAL
49615: IFTRUE 49637
49617: LD_INT 28
49619: DOUBLE
49620: EQUAL
49621: IFTRUE 49637
49623: LD_INT 29
49625: DOUBLE
49626: EQUAL
49627: IFTRUE 49637
49629: LD_INT 30
49631: DOUBLE
49632: EQUAL
49633: IFTRUE 49637
49635: GO 49693
49637: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49638: LD_ADDR_VAR 0 9
49642: PUSH
49643: LD_VAR 0 59
49647: PUSH
49648: LD_VAR 0 60
49652: PUSH
49653: LD_VAR 0 61
49657: PUSH
49658: LD_VAR 0 62
49662: PUSH
49663: LD_VAR 0 63
49667: PUSH
49668: LD_VAR 0 64
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: PUSH
49681: LD_VAR 0 4
49685: PUSH
49686: LD_INT 1
49688: PLUS
49689: ARRAY
49690: ST_TO_ADDR
49691: GO 49694
49693: POP
// temp_list2 = [ ] ;
49694: LD_ADDR_VAR 0 10
49698: PUSH
49699: EMPTY
49700: ST_TO_ADDR
// for i in temp_list do
49701: LD_ADDR_VAR 0 8
49705: PUSH
49706: LD_VAR 0 9
49710: PUSH
49711: FOR_IN
49712: IFFALSE 49764
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49714: LD_ADDR_VAR 0 10
49718: PUSH
49719: LD_VAR 0 10
49723: PUSH
49724: LD_VAR 0 8
49728: PUSH
49729: LD_INT 1
49731: ARRAY
49732: PUSH
49733: LD_VAR 0 2
49737: PLUS
49738: PUSH
49739: LD_VAR 0 8
49743: PUSH
49744: LD_INT 2
49746: ARRAY
49747: PUSH
49748: LD_VAR 0 3
49752: PLUS
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: ADD
49761: ST_TO_ADDR
49762: GO 49711
49764: POP
49765: POP
// result = temp_list2 ;
49766: LD_ADDR_VAR 0 7
49770: PUSH
49771: LD_VAR 0 10
49775: ST_TO_ADDR
// end ;
49776: LD_VAR 0 7
49780: RET
// export function EnemyInRange ( unit , dist ) ; begin
49781: LD_INT 0
49783: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49784: LD_ADDR_VAR 0 3
49788: PUSH
49789: LD_VAR 0 1
49793: PPUSH
49794: CALL_OW 255
49798: PPUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: CALL_OW 250
49808: PPUSH
49809: LD_VAR 0 1
49813: PPUSH
49814: CALL_OW 251
49818: PPUSH
49819: LD_VAR 0 2
49823: PPUSH
49824: CALL 23038 0 4
49828: PUSH
49829: LD_INT 4
49831: ARRAY
49832: ST_TO_ADDR
// end ;
49833: LD_VAR 0 3
49837: RET
// export function PlayerSeeMe ( unit ) ; begin
49838: LD_INT 0
49840: PPUSH
// result := See ( your_side , unit ) ;
49841: LD_ADDR_VAR 0 2
49845: PUSH
49846: LD_OWVAR 2
49850: PPUSH
49851: LD_VAR 0 1
49855: PPUSH
49856: CALL_OW 292
49860: ST_TO_ADDR
// end ;
49861: LD_VAR 0 2
49865: RET
// export function ReverseDir ( unit ) ; begin
49866: LD_INT 0
49868: PPUSH
// if not unit then
49869: LD_VAR 0 1
49873: NOT
49874: IFFALSE 49878
// exit ;
49876: GO 49901
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49878: LD_ADDR_VAR 0 2
49882: PUSH
49883: LD_VAR 0 1
49887: PPUSH
49888: CALL_OW 254
49892: PUSH
49893: LD_INT 3
49895: PLUS
49896: PUSH
49897: LD_INT 6
49899: MOD
49900: ST_TO_ADDR
// end ;
49901: LD_VAR 0 2
49905: RET
// export function ReverseArray ( array ) ; var i ; begin
49906: LD_INT 0
49908: PPUSH
49909: PPUSH
// if not array then
49910: LD_VAR 0 1
49914: NOT
49915: IFFALSE 49919
// exit ;
49917: GO 49974
// result := [ ] ;
49919: LD_ADDR_VAR 0 2
49923: PUSH
49924: EMPTY
49925: ST_TO_ADDR
// for i := array downto 1 do
49926: LD_ADDR_VAR 0 3
49930: PUSH
49931: DOUBLE
49932: LD_VAR 0 1
49936: INC
49937: ST_TO_ADDR
49938: LD_INT 1
49940: PUSH
49941: FOR_DOWNTO
49942: IFFALSE 49972
// result := Join ( result , array [ i ] ) ;
49944: LD_ADDR_VAR 0 2
49948: PUSH
49949: LD_VAR 0 2
49953: PPUSH
49954: LD_VAR 0 1
49958: PUSH
49959: LD_VAR 0 3
49963: ARRAY
49964: PPUSH
49965: CALL 54816 0 2
49969: ST_TO_ADDR
49970: GO 49941
49972: POP
49973: POP
// end ;
49974: LD_VAR 0 2
49978: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49979: LD_INT 0
49981: PPUSH
49982: PPUSH
49983: PPUSH
49984: PPUSH
49985: PPUSH
49986: PPUSH
// if not unit or not hexes then
49987: LD_VAR 0 1
49991: NOT
49992: IFTRUE 50001
49994: PUSH
49995: LD_VAR 0 2
49999: NOT
50000: OR
50001: IFFALSE 50005
// exit ;
50003: GO 50128
// dist := 9999 ;
50005: LD_ADDR_VAR 0 5
50009: PUSH
50010: LD_INT 9999
50012: ST_TO_ADDR
// for i = 1 to hexes do
50013: LD_ADDR_VAR 0 4
50017: PUSH
50018: DOUBLE
50019: LD_INT 1
50021: DEC
50022: ST_TO_ADDR
50023: LD_VAR 0 2
50027: PUSH
50028: FOR_TO
50029: IFFALSE 50116
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50031: LD_ADDR_VAR 0 6
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: LD_VAR 0 2
50045: PUSH
50046: LD_VAR 0 4
50050: ARRAY
50051: PUSH
50052: LD_INT 1
50054: ARRAY
50055: PPUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_VAR 0 4
50065: ARRAY
50066: PUSH
50067: LD_INT 2
50069: ARRAY
50070: PPUSH
50071: CALL_OW 297
50075: ST_TO_ADDR
// if tdist < dist then
50076: LD_VAR 0 6
50080: PUSH
50081: LD_VAR 0 5
50085: LESS
50086: IFFALSE 50114
// begin hex := hexes [ i ] ;
50088: LD_ADDR_VAR 0 8
50092: PUSH
50093: LD_VAR 0 2
50097: PUSH
50098: LD_VAR 0 4
50102: ARRAY
50103: ST_TO_ADDR
// dist := tdist ;
50104: LD_ADDR_VAR 0 5
50108: PUSH
50109: LD_VAR 0 6
50113: ST_TO_ADDR
// end ; end ;
50114: GO 50028
50116: POP
50117: POP
// result := hex ;
50118: LD_ADDR_VAR 0 3
50122: PUSH
50123: LD_VAR 0 8
50127: ST_TO_ADDR
// end ;
50128: LD_VAR 0 3
50132: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50133: LD_INT 0
50135: PPUSH
50136: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50137: LD_VAR 0 1
50141: NOT
50142: IFTRUE 50181
50144: PUSH
50145: LD_VAR 0 1
50149: PUSH
50150: LD_INT 21
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 23
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PPUSH
50174: CALL_OW 69
50178: IN
50179: NOT
50180: OR
50181: IFFALSE 50185
// exit ;
50183: GO 50232
// for i = 1 to 3 do
50185: LD_ADDR_VAR 0 3
50189: PUSH
50190: DOUBLE
50191: LD_INT 1
50193: DEC
50194: ST_TO_ADDR
50195: LD_INT 3
50197: PUSH
50198: FOR_TO
50199: IFFALSE 50230
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50201: LD_VAR 0 1
50205: PPUSH
50206: CALL_OW 250
50210: PPUSH
50211: LD_VAR 0 1
50215: PPUSH
50216: CALL_OW 251
50220: PPUSH
50221: LD_INT 1
50223: PPUSH
50224: CALL_OW 453
50228: GO 50198
50230: POP
50231: POP
// end ;
50232: LD_VAR 0 2
50236: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50237: LD_INT 0
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
50243: PPUSH
50244: PPUSH
// if not unit or not enemy_unit then
50245: LD_VAR 0 1
50249: NOT
50250: IFTRUE 50259
50252: PUSH
50253: LD_VAR 0 2
50257: NOT
50258: OR
50259: IFFALSE 50263
// exit ;
50261: GO 50734
// if GetLives ( i ) < 250 then
50263: LD_VAR 0 4
50267: PPUSH
50268: CALL_OW 256
50272: PUSH
50273: LD_INT 250
50275: LESS
50276: IFFALSE 50289
// begin ComAutodestruct ( i ) ;
50278: LD_VAR 0 4
50282: PPUSH
50283: CALL 50133 0 1
// exit ;
50287: GO 50734
// end ; x := GetX ( enemy_unit ) ;
50289: LD_ADDR_VAR 0 7
50293: PUSH
50294: LD_VAR 0 2
50298: PPUSH
50299: CALL_OW 250
50303: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50304: LD_ADDR_VAR 0 8
50308: PUSH
50309: LD_VAR 0 2
50313: PPUSH
50314: CALL_OW 251
50318: ST_TO_ADDR
// if not x or not y then
50319: LD_VAR 0 7
50323: NOT
50324: IFTRUE 50333
50326: PUSH
50327: LD_VAR 0 8
50331: NOT
50332: OR
50333: IFFALSE 50337
// exit ;
50335: GO 50734
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50337: LD_ADDR_VAR 0 6
50341: PUSH
50342: LD_VAR 0 7
50346: PPUSH
50347: LD_INT 0
50349: PPUSH
50350: LD_INT 4
50352: PPUSH
50353: CALL_OW 272
50357: PUSH
50358: LD_VAR 0 8
50362: PPUSH
50363: LD_INT 0
50365: PPUSH
50366: LD_INT 4
50368: PPUSH
50369: CALL_OW 273
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_VAR 0 7
50382: PPUSH
50383: LD_INT 1
50385: PPUSH
50386: LD_INT 4
50388: PPUSH
50389: CALL_OW 272
50393: PUSH
50394: LD_VAR 0 8
50398: PPUSH
50399: LD_INT 1
50401: PPUSH
50402: LD_INT 4
50404: PPUSH
50405: CALL_OW 273
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_VAR 0 7
50418: PPUSH
50419: LD_INT 2
50421: PPUSH
50422: LD_INT 4
50424: PPUSH
50425: CALL_OW 272
50429: PUSH
50430: LD_VAR 0 8
50434: PPUSH
50435: LD_INT 2
50437: PPUSH
50438: LD_INT 4
50440: PPUSH
50441: CALL_OW 273
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_VAR 0 7
50454: PPUSH
50455: LD_INT 3
50457: PPUSH
50458: LD_INT 4
50460: PPUSH
50461: CALL_OW 272
50465: PUSH
50466: LD_VAR 0 8
50470: PPUSH
50471: LD_INT 3
50473: PPUSH
50474: LD_INT 4
50476: PPUSH
50477: CALL_OW 273
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_VAR 0 7
50490: PPUSH
50491: LD_INT 4
50493: PPUSH
50494: LD_INT 4
50496: PPUSH
50497: CALL_OW 272
50501: PUSH
50502: LD_VAR 0 8
50506: PPUSH
50507: LD_INT 4
50509: PPUSH
50510: LD_INT 4
50512: PPUSH
50513: CALL_OW 273
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_VAR 0 7
50526: PPUSH
50527: LD_INT 5
50529: PPUSH
50530: LD_INT 4
50532: PPUSH
50533: CALL_OW 272
50537: PUSH
50538: LD_VAR 0 8
50542: PPUSH
50543: LD_INT 5
50545: PPUSH
50546: LD_INT 4
50548: PPUSH
50549: CALL_OW 273
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// for i = tmp downto 1 do
50566: LD_ADDR_VAR 0 4
50570: PUSH
50571: DOUBLE
50572: LD_VAR 0 6
50576: INC
50577: ST_TO_ADDR
50578: LD_INT 1
50580: PUSH
50581: FOR_DOWNTO
50582: IFFALSE 50685
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50584: LD_VAR 0 6
50588: PUSH
50589: LD_VAR 0 4
50593: ARRAY
50594: PUSH
50595: LD_INT 1
50597: ARRAY
50598: PPUSH
50599: LD_VAR 0 6
50603: PUSH
50604: LD_VAR 0 4
50608: ARRAY
50609: PUSH
50610: LD_INT 2
50612: ARRAY
50613: PPUSH
50614: CALL_OW 488
50618: NOT
50619: IFTRUE 50661
50621: PUSH
50622: LD_VAR 0 6
50626: PUSH
50627: LD_VAR 0 4
50631: ARRAY
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: PPUSH
50637: LD_VAR 0 6
50641: PUSH
50642: LD_VAR 0 4
50646: ARRAY
50647: PUSH
50648: LD_INT 2
50650: ARRAY
50651: PPUSH
50652: CALL_OW 428
50656: PUSH
50657: LD_INT 0
50659: NONEQUAL
50660: OR
50661: IFFALSE 50683
// tmp := Delete ( tmp , i ) ;
50663: LD_ADDR_VAR 0 6
50667: PUSH
50668: LD_VAR 0 6
50672: PPUSH
50673: LD_VAR 0 4
50677: PPUSH
50678: CALL_OW 3
50682: ST_TO_ADDR
50683: GO 50581
50685: POP
50686: POP
// j := GetClosestHex ( unit , tmp ) ;
50687: LD_ADDR_VAR 0 5
50691: PUSH
50692: LD_VAR 0 1
50696: PPUSH
50697: LD_VAR 0 6
50701: PPUSH
50702: CALL 49979 0 2
50706: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50707: LD_VAR 0 1
50711: PPUSH
50712: LD_VAR 0 5
50716: PUSH
50717: LD_INT 1
50719: ARRAY
50720: PPUSH
50721: LD_VAR 0 5
50725: PUSH
50726: LD_INT 2
50728: ARRAY
50729: PPUSH
50730: CALL_OW 111
// end ;
50734: LD_VAR 0 3
50738: RET
// export function PrepareApemanSoldier ( ) ; begin
50739: LD_INT 0
50741: PPUSH
// uc_nation := 0 ;
50742: LD_ADDR_OWVAR 21
50746: PUSH
50747: LD_INT 0
50749: ST_TO_ADDR
// hc_sex := sex_male ;
50750: LD_ADDR_OWVAR 27
50754: PUSH
50755: LD_INT 1
50757: ST_TO_ADDR
// hc_name :=  ;
50758: LD_ADDR_OWVAR 26
50762: PUSH
50763: LD_STRING 
50765: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50766: LD_ADDR_OWVAR 28
50770: PUSH
50771: LD_INT 15
50773: ST_TO_ADDR
// hc_gallery :=  ;
50774: LD_ADDR_OWVAR 33
50778: PUSH
50779: LD_STRING 
50781: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50782: LD_ADDR_OWVAR 31
50786: PUSH
50787: LD_INT 0
50789: PPUSH
50790: LD_INT 3
50792: PPUSH
50793: CALL_OW 12
50797: PUSH
50798: LD_INT 0
50800: PPUSH
50801: LD_INT 3
50803: PPUSH
50804: CALL_OW 12
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50821: LD_ADDR_OWVAR 29
50825: PUSH
50826: LD_INT 12
50828: PUSH
50829: LD_INT 12
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// end ;
50836: LD_VAR 0 1
50840: RET
// export function PrepareApemanEngineer ( ) ; begin
50841: LD_INT 0
50843: PPUSH
// uc_nation := 0 ;
50844: LD_ADDR_OWVAR 21
50848: PUSH
50849: LD_INT 0
50851: ST_TO_ADDR
// hc_sex := sex_male ;
50852: LD_ADDR_OWVAR 27
50856: PUSH
50857: LD_INT 1
50859: ST_TO_ADDR
// hc_name :=  ;
50860: LD_ADDR_OWVAR 26
50864: PUSH
50865: LD_STRING 
50867: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50868: LD_ADDR_OWVAR 28
50872: PUSH
50873: LD_INT 16
50875: ST_TO_ADDR
// hc_gallery :=  ;
50876: LD_ADDR_OWVAR 33
50880: PUSH
50881: LD_STRING 
50883: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50884: LD_ADDR_OWVAR 31
50888: PUSH
50889: LD_INT 0
50891: PPUSH
50892: LD_INT 3
50894: PPUSH
50895: CALL_OW 12
50899: PUSH
50900: LD_INT 0
50902: PPUSH
50903: LD_INT 3
50905: PPUSH
50906: CALL_OW 12
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50923: LD_ADDR_OWVAR 29
50927: PUSH
50928: LD_INT 12
50930: PUSH
50931: LD_INT 12
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// end ;
50938: LD_VAR 0 1
50942: RET
// export function PrepareApeman ( agressivity ) ; begin
50943: LD_INT 0
50945: PPUSH
// uc_side := 0 ;
50946: LD_ADDR_OWVAR 20
50950: PUSH
50951: LD_INT 0
50953: ST_TO_ADDR
// uc_nation := 0 ;
50954: LD_ADDR_OWVAR 21
50958: PUSH
50959: LD_INT 0
50961: ST_TO_ADDR
// hc_sex := sex_male ;
50962: LD_ADDR_OWVAR 27
50966: PUSH
50967: LD_INT 1
50969: ST_TO_ADDR
// hc_class := class_apeman ;
50970: LD_ADDR_OWVAR 28
50974: PUSH
50975: LD_INT 12
50977: ST_TO_ADDR
// hc_gallery :=  ;
50978: LD_ADDR_OWVAR 33
50982: PUSH
50983: LD_STRING 
50985: ST_TO_ADDR
// hc_name :=  ;
50986: LD_ADDR_OWVAR 26
50990: PUSH
50991: LD_STRING 
50993: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50994: LD_ADDR_OWVAR 29
50998: PUSH
50999: LD_INT 12
51001: PUSH
51002: LD_INT 12
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// if agressivity = 0 then
51009: LD_VAR 0 1
51013: PUSH
51014: LD_INT 0
51016: EQUAL
51017: IFFALSE 51029
// hc_agressivity := 0 else
51019: LD_ADDR_OWVAR 35
51023: PUSH
51024: LD_INT 0
51026: ST_TO_ADDR
51027: GO 51050
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51029: LD_ADDR_OWVAR 35
51033: PUSH
51034: LD_VAR 0 1
51038: NEG
51039: PPUSH
51040: LD_VAR 0 1
51044: PPUSH
51045: CALL_OW 12
51049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51050: LD_ADDR_OWVAR 31
51054: PUSH
51055: LD_INT 0
51057: PPUSH
51058: LD_INT 3
51060: PPUSH
51061: CALL_OW 12
51065: PUSH
51066: LD_INT 0
51068: PPUSH
51069: LD_INT 3
51071: PPUSH
51072: CALL_OW 12
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: ST_TO_ADDR
// end ;
51089: LD_VAR 0 2
51093: RET
// export function PrepareTiger ( agressivity ) ; begin
51094: LD_INT 0
51096: PPUSH
// uc_side := 0 ;
51097: LD_ADDR_OWVAR 20
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
// uc_nation := 0 ;
51105: LD_ADDR_OWVAR 21
51109: PUSH
51110: LD_INT 0
51112: ST_TO_ADDR
// InitHc ;
51113: CALL_OW 19
// hc_class := class_tiger ;
51117: LD_ADDR_OWVAR 28
51121: PUSH
51122: LD_INT 14
51124: ST_TO_ADDR
// hc_gallery :=  ;
51125: LD_ADDR_OWVAR 33
51129: PUSH
51130: LD_STRING 
51132: ST_TO_ADDR
// hc_name :=  ;
51133: LD_ADDR_OWVAR 26
51137: PUSH
51138: LD_STRING 
51140: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51141: LD_ADDR_OWVAR 35
51145: PUSH
51146: LD_VAR 0 1
51150: NEG
51151: PPUSH
51152: LD_VAR 0 1
51156: PPUSH
51157: CALL_OW 12
51161: ST_TO_ADDR
// end ;
51162: LD_VAR 0 2
51166: RET
// export function PrepareEnchidna ( ) ; begin
51167: LD_INT 0
51169: PPUSH
// uc_side := 0 ;
51170: LD_ADDR_OWVAR 20
51174: PUSH
51175: LD_INT 0
51177: ST_TO_ADDR
// uc_nation := 0 ;
51178: LD_ADDR_OWVAR 21
51182: PUSH
51183: LD_INT 0
51185: ST_TO_ADDR
// InitHc ;
51186: CALL_OW 19
// hc_class := class_baggie ;
51190: LD_ADDR_OWVAR 28
51194: PUSH
51195: LD_INT 13
51197: ST_TO_ADDR
// hc_gallery :=  ;
51198: LD_ADDR_OWVAR 33
51202: PUSH
51203: LD_STRING 
51205: ST_TO_ADDR
// hc_name :=  ;
51206: LD_ADDR_OWVAR 26
51210: PUSH
51211: LD_STRING 
51213: ST_TO_ADDR
// end ;
51214: LD_VAR 0 1
51218: RET
// export function PrepareFrog ( ) ; begin
51219: LD_INT 0
51221: PPUSH
// uc_side := 0 ;
51222: LD_ADDR_OWVAR 20
51226: PUSH
51227: LD_INT 0
51229: ST_TO_ADDR
// uc_nation := 0 ;
51230: LD_ADDR_OWVAR 21
51234: PUSH
51235: LD_INT 0
51237: ST_TO_ADDR
// InitHc ;
51238: CALL_OW 19
// hc_class := class_frog ;
51242: LD_ADDR_OWVAR 28
51246: PUSH
51247: LD_INT 19
51249: ST_TO_ADDR
// hc_gallery :=  ;
51250: LD_ADDR_OWVAR 33
51254: PUSH
51255: LD_STRING 
51257: ST_TO_ADDR
// hc_name :=  ;
51258: LD_ADDR_OWVAR 26
51262: PUSH
51263: LD_STRING 
51265: ST_TO_ADDR
// end ;
51266: LD_VAR 0 1
51270: RET
// export function PrepareFish ( ) ; begin
51271: LD_INT 0
51273: PPUSH
// uc_side := 0 ;
51274: LD_ADDR_OWVAR 20
51278: PUSH
51279: LD_INT 0
51281: ST_TO_ADDR
// uc_nation := 0 ;
51282: LD_ADDR_OWVAR 21
51286: PUSH
51287: LD_INT 0
51289: ST_TO_ADDR
// InitHc ;
51290: CALL_OW 19
// hc_class := class_fish ;
51294: LD_ADDR_OWVAR 28
51298: PUSH
51299: LD_INT 20
51301: ST_TO_ADDR
// hc_gallery :=  ;
51302: LD_ADDR_OWVAR 33
51306: PUSH
51307: LD_STRING 
51309: ST_TO_ADDR
// hc_name :=  ;
51310: LD_ADDR_OWVAR 26
51314: PUSH
51315: LD_STRING 
51317: ST_TO_ADDR
// end ;
51318: LD_VAR 0 1
51322: RET
// export function PrepareBird ( ) ; begin
51323: LD_INT 0
51325: PPUSH
// uc_side := 0 ;
51326: LD_ADDR_OWVAR 20
51330: PUSH
51331: LD_INT 0
51333: ST_TO_ADDR
// uc_nation := 0 ;
51334: LD_ADDR_OWVAR 21
51338: PUSH
51339: LD_INT 0
51341: ST_TO_ADDR
// InitHc ;
51342: CALL_OW 19
// hc_class := class_phororhacos ;
51346: LD_ADDR_OWVAR 28
51350: PUSH
51351: LD_INT 18
51353: ST_TO_ADDR
// hc_gallery :=  ;
51354: LD_ADDR_OWVAR 33
51358: PUSH
51359: LD_STRING 
51361: ST_TO_ADDR
// hc_name :=  ;
51362: LD_ADDR_OWVAR 26
51366: PUSH
51367: LD_STRING 
51369: ST_TO_ADDR
// end ;
51370: LD_VAR 0 1
51374: RET
// export function PrepareHorse ( ) ; begin
51375: LD_INT 0
51377: PPUSH
// uc_side := 0 ;
51378: LD_ADDR_OWVAR 20
51382: PUSH
51383: LD_INT 0
51385: ST_TO_ADDR
// uc_nation := 0 ;
51386: LD_ADDR_OWVAR 21
51390: PUSH
51391: LD_INT 0
51393: ST_TO_ADDR
// InitHc ;
51394: CALL_OW 19
// hc_class := class_horse ;
51398: LD_ADDR_OWVAR 28
51402: PUSH
51403: LD_INT 21
51405: ST_TO_ADDR
// hc_gallery :=  ;
51406: LD_ADDR_OWVAR 33
51410: PUSH
51411: LD_STRING 
51413: ST_TO_ADDR
// hc_name :=  ;
51414: LD_ADDR_OWVAR 26
51418: PUSH
51419: LD_STRING 
51421: ST_TO_ADDR
// end ;
51422: LD_VAR 0 1
51426: RET
// export function PrepareMastodont ( ) ; begin
51427: LD_INT 0
51429: PPUSH
// uc_side := 0 ;
51430: LD_ADDR_OWVAR 20
51434: PUSH
51435: LD_INT 0
51437: ST_TO_ADDR
// uc_nation := 0 ;
51438: LD_ADDR_OWVAR 21
51442: PUSH
51443: LD_INT 0
51445: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51446: LD_ADDR_OWVAR 37
51450: PUSH
51451: LD_INT 31
51453: ST_TO_ADDR
// vc_control := control_rider ;
51454: LD_ADDR_OWVAR 38
51458: PUSH
51459: LD_INT 4
51461: ST_TO_ADDR
// end ;
51462: LD_VAR 0 1
51466: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51467: LD_INT 0
51469: PPUSH
51470: PPUSH
51471: PPUSH
// uc_side = 0 ;
51472: LD_ADDR_OWVAR 20
51476: PUSH
51477: LD_INT 0
51479: ST_TO_ADDR
// uc_nation = 0 ;
51480: LD_ADDR_OWVAR 21
51484: PUSH
51485: LD_INT 0
51487: ST_TO_ADDR
// InitHc_All ( ) ;
51488: CALL_OW 584
// InitVc ;
51492: CALL_OW 20
// if mastodonts then
51496: LD_VAR 0 6
51500: IFFALSE 51567
// for i = 1 to mastodonts do
51502: LD_ADDR_VAR 0 11
51506: PUSH
51507: DOUBLE
51508: LD_INT 1
51510: DEC
51511: ST_TO_ADDR
51512: LD_VAR 0 6
51516: PUSH
51517: FOR_TO
51518: IFFALSE 51565
// begin vc_chassis := 31 ;
51520: LD_ADDR_OWVAR 37
51524: PUSH
51525: LD_INT 31
51527: ST_TO_ADDR
// vc_control := control_rider ;
51528: LD_ADDR_OWVAR 38
51532: PUSH
51533: LD_INT 4
51535: ST_TO_ADDR
// animal := CreateVehicle ;
51536: LD_ADDR_VAR 0 12
51540: PUSH
51541: CALL_OW 45
51545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51546: LD_VAR 0 12
51550: PPUSH
51551: LD_VAR 0 8
51555: PPUSH
51556: LD_INT 0
51558: PPUSH
51559: CALL 53709 0 3
// end ;
51563: GO 51517
51565: POP
51566: POP
// if horses then
51567: LD_VAR 0 5
51571: IFFALSE 51638
// for i = 1 to horses do
51573: LD_ADDR_VAR 0 11
51577: PUSH
51578: DOUBLE
51579: LD_INT 1
51581: DEC
51582: ST_TO_ADDR
51583: LD_VAR 0 5
51587: PUSH
51588: FOR_TO
51589: IFFALSE 51636
// begin hc_class := 21 ;
51591: LD_ADDR_OWVAR 28
51595: PUSH
51596: LD_INT 21
51598: ST_TO_ADDR
// hc_gallery :=  ;
51599: LD_ADDR_OWVAR 33
51603: PUSH
51604: LD_STRING 
51606: ST_TO_ADDR
// animal := CreateHuman ;
51607: LD_ADDR_VAR 0 12
51611: PUSH
51612: CALL_OW 44
51616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51617: LD_VAR 0 12
51621: PPUSH
51622: LD_VAR 0 8
51626: PPUSH
51627: LD_INT 0
51629: PPUSH
51630: CALL 53709 0 3
// end ;
51634: GO 51588
51636: POP
51637: POP
// if birds then
51638: LD_VAR 0 1
51642: IFFALSE 51709
// for i = 1 to birds do
51644: LD_ADDR_VAR 0 11
51648: PUSH
51649: DOUBLE
51650: LD_INT 1
51652: DEC
51653: ST_TO_ADDR
51654: LD_VAR 0 1
51658: PUSH
51659: FOR_TO
51660: IFFALSE 51707
// begin hc_class := 18 ;
51662: LD_ADDR_OWVAR 28
51666: PUSH
51667: LD_INT 18
51669: ST_TO_ADDR
// hc_gallery =  ;
51670: LD_ADDR_OWVAR 33
51674: PUSH
51675: LD_STRING 
51677: ST_TO_ADDR
// animal := CreateHuman ;
51678: LD_ADDR_VAR 0 12
51682: PUSH
51683: CALL_OW 44
51687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51688: LD_VAR 0 12
51692: PPUSH
51693: LD_VAR 0 8
51697: PPUSH
51698: LD_INT 0
51700: PPUSH
51701: CALL 53709 0 3
// end ;
51705: GO 51659
51707: POP
51708: POP
// if tigers then
51709: LD_VAR 0 2
51713: IFFALSE 51797
// for i = 1 to tigers do
51715: LD_ADDR_VAR 0 11
51719: PUSH
51720: DOUBLE
51721: LD_INT 1
51723: DEC
51724: ST_TO_ADDR
51725: LD_VAR 0 2
51729: PUSH
51730: FOR_TO
51731: IFFALSE 51795
// begin hc_class = class_tiger ;
51733: LD_ADDR_OWVAR 28
51737: PUSH
51738: LD_INT 14
51740: ST_TO_ADDR
// hc_gallery =  ;
51741: LD_ADDR_OWVAR 33
51745: PUSH
51746: LD_STRING 
51748: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51749: LD_ADDR_OWVAR 35
51753: PUSH
51754: LD_INT 7
51756: NEG
51757: PPUSH
51758: LD_INT 7
51760: PPUSH
51761: CALL_OW 12
51765: ST_TO_ADDR
// animal := CreateHuman ;
51766: LD_ADDR_VAR 0 12
51770: PUSH
51771: CALL_OW 44
51775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51776: LD_VAR 0 12
51780: PPUSH
51781: LD_VAR 0 8
51785: PPUSH
51786: LD_INT 0
51788: PPUSH
51789: CALL 53709 0 3
// end ;
51793: GO 51730
51795: POP
51796: POP
// if apemans then
51797: LD_VAR 0 3
51801: IFFALSE 51924
// for i = 1 to apemans do
51803: LD_ADDR_VAR 0 11
51807: PUSH
51808: DOUBLE
51809: LD_INT 1
51811: DEC
51812: ST_TO_ADDR
51813: LD_VAR 0 3
51817: PUSH
51818: FOR_TO
51819: IFFALSE 51922
// begin hc_class = class_apeman ;
51821: LD_ADDR_OWVAR 28
51825: PUSH
51826: LD_INT 12
51828: ST_TO_ADDR
// hc_gallery =  ;
51829: LD_ADDR_OWVAR 33
51833: PUSH
51834: LD_STRING 
51836: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51837: LD_ADDR_OWVAR 35
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PPUSH
51846: LD_INT 2
51848: PPUSH
51849: CALL_OW 12
51853: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51854: LD_ADDR_OWVAR 31
51858: PUSH
51859: LD_INT 1
51861: PPUSH
51862: LD_INT 3
51864: PPUSH
51865: CALL_OW 12
51869: PUSH
51870: LD_INT 1
51872: PPUSH
51873: LD_INT 3
51875: PPUSH
51876: CALL_OW 12
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: ST_TO_ADDR
// animal := CreateHuman ;
51893: LD_ADDR_VAR 0 12
51897: PUSH
51898: CALL_OW 44
51902: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51903: LD_VAR 0 12
51907: PPUSH
51908: LD_VAR 0 8
51912: PPUSH
51913: LD_INT 0
51915: PPUSH
51916: CALL 53709 0 3
// end ;
51920: GO 51818
51922: POP
51923: POP
// if enchidnas then
51924: LD_VAR 0 4
51928: IFFALSE 51995
// for i = 1 to enchidnas do
51930: LD_ADDR_VAR 0 11
51934: PUSH
51935: DOUBLE
51936: LD_INT 1
51938: DEC
51939: ST_TO_ADDR
51940: LD_VAR 0 4
51944: PUSH
51945: FOR_TO
51946: IFFALSE 51993
// begin hc_class = 13 ;
51948: LD_ADDR_OWVAR 28
51952: PUSH
51953: LD_INT 13
51955: ST_TO_ADDR
// hc_gallery =  ;
51956: LD_ADDR_OWVAR 33
51960: PUSH
51961: LD_STRING 
51963: ST_TO_ADDR
// animal := CreateHuman ;
51964: LD_ADDR_VAR 0 12
51968: PUSH
51969: CALL_OW 44
51973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51974: LD_VAR 0 12
51978: PPUSH
51979: LD_VAR 0 8
51983: PPUSH
51984: LD_INT 0
51986: PPUSH
51987: CALL 53709 0 3
// end ;
51991: GO 51945
51993: POP
51994: POP
// if fishes then
51995: LD_VAR 0 7
51999: IFFALSE 52066
// for i = 1 to fishes do
52001: LD_ADDR_VAR 0 11
52005: PUSH
52006: DOUBLE
52007: LD_INT 1
52009: DEC
52010: ST_TO_ADDR
52011: LD_VAR 0 7
52015: PUSH
52016: FOR_TO
52017: IFFALSE 52064
// begin hc_class = 20 ;
52019: LD_ADDR_OWVAR 28
52023: PUSH
52024: LD_INT 20
52026: ST_TO_ADDR
// hc_gallery =  ;
52027: LD_ADDR_OWVAR 33
52031: PUSH
52032: LD_STRING 
52034: ST_TO_ADDR
// animal := CreateHuman ;
52035: LD_ADDR_VAR 0 12
52039: PUSH
52040: CALL_OW 44
52044: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52045: LD_VAR 0 12
52049: PPUSH
52050: LD_VAR 0 9
52054: PPUSH
52055: LD_INT 0
52057: PPUSH
52058: CALL 53709 0 3
// end ;
52062: GO 52016
52064: POP
52065: POP
// end ;
52066: LD_VAR 0 10
52070: RET
// export function WantHeal ( sci , unit ) ; begin
52071: LD_INT 0
52073: PPUSH
// if GetTaskList ( sci ) > 0 then
52074: LD_VAR 0 1
52078: PPUSH
52079: CALL_OW 437
52083: PUSH
52084: LD_INT 0
52086: GREATER
52087: IFFALSE 52159
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52089: LD_VAR 0 1
52093: PPUSH
52094: CALL_OW 437
52098: PUSH
52099: LD_INT 1
52101: ARRAY
52102: PUSH
52103: LD_INT 1
52105: ARRAY
52106: PUSH
52107: LD_STRING l
52109: EQUAL
52110: IFFALSE 52137
52112: PUSH
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 437
52122: PUSH
52123: LD_INT 1
52125: ARRAY
52126: PUSH
52127: LD_INT 4
52129: ARRAY
52130: PUSH
52131: LD_VAR 0 2
52135: EQUAL
52136: AND
52137: IFFALSE 52149
// result := true else
52139: LD_ADDR_VAR 0 3
52143: PUSH
52144: LD_INT 1
52146: ST_TO_ADDR
52147: GO 52157
// result := false ;
52149: LD_ADDR_VAR 0 3
52153: PUSH
52154: LD_INT 0
52156: ST_TO_ADDR
// end else
52157: GO 52167
// result := false ;
52159: LD_ADDR_VAR 0 3
52163: PUSH
52164: LD_INT 0
52166: ST_TO_ADDR
// end ;
52167: LD_VAR 0 3
52171: RET
// export function HealTarget ( sci ) ; begin
52172: LD_INT 0
52174: PPUSH
// if not sci then
52175: LD_VAR 0 1
52179: NOT
52180: IFFALSE 52184
// exit ;
52182: GO 52249
// result := 0 ;
52184: LD_ADDR_VAR 0 2
52188: PUSH
52189: LD_INT 0
52191: ST_TO_ADDR
// if GetTaskList ( sci ) then
52192: LD_VAR 0 1
52196: PPUSH
52197: CALL_OW 437
52201: IFFALSE 52249
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52203: LD_VAR 0 1
52207: PPUSH
52208: CALL_OW 437
52212: PUSH
52213: LD_INT 1
52215: ARRAY
52216: PUSH
52217: LD_INT 1
52219: ARRAY
52220: PUSH
52221: LD_STRING l
52223: EQUAL
52224: IFFALSE 52249
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52226: LD_ADDR_VAR 0 2
52230: PUSH
52231: LD_VAR 0 1
52235: PPUSH
52236: CALL_OW 437
52240: PUSH
52241: LD_INT 1
52243: ARRAY
52244: PUSH
52245: LD_INT 4
52247: ARRAY
52248: ST_TO_ADDR
// end ;
52249: LD_VAR 0 2
52253: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52254: LD_INT 0
52256: PPUSH
52257: PPUSH
52258: PPUSH
52259: PPUSH
// if not base_units then
52260: LD_VAR 0 1
52264: NOT
52265: IFFALSE 52269
// exit ;
52267: GO 52356
// result := false ;
52269: LD_ADDR_VAR 0 2
52273: PUSH
52274: LD_INT 0
52276: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52277: LD_ADDR_VAR 0 5
52281: PUSH
52282: LD_VAR 0 1
52286: PPUSH
52287: LD_INT 21
52289: PUSH
52290: LD_INT 3
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PPUSH
52297: CALL_OW 72
52301: ST_TO_ADDR
// if not tmp then
52302: LD_VAR 0 5
52306: NOT
52307: IFFALSE 52311
// exit ;
52309: GO 52356
// for i in tmp do
52311: LD_ADDR_VAR 0 3
52315: PUSH
52316: LD_VAR 0 5
52320: PUSH
52321: FOR_IN
52322: IFFALSE 52354
// begin result := EnemyInRange ( i , 22 ) ;
52324: LD_ADDR_VAR 0 2
52328: PUSH
52329: LD_VAR 0 3
52333: PPUSH
52334: LD_INT 22
52336: PPUSH
52337: CALL 49781 0 2
52341: ST_TO_ADDR
// if result then
52342: LD_VAR 0 2
52346: IFFALSE 52352
// exit ;
52348: POP
52349: POP
52350: GO 52356
// end ;
52352: GO 52321
52354: POP
52355: POP
// end ;
52356: LD_VAR 0 2
52360: RET
// export function FilterByTag ( units , tag ) ; begin
52361: LD_INT 0
52363: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52364: LD_ADDR_VAR 0 3
52368: PUSH
52369: LD_VAR 0 1
52373: PPUSH
52374: LD_INT 120
52376: PUSH
52377: LD_VAR 0 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PPUSH
52386: CALL_OW 72
52390: ST_TO_ADDR
// end ;
52391: LD_VAR 0 3
52395: RET
// export function IsDriver ( un ) ; begin
52396: LD_INT 0
52398: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52399: LD_ADDR_VAR 0 2
52403: PUSH
52404: LD_VAR 0 1
52408: PUSH
52409: LD_INT 55
52411: PUSH
52412: EMPTY
52413: LIST
52414: PPUSH
52415: CALL_OW 69
52419: IN
52420: ST_TO_ADDR
// end ;
52421: LD_VAR 0 2
52425: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52426: LD_INT 0
52428: PPUSH
52429: PPUSH
// list := [ ] ;
52430: LD_ADDR_VAR 0 5
52434: PUSH
52435: EMPTY
52436: ST_TO_ADDR
// case d of 0 :
52437: LD_VAR 0 3
52441: PUSH
52442: LD_INT 0
52444: DOUBLE
52445: EQUAL
52446: IFTRUE 52450
52448: GO 52583
52450: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52451: LD_ADDR_VAR 0 5
52455: PUSH
52456: LD_VAR 0 1
52460: PUSH
52461: LD_INT 4
52463: MINUS
52464: PUSH
52465: LD_VAR 0 2
52469: PUSH
52470: LD_INT 4
52472: MINUS
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: LIST
52481: PUSH
52482: LD_VAR 0 1
52486: PUSH
52487: LD_INT 3
52489: MINUS
52490: PUSH
52491: LD_VAR 0 2
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: PUSH
52504: LD_VAR 0 1
52508: PUSH
52509: LD_INT 4
52511: PLUS
52512: PUSH
52513: LD_VAR 0 2
52517: PUSH
52518: LD_INT 4
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: PUSH
52526: LD_VAR 0 1
52530: PUSH
52531: LD_INT 3
52533: PLUS
52534: PUSH
52535: LD_VAR 0 2
52539: PUSH
52540: LD_INT 3
52542: PLUS
52543: PUSH
52544: LD_INT 5
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: PUSH
52552: LD_VAR 0 1
52556: PUSH
52557: LD_VAR 0 2
52561: PUSH
52562: LD_INT 4
52564: PLUS
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: ST_TO_ADDR
// end ; 1 :
52581: GO 53281
52583: LD_INT 1
52585: DOUBLE
52586: EQUAL
52587: IFTRUE 52591
52589: GO 52724
52591: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52592: LD_ADDR_VAR 0 5
52596: PUSH
52597: LD_VAR 0 1
52601: PUSH
52602: LD_VAR 0 2
52606: PUSH
52607: LD_INT 4
52609: MINUS
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: PUSH
52619: LD_VAR 0 1
52623: PUSH
52624: LD_INT 3
52626: MINUS
52627: PUSH
52628: LD_VAR 0 2
52632: PUSH
52633: LD_INT 3
52635: MINUS
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: PUSH
52645: LD_VAR 0 1
52649: PUSH
52650: LD_INT 4
52652: MINUS
52653: PUSH
52654: LD_VAR 0 2
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: PUSH
52667: LD_VAR 0 1
52671: PUSH
52672: LD_VAR 0 2
52676: PUSH
52677: LD_INT 3
52679: PLUS
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: PUSH
52689: LD_VAR 0 1
52693: PUSH
52694: LD_INT 4
52696: PLUS
52697: PUSH
52698: LD_VAR 0 2
52702: PUSH
52703: LD_INT 4
52705: PLUS
52706: PUSH
52707: LD_INT 5
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: ST_TO_ADDR
// end ; 2 :
52722: GO 53281
52724: LD_INT 2
52726: DOUBLE
52727: EQUAL
52728: IFTRUE 52732
52730: GO 52861
52732: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52733: LD_ADDR_VAR 0 5
52737: PUSH
52738: LD_VAR 0 1
52742: PUSH
52743: LD_VAR 0 2
52747: PUSH
52748: LD_INT 3
52750: MINUS
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: LD_VAR 0 1
52764: PUSH
52765: LD_INT 4
52767: PLUS
52768: PUSH
52769: LD_VAR 0 2
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: PUSH
52782: LD_VAR 0 1
52786: PUSH
52787: LD_VAR 0 2
52791: PUSH
52792: LD_INT 4
52794: PLUS
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: PUSH
52804: LD_VAR 0 1
52808: PUSH
52809: LD_INT 3
52811: MINUS
52812: PUSH
52813: LD_VAR 0 2
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: PUSH
52826: LD_VAR 0 1
52830: PUSH
52831: LD_INT 4
52833: MINUS
52834: PUSH
52835: LD_VAR 0 2
52839: PUSH
52840: LD_INT 4
52842: MINUS
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// end ; 3 :
52859: GO 53281
52861: LD_INT 3
52863: DOUBLE
52864: EQUAL
52865: IFTRUE 52869
52867: GO 53002
52869: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52870: LD_ADDR_VAR 0 5
52874: PUSH
52875: LD_VAR 0 1
52879: PUSH
52880: LD_INT 3
52882: PLUS
52883: PUSH
52884: LD_VAR 0 2
52888: PUSH
52889: LD_INT 4
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: PUSH
52897: LD_VAR 0 1
52901: PUSH
52902: LD_INT 4
52904: PLUS
52905: PUSH
52906: LD_VAR 0 2
52910: PUSH
52911: LD_INT 4
52913: PLUS
52914: PUSH
52915: LD_INT 5
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: PUSH
52923: LD_VAR 0 1
52927: PUSH
52928: LD_INT 4
52930: MINUS
52931: PUSH
52932: LD_VAR 0 2
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: PUSH
52945: LD_VAR 0 1
52949: PUSH
52950: LD_VAR 0 2
52954: PUSH
52955: LD_INT 4
52957: MINUS
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: PUSH
52967: LD_VAR 0 1
52971: PUSH
52972: LD_INT 3
52974: MINUS
52975: PUSH
52976: LD_VAR 0 2
52980: PUSH
52981: LD_INT 3
52983: MINUS
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// end ; 4 :
53000: GO 53281
53002: LD_INT 4
53004: DOUBLE
53005: EQUAL
53006: IFTRUE 53010
53008: GO 53143
53010: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53011: LD_ADDR_VAR 0 5
53015: PUSH
53016: LD_VAR 0 1
53020: PUSH
53021: LD_VAR 0 2
53025: PUSH
53026: LD_INT 4
53028: PLUS
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_INT 3
53045: PLUS
53046: PUSH
53047: LD_VAR 0 2
53051: PUSH
53052: LD_INT 3
53054: PLUS
53055: PUSH
53056: LD_INT 5
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: PUSH
53064: LD_VAR 0 1
53068: PUSH
53069: LD_INT 4
53071: PLUS
53072: PUSH
53073: LD_VAR 0 2
53077: PUSH
53078: LD_INT 4
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: PUSH
53086: LD_VAR 0 1
53090: PUSH
53091: LD_VAR 0 2
53095: PUSH
53096: LD_INT 3
53098: MINUS
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: PUSH
53108: LD_VAR 0 1
53112: PUSH
53113: LD_INT 4
53115: MINUS
53116: PUSH
53117: LD_VAR 0 2
53121: PUSH
53122: LD_INT 4
53124: MINUS
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// end ; 5 :
53141: GO 53281
53143: LD_INT 5
53145: DOUBLE
53146: EQUAL
53147: IFTRUE 53151
53149: GO 53280
53151: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53152: LD_ADDR_VAR 0 5
53156: PUSH
53157: LD_VAR 0 1
53161: PUSH
53162: LD_INT 4
53164: MINUS
53165: PUSH
53166: LD_VAR 0 2
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: PUSH
53179: LD_VAR 0 1
53183: PUSH
53184: LD_VAR 0 2
53188: PUSH
53189: LD_INT 4
53191: MINUS
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: PUSH
53201: LD_VAR 0 1
53205: PUSH
53206: LD_INT 4
53208: PLUS
53209: PUSH
53210: LD_VAR 0 2
53214: PUSH
53215: LD_INT 4
53217: PLUS
53218: PUSH
53219: LD_INT 5
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: PUSH
53227: LD_VAR 0 1
53231: PUSH
53232: LD_INT 3
53234: PLUS
53235: PUSH
53236: LD_VAR 0 2
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: LIST
53248: PUSH
53249: LD_VAR 0 1
53253: PUSH
53254: LD_VAR 0 2
53258: PUSH
53259: LD_INT 3
53261: PLUS
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// end ; end ;
53278: GO 53281
53280: POP
// result := list ;
53281: LD_ADDR_VAR 0 4
53285: PUSH
53286: LD_VAR 0 5
53290: ST_TO_ADDR
// end ;
53291: LD_VAR 0 4
53295: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53296: LD_INT 0
53298: PPUSH
53299: PPUSH
53300: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53301: LD_VAR 0 1
53305: NOT
53306: IFTRUE 53334
53308: PUSH
53309: LD_VAR 0 2
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: LD_INT 4
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: IN
53332: NOT
53333: OR
53334: IFFALSE 53338
// exit ;
53336: GO 53421
// tmp := [ ] ;
53338: LD_ADDR_VAR 0 5
53342: PUSH
53343: EMPTY
53344: ST_TO_ADDR
// for i in units do
53345: LD_ADDR_VAR 0 4
53349: PUSH
53350: LD_VAR 0 1
53354: PUSH
53355: FOR_IN
53356: IFFALSE 53390
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53358: LD_ADDR_VAR 0 5
53362: PUSH
53363: LD_VAR 0 5
53367: PPUSH
53368: LD_VAR 0 4
53372: PPUSH
53373: LD_VAR 0 2
53377: PPUSH
53378: CALL_OW 259
53382: PPUSH
53383: CALL 54816 0 2
53387: ST_TO_ADDR
53388: GO 53355
53390: POP
53391: POP
// if not tmp then
53392: LD_VAR 0 5
53396: NOT
53397: IFFALSE 53401
// exit ;
53399: GO 53421
// result := SortListByListDesc ( units , tmp ) ;
53401: LD_ADDR_VAR 0 3
53405: PUSH
53406: LD_VAR 0 1
53410: PPUSH
53411: LD_VAR 0 5
53415: PPUSH
53416: CALL_OW 77
53420: ST_TO_ADDR
// end ;
53421: LD_VAR 0 3
53425: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53426: LD_INT 0
53428: PPUSH
53429: PPUSH
53430: PPUSH
// result := false ;
53431: LD_ADDR_VAR 0 3
53435: PUSH
53436: LD_INT 0
53438: ST_TO_ADDR
// if not building then
53439: LD_VAR 0 2
53443: NOT
53444: IFFALSE 53448
// exit ;
53446: GO 53592
// x := GetX ( building ) ;
53448: LD_ADDR_VAR 0 4
53452: PUSH
53453: LD_VAR 0 2
53457: PPUSH
53458: CALL_OW 250
53462: ST_TO_ADDR
// y := GetY ( building ) ;
53463: LD_ADDR_VAR 0 5
53467: PUSH
53468: LD_VAR 0 2
53472: PPUSH
53473: CALL_OW 251
53477: ST_TO_ADDR
// if not x or not y then
53478: LD_VAR 0 4
53482: NOT
53483: IFTRUE 53492
53485: PUSH
53486: LD_VAR 0 5
53490: NOT
53491: OR
53492: IFFALSE 53496
// exit ;
53494: GO 53592
// if GetTaskList ( unit ) then
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 437
53505: IFFALSE 53592
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53507: LD_STRING e
53509: PUSH
53510: LD_VAR 0 1
53514: PPUSH
53515: CALL_OW 437
53519: PUSH
53520: LD_INT 1
53522: ARRAY
53523: PUSH
53524: LD_INT 1
53526: ARRAY
53527: EQUAL
53528: IFFALSE 53555
53530: PUSH
53531: LD_VAR 0 4
53535: PUSH
53536: LD_VAR 0 1
53540: PPUSH
53541: CALL_OW 437
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PUSH
53550: LD_INT 2
53552: ARRAY
53553: EQUAL
53554: AND
53555: IFFALSE 53582
53557: PUSH
53558: LD_VAR 0 5
53562: PUSH
53563: LD_VAR 0 1
53567: PPUSH
53568: CALL_OW 437
53572: PUSH
53573: LD_INT 1
53575: ARRAY
53576: PUSH
53577: LD_INT 3
53579: ARRAY
53580: EQUAL
53581: AND
53582: IFFALSE 53592
// result := true end ;
53584: LD_ADDR_VAR 0 3
53588: PUSH
53589: LD_INT 1
53591: ST_TO_ADDR
// end ;
53592: LD_VAR 0 3
53596: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53597: LD_INT 0
53599: PPUSH
// result := false ;
53600: LD_ADDR_VAR 0 4
53604: PUSH
53605: LD_INT 0
53607: ST_TO_ADDR
// if GetTaskList ( unit ) then
53608: LD_VAR 0 1
53612: PPUSH
53613: CALL_OW 437
53617: IFFALSE 53704
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53619: LD_STRING M
53621: PUSH
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 437
53631: PUSH
53632: LD_INT 1
53634: ARRAY
53635: PUSH
53636: LD_INT 1
53638: ARRAY
53639: EQUAL
53640: IFFALSE 53667
53642: PUSH
53643: LD_VAR 0 2
53647: PUSH
53648: LD_VAR 0 1
53652: PPUSH
53653: CALL_OW 437
53657: PUSH
53658: LD_INT 1
53660: ARRAY
53661: PUSH
53662: LD_INT 2
53664: ARRAY
53665: EQUAL
53666: AND
53667: IFFALSE 53694
53669: PUSH
53670: LD_VAR 0 3
53674: PUSH
53675: LD_VAR 0 1
53679: PPUSH
53680: CALL_OW 437
53684: PUSH
53685: LD_INT 1
53687: ARRAY
53688: PUSH
53689: LD_INT 3
53691: ARRAY
53692: EQUAL
53693: AND
53694: IFFALSE 53704
// result := true ;
53696: LD_ADDR_VAR 0 4
53700: PUSH
53701: LD_INT 1
53703: ST_TO_ADDR
// end ; end ;
53704: LD_VAR 0 4
53708: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53709: LD_INT 0
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
// if not unit or not area then
53715: LD_VAR 0 1
53719: NOT
53720: IFTRUE 53729
53722: PUSH
53723: LD_VAR 0 2
53727: NOT
53728: OR
53729: IFFALSE 53733
// exit ;
53731: GO 53909
// tmp := AreaToList ( area , i ) ;
53733: LD_ADDR_VAR 0 6
53737: PUSH
53738: LD_VAR 0 2
53742: PPUSH
53743: LD_VAR 0 5
53747: PPUSH
53748: CALL_OW 517
53752: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53753: LD_ADDR_VAR 0 5
53757: PUSH
53758: DOUBLE
53759: LD_INT 1
53761: DEC
53762: ST_TO_ADDR
53763: LD_VAR 0 6
53767: PUSH
53768: LD_INT 1
53770: ARRAY
53771: PUSH
53772: FOR_TO
53773: IFFALSE 53907
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53775: LD_ADDR_VAR 0 7
53779: PUSH
53780: LD_VAR 0 6
53784: PUSH
53785: LD_INT 1
53787: ARRAY
53788: PUSH
53789: LD_VAR 0 5
53793: ARRAY
53794: PUSH
53795: LD_VAR 0 6
53799: PUSH
53800: LD_INT 2
53802: ARRAY
53803: PUSH
53804: LD_VAR 0 5
53808: ARRAY
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53814: LD_INT 92
53816: PUSH
53817: LD_VAR 0 7
53821: PUSH
53822: LD_INT 1
53824: ARRAY
53825: PUSH
53826: LD_VAR 0 7
53830: PUSH
53831: LD_INT 2
53833: ARRAY
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: PPUSH
53844: CALL_OW 69
53848: PUSH
53849: LD_INT 0
53851: EQUAL
53852: IFFALSE 53905
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53854: LD_VAR 0 1
53858: PPUSH
53859: LD_VAR 0 7
53863: PUSH
53864: LD_INT 1
53866: ARRAY
53867: PPUSH
53868: LD_VAR 0 7
53872: PUSH
53873: LD_INT 2
53875: ARRAY
53876: PPUSH
53877: LD_VAR 0 3
53881: PPUSH
53882: CALL_OW 48
// result := IsPlaced ( unit ) ;
53886: LD_ADDR_VAR 0 4
53890: PUSH
53891: LD_VAR 0 1
53895: PPUSH
53896: CALL_OW 305
53900: ST_TO_ADDR
// exit ;
53901: POP
53902: POP
53903: GO 53909
// end ; end ;
53905: GO 53772
53907: POP
53908: POP
// end ;
53909: LD_VAR 0 4
53913: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53914: LD_INT 0
53916: PPUSH
53917: PPUSH
53918: PPUSH
// if not side or side > 8 then
53919: LD_VAR 0 1
53923: NOT
53924: IFTRUE 53936
53926: PUSH
53927: LD_VAR 0 1
53931: PUSH
53932: LD_INT 8
53934: GREATER
53935: OR
53936: IFFALSE 53940
// exit ;
53938: GO 54127
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53940: LD_ADDR_VAR 0 4
53944: PUSH
53945: LD_INT 22
53947: PUSH
53948: LD_VAR 0 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 21
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PPUSH
53971: CALL_OW 69
53975: ST_TO_ADDR
// if not tmp then
53976: LD_VAR 0 4
53980: NOT
53981: IFFALSE 53985
// exit ;
53983: GO 54127
// enable_addtolog := true ;
53985: LD_ADDR_OWVAR 81
53989: PUSH
53990: LD_INT 1
53992: ST_TO_ADDR
// AddToLog ( [ ) ;
53993: LD_STRING [
53995: PPUSH
53996: CALL_OW 561
// for i in tmp do
54000: LD_ADDR_VAR 0 3
54004: PUSH
54005: LD_VAR 0 4
54009: PUSH
54010: FOR_IN
54011: IFFALSE 54118
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54013: LD_STRING [
54015: PUSH
54016: LD_VAR 0 3
54020: PPUSH
54021: CALL_OW 266
54025: STR
54026: PUSH
54027: LD_STRING , 
54029: STR
54030: PUSH
54031: LD_VAR 0 3
54035: PPUSH
54036: CALL_OW 250
54040: STR
54041: PUSH
54042: LD_STRING , 
54044: STR
54045: PUSH
54046: LD_VAR 0 3
54050: PPUSH
54051: CALL_OW 251
54055: STR
54056: PUSH
54057: LD_STRING , 
54059: STR
54060: PUSH
54061: LD_VAR 0 3
54065: PPUSH
54066: CALL_OW 254
54070: STR
54071: PUSH
54072: LD_STRING , 
54074: STR
54075: PUSH
54076: LD_VAR 0 3
54080: PPUSH
54081: LD_INT 1
54083: PPUSH
54084: CALL_OW 268
54088: STR
54089: PUSH
54090: LD_STRING , 
54092: STR
54093: PUSH
54094: LD_VAR 0 3
54098: PPUSH
54099: LD_INT 2
54101: PPUSH
54102: CALL_OW 268
54106: STR
54107: PUSH
54108: LD_STRING ],
54110: STR
54111: PPUSH
54112: CALL_OW 561
// end ;
54116: GO 54010
54118: POP
54119: POP
// AddToLog ( ]; ) ;
54120: LD_STRING ];
54122: PPUSH
54123: CALL_OW 561
// end ;
54127: LD_VAR 0 2
54131: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54132: LD_INT 0
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
54138: PPUSH
// if not area or not rate or not max then
54139: LD_VAR 0 1
54143: NOT
54144: IFTRUE 54153
54146: PUSH
54147: LD_VAR 0 2
54151: NOT
54152: OR
54153: IFTRUE 54162
54155: PUSH
54156: LD_VAR 0 4
54160: NOT
54161: OR
54162: IFFALSE 54166
// exit ;
54164: GO 54355
// while 1 do
54166: LD_INT 1
54168: IFFALSE 54355
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54170: LD_ADDR_VAR 0 9
54174: PUSH
54175: LD_VAR 0 1
54179: PPUSH
54180: LD_INT 1
54182: PPUSH
54183: CALL_OW 287
54187: PUSH
54188: LD_INT 10
54190: MUL
54191: ST_TO_ADDR
// r := rate / 10 ;
54192: LD_ADDR_VAR 0 7
54196: PUSH
54197: LD_VAR 0 2
54201: PUSH
54202: LD_INT 10
54204: DIVREAL
54205: ST_TO_ADDR
// time := 1 1$00 ;
54206: LD_ADDR_VAR 0 8
54210: PUSH
54211: LD_INT 2100
54213: ST_TO_ADDR
// if amount < min then
54214: LD_VAR 0 9
54218: PUSH
54219: LD_VAR 0 3
54223: LESS
54224: IFFALSE 54242
// r := r * 2 else
54226: LD_ADDR_VAR 0 7
54230: PUSH
54231: LD_VAR 0 7
54235: PUSH
54236: LD_INT 2
54238: MUL
54239: ST_TO_ADDR
54240: GO 54268
// if amount > max then
54242: LD_VAR 0 9
54246: PUSH
54247: LD_VAR 0 4
54251: GREATER
54252: IFFALSE 54268
// r := r / 2 ;
54254: LD_ADDR_VAR 0 7
54258: PUSH
54259: LD_VAR 0 7
54263: PUSH
54264: LD_INT 2
54266: DIVREAL
54267: ST_TO_ADDR
// time := time / r ;
54268: LD_ADDR_VAR 0 8
54272: PUSH
54273: LD_VAR 0 8
54277: PUSH
54278: LD_VAR 0 7
54282: DIVREAL
54283: ST_TO_ADDR
// if time < 0 then
54284: LD_VAR 0 8
54288: PUSH
54289: LD_INT 0
54291: LESS
54292: IFFALSE 54309
// time := time * - 1 ;
54294: LD_ADDR_VAR 0 8
54298: PUSH
54299: LD_VAR 0 8
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: MUL
54308: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54309: LD_VAR 0 8
54313: PUSH
54314: LD_INT 35
54316: PPUSH
54317: LD_INT 875
54319: PPUSH
54320: CALL_OW 12
54324: PLUS
54325: PPUSH
54326: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54330: LD_INT 1
54332: PPUSH
54333: LD_INT 5
54335: PPUSH
54336: CALL_OW 12
54340: PPUSH
54341: LD_VAR 0 1
54345: PPUSH
54346: LD_INT 1
54348: PPUSH
54349: CALL_OW 55
// end ;
54353: GO 54166
// end ;
54355: LD_VAR 0 5
54359: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54360: LD_INT 0
54362: PPUSH
54363: PPUSH
54364: PPUSH
54365: PPUSH
54366: PPUSH
54367: PPUSH
54368: PPUSH
54369: PPUSH
// if not turrets or not factories then
54370: LD_VAR 0 1
54374: NOT
54375: IFTRUE 54384
54377: PUSH
54378: LD_VAR 0 2
54382: NOT
54383: OR
54384: IFFALSE 54388
// exit ;
54386: GO 54695
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54388: LD_ADDR_VAR 0 10
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: LD_INT 6
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: LD_INT 4
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: LD_INT 5
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 24
54430: PUSH
54431: LD_INT 25
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 23
54440: PUSH
54441: LD_INT 27
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 42
54454: PUSH
54455: LD_INT 43
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 44
54464: PUSH
54465: LD_INT 46
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 45
54474: PUSH
54475: LD_INT 47
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// result := [ ] ;
54492: LD_ADDR_VAR 0 3
54496: PUSH
54497: EMPTY
54498: ST_TO_ADDR
// for i in turrets do
54499: LD_ADDR_VAR 0 4
54503: PUSH
54504: LD_VAR 0 1
54508: PUSH
54509: FOR_IN
54510: IFFALSE 54693
// begin nat := GetNation ( i ) ;
54512: LD_ADDR_VAR 0 7
54516: PUSH
54517: LD_VAR 0 4
54521: PPUSH
54522: CALL_OW 248
54526: ST_TO_ADDR
// weapon := 0 ;
54527: LD_ADDR_VAR 0 8
54531: PUSH
54532: LD_INT 0
54534: ST_TO_ADDR
// if not nat then
54535: LD_VAR 0 7
54539: NOT
54540: IFFALSE 54544
// continue ;
54542: GO 54509
// for j in list [ nat ] do
54544: LD_ADDR_VAR 0 5
54548: PUSH
54549: LD_VAR 0 10
54553: PUSH
54554: LD_VAR 0 7
54558: ARRAY
54559: PUSH
54560: FOR_IN
54561: IFFALSE 54602
// if GetBWeapon ( i ) = j [ 1 ] then
54563: LD_VAR 0 4
54567: PPUSH
54568: CALL_OW 269
54572: PUSH
54573: LD_VAR 0 5
54577: PUSH
54578: LD_INT 1
54580: ARRAY
54581: EQUAL
54582: IFFALSE 54600
// begin weapon := j [ 2 ] ;
54584: LD_ADDR_VAR 0 8
54588: PUSH
54589: LD_VAR 0 5
54593: PUSH
54594: LD_INT 2
54596: ARRAY
54597: ST_TO_ADDR
// break ;
54598: GO 54602
// end ;
54600: GO 54560
54602: POP
54603: POP
// if not weapon then
54604: LD_VAR 0 8
54608: NOT
54609: IFFALSE 54613
// continue ;
54611: GO 54509
// for k in factories do
54613: LD_ADDR_VAR 0 6
54617: PUSH
54618: LD_VAR 0 2
54622: PUSH
54623: FOR_IN
54624: IFFALSE 54689
// begin weapons := AvailableWeaponList ( k ) ;
54626: LD_ADDR_VAR 0 9
54630: PUSH
54631: LD_VAR 0 6
54635: PPUSH
54636: CALL_OW 478
54640: ST_TO_ADDR
// if not weapons then
54641: LD_VAR 0 9
54645: NOT
54646: IFFALSE 54650
// continue ;
54648: GO 54623
// if weapon in weapons then
54650: LD_VAR 0 8
54654: PUSH
54655: LD_VAR 0 9
54659: IN
54660: IFFALSE 54687
// begin result := [ i , weapon ] ;
54662: LD_ADDR_VAR 0 3
54666: PUSH
54667: LD_VAR 0 4
54671: PUSH
54672: LD_VAR 0 8
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// exit ;
54681: POP
54682: POP
54683: POP
54684: POP
54685: GO 54695
// end ; end ;
54687: GO 54623
54689: POP
54690: POP
// end ;
54691: GO 54509
54693: POP
54694: POP
// end ;
54695: LD_VAR 0 3
54699: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54700: LD_INT 0
54702: PPUSH
// if not side or side > 8 then
54703: LD_VAR 0 3
54707: NOT
54708: IFTRUE 54720
54710: PUSH
54711: LD_VAR 0 3
54715: PUSH
54716: LD_INT 8
54718: GREATER
54719: OR
54720: IFFALSE 54724
// exit ;
54722: GO 54783
// if not range then
54724: LD_VAR 0 4
54728: NOT
54729: IFFALSE 54740
// range := - 12 ;
54731: LD_ADDR_VAR 0 4
54735: PUSH
54736: LD_INT 12
54738: NEG
54739: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54740: LD_VAR 0 1
54744: PPUSH
54745: LD_VAR 0 2
54749: PPUSH
54750: LD_VAR 0 3
54754: PPUSH
54755: LD_VAR 0 4
54759: PPUSH
54760: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54764: LD_VAR 0 1
54768: PPUSH
54769: LD_VAR 0 2
54773: PPUSH
54774: LD_VAR 0 3
54778: PPUSH
54779: CALL_OW 331
// end ;
54783: LD_VAR 0 5
54787: RET
// export function Video ( mode ) ; begin
54788: LD_INT 0
54790: PPUSH
// ingame_video = mode ;
54791: LD_ADDR_OWVAR 52
54795: PUSH
54796: LD_VAR 0 1
54800: ST_TO_ADDR
// interface_hidden = mode ;
54801: LD_ADDR_OWVAR 54
54805: PUSH
54806: LD_VAR 0 1
54810: ST_TO_ADDR
// end ;
54811: LD_VAR 0 2
54815: RET
// export function Join ( array , element ) ; begin
54816: LD_INT 0
54818: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54819: LD_ADDR_VAR 0 3
54823: PUSH
54824: LD_VAR 0 1
54828: PPUSH
54829: LD_VAR 0 1
54833: PUSH
54834: LD_INT 1
54836: PLUS
54837: PPUSH
54838: LD_VAR 0 2
54842: PPUSH
54843: CALL_OW 1
54847: ST_TO_ADDR
// end ;
54848: LD_VAR 0 3
54852: RET
// export function JoinUnion ( array , element ) ; begin
54853: LD_INT 0
54855: PPUSH
// result := array union element ;
54856: LD_ADDR_VAR 0 3
54860: PUSH
54861: LD_VAR 0 1
54865: PUSH
54866: LD_VAR 0 2
54870: UNION
54871: ST_TO_ADDR
// end ;
54872: LD_VAR 0 3
54876: RET
// export function GetBehemoths ( side ) ; begin
54877: LD_INT 0
54879: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54880: LD_ADDR_VAR 0 2
54884: PUSH
54885: LD_INT 22
54887: PUSH
54888: LD_VAR 0 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 31
54899: PUSH
54900: LD_INT 25
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PPUSH
54911: CALL_OW 69
54915: ST_TO_ADDR
// end ;
54916: LD_VAR 0 2
54920: RET
// export function Shuffle ( array ) ; var i , index ; begin
54921: LD_INT 0
54923: PPUSH
54924: PPUSH
54925: PPUSH
// result := [ ] ;
54926: LD_ADDR_VAR 0 2
54930: PUSH
54931: EMPTY
54932: ST_TO_ADDR
// if not array then
54933: LD_VAR 0 1
54937: NOT
54938: IFFALSE 54942
// exit ;
54940: GO 55041
// Randomize ;
54942: CALL_OW 10
// for i = array downto 1 do
54946: LD_ADDR_VAR 0 3
54950: PUSH
54951: DOUBLE
54952: LD_VAR 0 1
54956: INC
54957: ST_TO_ADDR
54958: LD_INT 1
54960: PUSH
54961: FOR_DOWNTO
54962: IFFALSE 55039
// begin index := rand ( 1 , array ) ;
54964: LD_ADDR_VAR 0 4
54968: PUSH
54969: LD_INT 1
54971: PPUSH
54972: LD_VAR 0 1
54976: PPUSH
54977: CALL_OW 12
54981: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54982: LD_ADDR_VAR 0 2
54986: PUSH
54987: LD_VAR 0 2
54991: PPUSH
54992: LD_VAR 0 2
54996: PUSH
54997: LD_INT 1
54999: PLUS
55000: PPUSH
55001: LD_VAR 0 1
55005: PUSH
55006: LD_VAR 0 4
55010: ARRAY
55011: PPUSH
55012: CALL_OW 2
55016: ST_TO_ADDR
// array := Delete ( array , index ) ;
55017: LD_ADDR_VAR 0 1
55021: PUSH
55022: LD_VAR 0 1
55026: PPUSH
55027: LD_VAR 0 4
55031: PPUSH
55032: CALL_OW 3
55036: ST_TO_ADDR
// end ;
55037: GO 54961
55039: POP
55040: POP
// end ;
55041: LD_VAR 0 2
55045: RET
// export function GetBaseMaterials ( base ) ; begin
55046: LD_INT 0
55048: PPUSH
// result := [ 0 , 0 , 0 ] ;
55049: LD_ADDR_VAR 0 2
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: ST_TO_ADDR
// if not base then
55068: LD_VAR 0 1
55072: NOT
55073: IFFALSE 55077
// exit ;
55075: GO 55126
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55077: LD_ADDR_VAR 0 2
55081: PUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: LD_INT 1
55089: PPUSH
55090: CALL_OW 275
55094: PUSH
55095: LD_VAR 0 1
55099: PPUSH
55100: LD_INT 2
55102: PPUSH
55103: CALL_OW 275
55107: PUSH
55108: LD_VAR 0 1
55112: PPUSH
55113: LD_INT 3
55115: PPUSH
55116: CALL_OW 275
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// end ;
55126: LD_VAR 0 2
55130: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55131: LD_INT 0
55133: PPUSH
55134: PPUSH
// result := array ;
55135: LD_ADDR_VAR 0 3
55139: PUSH
55140: LD_VAR 0 1
55144: ST_TO_ADDR
// if size >= result then
55145: LD_VAR 0 2
55149: PUSH
55150: LD_VAR 0 3
55154: GREATEREQUAL
55155: IFFALSE 55159
// exit ;
55157: GO 55209
// if size then
55159: LD_VAR 0 2
55163: IFFALSE 55209
// for i := array downto size do
55165: LD_ADDR_VAR 0 4
55169: PUSH
55170: DOUBLE
55171: LD_VAR 0 1
55175: INC
55176: ST_TO_ADDR
55177: LD_VAR 0 2
55181: PUSH
55182: FOR_DOWNTO
55183: IFFALSE 55207
// result := Delete ( result , result ) ;
55185: LD_ADDR_VAR 0 3
55189: PUSH
55190: LD_VAR 0 3
55194: PPUSH
55195: LD_VAR 0 3
55199: PPUSH
55200: CALL_OW 3
55204: ST_TO_ADDR
55205: GO 55182
55207: POP
55208: POP
// end ;
55209: LD_VAR 0 3
55213: RET
// export function ComExit ( unit ) ; var tmp ; begin
55214: LD_INT 0
55216: PPUSH
55217: PPUSH
// if not IsInUnit ( unit ) then
55218: LD_VAR 0 1
55222: PPUSH
55223: CALL_OW 310
55227: NOT
55228: IFFALSE 55232
// exit ;
55230: GO 55292
// tmp := IsInUnit ( unit ) ;
55232: LD_ADDR_VAR 0 3
55236: PUSH
55237: LD_VAR 0 1
55241: PPUSH
55242: CALL_OW 310
55246: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55247: LD_VAR 0 3
55251: PPUSH
55252: CALL_OW 247
55256: PUSH
55257: LD_INT 2
55259: EQUAL
55260: IFFALSE 55273
// ComExitVehicle ( unit ) else
55262: LD_VAR 0 1
55266: PPUSH
55267: CALL_OW 121
55271: GO 55282
// ComExitBuilding ( unit ) ;
55273: LD_VAR 0 1
55277: PPUSH
55278: CALL_OW 122
// result := tmp ;
55282: LD_ADDR_VAR 0 2
55286: PUSH
55287: LD_VAR 0 3
55291: ST_TO_ADDR
// end ;
55292: LD_VAR 0 2
55296: RET
// export function ComExitAll ( units ) ; var i ; begin
55297: LD_INT 0
55299: PPUSH
55300: PPUSH
// if not units then
55301: LD_VAR 0 1
55305: NOT
55306: IFFALSE 55310
// exit ;
55308: GO 55336
// for i in units do
55310: LD_ADDR_VAR 0 3
55314: PUSH
55315: LD_VAR 0 1
55319: PUSH
55320: FOR_IN
55321: IFFALSE 55334
// ComExit ( i ) ;
55323: LD_VAR 0 3
55327: PPUSH
55328: CALL 55214 0 1
55332: GO 55320
55334: POP
55335: POP
// end ;
55336: LD_VAR 0 2
55340: RET
// export function ResetHc ; begin
55341: LD_INT 0
55343: PPUSH
// InitHc ;
55344: CALL_OW 19
// hc_importance := 0 ;
55348: LD_ADDR_OWVAR 32
55352: PUSH
55353: LD_INT 0
55355: ST_TO_ADDR
// end ;
55356: LD_VAR 0 1
55360: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55361: LD_INT 0
55363: PPUSH
55364: PPUSH
55365: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55366: LD_ADDR_VAR 0 6
55370: PUSH
55371: LD_VAR 0 1
55375: PUSH
55376: LD_VAR 0 3
55380: PLUS
55381: PUSH
55382: LD_INT 2
55384: DIV
55385: ST_TO_ADDR
// if _x < 0 then
55386: LD_VAR 0 6
55390: PUSH
55391: LD_INT 0
55393: LESS
55394: IFFALSE 55411
// _x := _x * - 1 ;
55396: LD_ADDR_VAR 0 6
55400: PUSH
55401: LD_VAR 0 6
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: MUL
55410: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55411: LD_ADDR_VAR 0 7
55415: PUSH
55416: LD_VAR 0 2
55420: PUSH
55421: LD_VAR 0 4
55425: PLUS
55426: PUSH
55427: LD_INT 2
55429: DIV
55430: ST_TO_ADDR
// if _y < 0 then
55431: LD_VAR 0 7
55435: PUSH
55436: LD_INT 0
55438: LESS
55439: IFFALSE 55456
// _y := _y * - 1 ;
55441: LD_ADDR_VAR 0 7
55445: PUSH
55446: LD_VAR 0 7
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: MUL
55455: ST_TO_ADDR
// result := [ _x , _y ] ;
55456: LD_ADDR_VAR 0 5
55460: PUSH
55461: LD_VAR 0 6
55465: PUSH
55466: LD_VAR 0 7
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: ST_TO_ADDR
// end ;
55475: LD_VAR 0 5
55479: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55480: LD_INT 0
55482: PPUSH
55483: PPUSH
55484: PPUSH
55485: PPUSH
// task := GetTaskList ( unit ) ;
55486: LD_ADDR_VAR 0 7
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: CALL_OW 437
55500: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55501: LD_VAR 0 7
55505: NOT
55506: IFFALSE 55525
55508: PUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: LD_VAR 0 2
55518: PPUSH
55519: CALL_OW 308
55523: NOT
55524: AND
55525: IFFALSE 55529
// exit ;
55527: GO 55647
// if IsInArea ( unit , area ) then
55529: LD_VAR 0 1
55533: PPUSH
55534: LD_VAR 0 2
55538: PPUSH
55539: CALL_OW 308
55543: IFFALSE 55561
// begin ComMoveToArea ( unit , goAway ) ;
55545: LD_VAR 0 1
55549: PPUSH
55550: LD_VAR 0 3
55554: PPUSH
55555: CALL_OW 113
// exit ;
55559: GO 55647
// end ; if task [ 1 ] [ 1 ] <> M then
55561: LD_VAR 0 7
55565: PUSH
55566: LD_INT 1
55568: ARRAY
55569: PUSH
55570: LD_INT 1
55572: ARRAY
55573: PUSH
55574: LD_STRING M
55576: NONEQUAL
55577: IFFALSE 55581
// exit ;
55579: GO 55647
// x := task [ 1 ] [ 2 ] ;
55581: LD_ADDR_VAR 0 5
55585: PUSH
55586: LD_VAR 0 7
55590: PUSH
55591: LD_INT 1
55593: ARRAY
55594: PUSH
55595: LD_INT 2
55597: ARRAY
55598: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55599: LD_ADDR_VAR 0 6
55603: PUSH
55604: LD_VAR 0 7
55608: PUSH
55609: LD_INT 1
55611: ARRAY
55612: PUSH
55613: LD_INT 3
55615: ARRAY
55616: ST_TO_ADDR
// if InArea ( x , y , area ) then
55617: LD_VAR 0 5
55621: PPUSH
55622: LD_VAR 0 6
55626: PPUSH
55627: LD_VAR 0 2
55631: PPUSH
55632: CALL_OW 309
55636: IFFALSE 55647
// ComStop ( unit ) ;
55638: LD_VAR 0 1
55642: PPUSH
55643: CALL_OW 141
// end ;
55647: LD_VAR 0 4
55651: RET
// export function Abs ( value ) ; begin
55652: LD_INT 0
55654: PPUSH
// result := value ;
55655: LD_ADDR_VAR 0 2
55659: PUSH
55660: LD_VAR 0 1
55664: ST_TO_ADDR
// if value < 0 then
55665: LD_VAR 0 1
55669: PUSH
55670: LD_INT 0
55672: LESS
55673: IFFALSE 55690
// result := value * - 1 ;
55675: LD_ADDR_VAR 0 2
55679: PUSH
55680: LD_VAR 0 1
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: MUL
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 2
55694: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55695: LD_INT 0
55697: PPUSH
55698: PPUSH
55699: PPUSH
55700: PPUSH
55701: PPUSH
55702: PPUSH
55703: PPUSH
55704: PPUSH
// if not unit or not building then
55705: LD_VAR 0 1
55709: NOT
55710: IFTRUE 55719
55712: PUSH
55713: LD_VAR 0 2
55717: NOT
55718: OR
55719: IFFALSE 55723
// exit ;
55721: GO 55951
// x := GetX ( building ) ;
55723: LD_ADDR_VAR 0 4
55727: PUSH
55728: LD_VAR 0 2
55732: PPUSH
55733: CALL_OW 250
55737: ST_TO_ADDR
// y := GetY ( building ) ;
55738: LD_ADDR_VAR 0 6
55742: PUSH
55743: LD_VAR 0 2
55747: PPUSH
55748: CALL_OW 251
55752: ST_TO_ADDR
// d := GetDir ( building ) ;
55753: LD_ADDR_VAR 0 8
55757: PUSH
55758: LD_VAR 0 2
55762: PPUSH
55763: CALL_OW 254
55767: ST_TO_ADDR
// r := 4 ;
55768: LD_ADDR_VAR 0 9
55772: PUSH
55773: LD_INT 4
55775: ST_TO_ADDR
// for i := 1 to 5 do
55776: LD_ADDR_VAR 0 10
55780: PUSH
55781: DOUBLE
55782: LD_INT 1
55784: DEC
55785: ST_TO_ADDR
55786: LD_INT 5
55788: PUSH
55789: FOR_TO
55790: IFFALSE 55949
// begin _x := ShiftX ( x , d , r + i ) ;
55792: LD_ADDR_VAR 0 5
55796: PUSH
55797: LD_VAR 0 4
55801: PPUSH
55802: LD_VAR 0 8
55806: PPUSH
55807: LD_VAR 0 9
55811: PUSH
55812: LD_VAR 0 10
55816: PLUS
55817: PPUSH
55818: CALL_OW 272
55822: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55823: LD_ADDR_VAR 0 7
55827: PUSH
55828: LD_VAR 0 6
55832: PPUSH
55833: LD_VAR 0 8
55837: PPUSH
55838: LD_VAR 0 9
55842: PUSH
55843: LD_VAR 0 10
55847: PLUS
55848: PPUSH
55849: CALL_OW 273
55853: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55854: LD_VAR 0 5
55858: PPUSH
55859: LD_VAR 0 7
55863: PPUSH
55864: CALL_OW 488
55868: IFFALSE 55903
55870: PUSH
55871: LD_VAR 0 5
55875: PPUSH
55876: LD_VAR 0 7
55880: PPUSH
55881: CALL_OW 428
55885: PPUSH
55886: CALL_OW 247
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: IN
55901: NOT
55902: AND
55903: IFFALSE 55947
// begin ComMoveXY ( unit , _x , _y ) ;
55905: LD_VAR 0 1
55909: PPUSH
55910: LD_VAR 0 5
55914: PPUSH
55915: LD_VAR 0 7
55919: PPUSH
55920: CALL_OW 111
// result := [ _x , _y ] ;
55924: LD_ADDR_VAR 0 3
55928: PUSH
55929: LD_VAR 0 5
55933: PUSH
55934: LD_VAR 0 7
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// exit ;
55943: POP
55944: POP
55945: GO 55951
// end ; end ;
55947: GO 55789
55949: POP
55950: POP
// end ;
55951: LD_VAR 0 3
55955: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55956: LD_INT 0
55958: PPUSH
55959: PPUSH
55960: PPUSH
// result := 0 ;
55961: LD_ADDR_VAR 0 3
55965: PUSH
55966: LD_INT 0
55968: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55969: LD_VAR 0 1
55973: PUSH
55974: LD_INT 0
55976: LESS
55977: IFTRUE 55989
55979: PUSH
55980: LD_VAR 0 1
55984: PUSH
55985: LD_INT 8
55987: GREATER
55988: OR
55989: IFTRUE 56001
55991: PUSH
55992: LD_VAR 0 2
55996: PUSH
55997: LD_INT 0
55999: LESS
56000: OR
56001: IFTRUE 56013
56003: PUSH
56004: LD_VAR 0 2
56008: PUSH
56009: LD_INT 8
56011: GREATER
56012: OR
56013: IFFALSE 56017
// exit ;
56015: GO 56092
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56017: LD_ADDR_VAR 0 4
56021: PUSH
56022: LD_INT 22
56024: PUSH
56025: LD_VAR 0 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PPUSH
56034: CALL_OW 69
56038: PUSH
56039: FOR_IN
56040: IFFALSE 56090
// begin un := UnitShoot ( i ) ;
56042: LD_ADDR_VAR 0 5
56046: PUSH
56047: LD_VAR 0 4
56051: PPUSH
56052: CALL_OW 504
56056: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56057: LD_VAR 0 5
56061: PPUSH
56062: CALL_OW 255
56066: PUSH
56067: LD_VAR 0 1
56071: EQUAL
56072: IFFALSE 56088
// begin result := un ;
56074: LD_ADDR_VAR 0 3
56078: PUSH
56079: LD_VAR 0 5
56083: ST_TO_ADDR
// exit ;
56084: POP
56085: POP
56086: GO 56092
// end ; end ;
56088: GO 56039
56090: POP
56091: POP
// end ;
56092: LD_VAR 0 3
56096: RET
// export function GetCargoBay ( units ) ; begin
56097: LD_INT 0
56099: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56100: LD_ADDR_VAR 0 2
56104: PUSH
56105: LD_VAR 0 1
56109: PPUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 34
56115: PUSH
56116: LD_INT 12
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 34
56125: PUSH
56126: LD_INT 51
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 34
56135: PUSH
56136: LD_INT 32
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 34
56145: PUSH
56146: LD_INT 89
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: PPUSH
56160: CALL_OW 72
56164: ST_TO_ADDR
// end ;
56165: LD_VAR 0 2
56169: RET
// export function Negate ( value ) ; begin
56170: LD_INT 0
56172: PPUSH
// result := not value ;
56173: LD_ADDR_VAR 0 2
56177: PUSH
56178: LD_VAR 0 1
56182: NOT
56183: ST_TO_ADDR
// end ;
56184: LD_VAR 0 2
56188: RET
// export function Inc ( value ) ; begin
56189: LD_INT 0
56191: PPUSH
// result := value + 1 ;
56192: LD_ADDR_VAR 0 2
56196: PUSH
56197: LD_VAR 0 1
56201: PUSH
56202: LD_INT 1
56204: PLUS
56205: ST_TO_ADDR
// end ;
56206: LD_VAR 0 2
56210: RET
// export function Dec ( value ) ; begin
56211: LD_INT 0
56213: PPUSH
// result := value - 1 ;
56214: LD_ADDR_VAR 0 2
56218: PUSH
56219: LD_VAR 0 1
56223: PUSH
56224: LD_INT 1
56226: MINUS
56227: ST_TO_ADDR
// end ;
56228: LD_VAR 0 2
56232: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56233: LD_INT 0
56235: PPUSH
56236: PPUSH
56237: PPUSH
56238: PPUSH
56239: PPUSH
56240: PPUSH
56241: PPUSH
56242: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56243: LD_VAR 0 1
56247: PPUSH
56248: LD_VAR 0 2
56252: PPUSH
56253: CALL_OW 488
56257: NOT
56258: IFTRUE 56277
56260: PUSH
56261: LD_VAR 0 3
56265: PPUSH
56266: LD_VAR 0 4
56270: PPUSH
56271: CALL_OW 488
56275: NOT
56276: OR
56277: IFFALSE 56290
// begin result := - 1 ;
56279: LD_ADDR_VAR 0 5
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: ST_TO_ADDR
// exit ;
56288: GO 56525
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56290: LD_ADDR_VAR 0 12
56294: PUSH
56295: LD_VAR 0 1
56299: PPUSH
56300: LD_VAR 0 2
56304: PPUSH
56305: LD_VAR 0 3
56309: PPUSH
56310: LD_VAR 0 4
56314: PPUSH
56315: CALL 55361 0 4
56319: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56320: LD_ADDR_VAR 0 11
56324: PUSH
56325: LD_VAR 0 1
56329: PPUSH
56330: LD_VAR 0 2
56334: PPUSH
56335: LD_VAR 0 12
56339: PUSH
56340: LD_INT 1
56342: ARRAY
56343: PPUSH
56344: LD_VAR 0 12
56348: PUSH
56349: LD_INT 2
56351: ARRAY
56352: PPUSH
56353: CALL_OW 298
56357: ST_TO_ADDR
// distance := 9999 ;
56358: LD_ADDR_VAR 0 10
56362: PUSH
56363: LD_INT 9999
56365: ST_TO_ADDR
// for i := 0 to 5 do
56366: LD_ADDR_VAR 0 6
56370: PUSH
56371: DOUBLE
56372: LD_INT 0
56374: DEC
56375: ST_TO_ADDR
56376: LD_INT 5
56378: PUSH
56379: FOR_TO
56380: IFFALSE 56523
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56382: LD_ADDR_VAR 0 7
56386: PUSH
56387: LD_VAR 0 1
56391: PPUSH
56392: LD_VAR 0 6
56396: PPUSH
56397: LD_VAR 0 11
56401: PPUSH
56402: CALL_OW 272
56406: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56407: LD_ADDR_VAR 0 8
56411: PUSH
56412: LD_VAR 0 2
56416: PPUSH
56417: LD_VAR 0 6
56421: PPUSH
56422: LD_VAR 0 11
56426: PPUSH
56427: CALL_OW 273
56431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56432: LD_VAR 0 7
56436: PPUSH
56437: LD_VAR 0 8
56441: PPUSH
56442: CALL_OW 488
56446: NOT
56447: IFFALSE 56451
// continue ;
56449: GO 56379
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56451: LD_ADDR_VAR 0 9
56455: PUSH
56456: LD_VAR 0 12
56460: PUSH
56461: LD_INT 1
56463: ARRAY
56464: PPUSH
56465: LD_VAR 0 12
56469: PUSH
56470: LD_INT 2
56472: ARRAY
56473: PPUSH
56474: LD_VAR 0 7
56478: PPUSH
56479: LD_VAR 0 8
56483: PPUSH
56484: CALL_OW 298
56488: ST_TO_ADDR
// if tmp < distance then
56489: LD_VAR 0 9
56493: PUSH
56494: LD_VAR 0 10
56498: LESS
56499: IFFALSE 56521
// begin result := i ;
56501: LD_ADDR_VAR 0 5
56505: PUSH
56506: LD_VAR 0 6
56510: ST_TO_ADDR
// distance := tmp ;
56511: LD_ADDR_VAR 0 10
56515: PUSH
56516: LD_VAR 0 9
56520: ST_TO_ADDR
// end ; end ;
56521: GO 56379
56523: POP
56524: POP
// end ;
56525: LD_VAR 0 5
56529: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56530: LD_INT 0
56532: PPUSH
56533: PPUSH
// if not driver or not IsInUnit ( driver ) then
56534: LD_VAR 0 1
56538: NOT
56539: IFTRUE 56553
56541: PUSH
56542: LD_VAR 0 1
56546: PPUSH
56547: CALL_OW 310
56551: NOT
56552: OR
56553: IFFALSE 56557
// exit ;
56555: GO 56647
// vehicle := IsInUnit ( driver ) ;
56557: LD_ADDR_VAR 0 3
56561: PUSH
56562: LD_VAR 0 1
56566: PPUSH
56567: CALL_OW 310
56571: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56572: LD_VAR 0 1
56576: PPUSH
56577: LD_STRING \
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: PUSH
56607: LD_STRING E
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_VAR 0 3
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PPUSH
56643: CALL_OW 446
// end ;
56647: LD_VAR 0 2
56651: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56652: LD_INT 0
56654: PPUSH
56655: PPUSH
// if not driver or not IsInUnit ( driver ) then
56656: LD_VAR 0 1
56660: NOT
56661: IFTRUE 56675
56663: PUSH
56664: LD_VAR 0 1
56668: PPUSH
56669: CALL_OW 310
56673: NOT
56674: OR
56675: IFFALSE 56679
// exit ;
56677: GO 56769
// vehicle := IsInUnit ( driver ) ;
56679: LD_ADDR_VAR 0 3
56683: PUSH
56684: LD_VAR 0 1
56688: PPUSH
56689: CALL_OW 310
56693: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56694: LD_VAR 0 1
56698: PPUSH
56699: LD_STRING \
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: PUSH
56729: LD_STRING E
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_VAR 0 3
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PPUSH
56765: CALL_OW 447
// end ;
56769: LD_VAR 0 2
56773: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56774: LD_INT 0
56776: PPUSH
56777: PPUSH
56778: PPUSH
// tmp := [ ] ;
56779: LD_ADDR_VAR 0 5
56783: PUSH
56784: EMPTY
56785: ST_TO_ADDR
// for i in units do
56786: LD_ADDR_VAR 0 4
56790: PUSH
56791: LD_VAR 0 1
56795: PUSH
56796: FOR_IN
56797: IFFALSE 56835
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56799: LD_ADDR_VAR 0 5
56803: PUSH
56804: LD_VAR 0 5
56808: PPUSH
56809: LD_VAR 0 5
56813: PUSH
56814: LD_INT 1
56816: PLUS
56817: PPUSH
56818: LD_VAR 0 4
56822: PPUSH
56823: CALL_OW 256
56827: PPUSH
56828: CALL_OW 2
56832: ST_TO_ADDR
56833: GO 56796
56835: POP
56836: POP
// if not tmp then
56837: LD_VAR 0 5
56841: NOT
56842: IFFALSE 56846
// exit ;
56844: GO 56894
// if asc then
56846: LD_VAR 0 2
56850: IFFALSE 56874
// result := SortListByListAsc ( units , tmp ) else
56852: LD_ADDR_VAR 0 3
56856: PUSH
56857: LD_VAR 0 1
56861: PPUSH
56862: LD_VAR 0 5
56866: PPUSH
56867: CALL_OW 76
56871: ST_TO_ADDR
56872: GO 56894
// result := SortListByListDesc ( units , tmp ) ;
56874: LD_ADDR_VAR 0 3
56878: PUSH
56879: LD_VAR 0 1
56883: PPUSH
56884: LD_VAR 0 5
56888: PPUSH
56889: CALL_OW 77
56893: ST_TO_ADDR
// end ;
56894: LD_VAR 0 3
56898: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56899: LD_INT 0
56901: PPUSH
56902: PPUSH
// task := GetTaskList ( mech ) ;
56903: LD_ADDR_VAR 0 4
56907: PUSH
56908: LD_VAR 0 1
56912: PPUSH
56913: CALL_OW 437
56917: ST_TO_ADDR
// if not task then
56918: LD_VAR 0 4
56922: NOT
56923: IFFALSE 56927
// exit ;
56925: GO 56971
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_VAR 0 4
56936: PUSH
56937: LD_INT 1
56939: ARRAY
56940: PUSH
56941: LD_INT 1
56943: ARRAY
56944: PUSH
56945: LD_STRING r
56947: EQUAL
56948: IFFALSE 56970
56950: PUSH
56951: LD_VAR 0 4
56955: PUSH
56956: LD_INT 1
56958: ARRAY
56959: PUSH
56960: LD_INT 4
56962: ARRAY
56963: PUSH
56964: LD_VAR 0 2
56968: EQUAL
56969: AND
56970: ST_TO_ADDR
// end ;
56971: LD_VAR 0 3
56975: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56976: LD_INT 0
56978: PPUSH
// SetDir ( unit , d ) ;
56979: LD_VAR 0 1
56983: PPUSH
56984: LD_VAR 0 4
56988: PPUSH
56989: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56993: LD_ADDR_VAR 0 6
56997: PUSH
56998: LD_VAR 0 1
57002: PPUSH
57003: LD_VAR 0 2
57007: PPUSH
57008: LD_VAR 0 3
57012: PPUSH
57013: LD_VAR 0 5
57017: PPUSH
57018: CALL_OW 48
57022: ST_TO_ADDR
// end ;
57023: LD_VAR 0 6
57027: RET
// export function ToNaturalNumber ( number ) ; begin
57028: LD_INT 0
57030: PPUSH
// result := number div 1 ;
57031: LD_ADDR_VAR 0 2
57035: PUSH
57036: LD_VAR 0 1
57040: PUSH
57041: LD_INT 1
57043: DIV
57044: ST_TO_ADDR
// if number < 0 then
57045: LD_VAR 0 1
57049: PUSH
57050: LD_INT 0
57052: LESS
57053: IFFALSE 57063
// result := 0 ;
57055: LD_ADDR_VAR 0 2
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// end ;
57063: LD_VAR 0 2
57067: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57068: LD_INT 0
57070: PPUSH
57071: PPUSH
57072: PPUSH
// if not buildings then
57073: LD_VAR 0 1
57077: NOT
57078: IFFALSE 57082
// exit ;
57080: GO 57197
// tmp := [ ] ;
57082: LD_ADDR_VAR 0 5
57086: PUSH
57087: EMPTY
57088: ST_TO_ADDR
// for b in buildings do
57089: LD_ADDR_VAR 0 4
57093: PUSH
57094: LD_VAR 0 1
57098: PUSH
57099: FOR_IN
57100: IFFALSE 57138
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57102: LD_ADDR_VAR 0 5
57106: PUSH
57107: LD_VAR 0 5
57111: PPUSH
57112: LD_VAR 0 5
57116: PUSH
57117: LD_INT 1
57119: PLUS
57120: PPUSH
57121: LD_VAR 0 4
57125: PPUSH
57126: CALL_OW 266
57130: PPUSH
57131: CALL_OW 1
57135: ST_TO_ADDR
57136: GO 57099
57138: POP
57139: POP
// if not tmp then
57140: LD_VAR 0 5
57144: NOT
57145: IFFALSE 57149
// exit ;
57147: GO 57197
// if asc then
57149: LD_VAR 0 2
57153: IFFALSE 57177
// result := SortListByListAsc ( buildings , tmp ) else
57155: LD_ADDR_VAR 0 3
57159: PUSH
57160: LD_VAR 0 1
57164: PPUSH
57165: LD_VAR 0 5
57169: PPUSH
57170: CALL_OW 76
57174: ST_TO_ADDR
57175: GO 57197
// result := SortListByListDesc ( buildings , tmp ) ;
57177: LD_ADDR_VAR 0 3
57181: PUSH
57182: LD_VAR 0 1
57186: PPUSH
57187: LD_VAR 0 5
57191: PPUSH
57192: CALL_OW 77
57196: ST_TO_ADDR
// end ;
57197: LD_VAR 0 3
57201: RET
// export function SortByClass ( units , class ) ; var un ; begin
57202: LD_INT 0
57204: PPUSH
57205: PPUSH
// if not units or not class then
57206: LD_VAR 0 1
57210: NOT
57211: IFTRUE 57220
57213: PUSH
57214: LD_VAR 0 2
57218: NOT
57219: OR
57220: IFFALSE 57224
// exit ;
57222: GO 57319
// result := [ ] ;
57224: LD_ADDR_VAR 0 3
57228: PUSH
57229: EMPTY
57230: ST_TO_ADDR
// for un in units do
57231: LD_ADDR_VAR 0 4
57235: PUSH
57236: LD_VAR 0 1
57240: PUSH
57241: FOR_IN
57242: IFFALSE 57317
// if GetClass ( un ) = class then
57244: LD_VAR 0 4
57248: PPUSH
57249: CALL_OW 257
57253: PUSH
57254: LD_VAR 0 2
57258: EQUAL
57259: IFFALSE 57286
// result := Insert ( result , 1 , un ) else
57261: LD_ADDR_VAR 0 3
57265: PUSH
57266: LD_VAR 0 3
57270: PPUSH
57271: LD_INT 1
57273: PPUSH
57274: LD_VAR 0 4
57278: PPUSH
57279: CALL_OW 2
57283: ST_TO_ADDR
57284: GO 57315
// result := Replace ( result , result + 1 , un ) ;
57286: LD_ADDR_VAR 0 3
57290: PUSH
57291: LD_VAR 0 3
57295: PPUSH
57296: LD_VAR 0 3
57300: PUSH
57301: LD_INT 1
57303: PLUS
57304: PPUSH
57305: LD_VAR 0 4
57309: PPUSH
57310: CALL_OW 1
57314: ST_TO_ADDR
57315: GO 57241
57317: POP
57318: POP
// end ;
57319: LD_VAR 0 3
57323: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57324: LD_INT 0
57326: PPUSH
57327: PPUSH
57328: PPUSH
57329: PPUSH
57330: PPUSH
57331: PPUSH
57332: PPUSH
// result := [ ] ;
57333: LD_ADDR_VAR 0 4
57337: PUSH
57338: EMPTY
57339: ST_TO_ADDR
// if x - r < 0 then
57340: LD_VAR 0 1
57344: PUSH
57345: LD_VAR 0 3
57349: MINUS
57350: PUSH
57351: LD_INT 0
57353: LESS
57354: IFFALSE 57366
// min_x := 0 else
57356: LD_ADDR_VAR 0 8
57360: PUSH
57361: LD_INT 0
57363: ST_TO_ADDR
57364: GO 57382
// min_x := x - r ;
57366: LD_ADDR_VAR 0 8
57370: PUSH
57371: LD_VAR 0 1
57375: PUSH
57376: LD_VAR 0 3
57380: MINUS
57381: ST_TO_ADDR
// if y - r < 0 then
57382: LD_VAR 0 2
57386: PUSH
57387: LD_VAR 0 3
57391: MINUS
57392: PUSH
57393: LD_INT 0
57395: LESS
57396: IFFALSE 57408
// min_y := 0 else
57398: LD_ADDR_VAR 0 7
57402: PUSH
57403: LD_INT 0
57405: ST_TO_ADDR
57406: GO 57424
// min_y := y - r ;
57408: LD_ADDR_VAR 0 7
57412: PUSH
57413: LD_VAR 0 2
57417: PUSH
57418: LD_VAR 0 3
57422: MINUS
57423: ST_TO_ADDR
// max_x := x + r ;
57424: LD_ADDR_VAR 0 9
57428: PUSH
57429: LD_VAR 0 1
57433: PUSH
57434: LD_VAR 0 3
57438: PLUS
57439: ST_TO_ADDR
// max_y := y + r ;
57440: LD_ADDR_VAR 0 10
57444: PUSH
57445: LD_VAR 0 2
57449: PUSH
57450: LD_VAR 0 3
57454: PLUS
57455: ST_TO_ADDR
// for _x = min_x to max_x do
57456: LD_ADDR_VAR 0 5
57460: PUSH
57461: DOUBLE
57462: LD_VAR 0 8
57466: DEC
57467: ST_TO_ADDR
57468: LD_VAR 0 9
57472: PUSH
57473: FOR_TO
57474: IFFALSE 57575
// for _y = min_y to max_y do
57476: LD_ADDR_VAR 0 6
57480: PUSH
57481: DOUBLE
57482: LD_VAR 0 7
57486: DEC
57487: ST_TO_ADDR
57488: LD_VAR 0 10
57492: PUSH
57493: FOR_TO
57494: IFFALSE 57571
// begin if not ValidHex ( _x , _y ) then
57496: LD_VAR 0 5
57500: PPUSH
57501: LD_VAR 0 6
57505: PPUSH
57506: CALL_OW 488
57510: NOT
57511: IFFALSE 57515
// continue ;
57513: GO 57493
// if GetResourceTypeXY ( _x , _y ) then
57515: LD_VAR 0 5
57519: PPUSH
57520: LD_VAR 0 6
57524: PPUSH
57525: CALL_OW 283
57529: IFFALSE 57569
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57531: LD_ADDR_VAR 0 4
57535: PUSH
57536: LD_VAR 0 4
57540: PPUSH
57541: LD_VAR 0 4
57545: PUSH
57546: LD_INT 1
57548: PLUS
57549: PPUSH
57550: LD_VAR 0 5
57554: PUSH
57555: LD_VAR 0 6
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PPUSH
57564: CALL_OW 1
57568: ST_TO_ADDR
// end ;
57569: GO 57493
57571: POP
57572: POP
57573: GO 57473
57575: POP
57576: POP
// end ;
57577: LD_VAR 0 4
57581: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57582: LD_INT 0
57584: PPUSH
57585: PPUSH
57586: PPUSH
57587: PPUSH
57588: PPUSH
57589: PPUSH
57590: PPUSH
57591: PPUSH
// if not units then
57592: LD_VAR 0 1
57596: NOT
57597: IFFALSE 57601
// exit ;
57599: GO 58133
// result := UnitFilter ( units , [ f_ok ] ) ;
57601: LD_ADDR_VAR 0 3
57605: PUSH
57606: LD_VAR 0 1
57610: PPUSH
57611: LD_INT 50
57613: PUSH
57614: EMPTY
57615: LIST
57616: PPUSH
57617: CALL_OW 72
57621: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57622: LD_ADDR_VAR 0 8
57626: PUSH
57627: LD_VAR 0 1
57631: PUSH
57632: LD_INT 1
57634: ARRAY
57635: PPUSH
57636: CALL_OW 255
57640: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57641: LD_ADDR_VAR 0 10
57645: PUSH
57646: LD_INT 29
57648: PUSH
57649: LD_INT 91
57651: PUSH
57652: LD_INT 49
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: ST_TO_ADDR
// if not result then
57660: LD_VAR 0 3
57664: NOT
57665: IFFALSE 57669
// exit ;
57667: GO 58133
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57669: LD_ADDR_VAR 0 5
57673: PUSH
57674: LD_INT 81
57676: PUSH
57677: LD_VAR 0 8
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PPUSH
57686: CALL_OW 69
57690: ST_TO_ADDR
// for i in result do
57691: LD_ADDR_VAR 0 4
57695: PUSH
57696: LD_VAR 0 3
57700: PUSH
57701: FOR_IN
57702: IFFALSE 58131
// begin tag := GetTag ( i ) + 1 ;
57704: LD_ADDR_VAR 0 9
57708: PUSH
57709: LD_VAR 0 4
57713: PPUSH
57714: CALL_OW 110
57718: PUSH
57719: LD_INT 1
57721: PLUS
57722: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57723: LD_ADDR_VAR 0 7
57727: PUSH
57728: LD_VAR 0 4
57732: PPUSH
57733: CALL_OW 250
57737: PPUSH
57738: LD_VAR 0 4
57742: PPUSH
57743: CALL_OW 251
57747: PPUSH
57748: LD_INT 4
57750: PPUSH
57751: CALL 57324 0 3
57755: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57756: LD_VAR 0 4
57760: PPUSH
57761: CALL_OW 247
57765: PUSH
57766: LD_INT 2
57768: EQUAL
57769: IFFALSE 57781
57771: PUSH
57772: LD_VAR 0 7
57776: PUSH
57777: LD_INT 2
57779: GREATER
57780: AND
57781: IFFALSE 57801
57783: PUSH
57784: LD_VAR 0 4
57788: PPUSH
57789: CALL_OW 264
57793: PUSH
57794: LD_VAR 0 10
57798: IN
57799: NOT
57800: AND
57801: IFFALSE 57840
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57803: LD_VAR 0 4
57807: PPUSH
57808: LD_VAR 0 7
57812: PUSH
57813: LD_INT 1
57815: ARRAY
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PPUSH
57821: LD_VAR 0 7
57825: PUSH
57826: LD_INT 1
57828: ARRAY
57829: PUSH
57830: LD_INT 2
57832: ARRAY
57833: PPUSH
57834: CALL_OW 116
57838: GO 58129
// if path > tag then
57840: LD_VAR 0 2
57844: PUSH
57845: LD_VAR 0 9
57849: GREATER
57850: IFFALSE 58058
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57852: LD_ADDR_VAR 0 6
57856: PUSH
57857: LD_VAR 0 5
57861: PPUSH
57862: LD_INT 91
57864: PUSH
57865: LD_VAR 0 4
57869: PUSH
57870: LD_INT 8
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: PPUSH
57878: CALL_OW 72
57882: ST_TO_ADDR
// if nearEnemy then
57883: LD_VAR 0 6
57887: IFFALSE 57956
// begin if GetWeapon ( i ) = ru_time_lapser then
57889: LD_VAR 0 4
57893: PPUSH
57894: CALL_OW 264
57898: PUSH
57899: LD_INT 49
57901: EQUAL
57902: IFFALSE 57930
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57904: LD_VAR 0 4
57908: PPUSH
57909: LD_VAR 0 6
57913: PPUSH
57914: LD_VAR 0 4
57918: PPUSH
57919: CALL_OW 74
57923: PPUSH
57924: CALL_OW 112
57928: GO 57954
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57930: LD_VAR 0 4
57934: PPUSH
57935: LD_VAR 0 6
57939: PPUSH
57940: LD_VAR 0 4
57944: PPUSH
57945: CALL_OW 74
57949: PPUSH
57950: CALL 59214 0 2
// end else
57954: GO 58056
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57956: LD_VAR 0 4
57960: PPUSH
57961: LD_VAR 0 2
57965: PUSH
57966: LD_VAR 0 9
57970: ARRAY
57971: PUSH
57972: LD_INT 1
57974: ARRAY
57975: PPUSH
57976: LD_VAR 0 2
57980: PUSH
57981: LD_VAR 0 9
57985: ARRAY
57986: PUSH
57987: LD_INT 2
57989: ARRAY
57990: PPUSH
57991: CALL_OW 297
57995: PUSH
57996: LD_INT 6
57998: GREATER
57999: IFFALSE 58042
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58001: LD_VAR 0 4
58005: PPUSH
58006: LD_VAR 0 2
58010: PUSH
58011: LD_VAR 0 9
58015: ARRAY
58016: PUSH
58017: LD_INT 1
58019: ARRAY
58020: PPUSH
58021: LD_VAR 0 2
58025: PUSH
58026: LD_VAR 0 9
58030: ARRAY
58031: PUSH
58032: LD_INT 2
58034: ARRAY
58035: PPUSH
58036: CALL_OW 114
58040: GO 58056
// SetTag ( i , tag ) ;
58042: LD_VAR 0 4
58046: PPUSH
58047: LD_VAR 0 9
58051: PPUSH
58052: CALL_OW 109
// end else
58056: GO 58129
// if enemy then
58058: LD_VAR 0 5
58062: IFFALSE 58129
// begin if GetWeapon ( i ) = ru_time_lapser then
58064: LD_VAR 0 4
58068: PPUSH
58069: CALL_OW 264
58073: PUSH
58074: LD_INT 49
58076: EQUAL
58077: IFFALSE 58105
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58079: LD_VAR 0 4
58083: PPUSH
58084: LD_VAR 0 5
58088: PPUSH
58089: LD_VAR 0 4
58093: PPUSH
58094: CALL_OW 74
58098: PPUSH
58099: CALL_OW 112
58103: GO 58129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58105: LD_VAR 0 4
58109: PPUSH
58110: LD_VAR 0 5
58114: PPUSH
58115: LD_VAR 0 4
58119: PPUSH
58120: CALL_OW 74
58124: PPUSH
58125: CALL 59214 0 2
// end ; end ;
58129: GO 57701
58131: POP
58132: POP
// end ;
58133: LD_VAR 0 3
58137: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58138: LD_INT 0
58140: PPUSH
58141: PPUSH
58142: PPUSH
// if not unit or IsInUnit ( unit ) then
58143: LD_VAR 0 1
58147: NOT
58148: IFTRUE 58161
58150: PUSH
58151: LD_VAR 0 1
58155: PPUSH
58156: CALL_OW 310
58160: OR
58161: IFFALSE 58165
// exit ;
58163: GO 58256
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58165: LD_ADDR_VAR 0 4
58169: PUSH
58170: LD_VAR 0 1
58174: PPUSH
58175: CALL_OW 250
58179: PPUSH
58180: LD_VAR 0 2
58184: PPUSH
58185: LD_INT 1
58187: PPUSH
58188: CALL_OW 272
58192: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58193: LD_ADDR_VAR 0 5
58197: PUSH
58198: LD_VAR 0 1
58202: PPUSH
58203: CALL_OW 251
58207: PPUSH
58208: LD_VAR 0 2
58212: PPUSH
58213: LD_INT 1
58215: PPUSH
58216: CALL_OW 273
58220: ST_TO_ADDR
// if ValidHex ( x , y ) then
58221: LD_VAR 0 4
58225: PPUSH
58226: LD_VAR 0 5
58230: PPUSH
58231: CALL_OW 488
58235: IFFALSE 58256
// ComTurnXY ( unit , x , y ) ;
58237: LD_VAR 0 1
58241: PPUSH
58242: LD_VAR 0 4
58246: PPUSH
58247: LD_VAR 0 5
58251: PPUSH
58252: CALL_OW 118
// end ;
58256: LD_VAR 0 3
58260: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58261: LD_INT 0
58263: PPUSH
58264: PPUSH
// result := false ;
58265: LD_ADDR_VAR 0 3
58269: PUSH
58270: LD_INT 0
58272: ST_TO_ADDR
// if not units then
58273: LD_VAR 0 2
58277: NOT
58278: IFFALSE 58282
// exit ;
58280: GO 58327
// for i in units do
58282: LD_ADDR_VAR 0 4
58286: PUSH
58287: LD_VAR 0 2
58291: PUSH
58292: FOR_IN
58293: IFFALSE 58325
// if See ( side , i ) then
58295: LD_VAR 0 1
58299: PPUSH
58300: LD_VAR 0 4
58304: PPUSH
58305: CALL_OW 292
58309: IFFALSE 58323
// begin result := true ;
58311: LD_ADDR_VAR 0 3
58315: PUSH
58316: LD_INT 1
58318: ST_TO_ADDR
// exit ;
58319: POP
58320: POP
58321: GO 58327
// end ;
58323: GO 58292
58325: POP
58326: POP
// end ;
58327: LD_VAR 0 3
58331: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58332: LD_INT 0
58334: PPUSH
58335: PPUSH
58336: PPUSH
58337: PPUSH
// if not unit or not points then
58338: LD_VAR 0 1
58342: NOT
58343: IFTRUE 58352
58345: PUSH
58346: LD_VAR 0 2
58350: NOT
58351: OR
58352: IFFALSE 58356
// exit ;
58354: GO 58446
// dist := 99999 ;
58356: LD_ADDR_VAR 0 5
58360: PUSH
58361: LD_INT 99999
58363: ST_TO_ADDR
// for i in points do
58364: LD_ADDR_VAR 0 4
58368: PUSH
58369: LD_VAR 0 2
58373: PUSH
58374: FOR_IN
58375: IFFALSE 58444
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58377: LD_ADDR_VAR 0 6
58381: PUSH
58382: LD_VAR 0 1
58386: PPUSH
58387: LD_VAR 0 4
58391: PUSH
58392: LD_INT 1
58394: ARRAY
58395: PPUSH
58396: LD_VAR 0 4
58400: PUSH
58401: LD_INT 2
58403: ARRAY
58404: PPUSH
58405: CALL_OW 297
58409: ST_TO_ADDR
// if tmpDist < dist then
58410: LD_VAR 0 6
58414: PUSH
58415: LD_VAR 0 5
58419: LESS
58420: IFFALSE 58442
// begin result := i ;
58422: LD_ADDR_VAR 0 3
58426: PUSH
58427: LD_VAR 0 4
58431: ST_TO_ADDR
// dist := tmpDist ;
58432: LD_ADDR_VAR 0 5
58436: PUSH
58437: LD_VAR 0 6
58441: ST_TO_ADDR
// end ; end ;
58442: GO 58374
58444: POP
58445: POP
// end ;
58446: LD_VAR 0 3
58450: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58451: LD_INT 0
58453: PPUSH
// uc_side := side ;
58454: LD_ADDR_OWVAR 20
58458: PUSH
58459: LD_VAR 0 1
58463: ST_TO_ADDR
// uc_nation := 3 ;
58464: LD_ADDR_OWVAR 21
58468: PUSH
58469: LD_INT 3
58471: ST_TO_ADDR
// vc_chassis := 25 ;
58472: LD_ADDR_OWVAR 37
58476: PUSH
58477: LD_INT 25
58479: ST_TO_ADDR
// vc_engine := engine_siberite ;
58480: LD_ADDR_OWVAR 39
58484: PUSH
58485: LD_INT 3
58487: ST_TO_ADDR
// vc_control := control_computer ;
58488: LD_ADDR_OWVAR 38
58492: PUSH
58493: LD_INT 3
58495: ST_TO_ADDR
// vc_weapon := 59 ;
58496: LD_ADDR_OWVAR 40
58500: PUSH
58501: LD_INT 59
58503: ST_TO_ADDR
// result := CreateVehicle ;
58504: LD_ADDR_VAR 0 5
58508: PUSH
58509: CALL_OW 45
58513: ST_TO_ADDR
// SetDir ( result , d ) ;
58514: LD_VAR 0 5
58518: PPUSH
58519: LD_VAR 0 4
58523: PPUSH
58524: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58528: LD_VAR 0 5
58532: PPUSH
58533: LD_VAR 0 2
58537: PPUSH
58538: LD_VAR 0 3
58542: PPUSH
58543: LD_INT 0
58545: PPUSH
58546: CALL_OW 48
// end ;
58550: LD_VAR 0 5
58554: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58555: LD_INT 0
58557: PPUSH
58558: PPUSH
58559: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58560: LD_ADDR_VAR 0 2
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58583: LD_VAR 0 1
58587: NOT
58588: IFTRUE 58621
58590: PUSH
58591: LD_VAR 0 1
58595: PPUSH
58596: CALL_OW 264
58600: PUSH
58601: LD_INT 12
58603: PUSH
58604: LD_INT 51
58606: PUSH
58607: LD_INT 32
58609: PUSH
58610: LD_INT 89
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: IN
58619: NOT
58620: OR
58621: IFFALSE 58625
// exit ;
58623: GO 58723
// for i := 1 to 3 do
58625: LD_ADDR_VAR 0 3
58629: PUSH
58630: DOUBLE
58631: LD_INT 1
58633: DEC
58634: ST_TO_ADDR
58635: LD_INT 3
58637: PUSH
58638: FOR_TO
58639: IFFALSE 58721
// begin tmp := GetCargo ( cargo , i ) ;
58641: LD_ADDR_VAR 0 4
58645: PUSH
58646: LD_VAR 0 1
58650: PPUSH
58651: LD_VAR 0 3
58655: PPUSH
58656: CALL_OW 289
58660: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58661: LD_ADDR_VAR 0 2
58665: PUSH
58666: LD_VAR 0 2
58670: PPUSH
58671: LD_VAR 0 3
58675: PPUSH
58676: LD_VAR 0 4
58680: PPUSH
58681: CALL_OW 1
58685: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58686: LD_ADDR_VAR 0 2
58690: PUSH
58691: LD_VAR 0 2
58695: PPUSH
58696: LD_INT 4
58698: PPUSH
58699: LD_VAR 0 2
58703: PUSH
58704: LD_INT 4
58706: ARRAY
58707: PUSH
58708: LD_VAR 0 4
58712: PLUS
58713: PPUSH
58714: CALL_OW 1
58718: ST_TO_ADDR
// end ;
58719: GO 58638
58721: POP
58722: POP
// end ;
58723: LD_VAR 0 2
58727: RET
// export function Length ( array ) ; begin
58728: LD_INT 0
58730: PPUSH
// result := array + 0 ;
58731: LD_ADDR_VAR 0 2
58735: PUSH
58736: LD_VAR 0 1
58740: PUSH
58741: LD_INT 0
58743: PLUS
58744: ST_TO_ADDR
// end ;
58745: LD_VAR 0 2
58749: RET
// export function PrepareArray ( array ) ; begin
58750: LD_INT 0
58752: PPUSH
// result := array diff 0 ;
58753: LD_ADDR_VAR 0 2
58757: PUSH
58758: LD_VAR 0 1
58762: PUSH
58763: LD_INT 0
58765: DIFF
58766: ST_TO_ADDR
// if not result [ 1 ] then
58767: LD_VAR 0 2
58771: PUSH
58772: LD_INT 1
58774: ARRAY
58775: NOT
58776: IFFALSE 58796
// result := Delete ( result , 1 ) ;
58778: LD_ADDR_VAR 0 2
58782: PUSH
58783: LD_VAR 0 2
58787: PPUSH
58788: LD_INT 1
58790: PPUSH
58791: CALL_OW 3
58795: ST_TO_ADDR
// end ;
58796: LD_VAR 0 2
58800: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58801: LD_INT 0
58803: PPUSH
58804: PPUSH
58805: PPUSH
58806: PPUSH
// sibRocketRange := 25 ;
58807: LD_ADDR_VAR 0 6
58811: PUSH
58812: LD_INT 25
58814: ST_TO_ADDR
// result := false ;
58815: LD_ADDR_VAR 0 4
58819: PUSH
58820: LD_INT 0
58822: ST_TO_ADDR
// for i := 0 to 5 do
58823: LD_ADDR_VAR 0 5
58827: PUSH
58828: DOUBLE
58829: LD_INT 0
58831: DEC
58832: ST_TO_ADDR
58833: LD_INT 5
58835: PUSH
58836: FOR_TO
58837: IFFALSE 58904
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58839: LD_VAR 0 1
58843: PPUSH
58844: LD_VAR 0 5
58848: PPUSH
58849: LD_VAR 0 6
58853: PPUSH
58854: CALL_OW 272
58858: PPUSH
58859: LD_VAR 0 2
58863: PPUSH
58864: LD_VAR 0 5
58868: PPUSH
58869: LD_VAR 0 6
58873: PPUSH
58874: CALL_OW 273
58878: PPUSH
58879: LD_VAR 0 3
58883: PPUSH
58884: CALL_OW 309
58888: IFFALSE 58902
// begin result := true ;
58890: LD_ADDR_VAR 0 4
58894: PUSH
58895: LD_INT 1
58897: ST_TO_ADDR
// exit ;
58898: POP
58899: POP
58900: GO 58906
// end ;
58902: GO 58836
58904: POP
58905: POP
// end ;
58906: LD_VAR 0 4
58910: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58911: LD_INT 0
58913: PPUSH
58914: PPUSH
58915: PPUSH
// if btype = b_depot then
58916: LD_VAR 0 2
58920: PUSH
58921: LD_INT 0
58923: EQUAL
58924: IFFALSE 58936
// begin result := true ;
58926: LD_ADDR_VAR 0 3
58930: PUSH
58931: LD_INT 1
58933: ST_TO_ADDR
// exit ;
58934: GO 59056
// end ; pom := GetBase ( depot ) ;
58936: LD_ADDR_VAR 0 4
58940: PUSH
58941: LD_VAR 0 1
58945: PPUSH
58946: CALL_OW 274
58950: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58951: LD_ADDR_VAR 0 5
58955: PUSH
58956: LD_VAR 0 2
58960: PPUSH
58961: LD_VAR 0 1
58965: PPUSH
58966: CALL_OW 248
58970: PPUSH
58971: CALL_OW 450
58975: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58976: LD_ADDR_VAR 0 3
58980: PUSH
58981: LD_VAR 0 4
58985: PPUSH
58986: LD_INT 1
58988: PPUSH
58989: CALL_OW 275
58993: PUSH
58994: LD_VAR 0 5
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: GREATEREQUAL
59003: IFFALSE 59029
59005: PUSH
59006: LD_VAR 0 4
59010: PPUSH
59011: LD_INT 2
59013: PPUSH
59014: CALL_OW 275
59018: PUSH
59019: LD_VAR 0 5
59023: PUSH
59024: LD_INT 2
59026: ARRAY
59027: GREATEREQUAL
59028: AND
59029: IFFALSE 59055
59031: PUSH
59032: LD_VAR 0 4
59036: PPUSH
59037: LD_INT 3
59039: PPUSH
59040: CALL_OW 275
59044: PUSH
59045: LD_VAR 0 5
59049: PUSH
59050: LD_INT 3
59052: ARRAY
59053: GREATEREQUAL
59054: AND
59055: ST_TO_ADDR
// end ;
59056: LD_VAR 0 3
59060: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59061: LD_INT 0
59063: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59064: LD_VAR 0 1
59068: PPUSH
59069: LD_VAR 0 2
59073: PPUSH
59074: LD_INT 0
59076: PPUSH
59077: LD_INT 0
59079: PPUSH
59080: LD_INT 1
59082: PPUSH
59083: LD_INT 0
59085: PPUSH
59086: CALL_OW 587
// end ;
59090: LD_VAR 0 3
59094: RET
// export function CenterOnNow ( unit ) ; begin
59095: LD_INT 0
59097: PPUSH
// result := IsInUnit ( unit ) ;
59098: LD_ADDR_VAR 0 2
59102: PUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL_OW 310
59112: ST_TO_ADDR
// if not result then
59113: LD_VAR 0 2
59117: NOT
59118: IFFALSE 59130
// result := unit ;
59120: LD_ADDR_VAR 0 2
59124: PUSH
59125: LD_VAR 0 1
59129: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59130: LD_VAR 0 1
59134: PPUSH
59135: CALL_OW 87
// end ;
59139: LD_VAR 0 2
59143: RET
// export function ComMoveHex ( unit , hex ) ; begin
59144: LD_INT 0
59146: PPUSH
// if not hex then
59147: LD_VAR 0 2
59151: NOT
59152: IFFALSE 59156
// exit ;
59154: GO 59209
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59156: LD_VAR 0 2
59160: PUSH
59161: LD_INT 1
59163: ARRAY
59164: PPUSH
59165: LD_VAR 0 2
59169: PUSH
59170: LD_INT 2
59172: ARRAY
59173: PPUSH
59174: CALL_OW 428
59178: IFFALSE 59182
// exit ;
59180: GO 59209
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59182: LD_VAR 0 1
59186: PPUSH
59187: LD_VAR 0 2
59191: PUSH
59192: LD_INT 1
59194: ARRAY
59195: PPUSH
59196: LD_VAR 0 2
59200: PUSH
59201: LD_INT 2
59203: ARRAY
59204: PPUSH
59205: CALL_OW 111
// end ;
59209: LD_VAR 0 3
59213: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59214: LD_INT 0
59216: PPUSH
59217: PPUSH
59218: PPUSH
// if not unit or not enemy then
59219: LD_VAR 0 1
59223: NOT
59224: IFTRUE 59233
59226: PUSH
59227: LD_VAR 0 2
59231: NOT
59232: OR
59233: IFFALSE 59237
// exit ;
59235: GO 59363
// x := GetX ( enemy ) ;
59237: LD_ADDR_VAR 0 4
59241: PUSH
59242: LD_VAR 0 2
59246: PPUSH
59247: CALL_OW 250
59251: ST_TO_ADDR
// y := GetY ( enemy ) ;
59252: LD_ADDR_VAR 0 5
59256: PUSH
59257: LD_VAR 0 2
59261: PPUSH
59262: CALL_OW 251
59266: ST_TO_ADDR
// if ValidHex ( x , y ) then
59267: LD_VAR 0 4
59271: PPUSH
59272: LD_VAR 0 5
59276: PPUSH
59277: CALL_OW 488
59281: IFFALSE 59363
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59283: LD_VAR 0 2
59287: PPUSH
59288: CALL_OW 247
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: IN
59303: IFTRUE 59326
59305: PUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 255
59315: PPUSH
59316: LD_VAR 0 2
59320: PPUSH
59321: CALL_OW 292
59325: OR
59326: IFFALSE 59344
// ComAttackUnit ( unit , enemy ) else
59328: LD_VAR 0 1
59332: PPUSH
59333: LD_VAR 0 2
59337: PPUSH
59338: CALL_OW 115
59342: GO 59363
// ComAgressiveMove ( unit , x , y ) ;
59344: LD_VAR 0 1
59348: PPUSH
59349: LD_VAR 0 4
59353: PPUSH
59354: LD_VAR 0 5
59358: PPUSH
59359: CALL_OW 114
// end ;
59363: LD_VAR 0 3
59367: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59368: LD_INT 0
59370: PPUSH
59371: PPUSH
59372: PPUSH
// list := AreaToList ( area , 0 ) ;
59373: LD_ADDR_VAR 0 5
59377: PUSH
59378: LD_VAR 0 1
59382: PPUSH
59383: LD_INT 0
59385: PPUSH
59386: CALL_OW 517
59390: ST_TO_ADDR
// if not list then
59391: LD_VAR 0 5
59395: NOT
59396: IFFALSE 59400
// exit ;
59398: GO 59530
// if all then
59400: LD_VAR 0 2
59404: IFFALSE 59492
// begin for i := 1 to list [ 1 ] do
59406: LD_ADDR_VAR 0 4
59410: PUSH
59411: DOUBLE
59412: LD_INT 1
59414: DEC
59415: ST_TO_ADDR
59416: LD_VAR 0 5
59420: PUSH
59421: LD_INT 1
59423: ARRAY
59424: PUSH
59425: FOR_TO
59426: IFFALSE 59488
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59428: LD_ADDR_VAR 0 3
59432: PUSH
59433: LD_VAR 0 3
59437: PPUSH
59438: LD_VAR 0 3
59442: PUSH
59443: LD_INT 1
59445: PLUS
59446: PPUSH
59447: LD_VAR 0 5
59451: PUSH
59452: LD_INT 1
59454: ARRAY
59455: PUSH
59456: LD_VAR 0 4
59460: ARRAY
59461: PUSH
59462: LD_VAR 0 5
59466: PUSH
59467: LD_INT 2
59469: ARRAY
59470: PUSH
59471: LD_VAR 0 4
59475: ARRAY
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PPUSH
59481: CALL_OW 1
59485: ST_TO_ADDR
59486: GO 59425
59488: POP
59489: POP
// exit ;
59490: GO 59530
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59492: LD_ADDR_VAR 0 3
59496: PUSH
59497: LD_VAR 0 5
59501: PUSH
59502: LD_INT 1
59504: ARRAY
59505: PUSH
59506: LD_INT 1
59508: ARRAY
59509: PUSH
59510: LD_VAR 0 5
59514: PUSH
59515: LD_INT 2
59517: ARRAY
59518: PUSH
59519: LD_INT 1
59521: ARRAY
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: ST_TO_ADDR
// end ;
59530: LD_VAR 0 3
59534: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59535: LD_INT 0
59537: PPUSH
59538: PPUSH
// list := AreaToList ( area , 0 ) ;
59539: LD_ADDR_VAR 0 4
59543: PUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: LD_INT 0
59551: PPUSH
59552: CALL_OW 517
59556: ST_TO_ADDR
// if not list then
59557: LD_VAR 0 4
59561: NOT
59562: IFFALSE 59566
// exit ;
59564: GO 59607
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59566: LD_ADDR_VAR 0 3
59570: PUSH
59571: LD_VAR 0 4
59575: PUSH
59576: LD_INT 1
59578: ARRAY
59579: PUSH
59580: LD_INT 1
59582: ARRAY
59583: PUSH
59584: LD_VAR 0 4
59588: PUSH
59589: LD_INT 2
59591: ARRAY
59592: PUSH
59593: LD_INT 1
59595: ARRAY
59596: PUSH
59597: LD_VAR 0 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: ST_TO_ADDR
// end ;
59607: LD_VAR 0 3
59611: RET
// export function First ( array ) ; begin
59612: LD_INT 0
59614: PPUSH
// if not array then
59615: LD_VAR 0 1
59619: NOT
59620: IFFALSE 59624
// exit ;
59622: GO 59638
// result := array [ 1 ] ;
59624: LD_ADDR_VAR 0 2
59628: PUSH
59629: LD_VAR 0 1
59633: PUSH
59634: LD_INT 1
59636: ARRAY
59637: ST_TO_ADDR
// end ;
59638: LD_VAR 0 2
59642: RET
// export function Last ( array ) ; begin
59643: LD_INT 0
59645: PPUSH
// if not array then
59646: LD_VAR 0 1
59650: NOT
59651: IFFALSE 59655
// exit ;
59653: GO 59671
// result := array [ array ] ;
59655: LD_ADDR_VAR 0 2
59659: PUSH
59660: LD_VAR 0 1
59664: PUSH
59665: LD_VAR 0 1
59669: ARRAY
59670: ST_TO_ADDR
// end ;
59671: LD_VAR 0 2
59675: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59676: LD_INT 0
59678: PPUSH
59679: PPUSH
// result := [ ] ;
59680: LD_ADDR_VAR 0 5
59684: PUSH
59685: EMPTY
59686: ST_TO_ADDR
// if not array then
59687: LD_VAR 0 1
59691: NOT
59692: IFFALSE 59696
// exit ;
59694: GO 59808
// for i := 1 to array do
59696: LD_ADDR_VAR 0 6
59700: PUSH
59701: DOUBLE
59702: LD_INT 1
59704: DEC
59705: ST_TO_ADDR
59706: LD_VAR 0 1
59710: PUSH
59711: FOR_TO
59712: IFFALSE 59806
// if array [ i ] [ index ] = value then
59714: LD_VAR 0 1
59718: PUSH
59719: LD_VAR 0 6
59723: ARRAY
59724: PUSH
59725: LD_VAR 0 2
59729: ARRAY
59730: PUSH
59731: LD_VAR 0 3
59735: EQUAL
59736: IFFALSE 59804
// begin if indexColumn then
59738: LD_VAR 0 4
59742: IFFALSE 59778
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59744: LD_ADDR_VAR 0 5
59748: PUSH
59749: LD_VAR 0 5
59753: PPUSH
59754: LD_VAR 0 1
59758: PUSH
59759: LD_VAR 0 6
59763: ARRAY
59764: PUSH
59765: LD_VAR 0 4
59769: ARRAY
59770: PPUSH
59771: CALL 54816 0 2
59775: ST_TO_ADDR
59776: GO 59804
// result := Join ( result , array [ i ] ) ;
59778: LD_ADDR_VAR 0 5
59782: PUSH
59783: LD_VAR 0 5
59787: PPUSH
59788: LD_VAR 0 1
59792: PUSH
59793: LD_VAR 0 6
59797: ARRAY
59798: PPUSH
59799: CALL 54816 0 2
59803: ST_TO_ADDR
// end ;
59804: GO 59711
59806: POP
59807: POP
// end ;
59808: LD_VAR 0 5
59812: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59813: LD_INT 0
59815: PPUSH
// if not vehicles or not parkingPoint then
59816: LD_VAR 0 1
59820: NOT
59821: IFTRUE 59830
59823: PUSH
59824: LD_VAR 0 2
59828: NOT
59829: OR
59830: IFFALSE 59834
// exit ;
59832: GO 59932
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59834: LD_ADDR_VAR 0 1
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: LD_INT 50
59846: PUSH
59847: EMPTY
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 92
59855: PUSH
59856: LD_VAR 0 2
59860: PUSH
59861: LD_INT 1
59863: ARRAY
59864: PUSH
59865: LD_VAR 0 2
59869: PUSH
59870: LD_INT 2
59872: ARRAY
59873: PUSH
59874: LD_INT 8
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PPUSH
59891: CALL_OW 72
59895: ST_TO_ADDR
// if not vehicles then
59896: LD_VAR 0 1
59900: NOT
59901: IFFALSE 59905
// exit ;
59903: GO 59932
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_VAR 0 2
59914: PUSH
59915: LD_INT 1
59917: ARRAY
59918: PPUSH
59919: LD_VAR 0 2
59923: PUSH
59924: LD_INT 2
59926: ARRAY
59927: PPUSH
59928: CALL_OW 111
// end ;
59932: LD_VAR 0 3
59936: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59937: LD_INT 0
59939: PPUSH
59940: PPUSH
59941: PPUSH
// if not side or not area then
59942: LD_VAR 0 1
59946: NOT
59947: IFTRUE 59956
59949: PUSH
59950: LD_VAR 0 2
59954: NOT
59955: OR
59956: IFFALSE 59960
// exit ;
59958: GO 60079
// tmp := AreaToList ( area , 0 ) ;
59960: LD_ADDR_VAR 0 5
59964: PUSH
59965: LD_VAR 0 2
59969: PPUSH
59970: LD_INT 0
59972: PPUSH
59973: CALL_OW 517
59977: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: DOUBLE
59984: LD_INT 1
59986: DEC
59987: ST_TO_ADDR
59988: LD_VAR 0 5
59992: PUSH
59993: LD_INT 1
59995: ARRAY
59996: PUSH
59997: FOR_TO
59998: IFFALSE 60077
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60000: LD_VAR 0 5
60004: PUSH
60005: LD_INT 1
60007: ARRAY
60008: PUSH
60009: LD_VAR 0 4
60013: ARRAY
60014: PPUSH
60015: LD_VAR 0 5
60019: PUSH
60020: LD_INT 2
60022: ARRAY
60023: PUSH
60024: LD_VAR 0 4
60028: ARRAY
60029: PPUSH
60030: CALL_OW 351
60034: IFFALSE 60075
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60036: LD_VAR 0 5
60040: PUSH
60041: LD_INT 1
60043: ARRAY
60044: PUSH
60045: LD_VAR 0 4
60049: ARRAY
60050: PPUSH
60051: LD_VAR 0 5
60055: PUSH
60056: LD_INT 2
60058: ARRAY
60059: PUSH
60060: LD_VAR 0 4
60064: ARRAY
60065: PPUSH
60066: LD_VAR 0 1
60070: PPUSH
60071: CALL_OW 244
// end ;
60075: GO 59997
60077: POP
60078: POP
// end ; end_of_file
60079: LD_VAR 0 3
60083: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60084: LD_VAR 0 1
60088: PUSH
60089: LD_INT 200
60091: DOUBLE
60092: GREATEREQUAL
60093: IFFALSE 60101
60095: LD_INT 299
60097: DOUBLE
60098: LESSEQUAL
60099: IFTRUE 60103
60101: GO 60135
60103: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60104: LD_VAR 0 1
60108: PPUSH
60109: LD_VAR 0 2
60113: PPUSH
60114: LD_VAR 0 3
60118: PPUSH
60119: LD_VAR 0 4
60123: PPUSH
60124: LD_VAR 0 5
60128: PPUSH
60129: CALL 60916 0 5
60133: GO 60212
60135: LD_INT 300
60137: DOUBLE
60138: GREATEREQUAL
60139: IFFALSE 60147
60141: LD_INT 399
60143: DOUBLE
60144: LESSEQUAL
60145: IFTRUE 60149
60147: GO 60211
60149: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60150: LD_VAR 0 1
60154: PPUSH
60155: LD_VAR 0 2
60159: PPUSH
60160: LD_VAR 0 3
60164: PPUSH
60165: LD_VAR 0 4
60169: PPUSH
60170: LD_VAR 0 5
60174: PPUSH
60175: LD_VAR 0 6
60179: PPUSH
60180: LD_VAR 0 7
60184: PPUSH
60185: LD_VAR 0 8
60189: PPUSH
60190: LD_VAR 0 9
60194: PPUSH
60195: LD_VAR 0 10
60199: PPUSH
60200: LD_VAR 0 11
60204: PPUSH
60205: CALL 78305 0 11
60209: GO 60212
60211: POP
// end ;
60212: PPOPN 11
60214: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60215: LD_VAR 0 1
60219: PPUSH
60220: LD_VAR 0 2
60224: PPUSH
60225: LD_VAR 0 3
60229: PPUSH
60230: LD_VAR 0 4
60234: PPUSH
60235: LD_VAR 0 5
60239: PPUSH
60240: CALL 60297 0 5
// end ; end_of_file
60244: PPOPN 5
60246: END
// export function SOS_UnitDestroyed ( un ) ; begin
60247: LD_INT 0
60249: PPUSH
// ComRadiation ( un ) ;
60250: LD_VAR 0 1
60254: PPUSH
60255: CALL 61336 0 1
// end ;
60259: LD_VAR 0 2
60263: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60264: LD_INT 0
60266: PPUSH
// ComRadiation ( un ) ;
60267: LD_VAR 0 1
60271: PPUSH
60272: CALL 61336 0 1
// end ;
60276: LD_VAR 0 2
60280: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60281: LD_INT 0
60283: PPUSH
// end ;
60284: LD_VAR 0 4
60288: RET
// export function SOS_Command ( cmd ) ; begin
60289: LD_INT 0
60291: PPUSH
// end ;
60292: LD_VAR 0 2
60296: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60297: LD_INT 0
60299: PPUSH
// end ;
60300: LD_VAR 0 6
60304: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
60305: LD_INT 0
60307: PPUSH
60308: PPUSH
60309: PPUSH
60310: PPUSH
// if not vehicle or not factory then
60311: LD_VAR 0 1
60315: NOT
60316: IFTRUE 60325
60318: PUSH
60319: LD_VAR 0 2
60323: NOT
60324: OR
60325: IFFALSE 60329
// exit ;
60327: GO 60911
// if not factoryWaypoints then
60329: LD_EXP 105
60333: NOT
60334: IFFALSE 60338
// exit ;
60336: GO 60911
// for i := 1 to Count ( factoryWaypoints ) do
60338: LD_ADDR_VAR 0 4
60342: PUSH
60343: DOUBLE
60344: LD_INT 1
60346: DEC
60347: ST_TO_ADDR
60348: LD_EXP 105
60352: PPUSH
60353: CALL 18884 0 1
60357: PUSH
60358: FOR_TO
60359: IFFALSE 60909
// if factoryWaypoints [ i ] [ 2 ] = factory then
60361: LD_EXP 105
60365: PUSH
60366: LD_VAR 0 4
60370: ARRAY
60371: PUSH
60372: LD_INT 2
60374: ARRAY
60375: PUSH
60376: LD_VAR 0 2
60380: EQUAL
60381: IFFALSE 60907
// begin if GetControl ( vehicle ) = control_manual then
60383: LD_VAR 0 1
60387: PPUSH
60388: CALL_OW 263
60392: PUSH
60393: LD_INT 1
60395: EQUAL
60396: IFFALSE 60760
// begin driver := IsDrivenBy ( vehicle ) ;
60398: LD_ADDR_VAR 0 5
60402: PUSH
60403: LD_VAR 0 1
60407: PPUSH
60408: CALL_OW 311
60412: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60413: LD_VAR 0 5
60417: PUSH
60418: LD_EXP 106
60422: IN
60423: IFTRUE 60437
60425: PUSH
60426: LD_VAR 0 1
60430: PUSH
60431: LD_EXP 106
60435: IN
60436: OR
60437: IFFALSE 60443
// exit ;
60439: POP
60440: POP
60441: GO 60911
// if not HasTask ( driver ) then
60443: LD_VAR 0 5
60447: PPUSH
60448: CALL_OW 314
60452: NOT
60453: IFFALSE 60758
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60455: LD_ADDR_EXP 106
60459: PUSH
60460: LD_EXP 106
60464: PPUSH
60465: LD_VAR 0 5
60469: PPUSH
60470: CALL 54816 0 2
60474: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60475: LD_ADDR_EXP 106
60479: PUSH
60480: LD_EXP 106
60484: PPUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: CALL 54816 0 2
60494: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60495: LD_ADDR_VAR 0 6
60499: PUSH
60500: LD_EXP 105
60504: PUSH
60505: LD_VAR 0 4
60509: ARRAY
60510: PUSH
60511: LD_INT 3
60513: ARRAY
60514: PPUSH
60515: LD_EXP 105
60519: PUSH
60520: LD_VAR 0 4
60524: ARRAY
60525: PUSH
60526: LD_INT 4
60528: ARRAY
60529: PPUSH
60530: CALL_OW 428
60534: ST_TO_ADDR
// if hex then
60535: LD_VAR 0 6
60539: IFFALSE 60557
// ComMoveUnit ( driver , hex ) else
60541: LD_VAR 0 5
60545: PPUSH
60546: LD_VAR 0 6
60550: PPUSH
60551: CALL_OW 112
60555: GO 60641
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60557: LD_VAR 0 1
60561: PPUSH
60562: LD_EXP 105
60566: PUSH
60567: LD_VAR 0 4
60571: ARRAY
60572: PUSH
60573: LD_INT 3
60575: ARRAY
60576: PPUSH
60577: LD_EXP 105
60581: PUSH
60582: LD_VAR 0 4
60586: ARRAY
60587: PUSH
60588: LD_INT 4
60590: ARRAY
60591: PPUSH
60592: CALL_OW 297
60596: PUSH
60597: LD_INT 0
60599: GREATER
60600: IFFALSE 60641
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60602: LD_VAR 0 5
60606: PPUSH
60607: LD_EXP 105
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: PUSH
60618: LD_INT 3
60620: ARRAY
60621: PPUSH
60622: LD_EXP 105
60626: PUSH
60627: LD_VAR 0 4
60631: ARRAY
60632: PUSH
60633: LD_INT 4
60635: ARRAY
60636: PPUSH
60637: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60641: LD_VAR 0 5
60645: PPUSH
60646: CALL_OW 181
// if Multiplayer then
60650: LD_OWVAR 4
60654: IFFALSE 60703
// begin repeat wait ( 10 ) ;
60656: LD_INT 10
60658: PPUSH
60659: CALL_OW 67
// until not IsInUnit ( driver ) ;
60663: LD_VAR 0 5
60667: PPUSH
60668: CALL_OW 310
60672: NOT
60673: IFFALSE 60656
// if not HasTask ( driver ) then
60675: LD_VAR 0 5
60679: PPUSH
60680: CALL_OW 314
60684: NOT
60685: IFFALSE 60701
// ComEnterUnit ( driver , factory ) ;
60687: LD_VAR 0 5
60691: PPUSH
60692: LD_VAR 0 2
60696: PPUSH
60697: CALL_OW 120
// end else
60701: GO 60717
// AddComEnterUnit ( driver , factory ) ;
60703: LD_VAR 0 5
60707: PPUSH
60708: LD_VAR 0 2
60712: PPUSH
60713: CALL_OW 180
// wait ( 0 0$1 ) ;
60717: LD_INT 35
60719: PPUSH
60720: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60724: LD_ADDR_EXP 106
60728: PUSH
60729: LD_EXP 106
60733: PUSH
60734: LD_VAR 0 5
60738: DIFF
60739: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60740: LD_ADDR_EXP 106
60744: PUSH
60745: LD_EXP 106
60749: PUSH
60750: LD_VAR 0 1
60754: DIFF
60755: ST_TO_ADDR
// break ;
60756: GO 60909
// end ; end else
60758: GO 60907
// if GetControl ( vehicle ) = control_remote then
60760: LD_VAR 0 1
60764: PPUSH
60765: CALL_OW 263
60769: PUSH
60770: LD_INT 2
60772: EQUAL
60773: IFFALSE 60859
// begin wait ( 0 0$2 ) ;
60775: LD_INT 70
60777: PPUSH
60778: CALL_OW 67
// repeat wait ( 10 ) ;
60782: LD_INT 10
60784: PPUSH
60785: CALL_OW 67
// Connect ( vehicle ) ;
60789: LD_VAR 0 1
60793: PPUSH
60794: CALL 25128 0 1
// until IsControledBy ( vehicle ) ;
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 312
60807: IFFALSE 60782
// wait ( 10 ) ;
60809: LD_INT 10
60811: PPUSH
60812: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60816: LD_VAR 0 1
60820: PPUSH
60821: LD_EXP 105
60825: PUSH
60826: LD_VAR 0 4
60830: ARRAY
60831: PUSH
60832: LD_INT 3
60834: ARRAY
60835: PPUSH
60836: LD_EXP 105
60840: PUSH
60841: LD_VAR 0 4
60845: ARRAY
60846: PUSH
60847: LD_INT 4
60849: ARRAY
60850: PPUSH
60851: CALL_OW 111
// break ;
60855: GO 60909
// end else
60857: GO 60907
// begin wait ( 0 0$3 ) ;
60859: LD_INT 105
60861: PPUSH
60862: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60866: LD_VAR 0 1
60870: PPUSH
60871: LD_EXP 105
60875: PUSH
60876: LD_VAR 0 4
60880: ARRAY
60881: PUSH
60882: LD_INT 3
60884: ARRAY
60885: PPUSH
60886: LD_EXP 105
60890: PUSH
60891: LD_VAR 0 4
60895: ARRAY
60896: PUSH
60897: LD_INT 4
60899: ARRAY
60900: PPUSH
60901: CALL_OW 111
// break ;
60905: GO 60909
// end ; end ;
60907: GO 60358
60909: POP
60910: POP
// end ;
60911: LD_VAR 0 3
60915: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60916: LD_INT 0
60918: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60919: LD_VAR 0 1
60923: PUSH
60924: LD_INT 250
60926: EQUAL
60927: IFFALSE 60944
60929: PUSH
60930: LD_VAR 0 2
60934: PPUSH
60935: CALL_OW 264
60939: PUSH
60940: LD_INT 81
60942: EQUAL
60943: AND
60944: IFFALSE 60965
// MinerPlaceMine ( unit , x , y ) ;
60946: LD_VAR 0 2
60950: PPUSH
60951: LD_VAR 0 4
60955: PPUSH
60956: LD_VAR 0 5
60960: PPUSH
60961: CALL 64097 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60965: LD_VAR 0 1
60969: PUSH
60970: LD_INT 251
60972: EQUAL
60973: IFFALSE 60990
60975: PUSH
60976: LD_VAR 0 2
60980: PPUSH
60981: CALL_OW 264
60985: PUSH
60986: LD_INT 81
60988: EQUAL
60989: AND
60990: IFFALSE 61011
// MinerDetonateMine ( unit , x , y ) ;
60992: LD_VAR 0 2
60996: PPUSH
60997: LD_VAR 0 4
61001: PPUSH
61002: LD_VAR 0 5
61006: PPUSH
61007: CALL 64376 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61011: LD_VAR 0 1
61015: PUSH
61016: LD_INT 252
61018: EQUAL
61019: IFFALSE 61036
61021: PUSH
61022: LD_VAR 0 2
61026: PPUSH
61027: CALL_OW 264
61031: PUSH
61032: LD_INT 81
61034: EQUAL
61035: AND
61036: IFFALSE 61057
// MinerCreateMinefield ( unit , x , y ) ;
61038: LD_VAR 0 2
61042: PPUSH
61043: LD_VAR 0 4
61047: PPUSH
61048: LD_VAR 0 5
61052: PPUSH
61053: CALL 64795 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61057: LD_VAR 0 1
61061: PUSH
61062: LD_INT 253
61064: EQUAL
61065: IFFALSE 61082
61067: PUSH
61068: LD_VAR 0 2
61072: PPUSH
61073: CALL_OW 257
61077: PUSH
61078: LD_INT 5
61080: EQUAL
61081: AND
61082: IFFALSE 61103
// ComBinocular ( unit , x , y ) ;
61084: LD_VAR 0 2
61088: PPUSH
61089: LD_VAR 0 4
61093: PPUSH
61094: LD_VAR 0 5
61098: PPUSH
61099: CALL 65170 0 3
// if selectedUnit then
61103: LD_VAR 0 3
61107: IFFALSE 61167
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61109: LD_VAR 0 1
61113: PUSH
61114: LD_INT 254
61116: EQUAL
61117: IFFALSE 61134
61119: PUSH
61120: LD_VAR 0 2
61124: PPUSH
61125: CALL_OW 264
61129: PUSH
61130: LD_INT 99
61132: EQUAL
61133: AND
61134: IFFALSE 61151
61136: PUSH
61137: LD_VAR 0 3
61141: PPUSH
61142: CALL_OW 263
61146: PUSH
61147: LD_INT 3
61149: EQUAL
61150: AND
61151: IFFALSE 61167
// HackDestroyVehicle ( unit , selectedUnit ) ;
61153: LD_VAR 0 2
61157: PPUSH
61158: LD_VAR 0 3
61162: PPUSH
61163: CALL 63457 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61167: LD_VAR 0 1
61171: PUSH
61172: LD_INT 255
61174: EQUAL
61175: IFFALSE 61199
61177: PUSH
61178: LD_VAR 0 2
61182: PPUSH
61183: CALL_OW 264
61187: PUSH
61188: LD_INT 14
61190: PUSH
61191: LD_INT 53
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: IN
61198: AND
61199: IFFALSE 61217
61201: PUSH
61202: LD_VAR 0 4
61206: PPUSH
61207: LD_VAR 0 5
61211: PPUSH
61212: CALL_OW 488
61216: AND
61217: IFFALSE 61241
// CutTreeXYR ( unit , x , y , 12 ) ;
61219: LD_VAR 0 2
61223: PPUSH
61224: LD_VAR 0 4
61228: PPUSH
61229: LD_VAR 0 5
61233: PPUSH
61234: LD_INT 12
61236: PPUSH
61237: CALL 61432 0 4
// if cmd = 256 then
61241: LD_VAR 0 1
61245: PUSH
61246: LD_INT 256
61248: EQUAL
61249: IFFALSE 61270
// SetFactoryWaypoint ( unit , x , y ) ;
61251: LD_VAR 0 2
61255: PPUSH
61256: LD_VAR 0 4
61260: PPUSH
61261: LD_VAR 0 5
61265: PPUSH
61266: CALL 80297 0 3
// if cmd = 257 then
61270: LD_VAR 0 1
61274: PUSH
61275: LD_INT 257
61277: EQUAL
61278: IFFALSE 61299
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61280: LD_VAR 0 2
61284: PPUSH
61285: LD_VAR 0 4
61289: PPUSH
61290: LD_VAR 0 5
61294: PPUSH
61295: CALL 80793 0 3
// if cmd = 258 then
61299: LD_VAR 0 1
61303: PUSH
61304: LD_INT 258
61306: EQUAL
61307: IFFALSE 61331
// BurnTreeXYR ( unit , x , y , 8 ) ;
61309: LD_VAR 0 2
61313: PPUSH
61314: LD_VAR 0 4
61318: PPUSH
61319: LD_VAR 0 5
61323: PPUSH
61324: LD_INT 8
61326: PPUSH
61327: CALL 61832 0 4
// end ;
61331: LD_VAR 0 6
61335: RET
// export function ComRadiation ( un ) ; var eff ; begin
61336: LD_INT 0
61338: PPUSH
61339: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61340: LD_VAR 0 1
61344: PPUSH
61345: CALL_OW 264
61349: PUSH
61350: LD_INT 91
61352: NONEQUAL
61353: IFFALSE 61357
// exit ;
61355: GO 61427
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61357: LD_INT 68
61359: PPUSH
61360: LD_VAR 0 1
61364: PPUSH
61365: CALL_OW 255
61369: PPUSH
61370: CALL_OW 321
61374: PUSH
61375: LD_INT 2
61377: EQUAL
61378: IFFALSE 61390
// eff := 50 else
61380: LD_ADDR_VAR 0 3
61384: PUSH
61385: LD_INT 50
61387: ST_TO_ADDR
61388: GO 61398
// eff := 25 ;
61390: LD_ADDR_VAR 0 3
61394: PUSH
61395: LD_INT 25
61397: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61398: LD_VAR 0 1
61402: PPUSH
61403: CALL_OW 250
61407: PPUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: CALL_OW 251
61417: PPUSH
61418: LD_VAR 0 3
61422: PPUSH
61423: CALL_OW 495
// end ;
61427: LD_VAR 0 2
61431: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61432: LD_INT 0
61434: PPUSH
61435: PPUSH
61436: PPUSH
61437: PPUSH
61438: PPUSH
61439: PPUSH
61440: PPUSH
61441: PPUSH
61442: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61443: LD_VAR 0 1
61447: PPUSH
61448: CALL_OW 302
61452: NOT
61453: IFTRUE 61472
61455: PUSH
61456: LD_VAR 0 2
61460: PPUSH
61461: LD_VAR 0 3
61465: PPUSH
61466: CALL_OW 488
61470: NOT
61471: OR
61472: IFTRUE 61481
61474: PUSH
61475: LD_VAR 0 4
61479: NOT
61480: OR
61481: IFFALSE 61485
// exit ;
61483: GO 61827
// list := [ ] ;
61485: LD_ADDR_VAR 0 13
61489: PUSH
61490: EMPTY
61491: ST_TO_ADDR
// if x - r < 0 then
61492: LD_VAR 0 2
61496: PUSH
61497: LD_VAR 0 4
61501: MINUS
61502: PUSH
61503: LD_INT 0
61505: LESS
61506: IFFALSE 61518
// min_x := 0 else
61508: LD_ADDR_VAR 0 7
61512: PUSH
61513: LD_INT 0
61515: ST_TO_ADDR
61516: GO 61534
// min_x := x - r ;
61518: LD_ADDR_VAR 0 7
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_VAR 0 4
61532: MINUS
61533: ST_TO_ADDR
// if y - r < 0 then
61534: LD_VAR 0 3
61538: PUSH
61539: LD_VAR 0 4
61543: MINUS
61544: PUSH
61545: LD_INT 0
61547: LESS
61548: IFFALSE 61560
// min_y := 0 else
61550: LD_ADDR_VAR 0 8
61554: PUSH
61555: LD_INT 0
61557: ST_TO_ADDR
61558: GO 61576
// min_y := y - r ;
61560: LD_ADDR_VAR 0 8
61564: PUSH
61565: LD_VAR 0 3
61569: PUSH
61570: LD_VAR 0 4
61574: MINUS
61575: ST_TO_ADDR
// max_x := x + r ;
61576: LD_ADDR_VAR 0 9
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_VAR 0 4
61590: PLUS
61591: ST_TO_ADDR
// max_y := y + r ;
61592: LD_ADDR_VAR 0 10
61596: PUSH
61597: LD_VAR 0 3
61601: PUSH
61602: LD_VAR 0 4
61606: PLUS
61607: ST_TO_ADDR
// for _x = min_x to max_x do
61608: LD_ADDR_VAR 0 11
61612: PUSH
61613: DOUBLE
61614: LD_VAR 0 7
61618: DEC
61619: ST_TO_ADDR
61620: LD_VAR 0 9
61624: PUSH
61625: FOR_TO
61626: IFFALSE 61745
// for _y = min_y to max_y do
61628: LD_ADDR_VAR 0 12
61632: PUSH
61633: DOUBLE
61634: LD_VAR 0 8
61638: DEC
61639: ST_TO_ADDR
61640: LD_VAR 0 10
61644: PUSH
61645: FOR_TO
61646: IFFALSE 61741
// begin if not ValidHex ( _x , _y ) then
61648: LD_VAR 0 11
61652: PPUSH
61653: LD_VAR 0 12
61657: PPUSH
61658: CALL_OW 488
61662: NOT
61663: IFFALSE 61667
// continue ;
61665: GO 61645
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61667: LD_VAR 0 11
61671: PPUSH
61672: LD_VAR 0 12
61676: PPUSH
61677: CALL_OW 351
61681: IFFALSE 61699
61683: PUSH
61684: LD_VAR 0 11
61688: PPUSH
61689: LD_VAR 0 12
61693: PPUSH
61694: CALL_OW 554
61698: AND
61699: IFFALSE 61739
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61701: LD_ADDR_VAR 0 13
61705: PUSH
61706: LD_VAR 0 13
61710: PPUSH
61711: LD_VAR 0 13
61715: PUSH
61716: LD_INT 1
61718: PLUS
61719: PPUSH
61720: LD_VAR 0 11
61724: PUSH
61725: LD_VAR 0 12
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PPUSH
61734: CALL_OW 2
61738: ST_TO_ADDR
// end ;
61739: GO 61645
61741: POP
61742: POP
61743: GO 61625
61745: POP
61746: POP
// if not list then
61747: LD_VAR 0 13
61751: NOT
61752: IFFALSE 61756
// exit ;
61754: GO 61827
// for i in list do
61756: LD_ADDR_VAR 0 6
61760: PUSH
61761: LD_VAR 0 13
61765: PUSH
61766: FOR_IN
61767: IFFALSE 61825
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61769: LD_VAR 0 1
61773: PPUSH
61774: LD_STRING M
61776: PUSH
61777: LD_VAR 0 6
61781: PUSH
61782: LD_INT 1
61784: ARRAY
61785: PUSH
61786: LD_VAR 0 6
61790: PUSH
61791: LD_INT 2
61793: ARRAY
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: PUSH
61816: EMPTY
61817: LIST
61818: PPUSH
61819: CALL_OW 447
61823: GO 61766
61825: POP
61826: POP
// end ;
61827: LD_VAR 0 5
61831: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61832: LD_INT 0
61834: PPUSH
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
61842: PPUSH
61843: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61844: LD_VAR 0 1
61848: PPUSH
61849: CALL_OW 302
61853: NOT
61854: IFTRUE 61873
61856: PUSH
61857: LD_VAR 0 2
61861: PPUSH
61862: LD_VAR 0 3
61866: PPUSH
61867: CALL_OW 488
61871: NOT
61872: OR
61873: IFTRUE 61882
61875: PUSH
61876: LD_VAR 0 4
61880: NOT
61881: OR
61882: IFFALSE 61886
// exit ;
61884: GO 62403
// list := [ ] ;
61886: LD_ADDR_VAR 0 13
61890: PUSH
61891: EMPTY
61892: ST_TO_ADDR
// if x - r < 0 then
61893: LD_VAR 0 2
61897: PUSH
61898: LD_VAR 0 4
61902: MINUS
61903: PUSH
61904: LD_INT 0
61906: LESS
61907: IFFALSE 61919
// min_x := 0 else
61909: LD_ADDR_VAR 0 7
61913: PUSH
61914: LD_INT 0
61916: ST_TO_ADDR
61917: GO 61935
// min_x := x - r ;
61919: LD_ADDR_VAR 0 7
61923: PUSH
61924: LD_VAR 0 2
61928: PUSH
61929: LD_VAR 0 4
61933: MINUS
61934: ST_TO_ADDR
// if y - r < 0 then
61935: LD_VAR 0 3
61939: PUSH
61940: LD_VAR 0 4
61944: MINUS
61945: PUSH
61946: LD_INT 0
61948: LESS
61949: IFFALSE 61961
// min_y := 0 else
61951: LD_ADDR_VAR 0 8
61955: PUSH
61956: LD_INT 0
61958: ST_TO_ADDR
61959: GO 61977
// min_y := y - r ;
61961: LD_ADDR_VAR 0 8
61965: PUSH
61966: LD_VAR 0 3
61970: PUSH
61971: LD_VAR 0 4
61975: MINUS
61976: ST_TO_ADDR
// max_x := x + r ;
61977: LD_ADDR_VAR 0 9
61981: PUSH
61982: LD_VAR 0 2
61986: PUSH
61987: LD_VAR 0 4
61991: PLUS
61992: ST_TO_ADDR
// max_y := y + r ;
61993: LD_ADDR_VAR 0 10
61997: PUSH
61998: LD_VAR 0 3
62002: PUSH
62003: LD_VAR 0 4
62007: PLUS
62008: ST_TO_ADDR
// for _x = min_x to max_x do
62009: LD_ADDR_VAR 0 11
62013: PUSH
62014: DOUBLE
62015: LD_VAR 0 7
62019: DEC
62020: ST_TO_ADDR
62021: LD_VAR 0 9
62025: PUSH
62026: FOR_TO
62027: IFFALSE 62146
// for _y = min_y to max_y do
62029: LD_ADDR_VAR 0 12
62033: PUSH
62034: DOUBLE
62035: LD_VAR 0 8
62039: DEC
62040: ST_TO_ADDR
62041: LD_VAR 0 10
62045: PUSH
62046: FOR_TO
62047: IFFALSE 62142
// begin if not ValidHex ( _x , _y ) then
62049: LD_VAR 0 11
62053: PPUSH
62054: LD_VAR 0 12
62058: PPUSH
62059: CALL_OW 488
62063: NOT
62064: IFFALSE 62068
// continue ;
62066: GO 62046
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62068: LD_VAR 0 11
62072: PPUSH
62073: LD_VAR 0 12
62077: PPUSH
62078: CALL_OW 351
62082: IFFALSE 62100
62084: PUSH
62085: LD_VAR 0 11
62089: PPUSH
62090: LD_VAR 0 12
62094: PPUSH
62095: CALL_OW 554
62099: AND
62100: IFFALSE 62140
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62102: LD_ADDR_VAR 0 13
62106: PUSH
62107: LD_VAR 0 13
62111: PPUSH
62112: LD_VAR 0 13
62116: PUSH
62117: LD_INT 1
62119: PLUS
62120: PPUSH
62121: LD_VAR 0 11
62125: PUSH
62126: LD_VAR 0 12
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PPUSH
62135: CALL_OW 2
62139: ST_TO_ADDR
// end ;
62140: GO 62046
62142: POP
62143: POP
62144: GO 62026
62146: POP
62147: POP
// if not list then
62148: LD_VAR 0 13
62152: NOT
62153: IFFALSE 62157
// exit ;
62155: GO 62403
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62157: LD_ADDR_VAR 0 13
62161: PUSH
62162: LD_VAR 0 1
62166: PPUSH
62167: LD_VAR 0 13
62171: PPUSH
62172: LD_INT 1
62174: PPUSH
62175: LD_INT 1
62177: PPUSH
62178: CALL 22256 0 4
62182: ST_TO_ADDR
// ComStop ( flame ) ;
62183: LD_VAR 0 1
62187: PPUSH
62188: CALL_OW 141
// for i in list do
62192: LD_ADDR_VAR 0 6
62196: PUSH
62197: LD_VAR 0 13
62201: PUSH
62202: FOR_IN
62203: IFFALSE 62234
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62205: LD_VAR 0 1
62209: PPUSH
62210: LD_VAR 0 6
62214: PUSH
62215: LD_INT 1
62217: ARRAY
62218: PPUSH
62219: LD_VAR 0 6
62223: PUSH
62224: LD_INT 2
62226: ARRAY
62227: PPUSH
62228: CALL_OW 176
62232: GO 62202
62234: POP
62235: POP
// repeat wait ( 0 0$1 ) ;
62236: LD_INT 35
62238: PPUSH
62239: CALL_OW 67
// task := GetTaskList ( flame ) ;
62243: LD_ADDR_VAR 0 14
62247: PUSH
62248: LD_VAR 0 1
62252: PPUSH
62253: CALL_OW 437
62257: ST_TO_ADDR
// if not task then
62258: LD_VAR 0 14
62262: NOT
62263: IFFALSE 62267
// exit ;
62265: GO 62403
// if task [ 1 ] [ 1 ] <> | then
62267: LD_VAR 0 14
62271: PUSH
62272: LD_INT 1
62274: ARRAY
62275: PUSH
62276: LD_INT 1
62278: ARRAY
62279: PUSH
62280: LD_STRING |
62282: NONEQUAL
62283: IFFALSE 62287
// exit ;
62285: GO 62403
// _x := task [ 1 ] [ 2 ] ;
62287: LD_ADDR_VAR 0 11
62291: PUSH
62292: LD_VAR 0 14
62296: PUSH
62297: LD_INT 1
62299: ARRAY
62300: PUSH
62301: LD_INT 2
62303: ARRAY
62304: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62305: LD_ADDR_VAR 0 12
62309: PUSH
62310: LD_VAR 0 14
62314: PUSH
62315: LD_INT 1
62317: ARRAY
62318: PUSH
62319: LD_INT 3
62321: ARRAY
62322: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62323: LD_VAR 0 11
62327: PPUSH
62328: LD_VAR 0 12
62332: PPUSH
62333: CALL_OW 351
62337: NOT
62338: IFTRUE 62357
62340: PUSH
62341: LD_VAR 0 11
62345: PPUSH
62346: LD_VAR 0 12
62350: PPUSH
62351: CALL_OW 554
62355: NOT
62356: OR
62357: IFFALSE 62391
// begin task := Delete ( task , 1 ) ;
62359: LD_ADDR_VAR 0 14
62363: PUSH
62364: LD_VAR 0 14
62368: PPUSH
62369: LD_INT 1
62371: PPUSH
62372: CALL_OW 3
62376: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62377: LD_VAR 0 1
62381: PPUSH
62382: LD_VAR 0 14
62386: PPUSH
62387: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62391: LD_VAR 0 1
62395: PPUSH
62396: CALL_OW 314
62400: NOT
62401: IFFALSE 62236
// end ;
62403: LD_VAR 0 5
62407: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62408: LD_EXP 36
62412: NOT
62413: IFFALSE 62463
62415: GO 62417
62417: DISABLE
// begin initHack := true ;
62418: LD_ADDR_EXP 36
62422: PUSH
62423: LD_INT 1
62425: ST_TO_ADDR
// hackTanks := [ ] ;
62426: LD_ADDR_EXP 37
62430: PUSH
62431: EMPTY
62432: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62433: LD_ADDR_EXP 38
62437: PUSH
62438: EMPTY
62439: ST_TO_ADDR
// hackLimit := 3 ;
62440: LD_ADDR_EXP 39
62444: PUSH
62445: LD_INT 3
62447: ST_TO_ADDR
// hackDist := 12 ;
62448: LD_ADDR_EXP 40
62452: PUSH
62453: LD_INT 12
62455: ST_TO_ADDR
// hackCounter := [ ] ;
62456: LD_ADDR_EXP 41
62460: PUSH
62461: EMPTY
62462: ST_TO_ADDR
// end ;
62463: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62464: LD_EXP 36
62468: IFFALSE 62486
62470: PUSH
62471: LD_INT 34
62473: PUSH
62474: LD_INT 99
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PPUSH
62481: CALL_OW 69
62485: AND
62486: IFFALSE 62739
62488: GO 62490
62490: DISABLE
62491: LD_INT 0
62493: PPUSH
62494: PPUSH
// begin enable ;
62495: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62496: LD_ADDR_VAR 0 1
62500: PUSH
62501: LD_INT 34
62503: PUSH
62504: LD_INT 99
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PPUSH
62511: CALL_OW 69
62515: PUSH
62516: FOR_IN
62517: IFFALSE 62737
// begin if not i in hackTanks then
62519: LD_VAR 0 1
62523: PUSH
62524: LD_EXP 37
62528: IN
62529: NOT
62530: IFFALSE 62613
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62532: LD_ADDR_EXP 37
62536: PUSH
62537: LD_EXP 37
62541: PPUSH
62542: LD_EXP 37
62546: PUSH
62547: LD_INT 1
62549: PLUS
62550: PPUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 1
62560: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62561: LD_ADDR_EXP 38
62565: PUSH
62566: LD_EXP 38
62570: PPUSH
62571: LD_EXP 38
62575: PUSH
62576: LD_INT 1
62578: PLUS
62579: PPUSH
62580: EMPTY
62581: PPUSH
62582: CALL_OW 1
62586: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62587: LD_ADDR_EXP 41
62591: PUSH
62592: LD_EXP 41
62596: PPUSH
62597: LD_EXP 41
62601: PUSH
62602: LD_INT 1
62604: PLUS
62605: PPUSH
62606: EMPTY
62607: PPUSH
62608: CALL_OW 1
62612: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62613: LD_VAR 0 1
62617: PPUSH
62618: CALL_OW 302
62622: NOT
62623: IFFALSE 62636
// begin HackUnlinkAll ( i ) ;
62625: LD_VAR 0 1
62629: PPUSH
62630: CALL 62742 0 1
// continue ;
62634: GO 62516
// end ; HackCheckCapturedStatus ( i ) ;
62636: LD_VAR 0 1
62640: PPUSH
62641: CALL 63187 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62645: LD_ADDR_VAR 0 2
62649: PUSH
62650: LD_INT 81
62652: PUSH
62653: LD_VAR 0 1
62657: PPUSH
62658: CALL_OW 255
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 33
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 91
62679: PUSH
62680: LD_VAR 0 1
62684: PUSH
62685: LD_EXP 40
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 50
62697: PUSH
62698: EMPTY
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: PPUSH
62707: CALL_OW 69
62711: ST_TO_ADDR
// if not tmp then
62712: LD_VAR 0 2
62716: NOT
62717: IFFALSE 62721
// continue ;
62719: GO 62516
// HackLink ( i , tmp ) ;
62721: LD_VAR 0 1
62725: PPUSH
62726: LD_VAR 0 2
62730: PPUSH
62731: CALL 62878 0 2
// end ;
62735: GO 62516
62737: POP
62738: POP
// end ;
62739: PPOPN 2
62741: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62742: LD_INT 0
62744: PPUSH
62745: PPUSH
62746: PPUSH
// if not hack in hackTanks then
62747: LD_VAR 0 1
62751: PUSH
62752: LD_EXP 37
62756: IN
62757: NOT
62758: IFFALSE 62762
// exit ;
62760: GO 62873
// index := GetElementIndex ( hackTanks , hack ) ;
62762: LD_ADDR_VAR 0 4
62766: PUSH
62767: LD_EXP 37
62771: PPUSH
62772: LD_VAR 0 1
62776: PPUSH
62777: CALL 21551 0 2
62781: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62782: LD_EXP 38
62786: PUSH
62787: LD_VAR 0 4
62791: ARRAY
62792: IFFALSE 62873
// begin for i in hackTanksCaptured [ index ] do
62794: LD_ADDR_VAR 0 3
62798: PUSH
62799: LD_EXP 38
62803: PUSH
62804: LD_VAR 0 4
62808: ARRAY
62809: PUSH
62810: FOR_IN
62811: IFFALSE 62837
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62813: LD_VAR 0 3
62817: PUSH
62818: LD_INT 1
62820: ARRAY
62821: PPUSH
62822: LD_VAR 0 3
62826: PUSH
62827: LD_INT 2
62829: ARRAY
62830: PPUSH
62831: CALL_OW 235
62835: GO 62810
62837: POP
62838: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62839: LD_ADDR_EXP 38
62843: PUSH
62844: LD_EXP 38
62848: PPUSH
62849: LD_VAR 0 4
62853: PPUSH
62854: EMPTY
62855: PPUSH
62856: CALL_OW 1
62860: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62861: LD_VAR 0 1
62865: PPUSH
62866: LD_INT 0
62868: PPUSH
62869: CALL_OW 505
// end ; end ;
62873: LD_VAR 0 2
62877: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
// if not hack in hackTanks or not vehicles then
62883: LD_VAR 0 1
62887: PUSH
62888: LD_EXP 37
62892: IN
62893: NOT
62894: IFTRUE 62903
62896: PUSH
62897: LD_VAR 0 2
62901: NOT
62902: OR
62903: IFFALSE 62907
// exit ;
62905: GO 63182
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62907: LD_ADDR_VAR 0 2
62911: PUSH
62912: LD_VAR 0 1
62916: PPUSH
62917: LD_VAR 0 2
62921: PPUSH
62922: LD_INT 1
62924: PPUSH
62925: LD_INT 1
62927: PPUSH
62928: CALL 22203 0 4
62932: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62933: LD_ADDR_VAR 0 5
62937: PUSH
62938: LD_EXP 37
62942: PPUSH
62943: LD_VAR 0 1
62947: PPUSH
62948: CALL 21551 0 2
62952: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62953: LD_EXP 38
62957: PUSH
62958: LD_VAR 0 5
62962: ARRAY
62963: PUSH
62964: LD_EXP 39
62968: LESS
62969: IFFALSE 63158
// begin for i := 1 to vehicles do
62971: LD_ADDR_VAR 0 4
62975: PUSH
62976: DOUBLE
62977: LD_INT 1
62979: DEC
62980: ST_TO_ADDR
62981: LD_VAR 0 2
62985: PUSH
62986: FOR_TO
62987: IFFALSE 63156
// begin if hackTanksCaptured [ index ] = hackLimit then
62989: LD_EXP 38
62993: PUSH
62994: LD_VAR 0 5
62998: ARRAY
62999: PUSH
63000: LD_EXP 39
63004: EQUAL
63005: IFFALSE 63009
// break ;
63007: GO 63156
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63009: LD_ADDR_EXP 41
63013: PUSH
63014: LD_EXP 41
63018: PPUSH
63019: LD_VAR 0 5
63023: PPUSH
63024: LD_EXP 41
63028: PUSH
63029: LD_VAR 0 5
63033: ARRAY
63034: PUSH
63035: LD_INT 1
63037: PLUS
63038: PPUSH
63039: CALL_OW 1
63043: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63044: LD_ADDR_EXP 38
63048: PUSH
63049: LD_EXP 38
63053: PPUSH
63054: LD_VAR 0 5
63058: PUSH
63059: LD_EXP 38
63063: PUSH
63064: LD_VAR 0 5
63068: ARRAY
63069: PUSH
63070: LD_INT 1
63072: PLUS
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PPUSH
63078: LD_VAR 0 2
63082: PUSH
63083: LD_VAR 0 4
63087: ARRAY
63088: PUSH
63089: LD_VAR 0 2
63093: PUSH
63094: LD_VAR 0 4
63098: ARRAY
63099: PPUSH
63100: CALL_OW 255
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PPUSH
63109: CALL 21768 0 3
63113: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63114: LD_VAR 0 2
63118: PUSH
63119: LD_VAR 0 4
63123: ARRAY
63124: PPUSH
63125: LD_VAR 0 1
63129: PPUSH
63130: CALL_OW 255
63134: PPUSH
63135: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63139: LD_VAR 0 2
63143: PUSH
63144: LD_VAR 0 4
63148: ARRAY
63149: PPUSH
63150: CALL_OW 141
// end ;
63154: GO 62986
63156: POP
63157: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63158: LD_VAR 0 1
63162: PPUSH
63163: LD_EXP 38
63167: PUSH
63168: LD_VAR 0 5
63172: ARRAY
63173: PUSH
63174: LD_INT 0
63176: PLUS
63177: PPUSH
63178: CALL_OW 505
// end ;
63182: LD_VAR 0 3
63186: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63187: LD_INT 0
63189: PPUSH
63190: PPUSH
63191: PPUSH
63192: PPUSH
// if not hack in hackTanks then
63193: LD_VAR 0 1
63197: PUSH
63198: LD_EXP 37
63202: IN
63203: NOT
63204: IFFALSE 63208
// exit ;
63206: GO 63452
// index := GetElementIndex ( hackTanks , hack ) ;
63208: LD_ADDR_VAR 0 4
63212: PUSH
63213: LD_EXP 37
63217: PPUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: CALL 21551 0 2
63227: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63228: LD_ADDR_VAR 0 3
63232: PUSH
63233: DOUBLE
63234: LD_EXP 38
63238: PUSH
63239: LD_VAR 0 4
63243: ARRAY
63244: INC
63245: ST_TO_ADDR
63246: LD_INT 1
63248: PUSH
63249: FOR_DOWNTO
63250: IFFALSE 63426
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63252: LD_ADDR_VAR 0 5
63256: PUSH
63257: LD_EXP 38
63261: PUSH
63262: LD_VAR 0 4
63266: ARRAY
63267: PUSH
63268: LD_VAR 0 3
63272: ARRAY
63273: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63274: LD_VAR 0 5
63278: PUSH
63279: LD_INT 1
63281: ARRAY
63282: PPUSH
63283: CALL_OW 302
63287: NOT
63288: IFTRUE 63316
63290: PUSH
63291: LD_VAR 0 5
63295: PUSH
63296: LD_INT 1
63298: ARRAY
63299: PPUSH
63300: CALL_OW 255
63304: PUSH
63305: LD_VAR 0 1
63309: PPUSH
63310: CALL_OW 255
63314: NONEQUAL
63315: OR
63316: IFFALSE 63424
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63318: LD_VAR 0 5
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: PPUSH
63327: CALL_OW 305
63331: IFFALSE 63359
63333: PUSH
63334: LD_VAR 0 5
63338: PUSH
63339: LD_INT 1
63341: ARRAY
63342: PPUSH
63343: CALL_OW 255
63347: PUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 255
63357: EQUAL
63358: AND
63359: IFFALSE 63383
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63361: LD_VAR 0 5
63365: PUSH
63366: LD_INT 1
63368: ARRAY
63369: PPUSH
63370: LD_VAR 0 5
63374: PUSH
63375: LD_INT 2
63377: ARRAY
63378: PPUSH
63379: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63383: LD_ADDR_EXP 38
63387: PUSH
63388: LD_EXP 38
63392: PPUSH
63393: LD_VAR 0 4
63397: PPUSH
63398: LD_EXP 38
63402: PUSH
63403: LD_VAR 0 4
63407: ARRAY
63408: PPUSH
63409: LD_VAR 0 3
63413: PPUSH
63414: CALL_OW 3
63418: PPUSH
63419: CALL_OW 1
63423: ST_TO_ADDR
// end ; end ;
63424: GO 63249
63426: POP
63427: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63428: LD_VAR 0 1
63432: PPUSH
63433: LD_EXP 38
63437: PUSH
63438: LD_VAR 0 4
63442: ARRAY
63443: PUSH
63444: LD_INT 0
63446: PLUS
63447: PPUSH
63448: CALL_OW 505
// end ;
63452: LD_VAR 0 2
63456: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63457: LD_INT 0
63459: PPUSH
63460: PPUSH
63461: PPUSH
63462: PPUSH
// if not hack in hackTanks then
63463: LD_VAR 0 1
63467: PUSH
63468: LD_EXP 37
63472: IN
63473: NOT
63474: IFFALSE 63478
// exit ;
63476: GO 63563
// index := GetElementIndex ( hackTanks , hack ) ;
63478: LD_ADDR_VAR 0 5
63482: PUSH
63483: LD_EXP 37
63487: PPUSH
63488: LD_VAR 0 1
63492: PPUSH
63493: CALL 21551 0 2
63497: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63498: LD_ADDR_VAR 0 4
63502: PUSH
63503: DOUBLE
63504: LD_INT 1
63506: DEC
63507: ST_TO_ADDR
63508: LD_EXP 38
63512: PUSH
63513: LD_VAR 0 5
63517: ARRAY
63518: PUSH
63519: FOR_TO
63520: IFFALSE 63561
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63522: LD_EXP 38
63526: PUSH
63527: LD_VAR 0 5
63531: ARRAY
63532: PUSH
63533: LD_VAR 0 4
63537: ARRAY
63538: PUSH
63539: LD_INT 1
63541: ARRAY
63542: PUSH
63543: LD_VAR 0 2
63547: EQUAL
63548: IFFALSE 63559
// KillUnit ( vehicle ) ;
63550: LD_VAR 0 2
63554: PPUSH
63555: CALL_OW 66
63559: GO 63519
63561: POP
63562: POP
// end ;
63563: LD_VAR 0 3
63567: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63568: LD_EXP 42
63572: NOT
63573: IFFALSE 63608
63575: GO 63577
63577: DISABLE
// begin initMiner := true ;
63578: LD_ADDR_EXP 42
63582: PUSH
63583: LD_INT 1
63585: ST_TO_ADDR
// minersList := [ ] ;
63586: LD_ADDR_EXP 43
63590: PUSH
63591: EMPTY
63592: ST_TO_ADDR
// minerMinesList := [ ] ;
63593: LD_ADDR_EXP 44
63597: PUSH
63598: EMPTY
63599: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63600: LD_ADDR_EXP 45
63604: PUSH
63605: LD_INT 5
63607: ST_TO_ADDR
// end ;
63608: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63609: LD_EXP 42
63613: IFFALSE 63631
63615: PUSH
63616: LD_INT 34
63618: PUSH
63619: LD_INT 81
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PPUSH
63626: CALL_OW 69
63630: AND
63631: IFFALSE 64094
63633: GO 63635
63635: DISABLE
63636: LD_INT 0
63638: PPUSH
63639: PPUSH
63640: PPUSH
63641: PPUSH
// begin enable ;
63642: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63643: LD_ADDR_VAR 0 1
63647: PUSH
63648: LD_INT 34
63650: PUSH
63651: LD_INT 81
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PPUSH
63658: CALL_OW 69
63662: PUSH
63663: FOR_IN
63664: IFFALSE 63736
// begin if not i in minersList then
63666: LD_VAR 0 1
63670: PUSH
63671: LD_EXP 43
63675: IN
63676: NOT
63677: IFFALSE 63734
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63679: LD_ADDR_EXP 43
63683: PUSH
63684: LD_EXP 43
63688: PPUSH
63689: LD_EXP 43
63693: PUSH
63694: LD_INT 1
63696: PLUS
63697: PPUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: CALL_OW 1
63707: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63708: LD_ADDR_EXP 44
63712: PUSH
63713: LD_EXP 44
63717: PPUSH
63718: LD_EXP 44
63722: PUSH
63723: LD_INT 1
63725: PLUS
63726: PPUSH
63727: EMPTY
63728: PPUSH
63729: CALL_OW 1
63733: ST_TO_ADDR
// end end ;
63734: GO 63663
63736: POP
63737: POP
// for i := minerMinesList downto 1 do
63738: LD_ADDR_VAR 0 1
63742: PUSH
63743: DOUBLE
63744: LD_EXP 44
63748: INC
63749: ST_TO_ADDR
63750: LD_INT 1
63752: PUSH
63753: FOR_DOWNTO
63754: IFFALSE 64092
// begin if IsLive ( minersList [ i ] ) then
63756: LD_EXP 43
63760: PUSH
63761: LD_VAR 0 1
63765: ARRAY
63766: PPUSH
63767: CALL_OW 300
63771: IFFALSE 63799
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63773: LD_EXP 43
63777: PUSH
63778: LD_VAR 0 1
63782: ARRAY
63783: PPUSH
63784: LD_EXP 44
63788: PUSH
63789: LD_VAR 0 1
63793: ARRAY
63794: PPUSH
63795: CALL_OW 505
// if not minerMinesList [ i ] then
63799: LD_EXP 44
63803: PUSH
63804: LD_VAR 0 1
63808: ARRAY
63809: NOT
63810: IFFALSE 63814
// continue ;
63812: GO 63753
// for j := minerMinesList [ i ] downto 1 do
63814: LD_ADDR_VAR 0 2
63818: PUSH
63819: DOUBLE
63820: LD_EXP 44
63824: PUSH
63825: LD_VAR 0 1
63829: ARRAY
63830: INC
63831: ST_TO_ADDR
63832: LD_INT 1
63834: PUSH
63835: FOR_DOWNTO
63836: IFFALSE 64088
// begin side := GetSide ( minersList [ i ] ) ;
63838: LD_ADDR_VAR 0 3
63842: PUSH
63843: LD_EXP 43
63847: PUSH
63848: LD_VAR 0 1
63852: ARRAY
63853: PPUSH
63854: CALL_OW 255
63858: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63859: LD_ADDR_VAR 0 4
63863: PUSH
63864: LD_EXP 44
63868: PUSH
63869: LD_VAR 0 1
63873: ARRAY
63874: PUSH
63875: LD_VAR 0 2
63879: ARRAY
63880: PUSH
63881: LD_INT 1
63883: ARRAY
63884: PPUSH
63885: LD_EXP 44
63889: PUSH
63890: LD_VAR 0 1
63894: ARRAY
63895: PUSH
63896: LD_VAR 0 2
63900: ARRAY
63901: PUSH
63902: LD_INT 2
63904: ARRAY
63905: PPUSH
63906: CALL_OW 428
63910: ST_TO_ADDR
// if not tmp then
63911: LD_VAR 0 4
63915: NOT
63916: IFFALSE 63920
// continue ;
63918: GO 63835
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63920: LD_VAR 0 4
63924: PUSH
63925: LD_INT 81
63927: PUSH
63928: LD_VAR 0 3
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PPUSH
63937: CALL_OW 69
63941: IN
63942: IFFALSE 63992
63944: PUSH
63945: LD_EXP 44
63949: PUSH
63950: LD_VAR 0 1
63954: ARRAY
63955: PUSH
63956: LD_VAR 0 2
63960: ARRAY
63961: PUSH
63962: LD_INT 1
63964: ARRAY
63965: PPUSH
63966: LD_EXP 44
63970: PUSH
63971: LD_VAR 0 1
63975: ARRAY
63976: PUSH
63977: LD_VAR 0 2
63981: ARRAY
63982: PUSH
63983: LD_INT 2
63985: ARRAY
63986: PPUSH
63987: CALL_OW 458
63991: AND
63992: IFFALSE 64086
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63994: LD_EXP 44
63998: PUSH
63999: LD_VAR 0 1
64003: ARRAY
64004: PUSH
64005: LD_VAR 0 2
64009: ARRAY
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: PPUSH
64015: LD_EXP 44
64019: PUSH
64020: LD_VAR 0 1
64024: ARRAY
64025: PUSH
64026: LD_VAR 0 2
64030: ARRAY
64031: PUSH
64032: LD_INT 2
64034: ARRAY
64035: PPUSH
64036: LD_VAR 0 3
64040: PPUSH
64041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64045: LD_ADDR_EXP 44
64049: PUSH
64050: LD_EXP 44
64054: PPUSH
64055: LD_VAR 0 1
64059: PPUSH
64060: LD_EXP 44
64064: PUSH
64065: LD_VAR 0 1
64069: ARRAY
64070: PPUSH
64071: LD_VAR 0 2
64075: PPUSH
64076: CALL_OW 3
64080: PPUSH
64081: CALL_OW 1
64085: ST_TO_ADDR
// end ; end ;
64086: GO 63835
64088: POP
64089: POP
// end ;
64090: GO 63753
64092: POP
64093: POP
// end ;
64094: PPOPN 4
64096: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64097: LD_INT 0
64099: PPUSH
64100: PPUSH
// result := false ;
64101: LD_ADDR_VAR 0 4
64105: PUSH
64106: LD_INT 0
64108: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64109: LD_VAR 0 1
64113: PPUSH
64114: CALL_OW 264
64118: PUSH
64119: LD_INT 81
64121: EQUAL
64122: NOT
64123: IFFALSE 64127
// exit ;
64125: GO 64371
// index := GetElementIndex ( minersList , unit ) ;
64127: LD_ADDR_VAR 0 5
64131: PUSH
64132: LD_EXP 43
64136: PPUSH
64137: LD_VAR 0 1
64141: PPUSH
64142: CALL 21551 0 2
64146: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64147: LD_EXP 44
64151: PUSH
64152: LD_VAR 0 5
64156: ARRAY
64157: PUSH
64158: LD_EXP 45
64162: GREATEREQUAL
64163: IFFALSE 64167
// exit ;
64165: GO 64371
// ComMoveXY ( unit , x , y ) ;
64167: LD_VAR 0 1
64171: PPUSH
64172: LD_VAR 0 2
64176: PPUSH
64177: LD_VAR 0 3
64181: PPUSH
64182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64186: LD_INT 35
64188: PPUSH
64189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64193: LD_VAR 0 1
64197: PPUSH
64198: LD_VAR 0 2
64202: PPUSH
64203: LD_VAR 0 3
64207: PPUSH
64208: CALL 53597 0 3
64212: NOT
64213: IFFALSE 64226
64215: PUSH
64216: LD_VAR 0 1
64220: PPUSH
64221: CALL_OW 314
64225: AND
64226: IFFALSE 64230
// exit ;
64228: GO 64371
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64230: LD_VAR 0 2
64234: PPUSH
64235: LD_VAR 0 3
64239: PPUSH
64240: CALL_OW 428
64244: PUSH
64245: LD_VAR 0 1
64249: EQUAL
64250: IFFALSE 64264
64252: PUSH
64253: LD_VAR 0 1
64257: PPUSH
64258: CALL_OW 314
64262: NOT
64263: AND
64264: IFFALSE 64186
// PlaySoundXY ( x , y , PlantMine ) ;
64266: LD_VAR 0 2
64270: PPUSH
64271: LD_VAR 0 3
64275: PPUSH
64276: LD_STRING PlantMine
64278: PPUSH
64279: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64283: LD_VAR 0 2
64287: PPUSH
64288: LD_VAR 0 3
64292: PPUSH
64293: LD_VAR 0 1
64297: PPUSH
64298: CALL_OW 255
64302: PPUSH
64303: LD_INT 0
64305: PPUSH
64306: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64310: LD_ADDR_EXP 44
64314: PUSH
64315: LD_EXP 44
64319: PPUSH
64320: LD_VAR 0 5
64324: PUSH
64325: LD_EXP 44
64329: PUSH
64330: LD_VAR 0 5
64334: ARRAY
64335: PUSH
64336: LD_INT 1
64338: PLUS
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PPUSH
64344: LD_VAR 0 2
64348: PUSH
64349: LD_VAR 0 3
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PPUSH
64358: CALL 21768 0 3
64362: ST_TO_ADDR
// result := true ;
64363: LD_ADDR_VAR 0 4
64367: PUSH
64368: LD_INT 1
64370: ST_TO_ADDR
// end ;
64371: LD_VAR 0 4
64375: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64376: LD_INT 0
64378: PPUSH
64379: PPUSH
64380: PPUSH
// if not unit in minersList then
64381: LD_VAR 0 1
64385: PUSH
64386: LD_EXP 43
64390: IN
64391: NOT
64392: IFFALSE 64396
// exit ;
64394: GO 64790
// index := GetElementIndex ( minersList , unit ) ;
64396: LD_ADDR_VAR 0 6
64400: PUSH
64401: LD_EXP 43
64405: PPUSH
64406: LD_VAR 0 1
64410: PPUSH
64411: CALL 21551 0 2
64415: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64416: LD_ADDR_VAR 0 5
64420: PUSH
64421: DOUBLE
64422: LD_EXP 44
64426: PUSH
64427: LD_VAR 0 6
64431: ARRAY
64432: INC
64433: ST_TO_ADDR
64434: LD_INT 1
64436: PUSH
64437: FOR_DOWNTO
64438: IFFALSE 64601
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64440: LD_EXP 44
64444: PUSH
64445: LD_VAR 0 6
64449: ARRAY
64450: PUSH
64451: LD_VAR 0 5
64455: ARRAY
64456: PUSH
64457: LD_INT 1
64459: ARRAY
64460: PUSH
64461: LD_VAR 0 2
64465: EQUAL
64466: IFFALSE 64496
64468: PUSH
64469: LD_EXP 44
64473: PUSH
64474: LD_VAR 0 6
64478: ARRAY
64479: PUSH
64480: LD_VAR 0 5
64484: ARRAY
64485: PUSH
64486: LD_INT 2
64488: ARRAY
64489: PUSH
64490: LD_VAR 0 3
64494: EQUAL
64495: AND
64496: IFFALSE 64599
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64498: LD_EXP 44
64502: PUSH
64503: LD_VAR 0 6
64507: ARRAY
64508: PUSH
64509: LD_VAR 0 5
64513: ARRAY
64514: PUSH
64515: LD_INT 1
64517: ARRAY
64518: PPUSH
64519: LD_EXP 44
64523: PUSH
64524: LD_VAR 0 6
64528: ARRAY
64529: PUSH
64530: LD_VAR 0 5
64534: ARRAY
64535: PUSH
64536: LD_INT 2
64538: ARRAY
64539: PPUSH
64540: LD_VAR 0 1
64544: PPUSH
64545: CALL_OW 255
64549: PPUSH
64550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64554: LD_ADDR_EXP 44
64558: PUSH
64559: LD_EXP 44
64563: PPUSH
64564: LD_VAR 0 6
64568: PPUSH
64569: LD_EXP 44
64573: PUSH
64574: LD_VAR 0 6
64578: ARRAY
64579: PPUSH
64580: LD_VAR 0 5
64584: PPUSH
64585: CALL_OW 3
64589: PPUSH
64590: CALL_OW 1
64594: ST_TO_ADDR
// exit ;
64595: POP
64596: POP
64597: GO 64790
// end ; end ;
64599: GO 64437
64601: POP
64602: POP
// for i := minerMinesList [ index ] downto 1 do
64603: LD_ADDR_VAR 0 5
64607: PUSH
64608: DOUBLE
64609: LD_EXP 44
64613: PUSH
64614: LD_VAR 0 6
64618: ARRAY
64619: INC
64620: ST_TO_ADDR
64621: LD_INT 1
64623: PUSH
64624: FOR_DOWNTO
64625: IFFALSE 64788
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64627: LD_EXP 44
64631: PUSH
64632: LD_VAR 0 6
64636: ARRAY
64637: PUSH
64638: LD_VAR 0 5
64642: ARRAY
64643: PUSH
64644: LD_INT 1
64646: ARRAY
64647: PPUSH
64648: LD_EXP 44
64652: PUSH
64653: LD_VAR 0 6
64657: ARRAY
64658: PUSH
64659: LD_VAR 0 5
64663: ARRAY
64664: PUSH
64665: LD_INT 2
64667: ARRAY
64668: PPUSH
64669: LD_VAR 0 2
64673: PPUSH
64674: LD_VAR 0 3
64678: PPUSH
64679: CALL_OW 298
64683: PUSH
64684: LD_INT 6
64686: LESS
64687: IFFALSE 64786
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64689: LD_EXP 44
64693: PUSH
64694: LD_VAR 0 6
64698: ARRAY
64699: PUSH
64700: LD_VAR 0 5
64704: ARRAY
64705: PUSH
64706: LD_INT 1
64708: ARRAY
64709: PPUSH
64710: LD_EXP 44
64714: PUSH
64715: LD_VAR 0 6
64719: ARRAY
64720: PUSH
64721: LD_VAR 0 5
64725: ARRAY
64726: PUSH
64727: LD_INT 2
64729: ARRAY
64730: PPUSH
64731: LD_VAR 0 1
64735: PPUSH
64736: CALL_OW 255
64740: PPUSH
64741: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64745: LD_ADDR_EXP 44
64749: PUSH
64750: LD_EXP 44
64754: PPUSH
64755: LD_VAR 0 6
64759: PPUSH
64760: LD_EXP 44
64764: PUSH
64765: LD_VAR 0 6
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 5
64775: PPUSH
64776: CALL_OW 3
64780: PPUSH
64781: CALL_OW 1
64785: ST_TO_ADDR
// end ; end ;
64786: GO 64624
64788: POP
64789: POP
// end ;
64790: LD_VAR 0 4
64794: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64795: LD_INT 0
64797: PPUSH
64798: PPUSH
64799: PPUSH
64800: PPUSH
64801: PPUSH
64802: PPUSH
64803: PPUSH
64804: PPUSH
64805: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64806: LD_VAR 0 1
64810: PPUSH
64811: CALL_OW 264
64815: PUSH
64816: LD_INT 81
64818: EQUAL
64819: NOT
64820: IFTRUE 64835
64822: PUSH
64823: LD_VAR 0 1
64827: PUSH
64828: LD_EXP 43
64832: IN
64833: NOT
64834: OR
64835: IFFALSE 64839
// exit ;
64837: GO 65165
// index := GetElementIndex ( minersList , unit ) ;
64839: LD_ADDR_VAR 0 6
64843: PUSH
64844: LD_EXP 43
64848: PPUSH
64849: LD_VAR 0 1
64853: PPUSH
64854: CALL 21551 0 2
64858: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64859: LD_ADDR_VAR 0 8
64863: PUSH
64864: LD_EXP 45
64868: PUSH
64869: LD_EXP 44
64873: PUSH
64874: LD_VAR 0 6
64878: ARRAY
64879: MINUS
64880: ST_TO_ADDR
// if not minesFreeAmount then
64881: LD_VAR 0 8
64885: NOT
64886: IFFALSE 64890
// exit ;
64888: GO 65165
// tmp := [ ] ;
64890: LD_ADDR_VAR 0 7
64894: PUSH
64895: EMPTY
64896: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64897: LD_ADDR_VAR 0 5
64901: PUSH
64902: DOUBLE
64903: LD_INT 1
64905: DEC
64906: ST_TO_ADDR
64907: LD_VAR 0 8
64911: PUSH
64912: FOR_TO
64913: IFFALSE 65112
// begin _d := rand ( 0 , 5 ) ;
64915: LD_ADDR_VAR 0 11
64919: PUSH
64920: LD_INT 0
64922: PPUSH
64923: LD_INT 5
64925: PPUSH
64926: CALL_OW 12
64930: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64931: LD_ADDR_VAR 0 12
64935: PUSH
64936: LD_INT 2
64938: PPUSH
64939: LD_INT 6
64941: PPUSH
64942: CALL_OW 12
64946: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64947: LD_ADDR_VAR 0 9
64951: PUSH
64952: LD_VAR 0 2
64956: PPUSH
64957: LD_VAR 0 11
64961: PPUSH
64962: LD_VAR 0 12
64966: PPUSH
64967: CALL_OW 272
64971: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64972: LD_ADDR_VAR 0 10
64976: PUSH
64977: LD_VAR 0 3
64981: PPUSH
64982: LD_VAR 0 11
64986: PPUSH
64987: LD_VAR 0 12
64991: PPUSH
64992: CALL_OW 273
64996: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64997: LD_VAR 0 9
65001: PPUSH
65002: LD_VAR 0 10
65006: PPUSH
65007: CALL_OW 488
65011: IFFALSE 65035
65013: PUSH
65014: LD_VAR 0 9
65018: PUSH
65019: LD_VAR 0 10
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_VAR 0 7
65032: IN
65033: NOT
65034: AND
65035: IFFALSE 65054
65037: PUSH
65038: LD_VAR 0 9
65042: PPUSH
65043: LD_VAR 0 10
65047: PPUSH
65048: CALL_OW 458
65052: NOT
65053: AND
65054: IFFALSE 65096
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65056: LD_ADDR_VAR 0 7
65060: PUSH
65061: LD_VAR 0 7
65065: PPUSH
65066: LD_VAR 0 7
65070: PUSH
65071: LD_INT 1
65073: PLUS
65074: PPUSH
65075: LD_VAR 0 9
65079: PUSH
65080: LD_VAR 0 10
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PPUSH
65089: CALL_OW 1
65093: ST_TO_ADDR
65094: GO 65110
// i := i - 1 ;
65096: LD_ADDR_VAR 0 5
65100: PUSH
65101: LD_VAR 0 5
65105: PUSH
65106: LD_INT 1
65108: MINUS
65109: ST_TO_ADDR
// end ;
65110: GO 64912
65112: POP
65113: POP
// for i in tmp do
65114: LD_ADDR_VAR 0 5
65118: PUSH
65119: LD_VAR 0 7
65123: PUSH
65124: FOR_IN
65125: IFFALSE 65163
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65127: LD_VAR 0 1
65131: PPUSH
65132: LD_VAR 0 5
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PPUSH
65141: LD_VAR 0 5
65145: PUSH
65146: LD_INT 2
65148: ARRAY
65149: PPUSH
65150: CALL 64097 0 3
65154: NOT
65155: IFFALSE 65161
// exit ;
65157: POP
65158: POP
65159: GO 65165
65161: GO 65124
65163: POP
65164: POP
// end ;
65165: LD_VAR 0 4
65169: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65170: LD_INT 0
65172: PPUSH
65173: PPUSH
65174: PPUSH
65175: PPUSH
65176: PPUSH
65177: PPUSH
65178: PPUSH
65179: PPUSH
65180: PPUSH
// if GetClass ( unit ) <> class_sniper then
65181: LD_VAR 0 1
65185: PPUSH
65186: CALL_OW 257
65190: PUSH
65191: LD_INT 5
65193: NONEQUAL
65194: IFFALSE 65198
// exit ;
65196: GO 65668
// dist := 8 ;
65198: LD_ADDR_VAR 0 5
65202: PUSH
65203: LD_INT 8
65205: ST_TO_ADDR
// viewRange := 12 ;
65206: LD_ADDR_VAR 0 8
65210: PUSH
65211: LD_INT 12
65213: ST_TO_ADDR
// side := GetSide ( unit ) ;
65214: LD_ADDR_VAR 0 6
65218: PUSH
65219: LD_VAR 0 1
65223: PPUSH
65224: CALL_OW 255
65228: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65229: LD_INT 61
65231: PPUSH
65232: LD_VAR 0 6
65236: PPUSH
65237: CALL_OW 321
65241: PUSH
65242: LD_INT 2
65244: EQUAL
65245: IFFALSE 65255
// viewRange := 16 ;
65247: LD_ADDR_VAR 0 8
65251: PUSH
65252: LD_INT 16
65254: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65255: LD_VAR 0 1
65259: PPUSH
65260: LD_VAR 0 2
65264: PPUSH
65265: LD_VAR 0 3
65269: PPUSH
65270: CALL_OW 297
65274: PUSH
65275: LD_VAR 0 5
65279: GREATER
65280: IFFALSE 65359
// begin ComMoveXY ( unit , x , y ) ;
65282: LD_VAR 0 1
65286: PPUSH
65287: LD_VAR 0 2
65291: PPUSH
65292: LD_VAR 0 3
65296: PPUSH
65297: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65301: LD_INT 35
65303: PPUSH
65304: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_VAR 0 2
65317: PPUSH
65318: LD_VAR 0 3
65322: PPUSH
65323: CALL 53597 0 3
65327: NOT
65328: IFFALSE 65332
// exit ;
65330: GO 65668
// until GetDistUnitXY ( unit , x , y ) < dist ;
65332: LD_VAR 0 1
65336: PPUSH
65337: LD_VAR 0 2
65341: PPUSH
65342: LD_VAR 0 3
65346: PPUSH
65347: CALL_OW 297
65351: PUSH
65352: LD_VAR 0 5
65356: LESS
65357: IFFALSE 65301
// end ; ComTurnXY ( unit , x , y ) ;
65359: LD_VAR 0 1
65363: PPUSH
65364: LD_VAR 0 2
65368: PPUSH
65369: LD_VAR 0 3
65373: PPUSH
65374: CALL_OW 118
// repeat if Multiplayer then
65378: LD_OWVAR 4
65382: IFFALSE 65393
// wait ( 35 ) else
65384: LD_INT 35
65386: PPUSH
65387: CALL_OW 67
65391: GO 65400
// wait ( 5 ) ;
65393: LD_INT 5
65395: PPUSH
65396: CALL_OW 67
// _d := GetDir ( unit ) ;
65400: LD_ADDR_VAR 0 11
65404: PUSH
65405: LD_VAR 0 1
65409: PPUSH
65410: CALL_OW 254
65414: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65415: LD_ADDR_VAR 0 7
65419: PUSH
65420: LD_VAR 0 1
65424: PPUSH
65425: CALL_OW 250
65429: PPUSH
65430: LD_VAR 0 1
65434: PPUSH
65435: CALL_OW 251
65439: PPUSH
65440: LD_VAR 0 2
65444: PPUSH
65445: LD_VAR 0 3
65449: PPUSH
65450: CALL 56233 0 4
65454: ST_TO_ADDR
// until dir = _d ;
65455: LD_VAR 0 7
65459: PUSH
65460: LD_VAR 0 11
65464: EQUAL
65465: IFFALSE 65378
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65467: LD_ADDR_VAR 0 9
65471: PUSH
65472: LD_VAR 0 1
65476: PPUSH
65477: CALL_OW 250
65481: PPUSH
65482: LD_VAR 0 7
65486: PPUSH
65487: LD_VAR 0 5
65491: PPUSH
65492: CALL_OW 272
65496: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65497: LD_ADDR_VAR 0 10
65501: PUSH
65502: LD_VAR 0 1
65506: PPUSH
65507: CALL_OW 251
65511: PPUSH
65512: LD_VAR 0 7
65516: PPUSH
65517: LD_VAR 0 5
65521: PPUSH
65522: CALL_OW 273
65526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65527: LD_VAR 0 9
65531: PPUSH
65532: LD_VAR 0 10
65536: PPUSH
65537: CALL_OW 488
65541: NOT
65542: IFFALSE 65546
// exit ;
65544: GO 65668
// ComAnimCustom ( unit , 1 ) ;
65546: LD_VAR 0 1
65550: PPUSH
65551: LD_INT 1
65553: PPUSH
65554: CALL_OW 592
// p := 0 ;
65558: LD_ADDR_VAR 0 12
65562: PUSH
65563: LD_INT 0
65565: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65566: LD_VAR 0 9
65570: PPUSH
65571: LD_VAR 0 10
65575: PPUSH
65576: LD_VAR 0 6
65580: PPUSH
65581: LD_VAR 0 8
65585: PPUSH
65586: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65590: LD_INT 35
65592: PPUSH
65593: CALL_OW 67
// p := Inc ( p ) ;
65597: LD_ADDR_VAR 0 12
65601: PUSH
65602: LD_VAR 0 12
65606: PPUSH
65607: CALL 56189 0 1
65611: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65612: LD_VAR 0 12
65616: PUSH
65617: LD_INT 3
65619: EQUAL
65620: IFTRUE 65634
65622: PUSH
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 302
65632: NOT
65633: OR
65634: IFTRUE 65647
65636: PUSH
65637: LD_VAR 0 1
65641: PPUSH
65642: CALL_OW 301
65646: OR
65647: IFFALSE 65590
// RemoveSeeing ( _x , _y , side ) ;
65649: LD_VAR 0 9
65653: PPUSH
65654: LD_VAR 0 10
65658: PPUSH
65659: LD_VAR 0 6
65663: PPUSH
65664: CALL_OW 331
// end ; end_of_file
65668: LD_VAR 0 4
65672: RET
// export globalGameSaveCounter ; every 0 0$1 do
65673: GO 65675
65675: DISABLE
// begin enable ;
65676: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65677: LD_STRING updateTimer(
65679: PUSH
65680: LD_OWVAR 1
65684: STR
65685: PUSH
65686: LD_STRING );
65688: STR
65689: PPUSH
65690: CALL_OW 559
// end ;
65694: END
// every 0 0$1 do
65695: GO 65697
65697: DISABLE
// begin globalGameSaveCounter := 0 ;
65698: LD_ADDR_EXP 46
65702: PUSH
65703: LD_INT 0
65705: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
65706: LD_STRING setGameSaveCounter(0)
65708: PPUSH
65709: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
65713: LD_STRING initStreamRollete();
65715: PPUSH
65716: CALL_OW 559
// InitStreamMode ;
65720: CALL 67065 0 0
// DefineStreamItems ( false ) ;
65724: LD_INT 0
65726: PPUSH
65727: CALL 67529 0 1
// end ;
65731: END
// export function SOS_MapStart ( ) ; begin
65732: LD_INT 0
65734: PPUSH
// if streamModeActive then
65735: LD_EXP 47
65739: IFFALSE 65748
// DefineStreamItems ( true ) ;
65741: LD_INT 1
65743: PPUSH
65744: CALL 67529 0 1
// UpdateLuaVariables ( ) ;
65748: CALL 65765 0 0
// UpdateFactoryWaypoints ( ) ;
65752: CALL 80651 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65756: CALL 80903 0 0
// end ;
65760: LD_VAR 0 1
65764: RET
// function UpdateLuaVariables ( ) ; begin
65765: LD_INT 0
65767: PPUSH
// if globalGameSaveCounter then
65768: LD_EXP 46
65772: IFFALSE 65806
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
65774: LD_ADDR_EXP 46
65778: PUSH
65779: LD_EXP 46
65783: PPUSH
65784: CALL 56189 0 1
65788: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65789: LD_STRING setGameSaveCounter(
65791: PUSH
65792: LD_EXP 46
65796: STR
65797: PUSH
65798: LD_STRING )
65800: STR
65801: PPUSH
65802: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65806: LD_STRING setGameDifficulty(
65808: PUSH
65809: LD_OWVAR 67
65813: STR
65814: PUSH
65815: LD_STRING )
65817: STR
65818: PPUSH
65819: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65823: LD_STRING displayDifficulty(
65825: PUSH
65826: LD_OWVAR 67
65830: STR
65831: PUSH
65832: LD_STRING )
65834: STR
65835: PPUSH
65836: CALL_OW 559
// end ;
65840: LD_VAR 0 1
65844: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65845: LD_INT 0
65847: PPUSH
// if p2 = stream_mode then
65848: LD_VAR 0 2
65852: PUSH
65853: LD_INT 100
65855: EQUAL
65856: IFFALSE 66859
// begin if not StreamModeActive then
65858: LD_EXP 47
65862: NOT
65863: IFFALSE 65873
// StreamModeActive := true ;
65865: LD_ADDR_EXP 47
65869: PUSH
65870: LD_INT 1
65872: ST_TO_ADDR
// if p3 = 0 then
65873: LD_VAR 0 3
65877: PUSH
65878: LD_INT 0
65880: EQUAL
65881: IFFALSE 65887
// InitStreamMode ;
65883: CALL 67065 0 0
// if p3 = 1 then
65887: LD_VAR 0 3
65891: PUSH
65892: LD_INT 1
65894: EQUAL
65895: IFFALSE 65905
// sRocket := true ;
65897: LD_ADDR_EXP 52
65901: PUSH
65902: LD_INT 1
65904: ST_TO_ADDR
// if p3 = 2 then
65905: LD_VAR 0 3
65909: PUSH
65910: LD_INT 2
65912: EQUAL
65913: IFFALSE 65923
// sSpeed := true ;
65915: LD_ADDR_EXP 51
65919: PUSH
65920: LD_INT 1
65922: ST_TO_ADDR
// if p3 = 3 then
65923: LD_VAR 0 3
65927: PUSH
65928: LD_INT 3
65930: EQUAL
65931: IFFALSE 65941
// sEngine := true ;
65933: LD_ADDR_EXP 53
65937: PUSH
65938: LD_INT 1
65940: ST_TO_ADDR
// if p3 = 4 then
65941: LD_VAR 0 3
65945: PUSH
65946: LD_INT 4
65948: EQUAL
65949: IFFALSE 65959
// sSpec := true ;
65951: LD_ADDR_EXP 50
65955: PUSH
65956: LD_INT 1
65958: ST_TO_ADDR
// if p3 = 5 then
65959: LD_VAR 0 3
65963: PUSH
65964: LD_INT 5
65966: EQUAL
65967: IFFALSE 65977
// sLevel := true ;
65969: LD_ADDR_EXP 54
65973: PUSH
65974: LD_INT 1
65976: ST_TO_ADDR
// if p3 = 6 then
65977: LD_VAR 0 3
65981: PUSH
65982: LD_INT 6
65984: EQUAL
65985: IFFALSE 65995
// sArmoury := true ;
65987: LD_ADDR_EXP 55
65991: PUSH
65992: LD_INT 1
65994: ST_TO_ADDR
// if p3 = 7 then
65995: LD_VAR 0 3
65999: PUSH
66000: LD_INT 7
66002: EQUAL
66003: IFFALSE 66013
// sRadar := true ;
66005: LD_ADDR_EXP 56
66009: PUSH
66010: LD_INT 1
66012: ST_TO_ADDR
// if p3 = 8 then
66013: LD_VAR 0 3
66017: PUSH
66018: LD_INT 8
66020: EQUAL
66021: IFFALSE 66031
// sBunker := true ;
66023: LD_ADDR_EXP 57
66027: PUSH
66028: LD_INT 1
66030: ST_TO_ADDR
// if p3 = 9 then
66031: LD_VAR 0 3
66035: PUSH
66036: LD_INT 9
66038: EQUAL
66039: IFFALSE 66049
// sHack := true ;
66041: LD_ADDR_EXP 58
66045: PUSH
66046: LD_INT 1
66048: ST_TO_ADDR
// if p3 = 10 then
66049: LD_VAR 0 3
66053: PUSH
66054: LD_INT 10
66056: EQUAL
66057: IFFALSE 66067
// sFire := true ;
66059: LD_ADDR_EXP 59
66063: PUSH
66064: LD_INT 1
66066: ST_TO_ADDR
// if p3 = 11 then
66067: LD_VAR 0 3
66071: PUSH
66072: LD_INT 11
66074: EQUAL
66075: IFFALSE 66085
// sRefresh := true ;
66077: LD_ADDR_EXP 60
66081: PUSH
66082: LD_INT 1
66084: ST_TO_ADDR
// if p3 = 12 then
66085: LD_VAR 0 3
66089: PUSH
66090: LD_INT 12
66092: EQUAL
66093: IFFALSE 66103
// sExp := true ;
66095: LD_ADDR_EXP 61
66099: PUSH
66100: LD_INT 1
66102: ST_TO_ADDR
// if p3 = 13 then
66103: LD_VAR 0 3
66107: PUSH
66108: LD_INT 13
66110: EQUAL
66111: IFFALSE 66121
// sDepot := true ;
66113: LD_ADDR_EXP 62
66117: PUSH
66118: LD_INT 1
66120: ST_TO_ADDR
// if p3 = 14 then
66121: LD_VAR 0 3
66125: PUSH
66126: LD_INT 14
66128: EQUAL
66129: IFFALSE 66139
// sFlag := true ;
66131: LD_ADDR_EXP 63
66135: PUSH
66136: LD_INT 1
66138: ST_TO_ADDR
// if p3 = 15 then
66139: LD_VAR 0 3
66143: PUSH
66144: LD_INT 15
66146: EQUAL
66147: IFFALSE 66157
// sKamikadze := true ;
66149: LD_ADDR_EXP 71
66153: PUSH
66154: LD_INT 1
66156: ST_TO_ADDR
// if p3 = 16 then
66157: LD_VAR 0 3
66161: PUSH
66162: LD_INT 16
66164: EQUAL
66165: IFFALSE 66175
// sTroll := true ;
66167: LD_ADDR_EXP 72
66171: PUSH
66172: LD_INT 1
66174: ST_TO_ADDR
// if p3 = 17 then
66175: LD_VAR 0 3
66179: PUSH
66180: LD_INT 17
66182: EQUAL
66183: IFFALSE 66193
// sSlow := true ;
66185: LD_ADDR_EXP 73
66189: PUSH
66190: LD_INT 1
66192: ST_TO_ADDR
// if p3 = 18 then
66193: LD_VAR 0 3
66197: PUSH
66198: LD_INT 18
66200: EQUAL
66201: IFFALSE 66211
// sLack := true ;
66203: LD_ADDR_EXP 74
66207: PUSH
66208: LD_INT 1
66210: ST_TO_ADDR
// if p3 = 19 then
66211: LD_VAR 0 3
66215: PUSH
66216: LD_INT 19
66218: EQUAL
66219: IFFALSE 66229
// sTank := true ;
66221: LD_ADDR_EXP 76
66225: PUSH
66226: LD_INT 1
66228: ST_TO_ADDR
// if p3 = 20 then
66229: LD_VAR 0 3
66233: PUSH
66234: LD_INT 20
66236: EQUAL
66237: IFFALSE 66247
// sRemote := true ;
66239: LD_ADDR_EXP 77
66243: PUSH
66244: LD_INT 1
66246: ST_TO_ADDR
// if p3 = 21 then
66247: LD_VAR 0 3
66251: PUSH
66252: LD_INT 21
66254: EQUAL
66255: IFFALSE 66265
// sPowell := true ;
66257: LD_ADDR_EXP 78
66261: PUSH
66262: LD_INT 1
66264: ST_TO_ADDR
// if p3 = 22 then
66265: LD_VAR 0 3
66269: PUSH
66270: LD_INT 22
66272: EQUAL
66273: IFFALSE 66283
// sTeleport := true ;
66275: LD_ADDR_EXP 81
66279: PUSH
66280: LD_INT 1
66282: ST_TO_ADDR
// if p3 = 23 then
66283: LD_VAR 0 3
66287: PUSH
66288: LD_INT 23
66290: EQUAL
66291: IFFALSE 66301
// sOilTower := true ;
66293: LD_ADDR_EXP 83
66297: PUSH
66298: LD_INT 1
66300: ST_TO_ADDR
// if p3 = 24 then
66301: LD_VAR 0 3
66305: PUSH
66306: LD_INT 24
66308: EQUAL
66309: IFFALSE 66319
// sShovel := true ;
66311: LD_ADDR_EXP 84
66315: PUSH
66316: LD_INT 1
66318: ST_TO_ADDR
// if p3 = 25 then
66319: LD_VAR 0 3
66323: PUSH
66324: LD_INT 25
66326: EQUAL
66327: IFFALSE 66337
// sSheik := true ;
66329: LD_ADDR_EXP 85
66333: PUSH
66334: LD_INT 1
66336: ST_TO_ADDR
// if p3 = 26 then
66337: LD_VAR 0 3
66341: PUSH
66342: LD_INT 26
66344: EQUAL
66345: IFFALSE 66355
// sEarthquake := true ;
66347: LD_ADDR_EXP 87
66351: PUSH
66352: LD_INT 1
66354: ST_TO_ADDR
// if p3 = 27 then
66355: LD_VAR 0 3
66359: PUSH
66360: LD_INT 27
66362: EQUAL
66363: IFFALSE 66373
// sAI := true ;
66365: LD_ADDR_EXP 88
66369: PUSH
66370: LD_INT 1
66372: ST_TO_ADDR
// if p3 = 28 then
66373: LD_VAR 0 3
66377: PUSH
66378: LD_INT 28
66380: EQUAL
66381: IFFALSE 66391
// sCargo := true ;
66383: LD_ADDR_EXP 91
66387: PUSH
66388: LD_INT 1
66390: ST_TO_ADDR
// if p3 = 29 then
66391: LD_VAR 0 3
66395: PUSH
66396: LD_INT 29
66398: EQUAL
66399: IFFALSE 66409
// sDLaser := true ;
66401: LD_ADDR_EXP 92
66405: PUSH
66406: LD_INT 1
66408: ST_TO_ADDR
// if p3 = 30 then
66409: LD_VAR 0 3
66413: PUSH
66414: LD_INT 30
66416: EQUAL
66417: IFFALSE 66427
// sExchange := true ;
66419: LD_ADDR_EXP 93
66423: PUSH
66424: LD_INT 1
66426: ST_TO_ADDR
// if p3 = 31 then
66427: LD_VAR 0 3
66431: PUSH
66432: LD_INT 31
66434: EQUAL
66435: IFFALSE 66445
// sFac := true ;
66437: LD_ADDR_EXP 94
66441: PUSH
66442: LD_INT 1
66444: ST_TO_ADDR
// if p3 = 32 then
66445: LD_VAR 0 3
66449: PUSH
66450: LD_INT 32
66452: EQUAL
66453: IFFALSE 66463
// sPower := true ;
66455: LD_ADDR_EXP 95
66459: PUSH
66460: LD_INT 1
66462: ST_TO_ADDR
// if p3 = 33 then
66463: LD_VAR 0 3
66467: PUSH
66468: LD_INT 33
66470: EQUAL
66471: IFFALSE 66481
// sRandom := true ;
66473: LD_ADDR_EXP 96
66477: PUSH
66478: LD_INT 1
66480: ST_TO_ADDR
// if p3 = 34 then
66481: LD_VAR 0 3
66485: PUSH
66486: LD_INT 34
66488: EQUAL
66489: IFFALSE 66499
// sShield := true ;
66491: LD_ADDR_EXP 97
66495: PUSH
66496: LD_INT 1
66498: ST_TO_ADDR
// if p3 = 35 then
66499: LD_VAR 0 3
66503: PUSH
66504: LD_INT 35
66506: EQUAL
66507: IFFALSE 66517
// sTime := true ;
66509: LD_ADDR_EXP 98
66513: PUSH
66514: LD_INT 1
66516: ST_TO_ADDR
// if p3 = 36 then
66517: LD_VAR 0 3
66521: PUSH
66522: LD_INT 36
66524: EQUAL
66525: IFFALSE 66535
// sTools := true ;
66527: LD_ADDR_EXP 99
66531: PUSH
66532: LD_INT 1
66534: ST_TO_ADDR
// if p3 = 101 then
66535: LD_VAR 0 3
66539: PUSH
66540: LD_INT 101
66542: EQUAL
66543: IFFALSE 66553
// sSold := true ;
66545: LD_ADDR_EXP 64
66549: PUSH
66550: LD_INT 1
66552: ST_TO_ADDR
// if p3 = 102 then
66553: LD_VAR 0 3
66557: PUSH
66558: LD_INT 102
66560: EQUAL
66561: IFFALSE 66571
// sDiff := true ;
66563: LD_ADDR_EXP 65
66567: PUSH
66568: LD_INT 1
66570: ST_TO_ADDR
// if p3 = 103 then
66571: LD_VAR 0 3
66575: PUSH
66576: LD_INT 103
66578: EQUAL
66579: IFFALSE 66589
// sFog := true ;
66581: LD_ADDR_EXP 68
66585: PUSH
66586: LD_INT 1
66588: ST_TO_ADDR
// if p3 = 104 then
66589: LD_VAR 0 3
66593: PUSH
66594: LD_INT 104
66596: EQUAL
66597: IFFALSE 66607
// sReset := true ;
66599: LD_ADDR_EXP 69
66603: PUSH
66604: LD_INT 1
66606: ST_TO_ADDR
// if p3 = 105 then
66607: LD_VAR 0 3
66611: PUSH
66612: LD_INT 105
66614: EQUAL
66615: IFFALSE 66625
// sSun := true ;
66617: LD_ADDR_EXP 70
66621: PUSH
66622: LD_INT 1
66624: ST_TO_ADDR
// if p3 = 106 then
66625: LD_VAR 0 3
66629: PUSH
66630: LD_INT 106
66632: EQUAL
66633: IFFALSE 66643
// sTiger := true ;
66635: LD_ADDR_EXP 66
66639: PUSH
66640: LD_INT 1
66642: ST_TO_ADDR
// if p3 = 107 then
66643: LD_VAR 0 3
66647: PUSH
66648: LD_INT 107
66650: EQUAL
66651: IFFALSE 66661
// sBomb := true ;
66653: LD_ADDR_EXP 67
66657: PUSH
66658: LD_INT 1
66660: ST_TO_ADDR
// if p3 = 108 then
66661: LD_VAR 0 3
66665: PUSH
66666: LD_INT 108
66668: EQUAL
66669: IFFALSE 66679
// sWound := true ;
66671: LD_ADDR_EXP 75
66675: PUSH
66676: LD_INT 1
66678: ST_TO_ADDR
// if p3 = 109 then
66679: LD_VAR 0 3
66683: PUSH
66684: LD_INT 109
66686: EQUAL
66687: IFFALSE 66697
// sBetray := true ;
66689: LD_ADDR_EXP 79
66693: PUSH
66694: LD_INT 1
66696: ST_TO_ADDR
// if p3 = 110 then
66697: LD_VAR 0 3
66701: PUSH
66702: LD_INT 110
66704: EQUAL
66705: IFFALSE 66715
// sContamin := true ;
66707: LD_ADDR_EXP 80
66711: PUSH
66712: LD_INT 1
66714: ST_TO_ADDR
// if p3 = 111 then
66715: LD_VAR 0 3
66719: PUSH
66720: LD_INT 111
66722: EQUAL
66723: IFFALSE 66733
// sOil := true ;
66725: LD_ADDR_EXP 82
66729: PUSH
66730: LD_INT 1
66732: ST_TO_ADDR
// if p3 = 112 then
66733: LD_VAR 0 3
66737: PUSH
66738: LD_INT 112
66740: EQUAL
66741: IFFALSE 66751
// sStu := true ;
66743: LD_ADDR_EXP 86
66747: PUSH
66748: LD_INT 1
66750: ST_TO_ADDR
// if p3 = 113 then
66751: LD_VAR 0 3
66755: PUSH
66756: LD_INT 113
66758: EQUAL
66759: IFFALSE 66769
// sBazooka := true ;
66761: LD_ADDR_EXP 89
66765: PUSH
66766: LD_INT 1
66768: ST_TO_ADDR
// if p3 = 114 then
66769: LD_VAR 0 3
66773: PUSH
66774: LD_INT 114
66776: EQUAL
66777: IFFALSE 66787
// sMortar := true ;
66779: LD_ADDR_EXP 90
66783: PUSH
66784: LD_INT 1
66786: ST_TO_ADDR
// if p3 = 115 then
66787: LD_VAR 0 3
66791: PUSH
66792: LD_INT 115
66794: EQUAL
66795: IFFALSE 66805
// sRanger := true ;
66797: LD_ADDR_EXP 100
66801: PUSH
66802: LD_INT 1
66804: ST_TO_ADDR
// if p3 = 116 then
66805: LD_VAR 0 3
66809: PUSH
66810: LD_INT 116
66812: EQUAL
66813: IFFALSE 66823
// sComputer := true ;
66815: LD_ADDR_EXP 101
66819: PUSH
66820: LD_INT 1
66822: ST_TO_ADDR
// if p3 = 117 then
66823: LD_VAR 0 3
66827: PUSH
66828: LD_INT 117
66830: EQUAL
66831: IFFALSE 66841
// s30 := true ;
66833: LD_ADDR_EXP 102
66837: PUSH
66838: LD_INT 1
66840: ST_TO_ADDR
// if p3 = 118 then
66841: LD_VAR 0 3
66845: PUSH
66846: LD_INT 118
66848: EQUAL
66849: IFFALSE 66859
// s60 := true ;
66851: LD_ADDR_EXP 103
66855: PUSH
66856: LD_INT 1
66858: ST_TO_ADDR
// end ; if p2 = hack_mode then
66859: LD_VAR 0 2
66863: PUSH
66864: LD_INT 101
66866: EQUAL
66867: IFFALSE 66995
// begin case p3 of 1 :
66869: LD_VAR 0 3
66873: PUSH
66874: LD_INT 1
66876: DOUBLE
66877: EQUAL
66878: IFTRUE 66882
66880: GO 66889
66882: POP
// hHackUnlimitedResources ; 2 :
66883: CALL 79258 0 0
66887: GO 66995
66889: LD_INT 2
66891: DOUBLE
66892: EQUAL
66893: IFTRUE 66897
66895: GO 66904
66897: POP
// hHackSetLevel10 ; 3 :
66898: CALL 79391 0 0
66902: GO 66995
66904: LD_INT 3
66906: DOUBLE
66907: EQUAL
66908: IFTRUE 66912
66910: GO 66919
66912: POP
// hHackSetLevel10YourUnits ; 4 :
66913: CALL 79476 0 0
66917: GO 66995
66919: LD_INT 4
66921: DOUBLE
66922: EQUAL
66923: IFTRUE 66927
66925: GO 66934
66927: POP
// hHackInvincible ; 5 :
66928: CALL 79924 0 0
66932: GO 66995
66934: LD_INT 5
66936: DOUBLE
66937: EQUAL
66938: IFTRUE 66942
66940: GO 66949
66942: POP
// hHackInvisible ; 6 :
66943: CALL 80035 0 0
66947: GO 66995
66949: LD_INT 6
66951: DOUBLE
66952: EQUAL
66953: IFTRUE 66957
66955: GO 66964
66957: POP
// hHackChangeYourSide ; 7 :
66958: CALL 80092 0 0
66962: GO 66995
66964: LD_INT 7
66966: DOUBLE
66967: EQUAL
66968: IFTRUE 66972
66970: GO 66979
66972: POP
// hHackChangeUnitSide ; 8 :
66973: CALL 80134 0 0
66977: GO 66995
66979: LD_INT 8
66981: DOUBLE
66982: EQUAL
66983: IFTRUE 66987
66985: GO 66994
66987: POP
// hHackFog ; end ;
66988: CALL 80235 0 0
66992: GO 66995
66994: POP
// end ; if p2 = game_save_mode then
66995: LD_VAR 0 2
66999: PUSH
67000: LD_INT 102
67002: EQUAL
67003: IFFALSE 67060
// begin if p3 = 1 then
67005: LD_VAR 0 3
67009: PUSH
67010: LD_INT 1
67012: EQUAL
67013: IFFALSE 67025
// globalGameSaveCounter := p4 ;
67015: LD_ADDR_EXP 46
67019: PUSH
67020: LD_VAR 0 4
67024: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
67025: LD_VAR 0 3
67029: PUSH
67030: LD_INT 2
67032: EQUAL
67033: IFFALSE 67041
67035: PUSH
67036: LD_EXP 46
67040: AND
67041: IFFALSE 67060
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
67043: LD_STRING setGameSaveCounter(
67045: PUSH
67046: LD_EXP 46
67050: STR
67051: PUSH
67052: LD_STRING )
67054: STR
67055: PPUSH
67056: CALL_OW 559
// end ; end ;
67060: LD_VAR 0 7
67064: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
67065: LD_INT 0
67067: PPUSH
// streamModeActive := false ;
67068: LD_ADDR_EXP 47
67072: PUSH
67073: LD_INT 0
67075: ST_TO_ADDR
// normalCounter := 36 ;
67076: LD_ADDR_EXP 48
67080: PUSH
67081: LD_INT 36
67083: ST_TO_ADDR
// hardcoreCounter := 18 ;
67084: LD_ADDR_EXP 49
67088: PUSH
67089: LD_INT 18
67091: ST_TO_ADDR
// sRocket := false ;
67092: LD_ADDR_EXP 52
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// sSpeed := false ;
67100: LD_ADDR_EXP 51
67104: PUSH
67105: LD_INT 0
67107: ST_TO_ADDR
// sEngine := false ;
67108: LD_ADDR_EXP 53
67112: PUSH
67113: LD_INT 0
67115: ST_TO_ADDR
// sSpec := false ;
67116: LD_ADDR_EXP 50
67120: PUSH
67121: LD_INT 0
67123: ST_TO_ADDR
// sLevel := false ;
67124: LD_ADDR_EXP 54
67128: PUSH
67129: LD_INT 0
67131: ST_TO_ADDR
// sArmoury := false ;
67132: LD_ADDR_EXP 55
67136: PUSH
67137: LD_INT 0
67139: ST_TO_ADDR
// sRadar := false ;
67140: LD_ADDR_EXP 56
67144: PUSH
67145: LD_INT 0
67147: ST_TO_ADDR
// sBunker := false ;
67148: LD_ADDR_EXP 57
67152: PUSH
67153: LD_INT 0
67155: ST_TO_ADDR
// sHack := false ;
67156: LD_ADDR_EXP 58
67160: PUSH
67161: LD_INT 0
67163: ST_TO_ADDR
// sFire := false ;
67164: LD_ADDR_EXP 59
67168: PUSH
67169: LD_INT 0
67171: ST_TO_ADDR
// sRefresh := false ;
67172: LD_ADDR_EXP 60
67176: PUSH
67177: LD_INT 0
67179: ST_TO_ADDR
// sExp := false ;
67180: LD_ADDR_EXP 61
67184: PUSH
67185: LD_INT 0
67187: ST_TO_ADDR
// sDepot := false ;
67188: LD_ADDR_EXP 62
67192: PUSH
67193: LD_INT 0
67195: ST_TO_ADDR
// sFlag := false ;
67196: LD_ADDR_EXP 63
67200: PUSH
67201: LD_INT 0
67203: ST_TO_ADDR
// sKamikadze := false ;
67204: LD_ADDR_EXP 71
67208: PUSH
67209: LD_INT 0
67211: ST_TO_ADDR
// sTroll := false ;
67212: LD_ADDR_EXP 72
67216: PUSH
67217: LD_INT 0
67219: ST_TO_ADDR
// sSlow := false ;
67220: LD_ADDR_EXP 73
67224: PUSH
67225: LD_INT 0
67227: ST_TO_ADDR
// sLack := false ;
67228: LD_ADDR_EXP 74
67232: PUSH
67233: LD_INT 0
67235: ST_TO_ADDR
// sTank := false ;
67236: LD_ADDR_EXP 76
67240: PUSH
67241: LD_INT 0
67243: ST_TO_ADDR
// sRemote := false ;
67244: LD_ADDR_EXP 77
67248: PUSH
67249: LD_INT 0
67251: ST_TO_ADDR
// sPowell := false ;
67252: LD_ADDR_EXP 78
67256: PUSH
67257: LD_INT 0
67259: ST_TO_ADDR
// sTeleport := false ;
67260: LD_ADDR_EXP 81
67264: PUSH
67265: LD_INT 0
67267: ST_TO_ADDR
// sOilTower := false ;
67268: LD_ADDR_EXP 83
67272: PUSH
67273: LD_INT 0
67275: ST_TO_ADDR
// sShovel := false ;
67276: LD_ADDR_EXP 84
67280: PUSH
67281: LD_INT 0
67283: ST_TO_ADDR
// sSheik := false ;
67284: LD_ADDR_EXP 85
67288: PUSH
67289: LD_INT 0
67291: ST_TO_ADDR
// sEarthquake := false ;
67292: LD_ADDR_EXP 87
67296: PUSH
67297: LD_INT 0
67299: ST_TO_ADDR
// sAI := false ;
67300: LD_ADDR_EXP 88
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// sCargo := false ;
67308: LD_ADDR_EXP 91
67312: PUSH
67313: LD_INT 0
67315: ST_TO_ADDR
// sDLaser := false ;
67316: LD_ADDR_EXP 92
67320: PUSH
67321: LD_INT 0
67323: ST_TO_ADDR
// sExchange := false ;
67324: LD_ADDR_EXP 93
67328: PUSH
67329: LD_INT 0
67331: ST_TO_ADDR
// sFac := false ;
67332: LD_ADDR_EXP 94
67336: PUSH
67337: LD_INT 0
67339: ST_TO_ADDR
// sPower := false ;
67340: LD_ADDR_EXP 95
67344: PUSH
67345: LD_INT 0
67347: ST_TO_ADDR
// sRandom := false ;
67348: LD_ADDR_EXP 96
67352: PUSH
67353: LD_INT 0
67355: ST_TO_ADDR
// sShield := false ;
67356: LD_ADDR_EXP 97
67360: PUSH
67361: LD_INT 0
67363: ST_TO_ADDR
// sTime := false ;
67364: LD_ADDR_EXP 98
67368: PUSH
67369: LD_INT 0
67371: ST_TO_ADDR
// sTools := false ;
67372: LD_ADDR_EXP 99
67376: PUSH
67377: LD_INT 0
67379: ST_TO_ADDR
// sSold := false ;
67380: LD_ADDR_EXP 64
67384: PUSH
67385: LD_INT 0
67387: ST_TO_ADDR
// sDiff := false ;
67388: LD_ADDR_EXP 65
67392: PUSH
67393: LD_INT 0
67395: ST_TO_ADDR
// sFog := false ;
67396: LD_ADDR_EXP 68
67400: PUSH
67401: LD_INT 0
67403: ST_TO_ADDR
// sReset := false ;
67404: LD_ADDR_EXP 69
67408: PUSH
67409: LD_INT 0
67411: ST_TO_ADDR
// sSun := false ;
67412: LD_ADDR_EXP 70
67416: PUSH
67417: LD_INT 0
67419: ST_TO_ADDR
// sTiger := false ;
67420: LD_ADDR_EXP 66
67424: PUSH
67425: LD_INT 0
67427: ST_TO_ADDR
// sBomb := false ;
67428: LD_ADDR_EXP 67
67432: PUSH
67433: LD_INT 0
67435: ST_TO_ADDR
// sWound := false ;
67436: LD_ADDR_EXP 75
67440: PUSH
67441: LD_INT 0
67443: ST_TO_ADDR
// sBetray := false ;
67444: LD_ADDR_EXP 79
67448: PUSH
67449: LD_INT 0
67451: ST_TO_ADDR
// sContamin := false ;
67452: LD_ADDR_EXP 80
67456: PUSH
67457: LD_INT 0
67459: ST_TO_ADDR
// sOil := false ;
67460: LD_ADDR_EXP 82
67464: PUSH
67465: LD_INT 0
67467: ST_TO_ADDR
// sStu := false ;
67468: LD_ADDR_EXP 86
67472: PUSH
67473: LD_INT 0
67475: ST_TO_ADDR
// sBazooka := false ;
67476: LD_ADDR_EXP 89
67480: PUSH
67481: LD_INT 0
67483: ST_TO_ADDR
// sMortar := false ;
67484: LD_ADDR_EXP 90
67488: PUSH
67489: LD_INT 0
67491: ST_TO_ADDR
// sRanger := false ;
67492: LD_ADDR_EXP 100
67496: PUSH
67497: LD_INT 0
67499: ST_TO_ADDR
// sComputer := false ;
67500: LD_ADDR_EXP 101
67504: PUSH
67505: LD_INT 0
67507: ST_TO_ADDR
// s30 := false ;
67508: LD_ADDR_EXP 102
67512: PUSH
67513: LD_INT 0
67515: ST_TO_ADDR
// s60 := false ;
67516: LD_ADDR_EXP 103
67520: PUSH
67521: LD_INT 0
67523: ST_TO_ADDR
// end ;
67524: LD_VAR 0 1
67528: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
67529: LD_INT 0
67531: PPUSH
67532: PPUSH
67533: PPUSH
67534: PPUSH
67535: PPUSH
67536: PPUSH
67537: PPUSH
// result := [ ] ;
67538: LD_ADDR_VAR 0 2
67542: PUSH
67543: EMPTY
67544: ST_TO_ADDR
// if campaign_id = 1 then
67545: LD_OWVAR 69
67549: PUSH
67550: LD_INT 1
67552: EQUAL
67553: IFFALSE 70719
// begin case mission_number of 1 :
67555: LD_OWVAR 70
67559: PUSH
67560: LD_INT 1
67562: DOUBLE
67563: EQUAL
67564: IFTRUE 67568
67566: GO 67644
67568: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
67569: LD_ADDR_VAR 0 2
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: LD_INT 4
67579: PUSH
67580: LD_INT 11
67582: PUSH
67583: LD_INT 12
67585: PUSH
67586: LD_INT 15
67588: PUSH
67589: LD_INT 16
67591: PUSH
67592: LD_INT 22
67594: PUSH
67595: LD_INT 23
67597: PUSH
67598: LD_INT 26
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 101
67614: PUSH
67615: LD_INT 102
67617: PUSH
67618: LD_INT 106
67620: PUSH
67621: LD_INT 116
67623: PUSH
67624: LD_INT 117
67626: PUSH
67627: LD_INT 118
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: ST_TO_ADDR
67642: GO 70717
67644: LD_INT 2
67646: DOUBLE
67647: EQUAL
67648: IFTRUE 67652
67650: GO 67736
67652: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
67653: LD_ADDR_VAR 0 2
67657: PUSH
67658: LD_INT 2
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: LD_INT 11
67666: PUSH
67667: LD_INT 12
67669: PUSH
67670: LD_INT 15
67672: PUSH
67673: LD_INT 16
67675: PUSH
67676: LD_INT 22
67678: PUSH
67679: LD_INT 23
67681: PUSH
67682: LD_INT 26
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 101
67698: PUSH
67699: LD_INT 102
67701: PUSH
67702: LD_INT 105
67704: PUSH
67705: LD_INT 106
67707: PUSH
67708: LD_INT 108
67710: PUSH
67711: LD_INT 116
67713: PUSH
67714: LD_INT 117
67716: PUSH
67717: LD_INT 118
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: ST_TO_ADDR
67734: GO 70717
67736: LD_INT 3
67738: DOUBLE
67739: EQUAL
67740: IFTRUE 67744
67742: GO 67832
67744: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
67745: LD_ADDR_VAR 0 2
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: LD_INT 4
67755: PUSH
67756: LD_INT 5
67758: PUSH
67759: LD_INT 11
67761: PUSH
67762: LD_INT 12
67764: PUSH
67765: LD_INT 15
67767: PUSH
67768: LD_INT 16
67770: PUSH
67771: LD_INT 22
67773: PUSH
67774: LD_INT 26
67776: PUSH
67777: LD_INT 36
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 101
67794: PUSH
67795: LD_INT 102
67797: PUSH
67798: LD_INT 105
67800: PUSH
67801: LD_INT 106
67803: PUSH
67804: LD_INT 108
67806: PUSH
67807: LD_INT 116
67809: PUSH
67810: LD_INT 117
67812: PUSH
67813: LD_INT 118
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: ST_TO_ADDR
67830: GO 70717
67832: LD_INT 4
67834: DOUBLE
67835: EQUAL
67836: IFTRUE 67840
67838: GO 67936
67840: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
67841: LD_ADDR_VAR 0 2
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: LD_INT 4
67851: PUSH
67852: LD_INT 5
67854: PUSH
67855: LD_INT 8
67857: PUSH
67858: LD_INT 11
67860: PUSH
67861: LD_INT 12
67863: PUSH
67864: LD_INT 15
67866: PUSH
67867: LD_INT 16
67869: PUSH
67870: LD_INT 22
67872: PUSH
67873: LD_INT 23
67875: PUSH
67876: LD_INT 26
67878: PUSH
67879: LD_INT 36
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 101
67898: PUSH
67899: LD_INT 102
67901: PUSH
67902: LD_INT 105
67904: PUSH
67905: LD_INT 106
67907: PUSH
67908: LD_INT 108
67910: PUSH
67911: LD_INT 116
67913: PUSH
67914: LD_INT 117
67916: PUSH
67917: LD_INT 118
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: ST_TO_ADDR
67934: GO 70717
67936: LD_INT 5
67938: DOUBLE
67939: EQUAL
67940: IFTRUE 67944
67942: GO 68056
67944: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67945: LD_ADDR_VAR 0 2
67949: PUSH
67950: LD_INT 2
67952: PUSH
67953: LD_INT 4
67955: PUSH
67956: LD_INT 5
67958: PUSH
67959: LD_INT 6
67961: PUSH
67962: LD_INT 8
67964: PUSH
67965: LD_INT 11
67967: PUSH
67968: LD_INT 12
67970: PUSH
67971: LD_INT 15
67973: PUSH
67974: LD_INT 16
67976: PUSH
67977: LD_INT 22
67979: PUSH
67980: LD_INT 23
67982: PUSH
67983: LD_INT 25
67985: PUSH
67986: LD_INT 26
67988: PUSH
67989: LD_INT 36
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 101
68010: PUSH
68011: LD_INT 102
68013: PUSH
68014: LD_INT 105
68016: PUSH
68017: LD_INT 106
68019: PUSH
68020: LD_INT 108
68022: PUSH
68023: LD_INT 109
68025: PUSH
68026: LD_INT 112
68028: PUSH
68029: LD_INT 116
68031: PUSH
68032: LD_INT 117
68034: PUSH
68035: LD_INT 118
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: ST_TO_ADDR
68054: GO 70717
68056: LD_INT 6
68058: DOUBLE
68059: EQUAL
68060: IFTRUE 68064
68062: GO 68196
68064: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68065: LD_ADDR_VAR 0 2
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: LD_INT 4
68075: PUSH
68076: LD_INT 5
68078: PUSH
68079: LD_INT 6
68081: PUSH
68082: LD_INT 8
68084: PUSH
68085: LD_INT 11
68087: PUSH
68088: LD_INT 12
68090: PUSH
68091: LD_INT 15
68093: PUSH
68094: LD_INT 16
68096: PUSH
68097: LD_INT 20
68099: PUSH
68100: LD_INT 21
68102: PUSH
68103: LD_INT 22
68105: PUSH
68106: LD_INT 23
68108: PUSH
68109: LD_INT 25
68111: PUSH
68112: LD_INT 26
68114: PUSH
68115: LD_INT 30
68117: PUSH
68118: LD_INT 31
68120: PUSH
68121: LD_INT 32
68123: PUSH
68124: LD_INT 36
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 101
68150: PUSH
68151: LD_INT 102
68153: PUSH
68154: LD_INT 105
68156: PUSH
68157: LD_INT 106
68159: PUSH
68160: LD_INT 108
68162: PUSH
68163: LD_INT 109
68165: PUSH
68166: LD_INT 112
68168: PUSH
68169: LD_INT 116
68171: PUSH
68172: LD_INT 117
68174: PUSH
68175: LD_INT 118
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: ST_TO_ADDR
68194: GO 70717
68196: LD_INT 7
68198: DOUBLE
68199: EQUAL
68200: IFTRUE 68204
68202: GO 68316
68204: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68205: LD_ADDR_VAR 0 2
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: LD_INT 4
68215: PUSH
68216: LD_INT 5
68218: PUSH
68219: LD_INT 7
68221: PUSH
68222: LD_INT 11
68224: PUSH
68225: LD_INT 12
68227: PUSH
68228: LD_INT 15
68230: PUSH
68231: LD_INT 16
68233: PUSH
68234: LD_INT 20
68236: PUSH
68237: LD_INT 21
68239: PUSH
68240: LD_INT 22
68242: PUSH
68243: LD_INT 23
68245: PUSH
68246: LD_INT 25
68248: PUSH
68249: LD_INT 26
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 101
68270: PUSH
68271: LD_INT 102
68273: PUSH
68274: LD_INT 103
68276: PUSH
68277: LD_INT 105
68279: PUSH
68280: LD_INT 106
68282: PUSH
68283: LD_INT 108
68285: PUSH
68286: LD_INT 112
68288: PUSH
68289: LD_INT 116
68291: PUSH
68292: LD_INT 117
68294: PUSH
68295: LD_INT 118
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: ST_TO_ADDR
68314: GO 70717
68316: LD_INT 8
68318: DOUBLE
68319: EQUAL
68320: IFTRUE 68324
68322: GO 68464
68324: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
68325: LD_ADDR_VAR 0 2
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: LD_INT 4
68335: PUSH
68336: LD_INT 5
68338: PUSH
68339: LD_INT 6
68341: PUSH
68342: LD_INT 7
68344: PUSH
68345: LD_INT 8
68347: PUSH
68348: LD_INT 11
68350: PUSH
68351: LD_INT 12
68353: PUSH
68354: LD_INT 15
68356: PUSH
68357: LD_INT 16
68359: PUSH
68360: LD_INT 20
68362: PUSH
68363: LD_INT 21
68365: PUSH
68366: LD_INT 22
68368: PUSH
68369: LD_INT 23
68371: PUSH
68372: LD_INT 25
68374: PUSH
68375: LD_INT 26
68377: PUSH
68378: LD_INT 30
68380: PUSH
68381: LD_INT 31
68383: PUSH
68384: LD_INT 32
68386: PUSH
68387: LD_INT 36
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 101
68414: PUSH
68415: LD_INT 102
68417: PUSH
68418: LD_INT 103
68420: PUSH
68421: LD_INT 105
68423: PUSH
68424: LD_INT 106
68426: PUSH
68427: LD_INT 108
68429: PUSH
68430: LD_INT 109
68432: PUSH
68433: LD_INT 112
68435: PUSH
68436: LD_INT 116
68438: PUSH
68439: LD_INT 117
68441: PUSH
68442: LD_INT 118
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: ST_TO_ADDR
68462: GO 70717
68464: LD_INT 9
68466: DOUBLE
68467: EQUAL
68468: IFTRUE 68472
68470: GO 68620
68472: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
68473: LD_ADDR_VAR 0 2
68477: PUSH
68478: LD_INT 2
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: LD_INT 5
68486: PUSH
68487: LD_INT 6
68489: PUSH
68490: LD_INT 7
68492: PUSH
68493: LD_INT 8
68495: PUSH
68496: LD_INT 11
68498: PUSH
68499: LD_INT 12
68501: PUSH
68502: LD_INT 15
68504: PUSH
68505: LD_INT 16
68507: PUSH
68508: LD_INT 20
68510: PUSH
68511: LD_INT 21
68513: PUSH
68514: LD_INT 22
68516: PUSH
68517: LD_INT 23
68519: PUSH
68520: LD_INT 25
68522: PUSH
68523: LD_INT 26
68525: PUSH
68526: LD_INT 28
68528: PUSH
68529: LD_INT 30
68531: PUSH
68532: LD_INT 31
68534: PUSH
68535: LD_INT 32
68537: PUSH
68538: LD_INT 36
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 101
68566: PUSH
68567: LD_INT 102
68569: PUSH
68570: LD_INT 103
68572: PUSH
68573: LD_INT 105
68575: PUSH
68576: LD_INT 106
68578: PUSH
68579: LD_INT 108
68581: PUSH
68582: LD_INT 109
68584: PUSH
68585: LD_INT 112
68587: PUSH
68588: LD_INT 114
68590: PUSH
68591: LD_INT 116
68593: PUSH
68594: LD_INT 117
68596: PUSH
68597: LD_INT 118
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: ST_TO_ADDR
68618: GO 70717
68620: LD_INT 10
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68628
68626: GO 68824
68628: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
68629: LD_ADDR_VAR 0 2
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: LD_INT 4
68639: PUSH
68640: LD_INT 5
68642: PUSH
68643: LD_INT 6
68645: PUSH
68646: LD_INT 7
68648: PUSH
68649: LD_INT 8
68651: PUSH
68652: LD_INT 9
68654: PUSH
68655: LD_INT 10
68657: PUSH
68658: LD_INT 11
68660: PUSH
68661: LD_INT 12
68663: PUSH
68664: LD_INT 13
68666: PUSH
68667: LD_INT 14
68669: PUSH
68670: LD_INT 15
68672: PUSH
68673: LD_INT 16
68675: PUSH
68676: LD_INT 17
68678: PUSH
68679: LD_INT 18
68681: PUSH
68682: LD_INT 19
68684: PUSH
68685: LD_INT 20
68687: PUSH
68688: LD_INT 21
68690: PUSH
68691: LD_INT 22
68693: PUSH
68694: LD_INT 23
68696: PUSH
68697: LD_INT 24
68699: PUSH
68700: LD_INT 25
68702: PUSH
68703: LD_INT 26
68705: PUSH
68706: LD_INT 28
68708: PUSH
68709: LD_INT 30
68711: PUSH
68712: LD_INT 31
68714: PUSH
68715: LD_INT 32
68717: PUSH
68718: LD_INT 36
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 101
68754: PUSH
68755: LD_INT 102
68757: PUSH
68758: LD_INT 103
68760: PUSH
68761: LD_INT 104
68763: PUSH
68764: LD_INT 105
68766: PUSH
68767: LD_INT 106
68769: PUSH
68770: LD_INT 107
68772: PUSH
68773: LD_INT 108
68775: PUSH
68776: LD_INT 109
68778: PUSH
68779: LD_INT 110
68781: PUSH
68782: LD_INT 111
68784: PUSH
68785: LD_INT 112
68787: PUSH
68788: LD_INT 114
68790: PUSH
68791: LD_INT 116
68793: PUSH
68794: LD_INT 117
68796: PUSH
68797: LD_INT 118
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: ST_TO_ADDR
68822: GO 70717
68824: LD_INT 11
68826: DOUBLE
68827: EQUAL
68828: IFTRUE 68832
68830: GO 69036
68832: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
68833: LD_ADDR_VAR 0 2
68837: PUSH
68838: LD_INT 2
68840: PUSH
68841: LD_INT 3
68843: PUSH
68844: LD_INT 4
68846: PUSH
68847: LD_INT 5
68849: PUSH
68850: LD_INT 6
68852: PUSH
68853: LD_INT 7
68855: PUSH
68856: LD_INT 8
68858: PUSH
68859: LD_INT 9
68861: PUSH
68862: LD_INT 10
68864: PUSH
68865: LD_INT 11
68867: PUSH
68868: LD_INT 12
68870: PUSH
68871: LD_INT 13
68873: PUSH
68874: LD_INT 14
68876: PUSH
68877: LD_INT 15
68879: PUSH
68880: LD_INT 16
68882: PUSH
68883: LD_INT 17
68885: PUSH
68886: LD_INT 18
68888: PUSH
68889: LD_INT 19
68891: PUSH
68892: LD_INT 20
68894: PUSH
68895: LD_INT 21
68897: PUSH
68898: LD_INT 22
68900: PUSH
68901: LD_INT 23
68903: PUSH
68904: LD_INT 24
68906: PUSH
68907: LD_INT 25
68909: PUSH
68910: LD_INT 26
68912: PUSH
68913: LD_INT 28
68915: PUSH
68916: LD_INT 30
68918: PUSH
68919: LD_INT 31
68921: PUSH
68922: LD_INT 32
68924: PUSH
68925: LD_INT 34
68927: PUSH
68928: LD_INT 36
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 101
68966: PUSH
68967: LD_INT 102
68969: PUSH
68970: LD_INT 103
68972: PUSH
68973: LD_INT 104
68975: PUSH
68976: LD_INT 105
68978: PUSH
68979: LD_INT 106
68981: PUSH
68982: LD_INT 107
68984: PUSH
68985: LD_INT 108
68987: PUSH
68988: LD_INT 109
68990: PUSH
68991: LD_INT 110
68993: PUSH
68994: LD_INT 111
68996: PUSH
68997: LD_INT 112
68999: PUSH
69000: LD_INT 114
69002: PUSH
69003: LD_INT 116
69005: PUSH
69006: LD_INT 117
69008: PUSH
69009: LD_INT 118
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: ST_TO_ADDR
69034: GO 70717
69036: LD_INT 12
69038: DOUBLE
69039: EQUAL
69040: IFTRUE 69044
69042: GO 69264
69044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69045: LD_ADDR_VAR 0 2
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: LD_INT 2
69055: PUSH
69056: LD_INT 3
69058: PUSH
69059: LD_INT 4
69061: PUSH
69062: LD_INT 5
69064: PUSH
69065: LD_INT 6
69067: PUSH
69068: LD_INT 7
69070: PUSH
69071: LD_INT 8
69073: PUSH
69074: LD_INT 9
69076: PUSH
69077: LD_INT 10
69079: PUSH
69080: LD_INT 11
69082: PUSH
69083: LD_INT 12
69085: PUSH
69086: LD_INT 13
69088: PUSH
69089: LD_INT 14
69091: PUSH
69092: LD_INT 15
69094: PUSH
69095: LD_INT 16
69097: PUSH
69098: LD_INT 17
69100: PUSH
69101: LD_INT 18
69103: PUSH
69104: LD_INT 19
69106: PUSH
69107: LD_INT 20
69109: PUSH
69110: LD_INT 21
69112: PUSH
69113: LD_INT 22
69115: PUSH
69116: LD_INT 23
69118: PUSH
69119: LD_INT 24
69121: PUSH
69122: LD_INT 25
69124: PUSH
69125: LD_INT 26
69127: PUSH
69128: LD_INT 27
69130: PUSH
69131: LD_INT 28
69133: PUSH
69134: LD_INT 30
69136: PUSH
69137: LD_INT 31
69139: PUSH
69140: LD_INT 32
69142: PUSH
69143: LD_INT 33
69145: PUSH
69146: LD_INT 34
69148: PUSH
69149: LD_INT 36
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 101
69190: PUSH
69191: LD_INT 102
69193: PUSH
69194: LD_INT 103
69196: PUSH
69197: LD_INT 104
69199: PUSH
69200: LD_INT 105
69202: PUSH
69203: LD_INT 106
69205: PUSH
69206: LD_INT 107
69208: PUSH
69209: LD_INT 108
69211: PUSH
69212: LD_INT 109
69214: PUSH
69215: LD_INT 110
69217: PUSH
69218: LD_INT 111
69220: PUSH
69221: LD_INT 112
69223: PUSH
69224: LD_INT 113
69226: PUSH
69227: LD_INT 114
69229: PUSH
69230: LD_INT 116
69232: PUSH
69233: LD_INT 117
69235: PUSH
69236: LD_INT 118
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: ST_TO_ADDR
69262: GO 70717
69264: LD_INT 13
69266: DOUBLE
69267: EQUAL
69268: IFTRUE 69272
69270: GO 69480
69272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
69273: LD_ADDR_VAR 0 2
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 2
69283: PUSH
69284: LD_INT 3
69286: PUSH
69287: LD_INT 4
69289: PUSH
69290: LD_INT 5
69292: PUSH
69293: LD_INT 8
69295: PUSH
69296: LD_INT 9
69298: PUSH
69299: LD_INT 10
69301: PUSH
69302: LD_INT 11
69304: PUSH
69305: LD_INT 12
69307: PUSH
69308: LD_INT 14
69310: PUSH
69311: LD_INT 15
69313: PUSH
69314: LD_INT 16
69316: PUSH
69317: LD_INT 17
69319: PUSH
69320: LD_INT 18
69322: PUSH
69323: LD_INT 19
69325: PUSH
69326: LD_INT 20
69328: PUSH
69329: LD_INT 21
69331: PUSH
69332: LD_INT 22
69334: PUSH
69335: LD_INT 23
69337: PUSH
69338: LD_INT 24
69340: PUSH
69341: LD_INT 25
69343: PUSH
69344: LD_INT 26
69346: PUSH
69347: LD_INT 27
69349: PUSH
69350: LD_INT 28
69352: PUSH
69353: LD_INT 30
69355: PUSH
69356: LD_INT 31
69358: PUSH
69359: LD_INT 32
69361: PUSH
69362: LD_INT 33
69364: PUSH
69365: LD_INT 34
69367: PUSH
69368: LD_INT 36
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 101
69406: PUSH
69407: LD_INT 102
69409: PUSH
69410: LD_INT 103
69412: PUSH
69413: LD_INT 104
69415: PUSH
69416: LD_INT 105
69418: PUSH
69419: LD_INT 106
69421: PUSH
69422: LD_INT 107
69424: PUSH
69425: LD_INT 108
69427: PUSH
69428: LD_INT 109
69430: PUSH
69431: LD_INT 110
69433: PUSH
69434: LD_INT 111
69436: PUSH
69437: LD_INT 112
69439: PUSH
69440: LD_INT 113
69442: PUSH
69443: LD_INT 114
69445: PUSH
69446: LD_INT 116
69448: PUSH
69449: LD_INT 117
69451: PUSH
69452: LD_INT 118
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: ST_TO_ADDR
69478: GO 70717
69480: LD_INT 14
69482: DOUBLE
69483: EQUAL
69484: IFTRUE 69488
69486: GO 69712
69488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
69489: LD_ADDR_VAR 0 2
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: LD_INT 2
69499: PUSH
69500: LD_INT 3
69502: PUSH
69503: LD_INT 4
69505: PUSH
69506: LD_INT 5
69508: PUSH
69509: LD_INT 6
69511: PUSH
69512: LD_INT 7
69514: PUSH
69515: LD_INT 8
69517: PUSH
69518: LD_INT 9
69520: PUSH
69521: LD_INT 10
69523: PUSH
69524: LD_INT 11
69526: PUSH
69527: LD_INT 12
69529: PUSH
69530: LD_INT 13
69532: PUSH
69533: LD_INT 14
69535: PUSH
69536: LD_INT 15
69538: PUSH
69539: LD_INT 16
69541: PUSH
69542: LD_INT 17
69544: PUSH
69545: LD_INT 18
69547: PUSH
69548: LD_INT 19
69550: PUSH
69551: LD_INT 20
69553: PUSH
69554: LD_INT 21
69556: PUSH
69557: LD_INT 22
69559: PUSH
69560: LD_INT 23
69562: PUSH
69563: LD_INT 24
69565: PUSH
69566: LD_INT 25
69568: PUSH
69569: LD_INT 26
69571: PUSH
69572: LD_INT 27
69574: PUSH
69575: LD_INT 28
69577: PUSH
69578: LD_INT 29
69580: PUSH
69581: LD_INT 30
69583: PUSH
69584: LD_INT 31
69586: PUSH
69587: LD_INT 32
69589: PUSH
69590: LD_INT 33
69592: PUSH
69593: LD_INT 34
69595: PUSH
69596: LD_INT 36
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 101
69638: PUSH
69639: LD_INT 102
69641: PUSH
69642: LD_INT 103
69644: PUSH
69645: LD_INT 104
69647: PUSH
69648: LD_INT 105
69650: PUSH
69651: LD_INT 106
69653: PUSH
69654: LD_INT 107
69656: PUSH
69657: LD_INT 108
69659: PUSH
69660: LD_INT 109
69662: PUSH
69663: LD_INT 110
69665: PUSH
69666: LD_INT 111
69668: PUSH
69669: LD_INT 112
69671: PUSH
69672: LD_INT 113
69674: PUSH
69675: LD_INT 114
69677: PUSH
69678: LD_INT 116
69680: PUSH
69681: LD_INT 117
69683: PUSH
69684: LD_INT 118
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: ST_TO_ADDR
69710: GO 70717
69712: LD_INT 15
69714: DOUBLE
69715: EQUAL
69716: IFTRUE 69720
69718: GO 69944
69720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
69721: LD_ADDR_VAR 0 2
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: LD_INT 4
69737: PUSH
69738: LD_INT 5
69740: PUSH
69741: LD_INT 6
69743: PUSH
69744: LD_INT 7
69746: PUSH
69747: LD_INT 8
69749: PUSH
69750: LD_INT 9
69752: PUSH
69753: LD_INT 10
69755: PUSH
69756: LD_INT 11
69758: PUSH
69759: LD_INT 12
69761: PUSH
69762: LD_INT 13
69764: PUSH
69765: LD_INT 14
69767: PUSH
69768: LD_INT 15
69770: PUSH
69771: LD_INT 16
69773: PUSH
69774: LD_INT 17
69776: PUSH
69777: LD_INT 18
69779: PUSH
69780: LD_INT 19
69782: PUSH
69783: LD_INT 20
69785: PUSH
69786: LD_INT 21
69788: PUSH
69789: LD_INT 22
69791: PUSH
69792: LD_INT 23
69794: PUSH
69795: LD_INT 24
69797: PUSH
69798: LD_INT 25
69800: PUSH
69801: LD_INT 26
69803: PUSH
69804: LD_INT 27
69806: PUSH
69807: LD_INT 28
69809: PUSH
69810: LD_INT 29
69812: PUSH
69813: LD_INT 30
69815: PUSH
69816: LD_INT 31
69818: PUSH
69819: LD_INT 32
69821: PUSH
69822: LD_INT 33
69824: PUSH
69825: LD_INT 34
69827: PUSH
69828: LD_INT 36
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 101
69870: PUSH
69871: LD_INT 102
69873: PUSH
69874: LD_INT 103
69876: PUSH
69877: LD_INT 104
69879: PUSH
69880: LD_INT 105
69882: PUSH
69883: LD_INT 106
69885: PUSH
69886: LD_INT 107
69888: PUSH
69889: LD_INT 108
69891: PUSH
69892: LD_INT 109
69894: PUSH
69895: LD_INT 110
69897: PUSH
69898: LD_INT 111
69900: PUSH
69901: LD_INT 112
69903: PUSH
69904: LD_INT 113
69906: PUSH
69907: LD_INT 114
69909: PUSH
69910: LD_INT 116
69912: PUSH
69913: LD_INT 117
69915: PUSH
69916: LD_INT 118
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: ST_TO_ADDR
69942: GO 70717
69944: LD_INT 16
69946: DOUBLE
69947: EQUAL
69948: IFTRUE 69952
69950: GO 70088
69952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69953: LD_ADDR_VAR 0 2
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: LD_INT 4
69963: PUSH
69964: LD_INT 5
69966: PUSH
69967: LD_INT 7
69969: PUSH
69970: LD_INT 11
69972: PUSH
69973: LD_INT 12
69975: PUSH
69976: LD_INT 15
69978: PUSH
69979: LD_INT 16
69981: PUSH
69982: LD_INT 20
69984: PUSH
69985: LD_INT 21
69987: PUSH
69988: LD_INT 22
69990: PUSH
69991: LD_INT 23
69993: PUSH
69994: LD_INT 25
69996: PUSH
69997: LD_INT 26
69999: PUSH
70000: LD_INT 30
70002: PUSH
70003: LD_INT 31
70005: PUSH
70006: LD_INT 32
70008: PUSH
70009: LD_INT 33
70011: PUSH
70012: LD_INT 34
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 101
70038: PUSH
70039: LD_INT 102
70041: PUSH
70042: LD_INT 103
70044: PUSH
70045: LD_INT 106
70047: PUSH
70048: LD_INT 108
70050: PUSH
70051: LD_INT 112
70053: PUSH
70054: LD_INT 113
70056: PUSH
70057: LD_INT 114
70059: PUSH
70060: LD_INT 116
70062: PUSH
70063: LD_INT 117
70065: PUSH
70066: LD_INT 118
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: ST_TO_ADDR
70086: GO 70717
70088: LD_INT 17
70090: DOUBLE
70091: EQUAL
70092: IFTRUE 70096
70094: GO 70320
70096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70097: LD_ADDR_VAR 0 2
70101: PUSH
70102: LD_INT 1
70104: PUSH
70105: LD_INT 2
70107: PUSH
70108: LD_INT 3
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: LD_INT 5
70116: PUSH
70117: LD_INT 6
70119: PUSH
70120: LD_INT 7
70122: PUSH
70123: LD_INT 8
70125: PUSH
70126: LD_INT 9
70128: PUSH
70129: LD_INT 10
70131: PUSH
70132: LD_INT 11
70134: PUSH
70135: LD_INT 12
70137: PUSH
70138: LD_INT 13
70140: PUSH
70141: LD_INT 14
70143: PUSH
70144: LD_INT 15
70146: PUSH
70147: LD_INT 16
70149: PUSH
70150: LD_INT 17
70152: PUSH
70153: LD_INT 18
70155: PUSH
70156: LD_INT 19
70158: PUSH
70159: LD_INT 20
70161: PUSH
70162: LD_INT 21
70164: PUSH
70165: LD_INT 22
70167: PUSH
70168: LD_INT 23
70170: PUSH
70171: LD_INT 24
70173: PUSH
70174: LD_INT 25
70176: PUSH
70177: LD_INT 26
70179: PUSH
70180: LD_INT 27
70182: PUSH
70183: LD_INT 28
70185: PUSH
70186: LD_INT 29
70188: PUSH
70189: LD_INT 30
70191: PUSH
70192: LD_INT 31
70194: PUSH
70195: LD_INT 32
70197: PUSH
70198: LD_INT 33
70200: PUSH
70201: LD_INT 34
70203: PUSH
70204: LD_INT 36
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 101
70246: PUSH
70247: LD_INT 102
70249: PUSH
70250: LD_INT 103
70252: PUSH
70253: LD_INT 104
70255: PUSH
70256: LD_INT 105
70258: PUSH
70259: LD_INT 106
70261: PUSH
70262: LD_INT 107
70264: PUSH
70265: LD_INT 108
70267: PUSH
70268: LD_INT 109
70270: PUSH
70271: LD_INT 110
70273: PUSH
70274: LD_INT 111
70276: PUSH
70277: LD_INT 112
70279: PUSH
70280: LD_INT 113
70282: PUSH
70283: LD_INT 114
70285: PUSH
70286: LD_INT 116
70288: PUSH
70289: LD_INT 117
70291: PUSH
70292: LD_INT 118
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: ST_TO_ADDR
70318: GO 70717
70320: LD_INT 18
70322: DOUBLE
70323: EQUAL
70324: IFTRUE 70328
70326: GO 70476
70328: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
70329: LD_ADDR_VAR 0 2
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: LD_INT 4
70339: PUSH
70340: LD_INT 5
70342: PUSH
70343: LD_INT 7
70345: PUSH
70346: LD_INT 11
70348: PUSH
70349: LD_INT 12
70351: PUSH
70352: LD_INT 15
70354: PUSH
70355: LD_INT 16
70357: PUSH
70358: LD_INT 20
70360: PUSH
70361: LD_INT 21
70363: PUSH
70364: LD_INT 22
70366: PUSH
70367: LD_INT 23
70369: PUSH
70370: LD_INT 25
70372: PUSH
70373: LD_INT 26
70375: PUSH
70376: LD_INT 30
70378: PUSH
70379: LD_INT 31
70381: PUSH
70382: LD_INT 32
70384: PUSH
70385: LD_INT 33
70387: PUSH
70388: LD_INT 34
70390: PUSH
70391: LD_INT 35
70393: PUSH
70394: LD_INT 36
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 101
70422: PUSH
70423: LD_INT 102
70425: PUSH
70426: LD_INT 103
70428: PUSH
70429: LD_INT 106
70431: PUSH
70432: LD_INT 108
70434: PUSH
70435: LD_INT 112
70437: PUSH
70438: LD_INT 113
70440: PUSH
70441: LD_INT 114
70443: PUSH
70444: LD_INT 115
70446: PUSH
70447: LD_INT 116
70449: PUSH
70450: LD_INT 117
70452: PUSH
70453: LD_INT 118
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: ST_TO_ADDR
70474: GO 70717
70476: LD_INT 19
70478: DOUBLE
70479: EQUAL
70480: IFTRUE 70484
70482: GO 70716
70484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
70485: LD_ADDR_VAR 0 2
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 2
70495: PUSH
70496: LD_INT 3
70498: PUSH
70499: LD_INT 4
70501: PUSH
70502: LD_INT 5
70504: PUSH
70505: LD_INT 6
70507: PUSH
70508: LD_INT 7
70510: PUSH
70511: LD_INT 8
70513: PUSH
70514: LD_INT 9
70516: PUSH
70517: LD_INT 10
70519: PUSH
70520: LD_INT 11
70522: PUSH
70523: LD_INT 12
70525: PUSH
70526: LD_INT 13
70528: PUSH
70529: LD_INT 14
70531: PUSH
70532: LD_INT 15
70534: PUSH
70535: LD_INT 16
70537: PUSH
70538: LD_INT 17
70540: PUSH
70541: LD_INT 18
70543: PUSH
70544: LD_INT 19
70546: PUSH
70547: LD_INT 20
70549: PUSH
70550: LD_INT 21
70552: PUSH
70553: LD_INT 22
70555: PUSH
70556: LD_INT 23
70558: PUSH
70559: LD_INT 24
70561: PUSH
70562: LD_INT 25
70564: PUSH
70565: LD_INT 26
70567: PUSH
70568: LD_INT 27
70570: PUSH
70571: LD_INT 28
70573: PUSH
70574: LD_INT 29
70576: PUSH
70577: LD_INT 30
70579: PUSH
70580: LD_INT 31
70582: PUSH
70583: LD_INT 32
70585: PUSH
70586: LD_INT 33
70588: PUSH
70589: LD_INT 34
70591: PUSH
70592: LD_INT 35
70594: PUSH
70595: LD_INT 36
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 101
70638: PUSH
70639: LD_INT 102
70641: PUSH
70642: LD_INT 103
70644: PUSH
70645: LD_INT 104
70647: PUSH
70648: LD_INT 105
70650: PUSH
70651: LD_INT 106
70653: PUSH
70654: LD_INT 107
70656: PUSH
70657: LD_INT 108
70659: PUSH
70660: LD_INT 109
70662: PUSH
70663: LD_INT 110
70665: PUSH
70666: LD_INT 111
70668: PUSH
70669: LD_INT 112
70671: PUSH
70672: LD_INT 113
70674: PUSH
70675: LD_INT 114
70677: PUSH
70678: LD_INT 115
70680: PUSH
70681: LD_INT 116
70683: PUSH
70684: LD_INT 117
70686: PUSH
70687: LD_INT 118
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: ST_TO_ADDR
70714: GO 70717
70716: POP
// end else
70717: GO 70948
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
70719: LD_ADDR_VAR 0 2
70723: PUSH
70724: LD_INT 1
70726: PUSH
70727: LD_INT 2
70729: PUSH
70730: LD_INT 3
70732: PUSH
70733: LD_INT 4
70735: PUSH
70736: LD_INT 5
70738: PUSH
70739: LD_INT 6
70741: PUSH
70742: LD_INT 7
70744: PUSH
70745: LD_INT 8
70747: PUSH
70748: LD_INT 9
70750: PUSH
70751: LD_INT 10
70753: PUSH
70754: LD_INT 11
70756: PUSH
70757: LD_INT 12
70759: PUSH
70760: LD_INT 13
70762: PUSH
70763: LD_INT 14
70765: PUSH
70766: LD_INT 15
70768: PUSH
70769: LD_INT 16
70771: PUSH
70772: LD_INT 17
70774: PUSH
70775: LD_INT 18
70777: PUSH
70778: LD_INT 19
70780: PUSH
70781: LD_INT 20
70783: PUSH
70784: LD_INT 21
70786: PUSH
70787: LD_INT 22
70789: PUSH
70790: LD_INT 23
70792: PUSH
70793: LD_INT 24
70795: PUSH
70796: LD_INT 25
70798: PUSH
70799: LD_INT 26
70801: PUSH
70802: LD_INT 27
70804: PUSH
70805: LD_INT 28
70807: PUSH
70808: LD_INT 29
70810: PUSH
70811: LD_INT 30
70813: PUSH
70814: LD_INT 31
70816: PUSH
70817: LD_INT 32
70819: PUSH
70820: LD_INT 33
70822: PUSH
70823: LD_INT 34
70825: PUSH
70826: LD_INT 35
70828: PUSH
70829: LD_INT 36
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 101
70872: PUSH
70873: LD_INT 102
70875: PUSH
70876: LD_INT 103
70878: PUSH
70879: LD_INT 104
70881: PUSH
70882: LD_INT 105
70884: PUSH
70885: LD_INT 106
70887: PUSH
70888: LD_INT 107
70890: PUSH
70891: LD_INT 108
70893: PUSH
70894: LD_INT 109
70896: PUSH
70897: LD_INT 110
70899: PUSH
70900: LD_INT 111
70902: PUSH
70903: LD_INT 112
70905: PUSH
70906: LD_INT 113
70908: PUSH
70909: LD_INT 114
70911: PUSH
70912: LD_INT 115
70914: PUSH
70915: LD_INT 116
70917: PUSH
70918: LD_INT 117
70920: PUSH
70921: LD_INT 118
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: ST_TO_ADDR
// if result then
70948: LD_VAR 0 2
70952: IFFALSE 71738
// begin normal :=  ;
70954: LD_ADDR_VAR 0 5
70958: PUSH
70959: LD_STRING 
70961: ST_TO_ADDR
// hardcore :=  ;
70962: LD_ADDR_VAR 0 6
70966: PUSH
70967: LD_STRING 
70969: ST_TO_ADDR
// active :=  ;
70970: LD_ADDR_VAR 0 7
70974: PUSH
70975: LD_STRING 
70977: ST_TO_ADDR
// for i = 1 to normalCounter do
70978: LD_ADDR_VAR 0 8
70982: PUSH
70983: DOUBLE
70984: LD_INT 1
70986: DEC
70987: ST_TO_ADDR
70988: LD_EXP 48
70992: PUSH
70993: FOR_TO
70994: IFFALSE 71095
// begin tmp := 0 ;
70996: LD_ADDR_VAR 0 3
71000: PUSH
71001: LD_STRING 0
71003: ST_TO_ADDR
// if result [ 1 ] then
71004: LD_VAR 0 2
71008: PUSH
71009: LD_INT 1
71011: ARRAY
71012: IFFALSE 71077
// if result [ 1 ] [ 1 ] = i then
71014: LD_VAR 0 2
71018: PUSH
71019: LD_INT 1
71021: ARRAY
71022: PUSH
71023: LD_INT 1
71025: ARRAY
71026: PUSH
71027: LD_VAR 0 8
71031: EQUAL
71032: IFFALSE 71077
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71034: LD_ADDR_VAR 0 2
71038: PUSH
71039: LD_VAR 0 2
71043: PPUSH
71044: LD_INT 1
71046: PPUSH
71047: LD_VAR 0 2
71051: PUSH
71052: LD_INT 1
71054: ARRAY
71055: PPUSH
71056: LD_INT 1
71058: PPUSH
71059: CALL_OW 3
71063: PPUSH
71064: CALL_OW 1
71068: ST_TO_ADDR
// tmp := 1 ;
71069: LD_ADDR_VAR 0 3
71073: PUSH
71074: LD_STRING 1
71076: ST_TO_ADDR
// end ; normal := normal & tmp ;
71077: LD_ADDR_VAR 0 5
71081: PUSH
71082: LD_VAR 0 5
71086: PUSH
71087: LD_VAR 0 3
71091: STR
71092: ST_TO_ADDR
// end ;
71093: GO 70993
71095: POP
71096: POP
// for i = 1 to hardcoreCounter do
71097: LD_ADDR_VAR 0 8
71101: PUSH
71102: DOUBLE
71103: LD_INT 1
71105: DEC
71106: ST_TO_ADDR
71107: LD_EXP 49
71111: PUSH
71112: FOR_TO
71113: IFFALSE 71218
// begin tmp := 0 ;
71115: LD_ADDR_VAR 0 3
71119: PUSH
71120: LD_STRING 0
71122: ST_TO_ADDR
// if result [ 2 ] then
71123: LD_VAR 0 2
71127: PUSH
71128: LD_INT 2
71130: ARRAY
71131: IFFALSE 71200
// if result [ 2 ] [ 1 ] = 100 + i then
71133: LD_VAR 0 2
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: PUSH
71142: LD_INT 1
71144: ARRAY
71145: PUSH
71146: LD_INT 100
71148: PUSH
71149: LD_VAR 0 8
71153: PLUS
71154: EQUAL
71155: IFFALSE 71200
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71157: LD_ADDR_VAR 0 2
71161: PUSH
71162: LD_VAR 0 2
71166: PPUSH
71167: LD_INT 2
71169: PPUSH
71170: LD_VAR 0 2
71174: PUSH
71175: LD_INT 2
71177: ARRAY
71178: PPUSH
71179: LD_INT 1
71181: PPUSH
71182: CALL_OW 3
71186: PPUSH
71187: CALL_OW 1
71191: ST_TO_ADDR
// tmp := 1 ;
71192: LD_ADDR_VAR 0 3
71196: PUSH
71197: LD_STRING 1
71199: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71200: LD_ADDR_VAR 0 6
71204: PUSH
71205: LD_VAR 0 6
71209: PUSH
71210: LD_VAR 0 3
71214: STR
71215: ST_TO_ADDR
// end ;
71216: GO 71112
71218: POP
71219: POP
// if isGameLoad then
71220: LD_VAR 0 1
71224: IFFALSE 71699
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71226: LD_ADDR_VAR 0 4
71230: PUSH
71231: LD_EXP 52
71235: PUSH
71236: LD_EXP 51
71240: PUSH
71241: LD_EXP 53
71245: PUSH
71246: LD_EXP 50
71250: PUSH
71251: LD_EXP 54
71255: PUSH
71256: LD_EXP 55
71260: PUSH
71261: LD_EXP 56
71265: PUSH
71266: LD_EXP 57
71270: PUSH
71271: LD_EXP 58
71275: PUSH
71276: LD_EXP 59
71280: PUSH
71281: LD_EXP 60
71285: PUSH
71286: LD_EXP 61
71290: PUSH
71291: LD_EXP 62
71295: PUSH
71296: LD_EXP 63
71300: PUSH
71301: LD_EXP 71
71305: PUSH
71306: LD_EXP 72
71310: PUSH
71311: LD_EXP 73
71315: PUSH
71316: LD_EXP 74
71320: PUSH
71321: LD_EXP 76
71325: PUSH
71326: LD_EXP 77
71330: PUSH
71331: LD_EXP 78
71335: PUSH
71336: LD_EXP 81
71340: PUSH
71341: LD_EXP 83
71345: PUSH
71346: LD_EXP 84
71350: PUSH
71351: LD_EXP 85
71355: PUSH
71356: LD_EXP 87
71360: PUSH
71361: LD_EXP 88
71365: PUSH
71366: LD_EXP 91
71370: PUSH
71371: LD_EXP 92
71375: PUSH
71376: LD_EXP 93
71380: PUSH
71381: LD_EXP 94
71385: PUSH
71386: LD_EXP 95
71390: PUSH
71391: LD_EXP 96
71395: PUSH
71396: LD_EXP 97
71400: PUSH
71401: LD_EXP 98
71405: PUSH
71406: LD_EXP 99
71410: PUSH
71411: LD_EXP 64
71415: PUSH
71416: LD_EXP 65
71420: PUSH
71421: LD_EXP 68
71425: PUSH
71426: LD_EXP 69
71430: PUSH
71431: LD_EXP 70
71435: PUSH
71436: LD_EXP 66
71440: PUSH
71441: LD_EXP 67
71445: PUSH
71446: LD_EXP 75
71450: PUSH
71451: LD_EXP 79
71455: PUSH
71456: LD_EXP 80
71460: PUSH
71461: LD_EXP 82
71465: PUSH
71466: LD_EXP 86
71470: PUSH
71471: LD_EXP 89
71475: PUSH
71476: LD_EXP 90
71480: PUSH
71481: LD_EXP 100
71485: PUSH
71486: LD_EXP 101
71490: PUSH
71491: LD_EXP 102
71495: PUSH
71496: LD_EXP 103
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: ST_TO_ADDR
// tmp :=  ;
71557: LD_ADDR_VAR 0 3
71561: PUSH
71562: LD_STRING 
71564: ST_TO_ADDR
// for i = 1 to normalCounter do
71565: LD_ADDR_VAR 0 8
71569: PUSH
71570: DOUBLE
71571: LD_INT 1
71573: DEC
71574: ST_TO_ADDR
71575: LD_EXP 48
71579: PUSH
71580: FOR_TO
71581: IFFALSE 71617
// begin if flags [ i ] then
71583: LD_VAR 0 4
71587: PUSH
71588: LD_VAR 0 8
71592: ARRAY
71593: IFFALSE 71615
// tmp := tmp & i & ; ;
71595: LD_ADDR_VAR 0 3
71599: PUSH
71600: LD_VAR 0 3
71604: PUSH
71605: LD_VAR 0 8
71609: STR
71610: PUSH
71611: LD_STRING ;
71613: STR
71614: ST_TO_ADDR
// end ;
71615: GO 71580
71617: POP
71618: POP
// for i = 1 to hardcoreCounter do
71619: LD_ADDR_VAR 0 8
71623: PUSH
71624: DOUBLE
71625: LD_INT 1
71627: DEC
71628: ST_TO_ADDR
71629: LD_EXP 49
71633: PUSH
71634: FOR_TO
71635: IFFALSE 71681
// begin if flags [ normalCounter + i ] then
71637: LD_VAR 0 4
71641: PUSH
71642: LD_EXP 48
71646: PUSH
71647: LD_VAR 0 8
71651: PLUS
71652: ARRAY
71653: IFFALSE 71679
// tmp := tmp & ( 100 + i ) & ; ;
71655: LD_ADDR_VAR 0 3
71659: PUSH
71660: LD_VAR 0 3
71664: PUSH
71665: LD_INT 100
71667: PUSH
71668: LD_VAR 0 8
71672: PLUS
71673: STR
71674: PUSH
71675: LD_STRING ;
71677: STR
71678: ST_TO_ADDR
// end ;
71679: GO 71634
71681: POP
71682: POP
// if tmp then
71683: LD_VAR 0 3
71687: IFFALSE 71699
// active := tmp ;
71689: LD_ADDR_VAR 0 7
71693: PUSH
71694: LD_VAR 0 3
71698: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
71699: LD_STRING getStreamItemsFromMission("
71701: PUSH
71702: LD_VAR 0 5
71706: STR
71707: PUSH
71708: LD_STRING ","
71710: STR
71711: PUSH
71712: LD_VAR 0 6
71716: STR
71717: PUSH
71718: LD_STRING ","
71720: STR
71721: PUSH
71722: LD_VAR 0 7
71726: STR
71727: PUSH
71728: LD_STRING ")
71730: STR
71731: PPUSH
71732: CALL_OW 559
// end else
71736: GO 71745
// ToLua ( getStreamItemsFromMission("","","") ) ;
71738: LD_STRING getStreamItemsFromMission("","","")
71740: PPUSH
71741: CALL_OW 559
// end ;
71745: LD_VAR 0 2
71749: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
71750: LD_EXP 47
71754: IFFALSE 71762
71756: PUSH
71757: LD_EXP 52
71761: AND
71762: IFFALSE 71886
71764: GO 71766
71766: DISABLE
71767: LD_INT 0
71769: PPUSH
71770: PPUSH
// begin enable ;
71771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
71772: LD_ADDR_VAR 0 2
71776: PUSH
71777: LD_INT 22
71779: PUSH
71780: LD_OWVAR 2
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 2
71791: PUSH
71792: LD_INT 34
71794: PUSH
71795: LD_INT 7
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 34
71804: PUSH
71805: LD_INT 45
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 34
71814: PUSH
71815: LD_INT 28
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 34
71824: PUSH
71825: LD_INT 47
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PPUSH
71843: CALL_OW 69
71847: ST_TO_ADDR
// if not tmp then
71848: LD_VAR 0 2
71852: NOT
71853: IFFALSE 71857
// exit ;
71855: GO 71886
// for i in tmp do
71857: LD_ADDR_VAR 0 1
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: FOR_IN
71868: IFFALSE 71884
// begin SetLives ( i , 0 ) ;
71870: LD_VAR 0 1
71874: PPUSH
71875: LD_INT 0
71877: PPUSH
71878: CALL_OW 234
// end ;
71882: GO 71867
71884: POP
71885: POP
// end ;
71886: PPOPN 2
71888: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
71889: LD_EXP 47
71893: IFFALSE 71901
71895: PUSH
71896: LD_EXP 53
71900: AND
71901: IFFALSE 71985
71903: GO 71905
71905: DISABLE
71906: LD_INT 0
71908: PPUSH
71909: PPUSH
// begin enable ;
71910: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
71911: LD_ADDR_VAR 0 2
71915: PUSH
71916: LD_INT 22
71918: PUSH
71919: LD_OWVAR 2
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 32
71930: PUSH
71931: LD_INT 3
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PPUSH
71942: CALL_OW 69
71946: ST_TO_ADDR
// if not tmp then
71947: LD_VAR 0 2
71951: NOT
71952: IFFALSE 71956
// exit ;
71954: GO 71985
// for i in tmp do
71956: LD_ADDR_VAR 0 1
71960: PUSH
71961: LD_VAR 0 2
71965: PUSH
71966: FOR_IN
71967: IFFALSE 71983
// begin SetLives ( i , 0 ) ;
71969: LD_VAR 0 1
71973: PPUSH
71974: LD_INT 0
71976: PPUSH
71977: CALL_OW 234
// end ;
71981: GO 71966
71983: POP
71984: POP
// end ;
71985: PPOPN 2
71987: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71988: LD_EXP 47
71992: IFFALSE 72000
71994: PUSH
71995: LD_EXP 50
71999: AND
72000: IFFALSE 72093
72002: GO 72004
72004: DISABLE
72005: LD_INT 0
72007: PPUSH
// begin enable ;
72008: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72009: LD_ADDR_VAR 0 1
72013: PUSH
72014: LD_INT 22
72016: PUSH
72017: LD_OWVAR 2
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: LD_INT 25
72031: PUSH
72032: LD_INT 5
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 25
72041: PUSH
72042: LD_INT 9
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 25
72051: PUSH
72052: LD_INT 8
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PPUSH
72069: CALL_OW 69
72073: PUSH
72074: FOR_IN
72075: IFFALSE 72091
// begin SetClass ( i , 1 ) ;
72077: LD_VAR 0 1
72081: PPUSH
72082: LD_INT 1
72084: PPUSH
72085: CALL_OW 336
// end ;
72089: GO 72074
72091: POP
72092: POP
// end ;
72093: PPOPN 1
72095: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72096: LD_EXP 47
72100: IFFALSE 72108
72102: PUSH
72103: LD_EXP 51
72107: AND
72108: IFFALSE 72120
72110: PUSH
72111: LD_OWVAR 65
72115: PUSH
72116: LD_INT 7
72118: LESS
72119: AND
72120: IFFALSE 72134
72122: GO 72124
72124: DISABLE
// begin enable ;
72125: ENABLE
// game_speed := 7 ;
72126: LD_ADDR_OWVAR 65
72130: PUSH
72131: LD_INT 7
72133: ST_TO_ADDR
// end ;
72134: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72135: LD_EXP 47
72139: IFFALSE 72147
72141: PUSH
72142: LD_EXP 54
72146: AND
72147: IFFALSE 72349
72149: GO 72151
72151: DISABLE
72152: LD_INT 0
72154: PPUSH
72155: PPUSH
72156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72157: LD_ADDR_VAR 0 3
72161: PUSH
72162: LD_INT 81
72164: PUSH
72165: LD_OWVAR 2
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 21
72176: PUSH
72177: LD_INT 1
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PPUSH
72188: CALL_OW 69
72192: ST_TO_ADDR
// if not tmp then
72193: LD_VAR 0 3
72197: NOT
72198: IFFALSE 72202
// exit ;
72200: GO 72349
// if tmp > 5 then
72202: LD_VAR 0 3
72206: PUSH
72207: LD_INT 5
72209: GREATER
72210: IFFALSE 72222
// k := 5 else
72212: LD_ADDR_VAR 0 2
72216: PUSH
72217: LD_INT 5
72219: ST_TO_ADDR
72220: GO 72232
// k := tmp ;
72222: LD_ADDR_VAR 0 2
72226: PUSH
72227: LD_VAR 0 3
72231: ST_TO_ADDR
// for i := 1 to k do
72232: LD_ADDR_VAR 0 1
72236: PUSH
72237: DOUBLE
72238: LD_INT 1
72240: DEC
72241: ST_TO_ADDR
72242: LD_VAR 0 2
72246: PUSH
72247: FOR_TO
72248: IFFALSE 72347
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72250: LD_VAR 0 3
72254: PUSH
72255: LD_VAR 0 1
72259: ARRAY
72260: PPUSH
72261: LD_VAR 0 1
72265: PUSH
72266: LD_INT 4
72268: MOD
72269: PUSH
72270: LD_INT 1
72272: PLUS
72273: PPUSH
72274: CALL_OW 259
72278: PUSH
72279: LD_INT 10
72281: LESS
72282: IFFALSE 72345
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
72284: LD_VAR 0 3
72288: PUSH
72289: LD_VAR 0 1
72293: ARRAY
72294: PPUSH
72295: LD_VAR 0 1
72299: PUSH
72300: LD_INT 4
72302: MOD
72303: PUSH
72304: LD_INT 1
72306: PLUS
72307: PPUSH
72308: LD_VAR 0 3
72312: PUSH
72313: LD_VAR 0 1
72317: ARRAY
72318: PPUSH
72319: LD_VAR 0 1
72323: PUSH
72324: LD_INT 4
72326: MOD
72327: PUSH
72328: LD_INT 1
72330: PLUS
72331: PPUSH
72332: CALL_OW 259
72336: PUSH
72337: LD_INT 1
72339: PLUS
72340: PPUSH
72341: CALL_OW 237
72345: GO 72247
72347: POP
72348: POP
// end ;
72349: PPOPN 3
72351: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
72352: LD_EXP 47
72356: IFFALSE 72364
72358: PUSH
72359: LD_EXP 55
72363: AND
72364: IFFALSE 72384
72366: GO 72368
72368: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
72369: LD_INT 4
72371: PPUSH
72372: LD_OWVAR 2
72376: PPUSH
72377: LD_INT 0
72379: PPUSH
72380: CALL_OW 324
72384: END
// every 0 0$1 trigger StreamModeActive and sShovel do
72385: LD_EXP 47
72389: IFFALSE 72397
72391: PUSH
72392: LD_EXP 84
72396: AND
72397: IFFALSE 72417
72399: GO 72401
72401: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
72402: LD_INT 19
72404: PPUSH
72405: LD_OWVAR 2
72409: PPUSH
72410: LD_INT 0
72412: PPUSH
72413: CALL_OW 324
72417: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
72418: LD_EXP 47
72422: IFFALSE 72430
72424: PUSH
72425: LD_EXP 56
72429: AND
72430: IFFALSE 72532
72432: GO 72434
72434: DISABLE
72435: LD_INT 0
72437: PPUSH
72438: PPUSH
// begin enable ;
72439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
72440: LD_ADDR_VAR 0 2
72444: PUSH
72445: LD_INT 22
72447: PUSH
72448: LD_OWVAR 2
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 2
72459: PUSH
72460: LD_INT 34
72462: PUSH
72463: LD_INT 11
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 34
72472: PUSH
72473: LD_INT 30
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: LIST
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PPUSH
72489: CALL_OW 69
72493: ST_TO_ADDR
// if not tmp then
72494: LD_VAR 0 2
72498: NOT
72499: IFFALSE 72503
// exit ;
72501: GO 72532
// for i in tmp do
72503: LD_ADDR_VAR 0 1
72507: PUSH
72508: LD_VAR 0 2
72512: PUSH
72513: FOR_IN
72514: IFFALSE 72530
// begin SetLives ( i , 0 ) ;
72516: LD_VAR 0 1
72520: PPUSH
72521: LD_INT 0
72523: PPUSH
72524: CALL_OW 234
// end ;
72528: GO 72513
72530: POP
72531: POP
// end ;
72532: PPOPN 2
72534: END
// every 0 0$1 trigger StreamModeActive and sBunker do
72535: LD_EXP 47
72539: IFFALSE 72547
72541: PUSH
72542: LD_EXP 57
72546: AND
72547: IFFALSE 72567
72549: GO 72551
72551: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
72552: LD_INT 32
72554: PPUSH
72555: LD_OWVAR 2
72559: PPUSH
72560: LD_INT 0
72562: PPUSH
72563: CALL_OW 324
72567: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
72568: LD_EXP 47
72572: IFFALSE 72580
72574: PUSH
72575: LD_EXP 58
72579: AND
72580: IFFALSE 72763
72582: GO 72584
72584: DISABLE
72585: LD_INT 0
72587: PPUSH
72588: PPUSH
72589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
72590: LD_ADDR_VAR 0 2
72594: PUSH
72595: LD_INT 22
72597: PUSH
72598: LD_OWVAR 2
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 33
72609: PUSH
72610: LD_INT 3
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PPUSH
72621: CALL_OW 69
72625: ST_TO_ADDR
// if not tmp then
72626: LD_VAR 0 2
72630: NOT
72631: IFFALSE 72635
// exit ;
72633: GO 72763
// side := 0 ;
72635: LD_ADDR_VAR 0 3
72639: PUSH
72640: LD_INT 0
72642: ST_TO_ADDR
// for i := 1 to 8 do
72643: LD_ADDR_VAR 0 1
72647: PUSH
72648: DOUBLE
72649: LD_INT 1
72651: DEC
72652: ST_TO_ADDR
72653: LD_INT 8
72655: PUSH
72656: FOR_TO
72657: IFFALSE 72707
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
72659: LD_OWVAR 2
72663: PUSH
72664: LD_VAR 0 1
72668: NONEQUAL
72669: IFFALSE 72691
72671: PUSH
72672: LD_OWVAR 2
72676: PPUSH
72677: LD_VAR 0 1
72681: PPUSH
72682: CALL_OW 81
72686: PUSH
72687: LD_INT 2
72689: EQUAL
72690: AND
72691: IFFALSE 72705
// begin side := i ;
72693: LD_ADDR_VAR 0 3
72697: PUSH
72698: LD_VAR 0 1
72702: ST_TO_ADDR
// break ;
72703: GO 72707
// end ;
72705: GO 72656
72707: POP
72708: POP
// if not side then
72709: LD_VAR 0 3
72713: NOT
72714: IFFALSE 72718
// exit ;
72716: GO 72763
// for i := 1 to tmp do
72718: LD_ADDR_VAR 0 1
72722: PUSH
72723: DOUBLE
72724: LD_INT 1
72726: DEC
72727: ST_TO_ADDR
72728: LD_VAR 0 2
72732: PUSH
72733: FOR_TO
72734: IFFALSE 72761
// if Prob ( 60 ) then
72736: LD_INT 60
72738: PPUSH
72739: CALL_OW 13
72743: IFFALSE 72759
// SetSide ( i , side ) ;
72745: LD_VAR 0 1
72749: PPUSH
72750: LD_VAR 0 3
72754: PPUSH
72755: CALL_OW 235
72759: GO 72733
72761: POP
72762: POP
// end ;
72763: PPOPN 3
72765: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
72766: LD_EXP 47
72770: IFFALSE 72778
72772: PUSH
72773: LD_EXP 60
72777: AND
72778: IFFALSE 72897
72780: GO 72782
72782: DISABLE
72783: LD_INT 0
72785: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
72786: LD_ADDR_VAR 0 1
72790: PUSH
72791: LD_INT 22
72793: PUSH
72794: LD_OWVAR 2
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 21
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 3
72815: PUSH
72816: LD_INT 23
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: LIST
72834: PPUSH
72835: CALL_OW 69
72839: PUSH
72840: FOR_IN
72841: IFFALSE 72895
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
72843: LD_VAR 0 1
72847: PPUSH
72848: CALL_OW 257
72852: PUSH
72853: LD_INT 1
72855: PUSH
72856: LD_INT 2
72858: PUSH
72859: LD_INT 3
72861: PUSH
72862: LD_INT 4
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: IN
72871: IFFALSE 72893
// SetClass ( un , rand ( 1 , 4 ) ) ;
72873: LD_VAR 0 1
72877: PPUSH
72878: LD_INT 1
72880: PPUSH
72881: LD_INT 4
72883: PPUSH
72884: CALL_OW 12
72888: PPUSH
72889: CALL_OW 336
72893: GO 72840
72895: POP
72896: POP
// end ;
72897: PPOPN 1
72899: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
72900: LD_EXP 47
72904: IFFALSE 72912
72906: PUSH
72907: LD_EXP 59
72911: AND
72912: IFFALSE 72991
72914: GO 72916
72916: DISABLE
72917: LD_INT 0
72919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72920: LD_ADDR_VAR 0 1
72924: PUSH
72925: LD_INT 22
72927: PUSH
72928: LD_OWVAR 2
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 21
72939: PUSH
72940: LD_INT 3
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PPUSH
72951: CALL_OW 69
72955: ST_TO_ADDR
// if not tmp then
72956: LD_VAR 0 1
72960: NOT
72961: IFFALSE 72965
// exit ;
72963: GO 72991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72965: LD_VAR 0 1
72969: PUSH
72970: LD_INT 1
72972: PPUSH
72973: LD_VAR 0 1
72977: PPUSH
72978: CALL_OW 12
72982: ARRAY
72983: PPUSH
72984: LD_INT 100
72986: PPUSH
72987: CALL_OW 234
// end ;
72991: PPOPN 1
72993: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72994: LD_EXP 47
72998: IFFALSE 73006
73000: PUSH
73001: LD_EXP 61
73005: AND
73006: IFFALSE 73104
73008: GO 73010
73010: DISABLE
73011: LD_INT 0
73013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73014: LD_ADDR_VAR 0 1
73018: PUSH
73019: LD_INT 22
73021: PUSH
73022: LD_OWVAR 2
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 21
73033: PUSH
73034: LD_INT 1
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PPUSH
73045: CALL_OW 69
73049: ST_TO_ADDR
// if not tmp then
73050: LD_VAR 0 1
73054: NOT
73055: IFFALSE 73059
// exit ;
73057: GO 73104
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73059: LD_VAR 0 1
73063: PUSH
73064: LD_INT 1
73066: PPUSH
73067: LD_VAR 0 1
73071: PPUSH
73072: CALL_OW 12
73076: ARRAY
73077: PPUSH
73078: LD_INT 1
73080: PPUSH
73081: LD_INT 4
73083: PPUSH
73084: CALL_OW 12
73088: PPUSH
73089: LD_INT 3000
73091: PPUSH
73092: LD_INT 9000
73094: PPUSH
73095: CALL_OW 12
73099: PPUSH
73100: CALL_OW 492
// end ;
73104: PPOPN 1
73106: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73107: LD_EXP 47
73111: IFFALSE 73119
73113: PUSH
73114: LD_EXP 62
73118: AND
73119: IFFALSE 73139
73121: GO 73123
73123: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73124: LD_INT 1
73126: PPUSH
73127: LD_OWVAR 2
73131: PPUSH
73132: LD_INT 0
73134: PPUSH
73135: CALL_OW 324
73139: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73140: LD_EXP 47
73144: IFFALSE 73152
73146: PUSH
73147: LD_EXP 63
73151: AND
73152: IFFALSE 73235
73154: GO 73156
73156: DISABLE
73157: LD_INT 0
73159: PPUSH
73160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73161: LD_ADDR_VAR 0 2
73165: PUSH
73166: LD_INT 22
73168: PUSH
73169: LD_OWVAR 2
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 21
73180: PUSH
73181: LD_INT 3
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PPUSH
73192: CALL_OW 69
73196: ST_TO_ADDR
// if not tmp then
73197: LD_VAR 0 2
73201: NOT
73202: IFFALSE 73206
// exit ;
73204: GO 73235
// for i in tmp do
73206: LD_ADDR_VAR 0 1
73210: PUSH
73211: LD_VAR 0 2
73215: PUSH
73216: FOR_IN
73217: IFFALSE 73233
// SetBLevel ( i , 10 ) ;
73219: LD_VAR 0 1
73223: PPUSH
73224: LD_INT 10
73226: PPUSH
73227: CALL_OW 241
73231: GO 73216
73233: POP
73234: POP
// end ;
73235: PPOPN 2
73237: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73238: LD_EXP 47
73242: IFFALSE 73250
73244: PUSH
73245: LD_EXP 64
73249: AND
73250: IFFALSE 73361
73252: GO 73254
73254: DISABLE
73255: LD_INT 0
73257: PPUSH
73258: PPUSH
73259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73260: LD_ADDR_VAR 0 3
73264: PUSH
73265: LD_INT 22
73267: PUSH
73268: LD_OWVAR 2
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 25
73279: PUSH
73280: LD_INT 1
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PPUSH
73291: CALL_OW 69
73295: ST_TO_ADDR
// if not tmp then
73296: LD_VAR 0 3
73300: NOT
73301: IFFALSE 73305
// exit ;
73303: GO 73361
// un := tmp [ rand ( 1 , tmp ) ] ;
73305: LD_ADDR_VAR 0 2
73309: PUSH
73310: LD_VAR 0 3
73314: PUSH
73315: LD_INT 1
73317: PPUSH
73318: LD_VAR 0 3
73322: PPUSH
73323: CALL_OW 12
73327: ARRAY
73328: ST_TO_ADDR
// if Crawls ( un ) then
73329: LD_VAR 0 2
73333: PPUSH
73334: CALL_OW 318
73338: IFFALSE 73349
// ComWalk ( un ) ;
73340: LD_VAR 0 2
73344: PPUSH
73345: CALL_OW 138
// SetClass ( un , class_sniper ) ;
73349: LD_VAR 0 2
73353: PPUSH
73354: LD_INT 5
73356: PPUSH
73357: CALL_OW 336
// end ;
73361: PPOPN 3
73363: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
73364: LD_EXP 47
73368: IFFALSE 73376
73370: PUSH
73371: LD_EXP 65
73375: AND
73376: IFFALSE 73388
73378: PUSH
73379: LD_OWVAR 67
73383: PUSH
73384: LD_INT 4
73386: LESS
73387: AND
73388: IFFALSE 73407
73390: GO 73392
73392: DISABLE
// begin Difficulty := Difficulty + 1 ;
73393: LD_ADDR_OWVAR 67
73397: PUSH
73398: LD_OWVAR 67
73402: PUSH
73403: LD_INT 1
73405: PLUS
73406: ST_TO_ADDR
// end ;
73407: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
73408: LD_EXP 47
73412: IFFALSE 73420
73414: PUSH
73415: LD_EXP 66
73419: AND
73420: IFFALSE 73523
73422: GO 73424
73424: DISABLE
73425: LD_INT 0
73427: PPUSH
// begin for i := 1 to 5 do
73428: LD_ADDR_VAR 0 1
73432: PUSH
73433: DOUBLE
73434: LD_INT 1
73436: DEC
73437: ST_TO_ADDR
73438: LD_INT 5
73440: PUSH
73441: FOR_TO
73442: IFFALSE 73521
// begin uc_nation := nation_nature ;
73444: LD_ADDR_OWVAR 21
73448: PUSH
73449: LD_INT 0
73451: ST_TO_ADDR
// uc_side := 0 ;
73452: LD_ADDR_OWVAR 20
73456: PUSH
73457: LD_INT 0
73459: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73460: LD_ADDR_OWVAR 29
73464: PUSH
73465: LD_INT 12
73467: PUSH
73468: LD_INT 12
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: ST_TO_ADDR
// hc_agressivity := 20 ;
73475: LD_ADDR_OWVAR 35
73479: PUSH
73480: LD_INT 20
73482: ST_TO_ADDR
// hc_class := class_tiger ;
73483: LD_ADDR_OWVAR 28
73487: PUSH
73488: LD_INT 14
73490: ST_TO_ADDR
// hc_gallery :=  ;
73491: LD_ADDR_OWVAR 33
73495: PUSH
73496: LD_STRING 
73498: ST_TO_ADDR
// hc_name :=  ;
73499: LD_ADDR_OWVAR 26
73503: PUSH
73504: LD_STRING 
73506: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
73507: CALL_OW 44
73511: PPUSH
73512: LD_INT 0
73514: PPUSH
73515: CALL_OW 51
// end ;
73519: GO 73441
73521: POP
73522: POP
// end ;
73523: PPOPN 1
73525: END
// every 0 0$1 trigger StreamModeActive and sBomb do
73526: LD_EXP 47
73530: IFFALSE 73538
73532: PUSH
73533: LD_EXP 67
73537: AND
73538: IFFALSE 73547
73540: GO 73542
73542: DISABLE
// StreamSibBomb ;
73543: CALL 73548 0 0
73547: END
// export function StreamSibBomb ; var i , x , y ; begin
73548: LD_INT 0
73550: PPUSH
73551: PPUSH
73552: PPUSH
73553: PPUSH
// result := false ;
73554: LD_ADDR_VAR 0 1
73558: PUSH
73559: LD_INT 0
73561: ST_TO_ADDR
// for i := 1 to 16 do
73562: LD_ADDR_VAR 0 2
73566: PUSH
73567: DOUBLE
73568: LD_INT 1
73570: DEC
73571: ST_TO_ADDR
73572: LD_INT 16
73574: PUSH
73575: FOR_TO
73576: IFFALSE 73775
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73578: LD_ADDR_VAR 0 3
73582: PUSH
73583: LD_INT 10
73585: PUSH
73586: LD_INT 20
73588: PUSH
73589: LD_INT 30
73591: PUSH
73592: LD_INT 40
73594: PUSH
73595: LD_INT 50
73597: PUSH
73598: LD_INT 60
73600: PUSH
73601: LD_INT 70
73603: PUSH
73604: LD_INT 80
73606: PUSH
73607: LD_INT 90
73609: PUSH
73610: LD_INT 100
73612: PUSH
73613: LD_INT 110
73615: PUSH
73616: LD_INT 120
73618: PUSH
73619: LD_INT 130
73621: PUSH
73622: LD_INT 140
73624: PUSH
73625: LD_INT 150
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 1
73647: PPUSH
73648: LD_INT 15
73650: PPUSH
73651: CALL_OW 12
73655: ARRAY
73656: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73657: LD_ADDR_VAR 0 4
73661: PUSH
73662: LD_INT 10
73664: PUSH
73665: LD_INT 20
73667: PUSH
73668: LD_INT 30
73670: PUSH
73671: LD_INT 40
73673: PUSH
73674: LD_INT 50
73676: PUSH
73677: LD_INT 60
73679: PUSH
73680: LD_INT 70
73682: PUSH
73683: LD_INT 80
73685: PUSH
73686: LD_INT 90
73688: PUSH
73689: LD_INT 100
73691: PUSH
73692: LD_INT 110
73694: PUSH
73695: LD_INT 120
73697: PUSH
73698: LD_INT 130
73700: PUSH
73701: LD_INT 140
73703: PUSH
73704: LD_INT 150
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 1
73726: PPUSH
73727: LD_INT 15
73729: PPUSH
73730: CALL_OW 12
73734: ARRAY
73735: ST_TO_ADDR
// if ValidHex ( x , y ) then
73736: LD_VAR 0 3
73740: PPUSH
73741: LD_VAR 0 4
73745: PPUSH
73746: CALL_OW 488
73750: IFFALSE 73773
// begin result := [ x , y ] ;
73752: LD_ADDR_VAR 0 1
73756: PUSH
73757: LD_VAR 0 3
73761: PUSH
73762: LD_VAR 0 4
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: ST_TO_ADDR
// break ;
73771: GO 73775
// end ; end ;
73773: GO 73575
73775: POP
73776: POP
// if result then
73777: LD_VAR 0 1
73781: IFFALSE 73841
// begin ToLua ( playSibBomb() ) ;
73783: LD_STRING playSibBomb()
73785: PPUSH
73786: CALL_OW 559
// wait ( 0 0$14 ) ;
73790: LD_INT 490
73792: PPUSH
73793: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
73797: LD_VAR 0 1
73801: PUSH
73802: LD_INT 1
73804: ARRAY
73805: PPUSH
73806: LD_VAR 0 1
73810: PUSH
73811: LD_INT 2
73813: ARRAY
73814: PPUSH
73815: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
73819: LD_VAR 0 1
73823: PUSH
73824: LD_INT 1
73826: ARRAY
73827: PPUSH
73828: LD_VAR 0 1
73832: PUSH
73833: LD_INT 2
73835: ARRAY
73836: PPUSH
73837: CALL_OW 429
// end ; end ;
73841: LD_VAR 0 1
73845: RET
// every 0 0$1 trigger StreamModeActive and sReset do
73846: LD_EXP 47
73850: IFFALSE 73858
73852: PUSH
73853: LD_EXP 69
73857: AND
73858: IFFALSE 73870
73860: GO 73862
73862: DISABLE
// YouLost (  ) ;
73863: LD_STRING 
73865: PPUSH
73866: CALL_OW 104
73870: END
// every 0 0$1 trigger StreamModeActive and sFog do
73871: LD_EXP 47
73875: IFFALSE 73883
73877: PUSH
73878: LD_EXP 68
73882: AND
73883: IFFALSE 73897
73885: GO 73887
73887: DISABLE
// FogOff ( your_side ) ;
73888: LD_OWVAR 2
73892: PPUSH
73893: CALL_OW 344
73897: END
// every 0 0$1 trigger StreamModeActive and sSun do
73898: LD_EXP 47
73902: IFFALSE 73910
73904: PUSH
73905: LD_EXP 70
73909: AND
73910: IFFALSE 73938
73912: GO 73914
73914: DISABLE
// begin solar_recharge_percent := 0 ;
73915: LD_ADDR_OWVAR 79
73919: PUSH
73920: LD_INT 0
73922: ST_TO_ADDR
// wait ( 5 5$00 ) ;
73923: LD_INT 10500
73925: PPUSH
73926: CALL_OW 67
// solar_recharge_percent := 100 ;
73930: LD_ADDR_OWVAR 79
73934: PUSH
73935: LD_INT 100
73937: ST_TO_ADDR
// end ;
73938: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73939: LD_EXP 47
73943: IFFALSE 73951
73945: PUSH
73946: LD_EXP 71
73950: AND
73951: IFFALSE 74190
73953: GO 73955
73955: DISABLE
73956: LD_INT 0
73958: PPUSH
73959: PPUSH
73960: PPUSH
// begin tmp := [ ] ;
73961: LD_ADDR_VAR 0 3
73965: PUSH
73966: EMPTY
73967: ST_TO_ADDR
// for i := 1 to 6 do
73968: LD_ADDR_VAR 0 1
73972: PUSH
73973: DOUBLE
73974: LD_INT 1
73976: DEC
73977: ST_TO_ADDR
73978: LD_INT 6
73980: PUSH
73981: FOR_TO
73982: IFFALSE 74087
// begin uc_nation := nation_nature ;
73984: LD_ADDR_OWVAR 21
73988: PUSH
73989: LD_INT 0
73991: ST_TO_ADDR
// uc_side := 0 ;
73992: LD_ADDR_OWVAR 20
73996: PUSH
73997: LD_INT 0
73999: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74000: LD_ADDR_OWVAR 29
74004: PUSH
74005: LD_INT 12
74007: PUSH
74008: LD_INT 12
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: ST_TO_ADDR
// hc_agressivity := 20 ;
74015: LD_ADDR_OWVAR 35
74019: PUSH
74020: LD_INT 20
74022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74023: LD_ADDR_OWVAR 28
74027: PUSH
74028: LD_INT 17
74030: ST_TO_ADDR
// hc_gallery :=  ;
74031: LD_ADDR_OWVAR 33
74035: PUSH
74036: LD_STRING 
74038: ST_TO_ADDR
// hc_name :=  ;
74039: LD_ADDR_OWVAR 26
74043: PUSH
74044: LD_STRING 
74046: ST_TO_ADDR
// un := CreateHuman ;
74047: LD_ADDR_VAR 0 2
74051: PUSH
74052: CALL_OW 44
74056: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74057: LD_VAR 0 2
74061: PPUSH
74062: LD_INT 1
74064: PPUSH
74065: CALL_OW 51
// tmp := tmp ^ un ;
74069: LD_ADDR_VAR 0 3
74073: PUSH
74074: LD_VAR 0 3
74078: PUSH
74079: LD_VAR 0 2
74083: ADD
74084: ST_TO_ADDR
// end ;
74085: GO 73981
74087: POP
74088: POP
// repeat wait ( 0 0$1 ) ;
74089: LD_INT 35
74091: PPUSH
74092: CALL_OW 67
// for un in tmp do
74096: LD_ADDR_VAR 0 2
74100: PUSH
74101: LD_VAR 0 3
74105: PUSH
74106: FOR_IN
74107: IFFALSE 74181
// begin if IsDead ( un ) then
74109: LD_VAR 0 2
74113: PPUSH
74114: CALL_OW 301
74118: IFFALSE 74138
// begin tmp := tmp diff un ;
74120: LD_ADDR_VAR 0 3
74124: PUSH
74125: LD_VAR 0 3
74129: PUSH
74130: LD_VAR 0 2
74134: DIFF
74135: ST_TO_ADDR
// continue ;
74136: GO 74106
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74138: LD_VAR 0 2
74142: PPUSH
74143: LD_INT 3
74145: PUSH
74146: LD_INT 22
74148: PUSH
74149: LD_INT 0
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PPUSH
74160: CALL_OW 69
74164: PPUSH
74165: LD_VAR 0 2
74169: PPUSH
74170: CALL_OW 74
74174: PPUSH
74175: CALL_OW 115
// end ;
74179: GO 74106
74181: POP
74182: POP
// until not tmp ;
74183: LD_VAR 0 3
74187: NOT
74188: IFFALSE 74089
// end ;
74190: PPOPN 3
74192: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74193: LD_EXP 47
74197: IFFALSE 74205
74199: PUSH
74200: LD_EXP 72
74204: AND
74205: IFFALSE 74259
74207: GO 74209
74209: DISABLE
// begin ToLua ( displayTroll(); ) ;
74210: LD_STRING displayTroll();
74212: PPUSH
74213: CALL_OW 559
// wait ( 3 3$00 ) ;
74217: LD_INT 6300
74219: PPUSH
74220: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74224: LD_STRING hideTroll();
74226: PPUSH
74227: CALL_OW 559
// wait ( 1 1$00 ) ;
74231: LD_INT 2100
74233: PPUSH
74234: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74238: LD_STRING displayTroll();
74240: PPUSH
74241: CALL_OW 559
// wait ( 1 1$00 ) ;
74245: LD_INT 2100
74247: PPUSH
74248: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74252: LD_STRING hideTroll();
74254: PPUSH
74255: CALL_OW 559
// end ;
74259: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74260: LD_EXP 47
74264: IFFALSE 74272
74266: PUSH
74267: LD_EXP 73
74271: AND
74272: IFFALSE 74335
74274: GO 74276
74276: DISABLE
74277: LD_INT 0
74279: PPUSH
// begin p := 0 ;
74280: LD_ADDR_VAR 0 1
74284: PUSH
74285: LD_INT 0
74287: ST_TO_ADDR
// repeat game_speed := 1 ;
74288: LD_ADDR_OWVAR 65
74292: PUSH
74293: LD_INT 1
74295: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74296: LD_INT 35
74298: PPUSH
74299: CALL_OW 67
// p := p + 1 ;
74303: LD_ADDR_VAR 0 1
74307: PUSH
74308: LD_VAR 0 1
74312: PUSH
74313: LD_INT 1
74315: PLUS
74316: ST_TO_ADDR
// until p >= 60 ;
74317: LD_VAR 0 1
74321: PUSH
74322: LD_INT 60
74324: GREATEREQUAL
74325: IFFALSE 74288
// game_speed := 4 ;
74327: LD_ADDR_OWVAR 65
74331: PUSH
74332: LD_INT 4
74334: ST_TO_ADDR
// end ;
74335: PPOPN 1
74337: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
74338: LD_EXP 47
74342: IFFALSE 74350
74344: PUSH
74345: LD_EXP 74
74349: AND
74350: IFFALSE 74496
74352: GO 74354
74354: DISABLE
74355: LD_INT 0
74357: PPUSH
74358: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74359: LD_ADDR_VAR 0 1
74363: PUSH
74364: LD_INT 22
74366: PUSH
74367: LD_OWVAR 2
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 2
74378: PUSH
74379: LD_INT 30
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 30
74391: PUSH
74392: LD_INT 1
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PPUSH
74408: CALL_OW 69
74412: ST_TO_ADDR
// if not depot then
74413: LD_VAR 0 1
74417: NOT
74418: IFFALSE 74422
// exit ;
74420: GO 74496
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
74422: LD_ADDR_VAR 0 2
74426: PUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_INT 1
74434: PPUSH
74435: LD_VAR 0 1
74439: PPUSH
74440: CALL_OW 12
74444: ARRAY
74445: PPUSH
74446: CALL_OW 274
74450: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
74451: LD_VAR 0 2
74455: PPUSH
74456: LD_INT 1
74458: PPUSH
74459: LD_INT 0
74461: PPUSH
74462: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
74466: LD_VAR 0 2
74470: PPUSH
74471: LD_INT 2
74473: PPUSH
74474: LD_INT 0
74476: PPUSH
74477: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
74481: LD_VAR 0 2
74485: PPUSH
74486: LD_INT 3
74488: PPUSH
74489: LD_INT 0
74491: PPUSH
74492: CALL_OW 277
// end ;
74496: PPOPN 2
74498: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
74499: LD_EXP 47
74503: IFFALSE 74511
74505: PUSH
74506: LD_EXP 75
74510: AND
74511: IFFALSE 74608
74513: GO 74515
74515: DISABLE
74516: LD_INT 0
74518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74519: LD_ADDR_VAR 0 1
74523: PUSH
74524: LD_INT 22
74526: PUSH
74527: LD_OWVAR 2
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 21
74538: PUSH
74539: LD_INT 1
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: LD_INT 3
74548: PUSH
74549: LD_INT 23
74551: PUSH
74552: LD_INT 0
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: PPUSH
74568: CALL_OW 69
74572: ST_TO_ADDR
// if not tmp then
74573: LD_VAR 0 1
74577: NOT
74578: IFFALSE 74582
// exit ;
74580: GO 74608
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
74582: LD_VAR 0 1
74586: PUSH
74587: LD_INT 1
74589: PPUSH
74590: LD_VAR 0 1
74594: PPUSH
74595: CALL_OW 12
74599: ARRAY
74600: PPUSH
74601: LD_INT 200
74603: PPUSH
74604: CALL_OW 234
// end ;
74608: PPOPN 1
74610: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
74611: LD_EXP 47
74615: IFFALSE 74623
74617: PUSH
74618: LD_EXP 76
74622: AND
74623: IFFALSE 74702
74625: GO 74627
74627: DISABLE
74628: LD_INT 0
74630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
74631: LD_ADDR_VAR 0 1
74635: PUSH
74636: LD_INT 22
74638: PUSH
74639: LD_OWVAR 2
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 21
74650: PUSH
74651: LD_INT 2
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PPUSH
74662: CALL_OW 69
74666: ST_TO_ADDR
// if not tmp then
74667: LD_VAR 0 1
74671: NOT
74672: IFFALSE 74676
// exit ;
74674: GO 74702
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
74676: LD_VAR 0 1
74680: PUSH
74681: LD_INT 1
74683: PPUSH
74684: LD_VAR 0 1
74688: PPUSH
74689: CALL_OW 12
74693: ARRAY
74694: PPUSH
74695: LD_INT 60
74697: PPUSH
74698: CALL_OW 234
// end ;
74702: PPOPN 1
74704: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
74705: LD_EXP 47
74709: IFFALSE 74717
74711: PUSH
74712: LD_EXP 77
74716: AND
74717: IFFALSE 74816
74719: GO 74721
74721: DISABLE
74722: LD_INT 0
74724: PPUSH
74725: PPUSH
// begin enable ;
74726: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
74727: LD_ADDR_VAR 0 1
74731: PUSH
74732: LD_INT 22
74734: PUSH
74735: LD_OWVAR 2
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 61
74746: PUSH
74747: EMPTY
74748: LIST
74749: PUSH
74750: LD_INT 33
74752: PUSH
74753: LD_INT 2
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: LIST
74764: PPUSH
74765: CALL_OW 69
74769: ST_TO_ADDR
// if not tmp then
74770: LD_VAR 0 1
74774: NOT
74775: IFFALSE 74779
// exit ;
74777: GO 74816
// for i in tmp do
74779: LD_ADDR_VAR 0 2
74783: PUSH
74784: LD_VAR 0 1
74788: PUSH
74789: FOR_IN
74790: IFFALSE 74814
// if IsControledBy ( i ) then
74792: LD_VAR 0 2
74796: PPUSH
74797: CALL_OW 312
74801: IFFALSE 74812
// ComUnlink ( i ) ;
74803: LD_VAR 0 2
74807: PPUSH
74808: CALL_OW 136
74812: GO 74789
74814: POP
74815: POP
// end ;
74816: PPOPN 2
74818: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
74819: LD_EXP 47
74823: IFFALSE 74831
74825: PUSH
74826: LD_EXP 78
74830: AND
74831: IFFALSE 74971
74833: GO 74835
74835: DISABLE
74836: LD_INT 0
74838: PPUSH
74839: PPUSH
// begin ToLua ( displayPowell(); ) ;
74840: LD_STRING displayPowell();
74842: PPUSH
74843: CALL_OW 559
// uc_side := 0 ;
74847: LD_ADDR_OWVAR 20
74851: PUSH
74852: LD_INT 0
74854: ST_TO_ADDR
// uc_nation := 2 ;
74855: LD_ADDR_OWVAR 21
74859: PUSH
74860: LD_INT 2
74862: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
74863: LD_ADDR_OWVAR 37
74867: PUSH
74868: LD_INT 14
74870: ST_TO_ADDR
// vc_engine := engine_siberite ;
74871: LD_ADDR_OWVAR 39
74875: PUSH
74876: LD_INT 3
74878: ST_TO_ADDR
// vc_control := control_apeman ;
74879: LD_ADDR_OWVAR 38
74883: PUSH
74884: LD_INT 5
74886: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
74887: LD_ADDR_OWVAR 40
74891: PUSH
74892: LD_INT 29
74894: ST_TO_ADDR
// un := CreateVehicle ;
74895: LD_ADDR_VAR 0 2
74899: PUSH
74900: CALL_OW 45
74904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74905: LD_VAR 0 2
74909: PPUSH
74910: LD_INT 1
74912: PPUSH
74913: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74917: LD_INT 35
74919: PPUSH
74920: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74924: LD_VAR 0 2
74928: PPUSH
74929: LD_INT 22
74931: PUSH
74932: LD_OWVAR 2
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: PPUSH
74941: CALL_OW 69
74945: PPUSH
74946: LD_VAR 0 2
74950: PPUSH
74951: CALL_OW 74
74955: PPUSH
74956: CALL_OW 115
// until IsDead ( un ) ;
74960: LD_VAR 0 2
74964: PPUSH
74965: CALL_OW 301
74969: IFFALSE 74917
// end ;
74971: PPOPN 2
74973: END
// every 0 0$1 trigger StreamModeActive and sStu do
74974: LD_EXP 47
74978: IFFALSE 74986
74980: PUSH
74981: LD_EXP 86
74985: AND
74986: IFFALSE 75002
74988: GO 74990
74990: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74991: LD_STRING displayStucuk();
74993: PPUSH
74994: CALL_OW 559
// ResetFog ;
74998: CALL_OW 335
// end ;
75002: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75003: LD_EXP 47
75007: IFFALSE 75015
75009: PUSH
75010: LD_EXP 79
75014: AND
75015: IFFALSE 75156
75017: GO 75019
75019: DISABLE
75020: LD_INT 0
75022: PPUSH
75023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75024: LD_ADDR_VAR 0 2
75028: PUSH
75029: LD_INT 22
75031: PUSH
75032: LD_OWVAR 2
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 21
75043: PUSH
75044: LD_INT 1
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PPUSH
75055: CALL_OW 69
75059: ST_TO_ADDR
// if not tmp then
75060: LD_VAR 0 2
75064: NOT
75065: IFFALSE 75069
// exit ;
75067: GO 75156
// un := tmp [ rand ( 1 , tmp ) ] ;
75069: LD_ADDR_VAR 0 1
75073: PUSH
75074: LD_VAR 0 2
75078: PUSH
75079: LD_INT 1
75081: PPUSH
75082: LD_VAR 0 2
75086: PPUSH
75087: CALL_OW 12
75091: ARRAY
75092: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75093: LD_VAR 0 1
75097: PPUSH
75098: LD_INT 0
75100: PPUSH
75101: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75105: LD_VAR 0 1
75109: PPUSH
75110: LD_OWVAR 3
75114: PUSH
75115: LD_VAR 0 1
75119: DIFF
75120: PPUSH
75121: LD_VAR 0 1
75125: PPUSH
75126: CALL_OW 74
75130: PPUSH
75131: CALL_OW 115
// wait ( 0 0$20 ) ;
75135: LD_INT 700
75137: PPUSH
75138: CALL_OW 67
// SetSide ( un , your_side ) ;
75142: LD_VAR 0 1
75146: PPUSH
75147: LD_OWVAR 2
75151: PPUSH
75152: CALL_OW 235
// end ;
75156: PPOPN 2
75158: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75159: LD_EXP 47
75163: IFFALSE 75171
75165: PUSH
75166: LD_EXP 80
75170: AND
75171: IFFALSE 75277
75173: GO 75175
75175: DISABLE
75176: LD_INT 0
75178: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75179: LD_ADDR_VAR 0 1
75183: PUSH
75184: LD_INT 22
75186: PUSH
75187: LD_OWVAR 2
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 2
75198: PUSH
75199: LD_INT 30
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 30
75211: PUSH
75212: LD_INT 1
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PPUSH
75228: CALL_OW 69
75232: ST_TO_ADDR
// if not depot then
75233: LD_VAR 0 1
75237: NOT
75238: IFFALSE 75242
// exit ;
75240: GO 75277
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75242: LD_VAR 0 1
75246: PUSH
75247: LD_INT 1
75249: ARRAY
75250: PPUSH
75251: CALL_OW 250
75255: PPUSH
75256: LD_VAR 0 1
75260: PUSH
75261: LD_INT 1
75263: ARRAY
75264: PPUSH
75265: CALL_OW 251
75269: PPUSH
75270: LD_INT 70
75272: PPUSH
75273: CALL_OW 495
// end ;
75277: PPOPN 1
75279: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75280: LD_EXP 47
75284: IFFALSE 75292
75286: PUSH
75287: LD_EXP 81
75291: AND
75292: IFFALSE 75503
75294: GO 75296
75296: DISABLE
75297: LD_INT 0
75299: PPUSH
75300: PPUSH
75301: PPUSH
75302: PPUSH
75303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75304: LD_ADDR_VAR 0 5
75308: PUSH
75309: LD_INT 22
75311: PUSH
75312: LD_OWVAR 2
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: PUSH
75321: LD_INT 21
75323: PUSH
75324: LD_INT 1
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PPUSH
75335: CALL_OW 69
75339: ST_TO_ADDR
// if not tmp then
75340: LD_VAR 0 5
75344: NOT
75345: IFFALSE 75349
// exit ;
75347: GO 75503
// for i in tmp do
75349: LD_ADDR_VAR 0 1
75353: PUSH
75354: LD_VAR 0 5
75358: PUSH
75359: FOR_IN
75360: IFFALSE 75501
// begin d := rand ( 0 , 5 ) ;
75362: LD_ADDR_VAR 0 4
75366: PUSH
75367: LD_INT 0
75369: PPUSH
75370: LD_INT 5
75372: PPUSH
75373: CALL_OW 12
75377: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
75378: LD_ADDR_VAR 0 2
75382: PUSH
75383: LD_VAR 0 1
75387: PPUSH
75388: CALL_OW 250
75392: PPUSH
75393: LD_VAR 0 4
75397: PPUSH
75398: LD_INT 3
75400: PPUSH
75401: LD_INT 12
75403: PPUSH
75404: CALL_OW 12
75408: PPUSH
75409: CALL_OW 272
75413: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
75414: LD_ADDR_VAR 0 3
75418: PUSH
75419: LD_VAR 0 1
75423: PPUSH
75424: CALL_OW 251
75428: PPUSH
75429: LD_VAR 0 4
75433: PPUSH
75434: LD_INT 3
75436: PPUSH
75437: LD_INT 12
75439: PPUSH
75440: CALL_OW 12
75444: PPUSH
75445: CALL_OW 273
75449: ST_TO_ADDR
// if ValidHex ( x , y ) then
75450: LD_VAR 0 2
75454: PPUSH
75455: LD_VAR 0 3
75459: PPUSH
75460: CALL_OW 488
75464: IFFALSE 75499
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
75466: LD_VAR 0 1
75470: PPUSH
75471: LD_VAR 0 2
75475: PPUSH
75476: LD_VAR 0 3
75480: PPUSH
75481: LD_INT 3
75483: PPUSH
75484: LD_INT 6
75486: PPUSH
75487: CALL_OW 12
75491: PPUSH
75492: LD_INT 1
75494: PPUSH
75495: CALL_OW 483
// end ;
75499: GO 75359
75501: POP
75502: POP
// end ;
75503: PPOPN 5
75505: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
75506: LD_EXP 47
75510: IFFALSE 75518
75512: PUSH
75513: LD_EXP 82
75517: AND
75518: IFFALSE 75612
75520: GO 75522
75522: DISABLE
75523: LD_INT 0
75525: PPUSH
75526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
75527: LD_ADDR_VAR 0 2
75531: PUSH
75532: LD_INT 22
75534: PUSH
75535: LD_OWVAR 2
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: LD_INT 32
75546: PUSH
75547: LD_INT 1
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 21
75556: PUSH
75557: LD_INT 2
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: LIST
75568: PPUSH
75569: CALL_OW 69
75573: ST_TO_ADDR
// if not tmp then
75574: LD_VAR 0 2
75578: NOT
75579: IFFALSE 75583
// exit ;
75581: GO 75612
// for i in tmp do
75583: LD_ADDR_VAR 0 1
75587: PUSH
75588: LD_VAR 0 2
75592: PUSH
75593: FOR_IN
75594: IFFALSE 75610
// SetFuel ( i , 0 ) ;
75596: LD_VAR 0 1
75600: PPUSH
75601: LD_INT 0
75603: PPUSH
75604: CALL_OW 240
75608: GO 75593
75610: POP
75611: POP
// end ;
75612: PPOPN 2
75614: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
75615: LD_EXP 47
75619: IFFALSE 75627
75621: PUSH
75622: LD_EXP 83
75626: AND
75627: IFFALSE 75693
75629: GO 75631
75631: DISABLE
75632: LD_INT 0
75634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75635: LD_ADDR_VAR 0 1
75639: PUSH
75640: LD_INT 22
75642: PUSH
75643: LD_OWVAR 2
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_INT 30
75654: PUSH
75655: LD_INT 29
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PPUSH
75666: CALL_OW 69
75670: ST_TO_ADDR
// if not tmp then
75671: LD_VAR 0 1
75675: NOT
75676: IFFALSE 75680
// exit ;
75678: GO 75693
// DestroyUnit ( tmp [ 1 ] ) ;
75680: LD_VAR 0 1
75684: PUSH
75685: LD_INT 1
75687: ARRAY
75688: PPUSH
75689: CALL_OW 65
// end ;
75693: PPOPN 1
75695: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
75696: LD_EXP 47
75700: IFFALSE 75708
75702: PUSH
75703: LD_EXP 85
75707: AND
75708: IFFALSE 75837
75710: GO 75712
75712: DISABLE
75713: LD_INT 0
75715: PPUSH
// begin uc_side := 0 ;
75716: LD_ADDR_OWVAR 20
75720: PUSH
75721: LD_INT 0
75723: ST_TO_ADDR
// uc_nation := nation_arabian ;
75724: LD_ADDR_OWVAR 21
75728: PUSH
75729: LD_INT 2
75731: ST_TO_ADDR
// hc_gallery :=  ;
75732: LD_ADDR_OWVAR 33
75736: PUSH
75737: LD_STRING 
75739: ST_TO_ADDR
// hc_name :=  ;
75740: LD_ADDR_OWVAR 26
75744: PUSH
75745: LD_STRING 
75747: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
75748: LD_INT 1
75750: PPUSH
75751: LD_INT 11
75753: PPUSH
75754: LD_INT 10
75756: PPUSH
75757: CALL_OW 380
// un := CreateHuman ;
75761: LD_ADDR_VAR 0 1
75765: PUSH
75766: CALL_OW 44
75770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_INT 1
75778: PPUSH
75779: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75783: LD_INT 35
75785: PPUSH
75786: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75790: LD_VAR 0 1
75794: PPUSH
75795: LD_INT 22
75797: PUSH
75798: LD_OWVAR 2
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PPUSH
75807: CALL_OW 69
75811: PPUSH
75812: LD_VAR 0 1
75816: PPUSH
75817: CALL_OW 74
75821: PPUSH
75822: CALL_OW 115
// until IsDead ( un ) ;
75826: LD_VAR 0 1
75830: PPUSH
75831: CALL_OW 301
75835: IFFALSE 75783
// end ;
75837: PPOPN 1
75839: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
75840: LD_EXP 47
75844: IFFALSE 75852
75846: PUSH
75847: LD_EXP 87
75851: AND
75852: IFFALSE 75864
75854: GO 75856
75856: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
75857: LD_STRING earthquake(getX(game), 0, 32)
75859: PPUSH
75860: CALL_OW 559
75864: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
75865: LD_EXP 47
75869: IFFALSE 75877
75871: PUSH
75872: LD_EXP 88
75876: AND
75877: IFFALSE 75968
75879: GO 75881
75881: DISABLE
75882: LD_INT 0
75884: PPUSH
// begin enable ;
75885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
75886: LD_ADDR_VAR 0 1
75890: PUSH
75891: LD_INT 22
75893: PUSH
75894: LD_OWVAR 2
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: LD_INT 21
75905: PUSH
75906: LD_INT 2
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 33
75915: PUSH
75916: LD_INT 3
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: LIST
75927: PPUSH
75928: CALL_OW 69
75932: ST_TO_ADDR
// if not tmp then
75933: LD_VAR 0 1
75937: NOT
75938: IFFALSE 75942
// exit ;
75940: GO 75968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75942: LD_VAR 0 1
75946: PUSH
75947: LD_INT 1
75949: PPUSH
75950: LD_VAR 0 1
75954: PPUSH
75955: CALL_OW 12
75959: ARRAY
75960: PPUSH
75961: LD_INT 1
75963: PPUSH
75964: CALL_OW 234
// end ;
75968: PPOPN 1
75970: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75971: LD_EXP 47
75975: IFFALSE 75983
75977: PUSH
75978: LD_EXP 89
75982: AND
75983: IFFALSE 76124
75985: GO 75987
75987: DISABLE
75988: LD_INT 0
75990: PPUSH
75991: PPUSH
75992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75993: LD_ADDR_VAR 0 3
75997: PUSH
75998: LD_INT 22
76000: PUSH
76001: LD_OWVAR 2
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PUSH
76010: LD_INT 25
76012: PUSH
76013: LD_INT 1
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PPUSH
76024: CALL_OW 69
76028: ST_TO_ADDR
// if not tmp then
76029: LD_VAR 0 3
76033: NOT
76034: IFFALSE 76038
// exit ;
76036: GO 76124
// un := tmp [ rand ( 1 , tmp ) ] ;
76038: LD_ADDR_VAR 0 2
76042: PUSH
76043: LD_VAR 0 3
76047: PUSH
76048: LD_INT 1
76050: PPUSH
76051: LD_VAR 0 3
76055: PPUSH
76056: CALL_OW 12
76060: ARRAY
76061: ST_TO_ADDR
// if Crawls ( un ) then
76062: LD_VAR 0 2
76066: PPUSH
76067: CALL_OW 318
76071: IFFALSE 76082
// ComWalk ( un ) ;
76073: LD_VAR 0 2
76077: PPUSH
76078: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76082: LD_VAR 0 2
76086: PPUSH
76087: LD_INT 9
76089: PPUSH
76090: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76094: LD_INT 28
76096: PPUSH
76097: LD_OWVAR 2
76101: PPUSH
76102: LD_INT 2
76104: PPUSH
76105: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76109: LD_INT 29
76111: PPUSH
76112: LD_OWVAR 2
76116: PPUSH
76117: LD_INT 2
76119: PPUSH
76120: CALL_OW 322
// end ;
76124: PPOPN 3
76126: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76127: LD_EXP 47
76131: IFFALSE 76139
76133: PUSH
76134: LD_EXP 90
76138: AND
76139: IFFALSE 76250
76141: GO 76143
76143: DISABLE
76144: LD_INT 0
76146: PPUSH
76147: PPUSH
76148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76149: LD_ADDR_VAR 0 3
76153: PUSH
76154: LD_INT 22
76156: PUSH
76157: LD_OWVAR 2
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: PUSH
76166: LD_INT 25
76168: PUSH
76169: LD_INT 1
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PPUSH
76180: CALL_OW 69
76184: ST_TO_ADDR
// if not tmp then
76185: LD_VAR 0 3
76189: NOT
76190: IFFALSE 76194
// exit ;
76192: GO 76250
// un := tmp [ rand ( 1 , tmp ) ] ;
76194: LD_ADDR_VAR 0 2
76198: PUSH
76199: LD_VAR 0 3
76203: PUSH
76204: LD_INT 1
76206: PPUSH
76207: LD_VAR 0 3
76211: PPUSH
76212: CALL_OW 12
76216: ARRAY
76217: ST_TO_ADDR
// if Crawls ( un ) then
76218: LD_VAR 0 2
76222: PPUSH
76223: CALL_OW 318
76227: IFFALSE 76238
// ComWalk ( un ) ;
76229: LD_VAR 0 2
76233: PPUSH
76234: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76238: LD_VAR 0 2
76242: PPUSH
76243: LD_INT 8
76245: PPUSH
76246: CALL_OW 336
// end ;
76250: PPOPN 3
76252: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76253: LD_EXP 47
76257: IFFALSE 76265
76259: PUSH
76260: LD_EXP 91
76264: AND
76265: IFFALSE 76409
76267: GO 76269
76269: DISABLE
76270: LD_INT 0
76272: PPUSH
76273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76274: LD_ADDR_VAR 0 2
76278: PUSH
76279: LD_INT 22
76281: PUSH
76282: LD_OWVAR 2
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 21
76293: PUSH
76294: LD_INT 2
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 2
76303: PUSH
76304: LD_INT 34
76306: PUSH
76307: LD_INT 12
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: LD_INT 34
76316: PUSH
76317: LD_INT 51
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 34
76326: PUSH
76327: LD_INT 32
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: LIST
76344: PPUSH
76345: CALL_OW 69
76349: ST_TO_ADDR
// if not tmp then
76350: LD_VAR 0 2
76354: NOT
76355: IFFALSE 76359
// exit ;
76357: GO 76409
// for i in tmp do
76359: LD_ADDR_VAR 0 1
76363: PUSH
76364: LD_VAR 0 2
76368: PUSH
76369: FOR_IN
76370: IFFALSE 76407
// if GetCargo ( i , mat_artifact ) = 0 then
76372: LD_VAR 0 1
76376: PPUSH
76377: LD_INT 4
76379: PPUSH
76380: CALL_OW 289
76384: PUSH
76385: LD_INT 0
76387: EQUAL
76388: IFFALSE 76405
// SetCargo ( i , mat_siberit , 100 ) ;
76390: LD_VAR 0 1
76394: PPUSH
76395: LD_INT 3
76397: PPUSH
76398: LD_INT 100
76400: PPUSH
76401: CALL_OW 290
76405: GO 76369
76407: POP
76408: POP
// end ;
76409: PPOPN 2
76411: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
76412: LD_EXP 47
76416: IFFALSE 76424
76418: PUSH
76419: LD_EXP 92
76423: AND
76424: IFFALSE 76607
76426: GO 76428
76428: DISABLE
76429: LD_INT 0
76431: PPUSH
76432: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76433: LD_ADDR_VAR 0 2
76437: PUSH
76438: LD_INT 22
76440: PUSH
76441: LD_OWVAR 2
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PPUSH
76450: CALL_OW 69
76454: ST_TO_ADDR
// if not tmp then
76455: LD_VAR 0 2
76459: NOT
76460: IFFALSE 76464
// exit ;
76462: GO 76607
// for i := 1 to 2 do
76464: LD_ADDR_VAR 0 1
76468: PUSH
76469: DOUBLE
76470: LD_INT 1
76472: DEC
76473: ST_TO_ADDR
76474: LD_INT 2
76476: PUSH
76477: FOR_TO
76478: IFFALSE 76605
// begin uc_side := your_side ;
76480: LD_ADDR_OWVAR 20
76484: PUSH
76485: LD_OWVAR 2
76489: ST_TO_ADDR
// uc_nation := nation_american ;
76490: LD_ADDR_OWVAR 21
76494: PUSH
76495: LD_INT 1
76497: ST_TO_ADDR
// vc_chassis := us_morphling ;
76498: LD_ADDR_OWVAR 37
76502: PUSH
76503: LD_INT 5
76505: ST_TO_ADDR
// vc_engine := engine_siberite ;
76506: LD_ADDR_OWVAR 39
76510: PUSH
76511: LD_INT 3
76513: ST_TO_ADDR
// vc_control := control_computer ;
76514: LD_ADDR_OWVAR 38
76518: PUSH
76519: LD_INT 3
76521: ST_TO_ADDR
// vc_weapon := us_double_laser ;
76522: LD_ADDR_OWVAR 40
76526: PUSH
76527: LD_INT 10
76529: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
76530: LD_VAR 0 2
76534: PUSH
76535: LD_INT 1
76537: ARRAY
76538: PPUSH
76539: CALL_OW 310
76543: NOT
76544: IFFALSE 76591
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
76546: CALL_OW 45
76550: PPUSH
76551: LD_VAR 0 2
76555: PUSH
76556: LD_INT 1
76558: ARRAY
76559: PPUSH
76560: CALL_OW 250
76564: PPUSH
76565: LD_VAR 0 2
76569: PUSH
76570: LD_INT 1
76572: ARRAY
76573: PPUSH
76574: CALL_OW 251
76578: PPUSH
76579: LD_INT 12
76581: PPUSH
76582: LD_INT 1
76584: PPUSH
76585: CALL_OW 50
76589: GO 76603
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
76591: CALL_OW 45
76595: PPUSH
76596: LD_INT 1
76598: PPUSH
76599: CALL_OW 51
// end ;
76603: GO 76477
76605: POP
76606: POP
// end ;
76607: PPOPN 2
76609: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
76610: LD_EXP 47
76614: IFFALSE 76622
76616: PUSH
76617: LD_EXP 93
76621: AND
76622: IFFALSE 76844
76624: GO 76626
76626: DISABLE
76627: LD_INT 0
76629: PPUSH
76630: PPUSH
76631: PPUSH
76632: PPUSH
76633: PPUSH
76634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76635: LD_ADDR_VAR 0 6
76639: PUSH
76640: LD_INT 22
76642: PUSH
76643: LD_OWVAR 2
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: LD_INT 21
76654: PUSH
76655: LD_INT 1
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: PUSH
76662: LD_INT 3
76664: PUSH
76665: LD_INT 23
76667: PUSH
76668: LD_INT 0
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: LIST
76683: PPUSH
76684: CALL_OW 69
76688: ST_TO_ADDR
// if not tmp then
76689: LD_VAR 0 6
76693: NOT
76694: IFFALSE 76698
// exit ;
76696: GO 76844
// s1 := rand ( 1 , 4 ) ;
76698: LD_ADDR_VAR 0 2
76702: PUSH
76703: LD_INT 1
76705: PPUSH
76706: LD_INT 4
76708: PPUSH
76709: CALL_OW 12
76713: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
76714: LD_ADDR_VAR 0 4
76718: PUSH
76719: LD_VAR 0 6
76723: PUSH
76724: LD_INT 1
76726: ARRAY
76727: PPUSH
76728: LD_VAR 0 2
76732: PPUSH
76733: CALL_OW 259
76737: ST_TO_ADDR
// if s1 = 1 then
76738: LD_VAR 0 2
76742: PUSH
76743: LD_INT 1
76745: EQUAL
76746: IFFALSE 76766
// s2 := rand ( 2 , 4 ) else
76748: LD_ADDR_VAR 0 3
76752: PUSH
76753: LD_INT 2
76755: PPUSH
76756: LD_INT 4
76758: PPUSH
76759: CALL_OW 12
76763: ST_TO_ADDR
76764: GO 76774
// s2 := 1 ;
76766: LD_ADDR_VAR 0 3
76770: PUSH
76771: LD_INT 1
76773: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
76774: LD_ADDR_VAR 0 5
76778: PUSH
76779: LD_VAR 0 6
76783: PUSH
76784: LD_INT 1
76786: ARRAY
76787: PPUSH
76788: LD_VAR 0 3
76792: PPUSH
76793: CALL_OW 259
76797: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
76798: LD_VAR 0 6
76802: PUSH
76803: LD_INT 1
76805: ARRAY
76806: PPUSH
76807: LD_VAR 0 2
76811: PPUSH
76812: LD_VAR 0 5
76816: PPUSH
76817: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
76821: LD_VAR 0 6
76825: PUSH
76826: LD_INT 1
76828: ARRAY
76829: PPUSH
76830: LD_VAR 0 3
76834: PPUSH
76835: LD_VAR 0 4
76839: PPUSH
76840: CALL_OW 237
// end ;
76844: PPOPN 6
76846: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
76847: LD_EXP 47
76851: IFFALSE 76859
76853: PUSH
76854: LD_EXP 94
76858: AND
76859: IFFALSE 76938
76861: GO 76863
76863: DISABLE
76864: LD_INT 0
76866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
76867: LD_ADDR_VAR 0 1
76871: PUSH
76872: LD_INT 22
76874: PUSH
76875: LD_OWVAR 2
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 30
76886: PUSH
76887: LD_INT 3
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PPUSH
76898: CALL_OW 69
76902: ST_TO_ADDR
// if not tmp then
76903: LD_VAR 0 1
76907: NOT
76908: IFFALSE 76912
// exit ;
76910: GO 76938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76912: LD_VAR 0 1
76916: PUSH
76917: LD_INT 1
76919: PPUSH
76920: LD_VAR 0 1
76924: PPUSH
76925: CALL_OW 12
76929: ARRAY
76930: PPUSH
76931: LD_INT 1
76933: PPUSH
76934: CALL_OW 234
// end ;
76938: PPOPN 1
76940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
76941: LD_EXP 47
76945: IFFALSE 76953
76947: PUSH
76948: LD_EXP 95
76952: AND
76953: IFFALSE 77065
76955: GO 76957
76957: DISABLE
76958: LD_INT 0
76960: PPUSH
76961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
76962: LD_ADDR_VAR 0 2
76966: PUSH
76967: LD_INT 22
76969: PUSH
76970: LD_OWVAR 2
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 2
76981: PUSH
76982: LD_INT 30
76984: PUSH
76985: LD_INT 27
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 30
76994: PUSH
76995: LD_INT 26
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 30
77004: PUSH
77005: LD_INT 28
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PPUSH
77022: CALL_OW 69
77026: ST_TO_ADDR
// if not tmp then
77027: LD_VAR 0 2
77031: NOT
77032: IFFALSE 77036
// exit ;
77034: GO 77065
// for i in tmp do
77036: LD_ADDR_VAR 0 1
77040: PUSH
77041: LD_VAR 0 2
77045: PUSH
77046: FOR_IN
77047: IFFALSE 77063
// SetLives ( i , 1 ) ;
77049: LD_VAR 0 1
77053: PPUSH
77054: LD_INT 1
77056: PPUSH
77057: CALL_OW 234
77061: GO 77046
77063: POP
77064: POP
// end ;
77065: PPOPN 2
77067: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77068: LD_EXP 47
77072: IFFALSE 77080
77074: PUSH
77075: LD_EXP 96
77079: AND
77080: IFFALSE 77367
77082: GO 77084
77084: DISABLE
77085: LD_INT 0
77087: PPUSH
77088: PPUSH
77089: PPUSH
// begin i := rand ( 1 , 7 ) ;
77090: LD_ADDR_VAR 0 1
77094: PUSH
77095: LD_INT 1
77097: PPUSH
77098: LD_INT 7
77100: PPUSH
77101: CALL_OW 12
77105: ST_TO_ADDR
// case i of 1 :
77106: LD_VAR 0 1
77110: PUSH
77111: LD_INT 1
77113: DOUBLE
77114: EQUAL
77115: IFTRUE 77119
77117: GO 77129
77119: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77120: LD_STRING earthquake(getX(game), 0, 32)
77122: PPUSH
77123: CALL_OW 559
77127: GO 77367
77129: LD_INT 2
77131: DOUBLE
77132: EQUAL
77133: IFTRUE 77137
77135: GO 77151
77137: POP
// begin ToLua ( displayStucuk(); ) ;
77138: LD_STRING displayStucuk();
77140: PPUSH
77141: CALL_OW 559
// ResetFog ;
77145: CALL_OW 335
// end ; 3 :
77149: GO 77367
77151: LD_INT 3
77153: DOUBLE
77154: EQUAL
77155: IFTRUE 77159
77157: GO 77263
77159: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77160: LD_ADDR_VAR 0 2
77164: PUSH
77165: LD_INT 22
77167: PUSH
77168: LD_OWVAR 2
77172: PUSH
77173: EMPTY
77174: LIST
77175: LIST
77176: PUSH
77177: LD_INT 25
77179: PUSH
77180: LD_INT 1
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PPUSH
77191: CALL_OW 69
77195: ST_TO_ADDR
// if not tmp then
77196: LD_VAR 0 2
77200: NOT
77201: IFFALSE 77205
// exit ;
77203: GO 77367
// un := tmp [ rand ( 1 , tmp ) ] ;
77205: LD_ADDR_VAR 0 3
77209: PUSH
77210: LD_VAR 0 2
77214: PUSH
77215: LD_INT 1
77217: PPUSH
77218: LD_VAR 0 2
77222: PPUSH
77223: CALL_OW 12
77227: ARRAY
77228: ST_TO_ADDR
// if Crawls ( un ) then
77229: LD_VAR 0 3
77233: PPUSH
77234: CALL_OW 318
77238: IFFALSE 77249
// ComWalk ( un ) ;
77240: LD_VAR 0 3
77244: PPUSH
77245: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77249: LD_VAR 0 3
77253: PPUSH
77254: LD_INT 8
77256: PPUSH
77257: CALL_OW 336
// end ; 4 :
77261: GO 77367
77263: LD_INT 4
77265: DOUBLE
77266: EQUAL
77267: IFTRUE 77271
77269: GO 77345
77271: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77272: LD_ADDR_VAR 0 2
77276: PUSH
77277: LD_INT 22
77279: PUSH
77280: LD_OWVAR 2
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 30
77291: PUSH
77292: LD_INT 29
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PPUSH
77303: CALL_OW 69
77307: ST_TO_ADDR
// if not tmp then
77308: LD_VAR 0 2
77312: NOT
77313: IFFALSE 77317
// exit ;
77315: GO 77367
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77317: LD_VAR 0 2
77321: PUSH
77322: LD_INT 1
77324: ARRAY
77325: PPUSH
77326: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77330: LD_VAR 0 2
77334: PUSH
77335: LD_INT 1
77337: ARRAY
77338: PPUSH
77339: CALL_OW 65
// end ; 5 .. 7 :
77343: GO 77367
77345: LD_INT 5
77347: DOUBLE
77348: GREATEREQUAL
77349: IFFALSE 77357
77351: LD_INT 7
77353: DOUBLE
77354: LESSEQUAL
77355: IFTRUE 77359
77357: GO 77366
77359: POP
// StreamSibBomb ; end ;
77360: CALL 73548 0 0
77364: GO 77367
77366: POP
// end ;
77367: PPOPN 3
77369: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
77370: LD_EXP 47
77374: IFFALSE 77382
77376: PUSH
77377: LD_EXP 97
77381: AND
77382: IFFALSE 77538
77384: GO 77386
77386: DISABLE
77387: LD_INT 0
77389: PPUSH
77390: PPUSH
77391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
77392: LD_ADDR_VAR 0 2
77396: PUSH
77397: LD_INT 81
77399: PUSH
77400: LD_OWVAR 2
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: PUSH
77409: LD_INT 2
77411: PUSH
77412: LD_INT 21
77414: PUSH
77415: LD_INT 1
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: PUSH
77422: LD_INT 21
77424: PUSH
77425: LD_INT 2
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: LIST
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PPUSH
77441: CALL_OW 69
77445: ST_TO_ADDR
// if not tmp then
77446: LD_VAR 0 2
77450: NOT
77451: IFFALSE 77455
// exit ;
77453: GO 77538
// p := 0 ;
77455: LD_ADDR_VAR 0 3
77459: PUSH
77460: LD_INT 0
77462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77463: LD_INT 35
77465: PPUSH
77466: CALL_OW 67
// p := p + 1 ;
77470: LD_ADDR_VAR 0 3
77474: PUSH
77475: LD_VAR 0 3
77479: PUSH
77480: LD_INT 1
77482: PLUS
77483: ST_TO_ADDR
// for i in tmp do
77484: LD_ADDR_VAR 0 1
77488: PUSH
77489: LD_VAR 0 2
77493: PUSH
77494: FOR_IN
77495: IFFALSE 77526
// if GetLives ( i ) < 1000 then
77497: LD_VAR 0 1
77501: PPUSH
77502: CALL_OW 256
77506: PUSH
77507: LD_INT 1000
77509: LESS
77510: IFFALSE 77524
// SetLives ( i , 1000 ) ;
77512: LD_VAR 0 1
77516: PPUSH
77517: LD_INT 1000
77519: PPUSH
77520: CALL_OW 234
77524: GO 77494
77526: POP
77527: POP
// until p > 20 ;
77528: LD_VAR 0 3
77532: PUSH
77533: LD_INT 20
77535: GREATER
77536: IFFALSE 77463
// end ;
77538: PPOPN 3
77540: END
// every 0 0$1 trigger StreamModeActive and sTime do
77541: LD_EXP 47
77545: IFFALSE 77553
77547: PUSH
77548: LD_EXP 98
77552: AND
77553: IFFALSE 77588
77555: GO 77557
77557: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
77558: LD_INT 28
77560: PPUSH
77561: LD_OWVAR 2
77565: PPUSH
77566: LD_INT 2
77568: PPUSH
77569: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
77573: LD_INT 30
77575: PPUSH
77576: LD_OWVAR 2
77580: PPUSH
77581: LD_INT 2
77583: PPUSH
77584: CALL_OW 322
// end ;
77588: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
77589: LD_EXP 47
77593: IFFALSE 77601
77595: PUSH
77596: LD_EXP 99
77600: AND
77601: IFFALSE 77722
77603: GO 77605
77605: DISABLE
77606: LD_INT 0
77608: PPUSH
77609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77610: LD_ADDR_VAR 0 2
77614: PUSH
77615: LD_INT 22
77617: PUSH
77618: LD_OWVAR 2
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 21
77629: PUSH
77630: LD_INT 1
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: LD_INT 3
77639: PUSH
77640: LD_INT 23
77642: PUSH
77643: LD_INT 0
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: LIST
77658: PPUSH
77659: CALL_OW 69
77663: ST_TO_ADDR
// if not tmp then
77664: LD_VAR 0 2
77668: NOT
77669: IFFALSE 77673
// exit ;
77671: GO 77722
// for i in tmp do
77673: LD_ADDR_VAR 0 1
77677: PUSH
77678: LD_VAR 0 2
77682: PUSH
77683: FOR_IN
77684: IFFALSE 77720
// begin if Crawls ( i ) then
77686: LD_VAR 0 1
77690: PPUSH
77691: CALL_OW 318
77695: IFFALSE 77706
// ComWalk ( i ) ;
77697: LD_VAR 0 1
77701: PPUSH
77702: CALL_OW 138
// SetClass ( i , 2 ) ;
77706: LD_VAR 0 1
77710: PPUSH
77711: LD_INT 2
77713: PPUSH
77714: CALL_OW 336
// end ;
77718: GO 77683
77720: POP
77721: POP
// end ;
77722: PPOPN 2
77724: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
77725: LD_EXP 47
77729: IFFALSE 77737
77731: PUSH
77732: LD_EXP 100
77736: AND
77737: IFFALSE 78027
77739: GO 77741
77741: DISABLE
77742: LD_INT 0
77744: PPUSH
77745: PPUSH
77746: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
77747: LD_OWVAR 2
77751: PPUSH
77752: LD_INT 9
77754: PPUSH
77755: LD_INT 1
77757: PPUSH
77758: LD_INT 1
77760: PPUSH
77761: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
77765: LD_INT 9
77767: PPUSH
77768: LD_OWVAR 2
77772: PPUSH
77773: CALL_OW 343
// uc_side := 9 ;
77777: LD_ADDR_OWVAR 20
77781: PUSH
77782: LD_INT 9
77784: ST_TO_ADDR
// uc_nation := 2 ;
77785: LD_ADDR_OWVAR 21
77789: PUSH
77790: LD_INT 2
77792: ST_TO_ADDR
// hc_name := Dark Warrior ;
77793: LD_ADDR_OWVAR 26
77797: PUSH
77798: LD_STRING Dark Warrior
77800: ST_TO_ADDR
// hc_gallery :=  ;
77801: LD_ADDR_OWVAR 33
77805: PUSH
77806: LD_STRING 
77808: ST_TO_ADDR
// hc_noskilllimit := true ;
77809: LD_ADDR_OWVAR 76
77813: PUSH
77814: LD_INT 1
77816: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
77817: LD_ADDR_OWVAR 31
77821: PUSH
77822: LD_INT 30
77824: PUSH
77825: LD_INT 30
77827: PUSH
77828: LD_INT 30
77830: PUSH
77831: LD_INT 30
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: ST_TO_ADDR
// un := CreateHuman ;
77840: LD_ADDR_VAR 0 3
77844: PUSH
77845: CALL_OW 44
77849: ST_TO_ADDR
// hc_noskilllimit := false ;
77850: LD_ADDR_OWVAR 76
77854: PUSH
77855: LD_INT 0
77857: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77858: LD_VAR 0 3
77862: PPUSH
77863: LD_INT 1
77865: PPUSH
77866: CALL_OW 51
// ToLua ( playRanger() ) ;
77870: LD_STRING playRanger()
77872: PPUSH
77873: CALL_OW 559
// p := 0 ;
77877: LD_ADDR_VAR 0 2
77881: PUSH
77882: LD_INT 0
77884: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77885: LD_INT 35
77887: PPUSH
77888: CALL_OW 67
// p := p + 1 ;
77892: LD_ADDR_VAR 0 2
77896: PUSH
77897: LD_VAR 0 2
77901: PUSH
77902: LD_INT 1
77904: PLUS
77905: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
77906: LD_VAR 0 3
77910: PPUSH
77911: CALL_OW 256
77915: PUSH
77916: LD_INT 1000
77918: LESS
77919: IFFALSE 77933
// SetLives ( un , 1000 ) ;
77921: LD_VAR 0 3
77925: PPUSH
77926: LD_INT 1000
77928: PPUSH
77929: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
77933: LD_VAR 0 3
77937: PPUSH
77938: LD_INT 81
77940: PUSH
77941: LD_OWVAR 2
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: PUSH
77950: LD_INT 91
77952: PUSH
77953: LD_VAR 0 3
77957: PUSH
77958: LD_INT 30
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: LIST
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PPUSH
77970: CALL_OW 69
77974: PPUSH
77975: LD_VAR 0 3
77979: PPUSH
77980: CALL_OW 74
77984: PPUSH
77985: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77989: LD_VAR 0 2
77993: PUSH
77994: LD_INT 80
77996: GREATER
77997: IFTRUE 78010
77999: PUSH
78000: LD_VAR 0 3
78004: PPUSH
78005: CALL_OW 301
78009: OR
78010: IFFALSE 77885
// if un then
78012: LD_VAR 0 3
78016: IFFALSE 78027
// RemoveUnit ( un ) ;
78018: LD_VAR 0 3
78022: PPUSH
78023: CALL_OW 64
// end ;
78027: PPOPN 3
78029: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78030: LD_EXP 101
78034: IFFALSE 78150
78036: GO 78038
78038: DISABLE
78039: LD_INT 0
78041: PPUSH
78042: PPUSH
78043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78044: LD_ADDR_VAR 0 2
78048: PUSH
78049: LD_INT 81
78051: PUSH
78052: LD_OWVAR 2
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: PUSH
78061: LD_INT 21
78063: PUSH
78064: LD_INT 1
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PPUSH
78075: CALL_OW 69
78079: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78080: LD_STRING playComputer()
78082: PPUSH
78083: CALL_OW 559
// if not tmp then
78087: LD_VAR 0 2
78091: NOT
78092: IFFALSE 78096
// exit ;
78094: GO 78150
// for i in tmp do
78096: LD_ADDR_VAR 0 1
78100: PUSH
78101: LD_VAR 0 2
78105: PUSH
78106: FOR_IN
78107: IFFALSE 78148
// for j := 1 to 4 do
78109: LD_ADDR_VAR 0 3
78113: PUSH
78114: DOUBLE
78115: LD_INT 1
78117: DEC
78118: ST_TO_ADDR
78119: LD_INT 4
78121: PUSH
78122: FOR_TO
78123: IFFALSE 78144
// SetSkill ( i , j , 10 ) ;
78125: LD_VAR 0 1
78129: PPUSH
78130: LD_VAR 0 3
78134: PPUSH
78135: LD_INT 10
78137: PPUSH
78138: CALL_OW 237
78142: GO 78122
78144: POP
78145: POP
78146: GO 78106
78148: POP
78149: POP
// end ;
78150: PPOPN 3
78152: END
// every 0 0$1 trigger s30 do var i , tmp ;
78153: LD_EXP 102
78157: IFFALSE 78226
78159: GO 78161
78161: DISABLE
78162: LD_INT 0
78164: PPUSH
78165: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78166: LD_ADDR_VAR 0 2
78170: PUSH
78171: LD_INT 22
78173: PUSH
78174: LD_OWVAR 2
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PPUSH
78183: CALL_OW 69
78187: ST_TO_ADDR
// if not tmp then
78188: LD_VAR 0 2
78192: NOT
78193: IFFALSE 78197
// exit ;
78195: GO 78226
// for i in tmp do
78197: LD_ADDR_VAR 0 1
78201: PUSH
78202: LD_VAR 0 2
78206: PUSH
78207: FOR_IN
78208: IFFALSE 78224
// SetLives ( i , 300 ) ;
78210: LD_VAR 0 1
78214: PPUSH
78215: LD_INT 300
78217: PPUSH
78218: CALL_OW 234
78222: GO 78207
78224: POP
78225: POP
// end ;
78226: PPOPN 2
78228: END
// every 0 0$1 trigger s60 do var i , tmp ;
78229: LD_EXP 103
78233: IFFALSE 78302
78235: GO 78237
78237: DISABLE
78238: LD_INT 0
78240: PPUSH
78241: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78242: LD_ADDR_VAR 0 2
78246: PUSH
78247: LD_INT 22
78249: PUSH
78250: LD_OWVAR 2
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PPUSH
78259: CALL_OW 69
78263: ST_TO_ADDR
// if not tmp then
78264: LD_VAR 0 2
78268: NOT
78269: IFFALSE 78273
// exit ;
78271: GO 78302
// for i in tmp do
78273: LD_ADDR_VAR 0 1
78277: PUSH
78278: LD_VAR 0 2
78282: PUSH
78283: FOR_IN
78284: IFFALSE 78300
// SetLives ( i , 600 ) ;
78286: LD_VAR 0 1
78290: PPUSH
78291: LD_INT 600
78293: PPUSH
78294: CALL_OW 234
78298: GO 78283
78300: POP
78301: POP
// end ;
78302: PPOPN 2
78304: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78305: LD_INT 0
78307: PPUSH
// case cmd of 301 :
78308: LD_VAR 0 1
78312: PUSH
78313: LD_INT 301
78315: DOUBLE
78316: EQUAL
78317: IFTRUE 78321
78319: GO 78353
78321: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78322: LD_VAR 0 6
78326: PPUSH
78327: LD_VAR 0 7
78331: PPUSH
78332: LD_VAR 0 8
78336: PPUSH
78337: LD_VAR 0 4
78341: PPUSH
78342: LD_VAR 0 5
78346: PPUSH
78347: CALL 79566 0 5
78351: GO 78474
78353: LD_INT 302
78355: DOUBLE
78356: EQUAL
78357: IFTRUE 78361
78359: GO 78398
78361: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78362: LD_VAR 0 6
78366: PPUSH
78367: LD_VAR 0 7
78371: PPUSH
78372: LD_VAR 0 8
78376: PPUSH
78377: LD_VAR 0 9
78381: PPUSH
78382: LD_VAR 0 4
78386: PPUSH
78387: LD_VAR 0 5
78391: PPUSH
78392: CALL 79657 0 6
78396: GO 78474
78398: LD_INT 303
78400: DOUBLE
78401: EQUAL
78402: IFTRUE 78406
78404: GO 78443
78406: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
78407: LD_VAR 0 6
78411: PPUSH
78412: LD_VAR 0 7
78416: PPUSH
78417: LD_VAR 0 8
78421: PPUSH
78422: LD_VAR 0 9
78426: PPUSH
78427: LD_VAR 0 4
78431: PPUSH
78432: LD_VAR 0 5
78436: PPUSH
78437: CALL 78479 0 6
78441: GO 78474
78443: LD_INT 304
78445: DOUBLE
78446: EQUAL
78447: IFTRUE 78451
78449: GO 78473
78451: POP
// hHackTeleport ( unit , x , y ) ; end ;
78452: LD_VAR 0 2
78456: PPUSH
78457: LD_VAR 0 4
78461: PPUSH
78462: LD_VAR 0 5
78466: PPUSH
78467: CALL 80250 0 3
78471: GO 78474
78473: POP
// end ;
78474: LD_VAR 0 12
78478: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
78479: LD_INT 0
78481: PPUSH
78482: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
78483: LD_VAR 0 1
78487: PUSH
78488: LD_INT 1
78490: LESS
78491: IFTRUE 78503
78493: PUSH
78494: LD_VAR 0 1
78498: PUSH
78499: LD_INT 3
78501: GREATER
78502: OR
78503: IFTRUE 78521
78505: PUSH
78506: LD_VAR 0 5
78510: PPUSH
78511: LD_VAR 0 6
78515: PPUSH
78516: CALL_OW 428
78520: OR
78521: IFFALSE 78525
// exit ;
78523: GO 79253
// uc_side := your_side ;
78525: LD_ADDR_OWVAR 20
78529: PUSH
78530: LD_OWVAR 2
78534: ST_TO_ADDR
// uc_nation := nation ;
78535: LD_ADDR_OWVAR 21
78539: PUSH
78540: LD_VAR 0 1
78544: ST_TO_ADDR
// bc_level = 1 ;
78545: LD_ADDR_OWVAR 43
78549: PUSH
78550: LD_INT 1
78552: ST_TO_ADDR
// case btype of 1 :
78553: LD_VAR 0 2
78557: PUSH
78558: LD_INT 1
78560: DOUBLE
78561: EQUAL
78562: IFTRUE 78566
78564: GO 78577
78566: POP
// bc_type := b_depot ; 2 :
78567: LD_ADDR_OWVAR 42
78571: PUSH
78572: LD_INT 0
78574: ST_TO_ADDR
78575: GO 79197
78577: LD_INT 2
78579: DOUBLE
78580: EQUAL
78581: IFTRUE 78585
78583: GO 78596
78585: POP
// bc_type := b_warehouse ; 3 :
78586: LD_ADDR_OWVAR 42
78590: PUSH
78591: LD_INT 1
78593: ST_TO_ADDR
78594: GO 79197
78596: LD_INT 3
78598: DOUBLE
78599: EQUAL
78600: IFTRUE 78604
78602: GO 78615
78604: POP
// bc_type := b_lab ; 4 .. 9 :
78605: LD_ADDR_OWVAR 42
78609: PUSH
78610: LD_INT 6
78612: ST_TO_ADDR
78613: GO 79197
78615: LD_INT 4
78617: DOUBLE
78618: GREATEREQUAL
78619: IFFALSE 78627
78621: LD_INT 9
78623: DOUBLE
78624: LESSEQUAL
78625: IFTRUE 78629
78627: GO 78689
78629: POP
// begin bc_type := b_lab_half ;
78630: LD_ADDR_OWVAR 42
78634: PUSH
78635: LD_INT 7
78637: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
78638: LD_ADDR_OWVAR 44
78642: PUSH
78643: LD_INT 10
78645: PUSH
78646: LD_INT 11
78648: PUSH
78649: LD_INT 12
78651: PUSH
78652: LD_INT 15
78654: PUSH
78655: LD_INT 14
78657: PUSH
78658: LD_INT 13
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: LIST
78668: PUSH
78669: LD_VAR 0 2
78673: PUSH
78674: LD_INT 3
78676: MINUS
78677: ARRAY
78678: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
78679: LD_ADDR_OWVAR 45
78683: PUSH
78684: LD_INT 9
78686: ST_TO_ADDR
// end ; 10 .. 13 :
78687: GO 79197
78689: LD_INT 10
78691: DOUBLE
78692: GREATEREQUAL
78693: IFFALSE 78701
78695: LD_INT 13
78697: DOUBLE
78698: LESSEQUAL
78699: IFTRUE 78703
78701: GO 78780
78703: POP
// begin bc_type := b_lab_full ;
78704: LD_ADDR_OWVAR 42
78708: PUSH
78709: LD_INT 8
78711: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
78712: LD_ADDR_OWVAR 44
78716: PUSH
78717: LD_INT 10
78719: PUSH
78720: LD_INT 12
78722: PUSH
78723: LD_INT 14
78725: PUSH
78726: LD_INT 13
78728: PUSH
78729: EMPTY
78730: LIST
78731: LIST
78732: LIST
78733: LIST
78734: PUSH
78735: LD_VAR 0 2
78739: PUSH
78740: LD_INT 9
78742: MINUS
78743: ARRAY
78744: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
78745: LD_ADDR_OWVAR 45
78749: PUSH
78750: LD_INT 11
78752: PUSH
78753: LD_INT 15
78755: PUSH
78756: LD_INT 12
78758: PUSH
78759: LD_INT 15
78761: PUSH
78762: EMPTY
78763: LIST
78764: LIST
78765: LIST
78766: LIST
78767: PUSH
78768: LD_VAR 0 2
78772: PUSH
78773: LD_INT 9
78775: MINUS
78776: ARRAY
78777: ST_TO_ADDR
// end ; 14 :
78778: GO 79197
78780: LD_INT 14
78782: DOUBLE
78783: EQUAL
78784: IFTRUE 78788
78786: GO 78799
78788: POP
// bc_type := b_workshop ; 15 :
78789: LD_ADDR_OWVAR 42
78793: PUSH
78794: LD_INT 2
78796: ST_TO_ADDR
78797: GO 79197
78799: LD_INT 15
78801: DOUBLE
78802: EQUAL
78803: IFTRUE 78807
78805: GO 78818
78807: POP
// bc_type := b_factory ; 16 :
78808: LD_ADDR_OWVAR 42
78812: PUSH
78813: LD_INT 3
78815: ST_TO_ADDR
78816: GO 79197
78818: LD_INT 16
78820: DOUBLE
78821: EQUAL
78822: IFTRUE 78826
78824: GO 78837
78826: POP
// bc_type := b_ext_gun ; 17 :
78827: LD_ADDR_OWVAR 42
78831: PUSH
78832: LD_INT 17
78834: ST_TO_ADDR
78835: GO 79197
78837: LD_INT 17
78839: DOUBLE
78840: EQUAL
78841: IFTRUE 78845
78843: GO 78873
78845: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
78846: LD_ADDR_OWVAR 42
78850: PUSH
78851: LD_INT 19
78853: PUSH
78854: LD_INT 23
78856: PUSH
78857: LD_INT 19
78859: PUSH
78860: EMPTY
78861: LIST
78862: LIST
78863: LIST
78864: PUSH
78865: LD_VAR 0 1
78869: ARRAY
78870: ST_TO_ADDR
78871: GO 79197
78873: LD_INT 18
78875: DOUBLE
78876: EQUAL
78877: IFTRUE 78881
78879: GO 78892
78881: POP
// bc_type := b_ext_radar ; 19 :
78882: LD_ADDR_OWVAR 42
78886: PUSH
78887: LD_INT 20
78889: ST_TO_ADDR
78890: GO 79197
78892: LD_INT 19
78894: DOUBLE
78895: EQUAL
78896: IFTRUE 78900
78898: GO 78911
78900: POP
// bc_type := b_ext_radio ; 20 :
78901: LD_ADDR_OWVAR 42
78905: PUSH
78906: LD_INT 22
78908: ST_TO_ADDR
78909: GO 79197
78911: LD_INT 20
78913: DOUBLE
78914: EQUAL
78915: IFTRUE 78919
78917: GO 78930
78919: POP
// bc_type := b_ext_siberium ; 21 :
78920: LD_ADDR_OWVAR 42
78924: PUSH
78925: LD_INT 21
78927: ST_TO_ADDR
78928: GO 79197
78930: LD_INT 21
78932: DOUBLE
78933: EQUAL
78934: IFTRUE 78938
78936: GO 78949
78938: POP
// bc_type := b_ext_computer ; 22 :
78939: LD_ADDR_OWVAR 42
78943: PUSH
78944: LD_INT 24
78946: ST_TO_ADDR
78947: GO 79197
78949: LD_INT 22
78951: DOUBLE
78952: EQUAL
78953: IFTRUE 78957
78955: GO 78968
78957: POP
// bc_type := b_ext_track ; 23 :
78958: LD_ADDR_OWVAR 42
78962: PUSH
78963: LD_INT 16
78965: ST_TO_ADDR
78966: GO 79197
78968: LD_INT 23
78970: DOUBLE
78971: EQUAL
78972: IFTRUE 78976
78974: GO 78987
78976: POP
// bc_type := b_ext_laser ; 24 :
78977: LD_ADDR_OWVAR 42
78981: PUSH
78982: LD_INT 25
78984: ST_TO_ADDR
78985: GO 79197
78987: LD_INT 24
78989: DOUBLE
78990: EQUAL
78991: IFTRUE 78995
78993: GO 79006
78995: POP
// bc_type := b_control_tower ; 25 :
78996: LD_ADDR_OWVAR 42
79000: PUSH
79001: LD_INT 36
79003: ST_TO_ADDR
79004: GO 79197
79006: LD_INT 25
79008: DOUBLE
79009: EQUAL
79010: IFTRUE 79014
79012: GO 79025
79014: POP
// bc_type := b_breastwork ; 26 :
79015: LD_ADDR_OWVAR 42
79019: PUSH
79020: LD_INT 31
79022: ST_TO_ADDR
79023: GO 79197
79025: LD_INT 26
79027: DOUBLE
79028: EQUAL
79029: IFTRUE 79033
79031: GO 79044
79033: POP
// bc_type := b_bunker ; 27 :
79034: LD_ADDR_OWVAR 42
79038: PUSH
79039: LD_INT 32
79041: ST_TO_ADDR
79042: GO 79197
79044: LD_INT 27
79046: DOUBLE
79047: EQUAL
79048: IFTRUE 79052
79050: GO 79063
79052: POP
// bc_type := b_turret ; 28 :
79053: LD_ADDR_OWVAR 42
79057: PUSH
79058: LD_INT 33
79060: ST_TO_ADDR
79061: GO 79197
79063: LD_INT 28
79065: DOUBLE
79066: EQUAL
79067: IFTRUE 79071
79069: GO 79082
79071: POP
// bc_type := b_armoury ; 29 :
79072: LD_ADDR_OWVAR 42
79076: PUSH
79077: LD_INT 4
79079: ST_TO_ADDR
79080: GO 79197
79082: LD_INT 29
79084: DOUBLE
79085: EQUAL
79086: IFTRUE 79090
79088: GO 79101
79090: POP
// bc_type := b_barracks ; 30 :
79091: LD_ADDR_OWVAR 42
79095: PUSH
79096: LD_INT 5
79098: ST_TO_ADDR
79099: GO 79197
79101: LD_INT 30
79103: DOUBLE
79104: EQUAL
79105: IFTRUE 79109
79107: GO 79120
79109: POP
// bc_type := b_solar_power ; 31 :
79110: LD_ADDR_OWVAR 42
79114: PUSH
79115: LD_INT 27
79117: ST_TO_ADDR
79118: GO 79197
79120: LD_INT 31
79122: DOUBLE
79123: EQUAL
79124: IFTRUE 79128
79126: GO 79139
79128: POP
// bc_type := b_oil_power ; 32 :
79129: LD_ADDR_OWVAR 42
79133: PUSH
79134: LD_INT 26
79136: ST_TO_ADDR
79137: GO 79197
79139: LD_INT 32
79141: DOUBLE
79142: EQUAL
79143: IFTRUE 79147
79145: GO 79158
79147: POP
// bc_type := b_siberite_power ; 33 :
79148: LD_ADDR_OWVAR 42
79152: PUSH
79153: LD_INT 28
79155: ST_TO_ADDR
79156: GO 79197
79158: LD_INT 33
79160: DOUBLE
79161: EQUAL
79162: IFTRUE 79166
79164: GO 79177
79166: POP
// bc_type := b_oil_mine ; 34 :
79167: LD_ADDR_OWVAR 42
79171: PUSH
79172: LD_INT 29
79174: ST_TO_ADDR
79175: GO 79197
79177: LD_INT 34
79179: DOUBLE
79180: EQUAL
79181: IFTRUE 79185
79183: GO 79196
79185: POP
// bc_type := b_siberite_mine ; end ;
79186: LD_ADDR_OWVAR 42
79190: PUSH
79191: LD_INT 30
79193: ST_TO_ADDR
79194: GO 79197
79196: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79197: LD_ADDR_VAR 0 8
79201: PUSH
79202: LD_VAR 0 5
79206: PPUSH
79207: LD_VAR 0 6
79211: PPUSH
79212: LD_VAR 0 3
79216: PPUSH
79217: CALL_OW 47
79221: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79222: LD_OWVAR 42
79226: PUSH
79227: LD_INT 32
79229: PUSH
79230: LD_INT 33
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: IN
79237: IFFALSE 79253
// PlaceWeaponTurret ( b , weapon ) ;
79239: LD_VAR 0 8
79243: PPUSH
79244: LD_VAR 0 4
79248: PPUSH
79249: CALL_OW 431
// end ;
79253: LD_VAR 0 7
79257: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79258: LD_INT 0
79260: PPUSH
79261: PPUSH
79262: PPUSH
79263: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79264: LD_ADDR_VAR 0 4
79268: PUSH
79269: LD_INT 22
79271: PUSH
79272: LD_OWVAR 2
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 2
79283: PUSH
79284: LD_INT 30
79286: PUSH
79287: LD_INT 0
79289: PUSH
79290: EMPTY
79291: LIST
79292: LIST
79293: PUSH
79294: LD_INT 30
79296: PUSH
79297: LD_INT 1
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: LIST
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: PPUSH
79313: CALL_OW 69
79317: ST_TO_ADDR
// if not tmp then
79318: LD_VAR 0 4
79322: NOT
79323: IFFALSE 79327
// exit ;
79325: GO 79386
// for i in tmp do
79327: LD_ADDR_VAR 0 2
79331: PUSH
79332: LD_VAR 0 4
79336: PUSH
79337: FOR_IN
79338: IFFALSE 79384
// for j = 1 to 3 do
79340: LD_ADDR_VAR 0 3
79344: PUSH
79345: DOUBLE
79346: LD_INT 1
79348: DEC
79349: ST_TO_ADDR
79350: LD_INT 3
79352: PUSH
79353: FOR_TO
79354: IFFALSE 79380
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79356: LD_VAR 0 2
79360: PPUSH
79361: CALL_OW 274
79365: PPUSH
79366: LD_VAR 0 3
79370: PPUSH
79371: LD_INT 99999
79373: PPUSH
79374: CALL_OW 277
79378: GO 79353
79380: POP
79381: POP
79382: GO 79337
79384: POP
79385: POP
// end ;
79386: LD_VAR 0 1
79390: RET
// export function hHackSetLevel10 ; var i , j ; begin
79391: LD_INT 0
79393: PPUSH
79394: PPUSH
79395: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79396: LD_ADDR_VAR 0 2
79400: PUSH
79401: LD_INT 21
79403: PUSH
79404: LD_INT 1
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PPUSH
79411: CALL_OW 69
79415: PUSH
79416: FOR_IN
79417: IFFALSE 79469
// if IsSelected ( i ) then
79419: LD_VAR 0 2
79423: PPUSH
79424: CALL_OW 306
79428: IFFALSE 79467
// begin for j := 1 to 4 do
79430: LD_ADDR_VAR 0 3
79434: PUSH
79435: DOUBLE
79436: LD_INT 1
79438: DEC
79439: ST_TO_ADDR
79440: LD_INT 4
79442: PUSH
79443: FOR_TO
79444: IFFALSE 79465
// SetSkill ( i , j , 10 ) ;
79446: LD_VAR 0 2
79450: PPUSH
79451: LD_VAR 0 3
79455: PPUSH
79456: LD_INT 10
79458: PPUSH
79459: CALL_OW 237
79463: GO 79443
79465: POP
79466: POP
// end ;
79467: GO 79416
79469: POP
79470: POP
// end ;
79471: LD_VAR 0 1
79475: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79476: LD_INT 0
79478: PPUSH
79479: PPUSH
79480: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79481: LD_ADDR_VAR 0 2
79485: PUSH
79486: LD_INT 22
79488: PUSH
79489: LD_OWVAR 2
79493: PUSH
79494: EMPTY
79495: LIST
79496: LIST
79497: PUSH
79498: LD_INT 21
79500: PUSH
79501: LD_INT 1
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PUSH
79508: EMPTY
79509: LIST
79510: LIST
79511: PPUSH
79512: CALL_OW 69
79516: PUSH
79517: FOR_IN
79518: IFFALSE 79559
// begin for j := 1 to 4 do
79520: LD_ADDR_VAR 0 3
79524: PUSH
79525: DOUBLE
79526: LD_INT 1
79528: DEC
79529: ST_TO_ADDR
79530: LD_INT 4
79532: PUSH
79533: FOR_TO
79534: IFFALSE 79555
// SetSkill ( i , j , 10 ) ;
79536: LD_VAR 0 2
79540: PPUSH
79541: LD_VAR 0 3
79545: PPUSH
79546: LD_INT 10
79548: PPUSH
79549: CALL_OW 237
79553: GO 79533
79555: POP
79556: POP
// end ;
79557: GO 79517
79559: POP
79560: POP
// end ;
79561: LD_VAR 0 1
79565: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
79566: LD_INT 0
79568: PPUSH
// uc_side := your_side ;
79569: LD_ADDR_OWVAR 20
79573: PUSH
79574: LD_OWVAR 2
79578: ST_TO_ADDR
// uc_nation := nation ;
79579: LD_ADDR_OWVAR 21
79583: PUSH
79584: LD_VAR 0 1
79588: ST_TO_ADDR
// InitHc ;
79589: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79593: LD_INT 0
79595: PPUSH
79596: LD_VAR 0 2
79600: PPUSH
79601: LD_VAR 0 3
79605: PPUSH
79606: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
79610: LD_VAR 0 4
79614: PPUSH
79615: LD_VAR 0 5
79619: PPUSH
79620: CALL_OW 428
79624: PUSH
79625: LD_INT 0
79627: EQUAL
79628: IFFALSE 79652
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
79630: CALL_OW 44
79634: PPUSH
79635: LD_VAR 0 4
79639: PPUSH
79640: LD_VAR 0 5
79644: PPUSH
79645: LD_INT 1
79647: PPUSH
79648: CALL_OW 48
// end ;
79652: LD_VAR 0 6
79656: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
79657: LD_INT 0
79659: PPUSH
79660: PPUSH
// uc_side := your_side ;
79661: LD_ADDR_OWVAR 20
79665: PUSH
79666: LD_OWVAR 2
79670: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
79671: LD_VAR 0 1
79675: PUSH
79676: LD_INT 1
79678: PUSH
79679: LD_INT 2
79681: PUSH
79682: LD_INT 3
79684: PUSH
79685: LD_INT 4
79687: PUSH
79688: LD_INT 5
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: IN
79698: IFFALSE 79710
// uc_nation := nation_american else
79700: LD_ADDR_OWVAR 21
79704: PUSH
79705: LD_INT 1
79707: ST_TO_ADDR
79708: GO 79753
// if chassis in [ 11 , 12 , 13 , 14 ] then
79710: LD_VAR 0 1
79714: PUSH
79715: LD_INT 11
79717: PUSH
79718: LD_INT 12
79720: PUSH
79721: LD_INT 13
79723: PUSH
79724: LD_INT 14
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: LIST
79731: LIST
79732: IN
79733: IFFALSE 79745
// uc_nation := nation_arabian else
79735: LD_ADDR_OWVAR 21
79739: PUSH
79740: LD_INT 2
79742: ST_TO_ADDR
79743: GO 79753
// uc_nation := nation_russian ;
79745: LD_ADDR_OWVAR 21
79749: PUSH
79750: LD_INT 3
79752: ST_TO_ADDR
// vc_chassis := chassis ;
79753: LD_ADDR_OWVAR 37
79757: PUSH
79758: LD_VAR 0 1
79762: ST_TO_ADDR
// vc_engine := engine ;
79763: LD_ADDR_OWVAR 39
79767: PUSH
79768: LD_VAR 0 2
79772: ST_TO_ADDR
// vc_control := control ;
79773: LD_ADDR_OWVAR 38
79777: PUSH
79778: LD_VAR 0 3
79782: ST_TO_ADDR
// vc_weapon := weapon ;
79783: LD_ADDR_OWVAR 40
79787: PUSH
79788: LD_VAR 0 4
79792: ST_TO_ADDR
// un := CreateVehicle ;
79793: LD_ADDR_VAR 0 8
79797: PUSH
79798: CALL_OW 45
79802: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
79803: LD_VAR 0 8
79807: PPUSH
79808: LD_INT 0
79810: PPUSH
79811: LD_INT 5
79813: PPUSH
79814: CALL_OW 12
79818: PPUSH
79819: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
79823: LD_VAR 0 8
79827: PPUSH
79828: LD_VAR 0 5
79832: PPUSH
79833: LD_VAR 0 6
79837: PPUSH
79838: LD_INT 1
79840: PPUSH
79841: CALL_OW 48
// end ;
79845: LD_VAR 0 7
79849: RET
// export hInvincible ; every 1 do
79850: GO 79852
79852: DISABLE
// hInvincible := [ ] ;
79853: LD_ADDR_EXP 104
79857: PUSH
79858: EMPTY
79859: ST_TO_ADDR
79860: END
// every 10 do var i ;
79861: GO 79863
79863: DISABLE
79864: LD_INT 0
79866: PPUSH
// begin enable ;
79867: ENABLE
// if not hInvincible then
79868: LD_EXP 104
79872: NOT
79873: IFFALSE 79877
// exit ;
79875: GO 79921
// for i in hInvincible do
79877: LD_ADDR_VAR 0 1
79881: PUSH
79882: LD_EXP 104
79886: PUSH
79887: FOR_IN
79888: IFFALSE 79919
// if GetLives ( i ) < 1000 then
79890: LD_VAR 0 1
79894: PPUSH
79895: CALL_OW 256
79899: PUSH
79900: LD_INT 1000
79902: LESS
79903: IFFALSE 79917
// SetLives ( i , 1000 ) ;
79905: LD_VAR 0 1
79909: PPUSH
79910: LD_INT 1000
79912: PPUSH
79913: CALL_OW 234
79917: GO 79887
79919: POP
79920: POP
// end ;
79921: PPOPN 1
79923: END
// export function hHackInvincible ; var i ; begin
79924: LD_INT 0
79926: PPUSH
79927: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
79928: LD_ADDR_VAR 0 2
79932: PUSH
79933: LD_INT 2
79935: PUSH
79936: LD_INT 21
79938: PUSH
79939: LD_INT 1
79941: PUSH
79942: EMPTY
79943: LIST
79944: LIST
79945: PUSH
79946: LD_INT 21
79948: PUSH
79949: LD_INT 2
79951: PUSH
79952: EMPTY
79953: LIST
79954: LIST
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: LIST
79960: PPUSH
79961: CALL_OW 69
79965: PUSH
79966: FOR_IN
79967: IFFALSE 80028
// if IsSelected ( i ) then
79969: LD_VAR 0 2
79973: PPUSH
79974: CALL_OW 306
79978: IFFALSE 80026
// begin if i in hInvincible then
79980: LD_VAR 0 2
79984: PUSH
79985: LD_EXP 104
79989: IN
79990: IFFALSE 80010
// hInvincible := hInvincible diff i else
79992: LD_ADDR_EXP 104
79996: PUSH
79997: LD_EXP 104
80001: PUSH
80002: LD_VAR 0 2
80006: DIFF
80007: ST_TO_ADDR
80008: GO 80026
// hInvincible := hInvincible union i ;
80010: LD_ADDR_EXP 104
80014: PUSH
80015: LD_EXP 104
80019: PUSH
80020: LD_VAR 0 2
80024: UNION
80025: ST_TO_ADDR
// end ;
80026: GO 79966
80028: POP
80029: POP
// end ;
80030: LD_VAR 0 1
80034: RET
// export function hHackInvisible ; var i , j ; begin
80035: LD_INT 0
80037: PPUSH
80038: PPUSH
80039: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80040: LD_ADDR_VAR 0 2
80044: PUSH
80045: LD_INT 21
80047: PUSH
80048: LD_INT 1
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: PPUSH
80055: CALL_OW 69
80059: PUSH
80060: FOR_IN
80061: IFFALSE 80085
// if IsSelected ( i ) then
80063: LD_VAR 0 2
80067: PPUSH
80068: CALL_OW 306
80072: IFFALSE 80083
// ComForceInvisible ( i ) ;
80074: LD_VAR 0 2
80078: PPUSH
80079: CALL_OW 496
80083: GO 80060
80085: POP
80086: POP
// end ;
80087: LD_VAR 0 1
80091: RET
// export function hHackChangeYourSide ; begin
80092: LD_INT 0
80094: PPUSH
// if your_side = 8 then
80095: LD_OWVAR 2
80099: PUSH
80100: LD_INT 8
80102: EQUAL
80103: IFFALSE 80115
// your_side := 0 else
80105: LD_ADDR_OWVAR 2
80109: PUSH
80110: LD_INT 0
80112: ST_TO_ADDR
80113: GO 80129
// your_side := your_side + 1 ;
80115: LD_ADDR_OWVAR 2
80119: PUSH
80120: LD_OWVAR 2
80124: PUSH
80125: LD_INT 1
80127: PLUS
80128: ST_TO_ADDR
// end ;
80129: LD_VAR 0 1
80133: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80134: LD_INT 0
80136: PPUSH
80137: PPUSH
80138: PPUSH
// for i in all_units do
80139: LD_ADDR_VAR 0 2
80143: PUSH
80144: LD_OWVAR 3
80148: PUSH
80149: FOR_IN
80150: IFFALSE 80228
// if IsSelected ( i ) then
80152: LD_VAR 0 2
80156: PPUSH
80157: CALL_OW 306
80161: IFFALSE 80226
// begin j := GetSide ( i ) ;
80163: LD_ADDR_VAR 0 3
80167: PUSH
80168: LD_VAR 0 2
80172: PPUSH
80173: CALL_OW 255
80177: ST_TO_ADDR
// if j = 8 then
80178: LD_VAR 0 3
80182: PUSH
80183: LD_INT 8
80185: EQUAL
80186: IFFALSE 80198
// j := 0 else
80188: LD_ADDR_VAR 0 3
80192: PUSH
80193: LD_INT 0
80195: ST_TO_ADDR
80196: GO 80212
// j := j + 1 ;
80198: LD_ADDR_VAR 0 3
80202: PUSH
80203: LD_VAR 0 3
80207: PUSH
80208: LD_INT 1
80210: PLUS
80211: ST_TO_ADDR
// SetSide ( i , j ) ;
80212: LD_VAR 0 2
80216: PPUSH
80217: LD_VAR 0 3
80221: PPUSH
80222: CALL_OW 235
// end ;
80226: GO 80149
80228: POP
80229: POP
// end ;
80230: LD_VAR 0 1
80234: RET
// export function hHackFog ; begin
80235: LD_INT 0
80237: PPUSH
// FogOff ( true ) ;
80238: LD_INT 1
80240: PPUSH
80241: CALL_OW 344
// end ;
80245: LD_VAR 0 1
80249: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80250: LD_INT 0
80252: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80253: LD_VAR 0 1
80257: PPUSH
80258: LD_VAR 0 2
80262: PPUSH
80263: LD_VAR 0 3
80267: PPUSH
80268: LD_INT 1
80270: PPUSH
80271: LD_INT 1
80273: PPUSH
80274: CALL_OW 483
// CenterOnXY ( x , y ) ;
80278: LD_VAR 0 2
80282: PPUSH
80283: LD_VAR 0 3
80287: PPUSH
80288: CALL_OW 84
// end ;
80292: LD_VAR 0 4
80296: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
80297: LD_INT 0
80299: PPUSH
80300: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
80301: LD_VAR 0 1
80305: NOT
80306: IFTRUE 80325
80308: PUSH
80309: LD_VAR 0 2
80313: PPUSH
80314: LD_VAR 0 3
80318: PPUSH
80319: CALL_OW 488
80323: NOT
80324: OR
80325: IFTRUE 80360
80327: PUSH
80328: LD_VAR 0 1
80332: PPUSH
80333: CALL_OW 266
80337: PUSH
80338: LD_INT 3
80340: NONEQUAL
80341: IFFALSE 80359
80343: PUSH
80344: LD_VAR 0 1
80348: PPUSH
80349: CALL_OW 247
80353: PUSH
80354: LD_INT 1
80356: EQUAL
80357: NOT
80358: AND
80359: OR
80360: IFFALSE 80364
// exit ;
80362: GO 80646
// if GetType ( factory ) = unit_human then
80364: LD_VAR 0 1
80368: PPUSH
80369: CALL_OW 247
80373: PUSH
80374: LD_INT 1
80376: EQUAL
80377: IFFALSE 80394
// factory := IsInUnit ( factory ) ;
80379: LD_ADDR_VAR 0 1
80383: PUSH
80384: LD_VAR 0 1
80388: PPUSH
80389: CALL_OW 310
80393: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
80394: LD_VAR 0 1
80398: PPUSH
80399: CALL_OW 266
80403: PUSH
80404: LD_INT 3
80406: NONEQUAL
80407: IFFALSE 80411
// exit ;
80409: GO 80646
// for i := 1 to Count ( factoryWaypoints ) do
80411: LD_ADDR_VAR 0 5
80415: PUSH
80416: DOUBLE
80417: LD_INT 1
80419: DEC
80420: ST_TO_ADDR
80421: LD_EXP 105
80425: PPUSH
80426: CALL 18884 0 1
80430: PUSH
80431: FOR_TO
80432: IFFALSE 80594
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
80434: LD_VAR 0 2
80438: PPUSH
80439: LD_VAR 0 3
80443: PPUSH
80444: CALL_OW 428
80448: PUSH
80449: LD_EXP 105
80453: PUSH
80454: LD_VAR 0 5
80458: ARRAY
80459: PUSH
80460: LD_INT 2
80462: ARRAY
80463: EQUAL
80464: IFFALSE 80496
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
80466: LD_ADDR_EXP 105
80470: PUSH
80471: LD_EXP 105
80475: PPUSH
80476: LD_VAR 0 5
80480: PPUSH
80481: CALL_OW 3
80485: ST_TO_ADDR
// UpdateFactoryWaypoints ;
80486: CALL 80651 0 0
// exit ;
80490: POP
80491: POP
80492: GO 80646
// end else
80494: GO 80592
// if factory = factoryWaypoints [ i ] [ 2 ] then
80496: LD_VAR 0 1
80500: PUSH
80501: LD_EXP 105
80505: PUSH
80506: LD_VAR 0 5
80510: ARRAY
80511: PUSH
80512: LD_INT 2
80514: ARRAY
80515: EQUAL
80516: IFFALSE 80592
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
80518: LD_ADDR_EXP 105
80522: PUSH
80523: LD_EXP 105
80527: PPUSH
80528: LD_VAR 0 5
80532: PPUSH
80533: CALL_OW 3
80537: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
80538: LD_ADDR_EXP 105
80542: PUSH
80543: LD_EXP 105
80547: PPUSH
80548: LD_VAR 0 1
80552: PPUSH
80553: CALL_OW 255
80557: PUSH
80558: LD_VAR 0 1
80562: PUSH
80563: LD_VAR 0 2
80567: PUSH
80568: LD_VAR 0 3
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: LIST
80577: LIST
80578: PPUSH
80579: CALL 54816 0 2
80583: ST_TO_ADDR
// UpdateFactoryWaypoints ;
80584: CALL 80651 0 0
// exit ;
80588: POP
80589: POP
80590: GO 80646
// end ; end ;
80592: GO 80431
80594: POP
80595: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
80596: LD_ADDR_EXP 105
80600: PUSH
80601: LD_EXP 105
80605: PPUSH
80606: LD_VAR 0 1
80610: PPUSH
80611: CALL_OW 255
80615: PUSH
80616: LD_VAR 0 1
80620: PUSH
80621: LD_VAR 0 2
80625: PUSH
80626: LD_VAR 0 3
80630: PUSH
80631: EMPTY
80632: LIST
80633: LIST
80634: LIST
80635: LIST
80636: PPUSH
80637: CALL 54816 0 2
80641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
80642: CALL 80651 0 0
// end ;
80646: LD_VAR 0 4
80650: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
80651: LD_INT 0
80653: PPUSH
80654: PPUSH
80655: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
80656: LD_STRING resetFactoryWaypoint();
80658: PPUSH
80659: CALL_OW 559
// if factoryWaypoints then
80663: LD_EXP 105
80667: IFFALSE 80788
// begin list := factoryWaypoints ;
80669: LD_ADDR_VAR 0 3
80673: PUSH
80674: LD_EXP 105
80678: ST_TO_ADDR
// for i := 1 to list do
80679: LD_ADDR_VAR 0 2
80683: PUSH
80684: DOUBLE
80685: LD_INT 1
80687: DEC
80688: ST_TO_ADDR
80689: LD_VAR 0 3
80693: PUSH
80694: FOR_TO
80695: IFFALSE 80786
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
80697: LD_STRING setFactoryWaypointXY(
80699: PUSH
80700: LD_VAR 0 3
80704: PUSH
80705: LD_VAR 0 2
80709: ARRAY
80710: PUSH
80711: LD_INT 1
80713: ARRAY
80714: STR
80715: PUSH
80716: LD_STRING ,
80718: STR
80719: PUSH
80720: LD_VAR 0 3
80724: PUSH
80725: LD_VAR 0 2
80729: ARRAY
80730: PUSH
80731: LD_INT 2
80733: ARRAY
80734: STR
80735: PUSH
80736: LD_STRING ,
80738: STR
80739: PUSH
80740: LD_VAR 0 3
80744: PUSH
80745: LD_VAR 0 2
80749: ARRAY
80750: PUSH
80751: LD_INT 3
80753: ARRAY
80754: STR
80755: PUSH
80756: LD_STRING ,
80758: STR
80759: PUSH
80760: LD_VAR 0 3
80764: PUSH
80765: LD_VAR 0 2
80769: ARRAY
80770: PUSH
80771: LD_INT 4
80773: ARRAY
80774: STR
80775: PUSH
80776: LD_STRING )
80778: STR
80779: PPUSH
80780: CALL_OW 559
80784: GO 80694
80786: POP
80787: POP
// end ; end ;
80788: LD_VAR 0 1
80792: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
80793: LD_INT 0
80795: PPUSH
// if HexInfo ( x , y ) = warehouse then
80796: LD_VAR 0 2
80800: PPUSH
80801: LD_VAR 0 3
80805: PPUSH
80806: CALL_OW 428
80810: PUSH
80811: LD_VAR 0 1
80815: EQUAL
80816: IFFALSE 80843
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
80818: LD_ADDR_EXP 107
80822: PUSH
80823: LD_EXP 107
80827: PPUSH
80828: LD_VAR 0 1
80832: PPUSH
80833: LD_INT 0
80835: PPUSH
80836: CALL_OW 1
80840: ST_TO_ADDR
80841: GO 80894
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
80843: LD_ADDR_EXP 107
80847: PUSH
80848: LD_EXP 107
80852: PPUSH
80853: LD_VAR 0 1
80857: PPUSH
80858: LD_VAR 0 1
80862: PPUSH
80863: CALL_OW 255
80867: PUSH
80868: LD_VAR 0 1
80872: PUSH
80873: LD_VAR 0 2
80877: PUSH
80878: LD_VAR 0 3
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: LIST
80887: LIST
80888: PPUSH
80889: CALL_OW 1
80893: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
80894: CALL 80903 0 0
// end ;
80898: LD_VAR 0 4
80902: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
80903: LD_INT 0
80905: PPUSH
80906: PPUSH
80907: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
80908: LD_STRING resetWarehouseGatheringPoints();
80910: PPUSH
80911: CALL_OW 559
// if warehouseGatheringPoints then
80915: LD_EXP 107
80919: IFFALSE 81045
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
80921: LD_ADDR_VAR 0 3
80925: PUSH
80926: LD_EXP 107
80930: PPUSH
80931: CALL 58750 0 1
80935: ST_TO_ADDR
// for i := 1 to list do
80936: LD_ADDR_VAR 0 2
80940: PUSH
80941: DOUBLE
80942: LD_INT 1
80944: DEC
80945: ST_TO_ADDR
80946: LD_VAR 0 3
80950: PUSH
80951: FOR_TO
80952: IFFALSE 81043
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
80954: LD_STRING setWarehouseGatheringPointXY(
80956: PUSH
80957: LD_VAR 0 3
80961: PUSH
80962: LD_VAR 0 2
80966: ARRAY
80967: PUSH
80968: LD_INT 1
80970: ARRAY
80971: STR
80972: PUSH
80973: LD_STRING ,
80975: STR
80976: PUSH
80977: LD_VAR 0 3
80981: PUSH
80982: LD_VAR 0 2
80986: ARRAY
80987: PUSH
80988: LD_INT 2
80990: ARRAY
80991: STR
80992: PUSH
80993: LD_STRING ,
80995: STR
80996: PUSH
80997: LD_VAR 0 3
81001: PUSH
81002: LD_VAR 0 2
81006: ARRAY
81007: PUSH
81008: LD_INT 3
81010: ARRAY
81011: STR
81012: PUSH
81013: LD_STRING ,
81015: STR
81016: PUSH
81017: LD_VAR 0 3
81021: PUSH
81022: LD_VAR 0 2
81026: ARRAY
81027: PUSH
81028: LD_INT 4
81030: ARRAY
81031: STR
81032: PUSH
81033: LD_STRING )
81035: STR
81036: PPUSH
81037: CALL_OW 559
81041: GO 80951
81043: POP
81044: POP
// end ; end ;
81045: LD_VAR 0 1
81049: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81050: LD_EXP 107
81054: IFFALSE 81749
81056: GO 81058
81058: DISABLE
81059: LD_INT 0
81061: PPUSH
81062: PPUSH
81063: PPUSH
81064: PPUSH
81065: PPUSH
81066: PPUSH
81067: PPUSH
81068: PPUSH
81069: PPUSH
// begin enable ;
81070: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81071: LD_ADDR_VAR 0 3
81075: PUSH
81076: LD_EXP 107
81080: PPUSH
81081: CALL 58750 0 1
81085: ST_TO_ADDR
// if not list then
81086: LD_VAR 0 3
81090: NOT
81091: IFFALSE 81095
// exit ;
81093: GO 81749
// for i := 1 to list do
81095: LD_ADDR_VAR 0 1
81099: PUSH
81100: DOUBLE
81101: LD_INT 1
81103: DEC
81104: ST_TO_ADDR
81105: LD_VAR 0 3
81109: PUSH
81110: FOR_TO
81111: IFFALSE 81747
// begin depot := list [ i ] [ 2 ] ;
81113: LD_ADDR_VAR 0 8
81117: PUSH
81118: LD_VAR 0 3
81122: PUSH
81123: LD_VAR 0 1
81127: ARRAY
81128: PUSH
81129: LD_INT 2
81131: ARRAY
81132: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81133: LD_ADDR_VAR 0 5
81137: PUSH
81138: LD_VAR 0 3
81142: PUSH
81143: LD_VAR 0 1
81147: ARRAY
81148: PUSH
81149: LD_INT 1
81151: ARRAY
81152: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81153: LD_VAR 0 8
81157: PPUSH
81158: CALL_OW 301
81162: IFTRUE 81181
81164: PUSH
81165: LD_VAR 0 5
81169: PUSH
81170: LD_VAR 0 8
81174: PPUSH
81175: CALL_OW 255
81179: NONEQUAL
81180: OR
81181: IFFALSE 81210
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81183: LD_ADDR_EXP 107
81187: PUSH
81188: LD_EXP 107
81192: PPUSH
81193: LD_VAR 0 8
81197: PPUSH
81198: LD_INT 0
81200: PPUSH
81201: CALL_OW 1
81205: ST_TO_ADDR
// exit ;
81206: POP
81207: POP
81208: GO 81749
// end ; x := list [ i ] [ 3 ] ;
81210: LD_ADDR_VAR 0 6
81214: PUSH
81215: LD_VAR 0 3
81219: PUSH
81220: LD_VAR 0 1
81224: ARRAY
81225: PUSH
81226: LD_INT 3
81228: ARRAY
81229: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81230: LD_ADDR_VAR 0 7
81234: PUSH
81235: LD_VAR 0 3
81239: PUSH
81240: LD_VAR 0 1
81244: ARRAY
81245: PUSH
81246: LD_INT 4
81248: ARRAY
81249: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81250: LD_ADDR_VAR 0 9
81254: PUSH
81255: LD_VAR 0 6
81259: PPUSH
81260: LD_VAR 0 7
81264: PPUSH
81265: LD_INT 16
81267: PPUSH
81268: CALL 57324 0 3
81272: ST_TO_ADDR
// if not cratesNearbyPoint then
81273: LD_VAR 0 9
81277: NOT
81278: IFFALSE 81284
// exit ;
81280: POP
81281: POP
81282: GO 81749
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81284: LD_ADDR_VAR 0 4
81288: PUSH
81289: LD_INT 22
81291: PUSH
81292: LD_VAR 0 5
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: PUSH
81301: LD_INT 3
81303: PUSH
81304: LD_INT 60
81306: PUSH
81307: EMPTY
81308: LIST
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: PUSH
81314: LD_INT 91
81316: PUSH
81317: LD_VAR 0 8
81321: PUSH
81322: LD_INT 6
81324: PUSH
81325: EMPTY
81326: LIST
81327: LIST
81328: LIST
81329: PUSH
81330: LD_INT 2
81332: PUSH
81333: LD_INT 25
81335: PUSH
81336: LD_INT 2
81338: PUSH
81339: EMPTY
81340: LIST
81341: LIST
81342: PUSH
81343: LD_INT 25
81345: PUSH
81346: LD_INT 16
81348: PUSH
81349: EMPTY
81350: LIST
81351: LIST
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: LIST
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: LIST
81362: LIST
81363: PPUSH
81364: CALL_OW 69
81368: PUSH
81369: LD_VAR 0 8
81373: PPUSH
81374: CALL_OW 313
81378: PPUSH
81379: LD_INT 3
81381: PUSH
81382: LD_INT 60
81384: PUSH
81385: EMPTY
81386: LIST
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: LD_INT 2
81394: PUSH
81395: LD_INT 25
81397: PUSH
81398: LD_INT 2
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: PUSH
81405: LD_INT 25
81407: PUSH
81408: LD_INT 16
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: LIST
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PPUSH
81424: CALL_OW 72
81428: UNION
81429: ST_TO_ADDR
// if tmp then
81430: LD_VAR 0 4
81434: IFFALSE 81514
// begin tmp := ShrinkArray ( tmp , 3 ) ;
81436: LD_ADDR_VAR 0 4
81440: PUSH
81441: LD_VAR 0 4
81445: PPUSH
81446: LD_INT 3
81448: PPUSH
81449: CALL 55131 0 2
81453: ST_TO_ADDR
// for j in tmp do
81454: LD_ADDR_VAR 0 2
81458: PUSH
81459: LD_VAR 0 4
81463: PUSH
81464: FOR_IN
81465: IFFALSE 81508
// begin if IsInUnit ( j ) then
81467: LD_VAR 0 2
81471: PPUSH
81472: CALL_OW 310
81476: IFFALSE 81487
// ComExit ( j ) ;
81478: LD_VAR 0 2
81482: PPUSH
81483: CALL 55214 0 1
// AddComCollect ( j , x , y ) ;
81487: LD_VAR 0 2
81491: PPUSH
81492: LD_VAR 0 6
81496: PPUSH
81497: LD_VAR 0 7
81501: PPUSH
81502: CALL_OW 177
// end ;
81506: GO 81464
81508: POP
81509: POP
// exit ;
81510: POP
81511: POP
81512: GO 81749
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
81514: LD_ADDR_VAR 0 4
81518: PUSH
81519: LD_INT 22
81521: PUSH
81522: LD_VAR 0 5
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: PUSH
81531: LD_INT 91
81533: PUSH
81534: LD_VAR 0 8
81538: PUSH
81539: LD_INT 8
81541: PUSH
81542: EMPTY
81543: LIST
81544: LIST
81545: LIST
81546: PUSH
81547: LD_INT 2
81549: PUSH
81550: LD_INT 34
81552: PUSH
81553: LD_INT 12
81555: PUSH
81556: EMPTY
81557: LIST
81558: LIST
81559: PUSH
81560: LD_INT 34
81562: PUSH
81563: LD_INT 51
81565: PUSH
81566: EMPTY
81567: LIST
81568: LIST
81569: PUSH
81570: LD_INT 34
81572: PUSH
81573: LD_INT 32
81575: PUSH
81576: EMPTY
81577: LIST
81578: LIST
81579: PUSH
81580: LD_INT 34
81582: PUSH
81583: LD_INT 89
81585: PUSH
81586: EMPTY
81587: LIST
81588: LIST
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: LIST
81594: LIST
81595: LIST
81596: PUSH
81597: EMPTY
81598: LIST
81599: LIST
81600: LIST
81601: PPUSH
81602: CALL_OW 69
81606: ST_TO_ADDR
// if tmp then
81607: LD_VAR 0 4
81611: IFFALSE 81745
// begin for j in tmp do
81613: LD_ADDR_VAR 0 2
81617: PUSH
81618: LD_VAR 0 4
81622: PUSH
81623: FOR_IN
81624: IFFALSE 81743
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
81626: LD_VAR 0 2
81630: PPUSH
81631: CALL_OW 262
81635: PUSH
81636: LD_INT 3
81638: EQUAL
81639: IFTRUE 81656
81641: PUSH
81642: LD_VAR 0 2
81646: PPUSH
81647: CALL_OW 261
81651: PUSH
81652: LD_INT 20
81654: GREATER
81655: OR
81656: IFFALSE 81670
81658: PUSH
81659: LD_VAR 0 2
81663: PPUSH
81664: CALL_OW 314
81668: NOT
81669: AND
81670: IFFALSE 81700
81672: PUSH
81673: LD_VAR 0 2
81677: PPUSH
81678: CALL_OW 263
81682: PUSH
81683: LD_INT 1
81685: NONEQUAL
81686: IFTRUE 81699
81688: PUSH
81689: LD_VAR 0 2
81693: PPUSH
81694: CALL_OW 311
81698: OR
81699: AND
81700: IFFALSE 81741
// begin ComCollect ( j , x , y ) ;
81702: LD_VAR 0 2
81706: PPUSH
81707: LD_VAR 0 6
81711: PPUSH
81712: LD_VAR 0 7
81716: PPUSH
81717: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
81721: LD_VAR 0 2
81725: PPUSH
81726: LD_VAR 0 8
81730: PPUSH
81731: CALL_OW 172
// exit ;
81735: POP
81736: POP
81737: POP
81738: POP
81739: GO 81749
// end ;
81741: GO 81623
81743: POP
81744: POP
// end ; end ;
81745: GO 81110
81747: POP
81748: POP
// end ; end_of_file
81749: PPOPN 9
81751: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81752: LD_VAR 0 1
81756: PPUSH
81757: LD_VAR 0 2
81761: PPUSH
81762: LD_VAR 0 3
81766: PPUSH
81767: LD_VAR 0 4
81771: PPUSH
81772: LD_VAR 0 5
81776: PPUSH
81777: LD_VAR 0 6
81781: PPUSH
81782: CALL 65845 0 6
// end ;
81786: PPOPN 6
81788: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81789: LD_INT 0
81791: PPUSH
// begin if not units then
81792: LD_VAR 0 1
81796: NOT
81797: IFFALSE 81801
// exit ;
81799: GO 81801
// end ;
81801: PPOPN 7
81803: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81804: CALL 65732 0 0
// end ; end_of_file
81808: PPOPN 1
81810: END
