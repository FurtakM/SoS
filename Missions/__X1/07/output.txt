// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 76610 0 0
// Init ;
   8: CALL 66 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 408 0 3
// PrepareAmerican ;
  32: CALL 2522 0 0
// PrepareArabian ;
  36: CALL 1204 0 0
// Action ;
  40: CALL 7257 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 65
// begin Difficulty := 4 ;
  50: LD_ADDR_OWVAR 67
  54: PUSH
  55: LD_INT 4
  57: ST_TO_ADDR
// FogOff ( 2 ) ;
  58: LD_INT 2
  60: PPUSH
  61: CALL_OW 344
// end ; end ;
  65: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// prefix := 06_ ;
  77: LD_ADDR_EXP 2
  81: PUSH
  82: LD_STRING 06_
  84: ST_TO_ADDR
// scoutActive := 0 ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutFailed := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// scoutSuccess := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usAttacksAllowed := false ;
 109: LD_ADDR_EXP 6
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// usSurrender := false ;
 117: LD_ADDR_EXP 7
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianAttack := false ;
 125: LD_ADDR_EXP 8
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// hasRockets := false ;
 133: LD_ADDR_EXP 9
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// seeRemoteVehicle := false ;
 141: LD_ADDR_EXP 10
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// seeHeavyGun := false ;
 149: LD_ADDR_EXP 11
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 12
 161: PUSH
 162: LD_INT 3
 164: PUSH
 165: LD_INT 2
 167: PUSH
 168: LD_INT 2
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// end ; end_of_file
 186: LD_VAR 0 1
 190: RET
// export function SayX ( units , ident ) ; var i ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
// result := false ;
 195: LD_ADDR_VAR 0 3
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// if not units then
 203: LD_VAR 0 1
 207: NOT
 208: IFFALSE 212
// exit ;
 210: GO 266
// for i in units do
 212: LD_ADDR_VAR 0 4
 216: PUSH
 217: LD_VAR 0 1
 221: PUSH
 222: FOR_IN
 223: IFFALSE 264
// if IsOk ( i ) then
 225: LD_VAR 0 4
 229: PPUSH
 230: CALL_OW 302
 234: IFFALSE 262
// begin Say ( i , ident ) ;
 236: LD_VAR 0 4
 240: PPUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 88
// result := i ;
 250: LD_ADDR_VAR 0 3
 254: PUSH
 255: LD_VAR 0 4
 259: ST_TO_ADDR
// break ;
 260: GO 264
// end ;
 262: GO 222
 264: POP
 265: POP
// end ;
 266: LD_VAR 0 3
 270: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 271: LD_INT 0
 273: PPUSH
 274: PPUSH
// InitUc ;
 275: CALL_OW 18
// InitHc ;
 279: CALL_OW 19
// uc_side := 0 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// uc_nation := 0 ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 0
 298: ST_TO_ADDR
// for i = 1 to amount do
 299: LD_ADDR_VAR 0 4
 303: PUSH
 304: DOUBLE
 305: LD_INT 1
 307: DEC
 308: ST_TO_ADDR
 309: LD_VAR 0 2
 313: PUSH
 314: FOR_TO
 315: IFFALSE 397
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 317: LD_ADDR_OWVAR 29
 321: PUSH
 322: LD_INT 9
 324: PPUSH
 325: LD_INT 12
 327: PPUSH
 328: CALL_OW 12
 332: PUSH
 333: LD_INT 9
 335: PPUSH
 336: LD_INT 12
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 348: LD_ADDR_OWVAR 35
 352: PUSH
 353: LD_INT 1
 355: NEG
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 12
 364: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 365: LD_INT 0
 367: PPUSH
 368: LD_INT 12
 370: PPUSH
 371: LD_INT 1
 373: PPUSH
 374: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 378: CALL_OW 44
 382: PPUSH
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 49
// end ;
 395: GO 314
 397: POP
 398: POP
// InitHc ;
 399: CALL_OW 19
// end ;
 403: LD_VAR 0 3
 407: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 408: LD_INT 0
 410: PPUSH
 411: PPUSH
// uc_side := 0 ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// uc_nation := 0 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 0
 427: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 9
 435: PUSH
 436: LD_INT 8
 438: PUSH
 439: LD_INT 7
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_OWVAR 67
 455: ARRAY
 456: PPUSH
 457: CALL 271 0 2
// for i := 1 to 4 do
 461: LD_ADDR_VAR 0 5
 465: PUSH
 466: DOUBLE
 467: LD_INT 1
 469: DEC
 470: ST_TO_ADDR
 471: LD_INT 4
 473: PUSH
 474: FOR_TO
 475: IFFALSE 512
// begin hc_class := class_horse ;
 477: LD_ADDR_OWVAR 28
 481: PUSH
 482: LD_INT 21
 484: ST_TO_ADDR
// hc_gallery :=  ;
 485: LD_ADDR_OWVAR 33
 489: PUSH
 490: LD_STRING 
 492: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 493: CALL_OW 44
 497: PPUSH
 498: LD_VAR 0 2
 502: PPUSH
 503: LD_INT 0
 505: PPUSH
 506: CALL_OW 49
// end ;
 510: GO 474
 512: POP
 513: POP
// for i = 1 to 5 do
 514: LD_ADDR_VAR 0 5
 518: PUSH
 519: DOUBLE
 520: LD_INT 1
 522: DEC
 523: ST_TO_ADDR
 524: LD_INT 5
 526: PUSH
 527: FOR_TO
 528: IFFALSE 582
// begin hc_class = class_tiger ;
 530: LD_ADDR_OWVAR 28
 534: PUSH
 535: LD_INT 14
 537: ST_TO_ADDR
// hc_gallery =  ;
 538: LD_ADDR_OWVAR 33
 542: PUSH
 543: LD_STRING 
 545: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 546: LD_ADDR_OWVAR 35
 550: PUSH
 551: LD_INT 7
 553: NEG
 554: PPUSH
 555: LD_INT 7
 557: PPUSH
 558: CALL_OW 12
 562: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 563: CALL_OW 44
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: LD_INT 0
 575: PPUSH
 576: CALL 51528 0 3
// end ;
 580: GO 527
 582: POP
 583: POP
// for i := 1 to 4 do
 584: LD_ADDR_VAR 0 5
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_INT 4
 596: PUSH
 597: FOR_TO
 598: IFFALSE 635
// begin hc_class := class_phororhacos ;
 600: LD_ADDR_OWVAR 28
 604: PUSH
 605: LD_INT 18
 607: ST_TO_ADDR
// hc_gallery :=  ;
 608: LD_ADDR_OWVAR 33
 612: PUSH
 613: LD_STRING 
 615: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 616: CALL_OW 44
 620: PPUSH
 621: LD_VAR 0 2
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ;
 633: GO 597
 635: POP
 636: POP
// for i := 1 to 4 do
 637: LD_ADDR_VAR 0 5
 641: PUSH
 642: DOUBLE
 643: LD_INT 1
 645: DEC
 646: ST_TO_ADDR
 647: LD_INT 4
 649: PUSH
 650: FOR_TO
 651: IFFALSE 688
// begin hc_class := class_baggie ;
 653: LD_ADDR_OWVAR 28
 657: PUSH
 658: LD_INT 13
 660: ST_TO_ADDR
// hc_gallery :=  ;
 661: LD_ADDR_OWVAR 33
 665: PUSH
 666: LD_STRING 
 668: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 669: CALL_OW 44
 673: PPUSH
 674: LD_VAR 0 2
 678: PPUSH
 679: LD_INT 0
 681: PPUSH
 682: CALL_OW 49
// end ;
 686: GO 650
 688: POP
 689: POP
// for i := 1 to 5 do
 690: LD_ADDR_VAR 0 5
 694: PUSH
 695: DOUBLE
 696: LD_INT 1
 698: DEC
 699: ST_TO_ADDR
 700: LD_INT 5
 702: PUSH
 703: FOR_TO
 704: IFFALSE 741
// begin hc_class := class_fish ;
 706: LD_ADDR_OWVAR 28
 710: PUSH
 711: LD_INT 20
 713: ST_TO_ADDR
// hc_gallery :=  ;
 714: LD_ADDR_OWVAR 33
 718: PUSH
 719: LD_STRING 
 721: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 722: CALL_OW 44
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// end ;
 739: GO 703
 741: POP
 742: POP
// end ;
 743: LD_VAR 0 4
 747: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 748: LD_INT 0
 750: PPUSH
 751: PPUSH
 752: PPUSH
// if not observer or not unit then
 753: LD_VAR 0 1
 757: NOT
 758: PUSH
 759: LD_VAR 0 2
 763: NOT
 764: OR
 765: IFFALSE 769
// exit ;
 767: GO 817
// if not See ( GetSide ( observer ) , unit ) then
 769: LD_VAR 0 1
 773: PPUSH
 774: CALL_OW 255
 778: PPUSH
 779: LD_VAR 0 2
 783: PPUSH
 784: CALL_OW 292
 788: NOT
 789: IFFALSE 793
// exit ;
 791: GO 817
// result := GetDistUnits ( observer , unit ) < 12 ;
 793: LD_ADDR_VAR 0 3
 797: PUSH
 798: LD_VAR 0 1
 802: PPUSH
 803: LD_VAR 0 2
 807: PPUSH
 808: CALL_OW 296
 812: PUSH
 813: LD_INT 12
 815: LESS
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 3
 821: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 822: LD_INT 0
 824: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 825: LD_VAR 0 2
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: PPUSH
 834: LD_VAR 0 2
 838: PUSH
 839: LD_INT 2
 841: ARRAY
 842: PPUSH
 843: CALL_OW 488
 847: PUSH
 848: LD_VAR 0 2
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: LD_VAR 0 2
 861: PUSH
 862: LD_INT 2
 864: ARRAY
 865: PPUSH
 866: CALL_OW 428
 870: PUSH
 871: LD_INT 0
 873: EQUAL
 874: AND
 875: IFFALSE 909
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 877: LD_VAR 0 1
 881: PPUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: LD_VAR 0 3
 904: PPUSH
 905: CALL_OW 48
// end ;
 909: LD_VAR 0 4
 913: RET
// export function ReverseArray ( array ) ; var i ; begin
 914: LD_INT 0
 916: PPUSH
 917: PPUSH
// if not array then
 918: LD_VAR 0 1
 922: NOT
 923: IFFALSE 927
// exit ;
 925: GO 985
// result := [ ] ;
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: EMPTY
 933: ST_TO_ADDR
// for i := 1 to array do
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_VAR 0 1
 948: PUSH
 949: FOR_TO
 950: IFFALSE 983
// result := Insert ( result , 1 , array [ i ] ) ;
 952: LD_ADDR_VAR 0 2
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 1
 964: PPUSH
 965: LD_VAR 0 1
 969: PUSH
 970: LD_VAR 0 3
 974: ARRAY
 975: PPUSH
 976: CALL_OW 2
 980: ST_TO_ADDR
 981: GO 949
 983: POP
 984: POP
// end ;
 985: LD_VAR 0 2
 989: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 990: LD_INT 0
 992: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 993: LD_VAR 0 1
 997: PPUSH
 998: LD_VAR 0 2
1002: PPUSH
1003: LD_VAR 0 3
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1017: LD_VAR 0 1
1021: PPUSH
1022: LD_VAR 0 2
1026: PPUSH
1027: LD_VAR 0 3
1031: PPUSH
1032: CALL_OW 331
// end ;
1036: LD_VAR 0 5
1040: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1041: LD_INT 0
1043: PPUSH
// if not units then
1044: LD_VAR 0 1
1048: NOT
1049: IFFALSE 1053
// exit ;
1051: GO 1136
// result := true ;
1053: LD_ADDR_VAR 0 4
1057: PUSH
1058: LD_INT 1
1060: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1061: LD_VAR 0 1
1065: PPUSH
1066: LD_INT 26
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PPUSH
1076: CALL_OW 72
1080: PUSH
1081: LD_INT 1
1083: ARRAY
1084: PPUSH
1085: LD_VAR 0 2
1089: PPUSH
1090: CALL_OW 88
1094: NOT
1095: IFFALSE 1136
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1097: LD_ADDR_VAR 0 4
1101: PUSH
1102: LD_VAR 0 1
1106: PPUSH
1107: LD_INT 26
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PPUSH
1117: CALL_OW 72
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: PPUSH
1126: LD_VAR 0 3
1130: PPUSH
1131: CALL_OW 88
1135: ST_TO_ADDR
// end ;
1136: LD_VAR 0 4
1140: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
// if not group then
1145: LD_VAR 0 2
1149: NOT
1150: IFFALSE 1154
// exit ;
1152: GO 1199
// for i in group do
1154: LD_ADDR_VAR 0 4
1158: PUSH
1159: LD_VAR 0 2
1163: PUSH
1164: FOR_IN
1165: IFFALSE 1197
// if See ( side , i ) then
1167: LD_VAR 0 1
1171: PPUSH
1172: LD_VAR 0 4
1176: PPUSH
1177: CALL_OW 292
1181: IFFALSE 1195
// begin result := true ;
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: LD_INT 1
1190: ST_TO_ADDR
// exit ;
1191: POP
1192: POP
1193: GO 1199
// end ;
1195: GO 1164
1197: POP
1198: POP
// end ; end_of_file
1199: LD_VAR 0 3
1203: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1204: LD_INT 0
1206: PPUSH
1207: PPUSH
1208: PPUSH
1209: PPUSH
// uc_nation := 2 ;
1210: LD_ADDR_OWVAR 21
1214: PUSH
1215: LD_INT 2
1217: ST_TO_ADDR
// uc_side := 5 ;
1218: LD_ADDR_OWVAR 20
1222: PUSH
1223: LD_INT 5
1225: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1226: LD_ADDR_EXP 21
1230: PUSH
1231: LD_STRING Abdul
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: LD_STRING 
1239: PPUSH
1240: CALL 15210 0 3
1244: ST_TO_ADDR
// uc_side := 2 ;
1245: LD_ADDR_OWVAR 20
1249: PUSH
1250: LD_INT 2
1252: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1253: LD_ADDR_EXP 13
1257: PUSH
1258: LD_STRING Heike
1260: PPUSH
1261: LD_EXP 1
1265: NOT
1266: PPUSH
1267: LD_EXP 2
1271: PPUSH
1272: CALL 15210 0 3
1276: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1277: LD_ADDR_EXP 16
1281: PUSH
1282: LD_STRING Ibrahim
1284: PPUSH
1285: LD_EXP 1
1289: NOT
1290: PPUSH
1291: LD_EXP 2
1295: PPUSH
1296: CALL 15210 0 3
1300: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1301: LD_ADDR_EXP 14
1305: PUSH
1306: LD_STRING Givi
1308: PPUSH
1309: LD_EXP 1
1313: NOT
1314: PPUSH
1315: LD_EXP 2
1319: PPUSH
1320: CALL 15210 0 3
1324: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1325: LD_ADDR_EXP 17
1329: PUSH
1330: LD_STRING Kamil
1332: PPUSH
1333: LD_EXP 1
1337: NOT
1338: PPUSH
1339: LD_EXP 2
1343: PPUSH
1344: CALL 15210 0 3
1348: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1349: LD_ADDR_EXP 18
1353: PUSH
1354: LD_STRING Kaia
1356: PPUSH
1357: LD_EXP 1
1361: NOT
1362: PPUSH
1363: LD_EXP 2
1367: PPUSH
1368: CALL 15210 0 3
1372: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1373: LD_ADDR_EXP 19
1377: PUSH
1378: LD_STRING Sophia
1380: PPUSH
1381: LD_EXP 1
1385: NOT
1386: PPUSH
1387: LD_EXP 2
1391: PPUSH
1392: CALL 15210 0 3
1396: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1397: LD_ADDR_EXP 20
1401: PUSH
1402: LD_STRING Markov
1404: PPUSH
1405: LD_EXP 1
1409: NOT
1410: PPUSH
1411: LD_EXP 2
1415: PPUSH
1416: CALL 15210 0 3
1420: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1421: LD_ADDR_EXP 24
1425: PUSH
1426: LD_STRING Aviradze
1428: PPUSH
1429: LD_EXP 1
1433: NOT
1434: PPUSH
1435: LD_EXP 2
1439: PPUSH
1440: CALL 15210 0 3
1444: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1445: LD_ADDR_EXP 23
1449: PUSH
1450: LD_STRING Kurt
1452: PPUSH
1453: LD_EXP 1
1457: NOT
1458: PPUSH
1459: LD_EXP 2
1463: PPUSH
1464: CALL 15210 0 3
1468: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1469: LD_ADDR_EXP 15
1473: PUSH
1474: LD_STRING Mike
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: LD_EXP 2
1487: PPUSH
1488: CALL 15210 0 3
1492: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1493: LD_ADDR_EXP 22
1497: PUSH
1498: LD_STRING Olaf
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: LD_STRING 
1506: PPUSH
1507: CALL 15210 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 25
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 26
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1817
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_EXP 109
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 1000
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: ST_TO_ADDR
// end else
1815: GO 1824
// tmp := [ ] ;
1817: LD_ADDR_VAR 0 3
1821: PUSH
1822: EMPTY
1823: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1824: LD_ADDR_EXP 27
1828: PUSH
1829: LD_STRING 06_Vehicles
1831: PPUSH
1832: LD_VAR 0 3
1836: PPUSH
1837: CALL_OW 30
1841: ST_TO_ADDR
// counter := 0 ;
1842: LD_ADDR_VAR 0 4
1846: PUSH
1847: LD_INT 0
1849: ST_TO_ADDR
// if heikeVehicles then
1850: LD_EXP 27
1854: IFFALSE 1976
// begin for i := heikeVehicles downto 1 do
1856: LD_ADDR_VAR 0 2
1860: PUSH
1861: DOUBLE
1862: LD_EXP 27
1866: INC
1867: ST_TO_ADDR
1868: LD_INT 1
1870: PUSH
1871: FOR_DOWNTO
1872: IFFALSE 1974
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1874: LD_EXP 27
1878: PUSH
1879: LD_VAR 0 2
1883: ARRAY
1884: PUSH
1885: LD_INT 3
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: EQUAL
1892: IFFALSE 1972
// begin if counter < remoteControlLimit then
1894: LD_VAR 0 4
1898: PUSH
1899: LD_EXP 12
1903: LESS
1904: IFFALSE 1952
// begin counter := Inc ( counter ) ;
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: LD_VAR 0 4
1915: PPUSH
1916: CALL 53974 0 1
1920: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1921: LD_ADDR_EXP 27
1925: PUSH
1926: LD_EXP 27
1930: PPUSH
1931: LD_EXP 27
1935: PPUSH
1936: LD_EXP 27
1940: PUSH
1941: LD_VAR 0 2
1945: ARRAY
1946: PPUSH
1947: CALL_OW 2
1951: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1952: LD_ADDR_EXP 27
1956: PUSH
1957: LD_EXP 27
1961: PPUSH
1962: LD_VAR 0 2
1966: PPUSH
1967: CALL_OW 3
1971: ST_TO_ADDR
// end ; end ;
1972: GO 1871
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1981: LD_EXP 3
1985: IFFALSE 2519
1987: GO 1989
1989: DISABLE
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: LD_INT 96
2001: PUSH
2002: LD_INT 50
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 49
2011: PUSH
2012: LD_INT 52
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 34
2021: PUSH
2022: LD_INT 55
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 41
2031: PUSH
2032: LD_INT 70
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 53
2041: PUSH
2042: LD_INT 96
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 103
2051: PUSH
2052: LD_INT 64
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 104
2069: PUSH
2070: LD_INT 70
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 111
2079: PUSH
2080: LD_INT 103
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 131
2089: PUSH
2090: LD_INT 147
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 130
2099: PUSH
2100: LD_INT 153
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 110
2109: PUSH
2110: LD_INT 93
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 103
2119: PUSH
2120: LD_INT 65
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: ST_TO_ADDR
// for i in tmp [ 1 ] do
2139: LD_ADDR_VAR 0 1
2143: PUSH
2144: LD_VAR 0 2
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PUSH
2153: FOR_IN
2154: IFFALSE 2206
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2156: LD_EXP 15
2160: PPUSH
2161: LD_VAR 0 1
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: LD_VAR 0 1
2174: PUSH
2175: LD_INT 2
2177: ARRAY
2178: PPUSH
2179: CALL_OW 174
// AddComHold ( Mike ) ;
2183: LD_EXP 15
2187: PPUSH
2188: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2192: LD_EXP 15
2196: PPUSH
2197: LD_INT 175
2199: PPUSH
2200: CALL_OW 202
// end ;
2204: GO 2153
2206: POP
2207: POP
// for i in tmp [ 2 ] do
2208: LD_ADDR_VAR 0 1
2212: PUSH
2213: LD_VAR 0 2
2217: PUSH
2218: LD_INT 2
2220: ARRAY
2221: PUSH
2222: FOR_IN
2223: IFFALSE 2275
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2225: LD_EXP 23
2229: PPUSH
2230: LD_VAR 0 1
2234: PUSH
2235: LD_INT 1
2237: ARRAY
2238: PPUSH
2239: LD_VAR 0 1
2243: PUSH
2244: LD_INT 2
2246: ARRAY
2247: PPUSH
2248: CALL_OW 174
// AddComHold ( Kurt ) ;
2252: LD_EXP 23
2256: PPUSH
2257: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2261: LD_EXP 23
2265: PPUSH
2266: LD_INT 175
2268: PPUSH
2269: CALL_OW 202
// end ;
2273: GO 2222
2275: POP
2276: POP
// wait ( 2 2$00 ) ;
2277: LD_INT 4200
2279: PPUSH
2280: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2284: LD_INT 35
2286: PPUSH
2287: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2291: LD_EXP 15
2295: PPUSH
2296: CALL_OW 314
2300: NOT
2301: PUSH
2302: LD_EXP 15
2306: PPUSH
2307: CALL_OW 301
2311: OR
2312: PUSH
2313: LD_EXP 23
2317: PPUSH
2318: CALL_OW 314
2322: NOT
2323: PUSH
2324: LD_EXP 23
2328: PPUSH
2329: CALL_OW 301
2333: OR
2334: AND
2335: IFFALSE 2284
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2337: LD_EXP 23
2341: PPUSH
2342: CALL_OW 301
2346: PUSH
2347: LD_EXP 15
2351: PPUSH
2352: CALL_OW 301
2356: AND
2357: IFFALSE 2369
// begin scoutFailed := true ;
2359: LD_ADDR_EXP 4
2363: PUSH
2364: LD_INT 1
2366: ST_TO_ADDR
// exit ;
2367: GO 2519
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2369: LD_EXP 23
2373: PUSH
2374: LD_EXP 15
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PPUSH
2383: LD_INT 132
2385: PPUSH
2386: LD_INT 52
2388: PPUSH
2389: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2393: LD_EXP 23
2397: PUSH
2398: LD_EXP 15
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PPUSH
2407: LD_INT 22
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 69
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2430: LD_INT 35
2432: PPUSH
2433: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2437: LD_INT 2
2439: PPUSH
2440: LD_EXP 23
2444: PPUSH
2445: CALL_OW 292
2449: PUSH
2450: LD_INT 2
2452: PPUSH
2453: LD_EXP 15
2457: PPUSH
2458: CALL_OW 292
2462: OR
2463: IFFALSE 2430
// if IsLive ( Kurt ) then
2465: LD_EXP 23
2469: PPUSH
2470: CALL_OW 300
2474: IFFALSE 2488
// SetSide ( Kurt , 2 ) ;
2476: LD_EXP 23
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: CALL_OW 235
// if IsLive ( Mike ) then
2488: LD_EXP 15
2492: PPUSH
2493: CALL_OW 300
2497: IFFALSE 2511
// SetSide ( Mike , 2 ) ;
2499: LD_EXP 15
2503: PPUSH
2504: LD_INT 2
2506: PPUSH
2507: CALL_OW 235
// scoutSuccess := true ;
2511: LD_ADDR_EXP 5
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// end ; end_of_file
2519: PPOPN 2
2521: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
// uc_side := 1 ;
2528: LD_ADDR_OWVAR 20
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// uc_nation := 1 ;
2536: LD_ADDR_OWVAR 21
2540: PUSH
2541: LD_INT 1
2543: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 274
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: LD_INT 2500
2557: PUSH
2558: LD_INT 3200
2560: PUSH
2561: LD_INT 3500
2563: PUSH
2564: LD_INT 3900
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: PUSH
2573: LD_OWVAR 67
2577: ARRAY
2578: PPUSH
2579: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2583: LD_INT 1
2585: PPUSH
2586: CALL_OW 274
2590: PPUSH
2591: LD_INT 2
2593: PPUSH
2594: LD_INT 800
2596: PPUSH
2597: CALL_OW 277
// usForces := [ ] ;
2601: LD_ADDR_EXP 29
2605: PUSH
2606: EMPTY
2607: ST_TO_ADDR
// usToBuild := [ ] ;
2608: LD_ADDR_EXP 31
2612: PUSH
2613: EMPTY
2614: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2615: LD_ADDR_EXP 32
2619: PUSH
2620: EMPTY
2621: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2622: LD_ADDR_VAR 0 2
2626: PUSH
2627: LD_INT 21
2629: PUSH
2630: LD_INT 3
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 69
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2680
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2645: LD_VAR 0 2
2649: PPUSH
2650: LD_INT 6
2652: PUSH
2653: LD_INT 7
2655: PUSH
2656: LD_INT 8
2658: PUSH
2659: LD_INT 8
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: PUSH
2668: LD_OWVAR 67
2672: ARRAY
2673: PPUSH
2674: CALL_OW 241
2678: GO 2642
2680: POP
2681: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 30
2689: PUSH
2690: LD_INT 32
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PPUSH
2697: CALL_OW 69
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2793
// begin if GetBWeapon ( i ) = us_radar then
2705: LD_VAR 0 2
2709: PPUSH
2710: CALL_OW 269
2714: PUSH
2715: LD_INT 11
2717: EQUAL
2718: IFFALSE 2743
// begin uc_nation := 0 ;
2720: LD_ADDR_OWVAR 21
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 16
2733: PPUSH
2734: LD_INT 2
2736: PPUSH
2737: CALL_OW 380
// end else
2741: GO 2777
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2743: LD_INT 0
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 5
2751: PUSH
2752: LD_INT 6
2754: PUSH
2755: LD_INT 7
2757: PUSH
2758: LD_INT 8
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_OWVAR 67
2771: ARRAY
2772: PPUSH
2773: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2777: CALL_OW 44
2781: PPUSH
2782: LD_VAR 0 2
2786: PPUSH
2787: CALL_OW 52
// end ;
2791: GO 2702
2793: POP
2794: POP
// b := HexInfo ( 74 , 120 ) ;
2795: LD_ADDR_VAR 0 3
2799: PUSH
2800: LD_INT 74
2802: PPUSH
2803: LD_INT 120
2805: PPUSH
2806: CALL_OW 428
2810: ST_TO_ADDR
// uc_nation := 1 ;
2811: LD_ADDR_OWVAR 21
2815: PUSH
2816: LD_INT 1
2818: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2819: LD_ADDR_VAR 0 2
2823: PUSH
2824: DOUBLE
2825: LD_INT 1
2827: DEC
2828: ST_TO_ADDR
2829: LD_INT 1
2831: PUSH
2832: LD_INT 2
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 4
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: PUSH
2847: LD_OWVAR 67
2851: ARRAY
2852: PUSH
2853: FOR_TO
2854: IFFALSE 2906
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2856: LD_INT 0
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 5
2864: PUSH
2865: LD_INT 6
2867: PUSH
2868: LD_INT 7
2870: PUSH
2871: LD_INT 8
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: LD_OWVAR 67
2884: ARRAY
2885: PPUSH
2886: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2890: CALL_OW 44
2894: PPUSH
2895: LD_VAR 0 3
2899: PPUSH
2900: CALL_OW 52
// end ;
2904: GO 2853
2906: POP
2907: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2908: LD_VAR 0 3
2912: PPUSH
2913: CALL_OW 313
2917: PPUSH
2918: LD_INT 5
2920: PPUSH
2921: CALL_OW 336
// for i := 1 to 6 do
2925: LD_ADDR_VAR 0 2
2929: PUSH
2930: DOUBLE
2931: LD_INT 1
2933: DEC
2934: ST_TO_ADDR
2935: LD_INT 6
2937: PUSH
2938: FOR_TO
2939: IFFALSE 2989
// begin PrepareHuman ( false , 4 , 6 ) ;
2941: LD_INT 0
2943: PPUSH
2944: LD_INT 4
2946: PPUSH
2947: LD_INT 6
2949: PPUSH
2950: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2954: CALL_OW 44
2958: PPUSH
2959: LD_INT 32
2961: PUSH
2962: LD_INT 33
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: LD_VAR 0 2
2973: PUSH
2974: LD_INT 2
2976: MOD
2977: PUSH
2978: LD_INT 1
2980: PLUS
2981: ARRAY
2982: PPUSH
2983: CALL_OW 52
// end ;
2987: GO 2938
2989: POP
2990: POP
// for i := 1 to 3 do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: DOUBLE
2997: LD_INT 1
2999: DEC
3000: ST_TO_ADDR
3001: LD_INT 3
3003: PUSH
3004: FOR_TO
3005: IFFALSE 3034
// begin PrepareHuman ( false , 3 , 6 ) ;
3007: LD_INT 0
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 6
3015: PPUSH
3016: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3020: CALL_OW 44
3024: PPUSH
3025: LD_INT 25
3027: PPUSH
3028: CALL_OW 52
// end ;
3032: GO 3004
3034: POP
3035: POP
// for i := 1 to 3 do
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: DOUBLE
3042: LD_INT 1
3044: DEC
3045: ST_TO_ADDR
3046: LD_INT 3
3048: PUSH
3049: FOR_TO
3050: IFFALSE 3108
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3052: LD_INT 0
3054: PPUSH
3055: LD_INT 3
3057: PPUSH
3058: LD_INT 6
3060: PUSH
3061: LD_INT 7
3063: PUSH
3064: LD_INT 7
3066: PUSH
3067: LD_INT 7
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_OWVAR 67
3080: ARRAY
3081: PPUSH
3082: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3086: CALL_OW 44
3090: PPUSH
3091: LD_INT 78
3093: PPUSH
3094: LD_INT 130
3096: PPUSH
3097: CALL_OW 428
3101: PPUSH
3102: CALL_OW 52
// end ;
3106: GO 3049
3108: POP
3109: POP
// for i := 1 to 3 do
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: DOUBLE
3116: LD_INT 1
3118: DEC
3119: ST_TO_ADDR
3120: LD_INT 3
3122: PUSH
3123: FOR_TO
3124: IFFALSE 3211
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3126: LD_INT 2
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: LD_INT 1
3134: PPUSH
3135: LD_INT 13
3137: PPUSH
3138: LD_INT 100
3140: PPUSH
3141: CALL 20227 0 5
// veh := CreateVehicle ;
3145: LD_ADDR_VAR 0 4
3149: PUSH
3150: CALL_OW 45
3154: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3155: LD_VAR 0 4
3159: PPUSH
3160: LD_INT 3
3162: PPUSH
3163: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_INT 9
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3182: LD_INT 0
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 6
3190: PPUSH
3191: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3195: CALL_OW 44
3199: PPUSH
3200: LD_VAR 0 4
3204: PPUSH
3205: CALL_OW 52
// end ;
3209: GO 3123
3211: POP
3212: POP
// InitHc ;
3213: CALL_OW 19
// hc_gallery := us ;
3217: LD_ADDR_OWVAR 33
3221: PUSH
3222: LD_STRING us
3224: ST_TO_ADDR
// hc_face_number := 26 ;
3225: LD_ADDR_OWVAR 34
3229: PUSH
3230: LD_INT 26
3232: ST_TO_ADDR
// hc_name := Doug Callahan ;
3233: LD_ADDR_OWVAR 26
3237: PUSH
3238: LD_STRING Doug Callahan
3240: ST_TO_ADDR
// hc_class := class_engineer ;
3241: LD_ADDR_OWVAR 28
3245: PUSH
3246: LD_INT 2
3248: ST_TO_ADDR
// hc_sex := sex_male ;
3249: LD_ADDR_OWVAR 27
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3257: LD_ADDR_OWVAR 29
3261: PUSH
3262: LD_INT 10
3264: PUSH
3265: LD_INT 11
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3272: LD_ADDR_OWVAR 30
3276: PUSH
3277: LD_INT 2
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 0
3285: PUSH
3286: LD_INT 0
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3295: LD_ADDR_OWVAR 31
3299: PUSH
3300: LD_INT 4
3302: PUSH
3303: LD_INT 6
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: ST_TO_ADDR
// usCommander := CreateHuman ;
3318: LD_ADDR_EXP 28
3322: PUSH
3323: CALL_OW 44
3327: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3328: LD_EXP 28
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 52
// InitHC_All ( ) ;
3340: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3344: LD_INT 2
3346: PPUSH
3347: LD_INT 1
3349: PPUSH
3350: LD_INT 2
3352: PPUSH
3353: LD_INT 12
3355: PPUSH
3356: LD_INT 100
3358: PPUSH
3359: CALL 20227 0 5
// usCargo := CreateVehicle ;
3363: LD_ADDR_EXP 30
3367: PUSH
3368: CALL_OW 45
3372: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3373: LD_EXP 30
3377: PPUSH
3378: LD_INT 81
3380: PPUSH
3381: LD_INT 143
3383: PPUSH
3384: LD_INT 0
3386: PPUSH
3387: CALL_OW 48
// Connect ( usCargo ) ;
3391: LD_EXP 30
3395: PPUSH
3396: CALL 23320 0 1
// DoNotAttack ( 5 , usCargo ) ;
3400: LD_INT 5
3402: PPUSH
3403: LD_EXP 30
3407: PPUSH
3408: CALL_OW 471
// end ;
3412: LD_VAR 0 1
3416: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3417: LD_EXP 29
3421: NOT
3422: PUSH
3423: LD_EXP 6
3427: AND
3428: PUSH
3429: LD_INT 25
3431: PPUSH
3432: CALL_OW 302
3436: AND
3437: PUSH
3438: LD_INT 25
3440: PPUSH
3441: CALL_OW 461
3445: PUSH
3446: LD_INT 2
3448: EQUAL
3449: AND
3450: IFFALSE 3607
3452: GO 3454
3454: DISABLE
3455: LD_INT 0
3457: PPUSH
3458: PPUSH
3459: PPUSH
// begin enable ;
3460: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: DOUBLE
3467: LD_INT 1
3469: DEC
3470: ST_TO_ADDR
3471: LD_INT 5
3473: PUSH
3474: LD_INT 6
3476: PUSH
3477: LD_INT 7
3479: PUSH
3480: LD_INT 8
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PUSH
3495: FOR_TO
3496: IFFALSE 3605
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3498: LD_ADDR_VAR 0 2
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: LD_INT 4
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: CALL_OW 12
3527: ARRAY
3528: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3529: LD_VAR 0 2
3533: PUSH
3534: LD_INT 4
3536: EQUAL
3537: IFFALSE 3549
// weapon := us_heavy_gun else
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_INT 6
3546: ST_TO_ADDR
3547: GO 3580
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3549: LD_ADDR_VAR 0 3
3553: PUSH
3554: LD_INT 5
3556: PUSH
3557: LD_INT 7
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 1
3570: PPUSH
3571: LD_INT 3
3573: PPUSH
3574: CALL_OW 12
3578: ARRAY
3579: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3580: LD_INT 25
3582: PPUSH
3583: LD_VAR 0 2
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_VAR 0 3
3598: PPUSH
3599: CALL_OW 185
// end ;
3603: GO 3495
3605: POP
3606: POP
// end ;
3607: PPOPN 3
3609: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3610: LD_EXP 29
3614: PUSH
3615: LD_INT 5
3617: PUSH
3618: LD_INT 6
3620: PUSH
3621: LD_INT 7
3623: PUSH
3624: LD_INT 8
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: GREATEREQUAL
3639: IFFALSE 3750
3641: GO 3643
3643: DISABLE
3644: LD_INT 0
3646: PPUSH
3647: PPUSH
// begin enable ;
3648: ENABLE
// tmp := usForces ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: LD_EXP 29
3658: ST_TO_ADDR
// usForces := [ ] ;
3659: LD_ADDR_EXP 29
3663: PUSH
3664: EMPTY
3665: ST_TO_ADDR
// if not tmp then
3666: LD_VAR 0 2
3670: NOT
3671: IFFALSE 3675
// exit ;
3673: GO 3750
// repeat wait ( 0 0$1 ) ;
3675: LD_INT 35
3677: PPUSH
3678: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3682: LD_ADDR_VAR 0 2
3686: PUSH
3687: LD_VAR 0 2
3691: PPUSH
3692: LD_INT 98
3694: PUSH
3695: LD_INT 50
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 114
3704: PUSH
3705: LD_INT 50
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 127
3714: PUSH
3715: LD_INT 51
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 131
3724: PUSH
3725: LD_INT 35
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL 55217 0 2
3742: ST_TO_ADDR
// until not tmp ;
3743: LD_VAR 0 2
3747: NOT
3748: IFFALSE 3675
// end ;
3750: PPOPN 2
3752: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3753: LD_EXP 3
3757: PUSH
3758: LD_EXP 5
3762: NOT
3763: AND
3764: PUSH
3765: LD_INT 11
3767: PPUSH
3768: LD_INT 22
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PPUSH
3778: CALL_OW 70
3782: AND
3783: IFFALSE 3904
3785: GO 3787
3787: DISABLE
3788: LD_INT 0
3790: PPUSH
3791: PPUSH
3792: PPUSH
// begin uc_side := 1 ;
3793: LD_ADDR_OWVAR 20
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// uc_nation := 1 ;
3801: LD_ADDR_OWVAR 21
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// tmp := [ ] ;
3809: LD_ADDR_VAR 0 3
3813: PUSH
3814: EMPTY
3815: ST_TO_ADDR
// for i := 1 to 2 do
3816: LD_ADDR_VAR 0 1
3820: PUSH
3821: DOUBLE
3822: LD_INT 1
3824: DEC
3825: ST_TO_ADDR
3826: LD_INT 2
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3902
// begin PrepareSoldier ( false , 7 ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 381
// un := CreateHuman ;
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: CALL_OW 44
3851: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 130
3859: PPUSH
3860: LD_INT 153
3862: PPUSH
3863: LD_INT 3
3865: PPUSH
3866: LD_INT 0
3868: PPUSH
3869: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 5
3880: PPUSH
3881: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 108
3892: PPUSH
3893: LD_INT 108
3895: PPUSH
3896: CALL_OW 174
// end ;
3900: GO 3829
3902: POP
3903: POP
// end ;
3904: PPOPN 3
3906: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3907: LD_EXP 3
3911: PUSH
3912: LD_EXP 5
3916: NOT
3917: AND
3918: PUSH
3919: LD_INT 10
3921: PPUSH
3922: LD_INT 22
3924: PUSH
3925: LD_INT 2
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PPUSH
3932: CALL_OW 70
3936: AND
3937: IFFALSE 4058
3939: GO 3941
3941: DISABLE
3942: LD_INT 0
3944: PPUSH
3945: PPUSH
3946: PPUSH
// begin uc_side := 1 ;
3947: LD_ADDR_OWVAR 20
3951: PUSH
3952: LD_INT 1
3954: ST_TO_ADDR
// uc_nation := 1 ;
3955: LD_ADDR_OWVAR 21
3959: PUSH
3960: LD_INT 1
3962: ST_TO_ADDR
// tmp := [ ] ;
3963: LD_ADDR_VAR 0 3
3967: PUSH
3968: EMPTY
3969: ST_TO_ADDR
// for i := 1 to 2 do
3970: LD_ADDR_VAR 0 1
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_INT 2
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4056
// begin PrepareSoldier ( false , 7 ) ;
3986: LD_INT 0
3988: PPUSH
3989: LD_INT 7
3991: PPUSH
3992: CALL_OW 381
// un := CreateHuman ;
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: CALL_OW 44
4005: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 56
4013: PPUSH
4014: LD_INT 101
4016: PPUSH
4017: LD_INT 3
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4027: LD_VAR 0 2
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4039: LD_VAR 0 2
4043: PPUSH
4044: LD_INT 72
4046: PPUSH
4047: LD_INT 92
4049: PPUSH
4050: CALL_OW 174
// end ;
4054: GO 3983
4056: POP
4057: POP
// end ;
4058: PPOPN 3
4060: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4061: LD_EXP 30
4065: PPUSH
4066: CALL_OW 302
4070: PUSH
4071: LD_EXP 7
4075: NOT
4076: AND
4077: IFFALSE 4340
4079: GO 4081
4081: DISABLE
4082: LD_INT 0
4084: PPUSH
4085: PPUSH
// begin enable ;
4086: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 14
4094: PPUSH
4095: LD_INT 81
4097: PUSH
4098: LD_INT 1
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: LD_INT 50
4107: PUSH
4108: EMPTY
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PPUSH
4115: CALL_OW 70
4119: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4120: LD_ADDR_VAR 0 1
4124: PUSH
4125: LD_INT 12
4127: PPUSH
4128: CALL_OW 435
4132: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4133: LD_EXP 30
4137: PPUSH
4138: CALL_OW 261
4142: PUSH
4143: LD_INT 10
4145: LESS
4146: PUSH
4147: LD_INT 2
4149: PPUSH
4150: LD_EXP 30
4154: PPUSH
4155: CALL_OW 292
4159: NOT
4160: AND
4161: IFFALSE 4175
// SetFuel ( usCargo , 100 ) ;
4163: LD_EXP 30
4167: PPUSH
4168: LD_INT 100
4170: PPUSH
4171: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4175: LD_EXP 30
4179: PPUSH
4180: CALL_OW 314
4184: NOT
4185: PUSH
4186: LD_EXP 30
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: CALL_OW 289
4198: PUSH
4199: LD_INT 100
4201: LESS
4202: AND
4203: PUSH
4204: LD_VAR 0 2
4208: NOT
4209: AND
4210: IFFALSE 4276
// begin if cr then
4212: LD_VAR 0 1
4216: IFFALSE 4247
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4218: LD_EXP 30
4222: PPUSH
4223: LD_VAR 0 1
4227: PUSH
4228: LD_INT 1
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 1
4236: PUSH
4237: LD_INT 2
4239: ARRAY
4240: PPUSH
4241: CALL_OW 117
4245: GO 4274
// if not IsInArea ( usCargo , usCratesArea ) then
4247: LD_EXP 30
4251: PPUSH
4252: LD_INT 12
4254: PPUSH
4255: CALL_OW 308
4259: NOT
4260: IFFALSE 4274
// ComMoveToArea ( usCargo , usCratesArea ) ;
4262: LD_EXP 30
4266: PPUSH
4267: LD_INT 12
4269: PPUSH
4270: CALL_OW 113
// exit ;
4274: GO 4340
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4276: LD_VAR 0 2
4280: PUSH
4281: LD_EXP 30
4285: PPUSH
4286: LD_INT 14
4288: PPUSH
4289: CALL_OW 308
4293: NOT
4294: AND
4295: IFFALSE 4314
// ComMoveXY ( usCargo , 80 , 143 ) else
4297: LD_EXP 30
4301: PPUSH
4302: LD_INT 80
4304: PPUSH
4305: LD_INT 143
4307: PPUSH
4308: CALL_OW 111
4312: GO 4340
// if GetCargo ( usCargo , mat_cans ) then
4314: LD_EXP 30
4318: PPUSH
4319: LD_INT 1
4321: PPUSH
4322: CALL_OW 289
4326: IFFALSE 4340
// ComGive ( usCargo , usDepot ) ;
4328: LD_EXP 30
4332: PPUSH
4333: LD_INT 1
4335: PPUSH
4336: CALL_OW 161
// end ;
4340: PPOPN 2
4342: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4343: LD_EXP 7
4347: NOT
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 1
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 21
4361: PUSH
4362: LD_INT 1
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: LD_INT 3
4371: PUSH
4372: LD_INT 50
4374: PUSH
4375: EMPTY
4376: LIST
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 69
4391: AND
4392: PUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 1
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 60
4408: PUSH
4409: EMPTY
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 25
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: AND
4436: IFFALSE 4639
4438: GO 4440
4440: DISABLE
4441: LD_INT 0
4443: PPUSH
4444: PPUSH
// begin enable ;
4445: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4446: LD_ADDR_VAR 0 1
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 21
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 3
4473: PUSH
4474: LD_INT 50
4476: PUSH
4477: EMPTY
4478: LIST
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 69
4493: PUSH
4494: FOR_IN
4495: IFFALSE 4637
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: LD_INT 22
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 3
4514: PUSH
4515: LD_INT 60
4517: PUSH
4518: EMPTY
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 25
4527: PUSH
4528: LD_INT 4
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: ST_TO_ADDR
// if not sci then
4545: LD_VAR 0 2
4549: NOT
4550: IFFALSE 4554
// break ;
4552: GO 4637
// sci := sci [ 1 ] ;
4554: LD_ADDR_VAR 0 2
4558: PUSH
4559: LD_VAR 0 2
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: ST_TO_ADDR
// if IsInUnit ( sci ) then
4568: LD_VAR 0 2
4572: PPUSH
4573: CALL_OW 310
4577: IFFALSE 4590
// ComExit ( sci ) else
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 53009 0 1
4588: GO 4635
// begin ComHeal ( sci , i ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: LD_VAR 0 1
4599: PPUSH
4600: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4604: LD_VAR 0 2
4608: PPUSH
4609: LD_INT 32
4611: PUSH
4612: LD_INT 33
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 1
4621: PPUSH
4622: LD_INT 2
4624: PPUSH
4625: CALL_OW 12
4629: ARRAY
4630: PPUSH
4631: CALL_OW 180
// end ; end ;
4635: GO 4494
4637: POP
4638: POP
// end ;
4639: PPOPN 2
4641: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4642: LD_EXP 7
4646: NOT
4647: PUSH
4648: LD_INT 22
4650: PUSH
4651: LD_INT 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 60
4663: PUSH
4664: EMPTY
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 50
4673: PUSH
4674: EMPTY
4675: LIST
4676: PUSH
4677: LD_INT 34
4679: PUSH
4680: LD_INT 13
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: PPUSH
4693: CALL_OW 69
4697: AND
4698: PUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 3
4711: PUSH
4712: LD_INT 24
4714: PUSH
4715: LD_INT 1000
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 30
4741: PUSH
4742: LD_INT 29
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: AND
4764: IFFALSE 5033
4766: GO 4768
4768: DISABLE
4769: LD_INT 0
4771: PPUSH
4772: PPUSH
4773: PPUSH
// begin enable ;
4774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4775: LD_ADDR_VAR 0 2
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 3
4792: PUSH
4793: LD_INT 24
4795: PUSH
4796: LD_INT 1000
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: LD_INT 21
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 29
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 69
4844: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4845: LD_ADDR_VAR 0 3
4849: PUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 24
4865: PUSH
4866: LD_INT 600
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 21
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: LD_INT 30
4892: PUSH
4893: LD_INT 29
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4915: LD_ADDR_VAR 0 1
4919: PUSH
4920: LD_INT 22
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 3
4932: PUSH
4933: LD_INT 60
4935: PUSH
4936: EMPTY
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 50
4945: PUSH
4946: EMPTY
4947: LIST
4948: PUSH
4949: LD_INT 34
4951: PUSH
4952: LD_INT 13
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: FOR_IN
4971: IFFALSE 5031
// begin if tmp2 then
4973: LD_VAR 0 3
4977: IFFALSE 5005
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 74
4998: PPUSH
4999: CALL_OW 130
5003: GO 5029
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5005: LD_VAR 0 1
5009: PPUSH
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_VAR 0 1
5019: PPUSH
5020: CALL_OW 74
5024: PPUSH
5025: CALL_OW 130
// end ;
5029: GO 4970
5031: POP
5032: POP
// end ;
5033: PPOPN 3
5035: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5036: LD_EXP 7
5040: NOT
5041: PUSH
5042: LD_INT 14
5044: PPUSH
5045: LD_INT 81
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 50
5057: PUSH
5058: EMPTY
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 70
5069: NOT
5070: AND
5071: PUSH
5072: LD_EXP 31
5076: AND
5077: PUSH
5078: LD_INT 22
5080: PUSH
5081: LD_INT 1
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 3
5090: PUSH
5091: LD_INT 60
5093: PUSH
5094: EMPTY
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 50
5103: PUSH
5104: EMPTY
5105: LIST
5106: PUSH
5107: LD_INT 34
5109: PUSH
5110: LD_INT 13
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 69
5127: AND
5128: IFFALSE 5240
5130: GO 5132
5132: DISABLE
// begin enable ;
5133: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5134: LD_INT 22
5136: PUSH
5137: LD_INT 1
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 3
5146: PUSH
5147: LD_INT 60
5149: PUSH
5150: EMPTY
5151: LIST
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 50
5159: PUSH
5160: EMPTY
5161: LIST
5162: PUSH
5163: LD_INT 34
5165: PUSH
5166: LD_INT 13
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: PPUSH
5179: CALL_OW 69
5183: PPUSH
5184: LD_EXP 31
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PUSH
5193: LD_INT 1
5195: ARRAY
5196: PPUSH
5197: LD_EXP 31
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PUSH
5206: LD_INT 2
5208: ARRAY
5209: PPUSH
5210: LD_EXP 31
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PUSH
5219: LD_INT 3
5221: ARRAY
5222: PPUSH
5223: LD_EXP 31
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PUSH
5232: LD_INT 4
5234: ARRAY
5235: PPUSH
5236: CALL_OW 566
// end ;
5240: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5241: LD_INT 22
5243: PUSH
5244: LD_INT 1
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 50
5253: PUSH
5254: EMPTY
5255: LIST
5256: PUSH
5257: LD_INT 3
5259: PUSH
5260: LD_INT 54
5262: PUSH
5263: EMPTY
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 2
5272: PUSH
5273: LD_INT 25
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 25
5285: PUSH
5286: LD_INT 5
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 25
5295: PUSH
5296: LD_INT 16
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 69
5319: IFFALSE 5681
5321: GO 5323
5323: DISABLE
5324: LD_INT 0
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
// begin enable ;
5330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 22
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 50
5348: PUSH
5349: EMPTY
5350: LIST
5351: PUSH
5352: LD_INT 3
5354: PUSH
5355: LD_INT 54
5357: PUSH
5358: EMPTY
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 2
5367: PUSH
5368: LD_INT 25
5370: PUSH
5371: LD_INT 1
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 25
5380: PUSH
5381: LD_INT 5
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: LD_INT 25
5390: PUSH
5391: LD_INT 16
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 69
5414: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5415: LD_ADDR_VAR 0 3
5419: PUSH
5420: LD_INT 22
5422: PUSH
5423: LD_INT 1
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 50
5432: PUSH
5433: EMPTY
5434: LIST
5435: PUSH
5436: LD_INT 21
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 30
5448: PUSH
5449: LD_INT 32
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 58
5458: PUSH
5459: EMPTY
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5474: LD_ADDR_VAR 0 4
5478: PUSH
5479: LD_INT 22
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 50
5491: PUSH
5492: EMPTY
5493: LIST
5494: PUSH
5495: LD_INT 30
5497: PUSH
5498: LD_INT 5
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 69
5514: ST_TO_ADDR
// if not tmp then
5515: LD_VAR 0 2
5519: NOT
5520: IFFALSE 5524
// exit ;
5522: GO 5681
// for i in tmp do
5524: LD_ADDR_VAR 0 1
5528: PUSH
5529: LD_VAR 0 2
5533: PUSH
5534: FOR_IN
5535: IFFALSE 5679
// begin btmp := FilterByTag ( btmp , 0 ) ;
5537: LD_ADDR_VAR 0 3
5541: PUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: LD_INT 0
5549: PPUSH
5550: CALL 50185 0 2
5554: ST_TO_ADDR
// if not btmp then
5555: LD_VAR 0 3
5559: NOT
5560: IFFALSE 5605
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 257
5571: PUSH
5572: LD_INT 16
5574: NONEQUAL
5575: PUSH
5576: LD_VAR 0 4
5580: AND
5581: IFFALSE 5601
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5583: LD_VAR 0 1
5587: PPUSH
5588: LD_VAR 0 4
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: CALL_OW 120
// continue ;
5601: GO 5534
// end else
5603: GO 5677
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5605: LD_VAR 0 3
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5621: LD_VAR 0 1
5625: PPUSH
5626: LD_VAR 0 3
5630: PUSH
5631: LD_INT 1
5633: ARRAY
5634: PPUSH
5635: CALL_OW 120
// wait ( 0 0$9 ) ;
5639: LD_INT 315
5641: PPUSH
5642: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: CALL 17366 0 1
5659: IFFALSE 5677
// SetTag ( btmp [ 1 ] , 0 ) ;
5661: LD_VAR 0 3
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: CALL_OW 109
// end ; end ;
5677: GO 5534
5679: POP
5680: POP
// end ;
5681: PPOPN 4
5683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5684: LD_INT 22
5686: PUSH
5687: LD_INT 1
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: LD_INT 33
5696: PUSH
5697: LD_INT 2
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 50
5706: PUSH
5707: EMPTY
5708: LIST
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: LD_INT 61
5715: PUSH
5716: EMPTY
5717: LIST
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 69
5733: IFFALSE 5824
5735: GO 5737
5737: DISABLE
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
// begin enable ;
5742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5743: LD_ADDR_VAR 0 2
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 1
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 33
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 50
5770: PUSH
5771: EMPTY
5772: LIST
5773: PUSH
5774: LD_INT 3
5776: PUSH
5777: LD_INT 61
5779: PUSH
5780: EMPTY
5781: LIST
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: PPUSH
5793: CALL_OW 69
5797: ST_TO_ADDR
// for i in tmp do
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: LD_VAR 0 2
5807: PUSH
5808: FOR_IN
5809: IFFALSE 5822
// Connect ( i ) ;
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL 23320 0 1
5820: GO 5808
5822: POP
5823: POP
// end ;
5824: PPOPN 2
5826: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5827: LD_EXP 6
5831: PUSH
5832: LD_OWVAR 67
5836: PUSH
5837: LD_INT 1
5839: GREATER
5840: AND
5841: IFFALSE 6283
5843: GO 5845
5845: DISABLE
5846: LD_INT 0
5848: PPUSH
5849: PPUSH
5850: PPUSH
5851: PPUSH
5852: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5853: LD_INT 21000
5855: PUSH
5856: LD_INT 18900
5858: PUSH
5859: LD_INT 16800
5861: PUSH
5862: LD_INT 14700
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_OWVAR 67
5875: ARRAY
5876: PPUSH
5877: CALL_OW 67
// if usSurrender then
5881: LD_EXP 7
5885: IFFALSE 5889
// exit ;
5887: GO 6283
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: DOUBLE
5895: LD_INT 1
5897: DEC
5898: ST_TO_ADDR
5899: LD_INT 4
5901: PUSH
5902: LD_INT 5
5904: PUSH
5905: LD_INT 5
5907: PUSH
5908: LD_INT 6
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_OWVAR 67
5921: ARRAY
5922: PUSH
5923: FOR_TO
5924: IFFALSE 6228
// begin uc_side := 1 ;
5926: LD_ADDR_OWVAR 20
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// uc_nation := 1 ;
5934: LD_ADDR_OWVAR 21
5938: PUSH
5939: LD_INT 1
5941: ST_TO_ADDR
// InitHc_All ( ) ;
5942: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5946: LD_INT 0
5948: PPUSH
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 5
5954: PUSH
5955: LD_INT 6
5957: PUSH
5958: LD_INT 7
5960: PUSH
5961: LD_INT 8
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: PUSH
5970: LD_OWVAR 67
5974: ARRAY
5975: PPUSH
5976: CALL_OW 380
// un := CreateHuman ;
5980: LD_ADDR_VAR 0 2
5984: PUSH
5985: CALL_OW 44
5989: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5990: LD_ADDR_VAR 0 4
5994: PUSH
5995: LD_INT 2
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: LD_VAR 0 1
6013: PUSH
6014: LD_INT 3
6016: MOD
6017: PUSH
6018: LD_INT 1
6020: PLUS
6021: ARRAY
6022: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6023: LD_VAR 0 4
6027: PUSH
6028: LD_INT 4
6030: EQUAL
6031: IFFALSE 6066
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6033: LD_ADDR_VAR 0 5
6037: PUSH
6038: LD_INT 6
6040: PUSH
6041: LD_INT 4
6043: PUSH
6044: LD_INT 5
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 1
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: CALL_OW 12
6062: ARRAY
6063: ST_TO_ADDR
6064: GO 6101
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6066: LD_ADDR_VAR 0 5
6070: PUSH
6071: LD_INT 5
6073: PUSH
6074: LD_INT 5
6076: PUSH
6077: LD_INT 7
6079: PUSH
6080: LD_INT 4
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 4
6094: PPUSH
6095: CALL_OW 12
6099: ARRAY
6100: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6101: LD_VAR 0 4
6105: PPUSH
6106: LD_INT 1
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: LD_VAR 0 5
6116: PPUSH
6117: LD_INT 30
6119: PPUSH
6120: CALL 20227 0 5
// veh := CreateVehicle ;
6124: LD_ADDR_VAR 0 3
6128: PUSH
6129: CALL_OW 45
6133: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6134: LD_ADDR_EXP 32
6138: PUSH
6139: LD_EXP 32
6143: PPUSH
6144: LD_EXP 32
6148: PUSH
6149: LD_INT 1
6151: PLUS
6152: PPUSH
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 1
6162: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6163: LD_VAR 0 3
6167: PPUSH
6168: LD_INT 4
6170: PPUSH
6171: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6175: LD_VAR 0 3
6179: PPUSH
6180: LD_INT 15
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6190: LD_VAR 0 2
6194: PPUSH
6195: LD_VAR 0 3
6199: PPUSH
6200: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6204: LD_VAR 0 3
6208: PPUSH
6209: LD_INT 153
6211: PPUSH
6212: LD_INT 45
6214: PPUSH
6215: CALL_OW 111
// wait ( 0 0$2 ) ;
6219: LD_INT 70
6221: PPUSH
6222: CALL_OW 67
// end ;
6226: GO 5923
6228: POP
6229: POP
// repeat wait ( 0 0$1 ) ;
6230: LD_INT 35
6232: PPUSH
6233: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6237: LD_ADDR_EXP 32
6241: PUSH
6242: LD_EXP 32
6246: PPUSH
6247: LD_INT 150
6249: PUSH
6250: LD_INT 36
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 138
6259: PUSH
6260: LD_INT 25
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PPUSH
6271: CALL 55217 0 2
6275: ST_TO_ADDR
// until not usAdditionalForces ;
6276: LD_EXP 32
6280: NOT
6281: IFFALSE 6230
// end ;
6283: PPOPN 5
6285: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6286: LD_INT 22
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 101
6298: PUSH
6299: LD_INT 2
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: IFFALSE 6327
6316: GO 6318
6318: DISABLE
// usAttacksAllowed := true ; end_of_file
6319: LD_ADDR_EXP 6
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
6327: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6328: LD_VAR 0 1
6332: PPUSH
6333: CALL 56589 0 1
// if un = Heike then
6337: LD_VAR 0 1
6341: PUSH
6342: LD_EXP 13
6346: EQUAL
6347: IFFALSE 6356
// YouLost ( Heike ) ;
6349: LD_STRING Heike
6351: PPUSH
6352: CALL_OW 104
// if un = usCommander then
6356: LD_VAR 0 1
6360: PUSH
6361: LD_EXP 28
6365: EQUAL
6366: IFFALSE 6375
// YouLost ( Commander ) ;
6368: LD_STRING Commander
6370: PPUSH
6371: CALL_OW 104
// if GetSide ( un ) = 1 then
6375: LD_VAR 0 1
6379: PPUSH
6380: CALL_OW 255
6384: PUSH
6385: LD_INT 1
6387: EQUAL
6388: IFFALSE 6639
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6390: LD_VAR 0 1
6394: PPUSH
6395: CALL_OW 264
6399: PUSH
6400: LD_INT 13
6402: EQUAL
6403: PUSH
6404: LD_INT 25
6406: PPUSH
6407: CALL_OW 302
6411: AND
6412: IFFALSE 6433
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6414: LD_INT 25
6416: PPUSH
6417: LD_INT 2
6419: PPUSH
6420: LD_INT 2
6422: PPUSH
6423: LD_INT 2
6425: PPUSH
6426: LD_INT 13
6428: PPUSH
6429: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: CALL_OW 264
6442: PUSH
6443: LD_INT 12
6445: EQUAL
6446: PUSH
6447: LD_INT 25
6449: PPUSH
6450: CALL_OW 302
6454: AND
6455: IFFALSE 6476
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6457: LD_INT 25
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: LD_INT 2
6468: PPUSH
6469: LD_INT 12
6471: PPUSH
6472: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 266
6485: PUSH
6486: LD_INT 32
6488: EQUAL
6489: IFFALSE 6554
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6491: LD_ADDR_EXP 31
6495: PUSH
6496: LD_EXP 31
6500: PPUSH
6501: LD_EXP 31
6505: PUSH
6506: LD_INT 1
6508: PLUS
6509: PPUSH
6510: LD_INT 32
6512: PUSH
6513: LD_VAR 0 1
6517: PPUSH
6518: CALL_OW 250
6522: PUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL_OW 251
6532: PUSH
6533: LD_VAR 0 1
6537: PPUSH
6538: CALL_OW 254
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: PPUSH
6549: CALL_OW 1
6553: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6554: LD_VAR 0 1
6558: PPUSH
6559: CALL_OW 266
6563: PUSH
6564: LD_INT 5
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: IN
6574: IFFALSE 6639
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6576: LD_ADDR_EXP 31
6580: PUSH
6581: LD_EXP 31
6585: PPUSH
6586: LD_EXP 31
6590: PUSH
6591: LD_INT 1
6593: PLUS
6594: PPUSH
6595: LD_INT 4
6597: PUSH
6598: LD_VAR 0 1
6602: PPUSH
6603: CALL_OW 250
6607: PUSH
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 251
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 254
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 1
6638: ST_TO_ADDR
// end ; end ;
6639: PPOPN 1
6641: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL_OW 255
6651: PUSH
6652: LD_INT 1
6654: EQUAL
6655: PUSH
6656: LD_VAR 0 1
6660: PPUSH
6661: CALL_OW 110
6665: PUSH
6666: LD_INT 1
6668: EQUAL
6669: AND
6670: IFFALSE 6684
// SetTag ( un , 0 ) ;
6672: LD_VAR 0 1
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6684: LD_VAR 0 1
6688: PPUSH
6689: CALL_OW 255
6693: PUSH
6694: LD_INT 1
6696: EQUAL
6697: PUSH
6698: LD_VAR 0 1
6702: PPUSH
6703: CALL_OW 264
6707: PUSH
6708: LD_INT 6
6710: EQUAL
6711: AND
6712: PUSH
6713: LD_EXP 11
6717: NOT
6718: AND
6719: IFFALSE 6729
// seeHeavyGun := true ;
6721: LD_ADDR_EXP 11
6725: PUSH
6726: LD_INT 1
6728: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 263
6738: PUSH
6739: LD_INT 2
6741: EQUAL
6742: PUSH
6743: LD_VAR 0 1
6747: PPUSH
6748: CALL_OW 255
6752: PUSH
6753: LD_INT 2
6755: NONEQUAL
6756: AND
6757: IFFALSE 6783
// begin ComUnlink ( un ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 136
// if not seeRemoteVehicle then
6768: LD_EXP 10
6772: NOT
6773: IFFALSE 6783
// seeRemoteVehicle := true ;
6775: LD_ADDR_EXP 10
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// end ; end ;
6783: PPOPN 1
6785: END
// on BuildingComplete ( b ) do var i , barracks ;
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
// begin if GetSide ( b ) = 1 then
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 255
6799: PUSH
6800: LD_INT 1
6802: EQUAL
6803: IFFALSE 6955
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6805: LD_ADDR_EXP 31
6809: PUSH
6810: LD_EXP 31
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: CALL_OW 3
6822: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 266
6832: PUSH
6833: LD_INT 4
6835: EQUAL
6836: IFFALSE 6847
// ComUpgrade ( b ) ;
6838: LD_VAR 0 1
6842: PPUSH
6843: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 266
6856: PUSH
6857: LD_INT 32
6859: EQUAL
6860: IFFALSE 6955
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6862: LD_VAR 0 1
6866: PPUSH
6867: LD_INT 6
6869: PUSH
6870: LD_INT 7
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 1
6879: PPUSH
6880: LD_INT 2
6882: PPUSH
6883: CALL_OW 12
6887: ARRAY
6888: PPUSH
6889: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: LD_INT 30
6910: PUSH
6911: LD_INT 5
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PPUSH
6922: CALL_OW 69
6926: ST_TO_ADDR
// if barracks then
6927: LD_VAR 0 3
6931: IFFALSE 6955
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6933: LD_VAR 0 3
6937: PUSH
6938: LD_INT 1
6940: ARRAY
6941: PPUSH
6942: CALL_OW 313
6946: PUSH
6947: LD_INT 1
6949: ARRAY
6950: PPUSH
6951: CALL_OW 122
// end ; end ; end ;
6955: PPOPN 3
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 56711 0 2
// if GetSide ( factory ) = 1 then
6972: LD_VAR 0 2
6976: PPUSH
6977: CALL_OW 255
6981: PUSH
6982: LD_INT 1
6984: EQUAL
6985: IFFALSE 7064
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL_OW 264
6996: PUSH
6997: LD_INT 12
6999: EQUAL
7000: IFFALSE 7012
// usCargo := vehicle ;
7002: LD_ADDR_EXP 30
7006: PUSH
7007: LD_VAR 0 1
7011: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7012: LD_VAR 0 1
7016: PPUSH
7017: CALL_OW 264
7021: PUSH
7022: LD_INT 12
7024: PUSH
7025: LD_INT 13
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: IN
7032: NOT
7033: IFFALSE 7064
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7035: LD_ADDR_EXP 29
7039: PUSH
7040: LD_EXP 29
7044: PPUSH
7045: LD_EXP 29
7049: PUSH
7050: LD_INT 1
7052: PLUS
7053: PPUSH
7054: LD_VAR 0 1
7058: PPUSH
7059: CALL_OW 1
7063: ST_TO_ADDR
// end ; end ;
7064: PPOPN 2
7066: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7067: LD_VAR 0 2
7071: PPUSH
7072: CALL_OW 255
7076: PUSH
7077: LD_INT 1
7079: EQUAL
7080: IFFALSE 7094
// AddComEnterUnit ( un , amFac ) ;
7082: LD_VAR 0 1
7086: PPUSH
7087: LD_INT 25
7089: PPUSH
7090: CALL_OW 180
// end ;
7094: PPOPN 4
7096: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7097: LD_VAR 0 1
7101: PPUSH
7102: CALL_OW 255
7106: PUSH
7107: LD_INT 1
7109: EQUAL
7110: PUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 266
7120: PUSH
7121: LD_INT 32
7123: EQUAL
7124: AND
7125: PUSH
7126: LD_VAR 0 2
7130: PPUSH
7131: CALL_OW 257
7135: PUSH
7136: LD_INT 1
7138: PUSH
7139: LD_INT 5
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: IN
7146: AND
7147: PUSH
7148: LD_INT 22
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 30
7160: PUSH
7161: LD_INT 5
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 50
7170: PUSH
7171: EMPTY
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 69
7183: AND
7184: IFFALSE 7254
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7186: LD_INT 74
7188: PPUSH
7189: LD_INT 120
7191: PPUSH
7192: CALL_OW 428
7196: PPUSH
7197: CALL_OW 313
7201: PUSH
7202: LD_INT 6
7204: LESS
7205: IFFALSE 7254
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_INT 74
7214: PPUSH
7215: LD_INT 120
7217: PPUSH
7218: CALL_OW 428
7222: PPUSH
7223: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7227: LD_VAR 0 2
7231: PPUSH
7232: CALL_OW 257
7236: PUSH
7237: LD_INT 1
7239: EQUAL
7240: IFFALSE 7254
// AddComChangeProfession ( un , class_sniper ) ;
7242: LD_VAR 0 2
7246: PPUSH
7247: LD_INT 5
7249: PPUSH
7250: CALL_OW 183
// end ; end ; end_of_file
7254: PPOPN 2
7256: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7257: LD_INT 0
7259: PPUSH
7260: PPUSH
7261: PPUSH
7262: PPUSH
7263: PPUSH
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
// Video ( true ) ;
7268: LD_INT 1
7270: PPUSH
7271: CALL 52583 0 1
// music_nat := 1 ;
7275: LD_ADDR_OWVAR 71
7279: PUSH
7280: LD_INT 1
7282: ST_TO_ADDR
// music_class := music_recon ;
7283: LD_ADDR_OWVAR 72
7287: PUSH
7288: LD_INT 3
7290: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7291: LD_INT 184
7293: PPUSH
7294: LD_INT 142
7296: PPUSH
7297: LD_INT 2
7299: PPUSH
7300: LD_INT 10
7302: NEG
7303: PPUSH
7304: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7308: LD_INT 184
7310: PPUSH
7311: LD_INT 142
7313: PPUSH
7314: LD_INT 2
7316: PPUSH
7317: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7321: LD_INT 204
7323: PPUSH
7324: LD_INT 151
7326: PPUSH
7327: LD_INT 2
7329: PPUSH
7330: LD_INT 10
7332: NEG
7333: PPUSH
7334: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7338: LD_INT 204
7340: PPUSH
7341: LD_INT 151
7343: PPUSH
7344: LD_INT 2
7346: PPUSH
7347: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7351: LD_INT 184
7353: PPUSH
7354: LD_INT 142
7356: PPUSH
7357: CALL_OW 86
// wait ( 0 0$2 ) ;
7361: LD_INT 70
7363: PPUSH
7364: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: LD_EXP 13
7377: PUSH
7378: LD_EXP 14
7382: PUSH
7383: LD_EXP 15
7387: PUSH
7388: LD_EXP 16
7392: PUSH
7393: LD_EXP 17
7397: PUSH
7398: LD_EXP 18
7402: PUSH
7403: LD_EXP 19
7407: PUSH
7408: LD_EXP 20
7412: PUSH
7413: LD_EXP 22
7417: PUSH
7418: LD_EXP 23
7422: PUSH
7423: LD_EXP 24
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: PUSH
7441: LD_EXP 25
7445: UNION
7446: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7447: LD_ADDR_VAR 0 6
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_INT 25
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 72
7471: PUSH
7472: LD_INT 0
7474: GREATER
7475: ST_TO_ADDR
// hasCamera := false ;
7476: LD_ADDR_VAR 0 7
7480: PUSH
7481: LD_INT 0
7483: ST_TO_ADDR
// if not hasEng then
7484: LD_VAR 0 6
7488: NOT
7489: IFFALSE 7517
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7491: LD_VAR 0 5
7495: PUSH
7496: LD_INT 1
7498: PPUSH
7499: LD_VAR 0 5
7503: PPUSH
7504: CALL_OW 12
7508: ARRAY
7509: PPUSH
7510: LD_INT 2
7512: PPUSH
7513: CALL_OW 336
// if heikeVehicles then
7517: LD_EXP 27
7521: IFFALSE 8145
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7523: LD_ADDR_VAR 0 5
7527: PUSH
7528: LD_VAR 0 5
7532: PPUSH
7533: LD_INT 3
7535: PPUSH
7536: CALL 54839 0 2
7540: ST_TO_ADDR
// for i in heikeVehicles do
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_EXP 27
7550: PUSH
7551: FOR_IN
7552: IFFALSE 8143
// begin if not tmp then
7554: LD_VAR 0 5
7558: NOT
7559: IFFALSE 7563
// break ;
7561: GO 8143
// uc_side := 2 ;
7563: LD_ADDR_OWVAR 20
7567: PUSH
7568: LD_INT 2
7570: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7571: LD_ADDR_OWVAR 21
7575: PUSH
7576: LD_VAR 0 2
7580: PUSH
7581: LD_INT 5
7583: ARRAY
7584: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7585: LD_ADDR_OWVAR 37
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: LD_INT 1
7597: ARRAY
7598: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7599: LD_ADDR_OWVAR 39
7603: PUSH
7604: LD_VAR 0 2
7608: PUSH
7609: LD_INT 2
7611: ARRAY
7612: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7613: LD_ADDR_OWVAR 38
7617: PUSH
7618: LD_VAR 0 2
7622: PUSH
7623: LD_INT 3
7625: ARRAY
7626: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7627: LD_ADDR_OWVAR 40
7631: PUSH
7632: LD_VAR 0 2
7636: PUSH
7637: LD_INT 4
7639: ARRAY
7640: ST_TO_ADDR
// veh := CreateVehicle ;
7641: LD_ADDR_VAR 0 4
7645: PUSH
7646: CALL_OW 45
7650: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7651: LD_VAR 0 4
7655: PPUSH
7656: LD_INT 4
7658: PPUSH
7659: CALL_OW 233
// if i [ 3 ] = control_manual then
7663: LD_VAR 0 2
7667: PUSH
7668: LD_INT 3
7670: ARRAY
7671: PUSH
7672: LD_INT 1
7674: EQUAL
7675: IFFALSE 7760
// begin PlaceUnitArea ( veh , startArea , false ) ;
7677: LD_VAR 0 4
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: LD_INT 0
7687: PPUSH
7688: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7692: LD_VAR 0 2
7696: PUSH
7697: LD_INT 4
7699: ARRAY
7700: PUSH
7701: LD_INT 31
7703: EQUAL
7704: IFFALSE 7722
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7706: LD_VAR 0 5
7710: PUSH
7711: LD_INT 1
7713: ARRAY
7714: PPUSH
7715: LD_INT 3
7717: PPUSH
7718: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7722: LD_VAR 0 5
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 4
7735: PPUSH
7736: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7740: LD_ADDR_VAR 0 5
7744: PUSH
7745: LD_VAR 0 5
7749: PPUSH
7750: LD_INT 1
7752: PPUSH
7753: CALL_OW 3
7757: ST_TO_ADDR
// end else
7758: GO 7821
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7760: LD_INT 22
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 34
7772: PUSH
7773: LD_INT 31
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: IFFALSE 7821
// begin PlaceUnitArea ( veh , startArea , false ) ;
7790: LD_VAR 0 4
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: CALL_OW 49
// Connect ( veh ) ;
7805: LD_VAR 0 4
7809: PPUSH
7810: CALL 23320 0 1
// wait ( 0 0$2 ) ;
7814: LD_INT 70
7816: PPUSH
7817: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7821: LD_VAR 0 4
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_INT 6
7833: ARRAY
7834: PPUSH
7835: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7839: LD_VAR 0 4
7843: PPUSH
7844: LD_INT 20
7846: PPUSH
7847: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7851: LD_VAR 0 2
7855: PUSH
7856: LD_INT 7
7858: ARRAY
7859: PUSH
7860: LD_VAR 0 4
7864: PPUSH
7865: CALL_OW 264
7869: PUSH
7870: LD_INT 51
7872: PUSH
7873: LD_INT 32
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: IN
7880: AND
7881: IFFALSE 7932
// begin for j := 1 to 2 do
7883: LD_ADDR_VAR 0 3
7887: PUSH
7888: DOUBLE
7889: LD_INT 1
7891: DEC
7892: ST_TO_ADDR
7893: LD_INT 2
7895: PUSH
7896: FOR_TO
7897: IFFALSE 7930
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7899: LD_VAR 0 4
7903: PPUSH
7904: LD_VAR 0 3
7908: PPUSH
7909: LD_VAR 0 2
7913: PUSH
7914: LD_INT 7
7916: ARRAY
7917: PUSH
7918: LD_VAR 0 3
7922: ARRAY
7923: PPUSH
7924: CALL_OW 291
7928: GO 7896
7930: POP
7931: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7932: LD_VAR 0 4
7936: PPUSH
7937: LD_INT 185
7939: PPUSH
7940: LD_INT 144
7942: PPUSH
7943: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7947: LD_VAR 0 4
7951: PPUSH
7952: CALL_OW 263
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: PUSH
7961: LD_VAR 0 7
7965: NOT
7966: AND
7967: PUSH
7968: LD_VAR 0 4
7972: PPUSH
7973: CALL_OW 311
7977: PPUSH
7978: CALL_OW 257
7982: PUSH
7983: LD_INT 2
7985: EQUAL
7986: AND
7987: IFFALSE 8092
// begin hasCamera := true ;
7989: LD_ADDR_VAR 0 7
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7997: LD_ADDR_VAR 0 8
8001: PUSH
8002: LD_VAR 0 4
8006: PPUSH
8007: CALL_OW 311
8011: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8012: LD_VAR 0 4
8016: PPUSH
8017: LD_INT 177
8019: PPUSH
8020: LD_INT 138
8022: PPUSH
8023: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8027: LD_VAR 0 8
8031: PPUSH
8032: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8036: LD_VAR 0 8
8040: PPUSH
8041: LD_INT 190
8043: PPUSH
8044: LD_INT 150
8046: PPUSH
8047: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8051: LD_VAR 0 8
8055: PPUSH
8056: LD_VAR 0 4
8060: PPUSH
8061: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8065: LD_VAR 0 8
8069: PPUSH
8070: LD_INT 170
8072: PPUSH
8073: LD_INT 103
8075: PPUSH
8076: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8080: LD_INT 190
8082: PPUSH
8083: LD_INT 150
8085: PPUSH
8086: CALL_OW 84
// end else
8090: GO 8134
// begin AddComWait ( veh , 0 0$2 ) ;
8092: LD_VAR 0 4
8096: PPUSH
8097: LD_INT 70
8099: PPUSH
8100: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8104: LD_VAR 0 4
8108: PPUSH
8109: LD_INT 179
8111: PPUSH
8112: LD_INT 129
8114: PPUSH
8115: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8119: LD_VAR 0 4
8123: PPUSH
8124: LD_INT 170
8126: PPUSH
8127: LD_INT 103
8129: PPUSH
8130: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8134: LD_INT 70
8136: PPUSH
8137: CALL_OW 67
// end ;
8141: GO 7551
8143: POP
8144: POP
// end ; if tmp then
8145: LD_VAR 0 5
8149: IFFALSE 8294
// begin for i in tmp do
8151: LD_ADDR_VAR 0 2
8155: PUSH
8156: LD_VAR 0 5
8160: PUSH
8161: FOR_IN
8162: IFFALSE 8292
// begin SetDir ( i , 4 ) ;
8164: LD_VAR 0 2
8168: PPUSH
8169: LD_INT 4
8171: PPUSH
8172: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_INT 1
8183: PPUSH
8184: LD_INT 0
8186: PPUSH
8187: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8191: LD_VAR 0 2
8195: PPUSH
8196: LD_INT 185
8198: PPUSH
8199: LD_INT 144
8201: PPUSH
8202: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8206: LD_VAR 0 2
8210: PPUSH
8211: CALL_OW 257
8215: PUSH
8216: LD_INT 2
8218: EQUAL
8219: PUSH
8220: LD_VAR 0 7
8224: NOT
8225: AND
8226: IFFALSE 8253
// begin hasCamera := true ;
8228: LD_ADDR_VAR 0 7
8232: PUSH
8233: LD_INT 1
8235: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8236: LD_VAR 0 2
8240: PPUSH
8241: LD_INT 190
8243: PPUSH
8244: LD_INT 150
8246: PPUSH
8247: CALL_OW 217
// end else
8251: GO 8268
// AddComMoveXY ( i , 179 , 129 ) ;
8253: LD_VAR 0 2
8257: PPUSH
8258: LD_INT 179
8260: PPUSH
8261: LD_INT 129
8263: PPUSH
8264: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8268: LD_VAR 0 2
8272: PPUSH
8273: LD_INT 170
8275: PPUSH
8276: LD_INT 103
8278: PPUSH
8279: CALL_OW 171
// wait ( 0 0$2 ) ;
8283: LD_INT 70
8285: PPUSH
8286: CALL_OW 67
// end ;
8290: GO 8161
8292: POP
8293: POP
// end ; if heikeApes then
8294: LD_EXP 26
8298: IFFALSE 8416
// begin counter := 0 ;
8300: LD_ADDR_VAR 0 9
8304: PUSH
8305: LD_INT 0
8307: ST_TO_ADDR
// for i in heikeApes do
8308: LD_ADDR_VAR 0 2
8312: PUSH
8313: LD_EXP 26
8317: PUSH
8318: FOR_IN
8319: IFFALSE 8414
// begin if counter > 2 then
8321: LD_VAR 0 9
8325: PUSH
8326: LD_INT 2
8328: GREATER
8329: IFFALSE 8333
// break ;
8331: GO 8414
// counter := Inc ( counter ) ;
8333: LD_ADDR_VAR 0 9
8337: PUSH
8338: LD_VAR 0 9
8342: PPUSH
8343: CALL 53974 0 1
8347: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8348: LD_VAR 0 2
8352: PPUSH
8353: LD_INT 4
8355: PPUSH
8356: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8360: LD_VAR 0 2
8364: PPUSH
8365: LD_INT 1
8367: PPUSH
8368: LD_INT 0
8370: PPUSH
8371: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8375: LD_VAR 0 2
8379: PPUSH
8380: LD_INT 185
8382: PPUSH
8383: LD_INT 144
8385: PPUSH
8386: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8390: LD_VAR 0 2
8394: PPUSH
8395: LD_INT 170
8397: PPUSH
8398: LD_INT 103
8400: PPUSH
8401: CALL_OW 171
// wait ( 0 0$2 ) ;
8405: LD_INT 70
8407: PPUSH
8408: CALL_OW 67
// end ;
8412: GO 8318
8414: POP
8415: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8416: LD_EXP 13
8420: PPUSH
8421: LD_INT 163
8423: PPUSH
8424: LD_INT 89
8426: PPUSH
8427: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8431: LD_EXP 13
8435: PPUSH
8436: LD_STRING DH-Intro-1
8438: PPUSH
8439: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8443: LD_INT 175
8445: PPUSH
8446: LD_INT 117
8448: PPUSH
8449: CALL_OW 84
// if Markov then
8453: LD_EXP 20
8457: IFFALSE 9032
// begin Say ( Markov , DMar-Intro-2 ) ;
8459: LD_EXP 20
8463: PPUSH
8464: LD_STRING DMar-Intro-2
8466: PPUSH
8467: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8471: LD_EXP 20
8475: PPUSH
8476: LD_STRING DMar-Intro-3
8478: PPUSH
8479: CALL_OW 88
// wait ( 0 0$1 ) ;
8483: LD_INT 35
8485: PPUSH
8486: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8490: LD_EXP 13
8494: PPUSH
8495: CALL_OW 85
// if Kurt then
8499: LD_EXP 23
8503: IFFALSE 8555
// begin if IsInUnit ( Kurt ) then
8505: LD_EXP 23
8509: PPUSH
8510: CALL_OW 310
8514: IFFALSE 8525
// ComExit ( Kurt ) ;
8516: LD_EXP 23
8520: PPUSH
8521: CALL 53009 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8525: LD_EXP 23
8529: PPUSH
8530: LD_INT 130
8532: PPUSH
8533: LD_INT 56
8535: PPUSH
8536: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8540: LD_EXP 23
8544: PPUSH
8545: LD_INT 129
8547: PPUSH
8548: LD_INT 56
8550: PPUSH
8551: CALL_OW 178
// end ; if Kaia then
8555: LD_EXP 18
8559: IFFALSE 8739
// begin Say ( Kaia , DK-Intro-4 ) ;
8561: LD_EXP 18
8565: PPUSH
8566: LD_STRING DK-Intro-4
8568: PPUSH
8569: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8573: LD_EXP 20
8577: PPUSH
8578: LD_STRING DMar-Intro-5
8580: PPUSH
8581: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8585: LD_EXP 20
8589: PPUSH
8590: LD_STRING DMar-Intro-6
8592: PPUSH
8593: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8597: LD_EXP 22
8601: PPUSH
8602: LD_STRING DO-Intro-7
8604: PPUSH
8605: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8609: LD_INT 160
8611: PPUSH
8612: LD_INT 85
8614: PPUSH
8615: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8619: LD_EXP 20
8623: PPUSH
8624: LD_STRING DMar-Intro-8
8626: PPUSH
8627: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8631: LD_EXP 20
8635: PPUSH
8636: LD_STRING DMar-Intro-9
8638: PPUSH
8639: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8643: LD_EXP 20
8647: PPUSH
8648: LD_STRING DMar-Intro-10
8650: PPUSH
8651: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8655: LD_EXP 20
8659: PPUSH
8660: LD_STRING DMar-Intro-11
8662: PPUSH
8663: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8667: LD_EXP 14
8671: PPUSH
8672: LD_STRING DG-Intro-12
8674: PPUSH
8675: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8679: LD_EXP 14
8683: PPUSH
8684: LD_STRING DG-Intro-13
8686: PPUSH
8687: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8691: LD_EXP 14
8695: PPUSH
8696: LD_STRING DG-Intro-14
8698: PPUSH
8699: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8703: LD_EXP 14
8707: PPUSH
8708: LD_STRING DG-Intro-15
8710: PPUSH
8711: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8715: LD_EXP 13
8719: PPUSH
8720: LD_STRING DH-Intro-16
8722: PPUSH
8723: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8727: LD_EXP 20
8731: PPUSH
8732: LD_STRING DMar-Intro-17
8734: PPUSH
8735: CALL_OW 88
// end ; if Kurt and Mike then
8739: LD_EXP 23
8743: PUSH
8744: LD_EXP 15
8748: AND
8749: IFFALSE 9032
// begin CenterNowOnUnits ( Kurt ) ;
8751: LD_EXP 23
8755: PPUSH
8756: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8760: LD_EXP 23
8764: PPUSH
8765: LD_EXP 13
8769: PPUSH
8770: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8774: LD_EXP 23
8778: PPUSH
8779: LD_STRING DKs-Intro-18
8781: PPUSH
8782: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8786: LD_EXP 23
8790: PPUSH
8791: LD_STRING DKs-Intro-19
8793: PPUSH
8794: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8798: LD_EXP 15
8802: PPUSH
8803: CALL_OW 87
// if IsInUnit ( Mike ) then
8807: LD_EXP 15
8811: PPUSH
8812: CALL_OW 310
8816: IFFALSE 8827
// ComExit ( Mike ) ;
8818: LD_EXP 15
8822: PPUSH
8823: CALL 53009 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8827: LD_EXP 15
8831: PPUSH
8832: LD_INT 129
8834: PPUSH
8835: LD_INT 53
8837: PPUSH
8838: CALL_OW 171
// AddComHold ( Mike ) ;
8842: LD_EXP 15
8846: PPUSH
8847: CALL_OW 200
// wait ( 0 0$2 ) ;
8851: LD_INT 70
8853: PPUSH
8854: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8858: LD_EXP 15
8862: PPUSH
8863: LD_STRING DM-Intro-20
8865: PPUSH
8866: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8870: LD_ADDR_EXP 3
8874: PUSH
8875: LD_STRING Scout
8877: PPUSH
8878: CALL_OW 97
8882: ST_TO_ADDR
// if scoutActive = 1 then
8883: LD_EXP 3
8887: PUSH
8888: LD_INT 1
8890: EQUAL
8891: IFFALSE 8988
// begin CenterNowOnUnits ( Kurt ) ;
8893: LD_EXP 23
8897: PPUSH
8898: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8902: LD_EXP 13
8906: PPUSH
8907: LD_STRING DH-Intro-21
8909: PPUSH
8910: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8914: LD_EXP 15
8918: PPUSH
8919: LD_STRING DM-Intro-22
8921: PPUSH
8922: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8926: LD_EXP 23
8930: PPUSH
8931: LD_STRING DKs-Intro-23
8933: PPUSH
8934: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8938: LD_EXP 23
8942: PPUSH
8943: LD_INT 5
8945: PPUSH
8946: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8950: LD_EXP 15
8954: PPUSH
8955: LD_INT 5
8957: PPUSH
8958: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8962: LD_EXP 23
8966: PUSH
8967: LD_EXP 15
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PPUSH
8976: LD_INT 104
8978: PPUSH
8979: LD_INT 66
8981: PPUSH
8982: CALL_OW 111
// end else
8986: GO 9032
// begin scoutActive := 0 ;
8988: LD_ADDR_EXP 3
8992: PUSH
8993: LD_INT 0
8995: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8996: LD_EXP 13
9000: PPUSH
9001: LD_STRING DH-Intro-a-21
9003: PPUSH
9004: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9008: LD_EXP 15
9012: PPUSH
9013: LD_STRING DM-Intro-a-22
9015: PPUSH
9016: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9020: LD_EXP 23
9024: PPUSH
9025: LD_STRING DKs-Intro-a-23
9027: PPUSH
9028: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9032: LD_INT 0
9034: PPUSH
9035: CALL 52583 0 1
// music_nat := music_auto ;
9039: LD_ADDR_OWVAR 71
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// music_class := music_auto ;
9047: LD_ADDR_OWVAR 72
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9055: LD_STRING M1
9057: PPUSH
9058: CALL_OW 337
// wait ( 0 0$3 ) ;
9062: LD_INT 105
9064: PPUSH
9065: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9069: LD_EXP 13
9073: PPUSH
9074: LD_STRING DH-Base-1
9076: PPUSH
9077: CALL_OW 88
// if Kaia then
9081: LD_EXP 18
9085: IFFALSE 9195
// begin Say ( Kaia , DK-Base-2 ) ;
9087: LD_EXP 18
9091: PPUSH
9092: LD_STRING DK-Base-2
9094: PPUSH
9095: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9099: LD_EXP 13
9103: PPUSH
9104: LD_STRING DH-Base-3
9106: PPUSH
9107: CALL_OW 88
// if Aviradze then
9111: LD_EXP 24
9115: IFFALSE 9195
// begin Say ( Aviradze , DA-Base-4 ) ;
9117: LD_EXP 24
9121: PPUSH
9122: LD_STRING DA-Base-4
9124: PPUSH
9125: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9129: LD_EXP 18
9133: PPUSH
9134: LD_STRING DK-Base-5
9136: PPUSH
9137: CALL_OW 88
// if Markov then
9141: LD_EXP 20
9145: IFFALSE 9195
// begin Say ( Markov , DMar-Base-6 ) ;
9147: LD_EXP 20
9151: PPUSH
9152: LD_STRING DMar-Base-6
9154: PPUSH
9155: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9159: LD_EXP 18
9163: PPUSH
9164: LD_STRING DK-Base-7
9166: PPUSH
9167: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9171: LD_EXP 20
9175: PPUSH
9176: LD_STRING DMar-Base-8
9178: PPUSH
9179: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9183: LD_EXP 20
9187: PPUSH
9188: LD_STRING DMar-Base-9
9190: PPUSH
9191: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9195: CALL_OW 22
// end ;
9199: LD_VAR 0 1
9203: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9204: LD_EXP 5
9208: IFFALSE 10312
9210: GO 9212
9212: DISABLE
9213: LD_INT 0
9215: PPUSH
9216: PPUSH
// begin InGameOn ;
9217: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9221: LD_EXP 15
9225: PUSH
9226: LD_EXP 23
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: LD_EXP 13
9239: PPUSH
9240: CALL_OW 119
// ComExit ( Heike ) ;
9244: LD_EXP 13
9248: PPUSH
9249: CALL 53009 0 1
// if IsOk ( Mike ) then
9253: LD_EXP 15
9257: PPUSH
9258: CALL_OW 302
9262: IFFALSE 9280
// AddComTurnUnit ( Heike , Mike ) else
9264: LD_EXP 13
9268: PPUSH
9269: LD_EXP 15
9273: PPUSH
9274: CALL_OW 179
9278: GO 9294
// AddComTurnUnit ( Heike , Kurt ) ;
9280: LD_EXP 13
9284: PPUSH
9285: LD_EXP 23
9289: PPUSH
9290: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9294: LD_EXP 15
9298: PPUSH
9299: CALL_OW 302
9303: PUSH
9304: LD_EXP 23
9308: PPUSH
9309: CALL_OW 302
9313: AND
9314: IFFALSE 9565
// begin CenterNowOnUnits ( Mike ) ;
9316: LD_EXP 15
9320: PPUSH
9321: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9325: LD_EXP 15
9329: PPUSH
9330: LD_STRING DM-Scout-1
9332: PPUSH
9333: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9337: LD_EXP 13
9341: PPUSH
9342: LD_STRING DH-Scout-2
9344: PPUSH
9345: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9349: LD_EXP 23
9353: PPUSH
9354: LD_STRING DKs-Scout-3
9356: PPUSH
9357: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9361: LD_EXP 13
9365: PPUSH
9366: LD_STRING DH-Scout-4
9368: PPUSH
9369: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9373: LD_EXP 13
9377: PPUSH
9378: LD_STRING DH-Scout-5
9380: PPUSH
9381: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9385: LD_ADDR_VAR 0 2
9389: PUSH
9390: LD_INT 72
9392: PUSH
9393: LD_INT 122
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 89
9402: PUSH
9403: LD_INT 131
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 99
9412: PUSH
9413: LD_INT 139
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 100
9422: PUSH
9423: LD_INT 148
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: ST_TO_ADDR
// for i in tmp do
9436: LD_ADDR_VAR 0 1
9440: PUSH
9441: LD_VAR 0 2
9445: PUSH
9446: FOR_IN
9447: IFFALSE 9505
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9449: LD_VAR 0 1
9453: PUSH
9454: LD_INT 1
9456: ARRAY
9457: PPUSH
9458: LD_VAR 0 1
9462: PUSH
9463: LD_INT 2
9465: ARRAY
9466: PPUSH
9467: LD_INT 2
9469: PPUSH
9470: LD_INT 6
9472: NEG
9473: PPUSH
9474: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9478: LD_VAR 0 1
9482: PUSH
9483: LD_INT 1
9485: ARRAY
9486: PPUSH
9487: LD_VAR 0 1
9491: PUSH
9492: LD_INT 2
9494: ARRAY
9495: PPUSH
9496: LD_INT 2
9498: PPUSH
9499: CALL_OW 331
// end ;
9503: GO 9446
9505: POP
9506: POP
// CenterOnXY ( 83 , 132 ) ;
9507: LD_INT 83
9509: PPUSH
9510: LD_INT 132
9512: PPUSH
9513: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9517: LD_EXP 23
9521: PPUSH
9522: LD_STRING DKs-Scout-6
9524: PPUSH
9525: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9529: LD_EXP 15
9533: PPUSH
9534: LD_STRING DM-Scout-7
9536: PPUSH
9537: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9541: LD_EXP 15
9545: PPUSH
9546: LD_STRING DM-Scout-8
9548: PPUSH
9549: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9553: LD_EXP 23
9557: PPUSH
9558: LD_STRING DKs-Scout-9
9560: PPUSH
9561: CALL_OW 88
// end ; if IsDead ( Mike ) then
9565: LD_EXP 15
9569: PPUSH
9570: CALL_OW 301
9574: IFFALSE 9741
// begin CenterNowOnUnits ( Kurt ) ;
9576: LD_EXP 23
9580: PPUSH
9581: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9585: LD_EXP 23
9589: PPUSH
9590: LD_STRING DKs-Scout-b-1
9592: PPUSH
9593: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9597: LD_EXP 23
9601: PPUSH
9602: LD_STRING DKs-Scout-b-2
9604: PPUSH
9605: CALL_OW 88
// if IsOk ( Givi ) then
9609: LD_EXP 14
9613: PPUSH
9614: CALL_OW 302
9618: IFFALSE 9693
// begin ComExit ( Givi ) ;
9620: LD_EXP 14
9624: PPUSH
9625: CALL 53009 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9629: LD_EXP 14
9633: PPUSH
9634: LD_EXP 23
9638: PPUSH
9639: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9643: LD_EXP 14
9647: PPUSH
9648: LD_STRING DG-Scout-b-3
9650: PPUSH
9651: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9655: LD_EXP 14
9659: PPUSH
9660: LD_STRING DG-Scout-b-4
9662: PPUSH
9663: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9667: LD_EXP 14
9671: PPUSH
9672: LD_STRING DG-Scout-b-5
9674: PPUSH
9675: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9679: LD_EXP 13
9683: PPUSH
9684: LD_STRING DH-Scout-b-6
9686: PPUSH
9687: CALL_OW 88
// end else
9691: GO 9705
// Say ( Heike , DH-Scout-a-4 ) ;
9693: LD_EXP 13
9697: PPUSH
9698: LD_STRING DH-Scout-a-4
9700: PPUSH
9701: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9705: LD_EXP 23
9709: PPUSH
9710: LD_STRING DKs-Scout-b-7
9712: PPUSH
9713: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9717: LD_EXP 23
9721: PPUSH
9722: LD_STRING DKs-Scout-b-8
9724: PPUSH
9725: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9729: LD_EXP 23
9733: PPUSH
9734: LD_STRING DKs-Scout-b-9
9736: PPUSH
9737: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9741: LD_EXP 23
9745: PPUSH
9746: CALL_OW 301
9750: IFFALSE 10029
// begin CenterNowOnUnits ( Mike ) ;
9752: LD_EXP 15
9756: PPUSH
9757: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9761: LD_EXP 15
9765: PPUSH
9766: LD_STRING DM-Scout-a-1
9768: PPUSH
9769: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING DM-Scout-a-2
9780: PPUSH
9781: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9785: LD_EXP 15
9789: PPUSH
9790: CALL_OW 256
9794: PUSH
9795: LD_INT 1000
9797: LESS
9798: IFFALSE 9814
// Say ( Heike , DH-Scout-a-3 ) else
9800: LD_EXP 13
9804: PPUSH
9805: LD_STRING DH-Scout-a-3
9807: PPUSH
9808: CALL_OW 88
9812: GO 9826
// Say ( Heike , DH-Scout-a-4 ) ;
9814: LD_EXP 13
9818: PPUSH
9819: LD_STRING DH-Scout-a-4
9821: PPUSH
9822: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9826: LD_EXP 15
9830: PPUSH
9831: LD_STRING DM-Scout-a-5
9833: PPUSH
9834: CALL_OW 88
// if IsOk ( Kaia ) then
9838: LD_EXP 18
9842: PPUSH
9843: CALL_OW 302
9847: IFFALSE 10029
// begin ComExit ( Kaia ) ;
9849: LD_EXP 18
9853: PPUSH
9854: CALL 53009 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9858: LD_EXP 18
9862: PPUSH
9863: LD_EXP 15
9867: PPUSH
9868: CALL_OW 172
// wait ( 0 0$2 ) ;
9872: LD_INT 70
9874: PPUSH
9875: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9879: LD_EXP 18
9883: PPUSH
9884: LD_EXP 15
9888: PPUSH
9889: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9893: LD_EXP 15
9897: PPUSH
9898: LD_EXP 18
9902: PPUSH
9903: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9907: LD_EXP 18
9911: PPUSH
9912: LD_STRING DK-Scout-a-6
9914: PPUSH
9915: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9919: LD_EXP 15
9923: PPUSH
9924: LD_STRING DM-Scout-a-7
9926: PPUSH
9927: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9931: LD_EXP 18
9935: PPUSH
9936: LD_STRING DK-Scout-a-8
9938: PPUSH
9939: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9943: LD_EXP 18
9947: PPUSH
9948: LD_STRING DK-Scout-a-9
9950: PPUSH
9951: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9955: LD_EXP 13
9959: PPUSH
9960: LD_STRING DH-Scout-a-10
9962: PPUSH
9963: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9967: LD_EXP 15
9971: PPUSH
9972: LD_EXP 13
9976: PPUSH
9977: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9981: LD_EXP 15
9985: PPUSH
9986: LD_STRING DM-Scout-a-11
9988: PPUSH
9989: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9993: LD_EXP 15
9997: PPUSH
9998: LD_STRING DM-Scout-a-12
10000: PPUSH
10001: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10005: LD_EXP 15
10009: PPUSH
10010: LD_STRING DM-Scout-a-13
10012: PPUSH
10013: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10017: LD_EXP 15
10021: PPUSH
10022: LD_STRING DM-Scout-a-14
10024: PPUSH
10025: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10029: LD_EXP 14
10033: PPUSH
10034: CALL_OW 302
10038: IFFALSE 10066
// begin Say ( Givi , DG-Scout-10 ) ;
10040: LD_EXP 14
10044: PPUSH
10045: LD_STRING DG-Scout-10
10047: PPUSH
10048: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10052: LD_EXP 14
10056: PPUSH
10057: LD_STRING DG-Scout-11
10059: PPUSH
10060: CALL_OW 88
// end else
10064: GO 10123
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10066: LD_EXP 25
10070: PPUSH
10071: LD_INT 26
10073: PUSH
10074: LD_INT 1
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PPUSH
10081: CALL_OW 72
10085: PPUSH
10086: LD_STRING DArm-Scout-10
10088: PPUSH
10089: CALL 191 0 2
10093: NOT
10094: IFFALSE 10123
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10096: LD_EXP 25
10100: PPUSH
10101: LD_INT 26
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 72
10115: PPUSH
10116: LD_STRING DArf-Scout-10
10118: PPUSH
10119: CALL 191 0 2
// Say ( Heike , DH-Scout-12 ) ;
10123: LD_EXP 13
10127: PPUSH
10128: LD_STRING DH-Scout-12
10130: PPUSH
10131: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10135: LD_EXP 13
10139: PPUSH
10140: LD_STRING DH-Scout-13
10142: PPUSH
10143: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10147: LD_EXP 15
10151: PPUSH
10152: CALL_OW 302
10156: PUSH
10157: LD_EXP 23
10161: PPUSH
10162: CALL_OW 302
10166: AND
10167: IFFALSE 10195
// begin Say ( Mike , DM-Scout-14 ) ;
10169: LD_EXP 15
10173: PPUSH
10174: LD_STRING DM-Scout-14
10176: PPUSH
10177: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10181: LD_EXP 13
10185: PPUSH
10186: LD_STRING DH-Scout-c-14
10188: PPUSH
10189: CALL_OW 88
// end else
10193: GO 10288
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10195: LD_EXP 15
10199: PPUSH
10200: CALL_OW 302
10204: PUSH
10205: LD_EXP 23
10209: PPUSH
10210: CALL_OW 302
10214: XOR
10215: IFFALSE 10276
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10217: LD_EXP 25
10221: PPUSH
10222: LD_INT 26
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 72
10236: PPUSH
10237: LD_STRING DArm-Scout-a-14
10239: PPUSH
10240: CALL 191 0 2
10244: NOT
10245: IFFALSE 10274
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10247: LD_EXP 25
10251: PPUSH
10252: LD_INT 26
10254: PUSH
10255: LD_INT 2
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL_OW 72
10266: PPUSH
10267: LD_STRING DArf-Scout-a-14
10269: PPUSH
10270: CALL 191 0 2
// end else
10274: GO 10288
// Say ( Heike , DH-Scout-d-14 ) ;
10276: LD_EXP 13
10280: PPUSH
10281: LD_STRING DH-Scout-d-14
10283: PPUSH
10284: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10288: LD_EXP 13
10292: PPUSH
10293: LD_STRING DH-Scout-15
10295: PPUSH
10296: CALL_OW 88
// InGameOff ;
10300: CALL_OW 9
// usAttacksAllowed := true ;
10304: LD_ADDR_EXP 6
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// end ;
10312: PPOPN 2
10314: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10315: LD_EXP 4
10319: IFFALSE 10496
10321: GO 10323
10323: DISABLE
10324: LD_INT 0
10326: PPUSH
// begin spoken := true ;
10327: LD_ADDR_VAR 0 1
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10335: LD_INT 1050
10337: PPUSH
10338: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10342: LD_EXP 13
10346: PPUSH
10347: LD_STRING DH-Scout-c-1
10349: PPUSH
10350: CALL_OW 88
// if not IsOk ( Givi ) then
10354: LD_EXP 14
10358: PPUSH
10359: CALL_OW 302
10363: NOT
10364: IFFALSE 10368
// exit ;
10366: GO 10496
// if IsOk ( Givi ) then
10368: LD_EXP 14
10372: PPUSH
10373: CALL_OW 302
10377: IFFALSE 10405
// begin Say ( Givi , DG-Scout-c-2 ) ;
10379: LD_EXP 14
10383: PPUSH
10384: LD_STRING DG-Scout-c-2
10386: PPUSH
10387: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10391: LD_EXP 14
10395: PPUSH
10396: LD_STRING DG-Scout-c-3
10398: PPUSH
10399: CALL_OW 88
// end else
10403: GO 10478
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_EXP 25
10414: PPUSH
10415: LD_INT 26
10417: PUSH
10418: LD_INT 1
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: CALL_OW 72
10429: PPUSH
10430: LD_STRING DArm-Scout-c-3
10432: PPUSH
10433: CALL 191 0 2
10437: ST_TO_ADDR
// if not spoken then
10438: LD_VAR 0 1
10442: NOT
10443: IFFALSE 10478
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: LD_EXP 25
10454: PPUSH
10455: LD_INT 26
10457: PUSH
10458: LD_INT 2
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 72
10469: PPUSH
10470: LD_STRING DArf-Scout-c-3
10472: PPUSH
10473: CALL 191 0 2
10477: ST_TO_ADDR
// ; end ; if spoken then
10478: LD_VAR 0 1
10482: IFFALSE 10496
// Say ( Heike , DH-Scout-c-4 ) ;
10484: LD_EXP 13
10488: PPUSH
10489: LD_STRING DH-Scout-c-4
10491: PPUSH
10492: CALL_OW 88
// end ;
10496: PPOPN 1
10498: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10499: LD_INT 22
10501: PUSH
10502: LD_INT 2
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 30
10511: PUSH
10512: LD_INT 7
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PPUSH
10523: CALL_OW 69
10527: PUSH
10528: LD_EXP 24
10532: PPUSH
10533: CALL_OW 302
10537: AND
10538: IFFALSE 10623
10540: GO 10542
10542: DISABLE
// begin DialogueOn ;
10543: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10547: LD_EXP 24
10551: PPUSH
10552: LD_STRING DA-Lab-1
10554: PPUSH
10555: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10559: LD_EXP 13
10563: PPUSH
10564: LD_STRING DH-Lab-2
10566: PPUSH
10567: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10571: LD_EXP 24
10575: PPUSH
10576: LD_STRING DA-Lab-3
10578: PPUSH
10579: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10583: LD_EXP 24
10587: PPUSH
10588: LD_STRING DA-Lab-4
10590: PPUSH
10591: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10595: LD_EXP 24
10599: PPUSH
10600: LD_STRING DA-Lab-5
10602: PPUSH
10603: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10607: LD_EXP 13
10611: PPUSH
10612: LD_STRING DH-Lab-6
10614: PPUSH
10615: CALL_OW 88
// DialogueOff ;
10619: CALL_OW 7
// end ;
10623: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10624: LD_INT 7
10626: PPUSH
10627: LD_INT 2
10629: PPUSH
10630: CALL_OW 321
10634: PUSH
10635: LD_INT 2
10637: EQUAL
10638: PUSH
10639: LD_EXP 14
10643: PPUSH
10644: CALL_OW 302
10648: AND
10649: IFFALSE 10818
10651: GO 10653
10653: DISABLE
// begin DialogueOn ;
10654: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10658: LD_EXP 14
10662: PPUSH
10663: LD_STRING DG-Opt-1
10665: PPUSH
10666: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10670: LD_EXP 13
10674: PPUSH
10675: LD_STRING DH-Opt-2
10677: PPUSH
10678: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10682: LD_EXP 14
10686: PPUSH
10687: LD_STRING DG-Opt-3
10689: PPUSH
10690: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10694: LD_EXP 14
10698: PPUSH
10699: LD_STRING DG-Opt-4
10701: PPUSH
10702: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10706: LD_EXP 13
10710: PPUSH
10711: LD_STRING DH-Opt-5
10713: PPUSH
10714: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10718: LD_EXP 14
10722: PPUSH
10723: LD_STRING DG-Opt-6
10725: PPUSH
10726: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10730: LD_EXP 13
10734: PPUSH
10735: LD_STRING DH-Opt-7
10737: PPUSH
10738: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10742: LD_EXP 14
10746: PPUSH
10747: LD_STRING DG-Opt-8
10749: PPUSH
10750: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10754: LD_EXP 14
10758: PPUSH
10759: LD_STRING DG-Opt-9
10761: PPUSH
10762: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10766: LD_EXP 13
10770: PPUSH
10771: LD_STRING DH-Opt-10
10773: PPUSH
10774: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10778: LD_EXP 14
10782: PPUSH
10783: LD_STRING DG-Opt-11
10785: PPUSH
10786: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10790: LD_EXP 14
10794: PPUSH
10795: LD_STRING DG-Opt-12
10797: PPUSH
10798: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10802: LD_EXP 13
10806: PPUSH
10807: LD_STRING DH-Opt-13
10809: PPUSH
10810: CALL_OW 88
// DialogueOff ;
10814: CALL_OW 7
// end ;
10818: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10819: LD_INT 40
10821: PPUSH
10822: LD_INT 2
10824: PPUSH
10825: CALL_OW 321
10829: PUSH
10830: LD_INT 2
10832: EQUAL
10833: PUSH
10834: LD_EXP 16
10838: PPUSH
10839: CALL_OW 302
10843: AND
10844: IFFALSE 11094
10846: GO 10848
10848: DISABLE
// begin DialogueOn ;
10849: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10853: LD_EXP 16
10857: PPUSH
10858: LD_STRING DI-Roc-1
10860: PPUSH
10861: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10865: LD_EXP 13
10869: PPUSH
10870: LD_STRING DH-Roc-2
10872: PPUSH
10873: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10877: LD_EXP 16
10881: PPUSH
10882: LD_STRING DI-Roc-3
10884: PPUSH
10885: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10889: LD_EXP 16
10893: PPUSH
10894: LD_STRING DI-Roc-4
10896: PPUSH
10897: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10901: LD_EXP 18
10905: PPUSH
10906: LD_STRING DK-Roc-5
10908: PPUSH
10909: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10913: LD_EXP 18
10917: PPUSH
10918: LD_STRING DK-Roc-6
10920: PPUSH
10921: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10925: LD_EXP 14
10929: PPUSH
10930: LD_STRING DG-Roc-7
10932: PPUSH
10933: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10937: LD_EXP 14
10941: PPUSH
10942: LD_STRING DG-Roc-8
10944: PPUSH
10945: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10949: LD_EXP 20
10953: PPUSH
10954: CALL_OW 302
10958: PUSH
10959: LD_EXP 18
10963: PPUSH
10964: CALL_OW 302
10968: AND
10969: PUSH
10970: LD_EXP 14
10974: PPUSH
10975: CALL_OW 302
10979: AND
10980: IFFALSE 11090
// begin Say ( Markov , DMar-Roc-9 ) ;
10982: LD_EXP 20
10986: PPUSH
10987: LD_STRING DMar-Roc-9
10989: PPUSH
10990: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10994: LD_EXP 20
10998: PPUSH
10999: LD_STRING DMar-Roc-10
11001: PPUSH
11002: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11006: LD_EXP 18
11010: PPUSH
11011: LD_STRING DK-Roc-11
11013: PPUSH
11014: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11018: LD_EXP 20
11022: PPUSH
11023: LD_STRING DMar-Roc-12
11025: PPUSH
11026: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11030: LD_EXP 18
11034: PPUSH
11035: LD_STRING DK-Roc-13
11037: PPUSH
11038: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11042: LD_EXP 14
11046: PPUSH
11047: LD_STRING DG-Roc-14
11049: PPUSH
11050: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11054: LD_EXP 20
11058: PPUSH
11059: LD_STRING DMar-Roc-15
11061: PPUSH
11062: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11066: LD_EXP 20
11070: PPUSH
11071: LD_STRING DMar-Roc-16
11073: PPUSH
11074: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11078: LD_EXP 18
11082: PPUSH
11083: LD_STRING DK-Roc-17
11085: PPUSH
11086: CALL_OW 88
// end ; DialogueOff ;
11090: CALL_OW 7
// end ;
11094: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11095: LD_EXP 28
11099: PPUSH
11100: CALL_OW 256
11104: PUSH
11105: LD_INT 1000
11107: LESS
11108: PUSH
11109: LD_INT 22
11111: PUSH
11112: LD_INT 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 1
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PPUSH
11144: CALL_OW 69
11148: PUSH
11149: LD_INT 6
11151: LESS
11152: OR
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 1
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 21
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 69
11193: PUSH
11194: LD_INT 2
11196: LESS
11197: OR
11198: IFFALSE 12407
11200: GO 11202
11202: DISABLE
11203: LD_INT 0
11205: PPUSH
11206: PPUSH
11207: PPUSH
// begin usAttacksAllowed := false ;
11208: LD_ADDR_EXP 6
11212: PUSH
11213: LD_INT 0
11215: ST_TO_ADDR
// usSurrender := true ;
11216: LD_ADDR_EXP 7
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11224: LD_INT 1
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11240: LD_ADDR_VAR 0 1
11244: PUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 21
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 60
11267: PUSH
11268: EMPTY
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11295
// ComStop ( i ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL_OW 141
11293: GO 11281
11295: POP
11296: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11297: LD_ADDR_VAR 0 1
11301: PUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 2
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 3
11314: PUSH
11315: LD_INT 50
11317: PUSH
11318: EMPTY
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 21
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: PUSH
11345: FOR_IN
11346: IFFALSE 11362
// SetLives ( i , 251 ) ;
11348: LD_VAR 0 1
11352: PPUSH
11353: LD_INT 251
11355: PPUSH
11356: CALL_OW 234
11360: GO 11345
11362: POP
11363: POP
// InGameOn ;
11364: CALL_OW 8
// ComExit ( usCommander ) ;
11368: LD_EXP 28
11372: PPUSH
11373: CALL 53009 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11377: LD_EXP 28
11381: PPUSH
11382: LD_INT 81
11384: PPUSH
11385: LD_INT 143
11387: PPUSH
11388: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11392: LD_EXP 28
11396: PPUSH
11397: LD_INT 81
11399: PPUSH
11400: LD_INT 139
11402: PPUSH
11403: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11407: LD_INT 81
11409: PPUSH
11410: LD_INT 144
11412: PPUSH
11413: LD_INT 2
11415: PPUSH
11416: LD_INT 10
11418: NEG
11419: PPUSH
11420: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11424: LD_EXP 28
11428: PPUSH
11429: CALL_OW 87
// wait ( 0 0$2 ) ;
11433: LD_INT 70
11435: PPUSH
11436: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11440: LD_EXP 28
11444: PPUSH
11445: LD_STRING DCa-Surrender-1
11447: PPUSH
11448: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11452: LD_EXP 13
11456: PPUSH
11457: LD_STRING DH-Surrender-2
11459: PPUSH
11460: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11464: LD_EXP 13
11468: PPUSH
11469: CALL_OW 310
11473: PPUSH
11474: CALL_OW 247
11478: PUSH
11479: LD_INT 3
11481: EQUAL
11482: IFFALSE 11500
// begin ComExit ( Heike ) ;
11484: LD_EXP 13
11488: PPUSH
11489: CALL 53009 0 1
// wait ( 3 ) ;
11493: LD_INT 3
11495: PPUSH
11496: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11500: LD_EXP 13
11504: PPUSH
11505: LD_INT 82
11507: PPUSH
11508: LD_INT 133
11510: PPUSH
11511: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11515: LD_EXP 13
11519: PPUSH
11520: LD_EXP 28
11524: PPUSH
11525: CALL_OW 179
// wait ( 0 0$3 ) ;
11529: LD_INT 105
11531: PPUSH
11532: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11536: LD_EXP 13
11540: PPUSH
11541: LD_STRING DH-Surrender-3
11543: PPUSH
11544: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11548: LD_EXP 13
11552: PPUSH
11553: LD_STRING DH-Surrender-4
11555: PPUSH
11556: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11560: LD_INT 81
11562: PPUSH
11563: LD_INT 144
11565: PPUSH
11566: LD_INT 2
11568: PPUSH
11569: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11573: LD_INT 1
11575: PPUSH
11576: LD_INT 2
11578: PPUSH
11579: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11583: LD_ADDR_VAR 0 1
11587: PUSH
11588: LD_INT 22
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 23
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 54
11610: PUSH
11611: EMPTY
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: PUSH
11624: FOR_IN
11625: IFFALSE 11638
// ComExit ( i ) ;
11627: LD_VAR 0 1
11631: PPUSH
11632: CALL 53009 0 1
11636: GO 11624
11638: POP
11639: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11640: LD_ADDR_VAR 0 3
11644: PUSH
11645: LD_INT 22
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 25
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PPUSH
11669: CALL_OW 69
11673: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11674: LD_ADDR_VAR 0 2
11678: PUSH
11679: LD_INT 22
11681: PUSH
11682: LD_INT 1
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: LD_INT 50
11694: PUSH
11695: EMPTY
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ST_TO_ADDR
// if sci and hurts then
11711: LD_VAR 0 3
11715: PUSH
11716: LD_VAR 0 2
11720: AND
11721: IFFALSE 11783
// begin for i := 1 to hurts do
11723: LD_ADDR_VAR 0 1
11727: PUSH
11728: DOUBLE
11729: LD_INT 1
11731: DEC
11732: ST_TO_ADDR
11733: LD_VAR 0 2
11737: PUSH
11738: FOR_TO
11739: IFFALSE 11781
// if i <= sci then
11741: LD_VAR 0 1
11745: PUSH
11746: LD_VAR 0 3
11750: LESSEQUAL
11751: IFFALSE 11779
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11753: LD_VAR 0 3
11757: PUSH
11758: LD_VAR 0 1
11762: ARRAY
11763: PPUSH
11764: LD_VAR 0 2
11768: PUSH
11769: LD_VAR 0 1
11773: ARRAY
11774: PPUSH
11775: CALL_OW 188
11779: GO 11738
11781: POP
11782: POP
// end ; if IsOk ( Givi ) then
11783: LD_EXP 14
11787: PPUSH
11788: CALL_OW 302
11792: IFFALSE 11808
// Say ( Givi , DG-Surrender-5 ) else
11794: LD_EXP 14
11798: PPUSH
11799: LD_STRING DG-Surrender-5
11801: PPUSH
11802: CALL_OW 88
11806: GO 11820
// Say ( Heike , DH-Surrender-a-5 ) ;
11808: LD_EXP 13
11812: PPUSH
11813: LD_STRING DH-Surrender-a-5
11815: PPUSH
11816: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11820: LD_EXP 28
11824: PPUSH
11825: LD_STRING DCa-Surrender-6
11827: PPUSH
11828: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11832: LD_EXP 28
11836: PPUSH
11837: LD_STRING DCa-Surrender-7
11839: PPUSH
11840: CALL_OW 88
// if IsOk ( Givi ) then
11844: LD_EXP 14
11848: PPUSH
11849: CALL_OW 302
11853: IFFALSE 11869
// Say ( Givi , DG-Surrender-8 ) else
11855: LD_EXP 14
11859: PPUSH
11860: LD_STRING DG-Surrender-8
11862: PPUSH
11863: CALL_OW 88
11867: GO 11881
// Say ( Heike , DH-Surrender-a-8 ) ;
11869: LD_EXP 13
11873: PPUSH
11874: LD_STRING DH-Surrender-a-8
11876: PPUSH
11877: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11881: LD_EXP 28
11885: PPUSH
11886: LD_STRING DCa-Surrender-9
11888: PPUSH
11889: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11893: LD_EXP 13
11897: PPUSH
11898: LD_STRING DH-Surrender-10
11900: PPUSH
11901: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11905: LD_EXP 28
11909: PPUSH
11910: LD_STRING DCa-Surrender-11
11912: PPUSH
11913: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11917: LD_EXP 13
11921: PPUSH
11922: LD_STRING DH-Surrender-12
11924: PPUSH
11925: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11929: LD_EXP 28
11933: PPUSH
11934: LD_STRING DCa-Surrender-13
11936: PPUSH
11937: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11941: LD_EXP 28
11945: PPUSH
11946: LD_STRING DCa-Surrender-14
11948: PPUSH
11949: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11953: LD_EXP 28
11957: PPUSH
11958: LD_STRING DCa-Surrender-15
11960: PPUSH
11961: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11965: LD_EXP 28
11969: PPUSH
11970: LD_STRING DCa-Surrender-16
11972: PPUSH
11973: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11977: LD_EXP 18
11981: PPUSH
11982: LD_STRING DK-Surrender-17
11984: PPUSH
11985: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11989: LD_EXP 22
11993: PPUSH
11994: LD_STRING DO-Surrender-18
11996: PPUSH
11997: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12001: LD_EXP 22
12005: PPUSH
12006: LD_STRING DO-Surrender-19
12008: PPUSH
12009: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12013: LD_EXP 23
12017: PPUSH
12018: LD_STRING DKs-Surrender-20
12020: PPUSH
12021: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12025: LD_EXP 23
12029: PPUSH
12030: LD_STRING DKs-Surrender-21
12032: PPUSH
12033: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12037: LD_EXP 20
12041: PPUSH
12042: LD_STRING DMar-Surrender-22
12044: PPUSH
12045: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12049: LD_EXP 20
12053: PPUSH
12054: LD_STRING DMar-Surrender-23
12056: PPUSH
12057: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12061: LD_EXP 19
12065: PPUSH
12066: LD_STRING DS-Surrender-24
12068: PPUSH
12069: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12073: LD_EXP 24
12077: PPUSH
12078: LD_STRING DA-Surrender-25
12080: PPUSH
12081: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12085: LD_EXP 16
12089: PPUSH
12090: LD_STRING DI-Surrender-26
12092: PPUSH
12093: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12097: LD_EXP 17
12101: PPUSH
12102: LD_STRING DKam-Surrender-27
12104: PPUSH
12105: CALL_OW 88
// if IsOk ( Givi ) then
12109: LD_EXP 14
12113: PPUSH
12114: CALL_OW 302
12118: IFFALSE 12158
// begin Say ( Givi , DG-Surrender-28 ) ;
12120: LD_EXP 14
12124: PPUSH
12125: LD_STRING DG-Surrender-28
12127: PPUSH
12128: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12132: LD_EXP 14
12136: PPUSH
12137: LD_STRING DG-Surrender-29
12139: PPUSH
12140: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12144: LD_EXP 14
12148: PPUSH
12149: LD_STRING DG-Surrender-30
12151: PPUSH
12152: CALL_OW 88
// end else
12156: GO 12194
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12158: LD_EXP 13
12162: PPUSH
12163: LD_STRING DH-Surrender-a-28
12165: PPUSH
12166: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12170: LD_EXP 13
12174: PPUSH
12175: LD_STRING DH-Surrender-a-29
12177: PPUSH
12178: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12182: LD_EXP 13
12186: PPUSH
12187: LD_STRING DH-Surrender-a-30
12189: PPUSH
12190: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12194: CALL 14036 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12198: LD_INT 22
12200: PUSH
12201: LD_INT 3
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 69
12212: PPUSH
12213: LD_INT 176
12215: PUSH
12216: LD_INT 123
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: PPUSH
12226: CALL 55217 0 2
// if not IsEnvironment ( 190 , 150 ) then
12230: LD_INT 190
12232: PPUSH
12233: LD_INT 150
12235: PPUSH
12236: CALL_OW 351
12240: NOT
12241: IFFALSE 12260
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12243: LD_INT 190
12245: PPUSH
12246: LD_INT 150
12248: PPUSH
12249: LD_INT 2
12251: PPUSH
12252: LD_INT 8
12254: NEG
12255: PPUSH
12256: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12260: LD_INT 193
12262: PPUSH
12263: LD_INT 150
12265: PPUSH
12266: CALL_OW 84
// if IsOk ( Markov ) then
12270: LD_EXP 20
12274: PPUSH
12275: CALL_OW 302
12279: IFFALSE 12295
// Say ( Markov , DMar-Surrender-31 ) else
12281: LD_EXP 20
12285: PPUSH
12286: LD_STRING DMar-Surrender-31
12288: PPUSH
12289: CALL_OW 88
12293: GO 12352
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12295: LD_EXP 25
12299: PPUSH
12300: LD_INT 26
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PPUSH
12310: CALL_OW 72
12314: PPUSH
12315: LD_STRING DArm-Surrender-a-31
12317: PPUSH
12318: CALL 191 0 2
12322: NOT
12323: IFFALSE 12352
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12325: LD_EXP 25
12329: PPUSH
12330: LD_INT 26
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 72
12344: PPUSH
12345: LD_STRING DArf-Surrender-a-31
12347: PPUSH
12348: CALL 191 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12352: LD_EXP 13
12356: PPUSH
12357: LD_STRING DH-Surrender-32
12359: PPUSH
12360: CALL_OW 88
// InGameOff ;
12364: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12368: LD_STRING M2
12370: PPUSH
12371: CALL_OW 337
// wait ( 0 0$20 ) ;
12375: LD_INT 700
12377: PPUSH
12378: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12382: CALL 14398 0 0
// russianAttack := true ;
12386: LD_ADDR_EXP 8
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12394: LD_INT 190
12396: PPUSH
12397: LD_INT 150
12399: PPUSH
12400: LD_INT 2
12402: PPUSH
12403: CALL_OW 331
// end ;
12407: PPOPN 3
12409: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12410: LD_EXP 11
12414: PUSH
12415: LD_INT 2
12417: PPUSH
12418: CALL_OW 463
12422: NOT
12423: AND
12424: PUSH
12425: LD_EXP 13
12429: PPUSH
12430: CALL_OW 302
12434: AND
12435: PUSH
12436: LD_INT 22
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 30
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PPUSH
12460: CALL_OW 69
12464: AND
12465: PUSH
12466: LD_EXP 20
12470: PPUSH
12471: CALL_OW 302
12475: PUSH
12476: LD_EXP 25
12480: PPUSH
12481: LD_INT 50
12483: PUSH
12484: EMPTY
12485: LIST
12486: PPUSH
12487: CALL_OW 72
12491: OR
12492: AND
12493: IFFALSE 12721
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12502: LD_EXP 13
12506: PPUSH
12507: LD_STRING DH-Heavy-1
12509: PPUSH
12510: CALL_OW 88
// if IsOk ( Markov ) then
12514: LD_EXP 20
12518: PPUSH
12519: CALL_OW 302
12523: IFFALSE 12648
// begin Say ( Markov , DMar-Heavy-2 ) ;
12525: LD_EXP 20
12529: PPUSH
12530: LD_STRING DMar-Heavy-2
12532: PPUSH
12533: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12537: LD_INT 22
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 30
12549: PUSH
12550: LD_INT 3
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PPUSH
12561: CALL_OW 69
12565: PUSH
12566: LD_INT 1
12568: ARRAY
12569: PPUSH
12570: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12574: LD_EXP 20
12578: PPUSH
12579: LD_STRING DMar-Heavy-3
12581: PPUSH
12582: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12586: LD_EXP 20
12590: PPUSH
12591: LD_STRING DMar-Heavy-4
12593: PPUSH
12594: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12598: LD_EXP 20
12602: PPUSH
12603: LD_STRING DMar-Heavy-5
12605: PPUSH
12606: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12610: LD_EXP 20
12614: PPUSH
12615: LD_STRING DMar-Heavy-6
12617: PPUSH
12618: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12622: LD_EXP 13
12626: PPUSH
12627: LD_STRING DH-Heavy-7
12629: PPUSH
12630: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12634: LD_EXP 13
12638: PPUSH
12639: LD_STRING DH-Heavy-8
12641: PPUSH
12642: CALL_OW 88
// end else
12646: GO 12705
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12648: LD_EXP 25
12652: PPUSH
12653: LD_INT 26
12655: PUSH
12656: LD_INT 1
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 72
12667: PPUSH
12668: LD_STRING DArm-Heavy-a-2
12670: PPUSH
12671: CALL 191 0 2
12675: NOT
12676: IFFALSE 12705
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12678: LD_EXP 25
12682: PPUSH
12683: LD_INT 26
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 72
12697: PPUSH
12698: LD_STRING DArf-Heavy-a-2
12700: PPUSH
12701: CALL 191 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12705: LD_EXP 13
12709: PPUSH
12710: LD_STRING DH-Heavy-9
12712: PPUSH
12713: CALL_OW 88
// DialogueOff ;
12717: CALL_OW 7
// end ;
12721: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12722: LD_EXP 32
12726: PPUSH
12727: LD_INT 101
12729: PUSH
12730: LD_INT 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 72
12741: PUSH
12742: LD_EXP 13
12746: PPUSH
12747: CALL_OW 302
12751: AND
12752: IFFALSE 12895
12754: GO 12756
12756: DISABLE
// begin DialogueOn ;
12757: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12761: LD_EXP 32
12765: PPUSH
12766: LD_INT 101
12768: PUSH
12769: LD_INT 2
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 72
12780: PPUSH
12781: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12785: LD_EXP 13
12789: PPUSH
12790: LD_STRING DH-Flank-1
12792: PPUSH
12793: CALL_OW 88
// if IsOk ( Mike ) then
12797: LD_EXP 15
12801: PPUSH
12802: CALL_OW 302
12806: IFFALSE 12822
// Say ( Mike , DM-Flank-2 ) else
12808: LD_EXP 15
12812: PPUSH
12813: LD_STRING DM-Flank-2
12815: PPUSH
12816: CALL_OW 88
12820: GO 12879
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12822: LD_EXP 25
12826: PPUSH
12827: LD_INT 26
12829: PUSH
12830: LD_INT 1
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: PPUSH
12842: LD_STRING DArm-Flank-a-2
12844: PPUSH
12845: CALL 191 0 2
12849: NOT
12850: IFFALSE 12879
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12852: LD_EXP 25
12856: PPUSH
12857: LD_INT 26
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 72
12871: PPUSH
12872: LD_STRING DArm-Flank-a-2
12874: PPUSH
12875: CALL 191 0 2
// Say ( Heike , DH-Flank-3 ) ;
12879: LD_EXP 13
12883: PPUSH
12884: LD_STRING DH-Flank-3
12886: PPUSH
12887: CALL_OW 88
// DialogueOff ;
12891: CALL_OW 7
// end ;
12895: END
// every 0 0$3 trigger seeRemoteVehicle do
12896: LD_EXP 10
12900: IFFALSE 13124
12902: GO 12904
12904: DISABLE
// begin DialogueOn ;
12905: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12909: LD_EXP 13
12913: PPUSH
12914: LD_STRING DH-USRC-1
12916: PPUSH
12917: CALL_OW 88
// if IsOk ( Markov ) then
12921: LD_EXP 20
12925: PPUSH
12926: CALL_OW 302
12930: IFFALSE 12946
// Say ( Markov , DMar-USRC-2 ) else
12932: LD_EXP 20
12936: PPUSH
12937: LD_STRING DMar-USRC-2
12939: PPUSH
12940: CALL_OW 88
12944: GO 13003
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12946: LD_EXP 25
12950: PPUSH
12951: LD_INT 26
12953: PUSH
12954: LD_INT 1
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PPUSH
12961: CALL_OW 72
12965: PPUSH
12966: LD_STRING DArm-USRC-a-2
12968: PPUSH
12969: CALL 191 0 2
12973: NOT
12974: IFFALSE 13003
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12976: LD_EXP 25
12980: PPUSH
12981: LD_INT 26
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 72
12995: PPUSH
12996: LD_STRING DArf-USRC-a-2
12998: PPUSH
12999: CALL 191 0 2
// DialogueOff ;
13003: CALL_OW 7
// wait ( 0 0$10 ) ;
13007: LD_INT 350
13009: PPUSH
13010: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13014: LD_EXP 13
13018: PPUSH
13019: LD_STRING DH-USRC-3
13021: PPUSH
13022: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13026: LD_INT 35
13028: PPUSH
13029: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13033: LD_INT 2
13035: PPUSH
13036: LD_INT 22
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 30
13048: PUSH
13049: LD_INT 36
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 69
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: PPUSH
13069: CALL_OW 292
13073: IFFALSE 13026
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13075: LD_INT 22
13077: PUSH
13078: LD_INT 1
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: LD_INT 36
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 69
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PPUSH
13108: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13112: LD_EXP 13
13116: PPUSH
13117: LD_STRING DH-USRCFound-1
13119: PPUSH
13120: CALL_OW 88
// end ;
13124: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13125: LD_EXP 18
13129: PPUSH
13130: CALL_OW 256
13134: PUSH
13135: LD_INT 3
13137: LESS
13138: IFFALSE 13175
13140: GO 13142
13142: DISABLE
// begin DialogueOn ;
13143: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13147: LD_EXP 18
13151: PPUSH
13152: LD_STRING DK-Dead-1
13154: PPUSH
13155: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13159: LD_EXP 18
13163: PPUSH
13164: LD_STRING DK-Dead-2
13166: PPUSH
13167: CALL_OW 91
// DialogueOff ;
13171: CALL_OW 7
// end ;
13175: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13176: LD_INT 22
13178: PUSH
13179: LD_INT 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 2
13188: PUSH
13189: LD_INT 35
13191: PUSH
13192: LD_INT 28
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 34
13201: PUSH
13202: LD_INT 28
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: CALL_OW 69
13222: IFFALSE 13235
13224: GO 13226
13226: DISABLE
// hasRockets := true ;
13227: LD_ADDR_EXP 9
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
13235: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13236: LD_EXP 8
13240: PUSH
13241: LD_INT 22
13243: PUSH
13244: LD_INT 3
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PPUSH
13251: CALL_OW 69
13255: NOT
13256: AND
13257: IFFALSE 13867
13259: GO 13261
13261: DISABLE
// begin DialogueOn ;
13262: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13266: LD_EXP 13
13270: PPUSH
13271: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13275: LD_EXP 13
13279: PPUSH
13280: LD_STRING DH-End-1
13282: PPUSH
13283: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13287: LD_EXP 21
13291: PPUSH
13292: LD_STRING DShar-End-2
13294: PPUSH
13295: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13299: LD_EXP 18
13303: PPUSH
13304: LD_STRING DK-End-3
13306: PPUSH
13307: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13311: LD_EXP 13
13315: PPUSH
13316: LD_STRING DH-End-4
13318: PPUSH
13319: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13323: LD_EXP 21
13327: PPUSH
13328: LD_STRING DShar-End-5
13330: PPUSH
13331: CALL_OW 94
// if IsOk ( Markov ) then
13335: LD_EXP 20
13339: PPUSH
13340: CALL_OW 302
13344: IFFALSE 13358
// Say ( Kaia , DK-End-6 ) ;
13346: LD_EXP 18
13350: PPUSH
13351: LD_STRING DK-End-6
13353: PPUSH
13354: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13358: LD_EXP 18
13362: PPUSH
13363: LD_STRING DK-End-7
13365: PPUSH
13366: CALL_OW 88
// if IsOk ( Kaia ) then
13370: LD_EXP 18
13374: PPUSH
13375: CALL_OW 302
13379: IFFALSE 13417
// begin Say ( Givi , DG-End-8 ) ;
13381: LD_EXP 14
13385: PPUSH
13386: LD_STRING DG-End-8
13388: PPUSH
13389: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13393: LD_EXP 14
13397: PPUSH
13398: LD_STRING DG-End-9
13400: PPUSH
13401: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13405: LD_EXP 13
13409: PPUSH
13410: LD_STRING DH-End-10
13412: PPUSH
13413: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13417: LD_EXP 13
13421: PPUSH
13422: LD_STRING DH-End-11
13424: PPUSH
13425: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13429: LD_INT 7
13431: PPUSH
13432: LD_INT 2
13434: PPUSH
13435: CALL_OW 321
13439: PUSH
13440: LD_INT 2
13442: EQUAL
13443: IFFALSE 13457
// AddMedal ( med1 , 1 ) else
13445: LD_STRING med1
13447: PPUSH
13448: LD_INT 1
13450: PPUSH
13451: CALL_OW 101
13455: GO 13468
// AddMedal ( med1 , - 1 ) ;
13457: LD_STRING med1
13459: PPUSH
13460: LD_INT 1
13462: NEG
13463: PPUSH
13464: CALL_OW 101
// if hasRockets then
13468: LD_EXP 9
13472: IFFALSE 13486
// AddMedal ( med2 , 1 ) else
13474: LD_STRING med2
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 101
13484: GO 13497
// AddMedal ( med2 , - 1 ) ;
13486: LD_STRING med2
13488: PPUSH
13489: LD_INT 1
13491: NEG
13492: PPUSH
13493: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13497: LD_OWVAR 1
13501: PUSH
13502: LD_INT 105000
13504: PUSH
13505: LD_INT 94500
13507: PUSH
13508: LD_INT 84000
13510: PUSH
13511: LD_INT 73500
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_OWVAR 67
13524: ARRAY
13525: LESS
13526: IFFALSE 13540
// AddMedal ( med3 , 1 ) else
13528: LD_STRING med3
13530: PPUSH
13531: LD_INT 1
13533: PPUSH
13534: CALL_OW 101
13538: GO 13551
// AddMedal ( med3 , - 1 ) ;
13540: LD_STRING med3
13542: PPUSH
13543: LD_INT 1
13545: NEG
13546: PPUSH
13547: CALL_OW 101
// GiveMedals ( MAIN ) ;
13551: LD_STRING MAIN
13553: PPUSH
13554: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13558: LD_INT 22
13560: PUSH
13561: LD_INT 2
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 23
13570: PUSH
13571: LD_INT 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL_OW 69
13597: PPUSH
13598: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13602: LD_EXP 28
13606: PPUSH
13607: LD_STRING 07_UsCommander
13609: PPUSH
13610: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13614: LD_INT 22
13616: PUSH
13617: LD_INT 1
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 23
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 21
13636: PUSH
13637: LD_INT 1
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: CALL_OW 69
13653: PUSH
13654: LD_EXP 28
13658: DIFF
13659: PPUSH
13660: LD_STRING 07_Americans
13662: PPUSH
13663: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13667: LD_EXP 13
13671: PPUSH
13672: LD_STRING 07_Heike
13674: PPUSH
13675: CALL_OW 38
// if Aviradze then
13679: LD_EXP 24
13683: IFFALSE 13697
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13685: LD_EXP 24
13689: PPUSH
13690: LD_STRING 07_Aviradze
13692: PPUSH
13693: CALL_OW 38
// if Ibrahim then
13697: LD_EXP 16
13701: IFFALSE 13715
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13703: LD_EXP 16
13707: PPUSH
13708: LD_STRING 07_Ibrahim
13710: PPUSH
13711: CALL_OW 38
// if Kamil then
13715: LD_EXP 17
13719: IFFALSE 13733
// SaveCharacters ( Kamil , 07_Kamil ) ;
13721: LD_EXP 17
13725: PPUSH
13726: LD_STRING 07_Kamil
13728: PPUSH
13729: CALL_OW 38
// if Sophia then
13733: LD_EXP 19
13737: IFFALSE 13751
// SaveCharacters ( Sophia , 07_Sophia ) ;
13739: LD_EXP 19
13743: PPUSH
13744: LD_STRING 07_Sophia
13746: PPUSH
13747: CALL_OW 38
// if Kaia then
13751: LD_EXP 18
13755: IFFALSE 13769
// SaveCharacters ( Kaia , 07_Kaia ) ;
13757: LD_EXP 18
13761: PPUSH
13762: LD_STRING 07_Kaia
13764: PPUSH
13765: CALL_OW 38
// if Givi then
13769: LD_EXP 14
13773: IFFALSE 13787
// SaveCharacters ( Givi , 07_Givi ) ;
13775: LD_EXP 14
13779: PPUSH
13780: LD_STRING 07_Givi
13782: PPUSH
13783: CALL_OW 38
// if Mike then
13787: LD_EXP 15
13791: IFFALSE 13805
// SaveCharacters ( Mike , 07_Mike ) ;
13793: LD_EXP 15
13797: PPUSH
13798: LD_STRING 07_Mike
13800: PPUSH
13801: CALL_OW 38
// if Markov then
13805: LD_EXP 20
13809: IFFALSE 13823
// SaveCharacters ( Markov , 07_Markov ) ;
13811: LD_EXP 20
13815: PPUSH
13816: LD_STRING 07_Markov
13818: PPUSH
13819: CALL_OW 38
// if Kurt then
13823: LD_EXP 23
13827: IFFALSE 13841
// SaveCharacters ( Kurt , 07_Kurt ) ;
13829: LD_EXP 23
13833: PPUSH
13834: LD_STRING 07_Kurt
13836: PPUSH
13837: CALL_OW 38
// if heikeSecondSquad then
13841: LD_EXP 25
13845: IFFALSE 13859
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13847: LD_EXP 25
13851: PPUSH
13852: LD_STRING 07_others
13854: PPUSH
13855: CALL_OW 38
// YouWin ;
13859: CALL_OW 103
// DialogueOff ;
13863: CALL_OW 7
// end ; end_of_file
13867: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13868: LD_INT 7
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 287
13878: PUSH
13879: LD_INT 300
13881: PUSH
13882: LD_INT 150
13884: PUSH
13885: LD_INT 100
13887: PUSH
13888: LD_INT 80
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: PUSH
13897: LD_OWVAR 67
13901: ARRAY
13902: LESS
13903: IFFALSE 13930
13905: GO 13907
13907: DISABLE
// begin enable ;
13908: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 5
13914: PPUSH
13915: CALL_OW 12
13919: PPUSH
13920: LD_INT 7
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 55
// end ;
13930: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13931: LD_INT 8
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 287
13941: PUSH
13942: LD_INT 300
13944: PUSH
13945: LD_INT 250
13947: PUSH
13948: LD_INT 200
13950: PUSH
13951: LD_INT 180
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: PUSH
13960: LD_OWVAR 67
13964: ARRAY
13965: LESS
13966: IFFALSE 13993
13968: GO 13970
13970: DISABLE
// begin enable ;
13971: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13972: LD_INT 1
13974: PPUSH
13975: LD_INT 5
13977: PPUSH
13978: CALL_OW 12
13982: PPUSH
13983: LD_INT 8
13985: PPUSH
13986: LD_INT 1
13988: PPUSH
13989: CALL_OW 55
// end ;
13993: END
// every 0 0$40 trigger tick < 4 4$10 do
13994: LD_OWVAR 1
13998: PUSH
13999: LD_INT 8750
14001: LESS
14002: IFFALSE 14035
14004: GO 14006
14006: DISABLE
// begin enable ;
14007: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14008: LD_INT 1
14010: PPUSH
14011: LD_INT 5
14013: PPUSH
14014: CALL_OW 12
14018: PPUSH
14019: LD_INT 130
14021: PPUSH
14022: LD_INT 18
14024: PPUSH
14025: LD_INT 12
14027: PPUSH
14028: LD_INT 1
14030: PPUSH
14031: CALL_OW 56
// end ; end_of_file
14035: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14036: LD_INT 0
14038: PPUSH
14039: PPUSH
14040: PPUSH
14041: PPUSH
14042: PPUSH
// uc_side := 3 ;
14043: LD_ADDR_OWVAR 20
14047: PUSH
14048: LD_INT 3
14050: ST_TO_ADDR
// uc_nation := 3 ;
14051: LD_ADDR_OWVAR 21
14055: PUSH
14056: LD_INT 3
14058: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14059: LD_ADDR_VAR 0 3
14063: PUSH
14064: LD_INT 184
14066: PUSH
14067: LD_INT 144
14069: PUSH
14070: LD_INT 5
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 191
14080: PUSH
14081: LD_INT 147
14083: PUSH
14084: LD_INT 5
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 202
14094: PUSH
14095: LD_INT 151
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 210
14108: PUSH
14109: LD_INT 152
14111: PUSH
14112: LD_INT 4
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// for i := 1 to 4 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 4
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14309
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14142: LD_INT 24
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: LD_INT 43
14153: PUSH
14154: LD_INT 44
14156: PUSH
14157: LD_INT 46
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 3
14172: MOD
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: ARRAY
14178: PPUSH
14179: LD_INT 40
14181: PPUSH
14182: CALL 20227 0 5
// veh := CreateVehicle ;
14186: LD_ADDR_VAR 0 5
14190: PUSH
14191: CALL_OW 45
14195: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 3
14205: PUSH
14206: LD_VAR 0 2
14210: ARRAY
14211: PUSH
14212: LD_INT 3
14214: ARRAY
14215: PPUSH
14216: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14220: LD_VAR 0 5
14224: PPUSH
14225: LD_VAR 0 3
14229: PUSH
14230: LD_VAR 0 2
14234: ARRAY
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: PPUSH
14240: LD_VAR 0 3
14244: PUSH
14245: LD_VAR 0 2
14249: ARRAY
14250: PUSH
14251: LD_INT 2
14253: ARRAY
14254: PPUSH
14255: LD_INT 0
14257: PPUSH
14258: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14262: LD_INT 0
14264: PPUSH
14265: LD_INT 6
14267: PUSH
14268: LD_INT 7
14270: PUSH
14271: LD_INT 8
14273: PUSH
14274: LD_INT 8
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: LD_OWVAR 67
14287: ARRAY
14288: PPUSH
14289: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14293: CALL_OW 44
14297: PPUSH
14298: LD_VAR 0 5
14302: PPUSH
14303: CALL_OW 52
// end ;
14307: GO 14139
14309: POP
14310: POP
// for i := 1 to 4 do
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: DOUBLE
14317: LD_INT 1
14319: DEC
14320: ST_TO_ADDR
14321: LD_INT 4
14323: PUSH
14324: FOR_TO
14325: IFFALSE 14391
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14327: LD_INT 0
14329: PPUSH
14330: LD_INT 6
14332: PUSH
14333: LD_INT 7
14335: PUSH
14336: LD_INT 8
14338: PUSH
14339: LD_INT 8
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: LD_OWVAR 67
14352: ARRAY
14353: PPUSH
14354: CALL_OW 381
// un := CreateHuman ;
14358: LD_ADDR_VAR 0 4
14362: PUSH
14363: CALL_OW 44
14367: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14368: LD_VAR 0 4
14372: PPUSH
14373: LD_INT 185
14375: PPUSH
14376: LD_INT 145
14378: PPUSH
14379: LD_INT 6
14381: PPUSH
14382: LD_INT 0
14384: PPUSH
14385: CALL_OW 50
// end ;
14389: GO 14324
14391: POP
14392: POP
// end ;
14393: LD_VAR 0 1
14397: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14398: LD_INT 0
14400: PPUSH
14401: PPUSH
14402: PPUSH
// uc_side := 3 ;
14403: LD_ADDR_OWVAR 20
14407: PUSH
14408: LD_INT 3
14410: ST_TO_ADDR
// if Difficulty > 1 then
14411: LD_OWVAR 67
14415: PUSH
14416: LD_INT 1
14418: GREATER
14419: IFFALSE 14581
// begin uc_nation := 0 ;
14421: LD_ADDR_OWVAR 21
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14429: LD_ADDR_VAR 0 2
14433: PUSH
14434: DOUBLE
14435: LD_INT 1
14437: DEC
14438: ST_TO_ADDR
14439: LD_INT 4
14441: PUSH
14442: LD_INT 5
14444: PUSH
14445: LD_INT 6
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_OWVAR 67
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: ARRAY
14462: PUSH
14463: FOR_TO
14464: IFFALSE 14579
// begin hc_class := class_apeman_soldier ;
14466: LD_ADDR_OWVAR 28
14470: PUSH
14471: LD_INT 15
14473: ST_TO_ADDR
// hc_gallery :=  ;
14474: LD_ADDR_OWVAR 33
14478: PUSH
14479: LD_STRING 
14481: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14482: LD_ADDR_OWVAR 26
14486: PUSH
14487: LD_STRING Treci
14489: PUSH
14490: LD_STRING Ivan
14492: PUSH
14493: LD_STRING Yaromir
14495: PUSH
14496: LD_STRING Nadzieia
14498: PUSH
14499: LD_STRING Krasna
14501: PUSH
14502: LD_STRING Piaty
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 1
14515: PPUSH
14516: LD_INT 6
14518: PPUSH
14519: CALL_OW 12
14523: ARRAY
14524: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14525: LD_ADDR_OWVAR 31
14529: PUSH
14530: LD_INT 5
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: LD_INT 0
14538: PUSH
14539: LD_INT 0
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: ST_TO_ADDR
// hc_sex := sex_male ;
14548: LD_ADDR_OWVAR 27
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14556: CALL_OW 44
14560: PPUSH
14561: LD_INT 178
14563: PPUSH
14564: LD_INT 148
14566: PPUSH
14567: LD_INT 6
14569: PPUSH
14570: LD_INT 0
14572: PPUSH
14573: CALL_OW 50
// end ;
14577: GO 14463
14579: POP
14580: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_INT 4
14593: PUSH
14594: LD_INT 6
14596: PUSH
14597: LD_INT 7
14599: PUSH
14600: LD_INT 9
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: PUSH
14609: LD_OWVAR 67
14613: ARRAY
14614: PUSH
14615: FOR_TO
14616: IFFALSE 14783
// begin uc_nation := 3 ;
14618: LD_ADDR_OWVAR 21
14622: PUSH
14623: LD_INT 3
14625: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14626: LD_INT 22
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: LD_INT 45
14637: PUSH
14638: LD_INT 43
14640: PUSH
14641: LD_INT 44
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: LD_VAR 0 2
14653: PUSH
14654: LD_INT 3
14656: MOD
14657: PUSH
14658: LD_INT 1
14660: PLUS
14661: ARRAY
14662: PPUSH
14663: LD_INT 44
14665: PPUSH
14666: CALL 20227 0 5
// veh := CreateVehicle ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: CALL_OW 45
14679: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14680: LD_VAR 0 3
14684: PPUSH
14685: LD_INT 4
14687: PPUSH
14688: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14692: LD_VAR 0 3
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: LD_INT 0
14702: PPUSH
14703: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14707: LD_INT 0
14709: PPUSH
14710: LD_INT 6
14712: PUSH
14713: LD_INT 7
14715: PUSH
14716: LD_INT 8
14718: PUSH
14719: LD_INT 8
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: PUSH
14728: LD_OWVAR 67
14732: ARRAY
14733: PPUSH
14734: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14738: CALL_OW 44
14742: PPUSH
14743: LD_VAR 0 3
14747: PPUSH
14748: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14752: LD_VAR 0 3
14756: PPUSH
14757: LD_INT 178
14759: PUSH
14760: LD_INT 137
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: PPUSH
14770: CALL 55217 0 2
// wait ( 0 0$2 ) ;
14774: LD_INT 70
14776: PPUSH
14777: CALL_OW 67
// end ;
14781: GO 14615
14783: POP
14784: POP
// end ;
14785: LD_VAR 0 1
14789: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14790: LD_INT 22
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 32
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: IFFALSE 14906
14820: GO 14822
14822: DISABLE
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
// begin enable ;
14827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 32
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: ST_TO_ADDR
// for i in tmp do
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: LD_VAR 0 2
14871: PUSH
14872: FOR_IN
14873: IFFALSE 14904
// if GetFuel ( i ) < 3 then
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 261
14884: PUSH
14885: LD_INT 3
14887: LESS
14888: IFFALSE 14902
// SetFuel ( i , 3 ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: LD_INT 3
14897: PPUSH
14898: CALL_OW 240
14902: GO 14872
14904: POP
14905: POP
// end ;
14906: PPOPN 2
14908: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14909: LD_EXP 8
14913: PUSH
14914: LD_INT 22
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 21
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PPUSH
14938: CALL_OW 69
14942: AND
14943: IFFALSE 15207
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
14951: PPUSH
14952: PPUSH
// begin enable ;
14953: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14954: LD_ADDR_VAR 0 2
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 25
14971: PUSH
14972: LD_INT 3
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 3
14981: PUSH
14982: LD_INT 55
14984: PUSH
14985: EMPTY
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: ST_TO_ADDR
// if mech then
15002: LD_VAR 0 2
15006: IFFALSE 15076
// for i in mech do
15008: LD_ADDR_VAR 0 1
15012: PUSH
15013: LD_VAR 0 2
15017: PUSH
15018: FOR_IN
15019: IFFALSE 15074
// begin if IsInArea ( i , escapeArea ) then
15021: LD_VAR 0 1
15025: PPUSH
15026: LD_INT 13
15028: PPUSH
15029: CALL_OW 308
15033: IFFALSE 15046
// RemoveUnit ( i ) else
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 64
15044: GO 15072
// if IsOk ( i ) then
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 302
15055: IFFALSE 15072
// ComMoveXY ( i , 196 , 155 ) ;
15057: LD_VAR 0 1
15061: PPUSH
15062: LD_INT 196
15064: PPUSH
15065: LD_INT 155
15067: PPUSH
15068: CALL_OW 111
// end ;
15072: GO 15018
15074: POP
15075: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15076: LD_ADDR_VAR 0 3
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 3
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 25
15096: PUSH
15097: LD_INT 1
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 25
15106: PUSH
15107: LD_INT 15
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 21
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 50
15132: PUSH
15133: EMPTY
15134: LIST
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: PPUSH
15141: CALL_OW 69
15145: ST_TO_ADDR
// if tmp then
15146: LD_VAR 0 3
15150: IFFALSE 15207
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15152: LD_VAR 0 3
15156: PPUSH
15157: LD_INT 171
15159: PUSH
15160: LD_INT 106
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 145
15169: PUSH
15170: LD_INT 69
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 132
15179: PUSH
15180: LD_INT 38
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 126
15189: PUSH
15190: LD_INT 15
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL 55217 0 2
// end ; end_of_file
15207: PPOPN 3
15209: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15210: LD_INT 0
15212: PPUSH
15213: PPUSH
// if exist_mode then
15214: LD_VAR 0 2
15218: IFFALSE 15243
// unit := CreateCharacter ( prefix & ident ) else
15220: LD_ADDR_VAR 0 5
15224: PUSH
15225: LD_VAR 0 3
15229: PUSH
15230: LD_VAR 0 1
15234: STR
15235: PPUSH
15236: CALL_OW 34
15240: ST_TO_ADDR
15241: GO 15258
// unit := NewCharacter ( ident ) ;
15243: LD_ADDR_VAR 0 5
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 25
15257: ST_TO_ADDR
// result := unit ;
15258: LD_ADDR_VAR 0 4
15262: PUSH
15263: LD_VAR 0 5
15267: ST_TO_ADDR
// end ;
15268: LD_VAR 0 4
15272: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15273: LD_INT 0
15275: PPUSH
15276: PPUSH
// if not side or not nation then
15277: LD_VAR 0 1
15281: NOT
15282: PUSH
15283: LD_VAR 0 2
15287: NOT
15288: OR
15289: IFFALSE 15293
// exit ;
15291: GO 16061
// case nation of nation_american :
15293: LD_VAR 0 2
15297: PUSH
15298: LD_INT 1
15300: DOUBLE
15301: EQUAL
15302: IFTRUE 15306
15304: GO 15520
15306: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15307: LD_ADDR_VAR 0 4
15311: PUSH
15312: LD_INT 35
15314: PUSH
15315: LD_INT 45
15317: PUSH
15318: LD_INT 46
15320: PUSH
15321: LD_INT 47
15323: PUSH
15324: LD_INT 82
15326: PUSH
15327: LD_INT 83
15329: PUSH
15330: LD_INT 84
15332: PUSH
15333: LD_INT 85
15335: PUSH
15336: LD_INT 86
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: LD_INT 2
15344: PUSH
15345: LD_INT 6
15347: PUSH
15348: LD_INT 15
15350: PUSH
15351: LD_INT 16
15353: PUSH
15354: LD_INT 7
15356: PUSH
15357: LD_INT 12
15359: PUSH
15360: LD_INT 13
15362: PUSH
15363: LD_INT 10
15365: PUSH
15366: LD_INT 14
15368: PUSH
15369: LD_INT 20
15371: PUSH
15372: LD_INT 21
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 32
15383: PUSH
15384: LD_INT 27
15386: PUSH
15387: LD_INT 36
15389: PUSH
15390: LD_INT 69
15392: PUSH
15393: LD_INT 39
15395: PUSH
15396: LD_INT 34
15398: PUSH
15399: LD_INT 40
15401: PUSH
15402: LD_INT 48
15404: PUSH
15405: LD_INT 49
15407: PUSH
15408: LD_INT 50
15410: PUSH
15411: LD_INT 51
15413: PUSH
15414: LD_INT 52
15416: PUSH
15417: LD_INT 53
15419: PUSH
15420: LD_INT 54
15422: PUSH
15423: LD_INT 55
15425: PUSH
15426: LD_INT 56
15428: PUSH
15429: LD_INT 57
15431: PUSH
15432: LD_INT 58
15434: PUSH
15435: LD_INT 59
15437: PUSH
15438: LD_INT 60
15440: PUSH
15441: LD_INT 61
15443: PUSH
15444: LD_INT 62
15446: PUSH
15447: LD_INT 80
15449: PUSH
15450: LD_INT 82
15452: PUSH
15453: LD_INT 83
15455: PUSH
15456: LD_INT 84
15458: PUSH
15459: LD_INT 85
15461: PUSH
15462: LD_INT 86
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: ST_TO_ADDR
15518: GO 15985
15520: LD_INT 2
15522: DOUBLE
15523: EQUAL
15524: IFTRUE 15528
15526: GO 15754
15528: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15529: LD_ADDR_VAR 0 4
15533: PUSH
15534: LD_INT 35
15536: PUSH
15537: LD_INT 45
15539: PUSH
15540: LD_INT 46
15542: PUSH
15543: LD_INT 47
15545: PUSH
15546: LD_INT 82
15548: PUSH
15549: LD_INT 83
15551: PUSH
15552: LD_INT 84
15554: PUSH
15555: LD_INT 85
15557: PUSH
15558: LD_INT 87
15560: PUSH
15561: LD_INT 70
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 11
15569: PUSH
15570: LD_INT 3
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: LD_INT 5
15578: PUSH
15579: LD_INT 6
15581: PUSH
15582: LD_INT 15
15584: PUSH
15585: LD_INT 18
15587: PUSH
15588: LD_INT 7
15590: PUSH
15591: LD_INT 17
15593: PUSH
15594: LD_INT 8
15596: PUSH
15597: LD_INT 20
15599: PUSH
15600: LD_INT 21
15602: PUSH
15603: LD_INT 22
15605: PUSH
15606: LD_INT 72
15608: PUSH
15609: LD_INT 26
15611: PUSH
15612: LD_INT 69
15614: PUSH
15615: LD_INT 39
15617: PUSH
15618: LD_INT 40
15620: PUSH
15621: LD_INT 41
15623: PUSH
15624: LD_INT 42
15626: PUSH
15627: LD_INT 43
15629: PUSH
15630: LD_INT 48
15632: PUSH
15633: LD_INT 49
15635: PUSH
15636: LD_INT 50
15638: PUSH
15639: LD_INT 51
15641: PUSH
15642: LD_INT 52
15644: PUSH
15645: LD_INT 53
15647: PUSH
15648: LD_INT 54
15650: PUSH
15651: LD_INT 55
15653: PUSH
15654: LD_INT 56
15656: PUSH
15657: LD_INT 60
15659: PUSH
15660: LD_INT 61
15662: PUSH
15663: LD_INT 62
15665: PUSH
15666: LD_INT 66
15668: PUSH
15669: LD_INT 67
15671: PUSH
15672: LD_INT 68
15674: PUSH
15675: LD_INT 81
15677: PUSH
15678: LD_INT 82
15680: PUSH
15681: LD_INT 83
15683: PUSH
15684: LD_INT 84
15686: PUSH
15687: LD_INT 85
15689: PUSH
15690: LD_INT 87
15692: PUSH
15693: LD_INT 88
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: ST_TO_ADDR
15752: GO 15985
15754: LD_INT 3
15756: DOUBLE
15757: EQUAL
15758: IFTRUE 15762
15760: GO 15984
15762: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15763: LD_ADDR_VAR 0 4
15767: PUSH
15768: LD_INT 46
15770: PUSH
15771: LD_INT 47
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: LD_INT 2
15779: PUSH
15780: LD_INT 82
15782: PUSH
15783: LD_INT 83
15785: PUSH
15786: LD_INT 84
15788: PUSH
15789: LD_INT 85
15791: PUSH
15792: LD_INT 86
15794: PUSH
15795: LD_INT 11
15797: PUSH
15798: LD_INT 9
15800: PUSH
15801: LD_INT 20
15803: PUSH
15804: LD_INT 19
15806: PUSH
15807: LD_INT 21
15809: PUSH
15810: LD_INT 24
15812: PUSH
15813: LD_INT 22
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 28
15821: PUSH
15822: LD_INT 29
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: LD_INT 31
15830: PUSH
15831: LD_INT 37
15833: PUSH
15834: LD_INT 38
15836: PUSH
15837: LD_INT 32
15839: PUSH
15840: LD_INT 27
15842: PUSH
15843: LD_INT 33
15845: PUSH
15846: LD_INT 69
15848: PUSH
15849: LD_INT 39
15851: PUSH
15852: LD_INT 34
15854: PUSH
15855: LD_INT 40
15857: PUSH
15858: LD_INT 71
15860: PUSH
15861: LD_INT 23
15863: PUSH
15864: LD_INT 44
15866: PUSH
15867: LD_INT 48
15869: PUSH
15870: LD_INT 49
15872: PUSH
15873: LD_INT 50
15875: PUSH
15876: LD_INT 51
15878: PUSH
15879: LD_INT 52
15881: PUSH
15882: LD_INT 53
15884: PUSH
15885: LD_INT 54
15887: PUSH
15888: LD_INT 55
15890: PUSH
15891: LD_INT 56
15893: PUSH
15894: LD_INT 57
15896: PUSH
15897: LD_INT 58
15899: PUSH
15900: LD_INT 59
15902: PUSH
15903: LD_INT 63
15905: PUSH
15906: LD_INT 64
15908: PUSH
15909: LD_INT 65
15911: PUSH
15912: LD_INT 82
15914: PUSH
15915: LD_INT 83
15917: PUSH
15918: LD_INT 84
15920: PUSH
15921: LD_INT 85
15923: PUSH
15924: LD_INT 86
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: ST_TO_ADDR
15982: GO 15985
15984: POP
// if state > - 1 and state < 3 then
15985: LD_VAR 0 3
15989: PUSH
15990: LD_INT 1
15992: NEG
15993: GREATER
15994: PUSH
15995: LD_VAR 0 3
15999: PUSH
16000: LD_INT 3
16002: LESS
16003: AND
16004: IFFALSE 16061
// for i in result do
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_VAR 0 4
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16059
// if GetTech ( i , side ) <> state then
16019: LD_VAR 0 5
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 321
16033: PUSH
16034: LD_VAR 0 3
16038: NONEQUAL
16039: IFFALSE 16057
// result := result diff i ;
16041: LD_ADDR_VAR 0 4
16045: PUSH
16046: LD_VAR 0 4
16050: PUSH
16051: LD_VAR 0 5
16055: DIFF
16056: ST_TO_ADDR
16057: GO 16016
16059: POP
16060: POP
// end ;
16061: LD_VAR 0 4
16065: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16066: LD_INT 0
16068: PPUSH
16069: PPUSH
16070: PPUSH
// result := true ;
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_INT 1
16078: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16079: LD_ADDR_VAR 0 5
16083: PUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 480
16093: ST_TO_ADDR
// if not tmp then
16094: LD_VAR 0 5
16098: NOT
16099: IFFALSE 16103
// exit ;
16101: GO 16152
// for i in tmp do
16103: LD_ADDR_VAR 0 4
16107: PUSH
16108: LD_VAR 0 5
16112: PUSH
16113: FOR_IN
16114: IFFALSE 16150
// if GetTech ( i , side ) <> state_researched then
16116: LD_VAR 0 4
16120: PPUSH
16121: LD_VAR 0 1
16125: PPUSH
16126: CALL_OW 321
16130: PUSH
16131: LD_INT 2
16133: NONEQUAL
16134: IFFALSE 16148
// begin result := false ;
16136: LD_ADDR_VAR 0 3
16140: PUSH
16141: LD_INT 0
16143: ST_TO_ADDR
// exit ;
16144: POP
16145: POP
16146: GO 16152
// end ;
16148: GO 16113
16150: POP
16151: POP
// end ;
16152: LD_VAR 0 3
16156: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
16165: PPUSH
16166: PPUSH
16167: PPUSH
16168: PPUSH
16169: PPUSH
16170: PPUSH
16171: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16172: LD_VAR 0 1
16176: NOT
16177: PUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 257
16187: PUSH
16188: LD_INT 9
16190: NONEQUAL
16191: OR
16192: IFFALSE 16196
// exit ;
16194: GO 16769
// side := GetSide ( unit ) ;
16196: LD_ADDR_VAR 0 9
16200: PUSH
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 255
16210: ST_TO_ADDR
// tech_space := tech_spacanom ;
16211: LD_ADDR_VAR 0 12
16215: PUSH
16216: LD_INT 29
16218: ST_TO_ADDR
// tech_time := tech_taurad ;
16219: LD_ADDR_VAR 0 13
16223: PUSH
16224: LD_INT 28
16226: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16227: LD_ADDR_VAR 0 11
16231: PUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 310
16241: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16242: LD_VAR 0 11
16246: PPUSH
16247: CALL_OW 247
16251: PUSH
16252: LD_INT 2
16254: EQUAL
16255: IFFALSE 16259
// exit ;
16257: GO 16769
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16259: LD_ADDR_VAR 0 8
16263: PUSH
16264: LD_INT 81
16266: PUSH
16267: LD_VAR 0 9
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 3
16278: PUSH
16279: LD_INT 21
16281: PUSH
16282: LD_INT 3
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PPUSH
16297: CALL_OW 69
16301: ST_TO_ADDR
// if not tmp then
16302: LD_VAR 0 8
16306: NOT
16307: IFFALSE 16311
// exit ;
16309: GO 16769
// if in_unit then
16311: LD_VAR 0 11
16315: IFFALSE 16339
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16317: LD_ADDR_VAR 0 10
16321: PUSH
16322: LD_VAR 0 8
16326: PPUSH
16327: LD_VAR 0 11
16331: PPUSH
16332: CALL_OW 74
16336: ST_TO_ADDR
16337: GO 16359
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16339: LD_ADDR_VAR 0 10
16343: PUSH
16344: LD_VAR 0 8
16348: PPUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 74
16358: ST_TO_ADDR
// if not enemy then
16359: LD_VAR 0 10
16363: NOT
16364: IFFALSE 16368
// exit ;
16366: GO 16769
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16368: LD_VAR 0 11
16372: PUSH
16373: LD_VAR 0 11
16377: PPUSH
16378: LD_VAR 0 10
16382: PPUSH
16383: CALL_OW 296
16387: PUSH
16388: LD_INT 13
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_VAR 0 10
16402: PPUSH
16403: CALL_OW 296
16407: PUSH
16408: LD_INT 12
16410: GREATER
16411: OR
16412: IFFALSE 16416
// exit ;
16414: GO 16769
// missile := [ 1 ] ;
16416: LD_ADDR_VAR 0 14
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16427: LD_VAR 0 9
16431: PPUSH
16432: LD_VAR 0 12
16436: PPUSH
16437: CALL_OW 325
16441: IFFALSE 16470
// missile := Replace ( missile , missile + 1 , 2 ) ;
16443: LD_ADDR_VAR 0 14
16447: PUSH
16448: LD_VAR 0 14
16452: PPUSH
16453: LD_VAR 0 14
16457: PUSH
16458: LD_INT 1
16460: PLUS
16461: PPUSH
16462: LD_INT 2
16464: PPUSH
16465: CALL_OW 1
16469: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16470: LD_VAR 0 9
16474: PPUSH
16475: LD_VAR 0 13
16479: PPUSH
16480: CALL_OW 325
16484: PUSH
16485: LD_VAR 0 10
16489: PPUSH
16490: CALL_OW 255
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 325
16504: NOT
16505: AND
16506: IFFALSE 16535
// missile := Replace ( missile , missile + 1 , 3 ) ;
16508: LD_ADDR_VAR 0 14
16512: PUSH
16513: LD_VAR 0 14
16517: PPUSH
16518: LD_VAR 0 14
16522: PUSH
16523: LD_INT 1
16525: PLUS
16526: PPUSH
16527: LD_INT 3
16529: PPUSH
16530: CALL_OW 1
16534: ST_TO_ADDR
// if missile < 2 then
16535: LD_VAR 0 14
16539: PUSH
16540: LD_INT 2
16542: LESS
16543: IFFALSE 16547
// exit ;
16545: GO 16769
// x := GetX ( enemy ) ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_VAR 0 10
16556: PPUSH
16557: CALL_OW 250
16561: ST_TO_ADDR
// y := GetY ( enemy ) ;
16562: LD_ADDR_VAR 0 5
16566: PUSH
16567: LD_VAR 0 10
16571: PPUSH
16572: CALL_OW 251
16576: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16577: LD_ADDR_VAR 0 6
16581: PUSH
16582: LD_VAR 0 4
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 12
16598: PLUS
16599: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16600: LD_ADDR_VAR 0 7
16604: PUSH
16605: LD_VAR 0 5
16609: PUSH
16610: LD_INT 1
16612: NEG
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 12
16621: PLUS
16622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16623: LD_VAR 0 6
16627: PPUSH
16628: LD_VAR 0 7
16632: PPUSH
16633: CALL_OW 488
16637: NOT
16638: IFFALSE 16660
// begin _x := x ;
16640: LD_ADDR_VAR 0 6
16644: PUSH
16645: LD_VAR 0 4
16649: ST_TO_ADDR
// _y := y ;
16650: LD_ADDR_VAR 0 7
16654: PUSH
16655: LD_VAR 0 5
16659: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_INT 1
16667: PPUSH
16668: LD_VAR 0 14
16672: PPUSH
16673: CALL_OW 12
16677: ST_TO_ADDR
// case i of 1 :
16678: LD_VAR 0 3
16682: PUSH
16683: LD_INT 1
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16708
16691: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_VAR 0 10
16701: PPUSH
16702: CALL_OW 115
16706: GO 16769
16708: LD_INT 2
16710: DOUBLE
16711: EQUAL
16712: IFTRUE 16716
16714: GO 16738
16716: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_VAR 0 6
16726: PPUSH
16727: LD_VAR 0 7
16731: PPUSH
16732: CALL_OW 153
16736: GO 16769
16738: LD_INT 3
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16768
16746: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16747: LD_VAR 0 1
16751: PPUSH
16752: LD_VAR 0 6
16756: PPUSH
16757: LD_VAR 0 7
16761: PPUSH
16762: CALL_OW 154
16766: GO 16769
16768: POP
// end ;
16769: LD_VAR 0 2
16773: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16774: LD_INT 0
16776: PPUSH
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
// if not unit or not building then
16782: LD_VAR 0 1
16786: NOT
16787: PUSH
16788: LD_VAR 0 2
16792: NOT
16793: OR
16794: IFFALSE 16798
// exit ;
16796: GO 16956
// x := GetX ( building ) ;
16798: LD_ADDR_VAR 0 5
16802: PUSH
16803: LD_VAR 0 2
16807: PPUSH
16808: CALL_OW 250
16812: ST_TO_ADDR
// y := GetY ( building ) ;
16813: LD_ADDR_VAR 0 6
16817: PUSH
16818: LD_VAR 0 2
16822: PPUSH
16823: CALL_OW 251
16827: ST_TO_ADDR
// for i = 0 to 5 do
16828: LD_ADDR_VAR 0 4
16832: PUSH
16833: DOUBLE
16834: LD_INT 0
16836: DEC
16837: ST_TO_ADDR
16838: LD_INT 5
16840: PUSH
16841: FOR_TO
16842: IFFALSE 16954
// begin _x := ShiftX ( x , i , 3 ) ;
16844: LD_ADDR_VAR 0 7
16848: PUSH
16849: LD_VAR 0 5
16853: PPUSH
16854: LD_VAR 0 4
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL_OW 272
16866: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16867: LD_ADDR_VAR 0 8
16871: PUSH
16872: LD_VAR 0 6
16876: PPUSH
16877: LD_VAR 0 4
16881: PPUSH
16882: LD_INT 3
16884: PPUSH
16885: CALL_OW 273
16889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16890: LD_VAR 0 7
16894: PPUSH
16895: LD_VAR 0 8
16899: PPUSH
16900: CALL_OW 488
16904: NOT
16905: IFFALSE 16909
// continue ;
16907: GO 16841
// if HexInfo ( _x , _y ) = 0 then
16909: LD_VAR 0 7
16913: PPUSH
16914: LD_VAR 0 8
16918: PPUSH
16919: CALL_OW 428
16923: PUSH
16924: LD_INT 0
16926: EQUAL
16927: IFFALSE 16952
// begin ComMoveXY ( unit , _x , _y ) ;
16929: LD_VAR 0 1
16933: PPUSH
16934: LD_VAR 0 7
16938: PPUSH
16939: LD_VAR 0 8
16943: PPUSH
16944: CALL_OW 111
// exit ;
16948: POP
16949: POP
16950: GO 16956
// end ; end ;
16952: GO 16841
16954: POP
16955: POP
// end ;
16956: LD_VAR 0 3
16960: RET
// export function ScanBase ( side , base_area ) ; begin
16961: LD_INT 0
16963: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_VAR 0 2
16973: PPUSH
16974: LD_INT 81
16976: PUSH
16977: LD_VAR 0 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PPUSH
16986: CALL_OW 70
16990: ST_TO_ADDR
// end ;
16991: LD_VAR 0 3
16995: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
17001: PPUSH
// result := false ;
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_INT 0
17009: ST_TO_ADDR
// side := GetSide ( unit ) ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 255
17024: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17025: LD_ADDR_VAR 0 4
17029: PUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: CALL_OW 248
17039: ST_TO_ADDR
// case nat of 1 :
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 1
17047: DOUBLE
17048: EQUAL
17049: IFTRUE 17053
17051: GO 17064
17053: POP
// tech := tech_lassight ; 2 :
17054: LD_ADDR_VAR 0 5
17058: PUSH
17059: LD_INT 12
17061: ST_TO_ADDR
17062: GO 17103
17064: LD_INT 2
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17083
17072: POP
// tech := tech_mortar ; 3 :
17073: LD_ADDR_VAR 0 5
17077: PUSH
17078: LD_INT 41
17080: ST_TO_ADDR
17081: GO 17103
17083: LD_INT 3
17085: DOUBLE
17086: EQUAL
17087: IFTRUE 17091
17089: GO 17102
17091: POP
// tech := tech_bazooka ; end ;
17092: LD_ADDR_VAR 0 5
17096: PUSH
17097: LD_INT 44
17099: ST_TO_ADDR
17100: GO 17103
17102: POP
// if Researched ( side , tech ) then
17103: LD_VAR 0 3
17107: PPUSH
17108: LD_VAR 0 5
17112: PPUSH
17113: CALL_OW 325
17117: IFFALSE 17144
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_INT 5
17126: PUSH
17127: LD_INT 8
17129: PUSH
17130: LD_INT 9
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_VAR 0 4
17142: ARRAY
17143: ST_TO_ADDR
// end ;
17144: LD_VAR 0 2
17148: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17149: LD_INT 0
17151: PPUSH
17152: PPUSH
17153: PPUSH
// if not mines then
17154: LD_VAR 0 2
17158: NOT
17159: IFFALSE 17163
// exit ;
17161: GO 17307
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17163: LD_ADDR_VAR 0 5
17167: PUSH
17168: LD_INT 81
17170: PUSH
17171: LD_VAR 0 1
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: LD_INT 21
17185: PUSH
17186: LD_INT 3
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PPUSH
17201: CALL_OW 69
17205: ST_TO_ADDR
// for i in mines do
17206: LD_ADDR_VAR 0 4
17210: PUSH
17211: LD_VAR 0 2
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17305
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17219: LD_VAR 0 4
17223: PUSH
17224: LD_INT 1
17226: ARRAY
17227: PPUSH
17228: LD_VAR 0 4
17232: PUSH
17233: LD_INT 2
17235: ARRAY
17236: PPUSH
17237: CALL_OW 458
17241: NOT
17242: IFFALSE 17246
// continue ;
17244: GO 17216
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17246: LD_VAR 0 4
17250: PUSH
17251: LD_INT 1
17253: ARRAY
17254: PPUSH
17255: LD_VAR 0 4
17259: PUSH
17260: LD_INT 2
17262: ARRAY
17263: PPUSH
17264: CALL_OW 428
17268: PUSH
17269: LD_VAR 0 5
17273: IN
17274: IFFALSE 17303
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17276: LD_VAR 0 4
17280: PUSH
17281: LD_INT 1
17283: ARRAY
17284: PPUSH
17285: LD_VAR 0 4
17289: PUSH
17290: LD_INT 2
17292: ARRAY
17293: PPUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: CALL_OW 456
// end ;
17303: GO 17216
17305: POP
17306: POP
// end ;
17307: LD_VAR 0 3
17311: RET
// export function Count ( array ) ; var i ; begin
17312: LD_INT 0
17314: PPUSH
17315: PPUSH
// result := 0 ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: LD_INT 0
17323: ST_TO_ADDR
// for i in array do
17324: LD_ADDR_VAR 0 3
17328: PUSH
17329: LD_VAR 0 1
17333: PUSH
17334: FOR_IN
17335: IFFALSE 17359
// if i then
17337: LD_VAR 0 3
17341: IFFALSE 17357
// result := result + 1 ;
17343: LD_ADDR_VAR 0 2
17347: PUSH
17348: LD_VAR 0 2
17352: PUSH
17353: LD_INT 1
17355: PLUS
17356: ST_TO_ADDR
17357: GO 17334
17359: POP
17360: POP
// end ;
17361: LD_VAR 0 2
17365: RET
// export function IsEmpty ( building ) ; begin
17366: LD_INT 0
17368: PPUSH
// if not building then
17369: LD_VAR 0 1
17373: NOT
17374: IFFALSE 17378
// exit ;
17376: GO 17421
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17378: LD_ADDR_VAR 0 2
17382: PUSH
17383: LD_VAR 0 1
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 255
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 58
17407: PUSH
17408: EMPTY
17409: LIST
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PPUSH
17415: CALL_OW 69
17419: IN
17420: ST_TO_ADDR
// end ;
17421: LD_VAR 0 2
17425: RET
// export function IsNotFull ( building ) ; var places ; begin
17426: LD_INT 0
17428: PPUSH
17429: PPUSH
// if not building then
17430: LD_VAR 0 1
17434: NOT
17435: IFFALSE 17439
// exit ;
17437: GO 17610
// result := false ;
17439: LD_ADDR_VAR 0 2
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// places := 0 ;
17447: LD_ADDR_VAR 0 3
17451: PUSH
17452: LD_INT 0
17454: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17455: LD_VAR 0 1
17459: PPUSH
17460: CALL_OW 266
17464: PUSH
17465: LD_INT 0
17467: DOUBLE
17468: EQUAL
17469: IFTRUE 17527
17471: LD_INT 1
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17527
17477: LD_INT 6
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17527
17483: LD_INT 7
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17527
17489: LD_INT 8
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17527
17495: LD_INT 4
17497: DOUBLE
17498: EQUAL
17499: IFTRUE 17527
17501: LD_INT 5
17503: DOUBLE
17504: EQUAL
17505: IFTRUE 17527
17507: LD_INT 2
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17527
17513: LD_INT 3
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17527
17519: LD_INT 35
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17538
17527: POP
// places := 6 ; b_bunker , b_breastwork :
17528: LD_ADDR_VAR 0 3
17532: PUSH
17533: LD_INT 6
17535: ST_TO_ADDR
17536: GO 17583
17538: LD_INT 32
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17552
17544: LD_INT 31
17546: DOUBLE
17547: EQUAL
17548: IFTRUE 17552
17550: GO 17563
17552: POP
// places := 1 ; b_control_tower :
17553: LD_ADDR_VAR 0 3
17557: PUSH
17558: LD_INT 1
17560: ST_TO_ADDR
17561: GO 17583
17563: LD_INT 36
17565: DOUBLE
17566: EQUAL
17567: IFTRUE 17571
17569: GO 17582
17571: POP
// places := 3 ; end ;
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_INT 3
17579: ST_TO_ADDR
17580: GO 17583
17582: POP
// if places then
17583: LD_VAR 0 3
17587: IFFALSE 17610
// result := UnitsInside ( building ) < places ;
17589: LD_ADDR_VAR 0 2
17593: PUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 313
17603: PUSH
17604: LD_VAR 0 3
17608: LESS
17609: ST_TO_ADDR
// end ;
17610: LD_VAR 0 2
17614: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17615: LD_INT 0
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
// tmp := [ ] ;
17621: LD_ADDR_VAR 0 3
17625: PUSH
17626: EMPTY
17627: ST_TO_ADDR
// list := [ ] ;
17628: LD_ADDR_VAR 0 5
17632: PUSH
17633: EMPTY
17634: ST_TO_ADDR
// for i = 16 to 25 do
17635: LD_ADDR_VAR 0 4
17639: PUSH
17640: DOUBLE
17641: LD_INT 16
17643: DEC
17644: ST_TO_ADDR
17645: LD_INT 25
17647: PUSH
17648: FOR_TO
17649: IFFALSE 17722
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17651: LD_ADDR_VAR 0 3
17655: PUSH
17656: LD_VAR 0 3
17660: PUSH
17661: LD_INT 22
17663: PUSH
17664: LD_VAR 0 1
17668: PPUSH
17669: CALL_OW 255
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 91
17680: PUSH
17681: LD_VAR 0 1
17685: PUSH
17686: LD_INT 6
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 30
17696: PUSH
17697: LD_VAR 0 4
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: LIST
17710: PUSH
17711: EMPTY
17712: LIST
17713: PPUSH
17714: CALL_OW 69
17718: ADD
17719: ST_TO_ADDR
17720: GO 17648
17722: POP
17723: POP
// for i = 1 to tmp do
17724: LD_ADDR_VAR 0 4
17728: PUSH
17729: DOUBLE
17730: LD_INT 1
17732: DEC
17733: ST_TO_ADDR
17734: LD_VAR 0 3
17738: PUSH
17739: FOR_TO
17740: IFFALSE 17828
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17742: LD_ADDR_VAR 0 5
17746: PUSH
17747: LD_VAR 0 5
17751: PUSH
17752: LD_VAR 0 3
17756: PUSH
17757: LD_VAR 0 4
17761: ARRAY
17762: PPUSH
17763: CALL_OW 266
17767: PUSH
17768: LD_VAR 0 3
17772: PUSH
17773: LD_VAR 0 4
17777: ARRAY
17778: PPUSH
17779: CALL_OW 250
17783: PUSH
17784: LD_VAR 0 3
17788: PUSH
17789: LD_VAR 0 4
17793: ARRAY
17794: PPUSH
17795: CALL_OW 251
17799: PUSH
17800: LD_VAR 0 3
17804: PUSH
17805: LD_VAR 0 4
17809: ARRAY
17810: PPUSH
17811: CALL_OW 254
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: ADD
17825: ST_TO_ADDR
17826: GO 17739
17828: POP
17829: POP
// result := list ;
17830: LD_ADDR_VAR 0 2
17834: PUSH
17835: LD_VAR 0 5
17839: ST_TO_ADDR
// end ;
17840: LD_VAR 0 2
17844: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17845: LD_INT 0
17847: PPUSH
17848: PPUSH
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
17853: PPUSH
// if not factory then
17854: LD_VAR 0 1
17858: NOT
17859: IFFALSE 17863
// exit ;
17861: GO 18456
// if control = control_apeman then
17863: LD_VAR 0 4
17867: PUSH
17868: LD_INT 5
17870: EQUAL
17871: IFFALSE 17980
// begin tmp := UnitsInside ( factory ) ;
17873: LD_ADDR_VAR 0 8
17877: PUSH
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 313
17887: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17888: LD_VAR 0 8
17892: PPUSH
17893: LD_INT 25
17895: PUSH
17896: LD_INT 12
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 72
17907: NOT
17908: IFFALSE 17918
// control := control_manual ;
17910: LD_ADDR_VAR 0 4
17914: PUSH
17915: LD_INT 1
17917: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17918: LD_ADDR_VAR 0 8
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL 17615 0 1
17932: ST_TO_ADDR
// if tmp then
17933: LD_VAR 0 8
17937: IFFALSE 17980
// begin for i in tmp do
17939: LD_ADDR_VAR 0 7
17943: PUSH
17944: LD_VAR 0 8
17948: PUSH
17949: FOR_IN
17950: IFFALSE 17978
// if i [ 1 ] = b_ext_radio then
17952: LD_VAR 0 7
17956: PUSH
17957: LD_INT 1
17959: ARRAY
17960: PUSH
17961: LD_INT 22
17963: EQUAL
17964: IFFALSE 17976
// begin control := control_remote ;
17966: LD_ADDR_VAR 0 4
17970: PUSH
17971: LD_INT 2
17973: ST_TO_ADDR
// break ;
17974: GO 17978
// end ;
17976: GO 17949
17978: POP
17979: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17980: LD_VAR 0 1
17984: PPUSH
17985: LD_VAR 0 2
17989: PPUSH
17990: LD_VAR 0 3
17994: PPUSH
17995: LD_VAR 0 4
17999: PPUSH
18000: LD_VAR 0 5
18004: PPUSH
18005: CALL_OW 448
18009: IFFALSE 18044
// begin result := [ chassis , engine , control , weapon ] ;
18011: LD_ADDR_VAR 0 6
18015: PUSH
18016: LD_VAR 0 2
18020: PUSH
18021: LD_VAR 0 3
18025: PUSH
18026: LD_VAR 0 4
18030: PUSH
18031: LD_VAR 0 5
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: ST_TO_ADDR
// exit ;
18042: GO 18456
// end ; _chassis := AvailableChassisList ( factory ) ;
18044: LD_ADDR_VAR 0 9
18048: PUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 475
18058: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18059: LD_ADDR_VAR 0 11
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 476
18073: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18074: LD_ADDR_VAR 0 12
18078: PUSH
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 477
18088: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18089: LD_ADDR_VAR 0 10
18093: PUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 478
18103: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18104: LD_VAR 0 9
18108: NOT
18109: PUSH
18110: LD_VAR 0 11
18114: NOT
18115: OR
18116: PUSH
18117: LD_VAR 0 12
18121: NOT
18122: OR
18123: PUSH
18124: LD_VAR 0 10
18128: NOT
18129: OR
18130: IFFALSE 18165
// begin result := [ chassis , engine , control , weapon ] ;
18132: LD_ADDR_VAR 0 6
18136: PUSH
18137: LD_VAR 0 2
18141: PUSH
18142: LD_VAR 0 3
18146: PUSH
18147: LD_VAR 0 4
18151: PUSH
18152: LD_VAR 0 5
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: ST_TO_ADDR
// exit ;
18163: GO 18456
// end ; if not chassis in _chassis then
18165: LD_VAR 0 2
18169: PUSH
18170: LD_VAR 0 9
18174: IN
18175: NOT
18176: IFFALSE 18202
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18178: LD_ADDR_VAR 0 2
18182: PUSH
18183: LD_VAR 0 9
18187: PUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_VAR 0 9
18195: PPUSH
18196: CALL_OW 12
18200: ARRAY
18201: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18202: LD_VAR 0 2
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: CALL 18461 0 2
18216: NOT
18217: IFFALSE 18276
// repeat engine := _engine [ 1 ] ;
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_VAR 0 11
18228: PUSH
18229: LD_INT 1
18231: ARRAY
18232: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18233: LD_ADDR_VAR 0 11
18237: PUSH
18238: LD_VAR 0 11
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: CALL_OW 3
18250: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18251: LD_VAR 0 2
18255: PPUSH
18256: LD_VAR 0 3
18260: PPUSH
18261: CALL 18461 0 2
18265: PUSH
18266: LD_VAR 0 11
18270: PUSH
18271: EMPTY
18272: EQUAL
18273: OR
18274: IFFALSE 18219
// if not control in _control then
18276: LD_VAR 0 4
18280: PUSH
18281: LD_VAR 0 12
18285: IN
18286: NOT
18287: IFFALSE 18313
// control := _control [ rand ( 1 , _control ) ] ;
18289: LD_ADDR_VAR 0 4
18293: PUSH
18294: LD_VAR 0 12
18298: PUSH
18299: LD_INT 1
18301: PPUSH
18302: LD_VAR 0 12
18306: PPUSH
18307: CALL_OW 12
18311: ARRAY
18312: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18313: LD_VAR 0 2
18317: PPUSH
18318: LD_VAR 0 5
18322: PPUSH
18323: CALL 18681 0 2
18327: NOT
18328: IFFALSE 18387
// repeat weapon := _weapon [ 1 ] ;
18330: LD_ADDR_VAR 0 5
18334: PUSH
18335: LD_VAR 0 10
18339: PUSH
18340: LD_INT 1
18342: ARRAY
18343: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18344: LD_ADDR_VAR 0 10
18348: PUSH
18349: LD_VAR 0 10
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 3
18361: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18362: LD_VAR 0 2
18366: PPUSH
18367: LD_VAR 0 5
18371: PPUSH
18372: CALL 18681 0 2
18376: PUSH
18377: LD_VAR 0 10
18381: PUSH
18382: EMPTY
18383: EQUAL
18384: OR
18385: IFFALSE 18330
// result := [ ] ;
18387: LD_ADDR_VAR 0 6
18391: PUSH
18392: EMPTY
18393: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18394: LD_VAR 0 1
18398: PPUSH
18399: LD_VAR 0 2
18403: PPUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: LD_VAR 0 4
18413: PPUSH
18414: LD_VAR 0 5
18418: PPUSH
18419: CALL_OW 448
18423: IFFALSE 18456
// result := [ chassis , engine , control , weapon ] ;
18425: LD_ADDR_VAR 0 6
18429: PUSH
18430: LD_VAR 0 2
18434: PUSH
18435: LD_VAR 0 3
18439: PUSH
18440: LD_VAR 0 4
18444: PUSH
18445: LD_VAR 0 5
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: ST_TO_ADDR
// end ;
18456: LD_VAR 0 6
18460: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18461: LD_INT 0
18463: PPUSH
// if not chassis or not engine then
18464: LD_VAR 0 1
18468: NOT
18469: PUSH
18470: LD_VAR 0 2
18474: NOT
18475: OR
18476: IFFALSE 18480
// exit ;
18478: GO 18676
// case engine of engine_solar :
18480: LD_VAR 0 2
18484: PUSH
18485: LD_INT 2
18487: DOUBLE
18488: EQUAL
18489: IFTRUE 18493
18491: GO 18531
18493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18494: LD_ADDR_VAR 0 3
18498: PUSH
18499: LD_INT 11
18501: PUSH
18502: LD_INT 12
18504: PUSH
18505: LD_INT 13
18507: PUSH
18508: LD_INT 14
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 3
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: ST_TO_ADDR
18529: GO 18660
18531: LD_INT 1
18533: DOUBLE
18534: EQUAL
18535: IFTRUE 18539
18537: GO 18601
18539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18540: LD_ADDR_VAR 0 3
18544: PUSH
18545: LD_INT 11
18547: PUSH
18548: LD_INT 12
18550: PUSH
18551: LD_INT 13
18553: PUSH
18554: LD_INT 14
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 3
18565: PUSH
18566: LD_INT 4
18568: PUSH
18569: LD_INT 5
18571: PUSH
18572: LD_INT 21
18574: PUSH
18575: LD_INT 23
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_INT 24
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: ST_TO_ADDR
18599: GO 18660
18601: LD_INT 3
18603: DOUBLE
18604: EQUAL
18605: IFTRUE 18609
18607: GO 18659
18609: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18610: LD_ADDR_VAR 0 3
18614: PUSH
18615: LD_INT 13
18617: PUSH
18618: LD_INT 14
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: LD_INT 3
18626: PUSH
18627: LD_INT 4
18629: PUSH
18630: LD_INT 5
18632: PUSH
18633: LD_INT 21
18635: PUSH
18636: LD_INT 22
18638: PUSH
18639: LD_INT 23
18641: PUSH
18642: LD_INT 24
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: ST_TO_ADDR
18657: GO 18660
18659: POP
// result := ( chassis in result ) ;
18660: LD_ADDR_VAR 0 3
18664: PUSH
18665: LD_VAR 0 1
18669: PUSH
18670: LD_VAR 0 3
18674: IN
18675: ST_TO_ADDR
// end ;
18676: LD_VAR 0 3
18680: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18681: LD_INT 0
18683: PPUSH
// if not chassis or not weapon then
18684: LD_VAR 0 1
18688: NOT
18689: PUSH
18690: LD_VAR 0 2
18694: NOT
18695: OR
18696: IFFALSE 18700
// exit ;
18698: GO 19762
// case weapon of us_machine_gun :
18700: LD_VAR 0 2
18704: PUSH
18705: LD_INT 2
18707: DOUBLE
18708: EQUAL
18709: IFTRUE 18713
18711: GO 18743
18713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18714: LD_ADDR_VAR 0 3
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: LD_INT 4
18730: PUSH
18731: LD_INT 5
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: ST_TO_ADDR
18741: GO 19746
18743: LD_INT 3
18745: DOUBLE
18746: EQUAL
18747: IFTRUE 18751
18749: GO 18781
18751: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18752: LD_ADDR_VAR 0 3
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 3
18765: PUSH
18766: LD_INT 4
18768: PUSH
18769: LD_INT 5
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: ST_TO_ADDR
18779: GO 19746
18781: LD_INT 11
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18819
18789: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18790: LD_ADDR_VAR 0 3
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: LD_INT 4
18806: PUSH
18807: LD_INT 5
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
18817: GO 19746
18819: LD_INT 4
18821: DOUBLE
18822: EQUAL
18823: IFTRUE 18827
18825: GO 18853
18827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: LD_INT 4
18841: PUSH
18842: LD_INT 5
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: ST_TO_ADDR
18851: GO 19746
18853: LD_INT 5
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18887
18861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18862: LD_ADDR_VAR 0 3
18866: PUSH
18867: LD_INT 2
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: LD_INT 4
18875: PUSH
18876: LD_INT 5
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: ST_TO_ADDR
18885: GO 19746
18887: LD_INT 9
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18921
18895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18896: LD_ADDR_VAR 0 3
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 4
18909: PUSH
18910: LD_INT 5
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: ST_TO_ADDR
18919: GO 19746
18921: LD_INT 7
18923: DOUBLE
18924: EQUAL
18925: IFTRUE 18929
18927: GO 18955
18929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18930: LD_ADDR_VAR 0 3
18934: PUSH
18935: LD_INT 2
18937: PUSH
18938: LD_INT 3
18940: PUSH
18941: LD_INT 4
18943: PUSH
18944: LD_INT 5
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: ST_TO_ADDR
18953: GO 19746
18955: LD_INT 12
18957: DOUBLE
18958: EQUAL
18959: IFTRUE 18963
18961: GO 18989
18963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_INT 2
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: LD_INT 4
18977: PUSH
18978: LD_INT 5
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: ST_TO_ADDR
18987: GO 19746
18989: LD_INT 13
18991: DOUBLE
18992: EQUAL
18993: IFTRUE 18997
18995: GO 19023
18997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18998: LD_ADDR_VAR 0 3
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 3
19008: PUSH
19009: LD_INT 4
19011: PUSH
19012: LD_INT 5
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: ST_TO_ADDR
19021: GO 19746
19023: LD_INT 14
19025: DOUBLE
19026: EQUAL
19027: IFTRUE 19031
19029: GO 19049
19031: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19032: LD_ADDR_VAR 0 3
19036: PUSH
19037: LD_INT 4
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: ST_TO_ADDR
19047: GO 19746
19049: LD_INT 6
19051: DOUBLE
19052: EQUAL
19053: IFTRUE 19057
19055: GO 19075
19057: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: LD_INT 4
19065: PUSH
19066: LD_INT 5
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: ST_TO_ADDR
19073: GO 19746
19075: LD_INT 10
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19101
19083: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: LD_INT 4
19091: PUSH
19092: LD_INT 5
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: ST_TO_ADDR
19099: GO 19746
19101: LD_INT 22
19103: DOUBLE
19104: EQUAL
19105: IFTRUE 19109
19107: GO 19135
19109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 11
19117: PUSH
19118: LD_INT 12
19120: PUSH
19121: LD_INT 13
19123: PUSH
19124: LD_INT 14
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: ST_TO_ADDR
19133: GO 19746
19135: LD_INT 23
19137: DOUBLE
19138: EQUAL
19139: IFTRUE 19143
19141: GO 19169
19143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19144: LD_ADDR_VAR 0 3
19148: PUSH
19149: LD_INT 11
19151: PUSH
19152: LD_INT 12
19154: PUSH
19155: LD_INT 13
19157: PUSH
19158: LD_INT 14
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: ST_TO_ADDR
19167: GO 19746
19169: LD_INT 24
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19203
19177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19178: LD_ADDR_VAR 0 3
19182: PUSH
19183: LD_INT 11
19185: PUSH
19186: LD_INT 12
19188: PUSH
19189: LD_INT 13
19191: PUSH
19192: LD_INT 14
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: ST_TO_ADDR
19201: GO 19746
19203: LD_INT 30
19205: DOUBLE
19206: EQUAL
19207: IFTRUE 19211
19209: GO 19237
19211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19212: LD_ADDR_VAR 0 3
19216: PUSH
19217: LD_INT 11
19219: PUSH
19220: LD_INT 12
19222: PUSH
19223: LD_INT 13
19225: PUSH
19226: LD_INT 14
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: ST_TO_ADDR
19235: GO 19746
19237: LD_INT 25
19239: DOUBLE
19240: EQUAL
19241: IFTRUE 19245
19243: GO 19263
19245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19246: LD_ADDR_VAR 0 3
19250: PUSH
19251: LD_INT 13
19253: PUSH
19254: LD_INT 14
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: ST_TO_ADDR
19261: GO 19746
19263: LD_INT 27
19265: DOUBLE
19266: EQUAL
19267: IFTRUE 19271
19269: GO 19289
19271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: LD_INT 13
19279: PUSH
19280: LD_INT 14
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: ST_TO_ADDR
19287: GO 19746
19289: LD_EXP 109
19293: DOUBLE
19294: EQUAL
19295: IFTRUE 19299
19297: GO 19325
19299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19300: LD_ADDR_VAR 0 3
19304: PUSH
19305: LD_INT 11
19307: PUSH
19308: LD_INT 12
19310: PUSH
19311: LD_INT 13
19313: PUSH
19314: LD_INT 14
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: ST_TO_ADDR
19323: GO 19746
19325: LD_INT 28
19327: DOUBLE
19328: EQUAL
19329: IFTRUE 19333
19331: GO 19351
19333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19334: LD_ADDR_VAR 0 3
19338: PUSH
19339: LD_INT 13
19341: PUSH
19342: LD_INT 14
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: ST_TO_ADDR
19349: GO 19746
19351: LD_INT 29
19353: DOUBLE
19354: EQUAL
19355: IFTRUE 19359
19357: GO 19377
19359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19360: LD_ADDR_VAR 0 3
19364: PUSH
19365: LD_INT 13
19367: PUSH
19368: LD_INT 14
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: ST_TO_ADDR
19375: GO 19746
19377: LD_INT 31
19379: DOUBLE
19380: EQUAL
19381: IFTRUE 19385
19383: GO 19403
19385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19386: LD_ADDR_VAR 0 3
19390: PUSH
19391: LD_INT 13
19393: PUSH
19394: LD_INT 14
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: ST_TO_ADDR
19401: GO 19746
19403: LD_INT 26
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19429
19411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_INT 13
19419: PUSH
19420: LD_INT 14
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: ST_TO_ADDR
19427: GO 19746
19429: LD_INT 42
19431: DOUBLE
19432: EQUAL
19433: IFTRUE 19437
19435: GO 19463
19437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19438: LD_ADDR_VAR 0 3
19442: PUSH
19443: LD_INT 21
19445: PUSH
19446: LD_INT 22
19448: PUSH
19449: LD_INT 23
19451: PUSH
19452: LD_INT 24
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: ST_TO_ADDR
19461: GO 19746
19463: LD_INT 43
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 19497
19471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19472: LD_ADDR_VAR 0 3
19476: PUSH
19477: LD_INT 21
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_INT 23
19485: PUSH
19486: LD_INT 24
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: ST_TO_ADDR
19495: GO 19746
19497: LD_INT 44
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19531
19505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19506: LD_ADDR_VAR 0 3
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_INT 23
19519: PUSH
19520: LD_INT 24
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: ST_TO_ADDR
19529: GO 19746
19531: LD_INT 45
19533: DOUBLE
19534: EQUAL
19535: IFTRUE 19539
19537: GO 19565
19539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19540: LD_ADDR_VAR 0 3
19544: PUSH
19545: LD_INT 21
19547: PUSH
19548: LD_INT 22
19550: PUSH
19551: LD_INT 23
19553: PUSH
19554: LD_INT 24
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: ST_TO_ADDR
19563: GO 19746
19565: LD_INT 49
19567: DOUBLE
19568: EQUAL
19569: IFTRUE 19573
19571: GO 19599
19573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19574: LD_ADDR_VAR 0 3
19578: PUSH
19579: LD_INT 21
19581: PUSH
19582: LD_INT 22
19584: PUSH
19585: LD_INT 23
19587: PUSH
19588: LD_INT 24
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: ST_TO_ADDR
19597: GO 19746
19599: LD_INT 51
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19633
19607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19608: LD_ADDR_VAR 0 3
19612: PUSH
19613: LD_INT 21
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_INT 23
19621: PUSH
19622: LD_INT 24
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: ST_TO_ADDR
19631: GO 19746
19633: LD_INT 52
19635: DOUBLE
19636: EQUAL
19637: IFTRUE 19641
19639: GO 19667
19641: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19642: LD_ADDR_VAR 0 3
19646: PUSH
19647: LD_INT 21
19649: PUSH
19650: LD_INT 22
19652: PUSH
19653: LD_INT 23
19655: PUSH
19656: LD_INT 24
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: ST_TO_ADDR
19665: GO 19746
19667: LD_INT 53
19669: DOUBLE
19670: EQUAL
19671: IFTRUE 19675
19673: GO 19693
19675: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19676: LD_ADDR_VAR 0 3
19680: PUSH
19681: LD_INT 23
19683: PUSH
19684: LD_INT 24
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: ST_TO_ADDR
19691: GO 19746
19693: LD_INT 46
19695: DOUBLE
19696: EQUAL
19697: IFTRUE 19701
19699: GO 19719
19701: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19702: LD_ADDR_VAR 0 3
19706: PUSH
19707: LD_INT 23
19709: PUSH
19710: LD_INT 24
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: ST_TO_ADDR
19717: GO 19746
19719: LD_INT 47
19721: DOUBLE
19722: EQUAL
19723: IFTRUE 19727
19725: GO 19745
19727: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19728: LD_ADDR_VAR 0 3
19732: PUSH
19733: LD_INT 23
19735: PUSH
19736: LD_INT 24
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: ST_TO_ADDR
19743: GO 19746
19745: POP
// result := ( chassis in result ) ;
19746: LD_ADDR_VAR 0 3
19750: PUSH
19751: LD_VAR 0 1
19755: PUSH
19756: LD_VAR 0 3
19760: IN
19761: ST_TO_ADDR
// end ;
19762: LD_VAR 0 3
19766: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
19771: PPUSH
19772: PPUSH
19773: PPUSH
19774: PPUSH
19775: PPUSH
// result := array ;
19776: LD_ADDR_VAR 0 5
19780: PUSH
19781: LD_VAR 0 1
19785: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19786: LD_VAR 0 1
19790: NOT
19791: PUSH
19792: LD_VAR 0 2
19796: NOT
19797: OR
19798: PUSH
19799: LD_VAR 0 3
19803: NOT
19804: OR
19805: PUSH
19806: LD_VAR 0 2
19810: PUSH
19811: LD_VAR 0 1
19815: GREATER
19816: OR
19817: PUSH
19818: LD_VAR 0 3
19822: PUSH
19823: LD_VAR 0 1
19827: GREATER
19828: OR
19829: IFFALSE 19833
// exit ;
19831: GO 20129
// if direction then
19833: LD_VAR 0 4
19837: IFFALSE 19901
// begin d := 1 ;
19839: LD_ADDR_VAR 0 9
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if i_from > i_to then
19847: LD_VAR 0 2
19851: PUSH
19852: LD_VAR 0 3
19856: GREATER
19857: IFFALSE 19883
// length := ( array - i_from ) + i_to else
19859: LD_ADDR_VAR 0 11
19863: PUSH
19864: LD_VAR 0 1
19868: PUSH
19869: LD_VAR 0 2
19873: MINUS
19874: PUSH
19875: LD_VAR 0 3
19879: PLUS
19880: ST_TO_ADDR
19881: GO 19899
// length := i_to - i_from ;
19883: LD_ADDR_VAR 0 11
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_VAR 0 2
19897: MINUS
19898: ST_TO_ADDR
// end else
19899: GO 19962
// begin d := - 1 ;
19901: LD_ADDR_VAR 0 9
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: ST_TO_ADDR
// if i_from > i_to then
19910: LD_VAR 0 2
19914: PUSH
19915: LD_VAR 0 3
19919: GREATER
19920: IFFALSE 19940
// length := i_from - i_to else
19922: LD_ADDR_VAR 0 11
19926: PUSH
19927: LD_VAR 0 2
19931: PUSH
19932: LD_VAR 0 3
19936: MINUS
19937: ST_TO_ADDR
19938: GO 19962
// length := ( array - i_to ) + i_from ;
19940: LD_ADDR_VAR 0 11
19944: PUSH
19945: LD_VAR 0 1
19949: PUSH
19950: LD_VAR 0 3
19954: MINUS
19955: PUSH
19956: LD_VAR 0 2
19960: PLUS
19961: ST_TO_ADDR
// end ; if not length then
19962: LD_VAR 0 11
19966: NOT
19967: IFFALSE 19971
// exit ;
19969: GO 20129
// tmp := array ;
19971: LD_ADDR_VAR 0 10
19975: PUSH
19976: LD_VAR 0 1
19980: ST_TO_ADDR
// for i = 1 to length do
19981: LD_ADDR_VAR 0 6
19985: PUSH
19986: DOUBLE
19987: LD_INT 1
19989: DEC
19990: ST_TO_ADDR
19991: LD_VAR 0 11
19995: PUSH
19996: FOR_TO
19997: IFFALSE 20117
// begin for j = 1 to array do
19999: LD_ADDR_VAR 0 7
20003: PUSH
20004: DOUBLE
20005: LD_INT 1
20007: DEC
20008: ST_TO_ADDR
20009: LD_VAR 0 1
20013: PUSH
20014: FOR_TO
20015: IFFALSE 20103
// begin k := j + d ;
20017: LD_ADDR_VAR 0 8
20021: PUSH
20022: LD_VAR 0 7
20026: PUSH
20027: LD_VAR 0 9
20031: PLUS
20032: ST_TO_ADDR
// if k > array then
20033: LD_VAR 0 8
20037: PUSH
20038: LD_VAR 0 1
20042: GREATER
20043: IFFALSE 20053
// k := 1 ;
20045: LD_ADDR_VAR 0 8
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// if not k then
20053: LD_VAR 0 8
20057: NOT
20058: IFFALSE 20070
// k := array ;
20060: LD_ADDR_VAR 0 8
20064: PUSH
20065: LD_VAR 0 1
20069: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20070: LD_ADDR_VAR 0 10
20074: PUSH
20075: LD_VAR 0 10
20079: PPUSH
20080: LD_VAR 0 8
20084: PPUSH
20085: LD_VAR 0 1
20089: PUSH
20090: LD_VAR 0 7
20094: ARRAY
20095: PPUSH
20096: CALL_OW 1
20100: ST_TO_ADDR
// end ;
20101: GO 20014
20103: POP
20104: POP
// array := tmp ;
20105: LD_ADDR_VAR 0 1
20109: PUSH
20110: LD_VAR 0 10
20114: ST_TO_ADDR
// end ;
20115: GO 19996
20117: POP
20118: POP
// result := array ;
20119: LD_ADDR_VAR 0 5
20123: PUSH
20124: LD_VAR 0 1
20128: ST_TO_ADDR
// end ;
20129: LD_VAR 0 5
20133: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20134: LD_INT 0
20136: PPUSH
20137: PPUSH
// result := 0 ;
20138: LD_ADDR_VAR 0 3
20142: PUSH
20143: LD_INT 0
20145: ST_TO_ADDR
// if not array or not value in array then
20146: LD_VAR 0 1
20150: NOT
20151: PUSH
20152: LD_VAR 0 2
20156: PUSH
20157: LD_VAR 0 1
20161: IN
20162: NOT
20163: OR
20164: IFFALSE 20168
// exit ;
20166: GO 20222
// for i = 1 to array do
20168: LD_ADDR_VAR 0 4
20172: PUSH
20173: DOUBLE
20174: LD_INT 1
20176: DEC
20177: ST_TO_ADDR
20178: LD_VAR 0 1
20182: PUSH
20183: FOR_TO
20184: IFFALSE 20220
// if value = array [ i ] then
20186: LD_VAR 0 2
20190: PUSH
20191: LD_VAR 0 1
20195: PUSH
20196: LD_VAR 0 4
20200: ARRAY
20201: EQUAL
20202: IFFALSE 20218
// begin result := i ;
20204: LD_ADDR_VAR 0 3
20208: PUSH
20209: LD_VAR 0 4
20213: ST_TO_ADDR
// exit ;
20214: POP
20215: POP
20216: GO 20222
// end ;
20218: GO 20183
20220: POP
20221: POP
// end ;
20222: LD_VAR 0 3
20226: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20227: LD_INT 0
20229: PPUSH
// vc_chassis := chassis ;
20230: LD_ADDR_OWVAR 37
20234: PUSH
20235: LD_VAR 0 1
20239: ST_TO_ADDR
// vc_engine := engine ;
20240: LD_ADDR_OWVAR 39
20244: PUSH
20245: LD_VAR 0 2
20249: ST_TO_ADDR
// vc_control := control ;
20250: LD_ADDR_OWVAR 38
20254: PUSH
20255: LD_VAR 0 3
20259: ST_TO_ADDR
// vc_weapon := weapon ;
20260: LD_ADDR_OWVAR 40
20264: PUSH
20265: LD_VAR 0 4
20269: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20270: LD_ADDR_OWVAR 41
20274: PUSH
20275: LD_VAR 0 5
20279: ST_TO_ADDR
// end ;
20280: LD_VAR 0 6
20284: RET
// export function WantPlant ( unit ) ; var task ; begin
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
// result := false ;
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 437
20311: ST_TO_ADDR
// if task then
20312: LD_VAR 0 3
20316: IFFALSE 20344
// if task [ 1 ] [ 1 ] = p then
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 1
20325: ARRAY
20326: PUSH
20327: LD_INT 1
20329: ARRAY
20330: PUSH
20331: LD_STRING p
20333: EQUAL
20334: IFFALSE 20344
// result := true ;
20336: LD_ADDR_VAR 0 2
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// end ;
20344: LD_VAR 0 2
20348: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20349: LD_INT 0
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
// if pos < 1 then
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 1
20362: LESS
20363: IFFALSE 20367
// exit ;
20365: GO 20670
// if pos = 1 then
20367: LD_VAR 0 2
20371: PUSH
20372: LD_INT 1
20374: EQUAL
20375: IFFALSE 20408
// result := Replace ( arr , pos [ 1 ] , value ) else
20377: LD_ADDR_VAR 0 4
20381: PUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: LD_VAR 0 2
20391: PUSH
20392: LD_INT 1
20394: ARRAY
20395: PPUSH
20396: LD_VAR 0 3
20400: PPUSH
20401: CALL_OW 1
20405: ST_TO_ADDR
20406: GO 20670
// begin tmp := arr ;
20408: LD_ADDR_VAR 0 6
20412: PUSH
20413: LD_VAR 0 1
20417: ST_TO_ADDR
// s_arr := [ tmp ] ;
20418: LD_ADDR_VAR 0 7
20422: PUSH
20423: LD_VAR 0 6
20427: PUSH
20428: EMPTY
20429: LIST
20430: ST_TO_ADDR
// for i = 1 to pos - 1 do
20431: LD_ADDR_VAR 0 5
20435: PUSH
20436: DOUBLE
20437: LD_INT 1
20439: DEC
20440: ST_TO_ADDR
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 1
20448: MINUS
20449: PUSH
20450: FOR_TO
20451: IFFALSE 20496
// begin tmp := tmp [ pos [ i ] ] ;
20453: LD_ADDR_VAR 0 6
20457: PUSH
20458: LD_VAR 0 6
20462: PUSH
20463: LD_VAR 0 2
20467: PUSH
20468: LD_VAR 0 5
20472: ARRAY
20473: ARRAY
20474: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20475: LD_ADDR_VAR 0 7
20479: PUSH
20480: LD_VAR 0 7
20484: PUSH
20485: LD_VAR 0 6
20489: PUSH
20490: EMPTY
20491: LIST
20492: ADD
20493: ST_TO_ADDR
// end ;
20494: GO 20450
20496: POP
20497: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20498: LD_ADDR_VAR 0 6
20502: PUSH
20503: LD_VAR 0 6
20507: PPUSH
20508: LD_VAR 0 2
20512: PUSH
20513: LD_VAR 0 2
20517: ARRAY
20518: PPUSH
20519: LD_VAR 0 3
20523: PPUSH
20524: CALL_OW 1
20528: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20529: LD_ADDR_VAR 0 7
20533: PUSH
20534: LD_VAR 0 7
20538: PPUSH
20539: LD_VAR 0 7
20543: PPUSH
20544: LD_VAR 0 6
20548: PPUSH
20549: CALL_OW 1
20553: ST_TO_ADDR
// for i = s_arr downto 2 do
20554: LD_ADDR_VAR 0 5
20558: PUSH
20559: DOUBLE
20560: LD_VAR 0 7
20564: INC
20565: ST_TO_ADDR
20566: LD_INT 2
20568: PUSH
20569: FOR_DOWNTO
20570: IFFALSE 20654
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20572: LD_ADDR_VAR 0 6
20576: PUSH
20577: LD_VAR 0 7
20581: PUSH
20582: LD_VAR 0 5
20586: PUSH
20587: LD_INT 1
20589: MINUS
20590: ARRAY
20591: PPUSH
20592: LD_VAR 0 2
20596: PUSH
20597: LD_VAR 0 5
20601: PUSH
20602: LD_INT 1
20604: MINUS
20605: ARRAY
20606: PPUSH
20607: LD_VAR 0 7
20611: PUSH
20612: LD_VAR 0 5
20616: ARRAY
20617: PPUSH
20618: CALL_OW 1
20622: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20623: LD_ADDR_VAR 0 7
20627: PUSH
20628: LD_VAR 0 7
20632: PPUSH
20633: LD_VAR 0 5
20637: PUSH
20638: LD_INT 1
20640: MINUS
20641: PPUSH
20642: LD_VAR 0 6
20646: PPUSH
20647: CALL_OW 1
20651: ST_TO_ADDR
// end ;
20652: GO 20569
20654: POP
20655: POP
// result := s_arr [ 1 ] ;
20656: LD_ADDR_VAR 0 4
20660: PUSH
20661: LD_VAR 0 7
20665: PUSH
20666: LD_INT 1
20668: ARRAY
20669: ST_TO_ADDR
// end ; end ;
20670: LD_VAR 0 4
20674: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20675: LD_INT 0
20677: PPUSH
20678: PPUSH
// if not list then
20679: LD_VAR 0 1
20683: NOT
20684: IFFALSE 20688
// exit ;
20686: GO 20779
// i := list [ pos1 ] ;
20688: LD_ADDR_VAR 0 5
20692: PUSH
20693: LD_VAR 0 1
20697: PUSH
20698: LD_VAR 0 2
20702: ARRAY
20703: ST_TO_ADDR
// if not i then
20704: LD_VAR 0 5
20708: NOT
20709: IFFALSE 20713
// exit ;
20711: GO 20779
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_VAR 0 1
20722: PPUSH
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_VAR 0 1
20732: PUSH
20733: LD_VAR 0 3
20737: ARRAY
20738: PPUSH
20739: CALL_OW 1
20743: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20744: LD_ADDR_VAR 0 1
20748: PUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: LD_VAR 0 3
20758: PPUSH
20759: LD_VAR 0 5
20763: PPUSH
20764: CALL_OW 1
20768: ST_TO_ADDR
// result := list ;
20769: LD_ADDR_VAR 0 4
20773: PUSH
20774: LD_VAR 0 1
20778: ST_TO_ADDR
// end ;
20779: LD_VAR 0 4
20783: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20784: LD_INT 0
20786: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20787: LD_ADDR_VAR 0 5
20791: PUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 250
20801: PPUSH
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL_OW 251
20811: PPUSH
20812: LD_VAR 0 2
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_VAR 0 4
20826: PPUSH
20827: CALL 20837 0 5
20831: ST_TO_ADDR
// end ;
20832: LD_VAR 0 5
20836: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
// if not list then
20843: LD_VAR 0 3
20847: NOT
20848: IFFALSE 20852
// exit ;
20850: GO 21240
// result := [ ] ;
20852: LD_ADDR_VAR 0 6
20856: PUSH
20857: EMPTY
20858: ST_TO_ADDR
// for i in list do
20859: LD_ADDR_VAR 0 7
20863: PUSH
20864: LD_VAR 0 3
20868: PUSH
20869: FOR_IN
20870: IFFALSE 21072
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20872: LD_ADDR_VAR 0 9
20876: PUSH
20877: LD_VAR 0 7
20881: PPUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: LD_VAR 0 2
20891: PPUSH
20892: CALL_OW 297
20896: ST_TO_ADDR
// if not result then
20897: LD_VAR 0 6
20901: NOT
20902: IFFALSE 20928
// result := [ [ i , tmp ] ] else
20904: LD_ADDR_VAR 0 6
20908: PUSH
20909: LD_VAR 0 7
20913: PUSH
20914: LD_VAR 0 9
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: ST_TO_ADDR
20926: GO 21070
// begin if result [ result ] [ 2 ] < tmp then
20928: LD_VAR 0 6
20932: PUSH
20933: LD_VAR 0 6
20937: ARRAY
20938: PUSH
20939: LD_INT 2
20941: ARRAY
20942: PUSH
20943: LD_VAR 0 9
20947: LESS
20948: IFFALSE 20990
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20950: LD_ADDR_VAR 0 6
20954: PUSH
20955: LD_VAR 0 6
20959: PPUSH
20960: LD_VAR 0 6
20964: PUSH
20965: LD_INT 1
20967: PLUS
20968: PPUSH
20969: LD_VAR 0 7
20973: PUSH
20974: LD_VAR 0 9
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 2
20987: ST_TO_ADDR
20988: GO 21070
// for j = 1 to result do
20990: LD_ADDR_VAR 0 8
20994: PUSH
20995: DOUBLE
20996: LD_INT 1
20998: DEC
20999: ST_TO_ADDR
21000: LD_VAR 0 6
21004: PUSH
21005: FOR_TO
21006: IFFALSE 21068
// begin if tmp < result [ j ] [ 2 ] then
21008: LD_VAR 0 9
21012: PUSH
21013: LD_VAR 0 6
21017: PUSH
21018: LD_VAR 0 8
21022: ARRAY
21023: PUSH
21024: LD_INT 2
21026: ARRAY
21027: LESS
21028: IFFALSE 21066
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21030: LD_ADDR_VAR 0 6
21034: PUSH
21035: LD_VAR 0 6
21039: PPUSH
21040: LD_VAR 0 8
21044: PPUSH
21045: LD_VAR 0 7
21049: PUSH
21050: LD_VAR 0 9
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 2
21063: ST_TO_ADDR
// break ;
21064: GO 21068
// end ; end ;
21066: GO 21005
21068: POP
21069: POP
// end ; end ;
21070: GO 20869
21072: POP
21073: POP
// if result and not asc then
21074: LD_VAR 0 6
21078: PUSH
21079: LD_VAR 0 4
21083: NOT
21084: AND
21085: IFFALSE 21160
// begin tmp := result ;
21087: LD_ADDR_VAR 0 9
21091: PUSH
21092: LD_VAR 0 6
21096: ST_TO_ADDR
// for i = tmp downto 1 do
21097: LD_ADDR_VAR 0 7
21101: PUSH
21102: DOUBLE
21103: LD_VAR 0 9
21107: INC
21108: ST_TO_ADDR
21109: LD_INT 1
21111: PUSH
21112: FOR_DOWNTO
21113: IFFALSE 21158
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21115: LD_ADDR_VAR 0 6
21119: PUSH
21120: LD_VAR 0 6
21124: PPUSH
21125: LD_VAR 0 9
21129: PUSH
21130: LD_VAR 0 7
21134: MINUS
21135: PUSH
21136: LD_INT 1
21138: PLUS
21139: PPUSH
21140: LD_VAR 0 9
21144: PUSH
21145: LD_VAR 0 7
21149: ARRAY
21150: PPUSH
21151: CALL_OW 1
21155: ST_TO_ADDR
21156: GO 21112
21158: POP
21159: POP
// end ; tmp := [ ] ;
21160: LD_ADDR_VAR 0 9
21164: PUSH
21165: EMPTY
21166: ST_TO_ADDR
// if mode then
21167: LD_VAR 0 5
21171: IFFALSE 21240
// begin for i = 1 to result do
21173: LD_ADDR_VAR 0 7
21177: PUSH
21178: DOUBLE
21179: LD_INT 1
21181: DEC
21182: ST_TO_ADDR
21183: LD_VAR 0 6
21187: PUSH
21188: FOR_TO
21189: IFFALSE 21228
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21191: LD_ADDR_VAR 0 9
21195: PUSH
21196: LD_VAR 0 9
21200: PPUSH
21201: LD_VAR 0 7
21205: PPUSH
21206: LD_VAR 0 6
21210: PUSH
21211: LD_VAR 0 7
21215: ARRAY
21216: PUSH
21217: LD_INT 1
21219: ARRAY
21220: PPUSH
21221: CALL_OW 1
21225: ST_TO_ADDR
21226: GO 21188
21228: POP
21229: POP
// result := tmp ;
21230: LD_ADDR_VAR 0 6
21234: PUSH
21235: LD_VAR 0 9
21239: ST_TO_ADDR
// end ; end ;
21240: LD_VAR 0 6
21244: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21245: LD_INT 0
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
21252: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21253: LD_ADDR_VAR 0 5
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: ST_TO_ADDR
// if not x or not y then
21275: LD_VAR 0 2
21279: NOT
21280: PUSH
21281: LD_VAR 0 3
21285: NOT
21286: OR
21287: IFFALSE 21291
// exit ;
21289: GO 22943
// if not range then
21291: LD_VAR 0 4
21295: NOT
21296: IFFALSE 21306
// range := 10 ;
21298: LD_ADDR_VAR 0 4
21302: PUSH
21303: LD_INT 10
21305: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21306: LD_ADDR_VAR 0 8
21310: PUSH
21311: LD_INT 81
21313: PUSH
21314: LD_VAR 0 1
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 92
21325: PUSH
21326: LD_VAR 0 2
21330: PUSH
21331: LD_VAR 0 3
21335: PUSH
21336: LD_VAR 0 4
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 21
21352: PUSH
21353: LD_INT 3
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 69
21373: ST_TO_ADDR
// if not tmp then
21374: LD_VAR 0 8
21378: NOT
21379: IFFALSE 21383
// exit ;
21381: GO 22943
// for i in tmp do
21383: LD_ADDR_VAR 0 6
21387: PUSH
21388: LD_VAR 0 8
21392: PUSH
21393: FOR_IN
21394: IFFALSE 22918
// begin points := [ 0 , 0 , 0 ] ;
21396: LD_ADDR_VAR 0 9
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: ST_TO_ADDR
// bpoints := 1 ;
21415: LD_ADDR_VAR 0 10
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21423: LD_VAR 0 6
21427: PPUSH
21428: CALL_OW 247
21432: PUSH
21433: LD_INT 1
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 22019
21441: POP
// begin if GetClass ( i ) = 1 then
21442: LD_VAR 0 6
21446: PPUSH
21447: CALL_OW 257
21451: PUSH
21452: LD_INT 1
21454: EQUAL
21455: IFFALSE 21476
// points := [ 10 , 5 , 3 ] ;
21457: LD_ADDR_VAR 0 9
21461: PUSH
21462: LD_INT 10
21464: PUSH
21465: LD_INT 5
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21476: LD_VAR 0 6
21480: PPUSH
21481: CALL_OW 257
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 3
21491: PUSH
21492: LD_INT 4
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: IN
21500: IFFALSE 21521
// points := [ 3 , 2 , 1 ] ;
21502: LD_ADDR_VAR 0 9
21506: PUSH
21507: LD_INT 3
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21521: LD_VAR 0 6
21525: PPUSH
21526: CALL_OW 257
21530: PUSH
21531: LD_INT 5
21533: EQUAL
21534: IFFALSE 21555
// points := [ 130 , 5 , 2 ] ;
21536: LD_ADDR_VAR 0 9
21540: PUSH
21541: LD_INT 130
21543: PUSH
21544: LD_INT 5
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21555: LD_VAR 0 6
21559: PPUSH
21560: CALL_OW 257
21564: PUSH
21565: LD_INT 8
21567: EQUAL
21568: IFFALSE 21589
// points := [ 35 , 35 , 30 ] ;
21570: LD_ADDR_VAR 0 9
21574: PUSH
21575: LD_INT 35
21577: PUSH
21578: LD_INT 35
21580: PUSH
21581: LD_INT 30
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21589: LD_VAR 0 6
21593: PPUSH
21594: CALL_OW 257
21598: PUSH
21599: LD_INT 9
21601: EQUAL
21602: IFFALSE 21623
// points := [ 20 , 55 , 40 ] ;
21604: LD_ADDR_VAR 0 9
21608: PUSH
21609: LD_INT 20
21611: PUSH
21612: LD_INT 55
21614: PUSH
21615: LD_INT 40
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21623: LD_VAR 0 6
21627: PPUSH
21628: CALL_OW 257
21632: PUSH
21633: LD_INT 12
21635: PUSH
21636: LD_INT 16
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: IN
21643: IFFALSE 21664
// points := [ 5 , 3 , 2 ] ;
21645: LD_ADDR_VAR 0 9
21649: PUSH
21650: LD_INT 5
21652: PUSH
21653: LD_INT 3
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21664: LD_VAR 0 6
21668: PPUSH
21669: CALL_OW 257
21673: PUSH
21674: LD_INT 17
21676: EQUAL
21677: IFFALSE 21698
// points := [ 100 , 50 , 75 ] ;
21679: LD_ADDR_VAR 0 9
21683: PUSH
21684: LD_INT 100
21686: PUSH
21687: LD_INT 50
21689: PUSH
21690: LD_INT 75
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21698: LD_VAR 0 6
21702: PPUSH
21703: CALL_OW 257
21707: PUSH
21708: LD_INT 15
21710: EQUAL
21711: IFFALSE 21732
// points := [ 10 , 5 , 3 ] ;
21713: LD_ADDR_VAR 0 9
21717: PUSH
21718: LD_INT 10
21720: PUSH
21721: LD_INT 5
21723: PUSH
21724: LD_INT 3
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21732: LD_VAR 0 6
21736: PPUSH
21737: CALL_OW 257
21741: PUSH
21742: LD_INT 14
21744: EQUAL
21745: IFFALSE 21766
// points := [ 10 , 0 , 0 ] ;
21747: LD_ADDR_VAR 0 9
21751: PUSH
21752: LD_INT 10
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21766: LD_VAR 0 6
21770: PPUSH
21771: CALL_OW 257
21775: PUSH
21776: LD_INT 11
21778: EQUAL
21779: IFFALSE 21800
// points := [ 30 , 10 , 5 ] ;
21781: LD_ADDR_VAR 0 9
21785: PUSH
21786: LD_INT 30
21788: PUSH
21789: LD_INT 10
21791: PUSH
21792: LD_INT 5
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21800: LD_VAR 0 1
21804: PPUSH
21805: LD_INT 5
21807: PPUSH
21808: CALL_OW 321
21812: PUSH
21813: LD_INT 2
21815: EQUAL
21816: IFFALSE 21833
// bpoints := bpoints * 1.8 ;
21818: LD_ADDR_VAR 0 10
21822: PUSH
21823: LD_VAR 0 10
21827: PUSH
21828: LD_REAL  1.80000000000000E+0000
21831: MUL
21832: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21833: LD_VAR 0 6
21837: PPUSH
21838: CALL_OW 257
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 3
21851: PUSH
21852: LD_INT 4
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: IN
21861: PUSH
21862: LD_VAR 0 1
21866: PPUSH
21867: LD_INT 51
21869: PPUSH
21870: CALL_OW 321
21874: PUSH
21875: LD_INT 2
21877: EQUAL
21878: AND
21879: IFFALSE 21896
// bpoints := bpoints * 1.2 ;
21881: LD_ADDR_VAR 0 10
21885: PUSH
21886: LD_VAR 0 10
21890: PUSH
21891: LD_REAL  1.20000000000000E+0000
21894: MUL
21895: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21896: LD_VAR 0 6
21900: PPUSH
21901: CALL_OW 257
21905: PUSH
21906: LD_INT 5
21908: PUSH
21909: LD_INT 7
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: LIST
21919: IN
21920: PUSH
21921: LD_VAR 0 1
21925: PPUSH
21926: LD_INT 52
21928: PPUSH
21929: CALL_OW 321
21933: PUSH
21934: LD_INT 2
21936: EQUAL
21937: AND
21938: IFFALSE 21955
// bpoints := bpoints * 1.5 ;
21940: LD_ADDR_VAR 0 10
21944: PUSH
21945: LD_VAR 0 10
21949: PUSH
21950: LD_REAL  1.50000000000000E+0000
21953: MUL
21954: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21955: LD_VAR 0 1
21959: PPUSH
21960: LD_INT 66
21962: PPUSH
21963: CALL_OW 321
21967: PUSH
21968: LD_INT 2
21970: EQUAL
21971: IFFALSE 21988
// bpoints := bpoints * 1.1 ;
21973: LD_ADDR_VAR 0 10
21977: PUSH
21978: LD_VAR 0 10
21982: PUSH
21983: LD_REAL  1.10000000000000E+0000
21986: MUL
21987: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21988: LD_ADDR_VAR 0 10
21992: PUSH
21993: LD_VAR 0 10
21997: PUSH
21998: LD_VAR 0 6
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 259
22010: PUSH
22011: LD_REAL  1.15000000000000E+0000
22014: MUL
22015: MUL
22016: ST_TO_ADDR
// end ; unit_vehicle :
22017: GO 22847
22019: LD_INT 2
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22835
22027: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22028: LD_VAR 0 6
22032: PPUSH
22033: CALL_OW 264
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: LD_INT 42
22043: PUSH
22044: LD_INT 24
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: IN
22052: IFFALSE 22073
// points := [ 25 , 5 , 3 ] ;
22054: LD_ADDR_VAR 0 9
22058: PUSH
22059: LD_INT 25
22061: PUSH
22062: LD_INT 5
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22073: LD_VAR 0 6
22077: PPUSH
22078: CALL_OW 264
22082: PUSH
22083: LD_INT 4
22085: PUSH
22086: LD_INT 43
22088: PUSH
22089: LD_INT 25
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: IN
22097: IFFALSE 22118
// points := [ 40 , 15 , 5 ] ;
22099: LD_ADDR_VAR 0 9
22103: PUSH
22104: LD_INT 40
22106: PUSH
22107: LD_INT 15
22109: PUSH
22110: LD_INT 5
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22118: LD_VAR 0 6
22122: PPUSH
22123: CALL_OW 264
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: LD_INT 23
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: IN
22138: IFFALSE 22159
// points := [ 7 , 25 , 8 ] ;
22140: LD_ADDR_VAR 0 9
22144: PUSH
22145: LD_INT 7
22147: PUSH
22148: LD_INT 25
22150: PUSH
22151: LD_INT 8
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22159: LD_VAR 0 6
22163: PPUSH
22164: CALL_OW 264
22168: PUSH
22169: LD_INT 5
22171: PUSH
22172: LD_INT 27
22174: PUSH
22175: LD_INT 44
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: IN
22183: IFFALSE 22204
// points := [ 14 , 50 , 16 ] ;
22185: LD_ADDR_VAR 0 9
22189: PUSH
22190: LD_INT 14
22192: PUSH
22193: LD_INT 50
22195: PUSH
22196: LD_INT 16
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22204: LD_VAR 0 6
22208: PPUSH
22209: CALL_OW 264
22213: PUSH
22214: LD_INT 6
22216: PUSH
22217: LD_INT 46
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: IN
22224: IFFALSE 22245
// points := [ 32 , 120 , 70 ] ;
22226: LD_ADDR_VAR 0 9
22230: PUSH
22231: LD_INT 32
22233: PUSH
22234: LD_INT 120
22236: PUSH
22237: LD_INT 70
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22245: LD_VAR 0 6
22249: PPUSH
22250: CALL_OW 264
22254: PUSH
22255: LD_INT 7
22257: PUSH
22258: LD_INT 28
22260: PUSH
22261: LD_INT 45
22263: PUSH
22264: LD_EXP 109
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: IN
22275: IFFALSE 22296
// points := [ 35 , 20 , 45 ] ;
22277: LD_ADDR_VAR 0 9
22281: PUSH
22282: LD_INT 35
22284: PUSH
22285: LD_INT 20
22287: PUSH
22288: LD_INT 45
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22296: LD_VAR 0 6
22300: PPUSH
22301: CALL_OW 264
22305: PUSH
22306: LD_INT 47
22308: PUSH
22309: EMPTY
22310: LIST
22311: IN
22312: IFFALSE 22333
// points := [ 67 , 45 , 75 ] ;
22314: LD_ADDR_VAR 0 9
22318: PUSH
22319: LD_INT 67
22321: PUSH
22322: LD_INT 45
22324: PUSH
22325: LD_INT 75
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22333: LD_VAR 0 6
22337: PPUSH
22338: CALL_OW 264
22342: PUSH
22343: LD_INT 26
22345: PUSH
22346: EMPTY
22347: LIST
22348: IN
22349: IFFALSE 22370
// points := [ 120 , 30 , 80 ] ;
22351: LD_ADDR_VAR 0 9
22355: PUSH
22356: LD_INT 120
22358: PUSH
22359: LD_INT 30
22361: PUSH
22362: LD_INT 80
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22370: LD_VAR 0 6
22374: PPUSH
22375: CALL_OW 264
22379: PUSH
22380: LD_INT 22
22382: PUSH
22383: EMPTY
22384: LIST
22385: IN
22386: IFFALSE 22407
// points := [ 40 , 1 , 1 ] ;
22388: LD_ADDR_VAR 0 9
22392: PUSH
22393: LD_INT 40
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22407: LD_VAR 0 6
22411: PPUSH
22412: CALL_OW 264
22416: PUSH
22417: LD_INT 29
22419: PUSH
22420: EMPTY
22421: LIST
22422: IN
22423: IFFALSE 22444
// points := [ 70 , 200 , 400 ] ;
22425: LD_ADDR_VAR 0 9
22429: PUSH
22430: LD_INT 70
22432: PUSH
22433: LD_INT 200
22435: PUSH
22436: LD_INT 400
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22444: LD_VAR 0 6
22448: PPUSH
22449: CALL_OW 264
22453: PUSH
22454: LD_INT 14
22456: PUSH
22457: LD_INT 53
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: IN
22464: IFFALSE 22485
// points := [ 40 , 10 , 20 ] ;
22466: LD_ADDR_VAR 0 9
22470: PUSH
22471: LD_INT 40
22473: PUSH
22474: LD_INT 10
22476: PUSH
22477: LD_INT 20
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22485: LD_VAR 0 6
22489: PPUSH
22490: CALL_OW 264
22494: PUSH
22495: LD_INT 9
22497: PUSH
22498: EMPTY
22499: LIST
22500: IN
22501: IFFALSE 22522
// points := [ 5 , 70 , 20 ] ;
22503: LD_ADDR_VAR 0 9
22507: PUSH
22508: LD_INT 5
22510: PUSH
22511: LD_INT 70
22513: PUSH
22514: LD_INT 20
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: LIST
22521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22522: LD_VAR 0 6
22526: PPUSH
22527: CALL_OW 264
22531: PUSH
22532: LD_INT 10
22534: PUSH
22535: EMPTY
22536: LIST
22537: IN
22538: IFFALSE 22559
// points := [ 35 , 110 , 70 ] ;
22540: LD_ADDR_VAR 0 9
22544: PUSH
22545: LD_INT 35
22547: PUSH
22548: LD_INT 110
22550: PUSH
22551: LD_INT 70
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22559: LD_VAR 0 6
22563: PPUSH
22564: CALL_OW 265
22568: PUSH
22569: LD_INT 25
22571: EQUAL
22572: IFFALSE 22593
// points := [ 80 , 65 , 100 ] ;
22574: LD_ADDR_VAR 0 9
22578: PUSH
22579: LD_INT 80
22581: PUSH
22582: LD_INT 65
22584: PUSH
22585: LD_INT 100
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22593: LD_VAR 0 6
22597: PPUSH
22598: CALL_OW 263
22602: PUSH
22603: LD_INT 1
22605: EQUAL
22606: IFFALSE 22641
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22608: LD_ADDR_VAR 0 10
22612: PUSH
22613: LD_VAR 0 10
22617: PUSH
22618: LD_VAR 0 6
22622: PPUSH
22623: CALL_OW 311
22627: PPUSH
22628: LD_INT 3
22630: PPUSH
22631: CALL_OW 259
22635: PUSH
22636: LD_INT 4
22638: MUL
22639: MUL
22640: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22641: LD_VAR 0 6
22645: PPUSH
22646: CALL_OW 263
22650: PUSH
22651: LD_INT 2
22653: EQUAL
22654: IFFALSE 22705
// begin j := IsControledBy ( i ) ;
22656: LD_ADDR_VAR 0 7
22660: PUSH
22661: LD_VAR 0 6
22665: PPUSH
22666: CALL_OW 312
22670: ST_TO_ADDR
// if j then
22671: LD_VAR 0 7
22675: IFFALSE 22705
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22677: LD_ADDR_VAR 0 10
22681: PUSH
22682: LD_VAR 0 10
22686: PUSH
22687: LD_VAR 0 7
22691: PPUSH
22692: LD_INT 3
22694: PPUSH
22695: CALL_OW 259
22699: PUSH
22700: LD_INT 3
22702: MUL
22703: MUL
22704: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22705: LD_VAR 0 6
22709: PPUSH
22710: CALL_OW 264
22714: PUSH
22715: LD_INT 5
22717: PUSH
22718: LD_INT 6
22720: PUSH
22721: LD_INT 46
22723: PUSH
22724: LD_INT 44
22726: PUSH
22727: LD_INT 47
22729: PUSH
22730: LD_INT 45
22732: PUSH
22733: LD_INT 28
22735: PUSH
22736: LD_INT 7
22738: PUSH
22739: LD_INT 27
22741: PUSH
22742: LD_INT 29
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: IN
22757: PUSH
22758: LD_VAR 0 1
22762: PPUSH
22763: LD_INT 52
22765: PPUSH
22766: CALL_OW 321
22770: PUSH
22771: LD_INT 2
22773: EQUAL
22774: AND
22775: IFFALSE 22792
// bpoints := bpoints * 1.2 ;
22777: LD_ADDR_VAR 0 10
22781: PUSH
22782: LD_VAR 0 10
22786: PUSH
22787: LD_REAL  1.20000000000000E+0000
22790: MUL
22791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22792: LD_VAR 0 6
22796: PPUSH
22797: CALL_OW 264
22801: PUSH
22802: LD_INT 6
22804: PUSH
22805: LD_INT 46
22807: PUSH
22808: LD_INT 47
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: IN
22816: IFFALSE 22833
// bpoints := bpoints * 1.2 ;
22818: LD_ADDR_VAR 0 10
22822: PUSH
22823: LD_VAR 0 10
22827: PUSH
22828: LD_REAL  1.20000000000000E+0000
22831: MUL
22832: ST_TO_ADDR
// end ; unit_building :
22833: GO 22847
22835: LD_INT 3
22837: DOUBLE
22838: EQUAL
22839: IFTRUE 22843
22841: GO 22846
22843: POP
// ; end ;
22844: GO 22847
22846: POP
// for j = 1 to 3 do
22847: LD_ADDR_VAR 0 7
22851: PUSH
22852: DOUBLE
22853: LD_INT 1
22855: DEC
22856: ST_TO_ADDR
22857: LD_INT 3
22859: PUSH
22860: FOR_TO
22861: IFFALSE 22914
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22863: LD_ADDR_VAR 0 5
22867: PUSH
22868: LD_VAR 0 5
22872: PPUSH
22873: LD_VAR 0 7
22877: PPUSH
22878: LD_VAR 0 5
22882: PUSH
22883: LD_VAR 0 7
22887: ARRAY
22888: PUSH
22889: LD_VAR 0 9
22893: PUSH
22894: LD_VAR 0 7
22898: ARRAY
22899: PUSH
22900: LD_VAR 0 10
22904: MUL
22905: PLUS
22906: PPUSH
22907: CALL_OW 1
22911: ST_TO_ADDR
22912: GO 22860
22914: POP
22915: POP
// end ;
22916: GO 21393
22918: POP
22919: POP
// result := Replace ( result , 4 , tmp ) ;
22920: LD_ADDR_VAR 0 5
22924: PUSH
22925: LD_VAR 0 5
22929: PPUSH
22930: LD_INT 4
22932: PPUSH
22933: LD_VAR 0 8
22937: PPUSH
22938: CALL_OW 1
22942: ST_TO_ADDR
// end ;
22943: LD_VAR 0 5
22947: RET
// export function DangerAtRange ( unit , range ) ; begin
22948: LD_INT 0
22950: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22951: LD_ADDR_VAR 0 3
22955: PUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 255
22965: PPUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 250
22975: PPUSH
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 251
22985: PPUSH
22986: LD_VAR 0 2
22990: PPUSH
22991: CALL 21245 0 4
22995: ST_TO_ADDR
// end ;
22996: LD_VAR 0 3
23000: RET
// export function DangerInArea ( side , area ) ; begin
23001: LD_INT 0
23003: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_VAR 0 2
23013: PPUSH
23014: LD_INT 81
23016: PUSH
23017: LD_VAR 0 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PPUSH
23026: CALL_OW 70
23030: ST_TO_ADDR
// end ;
23031: LD_VAR 0 3
23035: RET
// export function IsExtension ( b ) ; begin
23036: LD_INT 0
23038: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: LD_VAR 0 1
23048: PUSH
23049: LD_INT 23
23051: PUSH
23052: LD_INT 20
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_INT 17
23060: PUSH
23061: LD_INT 24
23063: PUSH
23064: LD_INT 21
23066: PUSH
23067: LD_INT 19
23069: PUSH
23070: LD_INT 16
23072: PUSH
23073: LD_INT 25
23075: PUSH
23076: LD_INT 18
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: IN
23091: ST_TO_ADDR
// end ;
23092: LD_VAR 0 2
23096: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23097: LD_INT 0
23099: PPUSH
23100: PPUSH
23101: PPUSH
// result := [ ] ;
23102: LD_ADDR_VAR 0 4
23106: PUSH
23107: EMPTY
23108: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23109: LD_ADDR_VAR 0 5
23113: PUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_INT 21
23121: PUSH
23122: LD_INT 3
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PPUSH
23129: CALL_OW 70
23133: ST_TO_ADDR
// if not tmp then
23134: LD_VAR 0 5
23138: NOT
23139: IFFALSE 23143
// exit ;
23141: GO 23207
// if checkLink then
23143: LD_VAR 0 3
23147: IFFALSE 23197
// begin for i in tmp do
23149: LD_ADDR_VAR 0 6
23153: PUSH
23154: LD_VAR 0 5
23158: PUSH
23159: FOR_IN
23160: IFFALSE 23195
// if GetBase ( i ) <> base then
23162: LD_VAR 0 6
23166: PPUSH
23167: CALL_OW 274
23171: PUSH
23172: LD_VAR 0 1
23176: NONEQUAL
23177: IFFALSE 23193
// ComLinkToBase ( base , i ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_VAR 0 6
23188: PPUSH
23189: CALL_OW 169
23193: GO 23159
23195: POP
23196: POP
// end ; result := tmp ;
23197: LD_ADDR_VAR 0 4
23201: PUSH
23202: LD_VAR 0 5
23206: ST_TO_ADDR
// end ;
23207: LD_VAR 0 4
23211: RET
// export function ComComplete ( units , b ) ; var i ; begin
23212: LD_INT 0
23214: PPUSH
23215: PPUSH
// if not units then
23216: LD_VAR 0 1
23220: NOT
23221: IFFALSE 23225
// exit ;
23223: GO 23315
// for i in units do
23225: LD_ADDR_VAR 0 4
23229: PUSH
23230: LD_VAR 0 1
23234: PUSH
23235: FOR_IN
23236: IFFALSE 23313
// if BuildingStatus ( b ) = bs_build then
23238: LD_VAR 0 2
23242: PPUSH
23243: CALL_OW 461
23247: PUSH
23248: LD_INT 1
23250: EQUAL
23251: IFFALSE 23311
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23253: LD_VAR 0 4
23257: PPUSH
23258: LD_STRING h
23260: PUSH
23261: LD_VAR 0 2
23265: PPUSH
23266: CALL_OW 250
23270: PUSH
23271: LD_VAR 0 2
23275: PPUSH
23276: CALL_OW 251
23280: PUSH
23281: LD_VAR 0 2
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: PPUSH
23307: CALL_OW 446
23311: GO 23235
23313: POP
23314: POP
// end ;
23315: LD_VAR 0 3
23319: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23328: LD_VAR 0 1
23332: NOT
23333: PUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL_OW 263
23343: PUSH
23344: LD_INT 2
23346: NONEQUAL
23347: OR
23348: IFFALSE 23352
// exit ;
23350: GO 23668
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23352: LD_ADDR_VAR 0 6
23356: PUSH
23357: LD_INT 22
23359: PUSH
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL_OW 255
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 30
23379: PUSH
23380: LD_INT 36
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 34
23389: PUSH
23390: LD_INT 31
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PPUSH
23406: CALL_OW 69
23410: ST_TO_ADDR
// if not tmp then
23411: LD_VAR 0 6
23415: NOT
23416: IFFALSE 23420
// exit ;
23418: GO 23668
// result := [ ] ;
23420: LD_ADDR_VAR 0 2
23424: PUSH
23425: EMPTY
23426: ST_TO_ADDR
// for i in tmp do
23427: LD_ADDR_VAR 0 3
23431: PUSH
23432: LD_VAR 0 6
23436: PUSH
23437: FOR_IN
23438: IFFALSE 23509
// begin t := UnitsInside ( i ) ;
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: LD_VAR 0 3
23449: PPUSH
23450: CALL_OW 313
23454: ST_TO_ADDR
// if t then
23455: LD_VAR 0 4
23459: IFFALSE 23507
// for j in t do
23461: LD_ADDR_VAR 0 7
23465: PUSH
23466: LD_VAR 0 4
23470: PUSH
23471: FOR_IN
23472: IFFALSE 23505
// result := Replace ( result , result + 1 , j ) ;
23474: LD_ADDR_VAR 0 2
23478: PUSH
23479: LD_VAR 0 2
23483: PPUSH
23484: LD_VAR 0 2
23488: PUSH
23489: LD_INT 1
23491: PLUS
23492: PPUSH
23493: LD_VAR 0 7
23497: PPUSH
23498: CALL_OW 1
23502: ST_TO_ADDR
23503: GO 23471
23505: POP
23506: POP
// end ;
23507: GO 23437
23509: POP
23510: POP
// if not result then
23511: LD_VAR 0 2
23515: NOT
23516: IFFALSE 23520
// exit ;
23518: GO 23668
// mech := result [ 1 ] ;
23520: LD_ADDR_VAR 0 5
23524: PUSH
23525: LD_VAR 0 2
23529: PUSH
23530: LD_INT 1
23532: ARRAY
23533: ST_TO_ADDR
// if result > 1 then
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 1
23541: GREATER
23542: IFFALSE 23654
// begin for i = 2 to result do
23544: LD_ADDR_VAR 0 3
23548: PUSH
23549: DOUBLE
23550: LD_INT 2
23552: DEC
23553: ST_TO_ADDR
23554: LD_VAR 0 2
23558: PUSH
23559: FOR_TO
23560: IFFALSE 23652
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23562: LD_ADDR_VAR 0 4
23566: PUSH
23567: LD_VAR 0 2
23571: PUSH
23572: LD_VAR 0 3
23576: ARRAY
23577: PPUSH
23578: LD_INT 3
23580: PPUSH
23581: CALL_OW 259
23585: PUSH
23586: LD_VAR 0 2
23590: PUSH
23591: LD_VAR 0 3
23595: ARRAY
23596: PPUSH
23597: CALL_OW 432
23601: MINUS
23602: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23603: LD_VAR 0 4
23607: PUSH
23608: LD_VAR 0 5
23612: PPUSH
23613: LD_INT 3
23615: PPUSH
23616: CALL_OW 259
23620: PUSH
23621: LD_VAR 0 5
23625: PPUSH
23626: CALL_OW 432
23630: MINUS
23631: GREATEREQUAL
23632: IFFALSE 23650
// mech := result [ i ] ;
23634: LD_ADDR_VAR 0 5
23638: PUSH
23639: LD_VAR 0 2
23643: PUSH
23644: LD_VAR 0 3
23648: ARRAY
23649: ST_TO_ADDR
// end ;
23650: GO 23559
23652: POP
23653: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23654: LD_VAR 0 1
23658: PPUSH
23659: LD_VAR 0 5
23663: PPUSH
23664: CALL_OW 135
// end ;
23668: LD_VAR 0 2
23672: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
// result := [ ] ;
23688: LD_ADDR_VAR 0 7
23692: PUSH
23693: EMPTY
23694: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 266
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: IN
23715: NOT
23716: IFFALSE 23720
// exit ;
23718: GO 25354
// if name then
23720: LD_VAR 0 3
23724: IFFALSE 23740
// SetBName ( base_dep , name ) ;
23726: LD_VAR 0 1
23730: PPUSH
23731: LD_VAR 0 3
23735: PPUSH
23736: CALL_OW 500
// base := GetBase ( base_dep ) ;
23740: LD_ADDR_VAR 0 15
23744: PUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 274
23754: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23755: LD_ADDR_VAR 0 16
23759: PUSH
23760: LD_VAR 0 1
23764: PPUSH
23765: CALL_OW 255
23769: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23770: LD_ADDR_VAR 0 17
23774: PUSH
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 248
23784: ST_TO_ADDR
// if sources then
23785: LD_VAR 0 5
23789: IFFALSE 23836
// for i = 1 to 3 do
23791: LD_ADDR_VAR 0 8
23795: PUSH
23796: DOUBLE
23797: LD_INT 1
23799: DEC
23800: ST_TO_ADDR
23801: LD_INT 3
23803: PUSH
23804: FOR_TO
23805: IFFALSE 23834
// AddResourceType ( base , i , sources [ i ] ) ;
23807: LD_VAR 0 15
23811: PPUSH
23812: LD_VAR 0 8
23816: PPUSH
23817: LD_VAR 0 5
23821: PUSH
23822: LD_VAR 0 8
23826: ARRAY
23827: PPUSH
23828: CALL_OW 276
23832: GO 23804
23834: POP
23835: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23836: LD_ADDR_VAR 0 18
23840: PUSH
23841: LD_VAR 0 15
23845: PPUSH
23846: LD_VAR 0 2
23850: PPUSH
23851: LD_INT 1
23853: PPUSH
23854: CALL 23097 0 3
23858: ST_TO_ADDR
// InitHc ;
23859: CALL_OW 19
// InitUc ;
23863: CALL_OW 18
// uc_side := side ;
23867: LD_ADDR_OWVAR 20
23871: PUSH
23872: LD_VAR 0 16
23876: ST_TO_ADDR
// uc_nation := nation ;
23877: LD_ADDR_OWVAR 21
23881: PUSH
23882: LD_VAR 0 17
23886: ST_TO_ADDR
// if buildings then
23887: LD_VAR 0 18
23891: IFFALSE 25213
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23893: LD_ADDR_VAR 0 19
23897: PUSH
23898: LD_VAR 0 18
23902: PPUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 30
23908: PUSH
23909: LD_INT 29
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 30
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 72
23935: ST_TO_ADDR
// if tmp then
23936: LD_VAR 0 19
23940: IFFALSE 23988
// for i in tmp do
23942: LD_ADDR_VAR 0 8
23946: PUSH
23947: LD_VAR 0 19
23951: PUSH
23952: FOR_IN
23953: IFFALSE 23986
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23955: LD_VAR 0 8
23959: PPUSH
23960: CALL_OW 250
23964: PPUSH
23965: LD_VAR 0 8
23969: PPUSH
23970: CALL_OW 251
23974: PPUSH
23975: LD_VAR 0 16
23979: PPUSH
23980: CALL_OW 441
23984: GO 23952
23986: POP
23987: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23988: LD_VAR 0 18
23992: PPUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 30
23998: PUSH
23999: LD_INT 32
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 30
24008: PUSH
24009: LD_INT 33
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: PPUSH
24021: CALL_OW 72
24025: IFFALSE 24113
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24027: LD_ADDR_VAR 0 8
24031: PUSH
24032: LD_VAR 0 18
24036: PPUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 30
24042: PUSH
24043: LD_INT 32
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 30
24052: PUSH
24053: LD_INT 33
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: PPUSH
24065: CALL_OW 72
24069: PUSH
24070: FOR_IN
24071: IFFALSE 24111
// begin if not GetBWeapon ( i ) then
24073: LD_VAR 0 8
24077: PPUSH
24078: CALL_OW 269
24082: NOT
24083: IFFALSE 24109
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24085: LD_VAR 0 8
24089: PPUSH
24090: LD_VAR 0 8
24094: PPUSH
24095: LD_VAR 0 2
24099: PPUSH
24100: CALL 25359 0 2
24104: PPUSH
24105: CALL_OW 431
// end ;
24109: GO 24070
24111: POP
24112: POP
// end ; for i = 1 to personel do
24113: LD_ADDR_VAR 0 8
24117: PUSH
24118: DOUBLE
24119: LD_INT 1
24121: DEC
24122: ST_TO_ADDR
24123: LD_VAR 0 6
24127: PUSH
24128: FOR_TO
24129: IFFALSE 25193
// begin if i > 4 then
24131: LD_VAR 0 8
24135: PUSH
24136: LD_INT 4
24138: GREATER
24139: IFFALSE 24143
// break ;
24141: GO 25193
// case i of 1 :
24143: LD_VAR 0 8
24147: PUSH
24148: LD_INT 1
24150: DOUBLE
24151: EQUAL
24152: IFTRUE 24156
24154: GO 24236
24156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24157: LD_ADDR_VAR 0 12
24161: PUSH
24162: LD_VAR 0 18
24166: PPUSH
24167: LD_INT 22
24169: PUSH
24170: LD_VAR 0 16
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 58
24181: PUSH
24182: EMPTY
24183: LIST
24184: PUSH
24185: LD_INT 2
24187: PUSH
24188: LD_INT 30
24190: PUSH
24191: LD_INT 32
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 30
24200: PUSH
24201: LD_INT 4
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 30
24210: PUSH
24211: LD_INT 5
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: PPUSH
24229: CALL_OW 72
24233: ST_TO_ADDR
24234: GO 24458
24236: LD_INT 2
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24306
24244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24245: LD_ADDR_VAR 0 12
24249: PUSH
24250: LD_VAR 0 18
24254: PPUSH
24255: LD_INT 22
24257: PUSH
24258: LD_VAR 0 16
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 30
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 72
24303: ST_TO_ADDR
24304: GO 24458
24306: LD_INT 3
24308: DOUBLE
24309: EQUAL
24310: IFTRUE 24314
24312: GO 24376
24314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24315: LD_ADDR_VAR 0 12
24319: PUSH
24320: LD_VAR 0 18
24324: PPUSH
24325: LD_INT 22
24327: PUSH
24328: LD_VAR 0 16
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 30
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 72
24373: ST_TO_ADDR
24374: GO 24458
24376: LD_INT 4
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24457
24384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24385: LD_ADDR_VAR 0 12
24389: PUSH
24390: LD_VAR 0 18
24394: PPUSH
24395: LD_INT 22
24397: PUSH
24398: LD_VAR 0 16
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 30
24412: PUSH
24413: LD_INT 6
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 30
24422: PUSH
24423: LD_INT 7
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 30
24432: PUSH
24433: LD_INT 8
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PPUSH
24450: CALL_OW 72
24454: ST_TO_ADDR
24455: GO 24458
24457: POP
// if i = 1 then
24458: LD_VAR 0 8
24462: PUSH
24463: LD_INT 1
24465: EQUAL
24466: IFFALSE 24577
// begin tmp := [ ] ;
24468: LD_ADDR_VAR 0 19
24472: PUSH
24473: EMPTY
24474: ST_TO_ADDR
// for j in f do
24475: LD_ADDR_VAR 0 9
24479: PUSH
24480: LD_VAR 0 12
24484: PUSH
24485: FOR_IN
24486: IFFALSE 24559
// if GetBType ( j ) = b_bunker then
24488: LD_VAR 0 9
24492: PPUSH
24493: CALL_OW 266
24497: PUSH
24498: LD_INT 32
24500: EQUAL
24501: IFFALSE 24528
// tmp := Insert ( tmp , 1 , j ) else
24503: LD_ADDR_VAR 0 19
24507: PUSH
24508: LD_VAR 0 19
24512: PPUSH
24513: LD_INT 1
24515: PPUSH
24516: LD_VAR 0 9
24520: PPUSH
24521: CALL_OW 2
24525: ST_TO_ADDR
24526: GO 24557
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24528: LD_ADDR_VAR 0 19
24532: PUSH
24533: LD_VAR 0 19
24537: PPUSH
24538: LD_VAR 0 19
24542: PUSH
24543: LD_INT 1
24545: PLUS
24546: PPUSH
24547: LD_VAR 0 9
24551: PPUSH
24552: CALL_OW 2
24556: ST_TO_ADDR
24557: GO 24485
24559: POP
24560: POP
// if tmp then
24561: LD_VAR 0 19
24565: IFFALSE 24577
// f := tmp ;
24567: LD_ADDR_VAR 0 12
24571: PUSH
24572: LD_VAR 0 19
24576: ST_TO_ADDR
// end ; x := personel [ i ] ;
24577: LD_ADDR_VAR 0 13
24581: PUSH
24582: LD_VAR 0 6
24586: PUSH
24587: LD_VAR 0 8
24591: ARRAY
24592: ST_TO_ADDR
// if x = - 1 then
24593: LD_VAR 0 13
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: EQUAL
24602: IFFALSE 24811
// begin for j in f do
24604: LD_ADDR_VAR 0 9
24608: PUSH
24609: LD_VAR 0 12
24613: PUSH
24614: FOR_IN
24615: IFFALSE 24807
// repeat InitHc ;
24617: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24621: LD_VAR 0 9
24625: PPUSH
24626: CALL_OW 266
24630: PUSH
24631: LD_INT 5
24633: EQUAL
24634: IFFALSE 24704
// begin if UnitsInside ( j ) < 3 then
24636: LD_VAR 0 9
24640: PPUSH
24641: CALL_OW 313
24645: PUSH
24646: LD_INT 3
24648: LESS
24649: IFFALSE 24685
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24651: LD_INT 0
24653: PPUSH
24654: LD_INT 5
24656: PUSH
24657: LD_INT 8
24659: PUSH
24660: LD_INT 9
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: PUSH
24668: LD_VAR 0 17
24672: ARRAY
24673: PPUSH
24674: LD_VAR 0 4
24678: PPUSH
24679: CALL_OW 380
24683: GO 24702
// PrepareHuman ( false , i , skill ) ;
24685: LD_INT 0
24687: PPUSH
24688: LD_VAR 0 8
24692: PPUSH
24693: LD_VAR 0 4
24697: PPUSH
24698: CALL_OW 380
// end else
24702: GO 24721
// PrepareHuman ( false , i , skill ) ;
24704: LD_INT 0
24706: PPUSH
24707: LD_VAR 0 8
24711: PPUSH
24712: LD_VAR 0 4
24716: PPUSH
24717: CALL_OW 380
// un := CreateHuman ;
24721: LD_ADDR_VAR 0 14
24725: PUSH
24726: CALL_OW 44
24730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24731: LD_ADDR_VAR 0 7
24735: PUSH
24736: LD_VAR 0 7
24740: PPUSH
24741: LD_INT 1
24743: PPUSH
24744: LD_VAR 0 14
24748: PPUSH
24749: CALL_OW 2
24753: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24754: LD_VAR 0 14
24758: PPUSH
24759: LD_VAR 0 9
24763: PPUSH
24764: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24768: LD_VAR 0 9
24772: PPUSH
24773: CALL_OW 313
24777: PUSH
24778: LD_INT 6
24780: EQUAL
24781: PUSH
24782: LD_VAR 0 9
24786: PPUSH
24787: CALL_OW 266
24791: PUSH
24792: LD_INT 32
24794: PUSH
24795: LD_INT 31
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: IN
24802: OR
24803: IFFALSE 24617
24805: GO 24614
24807: POP
24808: POP
// end else
24809: GO 25191
// for j = 1 to x do
24811: LD_ADDR_VAR 0 9
24815: PUSH
24816: DOUBLE
24817: LD_INT 1
24819: DEC
24820: ST_TO_ADDR
24821: LD_VAR 0 13
24825: PUSH
24826: FOR_TO
24827: IFFALSE 25189
// begin InitHc ;
24829: CALL_OW 19
// if not f then
24833: LD_VAR 0 12
24837: NOT
24838: IFFALSE 24927
// begin PrepareHuman ( false , i , skill ) ;
24840: LD_INT 0
24842: PPUSH
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_VAR 0 4
24852: PPUSH
24853: CALL_OW 380
// un := CreateHuman ;
24857: LD_ADDR_VAR 0 14
24861: PUSH
24862: CALL_OW 44
24866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24867: LD_ADDR_VAR 0 7
24871: PUSH
24872: LD_VAR 0 7
24876: PPUSH
24877: LD_INT 1
24879: PPUSH
24880: LD_VAR 0 14
24884: PPUSH
24885: CALL_OW 2
24889: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24890: LD_VAR 0 14
24894: PPUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 250
24904: PPUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 251
24914: PPUSH
24915: LD_INT 10
24917: PPUSH
24918: LD_INT 0
24920: PPUSH
24921: CALL_OW 50
// continue ;
24925: GO 24826
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24927: LD_VAR 0 12
24931: PUSH
24932: LD_INT 1
24934: ARRAY
24935: PPUSH
24936: CALL_OW 313
24940: PUSH
24941: LD_VAR 0 12
24945: PUSH
24946: LD_INT 1
24948: ARRAY
24949: PPUSH
24950: CALL_OW 266
24954: PUSH
24955: LD_INT 32
24957: PUSH
24958: LD_INT 31
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: IN
24965: AND
24966: PUSH
24967: LD_VAR 0 12
24971: PUSH
24972: LD_INT 1
24974: ARRAY
24975: PPUSH
24976: CALL_OW 313
24980: PUSH
24981: LD_INT 6
24983: EQUAL
24984: OR
24985: IFFALSE 25005
// f := Delete ( f , 1 ) ;
24987: LD_ADDR_VAR 0 12
24991: PUSH
24992: LD_VAR 0 12
24996: PPUSH
24997: LD_INT 1
24999: PPUSH
25000: CALL_OW 3
25004: ST_TO_ADDR
// if not f then
25005: LD_VAR 0 12
25009: NOT
25010: IFFALSE 25028
// begin x := x + 2 ;
25012: LD_ADDR_VAR 0 13
25016: PUSH
25017: LD_VAR 0 13
25021: PUSH
25022: LD_INT 2
25024: PLUS
25025: ST_TO_ADDR
// continue ;
25026: GO 24826
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25028: LD_VAR 0 12
25032: PUSH
25033: LD_INT 1
25035: ARRAY
25036: PPUSH
25037: CALL_OW 266
25041: PUSH
25042: LD_INT 5
25044: EQUAL
25045: IFFALSE 25119
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25047: LD_VAR 0 12
25051: PUSH
25052: LD_INT 1
25054: ARRAY
25055: PPUSH
25056: CALL_OW 313
25060: PUSH
25061: LD_INT 3
25063: LESS
25064: IFFALSE 25100
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25066: LD_INT 0
25068: PPUSH
25069: LD_INT 5
25071: PUSH
25072: LD_INT 8
25074: PUSH
25075: LD_INT 9
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: PUSH
25083: LD_VAR 0 17
25087: ARRAY
25088: PPUSH
25089: LD_VAR 0 4
25093: PPUSH
25094: CALL_OW 380
25098: GO 25117
// PrepareHuman ( false , i , skill ) ;
25100: LD_INT 0
25102: PPUSH
25103: LD_VAR 0 8
25107: PPUSH
25108: LD_VAR 0 4
25112: PPUSH
25113: CALL_OW 380
// end else
25117: GO 25136
// PrepareHuman ( false , i , skill ) ;
25119: LD_INT 0
25121: PPUSH
25122: LD_VAR 0 8
25126: PPUSH
25127: LD_VAR 0 4
25131: PPUSH
25132: CALL_OW 380
// un := CreateHuman ;
25136: LD_ADDR_VAR 0 14
25140: PUSH
25141: CALL_OW 44
25145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25146: LD_ADDR_VAR 0 7
25150: PUSH
25151: LD_VAR 0 7
25155: PPUSH
25156: LD_INT 1
25158: PPUSH
25159: LD_VAR 0 14
25163: PPUSH
25164: CALL_OW 2
25168: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25169: LD_VAR 0 14
25173: PPUSH
25174: LD_VAR 0 12
25178: PUSH
25179: LD_INT 1
25181: ARRAY
25182: PPUSH
25183: CALL_OW 52
// end ;
25187: GO 24826
25189: POP
25190: POP
// end ;
25191: GO 24128
25193: POP
25194: POP
// result := result ^ buildings ;
25195: LD_ADDR_VAR 0 7
25199: PUSH
25200: LD_VAR 0 7
25204: PUSH
25205: LD_VAR 0 18
25209: ADD
25210: ST_TO_ADDR
// end else
25211: GO 25354
// begin for i = 1 to personel do
25213: LD_ADDR_VAR 0 8
25217: PUSH
25218: DOUBLE
25219: LD_INT 1
25221: DEC
25222: ST_TO_ADDR
25223: LD_VAR 0 6
25227: PUSH
25228: FOR_TO
25229: IFFALSE 25352
// begin if i > 4 then
25231: LD_VAR 0 8
25235: PUSH
25236: LD_INT 4
25238: GREATER
25239: IFFALSE 25243
// break ;
25241: GO 25352
// x := personel [ i ] ;
25243: LD_ADDR_VAR 0 13
25247: PUSH
25248: LD_VAR 0 6
25252: PUSH
25253: LD_VAR 0 8
25257: ARRAY
25258: ST_TO_ADDR
// if x = - 1 then
25259: LD_VAR 0 13
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: EQUAL
25268: IFFALSE 25272
// continue ;
25270: GO 25228
// PrepareHuman ( false , i , skill ) ;
25272: LD_INT 0
25274: PPUSH
25275: LD_VAR 0 8
25279: PPUSH
25280: LD_VAR 0 4
25284: PPUSH
25285: CALL_OW 380
// un := CreateHuman ;
25289: LD_ADDR_VAR 0 14
25293: PUSH
25294: CALL_OW 44
25298: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25299: LD_VAR 0 14
25303: PPUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 250
25313: PPUSH
25314: LD_VAR 0 1
25318: PPUSH
25319: CALL_OW 251
25323: PPUSH
25324: LD_INT 10
25326: PPUSH
25327: LD_INT 0
25329: PPUSH
25330: CALL_OW 50
// result := result ^ un ;
25334: LD_ADDR_VAR 0 7
25338: PUSH
25339: LD_VAR 0 7
25343: PUSH
25344: LD_VAR 0 14
25348: ADD
25349: ST_TO_ADDR
// end ;
25350: GO 25228
25352: POP
25353: POP
// end ; end ;
25354: LD_VAR 0 7
25358: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25359: LD_INT 0
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
25367: PPUSH
25368: PPUSH
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
// result := false ;
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: LD_INT 0
25384: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25385: LD_VAR 0 1
25389: NOT
25390: PUSH
25391: LD_VAR 0 1
25395: PPUSH
25396: CALL_OW 266
25400: PUSH
25401: LD_INT 32
25403: PUSH
25404: LD_INT 33
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: IN
25411: NOT
25412: OR
25413: IFFALSE 25417
// exit ;
25415: GO 26526
// nat := GetNation ( tower ) ;
25417: LD_ADDR_VAR 0 12
25421: PUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 248
25431: ST_TO_ADDR
// side := GetSide ( tower ) ;
25432: LD_ADDR_VAR 0 16
25436: PUSH
25437: LD_VAR 0 1
25441: PPUSH
25442: CALL_OW 255
25446: ST_TO_ADDR
// x := GetX ( tower ) ;
25447: LD_ADDR_VAR 0 10
25451: PUSH
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 250
25461: ST_TO_ADDR
// y := GetY ( tower ) ;
25462: LD_ADDR_VAR 0 11
25466: PUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 251
25476: ST_TO_ADDR
// if not x or not y then
25477: LD_VAR 0 10
25481: NOT
25482: PUSH
25483: LD_VAR 0 11
25487: NOT
25488: OR
25489: IFFALSE 25493
// exit ;
25491: GO 26526
// weapon := 0 ;
25493: LD_ADDR_VAR 0 18
25497: PUSH
25498: LD_INT 0
25500: ST_TO_ADDR
// fac_list := [ ] ;
25501: LD_ADDR_VAR 0 17
25505: PUSH
25506: EMPTY
25507: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25508: LD_ADDR_VAR 0 6
25512: PUSH
25513: LD_VAR 0 1
25517: PPUSH
25518: CALL_OW 274
25522: PPUSH
25523: LD_VAR 0 2
25527: PPUSH
25528: LD_INT 0
25530: PPUSH
25531: CALL 23097 0 3
25535: PPUSH
25536: LD_INT 30
25538: PUSH
25539: LD_INT 3
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 72
25550: ST_TO_ADDR
// if not factories then
25551: LD_VAR 0 6
25555: NOT
25556: IFFALSE 25560
// exit ;
25558: GO 26526
// for i in factories do
25560: LD_ADDR_VAR 0 8
25564: PUSH
25565: LD_VAR 0 6
25569: PUSH
25570: FOR_IN
25571: IFFALSE 25596
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25573: LD_ADDR_VAR 0 17
25577: PUSH
25578: LD_VAR 0 17
25582: PUSH
25583: LD_VAR 0 8
25587: PPUSH
25588: CALL_OW 478
25592: UNION
25593: ST_TO_ADDR
25594: GO 25570
25596: POP
25597: POP
// if not fac_list then
25598: LD_VAR 0 17
25602: NOT
25603: IFFALSE 25607
// exit ;
25605: GO 26526
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25607: LD_ADDR_VAR 0 5
25611: PUSH
25612: LD_INT 4
25614: PUSH
25615: LD_INT 5
25617: PUSH
25618: LD_INT 9
25620: PUSH
25621: LD_INT 10
25623: PUSH
25624: LD_INT 6
25626: PUSH
25627: LD_INT 7
25629: PUSH
25630: LD_INT 11
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 27
25644: PUSH
25645: LD_INT 28
25647: PUSH
25648: LD_INT 26
25650: PUSH
25651: LD_INT 30
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 43
25662: PUSH
25663: LD_INT 44
25665: PUSH
25666: LD_INT 46
25668: PUSH
25669: LD_INT 45
25671: PUSH
25672: LD_INT 47
25674: PUSH
25675: LD_INT 49
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: LD_VAR 0 12
25695: ARRAY
25696: ST_TO_ADDR
// list := list isect fac_list ;
25697: LD_ADDR_VAR 0 5
25701: PUSH
25702: LD_VAR 0 5
25706: PUSH
25707: LD_VAR 0 17
25711: ISECT
25712: ST_TO_ADDR
// if not list then
25713: LD_VAR 0 5
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 26526
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25722: LD_VAR 0 12
25726: PUSH
25727: LD_INT 3
25729: EQUAL
25730: PUSH
25731: LD_INT 49
25733: PUSH
25734: LD_VAR 0 5
25738: IN
25739: AND
25740: PUSH
25741: LD_INT 31
25743: PPUSH
25744: LD_VAR 0 16
25748: PPUSH
25749: CALL_OW 321
25753: PUSH
25754: LD_INT 2
25756: EQUAL
25757: AND
25758: IFFALSE 25818
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25760: LD_INT 22
25762: PUSH
25763: LD_VAR 0 16
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 35
25774: PUSH
25775: LD_INT 49
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 91
25784: PUSH
25785: LD_VAR 0 1
25789: PUSH
25790: LD_INT 10
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: PPUSH
25803: CALL_OW 69
25807: NOT
25808: IFFALSE 25818
// weapon := ru_time_lapser ;
25810: LD_ADDR_VAR 0 18
25814: PUSH
25815: LD_INT 49
25817: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25818: LD_VAR 0 12
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: IN
25833: PUSH
25834: LD_INT 11
25836: PUSH
25837: LD_VAR 0 5
25841: IN
25842: PUSH
25843: LD_INT 30
25845: PUSH
25846: LD_VAR 0 5
25850: IN
25851: OR
25852: AND
25853: PUSH
25854: LD_INT 6
25856: PPUSH
25857: LD_VAR 0 16
25861: PPUSH
25862: CALL_OW 321
25866: PUSH
25867: LD_INT 2
25869: EQUAL
25870: AND
25871: IFFALSE 26036
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25873: LD_INT 22
25875: PUSH
25876: LD_VAR 0 16
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 35
25890: PUSH
25891: LD_INT 11
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 35
25900: PUSH
25901: LD_INT 30
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 91
25915: PUSH
25916: LD_VAR 0 1
25920: PUSH
25921: LD_INT 18
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: NOT
25939: PUSH
25940: LD_INT 22
25942: PUSH
25943: LD_VAR 0 16
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 30
25957: PUSH
25958: LD_INT 32
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 30
25967: PUSH
25968: LD_INT 33
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 91
25982: PUSH
25983: LD_VAR 0 1
25987: PUSH
25988: LD_INT 12
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: PPUSH
26004: CALL_OW 69
26008: PUSH
26009: LD_INT 2
26011: GREATER
26012: AND
26013: IFFALSE 26036
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26015: LD_ADDR_VAR 0 18
26019: PUSH
26020: LD_INT 11
26022: PUSH
26023: LD_INT 30
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_VAR 0 12
26034: ARRAY
26035: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26036: LD_VAR 0 18
26040: NOT
26041: PUSH
26042: LD_INT 40
26044: PPUSH
26045: LD_VAR 0 16
26049: PPUSH
26050: CALL_OW 321
26054: PUSH
26055: LD_INT 2
26057: EQUAL
26058: AND
26059: PUSH
26060: LD_INT 7
26062: PUSH
26063: LD_VAR 0 5
26067: IN
26068: PUSH
26069: LD_INT 28
26071: PUSH
26072: LD_VAR 0 5
26076: IN
26077: OR
26078: PUSH
26079: LD_INT 45
26081: PUSH
26082: LD_VAR 0 5
26086: IN
26087: OR
26088: AND
26089: IFFALSE 26343
// begin hex := GetHexInfo ( x , y ) ;
26091: LD_ADDR_VAR 0 4
26095: PUSH
26096: LD_VAR 0 10
26100: PPUSH
26101: LD_VAR 0 11
26105: PPUSH
26106: CALL_OW 546
26110: ST_TO_ADDR
// if hex [ 1 ] then
26111: LD_VAR 0 4
26115: PUSH
26116: LD_INT 1
26118: ARRAY
26119: IFFALSE 26123
// exit ;
26121: GO 26526
// height := hex [ 2 ] ;
26123: LD_ADDR_VAR 0 15
26127: PUSH
26128: LD_VAR 0 4
26132: PUSH
26133: LD_INT 2
26135: ARRAY
26136: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26137: LD_ADDR_VAR 0 14
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 5
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: ST_TO_ADDR
// for i in tmp do
26160: LD_ADDR_VAR 0 8
26164: PUSH
26165: LD_VAR 0 14
26169: PUSH
26170: FOR_IN
26171: IFFALSE 26341
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26173: LD_ADDR_VAR 0 9
26177: PUSH
26178: LD_VAR 0 10
26182: PPUSH
26183: LD_VAR 0 8
26187: PPUSH
26188: LD_INT 5
26190: PPUSH
26191: CALL_OW 272
26195: PUSH
26196: LD_VAR 0 11
26200: PPUSH
26201: LD_VAR 0 8
26205: PPUSH
26206: LD_INT 5
26208: PPUSH
26209: CALL_OW 273
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26218: LD_VAR 0 9
26222: PUSH
26223: LD_INT 1
26225: ARRAY
26226: PPUSH
26227: LD_VAR 0 9
26231: PUSH
26232: LD_INT 2
26234: ARRAY
26235: PPUSH
26236: CALL_OW 488
26240: IFFALSE 26339
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26242: LD_ADDR_VAR 0 4
26246: PUSH
26247: LD_VAR 0 9
26251: PUSH
26252: LD_INT 1
26254: ARRAY
26255: PPUSH
26256: LD_VAR 0 9
26260: PUSH
26261: LD_INT 2
26263: ARRAY
26264: PPUSH
26265: CALL_OW 546
26269: ST_TO_ADDR
// if hex [ 1 ] then
26270: LD_VAR 0 4
26274: PUSH
26275: LD_INT 1
26277: ARRAY
26278: IFFALSE 26282
// continue ;
26280: GO 26170
// h := hex [ 2 ] ;
26282: LD_ADDR_VAR 0 13
26286: PUSH
26287: LD_VAR 0 4
26291: PUSH
26292: LD_INT 2
26294: ARRAY
26295: ST_TO_ADDR
// if h + 7 < height then
26296: LD_VAR 0 13
26300: PUSH
26301: LD_INT 7
26303: PLUS
26304: PUSH
26305: LD_VAR 0 15
26309: LESS
26310: IFFALSE 26339
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26312: LD_ADDR_VAR 0 18
26316: PUSH
26317: LD_INT 7
26319: PUSH
26320: LD_INT 28
26322: PUSH
26323: LD_INT 45
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: LIST
26330: PUSH
26331: LD_VAR 0 12
26335: ARRAY
26336: ST_TO_ADDR
// break ;
26337: GO 26341
// end ; end ; end ;
26339: GO 26170
26341: POP
26342: POP
// end ; if not weapon then
26343: LD_VAR 0 18
26347: NOT
26348: IFFALSE 26408
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26350: LD_ADDR_VAR 0 5
26354: PUSH
26355: LD_VAR 0 5
26359: PUSH
26360: LD_INT 11
26362: PUSH
26363: LD_INT 30
26365: PUSH
26366: LD_INT 49
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: DIFF
26374: ST_TO_ADDR
// if not list then
26375: LD_VAR 0 5
26379: NOT
26380: IFFALSE 26384
// exit ;
26382: GO 26526
// weapon := list [ rand ( 1 , list ) ] ;
26384: LD_ADDR_VAR 0 18
26388: PUSH
26389: LD_VAR 0 5
26393: PUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_VAR 0 5
26401: PPUSH
26402: CALL_OW 12
26406: ARRAY
26407: ST_TO_ADDR
// end ; if weapon then
26408: LD_VAR 0 18
26412: IFFALSE 26526
// begin tmp := CostOfWeapon ( weapon ) ;
26414: LD_ADDR_VAR 0 14
26418: PUSH
26419: LD_VAR 0 18
26423: PPUSH
26424: CALL_OW 451
26428: ST_TO_ADDR
// j := GetBase ( tower ) ;
26429: LD_ADDR_VAR 0 9
26433: PUSH
26434: LD_VAR 0 1
26438: PPUSH
26439: CALL_OW 274
26443: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26444: LD_VAR 0 9
26448: PPUSH
26449: LD_INT 1
26451: PPUSH
26452: CALL_OW 275
26456: PUSH
26457: LD_VAR 0 14
26461: PUSH
26462: LD_INT 1
26464: ARRAY
26465: GREATEREQUAL
26466: PUSH
26467: LD_VAR 0 9
26471: PPUSH
26472: LD_INT 2
26474: PPUSH
26475: CALL_OW 275
26479: PUSH
26480: LD_VAR 0 14
26484: PUSH
26485: LD_INT 2
26487: ARRAY
26488: GREATEREQUAL
26489: AND
26490: PUSH
26491: LD_VAR 0 9
26495: PPUSH
26496: LD_INT 3
26498: PPUSH
26499: CALL_OW 275
26503: PUSH
26504: LD_VAR 0 14
26508: PUSH
26509: LD_INT 3
26511: ARRAY
26512: GREATEREQUAL
26513: AND
26514: IFFALSE 26526
// result := weapon ;
26516: LD_ADDR_VAR 0 3
26520: PUSH
26521: LD_VAR 0 18
26525: ST_TO_ADDR
// end ; end ;
26526: LD_VAR 0 3
26530: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26531: LD_INT 0
26533: PPUSH
26534: PPUSH
// result := true ;
26535: LD_ADDR_VAR 0 3
26539: PUSH
26540: LD_INT 1
26542: ST_TO_ADDR
// if array1 = array2 then
26543: LD_VAR 0 1
26547: PUSH
26548: LD_VAR 0 2
26552: EQUAL
26553: IFFALSE 26613
// begin for i = 1 to array1 do
26555: LD_ADDR_VAR 0 4
26559: PUSH
26560: DOUBLE
26561: LD_INT 1
26563: DEC
26564: ST_TO_ADDR
26565: LD_VAR 0 1
26569: PUSH
26570: FOR_TO
26571: IFFALSE 26609
// if array1 [ i ] <> array2 [ i ] then
26573: LD_VAR 0 1
26577: PUSH
26578: LD_VAR 0 4
26582: ARRAY
26583: PUSH
26584: LD_VAR 0 2
26588: PUSH
26589: LD_VAR 0 4
26593: ARRAY
26594: NONEQUAL
26595: IFFALSE 26607
// begin result := false ;
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 0
26604: ST_TO_ADDR
// break ;
26605: GO 26609
// end ;
26607: GO 26570
26609: POP
26610: POP
// end else
26611: GO 26621
// result := false ;
26613: LD_ADDR_VAR 0 3
26617: PUSH
26618: LD_INT 0
26620: ST_TO_ADDR
// end ;
26621: LD_VAR 0 3
26625: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
// if not array1 or not array2 then
26630: LD_VAR 0 1
26634: NOT
26635: PUSH
26636: LD_VAR 0 2
26640: NOT
26641: OR
26642: IFFALSE 26646
// exit ;
26644: GO 26710
// result := true ;
26646: LD_ADDR_VAR 0 3
26650: PUSH
26651: LD_INT 1
26653: ST_TO_ADDR
// for i = 1 to array1 do
26654: LD_ADDR_VAR 0 4
26658: PUSH
26659: DOUBLE
26660: LD_INT 1
26662: DEC
26663: ST_TO_ADDR
26664: LD_VAR 0 1
26668: PUSH
26669: FOR_TO
26670: IFFALSE 26708
// if array1 [ i ] <> array2 [ i ] then
26672: LD_VAR 0 1
26676: PUSH
26677: LD_VAR 0 4
26681: ARRAY
26682: PUSH
26683: LD_VAR 0 2
26687: PUSH
26688: LD_VAR 0 4
26692: ARRAY
26693: NONEQUAL
26694: IFFALSE 26706
// begin result := false ;
26696: LD_ADDR_VAR 0 3
26700: PUSH
26701: LD_INT 0
26703: ST_TO_ADDR
// break ;
26704: GO 26708
// end ;
26706: GO 26669
26708: POP
26709: POP
// end ;
26710: LD_VAR 0 3
26714: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
26719: PPUSH
// pom := GetBase ( fac ) ;
26720: LD_ADDR_VAR 0 5
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: CALL_OW 274
26734: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26735: LD_ADDR_VAR 0 4
26739: PUSH
26740: LD_VAR 0 2
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: LD_VAR 0 2
26753: PUSH
26754: LD_INT 2
26756: ARRAY
26757: PPUSH
26758: LD_VAR 0 2
26762: PUSH
26763: LD_INT 3
26765: ARRAY
26766: PPUSH
26767: LD_VAR 0 2
26771: PUSH
26772: LD_INT 4
26774: ARRAY
26775: PPUSH
26776: CALL_OW 449
26780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26781: LD_ADDR_VAR 0 3
26785: PUSH
26786: LD_VAR 0 5
26790: PPUSH
26791: LD_INT 1
26793: PPUSH
26794: CALL_OW 275
26798: PUSH
26799: LD_VAR 0 4
26803: PUSH
26804: LD_INT 1
26806: ARRAY
26807: GREATEREQUAL
26808: PUSH
26809: LD_VAR 0 5
26813: PPUSH
26814: LD_INT 2
26816: PPUSH
26817: CALL_OW 275
26821: PUSH
26822: LD_VAR 0 4
26826: PUSH
26827: LD_INT 2
26829: ARRAY
26830: GREATEREQUAL
26831: AND
26832: PUSH
26833: LD_VAR 0 5
26837: PPUSH
26838: LD_INT 3
26840: PPUSH
26841: CALL_OW 275
26845: PUSH
26846: LD_VAR 0 4
26850: PUSH
26851: LD_INT 3
26853: ARRAY
26854: GREATEREQUAL
26855: AND
26856: ST_TO_ADDR
// end ;
26857: LD_VAR 0 3
26861: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26862: LD_INT 0
26864: PPUSH
26865: PPUSH
26866: PPUSH
26867: PPUSH
// pom := GetBase ( building ) ;
26868: LD_ADDR_VAR 0 3
26872: PUSH
26873: LD_VAR 0 1
26877: PPUSH
26878: CALL_OW 274
26882: ST_TO_ADDR
// if not pom then
26883: LD_VAR 0 3
26887: NOT
26888: IFFALSE 26892
// exit ;
26890: GO 27062
// btype := GetBType ( building ) ;
26892: LD_ADDR_VAR 0 5
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 266
26906: ST_TO_ADDR
// if btype = b_armoury then
26907: LD_VAR 0 5
26911: PUSH
26912: LD_INT 4
26914: EQUAL
26915: IFFALSE 26925
// btype := b_barracks ;
26917: LD_ADDR_VAR 0 5
26921: PUSH
26922: LD_INT 5
26924: ST_TO_ADDR
// if btype = b_depot then
26925: LD_VAR 0 5
26929: PUSH
26930: LD_INT 0
26932: EQUAL
26933: IFFALSE 26943
// btype := b_warehouse ;
26935: LD_ADDR_VAR 0 5
26939: PUSH
26940: LD_INT 1
26942: ST_TO_ADDR
// if btype = b_workshop then
26943: LD_VAR 0 5
26947: PUSH
26948: LD_INT 2
26950: EQUAL
26951: IFFALSE 26961
// btype := b_factory ;
26953: LD_ADDR_VAR 0 5
26957: PUSH
26958: LD_INT 3
26960: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26961: LD_ADDR_VAR 0 4
26965: PUSH
26966: LD_VAR 0 5
26970: PPUSH
26971: LD_VAR 0 1
26975: PPUSH
26976: CALL_OW 248
26980: PPUSH
26981: CALL_OW 450
26985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26986: LD_ADDR_VAR 0 2
26990: PUSH
26991: LD_VAR 0 3
26995: PPUSH
26996: LD_INT 1
26998: PPUSH
26999: CALL_OW 275
27003: PUSH
27004: LD_VAR 0 4
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: GREATEREQUAL
27013: PUSH
27014: LD_VAR 0 3
27018: PPUSH
27019: LD_INT 2
27021: PPUSH
27022: CALL_OW 275
27026: PUSH
27027: LD_VAR 0 4
27031: PUSH
27032: LD_INT 2
27034: ARRAY
27035: GREATEREQUAL
27036: AND
27037: PUSH
27038: LD_VAR 0 3
27042: PPUSH
27043: LD_INT 3
27045: PPUSH
27046: CALL_OW 275
27050: PUSH
27051: LD_VAR 0 4
27055: PUSH
27056: LD_INT 3
27058: ARRAY
27059: GREATEREQUAL
27060: AND
27061: ST_TO_ADDR
// end ;
27062: LD_VAR 0 2
27066: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27067: LD_INT 0
27069: PPUSH
27070: PPUSH
27071: PPUSH
// pom := GetBase ( building ) ;
27072: LD_ADDR_VAR 0 4
27076: PUSH
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 274
27086: ST_TO_ADDR
// if not pom then
27087: LD_VAR 0 4
27091: NOT
27092: IFFALSE 27096
// exit ;
27094: GO 27197
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27096: LD_ADDR_VAR 0 5
27100: PUSH
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 248
27115: PPUSH
27116: CALL_OW 450
27120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27121: LD_ADDR_VAR 0 3
27125: PUSH
27126: LD_VAR 0 4
27130: PPUSH
27131: LD_INT 1
27133: PPUSH
27134: CALL_OW 275
27138: PUSH
27139: LD_VAR 0 5
27143: PUSH
27144: LD_INT 1
27146: ARRAY
27147: GREATEREQUAL
27148: PUSH
27149: LD_VAR 0 4
27153: PPUSH
27154: LD_INT 2
27156: PPUSH
27157: CALL_OW 275
27161: PUSH
27162: LD_VAR 0 5
27166: PUSH
27167: LD_INT 2
27169: ARRAY
27170: GREATEREQUAL
27171: AND
27172: PUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: LD_INT 3
27180: PPUSH
27181: CALL_OW 275
27185: PUSH
27186: LD_VAR 0 5
27190: PUSH
27191: LD_INT 3
27193: ARRAY
27194: GREATEREQUAL
27195: AND
27196: ST_TO_ADDR
// end ;
27197: LD_VAR 0 3
27201: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27202: LD_INT 0
27204: PPUSH
27205: PPUSH
27206: PPUSH
27207: PPUSH
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
27214: PPUSH
// result := false ;
27215: LD_ADDR_VAR 0 8
27219: PUSH
27220: LD_INT 0
27222: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27223: LD_VAR 0 5
27227: NOT
27228: PUSH
27229: LD_VAR 0 1
27233: NOT
27234: OR
27235: PUSH
27236: LD_VAR 0 2
27240: NOT
27241: OR
27242: PUSH
27243: LD_VAR 0 3
27247: NOT
27248: OR
27249: IFFALSE 27253
// exit ;
27251: GO 28067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27253: LD_ADDR_VAR 0 14
27257: PUSH
27258: LD_VAR 0 1
27262: PPUSH
27263: LD_VAR 0 2
27267: PPUSH
27268: LD_VAR 0 3
27272: PPUSH
27273: LD_VAR 0 4
27277: PPUSH
27278: LD_VAR 0 5
27282: PUSH
27283: LD_INT 1
27285: ARRAY
27286: PPUSH
27287: CALL_OW 248
27291: PPUSH
27292: LD_INT 0
27294: PPUSH
27295: CALL 29304 0 6
27299: ST_TO_ADDR
// if not hexes then
27300: LD_VAR 0 14
27304: NOT
27305: IFFALSE 27309
// exit ;
27307: GO 28067
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27309: LD_ADDR_VAR 0 17
27313: PUSH
27314: LD_VAR 0 5
27318: PPUSH
27319: LD_INT 22
27321: PUSH
27322: LD_VAR 0 13
27326: PPUSH
27327: CALL_OW 255
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 30
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 30
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PPUSH
27368: CALL_OW 72
27372: ST_TO_ADDR
// for i = 1 to hexes do
27373: LD_ADDR_VAR 0 9
27377: PUSH
27378: DOUBLE
27379: LD_INT 1
27381: DEC
27382: ST_TO_ADDR
27383: LD_VAR 0 14
27387: PUSH
27388: FOR_TO
27389: IFFALSE 28065
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27391: LD_ADDR_VAR 0 13
27395: PUSH
27396: LD_VAR 0 14
27400: PUSH
27401: LD_VAR 0 9
27405: ARRAY
27406: PUSH
27407: LD_INT 1
27409: ARRAY
27410: PPUSH
27411: LD_VAR 0 14
27415: PUSH
27416: LD_VAR 0 9
27420: ARRAY
27421: PUSH
27422: LD_INT 2
27424: ARRAY
27425: PPUSH
27426: CALL_OW 428
27430: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27431: LD_VAR 0 14
27435: PUSH
27436: LD_VAR 0 9
27440: ARRAY
27441: PUSH
27442: LD_INT 1
27444: ARRAY
27445: PPUSH
27446: LD_VAR 0 14
27450: PUSH
27451: LD_VAR 0 9
27455: ARRAY
27456: PUSH
27457: LD_INT 2
27459: ARRAY
27460: PPUSH
27461: CALL_OW 351
27465: PUSH
27466: LD_VAR 0 14
27470: PUSH
27471: LD_VAR 0 9
27475: ARRAY
27476: PUSH
27477: LD_INT 1
27479: ARRAY
27480: PPUSH
27481: LD_VAR 0 14
27485: PUSH
27486: LD_VAR 0 9
27490: ARRAY
27491: PUSH
27492: LD_INT 2
27494: ARRAY
27495: PPUSH
27496: CALL_OW 488
27500: NOT
27501: OR
27502: PUSH
27503: LD_VAR 0 13
27507: PPUSH
27508: CALL_OW 247
27512: PUSH
27513: LD_INT 3
27515: EQUAL
27516: OR
27517: IFFALSE 27523
// exit ;
27519: POP
27520: POP
27521: GO 28067
// if not tmp then
27523: LD_VAR 0 13
27527: NOT
27528: IFFALSE 27532
// continue ;
27530: GO 27388
// result := true ;
27532: LD_ADDR_VAR 0 8
27536: PUSH
27537: LD_INT 1
27539: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27540: LD_VAR 0 6
27544: PUSH
27545: LD_VAR 0 13
27549: PPUSH
27550: CALL_OW 247
27554: PUSH
27555: LD_INT 2
27557: EQUAL
27558: AND
27559: PUSH
27560: LD_VAR 0 13
27564: PPUSH
27565: CALL_OW 263
27569: PUSH
27570: LD_INT 1
27572: EQUAL
27573: AND
27574: IFFALSE 27738
// begin if IsDrivenBy ( tmp ) then
27576: LD_VAR 0 13
27580: PPUSH
27581: CALL_OW 311
27585: IFFALSE 27589
// continue ;
27587: GO 27388
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27589: LD_VAR 0 6
27593: PPUSH
27594: LD_INT 3
27596: PUSH
27597: LD_INT 60
27599: PUSH
27600: EMPTY
27601: LIST
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 3
27609: PUSH
27610: LD_INT 55
27612: PUSH
27613: EMPTY
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PPUSH
27624: CALL_OW 72
27628: IFFALSE 27736
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27630: LD_ADDR_VAR 0 18
27634: PUSH
27635: LD_VAR 0 6
27639: PPUSH
27640: LD_INT 3
27642: PUSH
27643: LD_INT 60
27645: PUSH
27646: EMPTY
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 3
27655: PUSH
27656: LD_INT 55
27658: PUSH
27659: EMPTY
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PPUSH
27670: CALL_OW 72
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: ST_TO_ADDR
// if IsInUnit ( driver ) then
27679: LD_VAR 0 18
27683: PPUSH
27684: CALL_OW 310
27688: IFFALSE 27699
// ComExit ( driver ) ;
27690: LD_VAR 0 18
27694: PPUSH
27695: CALL 53009 0 1
// AddComEnterUnit ( driver , tmp ) ;
27699: LD_VAR 0 18
27703: PPUSH
27704: LD_VAR 0 13
27708: PPUSH
27709: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27713: LD_VAR 0 18
27717: PPUSH
27718: LD_VAR 0 7
27722: PPUSH
27723: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27727: LD_VAR 0 18
27731: PPUSH
27732: CALL_OW 181
// end ; continue ;
27736: GO 27388
// end ; if not cleaners or not tmp in cleaners then
27738: LD_VAR 0 6
27742: NOT
27743: PUSH
27744: LD_VAR 0 13
27748: PUSH
27749: LD_VAR 0 6
27753: IN
27754: NOT
27755: OR
27756: IFFALSE 28063
// begin if dep then
27758: LD_VAR 0 17
27762: IFFALSE 27898
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27764: LD_ADDR_VAR 0 16
27768: PUSH
27769: LD_VAR 0 17
27773: PUSH
27774: LD_INT 1
27776: ARRAY
27777: PPUSH
27778: CALL_OW 250
27782: PPUSH
27783: LD_VAR 0 17
27787: PUSH
27788: LD_INT 1
27790: ARRAY
27791: PPUSH
27792: CALL_OW 254
27796: PPUSH
27797: LD_INT 5
27799: PPUSH
27800: CALL_OW 272
27804: PUSH
27805: LD_VAR 0 17
27809: PUSH
27810: LD_INT 1
27812: ARRAY
27813: PPUSH
27814: CALL_OW 251
27818: PPUSH
27819: LD_VAR 0 17
27823: PUSH
27824: LD_INT 1
27826: ARRAY
27827: PPUSH
27828: CALL_OW 254
27832: PPUSH
27833: LD_INT 5
27835: PPUSH
27836: CALL_OW 273
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27845: LD_VAR 0 16
27849: PUSH
27850: LD_INT 1
27852: ARRAY
27853: PPUSH
27854: LD_VAR 0 16
27858: PUSH
27859: LD_INT 2
27861: ARRAY
27862: PPUSH
27863: CALL_OW 488
27867: IFFALSE 27898
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27869: LD_VAR 0 13
27873: PPUSH
27874: LD_VAR 0 16
27878: PUSH
27879: LD_INT 1
27881: ARRAY
27882: PPUSH
27883: LD_VAR 0 16
27887: PUSH
27888: LD_INT 2
27890: ARRAY
27891: PPUSH
27892: CALL_OW 111
// continue ;
27896: GO 27388
// end ; end ; r := GetDir ( tmp ) ;
27898: LD_ADDR_VAR 0 15
27902: PUSH
27903: LD_VAR 0 13
27907: PPUSH
27908: CALL_OW 254
27912: ST_TO_ADDR
// if r = 5 then
27913: LD_VAR 0 15
27917: PUSH
27918: LD_INT 5
27920: EQUAL
27921: IFFALSE 27931
// r := 0 ;
27923: LD_ADDR_VAR 0 15
27927: PUSH
27928: LD_INT 0
27930: ST_TO_ADDR
// for j = r to 5 do
27931: LD_ADDR_VAR 0 10
27935: PUSH
27936: DOUBLE
27937: LD_VAR 0 15
27941: DEC
27942: ST_TO_ADDR
27943: LD_INT 5
27945: PUSH
27946: FOR_TO
27947: IFFALSE 28061
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27949: LD_ADDR_VAR 0 11
27953: PUSH
27954: LD_VAR 0 13
27958: PPUSH
27959: CALL_OW 250
27963: PPUSH
27964: LD_VAR 0 10
27968: PPUSH
27969: LD_INT 2
27971: PPUSH
27972: CALL_OW 272
27976: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27977: LD_ADDR_VAR 0 12
27981: PUSH
27982: LD_VAR 0 13
27986: PPUSH
27987: CALL_OW 251
27991: PPUSH
27992: LD_VAR 0 10
27996: PPUSH
27997: LD_INT 2
27999: PPUSH
28000: CALL_OW 273
28004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28005: LD_VAR 0 11
28009: PPUSH
28010: LD_VAR 0 12
28014: PPUSH
28015: CALL_OW 488
28019: PUSH
28020: LD_VAR 0 11
28024: PPUSH
28025: LD_VAR 0 12
28029: PPUSH
28030: CALL_OW 428
28034: NOT
28035: AND
28036: IFFALSE 28059
// begin ComMoveXY ( tmp , _x , _y ) ;
28038: LD_VAR 0 13
28042: PPUSH
28043: LD_VAR 0 11
28047: PPUSH
28048: LD_VAR 0 12
28052: PPUSH
28053: CALL_OW 111
// break ;
28057: GO 28061
// end ; end ;
28059: GO 27946
28061: POP
28062: POP
// end ; end ;
28063: GO 27388
28065: POP
28066: POP
// end ;
28067: LD_VAR 0 8
28071: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28072: LD_INT 0
28074: PPUSH
// result := true ;
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: LD_INT 1
28082: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28083: LD_VAR 0 2
28087: PUSH
28088: LD_INT 24
28090: DOUBLE
28091: EQUAL
28092: IFTRUE 28102
28094: LD_INT 33
28096: DOUBLE
28097: EQUAL
28098: IFTRUE 28102
28100: GO 28127
28102: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_INT 32
28110: PPUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: CALL_OW 321
28120: PUSH
28121: LD_INT 2
28123: EQUAL
28124: ST_TO_ADDR
28125: GO 28447
28127: LD_INT 20
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28160
28135: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 6
28143: PPUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 321
28153: PUSH
28154: LD_INT 2
28156: EQUAL
28157: ST_TO_ADDR
28158: GO 28447
28160: LD_INT 22
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28174
28166: LD_INT 36
28168: DOUBLE
28169: EQUAL
28170: IFTRUE 28174
28172: GO 28199
28174: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28175: LD_ADDR_VAR 0 3
28179: PUSH
28180: LD_INT 15
28182: PPUSH
28183: LD_VAR 0 1
28187: PPUSH
28188: CALL_OW 321
28192: PUSH
28193: LD_INT 2
28195: EQUAL
28196: ST_TO_ADDR
28197: GO 28447
28199: LD_INT 30
28201: DOUBLE
28202: EQUAL
28203: IFTRUE 28207
28205: GO 28232
28207: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28208: LD_ADDR_VAR 0 3
28212: PUSH
28213: LD_INT 20
28215: PPUSH
28216: LD_VAR 0 1
28220: PPUSH
28221: CALL_OW 321
28225: PUSH
28226: LD_INT 2
28228: EQUAL
28229: ST_TO_ADDR
28230: GO 28447
28232: LD_INT 28
28234: DOUBLE
28235: EQUAL
28236: IFTRUE 28246
28238: LD_INT 21
28240: DOUBLE
28241: EQUAL
28242: IFTRUE 28246
28244: GO 28271
28246: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28247: LD_ADDR_VAR 0 3
28251: PUSH
28252: LD_INT 21
28254: PPUSH
28255: LD_VAR 0 1
28259: PPUSH
28260: CALL_OW 321
28264: PUSH
28265: LD_INT 2
28267: EQUAL
28268: ST_TO_ADDR
28269: GO 28447
28271: LD_INT 16
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28306
28279: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28280: LD_ADDR_VAR 0 3
28284: PUSH
28285: LD_EXP 117
28289: PPUSH
28290: LD_VAR 0 1
28294: PPUSH
28295: CALL_OW 321
28299: PUSH
28300: LD_INT 2
28302: EQUAL
28303: ST_TO_ADDR
28304: GO 28447
28306: LD_INT 19
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28320
28312: LD_INT 23
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28347
28320: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28321: LD_ADDR_VAR 0 3
28325: PUSH
28326: LD_EXP 116
28330: PPUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 321
28340: PUSH
28341: LD_INT 2
28343: EQUAL
28344: ST_TO_ADDR
28345: GO 28447
28347: LD_INT 17
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28355
28353: GO 28380
28355: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: LD_INT 39
28363: PPUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 321
28373: PUSH
28374: LD_INT 2
28376: EQUAL
28377: ST_TO_ADDR
28378: GO 28447
28380: LD_INT 18
28382: DOUBLE
28383: EQUAL
28384: IFTRUE 28388
28386: GO 28413
28388: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28389: LD_ADDR_VAR 0 3
28393: PUSH
28394: LD_INT 40
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 321
28406: PUSH
28407: LD_INT 2
28409: EQUAL
28410: ST_TO_ADDR
28411: GO 28447
28413: LD_INT 27
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28446
28421: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28422: LD_ADDR_VAR 0 3
28426: PUSH
28427: LD_INT 35
28429: PPUSH
28430: LD_VAR 0 1
28434: PPUSH
28435: CALL_OW 321
28439: PUSH
28440: LD_INT 2
28442: EQUAL
28443: ST_TO_ADDR
28444: GO 28447
28446: POP
// end ;
28447: LD_VAR 0 3
28451: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
28464: PPUSH
// result := false ;
28465: LD_ADDR_VAR 0 6
28469: PUSH
28470: LD_INT 0
28472: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28473: LD_VAR 0 1
28477: NOT
28478: PUSH
28479: LD_VAR 0 1
28483: PPUSH
28484: CALL_OW 266
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: IN
28499: NOT
28500: OR
28501: PUSH
28502: LD_VAR 0 2
28506: NOT
28507: OR
28508: PUSH
28509: LD_VAR 0 5
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 4
28528: PUSH
28529: LD_INT 5
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: IN
28540: NOT
28541: OR
28542: PUSH
28543: LD_VAR 0 3
28547: PPUSH
28548: LD_VAR 0 4
28552: PPUSH
28553: CALL_OW 488
28557: NOT
28558: OR
28559: IFFALSE 28563
// exit ;
28561: GO 29299
// side := GetSide ( depot ) ;
28563: LD_ADDR_VAR 0 9
28567: PUSH
28568: LD_VAR 0 1
28572: PPUSH
28573: CALL_OW 255
28577: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28578: LD_VAR 0 9
28582: PPUSH
28583: LD_VAR 0 2
28587: PPUSH
28588: CALL 28072 0 2
28592: NOT
28593: IFFALSE 28597
// exit ;
28595: GO 29299
// pom := GetBase ( depot ) ;
28597: LD_ADDR_VAR 0 10
28601: PUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 274
28611: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28612: LD_ADDR_VAR 0 11
28616: PUSH
28617: LD_VAR 0 2
28621: PPUSH
28622: LD_VAR 0 1
28626: PPUSH
28627: CALL_OW 248
28631: PPUSH
28632: CALL_OW 450
28636: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28637: LD_VAR 0 10
28641: PPUSH
28642: LD_INT 1
28644: PPUSH
28645: CALL_OW 275
28649: PUSH
28650: LD_VAR 0 11
28654: PUSH
28655: LD_INT 1
28657: ARRAY
28658: GREATEREQUAL
28659: PUSH
28660: LD_VAR 0 10
28664: PPUSH
28665: LD_INT 2
28667: PPUSH
28668: CALL_OW 275
28672: PUSH
28673: LD_VAR 0 11
28677: PUSH
28678: LD_INT 2
28680: ARRAY
28681: GREATEREQUAL
28682: AND
28683: PUSH
28684: LD_VAR 0 10
28688: PPUSH
28689: LD_INT 3
28691: PPUSH
28692: CALL_OW 275
28696: PUSH
28697: LD_VAR 0 11
28701: PUSH
28702: LD_INT 3
28704: ARRAY
28705: GREATEREQUAL
28706: AND
28707: NOT
28708: IFFALSE 28712
// exit ;
28710: GO 29299
// if GetBType ( depot ) = b_depot then
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 266
28721: PUSH
28722: LD_INT 0
28724: EQUAL
28725: IFFALSE 28737
// dist := 28 else
28727: LD_ADDR_VAR 0 14
28731: PUSH
28732: LD_INT 28
28734: ST_TO_ADDR
28735: GO 28745
// dist := 36 ;
28737: LD_ADDR_VAR 0 14
28741: PUSH
28742: LD_INT 36
28744: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28745: LD_VAR 0 1
28749: PPUSH
28750: LD_VAR 0 3
28754: PPUSH
28755: LD_VAR 0 4
28759: PPUSH
28760: CALL_OW 297
28764: PUSH
28765: LD_VAR 0 14
28769: GREATER
28770: IFFALSE 28774
// exit ;
28772: GO 29299
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28774: LD_ADDR_VAR 0 12
28778: PUSH
28779: LD_VAR 0 2
28783: PPUSH
28784: LD_VAR 0 3
28788: PPUSH
28789: LD_VAR 0 4
28793: PPUSH
28794: LD_VAR 0 5
28798: PPUSH
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 248
28808: PPUSH
28809: LD_INT 0
28811: PPUSH
28812: CALL 29304 0 6
28816: ST_TO_ADDR
// if not hexes then
28817: LD_VAR 0 12
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 29299
// hex := GetHexInfo ( x , y ) ;
28826: LD_ADDR_VAR 0 15
28830: PUSH
28831: LD_VAR 0 3
28835: PPUSH
28836: LD_VAR 0 4
28840: PPUSH
28841: CALL_OW 546
28845: ST_TO_ADDR
// if hex [ 1 ] then
28846: LD_VAR 0 15
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: IFFALSE 28858
// exit ;
28856: GO 29299
// height := hex [ 2 ] ;
28858: LD_ADDR_VAR 0 13
28862: PUSH
28863: LD_VAR 0 15
28867: PUSH
28868: LD_INT 2
28870: ARRAY
28871: ST_TO_ADDR
// for i = 1 to hexes do
28872: LD_ADDR_VAR 0 7
28876: PUSH
28877: DOUBLE
28878: LD_INT 1
28880: DEC
28881: ST_TO_ADDR
28882: LD_VAR 0 12
28886: PUSH
28887: FOR_TO
28888: IFFALSE 29218
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28890: LD_VAR 0 12
28894: PUSH
28895: LD_VAR 0 7
28899: ARRAY
28900: PUSH
28901: LD_INT 1
28903: ARRAY
28904: PPUSH
28905: LD_VAR 0 12
28909: PUSH
28910: LD_VAR 0 7
28914: ARRAY
28915: PUSH
28916: LD_INT 2
28918: ARRAY
28919: PPUSH
28920: CALL_OW 488
28924: NOT
28925: PUSH
28926: LD_VAR 0 12
28930: PUSH
28931: LD_VAR 0 7
28935: ARRAY
28936: PUSH
28937: LD_INT 1
28939: ARRAY
28940: PPUSH
28941: LD_VAR 0 12
28945: PUSH
28946: LD_VAR 0 7
28950: ARRAY
28951: PUSH
28952: LD_INT 2
28954: ARRAY
28955: PPUSH
28956: CALL_OW 428
28960: PUSH
28961: LD_INT 0
28963: GREATER
28964: OR
28965: PUSH
28966: LD_VAR 0 12
28970: PUSH
28971: LD_VAR 0 7
28975: ARRAY
28976: PUSH
28977: LD_INT 1
28979: ARRAY
28980: PPUSH
28981: LD_VAR 0 12
28985: PUSH
28986: LD_VAR 0 7
28990: ARRAY
28991: PUSH
28992: LD_INT 2
28994: ARRAY
28995: PPUSH
28996: CALL_OW 351
29000: OR
29001: IFFALSE 29007
// exit ;
29003: POP
29004: POP
29005: GO 29299
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29007: LD_ADDR_VAR 0 8
29011: PUSH
29012: LD_VAR 0 12
29016: PUSH
29017: LD_VAR 0 7
29021: ARRAY
29022: PUSH
29023: LD_INT 1
29025: ARRAY
29026: PPUSH
29027: LD_VAR 0 12
29031: PUSH
29032: LD_VAR 0 7
29036: ARRAY
29037: PUSH
29038: LD_INT 2
29040: ARRAY
29041: PPUSH
29042: CALL_OW 546
29046: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29047: LD_VAR 0 8
29051: PUSH
29052: LD_INT 1
29054: ARRAY
29055: PUSH
29056: LD_VAR 0 8
29060: PUSH
29061: LD_INT 2
29063: ARRAY
29064: PUSH
29065: LD_VAR 0 13
29069: PUSH
29070: LD_INT 2
29072: PLUS
29073: GREATER
29074: OR
29075: PUSH
29076: LD_VAR 0 8
29080: PUSH
29081: LD_INT 2
29083: ARRAY
29084: PUSH
29085: LD_VAR 0 13
29089: PUSH
29090: LD_INT 2
29092: MINUS
29093: LESS
29094: OR
29095: PUSH
29096: LD_VAR 0 8
29100: PUSH
29101: LD_INT 3
29103: ARRAY
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 8
29110: PUSH
29111: LD_INT 9
29113: PUSH
29114: LD_INT 10
29116: PUSH
29117: LD_INT 11
29119: PUSH
29120: LD_INT 12
29122: PUSH
29123: LD_INT 13
29125: PUSH
29126: LD_INT 16
29128: PUSH
29129: LD_INT 17
29131: PUSH
29132: LD_INT 18
29134: PUSH
29135: LD_INT 19
29137: PUSH
29138: LD_INT 20
29140: PUSH
29141: LD_INT 21
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: IN
29159: NOT
29160: OR
29161: PUSH
29162: LD_VAR 0 8
29166: PUSH
29167: LD_INT 5
29169: ARRAY
29170: NOT
29171: OR
29172: PUSH
29173: LD_VAR 0 8
29177: PUSH
29178: LD_INT 6
29180: ARRAY
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 7
29190: PUSH
29191: LD_INT 9
29193: PUSH
29194: LD_INT 10
29196: PUSH
29197: LD_INT 11
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: IN
29208: NOT
29209: OR
29210: IFFALSE 29216
// exit ;
29212: POP
29213: POP
29214: GO 29299
// end ;
29216: GO 28887
29218: POP
29219: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29220: LD_VAR 0 9
29224: PPUSH
29225: LD_VAR 0 3
29229: PPUSH
29230: LD_VAR 0 4
29234: PPUSH
29235: LD_INT 20
29237: PPUSH
29238: CALL 21245 0 4
29242: PUSH
29243: LD_INT 4
29245: ARRAY
29246: IFFALSE 29250
// exit ;
29248: GO 29299
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29250: LD_VAR 0 2
29254: PUSH
29255: LD_INT 29
29257: PUSH
29258: LD_INT 30
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: IN
29265: PUSH
29266: LD_VAR 0 3
29270: PPUSH
29271: LD_VAR 0 4
29275: PPUSH
29276: LD_VAR 0 9
29280: PPUSH
29281: CALL_OW 440
29285: NOT
29286: AND
29287: IFFALSE 29291
// exit ;
29289: GO 29299
// result := true ;
29291: LD_ADDR_VAR 0 6
29295: PUSH
29296: LD_INT 1
29298: ST_TO_ADDR
// end ;
29299: LD_VAR 0 6
29303: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
// result = [ ] ;
29364: LD_ADDR_VAR 0 7
29368: PUSH
29369: EMPTY
29370: ST_TO_ADDR
// temp_list = [ ] ;
29371: LD_ADDR_VAR 0 9
29375: PUSH
29376: EMPTY
29377: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29378: LD_VAR 0 4
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: LD_INT 4
29397: PUSH
29398: LD_INT 5
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: IN
29409: NOT
29410: PUSH
29411: LD_VAR 0 1
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: IN
29426: PUSH
29427: LD_VAR 0 5
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 2
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: IN
29446: NOT
29447: AND
29448: OR
29449: IFFALSE 29453
// exit ;
29451: GO 47844
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29453: LD_VAR 0 1
29457: PUSH
29458: LD_INT 6
29460: PUSH
29461: LD_INT 7
29463: PUSH
29464: LD_INT 8
29466: PUSH
29467: LD_INT 13
29469: PUSH
29470: LD_INT 12
29472: PUSH
29473: LD_INT 15
29475: PUSH
29476: LD_INT 11
29478: PUSH
29479: LD_INT 14
29481: PUSH
29482: LD_INT 10
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: IN
29496: IFFALSE 29506
// btype = b_lab ;
29498: LD_ADDR_VAR 0 1
29502: PUSH
29503: LD_INT 6
29505: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29506: LD_VAR 0 6
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: IN
29525: NOT
29526: PUSH
29527: LD_VAR 0 1
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: LD_INT 6
29546: PUSH
29547: LD_INT 36
29549: PUSH
29550: LD_INT 4
29552: PUSH
29553: LD_INT 5
29555: PUSH
29556: LD_INT 31
29558: PUSH
29559: LD_INT 32
29561: PUSH
29562: LD_INT 33
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: IN
29578: NOT
29579: PUSH
29580: LD_VAR 0 6
29584: PUSH
29585: LD_INT 1
29587: EQUAL
29588: AND
29589: OR
29590: PUSH
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: IN
29606: NOT
29607: PUSH
29608: LD_VAR 0 6
29612: PUSH
29613: LD_INT 2
29615: EQUAL
29616: AND
29617: OR
29618: IFFALSE 29628
// mode = 0 ;
29620: LD_ADDR_VAR 0 6
29624: PUSH
29625: LD_INT 0
29627: ST_TO_ADDR
// case mode of 0 :
29628: LD_VAR 0 6
29632: PUSH
29633: LD_INT 0
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29641
29639: GO 41094
29641: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29642: LD_ADDR_VAR 0 11
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 2
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29835: LD_ADDR_VAR 0 12
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 3
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30031: LD_ADDR_VAR 0 13
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: LD_INT 2
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: NEG
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: LD_INT 3
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 3
30190: NEG
30191: PUSH
30192: LD_INT 2
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: NEG
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30230: LD_ADDR_VAR 0 14
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 2
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: LD_INT 3
30380: NEG
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: LD_INT 3
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: LD_INT 2
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30426: LD_ADDR_VAR 0 15
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30619: LD_ADDR_VAR 0 16
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 3
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 3
30776: PUSH
30777: LD_INT 3
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30812: LD_ADDR_VAR 0 17
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: LD_INT 2
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 2
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: NEG
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31042: LD_ADDR_VAR 0 18
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: LD_INT 2
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: LD_INT 2
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31272: LD_ADDR_VAR 0 19
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: NEG
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31502: LD_ADDR_VAR 0 20
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31732: LD_ADDR_VAR 0 21
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 2
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31962: LD_ADDR_VAR 0 22
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32192: LD_ADDR_VAR 0 23
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: NEG
32404: PUSH
32405: LD_INT 3
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32472: LD_ADDR_VAR 0 24
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 2
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 3
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32748: LD_ADDR_VAR 0 25
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 3
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33022: LD_ADDR_VAR 0 26
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 2
33198: NEG
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 2
33209: NEG
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: PUSH
33234: LD_INT 3
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33298: LD_ADDR_VAR 0 27
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: NEG
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: NEG
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 3
33543: NEG
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33578: LD_ADDR_VAR 0 28
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 3
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: NEG
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33860: LD_ADDR_VAR 0 29
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: NEG
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 3
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 3
34104: NEG
34105: PUSH
34106: LD_INT 2
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34139: LD_ADDR_VAR 0 30
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 2
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34417: LD_ADDR_VAR 0 31
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: NEG
34607: PUSH
34608: LD_INT 3
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 3
34660: NEG
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34695: LD_ADDR_VAR 0 32
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: NEG
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 3
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34973: LD_ADDR_VAR 0 33
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: LD_INT 3
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 3
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 3
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 3
35217: NEG
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35252: LD_ADDR_VAR 0 34
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: NEG
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 3
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 3
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 3
35497: NEG
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35532: LD_ADDR_VAR 0 35
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35644: LD_ADDR_VAR 0 36
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35756: LD_ADDR_VAR 0 37
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35868: LD_ADDR_VAR 0 38
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: NEG
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35980: LD_ADDR_VAR 0 39
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 2
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36092: LD_ADDR_VAR 0 40
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36204: LD_ADDR_VAR 0 41
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: LD_INT 3
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 3
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: NEG
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: NEG
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 3
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 3
36501: NEG
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 3
36513: NEG
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36554: LD_ADDR_VAR 0 42
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 2
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: NEG
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: NEG
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 3
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 3
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 3
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: LD_INT 3
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 3
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: NEG
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 3
36863: NEG
36864: PUSH
36865: LD_INT 3
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36904: LD_ADDR_VAR 0 43
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 3
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 3
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 3
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 3
37200: NEG
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 3
37211: NEG
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37252: LD_ADDR_VAR 0 44
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: NEG
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 3
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 3
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 3
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 3
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 3
37549: NEG
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: LD_INT 3
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37602: LD_ADDR_VAR 0 45
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 2
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: LD_INT 2
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 3
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: LD_INT 3
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 3
37911: NEG
37912: PUSH
37913: LD_INT 3
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37952: LD_ADDR_VAR 0 46
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 3
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 3
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 3
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 3
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38300: LD_ADDR_VAR 0 47
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: NEG
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38451: LD_ADDR_VAR 0 48
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38598: LD_ADDR_VAR 0 49
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38742: LD_ADDR_VAR 0 50
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38886: LD_ADDR_VAR 0 51
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39033: LD_ADDR_VAR 0 52
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39184: LD_ADDR_VAR 0 53
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 2
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39414: LD_ADDR_VAR 0 54
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39644: LD_ADDR_VAR 0 55
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39874: LD_ADDR_VAR 0 56
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40104: LD_ADDR_VAR 0 57
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40334: LD_ADDR_VAR 0 58
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40564: LD_ADDR_VAR 0 59
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40652: LD_ADDR_VAR 0 60
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40740: LD_ADDR_VAR 0 61
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40828: LD_ADDR_VAR 0 62
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40916: LD_ADDR_VAR 0 63
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41004: LD_ADDR_VAR 0 64
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: ST_TO_ADDR
// end ; 1 :
41092: GO 46989
41094: LD_INT 1
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41102
41100: GO 43725
41102: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41103: LD_ADDR_VAR 0 11
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 3
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 3
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41147: LD_ADDR_VAR 0 12
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41188: LD_ADDR_VAR 0 13
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: LD_INT 3
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41228: LD_ADDR_VAR 0 14
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 3
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41269: LD_ADDR_VAR 0 15
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 3
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41313: LD_ADDR_VAR 0 16
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 3
41344: NEG
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41359: LD_ADDR_VAR 0 17
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 3
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 3
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41403: LD_ADDR_VAR 0 18
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41444: LD_ADDR_VAR 0 19
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41484: LD_ADDR_VAR 0 20
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 3
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 3
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41525: LD_ADDR_VAR 0 21
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 3
41543: NEG
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 3
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41569: LD_ADDR_VAR 0 22
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: LD_INT 3
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 3
41588: NEG
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 3
41600: NEG
41601: PUSH
41602: LD_INT 3
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41615: LD_ADDR_VAR 0 23
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 3
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: LD_INT 4
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 3
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41659: LD_ADDR_VAR 0 24
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41700: LD_ADDR_VAR 0 25
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 4
41717: PUSH
41718: LD_INT 3
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41740: LD_ADDR_VAR 0 26
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 4
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41781: LD_ADDR_VAR 0 27
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 4
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41825: LD_ADDR_VAR 0 28
41829: PUSH
41830: LD_INT 3
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: LD_INT 4
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: NEG
41857: PUSH
41858: LD_INT 3
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41871: LD_ADDR_VAR 0 29
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 3
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 4
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 4
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 3
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 5
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 5
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: LD_INT 4
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 6
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 6
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 5
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42026: LD_ADDR_VAR 0 30
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 4
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 4
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 4
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 5
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 5
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 5
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 6
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 6
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42169: LD_ADDR_VAR 0 31
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 4
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 4
42216: PUSH
42217: LD_INT 4
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: LD_INT 4
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 5
42236: PUSH
42237: LD_INT 4
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 5
42246: PUSH
42247: LD_INT 5
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: LD_INT 5
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 6
42266: PUSH
42267: LD_INT 5
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 6
42276: PUSH
42277: LD_INT 6
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 5
42286: PUSH
42287: LD_INT 6
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42308: LD_ADDR_VAR 0 32
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 3
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 3
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 4
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 4
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 5
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 5
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 4
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 6
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 6
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 5
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42451: LD_ADDR_VAR 0 33
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 4
42503: NEG
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 4
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 4
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 5
42537: NEG
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 5
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 5
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 6
42571: NEG
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 6
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42606: LD_ADDR_VAR 0 34
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: LD_INT 3
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 3
42625: NEG
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: NEG
42638: PUSH
42639: LD_INT 3
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: NEG
42650: PUSH
42651: LD_INT 4
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 4
42661: NEG
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 4
42673: NEG
42674: PUSH
42675: LD_INT 4
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 4
42685: NEG
42686: PUSH
42687: LD_INT 5
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 5
42697: NEG
42698: PUSH
42699: LD_INT 4
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 5
42709: NEG
42710: PUSH
42711: LD_INT 5
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 5
42721: NEG
42722: PUSH
42723: LD_INT 6
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 6
42733: NEG
42734: PUSH
42735: LD_INT 5
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 6
42745: NEG
42746: PUSH
42747: LD_INT 6
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42769: LD_ADDR_VAR 0 41
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42813: LD_ADDR_VAR 0 42
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42854: LD_ADDR_VAR 0 43
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42894: LD_ADDR_VAR 0 44
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42935: LD_ADDR_VAR 0 45
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42979: LD_ADDR_VAR 0 46
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: NEG
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43025: LD_ADDR_VAR 0 47
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: LD_INT 3
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 3
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43058: LD_ADDR_VAR 0 48
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43089: LD_ADDR_VAR 0 49
43093: PUSH
43094: LD_INT 3
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43118: LD_ADDR_VAR 0 50
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43147: LD_ADDR_VAR 0 51
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43178: LD_ADDR_VAR 0 52
43182: PUSH
43183: LD_INT 3
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43211: LD_ADDR_VAR 0 53
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 3
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 3
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43255: LD_ADDR_VAR 0 54
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43296: LD_ADDR_VAR 0 55
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 3
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 3
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43336: LD_ADDR_VAR 0 56
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43377: LD_ADDR_VAR 0 57
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 3
43395: NEG
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43421: LD_ADDR_VAR 0 58
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 3
43440: NEG
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 3
43452: NEG
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43467: LD_ADDR_VAR 0 59
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43511: LD_ADDR_VAR 0 60
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43552: LD_ADDR_VAR 0 61
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43592: LD_ADDR_VAR 0 62
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43633: LD_ADDR_VAR 0 63
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43677: LD_ADDR_VAR 0 64
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// end ; 2 :
43723: GO 46989
43725: LD_INT 2
43727: DOUBLE
43728: EQUAL
43729: IFTRUE 43733
43731: GO 46988
43733: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43734: LD_ADDR_VAR 0 29
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 4
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 5
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 5
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 4
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 3
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 5
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 4
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 4
43864: PUSH
43865: LD_INT 4
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 3
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 4
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: LD_INT 4
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 4
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 5
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 5
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 4
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 5
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 3
44017: NEG
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: NEG
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: NEG
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 4
44073: NEG
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 4
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 4
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 4
44119: NEG
44120: PUSH
44121: LD_INT 4
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 4
44131: NEG
44132: PUSH
44133: LD_INT 5
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 4
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 3
44155: NEG
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 4
44167: NEG
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 5
44179: NEG
44180: PUSH
44181: LD_INT 4
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 5
44191: NEG
44192: PUSH
44193: LD_INT 5
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 5
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 5
44215: NEG
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44272: LD_ADDR_VAR 0 30
44276: PUSH
44277: LD_INT 4
44279: PUSH
44280: LD_INT 4
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 4
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 5
44299: PUSH
44300: LD_INT 4
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 5
44309: PUSH
44310: LD_INT 5
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 4
44319: PUSH
44320: LD_INT 5
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: LD_INT 4
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 5
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 5
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 4
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 4
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 4
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 4
44462: NEG
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 4
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 3
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 4
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 5
44518: NEG
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 5
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 5
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 3
44576: NEG
44577: PUSH
44578: LD_INT 4
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 4
44624: NEG
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 4
44636: NEG
44637: PUSH
44638: LD_INT 4
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 4
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 4
44660: NEG
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 4
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 5
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 4
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 4
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 5
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 5
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44819: LD_ADDR_VAR 0 31
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 4
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 4
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 5
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 5
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 4
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 5
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 3
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 4
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 4
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 4
44998: NEG
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 4
45021: NEG
45022: PUSH
45023: LD_INT 4
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 4
45033: NEG
45034: PUSH
45035: LD_INT 5
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 4
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 4
45069: NEG
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 5
45081: NEG
45082: PUSH
45083: LD_INT 4
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 5
45093: NEG
45094: PUSH
45095: LD_INT 5
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 3
45105: NEG
45106: PUSH
45107: LD_INT 5
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 5
45117: NEG
45118: PUSH
45119: LD_INT 3
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 3
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 4
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 3
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 4
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 4
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 4
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 4
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 5
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 5
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 4
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 5
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45369: LD_ADDR_VAR 0 32
45373: PUSH
45374: LD_INT 4
45376: NEG
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 4
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 3
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 3
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 4
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 5
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 5
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 5
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: NEG
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: LD_INT 4
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 4
45538: NEG
45539: PUSH
45540: LD_INT 3
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 4
45550: NEG
45551: PUSH
45552: LD_INT 4
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 4
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 4
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 4
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 5
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 4
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 3
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 4
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 5
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 5
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 4
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 4
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 4
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 4
45781: PUSH
45782: LD_INT 4
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 4
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 5
45801: PUSH
45802: LD_INT 4
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: LD_INT 5
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 4
45821: PUSH
45822: LD_INT 5
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 4
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: LD_INT 5
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45916: LD_ADDR_VAR 0 33
45920: PUSH
45921: LD_INT 4
45923: NEG
45924: PUSH
45925: LD_INT 4
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 4
45935: NEG
45936: PUSH
45937: LD_INT 5
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: NEG
45948: PUSH
45949: LD_INT 4
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 3
45959: NEG
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 4
45971: NEG
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 5
45983: NEG
45984: PUSH
45985: LD_INT 4
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 5
45995: NEG
45996: PUSH
45997: LD_INT 5
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: NEG
46008: PUSH
46009: LD_INT 5
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 5
46019: NEG
46020: PUSH
46021: LD_INT 3
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 4
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 4
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 4
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 5
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 5
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 4
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 3
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 3
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 5
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 4
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 4
46256: PUSH
46257: LD_INT 4
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 3
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 4
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 4
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 4
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 4
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 5
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 5
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 4
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 5
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46454: LD_ADDR_VAR 0 34
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 4
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 5
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 4
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 4
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 5
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: LD_INT 5
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 4
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 4
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 4
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 4
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 4
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 5
46676: PUSH
46677: LD_INT 4
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 5
46686: PUSH
46687: LD_INT 5
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 4
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 5
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 3
46736: PUSH
46737: LD_INT 5
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 3
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 4
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 4
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 4
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 4
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 4
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 5
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 5
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 5
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// end ; end ;
46986: GO 46989
46988: POP
// case btype of b_depot , b_warehouse :
46989: LD_VAR 0 1
46993: PUSH
46994: LD_INT 0
46996: DOUBLE
46997: EQUAL
46998: IFTRUE 47008
47000: LD_INT 1
47002: DOUBLE
47003: EQUAL
47004: IFTRUE 47008
47006: GO 47209
47008: POP
// case nation of nation_american :
47009: LD_VAR 0 5
47013: PUSH
47014: LD_INT 1
47016: DOUBLE
47017: EQUAL
47018: IFTRUE 47022
47020: GO 47078
47022: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47023: LD_ADDR_VAR 0 9
47027: PUSH
47028: LD_VAR 0 11
47032: PUSH
47033: LD_VAR 0 12
47037: PUSH
47038: LD_VAR 0 13
47042: PUSH
47043: LD_VAR 0 14
47047: PUSH
47048: LD_VAR 0 15
47052: PUSH
47053: LD_VAR 0 16
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: PUSH
47066: LD_VAR 0 4
47070: PUSH
47071: LD_INT 1
47073: PLUS
47074: ARRAY
47075: ST_TO_ADDR
47076: GO 47207
47078: LD_INT 2
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 47142
47086: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47087: LD_ADDR_VAR 0 9
47091: PUSH
47092: LD_VAR 0 17
47096: PUSH
47097: LD_VAR 0 18
47101: PUSH
47102: LD_VAR 0 19
47106: PUSH
47107: LD_VAR 0 20
47111: PUSH
47112: LD_VAR 0 21
47116: PUSH
47117: LD_VAR 0 22
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: PUSH
47130: LD_VAR 0 4
47134: PUSH
47135: LD_INT 1
47137: PLUS
47138: ARRAY
47139: ST_TO_ADDR
47140: GO 47207
47142: LD_INT 3
47144: DOUBLE
47145: EQUAL
47146: IFTRUE 47150
47148: GO 47206
47150: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47151: LD_ADDR_VAR 0 9
47155: PUSH
47156: LD_VAR 0 23
47160: PUSH
47161: LD_VAR 0 24
47165: PUSH
47166: LD_VAR 0 25
47170: PUSH
47171: LD_VAR 0 26
47175: PUSH
47176: LD_VAR 0 27
47180: PUSH
47181: LD_VAR 0 28
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: PUSH
47194: LD_VAR 0 4
47198: PUSH
47199: LD_INT 1
47201: PLUS
47202: ARRAY
47203: ST_TO_ADDR
47204: GO 47207
47206: POP
47207: GO 47762
47209: LD_INT 2
47211: DOUBLE
47212: EQUAL
47213: IFTRUE 47223
47215: LD_INT 3
47217: DOUBLE
47218: EQUAL
47219: IFTRUE 47223
47221: GO 47279
47223: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47224: LD_ADDR_VAR 0 9
47228: PUSH
47229: LD_VAR 0 29
47233: PUSH
47234: LD_VAR 0 30
47238: PUSH
47239: LD_VAR 0 31
47243: PUSH
47244: LD_VAR 0 32
47248: PUSH
47249: LD_VAR 0 33
47253: PUSH
47254: LD_VAR 0 34
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: PUSH
47267: LD_VAR 0 4
47271: PUSH
47272: LD_INT 1
47274: PLUS
47275: ARRAY
47276: ST_TO_ADDR
47277: GO 47762
47279: LD_INT 16
47281: DOUBLE
47282: EQUAL
47283: IFTRUE 47341
47285: LD_INT 17
47287: DOUBLE
47288: EQUAL
47289: IFTRUE 47341
47291: LD_INT 18
47293: DOUBLE
47294: EQUAL
47295: IFTRUE 47341
47297: LD_INT 19
47299: DOUBLE
47300: EQUAL
47301: IFTRUE 47341
47303: LD_INT 22
47305: DOUBLE
47306: EQUAL
47307: IFTRUE 47341
47309: LD_INT 20
47311: DOUBLE
47312: EQUAL
47313: IFTRUE 47341
47315: LD_INT 21
47317: DOUBLE
47318: EQUAL
47319: IFTRUE 47341
47321: LD_INT 23
47323: DOUBLE
47324: EQUAL
47325: IFTRUE 47341
47327: LD_INT 24
47329: DOUBLE
47330: EQUAL
47331: IFTRUE 47341
47333: LD_INT 25
47335: DOUBLE
47336: EQUAL
47337: IFTRUE 47341
47339: GO 47397
47341: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47342: LD_ADDR_VAR 0 9
47346: PUSH
47347: LD_VAR 0 35
47351: PUSH
47352: LD_VAR 0 36
47356: PUSH
47357: LD_VAR 0 37
47361: PUSH
47362: LD_VAR 0 38
47366: PUSH
47367: LD_VAR 0 39
47371: PUSH
47372: LD_VAR 0 40
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: PUSH
47385: LD_VAR 0 4
47389: PUSH
47390: LD_INT 1
47392: PLUS
47393: ARRAY
47394: ST_TO_ADDR
47395: GO 47762
47397: LD_INT 6
47399: DOUBLE
47400: EQUAL
47401: IFTRUE 47453
47403: LD_INT 7
47405: DOUBLE
47406: EQUAL
47407: IFTRUE 47453
47409: LD_INT 8
47411: DOUBLE
47412: EQUAL
47413: IFTRUE 47453
47415: LD_INT 13
47417: DOUBLE
47418: EQUAL
47419: IFTRUE 47453
47421: LD_INT 12
47423: DOUBLE
47424: EQUAL
47425: IFTRUE 47453
47427: LD_INT 15
47429: DOUBLE
47430: EQUAL
47431: IFTRUE 47453
47433: LD_INT 11
47435: DOUBLE
47436: EQUAL
47437: IFTRUE 47453
47439: LD_INT 14
47441: DOUBLE
47442: EQUAL
47443: IFTRUE 47453
47445: LD_INT 10
47447: DOUBLE
47448: EQUAL
47449: IFTRUE 47453
47451: GO 47509
47453: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47454: LD_ADDR_VAR 0 9
47458: PUSH
47459: LD_VAR 0 41
47463: PUSH
47464: LD_VAR 0 42
47468: PUSH
47469: LD_VAR 0 43
47473: PUSH
47474: LD_VAR 0 44
47478: PUSH
47479: LD_VAR 0 45
47483: PUSH
47484: LD_VAR 0 46
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: PUSH
47497: LD_VAR 0 4
47501: PUSH
47502: LD_INT 1
47504: PLUS
47505: ARRAY
47506: ST_TO_ADDR
47507: GO 47762
47509: LD_INT 36
47511: DOUBLE
47512: EQUAL
47513: IFTRUE 47517
47515: GO 47573
47517: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47518: LD_ADDR_VAR 0 9
47522: PUSH
47523: LD_VAR 0 47
47527: PUSH
47528: LD_VAR 0 48
47532: PUSH
47533: LD_VAR 0 49
47537: PUSH
47538: LD_VAR 0 50
47542: PUSH
47543: LD_VAR 0 51
47547: PUSH
47548: LD_VAR 0 52
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: PUSH
47561: LD_VAR 0 4
47565: PUSH
47566: LD_INT 1
47568: PLUS
47569: ARRAY
47570: ST_TO_ADDR
47571: GO 47762
47573: LD_INT 4
47575: DOUBLE
47576: EQUAL
47577: IFTRUE 47599
47579: LD_INT 5
47581: DOUBLE
47582: EQUAL
47583: IFTRUE 47599
47585: LD_INT 34
47587: DOUBLE
47588: EQUAL
47589: IFTRUE 47599
47591: LD_INT 37
47593: DOUBLE
47594: EQUAL
47595: IFTRUE 47599
47597: GO 47655
47599: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47600: LD_ADDR_VAR 0 9
47604: PUSH
47605: LD_VAR 0 53
47609: PUSH
47610: LD_VAR 0 54
47614: PUSH
47615: LD_VAR 0 55
47619: PUSH
47620: LD_VAR 0 56
47624: PUSH
47625: LD_VAR 0 57
47629: PUSH
47630: LD_VAR 0 58
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: PUSH
47643: LD_VAR 0 4
47647: PUSH
47648: LD_INT 1
47650: PLUS
47651: ARRAY
47652: ST_TO_ADDR
47653: GO 47762
47655: LD_INT 31
47657: DOUBLE
47658: EQUAL
47659: IFTRUE 47705
47661: LD_INT 32
47663: DOUBLE
47664: EQUAL
47665: IFTRUE 47705
47667: LD_INT 33
47669: DOUBLE
47670: EQUAL
47671: IFTRUE 47705
47673: LD_INT 27
47675: DOUBLE
47676: EQUAL
47677: IFTRUE 47705
47679: LD_INT 26
47681: DOUBLE
47682: EQUAL
47683: IFTRUE 47705
47685: LD_INT 28
47687: DOUBLE
47688: EQUAL
47689: IFTRUE 47705
47691: LD_INT 29
47693: DOUBLE
47694: EQUAL
47695: IFTRUE 47705
47697: LD_INT 30
47699: DOUBLE
47700: EQUAL
47701: IFTRUE 47705
47703: GO 47761
47705: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47706: LD_ADDR_VAR 0 9
47710: PUSH
47711: LD_VAR 0 59
47715: PUSH
47716: LD_VAR 0 60
47720: PUSH
47721: LD_VAR 0 61
47725: PUSH
47726: LD_VAR 0 62
47730: PUSH
47731: LD_VAR 0 63
47735: PUSH
47736: LD_VAR 0 64
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: LD_VAR 0 4
47753: PUSH
47754: LD_INT 1
47756: PLUS
47757: ARRAY
47758: ST_TO_ADDR
47759: GO 47762
47761: POP
// temp_list2 = [ ] ;
47762: LD_ADDR_VAR 0 10
47766: PUSH
47767: EMPTY
47768: ST_TO_ADDR
// for i in temp_list do
47769: LD_ADDR_VAR 0 8
47773: PUSH
47774: LD_VAR 0 9
47778: PUSH
47779: FOR_IN
47780: IFFALSE 47832
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47782: LD_ADDR_VAR 0 10
47786: PUSH
47787: LD_VAR 0 10
47791: PUSH
47792: LD_VAR 0 8
47796: PUSH
47797: LD_INT 1
47799: ARRAY
47800: PUSH
47801: LD_VAR 0 2
47805: PLUS
47806: PUSH
47807: LD_VAR 0 8
47811: PUSH
47812: LD_INT 2
47814: ARRAY
47815: PUSH
47816: LD_VAR 0 3
47820: PLUS
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: ADD
47829: ST_TO_ADDR
47830: GO 47779
47832: POP
47833: POP
// result = temp_list2 ;
47834: LD_ADDR_VAR 0 7
47838: PUSH
47839: LD_VAR 0 10
47843: ST_TO_ADDR
// end ;
47844: LD_VAR 0 7
47848: RET
// export function EnemyInRange ( unit , dist ) ; begin
47849: LD_INT 0
47851: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47852: LD_ADDR_VAR 0 3
47856: PUSH
47857: LD_VAR 0 1
47861: PPUSH
47862: CALL_OW 255
47866: PPUSH
47867: LD_VAR 0 1
47871: PPUSH
47872: CALL_OW 250
47876: PPUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 251
47886: PPUSH
47887: LD_VAR 0 2
47891: PPUSH
47892: CALL 21245 0 4
47896: PUSH
47897: LD_INT 4
47899: ARRAY
47900: ST_TO_ADDR
// end ;
47901: LD_VAR 0 3
47905: RET
// export function PlayerSeeMe ( unit ) ; begin
47906: LD_INT 0
47908: PPUSH
// result := See ( your_side , unit ) ;
47909: LD_ADDR_VAR 0 2
47913: PUSH
47914: LD_OWVAR 2
47918: PPUSH
47919: LD_VAR 0 1
47923: PPUSH
47924: CALL_OW 292
47928: ST_TO_ADDR
// end ;
47929: LD_VAR 0 2
47933: RET
// export function ReverseDir ( unit ) ; begin
47934: LD_INT 0
47936: PPUSH
// if not unit then
47937: LD_VAR 0 1
47941: NOT
47942: IFFALSE 47946
// exit ;
47944: GO 47969
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47946: LD_ADDR_VAR 0 2
47950: PUSH
47951: LD_VAR 0 1
47955: PPUSH
47956: CALL_OW 254
47960: PUSH
47961: LD_INT 3
47963: PLUS
47964: PUSH
47965: LD_INT 6
47967: MOD
47968: ST_TO_ADDR
// end ;
47969: LD_VAR 0 2
47973: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
47974: LD_INT 0
47976: PPUSH
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
// if not hexes then
47981: LD_VAR 0 2
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48138
// dist := 9999 ;
47990: LD_ADDR_VAR 0 5
47994: PUSH
47995: LD_INT 9999
47997: ST_TO_ADDR
// for i = 1 to hexes do
47998: LD_ADDR_VAR 0 4
48002: PUSH
48003: DOUBLE
48004: LD_INT 1
48006: DEC
48007: ST_TO_ADDR
48008: LD_VAR 0 2
48012: PUSH
48013: FOR_TO
48014: IFFALSE 48126
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
48016: LD_VAR 0 1
48020: PPUSH
48021: LD_VAR 0 2
48025: PUSH
48026: LD_VAR 0 4
48030: ARRAY
48031: PUSH
48032: LD_INT 1
48034: ARRAY
48035: PPUSH
48036: LD_VAR 0 2
48040: PUSH
48041: LD_VAR 0 4
48045: ARRAY
48046: PUSH
48047: LD_INT 2
48049: ARRAY
48050: PPUSH
48051: CALL_OW 297
48055: PUSH
48056: LD_VAR 0 5
48060: LESS
48061: IFFALSE 48124
// begin hex := hexes [ i ] ;
48063: LD_ADDR_VAR 0 7
48067: PUSH
48068: LD_VAR 0 2
48072: PUSH
48073: LD_VAR 0 4
48077: ARRAY
48078: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48079: LD_ADDR_VAR 0 5
48083: PUSH
48084: LD_VAR 0 1
48088: PPUSH
48089: LD_VAR 0 2
48093: PUSH
48094: LD_VAR 0 4
48098: ARRAY
48099: PUSH
48100: LD_INT 1
48102: ARRAY
48103: PPUSH
48104: LD_VAR 0 2
48108: PUSH
48109: LD_VAR 0 4
48113: ARRAY
48114: PUSH
48115: LD_INT 2
48117: ARRAY
48118: PPUSH
48119: CALL_OW 297
48123: ST_TO_ADDR
// end ; end ;
48124: GO 48013
48126: POP
48127: POP
// result := hex ;
48128: LD_ADDR_VAR 0 3
48132: PUSH
48133: LD_VAR 0 7
48137: ST_TO_ADDR
// end ;
48138: LD_VAR 0 3
48142: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48143: LD_INT 0
48145: PPUSH
48146: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48147: LD_VAR 0 1
48151: NOT
48152: PUSH
48153: LD_VAR 0 1
48157: PUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 23
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 69
48186: IN
48187: NOT
48188: OR
48189: IFFALSE 48193
// exit ;
48191: GO 48240
// for i = 1 to 3 do
48193: LD_ADDR_VAR 0 3
48197: PUSH
48198: DOUBLE
48199: LD_INT 1
48201: DEC
48202: ST_TO_ADDR
48203: LD_INT 3
48205: PUSH
48206: FOR_TO
48207: IFFALSE 48238
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48209: LD_VAR 0 1
48213: PPUSH
48214: CALL_OW 250
48218: PPUSH
48219: LD_VAR 0 1
48223: PPUSH
48224: CALL_OW 251
48228: PPUSH
48229: LD_INT 1
48231: PPUSH
48232: CALL_OW 453
48236: GO 48206
48238: POP
48239: POP
// end ;
48240: LD_VAR 0 2
48244: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48245: LD_INT 0
48247: PPUSH
48248: PPUSH
48249: PPUSH
48250: PPUSH
48251: PPUSH
48252: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48253: LD_VAR 0 1
48257: NOT
48258: PUSH
48259: LD_VAR 0 2
48263: NOT
48264: OR
48265: PUSH
48266: LD_VAR 0 1
48270: PPUSH
48271: CALL_OW 314
48275: OR
48276: IFFALSE 48280
// exit ;
48278: GO 48721
// x := GetX ( enemy_unit ) ;
48280: LD_ADDR_VAR 0 7
48284: PUSH
48285: LD_VAR 0 2
48289: PPUSH
48290: CALL_OW 250
48294: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48295: LD_ADDR_VAR 0 8
48299: PUSH
48300: LD_VAR 0 2
48304: PPUSH
48305: CALL_OW 251
48309: ST_TO_ADDR
// if not x or not y then
48310: LD_VAR 0 7
48314: NOT
48315: PUSH
48316: LD_VAR 0 8
48320: NOT
48321: OR
48322: IFFALSE 48326
// exit ;
48324: GO 48721
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48326: LD_ADDR_VAR 0 6
48330: PUSH
48331: LD_VAR 0 7
48335: PPUSH
48336: LD_INT 0
48338: PPUSH
48339: LD_INT 4
48341: PPUSH
48342: CALL_OW 272
48346: PUSH
48347: LD_VAR 0 8
48351: PPUSH
48352: LD_INT 0
48354: PPUSH
48355: LD_INT 4
48357: PPUSH
48358: CALL_OW 273
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_VAR 0 7
48371: PPUSH
48372: LD_INT 1
48374: PPUSH
48375: LD_INT 4
48377: PPUSH
48378: CALL_OW 272
48382: PUSH
48383: LD_VAR 0 8
48387: PPUSH
48388: LD_INT 1
48390: PPUSH
48391: LD_INT 4
48393: PPUSH
48394: CALL_OW 273
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_VAR 0 7
48407: PPUSH
48408: LD_INT 2
48410: PPUSH
48411: LD_INT 4
48413: PPUSH
48414: CALL_OW 272
48418: PUSH
48419: LD_VAR 0 8
48423: PPUSH
48424: LD_INT 2
48426: PPUSH
48427: LD_INT 4
48429: PPUSH
48430: CALL_OW 273
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_VAR 0 7
48443: PPUSH
48444: LD_INT 3
48446: PPUSH
48447: LD_INT 4
48449: PPUSH
48450: CALL_OW 272
48454: PUSH
48455: LD_VAR 0 8
48459: PPUSH
48460: LD_INT 3
48462: PPUSH
48463: LD_INT 4
48465: PPUSH
48466: CALL_OW 273
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_VAR 0 7
48479: PPUSH
48480: LD_INT 4
48482: PPUSH
48483: LD_INT 4
48485: PPUSH
48486: CALL_OW 272
48490: PUSH
48491: LD_VAR 0 8
48495: PPUSH
48496: LD_INT 4
48498: PPUSH
48499: LD_INT 4
48501: PPUSH
48502: CALL_OW 273
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_VAR 0 7
48515: PPUSH
48516: LD_INT 5
48518: PPUSH
48519: LD_INT 4
48521: PPUSH
48522: CALL_OW 272
48526: PUSH
48527: LD_VAR 0 8
48531: PPUSH
48532: LD_INT 5
48534: PPUSH
48535: LD_INT 4
48537: PPUSH
48538: CALL_OW 273
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// for i = tmp downto 1 do
48555: LD_ADDR_VAR 0 4
48559: PUSH
48560: DOUBLE
48561: LD_VAR 0 6
48565: INC
48566: ST_TO_ADDR
48567: LD_INT 1
48569: PUSH
48570: FOR_DOWNTO
48571: IFFALSE 48672
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48573: LD_VAR 0 6
48577: PUSH
48578: LD_VAR 0 4
48582: ARRAY
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: PPUSH
48588: LD_VAR 0 6
48592: PUSH
48593: LD_VAR 0 4
48597: ARRAY
48598: PUSH
48599: LD_INT 2
48601: ARRAY
48602: PPUSH
48603: CALL_OW 488
48607: NOT
48608: PUSH
48609: LD_VAR 0 6
48613: PUSH
48614: LD_VAR 0 4
48618: ARRAY
48619: PUSH
48620: LD_INT 1
48622: ARRAY
48623: PPUSH
48624: LD_VAR 0 6
48628: PUSH
48629: LD_VAR 0 4
48633: ARRAY
48634: PUSH
48635: LD_INT 2
48637: ARRAY
48638: PPUSH
48639: CALL_OW 428
48643: PUSH
48644: LD_INT 0
48646: NONEQUAL
48647: OR
48648: IFFALSE 48670
// tmp := Delete ( tmp , i ) ;
48650: LD_ADDR_VAR 0 6
48654: PUSH
48655: LD_VAR 0 6
48659: PPUSH
48660: LD_VAR 0 4
48664: PPUSH
48665: CALL_OW 3
48669: ST_TO_ADDR
48670: GO 48570
48672: POP
48673: POP
// j := GetClosestHex ( unit , tmp ) ;
48674: LD_ADDR_VAR 0 5
48678: PUSH
48679: LD_VAR 0 1
48683: PPUSH
48684: LD_VAR 0 6
48688: PPUSH
48689: CALL 47974 0 2
48693: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48694: LD_VAR 0 1
48698: PPUSH
48699: LD_VAR 0 5
48703: PUSH
48704: LD_INT 1
48706: ARRAY
48707: PPUSH
48708: LD_VAR 0 5
48712: PUSH
48713: LD_INT 2
48715: ARRAY
48716: PPUSH
48717: CALL_OW 111
// end ;
48721: LD_VAR 0 3
48725: RET
// export function PrepareApemanSoldier ( ) ; begin
48726: LD_INT 0
48728: PPUSH
// uc_nation := 0 ;
48729: LD_ADDR_OWVAR 21
48733: PUSH
48734: LD_INT 0
48736: ST_TO_ADDR
// hc_sex := sex_male ;
48737: LD_ADDR_OWVAR 27
48741: PUSH
48742: LD_INT 1
48744: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48745: LD_ADDR_OWVAR 28
48749: PUSH
48750: LD_INT 15
48752: ST_TO_ADDR
// hc_gallery :=  ;
48753: LD_ADDR_OWVAR 33
48757: PUSH
48758: LD_STRING 
48760: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48761: LD_ADDR_OWVAR 31
48765: PUSH
48766: LD_INT 0
48768: PPUSH
48769: LD_INT 3
48771: PPUSH
48772: CALL_OW 12
48776: PUSH
48777: LD_INT 0
48779: PPUSH
48780: LD_INT 3
48782: PPUSH
48783: CALL_OW 12
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
// end ;
48800: LD_VAR 0 1
48804: RET
// export function PrepareApemanEngineer ( ) ; begin
48805: LD_INT 0
48807: PPUSH
// uc_nation := 0 ;
48808: LD_ADDR_OWVAR 21
48812: PUSH
48813: LD_INT 0
48815: ST_TO_ADDR
// hc_sex := sex_male ;
48816: LD_ADDR_OWVAR 27
48820: PUSH
48821: LD_INT 1
48823: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48824: LD_ADDR_OWVAR 28
48828: PUSH
48829: LD_INT 16
48831: ST_TO_ADDR
// hc_gallery :=  ;
48832: LD_ADDR_OWVAR 33
48836: PUSH
48837: LD_STRING 
48839: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48840: LD_ADDR_OWVAR 31
48844: PUSH
48845: LD_INT 0
48847: PPUSH
48848: LD_INT 3
48850: PPUSH
48851: CALL_OW 12
48855: PUSH
48856: LD_INT 0
48858: PPUSH
48859: LD_INT 3
48861: PPUSH
48862: CALL_OW 12
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// end ;
48879: LD_VAR 0 1
48883: RET
// export function PrepareApeman ( agressivity ) ; begin
48884: LD_INT 0
48886: PPUSH
// uc_side := 0 ;
48887: LD_ADDR_OWVAR 20
48891: PUSH
48892: LD_INT 0
48894: ST_TO_ADDR
// uc_nation := 0 ;
48895: LD_ADDR_OWVAR 21
48899: PUSH
48900: LD_INT 0
48902: ST_TO_ADDR
// hc_sex := sex_male ;
48903: LD_ADDR_OWVAR 27
48907: PUSH
48908: LD_INT 1
48910: ST_TO_ADDR
// hc_class := class_apeman ;
48911: LD_ADDR_OWVAR 28
48915: PUSH
48916: LD_INT 12
48918: ST_TO_ADDR
// hc_gallery :=  ;
48919: LD_ADDR_OWVAR 33
48923: PUSH
48924: LD_STRING 
48926: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48927: LD_ADDR_OWVAR 35
48931: PUSH
48932: LD_VAR 0 1
48936: NEG
48937: PPUSH
48938: LD_VAR 0 1
48942: PPUSH
48943: CALL_OW 12
48947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48948: LD_ADDR_OWVAR 31
48952: PUSH
48953: LD_INT 0
48955: PPUSH
48956: LD_INT 3
48958: PPUSH
48959: CALL_OW 12
48963: PUSH
48964: LD_INT 0
48966: PPUSH
48967: LD_INT 3
48969: PPUSH
48970: CALL_OW 12
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// end ;
48987: LD_VAR 0 2
48991: RET
// export function PrepareTiger ( agressivity ) ; begin
48992: LD_INT 0
48994: PPUSH
// uc_side := 0 ;
48995: LD_ADDR_OWVAR 20
48999: PUSH
49000: LD_INT 0
49002: ST_TO_ADDR
// uc_nation := 0 ;
49003: LD_ADDR_OWVAR 21
49007: PUSH
49008: LD_INT 0
49010: ST_TO_ADDR
// hc_class := class_tiger ;
49011: LD_ADDR_OWVAR 28
49015: PUSH
49016: LD_INT 14
49018: ST_TO_ADDR
// hc_gallery :=  ;
49019: LD_ADDR_OWVAR 33
49023: PUSH
49024: LD_STRING 
49026: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49027: LD_ADDR_OWVAR 35
49031: PUSH
49032: LD_VAR 0 1
49036: NEG
49037: PPUSH
49038: LD_VAR 0 1
49042: PPUSH
49043: CALL_OW 12
49047: ST_TO_ADDR
// end ;
49048: LD_VAR 0 2
49052: RET
// export function PrepareEnchidna ( ) ; begin
49053: LD_INT 0
49055: PPUSH
// uc_side := 0 ;
49056: LD_ADDR_OWVAR 20
49060: PUSH
49061: LD_INT 0
49063: ST_TO_ADDR
// uc_nation := 0 ;
49064: LD_ADDR_OWVAR 21
49068: PUSH
49069: LD_INT 0
49071: ST_TO_ADDR
// hc_class := class_baggie ;
49072: LD_ADDR_OWVAR 28
49076: PUSH
49077: LD_INT 13
49079: ST_TO_ADDR
// hc_gallery :=  ;
49080: LD_ADDR_OWVAR 33
49084: PUSH
49085: LD_STRING 
49087: ST_TO_ADDR
// end ;
49088: LD_VAR 0 1
49092: RET
// export function PrepareFrog ( ) ; begin
49093: LD_INT 0
49095: PPUSH
// uc_side := 0 ;
49096: LD_ADDR_OWVAR 20
49100: PUSH
49101: LD_INT 0
49103: ST_TO_ADDR
// uc_nation := 0 ;
49104: LD_ADDR_OWVAR 21
49108: PUSH
49109: LD_INT 0
49111: ST_TO_ADDR
// hc_class := class_frog ;
49112: LD_ADDR_OWVAR 28
49116: PUSH
49117: LD_INT 19
49119: ST_TO_ADDR
// hc_gallery :=  ;
49120: LD_ADDR_OWVAR 33
49124: PUSH
49125: LD_STRING 
49127: ST_TO_ADDR
// end ;
49128: LD_VAR 0 1
49132: RET
// export function PrepareFish ( ) ; begin
49133: LD_INT 0
49135: PPUSH
// uc_side := 0 ;
49136: LD_ADDR_OWVAR 20
49140: PUSH
49141: LD_INT 0
49143: ST_TO_ADDR
// uc_nation := 0 ;
49144: LD_ADDR_OWVAR 21
49148: PUSH
49149: LD_INT 0
49151: ST_TO_ADDR
// hc_class := class_fish ;
49152: LD_ADDR_OWVAR 28
49156: PUSH
49157: LD_INT 20
49159: ST_TO_ADDR
// hc_gallery :=  ;
49160: LD_ADDR_OWVAR 33
49164: PUSH
49165: LD_STRING 
49167: ST_TO_ADDR
// end ;
49168: LD_VAR 0 1
49172: RET
// export function PrepareBird ( ) ; begin
49173: LD_INT 0
49175: PPUSH
// uc_side := 0 ;
49176: LD_ADDR_OWVAR 20
49180: PUSH
49181: LD_INT 0
49183: ST_TO_ADDR
// uc_nation := 0 ;
49184: LD_ADDR_OWVAR 21
49188: PUSH
49189: LD_INT 0
49191: ST_TO_ADDR
// hc_class := class_phororhacos ;
49192: LD_ADDR_OWVAR 28
49196: PUSH
49197: LD_INT 18
49199: ST_TO_ADDR
// hc_gallery :=  ;
49200: LD_ADDR_OWVAR 33
49204: PUSH
49205: LD_STRING 
49207: ST_TO_ADDR
// end ;
49208: LD_VAR 0 1
49212: RET
// export function PrepareHorse ( ) ; begin
49213: LD_INT 0
49215: PPUSH
// uc_side := 0 ;
49216: LD_ADDR_OWVAR 20
49220: PUSH
49221: LD_INT 0
49223: ST_TO_ADDR
// uc_nation := 0 ;
49224: LD_ADDR_OWVAR 21
49228: PUSH
49229: LD_INT 0
49231: ST_TO_ADDR
// hc_class := class_horse ;
49232: LD_ADDR_OWVAR 28
49236: PUSH
49237: LD_INT 21
49239: ST_TO_ADDR
// hc_gallery :=  ;
49240: LD_ADDR_OWVAR 33
49244: PUSH
49245: LD_STRING 
49247: ST_TO_ADDR
// end ;
49248: LD_VAR 0 1
49252: RET
// export function PrepareMastodont ( ) ; begin
49253: LD_INT 0
49255: PPUSH
// uc_side := 0 ;
49256: LD_ADDR_OWVAR 20
49260: PUSH
49261: LD_INT 0
49263: ST_TO_ADDR
// uc_nation := 0 ;
49264: LD_ADDR_OWVAR 21
49268: PUSH
49269: LD_INT 0
49271: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49272: LD_ADDR_OWVAR 37
49276: PUSH
49277: LD_INT 31
49279: ST_TO_ADDR
// vc_control := control_rider ;
49280: LD_ADDR_OWVAR 38
49284: PUSH
49285: LD_INT 4
49287: ST_TO_ADDR
// end ;
49288: LD_VAR 0 1
49292: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49293: LD_INT 0
49295: PPUSH
49296: PPUSH
49297: PPUSH
// uc_side = 0 ;
49298: LD_ADDR_OWVAR 20
49302: PUSH
49303: LD_INT 0
49305: ST_TO_ADDR
// uc_nation = 0 ;
49306: LD_ADDR_OWVAR 21
49310: PUSH
49311: LD_INT 0
49313: ST_TO_ADDR
// InitHc_All ( ) ;
49314: CALL_OW 584
// InitVc ;
49318: CALL_OW 20
// if mastodonts then
49322: LD_VAR 0 6
49326: IFFALSE 49393
// for i = 1 to mastodonts do
49328: LD_ADDR_VAR 0 11
49332: PUSH
49333: DOUBLE
49334: LD_INT 1
49336: DEC
49337: ST_TO_ADDR
49338: LD_VAR 0 6
49342: PUSH
49343: FOR_TO
49344: IFFALSE 49391
// begin vc_chassis := 31 ;
49346: LD_ADDR_OWVAR 37
49350: PUSH
49351: LD_INT 31
49353: ST_TO_ADDR
// vc_control := control_rider ;
49354: LD_ADDR_OWVAR 38
49358: PUSH
49359: LD_INT 4
49361: ST_TO_ADDR
// animal := CreateVehicle ;
49362: LD_ADDR_VAR 0 12
49366: PUSH
49367: CALL_OW 45
49371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49372: LD_VAR 0 12
49376: PPUSH
49377: LD_VAR 0 8
49381: PPUSH
49382: LD_INT 0
49384: PPUSH
49385: CALL 51528 0 3
// end ;
49389: GO 49343
49391: POP
49392: POP
// if horses then
49393: LD_VAR 0 5
49397: IFFALSE 49464
// for i = 1 to horses do
49399: LD_ADDR_VAR 0 11
49403: PUSH
49404: DOUBLE
49405: LD_INT 1
49407: DEC
49408: ST_TO_ADDR
49409: LD_VAR 0 5
49413: PUSH
49414: FOR_TO
49415: IFFALSE 49462
// begin hc_class := 21 ;
49417: LD_ADDR_OWVAR 28
49421: PUSH
49422: LD_INT 21
49424: ST_TO_ADDR
// hc_gallery :=  ;
49425: LD_ADDR_OWVAR 33
49429: PUSH
49430: LD_STRING 
49432: ST_TO_ADDR
// animal := CreateHuman ;
49433: LD_ADDR_VAR 0 12
49437: PUSH
49438: CALL_OW 44
49442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49443: LD_VAR 0 12
49447: PPUSH
49448: LD_VAR 0 8
49452: PPUSH
49453: LD_INT 0
49455: PPUSH
49456: CALL 51528 0 3
// end ;
49460: GO 49414
49462: POP
49463: POP
// if birds then
49464: LD_VAR 0 1
49468: IFFALSE 49535
// for i = 1 to birds do
49470: LD_ADDR_VAR 0 11
49474: PUSH
49475: DOUBLE
49476: LD_INT 1
49478: DEC
49479: ST_TO_ADDR
49480: LD_VAR 0 1
49484: PUSH
49485: FOR_TO
49486: IFFALSE 49533
// begin hc_class = 18 ;
49488: LD_ADDR_OWVAR 28
49492: PUSH
49493: LD_INT 18
49495: ST_TO_ADDR
// hc_gallery =  ;
49496: LD_ADDR_OWVAR 33
49500: PUSH
49501: LD_STRING 
49503: ST_TO_ADDR
// animal := CreateHuman ;
49504: LD_ADDR_VAR 0 12
49508: PUSH
49509: CALL_OW 44
49513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49514: LD_VAR 0 12
49518: PPUSH
49519: LD_VAR 0 8
49523: PPUSH
49524: LD_INT 0
49526: PPUSH
49527: CALL 51528 0 3
// end ;
49531: GO 49485
49533: POP
49534: POP
// if tigers then
49535: LD_VAR 0 2
49539: IFFALSE 49623
// for i = 1 to tigers do
49541: LD_ADDR_VAR 0 11
49545: PUSH
49546: DOUBLE
49547: LD_INT 1
49549: DEC
49550: ST_TO_ADDR
49551: LD_VAR 0 2
49555: PUSH
49556: FOR_TO
49557: IFFALSE 49621
// begin hc_class = class_tiger ;
49559: LD_ADDR_OWVAR 28
49563: PUSH
49564: LD_INT 14
49566: ST_TO_ADDR
// hc_gallery =  ;
49567: LD_ADDR_OWVAR 33
49571: PUSH
49572: LD_STRING 
49574: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49575: LD_ADDR_OWVAR 35
49579: PUSH
49580: LD_INT 7
49582: NEG
49583: PPUSH
49584: LD_INT 7
49586: PPUSH
49587: CALL_OW 12
49591: ST_TO_ADDR
// animal := CreateHuman ;
49592: LD_ADDR_VAR 0 12
49596: PUSH
49597: CALL_OW 44
49601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49602: LD_VAR 0 12
49606: PPUSH
49607: LD_VAR 0 8
49611: PPUSH
49612: LD_INT 0
49614: PPUSH
49615: CALL 51528 0 3
// end ;
49619: GO 49556
49621: POP
49622: POP
// if apemans then
49623: LD_VAR 0 3
49627: IFFALSE 49750
// for i = 1 to apemans do
49629: LD_ADDR_VAR 0 11
49633: PUSH
49634: DOUBLE
49635: LD_INT 1
49637: DEC
49638: ST_TO_ADDR
49639: LD_VAR 0 3
49643: PUSH
49644: FOR_TO
49645: IFFALSE 49748
// begin hc_class = class_apeman ;
49647: LD_ADDR_OWVAR 28
49651: PUSH
49652: LD_INT 12
49654: ST_TO_ADDR
// hc_gallery =  ;
49655: LD_ADDR_OWVAR 33
49659: PUSH
49660: LD_STRING 
49662: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49663: LD_ADDR_OWVAR 35
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PPUSH
49672: LD_INT 2
49674: PPUSH
49675: CALL_OW 12
49679: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49680: LD_ADDR_OWVAR 31
49684: PUSH
49685: LD_INT 1
49687: PPUSH
49688: LD_INT 3
49690: PPUSH
49691: CALL_OW 12
49695: PUSH
49696: LD_INT 1
49698: PPUSH
49699: LD_INT 3
49701: PPUSH
49702: CALL_OW 12
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// animal := CreateHuman ;
49719: LD_ADDR_VAR 0 12
49723: PUSH
49724: CALL_OW 44
49728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49729: LD_VAR 0 12
49733: PPUSH
49734: LD_VAR 0 8
49738: PPUSH
49739: LD_INT 0
49741: PPUSH
49742: CALL 51528 0 3
// end ;
49746: GO 49644
49748: POP
49749: POP
// if enchidnas then
49750: LD_VAR 0 4
49754: IFFALSE 49821
// for i = 1 to enchidnas do
49756: LD_ADDR_VAR 0 11
49760: PUSH
49761: DOUBLE
49762: LD_INT 1
49764: DEC
49765: ST_TO_ADDR
49766: LD_VAR 0 4
49770: PUSH
49771: FOR_TO
49772: IFFALSE 49819
// begin hc_class = 13 ;
49774: LD_ADDR_OWVAR 28
49778: PUSH
49779: LD_INT 13
49781: ST_TO_ADDR
// hc_gallery =  ;
49782: LD_ADDR_OWVAR 33
49786: PUSH
49787: LD_STRING 
49789: ST_TO_ADDR
// animal := CreateHuman ;
49790: LD_ADDR_VAR 0 12
49794: PUSH
49795: CALL_OW 44
49799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49800: LD_VAR 0 12
49804: PPUSH
49805: LD_VAR 0 8
49809: PPUSH
49810: LD_INT 0
49812: PPUSH
49813: CALL 51528 0 3
// end ;
49817: GO 49771
49819: POP
49820: POP
// if fishes then
49821: LD_VAR 0 7
49825: IFFALSE 49892
// for i = 1 to fishes do
49827: LD_ADDR_VAR 0 11
49831: PUSH
49832: DOUBLE
49833: LD_INT 1
49835: DEC
49836: ST_TO_ADDR
49837: LD_VAR 0 7
49841: PUSH
49842: FOR_TO
49843: IFFALSE 49890
// begin hc_class = 20 ;
49845: LD_ADDR_OWVAR 28
49849: PUSH
49850: LD_INT 20
49852: ST_TO_ADDR
// hc_gallery =  ;
49853: LD_ADDR_OWVAR 33
49857: PUSH
49858: LD_STRING 
49860: ST_TO_ADDR
// animal := CreateHuman ;
49861: LD_ADDR_VAR 0 12
49865: PUSH
49866: CALL_OW 44
49870: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49871: LD_VAR 0 12
49875: PPUSH
49876: LD_VAR 0 9
49880: PPUSH
49881: LD_INT 0
49883: PPUSH
49884: CALL 51528 0 3
// end ;
49888: GO 49842
49890: POP
49891: POP
// end ;
49892: LD_VAR 0 10
49896: RET
// export function WantHeal ( sci , unit ) ; begin
49897: LD_INT 0
49899: PPUSH
// if GetTaskList ( sci ) > 0 then
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 437
49909: PUSH
49910: LD_INT 0
49912: GREATER
49913: IFFALSE 49983
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 437
49924: PUSH
49925: LD_INT 1
49927: ARRAY
49928: PUSH
49929: LD_INT 1
49931: ARRAY
49932: PUSH
49933: LD_STRING l
49935: EQUAL
49936: PUSH
49937: LD_VAR 0 1
49941: PPUSH
49942: CALL_OW 437
49946: PUSH
49947: LD_INT 1
49949: ARRAY
49950: PUSH
49951: LD_INT 4
49953: ARRAY
49954: PUSH
49955: LD_VAR 0 2
49959: EQUAL
49960: AND
49961: IFFALSE 49973
// result := true else
49963: LD_ADDR_VAR 0 3
49967: PUSH
49968: LD_INT 1
49970: ST_TO_ADDR
49971: GO 49981
// result := false ;
49973: LD_ADDR_VAR 0 3
49977: PUSH
49978: LD_INT 0
49980: ST_TO_ADDR
// end else
49981: GO 49991
// result := false ;
49983: LD_ADDR_VAR 0 3
49987: PUSH
49988: LD_INT 0
49990: ST_TO_ADDR
// end ;
49991: LD_VAR 0 3
49995: RET
// export function HealTarget ( sci ) ; begin
49996: LD_INT 0
49998: PPUSH
// if not sci then
49999: LD_VAR 0 1
50003: NOT
50004: IFFALSE 50008
// exit ;
50006: GO 50073
// result := 0 ;
50008: LD_ADDR_VAR 0 2
50012: PUSH
50013: LD_INT 0
50015: ST_TO_ADDR
// if GetTaskList ( sci ) then
50016: LD_VAR 0 1
50020: PPUSH
50021: CALL_OW 437
50025: IFFALSE 50073
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50027: LD_VAR 0 1
50031: PPUSH
50032: CALL_OW 437
50036: PUSH
50037: LD_INT 1
50039: ARRAY
50040: PUSH
50041: LD_INT 1
50043: ARRAY
50044: PUSH
50045: LD_STRING l
50047: EQUAL
50048: IFFALSE 50073
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50050: LD_ADDR_VAR 0 2
50054: PUSH
50055: LD_VAR 0 1
50059: PPUSH
50060: CALL_OW 437
50064: PUSH
50065: LD_INT 1
50067: ARRAY
50068: PUSH
50069: LD_INT 4
50071: ARRAY
50072: ST_TO_ADDR
// end ;
50073: LD_VAR 0 2
50077: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50078: LD_INT 0
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
// if not base_units then
50084: LD_VAR 0 1
50088: NOT
50089: IFFALSE 50093
// exit ;
50091: GO 50180
// result := false ;
50093: LD_ADDR_VAR 0 2
50097: PUSH
50098: LD_INT 0
50100: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50101: LD_ADDR_VAR 0 5
50105: PUSH
50106: LD_VAR 0 1
50110: PPUSH
50111: LD_INT 21
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PPUSH
50121: CALL_OW 72
50125: ST_TO_ADDR
// if not tmp then
50126: LD_VAR 0 5
50130: NOT
50131: IFFALSE 50135
// exit ;
50133: GO 50180
// for i in tmp do
50135: LD_ADDR_VAR 0 3
50139: PUSH
50140: LD_VAR 0 5
50144: PUSH
50145: FOR_IN
50146: IFFALSE 50178
// begin result := EnemyInRange ( i , 22 ) ;
50148: LD_ADDR_VAR 0 2
50152: PUSH
50153: LD_VAR 0 3
50157: PPUSH
50158: LD_INT 22
50160: PPUSH
50161: CALL 47849 0 2
50165: ST_TO_ADDR
// if result then
50166: LD_VAR 0 2
50170: IFFALSE 50176
// exit ;
50172: POP
50173: POP
50174: GO 50180
// end ;
50176: GO 50145
50178: POP
50179: POP
// end ;
50180: LD_VAR 0 2
50184: RET
// export function FilterByTag ( units , tag ) ; begin
50185: LD_INT 0
50187: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50188: LD_ADDR_VAR 0 3
50192: PUSH
50193: LD_VAR 0 1
50197: PPUSH
50198: LD_INT 120
50200: PUSH
50201: LD_VAR 0 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PPUSH
50210: CALL_OW 72
50214: ST_TO_ADDR
// end ;
50215: LD_VAR 0 3
50219: RET
// export function IsDriver ( un ) ; begin
50220: LD_INT 0
50222: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50223: LD_ADDR_VAR 0 2
50227: PUSH
50228: LD_VAR 0 1
50232: PUSH
50233: LD_INT 55
50235: PUSH
50236: EMPTY
50237: LIST
50238: PPUSH
50239: CALL_OW 69
50243: IN
50244: ST_TO_ADDR
// end ;
50245: LD_VAR 0 2
50249: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50250: LD_INT 0
50252: PPUSH
50253: PPUSH
// list := [ ] ;
50254: LD_ADDR_VAR 0 5
50258: PUSH
50259: EMPTY
50260: ST_TO_ADDR
// case d of 0 :
50261: LD_VAR 0 3
50265: PUSH
50266: LD_INT 0
50268: DOUBLE
50269: EQUAL
50270: IFTRUE 50274
50272: GO 50407
50274: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50275: LD_ADDR_VAR 0 5
50279: PUSH
50280: LD_VAR 0 1
50284: PUSH
50285: LD_INT 4
50287: MINUS
50288: PUSH
50289: LD_VAR 0 2
50293: PUSH
50294: LD_INT 4
50296: MINUS
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: PUSH
50306: LD_VAR 0 1
50310: PUSH
50311: LD_INT 3
50313: MINUS
50314: PUSH
50315: LD_VAR 0 2
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: LD_VAR 0 1
50332: PUSH
50333: LD_INT 4
50335: PLUS
50336: PUSH
50337: LD_VAR 0 2
50341: PUSH
50342: LD_INT 4
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: PUSH
50350: LD_VAR 0 1
50354: PUSH
50355: LD_INT 3
50357: PLUS
50358: PUSH
50359: LD_VAR 0 2
50363: PUSH
50364: LD_INT 3
50366: PLUS
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: PUSH
50376: LD_VAR 0 1
50380: PUSH
50381: LD_VAR 0 2
50385: PUSH
50386: LD_INT 4
50388: PLUS
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// end ; 1 :
50405: GO 51105
50407: LD_INT 1
50409: DOUBLE
50410: EQUAL
50411: IFTRUE 50415
50413: GO 50548
50415: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50416: LD_ADDR_VAR 0 5
50420: PUSH
50421: LD_VAR 0 1
50425: PUSH
50426: LD_VAR 0 2
50430: PUSH
50431: LD_INT 4
50433: MINUS
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: PUSH
50443: LD_VAR 0 1
50447: PUSH
50448: LD_INT 3
50450: MINUS
50451: PUSH
50452: LD_VAR 0 2
50456: PUSH
50457: LD_INT 3
50459: MINUS
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: PUSH
50469: LD_VAR 0 1
50473: PUSH
50474: LD_INT 4
50476: MINUS
50477: PUSH
50478: LD_VAR 0 2
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: PUSH
50491: LD_VAR 0 1
50495: PUSH
50496: LD_VAR 0 2
50500: PUSH
50501: LD_INT 3
50503: PLUS
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: PUSH
50513: LD_VAR 0 1
50517: PUSH
50518: LD_INT 4
50520: PLUS
50521: PUSH
50522: LD_VAR 0 2
50526: PUSH
50527: LD_INT 4
50529: PLUS
50530: PUSH
50531: LD_INT 5
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// end ; 2 :
50546: GO 51105
50548: LD_INT 2
50550: DOUBLE
50551: EQUAL
50552: IFTRUE 50556
50554: GO 50685
50556: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50557: LD_ADDR_VAR 0 5
50561: PUSH
50562: LD_VAR 0 1
50566: PUSH
50567: LD_VAR 0 2
50571: PUSH
50572: LD_INT 3
50574: MINUS
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: PUSH
50584: LD_VAR 0 1
50588: PUSH
50589: LD_INT 4
50591: PLUS
50592: PUSH
50593: LD_VAR 0 2
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: PUSH
50606: LD_VAR 0 1
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_INT 4
50618: PLUS
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: LD_VAR 0 1
50632: PUSH
50633: LD_INT 3
50635: MINUS
50636: PUSH
50637: LD_VAR 0 2
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: PUSH
50650: LD_VAR 0 1
50654: PUSH
50655: LD_INT 4
50657: MINUS
50658: PUSH
50659: LD_VAR 0 2
50663: PUSH
50664: LD_INT 4
50666: MINUS
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// end ; 3 :
50683: GO 51105
50685: LD_INT 3
50687: DOUBLE
50688: EQUAL
50689: IFTRUE 50693
50691: GO 50826
50693: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50694: LD_ADDR_VAR 0 5
50698: PUSH
50699: LD_VAR 0 1
50703: PUSH
50704: LD_INT 3
50706: PLUS
50707: PUSH
50708: LD_VAR 0 2
50712: PUSH
50713: LD_INT 4
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: PUSH
50721: LD_VAR 0 1
50725: PUSH
50726: LD_INT 4
50728: PLUS
50729: PUSH
50730: LD_VAR 0 2
50734: PUSH
50735: LD_INT 4
50737: PLUS
50738: PUSH
50739: LD_INT 5
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: PUSH
50747: LD_VAR 0 1
50751: PUSH
50752: LD_INT 4
50754: MINUS
50755: PUSH
50756: LD_VAR 0 2
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: PUSH
50769: LD_VAR 0 1
50773: PUSH
50774: LD_VAR 0 2
50778: PUSH
50779: LD_INT 4
50781: MINUS
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: PUSH
50791: LD_VAR 0 1
50795: PUSH
50796: LD_INT 3
50798: MINUS
50799: PUSH
50800: LD_VAR 0 2
50804: PUSH
50805: LD_INT 3
50807: MINUS
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// end ; 4 :
50824: GO 51105
50826: LD_INT 4
50828: DOUBLE
50829: EQUAL
50830: IFTRUE 50834
50832: GO 50967
50834: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50835: LD_ADDR_VAR 0 5
50839: PUSH
50840: LD_VAR 0 1
50844: PUSH
50845: LD_VAR 0 2
50849: PUSH
50850: LD_INT 4
50852: PLUS
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: LD_VAR 0 1
50866: PUSH
50867: LD_INT 3
50869: PLUS
50870: PUSH
50871: LD_VAR 0 2
50875: PUSH
50876: LD_INT 3
50878: PLUS
50879: PUSH
50880: LD_INT 5
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: PUSH
50888: LD_VAR 0 1
50892: PUSH
50893: LD_INT 4
50895: PLUS
50896: PUSH
50897: LD_VAR 0 2
50901: PUSH
50902: LD_INT 4
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: PUSH
50910: LD_VAR 0 1
50914: PUSH
50915: LD_VAR 0 2
50919: PUSH
50920: LD_INT 3
50922: MINUS
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_INT 4
50939: MINUS
50940: PUSH
50941: LD_VAR 0 2
50945: PUSH
50946: LD_INT 4
50948: MINUS
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: ST_TO_ADDR
// end ; 5 :
50965: GO 51105
50967: LD_INT 5
50969: DOUBLE
50970: EQUAL
50971: IFTRUE 50975
50973: GO 51104
50975: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50976: LD_ADDR_VAR 0 5
50980: PUSH
50981: LD_VAR 0 1
50985: PUSH
50986: LD_INT 4
50988: MINUS
50989: PUSH
50990: LD_VAR 0 2
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: PUSH
51003: LD_VAR 0 1
51007: PUSH
51008: LD_VAR 0 2
51012: PUSH
51013: LD_INT 4
51015: MINUS
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_INT 4
51032: PLUS
51033: PUSH
51034: LD_VAR 0 2
51038: PUSH
51039: LD_INT 4
51041: PLUS
51042: PUSH
51043: LD_INT 5
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: PUSH
51051: LD_VAR 0 1
51055: PUSH
51056: LD_INT 3
51058: PLUS
51059: PUSH
51060: LD_VAR 0 2
51064: PUSH
51065: LD_INT 4
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: PUSH
51073: LD_VAR 0 1
51077: PUSH
51078: LD_VAR 0 2
51082: PUSH
51083: LD_INT 3
51085: PLUS
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// end ; end ;
51102: GO 51105
51104: POP
// result := list ;
51105: LD_ADDR_VAR 0 4
51109: PUSH
51110: LD_VAR 0 5
51114: ST_TO_ADDR
// end ;
51115: LD_VAR 0 4
51119: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51120: LD_INT 0
51122: PPUSH
51123: PPUSH
51124: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51125: LD_VAR 0 1
51129: NOT
51130: PUSH
51131: LD_VAR 0 2
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: IN
51154: NOT
51155: OR
51156: IFFALSE 51160
// exit ;
51158: GO 51252
// tmp := [ ] ;
51160: LD_ADDR_VAR 0 5
51164: PUSH
51165: EMPTY
51166: ST_TO_ADDR
// for i in units do
51167: LD_ADDR_VAR 0 4
51171: PUSH
51172: LD_VAR 0 1
51176: PUSH
51177: FOR_IN
51178: IFFALSE 51221
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51180: LD_ADDR_VAR 0 5
51184: PUSH
51185: LD_VAR 0 5
51189: PPUSH
51190: LD_VAR 0 5
51194: PUSH
51195: LD_INT 1
51197: PLUS
51198: PPUSH
51199: LD_VAR 0 4
51203: PPUSH
51204: LD_VAR 0 2
51208: PPUSH
51209: CALL_OW 259
51213: PPUSH
51214: CALL_OW 2
51218: ST_TO_ADDR
51219: GO 51177
51221: POP
51222: POP
// if not tmp then
51223: LD_VAR 0 5
51227: NOT
51228: IFFALSE 51232
// exit ;
51230: GO 51252
// result := SortListByListDesc ( units , tmp ) ;
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_VAR 0 1
51241: PPUSH
51242: LD_VAR 0 5
51246: PPUSH
51247: CALL_OW 77
51251: ST_TO_ADDR
// end ;
51252: LD_VAR 0 3
51256: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51257: LD_INT 0
51259: PPUSH
51260: PPUSH
51261: PPUSH
// result := false ;
51262: LD_ADDR_VAR 0 3
51266: PUSH
51267: LD_INT 0
51269: ST_TO_ADDR
// x := GetX ( building ) ;
51270: LD_ADDR_VAR 0 4
51274: PUSH
51275: LD_VAR 0 2
51279: PPUSH
51280: CALL_OW 250
51284: ST_TO_ADDR
// y := GetY ( building ) ;
51285: LD_ADDR_VAR 0 5
51289: PUSH
51290: LD_VAR 0 2
51294: PPUSH
51295: CALL_OW 251
51299: ST_TO_ADDR
// if not building or not x or not y then
51300: LD_VAR 0 2
51304: NOT
51305: PUSH
51306: LD_VAR 0 4
51310: NOT
51311: OR
51312: PUSH
51313: LD_VAR 0 5
51317: NOT
51318: OR
51319: IFFALSE 51323
// exit ;
51321: GO 51415
// if GetTaskList ( unit ) then
51323: LD_VAR 0 1
51327: PPUSH
51328: CALL_OW 437
51332: IFFALSE 51415
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51334: LD_STRING e
51336: PUSH
51337: LD_VAR 0 1
51341: PPUSH
51342: CALL_OW 437
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: PUSH
51351: LD_INT 1
51353: ARRAY
51354: EQUAL
51355: PUSH
51356: LD_VAR 0 4
51360: PUSH
51361: LD_VAR 0 1
51365: PPUSH
51366: CALL_OW 437
51370: PUSH
51371: LD_INT 1
51373: ARRAY
51374: PUSH
51375: LD_INT 2
51377: ARRAY
51378: EQUAL
51379: AND
51380: PUSH
51381: LD_VAR 0 5
51385: PUSH
51386: LD_VAR 0 1
51390: PPUSH
51391: CALL_OW 437
51395: PUSH
51396: LD_INT 1
51398: ARRAY
51399: PUSH
51400: LD_INT 3
51402: ARRAY
51403: EQUAL
51404: AND
51405: IFFALSE 51415
// result := true end ;
51407: LD_ADDR_VAR 0 3
51411: PUSH
51412: LD_INT 1
51414: ST_TO_ADDR
// end ;
51415: LD_VAR 0 3
51419: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51420: LD_INT 0
51422: PPUSH
// result := false ;
51423: LD_ADDR_VAR 0 4
51427: PUSH
51428: LD_INT 0
51430: ST_TO_ADDR
// if GetTaskList ( unit ) then
51431: LD_VAR 0 1
51435: PPUSH
51436: CALL_OW 437
51440: IFFALSE 51523
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51442: LD_STRING M
51444: PUSH
51445: LD_VAR 0 1
51449: PPUSH
51450: CALL_OW 437
51454: PUSH
51455: LD_INT 1
51457: ARRAY
51458: PUSH
51459: LD_INT 1
51461: ARRAY
51462: EQUAL
51463: PUSH
51464: LD_VAR 0 2
51468: PUSH
51469: LD_VAR 0 1
51473: PPUSH
51474: CALL_OW 437
51478: PUSH
51479: LD_INT 1
51481: ARRAY
51482: PUSH
51483: LD_INT 2
51485: ARRAY
51486: EQUAL
51487: AND
51488: PUSH
51489: LD_VAR 0 3
51493: PUSH
51494: LD_VAR 0 1
51498: PPUSH
51499: CALL_OW 437
51503: PUSH
51504: LD_INT 1
51506: ARRAY
51507: PUSH
51508: LD_INT 3
51510: ARRAY
51511: EQUAL
51512: AND
51513: IFFALSE 51523
// result := true ;
51515: LD_ADDR_VAR 0 4
51519: PUSH
51520: LD_INT 1
51522: ST_TO_ADDR
// end ; end ;
51523: LD_VAR 0 4
51527: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51528: LD_INT 0
51530: PPUSH
51531: PPUSH
51532: PPUSH
51533: PPUSH
// if not unit or not area then
51534: LD_VAR 0 1
51538: NOT
51539: PUSH
51540: LD_VAR 0 2
51544: NOT
51545: OR
51546: IFFALSE 51550
// exit ;
51548: GO 51714
// tmp := AreaToList ( area , i ) ;
51550: LD_ADDR_VAR 0 6
51554: PUSH
51555: LD_VAR 0 2
51559: PPUSH
51560: LD_VAR 0 5
51564: PPUSH
51565: CALL_OW 517
51569: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51570: LD_ADDR_VAR 0 5
51574: PUSH
51575: DOUBLE
51576: LD_INT 1
51578: DEC
51579: ST_TO_ADDR
51580: LD_VAR 0 6
51584: PUSH
51585: LD_INT 1
51587: ARRAY
51588: PUSH
51589: FOR_TO
51590: IFFALSE 51712
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51592: LD_ADDR_VAR 0 7
51596: PUSH
51597: LD_VAR 0 6
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: PUSH
51606: LD_VAR 0 5
51610: ARRAY
51611: PUSH
51612: LD_VAR 0 6
51616: PUSH
51617: LD_INT 2
51619: ARRAY
51620: PUSH
51621: LD_VAR 0 5
51625: ARRAY
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51631: LD_VAR 0 7
51635: PUSH
51636: LD_INT 1
51638: ARRAY
51639: PPUSH
51640: LD_VAR 0 7
51644: PUSH
51645: LD_INT 2
51647: ARRAY
51648: PPUSH
51649: CALL_OW 428
51653: PUSH
51654: LD_INT 0
51656: EQUAL
51657: IFFALSE 51710
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51659: LD_VAR 0 1
51663: PPUSH
51664: LD_VAR 0 7
51668: PUSH
51669: LD_INT 1
51671: ARRAY
51672: PPUSH
51673: LD_VAR 0 7
51677: PUSH
51678: LD_INT 2
51680: ARRAY
51681: PPUSH
51682: LD_VAR 0 3
51686: PPUSH
51687: CALL_OW 48
// result := IsPlaced ( unit ) ;
51691: LD_ADDR_VAR 0 4
51695: PUSH
51696: LD_VAR 0 1
51700: PPUSH
51701: CALL_OW 305
51705: ST_TO_ADDR
// exit ;
51706: POP
51707: POP
51708: GO 51714
// end ; end ;
51710: GO 51589
51712: POP
51713: POP
// end ;
51714: LD_VAR 0 4
51718: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51719: LD_INT 0
51721: PPUSH
51722: PPUSH
51723: PPUSH
// if not side or side > 8 then
51724: LD_VAR 0 1
51728: NOT
51729: PUSH
51730: LD_VAR 0 1
51734: PUSH
51735: LD_INT 8
51737: GREATER
51738: OR
51739: IFFALSE 51743
// exit ;
51741: GO 51930
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51743: LD_ADDR_VAR 0 4
51747: PUSH
51748: LD_INT 22
51750: PUSH
51751: LD_VAR 0 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 21
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PPUSH
51774: CALL_OW 69
51778: ST_TO_ADDR
// if not tmp then
51779: LD_VAR 0 4
51783: NOT
51784: IFFALSE 51788
// exit ;
51786: GO 51930
// enable_addtolog := true ;
51788: LD_ADDR_OWVAR 81
51792: PUSH
51793: LD_INT 1
51795: ST_TO_ADDR
// AddToLog ( [ ) ;
51796: LD_STRING [
51798: PPUSH
51799: CALL_OW 561
// for i in tmp do
51803: LD_ADDR_VAR 0 3
51807: PUSH
51808: LD_VAR 0 4
51812: PUSH
51813: FOR_IN
51814: IFFALSE 51921
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51816: LD_STRING [
51818: PUSH
51819: LD_VAR 0 3
51823: PPUSH
51824: CALL_OW 266
51828: STR
51829: PUSH
51830: LD_STRING , 
51832: STR
51833: PUSH
51834: LD_VAR 0 3
51838: PPUSH
51839: CALL_OW 250
51843: STR
51844: PUSH
51845: LD_STRING , 
51847: STR
51848: PUSH
51849: LD_VAR 0 3
51853: PPUSH
51854: CALL_OW 251
51858: STR
51859: PUSH
51860: LD_STRING , 
51862: STR
51863: PUSH
51864: LD_VAR 0 3
51868: PPUSH
51869: CALL_OW 254
51873: STR
51874: PUSH
51875: LD_STRING , 
51877: STR
51878: PUSH
51879: LD_VAR 0 3
51883: PPUSH
51884: LD_INT 1
51886: PPUSH
51887: CALL_OW 268
51891: STR
51892: PUSH
51893: LD_STRING , 
51895: STR
51896: PUSH
51897: LD_VAR 0 3
51901: PPUSH
51902: LD_INT 2
51904: PPUSH
51905: CALL_OW 268
51909: STR
51910: PUSH
51911: LD_STRING ],
51913: STR
51914: PPUSH
51915: CALL_OW 561
// end ;
51919: GO 51813
51921: POP
51922: POP
// AddToLog ( ]; ) ;
51923: LD_STRING ];
51925: PPUSH
51926: CALL_OW 561
// end ;
51930: LD_VAR 0 2
51934: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51935: LD_INT 0
51937: PPUSH
51938: PPUSH
51939: PPUSH
51940: PPUSH
51941: PPUSH
// if not area or not rate or not max then
51942: LD_VAR 0 1
51946: NOT
51947: PUSH
51948: LD_VAR 0 2
51952: NOT
51953: OR
51954: PUSH
51955: LD_VAR 0 4
51959: NOT
51960: OR
51961: IFFALSE 51965
// exit ;
51963: GO 52154
// while 1 do
51965: LD_INT 1
51967: IFFALSE 52154
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51969: LD_ADDR_VAR 0 9
51973: PUSH
51974: LD_VAR 0 1
51978: PPUSH
51979: LD_INT 1
51981: PPUSH
51982: CALL_OW 287
51986: PUSH
51987: LD_INT 10
51989: MUL
51990: ST_TO_ADDR
// r := rate / 10 ;
51991: LD_ADDR_VAR 0 7
51995: PUSH
51996: LD_VAR 0 2
52000: PUSH
52001: LD_INT 10
52003: DIVREAL
52004: ST_TO_ADDR
// time := 1 1$00 ;
52005: LD_ADDR_VAR 0 8
52009: PUSH
52010: LD_INT 2100
52012: ST_TO_ADDR
// if amount < min then
52013: LD_VAR 0 9
52017: PUSH
52018: LD_VAR 0 3
52022: LESS
52023: IFFALSE 52041
// r := r * 2 else
52025: LD_ADDR_VAR 0 7
52029: PUSH
52030: LD_VAR 0 7
52034: PUSH
52035: LD_INT 2
52037: MUL
52038: ST_TO_ADDR
52039: GO 52067
// if amount > max then
52041: LD_VAR 0 9
52045: PUSH
52046: LD_VAR 0 4
52050: GREATER
52051: IFFALSE 52067
// r := r / 2 ;
52053: LD_ADDR_VAR 0 7
52057: PUSH
52058: LD_VAR 0 7
52062: PUSH
52063: LD_INT 2
52065: DIVREAL
52066: ST_TO_ADDR
// time := time / r ;
52067: LD_ADDR_VAR 0 8
52071: PUSH
52072: LD_VAR 0 8
52076: PUSH
52077: LD_VAR 0 7
52081: DIVREAL
52082: ST_TO_ADDR
// if time < 0 then
52083: LD_VAR 0 8
52087: PUSH
52088: LD_INT 0
52090: LESS
52091: IFFALSE 52108
// time := time * - 1 ;
52093: LD_ADDR_VAR 0 8
52097: PUSH
52098: LD_VAR 0 8
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: MUL
52107: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52108: LD_VAR 0 8
52112: PUSH
52113: LD_INT 35
52115: PPUSH
52116: LD_INT 875
52118: PPUSH
52119: CALL_OW 12
52123: PLUS
52124: PPUSH
52125: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52129: LD_INT 1
52131: PPUSH
52132: LD_INT 5
52134: PPUSH
52135: CALL_OW 12
52139: PPUSH
52140: LD_VAR 0 1
52144: PPUSH
52145: LD_INT 1
52147: PPUSH
52148: CALL_OW 55
// end ;
52152: GO 51965
// end ;
52154: LD_VAR 0 5
52158: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52159: LD_INT 0
52161: PPUSH
52162: PPUSH
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
// if not turrets or not factories then
52169: LD_VAR 0 1
52173: NOT
52174: PUSH
52175: LD_VAR 0 2
52179: NOT
52180: OR
52181: IFFALSE 52185
// exit ;
52183: GO 52492
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52185: LD_ADDR_VAR 0 10
52189: PUSH
52190: LD_INT 5
52192: PUSH
52193: LD_INT 6
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 5
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 24
52227: PUSH
52228: LD_INT 25
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 23
52237: PUSH
52238: LD_INT 27
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 42
52251: PUSH
52252: LD_INT 43
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 44
52261: PUSH
52262: LD_INT 46
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 45
52271: PUSH
52272: LD_INT 47
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// result := [ ] ;
52289: LD_ADDR_VAR 0 3
52293: PUSH
52294: EMPTY
52295: ST_TO_ADDR
// for i in turrets do
52296: LD_ADDR_VAR 0 4
52300: PUSH
52301: LD_VAR 0 1
52305: PUSH
52306: FOR_IN
52307: IFFALSE 52490
// begin nat := GetNation ( i ) ;
52309: LD_ADDR_VAR 0 7
52313: PUSH
52314: LD_VAR 0 4
52318: PPUSH
52319: CALL_OW 248
52323: ST_TO_ADDR
// weapon := 0 ;
52324: LD_ADDR_VAR 0 8
52328: PUSH
52329: LD_INT 0
52331: ST_TO_ADDR
// if not nat then
52332: LD_VAR 0 7
52336: NOT
52337: IFFALSE 52341
// continue ;
52339: GO 52306
// for j in list [ nat ] do
52341: LD_ADDR_VAR 0 5
52345: PUSH
52346: LD_VAR 0 10
52350: PUSH
52351: LD_VAR 0 7
52355: ARRAY
52356: PUSH
52357: FOR_IN
52358: IFFALSE 52399
// if GetBWeapon ( i ) = j [ 1 ] then
52360: LD_VAR 0 4
52364: PPUSH
52365: CALL_OW 269
52369: PUSH
52370: LD_VAR 0 5
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: EQUAL
52379: IFFALSE 52397
// begin weapon := j [ 2 ] ;
52381: LD_ADDR_VAR 0 8
52385: PUSH
52386: LD_VAR 0 5
52390: PUSH
52391: LD_INT 2
52393: ARRAY
52394: ST_TO_ADDR
// break ;
52395: GO 52399
// end ;
52397: GO 52357
52399: POP
52400: POP
// if not weapon then
52401: LD_VAR 0 8
52405: NOT
52406: IFFALSE 52410
// continue ;
52408: GO 52306
// for k in factories do
52410: LD_ADDR_VAR 0 6
52414: PUSH
52415: LD_VAR 0 2
52419: PUSH
52420: FOR_IN
52421: IFFALSE 52486
// begin weapons := AvailableWeaponList ( k ) ;
52423: LD_ADDR_VAR 0 9
52427: PUSH
52428: LD_VAR 0 6
52432: PPUSH
52433: CALL_OW 478
52437: ST_TO_ADDR
// if not weapons then
52438: LD_VAR 0 9
52442: NOT
52443: IFFALSE 52447
// continue ;
52445: GO 52420
// if weapon in weapons then
52447: LD_VAR 0 8
52451: PUSH
52452: LD_VAR 0 9
52456: IN
52457: IFFALSE 52484
// begin result := [ i , weapon ] ;
52459: LD_ADDR_VAR 0 3
52463: PUSH
52464: LD_VAR 0 4
52468: PUSH
52469: LD_VAR 0 8
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: ST_TO_ADDR
// exit ;
52478: POP
52479: POP
52480: POP
52481: POP
52482: GO 52492
// end ; end ;
52484: GO 52420
52486: POP
52487: POP
// end ;
52488: GO 52306
52490: POP
52491: POP
// end ;
52492: LD_VAR 0 3
52496: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52497: LD_INT 0
52499: PPUSH
// if not side or side > 8 then
52500: LD_VAR 0 3
52504: NOT
52505: PUSH
52506: LD_VAR 0 3
52510: PUSH
52511: LD_INT 8
52513: GREATER
52514: OR
52515: IFFALSE 52519
// exit ;
52517: GO 52578
// if not range then
52519: LD_VAR 0 4
52523: NOT
52524: IFFALSE 52535
// range := - 12 ;
52526: LD_ADDR_VAR 0 4
52530: PUSH
52531: LD_INT 12
52533: NEG
52534: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52535: LD_VAR 0 1
52539: PPUSH
52540: LD_VAR 0 2
52544: PPUSH
52545: LD_VAR 0 3
52549: PPUSH
52550: LD_VAR 0 4
52554: PPUSH
52555: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52559: LD_VAR 0 1
52563: PPUSH
52564: LD_VAR 0 2
52568: PPUSH
52569: LD_VAR 0 3
52573: PPUSH
52574: CALL_OW 331
// end ;
52578: LD_VAR 0 5
52582: RET
// export function Video ( mode ) ; begin
52583: LD_INT 0
52585: PPUSH
// ingame_video = mode ;
52586: LD_ADDR_OWVAR 52
52590: PUSH
52591: LD_VAR 0 1
52595: ST_TO_ADDR
// interface_hidden = mode ;
52596: LD_ADDR_OWVAR 54
52600: PUSH
52601: LD_VAR 0 1
52605: ST_TO_ADDR
// end ;
52606: LD_VAR 0 2
52610: RET
// export function Join ( array , element ) ; begin
52611: LD_INT 0
52613: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52614: LD_ADDR_VAR 0 3
52618: PUSH
52619: LD_VAR 0 1
52623: PPUSH
52624: LD_VAR 0 1
52628: PUSH
52629: LD_INT 1
52631: PLUS
52632: PPUSH
52633: LD_VAR 0 2
52637: PPUSH
52638: CALL_OW 1
52642: ST_TO_ADDR
// end ;
52643: LD_VAR 0 3
52647: RET
// export function JoinUnion ( array , element ) ; begin
52648: LD_INT 0
52650: PPUSH
// result := array union element ;
52651: LD_ADDR_VAR 0 3
52655: PUSH
52656: LD_VAR 0 1
52660: PUSH
52661: LD_VAR 0 2
52665: UNION
52666: ST_TO_ADDR
// end ;
52667: LD_VAR 0 3
52671: RET
// export function GetBehemoths ( side ) ; begin
52672: LD_INT 0
52674: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52675: LD_ADDR_VAR 0 2
52679: PUSH
52680: LD_INT 22
52682: PUSH
52683: LD_VAR 0 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 31
52694: PUSH
52695: LD_INT 25
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PPUSH
52706: CALL_OW 69
52710: ST_TO_ADDR
// end ;
52711: LD_VAR 0 2
52715: RET
// export function Shuffle ( array ) ; var i , index ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
52720: PPUSH
// result := [ ] ;
52721: LD_ADDR_VAR 0 2
52725: PUSH
52726: EMPTY
52727: ST_TO_ADDR
// if not array then
52728: LD_VAR 0 1
52732: NOT
52733: IFFALSE 52737
// exit ;
52735: GO 52836
// Randomize ;
52737: CALL_OW 10
// for i = array downto 1 do
52741: LD_ADDR_VAR 0 3
52745: PUSH
52746: DOUBLE
52747: LD_VAR 0 1
52751: INC
52752: ST_TO_ADDR
52753: LD_INT 1
52755: PUSH
52756: FOR_DOWNTO
52757: IFFALSE 52834
// begin index := rand ( 1 , array ) ;
52759: LD_ADDR_VAR 0 4
52763: PUSH
52764: LD_INT 1
52766: PPUSH
52767: LD_VAR 0 1
52771: PPUSH
52772: CALL_OW 12
52776: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52777: LD_ADDR_VAR 0 2
52781: PUSH
52782: LD_VAR 0 2
52786: PPUSH
52787: LD_VAR 0 2
52791: PUSH
52792: LD_INT 1
52794: PLUS
52795: PPUSH
52796: LD_VAR 0 1
52800: PUSH
52801: LD_VAR 0 4
52805: ARRAY
52806: PPUSH
52807: CALL_OW 2
52811: ST_TO_ADDR
// array := Delete ( array , index ) ;
52812: LD_ADDR_VAR 0 1
52816: PUSH
52817: LD_VAR 0 1
52821: PPUSH
52822: LD_VAR 0 4
52826: PPUSH
52827: CALL_OW 3
52831: ST_TO_ADDR
// end ;
52832: GO 52756
52834: POP
52835: POP
// end ;
52836: LD_VAR 0 2
52840: RET
// export function GetBaseMaterials ( base ) ; begin
52841: LD_INT 0
52843: PPUSH
// result := [ 0 , 0 , 0 ] ;
52844: LD_ADDR_VAR 0 2
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: ST_TO_ADDR
// if not base then
52863: LD_VAR 0 1
52867: NOT
52868: IFFALSE 52872
// exit ;
52870: GO 52921
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52872: LD_ADDR_VAR 0 2
52876: PUSH
52877: LD_VAR 0 1
52881: PPUSH
52882: LD_INT 1
52884: PPUSH
52885: CALL_OW 275
52889: PUSH
52890: LD_VAR 0 1
52894: PPUSH
52895: LD_INT 2
52897: PPUSH
52898: CALL_OW 275
52902: PUSH
52903: LD_VAR 0 1
52907: PPUSH
52908: LD_INT 3
52910: PPUSH
52911: CALL_OW 275
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// end ;
52921: LD_VAR 0 2
52925: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52926: LD_INT 0
52928: PPUSH
52929: PPUSH
// result := array ;
52930: LD_ADDR_VAR 0 3
52934: PUSH
52935: LD_VAR 0 1
52939: ST_TO_ADDR
// if size >= result then
52940: LD_VAR 0 2
52944: PUSH
52945: LD_VAR 0 3
52949: GREATEREQUAL
52950: IFFALSE 52954
// exit ;
52952: GO 53004
// if size then
52954: LD_VAR 0 2
52958: IFFALSE 53004
// for i := array downto size do
52960: LD_ADDR_VAR 0 4
52964: PUSH
52965: DOUBLE
52966: LD_VAR 0 1
52970: INC
52971: ST_TO_ADDR
52972: LD_VAR 0 2
52976: PUSH
52977: FOR_DOWNTO
52978: IFFALSE 53002
// result := Delete ( result , result ) ;
52980: LD_ADDR_VAR 0 3
52984: PUSH
52985: LD_VAR 0 3
52989: PPUSH
52990: LD_VAR 0 3
52994: PPUSH
52995: CALL_OW 3
52999: ST_TO_ADDR
53000: GO 52977
53002: POP
53003: POP
// end ;
53004: LD_VAR 0 3
53008: RET
// export function ComExit ( unit ) ; var tmp ; begin
53009: LD_INT 0
53011: PPUSH
53012: PPUSH
// if not IsInUnit ( unit ) then
53013: LD_VAR 0 1
53017: PPUSH
53018: CALL_OW 310
53022: NOT
53023: IFFALSE 53027
// exit ;
53025: GO 53087
// tmp := IsInUnit ( unit ) ;
53027: LD_ADDR_VAR 0 3
53031: PUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 310
53041: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53042: LD_VAR 0 3
53046: PPUSH
53047: CALL_OW 247
53051: PUSH
53052: LD_INT 2
53054: EQUAL
53055: IFFALSE 53068
// ComExitVehicle ( unit ) else
53057: LD_VAR 0 1
53061: PPUSH
53062: CALL_OW 121
53066: GO 53077
// ComExitBuilding ( unit ) ;
53068: LD_VAR 0 1
53072: PPUSH
53073: CALL_OW 122
// result := tmp ;
53077: LD_ADDR_VAR 0 2
53081: PUSH
53082: LD_VAR 0 3
53086: ST_TO_ADDR
// end ;
53087: LD_VAR 0 2
53091: RET
// export function ComExitAll ( units ) ; var i ; begin
53092: LD_INT 0
53094: PPUSH
53095: PPUSH
// if not units then
53096: LD_VAR 0 1
53100: NOT
53101: IFFALSE 53105
// exit ;
53103: GO 53131
// for i in units do
53105: LD_ADDR_VAR 0 3
53109: PUSH
53110: LD_VAR 0 1
53114: PUSH
53115: FOR_IN
53116: IFFALSE 53129
// ComExit ( i ) ;
53118: LD_VAR 0 3
53122: PPUSH
53123: CALL 53009 0 1
53127: GO 53115
53129: POP
53130: POP
// end ;
53131: LD_VAR 0 2
53135: RET
// export function ResetHc ; begin
53136: LD_INT 0
53138: PPUSH
// InitHc ;
53139: CALL_OW 19
// hc_importance := 0 ;
53143: LD_ADDR_OWVAR 32
53147: PUSH
53148: LD_INT 0
53150: ST_TO_ADDR
// end ;
53151: LD_VAR 0 1
53155: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53156: LD_INT 0
53158: PPUSH
53159: PPUSH
53160: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53161: LD_ADDR_VAR 0 6
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_VAR 0 3
53175: PLUS
53176: PUSH
53177: LD_INT 2
53179: DIV
53180: ST_TO_ADDR
// if _x < 0 then
53181: LD_VAR 0 6
53185: PUSH
53186: LD_INT 0
53188: LESS
53189: IFFALSE 53206
// _x := _x * - 1 ;
53191: LD_ADDR_VAR 0 6
53195: PUSH
53196: LD_VAR 0 6
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: MUL
53205: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53206: LD_ADDR_VAR 0 7
53210: PUSH
53211: LD_VAR 0 2
53215: PUSH
53216: LD_VAR 0 4
53220: PLUS
53221: PUSH
53222: LD_INT 2
53224: DIV
53225: ST_TO_ADDR
// if _y < 0 then
53226: LD_VAR 0 7
53230: PUSH
53231: LD_INT 0
53233: LESS
53234: IFFALSE 53251
// _y := _y * - 1 ;
53236: LD_ADDR_VAR 0 7
53240: PUSH
53241: LD_VAR 0 7
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: MUL
53250: ST_TO_ADDR
// result := [ _x , _y ] ;
53251: LD_ADDR_VAR 0 5
53255: PUSH
53256: LD_VAR 0 6
53260: PUSH
53261: LD_VAR 0 7
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// end ;
53270: LD_VAR 0 5
53274: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53275: LD_INT 0
53277: PPUSH
53278: PPUSH
53279: PPUSH
53280: PPUSH
// task := GetTaskList ( unit ) ;
53281: LD_ADDR_VAR 0 7
53285: PUSH
53286: LD_VAR 0 1
53290: PPUSH
53291: CALL_OW 437
53295: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53296: LD_VAR 0 7
53300: NOT
53301: PUSH
53302: LD_VAR 0 1
53306: PPUSH
53307: LD_VAR 0 2
53311: PPUSH
53312: CALL_OW 308
53316: NOT
53317: AND
53318: IFFALSE 53322
// exit ;
53320: GO 53440
// if IsInArea ( unit , area ) then
53322: LD_VAR 0 1
53326: PPUSH
53327: LD_VAR 0 2
53331: PPUSH
53332: CALL_OW 308
53336: IFFALSE 53354
// begin ComMoveToArea ( unit , goAway ) ;
53338: LD_VAR 0 1
53342: PPUSH
53343: LD_VAR 0 3
53347: PPUSH
53348: CALL_OW 113
// exit ;
53352: GO 53440
// end ; if task [ 1 ] [ 1 ] <> M then
53354: LD_VAR 0 7
53358: PUSH
53359: LD_INT 1
53361: ARRAY
53362: PUSH
53363: LD_INT 1
53365: ARRAY
53366: PUSH
53367: LD_STRING M
53369: NONEQUAL
53370: IFFALSE 53374
// exit ;
53372: GO 53440
// x := task [ 1 ] [ 2 ] ;
53374: LD_ADDR_VAR 0 5
53378: PUSH
53379: LD_VAR 0 7
53383: PUSH
53384: LD_INT 1
53386: ARRAY
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53392: LD_ADDR_VAR 0 6
53396: PUSH
53397: LD_VAR 0 7
53401: PUSH
53402: LD_INT 1
53404: ARRAY
53405: PUSH
53406: LD_INT 3
53408: ARRAY
53409: ST_TO_ADDR
// if InArea ( x , y , area ) then
53410: LD_VAR 0 5
53414: PPUSH
53415: LD_VAR 0 6
53419: PPUSH
53420: LD_VAR 0 2
53424: PPUSH
53425: CALL_OW 309
53429: IFFALSE 53440
// ComStop ( unit ) ;
53431: LD_VAR 0 1
53435: PPUSH
53436: CALL_OW 141
// end ;
53440: LD_VAR 0 4
53444: RET
// export function Abs ( value ) ; begin
53445: LD_INT 0
53447: PPUSH
// result := value ;
53448: LD_ADDR_VAR 0 2
53452: PUSH
53453: LD_VAR 0 1
53457: ST_TO_ADDR
// if value < 0 then
53458: LD_VAR 0 1
53462: PUSH
53463: LD_INT 0
53465: LESS
53466: IFFALSE 53483
// result := value * - 1 ;
53468: LD_ADDR_VAR 0 2
53472: PUSH
53473: LD_VAR 0 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: MUL
53482: ST_TO_ADDR
// end ;
53483: LD_VAR 0 2
53487: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53488: LD_INT 0
53490: PPUSH
53491: PPUSH
53492: PPUSH
53493: PPUSH
53494: PPUSH
53495: PPUSH
53496: PPUSH
53497: PPUSH
// if not unit or not building then
53498: LD_VAR 0 1
53502: NOT
53503: PUSH
53504: LD_VAR 0 2
53508: NOT
53509: OR
53510: IFFALSE 53514
// exit ;
53512: GO 53740
// x := GetX ( building ) ;
53514: LD_ADDR_VAR 0 4
53518: PUSH
53519: LD_VAR 0 2
53523: PPUSH
53524: CALL_OW 250
53528: ST_TO_ADDR
// y := GetY ( building ) ;
53529: LD_ADDR_VAR 0 6
53533: PUSH
53534: LD_VAR 0 2
53538: PPUSH
53539: CALL_OW 251
53543: ST_TO_ADDR
// d := GetDir ( building ) ;
53544: LD_ADDR_VAR 0 8
53548: PUSH
53549: LD_VAR 0 2
53553: PPUSH
53554: CALL_OW 254
53558: ST_TO_ADDR
// r := 4 ;
53559: LD_ADDR_VAR 0 9
53563: PUSH
53564: LD_INT 4
53566: ST_TO_ADDR
// for i := 1 to 5 do
53567: LD_ADDR_VAR 0 10
53571: PUSH
53572: DOUBLE
53573: LD_INT 1
53575: DEC
53576: ST_TO_ADDR
53577: LD_INT 5
53579: PUSH
53580: FOR_TO
53581: IFFALSE 53738
// begin _x := ShiftX ( x , d , r + i ) ;
53583: LD_ADDR_VAR 0 5
53587: PUSH
53588: LD_VAR 0 4
53592: PPUSH
53593: LD_VAR 0 8
53597: PPUSH
53598: LD_VAR 0 9
53602: PUSH
53603: LD_VAR 0 10
53607: PLUS
53608: PPUSH
53609: CALL_OW 272
53613: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53614: LD_ADDR_VAR 0 7
53618: PUSH
53619: LD_VAR 0 6
53623: PPUSH
53624: LD_VAR 0 8
53628: PPUSH
53629: LD_VAR 0 9
53633: PUSH
53634: LD_VAR 0 10
53638: PLUS
53639: PPUSH
53640: CALL_OW 273
53644: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53645: LD_VAR 0 5
53649: PPUSH
53650: LD_VAR 0 7
53654: PPUSH
53655: CALL_OW 488
53659: PUSH
53660: LD_VAR 0 5
53664: PPUSH
53665: LD_VAR 0 7
53669: PPUSH
53670: CALL_OW 428
53674: PPUSH
53675: CALL_OW 247
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: IN
53690: NOT
53691: AND
53692: IFFALSE 53736
// begin ComMoveXY ( unit , _x , _y ) ;
53694: LD_VAR 0 1
53698: PPUSH
53699: LD_VAR 0 5
53703: PPUSH
53704: LD_VAR 0 7
53708: PPUSH
53709: CALL_OW 111
// result := [ _x , _y ] ;
53713: LD_ADDR_VAR 0 3
53717: PUSH
53718: LD_VAR 0 5
53722: PUSH
53723: LD_VAR 0 7
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// exit ;
53732: POP
53733: POP
53734: GO 53740
// end ; end ;
53736: GO 53580
53738: POP
53739: POP
// end ;
53740: LD_VAR 0 3
53744: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53745: LD_INT 0
53747: PPUSH
53748: PPUSH
53749: PPUSH
// result := 0 ;
53750: LD_ADDR_VAR 0 3
53754: PUSH
53755: LD_INT 0
53757: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53758: LD_VAR 0 1
53762: PUSH
53763: LD_INT 0
53765: LESS
53766: PUSH
53767: LD_VAR 0 1
53771: PUSH
53772: LD_INT 8
53774: GREATER
53775: OR
53776: PUSH
53777: LD_VAR 0 2
53781: PUSH
53782: LD_INT 0
53784: LESS
53785: OR
53786: PUSH
53787: LD_VAR 0 2
53791: PUSH
53792: LD_INT 8
53794: GREATER
53795: OR
53796: IFFALSE 53800
// exit ;
53798: GO 53875
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53800: LD_ADDR_VAR 0 4
53804: PUSH
53805: LD_INT 22
53807: PUSH
53808: LD_VAR 0 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PPUSH
53817: CALL_OW 69
53821: PUSH
53822: FOR_IN
53823: IFFALSE 53873
// begin un := UnitShoot ( i ) ;
53825: LD_ADDR_VAR 0 5
53829: PUSH
53830: LD_VAR 0 4
53834: PPUSH
53835: CALL_OW 504
53839: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53840: LD_VAR 0 5
53844: PPUSH
53845: CALL_OW 255
53849: PUSH
53850: LD_VAR 0 1
53854: EQUAL
53855: IFFALSE 53871
// begin result := un ;
53857: LD_ADDR_VAR 0 3
53861: PUSH
53862: LD_VAR 0 5
53866: ST_TO_ADDR
// exit ;
53867: POP
53868: POP
53869: GO 53875
// end ; end ;
53871: GO 53822
53873: POP
53874: POP
// end ;
53875: LD_VAR 0 3
53879: RET
// export function GetCargoBay ( units ) ; begin
53880: LD_INT 0
53882: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53883: LD_ADDR_VAR 0 2
53887: PUSH
53888: LD_VAR 0 1
53892: PPUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 34
53898: PUSH
53899: LD_INT 12
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 34
53908: PUSH
53909: LD_INT 51
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 34
53918: PUSH
53919: LD_INT 32
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 34
53928: PUSH
53929: LD_EXP 105
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: PPUSH
53945: CALL_OW 72
53949: ST_TO_ADDR
// end ;
53950: LD_VAR 0 2
53954: RET
// export function Negate ( value ) ; begin
53955: LD_INT 0
53957: PPUSH
// result := not value ;
53958: LD_ADDR_VAR 0 2
53962: PUSH
53963: LD_VAR 0 1
53967: NOT
53968: ST_TO_ADDR
// end ;
53969: LD_VAR 0 2
53973: RET
// export function Inc ( value ) ; begin
53974: LD_INT 0
53976: PPUSH
// result := value + 1 ;
53977: LD_ADDR_VAR 0 2
53981: PUSH
53982: LD_VAR 0 1
53986: PUSH
53987: LD_INT 1
53989: PLUS
53990: ST_TO_ADDR
// end ;
53991: LD_VAR 0 2
53995: RET
// export function Dec ( value ) ; begin
53996: LD_INT 0
53998: PPUSH
// result := value - 1 ;
53999: LD_ADDR_VAR 0 2
54003: PUSH
54004: LD_VAR 0 1
54008: PUSH
54009: LD_INT 1
54011: MINUS
54012: ST_TO_ADDR
// end ;
54013: LD_VAR 0 2
54017: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54018: LD_INT 0
54020: PPUSH
54021: PPUSH
54022: PPUSH
54023: PPUSH
54024: PPUSH
54025: PPUSH
54026: PPUSH
54027: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54028: LD_VAR 0 1
54032: PPUSH
54033: LD_VAR 0 2
54037: PPUSH
54038: CALL_OW 488
54042: NOT
54043: PUSH
54044: LD_VAR 0 3
54048: PPUSH
54049: LD_VAR 0 4
54053: PPUSH
54054: CALL_OW 488
54058: NOT
54059: OR
54060: IFFALSE 54073
// begin result := - 1 ;
54062: LD_ADDR_VAR 0 5
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: ST_TO_ADDR
// exit ;
54071: GO 54308
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54073: LD_ADDR_VAR 0 12
54077: PUSH
54078: LD_VAR 0 1
54082: PPUSH
54083: LD_VAR 0 2
54087: PPUSH
54088: LD_VAR 0 3
54092: PPUSH
54093: LD_VAR 0 4
54097: PPUSH
54098: CALL 53156 0 4
54102: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54103: LD_ADDR_VAR 0 11
54107: PUSH
54108: LD_VAR 0 1
54112: PPUSH
54113: LD_VAR 0 2
54117: PPUSH
54118: LD_VAR 0 12
54122: PUSH
54123: LD_INT 1
54125: ARRAY
54126: PPUSH
54127: LD_VAR 0 12
54131: PUSH
54132: LD_INT 2
54134: ARRAY
54135: PPUSH
54136: CALL_OW 298
54140: ST_TO_ADDR
// distance := 9999 ;
54141: LD_ADDR_VAR 0 10
54145: PUSH
54146: LD_INT 9999
54148: ST_TO_ADDR
// for i := 0 to 5 do
54149: LD_ADDR_VAR 0 6
54153: PUSH
54154: DOUBLE
54155: LD_INT 0
54157: DEC
54158: ST_TO_ADDR
54159: LD_INT 5
54161: PUSH
54162: FOR_TO
54163: IFFALSE 54306
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54165: LD_ADDR_VAR 0 7
54169: PUSH
54170: LD_VAR 0 1
54174: PPUSH
54175: LD_VAR 0 6
54179: PPUSH
54180: LD_VAR 0 11
54184: PPUSH
54185: CALL_OW 272
54189: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54190: LD_ADDR_VAR 0 8
54194: PUSH
54195: LD_VAR 0 2
54199: PPUSH
54200: LD_VAR 0 6
54204: PPUSH
54205: LD_VAR 0 11
54209: PPUSH
54210: CALL_OW 273
54214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54215: LD_VAR 0 7
54219: PPUSH
54220: LD_VAR 0 8
54224: PPUSH
54225: CALL_OW 488
54229: NOT
54230: IFFALSE 54234
// continue ;
54232: GO 54162
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54234: LD_ADDR_VAR 0 9
54238: PUSH
54239: LD_VAR 0 12
54243: PUSH
54244: LD_INT 1
54246: ARRAY
54247: PPUSH
54248: LD_VAR 0 12
54252: PUSH
54253: LD_INT 2
54255: ARRAY
54256: PPUSH
54257: LD_VAR 0 7
54261: PPUSH
54262: LD_VAR 0 8
54266: PPUSH
54267: CALL_OW 298
54271: ST_TO_ADDR
// if tmp < distance then
54272: LD_VAR 0 9
54276: PUSH
54277: LD_VAR 0 10
54281: LESS
54282: IFFALSE 54304
// begin result := i ;
54284: LD_ADDR_VAR 0 5
54288: PUSH
54289: LD_VAR 0 6
54293: ST_TO_ADDR
// distance := tmp ;
54294: LD_ADDR_VAR 0 10
54298: PUSH
54299: LD_VAR 0 9
54303: ST_TO_ADDR
// end ; end ;
54304: GO 54162
54306: POP
54307: POP
// end ;
54308: LD_VAR 0 5
54312: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54313: LD_INT 0
54315: PPUSH
54316: PPUSH
// if not driver or not IsInUnit ( driver ) then
54317: LD_VAR 0 1
54321: NOT
54322: PUSH
54323: LD_VAR 0 1
54327: PPUSH
54328: CALL_OW 310
54332: NOT
54333: OR
54334: IFFALSE 54338
// exit ;
54336: GO 54428
// vehicle := IsInUnit ( driver ) ;
54338: LD_ADDR_VAR 0 3
54342: PUSH
54343: LD_VAR 0 1
54347: PPUSH
54348: CALL_OW 310
54352: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54353: LD_VAR 0 1
54357: PPUSH
54358: LD_STRING \
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: PUSH
54388: LD_STRING E
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_VAR 0 3
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PPUSH
54424: CALL_OW 446
// end ;
54428: LD_VAR 0 2
54432: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54433: LD_INT 0
54435: PPUSH
54436: PPUSH
// if not driver or not IsInUnit ( driver ) then
54437: LD_VAR 0 1
54441: NOT
54442: PUSH
54443: LD_VAR 0 1
54447: PPUSH
54448: CALL_OW 310
54452: NOT
54453: OR
54454: IFFALSE 54458
// exit ;
54456: GO 54548
// vehicle := IsInUnit ( driver ) ;
54458: LD_ADDR_VAR 0 3
54462: PUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL_OW 310
54472: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54473: LD_VAR 0 1
54477: PPUSH
54478: LD_STRING \
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: PUSH
54508: LD_STRING E
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_VAR 0 3
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PPUSH
54544: CALL_OW 447
// end ;
54548: LD_VAR 0 2
54552: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54553: LD_INT 0
54555: PPUSH
54556: PPUSH
54557: PPUSH
// tmp := [ ] ;
54558: LD_ADDR_VAR 0 5
54562: PUSH
54563: EMPTY
54564: ST_TO_ADDR
// for i in units do
54565: LD_ADDR_VAR 0 4
54569: PUSH
54570: LD_VAR 0 1
54574: PUSH
54575: FOR_IN
54576: IFFALSE 54614
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54578: LD_ADDR_VAR 0 5
54582: PUSH
54583: LD_VAR 0 5
54587: PPUSH
54588: LD_VAR 0 5
54592: PUSH
54593: LD_INT 1
54595: PLUS
54596: PPUSH
54597: LD_VAR 0 4
54601: PPUSH
54602: CALL_OW 256
54606: PPUSH
54607: CALL_OW 2
54611: ST_TO_ADDR
54612: GO 54575
54614: POP
54615: POP
// if not tmp then
54616: LD_VAR 0 5
54620: NOT
54621: IFFALSE 54625
// exit ;
54623: GO 54673
// if asc then
54625: LD_VAR 0 2
54629: IFFALSE 54653
// result := SortListByListAsc ( units , tmp ) else
54631: LD_ADDR_VAR 0 3
54635: PUSH
54636: LD_VAR 0 1
54640: PPUSH
54641: LD_VAR 0 5
54645: PPUSH
54646: CALL_OW 76
54650: ST_TO_ADDR
54651: GO 54673
// result := SortListByListDesc ( units , tmp ) ;
54653: LD_ADDR_VAR 0 3
54657: PUSH
54658: LD_VAR 0 1
54662: PPUSH
54663: LD_VAR 0 5
54667: PPUSH
54668: CALL_OW 77
54672: ST_TO_ADDR
// end ;
54673: LD_VAR 0 3
54677: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54678: LD_INT 0
54680: PPUSH
54681: PPUSH
// task := GetTaskList ( mech ) ;
54682: LD_ADDR_VAR 0 4
54686: PUSH
54687: LD_VAR 0 1
54691: PPUSH
54692: CALL_OW 437
54696: ST_TO_ADDR
// if not task then
54697: LD_VAR 0 4
54701: NOT
54702: IFFALSE 54706
// exit ;
54704: GO 54748
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54706: LD_ADDR_VAR 0 3
54710: PUSH
54711: LD_VAR 0 4
54715: PUSH
54716: LD_INT 1
54718: ARRAY
54719: PUSH
54720: LD_INT 1
54722: ARRAY
54723: PUSH
54724: LD_STRING r
54726: EQUAL
54727: PUSH
54728: LD_VAR 0 4
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PUSH
54737: LD_INT 4
54739: ARRAY
54740: PUSH
54741: LD_VAR 0 2
54745: EQUAL
54746: AND
54747: ST_TO_ADDR
// end ;
54748: LD_VAR 0 3
54752: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54753: LD_INT 0
54755: PPUSH
// SetDir ( unit , d ) ;
54756: LD_VAR 0 1
54760: PPUSH
54761: LD_VAR 0 4
54765: PPUSH
54766: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54770: LD_VAR 0 1
54774: PPUSH
54775: LD_VAR 0 2
54779: PPUSH
54780: LD_VAR 0 3
54784: PPUSH
54785: LD_VAR 0 5
54789: PPUSH
54790: CALL_OW 48
// end ;
54794: LD_VAR 0 6
54798: RET
// export function ToNaturalNumber ( number ) ; begin
54799: LD_INT 0
54801: PPUSH
// result := number div 1 ;
54802: LD_ADDR_VAR 0 2
54806: PUSH
54807: LD_VAR 0 1
54811: PUSH
54812: LD_INT 1
54814: DIV
54815: ST_TO_ADDR
// if number < 0 then
54816: LD_VAR 0 1
54820: PUSH
54821: LD_INT 0
54823: LESS
54824: IFFALSE 54834
// result := 0 ;
54826: LD_ADDR_VAR 0 2
54830: PUSH
54831: LD_INT 0
54833: ST_TO_ADDR
// end ;
54834: LD_VAR 0 2
54838: RET
// export function SortByClass ( units , class ) ; var un ; begin
54839: LD_INT 0
54841: PPUSH
54842: PPUSH
// if not units or not class then
54843: LD_VAR 0 1
54847: NOT
54848: PUSH
54849: LD_VAR 0 2
54853: NOT
54854: OR
54855: IFFALSE 54859
// exit ;
54857: GO 54954
// result := [ ] ;
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: EMPTY
54865: ST_TO_ADDR
// for un in units do
54866: LD_ADDR_VAR 0 4
54870: PUSH
54871: LD_VAR 0 1
54875: PUSH
54876: FOR_IN
54877: IFFALSE 54952
// if GetClass ( un ) = class then
54879: LD_VAR 0 4
54883: PPUSH
54884: CALL_OW 257
54888: PUSH
54889: LD_VAR 0 2
54893: EQUAL
54894: IFFALSE 54921
// result := Insert ( result , 1 , un ) else
54896: LD_ADDR_VAR 0 3
54900: PUSH
54901: LD_VAR 0 3
54905: PPUSH
54906: LD_INT 1
54908: PPUSH
54909: LD_VAR 0 4
54913: PPUSH
54914: CALL_OW 2
54918: ST_TO_ADDR
54919: GO 54950
// result := Replace ( result , result + 1 , un ) ;
54921: LD_ADDR_VAR 0 3
54925: PUSH
54926: LD_VAR 0 3
54930: PPUSH
54931: LD_VAR 0 3
54935: PUSH
54936: LD_INT 1
54938: PLUS
54939: PPUSH
54940: LD_VAR 0 4
54944: PPUSH
54945: CALL_OW 1
54949: ST_TO_ADDR
54950: GO 54876
54952: POP
54953: POP
// end ;
54954: LD_VAR 0 3
54958: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54959: LD_INT 0
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
54967: PPUSH
// result := [ ] ;
54968: LD_ADDR_VAR 0 4
54972: PUSH
54973: EMPTY
54974: ST_TO_ADDR
// if x - r < 0 then
54975: LD_VAR 0 1
54979: PUSH
54980: LD_VAR 0 3
54984: MINUS
54985: PUSH
54986: LD_INT 0
54988: LESS
54989: IFFALSE 55001
// min_x := 0 else
54991: LD_ADDR_VAR 0 8
54995: PUSH
54996: LD_INT 0
54998: ST_TO_ADDR
54999: GO 55017
// min_x := x - r ;
55001: LD_ADDR_VAR 0 8
55005: PUSH
55006: LD_VAR 0 1
55010: PUSH
55011: LD_VAR 0 3
55015: MINUS
55016: ST_TO_ADDR
// if y - r < 0 then
55017: LD_VAR 0 2
55021: PUSH
55022: LD_VAR 0 3
55026: MINUS
55027: PUSH
55028: LD_INT 0
55030: LESS
55031: IFFALSE 55043
// min_y := 0 else
55033: LD_ADDR_VAR 0 7
55037: PUSH
55038: LD_INT 0
55040: ST_TO_ADDR
55041: GO 55059
// min_y := y - r ;
55043: LD_ADDR_VAR 0 7
55047: PUSH
55048: LD_VAR 0 2
55052: PUSH
55053: LD_VAR 0 3
55057: MINUS
55058: ST_TO_ADDR
// max_x := x + r ;
55059: LD_ADDR_VAR 0 9
55063: PUSH
55064: LD_VAR 0 1
55068: PUSH
55069: LD_VAR 0 3
55073: PLUS
55074: ST_TO_ADDR
// max_y := y + r ;
55075: LD_ADDR_VAR 0 10
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: LD_VAR 0 3
55089: PLUS
55090: ST_TO_ADDR
// for _x = min_x to max_x do
55091: LD_ADDR_VAR 0 5
55095: PUSH
55096: DOUBLE
55097: LD_VAR 0 8
55101: DEC
55102: ST_TO_ADDR
55103: LD_VAR 0 9
55107: PUSH
55108: FOR_TO
55109: IFFALSE 55210
// for _y = min_y to max_y do
55111: LD_ADDR_VAR 0 6
55115: PUSH
55116: DOUBLE
55117: LD_VAR 0 7
55121: DEC
55122: ST_TO_ADDR
55123: LD_VAR 0 10
55127: PUSH
55128: FOR_TO
55129: IFFALSE 55206
// begin if not ValidHex ( _x , _y ) then
55131: LD_VAR 0 5
55135: PPUSH
55136: LD_VAR 0 6
55140: PPUSH
55141: CALL_OW 488
55145: NOT
55146: IFFALSE 55150
// continue ;
55148: GO 55128
// if GetResourceTypeXY ( _x , _y ) then
55150: LD_VAR 0 5
55154: PPUSH
55155: LD_VAR 0 6
55159: PPUSH
55160: CALL_OW 283
55164: IFFALSE 55204
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55166: LD_ADDR_VAR 0 4
55170: PUSH
55171: LD_VAR 0 4
55175: PPUSH
55176: LD_VAR 0 4
55180: PUSH
55181: LD_INT 1
55183: PLUS
55184: PPUSH
55185: LD_VAR 0 5
55189: PUSH
55190: LD_VAR 0 6
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// end ;
55204: GO 55128
55206: POP
55207: POP
55208: GO 55108
55210: POP
55211: POP
// end ;
55212: LD_VAR 0 4
55216: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
55223: PPUSH
55224: PPUSH
55225: PPUSH
55226: PPUSH
// if not units then
55227: LD_VAR 0 1
55231: NOT
55232: IFFALSE 55236
// exit ;
55234: GO 55762
// result := UnitFilter ( units , [ f_ok ] ) ;
55236: LD_ADDR_VAR 0 3
55240: PUSH
55241: LD_VAR 0 1
55245: PPUSH
55246: LD_INT 50
55248: PUSH
55249: EMPTY
55250: LIST
55251: PPUSH
55252: CALL_OW 72
55256: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55257: LD_ADDR_VAR 0 8
55261: PUSH
55262: LD_VAR 0 1
55266: PUSH
55267: LD_INT 1
55269: ARRAY
55270: PPUSH
55271: CALL_OW 255
55275: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55276: LD_ADDR_VAR 0 10
55280: PUSH
55281: LD_INT 29
55283: PUSH
55284: LD_EXP 108
55288: PUSH
55289: LD_INT 49
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// if not result then
55297: LD_VAR 0 3
55301: NOT
55302: IFFALSE 55306
// exit ;
55304: GO 55762
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55306: LD_ADDR_VAR 0 5
55310: PUSH
55311: LD_INT 81
55313: PUSH
55314: LD_VAR 0 8
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PPUSH
55323: CALL_OW 69
55327: ST_TO_ADDR
// for i in result do
55328: LD_ADDR_VAR 0 4
55332: PUSH
55333: LD_VAR 0 3
55337: PUSH
55338: FOR_IN
55339: IFFALSE 55760
// begin tag := GetTag ( i ) + 1 ;
55341: LD_ADDR_VAR 0 9
55345: PUSH
55346: LD_VAR 0 4
55350: PPUSH
55351: CALL_OW 110
55355: PUSH
55356: LD_INT 1
55358: PLUS
55359: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55360: LD_ADDR_VAR 0 7
55364: PUSH
55365: LD_VAR 0 4
55369: PPUSH
55370: CALL_OW 250
55374: PPUSH
55375: LD_VAR 0 4
55379: PPUSH
55380: CALL_OW 251
55384: PPUSH
55385: LD_INT 6
55387: PPUSH
55388: CALL 54959 0 3
55392: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55393: LD_VAR 0 4
55397: PPUSH
55398: CALL_OW 247
55402: PUSH
55403: LD_INT 2
55405: EQUAL
55406: PUSH
55407: LD_VAR 0 7
55411: AND
55412: PUSH
55413: LD_VAR 0 4
55417: PPUSH
55418: CALL_OW 264
55422: PUSH
55423: LD_VAR 0 10
55427: IN
55428: NOT
55429: AND
55430: IFFALSE 55469
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55432: LD_VAR 0 4
55436: PPUSH
55437: LD_VAR 0 7
55441: PUSH
55442: LD_INT 1
55444: ARRAY
55445: PUSH
55446: LD_INT 1
55448: ARRAY
55449: PPUSH
55450: LD_VAR 0 7
55454: PUSH
55455: LD_INT 1
55457: ARRAY
55458: PUSH
55459: LD_INT 2
55461: ARRAY
55462: PPUSH
55463: CALL_OW 116
55467: GO 55758
// if path > tag then
55469: LD_VAR 0 2
55473: PUSH
55474: LD_VAR 0 9
55478: GREATER
55479: IFFALSE 55687
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55481: LD_ADDR_VAR 0 6
55485: PUSH
55486: LD_VAR 0 5
55490: PPUSH
55491: LD_INT 91
55493: PUSH
55494: LD_VAR 0 4
55498: PUSH
55499: LD_INT 8
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: PPUSH
55507: CALL_OW 72
55511: ST_TO_ADDR
// if nearEnemy then
55512: LD_VAR 0 6
55516: IFFALSE 55585
// begin if GetWeapon ( i ) = ru_time_lapser then
55518: LD_VAR 0 4
55522: PPUSH
55523: CALL_OW 264
55527: PUSH
55528: LD_INT 49
55530: EQUAL
55531: IFFALSE 55559
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55533: LD_VAR 0 4
55537: PPUSH
55538: LD_VAR 0 6
55542: PPUSH
55543: LD_VAR 0 4
55547: PPUSH
55548: CALL_OW 74
55552: PPUSH
55553: CALL_OW 112
55557: GO 55583
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55559: LD_VAR 0 4
55563: PPUSH
55564: LD_VAR 0 6
55568: PPUSH
55569: LD_VAR 0 4
55573: PPUSH
55574: CALL_OW 74
55578: PPUSH
55579: CALL_OW 115
// end else
55583: GO 55685
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55585: LD_VAR 0 4
55589: PPUSH
55590: LD_VAR 0 2
55594: PUSH
55595: LD_VAR 0 9
55599: ARRAY
55600: PUSH
55601: LD_INT 1
55603: ARRAY
55604: PPUSH
55605: LD_VAR 0 2
55609: PUSH
55610: LD_VAR 0 9
55614: ARRAY
55615: PUSH
55616: LD_INT 2
55618: ARRAY
55619: PPUSH
55620: CALL_OW 297
55624: PUSH
55625: LD_INT 6
55627: GREATER
55628: IFFALSE 55671
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55630: LD_VAR 0 4
55634: PPUSH
55635: LD_VAR 0 2
55639: PUSH
55640: LD_VAR 0 9
55644: ARRAY
55645: PUSH
55646: LD_INT 1
55648: ARRAY
55649: PPUSH
55650: LD_VAR 0 2
55654: PUSH
55655: LD_VAR 0 9
55659: ARRAY
55660: PUSH
55661: LD_INT 2
55663: ARRAY
55664: PPUSH
55665: CALL_OW 114
55669: GO 55685
// SetTag ( i , tag ) ;
55671: LD_VAR 0 4
55675: PPUSH
55676: LD_VAR 0 9
55680: PPUSH
55681: CALL_OW 109
// end else
55685: GO 55758
// if enemy then
55687: LD_VAR 0 5
55691: IFFALSE 55758
// begin if GetWeapon ( i ) = ru_time_lapser then
55693: LD_VAR 0 4
55697: PPUSH
55698: CALL_OW 264
55702: PUSH
55703: LD_INT 49
55705: EQUAL
55706: IFFALSE 55734
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55708: LD_VAR 0 4
55712: PPUSH
55713: LD_VAR 0 5
55717: PPUSH
55718: LD_VAR 0 4
55722: PPUSH
55723: CALL_OW 74
55727: PPUSH
55728: CALL_OW 112
55732: GO 55758
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55734: LD_VAR 0 4
55738: PPUSH
55739: LD_VAR 0 5
55743: PPUSH
55744: LD_VAR 0 4
55748: PPUSH
55749: CALL_OW 74
55753: PPUSH
55754: CALL_OW 115
// end ; end ;
55758: GO 55338
55760: POP
55761: POP
// end ;
55762: LD_VAR 0 3
55766: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55767: LD_INT 0
55769: PPUSH
55770: PPUSH
55771: PPUSH
// if not unit or IsInUnit ( unit ) then
55772: LD_VAR 0 1
55776: NOT
55777: PUSH
55778: LD_VAR 0 1
55782: PPUSH
55783: CALL_OW 310
55787: OR
55788: IFFALSE 55792
// exit ;
55790: GO 55883
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55792: LD_ADDR_VAR 0 4
55796: PUSH
55797: LD_VAR 0 1
55801: PPUSH
55802: CALL_OW 250
55806: PPUSH
55807: LD_VAR 0 2
55811: PPUSH
55812: LD_INT 1
55814: PPUSH
55815: CALL_OW 272
55819: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55820: LD_ADDR_VAR 0 5
55824: PUSH
55825: LD_VAR 0 1
55829: PPUSH
55830: CALL_OW 251
55834: PPUSH
55835: LD_VAR 0 2
55839: PPUSH
55840: LD_INT 1
55842: PPUSH
55843: CALL_OW 273
55847: ST_TO_ADDR
// if ValidHex ( x , y ) then
55848: LD_VAR 0 4
55852: PPUSH
55853: LD_VAR 0 5
55857: PPUSH
55858: CALL_OW 488
55862: IFFALSE 55883
// ComTurnXY ( unit , x , y ) ;
55864: LD_VAR 0 1
55868: PPUSH
55869: LD_VAR 0 4
55873: PPUSH
55874: LD_VAR 0 5
55878: PPUSH
55879: CALL_OW 118
// end ;
55883: LD_VAR 0 3
55887: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55888: LD_INT 0
55890: PPUSH
55891: PPUSH
// result := false ;
55892: LD_ADDR_VAR 0 3
55896: PUSH
55897: LD_INT 0
55899: ST_TO_ADDR
// if not units then
55900: LD_VAR 0 2
55904: NOT
55905: IFFALSE 55909
// exit ;
55907: GO 55954
// for i in units do
55909: LD_ADDR_VAR 0 4
55913: PUSH
55914: LD_VAR 0 2
55918: PUSH
55919: FOR_IN
55920: IFFALSE 55952
// if See ( side , i ) then
55922: LD_VAR 0 1
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: CALL_OW 292
55936: IFFALSE 55950
// begin result := true ;
55938: LD_ADDR_VAR 0 3
55942: PUSH
55943: LD_INT 1
55945: ST_TO_ADDR
// exit ;
55946: POP
55947: POP
55948: GO 55954
// end ;
55950: GO 55919
55952: POP
55953: POP
// end ;
55954: LD_VAR 0 3
55958: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55959: LD_INT 0
55961: PPUSH
55962: PPUSH
55963: PPUSH
55964: PPUSH
// if not unit or not points then
55965: LD_VAR 0 1
55969: NOT
55970: PUSH
55971: LD_VAR 0 2
55975: NOT
55976: OR
55977: IFFALSE 55981
// exit ;
55979: GO 56071
// dist := 99999 ;
55981: LD_ADDR_VAR 0 5
55985: PUSH
55986: LD_INT 99999
55988: ST_TO_ADDR
// for i in points do
55989: LD_ADDR_VAR 0 4
55993: PUSH
55994: LD_VAR 0 2
55998: PUSH
55999: FOR_IN
56000: IFFALSE 56069
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56002: LD_ADDR_VAR 0 6
56006: PUSH
56007: LD_VAR 0 1
56011: PPUSH
56012: LD_VAR 0 4
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PPUSH
56021: LD_VAR 0 4
56025: PUSH
56026: LD_INT 2
56028: ARRAY
56029: PPUSH
56030: CALL_OW 297
56034: ST_TO_ADDR
// if tmpDist < dist then
56035: LD_VAR 0 6
56039: PUSH
56040: LD_VAR 0 5
56044: LESS
56045: IFFALSE 56067
// begin result := i ;
56047: LD_ADDR_VAR 0 3
56051: PUSH
56052: LD_VAR 0 4
56056: ST_TO_ADDR
// dist := tmpDist ;
56057: LD_ADDR_VAR 0 5
56061: PUSH
56062: LD_VAR 0 6
56066: ST_TO_ADDR
// end ; end ;
56067: GO 55999
56069: POP
56070: POP
// end ;
56071: LD_VAR 0 3
56075: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56076: LD_INT 0
56078: PPUSH
// uc_side := side ;
56079: LD_ADDR_OWVAR 20
56083: PUSH
56084: LD_VAR 0 1
56088: ST_TO_ADDR
// uc_nation := 3 ;
56089: LD_ADDR_OWVAR 21
56093: PUSH
56094: LD_INT 3
56096: ST_TO_ADDR
// vc_chassis := 25 ;
56097: LD_ADDR_OWVAR 37
56101: PUSH
56102: LD_INT 25
56104: ST_TO_ADDR
// vc_engine := engine_siberite ;
56105: LD_ADDR_OWVAR 39
56109: PUSH
56110: LD_INT 3
56112: ST_TO_ADDR
// vc_control := control_computer ;
56113: LD_ADDR_OWVAR 38
56117: PUSH
56118: LD_INT 3
56120: ST_TO_ADDR
// vc_weapon := 59 ;
56121: LD_ADDR_OWVAR 40
56125: PUSH
56126: LD_INT 59
56128: ST_TO_ADDR
// result := CreateVehicle ;
56129: LD_ADDR_VAR 0 5
56133: PUSH
56134: CALL_OW 45
56138: ST_TO_ADDR
// SetDir ( result , d ) ;
56139: LD_VAR 0 5
56143: PPUSH
56144: LD_VAR 0 4
56148: PPUSH
56149: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56153: LD_VAR 0 5
56157: PPUSH
56158: LD_VAR 0 2
56162: PPUSH
56163: LD_VAR 0 3
56167: PPUSH
56168: LD_INT 0
56170: PPUSH
56171: CALL_OW 48
// end ;
56175: LD_VAR 0 5
56179: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56180: LD_INT 0
56182: PPUSH
56183: PPUSH
56184: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56185: LD_ADDR_VAR 0 2
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56208: LD_VAR 0 1
56212: NOT
56213: PUSH
56214: LD_VAR 0 1
56218: PPUSH
56219: CALL_OW 264
56223: PUSH
56224: LD_INT 12
56226: PUSH
56227: LD_INT 51
56229: PUSH
56230: LD_INT 32
56232: PUSH
56233: LD_EXP 105
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: IN
56244: NOT
56245: OR
56246: IFFALSE 56250
// exit ;
56248: GO 56348
// for i := 1 to 3 do
56250: LD_ADDR_VAR 0 3
56254: PUSH
56255: DOUBLE
56256: LD_INT 1
56258: DEC
56259: ST_TO_ADDR
56260: LD_INT 3
56262: PUSH
56263: FOR_TO
56264: IFFALSE 56346
// begin tmp := GetCargo ( cargo , i ) ;
56266: LD_ADDR_VAR 0 4
56270: PUSH
56271: LD_VAR 0 1
56275: PPUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: CALL_OW 289
56285: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56286: LD_ADDR_VAR 0 2
56290: PUSH
56291: LD_VAR 0 2
56295: PPUSH
56296: LD_VAR 0 3
56300: PPUSH
56301: LD_VAR 0 4
56305: PPUSH
56306: CALL_OW 1
56310: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56311: LD_ADDR_VAR 0 2
56315: PUSH
56316: LD_VAR 0 2
56320: PPUSH
56321: LD_INT 4
56323: PPUSH
56324: LD_VAR 0 2
56328: PUSH
56329: LD_INT 4
56331: ARRAY
56332: PUSH
56333: LD_VAR 0 4
56337: PLUS
56338: PPUSH
56339: CALL_OW 1
56343: ST_TO_ADDR
// end ;
56344: GO 56263
56346: POP
56347: POP
// end ;
56348: LD_VAR 0 2
56352: RET
// export function Length ( array ) ; begin
56353: LD_INT 0
56355: PPUSH
// result := array + 0 ;
56356: LD_ADDR_VAR 0 2
56360: PUSH
56361: LD_VAR 0 1
56365: PUSH
56366: LD_INT 0
56368: PLUS
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 2
56374: RET
// export function PrepareArray ( array ) ; begin
56375: LD_INT 0
56377: PPUSH
// result := array diff 0 ;
56378: LD_ADDR_VAR 0 2
56382: PUSH
56383: LD_VAR 0 1
56387: PUSH
56388: LD_INT 0
56390: DIFF
56391: ST_TO_ADDR
// if not result [ 1 ] then
56392: LD_VAR 0 2
56396: PUSH
56397: LD_INT 1
56399: ARRAY
56400: NOT
56401: IFFALSE 56421
// result := Delete ( result , 1 ) ;
56403: LD_ADDR_VAR 0 2
56407: PUSH
56408: LD_VAR 0 2
56412: PPUSH
56413: LD_INT 1
56415: PPUSH
56416: CALL_OW 3
56420: ST_TO_ADDR
// end ; end_of_file
56421: LD_VAR 0 2
56425: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56426: LD_VAR 0 1
56430: PUSH
56431: LD_INT 200
56433: DOUBLE
56434: GREATEREQUAL
56435: IFFALSE 56443
56437: LD_INT 299
56439: DOUBLE
56440: LESSEQUAL
56441: IFTRUE 56445
56443: GO 56477
56445: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56446: LD_VAR 0 1
56450: PPUSH
56451: LD_VAR 0 2
56455: PPUSH
56456: LD_VAR 0 3
56460: PPUSH
56461: LD_VAR 0 4
56465: PPUSH
56466: LD_VAR 0 5
56470: PPUSH
56471: CALL 56967 0 5
56475: GO 56554
56477: LD_INT 300
56479: DOUBLE
56480: GREATEREQUAL
56481: IFFALSE 56489
56483: LD_INT 399
56485: DOUBLE
56486: LESSEQUAL
56487: IFTRUE 56491
56489: GO 56553
56491: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56492: LD_VAR 0 1
56496: PPUSH
56497: LD_VAR 0 2
56501: PPUSH
56502: LD_VAR 0 3
56506: PPUSH
56507: LD_VAR 0 4
56511: PPUSH
56512: LD_VAR 0 5
56516: PPUSH
56517: LD_VAR 0 6
56521: PPUSH
56522: LD_VAR 0 7
56526: PPUSH
56527: LD_VAR 0 8
56531: PPUSH
56532: LD_VAR 0 9
56536: PPUSH
56537: LD_VAR 0 10
56541: PPUSH
56542: LD_VAR 0 11
56546: PPUSH
56547: CALL 73258 0 11
56551: GO 56554
56553: POP
// end ;
56554: PPOPN 11
56556: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56557: LD_VAR 0 1
56561: PPUSH
56562: LD_VAR 0 2
56566: PPUSH
56567: LD_VAR 0 3
56571: PPUSH
56572: LD_VAR 0 4
56576: PPUSH
56577: LD_VAR 0 5
56581: PPUSH
56582: CALL 56703 0 5
// end ; end_of_file
56586: PPOPN 5
56588: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56589: LD_INT 0
56591: PPUSH
56592: PPUSH
56593: PPUSH
56594: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56595: LD_VAR 0 1
56599: PPUSH
56600: CALL_OW 264
56604: PUSH
56605: LD_EXP 108
56609: EQUAL
56610: IFFALSE 56682
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56612: LD_INT 68
56614: PPUSH
56615: LD_VAR 0 1
56619: PPUSH
56620: CALL_OW 255
56624: PPUSH
56625: CALL_OW 321
56629: PUSH
56630: LD_INT 2
56632: EQUAL
56633: IFFALSE 56645
// eff := 70 else
56635: LD_ADDR_VAR 0 4
56639: PUSH
56640: LD_INT 70
56642: ST_TO_ADDR
56643: GO 56653
// eff := 30 ;
56645: LD_ADDR_VAR 0 4
56649: PUSH
56650: LD_INT 30
56652: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56653: LD_VAR 0 1
56657: PPUSH
56658: CALL_OW 250
56662: PPUSH
56663: LD_VAR 0 1
56667: PPUSH
56668: CALL_OW 251
56672: PPUSH
56673: LD_VAR 0 4
56677: PPUSH
56678: CALL_OW 495
// end ; end ;
56682: LD_VAR 0 2
56686: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56687: LD_INT 0
56689: PPUSH
// end ;
56690: LD_VAR 0 4
56694: RET
// export function SOS_Command ( cmd ) ; begin
56695: LD_INT 0
56697: PPUSH
// end ;
56698: LD_VAR 0 2
56702: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56703: LD_INT 0
56705: PPUSH
// end ;
56706: LD_VAR 0 6
56710: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
56711: LD_INT 0
56713: PPUSH
56714: PPUSH
// if not vehicle or not factory then
56715: LD_VAR 0 1
56719: NOT
56720: PUSH
56721: LD_VAR 0 2
56725: NOT
56726: OR
56727: IFFALSE 56731
// exit ;
56729: GO 56962
// if factoryWaypoints >= factory then
56731: LD_EXP 101
56735: PUSH
56736: LD_VAR 0 2
56740: GREATEREQUAL
56741: IFFALSE 56962
// if factoryWaypoints [ factory ] then
56743: LD_EXP 101
56747: PUSH
56748: LD_VAR 0 2
56752: ARRAY
56753: IFFALSE 56962
// begin if GetControl ( vehicle ) = control_manual then
56755: LD_VAR 0 1
56759: PPUSH
56760: CALL_OW 263
56764: PUSH
56765: LD_INT 1
56767: EQUAL
56768: IFFALSE 56849
// begin driver := IsDrivenBy ( vehicle ) ;
56770: LD_ADDR_VAR 0 4
56774: PUSH
56775: LD_VAR 0 1
56779: PPUSH
56780: CALL_OW 311
56784: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56785: LD_VAR 0 4
56789: PPUSH
56790: LD_EXP 101
56794: PUSH
56795: LD_VAR 0 2
56799: ARRAY
56800: PUSH
56801: LD_INT 3
56803: ARRAY
56804: PPUSH
56805: LD_EXP 101
56809: PUSH
56810: LD_VAR 0 2
56814: ARRAY
56815: PUSH
56816: LD_INT 4
56818: ARRAY
56819: PPUSH
56820: CALL_OW 171
// AddComExitVehicle ( driver ) ;
56824: LD_VAR 0 4
56828: PPUSH
56829: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
56833: LD_VAR 0 4
56837: PPUSH
56838: LD_VAR 0 2
56842: PPUSH
56843: CALL_OW 180
// end else
56847: GO 56962
// if GetControl ( vehicle ) = control_remote then
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL_OW 263
56858: PUSH
56859: LD_INT 2
56861: EQUAL
56862: IFFALSE 56923
// begin wait ( 0 0$2 ) ;
56864: LD_INT 70
56866: PPUSH
56867: CALL_OW 67
// if Connect ( vehicle ) then
56871: LD_VAR 0 1
56875: PPUSH
56876: CALL 23320 0 1
56880: IFFALSE 56921
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56882: LD_VAR 0 1
56886: PPUSH
56887: LD_EXP 101
56891: PUSH
56892: LD_VAR 0 2
56896: ARRAY
56897: PUSH
56898: LD_INT 3
56900: ARRAY
56901: PPUSH
56902: LD_EXP 101
56906: PUSH
56907: LD_VAR 0 2
56911: ARRAY
56912: PUSH
56913: LD_INT 4
56915: ARRAY
56916: PPUSH
56917: CALL_OW 171
// end else
56921: GO 56962
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56923: LD_VAR 0 1
56927: PPUSH
56928: LD_EXP 101
56932: PUSH
56933: LD_VAR 0 2
56937: ARRAY
56938: PUSH
56939: LD_INT 3
56941: ARRAY
56942: PPUSH
56943: LD_EXP 101
56947: PUSH
56948: LD_VAR 0 2
56952: ARRAY
56953: PUSH
56954: LD_INT 4
56956: ARRAY
56957: PPUSH
56958: CALL_OW 171
// end ; end ;
56962: LD_VAR 0 3
56966: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56967: LD_INT 0
56969: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56970: LD_VAR 0 1
56974: PUSH
56975: LD_INT 250
56977: EQUAL
56978: PUSH
56979: LD_VAR 0 2
56983: PPUSH
56984: CALL_OW 264
56988: PUSH
56989: LD_EXP 111
56993: EQUAL
56994: AND
56995: IFFALSE 57016
// MinerPlaceMine ( unit , x , y ) ;
56997: LD_VAR 0 2
57001: PPUSH
57002: LD_VAR 0 4
57006: PPUSH
57007: LD_VAR 0 5
57011: PPUSH
57012: CALL 59415 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57016: LD_VAR 0 1
57020: PUSH
57021: LD_INT 251
57023: EQUAL
57024: PUSH
57025: LD_VAR 0 2
57029: PPUSH
57030: CALL_OW 264
57034: PUSH
57035: LD_EXP 111
57039: EQUAL
57040: AND
57041: IFFALSE 57062
// MinerDetonateMine ( unit , x , y ) ;
57043: LD_VAR 0 2
57047: PPUSH
57048: LD_VAR 0 4
57052: PPUSH
57053: LD_VAR 0 5
57057: PPUSH
57058: CALL 59692 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57062: LD_VAR 0 1
57066: PUSH
57067: LD_INT 252
57069: EQUAL
57070: PUSH
57071: LD_VAR 0 2
57075: PPUSH
57076: CALL_OW 264
57080: PUSH
57081: LD_EXP 111
57085: EQUAL
57086: AND
57087: IFFALSE 57108
// MinerCreateMinefield ( unit , x , y ) ;
57089: LD_VAR 0 2
57093: PPUSH
57094: LD_VAR 0 4
57098: PPUSH
57099: LD_VAR 0 5
57103: PPUSH
57104: CALL 60109 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57108: LD_VAR 0 1
57112: PUSH
57113: LD_INT 253
57115: EQUAL
57116: PUSH
57117: LD_VAR 0 2
57121: PPUSH
57122: CALL_OW 257
57126: PUSH
57127: LD_INT 5
57129: EQUAL
57130: AND
57131: IFFALSE 57152
// ComBinocular ( unit , x , y ) ;
57133: LD_VAR 0 2
57137: PPUSH
57138: LD_VAR 0 4
57142: PPUSH
57143: LD_VAR 0 5
57147: PPUSH
57148: CALL 60480 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57152: LD_VAR 0 1
57156: PUSH
57157: LD_INT 254
57159: EQUAL
57160: PUSH
57161: LD_VAR 0 2
57165: PPUSH
57166: CALL_OW 264
57170: PUSH
57171: LD_EXP 106
57175: EQUAL
57176: AND
57177: PUSH
57178: LD_VAR 0 3
57182: PPUSH
57183: CALL_OW 263
57187: PUSH
57188: LD_INT 3
57190: EQUAL
57191: AND
57192: IFFALSE 57208
// HackDestroyVehicle ( unit , selectedUnit ) ;
57194: LD_VAR 0 2
57198: PPUSH
57199: LD_VAR 0 3
57203: PPUSH
57204: CALL 58775 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57208: LD_VAR 0 1
57212: PUSH
57213: LD_INT 255
57215: EQUAL
57216: PUSH
57217: LD_VAR 0 2
57221: PPUSH
57222: CALL_OW 264
57226: PUSH
57227: LD_INT 14
57229: PUSH
57230: LD_INT 53
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: IN
57237: AND
57238: PUSH
57239: LD_VAR 0 4
57243: PPUSH
57244: LD_VAR 0 5
57248: PPUSH
57249: CALL_OW 488
57253: AND
57254: IFFALSE 57278
// CutTreeXYR ( unit , x , y , 12 ) ;
57256: LD_VAR 0 2
57260: PPUSH
57261: LD_VAR 0 4
57265: PPUSH
57266: LD_VAR 0 5
57270: PPUSH
57271: LD_INT 12
57273: PPUSH
57274: CALL 57341 0 4
// if cmd = 256 then
57278: LD_VAR 0 1
57282: PUSH
57283: LD_INT 256
57285: EQUAL
57286: IFFALSE 57307
// SetFactoryWaypoint ( unit , x , y ) ;
57288: LD_VAR 0 2
57292: PPUSH
57293: LD_VAR 0 4
57297: PPUSH
57298: LD_VAR 0 5
57302: PPUSH
57303: CALL 75238 0 3
// if cmd = 257 then
57307: LD_VAR 0 1
57311: PUSH
57312: LD_INT 257
57314: EQUAL
57315: IFFALSE 57336
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57317: LD_VAR 0 2
57321: PPUSH
57322: LD_VAR 0 4
57326: PPUSH
57327: LD_VAR 0 5
57331: PPUSH
57332: CALL 75600 0 3
// end ;
57336: LD_VAR 0 6
57340: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57341: LD_INT 0
57343: PPUSH
57344: PPUSH
57345: PPUSH
57346: PPUSH
57347: PPUSH
57348: PPUSH
57349: PPUSH
57350: PPUSH
57351: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57352: LD_VAR 0 1
57356: NOT
57357: PUSH
57358: LD_VAR 0 2
57362: PPUSH
57363: LD_VAR 0 3
57367: PPUSH
57368: CALL_OW 488
57372: NOT
57373: OR
57374: PUSH
57375: LD_VAR 0 4
57379: NOT
57380: OR
57381: IFFALSE 57385
// exit ;
57383: GO 57725
// list := [ ] ;
57385: LD_ADDR_VAR 0 13
57389: PUSH
57390: EMPTY
57391: ST_TO_ADDR
// if x - r < 0 then
57392: LD_VAR 0 2
57396: PUSH
57397: LD_VAR 0 4
57401: MINUS
57402: PUSH
57403: LD_INT 0
57405: LESS
57406: IFFALSE 57418
// min_x := 0 else
57408: LD_ADDR_VAR 0 7
57412: PUSH
57413: LD_INT 0
57415: ST_TO_ADDR
57416: GO 57434
// min_x := x - r ;
57418: LD_ADDR_VAR 0 7
57422: PUSH
57423: LD_VAR 0 2
57427: PUSH
57428: LD_VAR 0 4
57432: MINUS
57433: ST_TO_ADDR
// if y - r < 0 then
57434: LD_VAR 0 3
57438: PUSH
57439: LD_VAR 0 4
57443: MINUS
57444: PUSH
57445: LD_INT 0
57447: LESS
57448: IFFALSE 57460
// min_y := 0 else
57450: LD_ADDR_VAR 0 8
57454: PUSH
57455: LD_INT 0
57457: ST_TO_ADDR
57458: GO 57476
// min_y := y - r ;
57460: LD_ADDR_VAR 0 8
57464: PUSH
57465: LD_VAR 0 3
57469: PUSH
57470: LD_VAR 0 4
57474: MINUS
57475: ST_TO_ADDR
// max_x := x + r ;
57476: LD_ADDR_VAR 0 9
57480: PUSH
57481: LD_VAR 0 2
57485: PUSH
57486: LD_VAR 0 4
57490: PLUS
57491: ST_TO_ADDR
// max_y := y + r ;
57492: LD_ADDR_VAR 0 10
57496: PUSH
57497: LD_VAR 0 3
57501: PUSH
57502: LD_VAR 0 4
57506: PLUS
57507: ST_TO_ADDR
// for _x = min_x to max_x do
57508: LD_ADDR_VAR 0 11
57512: PUSH
57513: DOUBLE
57514: LD_VAR 0 7
57518: DEC
57519: ST_TO_ADDR
57520: LD_VAR 0 9
57524: PUSH
57525: FOR_TO
57526: IFFALSE 57643
// for _y = min_y to max_y do
57528: LD_ADDR_VAR 0 12
57532: PUSH
57533: DOUBLE
57534: LD_VAR 0 8
57538: DEC
57539: ST_TO_ADDR
57540: LD_VAR 0 10
57544: PUSH
57545: FOR_TO
57546: IFFALSE 57639
// begin if not ValidHex ( _x , _y ) then
57548: LD_VAR 0 11
57552: PPUSH
57553: LD_VAR 0 12
57557: PPUSH
57558: CALL_OW 488
57562: NOT
57563: IFFALSE 57567
// continue ;
57565: GO 57545
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57567: LD_VAR 0 11
57571: PPUSH
57572: LD_VAR 0 12
57576: PPUSH
57577: CALL_OW 351
57581: PUSH
57582: LD_VAR 0 11
57586: PPUSH
57587: LD_VAR 0 12
57591: PPUSH
57592: CALL_OW 554
57596: AND
57597: IFFALSE 57637
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57599: LD_ADDR_VAR 0 13
57603: PUSH
57604: LD_VAR 0 13
57608: PPUSH
57609: LD_VAR 0 13
57613: PUSH
57614: LD_INT 1
57616: PLUS
57617: PPUSH
57618: LD_VAR 0 11
57622: PUSH
57623: LD_VAR 0 12
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PPUSH
57632: CALL_OW 2
57636: ST_TO_ADDR
// end ;
57637: GO 57545
57639: POP
57640: POP
57641: GO 57525
57643: POP
57644: POP
// if not list then
57645: LD_VAR 0 13
57649: NOT
57650: IFFALSE 57654
// exit ;
57652: GO 57725
// for i in list do
57654: LD_ADDR_VAR 0 6
57658: PUSH
57659: LD_VAR 0 13
57663: PUSH
57664: FOR_IN
57665: IFFALSE 57723
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57667: LD_VAR 0 1
57671: PPUSH
57672: LD_STRING M
57674: PUSH
57675: LD_VAR 0 6
57679: PUSH
57680: LD_INT 1
57682: ARRAY
57683: PUSH
57684: LD_VAR 0 6
57688: PUSH
57689: LD_INT 2
57691: ARRAY
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: PPUSH
57717: CALL_OW 447
57721: GO 57664
57723: POP
57724: POP
// end ;
57725: LD_VAR 0 5
57729: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57730: LD_EXP 33
57734: NOT
57735: IFFALSE 57785
57737: GO 57739
57739: DISABLE
// begin initHack := true ;
57740: LD_ADDR_EXP 33
57744: PUSH
57745: LD_INT 1
57747: ST_TO_ADDR
// hackTanks := [ ] ;
57748: LD_ADDR_EXP 34
57752: PUSH
57753: EMPTY
57754: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57755: LD_ADDR_EXP 35
57759: PUSH
57760: EMPTY
57761: ST_TO_ADDR
// hackLimit := 3 ;
57762: LD_ADDR_EXP 36
57766: PUSH
57767: LD_INT 3
57769: ST_TO_ADDR
// hackDist := 12 ;
57770: LD_ADDR_EXP 37
57774: PUSH
57775: LD_INT 12
57777: ST_TO_ADDR
// hackCounter := [ ] ;
57778: LD_ADDR_EXP 38
57782: PUSH
57783: EMPTY
57784: ST_TO_ADDR
// end ;
57785: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57786: LD_EXP 33
57790: PUSH
57791: LD_INT 34
57793: PUSH
57794: LD_EXP 106
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PPUSH
57803: CALL_OW 69
57807: AND
57808: IFFALSE 58063
57810: GO 57812
57812: DISABLE
57813: LD_INT 0
57815: PPUSH
57816: PPUSH
// begin enable ;
57817: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57818: LD_ADDR_VAR 0 1
57822: PUSH
57823: LD_INT 34
57825: PUSH
57826: LD_EXP 106
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PPUSH
57835: CALL_OW 69
57839: PUSH
57840: FOR_IN
57841: IFFALSE 58061
// begin if not i in hackTanks then
57843: LD_VAR 0 1
57847: PUSH
57848: LD_EXP 34
57852: IN
57853: NOT
57854: IFFALSE 57937
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57856: LD_ADDR_EXP 34
57860: PUSH
57861: LD_EXP 34
57865: PPUSH
57866: LD_EXP 34
57870: PUSH
57871: LD_INT 1
57873: PLUS
57874: PPUSH
57875: LD_VAR 0 1
57879: PPUSH
57880: CALL_OW 1
57884: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57885: LD_ADDR_EXP 35
57889: PUSH
57890: LD_EXP 35
57894: PPUSH
57895: LD_EXP 35
57899: PUSH
57900: LD_INT 1
57902: PLUS
57903: PPUSH
57904: EMPTY
57905: PPUSH
57906: CALL_OW 1
57910: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57911: LD_ADDR_EXP 38
57915: PUSH
57916: LD_EXP 38
57920: PPUSH
57921: LD_EXP 38
57925: PUSH
57926: LD_INT 1
57928: PLUS
57929: PPUSH
57930: EMPTY
57931: PPUSH
57932: CALL_OW 1
57936: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57937: LD_VAR 0 1
57941: PPUSH
57942: CALL_OW 302
57946: NOT
57947: IFFALSE 57960
// begin HackUnlinkAll ( i ) ;
57949: LD_VAR 0 1
57953: PPUSH
57954: CALL 58066 0 1
// continue ;
57958: GO 57840
// end ; HackCheckCapturedStatus ( i ) ;
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL 58509 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57969: LD_ADDR_VAR 0 2
57973: PUSH
57974: LD_INT 81
57976: PUSH
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL_OW 255
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 33
57993: PUSH
57994: LD_INT 3
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 91
58003: PUSH
58004: LD_VAR 0 1
58008: PUSH
58009: LD_EXP 37
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 50
58021: PUSH
58022: EMPTY
58023: LIST
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: PPUSH
58031: CALL_OW 69
58035: ST_TO_ADDR
// if not tmp then
58036: LD_VAR 0 2
58040: NOT
58041: IFFALSE 58045
// continue ;
58043: GO 57840
// HackLink ( i , tmp ) ;
58045: LD_VAR 0 1
58049: PPUSH
58050: LD_VAR 0 2
58054: PPUSH
58055: CALL 58202 0 2
// end ;
58059: GO 57840
58061: POP
58062: POP
// end ;
58063: PPOPN 2
58065: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58066: LD_INT 0
58068: PPUSH
58069: PPUSH
58070: PPUSH
// if not hack in hackTanks then
58071: LD_VAR 0 1
58075: PUSH
58076: LD_EXP 34
58080: IN
58081: NOT
58082: IFFALSE 58086
// exit ;
58084: GO 58197
// index := GetElementIndex ( hackTanks , hack ) ;
58086: LD_ADDR_VAR 0 4
58090: PUSH
58091: LD_EXP 34
58095: PPUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: CALL 20134 0 2
58105: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58106: LD_EXP 35
58110: PUSH
58111: LD_VAR 0 4
58115: ARRAY
58116: IFFALSE 58197
// begin for i in hackTanksCaptured [ index ] do
58118: LD_ADDR_VAR 0 3
58122: PUSH
58123: LD_EXP 35
58127: PUSH
58128: LD_VAR 0 4
58132: ARRAY
58133: PUSH
58134: FOR_IN
58135: IFFALSE 58161
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58137: LD_VAR 0 3
58141: PUSH
58142: LD_INT 1
58144: ARRAY
58145: PPUSH
58146: LD_VAR 0 3
58150: PUSH
58151: LD_INT 2
58153: ARRAY
58154: PPUSH
58155: CALL_OW 235
58159: GO 58134
58161: POP
58162: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58163: LD_ADDR_EXP 35
58167: PUSH
58168: LD_EXP 35
58172: PPUSH
58173: LD_VAR 0 4
58177: PPUSH
58178: EMPTY
58179: PPUSH
58180: CALL_OW 1
58184: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58185: LD_VAR 0 1
58189: PPUSH
58190: LD_INT 0
58192: PPUSH
58193: CALL_OW 505
// end ; end ;
58197: LD_VAR 0 2
58201: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58202: LD_INT 0
58204: PPUSH
58205: PPUSH
58206: PPUSH
// if not hack in hackTanks or not vehicles then
58207: LD_VAR 0 1
58211: PUSH
58212: LD_EXP 34
58216: IN
58217: NOT
58218: PUSH
58219: LD_VAR 0 2
58223: NOT
58224: OR
58225: IFFALSE 58229
// exit ;
58227: GO 58504
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58229: LD_ADDR_VAR 0 2
58233: PUSH
58234: LD_VAR 0 1
58238: PPUSH
58239: LD_VAR 0 2
58243: PPUSH
58244: LD_INT 1
58246: PPUSH
58247: LD_INT 1
58249: PPUSH
58250: CALL 20784 0 4
58254: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58255: LD_ADDR_VAR 0 5
58259: PUSH
58260: LD_EXP 34
58264: PPUSH
58265: LD_VAR 0 1
58269: PPUSH
58270: CALL 20134 0 2
58274: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58275: LD_EXP 35
58279: PUSH
58280: LD_VAR 0 5
58284: ARRAY
58285: PUSH
58286: LD_EXP 36
58290: LESS
58291: IFFALSE 58480
// begin for i := 1 to vehicles do
58293: LD_ADDR_VAR 0 4
58297: PUSH
58298: DOUBLE
58299: LD_INT 1
58301: DEC
58302: ST_TO_ADDR
58303: LD_VAR 0 2
58307: PUSH
58308: FOR_TO
58309: IFFALSE 58478
// begin if hackTanksCaptured [ index ] = hackLimit then
58311: LD_EXP 35
58315: PUSH
58316: LD_VAR 0 5
58320: ARRAY
58321: PUSH
58322: LD_EXP 36
58326: EQUAL
58327: IFFALSE 58331
// break ;
58329: GO 58478
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58331: LD_ADDR_EXP 38
58335: PUSH
58336: LD_EXP 38
58340: PPUSH
58341: LD_VAR 0 5
58345: PPUSH
58346: LD_EXP 38
58350: PUSH
58351: LD_VAR 0 5
58355: ARRAY
58356: PUSH
58357: LD_INT 1
58359: PLUS
58360: PPUSH
58361: CALL_OW 1
58365: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58366: LD_ADDR_EXP 35
58370: PUSH
58371: LD_EXP 35
58375: PPUSH
58376: LD_VAR 0 5
58380: PUSH
58381: LD_EXP 35
58385: PUSH
58386: LD_VAR 0 5
58390: ARRAY
58391: PUSH
58392: LD_INT 1
58394: PLUS
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PPUSH
58400: LD_VAR 0 2
58404: PUSH
58405: LD_VAR 0 4
58409: ARRAY
58410: PUSH
58411: LD_VAR 0 2
58415: PUSH
58416: LD_VAR 0 4
58420: ARRAY
58421: PPUSH
58422: CALL_OW 255
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PPUSH
58431: CALL 20349 0 3
58435: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58436: LD_VAR 0 2
58440: PUSH
58441: LD_VAR 0 4
58445: ARRAY
58446: PPUSH
58447: LD_VAR 0 1
58451: PPUSH
58452: CALL_OW 255
58456: PPUSH
58457: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58461: LD_VAR 0 2
58465: PUSH
58466: LD_VAR 0 4
58470: ARRAY
58471: PPUSH
58472: CALL_OW 141
// end ;
58476: GO 58308
58478: POP
58479: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58480: LD_VAR 0 1
58484: PPUSH
58485: LD_EXP 35
58489: PUSH
58490: LD_VAR 0 5
58494: ARRAY
58495: PUSH
58496: LD_INT 0
58498: PLUS
58499: PPUSH
58500: CALL_OW 505
// end ;
58504: LD_VAR 0 3
58508: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58509: LD_INT 0
58511: PPUSH
58512: PPUSH
58513: PPUSH
58514: PPUSH
// if not hack in hackTanks then
58515: LD_VAR 0 1
58519: PUSH
58520: LD_EXP 34
58524: IN
58525: NOT
58526: IFFALSE 58530
// exit ;
58528: GO 58770
// index := GetElementIndex ( hackTanks , hack ) ;
58530: LD_ADDR_VAR 0 4
58534: PUSH
58535: LD_EXP 34
58539: PPUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL 20134 0 2
58549: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58550: LD_ADDR_VAR 0 3
58554: PUSH
58555: DOUBLE
58556: LD_EXP 35
58560: PUSH
58561: LD_VAR 0 4
58565: ARRAY
58566: INC
58567: ST_TO_ADDR
58568: LD_INT 1
58570: PUSH
58571: FOR_DOWNTO
58572: IFFALSE 58744
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58574: LD_ADDR_VAR 0 5
58578: PUSH
58579: LD_EXP 35
58583: PUSH
58584: LD_VAR 0 4
58588: ARRAY
58589: PUSH
58590: LD_VAR 0 3
58594: ARRAY
58595: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58596: LD_VAR 0 5
58600: PUSH
58601: LD_INT 1
58603: ARRAY
58604: PPUSH
58605: CALL_OW 302
58609: NOT
58610: PUSH
58611: LD_VAR 0 5
58615: PUSH
58616: LD_INT 1
58618: ARRAY
58619: PPUSH
58620: CALL_OW 255
58624: PUSH
58625: LD_VAR 0 1
58629: PPUSH
58630: CALL_OW 255
58634: NONEQUAL
58635: OR
58636: IFFALSE 58742
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58638: LD_VAR 0 5
58642: PUSH
58643: LD_INT 1
58645: ARRAY
58646: PPUSH
58647: CALL_OW 305
58651: PUSH
58652: LD_VAR 0 5
58656: PUSH
58657: LD_INT 1
58659: ARRAY
58660: PPUSH
58661: CALL_OW 255
58665: PUSH
58666: LD_VAR 0 1
58670: PPUSH
58671: CALL_OW 255
58675: EQUAL
58676: AND
58677: IFFALSE 58701
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58679: LD_VAR 0 5
58683: PUSH
58684: LD_INT 1
58686: ARRAY
58687: PPUSH
58688: LD_VAR 0 5
58692: PUSH
58693: LD_INT 2
58695: ARRAY
58696: PPUSH
58697: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58701: LD_ADDR_EXP 35
58705: PUSH
58706: LD_EXP 35
58710: PPUSH
58711: LD_VAR 0 4
58715: PPUSH
58716: LD_EXP 35
58720: PUSH
58721: LD_VAR 0 4
58725: ARRAY
58726: PPUSH
58727: LD_VAR 0 3
58731: PPUSH
58732: CALL_OW 3
58736: PPUSH
58737: CALL_OW 1
58741: ST_TO_ADDR
// end ; end ;
58742: GO 58571
58744: POP
58745: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58746: LD_VAR 0 1
58750: PPUSH
58751: LD_EXP 35
58755: PUSH
58756: LD_VAR 0 4
58760: ARRAY
58761: PUSH
58762: LD_INT 0
58764: PLUS
58765: PPUSH
58766: CALL_OW 505
// end ;
58770: LD_VAR 0 2
58774: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58775: LD_INT 0
58777: PPUSH
58778: PPUSH
58779: PPUSH
58780: PPUSH
// if not hack in hackTanks then
58781: LD_VAR 0 1
58785: PUSH
58786: LD_EXP 34
58790: IN
58791: NOT
58792: IFFALSE 58796
// exit ;
58794: GO 58881
// index := GetElementIndex ( hackTanks , hack ) ;
58796: LD_ADDR_VAR 0 5
58800: PUSH
58801: LD_EXP 34
58805: PPUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: CALL 20134 0 2
58815: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58816: LD_ADDR_VAR 0 4
58820: PUSH
58821: DOUBLE
58822: LD_INT 1
58824: DEC
58825: ST_TO_ADDR
58826: LD_EXP 35
58830: PUSH
58831: LD_VAR 0 5
58835: ARRAY
58836: PUSH
58837: FOR_TO
58838: IFFALSE 58879
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58840: LD_EXP 35
58844: PUSH
58845: LD_VAR 0 5
58849: ARRAY
58850: PUSH
58851: LD_VAR 0 4
58855: ARRAY
58856: PUSH
58857: LD_INT 1
58859: ARRAY
58860: PUSH
58861: LD_VAR 0 2
58865: EQUAL
58866: IFFALSE 58877
// KillUnit ( vehicle ) ;
58868: LD_VAR 0 2
58872: PPUSH
58873: CALL_OW 66
58877: GO 58837
58879: POP
58880: POP
// end ;
58881: LD_VAR 0 3
58885: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58886: LD_EXP 39
58890: NOT
58891: IFFALSE 58926
58893: GO 58895
58895: DISABLE
// begin initMiner := true ;
58896: LD_ADDR_EXP 39
58900: PUSH
58901: LD_INT 1
58903: ST_TO_ADDR
// minersList := [ ] ;
58904: LD_ADDR_EXP 40
58908: PUSH
58909: EMPTY
58910: ST_TO_ADDR
// minerMinesList := [ ] ;
58911: LD_ADDR_EXP 41
58915: PUSH
58916: EMPTY
58917: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58918: LD_ADDR_EXP 42
58922: PUSH
58923: LD_INT 5
58925: ST_TO_ADDR
// end ;
58926: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58927: LD_EXP 39
58931: PUSH
58932: LD_INT 34
58934: PUSH
58935: LD_EXP 111
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PPUSH
58944: CALL_OW 69
58948: AND
58949: IFFALSE 59412
58951: GO 58953
58953: DISABLE
58954: LD_INT 0
58956: PPUSH
58957: PPUSH
58958: PPUSH
58959: PPUSH
// begin enable ;
58960: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58961: LD_ADDR_VAR 0 1
58965: PUSH
58966: LD_INT 34
58968: PUSH
58969: LD_EXP 111
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PPUSH
58978: CALL_OW 69
58982: PUSH
58983: FOR_IN
58984: IFFALSE 59056
// begin if not i in minersList then
58986: LD_VAR 0 1
58990: PUSH
58991: LD_EXP 40
58995: IN
58996: NOT
58997: IFFALSE 59054
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58999: LD_ADDR_EXP 40
59003: PUSH
59004: LD_EXP 40
59008: PPUSH
59009: LD_EXP 40
59013: PUSH
59014: LD_INT 1
59016: PLUS
59017: PPUSH
59018: LD_VAR 0 1
59022: PPUSH
59023: CALL_OW 1
59027: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59028: LD_ADDR_EXP 41
59032: PUSH
59033: LD_EXP 41
59037: PPUSH
59038: LD_EXP 41
59042: PUSH
59043: LD_INT 1
59045: PLUS
59046: PPUSH
59047: EMPTY
59048: PPUSH
59049: CALL_OW 1
59053: ST_TO_ADDR
// end end ;
59054: GO 58983
59056: POP
59057: POP
// for i := minerMinesList downto 1 do
59058: LD_ADDR_VAR 0 1
59062: PUSH
59063: DOUBLE
59064: LD_EXP 41
59068: INC
59069: ST_TO_ADDR
59070: LD_INT 1
59072: PUSH
59073: FOR_DOWNTO
59074: IFFALSE 59410
// begin if IsLive ( minersList [ i ] ) then
59076: LD_EXP 40
59080: PUSH
59081: LD_VAR 0 1
59085: ARRAY
59086: PPUSH
59087: CALL_OW 300
59091: IFFALSE 59119
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59093: LD_EXP 40
59097: PUSH
59098: LD_VAR 0 1
59102: ARRAY
59103: PPUSH
59104: LD_EXP 41
59108: PUSH
59109: LD_VAR 0 1
59113: ARRAY
59114: PPUSH
59115: CALL_OW 505
// if not minerMinesList [ i ] then
59119: LD_EXP 41
59123: PUSH
59124: LD_VAR 0 1
59128: ARRAY
59129: NOT
59130: IFFALSE 59134
// continue ;
59132: GO 59073
// for j := minerMinesList [ i ] downto 1 do
59134: LD_ADDR_VAR 0 2
59138: PUSH
59139: DOUBLE
59140: LD_EXP 41
59144: PUSH
59145: LD_VAR 0 1
59149: ARRAY
59150: INC
59151: ST_TO_ADDR
59152: LD_INT 1
59154: PUSH
59155: FOR_DOWNTO
59156: IFFALSE 59406
// begin side := GetSide ( minersList [ i ] ) ;
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_EXP 40
59167: PUSH
59168: LD_VAR 0 1
59172: ARRAY
59173: PPUSH
59174: CALL_OW 255
59178: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59179: LD_ADDR_VAR 0 4
59183: PUSH
59184: LD_EXP 41
59188: PUSH
59189: LD_VAR 0 1
59193: ARRAY
59194: PUSH
59195: LD_VAR 0 2
59199: ARRAY
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: PPUSH
59205: LD_EXP 41
59209: PUSH
59210: LD_VAR 0 1
59214: ARRAY
59215: PUSH
59216: LD_VAR 0 2
59220: ARRAY
59221: PUSH
59222: LD_INT 2
59224: ARRAY
59225: PPUSH
59226: CALL_OW 428
59230: ST_TO_ADDR
// if not tmp then
59231: LD_VAR 0 4
59235: NOT
59236: IFFALSE 59240
// continue ;
59238: GO 59155
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59240: LD_VAR 0 4
59244: PUSH
59245: LD_INT 81
59247: PUSH
59248: LD_VAR 0 3
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PPUSH
59257: CALL_OW 69
59261: IN
59262: PUSH
59263: LD_EXP 41
59267: PUSH
59268: LD_VAR 0 1
59272: ARRAY
59273: PUSH
59274: LD_VAR 0 2
59278: ARRAY
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: PPUSH
59284: LD_EXP 41
59288: PUSH
59289: LD_VAR 0 1
59293: ARRAY
59294: PUSH
59295: LD_VAR 0 2
59299: ARRAY
59300: PUSH
59301: LD_INT 2
59303: ARRAY
59304: PPUSH
59305: CALL_OW 458
59309: AND
59310: IFFALSE 59404
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59312: LD_EXP 41
59316: PUSH
59317: LD_VAR 0 1
59321: ARRAY
59322: PUSH
59323: LD_VAR 0 2
59327: ARRAY
59328: PUSH
59329: LD_INT 1
59331: ARRAY
59332: PPUSH
59333: LD_EXP 41
59337: PUSH
59338: LD_VAR 0 1
59342: ARRAY
59343: PUSH
59344: LD_VAR 0 2
59348: ARRAY
59349: PUSH
59350: LD_INT 2
59352: ARRAY
59353: PPUSH
59354: LD_VAR 0 3
59358: PPUSH
59359: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59363: LD_ADDR_EXP 41
59367: PUSH
59368: LD_EXP 41
59372: PPUSH
59373: LD_VAR 0 1
59377: PPUSH
59378: LD_EXP 41
59382: PUSH
59383: LD_VAR 0 1
59387: ARRAY
59388: PPUSH
59389: LD_VAR 0 2
59393: PPUSH
59394: CALL_OW 3
59398: PPUSH
59399: CALL_OW 1
59403: ST_TO_ADDR
// end ; end ;
59404: GO 59155
59406: POP
59407: POP
// end ;
59408: GO 59073
59410: POP
59411: POP
// end ;
59412: PPOPN 4
59414: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59415: LD_INT 0
59417: PPUSH
59418: PPUSH
// result := false ;
59419: LD_ADDR_VAR 0 4
59423: PUSH
59424: LD_INT 0
59426: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59427: LD_VAR 0 1
59431: PPUSH
59432: CALL_OW 264
59436: PUSH
59437: LD_EXP 111
59441: EQUAL
59442: NOT
59443: IFFALSE 59447
// exit ;
59445: GO 59687
// index := GetElementIndex ( minersList , unit ) ;
59447: LD_ADDR_VAR 0 5
59451: PUSH
59452: LD_EXP 40
59456: PPUSH
59457: LD_VAR 0 1
59461: PPUSH
59462: CALL 20134 0 2
59466: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59467: LD_EXP 41
59471: PUSH
59472: LD_VAR 0 5
59476: ARRAY
59477: PUSH
59478: LD_EXP 42
59482: GREATEREQUAL
59483: IFFALSE 59487
// exit ;
59485: GO 59687
// ComMoveXY ( unit , x , y ) ;
59487: LD_VAR 0 1
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: LD_VAR 0 3
59501: PPUSH
59502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59506: LD_INT 35
59508: PPUSH
59509: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59513: LD_VAR 0 1
59517: PPUSH
59518: LD_VAR 0 2
59522: PPUSH
59523: LD_VAR 0 3
59527: PPUSH
59528: CALL 51420 0 3
59532: NOT
59533: PUSH
59534: LD_VAR 0 1
59538: PPUSH
59539: CALL_OW 314
59543: AND
59544: IFFALSE 59548
// exit ;
59546: GO 59687
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59548: LD_VAR 0 2
59552: PPUSH
59553: LD_VAR 0 3
59557: PPUSH
59558: CALL_OW 428
59562: PUSH
59563: LD_VAR 0 1
59567: EQUAL
59568: PUSH
59569: LD_VAR 0 1
59573: PPUSH
59574: CALL_OW 314
59578: NOT
59579: AND
59580: IFFALSE 59506
// PlaySoundXY ( x , y , PlantMine ) ;
59582: LD_VAR 0 2
59586: PPUSH
59587: LD_VAR 0 3
59591: PPUSH
59592: LD_STRING PlantMine
59594: PPUSH
59595: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59599: LD_VAR 0 2
59603: PPUSH
59604: LD_VAR 0 3
59608: PPUSH
59609: LD_VAR 0 1
59613: PPUSH
59614: CALL_OW 255
59618: PPUSH
59619: LD_INT 0
59621: PPUSH
59622: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59626: LD_ADDR_EXP 41
59630: PUSH
59631: LD_EXP 41
59635: PPUSH
59636: LD_VAR 0 5
59640: PUSH
59641: LD_EXP 41
59645: PUSH
59646: LD_VAR 0 5
59650: ARRAY
59651: PUSH
59652: LD_INT 1
59654: PLUS
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PPUSH
59660: LD_VAR 0 2
59664: PUSH
59665: LD_VAR 0 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PPUSH
59674: CALL 20349 0 3
59678: ST_TO_ADDR
// result := true ;
59679: LD_ADDR_VAR 0 4
59683: PUSH
59684: LD_INT 1
59686: ST_TO_ADDR
// end ;
59687: LD_VAR 0 4
59691: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59692: LD_INT 0
59694: PPUSH
59695: PPUSH
59696: PPUSH
// if not unit in minersList then
59697: LD_VAR 0 1
59701: PUSH
59702: LD_EXP 40
59706: IN
59707: NOT
59708: IFFALSE 59712
// exit ;
59710: GO 60104
// index := GetElementIndex ( minersList , unit ) ;
59712: LD_ADDR_VAR 0 6
59716: PUSH
59717: LD_EXP 40
59721: PPUSH
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL 20134 0 2
59731: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59732: LD_ADDR_VAR 0 5
59736: PUSH
59737: DOUBLE
59738: LD_EXP 41
59742: PUSH
59743: LD_VAR 0 6
59747: ARRAY
59748: INC
59749: ST_TO_ADDR
59750: LD_INT 1
59752: PUSH
59753: FOR_DOWNTO
59754: IFFALSE 59915
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59756: LD_EXP 41
59760: PUSH
59761: LD_VAR 0 6
59765: ARRAY
59766: PUSH
59767: LD_VAR 0 5
59771: ARRAY
59772: PUSH
59773: LD_INT 1
59775: ARRAY
59776: PUSH
59777: LD_VAR 0 2
59781: EQUAL
59782: PUSH
59783: LD_EXP 41
59787: PUSH
59788: LD_VAR 0 6
59792: ARRAY
59793: PUSH
59794: LD_VAR 0 5
59798: ARRAY
59799: PUSH
59800: LD_INT 2
59802: ARRAY
59803: PUSH
59804: LD_VAR 0 3
59808: EQUAL
59809: AND
59810: IFFALSE 59913
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59812: LD_EXP 41
59816: PUSH
59817: LD_VAR 0 6
59821: ARRAY
59822: PUSH
59823: LD_VAR 0 5
59827: ARRAY
59828: PUSH
59829: LD_INT 1
59831: ARRAY
59832: PPUSH
59833: LD_EXP 41
59837: PUSH
59838: LD_VAR 0 6
59842: ARRAY
59843: PUSH
59844: LD_VAR 0 5
59848: ARRAY
59849: PUSH
59850: LD_INT 2
59852: ARRAY
59853: PPUSH
59854: LD_VAR 0 1
59858: PPUSH
59859: CALL_OW 255
59863: PPUSH
59864: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59868: LD_ADDR_EXP 41
59872: PUSH
59873: LD_EXP 41
59877: PPUSH
59878: LD_VAR 0 6
59882: PPUSH
59883: LD_EXP 41
59887: PUSH
59888: LD_VAR 0 6
59892: ARRAY
59893: PPUSH
59894: LD_VAR 0 5
59898: PPUSH
59899: CALL_OW 3
59903: PPUSH
59904: CALL_OW 1
59908: ST_TO_ADDR
// exit ;
59909: POP
59910: POP
59911: GO 60104
// end ; end ;
59913: GO 59753
59915: POP
59916: POP
// for i := minerMinesList [ index ] downto 1 do
59917: LD_ADDR_VAR 0 5
59921: PUSH
59922: DOUBLE
59923: LD_EXP 41
59927: PUSH
59928: LD_VAR 0 6
59932: ARRAY
59933: INC
59934: ST_TO_ADDR
59935: LD_INT 1
59937: PUSH
59938: FOR_DOWNTO
59939: IFFALSE 60102
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59941: LD_EXP 41
59945: PUSH
59946: LD_VAR 0 6
59950: ARRAY
59951: PUSH
59952: LD_VAR 0 5
59956: ARRAY
59957: PUSH
59958: LD_INT 1
59960: ARRAY
59961: PPUSH
59962: LD_EXP 41
59966: PUSH
59967: LD_VAR 0 6
59971: ARRAY
59972: PUSH
59973: LD_VAR 0 5
59977: ARRAY
59978: PUSH
59979: LD_INT 2
59981: ARRAY
59982: PPUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: LD_VAR 0 3
59992: PPUSH
59993: CALL_OW 298
59997: PUSH
59998: LD_INT 6
60000: LESS
60001: IFFALSE 60100
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60003: LD_EXP 41
60007: PUSH
60008: LD_VAR 0 6
60012: ARRAY
60013: PUSH
60014: LD_VAR 0 5
60018: ARRAY
60019: PUSH
60020: LD_INT 1
60022: ARRAY
60023: PPUSH
60024: LD_EXP 41
60028: PUSH
60029: LD_VAR 0 6
60033: ARRAY
60034: PUSH
60035: LD_VAR 0 5
60039: ARRAY
60040: PUSH
60041: LD_INT 2
60043: ARRAY
60044: PPUSH
60045: LD_VAR 0 1
60049: PPUSH
60050: CALL_OW 255
60054: PPUSH
60055: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60059: LD_ADDR_EXP 41
60063: PUSH
60064: LD_EXP 41
60068: PPUSH
60069: LD_VAR 0 6
60073: PPUSH
60074: LD_EXP 41
60078: PUSH
60079: LD_VAR 0 6
60083: ARRAY
60084: PPUSH
60085: LD_VAR 0 5
60089: PPUSH
60090: CALL_OW 3
60094: PPUSH
60095: CALL_OW 1
60099: ST_TO_ADDR
// end ; end ;
60100: GO 59938
60102: POP
60103: POP
// end ;
60104: LD_VAR 0 4
60108: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60109: LD_INT 0
60111: PPUSH
60112: PPUSH
60113: PPUSH
60114: PPUSH
60115: PPUSH
60116: PPUSH
60117: PPUSH
60118: PPUSH
60119: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60120: LD_VAR 0 1
60124: PPUSH
60125: CALL_OW 264
60129: PUSH
60130: LD_EXP 111
60134: EQUAL
60135: NOT
60136: PUSH
60137: LD_VAR 0 1
60141: PUSH
60142: LD_EXP 40
60146: IN
60147: NOT
60148: OR
60149: IFFALSE 60153
// exit ;
60151: GO 60475
// index := GetElementIndex ( minersList , unit ) ;
60153: LD_ADDR_VAR 0 6
60157: PUSH
60158: LD_EXP 40
60162: PPUSH
60163: LD_VAR 0 1
60167: PPUSH
60168: CALL 20134 0 2
60172: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60173: LD_ADDR_VAR 0 8
60177: PUSH
60178: LD_EXP 42
60182: PUSH
60183: LD_EXP 41
60187: PUSH
60188: LD_VAR 0 6
60192: ARRAY
60193: MINUS
60194: ST_TO_ADDR
// if not minesFreeAmount then
60195: LD_VAR 0 8
60199: NOT
60200: IFFALSE 60204
// exit ;
60202: GO 60475
// tmp := [ ] ;
60204: LD_ADDR_VAR 0 7
60208: PUSH
60209: EMPTY
60210: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60211: LD_ADDR_VAR 0 5
60215: PUSH
60216: DOUBLE
60217: LD_INT 1
60219: DEC
60220: ST_TO_ADDR
60221: LD_VAR 0 8
60225: PUSH
60226: FOR_TO
60227: IFFALSE 60422
// begin _d := rand ( 0 , 5 ) ;
60229: LD_ADDR_VAR 0 11
60233: PUSH
60234: LD_INT 0
60236: PPUSH
60237: LD_INT 5
60239: PPUSH
60240: CALL_OW 12
60244: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60245: LD_ADDR_VAR 0 12
60249: PUSH
60250: LD_INT 2
60252: PPUSH
60253: LD_INT 6
60255: PPUSH
60256: CALL_OW 12
60260: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60261: LD_ADDR_VAR 0 9
60265: PUSH
60266: LD_VAR 0 2
60270: PPUSH
60271: LD_VAR 0 11
60275: PPUSH
60276: LD_VAR 0 12
60280: PPUSH
60281: CALL_OW 272
60285: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60286: LD_ADDR_VAR 0 10
60290: PUSH
60291: LD_VAR 0 3
60295: PPUSH
60296: LD_VAR 0 11
60300: PPUSH
60301: LD_VAR 0 12
60305: PPUSH
60306: CALL_OW 273
60310: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60311: LD_VAR 0 9
60315: PPUSH
60316: LD_VAR 0 10
60320: PPUSH
60321: CALL_OW 488
60325: PUSH
60326: LD_VAR 0 9
60330: PUSH
60331: LD_VAR 0 10
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_VAR 0 7
60344: IN
60345: NOT
60346: AND
60347: PUSH
60348: LD_VAR 0 9
60352: PPUSH
60353: LD_VAR 0 10
60357: PPUSH
60358: CALL_OW 458
60362: NOT
60363: AND
60364: IFFALSE 60406
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60366: LD_ADDR_VAR 0 7
60370: PUSH
60371: LD_VAR 0 7
60375: PPUSH
60376: LD_VAR 0 7
60380: PUSH
60381: LD_INT 1
60383: PLUS
60384: PPUSH
60385: LD_VAR 0 9
60389: PUSH
60390: LD_VAR 0 10
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PPUSH
60399: CALL_OW 1
60403: ST_TO_ADDR
60404: GO 60420
// i := i - 1 ;
60406: LD_ADDR_VAR 0 5
60410: PUSH
60411: LD_VAR 0 5
60415: PUSH
60416: LD_INT 1
60418: MINUS
60419: ST_TO_ADDR
// end ;
60420: GO 60226
60422: POP
60423: POP
// for i in tmp do
60424: LD_ADDR_VAR 0 5
60428: PUSH
60429: LD_VAR 0 7
60433: PUSH
60434: FOR_IN
60435: IFFALSE 60473
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60437: LD_VAR 0 1
60441: PPUSH
60442: LD_VAR 0 5
60446: PUSH
60447: LD_INT 1
60449: ARRAY
60450: PPUSH
60451: LD_VAR 0 5
60455: PUSH
60456: LD_INT 2
60458: ARRAY
60459: PPUSH
60460: CALL 59415 0 3
60464: NOT
60465: IFFALSE 60471
// exit ;
60467: POP
60468: POP
60469: GO 60475
60471: GO 60434
60473: POP
60474: POP
// end ;
60475: LD_VAR 0 4
60479: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60480: LD_INT 0
60482: PPUSH
60483: PPUSH
60484: PPUSH
60485: PPUSH
60486: PPUSH
60487: PPUSH
60488: PPUSH
// if not GetClass ( unit ) = class_sniper then
60489: LD_VAR 0 1
60493: PPUSH
60494: CALL_OW 257
60498: PUSH
60499: LD_INT 5
60501: EQUAL
60502: NOT
60503: IFFALSE 60507
// exit ;
60505: GO 60895
// dist := 8 ;
60507: LD_ADDR_VAR 0 5
60511: PUSH
60512: LD_INT 8
60514: ST_TO_ADDR
// viewRange := 12 ;
60515: LD_ADDR_VAR 0 7
60519: PUSH
60520: LD_INT 12
60522: ST_TO_ADDR
// side := GetSide ( unit ) ;
60523: LD_ADDR_VAR 0 6
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: CALL_OW 255
60537: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60538: LD_INT 61
60540: PPUSH
60541: LD_VAR 0 6
60545: PPUSH
60546: CALL_OW 321
60550: PUSH
60551: LD_INT 2
60553: EQUAL
60554: IFFALSE 60564
// viewRange := 16 ;
60556: LD_ADDR_VAR 0 7
60560: PUSH
60561: LD_INT 16
60563: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60564: LD_VAR 0 1
60568: PPUSH
60569: LD_VAR 0 2
60573: PPUSH
60574: LD_VAR 0 3
60578: PPUSH
60579: CALL_OW 297
60583: PUSH
60584: LD_VAR 0 5
60588: GREATER
60589: IFFALSE 60668
// begin ComMoveXY ( unit , x , y ) ;
60591: LD_VAR 0 1
60595: PPUSH
60596: LD_VAR 0 2
60600: PPUSH
60601: LD_VAR 0 3
60605: PPUSH
60606: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60610: LD_INT 35
60612: PPUSH
60613: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60617: LD_VAR 0 1
60621: PPUSH
60622: LD_VAR 0 2
60626: PPUSH
60627: LD_VAR 0 3
60631: PPUSH
60632: CALL 51420 0 3
60636: NOT
60637: IFFALSE 60641
// exit ;
60639: GO 60895
// until GetDistUnitXY ( unit , x , y ) < dist ;
60641: LD_VAR 0 1
60645: PPUSH
60646: LD_VAR 0 2
60650: PPUSH
60651: LD_VAR 0 3
60655: PPUSH
60656: CALL_OW 297
60660: PUSH
60661: LD_VAR 0 5
60665: LESS
60666: IFFALSE 60610
// end ; ComTurnXY ( unit , x , y ) ;
60668: LD_VAR 0 1
60672: PPUSH
60673: LD_VAR 0 2
60677: PPUSH
60678: LD_VAR 0 3
60682: PPUSH
60683: CALL_OW 118
// wait ( 5 ) ;
60687: LD_INT 5
60689: PPUSH
60690: CALL_OW 67
// _d := GetDir ( unit ) ;
60694: LD_ADDR_VAR 0 10
60698: PUSH
60699: LD_VAR 0 1
60703: PPUSH
60704: CALL_OW 254
60708: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60709: LD_ADDR_VAR 0 8
60713: PUSH
60714: LD_VAR 0 1
60718: PPUSH
60719: CALL_OW 250
60723: PPUSH
60724: LD_VAR 0 10
60728: PPUSH
60729: LD_VAR 0 5
60733: PPUSH
60734: CALL_OW 272
60738: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60739: LD_ADDR_VAR 0 9
60743: PUSH
60744: LD_VAR 0 1
60748: PPUSH
60749: CALL_OW 251
60753: PPUSH
60754: LD_VAR 0 10
60758: PPUSH
60759: LD_VAR 0 5
60763: PPUSH
60764: CALL_OW 273
60768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60769: LD_VAR 0 8
60773: PPUSH
60774: LD_VAR 0 9
60778: PPUSH
60779: CALL_OW 488
60783: NOT
60784: IFFALSE 60788
// exit ;
60786: GO 60895
// ComAnimCustom ( unit , 1 ) ;
60788: LD_VAR 0 1
60792: PPUSH
60793: LD_INT 1
60795: PPUSH
60796: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60800: LD_VAR 0 8
60804: PPUSH
60805: LD_VAR 0 9
60809: PPUSH
60810: LD_VAR 0 6
60814: PPUSH
60815: LD_VAR 0 7
60819: PPUSH
60820: CALL_OW 330
// repeat wait ( 1 ) ;
60824: LD_INT 1
60826: PPUSH
60827: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL_OW 316
60840: PUSH
60841: LD_VAR 0 1
60845: PPUSH
60846: CALL_OW 314
60850: OR
60851: PUSH
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 302
60861: NOT
60862: OR
60863: PUSH
60864: LD_VAR 0 1
60868: PPUSH
60869: CALL_OW 301
60873: OR
60874: IFFALSE 60824
// RemoveSeeing ( _x , _y , side ) ;
60876: LD_VAR 0 8
60880: PPUSH
60881: LD_VAR 0 9
60885: PPUSH
60886: LD_VAR 0 6
60890: PPUSH
60891: CALL_OW 331
// end ; end_of_file
60895: LD_VAR 0 4
60899: RET
// every 0 0$1 do
60900: GO 60902
60902: DISABLE
// begin enable ;
60903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60904: LD_STRING updateTimer(
60906: PUSH
60907: LD_OWVAR 1
60911: STR
60912: PUSH
60913: LD_STRING );
60915: STR
60916: PPUSH
60917: CALL_OW 559
// end ;
60921: END
// export function SOS_MapStart ( ) ; begin
60922: LD_INT 0
60924: PPUSH
// if streamModeActive then
60925: LD_EXP 43
60929: IFFALSE 60938
// DefineStreamItems ( true ) ;
60931: LD_INT 1
60933: PPUSH
60934: CALL 62592 0 1
// UpdateFactoryWaypoints ( ) ;
60938: CALL 75453 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60942: CALL 75710 0 0
// end ;
60946: LD_VAR 0 1
60950: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60951: LD_INT 0
60953: PPUSH
// if p2 = 100 then
60954: LD_VAR 0 2
60958: PUSH
60959: LD_INT 100
60961: EQUAL
60962: IFFALSE 61965
// begin if not StreamModeActive then
60964: LD_EXP 43
60968: NOT
60969: IFFALSE 60979
// StreamModeActive := true ;
60971: LD_ADDR_EXP 43
60975: PUSH
60976: LD_INT 1
60978: ST_TO_ADDR
// if p3 = 0 then
60979: LD_VAR 0 3
60983: PUSH
60984: LD_INT 0
60986: EQUAL
60987: IFFALSE 60993
// InitStreamMode ;
60989: CALL 62128 0 0
// if p3 = 1 then
60993: LD_VAR 0 3
60997: PUSH
60998: LD_INT 1
61000: EQUAL
61001: IFFALSE 61011
// sRocket := true ;
61003: LD_ADDR_EXP 48
61007: PUSH
61008: LD_INT 1
61010: ST_TO_ADDR
// if p3 = 2 then
61011: LD_VAR 0 3
61015: PUSH
61016: LD_INT 2
61018: EQUAL
61019: IFFALSE 61029
// sSpeed := true ;
61021: LD_ADDR_EXP 47
61025: PUSH
61026: LD_INT 1
61028: ST_TO_ADDR
// if p3 = 3 then
61029: LD_VAR 0 3
61033: PUSH
61034: LD_INT 3
61036: EQUAL
61037: IFFALSE 61047
// sEngine := true ;
61039: LD_ADDR_EXP 49
61043: PUSH
61044: LD_INT 1
61046: ST_TO_ADDR
// if p3 = 4 then
61047: LD_VAR 0 3
61051: PUSH
61052: LD_INT 4
61054: EQUAL
61055: IFFALSE 61065
// sSpec := true ;
61057: LD_ADDR_EXP 46
61061: PUSH
61062: LD_INT 1
61064: ST_TO_ADDR
// if p3 = 5 then
61065: LD_VAR 0 3
61069: PUSH
61070: LD_INT 5
61072: EQUAL
61073: IFFALSE 61083
// sLevel := true ;
61075: LD_ADDR_EXP 50
61079: PUSH
61080: LD_INT 1
61082: ST_TO_ADDR
// if p3 = 6 then
61083: LD_VAR 0 3
61087: PUSH
61088: LD_INT 6
61090: EQUAL
61091: IFFALSE 61101
// sArmoury := true ;
61093: LD_ADDR_EXP 51
61097: PUSH
61098: LD_INT 1
61100: ST_TO_ADDR
// if p3 = 7 then
61101: LD_VAR 0 3
61105: PUSH
61106: LD_INT 7
61108: EQUAL
61109: IFFALSE 61119
// sRadar := true ;
61111: LD_ADDR_EXP 52
61115: PUSH
61116: LD_INT 1
61118: ST_TO_ADDR
// if p3 = 8 then
61119: LD_VAR 0 3
61123: PUSH
61124: LD_INT 8
61126: EQUAL
61127: IFFALSE 61137
// sBunker := true ;
61129: LD_ADDR_EXP 53
61133: PUSH
61134: LD_INT 1
61136: ST_TO_ADDR
// if p3 = 9 then
61137: LD_VAR 0 3
61141: PUSH
61142: LD_INT 9
61144: EQUAL
61145: IFFALSE 61155
// sHack := true ;
61147: LD_ADDR_EXP 54
61151: PUSH
61152: LD_INT 1
61154: ST_TO_ADDR
// if p3 = 10 then
61155: LD_VAR 0 3
61159: PUSH
61160: LD_INT 10
61162: EQUAL
61163: IFFALSE 61173
// sFire := true ;
61165: LD_ADDR_EXP 55
61169: PUSH
61170: LD_INT 1
61172: ST_TO_ADDR
// if p3 = 11 then
61173: LD_VAR 0 3
61177: PUSH
61178: LD_INT 11
61180: EQUAL
61181: IFFALSE 61191
// sRefresh := true ;
61183: LD_ADDR_EXP 56
61187: PUSH
61188: LD_INT 1
61190: ST_TO_ADDR
// if p3 = 12 then
61191: LD_VAR 0 3
61195: PUSH
61196: LD_INT 12
61198: EQUAL
61199: IFFALSE 61209
// sExp := true ;
61201: LD_ADDR_EXP 57
61205: PUSH
61206: LD_INT 1
61208: ST_TO_ADDR
// if p3 = 13 then
61209: LD_VAR 0 3
61213: PUSH
61214: LD_INT 13
61216: EQUAL
61217: IFFALSE 61227
// sDepot := true ;
61219: LD_ADDR_EXP 58
61223: PUSH
61224: LD_INT 1
61226: ST_TO_ADDR
// if p3 = 14 then
61227: LD_VAR 0 3
61231: PUSH
61232: LD_INT 14
61234: EQUAL
61235: IFFALSE 61245
// sFlag := true ;
61237: LD_ADDR_EXP 59
61241: PUSH
61242: LD_INT 1
61244: ST_TO_ADDR
// if p3 = 15 then
61245: LD_VAR 0 3
61249: PUSH
61250: LD_INT 15
61252: EQUAL
61253: IFFALSE 61263
// sKamikadze := true ;
61255: LD_ADDR_EXP 67
61259: PUSH
61260: LD_INT 1
61262: ST_TO_ADDR
// if p3 = 16 then
61263: LD_VAR 0 3
61267: PUSH
61268: LD_INT 16
61270: EQUAL
61271: IFFALSE 61281
// sTroll := true ;
61273: LD_ADDR_EXP 68
61277: PUSH
61278: LD_INT 1
61280: ST_TO_ADDR
// if p3 = 17 then
61281: LD_VAR 0 3
61285: PUSH
61286: LD_INT 17
61288: EQUAL
61289: IFFALSE 61299
// sSlow := true ;
61291: LD_ADDR_EXP 69
61295: PUSH
61296: LD_INT 1
61298: ST_TO_ADDR
// if p3 = 18 then
61299: LD_VAR 0 3
61303: PUSH
61304: LD_INT 18
61306: EQUAL
61307: IFFALSE 61317
// sLack := true ;
61309: LD_ADDR_EXP 70
61313: PUSH
61314: LD_INT 1
61316: ST_TO_ADDR
// if p3 = 19 then
61317: LD_VAR 0 3
61321: PUSH
61322: LD_INT 19
61324: EQUAL
61325: IFFALSE 61335
// sTank := true ;
61327: LD_ADDR_EXP 72
61331: PUSH
61332: LD_INT 1
61334: ST_TO_ADDR
// if p3 = 20 then
61335: LD_VAR 0 3
61339: PUSH
61340: LD_INT 20
61342: EQUAL
61343: IFFALSE 61353
// sRemote := true ;
61345: LD_ADDR_EXP 73
61349: PUSH
61350: LD_INT 1
61352: ST_TO_ADDR
// if p3 = 21 then
61353: LD_VAR 0 3
61357: PUSH
61358: LD_INT 21
61360: EQUAL
61361: IFFALSE 61371
// sPowell := true ;
61363: LD_ADDR_EXP 74
61367: PUSH
61368: LD_INT 1
61370: ST_TO_ADDR
// if p3 = 22 then
61371: LD_VAR 0 3
61375: PUSH
61376: LD_INT 22
61378: EQUAL
61379: IFFALSE 61389
// sTeleport := true ;
61381: LD_ADDR_EXP 77
61385: PUSH
61386: LD_INT 1
61388: ST_TO_ADDR
// if p3 = 23 then
61389: LD_VAR 0 3
61393: PUSH
61394: LD_INT 23
61396: EQUAL
61397: IFFALSE 61407
// sOilTower := true ;
61399: LD_ADDR_EXP 79
61403: PUSH
61404: LD_INT 1
61406: ST_TO_ADDR
// if p3 = 24 then
61407: LD_VAR 0 3
61411: PUSH
61412: LD_INT 24
61414: EQUAL
61415: IFFALSE 61425
// sShovel := true ;
61417: LD_ADDR_EXP 80
61421: PUSH
61422: LD_INT 1
61424: ST_TO_ADDR
// if p3 = 25 then
61425: LD_VAR 0 3
61429: PUSH
61430: LD_INT 25
61432: EQUAL
61433: IFFALSE 61443
// sSheik := true ;
61435: LD_ADDR_EXP 81
61439: PUSH
61440: LD_INT 1
61442: ST_TO_ADDR
// if p3 = 26 then
61443: LD_VAR 0 3
61447: PUSH
61448: LD_INT 26
61450: EQUAL
61451: IFFALSE 61461
// sEarthquake := true ;
61453: LD_ADDR_EXP 83
61457: PUSH
61458: LD_INT 1
61460: ST_TO_ADDR
// if p3 = 27 then
61461: LD_VAR 0 3
61465: PUSH
61466: LD_INT 27
61468: EQUAL
61469: IFFALSE 61479
// sAI := true ;
61471: LD_ADDR_EXP 84
61475: PUSH
61476: LD_INT 1
61478: ST_TO_ADDR
// if p3 = 28 then
61479: LD_VAR 0 3
61483: PUSH
61484: LD_INT 28
61486: EQUAL
61487: IFFALSE 61497
// sCargo := true ;
61489: LD_ADDR_EXP 87
61493: PUSH
61494: LD_INT 1
61496: ST_TO_ADDR
// if p3 = 29 then
61497: LD_VAR 0 3
61501: PUSH
61502: LD_INT 29
61504: EQUAL
61505: IFFALSE 61515
// sDLaser := true ;
61507: LD_ADDR_EXP 88
61511: PUSH
61512: LD_INT 1
61514: ST_TO_ADDR
// if p3 = 30 then
61515: LD_VAR 0 3
61519: PUSH
61520: LD_INT 30
61522: EQUAL
61523: IFFALSE 61533
// sExchange := true ;
61525: LD_ADDR_EXP 89
61529: PUSH
61530: LD_INT 1
61532: ST_TO_ADDR
// if p3 = 31 then
61533: LD_VAR 0 3
61537: PUSH
61538: LD_INT 31
61540: EQUAL
61541: IFFALSE 61551
// sFac := true ;
61543: LD_ADDR_EXP 90
61547: PUSH
61548: LD_INT 1
61550: ST_TO_ADDR
// if p3 = 32 then
61551: LD_VAR 0 3
61555: PUSH
61556: LD_INT 32
61558: EQUAL
61559: IFFALSE 61569
// sPower := true ;
61561: LD_ADDR_EXP 91
61565: PUSH
61566: LD_INT 1
61568: ST_TO_ADDR
// if p3 = 33 then
61569: LD_VAR 0 3
61573: PUSH
61574: LD_INT 33
61576: EQUAL
61577: IFFALSE 61587
// sRandom := true ;
61579: LD_ADDR_EXP 92
61583: PUSH
61584: LD_INT 1
61586: ST_TO_ADDR
// if p3 = 34 then
61587: LD_VAR 0 3
61591: PUSH
61592: LD_INT 34
61594: EQUAL
61595: IFFALSE 61605
// sShield := true ;
61597: LD_ADDR_EXP 93
61601: PUSH
61602: LD_INT 1
61604: ST_TO_ADDR
// if p3 = 35 then
61605: LD_VAR 0 3
61609: PUSH
61610: LD_INT 35
61612: EQUAL
61613: IFFALSE 61623
// sTime := true ;
61615: LD_ADDR_EXP 94
61619: PUSH
61620: LD_INT 1
61622: ST_TO_ADDR
// if p3 = 36 then
61623: LD_VAR 0 3
61627: PUSH
61628: LD_INT 36
61630: EQUAL
61631: IFFALSE 61641
// sTools := true ;
61633: LD_ADDR_EXP 95
61637: PUSH
61638: LD_INT 1
61640: ST_TO_ADDR
// if p3 = 101 then
61641: LD_VAR 0 3
61645: PUSH
61646: LD_INT 101
61648: EQUAL
61649: IFFALSE 61659
// sSold := true ;
61651: LD_ADDR_EXP 60
61655: PUSH
61656: LD_INT 1
61658: ST_TO_ADDR
// if p3 = 102 then
61659: LD_VAR 0 3
61663: PUSH
61664: LD_INT 102
61666: EQUAL
61667: IFFALSE 61677
// sDiff := true ;
61669: LD_ADDR_EXP 61
61673: PUSH
61674: LD_INT 1
61676: ST_TO_ADDR
// if p3 = 103 then
61677: LD_VAR 0 3
61681: PUSH
61682: LD_INT 103
61684: EQUAL
61685: IFFALSE 61695
// sFog := true ;
61687: LD_ADDR_EXP 64
61691: PUSH
61692: LD_INT 1
61694: ST_TO_ADDR
// if p3 = 104 then
61695: LD_VAR 0 3
61699: PUSH
61700: LD_INT 104
61702: EQUAL
61703: IFFALSE 61713
// sReset := true ;
61705: LD_ADDR_EXP 65
61709: PUSH
61710: LD_INT 1
61712: ST_TO_ADDR
// if p3 = 105 then
61713: LD_VAR 0 3
61717: PUSH
61718: LD_INT 105
61720: EQUAL
61721: IFFALSE 61731
// sSun := true ;
61723: LD_ADDR_EXP 66
61727: PUSH
61728: LD_INT 1
61730: ST_TO_ADDR
// if p3 = 106 then
61731: LD_VAR 0 3
61735: PUSH
61736: LD_INT 106
61738: EQUAL
61739: IFFALSE 61749
// sTiger := true ;
61741: LD_ADDR_EXP 62
61745: PUSH
61746: LD_INT 1
61748: ST_TO_ADDR
// if p3 = 107 then
61749: LD_VAR 0 3
61753: PUSH
61754: LD_INT 107
61756: EQUAL
61757: IFFALSE 61767
// sBomb := true ;
61759: LD_ADDR_EXP 63
61763: PUSH
61764: LD_INT 1
61766: ST_TO_ADDR
// if p3 = 108 then
61767: LD_VAR 0 3
61771: PUSH
61772: LD_INT 108
61774: EQUAL
61775: IFFALSE 61785
// sWound := true ;
61777: LD_ADDR_EXP 71
61781: PUSH
61782: LD_INT 1
61784: ST_TO_ADDR
// if p3 = 109 then
61785: LD_VAR 0 3
61789: PUSH
61790: LD_INT 109
61792: EQUAL
61793: IFFALSE 61803
// sBetray := true ;
61795: LD_ADDR_EXP 75
61799: PUSH
61800: LD_INT 1
61802: ST_TO_ADDR
// if p3 = 110 then
61803: LD_VAR 0 3
61807: PUSH
61808: LD_INT 110
61810: EQUAL
61811: IFFALSE 61821
// sContamin := true ;
61813: LD_ADDR_EXP 76
61817: PUSH
61818: LD_INT 1
61820: ST_TO_ADDR
// if p3 = 111 then
61821: LD_VAR 0 3
61825: PUSH
61826: LD_INT 111
61828: EQUAL
61829: IFFALSE 61839
// sOil := true ;
61831: LD_ADDR_EXP 78
61835: PUSH
61836: LD_INT 1
61838: ST_TO_ADDR
// if p3 = 112 then
61839: LD_VAR 0 3
61843: PUSH
61844: LD_INT 112
61846: EQUAL
61847: IFFALSE 61857
// sStu := true ;
61849: LD_ADDR_EXP 82
61853: PUSH
61854: LD_INT 1
61856: ST_TO_ADDR
// if p3 = 113 then
61857: LD_VAR 0 3
61861: PUSH
61862: LD_INT 113
61864: EQUAL
61865: IFFALSE 61875
// sBazooka := true ;
61867: LD_ADDR_EXP 85
61871: PUSH
61872: LD_INT 1
61874: ST_TO_ADDR
// if p3 = 114 then
61875: LD_VAR 0 3
61879: PUSH
61880: LD_INT 114
61882: EQUAL
61883: IFFALSE 61893
// sMortar := true ;
61885: LD_ADDR_EXP 86
61889: PUSH
61890: LD_INT 1
61892: ST_TO_ADDR
// if p3 = 115 then
61893: LD_VAR 0 3
61897: PUSH
61898: LD_INT 115
61900: EQUAL
61901: IFFALSE 61911
// sRanger := true ;
61903: LD_ADDR_EXP 96
61907: PUSH
61908: LD_INT 1
61910: ST_TO_ADDR
// if p3 = 116 then
61911: LD_VAR 0 3
61915: PUSH
61916: LD_INT 116
61918: EQUAL
61919: IFFALSE 61929
// sComputer := true ;
61921: LD_ADDR_EXP 97
61925: PUSH
61926: LD_INT 1
61928: ST_TO_ADDR
// if p3 = 117 then
61929: LD_VAR 0 3
61933: PUSH
61934: LD_INT 117
61936: EQUAL
61937: IFFALSE 61947
// s30 := true ;
61939: LD_ADDR_EXP 98
61943: PUSH
61944: LD_INT 1
61946: ST_TO_ADDR
// if p3 = 118 then
61947: LD_VAR 0 3
61951: PUSH
61952: LD_INT 118
61954: EQUAL
61955: IFFALSE 61965
// s60 := true ;
61957: LD_ADDR_EXP 99
61961: PUSH
61962: LD_INT 1
61964: ST_TO_ADDR
// end ; if p2 = 101 then
61965: LD_VAR 0 2
61969: PUSH
61970: LD_INT 101
61972: EQUAL
61973: IFFALSE 62101
// begin case p3 of 1 :
61975: LD_VAR 0 3
61979: PUSH
61980: LD_INT 1
61982: DOUBLE
61983: EQUAL
61984: IFTRUE 61988
61986: GO 61995
61988: POP
// hHackUnlimitedResources ; 2 :
61989: CALL 74199 0 0
61993: GO 62101
61995: LD_INT 2
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62003
62001: GO 62010
62003: POP
// hHackSetLevel10 ; 3 :
62004: CALL 74332 0 0
62008: GO 62101
62010: LD_INT 3
62012: DOUBLE
62013: EQUAL
62014: IFTRUE 62018
62016: GO 62025
62018: POP
// hHackSetLevel10YourUnits ; 4 :
62019: CALL 74417 0 0
62023: GO 62101
62025: LD_INT 4
62027: DOUBLE
62028: EQUAL
62029: IFTRUE 62033
62031: GO 62040
62033: POP
// hHackInvincible ; 5 :
62034: CALL 74865 0 0
62038: GO 62101
62040: LD_INT 5
62042: DOUBLE
62043: EQUAL
62044: IFTRUE 62048
62046: GO 62055
62048: POP
// hHackInvisible ; 6 :
62049: CALL 74976 0 0
62053: GO 62101
62055: LD_INT 6
62057: DOUBLE
62058: EQUAL
62059: IFTRUE 62063
62061: GO 62070
62063: POP
// hHackChangeYourSide ; 7 :
62064: CALL 75033 0 0
62068: GO 62101
62070: LD_INT 7
62072: DOUBLE
62073: EQUAL
62074: IFTRUE 62078
62076: GO 62085
62078: POP
// hHackChangeUnitSide ; 8 :
62079: CALL 75075 0 0
62083: GO 62101
62085: LD_INT 8
62087: DOUBLE
62088: EQUAL
62089: IFTRUE 62093
62091: GO 62100
62093: POP
// hHackFog ; end ;
62094: CALL 75176 0 0
62098: GO 62101
62100: POP
// end ; end ;
62101: LD_VAR 0 7
62105: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
62106: GO 62108
62108: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
62109: LD_STRING initStreamRollete();
62111: PPUSH
62112: CALL_OW 559
// InitStreamMode ;
62116: CALL 62128 0 0
// DefineStreamItems ( false ) ;
62120: LD_INT 0
62122: PPUSH
62123: CALL 62592 0 1
// end ;
62127: END
// function InitStreamMode ; begin
62128: LD_INT 0
62130: PPUSH
// streamModeActive := false ;
62131: LD_ADDR_EXP 43
62135: PUSH
62136: LD_INT 0
62138: ST_TO_ADDR
// normalCounter := 36 ;
62139: LD_ADDR_EXP 44
62143: PUSH
62144: LD_INT 36
62146: ST_TO_ADDR
// hardcoreCounter := 18 ;
62147: LD_ADDR_EXP 45
62151: PUSH
62152: LD_INT 18
62154: ST_TO_ADDR
// sRocket := false ;
62155: LD_ADDR_EXP 48
62159: PUSH
62160: LD_INT 0
62162: ST_TO_ADDR
// sSpeed := false ;
62163: LD_ADDR_EXP 47
62167: PUSH
62168: LD_INT 0
62170: ST_TO_ADDR
// sEngine := false ;
62171: LD_ADDR_EXP 49
62175: PUSH
62176: LD_INT 0
62178: ST_TO_ADDR
// sSpec := false ;
62179: LD_ADDR_EXP 46
62183: PUSH
62184: LD_INT 0
62186: ST_TO_ADDR
// sLevel := false ;
62187: LD_ADDR_EXP 50
62191: PUSH
62192: LD_INT 0
62194: ST_TO_ADDR
// sArmoury := false ;
62195: LD_ADDR_EXP 51
62199: PUSH
62200: LD_INT 0
62202: ST_TO_ADDR
// sRadar := false ;
62203: LD_ADDR_EXP 52
62207: PUSH
62208: LD_INT 0
62210: ST_TO_ADDR
// sBunker := false ;
62211: LD_ADDR_EXP 53
62215: PUSH
62216: LD_INT 0
62218: ST_TO_ADDR
// sHack := false ;
62219: LD_ADDR_EXP 54
62223: PUSH
62224: LD_INT 0
62226: ST_TO_ADDR
// sFire := false ;
62227: LD_ADDR_EXP 55
62231: PUSH
62232: LD_INT 0
62234: ST_TO_ADDR
// sRefresh := false ;
62235: LD_ADDR_EXP 56
62239: PUSH
62240: LD_INT 0
62242: ST_TO_ADDR
// sExp := false ;
62243: LD_ADDR_EXP 57
62247: PUSH
62248: LD_INT 0
62250: ST_TO_ADDR
// sDepot := false ;
62251: LD_ADDR_EXP 58
62255: PUSH
62256: LD_INT 0
62258: ST_TO_ADDR
// sFlag := false ;
62259: LD_ADDR_EXP 59
62263: PUSH
62264: LD_INT 0
62266: ST_TO_ADDR
// sKamikadze := false ;
62267: LD_ADDR_EXP 67
62271: PUSH
62272: LD_INT 0
62274: ST_TO_ADDR
// sTroll := false ;
62275: LD_ADDR_EXP 68
62279: PUSH
62280: LD_INT 0
62282: ST_TO_ADDR
// sSlow := false ;
62283: LD_ADDR_EXP 69
62287: PUSH
62288: LD_INT 0
62290: ST_TO_ADDR
// sLack := false ;
62291: LD_ADDR_EXP 70
62295: PUSH
62296: LD_INT 0
62298: ST_TO_ADDR
// sTank := false ;
62299: LD_ADDR_EXP 72
62303: PUSH
62304: LD_INT 0
62306: ST_TO_ADDR
// sRemote := false ;
62307: LD_ADDR_EXP 73
62311: PUSH
62312: LD_INT 0
62314: ST_TO_ADDR
// sPowell := false ;
62315: LD_ADDR_EXP 74
62319: PUSH
62320: LD_INT 0
62322: ST_TO_ADDR
// sTeleport := false ;
62323: LD_ADDR_EXP 77
62327: PUSH
62328: LD_INT 0
62330: ST_TO_ADDR
// sOilTower := false ;
62331: LD_ADDR_EXP 79
62335: PUSH
62336: LD_INT 0
62338: ST_TO_ADDR
// sShovel := false ;
62339: LD_ADDR_EXP 80
62343: PUSH
62344: LD_INT 0
62346: ST_TO_ADDR
// sSheik := false ;
62347: LD_ADDR_EXP 81
62351: PUSH
62352: LD_INT 0
62354: ST_TO_ADDR
// sEarthquake := false ;
62355: LD_ADDR_EXP 83
62359: PUSH
62360: LD_INT 0
62362: ST_TO_ADDR
// sAI := false ;
62363: LD_ADDR_EXP 84
62367: PUSH
62368: LD_INT 0
62370: ST_TO_ADDR
// sCargo := false ;
62371: LD_ADDR_EXP 87
62375: PUSH
62376: LD_INT 0
62378: ST_TO_ADDR
// sDLaser := false ;
62379: LD_ADDR_EXP 88
62383: PUSH
62384: LD_INT 0
62386: ST_TO_ADDR
// sExchange := false ;
62387: LD_ADDR_EXP 89
62391: PUSH
62392: LD_INT 0
62394: ST_TO_ADDR
// sFac := false ;
62395: LD_ADDR_EXP 90
62399: PUSH
62400: LD_INT 0
62402: ST_TO_ADDR
// sPower := false ;
62403: LD_ADDR_EXP 91
62407: PUSH
62408: LD_INT 0
62410: ST_TO_ADDR
// sRandom := false ;
62411: LD_ADDR_EXP 92
62415: PUSH
62416: LD_INT 0
62418: ST_TO_ADDR
// sShield := false ;
62419: LD_ADDR_EXP 93
62423: PUSH
62424: LD_INT 0
62426: ST_TO_ADDR
// sTime := false ;
62427: LD_ADDR_EXP 94
62431: PUSH
62432: LD_INT 0
62434: ST_TO_ADDR
// sTools := false ;
62435: LD_ADDR_EXP 95
62439: PUSH
62440: LD_INT 0
62442: ST_TO_ADDR
// sSold := false ;
62443: LD_ADDR_EXP 60
62447: PUSH
62448: LD_INT 0
62450: ST_TO_ADDR
// sDiff := false ;
62451: LD_ADDR_EXP 61
62455: PUSH
62456: LD_INT 0
62458: ST_TO_ADDR
// sFog := false ;
62459: LD_ADDR_EXP 64
62463: PUSH
62464: LD_INT 0
62466: ST_TO_ADDR
// sReset := false ;
62467: LD_ADDR_EXP 65
62471: PUSH
62472: LD_INT 0
62474: ST_TO_ADDR
// sSun := false ;
62475: LD_ADDR_EXP 66
62479: PUSH
62480: LD_INT 0
62482: ST_TO_ADDR
// sTiger := false ;
62483: LD_ADDR_EXP 62
62487: PUSH
62488: LD_INT 0
62490: ST_TO_ADDR
// sBomb := false ;
62491: LD_ADDR_EXP 63
62495: PUSH
62496: LD_INT 0
62498: ST_TO_ADDR
// sWound := false ;
62499: LD_ADDR_EXP 71
62503: PUSH
62504: LD_INT 0
62506: ST_TO_ADDR
// sBetray := false ;
62507: LD_ADDR_EXP 75
62511: PUSH
62512: LD_INT 0
62514: ST_TO_ADDR
// sContamin := false ;
62515: LD_ADDR_EXP 76
62519: PUSH
62520: LD_INT 0
62522: ST_TO_ADDR
// sOil := false ;
62523: LD_ADDR_EXP 78
62527: PUSH
62528: LD_INT 0
62530: ST_TO_ADDR
// sStu := false ;
62531: LD_ADDR_EXP 82
62535: PUSH
62536: LD_INT 0
62538: ST_TO_ADDR
// sBazooka := false ;
62539: LD_ADDR_EXP 85
62543: PUSH
62544: LD_INT 0
62546: ST_TO_ADDR
// sMortar := false ;
62547: LD_ADDR_EXP 86
62551: PUSH
62552: LD_INT 0
62554: ST_TO_ADDR
// sRanger := false ;
62555: LD_ADDR_EXP 96
62559: PUSH
62560: LD_INT 0
62562: ST_TO_ADDR
// sComputer := false ;
62563: LD_ADDR_EXP 97
62567: PUSH
62568: LD_INT 0
62570: ST_TO_ADDR
// s30 := false ;
62571: LD_ADDR_EXP 98
62575: PUSH
62576: LD_INT 0
62578: ST_TO_ADDR
// s60 := false ;
62579: LD_ADDR_EXP 99
62583: PUSH
62584: LD_INT 0
62586: ST_TO_ADDR
// end ;
62587: LD_VAR 0 1
62591: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62592: LD_INT 0
62594: PPUSH
62595: PPUSH
62596: PPUSH
62597: PPUSH
62598: PPUSH
62599: PPUSH
62600: PPUSH
// result := [ ] ;
62601: LD_ADDR_VAR 0 2
62605: PUSH
62606: EMPTY
62607: ST_TO_ADDR
// if campaign_id = 1 then
62608: LD_OWVAR 69
62612: PUSH
62613: LD_INT 1
62615: EQUAL
62616: IFFALSE 65782
// begin case mission_number of 1 :
62618: LD_OWVAR 70
62622: PUSH
62623: LD_INT 1
62625: DOUBLE
62626: EQUAL
62627: IFTRUE 62631
62629: GO 62707
62631: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62632: LD_ADDR_VAR 0 2
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 4
62642: PUSH
62643: LD_INT 11
62645: PUSH
62646: LD_INT 12
62648: PUSH
62649: LD_INT 15
62651: PUSH
62652: LD_INT 16
62654: PUSH
62655: LD_INT 22
62657: PUSH
62658: LD_INT 23
62660: PUSH
62661: LD_INT 26
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 101
62677: PUSH
62678: LD_INT 102
62680: PUSH
62681: LD_INT 106
62683: PUSH
62684: LD_INT 116
62686: PUSH
62687: LD_INT 117
62689: PUSH
62690: LD_INT 118
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: ST_TO_ADDR
62705: GO 65780
62707: LD_INT 2
62709: DOUBLE
62710: EQUAL
62711: IFTRUE 62715
62713: GO 62799
62715: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62716: LD_ADDR_VAR 0 2
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: LD_INT 4
62726: PUSH
62727: LD_INT 11
62729: PUSH
62730: LD_INT 12
62732: PUSH
62733: LD_INT 15
62735: PUSH
62736: LD_INT 16
62738: PUSH
62739: LD_INT 22
62741: PUSH
62742: LD_INT 23
62744: PUSH
62745: LD_INT 26
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 101
62761: PUSH
62762: LD_INT 102
62764: PUSH
62765: LD_INT 105
62767: PUSH
62768: LD_INT 106
62770: PUSH
62771: LD_INT 108
62773: PUSH
62774: LD_INT 116
62776: PUSH
62777: LD_INT 117
62779: PUSH
62780: LD_INT 118
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: ST_TO_ADDR
62797: GO 65780
62799: LD_INT 3
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62807
62805: GO 62895
62807: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
62808: LD_ADDR_VAR 0 2
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: LD_INT 4
62818: PUSH
62819: LD_INT 5
62821: PUSH
62822: LD_INT 11
62824: PUSH
62825: LD_INT 12
62827: PUSH
62828: LD_INT 15
62830: PUSH
62831: LD_INT 16
62833: PUSH
62834: LD_INT 22
62836: PUSH
62837: LD_INT 26
62839: PUSH
62840: LD_INT 36
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 101
62857: PUSH
62858: LD_INT 102
62860: PUSH
62861: LD_INT 105
62863: PUSH
62864: LD_INT 106
62866: PUSH
62867: LD_INT 108
62869: PUSH
62870: LD_INT 116
62872: PUSH
62873: LD_INT 117
62875: PUSH
62876: LD_INT 118
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: ST_TO_ADDR
62893: GO 65780
62895: LD_INT 4
62897: DOUBLE
62898: EQUAL
62899: IFTRUE 62903
62901: GO 62999
62903: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
62904: LD_ADDR_VAR 0 2
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 4
62914: PUSH
62915: LD_INT 5
62917: PUSH
62918: LD_INT 8
62920: PUSH
62921: LD_INT 11
62923: PUSH
62924: LD_INT 12
62926: PUSH
62927: LD_INT 15
62929: PUSH
62930: LD_INT 16
62932: PUSH
62933: LD_INT 22
62935: PUSH
62936: LD_INT 23
62938: PUSH
62939: LD_INT 26
62941: PUSH
62942: LD_INT 36
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 101
62961: PUSH
62962: LD_INT 102
62964: PUSH
62965: LD_INT 105
62967: PUSH
62968: LD_INT 106
62970: PUSH
62971: LD_INT 108
62973: PUSH
62974: LD_INT 116
62976: PUSH
62977: LD_INT 117
62979: PUSH
62980: LD_INT 118
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: ST_TO_ADDR
62997: GO 65780
62999: LD_INT 5
63001: DOUBLE
63002: EQUAL
63003: IFTRUE 63007
63005: GO 63119
63007: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63008: LD_ADDR_VAR 0 2
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: LD_INT 4
63018: PUSH
63019: LD_INT 5
63021: PUSH
63022: LD_INT 6
63024: PUSH
63025: LD_INT 8
63027: PUSH
63028: LD_INT 11
63030: PUSH
63031: LD_INT 12
63033: PUSH
63034: LD_INT 15
63036: PUSH
63037: LD_INT 16
63039: PUSH
63040: LD_INT 22
63042: PUSH
63043: LD_INT 23
63045: PUSH
63046: LD_INT 25
63048: PUSH
63049: LD_INT 26
63051: PUSH
63052: LD_INT 36
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 101
63073: PUSH
63074: LD_INT 102
63076: PUSH
63077: LD_INT 105
63079: PUSH
63080: LD_INT 106
63082: PUSH
63083: LD_INT 108
63085: PUSH
63086: LD_INT 109
63088: PUSH
63089: LD_INT 112
63091: PUSH
63092: LD_INT 116
63094: PUSH
63095: LD_INT 117
63097: PUSH
63098: LD_INT 118
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: ST_TO_ADDR
63117: GO 65780
63119: LD_INT 6
63121: DOUBLE
63122: EQUAL
63123: IFTRUE 63127
63125: GO 63259
63127: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63128: LD_ADDR_VAR 0 2
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: LD_INT 4
63138: PUSH
63139: LD_INT 5
63141: PUSH
63142: LD_INT 6
63144: PUSH
63145: LD_INT 8
63147: PUSH
63148: LD_INT 11
63150: PUSH
63151: LD_INT 12
63153: PUSH
63154: LD_INT 15
63156: PUSH
63157: LD_INT 16
63159: PUSH
63160: LD_INT 20
63162: PUSH
63163: LD_INT 21
63165: PUSH
63166: LD_INT 22
63168: PUSH
63169: LD_INT 23
63171: PUSH
63172: LD_INT 25
63174: PUSH
63175: LD_INT 26
63177: PUSH
63178: LD_INT 30
63180: PUSH
63181: LD_INT 31
63183: PUSH
63184: LD_INT 32
63186: PUSH
63187: LD_INT 36
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 101
63213: PUSH
63214: LD_INT 102
63216: PUSH
63217: LD_INT 105
63219: PUSH
63220: LD_INT 106
63222: PUSH
63223: LD_INT 108
63225: PUSH
63226: LD_INT 109
63228: PUSH
63229: LD_INT 112
63231: PUSH
63232: LD_INT 116
63234: PUSH
63235: LD_INT 117
63237: PUSH
63238: LD_INT 118
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: ST_TO_ADDR
63257: GO 65780
63259: LD_INT 7
63261: DOUBLE
63262: EQUAL
63263: IFTRUE 63267
63265: GO 63379
63267: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63268: LD_ADDR_VAR 0 2
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: LD_INT 4
63278: PUSH
63279: LD_INT 5
63281: PUSH
63282: LD_INT 7
63284: PUSH
63285: LD_INT 11
63287: PUSH
63288: LD_INT 12
63290: PUSH
63291: LD_INT 15
63293: PUSH
63294: LD_INT 16
63296: PUSH
63297: LD_INT 20
63299: PUSH
63300: LD_INT 21
63302: PUSH
63303: LD_INT 22
63305: PUSH
63306: LD_INT 23
63308: PUSH
63309: LD_INT 25
63311: PUSH
63312: LD_INT 26
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 101
63333: PUSH
63334: LD_INT 102
63336: PUSH
63337: LD_INT 103
63339: PUSH
63340: LD_INT 105
63342: PUSH
63343: LD_INT 106
63345: PUSH
63346: LD_INT 108
63348: PUSH
63349: LD_INT 112
63351: PUSH
63352: LD_INT 116
63354: PUSH
63355: LD_INT 117
63357: PUSH
63358: LD_INT 118
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: ST_TO_ADDR
63377: GO 65780
63379: LD_INT 8
63381: DOUBLE
63382: EQUAL
63383: IFTRUE 63387
63385: GO 63527
63387: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63388: LD_ADDR_VAR 0 2
63392: PUSH
63393: LD_INT 2
63395: PUSH
63396: LD_INT 4
63398: PUSH
63399: LD_INT 5
63401: PUSH
63402: LD_INT 6
63404: PUSH
63405: LD_INT 7
63407: PUSH
63408: LD_INT 8
63410: PUSH
63411: LD_INT 11
63413: PUSH
63414: LD_INT 12
63416: PUSH
63417: LD_INT 15
63419: PUSH
63420: LD_INT 16
63422: PUSH
63423: LD_INT 20
63425: PUSH
63426: LD_INT 21
63428: PUSH
63429: LD_INT 22
63431: PUSH
63432: LD_INT 23
63434: PUSH
63435: LD_INT 25
63437: PUSH
63438: LD_INT 26
63440: PUSH
63441: LD_INT 30
63443: PUSH
63444: LD_INT 31
63446: PUSH
63447: LD_INT 32
63449: PUSH
63450: LD_INT 36
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 101
63477: PUSH
63478: LD_INT 102
63480: PUSH
63481: LD_INT 103
63483: PUSH
63484: LD_INT 105
63486: PUSH
63487: LD_INT 106
63489: PUSH
63490: LD_INT 108
63492: PUSH
63493: LD_INT 109
63495: PUSH
63496: LD_INT 112
63498: PUSH
63499: LD_INT 116
63501: PUSH
63502: LD_INT 117
63504: PUSH
63505: LD_INT 118
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: ST_TO_ADDR
63525: GO 65780
63527: LD_INT 9
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63535
63533: GO 63683
63535: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63536: LD_ADDR_VAR 0 2
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: LD_INT 4
63546: PUSH
63547: LD_INT 5
63549: PUSH
63550: LD_INT 6
63552: PUSH
63553: LD_INT 7
63555: PUSH
63556: LD_INT 8
63558: PUSH
63559: LD_INT 11
63561: PUSH
63562: LD_INT 12
63564: PUSH
63565: LD_INT 15
63567: PUSH
63568: LD_INT 16
63570: PUSH
63571: LD_INT 20
63573: PUSH
63574: LD_INT 21
63576: PUSH
63577: LD_INT 22
63579: PUSH
63580: LD_INT 23
63582: PUSH
63583: LD_INT 25
63585: PUSH
63586: LD_INT 26
63588: PUSH
63589: LD_INT 28
63591: PUSH
63592: LD_INT 30
63594: PUSH
63595: LD_INT 31
63597: PUSH
63598: LD_INT 32
63600: PUSH
63601: LD_INT 36
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 101
63629: PUSH
63630: LD_INT 102
63632: PUSH
63633: LD_INT 103
63635: PUSH
63636: LD_INT 105
63638: PUSH
63639: LD_INT 106
63641: PUSH
63642: LD_INT 108
63644: PUSH
63645: LD_INT 109
63647: PUSH
63648: LD_INT 112
63650: PUSH
63651: LD_INT 114
63653: PUSH
63654: LD_INT 116
63656: PUSH
63657: LD_INT 117
63659: PUSH
63660: LD_INT 118
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: ST_TO_ADDR
63681: GO 65780
63683: LD_INT 10
63685: DOUBLE
63686: EQUAL
63687: IFTRUE 63691
63689: GO 63887
63691: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63692: LD_ADDR_VAR 0 2
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: LD_INT 4
63702: PUSH
63703: LD_INT 5
63705: PUSH
63706: LD_INT 6
63708: PUSH
63709: LD_INT 7
63711: PUSH
63712: LD_INT 8
63714: PUSH
63715: LD_INT 9
63717: PUSH
63718: LD_INT 10
63720: PUSH
63721: LD_INT 11
63723: PUSH
63724: LD_INT 12
63726: PUSH
63727: LD_INT 13
63729: PUSH
63730: LD_INT 14
63732: PUSH
63733: LD_INT 15
63735: PUSH
63736: LD_INT 16
63738: PUSH
63739: LD_INT 17
63741: PUSH
63742: LD_INT 18
63744: PUSH
63745: LD_INT 19
63747: PUSH
63748: LD_INT 20
63750: PUSH
63751: LD_INT 21
63753: PUSH
63754: LD_INT 22
63756: PUSH
63757: LD_INT 23
63759: PUSH
63760: LD_INT 24
63762: PUSH
63763: LD_INT 25
63765: PUSH
63766: LD_INT 26
63768: PUSH
63769: LD_INT 28
63771: PUSH
63772: LD_INT 30
63774: PUSH
63775: LD_INT 31
63777: PUSH
63778: LD_INT 32
63780: PUSH
63781: LD_INT 36
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 101
63817: PUSH
63818: LD_INT 102
63820: PUSH
63821: LD_INT 103
63823: PUSH
63824: LD_INT 104
63826: PUSH
63827: LD_INT 105
63829: PUSH
63830: LD_INT 106
63832: PUSH
63833: LD_INT 107
63835: PUSH
63836: LD_INT 108
63838: PUSH
63839: LD_INT 109
63841: PUSH
63842: LD_INT 110
63844: PUSH
63845: LD_INT 111
63847: PUSH
63848: LD_INT 112
63850: PUSH
63851: LD_INT 114
63853: PUSH
63854: LD_INT 116
63856: PUSH
63857: LD_INT 117
63859: PUSH
63860: LD_INT 118
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: ST_TO_ADDR
63885: GO 65780
63887: LD_INT 11
63889: DOUBLE
63890: EQUAL
63891: IFTRUE 63895
63893: GO 64099
63895: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
63896: LD_ADDR_VAR 0 2
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: LD_INT 4
63909: PUSH
63910: LD_INT 5
63912: PUSH
63913: LD_INT 6
63915: PUSH
63916: LD_INT 7
63918: PUSH
63919: LD_INT 8
63921: PUSH
63922: LD_INT 9
63924: PUSH
63925: LD_INT 10
63927: PUSH
63928: LD_INT 11
63930: PUSH
63931: LD_INT 12
63933: PUSH
63934: LD_INT 13
63936: PUSH
63937: LD_INT 14
63939: PUSH
63940: LD_INT 15
63942: PUSH
63943: LD_INT 16
63945: PUSH
63946: LD_INT 17
63948: PUSH
63949: LD_INT 18
63951: PUSH
63952: LD_INT 19
63954: PUSH
63955: LD_INT 20
63957: PUSH
63958: LD_INT 21
63960: PUSH
63961: LD_INT 22
63963: PUSH
63964: LD_INT 23
63966: PUSH
63967: LD_INT 24
63969: PUSH
63970: LD_INT 25
63972: PUSH
63973: LD_INT 26
63975: PUSH
63976: LD_INT 28
63978: PUSH
63979: LD_INT 30
63981: PUSH
63982: LD_INT 31
63984: PUSH
63985: LD_INT 32
63987: PUSH
63988: LD_INT 34
63990: PUSH
63991: LD_INT 36
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 101
64029: PUSH
64030: LD_INT 102
64032: PUSH
64033: LD_INT 103
64035: PUSH
64036: LD_INT 104
64038: PUSH
64039: LD_INT 105
64041: PUSH
64042: LD_INT 106
64044: PUSH
64045: LD_INT 107
64047: PUSH
64048: LD_INT 108
64050: PUSH
64051: LD_INT 109
64053: PUSH
64054: LD_INT 110
64056: PUSH
64057: LD_INT 111
64059: PUSH
64060: LD_INT 112
64062: PUSH
64063: LD_INT 114
64065: PUSH
64066: LD_INT 116
64068: PUSH
64069: LD_INT 117
64071: PUSH
64072: LD_INT 118
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: ST_TO_ADDR
64097: GO 65780
64099: LD_INT 12
64101: DOUBLE
64102: EQUAL
64103: IFTRUE 64107
64105: GO 64327
64107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64108: LD_ADDR_VAR 0 2
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: LD_INT 4
64124: PUSH
64125: LD_INT 5
64127: PUSH
64128: LD_INT 6
64130: PUSH
64131: LD_INT 7
64133: PUSH
64134: LD_INT 8
64136: PUSH
64137: LD_INT 9
64139: PUSH
64140: LD_INT 10
64142: PUSH
64143: LD_INT 11
64145: PUSH
64146: LD_INT 12
64148: PUSH
64149: LD_INT 13
64151: PUSH
64152: LD_INT 14
64154: PUSH
64155: LD_INT 15
64157: PUSH
64158: LD_INT 16
64160: PUSH
64161: LD_INT 17
64163: PUSH
64164: LD_INT 18
64166: PUSH
64167: LD_INT 19
64169: PUSH
64170: LD_INT 20
64172: PUSH
64173: LD_INT 21
64175: PUSH
64176: LD_INT 22
64178: PUSH
64179: LD_INT 23
64181: PUSH
64182: LD_INT 24
64184: PUSH
64185: LD_INT 25
64187: PUSH
64188: LD_INT 26
64190: PUSH
64191: LD_INT 27
64193: PUSH
64194: LD_INT 28
64196: PUSH
64197: LD_INT 30
64199: PUSH
64200: LD_INT 31
64202: PUSH
64203: LD_INT 32
64205: PUSH
64206: LD_INT 33
64208: PUSH
64209: LD_INT 34
64211: PUSH
64212: LD_INT 36
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 101
64253: PUSH
64254: LD_INT 102
64256: PUSH
64257: LD_INT 103
64259: PUSH
64260: LD_INT 104
64262: PUSH
64263: LD_INT 105
64265: PUSH
64266: LD_INT 106
64268: PUSH
64269: LD_INT 107
64271: PUSH
64272: LD_INT 108
64274: PUSH
64275: LD_INT 109
64277: PUSH
64278: LD_INT 110
64280: PUSH
64281: LD_INT 111
64283: PUSH
64284: LD_INT 112
64286: PUSH
64287: LD_INT 113
64289: PUSH
64290: LD_INT 114
64292: PUSH
64293: LD_INT 116
64295: PUSH
64296: LD_INT 117
64298: PUSH
64299: LD_INT 118
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: ST_TO_ADDR
64325: GO 65780
64327: LD_INT 13
64329: DOUBLE
64330: EQUAL
64331: IFTRUE 64335
64333: GO 64543
64335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: LD_INT 4
64352: PUSH
64353: LD_INT 5
64355: PUSH
64356: LD_INT 8
64358: PUSH
64359: LD_INT 9
64361: PUSH
64362: LD_INT 10
64364: PUSH
64365: LD_INT 11
64367: PUSH
64368: LD_INT 12
64370: PUSH
64371: LD_INT 14
64373: PUSH
64374: LD_INT 15
64376: PUSH
64377: LD_INT 16
64379: PUSH
64380: LD_INT 17
64382: PUSH
64383: LD_INT 18
64385: PUSH
64386: LD_INT 19
64388: PUSH
64389: LD_INT 20
64391: PUSH
64392: LD_INT 21
64394: PUSH
64395: LD_INT 22
64397: PUSH
64398: LD_INT 23
64400: PUSH
64401: LD_INT 24
64403: PUSH
64404: LD_INT 25
64406: PUSH
64407: LD_INT 26
64409: PUSH
64410: LD_INT 27
64412: PUSH
64413: LD_INT 28
64415: PUSH
64416: LD_INT 30
64418: PUSH
64419: LD_INT 31
64421: PUSH
64422: LD_INT 32
64424: PUSH
64425: LD_INT 33
64427: PUSH
64428: LD_INT 34
64430: PUSH
64431: LD_INT 36
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 101
64469: PUSH
64470: LD_INT 102
64472: PUSH
64473: LD_INT 103
64475: PUSH
64476: LD_INT 104
64478: PUSH
64479: LD_INT 105
64481: PUSH
64482: LD_INT 106
64484: PUSH
64485: LD_INT 107
64487: PUSH
64488: LD_INT 108
64490: PUSH
64491: LD_INT 109
64493: PUSH
64494: LD_INT 110
64496: PUSH
64497: LD_INT 111
64499: PUSH
64500: LD_INT 112
64502: PUSH
64503: LD_INT 113
64505: PUSH
64506: LD_INT 114
64508: PUSH
64509: LD_INT 116
64511: PUSH
64512: LD_INT 117
64514: PUSH
64515: LD_INT 118
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: ST_TO_ADDR
64541: GO 65780
64543: LD_INT 14
64545: DOUBLE
64546: EQUAL
64547: IFTRUE 64551
64549: GO 64775
64551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64552: LD_ADDR_VAR 0 2
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: LD_INT 4
64568: PUSH
64569: LD_INT 5
64571: PUSH
64572: LD_INT 6
64574: PUSH
64575: LD_INT 7
64577: PUSH
64578: LD_INT 8
64580: PUSH
64581: LD_INT 9
64583: PUSH
64584: LD_INT 10
64586: PUSH
64587: LD_INT 11
64589: PUSH
64590: LD_INT 12
64592: PUSH
64593: LD_INT 13
64595: PUSH
64596: LD_INT 14
64598: PUSH
64599: LD_INT 15
64601: PUSH
64602: LD_INT 16
64604: PUSH
64605: LD_INT 17
64607: PUSH
64608: LD_INT 18
64610: PUSH
64611: LD_INT 19
64613: PUSH
64614: LD_INT 20
64616: PUSH
64617: LD_INT 21
64619: PUSH
64620: LD_INT 22
64622: PUSH
64623: LD_INT 23
64625: PUSH
64626: LD_INT 24
64628: PUSH
64629: LD_INT 25
64631: PUSH
64632: LD_INT 26
64634: PUSH
64635: LD_INT 27
64637: PUSH
64638: LD_INT 28
64640: PUSH
64641: LD_INT 29
64643: PUSH
64644: LD_INT 30
64646: PUSH
64647: LD_INT 31
64649: PUSH
64650: LD_INT 32
64652: PUSH
64653: LD_INT 33
64655: PUSH
64656: LD_INT 34
64658: PUSH
64659: LD_INT 36
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 101
64701: PUSH
64702: LD_INT 102
64704: PUSH
64705: LD_INT 103
64707: PUSH
64708: LD_INT 104
64710: PUSH
64711: LD_INT 105
64713: PUSH
64714: LD_INT 106
64716: PUSH
64717: LD_INT 107
64719: PUSH
64720: LD_INT 108
64722: PUSH
64723: LD_INT 109
64725: PUSH
64726: LD_INT 110
64728: PUSH
64729: LD_INT 111
64731: PUSH
64732: LD_INT 112
64734: PUSH
64735: LD_INT 113
64737: PUSH
64738: LD_INT 114
64740: PUSH
64741: LD_INT 116
64743: PUSH
64744: LD_INT 117
64746: PUSH
64747: LD_INT 118
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: ST_TO_ADDR
64773: GO 65780
64775: LD_INT 15
64777: DOUBLE
64778: EQUAL
64779: IFTRUE 64783
64781: GO 65007
64783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64784: LD_ADDR_VAR 0 2
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: LD_INT 4
64800: PUSH
64801: LD_INT 5
64803: PUSH
64804: LD_INT 6
64806: PUSH
64807: LD_INT 7
64809: PUSH
64810: LD_INT 8
64812: PUSH
64813: LD_INT 9
64815: PUSH
64816: LD_INT 10
64818: PUSH
64819: LD_INT 11
64821: PUSH
64822: LD_INT 12
64824: PUSH
64825: LD_INT 13
64827: PUSH
64828: LD_INT 14
64830: PUSH
64831: LD_INT 15
64833: PUSH
64834: LD_INT 16
64836: PUSH
64837: LD_INT 17
64839: PUSH
64840: LD_INT 18
64842: PUSH
64843: LD_INT 19
64845: PUSH
64846: LD_INT 20
64848: PUSH
64849: LD_INT 21
64851: PUSH
64852: LD_INT 22
64854: PUSH
64855: LD_INT 23
64857: PUSH
64858: LD_INT 24
64860: PUSH
64861: LD_INT 25
64863: PUSH
64864: LD_INT 26
64866: PUSH
64867: LD_INT 27
64869: PUSH
64870: LD_INT 28
64872: PUSH
64873: LD_INT 29
64875: PUSH
64876: LD_INT 30
64878: PUSH
64879: LD_INT 31
64881: PUSH
64882: LD_INT 32
64884: PUSH
64885: LD_INT 33
64887: PUSH
64888: LD_INT 34
64890: PUSH
64891: LD_INT 36
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 101
64933: PUSH
64934: LD_INT 102
64936: PUSH
64937: LD_INT 103
64939: PUSH
64940: LD_INT 104
64942: PUSH
64943: LD_INT 105
64945: PUSH
64946: LD_INT 106
64948: PUSH
64949: LD_INT 107
64951: PUSH
64952: LD_INT 108
64954: PUSH
64955: LD_INT 109
64957: PUSH
64958: LD_INT 110
64960: PUSH
64961: LD_INT 111
64963: PUSH
64964: LD_INT 112
64966: PUSH
64967: LD_INT 113
64969: PUSH
64970: LD_INT 114
64972: PUSH
64973: LD_INT 116
64975: PUSH
64976: LD_INT 117
64978: PUSH
64979: LD_INT 118
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: ST_TO_ADDR
65005: GO 65780
65007: LD_INT 16
65009: DOUBLE
65010: EQUAL
65011: IFTRUE 65015
65013: GO 65151
65015: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65016: LD_ADDR_VAR 0 2
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: LD_INT 4
65026: PUSH
65027: LD_INT 5
65029: PUSH
65030: LD_INT 7
65032: PUSH
65033: LD_INT 11
65035: PUSH
65036: LD_INT 12
65038: PUSH
65039: LD_INT 15
65041: PUSH
65042: LD_INT 16
65044: PUSH
65045: LD_INT 20
65047: PUSH
65048: LD_INT 21
65050: PUSH
65051: LD_INT 22
65053: PUSH
65054: LD_INT 23
65056: PUSH
65057: LD_INT 25
65059: PUSH
65060: LD_INT 26
65062: PUSH
65063: LD_INT 30
65065: PUSH
65066: LD_INT 31
65068: PUSH
65069: LD_INT 32
65071: PUSH
65072: LD_INT 33
65074: PUSH
65075: LD_INT 34
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 101
65101: PUSH
65102: LD_INT 102
65104: PUSH
65105: LD_INT 103
65107: PUSH
65108: LD_INT 106
65110: PUSH
65111: LD_INT 108
65113: PUSH
65114: LD_INT 112
65116: PUSH
65117: LD_INT 113
65119: PUSH
65120: LD_INT 114
65122: PUSH
65123: LD_INT 116
65125: PUSH
65126: LD_INT 117
65128: PUSH
65129: LD_INT 118
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: ST_TO_ADDR
65149: GO 65780
65151: LD_INT 17
65153: DOUBLE
65154: EQUAL
65155: IFTRUE 65159
65157: GO 65383
65159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65160: LD_ADDR_VAR 0 2
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: LD_INT 2
65170: PUSH
65171: LD_INT 3
65173: PUSH
65174: LD_INT 4
65176: PUSH
65177: LD_INT 5
65179: PUSH
65180: LD_INT 6
65182: PUSH
65183: LD_INT 7
65185: PUSH
65186: LD_INT 8
65188: PUSH
65189: LD_INT 9
65191: PUSH
65192: LD_INT 10
65194: PUSH
65195: LD_INT 11
65197: PUSH
65198: LD_INT 12
65200: PUSH
65201: LD_INT 13
65203: PUSH
65204: LD_INT 14
65206: PUSH
65207: LD_INT 15
65209: PUSH
65210: LD_INT 16
65212: PUSH
65213: LD_INT 17
65215: PUSH
65216: LD_INT 18
65218: PUSH
65219: LD_INT 19
65221: PUSH
65222: LD_INT 20
65224: PUSH
65225: LD_INT 21
65227: PUSH
65228: LD_INT 22
65230: PUSH
65231: LD_INT 23
65233: PUSH
65234: LD_INT 24
65236: PUSH
65237: LD_INT 25
65239: PUSH
65240: LD_INT 26
65242: PUSH
65243: LD_INT 27
65245: PUSH
65246: LD_INT 28
65248: PUSH
65249: LD_INT 29
65251: PUSH
65252: LD_INT 30
65254: PUSH
65255: LD_INT 31
65257: PUSH
65258: LD_INT 32
65260: PUSH
65261: LD_INT 33
65263: PUSH
65264: LD_INT 34
65266: PUSH
65267: LD_INT 36
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 101
65309: PUSH
65310: LD_INT 102
65312: PUSH
65313: LD_INT 103
65315: PUSH
65316: LD_INT 104
65318: PUSH
65319: LD_INT 105
65321: PUSH
65322: LD_INT 106
65324: PUSH
65325: LD_INT 107
65327: PUSH
65328: LD_INT 108
65330: PUSH
65331: LD_INT 109
65333: PUSH
65334: LD_INT 110
65336: PUSH
65337: LD_INT 111
65339: PUSH
65340: LD_INT 112
65342: PUSH
65343: LD_INT 113
65345: PUSH
65346: LD_INT 114
65348: PUSH
65349: LD_INT 116
65351: PUSH
65352: LD_INT 117
65354: PUSH
65355: LD_INT 118
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: ST_TO_ADDR
65381: GO 65780
65383: LD_INT 18
65385: DOUBLE
65386: EQUAL
65387: IFTRUE 65391
65389: GO 65539
65391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65392: LD_ADDR_VAR 0 2
65396: PUSH
65397: LD_INT 2
65399: PUSH
65400: LD_INT 4
65402: PUSH
65403: LD_INT 5
65405: PUSH
65406: LD_INT 7
65408: PUSH
65409: LD_INT 11
65411: PUSH
65412: LD_INT 12
65414: PUSH
65415: LD_INT 15
65417: PUSH
65418: LD_INT 16
65420: PUSH
65421: LD_INT 20
65423: PUSH
65424: LD_INT 21
65426: PUSH
65427: LD_INT 22
65429: PUSH
65430: LD_INT 23
65432: PUSH
65433: LD_INT 25
65435: PUSH
65436: LD_INT 26
65438: PUSH
65439: LD_INT 30
65441: PUSH
65442: LD_INT 31
65444: PUSH
65445: LD_INT 32
65447: PUSH
65448: LD_INT 33
65450: PUSH
65451: LD_INT 34
65453: PUSH
65454: LD_INT 35
65456: PUSH
65457: LD_INT 36
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 101
65485: PUSH
65486: LD_INT 102
65488: PUSH
65489: LD_INT 103
65491: PUSH
65492: LD_INT 106
65494: PUSH
65495: LD_INT 108
65497: PUSH
65498: LD_INT 112
65500: PUSH
65501: LD_INT 113
65503: PUSH
65504: LD_INT 114
65506: PUSH
65507: LD_INT 115
65509: PUSH
65510: LD_INT 116
65512: PUSH
65513: LD_INT 117
65515: PUSH
65516: LD_INT 118
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: ST_TO_ADDR
65537: GO 65780
65539: LD_INT 19
65541: DOUBLE
65542: EQUAL
65543: IFTRUE 65547
65545: GO 65779
65547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65548: LD_ADDR_VAR 0 2
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: LD_INT 4
65564: PUSH
65565: LD_INT 5
65567: PUSH
65568: LD_INT 6
65570: PUSH
65571: LD_INT 7
65573: PUSH
65574: LD_INT 8
65576: PUSH
65577: LD_INT 9
65579: PUSH
65580: LD_INT 10
65582: PUSH
65583: LD_INT 11
65585: PUSH
65586: LD_INT 12
65588: PUSH
65589: LD_INT 13
65591: PUSH
65592: LD_INT 14
65594: PUSH
65595: LD_INT 15
65597: PUSH
65598: LD_INT 16
65600: PUSH
65601: LD_INT 17
65603: PUSH
65604: LD_INT 18
65606: PUSH
65607: LD_INT 19
65609: PUSH
65610: LD_INT 20
65612: PUSH
65613: LD_INT 21
65615: PUSH
65616: LD_INT 22
65618: PUSH
65619: LD_INT 23
65621: PUSH
65622: LD_INT 24
65624: PUSH
65625: LD_INT 25
65627: PUSH
65628: LD_INT 26
65630: PUSH
65631: LD_INT 27
65633: PUSH
65634: LD_INT 28
65636: PUSH
65637: LD_INT 29
65639: PUSH
65640: LD_INT 30
65642: PUSH
65643: LD_INT 31
65645: PUSH
65646: LD_INT 32
65648: PUSH
65649: LD_INT 33
65651: PUSH
65652: LD_INT 34
65654: PUSH
65655: LD_INT 35
65657: PUSH
65658: LD_INT 36
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 101
65701: PUSH
65702: LD_INT 102
65704: PUSH
65705: LD_INT 103
65707: PUSH
65708: LD_INT 104
65710: PUSH
65711: LD_INT 105
65713: PUSH
65714: LD_INT 106
65716: PUSH
65717: LD_INT 107
65719: PUSH
65720: LD_INT 108
65722: PUSH
65723: LD_INT 109
65725: PUSH
65726: LD_INT 110
65728: PUSH
65729: LD_INT 111
65731: PUSH
65732: LD_INT 112
65734: PUSH
65735: LD_INT 113
65737: PUSH
65738: LD_INT 114
65740: PUSH
65741: LD_INT 115
65743: PUSH
65744: LD_INT 116
65746: PUSH
65747: LD_INT 117
65749: PUSH
65750: LD_INT 118
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: ST_TO_ADDR
65777: GO 65780
65779: POP
// end else
65780: GO 66011
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: LD_INT 5
65801: PUSH
65802: LD_INT 6
65804: PUSH
65805: LD_INT 7
65807: PUSH
65808: LD_INT 8
65810: PUSH
65811: LD_INT 9
65813: PUSH
65814: LD_INT 10
65816: PUSH
65817: LD_INT 11
65819: PUSH
65820: LD_INT 12
65822: PUSH
65823: LD_INT 13
65825: PUSH
65826: LD_INT 14
65828: PUSH
65829: LD_INT 15
65831: PUSH
65832: LD_INT 16
65834: PUSH
65835: LD_INT 17
65837: PUSH
65838: LD_INT 18
65840: PUSH
65841: LD_INT 19
65843: PUSH
65844: LD_INT 20
65846: PUSH
65847: LD_INT 21
65849: PUSH
65850: LD_INT 22
65852: PUSH
65853: LD_INT 23
65855: PUSH
65856: LD_INT 24
65858: PUSH
65859: LD_INT 25
65861: PUSH
65862: LD_INT 26
65864: PUSH
65865: LD_INT 27
65867: PUSH
65868: LD_INT 28
65870: PUSH
65871: LD_INT 29
65873: PUSH
65874: LD_INT 30
65876: PUSH
65877: LD_INT 31
65879: PUSH
65880: LD_INT 32
65882: PUSH
65883: LD_INT 33
65885: PUSH
65886: LD_INT 34
65888: PUSH
65889: LD_INT 35
65891: PUSH
65892: LD_INT 36
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 101
65935: PUSH
65936: LD_INT 102
65938: PUSH
65939: LD_INT 103
65941: PUSH
65942: LD_INT 104
65944: PUSH
65945: LD_INT 105
65947: PUSH
65948: LD_INT 106
65950: PUSH
65951: LD_INT 107
65953: PUSH
65954: LD_INT 108
65956: PUSH
65957: LD_INT 109
65959: PUSH
65960: LD_INT 110
65962: PUSH
65963: LD_INT 111
65965: PUSH
65966: LD_INT 112
65968: PUSH
65969: LD_INT 113
65971: PUSH
65972: LD_INT 114
65974: PUSH
65975: LD_INT 115
65977: PUSH
65978: LD_INT 116
65980: PUSH
65981: LD_INT 117
65983: PUSH
65984: LD_INT 118
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: ST_TO_ADDR
// if result then
66011: LD_VAR 0 2
66015: IFFALSE 66801
// begin normal :=  ;
66017: LD_ADDR_VAR 0 5
66021: PUSH
66022: LD_STRING 
66024: ST_TO_ADDR
// hardcore :=  ;
66025: LD_ADDR_VAR 0 6
66029: PUSH
66030: LD_STRING 
66032: ST_TO_ADDR
// active :=  ;
66033: LD_ADDR_VAR 0 7
66037: PUSH
66038: LD_STRING 
66040: ST_TO_ADDR
// for i = 1 to normalCounter do
66041: LD_ADDR_VAR 0 8
66045: PUSH
66046: DOUBLE
66047: LD_INT 1
66049: DEC
66050: ST_TO_ADDR
66051: LD_EXP 44
66055: PUSH
66056: FOR_TO
66057: IFFALSE 66158
// begin tmp := 0 ;
66059: LD_ADDR_VAR 0 3
66063: PUSH
66064: LD_STRING 0
66066: ST_TO_ADDR
// if result [ 1 ] then
66067: LD_VAR 0 2
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: IFFALSE 66140
// if result [ 1 ] [ 1 ] = i then
66077: LD_VAR 0 2
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PUSH
66086: LD_INT 1
66088: ARRAY
66089: PUSH
66090: LD_VAR 0 8
66094: EQUAL
66095: IFFALSE 66140
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66097: LD_ADDR_VAR 0 2
66101: PUSH
66102: LD_VAR 0 2
66106: PPUSH
66107: LD_INT 1
66109: PPUSH
66110: LD_VAR 0 2
66114: PUSH
66115: LD_INT 1
66117: ARRAY
66118: PPUSH
66119: LD_INT 1
66121: PPUSH
66122: CALL_OW 3
66126: PPUSH
66127: CALL_OW 1
66131: ST_TO_ADDR
// tmp := 1 ;
66132: LD_ADDR_VAR 0 3
66136: PUSH
66137: LD_STRING 1
66139: ST_TO_ADDR
// end ; normal := normal & tmp ;
66140: LD_ADDR_VAR 0 5
66144: PUSH
66145: LD_VAR 0 5
66149: PUSH
66150: LD_VAR 0 3
66154: STR
66155: ST_TO_ADDR
// end ;
66156: GO 66056
66158: POP
66159: POP
// for i = 1 to hardcoreCounter do
66160: LD_ADDR_VAR 0 8
66164: PUSH
66165: DOUBLE
66166: LD_INT 1
66168: DEC
66169: ST_TO_ADDR
66170: LD_EXP 45
66174: PUSH
66175: FOR_TO
66176: IFFALSE 66281
// begin tmp := 0 ;
66178: LD_ADDR_VAR 0 3
66182: PUSH
66183: LD_STRING 0
66185: ST_TO_ADDR
// if result [ 2 ] then
66186: LD_VAR 0 2
66190: PUSH
66191: LD_INT 2
66193: ARRAY
66194: IFFALSE 66263
// if result [ 2 ] [ 1 ] = 100 + i then
66196: LD_VAR 0 2
66200: PUSH
66201: LD_INT 2
66203: ARRAY
66204: PUSH
66205: LD_INT 1
66207: ARRAY
66208: PUSH
66209: LD_INT 100
66211: PUSH
66212: LD_VAR 0 8
66216: PLUS
66217: EQUAL
66218: IFFALSE 66263
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66220: LD_ADDR_VAR 0 2
66224: PUSH
66225: LD_VAR 0 2
66229: PPUSH
66230: LD_INT 2
66232: PPUSH
66233: LD_VAR 0 2
66237: PUSH
66238: LD_INT 2
66240: ARRAY
66241: PPUSH
66242: LD_INT 1
66244: PPUSH
66245: CALL_OW 3
66249: PPUSH
66250: CALL_OW 1
66254: ST_TO_ADDR
// tmp := 1 ;
66255: LD_ADDR_VAR 0 3
66259: PUSH
66260: LD_STRING 1
66262: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66263: LD_ADDR_VAR 0 6
66267: PUSH
66268: LD_VAR 0 6
66272: PUSH
66273: LD_VAR 0 3
66277: STR
66278: ST_TO_ADDR
// end ;
66279: GO 66175
66281: POP
66282: POP
// if isGameLoad then
66283: LD_VAR 0 1
66287: IFFALSE 66762
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66289: LD_ADDR_VAR 0 4
66293: PUSH
66294: LD_EXP 48
66298: PUSH
66299: LD_EXP 47
66303: PUSH
66304: LD_EXP 49
66308: PUSH
66309: LD_EXP 46
66313: PUSH
66314: LD_EXP 50
66318: PUSH
66319: LD_EXP 51
66323: PUSH
66324: LD_EXP 52
66328: PUSH
66329: LD_EXP 53
66333: PUSH
66334: LD_EXP 54
66338: PUSH
66339: LD_EXP 55
66343: PUSH
66344: LD_EXP 56
66348: PUSH
66349: LD_EXP 57
66353: PUSH
66354: LD_EXP 58
66358: PUSH
66359: LD_EXP 59
66363: PUSH
66364: LD_EXP 67
66368: PUSH
66369: LD_EXP 68
66373: PUSH
66374: LD_EXP 69
66378: PUSH
66379: LD_EXP 70
66383: PUSH
66384: LD_EXP 72
66388: PUSH
66389: LD_EXP 73
66393: PUSH
66394: LD_EXP 74
66398: PUSH
66399: LD_EXP 77
66403: PUSH
66404: LD_EXP 79
66408: PUSH
66409: LD_EXP 80
66413: PUSH
66414: LD_EXP 81
66418: PUSH
66419: LD_EXP 83
66423: PUSH
66424: LD_EXP 84
66428: PUSH
66429: LD_EXP 87
66433: PUSH
66434: LD_EXP 88
66438: PUSH
66439: LD_EXP 89
66443: PUSH
66444: LD_EXP 90
66448: PUSH
66449: LD_EXP 91
66453: PUSH
66454: LD_EXP 92
66458: PUSH
66459: LD_EXP 93
66463: PUSH
66464: LD_EXP 94
66468: PUSH
66469: LD_EXP 95
66473: PUSH
66474: LD_EXP 60
66478: PUSH
66479: LD_EXP 61
66483: PUSH
66484: LD_EXP 64
66488: PUSH
66489: LD_EXP 65
66493: PUSH
66494: LD_EXP 66
66498: PUSH
66499: LD_EXP 62
66503: PUSH
66504: LD_EXP 63
66508: PUSH
66509: LD_EXP 71
66513: PUSH
66514: LD_EXP 75
66518: PUSH
66519: LD_EXP 76
66523: PUSH
66524: LD_EXP 78
66528: PUSH
66529: LD_EXP 82
66533: PUSH
66534: LD_EXP 85
66538: PUSH
66539: LD_EXP 86
66543: PUSH
66544: LD_EXP 96
66548: PUSH
66549: LD_EXP 97
66553: PUSH
66554: LD_EXP 98
66558: PUSH
66559: LD_EXP 99
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: ST_TO_ADDR
// tmp :=  ;
66620: LD_ADDR_VAR 0 3
66624: PUSH
66625: LD_STRING 
66627: ST_TO_ADDR
// for i = 1 to normalCounter do
66628: LD_ADDR_VAR 0 8
66632: PUSH
66633: DOUBLE
66634: LD_INT 1
66636: DEC
66637: ST_TO_ADDR
66638: LD_EXP 44
66642: PUSH
66643: FOR_TO
66644: IFFALSE 66680
// begin if flags [ i ] then
66646: LD_VAR 0 4
66650: PUSH
66651: LD_VAR 0 8
66655: ARRAY
66656: IFFALSE 66678
// tmp := tmp & i & ; ;
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: LD_VAR 0 3
66667: PUSH
66668: LD_VAR 0 8
66672: STR
66673: PUSH
66674: LD_STRING ;
66676: STR
66677: ST_TO_ADDR
// end ;
66678: GO 66643
66680: POP
66681: POP
// for i = 1 to hardcoreCounter do
66682: LD_ADDR_VAR 0 8
66686: PUSH
66687: DOUBLE
66688: LD_INT 1
66690: DEC
66691: ST_TO_ADDR
66692: LD_EXP 45
66696: PUSH
66697: FOR_TO
66698: IFFALSE 66744
// begin if flags [ normalCounter + i ] then
66700: LD_VAR 0 4
66704: PUSH
66705: LD_EXP 44
66709: PUSH
66710: LD_VAR 0 8
66714: PLUS
66715: ARRAY
66716: IFFALSE 66742
// tmp := tmp & ( 100 + i ) & ; ;
66718: LD_ADDR_VAR 0 3
66722: PUSH
66723: LD_VAR 0 3
66727: PUSH
66728: LD_INT 100
66730: PUSH
66731: LD_VAR 0 8
66735: PLUS
66736: STR
66737: PUSH
66738: LD_STRING ;
66740: STR
66741: ST_TO_ADDR
// end ;
66742: GO 66697
66744: POP
66745: POP
// if tmp then
66746: LD_VAR 0 3
66750: IFFALSE 66762
// active := tmp ;
66752: LD_ADDR_VAR 0 7
66756: PUSH
66757: LD_VAR 0 3
66761: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66762: LD_STRING getStreamItemsFromMission("
66764: PUSH
66765: LD_VAR 0 5
66769: STR
66770: PUSH
66771: LD_STRING ","
66773: STR
66774: PUSH
66775: LD_VAR 0 6
66779: STR
66780: PUSH
66781: LD_STRING ","
66783: STR
66784: PUSH
66785: LD_VAR 0 7
66789: STR
66790: PUSH
66791: LD_STRING ")
66793: STR
66794: PPUSH
66795: CALL_OW 559
// end else
66799: GO 66808
// ToLua ( getStreamItemsFromMission("","","") ) ;
66801: LD_STRING getStreamItemsFromMission("","","")
66803: PPUSH
66804: CALL_OW 559
// end ;
66808: LD_VAR 0 2
66812: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66813: LD_EXP 43
66817: PUSH
66818: LD_EXP 48
66822: AND
66823: IFFALSE 66947
66825: GO 66827
66827: DISABLE
66828: LD_INT 0
66830: PPUSH
66831: PPUSH
// begin enable ;
66832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66833: LD_ADDR_VAR 0 2
66837: PUSH
66838: LD_INT 22
66840: PUSH
66841: LD_OWVAR 2
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: LD_INT 34
66855: PUSH
66856: LD_INT 7
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 34
66865: PUSH
66866: LD_INT 45
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 34
66875: PUSH
66876: LD_INT 28
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 34
66885: PUSH
66886: LD_INT 47
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PPUSH
66904: CALL_OW 69
66908: ST_TO_ADDR
// if not tmp then
66909: LD_VAR 0 2
66913: NOT
66914: IFFALSE 66918
// exit ;
66916: GO 66947
// for i in tmp do
66918: LD_ADDR_VAR 0 1
66922: PUSH
66923: LD_VAR 0 2
66927: PUSH
66928: FOR_IN
66929: IFFALSE 66945
// begin SetLives ( i , 0 ) ;
66931: LD_VAR 0 1
66935: PPUSH
66936: LD_INT 0
66938: PPUSH
66939: CALL_OW 234
// end ;
66943: GO 66928
66945: POP
66946: POP
// end ;
66947: PPOPN 2
66949: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66950: LD_EXP 43
66954: PUSH
66955: LD_EXP 49
66959: AND
66960: IFFALSE 67044
66962: GO 66964
66964: DISABLE
66965: LD_INT 0
66967: PPUSH
66968: PPUSH
// begin enable ;
66969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66970: LD_ADDR_VAR 0 2
66974: PUSH
66975: LD_INT 22
66977: PUSH
66978: LD_OWVAR 2
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 32
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PPUSH
67001: CALL_OW 69
67005: ST_TO_ADDR
// if not tmp then
67006: LD_VAR 0 2
67010: NOT
67011: IFFALSE 67015
// exit ;
67013: GO 67044
// for i in tmp do
67015: LD_ADDR_VAR 0 1
67019: PUSH
67020: LD_VAR 0 2
67024: PUSH
67025: FOR_IN
67026: IFFALSE 67042
// begin SetLives ( i , 0 ) ;
67028: LD_VAR 0 1
67032: PPUSH
67033: LD_INT 0
67035: PPUSH
67036: CALL_OW 234
// end ;
67040: GO 67025
67042: POP
67043: POP
// end ;
67044: PPOPN 2
67046: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67047: LD_EXP 43
67051: PUSH
67052: LD_EXP 46
67056: AND
67057: IFFALSE 67150
67059: GO 67061
67061: DISABLE
67062: LD_INT 0
67064: PPUSH
// begin enable ;
67065: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67066: LD_ADDR_VAR 0 1
67070: PUSH
67071: LD_INT 22
67073: PUSH
67074: LD_OWVAR 2
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: LD_INT 25
67088: PUSH
67089: LD_INT 5
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 25
67098: PUSH
67099: LD_INT 9
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 25
67108: PUSH
67109: LD_INT 8
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PPUSH
67126: CALL_OW 69
67130: PUSH
67131: FOR_IN
67132: IFFALSE 67148
// begin SetClass ( i , 1 ) ;
67134: LD_VAR 0 1
67138: PPUSH
67139: LD_INT 1
67141: PPUSH
67142: CALL_OW 336
// end ;
67146: GO 67131
67148: POP
67149: POP
// end ;
67150: PPOPN 1
67152: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67153: LD_EXP 43
67157: PUSH
67158: LD_EXP 47
67162: AND
67163: PUSH
67164: LD_OWVAR 65
67168: PUSH
67169: LD_INT 7
67171: LESS
67172: AND
67173: IFFALSE 67187
67175: GO 67177
67177: DISABLE
// begin enable ;
67178: ENABLE
// game_speed := 7 ;
67179: LD_ADDR_OWVAR 65
67183: PUSH
67184: LD_INT 7
67186: ST_TO_ADDR
// end ;
67187: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67188: LD_EXP 43
67192: PUSH
67193: LD_EXP 50
67197: AND
67198: IFFALSE 67400
67200: GO 67202
67202: DISABLE
67203: LD_INT 0
67205: PPUSH
67206: PPUSH
67207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67208: LD_ADDR_VAR 0 3
67212: PUSH
67213: LD_INT 81
67215: PUSH
67216: LD_OWVAR 2
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 21
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PPUSH
67239: CALL_OW 69
67243: ST_TO_ADDR
// if not tmp then
67244: LD_VAR 0 3
67248: NOT
67249: IFFALSE 67253
// exit ;
67251: GO 67400
// if tmp > 5 then
67253: LD_VAR 0 3
67257: PUSH
67258: LD_INT 5
67260: GREATER
67261: IFFALSE 67273
// k := 5 else
67263: LD_ADDR_VAR 0 2
67267: PUSH
67268: LD_INT 5
67270: ST_TO_ADDR
67271: GO 67283
// k := tmp ;
67273: LD_ADDR_VAR 0 2
67277: PUSH
67278: LD_VAR 0 3
67282: ST_TO_ADDR
// for i := 1 to k do
67283: LD_ADDR_VAR 0 1
67287: PUSH
67288: DOUBLE
67289: LD_INT 1
67291: DEC
67292: ST_TO_ADDR
67293: LD_VAR 0 2
67297: PUSH
67298: FOR_TO
67299: IFFALSE 67398
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67301: LD_VAR 0 3
67305: PUSH
67306: LD_VAR 0 1
67310: ARRAY
67311: PPUSH
67312: LD_VAR 0 1
67316: PUSH
67317: LD_INT 4
67319: MOD
67320: PUSH
67321: LD_INT 1
67323: PLUS
67324: PPUSH
67325: CALL_OW 259
67329: PUSH
67330: LD_INT 10
67332: LESS
67333: IFFALSE 67396
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67335: LD_VAR 0 3
67339: PUSH
67340: LD_VAR 0 1
67344: ARRAY
67345: PPUSH
67346: LD_VAR 0 1
67350: PUSH
67351: LD_INT 4
67353: MOD
67354: PUSH
67355: LD_INT 1
67357: PLUS
67358: PPUSH
67359: LD_VAR 0 3
67363: PUSH
67364: LD_VAR 0 1
67368: ARRAY
67369: PPUSH
67370: LD_VAR 0 1
67374: PUSH
67375: LD_INT 4
67377: MOD
67378: PUSH
67379: LD_INT 1
67381: PLUS
67382: PPUSH
67383: CALL_OW 259
67387: PUSH
67388: LD_INT 1
67390: PLUS
67391: PPUSH
67392: CALL_OW 237
67396: GO 67298
67398: POP
67399: POP
// end ;
67400: PPOPN 3
67402: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67403: LD_EXP 43
67407: PUSH
67408: LD_EXP 51
67412: AND
67413: IFFALSE 67433
67415: GO 67417
67417: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67418: LD_INT 4
67420: PPUSH
67421: LD_OWVAR 2
67425: PPUSH
67426: LD_INT 0
67428: PPUSH
67429: CALL_OW 324
67433: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67434: LD_EXP 43
67438: PUSH
67439: LD_EXP 80
67443: AND
67444: IFFALSE 67464
67446: GO 67448
67448: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67449: LD_INT 19
67451: PPUSH
67452: LD_OWVAR 2
67456: PPUSH
67457: LD_INT 0
67459: PPUSH
67460: CALL_OW 324
67464: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67465: LD_EXP 43
67469: PUSH
67470: LD_EXP 52
67474: AND
67475: IFFALSE 67577
67477: GO 67479
67479: DISABLE
67480: LD_INT 0
67482: PPUSH
67483: PPUSH
// begin enable ;
67484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67485: LD_ADDR_VAR 0 2
67489: PUSH
67490: LD_INT 22
67492: PUSH
67493: LD_OWVAR 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 34
67507: PUSH
67508: LD_INT 11
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 34
67517: PUSH
67518: LD_INT 30
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PPUSH
67534: CALL_OW 69
67538: ST_TO_ADDR
// if not tmp then
67539: LD_VAR 0 2
67543: NOT
67544: IFFALSE 67548
// exit ;
67546: GO 67577
// for i in tmp do
67548: LD_ADDR_VAR 0 1
67552: PUSH
67553: LD_VAR 0 2
67557: PUSH
67558: FOR_IN
67559: IFFALSE 67575
// begin SetLives ( i , 0 ) ;
67561: LD_VAR 0 1
67565: PPUSH
67566: LD_INT 0
67568: PPUSH
67569: CALL_OW 234
// end ;
67573: GO 67558
67575: POP
67576: POP
// end ;
67577: PPOPN 2
67579: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67580: LD_EXP 43
67584: PUSH
67585: LD_EXP 53
67589: AND
67590: IFFALSE 67610
67592: GO 67594
67594: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67595: LD_INT 32
67597: PPUSH
67598: LD_OWVAR 2
67602: PPUSH
67603: LD_INT 0
67605: PPUSH
67606: CALL_OW 324
67610: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67611: LD_EXP 43
67615: PUSH
67616: LD_EXP 54
67620: AND
67621: IFFALSE 67802
67623: GO 67625
67625: DISABLE
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
67630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67631: LD_ADDR_VAR 0 2
67635: PUSH
67636: LD_INT 22
67638: PUSH
67639: LD_OWVAR 2
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 33
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PPUSH
67662: CALL_OW 69
67666: ST_TO_ADDR
// if not tmp then
67667: LD_VAR 0 2
67671: NOT
67672: IFFALSE 67676
// exit ;
67674: GO 67802
// side := 0 ;
67676: LD_ADDR_VAR 0 3
67680: PUSH
67681: LD_INT 0
67683: ST_TO_ADDR
// for i := 1 to 8 do
67684: LD_ADDR_VAR 0 1
67688: PUSH
67689: DOUBLE
67690: LD_INT 1
67692: DEC
67693: ST_TO_ADDR
67694: LD_INT 8
67696: PUSH
67697: FOR_TO
67698: IFFALSE 67746
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67700: LD_OWVAR 2
67704: PUSH
67705: LD_VAR 0 1
67709: NONEQUAL
67710: PUSH
67711: LD_OWVAR 2
67715: PPUSH
67716: LD_VAR 0 1
67720: PPUSH
67721: CALL_OW 81
67725: PUSH
67726: LD_INT 2
67728: EQUAL
67729: AND
67730: IFFALSE 67744
// begin side := i ;
67732: LD_ADDR_VAR 0 3
67736: PUSH
67737: LD_VAR 0 1
67741: ST_TO_ADDR
// break ;
67742: GO 67746
// end ;
67744: GO 67697
67746: POP
67747: POP
// if not side then
67748: LD_VAR 0 3
67752: NOT
67753: IFFALSE 67757
// exit ;
67755: GO 67802
// for i := 1 to tmp do
67757: LD_ADDR_VAR 0 1
67761: PUSH
67762: DOUBLE
67763: LD_INT 1
67765: DEC
67766: ST_TO_ADDR
67767: LD_VAR 0 2
67771: PUSH
67772: FOR_TO
67773: IFFALSE 67800
// if Prob ( 60 ) then
67775: LD_INT 60
67777: PPUSH
67778: CALL_OW 13
67782: IFFALSE 67798
// SetSide ( i , side ) ;
67784: LD_VAR 0 1
67788: PPUSH
67789: LD_VAR 0 3
67793: PPUSH
67794: CALL_OW 235
67798: GO 67772
67800: POP
67801: POP
// end ;
67802: PPOPN 3
67804: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67805: LD_EXP 43
67809: PUSH
67810: LD_EXP 56
67814: AND
67815: IFFALSE 67934
67817: GO 67819
67819: DISABLE
67820: LD_INT 0
67822: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67823: LD_ADDR_VAR 0 1
67827: PUSH
67828: LD_INT 22
67830: PUSH
67831: LD_OWVAR 2
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 21
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: LD_INT 23
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: PPUSH
67872: CALL_OW 69
67876: PUSH
67877: FOR_IN
67878: IFFALSE 67932
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
67880: LD_VAR 0 1
67884: PPUSH
67885: CALL_OW 257
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: LD_INT 4
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: IN
67908: IFFALSE 67930
// SetClass ( un , rand ( 1 , 4 ) ) ;
67910: LD_VAR 0 1
67914: PPUSH
67915: LD_INT 1
67917: PPUSH
67918: LD_INT 4
67920: PPUSH
67921: CALL_OW 12
67925: PPUSH
67926: CALL_OW 336
67930: GO 67877
67932: POP
67933: POP
// end ;
67934: PPOPN 1
67936: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67937: LD_EXP 43
67941: PUSH
67942: LD_EXP 55
67946: AND
67947: IFFALSE 68026
67949: GO 67951
67951: DISABLE
67952: LD_INT 0
67954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67955: LD_ADDR_VAR 0 1
67959: PUSH
67960: LD_INT 22
67962: PUSH
67963: LD_OWVAR 2
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 21
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PPUSH
67986: CALL_OW 69
67990: ST_TO_ADDR
// if not tmp then
67991: LD_VAR 0 1
67995: NOT
67996: IFFALSE 68000
// exit ;
67998: GO 68026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68000: LD_VAR 0 1
68004: PUSH
68005: LD_INT 1
68007: PPUSH
68008: LD_VAR 0 1
68012: PPUSH
68013: CALL_OW 12
68017: ARRAY
68018: PPUSH
68019: LD_INT 100
68021: PPUSH
68022: CALL_OW 234
// end ;
68026: PPOPN 1
68028: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68029: LD_EXP 43
68033: PUSH
68034: LD_EXP 57
68038: AND
68039: IFFALSE 68137
68041: GO 68043
68043: DISABLE
68044: LD_INT 0
68046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68047: LD_ADDR_VAR 0 1
68051: PUSH
68052: LD_INT 22
68054: PUSH
68055: LD_OWVAR 2
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 21
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PPUSH
68078: CALL_OW 69
68082: ST_TO_ADDR
// if not tmp then
68083: LD_VAR 0 1
68087: NOT
68088: IFFALSE 68092
// exit ;
68090: GO 68137
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68092: LD_VAR 0 1
68096: PUSH
68097: LD_INT 1
68099: PPUSH
68100: LD_VAR 0 1
68104: PPUSH
68105: CALL_OW 12
68109: ARRAY
68110: PPUSH
68111: LD_INT 1
68113: PPUSH
68114: LD_INT 4
68116: PPUSH
68117: CALL_OW 12
68121: PPUSH
68122: LD_INT 3000
68124: PPUSH
68125: LD_INT 9000
68127: PPUSH
68128: CALL_OW 12
68132: PPUSH
68133: CALL_OW 492
// end ;
68137: PPOPN 1
68139: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68140: LD_EXP 43
68144: PUSH
68145: LD_EXP 58
68149: AND
68150: IFFALSE 68170
68152: GO 68154
68154: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68155: LD_INT 1
68157: PPUSH
68158: LD_OWVAR 2
68162: PPUSH
68163: LD_INT 0
68165: PPUSH
68166: CALL_OW 324
68170: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68171: LD_EXP 43
68175: PUSH
68176: LD_EXP 59
68180: AND
68181: IFFALSE 68264
68183: GO 68185
68185: DISABLE
68186: LD_INT 0
68188: PPUSH
68189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68190: LD_ADDR_VAR 0 2
68194: PUSH
68195: LD_INT 22
68197: PUSH
68198: LD_OWVAR 2
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 21
68209: PUSH
68210: LD_INT 3
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PPUSH
68221: CALL_OW 69
68225: ST_TO_ADDR
// if not tmp then
68226: LD_VAR 0 2
68230: NOT
68231: IFFALSE 68235
// exit ;
68233: GO 68264
// for i in tmp do
68235: LD_ADDR_VAR 0 1
68239: PUSH
68240: LD_VAR 0 2
68244: PUSH
68245: FOR_IN
68246: IFFALSE 68262
// SetBLevel ( i , 10 ) ;
68248: LD_VAR 0 1
68252: PPUSH
68253: LD_INT 10
68255: PPUSH
68256: CALL_OW 241
68260: GO 68245
68262: POP
68263: POP
// end ;
68264: PPOPN 2
68266: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68267: LD_EXP 43
68271: PUSH
68272: LD_EXP 60
68276: AND
68277: IFFALSE 68388
68279: GO 68281
68281: DISABLE
68282: LD_INT 0
68284: PPUSH
68285: PPUSH
68286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68287: LD_ADDR_VAR 0 3
68291: PUSH
68292: LD_INT 22
68294: PUSH
68295: LD_OWVAR 2
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 25
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PPUSH
68318: CALL_OW 69
68322: ST_TO_ADDR
// if not tmp then
68323: LD_VAR 0 3
68327: NOT
68328: IFFALSE 68332
// exit ;
68330: GO 68388
// un := tmp [ rand ( 1 , tmp ) ] ;
68332: LD_ADDR_VAR 0 2
68336: PUSH
68337: LD_VAR 0 3
68341: PUSH
68342: LD_INT 1
68344: PPUSH
68345: LD_VAR 0 3
68349: PPUSH
68350: CALL_OW 12
68354: ARRAY
68355: ST_TO_ADDR
// if Crawls ( un ) then
68356: LD_VAR 0 2
68360: PPUSH
68361: CALL_OW 318
68365: IFFALSE 68376
// ComWalk ( un ) ;
68367: LD_VAR 0 2
68371: PPUSH
68372: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68376: LD_VAR 0 2
68380: PPUSH
68381: LD_INT 5
68383: PPUSH
68384: CALL_OW 336
// end ;
68388: PPOPN 3
68390: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68391: LD_EXP 43
68395: PUSH
68396: LD_EXP 61
68400: AND
68401: PUSH
68402: LD_OWVAR 67
68406: PUSH
68407: LD_INT 4
68409: LESS
68410: AND
68411: IFFALSE 68430
68413: GO 68415
68415: DISABLE
// begin Difficulty := Difficulty + 1 ;
68416: LD_ADDR_OWVAR 67
68420: PUSH
68421: LD_OWVAR 67
68425: PUSH
68426: LD_INT 1
68428: PLUS
68429: ST_TO_ADDR
// end ;
68430: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68431: LD_EXP 43
68435: PUSH
68436: LD_EXP 62
68440: AND
68441: IFFALSE 68544
68443: GO 68445
68445: DISABLE
68446: LD_INT 0
68448: PPUSH
// begin for i := 1 to 5 do
68449: LD_ADDR_VAR 0 1
68453: PUSH
68454: DOUBLE
68455: LD_INT 1
68457: DEC
68458: ST_TO_ADDR
68459: LD_INT 5
68461: PUSH
68462: FOR_TO
68463: IFFALSE 68542
// begin uc_nation := nation_nature ;
68465: LD_ADDR_OWVAR 21
68469: PUSH
68470: LD_INT 0
68472: ST_TO_ADDR
// uc_side := 0 ;
68473: LD_ADDR_OWVAR 20
68477: PUSH
68478: LD_INT 0
68480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68481: LD_ADDR_OWVAR 29
68485: PUSH
68486: LD_INT 12
68488: PUSH
68489: LD_INT 12
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: ST_TO_ADDR
// hc_agressivity := 20 ;
68496: LD_ADDR_OWVAR 35
68500: PUSH
68501: LD_INT 20
68503: ST_TO_ADDR
// hc_class := class_tiger ;
68504: LD_ADDR_OWVAR 28
68508: PUSH
68509: LD_INT 14
68511: ST_TO_ADDR
// hc_gallery :=  ;
68512: LD_ADDR_OWVAR 33
68516: PUSH
68517: LD_STRING 
68519: ST_TO_ADDR
// hc_name :=  ;
68520: LD_ADDR_OWVAR 26
68524: PUSH
68525: LD_STRING 
68527: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68528: CALL_OW 44
68532: PPUSH
68533: LD_INT 0
68535: PPUSH
68536: CALL_OW 51
// end ;
68540: GO 68462
68542: POP
68543: POP
// end ;
68544: PPOPN 1
68546: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68547: LD_EXP 43
68551: PUSH
68552: LD_EXP 63
68556: AND
68557: IFFALSE 68566
68559: GO 68561
68561: DISABLE
// StreamSibBomb ;
68562: CALL 68567 0 0
68566: END
// export function StreamSibBomb ; var i , x , y ; begin
68567: LD_INT 0
68569: PPUSH
68570: PPUSH
68571: PPUSH
68572: PPUSH
// result := false ;
68573: LD_ADDR_VAR 0 1
68577: PUSH
68578: LD_INT 0
68580: ST_TO_ADDR
// for i := 1 to 16 do
68581: LD_ADDR_VAR 0 2
68585: PUSH
68586: DOUBLE
68587: LD_INT 1
68589: DEC
68590: ST_TO_ADDR
68591: LD_INT 16
68593: PUSH
68594: FOR_TO
68595: IFFALSE 68794
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68597: LD_ADDR_VAR 0 3
68601: PUSH
68602: LD_INT 10
68604: PUSH
68605: LD_INT 20
68607: PUSH
68608: LD_INT 30
68610: PUSH
68611: LD_INT 40
68613: PUSH
68614: LD_INT 50
68616: PUSH
68617: LD_INT 60
68619: PUSH
68620: LD_INT 70
68622: PUSH
68623: LD_INT 80
68625: PUSH
68626: LD_INT 90
68628: PUSH
68629: LD_INT 100
68631: PUSH
68632: LD_INT 110
68634: PUSH
68635: LD_INT 120
68637: PUSH
68638: LD_INT 130
68640: PUSH
68641: LD_INT 140
68643: PUSH
68644: LD_INT 150
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: PPUSH
68667: LD_INT 15
68669: PPUSH
68670: CALL_OW 12
68674: ARRAY
68675: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68676: LD_ADDR_VAR 0 4
68680: PUSH
68681: LD_INT 10
68683: PUSH
68684: LD_INT 20
68686: PUSH
68687: LD_INT 30
68689: PUSH
68690: LD_INT 40
68692: PUSH
68693: LD_INT 50
68695: PUSH
68696: LD_INT 60
68698: PUSH
68699: LD_INT 70
68701: PUSH
68702: LD_INT 80
68704: PUSH
68705: LD_INT 90
68707: PUSH
68708: LD_INT 100
68710: PUSH
68711: LD_INT 110
68713: PUSH
68714: LD_INT 120
68716: PUSH
68717: LD_INT 130
68719: PUSH
68720: LD_INT 140
68722: PUSH
68723: LD_INT 150
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: PPUSH
68746: LD_INT 15
68748: PPUSH
68749: CALL_OW 12
68753: ARRAY
68754: ST_TO_ADDR
// if ValidHex ( x , y ) then
68755: LD_VAR 0 3
68759: PPUSH
68760: LD_VAR 0 4
68764: PPUSH
68765: CALL_OW 488
68769: IFFALSE 68792
// begin result := [ x , y ] ;
68771: LD_ADDR_VAR 0 1
68775: PUSH
68776: LD_VAR 0 3
68780: PUSH
68781: LD_VAR 0 4
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: ST_TO_ADDR
// break ;
68790: GO 68794
// end ; end ;
68792: GO 68594
68794: POP
68795: POP
// if result then
68796: LD_VAR 0 1
68800: IFFALSE 68860
// begin ToLua ( playSibBomb() ) ;
68802: LD_STRING playSibBomb()
68804: PPUSH
68805: CALL_OW 559
// wait ( 0 0$14 ) ;
68809: LD_INT 490
68811: PPUSH
68812: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68816: LD_VAR 0 1
68820: PUSH
68821: LD_INT 1
68823: ARRAY
68824: PPUSH
68825: LD_VAR 0 1
68829: PUSH
68830: LD_INT 2
68832: ARRAY
68833: PPUSH
68834: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68838: LD_VAR 0 1
68842: PUSH
68843: LD_INT 1
68845: ARRAY
68846: PPUSH
68847: LD_VAR 0 1
68851: PUSH
68852: LD_INT 2
68854: ARRAY
68855: PPUSH
68856: CALL_OW 429
// end ; end ;
68860: LD_VAR 0 1
68864: RET
// every 0 0$1 trigger StreamModeActive and sReset do
68865: LD_EXP 43
68869: PUSH
68870: LD_EXP 65
68874: AND
68875: IFFALSE 68887
68877: GO 68879
68879: DISABLE
// YouLost (  ) ;
68880: LD_STRING 
68882: PPUSH
68883: CALL_OW 104
68887: END
// every 0 0$1 trigger StreamModeActive and sFog do
68888: LD_EXP 43
68892: PUSH
68893: LD_EXP 64
68897: AND
68898: IFFALSE 68912
68900: GO 68902
68902: DISABLE
// FogOff ( your_side ) ;
68903: LD_OWVAR 2
68907: PPUSH
68908: CALL_OW 344
68912: END
// every 0 0$1 trigger StreamModeActive and sSun do
68913: LD_EXP 43
68917: PUSH
68918: LD_EXP 66
68922: AND
68923: IFFALSE 68951
68925: GO 68927
68927: DISABLE
// begin solar_recharge_percent := 0 ;
68928: LD_ADDR_OWVAR 79
68932: PUSH
68933: LD_INT 0
68935: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68936: LD_INT 10500
68938: PPUSH
68939: CALL_OW 67
// solar_recharge_percent := 100 ;
68943: LD_ADDR_OWVAR 79
68947: PUSH
68948: LD_INT 100
68950: ST_TO_ADDR
// end ;
68951: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68952: LD_EXP 43
68956: PUSH
68957: LD_EXP 67
68961: AND
68962: IFFALSE 69201
68964: GO 68966
68966: DISABLE
68967: LD_INT 0
68969: PPUSH
68970: PPUSH
68971: PPUSH
// begin tmp := [ ] ;
68972: LD_ADDR_VAR 0 3
68976: PUSH
68977: EMPTY
68978: ST_TO_ADDR
// for i := 1 to 6 do
68979: LD_ADDR_VAR 0 1
68983: PUSH
68984: DOUBLE
68985: LD_INT 1
68987: DEC
68988: ST_TO_ADDR
68989: LD_INT 6
68991: PUSH
68992: FOR_TO
68993: IFFALSE 69098
// begin uc_nation := nation_nature ;
68995: LD_ADDR_OWVAR 21
68999: PUSH
69000: LD_INT 0
69002: ST_TO_ADDR
// uc_side := 0 ;
69003: LD_ADDR_OWVAR 20
69007: PUSH
69008: LD_INT 0
69010: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69011: LD_ADDR_OWVAR 29
69015: PUSH
69016: LD_INT 12
69018: PUSH
69019: LD_INT 12
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: ST_TO_ADDR
// hc_agressivity := 20 ;
69026: LD_ADDR_OWVAR 35
69030: PUSH
69031: LD_INT 20
69033: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69034: LD_ADDR_OWVAR 28
69038: PUSH
69039: LD_INT 17
69041: ST_TO_ADDR
// hc_gallery :=  ;
69042: LD_ADDR_OWVAR 33
69046: PUSH
69047: LD_STRING 
69049: ST_TO_ADDR
// hc_name :=  ;
69050: LD_ADDR_OWVAR 26
69054: PUSH
69055: LD_STRING 
69057: ST_TO_ADDR
// un := CreateHuman ;
69058: LD_ADDR_VAR 0 2
69062: PUSH
69063: CALL_OW 44
69067: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69068: LD_VAR 0 2
69072: PPUSH
69073: LD_INT 1
69075: PPUSH
69076: CALL_OW 51
// tmp := tmp ^ un ;
69080: LD_ADDR_VAR 0 3
69084: PUSH
69085: LD_VAR 0 3
69089: PUSH
69090: LD_VAR 0 2
69094: ADD
69095: ST_TO_ADDR
// end ;
69096: GO 68992
69098: POP
69099: POP
// repeat wait ( 0 0$1 ) ;
69100: LD_INT 35
69102: PPUSH
69103: CALL_OW 67
// for un in tmp do
69107: LD_ADDR_VAR 0 2
69111: PUSH
69112: LD_VAR 0 3
69116: PUSH
69117: FOR_IN
69118: IFFALSE 69192
// begin if IsDead ( un ) then
69120: LD_VAR 0 2
69124: PPUSH
69125: CALL_OW 301
69129: IFFALSE 69149
// begin tmp := tmp diff un ;
69131: LD_ADDR_VAR 0 3
69135: PUSH
69136: LD_VAR 0 3
69140: PUSH
69141: LD_VAR 0 2
69145: DIFF
69146: ST_TO_ADDR
// continue ;
69147: GO 69117
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69149: LD_VAR 0 2
69153: PPUSH
69154: LD_INT 3
69156: PUSH
69157: LD_INT 22
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PPUSH
69171: CALL_OW 69
69175: PPUSH
69176: LD_VAR 0 2
69180: PPUSH
69181: CALL_OW 74
69185: PPUSH
69186: CALL_OW 115
// end ;
69190: GO 69117
69192: POP
69193: POP
// until not tmp ;
69194: LD_VAR 0 3
69198: NOT
69199: IFFALSE 69100
// end ;
69201: PPOPN 3
69203: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69204: LD_EXP 43
69208: PUSH
69209: LD_EXP 68
69213: AND
69214: IFFALSE 69268
69216: GO 69218
69218: DISABLE
// begin ToLua ( displayTroll(); ) ;
69219: LD_STRING displayTroll();
69221: PPUSH
69222: CALL_OW 559
// wait ( 3 3$00 ) ;
69226: LD_INT 6300
69228: PPUSH
69229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69233: LD_STRING hideTroll();
69235: PPUSH
69236: CALL_OW 559
// wait ( 1 1$00 ) ;
69240: LD_INT 2100
69242: PPUSH
69243: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69247: LD_STRING displayTroll();
69249: PPUSH
69250: CALL_OW 559
// wait ( 1 1$00 ) ;
69254: LD_INT 2100
69256: PPUSH
69257: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69261: LD_STRING hideTroll();
69263: PPUSH
69264: CALL_OW 559
// end ;
69268: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69269: LD_EXP 43
69273: PUSH
69274: LD_EXP 69
69278: AND
69279: IFFALSE 69342
69281: GO 69283
69283: DISABLE
69284: LD_INT 0
69286: PPUSH
// begin p := 0 ;
69287: LD_ADDR_VAR 0 1
69291: PUSH
69292: LD_INT 0
69294: ST_TO_ADDR
// repeat game_speed := 1 ;
69295: LD_ADDR_OWVAR 65
69299: PUSH
69300: LD_INT 1
69302: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69303: LD_INT 35
69305: PPUSH
69306: CALL_OW 67
// p := p + 1 ;
69310: LD_ADDR_VAR 0 1
69314: PUSH
69315: LD_VAR 0 1
69319: PUSH
69320: LD_INT 1
69322: PLUS
69323: ST_TO_ADDR
// until p >= 60 ;
69324: LD_VAR 0 1
69328: PUSH
69329: LD_INT 60
69331: GREATEREQUAL
69332: IFFALSE 69295
// game_speed := 4 ;
69334: LD_ADDR_OWVAR 65
69338: PUSH
69339: LD_INT 4
69341: ST_TO_ADDR
// end ;
69342: PPOPN 1
69344: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69345: LD_EXP 43
69349: PUSH
69350: LD_EXP 70
69354: AND
69355: IFFALSE 69501
69357: GO 69359
69359: DISABLE
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69364: LD_ADDR_VAR 0 1
69368: PUSH
69369: LD_INT 22
69371: PUSH
69372: LD_OWVAR 2
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 30
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 30
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PPUSH
69413: CALL_OW 69
69417: ST_TO_ADDR
// if not depot then
69418: LD_VAR 0 1
69422: NOT
69423: IFFALSE 69427
// exit ;
69425: GO 69501
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69427: LD_ADDR_VAR 0 2
69431: PUSH
69432: LD_VAR 0 1
69436: PUSH
69437: LD_INT 1
69439: PPUSH
69440: LD_VAR 0 1
69444: PPUSH
69445: CALL_OW 12
69449: ARRAY
69450: PPUSH
69451: CALL_OW 274
69455: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69456: LD_VAR 0 2
69460: PPUSH
69461: LD_INT 1
69463: PPUSH
69464: LD_INT 0
69466: PPUSH
69467: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69471: LD_VAR 0 2
69475: PPUSH
69476: LD_INT 2
69478: PPUSH
69479: LD_INT 0
69481: PPUSH
69482: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69486: LD_VAR 0 2
69490: PPUSH
69491: LD_INT 3
69493: PPUSH
69494: LD_INT 0
69496: PPUSH
69497: CALL_OW 277
// end ;
69501: PPOPN 2
69503: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69504: LD_EXP 43
69508: PUSH
69509: LD_EXP 71
69513: AND
69514: IFFALSE 69611
69516: GO 69518
69518: DISABLE
69519: LD_INT 0
69521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69522: LD_ADDR_VAR 0 1
69526: PUSH
69527: LD_INT 22
69529: PUSH
69530: LD_OWVAR 2
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 21
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 3
69551: PUSH
69552: LD_INT 23
69554: PUSH
69555: LD_INT 0
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: PPUSH
69571: CALL_OW 69
69575: ST_TO_ADDR
// if not tmp then
69576: LD_VAR 0 1
69580: NOT
69581: IFFALSE 69585
// exit ;
69583: GO 69611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69585: LD_VAR 0 1
69589: PUSH
69590: LD_INT 1
69592: PPUSH
69593: LD_VAR 0 1
69597: PPUSH
69598: CALL_OW 12
69602: ARRAY
69603: PPUSH
69604: LD_INT 200
69606: PPUSH
69607: CALL_OW 234
// end ;
69611: PPOPN 1
69613: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69614: LD_EXP 43
69618: PUSH
69619: LD_EXP 72
69623: AND
69624: IFFALSE 69703
69626: GO 69628
69628: DISABLE
69629: LD_INT 0
69631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69632: LD_ADDR_VAR 0 1
69636: PUSH
69637: LD_INT 22
69639: PUSH
69640: LD_OWVAR 2
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 21
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PPUSH
69663: CALL_OW 69
69667: ST_TO_ADDR
// if not tmp then
69668: LD_VAR 0 1
69672: NOT
69673: IFFALSE 69677
// exit ;
69675: GO 69703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69677: LD_VAR 0 1
69681: PUSH
69682: LD_INT 1
69684: PPUSH
69685: LD_VAR 0 1
69689: PPUSH
69690: CALL_OW 12
69694: ARRAY
69695: PPUSH
69696: LD_INT 60
69698: PPUSH
69699: CALL_OW 234
// end ;
69703: PPOPN 1
69705: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69706: LD_EXP 43
69710: PUSH
69711: LD_EXP 73
69715: AND
69716: IFFALSE 69815
69718: GO 69720
69720: DISABLE
69721: LD_INT 0
69723: PPUSH
69724: PPUSH
// begin enable ;
69725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69726: LD_ADDR_VAR 0 1
69730: PUSH
69731: LD_INT 22
69733: PUSH
69734: LD_OWVAR 2
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 61
69745: PUSH
69746: EMPTY
69747: LIST
69748: PUSH
69749: LD_INT 33
69751: PUSH
69752: LD_INT 2
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: PPUSH
69764: CALL_OW 69
69768: ST_TO_ADDR
// if not tmp then
69769: LD_VAR 0 1
69773: NOT
69774: IFFALSE 69778
// exit ;
69776: GO 69815
// for i in tmp do
69778: LD_ADDR_VAR 0 2
69782: PUSH
69783: LD_VAR 0 1
69787: PUSH
69788: FOR_IN
69789: IFFALSE 69813
// if IsControledBy ( i ) then
69791: LD_VAR 0 2
69795: PPUSH
69796: CALL_OW 312
69800: IFFALSE 69811
// ComUnlink ( i ) ;
69802: LD_VAR 0 2
69806: PPUSH
69807: CALL_OW 136
69811: GO 69788
69813: POP
69814: POP
// end ;
69815: PPOPN 2
69817: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69818: LD_EXP 43
69822: PUSH
69823: LD_EXP 74
69827: AND
69828: IFFALSE 69968
69830: GO 69832
69832: DISABLE
69833: LD_INT 0
69835: PPUSH
69836: PPUSH
// begin ToLua ( displayPowell(); ) ;
69837: LD_STRING displayPowell();
69839: PPUSH
69840: CALL_OW 559
// uc_side := 0 ;
69844: LD_ADDR_OWVAR 20
69848: PUSH
69849: LD_INT 0
69851: ST_TO_ADDR
// uc_nation := 2 ;
69852: LD_ADDR_OWVAR 21
69856: PUSH
69857: LD_INT 2
69859: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
69860: LD_ADDR_OWVAR 37
69864: PUSH
69865: LD_INT 14
69867: ST_TO_ADDR
// vc_engine := engine_siberite ;
69868: LD_ADDR_OWVAR 39
69872: PUSH
69873: LD_INT 3
69875: ST_TO_ADDR
// vc_control := control_apeman ;
69876: LD_ADDR_OWVAR 38
69880: PUSH
69881: LD_INT 5
69883: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
69884: LD_ADDR_OWVAR 40
69888: PUSH
69889: LD_INT 29
69891: ST_TO_ADDR
// un := CreateVehicle ;
69892: LD_ADDR_VAR 0 2
69896: PUSH
69897: CALL_OW 45
69901: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69902: LD_VAR 0 2
69906: PPUSH
69907: LD_INT 1
69909: PPUSH
69910: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69914: LD_INT 35
69916: PPUSH
69917: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69921: LD_VAR 0 2
69925: PPUSH
69926: LD_INT 22
69928: PUSH
69929: LD_OWVAR 2
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PPUSH
69938: CALL_OW 69
69942: PPUSH
69943: LD_VAR 0 2
69947: PPUSH
69948: CALL_OW 74
69952: PPUSH
69953: CALL_OW 115
// until IsDead ( un ) ;
69957: LD_VAR 0 2
69961: PPUSH
69962: CALL_OW 301
69966: IFFALSE 69914
// end ;
69968: PPOPN 2
69970: END
// every 0 0$1 trigger StreamModeActive and sStu do
69971: LD_EXP 43
69975: PUSH
69976: LD_EXP 82
69980: AND
69981: IFFALSE 69997
69983: GO 69985
69985: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69986: LD_STRING displayStucuk();
69988: PPUSH
69989: CALL_OW 559
// ResetFog ;
69993: CALL_OW 335
// end ;
69997: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69998: LD_EXP 43
70002: PUSH
70003: LD_EXP 75
70007: AND
70008: IFFALSE 70149
70010: GO 70012
70012: DISABLE
70013: LD_INT 0
70015: PPUSH
70016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: LD_INT 22
70024: PUSH
70025: LD_OWVAR 2
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 21
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PPUSH
70048: CALL_OW 69
70052: ST_TO_ADDR
// if not tmp then
70053: LD_VAR 0 2
70057: NOT
70058: IFFALSE 70062
// exit ;
70060: GO 70149
// un := tmp [ rand ( 1 , tmp ) ] ;
70062: LD_ADDR_VAR 0 1
70066: PUSH
70067: LD_VAR 0 2
70071: PUSH
70072: LD_INT 1
70074: PPUSH
70075: LD_VAR 0 2
70079: PPUSH
70080: CALL_OW 12
70084: ARRAY
70085: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_INT 0
70093: PPUSH
70094: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70098: LD_VAR 0 1
70102: PPUSH
70103: LD_OWVAR 3
70107: PUSH
70108: LD_VAR 0 1
70112: DIFF
70113: PPUSH
70114: LD_VAR 0 1
70118: PPUSH
70119: CALL_OW 74
70123: PPUSH
70124: CALL_OW 115
// wait ( 0 0$20 ) ;
70128: LD_INT 700
70130: PPUSH
70131: CALL_OW 67
// SetSide ( un , your_side ) ;
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_OWVAR 2
70144: PPUSH
70145: CALL_OW 235
// end ;
70149: PPOPN 2
70151: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70152: LD_EXP 43
70156: PUSH
70157: LD_EXP 76
70161: AND
70162: IFFALSE 70268
70164: GO 70166
70166: DISABLE
70167: LD_INT 0
70169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70170: LD_ADDR_VAR 0 1
70174: PUSH
70175: LD_INT 22
70177: PUSH
70178: LD_OWVAR 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: LD_INT 30
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 30
70202: PUSH
70203: LD_INT 1
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PPUSH
70219: CALL_OW 69
70223: ST_TO_ADDR
// if not depot then
70224: LD_VAR 0 1
70228: NOT
70229: IFFALSE 70233
// exit ;
70231: GO 70268
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70233: LD_VAR 0 1
70237: PUSH
70238: LD_INT 1
70240: ARRAY
70241: PPUSH
70242: CALL_OW 250
70246: PPUSH
70247: LD_VAR 0 1
70251: PUSH
70252: LD_INT 1
70254: ARRAY
70255: PPUSH
70256: CALL_OW 251
70260: PPUSH
70261: LD_INT 70
70263: PPUSH
70264: CALL_OW 495
// end ;
70268: PPOPN 1
70270: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70271: LD_EXP 43
70275: PUSH
70276: LD_EXP 77
70280: AND
70281: IFFALSE 70492
70283: GO 70285
70285: DISABLE
70286: LD_INT 0
70288: PPUSH
70289: PPUSH
70290: PPUSH
70291: PPUSH
70292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70293: LD_ADDR_VAR 0 5
70297: PUSH
70298: LD_INT 22
70300: PUSH
70301: LD_OWVAR 2
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 21
70312: PUSH
70313: LD_INT 1
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PPUSH
70324: CALL_OW 69
70328: ST_TO_ADDR
// if not tmp then
70329: LD_VAR 0 5
70333: NOT
70334: IFFALSE 70338
// exit ;
70336: GO 70492
// for i in tmp do
70338: LD_ADDR_VAR 0 1
70342: PUSH
70343: LD_VAR 0 5
70347: PUSH
70348: FOR_IN
70349: IFFALSE 70490
// begin d := rand ( 0 , 5 ) ;
70351: LD_ADDR_VAR 0 4
70355: PUSH
70356: LD_INT 0
70358: PPUSH
70359: LD_INT 5
70361: PPUSH
70362: CALL_OW 12
70366: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70367: LD_ADDR_VAR 0 2
70371: PUSH
70372: LD_VAR 0 1
70376: PPUSH
70377: CALL_OW 250
70381: PPUSH
70382: LD_VAR 0 4
70386: PPUSH
70387: LD_INT 3
70389: PPUSH
70390: LD_INT 12
70392: PPUSH
70393: CALL_OW 12
70397: PPUSH
70398: CALL_OW 272
70402: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70403: LD_ADDR_VAR 0 3
70407: PUSH
70408: LD_VAR 0 1
70412: PPUSH
70413: CALL_OW 251
70417: PPUSH
70418: LD_VAR 0 4
70422: PPUSH
70423: LD_INT 3
70425: PPUSH
70426: LD_INT 12
70428: PPUSH
70429: CALL_OW 12
70433: PPUSH
70434: CALL_OW 273
70438: ST_TO_ADDR
// if ValidHex ( x , y ) then
70439: LD_VAR 0 2
70443: PPUSH
70444: LD_VAR 0 3
70448: PPUSH
70449: CALL_OW 488
70453: IFFALSE 70488
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70455: LD_VAR 0 1
70459: PPUSH
70460: LD_VAR 0 2
70464: PPUSH
70465: LD_VAR 0 3
70469: PPUSH
70470: LD_INT 3
70472: PPUSH
70473: LD_INT 6
70475: PPUSH
70476: CALL_OW 12
70480: PPUSH
70481: LD_INT 1
70483: PPUSH
70484: CALL_OW 483
// end ;
70488: GO 70348
70490: POP
70491: POP
// end ;
70492: PPOPN 5
70494: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70495: LD_EXP 43
70499: PUSH
70500: LD_EXP 78
70504: AND
70505: IFFALSE 70599
70507: GO 70509
70509: DISABLE
70510: LD_INT 0
70512: PPUSH
70513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70514: LD_ADDR_VAR 0 2
70518: PUSH
70519: LD_INT 22
70521: PUSH
70522: LD_OWVAR 2
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 32
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 21
70543: PUSH
70544: LD_INT 2
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: PPUSH
70556: CALL_OW 69
70560: ST_TO_ADDR
// if not tmp then
70561: LD_VAR 0 2
70565: NOT
70566: IFFALSE 70570
// exit ;
70568: GO 70599
// for i in tmp do
70570: LD_ADDR_VAR 0 1
70574: PUSH
70575: LD_VAR 0 2
70579: PUSH
70580: FOR_IN
70581: IFFALSE 70597
// SetFuel ( i , 0 ) ;
70583: LD_VAR 0 1
70587: PPUSH
70588: LD_INT 0
70590: PPUSH
70591: CALL_OW 240
70595: GO 70580
70597: POP
70598: POP
// end ;
70599: PPOPN 2
70601: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70602: LD_EXP 43
70606: PUSH
70607: LD_EXP 79
70611: AND
70612: IFFALSE 70678
70614: GO 70616
70616: DISABLE
70617: LD_INT 0
70619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70620: LD_ADDR_VAR 0 1
70624: PUSH
70625: LD_INT 22
70627: PUSH
70628: LD_OWVAR 2
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 30
70639: PUSH
70640: LD_INT 29
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PPUSH
70651: CALL_OW 69
70655: ST_TO_ADDR
// if not tmp then
70656: LD_VAR 0 1
70660: NOT
70661: IFFALSE 70665
// exit ;
70663: GO 70678
// DestroyUnit ( tmp [ 1 ] ) ;
70665: LD_VAR 0 1
70669: PUSH
70670: LD_INT 1
70672: ARRAY
70673: PPUSH
70674: CALL_OW 65
// end ;
70678: PPOPN 1
70680: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70681: LD_EXP 43
70685: PUSH
70686: LD_EXP 81
70690: AND
70691: IFFALSE 70820
70693: GO 70695
70695: DISABLE
70696: LD_INT 0
70698: PPUSH
// begin uc_side := 0 ;
70699: LD_ADDR_OWVAR 20
70703: PUSH
70704: LD_INT 0
70706: ST_TO_ADDR
// uc_nation := nation_arabian ;
70707: LD_ADDR_OWVAR 21
70711: PUSH
70712: LD_INT 2
70714: ST_TO_ADDR
// hc_gallery :=  ;
70715: LD_ADDR_OWVAR 33
70719: PUSH
70720: LD_STRING 
70722: ST_TO_ADDR
// hc_name :=  ;
70723: LD_ADDR_OWVAR 26
70727: PUSH
70728: LD_STRING 
70730: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70731: LD_INT 1
70733: PPUSH
70734: LD_INT 11
70736: PPUSH
70737: LD_INT 10
70739: PPUSH
70740: CALL_OW 380
// un := CreateHuman ;
70744: LD_ADDR_VAR 0 1
70748: PUSH
70749: CALL_OW 44
70753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70754: LD_VAR 0 1
70758: PPUSH
70759: LD_INT 1
70761: PPUSH
70762: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70766: LD_INT 35
70768: PPUSH
70769: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70773: LD_VAR 0 1
70777: PPUSH
70778: LD_INT 22
70780: PUSH
70781: LD_OWVAR 2
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: PPUSH
70795: LD_VAR 0 1
70799: PPUSH
70800: CALL_OW 74
70804: PPUSH
70805: CALL_OW 115
// until IsDead ( un ) ;
70809: LD_VAR 0 1
70813: PPUSH
70814: CALL_OW 301
70818: IFFALSE 70766
// end ;
70820: PPOPN 1
70822: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70823: LD_EXP 43
70827: PUSH
70828: LD_EXP 83
70832: AND
70833: IFFALSE 70845
70835: GO 70837
70837: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70838: LD_STRING earthquake(getX(game), 0, 32)
70840: PPUSH
70841: CALL_OW 559
70845: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
70846: LD_EXP 43
70850: PUSH
70851: LD_EXP 84
70855: AND
70856: IFFALSE 70947
70858: GO 70860
70860: DISABLE
70861: LD_INT 0
70863: PPUSH
// begin enable ;
70864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
70865: LD_ADDR_VAR 0 1
70869: PUSH
70870: LD_INT 22
70872: PUSH
70873: LD_OWVAR 2
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 21
70884: PUSH
70885: LD_INT 2
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 33
70894: PUSH
70895: LD_INT 3
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: PPUSH
70907: CALL_OW 69
70911: ST_TO_ADDR
// if not tmp then
70912: LD_VAR 0 1
70916: NOT
70917: IFFALSE 70921
// exit ;
70919: GO 70947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70921: LD_VAR 0 1
70925: PUSH
70926: LD_INT 1
70928: PPUSH
70929: LD_VAR 0 1
70933: PPUSH
70934: CALL_OW 12
70938: ARRAY
70939: PPUSH
70940: LD_INT 1
70942: PPUSH
70943: CALL_OW 234
// end ;
70947: PPOPN 1
70949: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70950: LD_EXP 43
70954: PUSH
70955: LD_EXP 85
70959: AND
70960: IFFALSE 71101
70962: GO 70964
70964: DISABLE
70965: LD_INT 0
70967: PPUSH
70968: PPUSH
70969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70970: LD_ADDR_VAR 0 3
70974: PUSH
70975: LD_INT 22
70977: PUSH
70978: LD_OWVAR 2
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 25
70989: PUSH
70990: LD_INT 1
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PPUSH
71001: CALL_OW 69
71005: ST_TO_ADDR
// if not tmp then
71006: LD_VAR 0 3
71010: NOT
71011: IFFALSE 71015
// exit ;
71013: GO 71101
// un := tmp [ rand ( 1 , tmp ) ] ;
71015: LD_ADDR_VAR 0 2
71019: PUSH
71020: LD_VAR 0 3
71024: PUSH
71025: LD_INT 1
71027: PPUSH
71028: LD_VAR 0 3
71032: PPUSH
71033: CALL_OW 12
71037: ARRAY
71038: ST_TO_ADDR
// if Crawls ( un ) then
71039: LD_VAR 0 2
71043: PPUSH
71044: CALL_OW 318
71048: IFFALSE 71059
// ComWalk ( un ) ;
71050: LD_VAR 0 2
71054: PPUSH
71055: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71059: LD_VAR 0 2
71063: PPUSH
71064: LD_INT 9
71066: PPUSH
71067: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71071: LD_INT 28
71073: PPUSH
71074: LD_OWVAR 2
71078: PPUSH
71079: LD_INT 2
71081: PPUSH
71082: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71086: LD_INT 29
71088: PPUSH
71089: LD_OWVAR 2
71093: PPUSH
71094: LD_INT 2
71096: PPUSH
71097: CALL_OW 322
// end ;
71101: PPOPN 3
71103: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71104: LD_EXP 43
71108: PUSH
71109: LD_EXP 86
71113: AND
71114: IFFALSE 71225
71116: GO 71118
71118: DISABLE
71119: LD_INT 0
71121: PPUSH
71122: PPUSH
71123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71124: LD_ADDR_VAR 0 3
71128: PUSH
71129: LD_INT 22
71131: PUSH
71132: LD_OWVAR 2
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 25
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PPUSH
71155: CALL_OW 69
71159: ST_TO_ADDR
// if not tmp then
71160: LD_VAR 0 3
71164: NOT
71165: IFFALSE 71169
// exit ;
71167: GO 71225
// un := tmp [ rand ( 1 , tmp ) ] ;
71169: LD_ADDR_VAR 0 2
71173: PUSH
71174: LD_VAR 0 3
71178: PUSH
71179: LD_INT 1
71181: PPUSH
71182: LD_VAR 0 3
71186: PPUSH
71187: CALL_OW 12
71191: ARRAY
71192: ST_TO_ADDR
// if Crawls ( un ) then
71193: LD_VAR 0 2
71197: PPUSH
71198: CALL_OW 318
71202: IFFALSE 71213
// ComWalk ( un ) ;
71204: LD_VAR 0 2
71208: PPUSH
71209: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71213: LD_VAR 0 2
71217: PPUSH
71218: LD_INT 8
71220: PPUSH
71221: CALL_OW 336
// end ;
71225: PPOPN 3
71227: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71228: LD_EXP 43
71232: PUSH
71233: LD_EXP 87
71237: AND
71238: IFFALSE 71382
71240: GO 71242
71242: DISABLE
71243: LD_INT 0
71245: PPUSH
71246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71247: LD_ADDR_VAR 0 2
71251: PUSH
71252: LD_INT 22
71254: PUSH
71255: LD_OWVAR 2
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 21
71266: PUSH
71267: LD_INT 2
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 2
71276: PUSH
71277: LD_INT 34
71279: PUSH
71280: LD_INT 12
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 34
71289: PUSH
71290: LD_INT 51
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 34
71299: PUSH
71300: LD_INT 32
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: LIST
71317: PPUSH
71318: CALL_OW 69
71322: ST_TO_ADDR
// if not tmp then
71323: LD_VAR 0 2
71327: NOT
71328: IFFALSE 71332
// exit ;
71330: GO 71382
// for i in tmp do
71332: LD_ADDR_VAR 0 1
71336: PUSH
71337: LD_VAR 0 2
71341: PUSH
71342: FOR_IN
71343: IFFALSE 71380
// if GetCargo ( i , mat_artifact ) = 0 then
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_INT 4
71352: PPUSH
71353: CALL_OW 289
71357: PUSH
71358: LD_INT 0
71360: EQUAL
71361: IFFALSE 71378
// SetCargo ( i , mat_siberit , 100 ) ;
71363: LD_VAR 0 1
71367: PPUSH
71368: LD_INT 3
71370: PPUSH
71371: LD_INT 100
71373: PPUSH
71374: CALL_OW 290
71378: GO 71342
71380: POP
71381: POP
// end ;
71382: PPOPN 2
71384: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71385: LD_EXP 43
71389: PUSH
71390: LD_EXP 88
71394: AND
71395: IFFALSE 71578
71397: GO 71399
71399: DISABLE
71400: LD_INT 0
71402: PPUSH
71403: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71404: LD_ADDR_VAR 0 2
71408: PUSH
71409: LD_INT 22
71411: PUSH
71412: LD_OWVAR 2
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PPUSH
71421: CALL_OW 69
71425: ST_TO_ADDR
// if not tmp then
71426: LD_VAR 0 2
71430: NOT
71431: IFFALSE 71435
// exit ;
71433: GO 71578
// for i := 1 to 2 do
71435: LD_ADDR_VAR 0 1
71439: PUSH
71440: DOUBLE
71441: LD_INT 1
71443: DEC
71444: ST_TO_ADDR
71445: LD_INT 2
71447: PUSH
71448: FOR_TO
71449: IFFALSE 71576
// begin uc_side := your_side ;
71451: LD_ADDR_OWVAR 20
71455: PUSH
71456: LD_OWVAR 2
71460: ST_TO_ADDR
// uc_nation := nation_american ;
71461: LD_ADDR_OWVAR 21
71465: PUSH
71466: LD_INT 1
71468: ST_TO_ADDR
// vc_chassis := us_morphling ;
71469: LD_ADDR_OWVAR 37
71473: PUSH
71474: LD_INT 5
71476: ST_TO_ADDR
// vc_engine := engine_siberite ;
71477: LD_ADDR_OWVAR 39
71481: PUSH
71482: LD_INT 3
71484: ST_TO_ADDR
// vc_control := control_computer ;
71485: LD_ADDR_OWVAR 38
71489: PUSH
71490: LD_INT 3
71492: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71493: LD_ADDR_OWVAR 40
71497: PUSH
71498: LD_INT 10
71500: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71501: LD_VAR 0 2
71505: PUSH
71506: LD_INT 1
71508: ARRAY
71509: PPUSH
71510: CALL_OW 310
71514: NOT
71515: IFFALSE 71562
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71517: CALL_OW 45
71521: PPUSH
71522: LD_VAR 0 2
71526: PUSH
71527: LD_INT 1
71529: ARRAY
71530: PPUSH
71531: CALL_OW 250
71535: PPUSH
71536: LD_VAR 0 2
71540: PUSH
71541: LD_INT 1
71543: ARRAY
71544: PPUSH
71545: CALL_OW 251
71549: PPUSH
71550: LD_INT 12
71552: PPUSH
71553: LD_INT 1
71555: PPUSH
71556: CALL_OW 50
71560: GO 71574
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71562: CALL_OW 45
71566: PPUSH
71567: LD_INT 1
71569: PPUSH
71570: CALL_OW 51
// end ;
71574: GO 71448
71576: POP
71577: POP
// end ;
71578: PPOPN 2
71580: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71581: LD_EXP 43
71585: PUSH
71586: LD_EXP 89
71590: AND
71591: IFFALSE 71813
71593: GO 71595
71595: DISABLE
71596: LD_INT 0
71598: PPUSH
71599: PPUSH
71600: PPUSH
71601: PPUSH
71602: PPUSH
71603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71604: LD_ADDR_VAR 0 6
71608: PUSH
71609: LD_INT 22
71611: PUSH
71612: LD_OWVAR 2
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 21
71623: PUSH
71624: LD_INT 1
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 3
71633: PUSH
71634: LD_INT 23
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: PPUSH
71653: CALL_OW 69
71657: ST_TO_ADDR
// if not tmp then
71658: LD_VAR 0 6
71662: NOT
71663: IFFALSE 71667
// exit ;
71665: GO 71813
// s1 := rand ( 1 , 4 ) ;
71667: LD_ADDR_VAR 0 2
71671: PUSH
71672: LD_INT 1
71674: PPUSH
71675: LD_INT 4
71677: PPUSH
71678: CALL_OW 12
71682: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71683: LD_ADDR_VAR 0 4
71687: PUSH
71688: LD_VAR 0 6
71692: PUSH
71693: LD_INT 1
71695: ARRAY
71696: PPUSH
71697: LD_VAR 0 2
71701: PPUSH
71702: CALL_OW 259
71706: ST_TO_ADDR
// if s1 = 1 then
71707: LD_VAR 0 2
71711: PUSH
71712: LD_INT 1
71714: EQUAL
71715: IFFALSE 71735
// s2 := rand ( 2 , 4 ) else
71717: LD_ADDR_VAR 0 3
71721: PUSH
71722: LD_INT 2
71724: PPUSH
71725: LD_INT 4
71727: PPUSH
71728: CALL_OW 12
71732: ST_TO_ADDR
71733: GO 71743
// s2 := 1 ;
71735: LD_ADDR_VAR 0 3
71739: PUSH
71740: LD_INT 1
71742: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71743: LD_ADDR_VAR 0 5
71747: PUSH
71748: LD_VAR 0 6
71752: PUSH
71753: LD_INT 1
71755: ARRAY
71756: PPUSH
71757: LD_VAR 0 3
71761: PPUSH
71762: CALL_OW 259
71766: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71767: LD_VAR 0 6
71771: PUSH
71772: LD_INT 1
71774: ARRAY
71775: PPUSH
71776: LD_VAR 0 2
71780: PPUSH
71781: LD_VAR 0 5
71785: PPUSH
71786: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71790: LD_VAR 0 6
71794: PUSH
71795: LD_INT 1
71797: ARRAY
71798: PPUSH
71799: LD_VAR 0 3
71803: PPUSH
71804: LD_VAR 0 4
71808: PPUSH
71809: CALL_OW 237
// end ;
71813: PPOPN 6
71815: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71816: LD_EXP 43
71820: PUSH
71821: LD_EXP 90
71825: AND
71826: IFFALSE 71905
71828: GO 71830
71830: DISABLE
71831: LD_INT 0
71833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71834: LD_ADDR_VAR 0 1
71838: PUSH
71839: LD_INT 22
71841: PUSH
71842: LD_OWVAR 2
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 30
71853: PUSH
71854: LD_INT 3
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PPUSH
71865: CALL_OW 69
71869: ST_TO_ADDR
// if not tmp then
71870: LD_VAR 0 1
71874: NOT
71875: IFFALSE 71879
// exit ;
71877: GO 71905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71879: LD_VAR 0 1
71883: PUSH
71884: LD_INT 1
71886: PPUSH
71887: LD_VAR 0 1
71891: PPUSH
71892: CALL_OW 12
71896: ARRAY
71897: PPUSH
71898: LD_INT 1
71900: PPUSH
71901: CALL_OW 234
// end ;
71905: PPOPN 1
71907: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
71908: LD_EXP 43
71912: PUSH
71913: LD_EXP 91
71917: AND
71918: IFFALSE 72030
71920: GO 71922
71922: DISABLE
71923: LD_INT 0
71925: PPUSH
71926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71927: LD_ADDR_VAR 0 2
71931: PUSH
71932: LD_INT 22
71934: PUSH
71935: LD_OWVAR 2
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 2
71946: PUSH
71947: LD_INT 30
71949: PUSH
71950: LD_INT 27
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 30
71959: PUSH
71960: LD_INT 26
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 30
71969: PUSH
71970: LD_INT 28
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PPUSH
71987: CALL_OW 69
71991: ST_TO_ADDR
// if not tmp then
71992: LD_VAR 0 2
71996: NOT
71997: IFFALSE 72001
// exit ;
71999: GO 72030
// for i in tmp do
72001: LD_ADDR_VAR 0 1
72005: PUSH
72006: LD_VAR 0 2
72010: PUSH
72011: FOR_IN
72012: IFFALSE 72028
// SetLives ( i , 1 ) ;
72014: LD_VAR 0 1
72018: PPUSH
72019: LD_INT 1
72021: PPUSH
72022: CALL_OW 234
72026: GO 72011
72028: POP
72029: POP
// end ;
72030: PPOPN 2
72032: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72033: LD_EXP 43
72037: PUSH
72038: LD_EXP 92
72042: AND
72043: IFFALSE 72330
72045: GO 72047
72047: DISABLE
72048: LD_INT 0
72050: PPUSH
72051: PPUSH
72052: PPUSH
// begin i := rand ( 1 , 7 ) ;
72053: LD_ADDR_VAR 0 1
72057: PUSH
72058: LD_INT 1
72060: PPUSH
72061: LD_INT 7
72063: PPUSH
72064: CALL_OW 12
72068: ST_TO_ADDR
// case i of 1 :
72069: LD_VAR 0 1
72073: PUSH
72074: LD_INT 1
72076: DOUBLE
72077: EQUAL
72078: IFTRUE 72082
72080: GO 72092
72082: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72083: LD_STRING earthquake(getX(game), 0, 32)
72085: PPUSH
72086: CALL_OW 559
72090: GO 72330
72092: LD_INT 2
72094: DOUBLE
72095: EQUAL
72096: IFTRUE 72100
72098: GO 72114
72100: POP
// begin ToLua ( displayStucuk(); ) ;
72101: LD_STRING displayStucuk();
72103: PPUSH
72104: CALL_OW 559
// ResetFog ;
72108: CALL_OW 335
// end ; 3 :
72112: GO 72330
72114: LD_INT 3
72116: DOUBLE
72117: EQUAL
72118: IFTRUE 72122
72120: GO 72226
72122: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72123: LD_ADDR_VAR 0 2
72127: PUSH
72128: LD_INT 22
72130: PUSH
72131: LD_OWVAR 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 25
72142: PUSH
72143: LD_INT 1
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PPUSH
72154: CALL_OW 69
72158: ST_TO_ADDR
// if not tmp then
72159: LD_VAR 0 2
72163: NOT
72164: IFFALSE 72168
// exit ;
72166: GO 72330
// un := tmp [ rand ( 1 , tmp ) ] ;
72168: LD_ADDR_VAR 0 3
72172: PUSH
72173: LD_VAR 0 2
72177: PUSH
72178: LD_INT 1
72180: PPUSH
72181: LD_VAR 0 2
72185: PPUSH
72186: CALL_OW 12
72190: ARRAY
72191: ST_TO_ADDR
// if Crawls ( un ) then
72192: LD_VAR 0 3
72196: PPUSH
72197: CALL_OW 318
72201: IFFALSE 72212
// ComWalk ( un ) ;
72203: LD_VAR 0 3
72207: PPUSH
72208: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72212: LD_VAR 0 3
72216: PPUSH
72217: LD_INT 8
72219: PPUSH
72220: CALL_OW 336
// end ; 4 :
72224: GO 72330
72226: LD_INT 4
72228: DOUBLE
72229: EQUAL
72230: IFTRUE 72234
72232: GO 72308
72234: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72235: LD_ADDR_VAR 0 2
72239: PUSH
72240: LD_INT 22
72242: PUSH
72243: LD_OWVAR 2
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 30
72254: PUSH
72255: LD_INT 29
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PPUSH
72266: CALL_OW 69
72270: ST_TO_ADDR
// if not tmp then
72271: LD_VAR 0 2
72275: NOT
72276: IFFALSE 72280
// exit ;
72278: GO 72330
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72280: LD_VAR 0 2
72284: PUSH
72285: LD_INT 1
72287: ARRAY
72288: PPUSH
72289: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72293: LD_VAR 0 2
72297: PUSH
72298: LD_INT 1
72300: ARRAY
72301: PPUSH
72302: CALL_OW 65
// end ; 5 .. 7 :
72306: GO 72330
72308: LD_INT 5
72310: DOUBLE
72311: GREATEREQUAL
72312: IFFALSE 72320
72314: LD_INT 7
72316: DOUBLE
72317: LESSEQUAL
72318: IFTRUE 72322
72320: GO 72329
72322: POP
// StreamSibBomb ; end ;
72323: CALL 68567 0 0
72327: GO 72330
72329: POP
// end ;
72330: PPOPN 3
72332: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72333: LD_EXP 43
72337: PUSH
72338: LD_EXP 93
72342: AND
72343: IFFALSE 72499
72345: GO 72347
72347: DISABLE
72348: LD_INT 0
72350: PPUSH
72351: PPUSH
72352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72353: LD_ADDR_VAR 0 2
72357: PUSH
72358: LD_INT 81
72360: PUSH
72361: LD_OWVAR 2
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: LD_INT 21
72375: PUSH
72376: LD_INT 1
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 21
72385: PUSH
72386: LD_INT 2
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PPUSH
72402: CALL_OW 69
72406: ST_TO_ADDR
// if not tmp then
72407: LD_VAR 0 2
72411: NOT
72412: IFFALSE 72416
// exit ;
72414: GO 72499
// p := 0 ;
72416: LD_ADDR_VAR 0 3
72420: PUSH
72421: LD_INT 0
72423: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72424: LD_INT 35
72426: PPUSH
72427: CALL_OW 67
// p := p + 1 ;
72431: LD_ADDR_VAR 0 3
72435: PUSH
72436: LD_VAR 0 3
72440: PUSH
72441: LD_INT 1
72443: PLUS
72444: ST_TO_ADDR
// for i in tmp do
72445: LD_ADDR_VAR 0 1
72449: PUSH
72450: LD_VAR 0 2
72454: PUSH
72455: FOR_IN
72456: IFFALSE 72487
// if GetLives ( i ) < 1000 then
72458: LD_VAR 0 1
72462: PPUSH
72463: CALL_OW 256
72467: PUSH
72468: LD_INT 1000
72470: LESS
72471: IFFALSE 72485
// SetLives ( i , 1000 ) ;
72473: LD_VAR 0 1
72477: PPUSH
72478: LD_INT 1000
72480: PPUSH
72481: CALL_OW 234
72485: GO 72455
72487: POP
72488: POP
// until p > 20 ;
72489: LD_VAR 0 3
72493: PUSH
72494: LD_INT 20
72496: GREATER
72497: IFFALSE 72424
// end ;
72499: PPOPN 3
72501: END
// every 0 0$1 trigger StreamModeActive and sTime do
72502: LD_EXP 43
72506: PUSH
72507: LD_EXP 94
72511: AND
72512: IFFALSE 72547
72514: GO 72516
72516: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72517: LD_INT 28
72519: PPUSH
72520: LD_OWVAR 2
72524: PPUSH
72525: LD_INT 2
72527: PPUSH
72528: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72532: LD_INT 30
72534: PPUSH
72535: LD_OWVAR 2
72539: PPUSH
72540: LD_INT 2
72542: PPUSH
72543: CALL_OW 322
// end ;
72547: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72548: LD_EXP 43
72552: PUSH
72553: LD_EXP 95
72557: AND
72558: IFFALSE 72679
72560: GO 72562
72562: DISABLE
72563: LD_INT 0
72565: PPUSH
72566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72567: LD_ADDR_VAR 0 2
72571: PUSH
72572: LD_INT 22
72574: PUSH
72575: LD_OWVAR 2
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 21
72586: PUSH
72587: LD_INT 1
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: LD_INT 23
72599: PUSH
72600: LD_INT 0
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: LIST
72615: PPUSH
72616: CALL_OW 69
72620: ST_TO_ADDR
// if not tmp then
72621: LD_VAR 0 2
72625: NOT
72626: IFFALSE 72630
// exit ;
72628: GO 72679
// for i in tmp do
72630: LD_ADDR_VAR 0 1
72634: PUSH
72635: LD_VAR 0 2
72639: PUSH
72640: FOR_IN
72641: IFFALSE 72677
// begin if Crawls ( i ) then
72643: LD_VAR 0 1
72647: PPUSH
72648: CALL_OW 318
72652: IFFALSE 72663
// ComWalk ( i ) ;
72654: LD_VAR 0 1
72658: PPUSH
72659: CALL_OW 138
// SetClass ( i , 2 ) ;
72663: LD_VAR 0 1
72667: PPUSH
72668: LD_INT 2
72670: PPUSH
72671: CALL_OW 336
// end ;
72675: GO 72640
72677: POP
72678: POP
// end ;
72679: PPOPN 2
72681: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72682: LD_EXP 43
72686: PUSH
72687: LD_EXP 96
72691: AND
72692: IFFALSE 72980
72694: GO 72696
72696: DISABLE
72697: LD_INT 0
72699: PPUSH
72700: PPUSH
72701: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72702: LD_OWVAR 2
72706: PPUSH
72707: LD_INT 9
72709: PPUSH
72710: LD_INT 1
72712: PPUSH
72713: LD_INT 1
72715: PPUSH
72716: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72720: LD_INT 9
72722: PPUSH
72723: LD_OWVAR 2
72727: PPUSH
72728: CALL_OW 343
// uc_side := 9 ;
72732: LD_ADDR_OWVAR 20
72736: PUSH
72737: LD_INT 9
72739: ST_TO_ADDR
// uc_nation := 2 ;
72740: LD_ADDR_OWVAR 21
72744: PUSH
72745: LD_INT 2
72747: ST_TO_ADDR
// hc_name := Dark Warrior ;
72748: LD_ADDR_OWVAR 26
72752: PUSH
72753: LD_STRING Dark Warrior
72755: ST_TO_ADDR
// hc_gallery :=  ;
72756: LD_ADDR_OWVAR 33
72760: PUSH
72761: LD_STRING 
72763: ST_TO_ADDR
// hc_noskilllimit := true ;
72764: LD_ADDR_OWVAR 76
72768: PUSH
72769: LD_INT 1
72771: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72772: LD_ADDR_OWVAR 31
72776: PUSH
72777: LD_INT 30
72779: PUSH
72780: LD_INT 30
72782: PUSH
72783: LD_INT 30
72785: PUSH
72786: LD_INT 30
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: ST_TO_ADDR
// un := CreateHuman ;
72795: LD_ADDR_VAR 0 3
72799: PUSH
72800: CALL_OW 44
72804: ST_TO_ADDR
// hc_noskilllimit := false ;
72805: LD_ADDR_OWVAR 76
72809: PUSH
72810: LD_INT 0
72812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72813: LD_VAR 0 3
72817: PPUSH
72818: LD_INT 1
72820: PPUSH
72821: CALL_OW 51
// ToLua ( playRanger() ) ;
72825: LD_STRING playRanger()
72827: PPUSH
72828: CALL_OW 559
// p := 0 ;
72832: LD_ADDR_VAR 0 2
72836: PUSH
72837: LD_INT 0
72839: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72840: LD_INT 35
72842: PPUSH
72843: CALL_OW 67
// p := p + 1 ;
72847: LD_ADDR_VAR 0 2
72851: PUSH
72852: LD_VAR 0 2
72856: PUSH
72857: LD_INT 1
72859: PLUS
72860: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
72861: LD_VAR 0 3
72865: PPUSH
72866: CALL_OW 256
72870: PUSH
72871: LD_INT 1000
72873: LESS
72874: IFFALSE 72888
// SetLives ( un , 1000 ) ;
72876: LD_VAR 0 3
72880: PPUSH
72881: LD_INT 1000
72883: PPUSH
72884: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
72888: LD_VAR 0 3
72892: PPUSH
72893: LD_INT 81
72895: PUSH
72896: LD_OWVAR 2
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 91
72907: PUSH
72908: LD_VAR 0 3
72912: PUSH
72913: LD_INT 30
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: LIST
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PPUSH
72925: CALL_OW 69
72929: PPUSH
72930: LD_VAR 0 3
72934: PPUSH
72935: CALL_OW 74
72939: PPUSH
72940: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72944: LD_VAR 0 2
72948: PUSH
72949: LD_INT 80
72951: GREATER
72952: PUSH
72953: LD_VAR 0 3
72957: PPUSH
72958: CALL_OW 301
72962: OR
72963: IFFALSE 72840
// if un then
72965: LD_VAR 0 3
72969: IFFALSE 72980
// RemoveUnit ( un ) ;
72971: LD_VAR 0 3
72975: PPUSH
72976: CALL_OW 64
// end ;
72980: PPOPN 3
72982: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72983: LD_EXP 97
72987: IFFALSE 73103
72989: GO 72991
72991: DISABLE
72992: LD_INT 0
72994: PPUSH
72995: PPUSH
72996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72997: LD_ADDR_VAR 0 2
73001: PUSH
73002: LD_INT 81
73004: PUSH
73005: LD_OWVAR 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 21
73016: PUSH
73017: LD_INT 1
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PPUSH
73028: CALL_OW 69
73032: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73033: LD_STRING playComputer()
73035: PPUSH
73036: CALL_OW 559
// if not tmp then
73040: LD_VAR 0 2
73044: NOT
73045: IFFALSE 73049
// exit ;
73047: GO 73103
// for i in tmp do
73049: LD_ADDR_VAR 0 1
73053: PUSH
73054: LD_VAR 0 2
73058: PUSH
73059: FOR_IN
73060: IFFALSE 73101
// for j := 1 to 4 do
73062: LD_ADDR_VAR 0 3
73066: PUSH
73067: DOUBLE
73068: LD_INT 1
73070: DEC
73071: ST_TO_ADDR
73072: LD_INT 4
73074: PUSH
73075: FOR_TO
73076: IFFALSE 73097
// SetSkill ( i , j , 10 ) ;
73078: LD_VAR 0 1
73082: PPUSH
73083: LD_VAR 0 3
73087: PPUSH
73088: LD_INT 10
73090: PPUSH
73091: CALL_OW 237
73095: GO 73075
73097: POP
73098: POP
73099: GO 73059
73101: POP
73102: POP
// end ;
73103: PPOPN 3
73105: END
// every 0 0$1 trigger s30 do var i , tmp ;
73106: LD_EXP 98
73110: IFFALSE 73179
73112: GO 73114
73114: DISABLE
73115: LD_INT 0
73117: PPUSH
73118: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73119: LD_ADDR_VAR 0 2
73123: PUSH
73124: LD_INT 22
73126: PUSH
73127: LD_OWVAR 2
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PPUSH
73136: CALL_OW 69
73140: ST_TO_ADDR
// if not tmp then
73141: LD_VAR 0 2
73145: NOT
73146: IFFALSE 73150
// exit ;
73148: GO 73179
// for i in tmp do
73150: LD_ADDR_VAR 0 1
73154: PUSH
73155: LD_VAR 0 2
73159: PUSH
73160: FOR_IN
73161: IFFALSE 73177
// SetLives ( i , 300 ) ;
73163: LD_VAR 0 1
73167: PPUSH
73168: LD_INT 300
73170: PPUSH
73171: CALL_OW 234
73175: GO 73160
73177: POP
73178: POP
// end ;
73179: PPOPN 2
73181: END
// every 0 0$1 trigger s60 do var i , tmp ;
73182: LD_EXP 99
73186: IFFALSE 73255
73188: GO 73190
73190: DISABLE
73191: LD_INT 0
73193: PPUSH
73194: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73195: LD_ADDR_VAR 0 2
73199: PUSH
73200: LD_INT 22
73202: PUSH
73203: LD_OWVAR 2
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PPUSH
73212: CALL_OW 69
73216: ST_TO_ADDR
// if not tmp then
73217: LD_VAR 0 2
73221: NOT
73222: IFFALSE 73226
// exit ;
73224: GO 73255
// for i in tmp do
73226: LD_ADDR_VAR 0 1
73230: PUSH
73231: LD_VAR 0 2
73235: PUSH
73236: FOR_IN
73237: IFFALSE 73253
// SetLives ( i , 600 ) ;
73239: LD_VAR 0 1
73243: PPUSH
73244: LD_INT 600
73246: PPUSH
73247: CALL_OW 234
73251: GO 73236
73253: POP
73254: POP
// end ;
73255: PPOPN 2
73257: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73258: LD_INT 0
73260: PPUSH
// case cmd of 301 :
73261: LD_VAR 0 1
73265: PUSH
73266: LD_INT 301
73268: DOUBLE
73269: EQUAL
73270: IFTRUE 73274
73272: GO 73306
73274: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73275: LD_VAR 0 6
73279: PPUSH
73280: LD_VAR 0 7
73284: PPUSH
73285: LD_VAR 0 8
73289: PPUSH
73290: LD_VAR 0 4
73294: PPUSH
73295: LD_VAR 0 5
73299: PPUSH
73300: CALL 74507 0 5
73304: GO 73427
73306: LD_INT 302
73308: DOUBLE
73309: EQUAL
73310: IFTRUE 73314
73312: GO 73351
73314: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73315: LD_VAR 0 6
73319: PPUSH
73320: LD_VAR 0 7
73324: PPUSH
73325: LD_VAR 0 8
73329: PPUSH
73330: LD_VAR 0 9
73334: PPUSH
73335: LD_VAR 0 4
73339: PPUSH
73340: LD_VAR 0 5
73344: PPUSH
73345: CALL 74598 0 6
73349: GO 73427
73351: LD_INT 303
73353: DOUBLE
73354: EQUAL
73355: IFTRUE 73359
73357: GO 73396
73359: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73360: LD_VAR 0 6
73364: PPUSH
73365: LD_VAR 0 7
73369: PPUSH
73370: LD_VAR 0 8
73374: PPUSH
73375: LD_VAR 0 9
73379: PPUSH
73380: LD_VAR 0 4
73384: PPUSH
73385: LD_VAR 0 5
73389: PPUSH
73390: CALL 73432 0 6
73394: GO 73427
73396: LD_INT 304
73398: DOUBLE
73399: EQUAL
73400: IFTRUE 73404
73402: GO 73426
73404: POP
// hHackTeleport ( unit , x , y ) ; end ;
73405: LD_VAR 0 2
73409: PPUSH
73410: LD_VAR 0 4
73414: PPUSH
73415: LD_VAR 0 5
73419: PPUSH
73420: CALL 75191 0 3
73424: GO 73427
73426: POP
// end ;
73427: LD_VAR 0 12
73431: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73432: LD_INT 0
73434: PPUSH
73435: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73436: LD_VAR 0 1
73440: PUSH
73441: LD_INT 1
73443: LESS
73444: PUSH
73445: LD_VAR 0 1
73449: PUSH
73450: LD_INT 3
73452: GREATER
73453: OR
73454: PUSH
73455: LD_VAR 0 5
73459: PPUSH
73460: LD_VAR 0 6
73464: PPUSH
73465: CALL_OW 428
73469: OR
73470: IFFALSE 73474
// exit ;
73472: GO 74194
// uc_side := your_side ;
73474: LD_ADDR_OWVAR 20
73478: PUSH
73479: LD_OWVAR 2
73483: ST_TO_ADDR
// uc_nation := nation ;
73484: LD_ADDR_OWVAR 21
73488: PUSH
73489: LD_VAR 0 1
73493: ST_TO_ADDR
// bc_level = 1 ;
73494: LD_ADDR_OWVAR 43
73498: PUSH
73499: LD_INT 1
73501: ST_TO_ADDR
// case btype of 1 :
73502: LD_VAR 0 2
73506: PUSH
73507: LD_INT 1
73509: DOUBLE
73510: EQUAL
73511: IFTRUE 73515
73513: GO 73526
73515: POP
// bc_type := b_depot ; 2 :
73516: LD_ADDR_OWVAR 42
73520: PUSH
73521: LD_INT 0
73523: ST_TO_ADDR
73524: GO 74138
73526: LD_INT 2
73528: DOUBLE
73529: EQUAL
73530: IFTRUE 73534
73532: GO 73545
73534: POP
// bc_type := b_warehouse ; 3 :
73535: LD_ADDR_OWVAR 42
73539: PUSH
73540: LD_INT 1
73542: ST_TO_ADDR
73543: GO 74138
73545: LD_INT 3
73547: DOUBLE
73548: EQUAL
73549: IFTRUE 73553
73551: GO 73564
73553: POP
// bc_type := b_lab ; 4 .. 9 :
73554: LD_ADDR_OWVAR 42
73558: PUSH
73559: LD_INT 6
73561: ST_TO_ADDR
73562: GO 74138
73564: LD_INT 4
73566: DOUBLE
73567: GREATEREQUAL
73568: IFFALSE 73576
73570: LD_INT 9
73572: DOUBLE
73573: LESSEQUAL
73574: IFTRUE 73578
73576: GO 73630
73578: POP
// begin bc_type := b_lab_half ;
73579: LD_ADDR_OWVAR 42
73583: PUSH
73584: LD_INT 7
73586: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73587: LD_ADDR_OWVAR 44
73591: PUSH
73592: LD_INT 10
73594: PUSH
73595: LD_INT 11
73597: PUSH
73598: LD_INT 12
73600: PUSH
73601: LD_INT 15
73603: PUSH
73604: LD_INT 14
73606: PUSH
73607: LD_INT 13
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: PUSH
73618: LD_VAR 0 2
73622: PUSH
73623: LD_INT 3
73625: MINUS
73626: ARRAY
73627: ST_TO_ADDR
// end ; 10 .. 13 :
73628: GO 74138
73630: LD_INT 10
73632: DOUBLE
73633: GREATEREQUAL
73634: IFFALSE 73642
73636: LD_INT 13
73638: DOUBLE
73639: LESSEQUAL
73640: IFTRUE 73644
73642: GO 73721
73644: POP
// begin bc_type := b_lab_full ;
73645: LD_ADDR_OWVAR 42
73649: PUSH
73650: LD_INT 8
73652: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73653: LD_ADDR_OWVAR 44
73657: PUSH
73658: LD_INT 10
73660: PUSH
73661: LD_INT 12
73663: PUSH
73664: LD_INT 14
73666: PUSH
73667: LD_INT 13
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: PUSH
73676: LD_VAR 0 2
73680: PUSH
73681: LD_INT 9
73683: MINUS
73684: ARRAY
73685: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73686: LD_ADDR_OWVAR 45
73690: PUSH
73691: LD_INT 11
73693: PUSH
73694: LD_INT 15
73696: PUSH
73697: LD_INT 12
73699: PUSH
73700: LD_INT 15
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: PUSH
73709: LD_VAR 0 2
73713: PUSH
73714: LD_INT 9
73716: MINUS
73717: ARRAY
73718: ST_TO_ADDR
// end ; 14 :
73719: GO 74138
73721: LD_INT 14
73723: DOUBLE
73724: EQUAL
73725: IFTRUE 73729
73727: GO 73740
73729: POP
// bc_type := b_workshop ; 15 :
73730: LD_ADDR_OWVAR 42
73734: PUSH
73735: LD_INT 2
73737: ST_TO_ADDR
73738: GO 74138
73740: LD_INT 15
73742: DOUBLE
73743: EQUAL
73744: IFTRUE 73748
73746: GO 73759
73748: POP
// bc_type := b_factory ; 16 :
73749: LD_ADDR_OWVAR 42
73753: PUSH
73754: LD_INT 3
73756: ST_TO_ADDR
73757: GO 74138
73759: LD_INT 16
73761: DOUBLE
73762: EQUAL
73763: IFTRUE 73767
73765: GO 73778
73767: POP
// bc_type := b_ext_gun ; 17 :
73768: LD_ADDR_OWVAR 42
73772: PUSH
73773: LD_INT 17
73775: ST_TO_ADDR
73776: GO 74138
73778: LD_INT 17
73780: DOUBLE
73781: EQUAL
73782: IFTRUE 73786
73784: GO 73814
73786: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73787: LD_ADDR_OWVAR 42
73791: PUSH
73792: LD_INT 19
73794: PUSH
73795: LD_INT 23
73797: PUSH
73798: LD_INT 19
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: LIST
73805: PUSH
73806: LD_VAR 0 1
73810: ARRAY
73811: ST_TO_ADDR
73812: GO 74138
73814: LD_INT 18
73816: DOUBLE
73817: EQUAL
73818: IFTRUE 73822
73820: GO 73833
73822: POP
// bc_type := b_ext_radar ; 19 :
73823: LD_ADDR_OWVAR 42
73827: PUSH
73828: LD_INT 20
73830: ST_TO_ADDR
73831: GO 74138
73833: LD_INT 19
73835: DOUBLE
73836: EQUAL
73837: IFTRUE 73841
73839: GO 73852
73841: POP
// bc_type := b_ext_radio ; 20 :
73842: LD_ADDR_OWVAR 42
73846: PUSH
73847: LD_INT 22
73849: ST_TO_ADDR
73850: GO 74138
73852: LD_INT 20
73854: DOUBLE
73855: EQUAL
73856: IFTRUE 73860
73858: GO 73871
73860: POP
// bc_type := b_ext_siberium ; 21 :
73861: LD_ADDR_OWVAR 42
73865: PUSH
73866: LD_INT 21
73868: ST_TO_ADDR
73869: GO 74138
73871: LD_INT 21
73873: DOUBLE
73874: EQUAL
73875: IFTRUE 73879
73877: GO 73890
73879: POP
// bc_type := b_ext_computer ; 22 :
73880: LD_ADDR_OWVAR 42
73884: PUSH
73885: LD_INT 24
73887: ST_TO_ADDR
73888: GO 74138
73890: LD_INT 22
73892: DOUBLE
73893: EQUAL
73894: IFTRUE 73898
73896: GO 73909
73898: POP
// bc_type := b_ext_track ; 23 :
73899: LD_ADDR_OWVAR 42
73903: PUSH
73904: LD_INT 16
73906: ST_TO_ADDR
73907: GO 74138
73909: LD_INT 23
73911: DOUBLE
73912: EQUAL
73913: IFTRUE 73917
73915: GO 73928
73917: POP
// bc_type := b_ext_laser ; 24 :
73918: LD_ADDR_OWVAR 42
73922: PUSH
73923: LD_INT 25
73925: ST_TO_ADDR
73926: GO 74138
73928: LD_INT 24
73930: DOUBLE
73931: EQUAL
73932: IFTRUE 73936
73934: GO 73947
73936: POP
// bc_type := b_control_tower ; 25 :
73937: LD_ADDR_OWVAR 42
73941: PUSH
73942: LD_INT 36
73944: ST_TO_ADDR
73945: GO 74138
73947: LD_INT 25
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73955
73953: GO 73966
73955: POP
// bc_type := b_breastwork ; 26 :
73956: LD_ADDR_OWVAR 42
73960: PUSH
73961: LD_INT 31
73963: ST_TO_ADDR
73964: GO 74138
73966: LD_INT 26
73968: DOUBLE
73969: EQUAL
73970: IFTRUE 73974
73972: GO 73985
73974: POP
// bc_type := b_bunker ; 27 :
73975: LD_ADDR_OWVAR 42
73979: PUSH
73980: LD_INT 32
73982: ST_TO_ADDR
73983: GO 74138
73985: LD_INT 27
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 73993
73991: GO 74004
73993: POP
// bc_type := b_turret ; 28 :
73994: LD_ADDR_OWVAR 42
73998: PUSH
73999: LD_INT 33
74001: ST_TO_ADDR
74002: GO 74138
74004: LD_INT 28
74006: DOUBLE
74007: EQUAL
74008: IFTRUE 74012
74010: GO 74023
74012: POP
// bc_type := b_armoury ; 29 :
74013: LD_ADDR_OWVAR 42
74017: PUSH
74018: LD_INT 4
74020: ST_TO_ADDR
74021: GO 74138
74023: LD_INT 29
74025: DOUBLE
74026: EQUAL
74027: IFTRUE 74031
74029: GO 74042
74031: POP
// bc_type := b_barracks ; 30 :
74032: LD_ADDR_OWVAR 42
74036: PUSH
74037: LD_INT 5
74039: ST_TO_ADDR
74040: GO 74138
74042: LD_INT 30
74044: DOUBLE
74045: EQUAL
74046: IFTRUE 74050
74048: GO 74061
74050: POP
// bc_type := b_solar_power ; 31 :
74051: LD_ADDR_OWVAR 42
74055: PUSH
74056: LD_INT 27
74058: ST_TO_ADDR
74059: GO 74138
74061: LD_INT 31
74063: DOUBLE
74064: EQUAL
74065: IFTRUE 74069
74067: GO 74080
74069: POP
// bc_type := b_oil_power ; 32 :
74070: LD_ADDR_OWVAR 42
74074: PUSH
74075: LD_INT 26
74077: ST_TO_ADDR
74078: GO 74138
74080: LD_INT 32
74082: DOUBLE
74083: EQUAL
74084: IFTRUE 74088
74086: GO 74099
74088: POP
// bc_type := b_siberite_power ; 33 :
74089: LD_ADDR_OWVAR 42
74093: PUSH
74094: LD_INT 28
74096: ST_TO_ADDR
74097: GO 74138
74099: LD_INT 33
74101: DOUBLE
74102: EQUAL
74103: IFTRUE 74107
74105: GO 74118
74107: POP
// bc_type := b_oil_mine ; 34 :
74108: LD_ADDR_OWVAR 42
74112: PUSH
74113: LD_INT 29
74115: ST_TO_ADDR
74116: GO 74138
74118: LD_INT 34
74120: DOUBLE
74121: EQUAL
74122: IFTRUE 74126
74124: GO 74137
74126: POP
// bc_type := b_siberite_mine ; end ;
74127: LD_ADDR_OWVAR 42
74131: PUSH
74132: LD_INT 30
74134: ST_TO_ADDR
74135: GO 74138
74137: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74138: LD_ADDR_VAR 0 8
74142: PUSH
74143: LD_VAR 0 5
74147: PPUSH
74148: LD_VAR 0 6
74152: PPUSH
74153: LD_VAR 0 3
74157: PPUSH
74158: CALL_OW 47
74162: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74163: LD_OWVAR 42
74167: PUSH
74168: LD_INT 32
74170: PUSH
74171: LD_INT 33
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: IN
74178: IFFALSE 74194
// PlaceWeaponTurret ( b , weapon ) ;
74180: LD_VAR 0 8
74184: PPUSH
74185: LD_VAR 0 4
74189: PPUSH
74190: CALL_OW 431
// end ;
74194: LD_VAR 0 7
74198: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74199: LD_INT 0
74201: PPUSH
74202: PPUSH
74203: PPUSH
74204: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74205: LD_ADDR_VAR 0 4
74209: PUSH
74210: LD_INT 22
74212: PUSH
74213: LD_OWVAR 2
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 2
74224: PUSH
74225: LD_INT 30
74227: PUSH
74228: LD_INT 0
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 30
74237: PUSH
74238: LD_INT 1
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PPUSH
74254: CALL_OW 69
74258: ST_TO_ADDR
// if not tmp then
74259: LD_VAR 0 4
74263: NOT
74264: IFFALSE 74268
// exit ;
74266: GO 74327
// for i in tmp do
74268: LD_ADDR_VAR 0 2
74272: PUSH
74273: LD_VAR 0 4
74277: PUSH
74278: FOR_IN
74279: IFFALSE 74325
// for j = 1 to 3 do
74281: LD_ADDR_VAR 0 3
74285: PUSH
74286: DOUBLE
74287: LD_INT 1
74289: DEC
74290: ST_TO_ADDR
74291: LD_INT 3
74293: PUSH
74294: FOR_TO
74295: IFFALSE 74321
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74297: LD_VAR 0 2
74301: PPUSH
74302: CALL_OW 274
74306: PPUSH
74307: LD_VAR 0 3
74311: PPUSH
74312: LD_INT 99999
74314: PPUSH
74315: CALL_OW 277
74319: GO 74294
74321: POP
74322: POP
74323: GO 74278
74325: POP
74326: POP
// end ;
74327: LD_VAR 0 1
74331: RET
// export function hHackSetLevel10 ; var i , j ; begin
74332: LD_INT 0
74334: PPUSH
74335: PPUSH
74336: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74337: LD_ADDR_VAR 0 2
74341: PUSH
74342: LD_INT 21
74344: PUSH
74345: LD_INT 1
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PPUSH
74352: CALL_OW 69
74356: PUSH
74357: FOR_IN
74358: IFFALSE 74410
// if IsSelected ( i ) then
74360: LD_VAR 0 2
74364: PPUSH
74365: CALL_OW 306
74369: IFFALSE 74408
// begin for j := 1 to 4 do
74371: LD_ADDR_VAR 0 3
74375: PUSH
74376: DOUBLE
74377: LD_INT 1
74379: DEC
74380: ST_TO_ADDR
74381: LD_INT 4
74383: PUSH
74384: FOR_TO
74385: IFFALSE 74406
// SetSkill ( i , j , 10 ) ;
74387: LD_VAR 0 2
74391: PPUSH
74392: LD_VAR 0 3
74396: PPUSH
74397: LD_INT 10
74399: PPUSH
74400: CALL_OW 237
74404: GO 74384
74406: POP
74407: POP
// end ;
74408: GO 74357
74410: POP
74411: POP
// end ;
74412: LD_VAR 0 1
74416: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74417: LD_INT 0
74419: PPUSH
74420: PPUSH
74421: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74422: LD_ADDR_VAR 0 2
74426: PUSH
74427: LD_INT 22
74429: PUSH
74430: LD_OWVAR 2
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 21
74441: PUSH
74442: LD_INT 1
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: EMPTY
74450: LIST
74451: LIST
74452: PPUSH
74453: CALL_OW 69
74457: PUSH
74458: FOR_IN
74459: IFFALSE 74500
// begin for j := 1 to 4 do
74461: LD_ADDR_VAR 0 3
74465: PUSH
74466: DOUBLE
74467: LD_INT 1
74469: DEC
74470: ST_TO_ADDR
74471: LD_INT 4
74473: PUSH
74474: FOR_TO
74475: IFFALSE 74496
// SetSkill ( i , j , 10 ) ;
74477: LD_VAR 0 2
74481: PPUSH
74482: LD_VAR 0 3
74486: PPUSH
74487: LD_INT 10
74489: PPUSH
74490: CALL_OW 237
74494: GO 74474
74496: POP
74497: POP
// end ;
74498: GO 74458
74500: POP
74501: POP
// end ;
74502: LD_VAR 0 1
74506: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74507: LD_INT 0
74509: PPUSH
// uc_side := your_side ;
74510: LD_ADDR_OWVAR 20
74514: PUSH
74515: LD_OWVAR 2
74519: ST_TO_ADDR
// uc_nation := nation ;
74520: LD_ADDR_OWVAR 21
74524: PUSH
74525: LD_VAR 0 1
74529: ST_TO_ADDR
// InitHc ;
74530: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74534: LD_INT 0
74536: PPUSH
74537: LD_VAR 0 2
74541: PPUSH
74542: LD_VAR 0 3
74546: PPUSH
74547: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74551: LD_VAR 0 4
74555: PPUSH
74556: LD_VAR 0 5
74560: PPUSH
74561: CALL_OW 428
74565: PUSH
74566: LD_INT 0
74568: EQUAL
74569: IFFALSE 74593
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74571: CALL_OW 44
74575: PPUSH
74576: LD_VAR 0 4
74580: PPUSH
74581: LD_VAR 0 5
74585: PPUSH
74586: LD_INT 1
74588: PPUSH
74589: CALL_OW 48
// end ;
74593: LD_VAR 0 6
74597: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74598: LD_INT 0
74600: PPUSH
74601: PPUSH
// uc_side := your_side ;
74602: LD_ADDR_OWVAR 20
74606: PUSH
74607: LD_OWVAR 2
74611: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74612: LD_VAR 0 1
74616: PUSH
74617: LD_INT 1
74619: PUSH
74620: LD_INT 2
74622: PUSH
74623: LD_INT 3
74625: PUSH
74626: LD_INT 4
74628: PUSH
74629: LD_INT 5
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: IN
74639: IFFALSE 74651
// uc_nation := nation_american else
74641: LD_ADDR_OWVAR 21
74645: PUSH
74646: LD_INT 1
74648: ST_TO_ADDR
74649: GO 74694
// if chassis in [ 11 , 12 , 13 , 14 ] then
74651: LD_VAR 0 1
74655: PUSH
74656: LD_INT 11
74658: PUSH
74659: LD_INT 12
74661: PUSH
74662: LD_INT 13
74664: PUSH
74665: LD_INT 14
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: IN
74674: IFFALSE 74686
// uc_nation := nation_arabian else
74676: LD_ADDR_OWVAR 21
74680: PUSH
74681: LD_INT 2
74683: ST_TO_ADDR
74684: GO 74694
// uc_nation := nation_russian ;
74686: LD_ADDR_OWVAR 21
74690: PUSH
74691: LD_INT 3
74693: ST_TO_ADDR
// vc_chassis := chassis ;
74694: LD_ADDR_OWVAR 37
74698: PUSH
74699: LD_VAR 0 1
74703: ST_TO_ADDR
// vc_engine := engine ;
74704: LD_ADDR_OWVAR 39
74708: PUSH
74709: LD_VAR 0 2
74713: ST_TO_ADDR
// vc_control := control ;
74714: LD_ADDR_OWVAR 38
74718: PUSH
74719: LD_VAR 0 3
74723: ST_TO_ADDR
// vc_weapon := weapon ;
74724: LD_ADDR_OWVAR 40
74728: PUSH
74729: LD_VAR 0 4
74733: ST_TO_ADDR
// un := CreateVehicle ;
74734: LD_ADDR_VAR 0 8
74738: PUSH
74739: CALL_OW 45
74743: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74744: LD_VAR 0 8
74748: PPUSH
74749: LD_INT 0
74751: PPUSH
74752: LD_INT 5
74754: PPUSH
74755: CALL_OW 12
74759: PPUSH
74760: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74764: LD_VAR 0 8
74768: PPUSH
74769: LD_VAR 0 5
74773: PPUSH
74774: LD_VAR 0 6
74778: PPUSH
74779: LD_INT 1
74781: PPUSH
74782: CALL_OW 48
// end ;
74786: LD_VAR 0 7
74790: RET
// export hInvincible ; every 1 do
74791: GO 74793
74793: DISABLE
// hInvincible := [ ] ;
74794: LD_ADDR_EXP 100
74798: PUSH
74799: EMPTY
74800: ST_TO_ADDR
74801: END
// every 10 do var i ;
74802: GO 74804
74804: DISABLE
74805: LD_INT 0
74807: PPUSH
// begin enable ;
74808: ENABLE
// if not hInvincible then
74809: LD_EXP 100
74813: NOT
74814: IFFALSE 74818
// exit ;
74816: GO 74862
// for i in hInvincible do
74818: LD_ADDR_VAR 0 1
74822: PUSH
74823: LD_EXP 100
74827: PUSH
74828: FOR_IN
74829: IFFALSE 74860
// if GetLives ( i ) < 1000 then
74831: LD_VAR 0 1
74835: PPUSH
74836: CALL_OW 256
74840: PUSH
74841: LD_INT 1000
74843: LESS
74844: IFFALSE 74858
// SetLives ( i , 1000 ) ;
74846: LD_VAR 0 1
74850: PPUSH
74851: LD_INT 1000
74853: PPUSH
74854: CALL_OW 234
74858: GO 74828
74860: POP
74861: POP
// end ;
74862: PPOPN 1
74864: END
// export function hHackInvincible ; var i ; begin
74865: LD_INT 0
74867: PPUSH
74868: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74869: LD_ADDR_VAR 0 2
74873: PUSH
74874: LD_INT 2
74876: PUSH
74877: LD_INT 21
74879: PUSH
74880: LD_INT 1
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 21
74889: PUSH
74890: LD_INT 2
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: LIST
74901: PPUSH
74902: CALL_OW 69
74906: PUSH
74907: FOR_IN
74908: IFFALSE 74969
// if IsSelected ( i ) then
74910: LD_VAR 0 2
74914: PPUSH
74915: CALL_OW 306
74919: IFFALSE 74967
// begin if i in hInvincible then
74921: LD_VAR 0 2
74925: PUSH
74926: LD_EXP 100
74930: IN
74931: IFFALSE 74951
// hInvincible := hInvincible diff i else
74933: LD_ADDR_EXP 100
74937: PUSH
74938: LD_EXP 100
74942: PUSH
74943: LD_VAR 0 2
74947: DIFF
74948: ST_TO_ADDR
74949: GO 74967
// hInvincible := hInvincible union i ;
74951: LD_ADDR_EXP 100
74955: PUSH
74956: LD_EXP 100
74960: PUSH
74961: LD_VAR 0 2
74965: UNION
74966: ST_TO_ADDR
// end ;
74967: GO 74907
74969: POP
74970: POP
// end ;
74971: LD_VAR 0 1
74975: RET
// export function hHackInvisible ; var i , j ; begin
74976: LD_INT 0
74978: PPUSH
74979: PPUSH
74980: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74981: LD_ADDR_VAR 0 2
74985: PUSH
74986: LD_INT 21
74988: PUSH
74989: LD_INT 1
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: PPUSH
74996: CALL_OW 69
75000: PUSH
75001: FOR_IN
75002: IFFALSE 75026
// if IsSelected ( i ) then
75004: LD_VAR 0 2
75008: PPUSH
75009: CALL_OW 306
75013: IFFALSE 75024
// ComForceInvisible ( i ) ;
75015: LD_VAR 0 2
75019: PPUSH
75020: CALL_OW 496
75024: GO 75001
75026: POP
75027: POP
// end ;
75028: LD_VAR 0 1
75032: RET
// export function hHackChangeYourSide ; begin
75033: LD_INT 0
75035: PPUSH
// if your_side = 8 then
75036: LD_OWVAR 2
75040: PUSH
75041: LD_INT 8
75043: EQUAL
75044: IFFALSE 75056
// your_side := 0 else
75046: LD_ADDR_OWVAR 2
75050: PUSH
75051: LD_INT 0
75053: ST_TO_ADDR
75054: GO 75070
// your_side := your_side + 1 ;
75056: LD_ADDR_OWVAR 2
75060: PUSH
75061: LD_OWVAR 2
75065: PUSH
75066: LD_INT 1
75068: PLUS
75069: ST_TO_ADDR
// end ;
75070: LD_VAR 0 1
75074: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75075: LD_INT 0
75077: PPUSH
75078: PPUSH
75079: PPUSH
// for i in all_units do
75080: LD_ADDR_VAR 0 2
75084: PUSH
75085: LD_OWVAR 3
75089: PUSH
75090: FOR_IN
75091: IFFALSE 75169
// if IsSelected ( i ) then
75093: LD_VAR 0 2
75097: PPUSH
75098: CALL_OW 306
75102: IFFALSE 75167
// begin j := GetSide ( i ) ;
75104: LD_ADDR_VAR 0 3
75108: PUSH
75109: LD_VAR 0 2
75113: PPUSH
75114: CALL_OW 255
75118: ST_TO_ADDR
// if j = 8 then
75119: LD_VAR 0 3
75123: PUSH
75124: LD_INT 8
75126: EQUAL
75127: IFFALSE 75139
// j := 0 else
75129: LD_ADDR_VAR 0 3
75133: PUSH
75134: LD_INT 0
75136: ST_TO_ADDR
75137: GO 75153
// j := j + 1 ;
75139: LD_ADDR_VAR 0 3
75143: PUSH
75144: LD_VAR 0 3
75148: PUSH
75149: LD_INT 1
75151: PLUS
75152: ST_TO_ADDR
// SetSide ( i , j ) ;
75153: LD_VAR 0 2
75157: PPUSH
75158: LD_VAR 0 3
75162: PPUSH
75163: CALL_OW 235
// end ;
75167: GO 75090
75169: POP
75170: POP
// end ;
75171: LD_VAR 0 1
75175: RET
// export function hHackFog ; begin
75176: LD_INT 0
75178: PPUSH
// FogOff ( true ) ;
75179: LD_INT 1
75181: PPUSH
75182: CALL_OW 344
// end ;
75186: LD_VAR 0 1
75190: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75191: LD_INT 0
75193: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75194: LD_VAR 0 1
75198: PPUSH
75199: LD_VAR 0 2
75203: PPUSH
75204: LD_VAR 0 3
75208: PPUSH
75209: LD_INT 1
75211: PPUSH
75212: LD_INT 1
75214: PPUSH
75215: CALL_OW 483
// CenterOnXY ( x , y ) ;
75219: LD_VAR 0 2
75223: PPUSH
75224: LD_VAR 0 3
75228: PPUSH
75229: CALL_OW 84
// end ;
75233: LD_VAR 0 4
75237: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75238: LD_INT 0
75240: PPUSH
75241: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75242: LD_VAR 0 1
75246: NOT
75247: PUSH
75248: LD_VAR 0 2
75252: PPUSH
75253: LD_VAR 0 3
75257: PPUSH
75258: CALL_OW 488
75262: NOT
75263: OR
75264: PUSH
75265: LD_VAR 0 1
75269: PPUSH
75270: CALL_OW 266
75274: PUSH
75275: LD_INT 3
75277: NONEQUAL
75278: PUSH
75279: LD_VAR 0 1
75283: PPUSH
75284: CALL_OW 247
75288: PUSH
75289: LD_INT 1
75291: EQUAL
75292: NOT
75293: AND
75294: OR
75295: IFFALSE 75299
// exit ;
75297: GO 75448
// if GetType ( factory ) = unit_human then
75299: LD_VAR 0 1
75303: PPUSH
75304: CALL_OW 247
75308: PUSH
75309: LD_INT 1
75311: EQUAL
75312: IFFALSE 75329
// factory := IsInUnit ( factory ) ;
75314: LD_ADDR_VAR 0 1
75318: PUSH
75319: LD_VAR 0 1
75323: PPUSH
75324: CALL_OW 310
75328: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75329: LD_VAR 0 1
75333: PPUSH
75334: CALL_OW 266
75338: PUSH
75339: LD_INT 3
75341: NONEQUAL
75342: IFFALSE 75346
// exit ;
75344: GO 75448
// if HexInfo ( x , y ) = factory then
75346: LD_VAR 0 2
75350: PPUSH
75351: LD_VAR 0 3
75355: PPUSH
75356: CALL_OW 428
75360: PUSH
75361: LD_VAR 0 1
75365: EQUAL
75366: IFFALSE 75393
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75368: LD_ADDR_EXP 101
75372: PUSH
75373: LD_EXP 101
75377: PPUSH
75378: LD_VAR 0 1
75382: PPUSH
75383: LD_INT 0
75385: PPUSH
75386: CALL_OW 1
75390: ST_TO_ADDR
75391: GO 75444
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75393: LD_ADDR_EXP 101
75397: PUSH
75398: LD_EXP 101
75402: PPUSH
75403: LD_VAR 0 1
75407: PPUSH
75408: LD_VAR 0 1
75412: PPUSH
75413: CALL_OW 255
75417: PUSH
75418: LD_VAR 0 1
75422: PUSH
75423: LD_VAR 0 2
75427: PUSH
75428: LD_VAR 0 3
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: PPUSH
75439: CALL_OW 1
75443: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75444: CALL 75453 0 0
// end ;
75448: LD_VAR 0 4
75452: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75453: LD_INT 0
75455: PPUSH
75456: PPUSH
75457: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75458: LD_STRING resetFactoryWaypoint();
75460: PPUSH
75461: CALL_OW 559
// if factoryWaypoints then
75465: LD_EXP 101
75469: IFFALSE 75595
// begin list := PrepareArray ( factoryWaypoints ) ;
75471: LD_ADDR_VAR 0 3
75475: PUSH
75476: LD_EXP 101
75480: PPUSH
75481: CALL 56375 0 1
75485: ST_TO_ADDR
// for i := 1 to list do
75486: LD_ADDR_VAR 0 2
75490: PUSH
75491: DOUBLE
75492: LD_INT 1
75494: DEC
75495: ST_TO_ADDR
75496: LD_VAR 0 3
75500: PUSH
75501: FOR_TO
75502: IFFALSE 75593
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75504: LD_STRING setFactoryWaypointXY(
75506: PUSH
75507: LD_VAR 0 3
75511: PUSH
75512: LD_VAR 0 2
75516: ARRAY
75517: PUSH
75518: LD_INT 1
75520: ARRAY
75521: STR
75522: PUSH
75523: LD_STRING ,
75525: STR
75526: PUSH
75527: LD_VAR 0 3
75531: PUSH
75532: LD_VAR 0 2
75536: ARRAY
75537: PUSH
75538: LD_INT 2
75540: ARRAY
75541: STR
75542: PUSH
75543: LD_STRING ,
75545: STR
75546: PUSH
75547: LD_VAR 0 3
75551: PUSH
75552: LD_VAR 0 2
75556: ARRAY
75557: PUSH
75558: LD_INT 3
75560: ARRAY
75561: STR
75562: PUSH
75563: LD_STRING ,
75565: STR
75566: PUSH
75567: LD_VAR 0 3
75571: PUSH
75572: LD_VAR 0 2
75576: ARRAY
75577: PUSH
75578: LD_INT 4
75580: ARRAY
75581: STR
75582: PUSH
75583: LD_STRING )
75585: STR
75586: PPUSH
75587: CALL_OW 559
75591: GO 75501
75593: POP
75594: POP
// end ; end ;
75595: LD_VAR 0 1
75599: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75600: LD_INT 0
75602: PPUSH
// if HexInfo ( x , y ) = warehouse then
75603: LD_VAR 0 2
75607: PPUSH
75608: LD_VAR 0 3
75612: PPUSH
75613: CALL_OW 428
75617: PUSH
75618: LD_VAR 0 1
75622: EQUAL
75623: IFFALSE 75650
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75625: LD_ADDR_EXP 102
75629: PUSH
75630: LD_EXP 102
75634: PPUSH
75635: LD_VAR 0 1
75639: PPUSH
75640: LD_INT 0
75642: PPUSH
75643: CALL_OW 1
75647: ST_TO_ADDR
75648: GO 75701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75650: LD_ADDR_EXP 102
75654: PUSH
75655: LD_EXP 102
75659: PPUSH
75660: LD_VAR 0 1
75664: PPUSH
75665: LD_VAR 0 1
75669: PPUSH
75670: CALL_OW 255
75674: PUSH
75675: LD_VAR 0 1
75679: PUSH
75680: LD_VAR 0 2
75684: PUSH
75685: LD_VAR 0 3
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: PPUSH
75696: CALL_OW 1
75700: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75701: CALL 75710 0 0
// end ;
75705: LD_VAR 0 4
75709: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75710: LD_INT 0
75712: PPUSH
75713: PPUSH
75714: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75715: LD_STRING resetWarehouseGatheringPoints();
75717: PPUSH
75718: CALL_OW 559
// if warehouseGatheringPoints then
75722: LD_EXP 102
75726: IFFALSE 75852
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75728: LD_ADDR_VAR 0 3
75732: PUSH
75733: LD_EXP 102
75737: PPUSH
75738: CALL 56375 0 1
75742: ST_TO_ADDR
// for i := 1 to list do
75743: LD_ADDR_VAR 0 2
75747: PUSH
75748: DOUBLE
75749: LD_INT 1
75751: DEC
75752: ST_TO_ADDR
75753: LD_VAR 0 3
75757: PUSH
75758: FOR_TO
75759: IFFALSE 75850
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75761: LD_STRING setWarehouseGatheringPointXY(
75763: PUSH
75764: LD_VAR 0 3
75768: PUSH
75769: LD_VAR 0 2
75773: ARRAY
75774: PUSH
75775: LD_INT 1
75777: ARRAY
75778: STR
75779: PUSH
75780: LD_STRING ,
75782: STR
75783: PUSH
75784: LD_VAR 0 3
75788: PUSH
75789: LD_VAR 0 2
75793: ARRAY
75794: PUSH
75795: LD_INT 2
75797: ARRAY
75798: STR
75799: PUSH
75800: LD_STRING ,
75802: STR
75803: PUSH
75804: LD_VAR 0 3
75808: PUSH
75809: LD_VAR 0 2
75813: ARRAY
75814: PUSH
75815: LD_INT 3
75817: ARRAY
75818: STR
75819: PUSH
75820: LD_STRING ,
75822: STR
75823: PUSH
75824: LD_VAR 0 3
75828: PUSH
75829: LD_VAR 0 2
75833: ARRAY
75834: PUSH
75835: LD_INT 4
75837: ARRAY
75838: STR
75839: PUSH
75840: LD_STRING )
75842: STR
75843: PPUSH
75844: CALL_OW 559
75848: GO 75758
75850: POP
75851: POP
// end ; end ;
75852: LD_VAR 0 1
75856: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
75857: LD_EXP 102
75861: IFFALSE 76548
75863: GO 75865
75865: DISABLE
75866: LD_INT 0
75868: PPUSH
75869: PPUSH
75870: PPUSH
75871: PPUSH
75872: PPUSH
75873: PPUSH
75874: PPUSH
75875: PPUSH
75876: PPUSH
// begin enable ;
75877: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
75878: LD_ADDR_VAR 0 3
75882: PUSH
75883: LD_EXP 102
75887: PPUSH
75888: CALL 56375 0 1
75892: ST_TO_ADDR
// if not list then
75893: LD_VAR 0 3
75897: NOT
75898: IFFALSE 75902
// exit ;
75900: GO 76548
// for i := 1 to list do
75902: LD_ADDR_VAR 0 1
75906: PUSH
75907: DOUBLE
75908: LD_INT 1
75910: DEC
75911: ST_TO_ADDR
75912: LD_VAR 0 3
75916: PUSH
75917: FOR_TO
75918: IFFALSE 76546
// begin depot := list [ i ] [ 2 ] ;
75920: LD_ADDR_VAR 0 8
75924: PUSH
75925: LD_VAR 0 3
75929: PUSH
75930: LD_VAR 0 1
75934: ARRAY
75935: PUSH
75936: LD_INT 2
75938: ARRAY
75939: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
75940: LD_ADDR_VAR 0 5
75944: PUSH
75945: LD_VAR 0 3
75949: PUSH
75950: LD_VAR 0 1
75954: ARRAY
75955: PUSH
75956: LD_INT 1
75958: ARRAY
75959: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
75960: LD_VAR 0 8
75964: PPUSH
75965: CALL_OW 301
75969: PUSH
75970: LD_VAR 0 5
75974: PUSH
75975: LD_VAR 0 8
75979: PPUSH
75980: CALL_OW 255
75984: NONEQUAL
75985: OR
75986: IFFALSE 76015
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
75988: LD_ADDR_EXP 102
75992: PUSH
75993: LD_EXP 102
75997: PPUSH
75998: LD_VAR 0 8
76002: PPUSH
76003: LD_INT 0
76005: PPUSH
76006: CALL_OW 1
76010: ST_TO_ADDR
// exit ;
76011: POP
76012: POP
76013: GO 76548
// end ; x := list [ i ] [ 3 ] ;
76015: LD_ADDR_VAR 0 6
76019: PUSH
76020: LD_VAR 0 3
76024: PUSH
76025: LD_VAR 0 1
76029: ARRAY
76030: PUSH
76031: LD_INT 3
76033: ARRAY
76034: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76035: LD_ADDR_VAR 0 7
76039: PUSH
76040: LD_VAR 0 3
76044: PUSH
76045: LD_VAR 0 1
76049: ARRAY
76050: PUSH
76051: LD_INT 4
76053: ARRAY
76054: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76055: LD_ADDR_VAR 0 9
76059: PUSH
76060: LD_VAR 0 6
76064: PPUSH
76065: LD_VAR 0 7
76069: PPUSH
76070: LD_INT 16
76072: PPUSH
76073: CALL 54959 0 3
76077: ST_TO_ADDR
// if not cratesNearbyPoint then
76078: LD_VAR 0 9
76082: NOT
76083: IFFALSE 76089
// exit ;
76085: POP
76086: POP
76087: GO 76548
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76089: LD_ADDR_VAR 0 4
76093: PUSH
76094: LD_INT 22
76096: PUSH
76097: LD_VAR 0 5
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 3
76108: PUSH
76109: LD_INT 60
76111: PUSH
76112: EMPTY
76113: LIST
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PUSH
76119: LD_INT 91
76121: PUSH
76122: LD_VAR 0 8
76126: PUSH
76127: LD_INT 6
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: LIST
76134: PUSH
76135: LD_INT 2
76137: PUSH
76138: LD_INT 25
76140: PUSH
76141: LD_INT 2
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 25
76150: PUSH
76151: LD_INT 16
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: LIST
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: PPUSH
76169: CALL_OW 69
76173: PUSH
76174: LD_VAR 0 8
76178: PPUSH
76179: CALL_OW 313
76183: PPUSH
76184: LD_INT 3
76186: PUSH
76187: LD_INT 60
76189: PUSH
76190: EMPTY
76191: LIST
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 2
76199: PUSH
76200: LD_INT 25
76202: PUSH
76203: LD_INT 2
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 25
76212: PUSH
76213: LD_INT 16
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: LIST
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PPUSH
76229: CALL_OW 72
76233: UNION
76234: ST_TO_ADDR
// if tmp then
76235: LD_VAR 0 4
76239: IFFALSE 76319
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76241: LD_ADDR_VAR 0 4
76245: PUSH
76246: LD_VAR 0 4
76250: PPUSH
76251: LD_INT 3
76253: PPUSH
76254: CALL 52926 0 2
76258: ST_TO_ADDR
// for j in tmp do
76259: LD_ADDR_VAR 0 2
76263: PUSH
76264: LD_VAR 0 4
76268: PUSH
76269: FOR_IN
76270: IFFALSE 76313
// begin if IsInUnit ( j ) then
76272: LD_VAR 0 2
76276: PPUSH
76277: CALL_OW 310
76281: IFFALSE 76292
// ComExit ( j ) ;
76283: LD_VAR 0 2
76287: PPUSH
76288: CALL 53009 0 1
// AddComCollect ( j , x , y ) ;
76292: LD_VAR 0 2
76296: PPUSH
76297: LD_VAR 0 6
76301: PPUSH
76302: LD_VAR 0 7
76306: PPUSH
76307: CALL_OW 177
// end ;
76311: GO 76269
76313: POP
76314: POP
// exit ;
76315: POP
76316: POP
76317: GO 76548
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76319: LD_ADDR_VAR 0 4
76323: PUSH
76324: LD_INT 22
76326: PUSH
76327: LD_VAR 0 5
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: PUSH
76336: LD_INT 91
76338: PUSH
76339: LD_VAR 0 8
76343: PUSH
76344: LD_INT 8
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: LD_INT 34
76357: PUSH
76358: LD_INT 12
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: LD_INT 34
76367: PUSH
76368: LD_INT 51
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 34
76377: PUSH
76378: LD_INT 32
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 34
76387: PUSH
76388: LD_EXP 105
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: LIST
76408: PPUSH
76409: CALL_OW 69
76413: ST_TO_ADDR
// if tmp then
76414: LD_VAR 0 4
76418: IFFALSE 76544
// begin for j in tmp do
76420: LD_ADDR_VAR 0 2
76424: PUSH
76425: LD_VAR 0 4
76429: PUSH
76430: FOR_IN
76431: IFFALSE 76542
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76433: LD_VAR 0 2
76437: PPUSH
76438: CALL_OW 262
76442: PUSH
76443: LD_INT 3
76445: EQUAL
76446: PUSH
76447: LD_VAR 0 2
76451: PPUSH
76452: CALL_OW 261
76456: PUSH
76457: LD_INT 20
76459: GREATER
76460: OR
76461: PUSH
76462: LD_VAR 0 2
76466: PPUSH
76467: CALL_OW 314
76471: NOT
76472: AND
76473: PUSH
76474: LD_VAR 0 2
76478: PPUSH
76479: CALL_OW 263
76483: PUSH
76484: LD_INT 1
76486: NONEQUAL
76487: PUSH
76488: LD_VAR 0 2
76492: PPUSH
76493: CALL_OW 311
76497: OR
76498: AND
76499: IFFALSE 76540
// begin ComCollect ( j , x , y ) ;
76501: LD_VAR 0 2
76505: PPUSH
76506: LD_VAR 0 6
76510: PPUSH
76511: LD_VAR 0 7
76515: PPUSH
76516: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76520: LD_VAR 0 2
76524: PPUSH
76525: LD_VAR 0 8
76529: PPUSH
76530: CALL_OW 172
// exit ;
76534: POP
76535: POP
76536: POP
76537: POP
76538: GO 76548
// end ;
76540: GO 76430
76542: POP
76543: POP
// end ; end ;
76544: GO 75917
76546: POP
76547: POP
// end ; end_of_file
76548: PPOPN 9
76550: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76551: LD_VAR 0 1
76555: PPUSH
76556: LD_VAR 0 2
76560: PPUSH
76561: LD_VAR 0 3
76565: PPUSH
76566: LD_VAR 0 4
76570: PPUSH
76571: LD_VAR 0 5
76575: PPUSH
76576: LD_VAR 0 6
76580: PPUSH
76581: CALL 60951 0 6
// end ;
76585: PPOPN 6
76587: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76588: LD_INT 0
76590: PPUSH
// begin if not units then
76591: LD_VAR 0 1
76595: NOT
76596: IFFALSE 76600
// exit ;
76598: GO 76600
// end ;
76600: PPOPN 7
76602: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76603: CALL 60922 0 0
// end ; end_of_file end_of_file
76607: PPOPN 1
76609: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
76610: LD_INT 0
76612: PPUSH
// ar_miner := 81 ;
76613: LD_ADDR_EXP 111
76617: PUSH
76618: LD_INT 81
76620: ST_TO_ADDR
// ar_crane := 88 ;
76621: LD_ADDR_EXP 110
76625: PUSH
76626: LD_INT 88
76628: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
76629: LD_ADDR_EXP 105
76633: PUSH
76634: LD_INT 89
76636: ST_TO_ADDR
// us_hack := 99 ;
76637: LD_ADDR_EXP 106
76641: PUSH
76642: LD_INT 99
76644: ST_TO_ADDR
// us_artillery := 97 ;
76645: LD_ADDR_EXP 107
76649: PUSH
76650: LD_INT 97
76652: ST_TO_ADDR
// ar_bio_bomb := 91 ;
76653: LD_ADDR_EXP 108
76657: PUSH
76658: LD_INT 91
76660: ST_TO_ADDR
// ar_mortar := 92 ;
76661: LD_ADDR_EXP 109
76665: PUSH
76666: LD_INT 92
76668: ST_TO_ADDR
// ru_flamethrower := 93 ;
76669: LD_ADDR_EXP 112
76673: PUSH
76674: LD_INT 93
76676: ST_TO_ADDR
// ru_radar := 98 ;
76677: LD_ADDR_EXP 104
76681: PUSH
76682: LD_INT 98
76684: ST_TO_ADDR
// tech_Artillery := 80 ;
76685: LD_ADDR_EXP 113
76689: PUSH
76690: LD_INT 80
76692: ST_TO_ADDR
// tech_RadMat := 81 ;
76693: LD_ADDR_EXP 114
76697: PUSH
76698: LD_INT 81
76700: ST_TO_ADDR
// tech_BasicTools := 82 ;
76701: LD_ADDR_EXP 115
76705: PUSH
76706: LD_INT 82
76708: ST_TO_ADDR
// tech_Cargo := 83 ;
76709: LD_ADDR_EXP 116
76713: PUSH
76714: LD_INT 83
76716: ST_TO_ADDR
// tech_Track := 84 ;
76717: LD_ADDR_EXP 117
76721: PUSH
76722: LD_INT 84
76724: ST_TO_ADDR
// tech_Crane := 85 ;
76725: LD_ADDR_EXP 118
76729: PUSH
76730: LD_INT 85
76732: ST_TO_ADDR
// tech_Bulldozer := 86 ;
76733: LD_ADDR_EXP 119
76737: PUSH
76738: LD_INT 86
76740: ST_TO_ADDR
// tech_Hovercraft := 87 ;
76741: LD_ADDR_EXP 120
76745: PUSH
76746: LD_INT 87
76748: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
76749: LD_ADDR_EXP 121
76753: PUSH
76754: LD_INT 88
76756: ST_TO_ADDR
// end ;
76757: LD_VAR 0 1
76761: RET
// every 1 do
76762: GO 76764
76764: DISABLE
// InitGlobalVariables ;
76765: CALL 76610 0 0
76769: END
