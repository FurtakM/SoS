// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 72008 0 0
// Init ;
   8: CALL 66 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 379 0 3
// PrepareAmerican ;
  32: CALL 2459 0 0
// PrepareArabian ;
  36: CALL 1177 0 0
// Action ;
  40: CALL 7167 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 65
// begin Difficulty := 4 ;
  50: LD_ADDR_OWVAR 67
  54: PUSH
  55: LD_INT 4
  57: ST_TO_ADDR
// FogOff ( 2 ) ;
  58: LD_INT 2
  60: PPUSH
  61: CALL_OW 344
// end ; end ;
  65: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// prefix := 06_ ;
  77: LD_ADDR_EXP 2
  81: PUSH
  82: LD_STRING 06_
  84: ST_TO_ADDR
// scoutActive := 0 ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutFailed := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// scoutSuccess := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usAttacksAllowed := false ;
 109: LD_ADDR_EXP 6
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// usSurrender := false ;
 117: LD_ADDR_EXP 7
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianAttack := false ;
 125: LD_ADDR_EXP 8
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// hasRockets := false ;
 133: LD_ADDR_EXP 9
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// seeRemoteVehicle := false ;
 141: LD_ADDR_EXP 10
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// seeHeavyGun := false ;
 149: LD_ADDR_EXP 11
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// end ; end_of_file
 157: LD_VAR 0 1
 161: RET
// export function SayX ( units , ident ) ; var i ; begin
 162: LD_INT 0
 164: PPUSH
 165: PPUSH
// result := false ;
 166: LD_ADDR_VAR 0 3
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// if not units then
 174: LD_VAR 0 1
 178: NOT
 179: IFFALSE 183
// exit ;
 181: GO 237
// for i in units do
 183: LD_ADDR_VAR 0 4
 187: PUSH
 188: LD_VAR 0 1
 192: PUSH
 193: FOR_IN
 194: IFFALSE 235
// if IsOk ( i ) then
 196: LD_VAR 0 4
 200: PPUSH
 201: CALL_OW 302
 205: IFFALSE 233
// begin Say ( i , ident ) ;
 207: LD_VAR 0 4
 211: PPUSH
 212: LD_VAR 0 2
 216: PPUSH
 217: CALL_OW 88
// result := i ;
 221: LD_ADDR_VAR 0 3
 225: PUSH
 226: LD_VAR 0 4
 230: ST_TO_ADDR
// break ;
 231: GO 235
// end ;
 233: GO 193
 235: POP
 236: POP
// end ;
 237: LD_VAR 0 3
 241: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 242: LD_INT 0
 244: PPUSH
 245: PPUSH
// InitUc ;
 246: CALL_OW 18
// InitHc ;
 250: CALL_OW 19
// uc_side := 0 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// uc_nation := 0 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// for i = 1 to amount do
 270: LD_ADDR_VAR 0 4
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_VAR 0 2
 284: PUSH
 285: FOR_TO
 286: IFFALSE 368
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 288: LD_ADDR_OWVAR 29
 292: PUSH
 293: LD_INT 9
 295: PPUSH
 296: LD_INT 12
 298: PPUSH
 299: CALL_OW 12
 303: PUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 12
 309: PPUSH
 310: CALL_OW 12
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 319: LD_ADDR_OWVAR 35
 323: PUSH
 324: LD_INT 1
 326: NEG
 327: PPUSH
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 12
 335: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 336: LD_INT 0
 338: PPUSH
 339: LD_INT 12
 341: PPUSH
 342: LD_INT 1
 344: PPUSH
 345: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 349: CALL_OW 44
 353: PPUSH
 354: LD_VAR 0 1
 358: PPUSH
 359: LD_INT 0
 361: PPUSH
 362: CALL_OW 49
// end ;
 366: GO 285
 368: POP
 369: POP
// InitHc ;
 370: CALL_OW 19
// end ;
 374: LD_VAR 0 3
 378: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 379: LD_INT 0
 381: PPUSH
 382: PPUSH
// uc_side := 0 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 0
 390: ST_TO_ADDR
// uc_nation := 0 ;
 391: LD_ADDR_OWVAR 21
 395: PUSH
 396: LD_INT 0
 398: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 399: LD_VAR 0 1
 403: PPUSH
 404: LD_INT 9
 406: PUSH
 407: LD_INT 8
 409: PUSH
 410: LD_INT 7
 412: PUSH
 413: LD_INT 6
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL 242 0 2
// for i := 1 to 4 do
 432: LD_ADDR_VAR 0 5
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_INT 4
 444: PUSH
 445: FOR_TO
 446: IFFALSE 485
// begin hc_class := class_horse ;
 448: LD_ADDR_OWVAR 28
 452: PUSH
 453: LD_EXP 117
 457: ST_TO_ADDR
// hc_gallery :=  ;
 458: LD_ADDR_OWVAR 33
 462: PUSH
 463: LD_STRING 
 465: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 466: CALL_OW 44
 470: PPUSH
 471: LD_VAR 0 2
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 49
// end ;
 483: GO 445
 485: POP
 486: POP
// for i = 1 to 5 do
 487: LD_ADDR_VAR 0 5
 491: PUSH
 492: DOUBLE
 493: LD_INT 1
 495: DEC
 496: ST_TO_ADDR
 497: LD_INT 5
 499: PUSH
 500: FOR_TO
 501: IFFALSE 555
// begin hc_class = class_tiger ;
 503: LD_ADDR_OWVAR 28
 507: PUSH
 508: LD_INT 14
 510: ST_TO_ADDR
// hc_gallery =  ;
 511: LD_ADDR_OWVAR 33
 515: PUSH
 516: LD_STRING 
 518: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 519: LD_ADDR_OWVAR 35
 523: PUSH
 524: LD_INT 7
 526: NEG
 527: PPUSH
 528: LD_INT 7
 530: PPUSH
 531: CALL_OW 12
 535: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 536: CALL_OW 44
 540: PPUSH
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: CALL 50717 0 3
// end ;
 553: GO 500
 555: POP
 556: POP
// for i := 1 to 4 do
 557: LD_ADDR_VAR 0 5
 561: PUSH
 562: DOUBLE
 563: LD_INT 1
 565: DEC
 566: ST_TO_ADDR
 567: LD_INT 4
 569: PUSH
 570: FOR_TO
 571: IFFALSE 608
// begin hc_class := class_phororhacos ;
 573: LD_ADDR_OWVAR 28
 577: PUSH
 578: LD_INT 18
 580: ST_TO_ADDR
// hc_gallery :=  ;
 581: LD_ADDR_OWVAR 33
 585: PUSH
 586: LD_STRING 
 588: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 589: CALL_OW 44
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 49
// end ;
 606: GO 570
 608: POP
 609: POP
// for i := 1 to 4 do
 610: LD_ADDR_VAR 0 5
 614: PUSH
 615: DOUBLE
 616: LD_INT 1
 618: DEC
 619: ST_TO_ADDR
 620: LD_INT 4
 622: PUSH
 623: FOR_TO
 624: IFFALSE 661
// begin hc_class := class_baggie ;
 626: LD_ADDR_OWVAR 28
 630: PUSH
 631: LD_INT 13
 633: ST_TO_ADDR
// hc_gallery :=  ;
 634: LD_ADDR_OWVAR 33
 638: PUSH
 639: LD_STRING 
 641: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 642: CALL_OW 44
 646: PPUSH
 647: LD_VAR 0 2
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 49
// end ;
 659: GO 623
 661: POP
 662: POP
// for i := 1 to 5 do
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: DOUBLE
 669: LD_INT 1
 671: DEC
 672: ST_TO_ADDR
 673: LD_INT 5
 675: PUSH
 676: FOR_TO
 677: IFFALSE 714
// begin hc_class := class_fish ;
 679: LD_ADDR_OWVAR 28
 683: PUSH
 684: LD_INT 20
 686: ST_TO_ADDR
// hc_gallery :=  ;
 687: LD_ADDR_OWVAR 33
 691: PUSH
 692: LD_STRING 
 694: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 3
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 676
 714: POP
 715: POP
// end ;
 716: LD_VAR 0 4
 720: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 721: LD_INT 0
 723: PPUSH
 724: PPUSH
 725: PPUSH
// if not observer or not unit then
 726: LD_VAR 0 1
 730: NOT
 731: PUSH
 732: LD_VAR 0 2
 736: NOT
 737: OR
 738: IFFALSE 742
// exit ;
 740: GO 790
// if not See ( GetSide ( observer ) , unit ) then
 742: LD_VAR 0 1
 746: PPUSH
 747: CALL_OW 255
 751: PPUSH
 752: LD_VAR 0 2
 756: PPUSH
 757: CALL_OW 292
 761: NOT
 762: IFFALSE 766
// exit ;
 764: GO 790
// result := GetDistUnits ( observer , unit ) < 12 ;
 766: LD_ADDR_VAR 0 3
 770: PUSH
 771: LD_VAR 0 1
 775: PPUSH
 776: LD_VAR 0 2
 780: PPUSH
 781: CALL_OW 296
 785: PUSH
 786: LD_INT 12
 788: LESS
 789: ST_TO_ADDR
// end ;
 790: LD_VAR 0 3
 794: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 795: LD_INT 0
 797: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 798: LD_VAR 0 2
 802: PUSH
 803: LD_INT 1
 805: ARRAY
 806: PPUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 2
 814: ARRAY
 815: PPUSH
 816: CALL_OW 488
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 428
 843: PUSH
 844: LD_INT 0
 846: EQUAL
 847: AND
 848: IFFALSE 882
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 1
 862: ARRAY
 863: PPUSH
 864: LD_VAR 0 2
 868: PUSH
 869: LD_INT 2
 871: ARRAY
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 48
// end ;
 882: LD_VAR 0 4
 886: RET
// export function ReverseArray ( array ) ; var i ; begin
 887: LD_INT 0
 889: PPUSH
 890: PPUSH
// if not array then
 891: LD_VAR 0 1
 895: NOT
 896: IFFALSE 900
// exit ;
 898: GO 958
// result := [ ] ;
 900: LD_ADDR_VAR 0 2
 904: PUSH
 905: EMPTY
 906: ST_TO_ADDR
// for i := 1 to array do
 907: LD_ADDR_VAR 0 3
 911: PUSH
 912: DOUBLE
 913: LD_INT 1
 915: DEC
 916: ST_TO_ADDR
 917: LD_VAR 0 1
 921: PUSH
 922: FOR_TO
 923: IFFALSE 956
// result := Insert ( result , 1 , array [ i ] ) ;
 925: LD_ADDR_VAR 0 2
 929: PUSH
 930: LD_VAR 0 2
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_VAR 0 1
 942: PUSH
 943: LD_VAR 0 3
 947: ARRAY
 948: PPUSH
 949: CALL_OW 2
 953: ST_TO_ADDR
 954: GO 922
 956: POP
 957: POP
// end ;
 958: LD_VAR 0 2
 962: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 963: LD_INT 0
 965: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: LD_VAR 0 2
 975: PPUSH
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_VAR 0 4
 985: PPUSH
 986: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 990: LD_VAR 0 1
 994: PPUSH
 995: LD_VAR 0 2
 999: PPUSH
1000: LD_VAR 0 3
1004: PPUSH
1005: CALL_OW 331
// end ;
1009: LD_VAR 0 5
1013: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1014: LD_INT 0
1016: PPUSH
// if not units then
1017: LD_VAR 0 1
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1109
// result := true ;
1026: LD_ADDR_VAR 0 4
1030: PUSH
1031: LD_INT 1
1033: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1034: LD_VAR 0 1
1038: PPUSH
1039: LD_INT 26
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PPUSH
1049: CALL_OW 72
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 88
1067: NOT
1068: IFFALSE 1109
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1070: LD_ADDR_VAR 0 4
1074: PUSH
1075: LD_VAR 0 1
1079: PPUSH
1080: LD_INT 26
1082: PUSH
1083: LD_INT 2
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: PPUSH
1090: CALL_OW 72
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: LD_VAR 0 3
1103: PPUSH
1104: CALL_OW 88
1108: ST_TO_ADDR
// end ;
1109: LD_VAR 0 4
1113: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
// if not group then
1118: LD_VAR 0 2
1122: NOT
1123: IFFALSE 1127
// exit ;
1125: GO 1172
// for i in group do
1127: LD_ADDR_VAR 0 4
1131: PUSH
1132: LD_VAR 0 2
1136: PUSH
1137: FOR_IN
1138: IFFALSE 1170
// if See ( side , i ) then
1140: LD_VAR 0 1
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 292
1154: IFFALSE 1168
// begin result := true ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: LD_INT 1
1163: ST_TO_ADDR
// exit ;
1164: POP
1165: POP
1166: GO 1172
// end ;
1168: GO 1137
1170: POP
1171: POP
// end ; end_of_file
1172: LD_VAR 0 3
1176: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
// uc_nation := 2 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 2
1189: ST_TO_ADDR
// uc_side := 5 ;
1190: LD_ADDR_OWVAR 20
1194: PUSH
1195: LD_INT 5
1197: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1198: LD_ADDR_EXP 20
1202: PUSH
1203: LD_STRING Abdul
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: LD_STRING 
1211: PPUSH
1212: CALL 15066 0 3
1216: ST_TO_ADDR
// uc_side := 2 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 2
1224: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1225: LD_ADDR_EXP 12
1229: PUSH
1230: LD_STRING Heike
1232: PPUSH
1233: LD_EXP 1
1237: NOT
1238: PPUSH
1239: LD_EXP 2
1243: PPUSH
1244: CALL 15066 0 3
1248: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1249: LD_ADDR_EXP 15
1253: PUSH
1254: LD_STRING Ibrahim
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL 15066 0 3
1272: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1273: LD_ADDR_EXP 13
1277: PUSH
1278: LD_STRING Givi
1280: PPUSH
1281: LD_EXP 1
1285: NOT
1286: PPUSH
1287: LD_EXP 2
1291: PPUSH
1292: CALL 15066 0 3
1296: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1297: LD_ADDR_EXP 16
1301: PUSH
1302: LD_STRING Kamil
1304: PPUSH
1305: LD_EXP 1
1309: NOT
1310: PPUSH
1311: LD_EXP 2
1315: PPUSH
1316: CALL 15066 0 3
1320: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1321: LD_ADDR_EXP 17
1325: PUSH
1326: LD_STRING Kaia
1328: PPUSH
1329: LD_EXP 1
1333: NOT
1334: PPUSH
1335: LD_EXP 2
1339: PPUSH
1340: CALL 15066 0 3
1344: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1345: LD_ADDR_EXP 18
1349: PUSH
1350: LD_STRING Sophia
1352: PPUSH
1353: LD_EXP 1
1357: NOT
1358: PPUSH
1359: LD_EXP 2
1363: PPUSH
1364: CALL 15066 0 3
1368: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1369: LD_ADDR_EXP 19
1373: PUSH
1374: LD_STRING Markov
1376: PPUSH
1377: LD_EXP 1
1381: NOT
1382: PPUSH
1383: LD_EXP 2
1387: PPUSH
1388: CALL 15066 0 3
1392: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1393: LD_ADDR_EXP 23
1397: PUSH
1398: LD_STRING Aviradze
1400: PPUSH
1401: LD_EXP 1
1405: NOT
1406: PPUSH
1407: LD_EXP 2
1411: PPUSH
1412: CALL 15066 0 3
1416: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1417: LD_ADDR_EXP 22
1421: PUSH
1422: LD_STRING Kurt
1424: PPUSH
1425: LD_EXP 1
1429: NOT
1430: PPUSH
1431: LD_EXP 2
1435: PPUSH
1436: CALL 15066 0 3
1440: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1441: LD_ADDR_EXP 14
1445: PUSH
1446: LD_STRING Mike
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_EXP 2
1459: PPUSH
1460: CALL 15066 0 3
1464: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1465: LD_ADDR_EXP 21
1469: PUSH
1470: LD_STRING Olaf
1472: PPUSH
1473: LD_INT 0
1475: PPUSH
1476: LD_STRING 
1478: PPUSH
1479: CALL 15066 0 3
1483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1484: LD_ADDR_EXP 24
1488: PUSH
1489: LD_STRING 06_others
1491: PPUSH
1492: CALL_OW 31
1496: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1497: LD_ADDR_EXP 25
1501: PUSH
1502: LD_STRING 06_apes
1504: PPUSH
1505: CALL_OW 31
1509: ST_TO_ADDR
// if debug then
1510: LD_EXP 1
1514: IFFALSE 1789
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1516: LD_ADDR_VAR 0 3
1520: PUSH
1521: LD_INT 14
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: LD_INT 2
1529: PUSH
1530: LD_INT 25
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: LD_INT 1000
1538: PUSH
1539: LD_INT 0
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: PUSH
1551: LD_INT 14
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 31
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 1000
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 27
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 750
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 27
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 900
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 32
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 1000
1658: PUSH
1659: LD_INT 100
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 14
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: LD_INT 32
1689: PUSH
1690: LD_INT 2
1692: PUSH
1693: LD_INT 1000
1695: PUSH
1696: LD_INT 50
1698: PUSH
1699: LD_INT 50
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 14
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: LD_INT 27
1726: PUSH
1727: LD_INT 2
1729: PUSH
1730: LD_INT 1000
1732: PUSH
1733: LD_INT 0
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 1
1753: PUSH
1754: LD_EXP 104
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: LD_INT 1000
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// end else
1787: GO 1796
// tmp := [ ] ;
1789: LD_ADDR_VAR 0 3
1793: PUSH
1794: EMPTY
1795: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1796: LD_ADDR_EXP 26
1800: PUSH
1801: LD_STRING 06_Vehicles
1803: PPUSH
1804: LD_VAR 0 3
1808: PPUSH
1809: CALL_OW 30
1813: ST_TO_ADDR
// if heikeVehicles then
1814: LD_EXP 26
1818: IFFALSE 1913
// begin for i := heikeVehicles downto 1 do
1820: LD_ADDR_VAR 0 2
1824: PUSH
1825: DOUBLE
1826: LD_EXP 26
1830: INC
1831: ST_TO_ADDR
1832: LD_INT 1
1834: PUSH
1835: FOR_DOWNTO
1836: IFFALSE 1911
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1838: LD_EXP 26
1842: PUSH
1843: LD_VAR 0 2
1847: ARRAY
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: EQUAL
1856: IFFALSE 1909
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1858: LD_ADDR_EXP 26
1862: PUSH
1863: LD_EXP 26
1867: PPUSH
1868: LD_EXP 26
1872: PPUSH
1873: LD_EXP 26
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: CALL_OW 2
1888: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1889: LD_ADDR_EXP 26
1893: PUSH
1894: LD_EXP 26
1898: PPUSH
1899: LD_VAR 0 2
1903: PPUSH
1904: CALL_OW 3
1908: ST_TO_ADDR
// end ; end ;
1909: GO 1835
1911: POP
1912: POP
// end ; end ;
1913: LD_VAR 0 1
1917: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1918: LD_EXP 3
1922: IFFALSE 2456
1924: GO 1926
1926: DISABLE
1927: LD_INT 0
1929: PPUSH
1930: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_INT 96
1938: PUSH
1939: LD_INT 50
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 49
1948: PUSH
1949: LD_INT 52
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 34
1958: PUSH
1959: LD_INT 55
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 41
1968: PUSH
1969: LD_INT 70
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 53
1978: PUSH
1979: LD_INT 96
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: LD_INT 103
1988: PUSH
1989: LD_INT 64
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 104
2006: PUSH
2007: LD_INT 70
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 111
2016: PUSH
2017: LD_INT 103
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 131
2026: PUSH
2027: LD_INT 147
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 130
2036: PUSH
2037: LD_INT 153
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 110
2046: PUSH
2047: LD_INT 93
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 103
2056: PUSH
2057: LD_INT 65
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: ST_TO_ADDR
// for i in tmp [ 1 ] do
2076: LD_ADDR_VAR 0 1
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PUSH
2090: FOR_IN
2091: IFFALSE 2143
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2093: LD_EXP 14
2097: PPUSH
2098: LD_VAR 0 1
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_VAR 0 1
2111: PUSH
2112: LD_INT 2
2114: ARRAY
2115: PPUSH
2116: CALL_OW 174
// AddComHold ( Mike ) ;
2120: LD_EXP 14
2124: PPUSH
2125: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2129: LD_EXP 14
2133: PPUSH
2134: LD_INT 175
2136: PPUSH
2137: CALL_OW 202
// end ;
2141: GO 2090
2143: POP
2144: POP
// for i in tmp [ 2 ] do
2145: LD_ADDR_VAR 0 1
2149: PUSH
2150: LD_VAR 0 2
2154: PUSH
2155: LD_INT 2
2157: ARRAY
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2212
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2162: LD_EXP 22
2166: PPUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 1
2180: PUSH
2181: LD_INT 2
2183: ARRAY
2184: PPUSH
2185: CALL_OW 174
// AddComHold ( Kurt ) ;
2189: LD_EXP 22
2193: PPUSH
2194: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2198: LD_EXP 22
2202: PPUSH
2203: LD_INT 175
2205: PPUSH
2206: CALL_OW 202
// end ;
2210: GO 2159
2212: POP
2213: POP
// wait ( 2 2$00 ) ;
2214: LD_INT 4200
2216: PPUSH
2217: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2221: LD_INT 35
2223: PPUSH
2224: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2228: LD_EXP 14
2232: PPUSH
2233: CALL_OW 314
2237: NOT
2238: PUSH
2239: LD_EXP 14
2243: PPUSH
2244: CALL_OW 301
2248: OR
2249: PUSH
2250: LD_EXP 22
2254: PPUSH
2255: CALL_OW 314
2259: NOT
2260: PUSH
2261: LD_EXP 22
2265: PPUSH
2266: CALL_OW 301
2270: OR
2271: AND
2272: IFFALSE 2221
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2274: LD_EXP 22
2278: PPUSH
2279: CALL_OW 301
2283: PUSH
2284: LD_EXP 14
2288: PPUSH
2289: CALL_OW 301
2293: AND
2294: IFFALSE 2306
// begin scoutFailed := true ;
2296: LD_ADDR_EXP 4
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// exit ;
2304: GO 2456
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2306: LD_EXP 22
2310: PUSH
2311: LD_EXP 14
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PPUSH
2320: LD_INT 132
2322: PPUSH
2323: LD_INT 52
2325: PPUSH
2326: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2330: LD_EXP 22
2334: PUSH
2335: LD_EXP 14
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PPUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PPUSH
2363: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2367: LD_INT 35
2369: PPUSH
2370: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2374: LD_INT 2
2376: PPUSH
2377: LD_EXP 22
2381: PPUSH
2382: CALL_OW 292
2386: PUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 14
2394: PPUSH
2395: CALL_OW 292
2399: OR
2400: IFFALSE 2367
// if IsLive ( Kurt ) then
2402: LD_EXP 22
2406: PPUSH
2407: CALL_OW 300
2411: IFFALSE 2425
// SetSide ( Kurt , 2 ) ;
2413: LD_EXP 22
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 235
// if IsLive ( Mike ) then
2425: LD_EXP 14
2429: PPUSH
2430: CALL_OW 300
2434: IFFALSE 2448
// SetSide ( Mike , 2 ) ;
2436: LD_EXP 14
2440: PPUSH
2441: LD_INT 2
2443: PPUSH
2444: CALL_OW 235
// scoutSuccess := true ;
2448: LD_ADDR_EXP 5
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// end ; end_of_file
2456: PPOPN 2
2458: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2459: LD_INT 0
2461: PPUSH
2462: PPUSH
2463: PPUSH
2464: PPUSH
// uc_side := 1 ;
2465: LD_ADDR_OWVAR 20
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// uc_nation := 1 ;
2473: LD_ADDR_OWVAR 21
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 274
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2500
2494: PUSH
2495: LD_INT 3200
2497: PUSH
2498: LD_INT 3500
2500: PUSH
2501: LD_INT 3900
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: PUSH
2510: LD_OWVAR 67
2514: ARRAY
2515: PPUSH
2516: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2520: LD_INT 1
2522: PPUSH
2523: CALL_OW 274
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: LD_INT 800
2533: PPUSH
2534: CALL_OW 277
// usForces := [ ] ;
2538: LD_ADDR_EXP 28
2542: PUSH
2543: EMPTY
2544: ST_TO_ADDR
// usToBuild := [ ] ;
2545: LD_ADDR_EXP 30
2549: PUSH
2550: EMPTY
2551: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2552: LD_ADDR_EXP 31
2556: PUSH
2557: EMPTY
2558: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2559: LD_ADDR_VAR 0 2
2563: PUSH
2564: LD_INT 21
2566: PUSH
2567: LD_INT 3
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: PUSH
2579: FOR_IN
2580: IFFALSE 2617
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 6
2589: PUSH
2590: LD_INT 7
2592: PUSH
2593: LD_INT 8
2595: PUSH
2596: LD_INT 8
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_OWVAR 67
2609: ARRAY
2610: PPUSH
2611: CALL_OW 241
2615: GO 2579
2617: POP
2618: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2619: LD_ADDR_VAR 0 2
2623: PUSH
2624: LD_INT 30
2626: PUSH
2627: LD_INT 32
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PPUSH
2634: CALL_OW 69
2638: PUSH
2639: FOR_IN
2640: IFFALSE 2730
// begin if GetBWeapon ( i ) = us_radar then
2642: LD_VAR 0 2
2646: PPUSH
2647: CALL_OW 269
2651: PUSH
2652: LD_INT 11
2654: EQUAL
2655: IFFALSE 2680
// begin uc_nation := 0 ;
2657: LD_ADDR_OWVAR 21
2661: PUSH
2662: LD_INT 0
2664: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2665: LD_INT 0
2667: PPUSH
2668: LD_INT 16
2670: PPUSH
2671: LD_INT 2
2673: PPUSH
2674: CALL_OW 380
// end else
2678: GO 2714
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2680: LD_INT 0
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: LD_INT 5
2688: PUSH
2689: LD_INT 6
2691: PUSH
2692: LD_INT 7
2694: PUSH
2695: LD_INT 8
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_OWVAR 67
2708: ARRAY
2709: PPUSH
2710: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2714: CALL_OW 44
2718: PPUSH
2719: LD_VAR 0 2
2723: PPUSH
2724: CALL_OW 52
// end ;
2728: GO 2639
2730: POP
2731: POP
// b := HexInfo ( 74 , 120 ) ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 74
2739: PPUSH
2740: LD_INT 120
2742: PPUSH
2743: CALL_OW 428
2747: ST_TO_ADDR
// uc_nation := 1 ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 1
2768: PUSH
2769: LD_INT 2
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: LD_INT 4
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: PUSH
2784: LD_OWVAR 67
2788: ARRAY
2789: PUSH
2790: FOR_TO
2791: IFFALSE 2843
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2793: LD_INT 0
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: LD_INT 5
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: LD_INT 7
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: PUSH
2817: LD_OWVAR 67
2821: ARRAY
2822: PPUSH
2823: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2827: CALL_OW 44
2831: PPUSH
2832: LD_VAR 0 3
2836: PPUSH
2837: CALL_OW 52
// end ;
2841: GO 2790
2843: POP
2844: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: CALL_OW 313
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 336
// for i := 1 to 6 do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 6
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2926
// begin PrepareHuman ( false , 4 , 6 ) ;
2878: LD_INT 0
2880: PPUSH
2881: LD_INT 4
2883: PPUSH
2884: LD_INT 6
2886: PPUSH
2887: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2891: CALL_OW 44
2895: PPUSH
2896: LD_INT 32
2898: PUSH
2899: LD_INT 33
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: MOD
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PPUSH
2920: CALL_OW 52
// end ;
2924: GO 2875
2926: POP
2927: POP
// for i := 1 to 3 do
2928: LD_ADDR_VAR 0 2
2932: PUSH
2933: DOUBLE
2934: LD_INT 1
2936: DEC
2937: ST_TO_ADDR
2938: LD_INT 3
2940: PUSH
2941: FOR_TO
2942: IFFALSE 2971
// begin PrepareHuman ( false , 3 , 6 ) ;
2944: LD_INT 0
2946: PPUSH
2947: LD_INT 3
2949: PPUSH
2950: LD_INT 6
2952: PPUSH
2953: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_INT 25
2964: PPUSH
2965: CALL_OW 52
// end ;
2969: GO 2941
2971: POP
2972: POP
// for i := 1 to 3 do
2973: LD_ADDR_VAR 0 2
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 3
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3045
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2989: LD_INT 0
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: LD_INT 6
2997: PUSH
2998: LD_INT 7
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 7
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: PUSH
3013: LD_OWVAR 67
3017: ARRAY
3018: PPUSH
3019: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3023: CALL_OW 44
3027: PPUSH
3028: LD_INT 78
3030: PPUSH
3031: LD_INT 130
3033: PPUSH
3034: CALL_OW 428
3038: PPUSH
3039: CALL_OW 52
// end ;
3043: GO 2986
3045: POP
3046: POP
// for i := 1 to 3 do
3047: LD_ADDR_VAR 0 2
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 3
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3148
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3063: LD_INT 2
3065: PPUSH
3066: LD_INT 2
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_INT 13
3074: PPUSH
3075: LD_INT 100
3077: PPUSH
3078: CALL 19930 0 5
// veh := CreateVehicle ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: CALL_OW 45
3091: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_INT 9
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 3
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3132: CALL_OW 44
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: CALL_OW 52
// end ;
3146: GO 3060
3148: POP
3149: POP
// InitHc ;
3150: CALL_OW 19
// hc_gallery := us ;
3154: LD_ADDR_OWVAR 33
3158: PUSH
3159: LD_STRING us
3161: ST_TO_ADDR
// hc_face_number := 26 ;
3162: LD_ADDR_OWVAR 34
3166: PUSH
3167: LD_INT 26
3169: ST_TO_ADDR
// hc_name := Max Caldera ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING Max Caldera
3177: ST_TO_ADDR
// hc_class := class_engineer ;
3178: LD_ADDR_OWVAR 28
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// hc_sex := sex_male ;
3186: LD_ADDR_OWVAR 27
3190: PUSH
3191: LD_INT 1
3193: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3194: LD_ADDR_OWVAR 29
3198: PUSH
3199: LD_INT 10
3201: PUSH
3202: LD_INT 11
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3209: LD_ADDR_OWVAR 30
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: LD_INT 0
3222: PUSH
3223: LD_INT 0
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3232: LD_ADDR_OWVAR 31
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: LD_INT 6
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// usCommander := CreateHuman ;
3255: LD_ADDR_EXP 27
3259: PUSH
3260: CALL_OW 44
3264: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3265: LD_EXP 27
3269: PPUSH
3270: LD_INT 1
3272: PPUSH
3273: CALL_OW 52
// InitHC_All ( ) ;
3277: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3281: LD_INT 2
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: LD_INT 12
3292: PPUSH
3293: LD_INT 100
3295: PPUSH
3296: CALL 19930 0 5
// usCargo := CreateVehicle ;
3300: LD_ADDR_EXP 29
3304: PUSH
3305: CALL_OW 45
3309: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3310: LD_EXP 29
3314: PPUSH
3315: LD_INT 81
3317: PPUSH
3318: LD_INT 143
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: CALL_OW 48
// Connect ( usCargo ) ;
3328: LD_EXP 29
3332: PPUSH
3333: CALL 23023 0 1
// DoNotAttack ( 5 , usCargo ) ;
3337: LD_INT 5
3339: PPUSH
3340: LD_EXP 29
3344: PPUSH
3345: CALL_OW 471
// end ;
3349: LD_VAR 0 1
3353: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3354: LD_EXP 28
3358: NOT
3359: PUSH
3360: LD_EXP 6
3364: AND
3365: PUSH
3366: LD_INT 25
3368: PPUSH
3369: CALL_OW 302
3373: AND
3374: PUSH
3375: LD_INT 25
3377: PPUSH
3378: CALL_OW 461
3382: PUSH
3383: LD_INT 2
3385: EQUAL
3386: AND
3387: IFFALSE 3544
3389: GO 3391
3391: DISABLE
3392: LD_INT 0
3394: PPUSH
3395: PPUSH
3396: PPUSH
// begin enable ;
3397: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3398: LD_ADDR_VAR 0 1
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 5
3410: PUSH
3411: LD_INT 6
3413: PUSH
3414: LD_INT 7
3416: PUSH
3417: LD_INT 8
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: LD_OWVAR 67
3430: ARRAY
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3542
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: LD_INT 3
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_INT 1
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: CALL_OW 12
3464: ARRAY
3465: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3466: LD_VAR 0 2
3470: PUSH
3471: LD_INT 4
3473: EQUAL
3474: IFFALSE 3486
// weapon := us_heavy_gun else
3476: LD_ADDR_VAR 0 3
3480: PUSH
3481: LD_INT 6
3483: ST_TO_ADDR
3484: GO 3517
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: LD_INT 5
3493: PUSH
3494: LD_INT 7
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 1
3507: PPUSH
3508: LD_INT 3
3510: PPUSH
3511: CALL_OW 12
3515: ARRAY
3516: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3517: LD_INT 25
3519: PPUSH
3520: LD_VAR 0 2
3524: PPUSH
3525: LD_INT 1
3527: PPUSH
3528: LD_INT 2
3530: PPUSH
3531: LD_VAR 0 3
3535: PPUSH
3536: CALL_OW 185
// end ;
3540: GO 3432
3542: POP
3543: POP
// end ;
3544: PPOPN 3
3546: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3547: LD_EXP 28
3551: PUSH
3552: LD_INT 5
3554: PUSH
3555: LD_INT 6
3557: PUSH
3558: LD_INT 7
3560: PUSH
3561: LD_INT 8
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_OWVAR 67
3574: ARRAY
3575: GREATEREQUAL
3576: IFFALSE 3687
3578: GO 3580
3580: DISABLE
3581: LD_INT 0
3583: PPUSH
3584: PPUSH
// begin enable ;
3585: ENABLE
// tmp := usForces ;
3586: LD_ADDR_VAR 0 2
3590: PUSH
3591: LD_EXP 28
3595: ST_TO_ADDR
// usForces := [ ] ;
3596: LD_ADDR_EXP 28
3600: PUSH
3601: EMPTY
3602: ST_TO_ADDR
// if not tmp then
3603: LD_VAR 0 2
3607: NOT
3608: IFFALSE 3612
// exit ;
3610: GO 3687
// repeat wait ( 0 0$1 ) ;
3612: LD_INT 35
3614: PPUSH
3615: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3619: LD_ADDR_VAR 0 2
3623: PUSH
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_INT 98
3631: PUSH
3632: LD_INT 50
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 114
3641: PUSH
3642: LD_INT 50
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 127
3651: PUSH
3652: LD_INT 51
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 131
3661: PUSH
3662: LD_INT 35
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PPUSH
3675: CALL 54198 0 2
3679: ST_TO_ADDR
// until not tmp ;
3680: LD_VAR 0 2
3684: NOT
3685: IFFALSE 3612
// end ;
3687: PPOPN 2
3689: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3690: LD_EXP 3
3694: PUSH
3695: LD_EXP 5
3699: NOT
3700: AND
3701: PUSH
3702: LD_INT 11
3704: PPUSH
3705: LD_INT 22
3707: PUSH
3708: LD_INT 2
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 70
3719: AND
3720: IFFALSE 3841
3722: GO 3724
3724: DISABLE
3725: LD_INT 0
3727: PPUSH
3728: PPUSH
3729: PPUSH
// begin uc_side := 1 ;
3730: LD_ADDR_OWVAR 20
3734: PUSH
3735: LD_INT 1
3737: ST_TO_ADDR
// uc_nation := 1 ;
3738: LD_ADDR_OWVAR 21
3742: PUSH
3743: LD_INT 1
3745: ST_TO_ADDR
// tmp := [ ] ;
3746: LD_ADDR_VAR 0 3
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// for i := 1 to 2 do
3753: LD_ADDR_VAR 0 1
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_INT 2
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3839
// begin PrepareSoldier ( false , 7 ) ;
3769: LD_INT 0
3771: PPUSH
3772: LD_INT 7
3774: PPUSH
3775: CALL_OW 381
// un := CreateHuman ;
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: CALL_OW 44
3788: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3789: LD_VAR 0 2
3793: PPUSH
3794: LD_INT 130
3796: PPUSH
3797: LD_INT 153
3799: PPUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 0
3805: PPUSH
3806: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3810: LD_VAR 0 2
3814: PPUSH
3815: LD_INT 5
3817: PPUSH
3818: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_INT 108
3829: PPUSH
3830: LD_INT 108
3832: PPUSH
3833: CALL_OW 174
// end ;
3837: GO 3766
3839: POP
3840: POP
// end ;
3841: PPOPN 3
3843: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3844: LD_EXP 3
3848: PUSH
3849: LD_EXP 5
3853: NOT
3854: AND
3855: PUSH
3856: LD_INT 10
3858: PPUSH
3859: LD_INT 22
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PPUSH
3869: CALL_OW 70
3873: AND
3874: IFFALSE 3995
3876: GO 3878
3878: DISABLE
3879: LD_INT 0
3881: PPUSH
3882: PPUSH
3883: PPUSH
// begin uc_side := 1 ;
3884: LD_ADDR_OWVAR 20
3888: PUSH
3889: LD_INT 1
3891: ST_TO_ADDR
// uc_nation := 1 ;
3892: LD_ADDR_OWVAR 21
3896: PUSH
3897: LD_INT 1
3899: ST_TO_ADDR
// tmp := [ ] ;
3900: LD_ADDR_VAR 0 3
3904: PUSH
3905: EMPTY
3906: ST_TO_ADDR
// for i := 1 to 2 do
3907: LD_ADDR_VAR 0 1
3911: PUSH
3912: DOUBLE
3913: LD_INT 1
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 2
3919: PUSH
3920: FOR_TO
3921: IFFALSE 3993
// begin PrepareSoldier ( false , 7 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_INT 7
3928: PPUSH
3929: CALL_OW 381
// un := CreateHuman ;
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: CALL_OW 44
3942: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3943: LD_VAR 0 2
3947: PPUSH
3948: LD_INT 56
3950: PPUSH
3951: LD_INT 101
3953: PPUSH
3954: LD_INT 3
3956: PPUSH
3957: LD_INT 0
3959: PPUSH
3960: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3964: LD_VAR 0 2
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3976: LD_VAR 0 2
3980: PPUSH
3981: LD_INT 72
3983: PPUSH
3984: LD_INT 92
3986: PPUSH
3987: CALL_OW 174
// end ;
3991: GO 3920
3993: POP
3994: POP
// end ;
3995: PPOPN 3
3997: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3998: LD_EXP 29
4002: PPUSH
4003: CALL_OW 302
4007: PUSH
4008: LD_EXP 7
4012: NOT
4013: AND
4014: IFFALSE 4277
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
4022: PPUSH
// begin enable ;
4023: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4024: LD_ADDR_VAR 0 2
4028: PUSH
4029: LD_INT 14
4031: PPUSH
4032: LD_INT 81
4034: PUSH
4035: LD_INT 1
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 50
4044: PUSH
4045: EMPTY
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 70
4056: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4057: LD_ADDR_VAR 0 1
4061: PUSH
4062: LD_INT 12
4064: PPUSH
4065: CALL_OW 435
4069: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4070: LD_EXP 29
4074: PPUSH
4075: CALL_OW 261
4079: PUSH
4080: LD_INT 10
4082: LESS
4083: PUSH
4084: LD_INT 2
4086: PPUSH
4087: LD_EXP 29
4091: PPUSH
4092: CALL_OW 292
4096: NOT
4097: AND
4098: IFFALSE 4112
// SetFuel ( usCargo , 100 ) ;
4100: LD_EXP 29
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 314
4121: NOT
4122: PUSH
4123: LD_EXP 29
4127: PPUSH
4128: LD_INT 1
4130: PPUSH
4131: CALL_OW 289
4135: PUSH
4136: LD_INT 100
4138: LESS
4139: AND
4140: PUSH
4141: LD_VAR 0 2
4145: NOT
4146: AND
4147: IFFALSE 4213
// begin if cr then
4149: LD_VAR 0 1
4153: IFFALSE 4184
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4155: LD_EXP 29
4159: PPUSH
4160: LD_VAR 0 1
4164: PUSH
4165: LD_INT 1
4167: ARRAY
4168: PPUSH
4169: LD_VAR 0 1
4173: PUSH
4174: LD_INT 2
4176: ARRAY
4177: PPUSH
4178: CALL_OW 117
4182: GO 4211
// if not IsInArea ( usCargo , usCratesArea ) then
4184: LD_EXP 29
4188: PPUSH
4189: LD_INT 12
4191: PPUSH
4192: CALL_OW 308
4196: NOT
4197: IFFALSE 4211
// ComMoveToArea ( usCargo , usCratesArea ) ;
4199: LD_EXP 29
4203: PPUSH
4204: LD_INT 12
4206: PPUSH
4207: CALL_OW 113
// exit ;
4211: GO 4277
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4213: LD_VAR 0 2
4217: PUSH
4218: LD_EXP 29
4222: PPUSH
4223: LD_INT 14
4225: PPUSH
4226: CALL_OW 308
4230: NOT
4231: AND
4232: IFFALSE 4251
// ComMoveXY ( usCargo , 80 , 143 ) else
4234: LD_EXP 29
4238: PPUSH
4239: LD_INT 80
4241: PPUSH
4242: LD_INT 143
4244: PPUSH
4245: CALL_OW 111
4249: GO 4277
// if GetCargo ( usCargo , mat_cans ) then
4251: LD_EXP 29
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 289
4263: IFFALSE 4277
// ComGive ( usCargo , usDepot ) ;
4265: LD_EXP 29
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 161
// end ;
4277: PPOPN 2
4279: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4280: LD_EXP 7
4284: NOT
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 21
4298: PUSH
4299: LD_INT 1
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: LD_INT 50
4311: PUSH
4312: EMPTY
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 69
4328: AND
4329: PUSH
4330: LD_INT 22
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 3
4342: PUSH
4343: LD_INT 60
4345: PUSH
4346: EMPTY
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 25
4355: PUSH
4356: LD_INT 4
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: AND
4373: IFFALSE 4576
4375: GO 4377
4377: DISABLE
4378: LD_INT 0
4380: PPUSH
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_INT 22
4390: PUSH
4391: LD_INT 1
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 21
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: LD_INT 50
4413: PUSH
4414: EMPTY
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 69
4430: PUSH
4431: FOR_IN
4432: IFFALSE 4574
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 22
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 60
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 25
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PPUSH
4477: CALL_OW 69
4481: ST_TO_ADDR
// if not sci then
4482: LD_VAR 0 2
4486: NOT
4487: IFFALSE 4491
// break ;
4489: GO 4574
// sci := sci [ 1 ] ;
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_VAR 0 2
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: ST_TO_ADDR
// if IsInUnit ( sci ) then
4505: LD_VAR 0 2
4509: PPUSH
4510: CALL_OW 310
4514: IFFALSE 4527
// ComExit ( sci ) else
4516: LD_VAR 0 2
4520: PPUSH
4521: CALL 52191 0 1
4525: GO 4572
// begin ComHeal ( sci , i ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 1
4536: PPUSH
4537: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 32
4548: PUSH
4549: LD_INT 33
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 12
4566: ARRAY
4567: PPUSH
4568: CALL_OW 180
// end ; end ;
4572: GO 4431
4574: POP
4575: POP
// end ;
4576: PPOPN 2
4578: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4579: LD_EXP 7
4583: NOT
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 60
4600: PUSH
4601: EMPTY
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 50
4610: PUSH
4611: EMPTY
4612: LIST
4613: PUSH
4614: LD_INT 34
4616: PUSH
4617: LD_INT 13
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: PPUSH
4630: CALL_OW 69
4634: AND
4635: PUSH
4636: LD_INT 22
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 3
4648: PUSH
4649: LD_INT 24
4651: PUSH
4652: LD_INT 1000
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_INT 21
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 3
4675: PUSH
4676: LD_INT 30
4678: PUSH
4679: LD_INT 29
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: AND
4701: IFFALSE 4970
4703: GO 4705
4705: DISABLE
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
4710: PPUSH
// begin enable ;
4711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4712: LD_ADDR_VAR 0 2
4716: PUSH
4717: LD_INT 22
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 24
4732: PUSH
4733: LD_INT 1000
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 30
4759: PUSH
4760: LD_INT 29
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 69
4781: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 1
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: LD_INT 24
4802: PUSH
4803: LD_INT 600
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 21
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 3
4826: PUSH
4827: LD_INT 30
4829: PUSH
4830: LD_INT 29
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: PPUSH
4847: CALL_OW 69
4851: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 1
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 60
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 50
4882: PUSH
4883: EMPTY
4884: LIST
4885: PUSH
4886: LD_INT 34
4888: PUSH
4889: LD_INT 13
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PUSH
4907: FOR_IN
4908: IFFALSE 4968
// begin if tmp2 then
4910: LD_VAR 0 3
4914: IFFALSE 4942
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4916: LD_VAR 0 1
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 74
4935: PPUSH
4936: CALL_OW 130
4940: GO 4966
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4942: LD_VAR 0 1
4946: PPUSH
4947: LD_VAR 0 2
4951: PPUSH
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 74
4961: PPUSH
4962: CALL_OW 130
// end ;
4966: GO 4907
4968: POP
4969: POP
// end ;
4970: PPOPN 3
4972: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4973: LD_EXP 7
4977: NOT
4978: PUSH
4979: LD_INT 14
4981: PPUSH
4982: LD_INT 81
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 50
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 70
5006: NOT
5007: AND
5008: PUSH
5009: LD_EXP 30
5013: AND
5014: PUSH
5015: LD_INT 22
5017: PUSH
5018: LD_INT 1
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: LD_INT 60
5030: PUSH
5031: EMPTY
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PUSH
5044: LD_INT 34
5046: PUSH
5047: LD_INT 13
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: AND
5065: IFFALSE 5177
5067: GO 5069
5069: DISABLE
// begin enable ;
5070: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5071: LD_INT 22
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: LD_INT 60
5086: PUSH
5087: EMPTY
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 50
5096: PUSH
5097: EMPTY
5098: LIST
5099: PUSH
5100: LD_INT 34
5102: PUSH
5103: LD_INT 13
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PPUSH
5116: CALL_OW 69
5120: PPUSH
5121: LD_EXP 30
5125: PUSH
5126: LD_INT 1
5128: ARRAY
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PPUSH
5134: LD_EXP 30
5138: PUSH
5139: LD_INT 1
5141: ARRAY
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: LD_EXP 30
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PUSH
5156: LD_INT 3
5158: ARRAY
5159: PPUSH
5160: LD_EXP 30
5164: PUSH
5165: LD_INT 1
5167: ARRAY
5168: PUSH
5169: LD_INT 4
5171: ARRAY
5172: PPUSH
5173: CALL_OW 566
// end ;
5177: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5178: LD_INT 22
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 3
5196: PUSH
5197: LD_INT 54
5199: PUSH
5200: EMPTY
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: LD_INT 25
5222: PUSH
5223: LD_INT 5
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PUSH
5230: LD_INT 25
5232: PUSH
5233: LD_INT 16
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 69
5256: IFFALSE 5618
5258: GO 5260
5260: DISABLE
5261: LD_INT 0
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
// begin enable ;
5267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_INT 22
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 50
5285: PUSH
5286: EMPTY
5287: LIST
5288: PUSH
5289: LD_INT 3
5291: PUSH
5292: LD_INT 54
5294: PUSH
5295: EMPTY
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: LD_INT 2
5304: PUSH
5305: LD_INT 25
5307: PUSH
5308: LD_INT 1
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 25
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PUSH
5325: LD_INT 25
5327: PUSH
5328: LD_INT 16
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 69
5351: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_INT 22
5359: PUSH
5360: LD_INT 1
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 50
5369: PUSH
5370: EMPTY
5371: LIST
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: LD_INT 30
5385: PUSH
5386: LD_INT 32
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 58
5395: PUSH
5396: EMPTY
5397: LIST
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 69
5410: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5411: LD_ADDR_VAR 0 4
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 50
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_INT 5
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: PPUSH
5447: CALL_OW 69
5451: ST_TO_ADDR
// if not tmp then
5452: LD_VAR 0 2
5456: NOT
5457: IFFALSE 5461
// exit ;
5459: GO 5618
// for i in tmp do
5461: LD_ADDR_VAR 0 1
5465: PUSH
5466: LD_VAR 0 2
5470: PUSH
5471: FOR_IN
5472: IFFALSE 5616
// begin btmp := FilterByTag ( btmp , 0 ) ;
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 0
5486: PPUSH
5487: CALL 49321 0 2
5491: ST_TO_ADDR
// if not btmp then
5492: LD_VAR 0 3
5496: NOT
5497: IFFALSE 5542
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 257
5508: PUSH
5509: LD_INT 16
5511: NONEQUAL
5512: PUSH
5513: LD_VAR 0 4
5517: AND
5518: IFFALSE 5538
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5520: LD_VAR 0 1
5524: PPUSH
5525: LD_VAR 0 4
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: CALL_OW 120
// continue ;
5538: GO 5471
// end else
5540: GO 5614
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 1
5549: ARRAY
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: CALL_OW 120
// wait ( 0 0$9 ) ;
5576: LD_INT 315
5578: PPUSH
5579: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5583: LD_VAR 0 3
5587: PUSH
5588: LD_INT 1
5590: ARRAY
5591: PPUSH
5592: CALL 17222 0 1
5596: IFFALSE 5614
// SetTag ( btmp [ 1 ] , 0 ) ;
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_INT 0
5609: PPUSH
5610: CALL_OW 109
// end ; end ;
5614: GO 5471
5616: POP
5617: POP
// end ;
5618: PPOPN 4
5620: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5621: LD_INT 22
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 33
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 50
5643: PUSH
5644: EMPTY
5645: LIST
5646: PUSH
5647: LD_INT 3
5649: PUSH
5650: LD_INT 61
5652: PUSH
5653: EMPTY
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: PPUSH
5666: CALL_OW 69
5670: IFFALSE 5761
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// begin enable ;
5679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: LD_INT 22
5687: PUSH
5688: LD_INT 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 33
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 50
5707: PUSH
5708: EMPTY
5709: LIST
5710: PUSH
5711: LD_INT 3
5713: PUSH
5714: LD_INT 61
5716: PUSH
5717: EMPTY
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// for i in tmp do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: FOR_IN
5746: IFFALSE 5759
// Connect ( i ) ;
5748: LD_VAR 0 1
5752: PPUSH
5753: CALL 23023 0 1
5757: GO 5745
5759: POP
5760: POP
// end ;
5761: PPOPN 2
5763: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5764: LD_EXP 6
5768: PUSH
5769: LD_OWVAR 67
5773: PUSH
5774: LD_INT 1
5776: GREATER
5777: AND
5778: IFFALSE 6216
5780: GO 5782
5782: DISABLE
5783: LD_INT 0
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5790: LD_INT 21000
5792: PUSH
5793: LD_INT 18900
5795: PUSH
5796: LD_INT 16800
5798: PUSH
5799: LD_INT 14700
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_OWVAR 67
5812: ARRAY
5813: PPUSH
5814: CALL_OW 67
// if usSurrender then
5818: LD_EXP 7
5822: IFFALSE 5826
// exit ;
5824: GO 6216
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: DOUBLE
5832: LD_INT 1
5834: DEC
5835: ST_TO_ADDR
5836: LD_INT 4
5838: PUSH
5839: LD_INT 5
5841: PUSH
5842: LD_INT 5
5844: PUSH
5845: LD_INT 6
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: PUSH
5854: LD_OWVAR 67
5858: ARRAY
5859: PUSH
5860: FOR_TO
5861: IFFALSE 6161
// begin uc_side := 1 ;
5863: LD_ADDR_OWVAR 20
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// uc_nation := 1 ;
5871: LD_ADDR_OWVAR 21
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: LD_INT 5
5887: PUSH
5888: LD_INT 6
5890: PUSH
5891: LD_INT 7
5893: PUSH
5894: LD_INT 8
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: PUSH
5903: LD_OWVAR 67
5907: ARRAY
5908: PPUSH
5909: CALL_OW 380
// un := CreateHuman ;
5913: LD_ADDR_VAR 0 2
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: LD_INT 2
5930: PUSH
5931: LD_INT 3
5933: PUSH
5934: LD_INT 4
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: LIST
5941: PUSH
5942: LD_VAR 0 1
5946: PUSH
5947: LD_INT 3
5949: MOD
5950: PUSH
5951: LD_INT 1
5953: PLUS
5954: ARRAY
5955: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5956: LD_VAR 0 4
5960: PUSH
5961: LD_INT 4
5963: EQUAL
5964: IFFALSE 5999
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5966: LD_ADDR_VAR 0 5
5970: PUSH
5971: LD_INT 6
5973: PUSH
5974: LD_INT 4
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 1
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: CALL_OW 12
5995: ARRAY
5996: ST_TO_ADDR
5997: GO 6034
// weapon := [ us_heavy_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
5999: LD_ADDR_VAR 0 5
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 7
6012: PUSH
6013: LD_INT 4
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 1
6024: PPUSH
6025: LD_INT 4
6027: PPUSH
6028: CALL_OW 12
6032: ARRAY
6033: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6034: LD_VAR 0 4
6038: PPUSH
6039: LD_INT 1
6041: PPUSH
6042: LD_INT 1
6044: PPUSH
6045: LD_VAR 0 5
6049: PPUSH
6050: LD_INT 30
6052: PPUSH
6053: CALL 19930 0 5
// veh := CreateVehicle ;
6057: LD_ADDR_VAR 0 3
6061: PUSH
6062: CALL_OW 45
6066: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6067: LD_ADDR_EXP 31
6071: PUSH
6072: LD_EXP 31
6076: PPUSH
6077: LD_EXP 31
6081: PUSH
6082: LD_INT 1
6084: PLUS
6085: PPUSH
6086: LD_VAR 0 3
6090: PPUSH
6091: CALL_OW 1
6095: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6096: LD_VAR 0 3
6100: PPUSH
6101: LD_INT 4
6103: PPUSH
6104: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6108: LD_VAR 0 3
6112: PPUSH
6113: LD_INT 15
6115: PPUSH
6116: LD_INT 0
6118: PPUSH
6119: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6123: LD_VAR 0 2
6127: PPUSH
6128: LD_VAR 0 3
6132: PPUSH
6133: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6137: LD_VAR 0 3
6141: PPUSH
6142: LD_INT 153
6144: PPUSH
6145: LD_INT 45
6147: PPUSH
6148: CALL_OW 111
// wait ( 0 0$2 ) ;
6152: LD_INT 70
6154: PPUSH
6155: CALL_OW 67
// end ;
6159: GO 5860
6161: POP
6162: POP
// repeat wait ( 0 0$1 ) ;
6163: LD_INT 35
6165: PPUSH
6166: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6170: LD_ADDR_EXP 31
6174: PUSH
6175: LD_EXP 31
6179: PPUSH
6180: LD_INT 150
6182: PUSH
6183: LD_INT 36
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 138
6192: PUSH
6193: LD_INT 25
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 54198 0 2
6208: ST_TO_ADDR
// until not usAdditionalForces ;
6209: LD_EXP 31
6213: NOT
6214: IFFALSE 6163
// end ;
6216: PPOPN 5
6218: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6219: LD_INT 22
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 101
6231: PUSH
6232: LD_INT 2
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 69
6247: IFFALSE 6260
6249: GO 6251
6251: DISABLE
// usAttacksAllowed := true ; end_of_file
6252: LD_ADDR_EXP 6
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
6260: END
// on UnitDestroyed ( un ) do begin if un = Heike then
6261: LD_VAR 0 1
6265: PUSH
6266: LD_EXP 12
6270: EQUAL
6271: IFFALSE 6280
// YouLost ( Heike ) ;
6273: LD_STRING Heike
6275: PPUSH
6276: CALL_OW 104
// if un = usCommander then
6280: LD_VAR 0 1
6284: PUSH
6285: LD_EXP 27
6289: EQUAL
6290: IFFALSE 6299
// YouLost ( Commander ) ;
6292: LD_STRING Commander
6294: PPUSH
6295: CALL_OW 104
// if GetSide ( un ) = 1 then
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 255
6308: PUSH
6309: LD_INT 1
6311: EQUAL
6312: IFFALSE 6563
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 264
6323: PUSH
6324: LD_INT 13
6326: EQUAL
6327: PUSH
6328: LD_INT 25
6330: PPUSH
6331: CALL_OW 302
6335: AND
6336: IFFALSE 6357
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6338: LD_INT 25
6340: PPUSH
6341: LD_INT 2
6343: PPUSH
6344: LD_INT 2
6346: PPUSH
6347: LD_INT 2
6349: PPUSH
6350: LD_INT 13
6352: PPUSH
6353: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 264
6366: PUSH
6367: LD_INT 12
6369: EQUAL
6370: PUSH
6371: LD_INT 25
6373: PPUSH
6374: CALL_OW 302
6378: AND
6379: IFFALSE 6400
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6381: LD_INT 25
6383: PPUSH
6384: LD_INT 2
6386: PPUSH
6387: LD_INT 1
6389: PPUSH
6390: LD_INT 2
6392: PPUSH
6393: LD_INT 12
6395: PPUSH
6396: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 266
6409: PUSH
6410: LD_INT 32
6412: EQUAL
6413: IFFALSE 6478
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6415: LD_ADDR_EXP 30
6419: PUSH
6420: LD_EXP 30
6424: PPUSH
6425: LD_EXP 30
6429: PUSH
6430: LD_INT 1
6432: PLUS
6433: PPUSH
6434: LD_INT 32
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 250
6446: PUSH
6447: LD_VAR 0 1
6451: PPUSH
6452: CALL_OW 251
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 254
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 1
6477: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 266
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: IN
6498: IFFALSE 6563
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6500: LD_ADDR_EXP 30
6504: PUSH
6505: LD_EXP 30
6509: PPUSH
6510: LD_EXP 30
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: PPUSH
6519: LD_INT 4
6521: PUSH
6522: LD_VAR 0 1
6526: PPUSH
6527: CALL_OW 250
6531: PUSH
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 251
6541: PUSH
6542: LD_VAR 0 1
6546: PPUSH
6547: CALL_OW 254
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 1
6562: ST_TO_ADDR
// end ; end ;
6563: PPOPN 1
6565: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 255
6575: PUSH
6576: LD_INT 1
6578: EQUAL
6579: PUSH
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 110
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: AND
6594: IFFALSE 6608
// SetTag ( un , 0 ) ;
6596: LD_VAR 0 1
6600: PPUSH
6601: LD_INT 0
6603: PPUSH
6604: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 255
6617: PUSH
6618: LD_INT 1
6620: EQUAL
6621: PUSH
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL_OW 264
6631: PUSH
6632: LD_INT 6
6634: EQUAL
6635: AND
6636: PUSH
6637: LD_EXP 11
6641: NOT
6642: AND
6643: IFFALSE 6653
// seeHeavyGun := true ;
6645: LD_ADDR_EXP 11
6649: PUSH
6650: LD_INT 1
6652: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6653: LD_VAR 0 1
6657: PPUSH
6658: CALL_OW 263
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: PUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 255
6676: PUSH
6677: LD_INT 2
6679: NONEQUAL
6680: AND
6681: IFFALSE 6707
// begin ComUnlink ( un ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 136
// if not seeRemoteVehicle then
6692: LD_EXP 10
6696: NOT
6697: IFFALSE 6707
// seeRemoteVehicle := true ;
6699: LD_ADDR_EXP 10
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// end ; end ;
6707: PPOPN 1
6709: END
// on BuildingComplete ( b ) do var i , barracks ;
6710: LD_INT 0
6712: PPUSH
6713: PPUSH
// begin if GetSide ( b ) = 1 then
6714: LD_VAR 0 1
6718: PPUSH
6719: CALL_OW 255
6723: PUSH
6724: LD_INT 1
6726: EQUAL
6727: IFFALSE 6879
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6729: LD_ADDR_EXP 30
6733: PUSH
6734: LD_EXP 30
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: CALL_OW 3
6746: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6747: LD_VAR 0 1
6751: PPUSH
6752: CALL_OW 266
6756: PUSH
6757: LD_INT 4
6759: EQUAL
6760: IFFALSE 6771
// ComUpgrade ( b ) ;
6762: LD_VAR 0 1
6766: PPUSH
6767: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6771: LD_VAR 0 1
6775: PPUSH
6776: CALL_OW 266
6780: PUSH
6781: LD_INT 32
6783: EQUAL
6784: IFFALSE 6879
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: LD_INT 6
6793: PUSH
6794: LD_INT 7
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 2
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_INT 22
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 30
6834: PUSH
6835: LD_INT 5
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PPUSH
6846: CALL_OW 69
6850: ST_TO_ADDR
// if barracks then
6851: LD_VAR 0 3
6855: IFFALSE 6879
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: PPUSH
6866: CALL_OW 313
6870: PUSH
6871: LD_INT 1
6873: ARRAY
6874: PPUSH
6875: CALL_OW 122
// end ; end ; end ;
6879: PPOPN 3
6881: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6882: LD_VAR 0 2
6886: PPUSH
6887: CALL_OW 255
6891: PUSH
6892: LD_INT 1
6894: EQUAL
6895: IFFALSE 6974
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6897: LD_VAR 0 1
6901: PPUSH
6902: CALL_OW 264
6906: PUSH
6907: LD_INT 12
6909: EQUAL
6910: IFFALSE 6922
// usCargo := vehicle ;
6912: LD_ADDR_EXP 29
6916: PUSH
6917: LD_VAR 0 1
6921: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 264
6931: PUSH
6932: LD_INT 12
6934: PUSH
6935: LD_INT 13
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: IN
6942: NOT
6943: IFFALSE 6974
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6945: LD_ADDR_EXP 28
6949: PUSH
6950: LD_EXP 28
6954: PPUSH
6955: LD_EXP 28
6959: PUSH
6960: LD_INT 1
6962: PLUS
6963: PPUSH
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 1
6973: ST_TO_ADDR
// end ; end ;
6974: PPOPN 2
6976: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
6977: LD_VAR 0 2
6981: PPUSH
6982: CALL_OW 255
6986: PUSH
6987: LD_INT 1
6989: EQUAL
6990: IFFALSE 7004
// AddComEnterUnit ( un , amFac ) ;
6992: LD_VAR 0 1
6996: PPUSH
6997: LD_INT 25
6999: PPUSH
7000: CALL_OW 180
// end ;
7004: PPOPN 4
7006: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 255
7016: PUSH
7017: LD_INT 1
7019: EQUAL
7020: PUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 266
7030: PUSH
7031: LD_INT 32
7033: EQUAL
7034: AND
7035: PUSH
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 257
7045: PUSH
7046: LD_INT 1
7048: PUSH
7049: LD_INT 5
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: IN
7056: AND
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 30
7070: PUSH
7071: LD_INT 5
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 50
7080: PUSH
7081: EMPTY
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: AND
7094: IFFALSE 7164
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7096: LD_INT 74
7098: PPUSH
7099: LD_INT 120
7101: PPUSH
7102: CALL_OW 428
7106: PPUSH
7107: CALL_OW 313
7111: PUSH
7112: LD_INT 6
7114: LESS
7115: IFFALSE 7164
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7117: LD_VAR 0 2
7121: PPUSH
7122: LD_INT 74
7124: PPUSH
7125: LD_INT 120
7127: PPUSH
7128: CALL_OW 428
7132: PPUSH
7133: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7137: LD_VAR 0 2
7141: PPUSH
7142: CALL_OW 257
7146: PUSH
7147: LD_INT 1
7149: EQUAL
7150: IFFALSE 7164
// AddComChangeProfession ( un , class_sniper ) ;
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_INT 5
7159: PPUSH
7160: CALL_OW 183
// end ; end ; end_of_file
7164: PPOPN 2
7166: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
7171: PPUSH
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
// Video ( true ) ;
7177: LD_INT 1
7179: PPUSH
7180: CALL 51775 0 1
// music_nat := 1 ;
7184: LD_ADDR_OWVAR 71
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// music_class := music_recon ;
7192: LD_ADDR_OWVAR 72
7196: PUSH
7197: LD_INT 3
7199: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7200: LD_INT 184
7202: PPUSH
7203: LD_INT 142
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: LD_INT 10
7211: NEG
7212: PPUSH
7213: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7217: LD_INT 184
7219: PPUSH
7220: LD_INT 142
7222: PPUSH
7223: LD_INT 2
7225: PPUSH
7226: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7230: LD_INT 204
7232: PPUSH
7233: LD_INT 151
7235: PPUSH
7236: LD_INT 2
7238: PPUSH
7239: LD_INT 10
7241: NEG
7242: PPUSH
7243: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7247: LD_INT 204
7249: PPUSH
7250: LD_INT 151
7252: PPUSH
7253: LD_INT 2
7255: PPUSH
7256: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7260: LD_INT 184
7262: PPUSH
7263: LD_INT 142
7265: PPUSH
7266: CALL_OW 86
// wait ( 0 0$2 ) ;
7270: LD_INT 70
7272: PPUSH
7273: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7277: LD_ADDR_VAR 0 5
7281: PUSH
7282: LD_EXP 12
7286: PUSH
7287: LD_EXP 13
7291: PUSH
7292: LD_EXP 14
7296: PUSH
7297: LD_EXP 15
7301: PUSH
7302: LD_EXP 16
7306: PUSH
7307: LD_EXP 17
7311: PUSH
7312: LD_EXP 18
7316: PUSH
7317: LD_EXP 19
7321: PUSH
7322: LD_EXP 21
7326: PUSH
7327: LD_EXP 22
7331: PUSH
7332: LD_EXP 23
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_EXP 24
7354: UNION
7355: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7356: LD_ADDR_VAR 0 6
7360: PUSH
7361: LD_VAR 0 5
7365: PPUSH
7366: LD_INT 25
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 72
7380: PUSH
7381: LD_INT 0
7383: GREATER
7384: ST_TO_ADDR
// hasCamera := false ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_INT 0
7392: ST_TO_ADDR
// if not hasEng then
7393: LD_VAR 0 6
7397: NOT
7398: IFFALSE 7426
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7400: LD_VAR 0 5
7404: PUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 5
7412: PPUSH
7413: CALL_OW 12
7417: ARRAY
7418: PPUSH
7419: LD_INT 2
7421: PPUSH
7422: CALL_OW 336
// if heikeVehicles then
7426: LD_EXP 26
7430: IFFALSE 8054
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7432: LD_ADDR_VAR 0 5
7436: PUSH
7437: LD_VAR 0 5
7441: PPUSH
7442: LD_INT 3
7444: PPUSH
7445: CALL 53820 0 2
7449: ST_TO_ADDR
// for i in heikeVehicles do
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_EXP 26
7459: PUSH
7460: FOR_IN
7461: IFFALSE 8052
// begin if not tmp then
7463: LD_VAR 0 5
7467: NOT
7468: IFFALSE 7472
// break ;
7470: GO 8052
// uc_side := 2 ;
7472: LD_ADDR_OWVAR 20
7476: PUSH
7477: LD_INT 2
7479: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7480: LD_ADDR_OWVAR 21
7484: PUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_INT 5
7492: ARRAY
7493: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7494: LD_ADDR_OWVAR 37
7498: PUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7508: LD_ADDR_OWVAR 39
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7522: LD_ADDR_OWVAR 38
7526: PUSH
7527: LD_VAR 0 2
7531: PUSH
7532: LD_INT 3
7534: ARRAY
7535: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7536: LD_ADDR_OWVAR 40
7540: PUSH
7541: LD_VAR 0 2
7545: PUSH
7546: LD_INT 4
7548: ARRAY
7549: ST_TO_ADDR
// veh := CreateVehicle ;
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: CALL_OW 45
7559: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7560: LD_VAR 0 4
7564: PPUSH
7565: LD_INT 4
7567: PPUSH
7568: CALL_OW 233
// if i [ 3 ] = control_manual then
7572: LD_VAR 0 2
7576: PUSH
7577: LD_INT 3
7579: ARRAY
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7669
// begin PlaceUnitArea ( veh , startArea , false ) ;
7586: LD_VAR 0 4
7590: PPUSH
7591: LD_INT 1
7593: PPUSH
7594: LD_INT 0
7596: PPUSH
7597: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7601: LD_VAR 0 2
7605: PUSH
7606: LD_INT 4
7608: ARRAY
7609: PUSH
7610: LD_INT 31
7612: EQUAL
7613: IFFALSE 7631
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7615: LD_VAR 0 5
7619: PUSH
7620: LD_INT 1
7622: ARRAY
7623: PPUSH
7624: LD_INT 3
7626: PPUSH
7627: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7631: LD_VAR 0 5
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 4
7644: PPUSH
7645: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7649: LD_ADDR_VAR 0 5
7653: PUSH
7654: LD_VAR 0 5
7658: PPUSH
7659: LD_INT 1
7661: PPUSH
7662: CALL_OW 3
7666: ST_TO_ADDR
// end else
7667: GO 7730
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7669: LD_INT 22
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 34
7681: PUSH
7682: LD_INT 31
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: IFFALSE 7730
// begin PlaceUnitArea ( veh , startArea , false ) ;
7699: LD_VAR 0 4
7703: PPUSH
7704: LD_INT 1
7706: PPUSH
7707: LD_INT 0
7709: PPUSH
7710: CALL_OW 49
// Connect ( veh ) ;
7714: LD_VAR 0 4
7718: PPUSH
7719: CALL 23023 0 1
// wait ( 0 0$2 ) ;
7723: LD_INT 70
7725: PPUSH
7726: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7730: LD_VAR 0 4
7734: PPUSH
7735: LD_VAR 0 2
7739: PUSH
7740: LD_INT 6
7742: ARRAY
7743: PPUSH
7744: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7748: LD_VAR 0 4
7752: PPUSH
7753: LD_INT 20
7755: PPUSH
7756: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 7
7767: ARRAY
7768: PUSH
7769: LD_VAR 0 4
7773: PPUSH
7774: CALL_OW 264
7778: PUSH
7779: LD_INT 51
7781: PUSH
7782: LD_INT 32
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: IN
7789: AND
7790: IFFALSE 7841
// begin for j := 1 to 2 do
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: DOUBLE
7798: LD_INT 1
7800: DEC
7801: ST_TO_ADDR
7802: LD_INT 2
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7839
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7808: LD_VAR 0 4
7812: PPUSH
7813: LD_VAR 0 3
7817: PPUSH
7818: LD_VAR 0 2
7822: PUSH
7823: LD_INT 7
7825: ARRAY
7826: PUSH
7827: LD_VAR 0 3
7831: ARRAY
7832: PPUSH
7833: CALL_OW 291
7837: GO 7805
7839: POP
7840: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7841: LD_VAR 0 4
7845: PPUSH
7846: LD_INT 185
7848: PPUSH
7849: LD_INT 144
7851: PPUSH
7852: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7856: LD_VAR 0 4
7860: PPUSH
7861: CALL_OW 263
7865: PUSH
7866: LD_INT 1
7868: EQUAL
7869: PUSH
7870: LD_VAR 0 7
7874: NOT
7875: AND
7876: PUSH
7877: LD_VAR 0 4
7881: PPUSH
7882: CALL_OW 311
7886: PPUSH
7887: CALL_OW 257
7891: PUSH
7892: LD_INT 2
7894: EQUAL
7895: AND
7896: IFFALSE 8001
// begin hasCamera := true ;
7898: LD_ADDR_VAR 0 7
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7906: LD_ADDR_VAR 0 8
7910: PUSH
7911: LD_VAR 0 4
7915: PPUSH
7916: CALL_OW 311
7920: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7921: LD_VAR 0 4
7925: PPUSH
7926: LD_INT 177
7928: PPUSH
7929: LD_INT 138
7931: PPUSH
7932: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7936: LD_VAR 0 8
7940: PPUSH
7941: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7945: LD_VAR 0 8
7949: PPUSH
7950: LD_INT 190
7952: PPUSH
7953: LD_INT 150
7955: PPUSH
7956: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7960: LD_VAR 0 8
7964: PPUSH
7965: LD_VAR 0 4
7969: PPUSH
7970: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7974: LD_VAR 0 8
7978: PPUSH
7979: LD_INT 170
7981: PPUSH
7982: LD_INT 103
7984: PPUSH
7985: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
7989: LD_INT 190
7991: PPUSH
7992: LD_INT 150
7994: PPUSH
7995: CALL_OW 84
// end else
7999: GO 8043
// begin AddComWait ( veh , 0 0$2 ) ;
8001: LD_VAR 0 4
8005: PPUSH
8006: LD_INT 70
8008: PPUSH
8009: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8013: LD_VAR 0 4
8017: PPUSH
8018: LD_INT 179
8020: PPUSH
8021: LD_INT 129
8023: PPUSH
8024: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8028: LD_VAR 0 4
8032: PPUSH
8033: LD_INT 170
8035: PPUSH
8036: LD_INT 103
8038: PPUSH
8039: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7460
8052: POP
8053: POP
// end ; if tmp then
8054: LD_VAR 0 5
8058: IFFALSE 8203
// begin for i in tmp do
8060: LD_ADDR_VAR 0 2
8064: PUSH
8065: LD_VAR 0 5
8069: PUSH
8070: FOR_IN
8071: IFFALSE 8201
// begin SetDir ( i , 4 ) ;
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_INT 4
8080: PPUSH
8081: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8085: LD_VAR 0 2
8089: PPUSH
8090: LD_INT 1
8092: PPUSH
8093: LD_INT 0
8095: PPUSH
8096: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8100: LD_VAR 0 2
8104: PPUSH
8105: LD_INT 185
8107: PPUSH
8108: LD_INT 144
8110: PPUSH
8111: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8115: LD_VAR 0 2
8119: PPUSH
8120: CALL_OW 257
8124: PUSH
8125: LD_INT 2
8127: EQUAL
8128: PUSH
8129: LD_VAR 0 7
8133: NOT
8134: AND
8135: IFFALSE 8162
// begin hasCamera := true ;
8137: LD_ADDR_VAR 0 7
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8145: LD_VAR 0 2
8149: PPUSH
8150: LD_INT 190
8152: PPUSH
8153: LD_INT 150
8155: PPUSH
8156: CALL_OW 217
// end else
8160: GO 8177
// AddComMoveXY ( i , 179 , 129 ) ;
8162: LD_VAR 0 2
8166: PPUSH
8167: LD_INT 179
8169: PPUSH
8170: LD_INT 129
8172: PPUSH
8173: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8177: LD_VAR 0 2
8181: PPUSH
8182: LD_INT 170
8184: PPUSH
8185: LD_INT 103
8187: PPUSH
8188: CALL_OW 171
// wait ( 0 0$2 ) ;
8192: LD_INT 70
8194: PPUSH
8195: CALL_OW 67
// end ;
8199: GO 8070
8201: POP
8202: POP
// end ; if heikeApes then
8203: LD_EXP 25
8207: IFFALSE 8290
// begin for i in heikeApes do
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_EXP 25
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8288
// begin SetDir ( i , 4 ) ;
8222: LD_VAR 0 2
8226: PPUSH
8227: LD_INT 4
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: LD_INT 0
8244: PPUSH
8245: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8249: LD_VAR 0 2
8253: PPUSH
8254: LD_INT 185
8256: PPUSH
8257: LD_INT 144
8259: PPUSH
8260: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8264: LD_VAR 0 2
8268: PPUSH
8269: LD_INT 170
8271: PPUSH
8272: LD_INT 103
8274: PPUSH
8275: CALL_OW 171
// wait ( 0 0$2 ) ;
8279: LD_INT 70
8281: PPUSH
8282: CALL_OW 67
// end ;
8286: GO 8219
8288: POP
8289: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8290: LD_EXP 12
8294: PPUSH
8295: LD_INT 163
8297: PPUSH
8298: LD_INT 89
8300: PPUSH
8301: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8305: LD_EXP 12
8309: PPUSH
8310: LD_STRING DH-Intro-1
8312: PPUSH
8313: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8317: LD_INT 175
8319: PPUSH
8320: LD_INT 117
8322: PPUSH
8323: CALL_OW 84
// if Markov then
8327: LD_EXP 19
8331: IFFALSE 8906
// begin Say ( Markov , DMar-Intro-2 ) ;
8333: LD_EXP 19
8337: PPUSH
8338: LD_STRING DMar-Intro-2
8340: PPUSH
8341: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8345: LD_EXP 19
8349: PPUSH
8350: LD_STRING DMar-Intro-3
8352: PPUSH
8353: CALL_OW 88
// wait ( 0 0$1 ) ;
8357: LD_INT 35
8359: PPUSH
8360: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8364: LD_EXP 12
8368: PPUSH
8369: CALL_OW 85
// if Kurt then
8373: LD_EXP 22
8377: IFFALSE 8429
// begin if IsInUnit ( Kurt ) then
8379: LD_EXP 22
8383: PPUSH
8384: CALL_OW 310
8388: IFFALSE 8399
// ComExit ( Kurt ) ;
8390: LD_EXP 22
8394: PPUSH
8395: CALL 52191 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8399: LD_EXP 22
8403: PPUSH
8404: LD_INT 130
8406: PPUSH
8407: LD_INT 56
8409: PPUSH
8410: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8414: LD_EXP 22
8418: PPUSH
8419: LD_INT 129
8421: PPUSH
8422: LD_INT 56
8424: PPUSH
8425: CALL_OW 178
// end ; if Kaia then
8429: LD_EXP 17
8433: IFFALSE 8613
// begin Say ( Kaia , DK-Intro-4 ) ;
8435: LD_EXP 17
8439: PPUSH
8440: LD_STRING DK-Intro-4
8442: PPUSH
8443: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8447: LD_EXP 19
8451: PPUSH
8452: LD_STRING DMar-Intro-5
8454: PPUSH
8455: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8459: LD_EXP 19
8463: PPUSH
8464: LD_STRING DMar-Intro-6
8466: PPUSH
8467: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8471: LD_EXP 21
8475: PPUSH
8476: LD_STRING DO-Intro-7
8478: PPUSH
8479: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8483: LD_INT 160
8485: PPUSH
8486: LD_INT 85
8488: PPUSH
8489: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8493: LD_EXP 19
8497: PPUSH
8498: LD_STRING DMar-Intro-8
8500: PPUSH
8501: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8505: LD_EXP 19
8509: PPUSH
8510: LD_STRING DMar-Intro-9
8512: PPUSH
8513: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8517: LD_EXP 19
8521: PPUSH
8522: LD_STRING DMar-Intro-10
8524: PPUSH
8525: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8529: LD_EXP 19
8533: PPUSH
8534: LD_STRING DMar-Intro-11
8536: PPUSH
8537: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8541: LD_EXP 13
8545: PPUSH
8546: LD_STRING DG-Intro-12
8548: PPUSH
8549: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8553: LD_EXP 13
8557: PPUSH
8558: LD_STRING DG-Intro-13
8560: PPUSH
8561: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8565: LD_EXP 13
8569: PPUSH
8570: LD_STRING DG-Intro-14
8572: PPUSH
8573: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8577: LD_EXP 13
8581: PPUSH
8582: LD_STRING DG-Intro-15
8584: PPUSH
8585: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8589: LD_EXP 12
8593: PPUSH
8594: LD_STRING DH-Intro-16
8596: PPUSH
8597: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8601: LD_EXP 19
8605: PPUSH
8606: LD_STRING DMar-Intro-17
8608: PPUSH
8609: CALL_OW 88
// end ; if Kurt and Mike then
8613: LD_EXP 22
8617: PUSH
8618: LD_EXP 14
8622: AND
8623: IFFALSE 8906
// begin CenterNowOnUnits ( Kurt ) ;
8625: LD_EXP 22
8629: PPUSH
8630: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8634: LD_EXP 22
8638: PPUSH
8639: LD_EXP 12
8643: PPUSH
8644: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8648: LD_EXP 22
8652: PPUSH
8653: LD_STRING DKs-Intro-18
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8660: LD_EXP 22
8664: PPUSH
8665: LD_STRING DKs-Intro-19
8667: PPUSH
8668: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8672: LD_EXP 14
8676: PPUSH
8677: CALL_OW 87
// if IsInUnit ( Mike ) then
8681: LD_EXP 14
8685: PPUSH
8686: CALL_OW 310
8690: IFFALSE 8701
// ComExit ( Mike ) ;
8692: LD_EXP 14
8696: PPUSH
8697: CALL 52191 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8701: LD_EXP 14
8705: PPUSH
8706: LD_INT 129
8708: PPUSH
8709: LD_INT 53
8711: PPUSH
8712: CALL_OW 171
// AddComHold ( Mike ) ;
8716: LD_EXP 14
8720: PPUSH
8721: CALL_OW 200
// wait ( 0 0$2 ) ;
8725: LD_INT 70
8727: PPUSH
8728: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8732: LD_EXP 14
8736: PPUSH
8737: LD_STRING DM-Intro-20
8739: PPUSH
8740: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8744: LD_ADDR_EXP 3
8748: PUSH
8749: LD_STRING Scout
8751: PPUSH
8752: CALL_OW 97
8756: ST_TO_ADDR
// if scoutActive = 1 then
8757: LD_EXP 3
8761: PUSH
8762: LD_INT 1
8764: EQUAL
8765: IFFALSE 8862
// begin CenterNowOnUnits ( Kurt ) ;
8767: LD_EXP 22
8771: PPUSH
8772: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8776: LD_EXP 12
8780: PPUSH
8781: LD_STRING DH-Intro-21
8783: PPUSH
8784: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8788: LD_EXP 14
8792: PPUSH
8793: LD_STRING DM-Intro-22
8795: PPUSH
8796: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8800: LD_EXP 22
8804: PPUSH
8805: LD_STRING DKs-Intro-23
8807: PPUSH
8808: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8812: LD_EXP 22
8816: PPUSH
8817: LD_INT 5
8819: PPUSH
8820: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8824: LD_EXP 14
8828: PPUSH
8829: LD_INT 5
8831: PPUSH
8832: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8836: LD_EXP 22
8840: PUSH
8841: LD_EXP 14
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: LD_INT 104
8852: PPUSH
8853: LD_INT 66
8855: PPUSH
8856: CALL_OW 111
// end else
8860: GO 8906
// begin scoutActive := 0 ;
8862: LD_ADDR_EXP 3
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8870: LD_EXP 12
8874: PPUSH
8875: LD_STRING DH-Intro-a-21
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8882: LD_EXP 14
8886: PPUSH
8887: LD_STRING DM-Intro-a-22
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8894: LD_EXP 22
8898: PPUSH
8899: LD_STRING DKs-Intro-a-23
8901: PPUSH
8902: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8906: LD_INT 0
8908: PPUSH
8909: CALL 51775 0 1
// music_nat := music_auto ;
8913: LD_ADDR_OWVAR 71
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// music_class := music_auto ;
8921: LD_ADDR_OWVAR 72
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8929: LD_STRING M1
8931: PPUSH
8932: CALL_OW 337
// wait ( 0 0$3 ) ;
8936: LD_INT 105
8938: PPUSH
8939: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8943: LD_EXP 12
8947: PPUSH
8948: LD_STRING DH-Base-1
8950: PPUSH
8951: CALL_OW 88
// if Kaia then
8955: LD_EXP 17
8959: IFFALSE 9069
// begin Say ( Kaia , DK-Base-2 ) ;
8961: LD_EXP 17
8965: PPUSH
8966: LD_STRING DK-Base-2
8968: PPUSH
8969: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8973: LD_EXP 12
8977: PPUSH
8978: LD_STRING DH-Base-3
8980: PPUSH
8981: CALL_OW 88
// if Aviradze then
8985: LD_EXP 23
8989: IFFALSE 9069
// begin Say ( Aviradze , DA-Base-4 ) ;
8991: LD_EXP 23
8995: PPUSH
8996: LD_STRING DA-Base-4
8998: PPUSH
8999: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9003: LD_EXP 17
9007: PPUSH
9008: LD_STRING DK-Base-5
9010: PPUSH
9011: CALL_OW 88
// if Markov then
9015: LD_EXP 19
9019: IFFALSE 9069
// begin Say ( Markov , DMar-Base-6 ) ;
9021: LD_EXP 19
9025: PPUSH
9026: LD_STRING DMar-Base-6
9028: PPUSH
9029: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_STRING DK-Base-7
9040: PPUSH
9041: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9045: LD_EXP 19
9049: PPUSH
9050: LD_STRING DMar-Base-8
9052: PPUSH
9053: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9057: LD_EXP 19
9061: PPUSH
9062: LD_STRING DMar-Base-9
9064: PPUSH
9065: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9069: CALL_OW 22
// end ;
9073: LD_VAR 0 1
9077: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9078: LD_EXP 5
9082: IFFALSE 10186
9084: GO 9086
9086: DISABLE
9087: LD_INT 0
9089: PPUSH
9090: PPUSH
// begin InGameOn ;
9091: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9095: LD_EXP 14
9099: PUSH
9100: LD_EXP 22
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: LD_EXP 12
9113: PPUSH
9114: CALL_OW 119
// ComExit ( Heike ) ;
9118: LD_EXP 12
9122: PPUSH
9123: CALL 52191 0 1
// if IsOk ( Mike ) then
9127: LD_EXP 14
9131: PPUSH
9132: CALL_OW 302
9136: IFFALSE 9154
// AddComTurnUnit ( Heike , Mike ) else
9138: LD_EXP 12
9142: PPUSH
9143: LD_EXP 14
9147: PPUSH
9148: CALL_OW 179
9152: GO 9168
// AddComTurnUnit ( Heike , Kurt ) ;
9154: LD_EXP 12
9158: PPUSH
9159: LD_EXP 22
9163: PPUSH
9164: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9168: LD_EXP 14
9172: PPUSH
9173: CALL_OW 302
9177: PUSH
9178: LD_EXP 22
9182: PPUSH
9183: CALL_OW 302
9187: AND
9188: IFFALSE 9439
// begin CenterNowOnUnits ( Mike ) ;
9190: LD_EXP 14
9194: PPUSH
9195: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9199: LD_EXP 14
9203: PPUSH
9204: LD_STRING DM-Scout-1
9206: PPUSH
9207: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9211: LD_EXP 12
9215: PPUSH
9216: LD_STRING DH-Scout-2
9218: PPUSH
9219: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9223: LD_EXP 22
9227: PPUSH
9228: LD_STRING DKs-Scout-3
9230: PPUSH
9231: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9235: LD_EXP 12
9239: PPUSH
9240: LD_STRING DH-Scout-4
9242: PPUSH
9243: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9247: LD_EXP 12
9251: PPUSH
9252: LD_STRING DH-Scout-5
9254: PPUSH
9255: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9259: LD_ADDR_VAR 0 2
9263: PUSH
9264: LD_INT 72
9266: PUSH
9267: LD_INT 122
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 89
9276: PUSH
9277: LD_INT 131
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 99
9286: PUSH
9287: LD_INT 139
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 100
9296: PUSH
9297: LD_INT 148
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// for i in tmp do
9310: LD_ADDR_VAR 0 1
9314: PUSH
9315: LD_VAR 0 2
9319: PUSH
9320: FOR_IN
9321: IFFALSE 9379
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9323: LD_VAR 0 1
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: PPUSH
9332: LD_VAR 0 1
9336: PUSH
9337: LD_INT 2
9339: ARRAY
9340: PPUSH
9341: LD_INT 2
9343: PPUSH
9344: LD_INT 6
9346: NEG
9347: PPUSH
9348: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9352: LD_VAR 0 1
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 1
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 2
9372: PPUSH
9373: CALL_OW 331
// end ;
9377: GO 9320
9379: POP
9380: POP
// CenterOnXY ( 83 , 132 ) ;
9381: LD_INT 83
9383: PPUSH
9384: LD_INT 132
9386: PPUSH
9387: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9391: LD_EXP 22
9395: PPUSH
9396: LD_STRING DKs-Scout-6
9398: PPUSH
9399: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9403: LD_EXP 14
9407: PPUSH
9408: LD_STRING DM-Scout-7
9410: PPUSH
9411: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9415: LD_EXP 14
9419: PPUSH
9420: LD_STRING DM-Scout-8
9422: PPUSH
9423: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9427: LD_EXP 22
9431: PPUSH
9432: LD_STRING DKs-Scout-9
9434: PPUSH
9435: CALL_OW 88
// end ; if IsDead ( Mike ) then
9439: LD_EXP 14
9443: PPUSH
9444: CALL_OW 301
9448: IFFALSE 9615
// begin CenterNowOnUnits ( Kurt ) ;
9450: LD_EXP 22
9454: PPUSH
9455: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9459: LD_EXP 22
9463: PPUSH
9464: LD_STRING DKs-Scout-b-1
9466: PPUSH
9467: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9471: LD_EXP 22
9475: PPUSH
9476: LD_STRING DKs-Scout-b-2
9478: PPUSH
9479: CALL_OW 88
// if IsOk ( Givi ) then
9483: LD_EXP 13
9487: PPUSH
9488: CALL_OW 302
9492: IFFALSE 9567
// begin ComExit ( Givi ) ;
9494: LD_EXP 13
9498: PPUSH
9499: CALL 52191 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9503: LD_EXP 13
9507: PPUSH
9508: LD_EXP 22
9512: PPUSH
9513: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9517: LD_EXP 13
9521: PPUSH
9522: LD_STRING DG-Scout-b-3
9524: PPUSH
9525: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9529: LD_EXP 13
9533: PPUSH
9534: LD_STRING DG-Scout-b-4
9536: PPUSH
9537: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9541: LD_EXP 13
9545: PPUSH
9546: LD_STRING DG-Scout-b-5
9548: PPUSH
9549: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9553: LD_EXP 12
9557: PPUSH
9558: LD_STRING DH-Scout-b-6
9560: PPUSH
9561: CALL_OW 88
// end else
9565: GO 9579
// Say ( Heike , DH-Scout-a-4 ) ;
9567: LD_EXP 12
9571: PPUSH
9572: LD_STRING DH-Scout-a-4
9574: PPUSH
9575: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9579: LD_EXP 22
9583: PPUSH
9584: LD_STRING DKs-Scout-b-7
9586: PPUSH
9587: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9591: LD_EXP 22
9595: PPUSH
9596: LD_STRING DKs-Scout-b-8
9598: PPUSH
9599: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9603: LD_EXP 22
9607: PPUSH
9608: LD_STRING DKs-Scout-b-9
9610: PPUSH
9611: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9615: LD_EXP 22
9619: PPUSH
9620: CALL_OW 301
9624: IFFALSE 9903
// begin CenterNowOnUnits ( Mike ) ;
9626: LD_EXP 14
9630: PPUSH
9631: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9635: LD_EXP 14
9639: PPUSH
9640: LD_STRING DM-Scout-a-1
9642: PPUSH
9643: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9647: LD_EXP 14
9651: PPUSH
9652: LD_STRING DM-Scout-a-2
9654: PPUSH
9655: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9659: LD_EXP 14
9663: PPUSH
9664: CALL_OW 256
9668: PUSH
9669: LD_INT 1000
9671: LESS
9672: IFFALSE 9688
// Say ( Heike , DH-Scout-a-3 ) else
9674: LD_EXP 12
9678: PPUSH
9679: LD_STRING DH-Scout-a-3
9681: PPUSH
9682: CALL_OW 88
9686: GO 9700
// Say ( Heike , DH-Scout-a-4 ) ;
9688: LD_EXP 12
9692: PPUSH
9693: LD_STRING DH-Scout-a-4
9695: PPUSH
9696: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9700: LD_EXP 14
9704: PPUSH
9705: LD_STRING DM-Scout-a-5
9707: PPUSH
9708: CALL_OW 88
// if IsOk ( Kaia ) then
9712: LD_EXP 17
9716: PPUSH
9717: CALL_OW 302
9721: IFFALSE 9903
// begin ComExit ( Kaia ) ;
9723: LD_EXP 17
9727: PPUSH
9728: CALL 52191 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9732: LD_EXP 17
9736: PPUSH
9737: LD_EXP 14
9741: PPUSH
9742: CALL_OW 172
// wait ( 0 0$2 ) ;
9746: LD_INT 70
9748: PPUSH
9749: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9753: LD_EXP 17
9757: PPUSH
9758: LD_EXP 14
9762: PPUSH
9763: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9767: LD_EXP 14
9771: PPUSH
9772: LD_EXP 17
9776: PPUSH
9777: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9781: LD_EXP 17
9785: PPUSH
9786: LD_STRING DK-Scout-a-6
9788: PPUSH
9789: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9793: LD_EXP 14
9797: PPUSH
9798: LD_STRING DM-Scout-a-7
9800: PPUSH
9801: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9805: LD_EXP 17
9809: PPUSH
9810: LD_STRING DK-Scout-a-8
9812: PPUSH
9813: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9817: LD_EXP 17
9821: PPUSH
9822: LD_STRING DK-Scout-a-9
9824: PPUSH
9825: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9829: LD_EXP 12
9833: PPUSH
9834: LD_STRING DH-Scout-a-10
9836: PPUSH
9837: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9841: LD_EXP 14
9845: PPUSH
9846: LD_EXP 12
9850: PPUSH
9851: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9855: LD_EXP 14
9859: PPUSH
9860: LD_STRING DM-Scout-a-11
9862: PPUSH
9863: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9867: LD_EXP 14
9871: PPUSH
9872: LD_STRING DM-Scout-a-12
9874: PPUSH
9875: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9879: LD_EXP 14
9883: PPUSH
9884: LD_STRING DM-Scout-a-13
9886: PPUSH
9887: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9891: LD_EXP 14
9895: PPUSH
9896: LD_STRING DM-Scout-a-14
9898: PPUSH
9899: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9903: LD_EXP 13
9907: PPUSH
9908: CALL_OW 302
9912: IFFALSE 9940
// begin Say ( Givi , DG-Scout-10 ) ;
9914: LD_EXP 13
9918: PPUSH
9919: LD_STRING DG-Scout-10
9921: PPUSH
9922: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9926: LD_EXP 13
9930: PPUSH
9931: LD_STRING DG-Scout-11
9933: PPUSH
9934: CALL_OW 88
// end else
9938: GO 9997
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9940: LD_EXP 24
9944: PPUSH
9945: LD_INT 26
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 72
9959: PPUSH
9960: LD_STRING DArm-Scout-10
9962: PPUSH
9963: CALL 162 0 2
9967: NOT
9968: IFFALSE 9997
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9970: LD_EXP 24
9974: PPUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PPUSH
9990: LD_STRING DArf-Scout-10
9992: PPUSH
9993: CALL 162 0 2
// Say ( Heike , DH-Scout-12 ) ;
9997: LD_EXP 12
10001: PPUSH
10002: LD_STRING DH-Scout-12
10004: PPUSH
10005: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10009: LD_EXP 12
10013: PPUSH
10014: LD_STRING DH-Scout-13
10016: PPUSH
10017: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10021: LD_EXP 14
10025: PPUSH
10026: CALL_OW 302
10030: PUSH
10031: LD_EXP 22
10035: PPUSH
10036: CALL_OW 302
10040: AND
10041: IFFALSE 10069
// begin Say ( Mike , DM-Scout-14 ) ;
10043: LD_EXP 14
10047: PPUSH
10048: LD_STRING DM-Scout-14
10050: PPUSH
10051: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10055: LD_EXP 12
10059: PPUSH
10060: LD_STRING DH-Scout-c-14
10062: PPUSH
10063: CALL_OW 88
// end else
10067: GO 10162
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10069: LD_EXP 14
10073: PPUSH
10074: CALL_OW 302
10078: PUSH
10079: LD_EXP 22
10083: PPUSH
10084: CALL_OW 302
10088: XOR
10089: IFFALSE 10150
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10091: LD_EXP 24
10095: PPUSH
10096: LD_INT 26
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL_OW 72
10110: PPUSH
10111: LD_STRING DArm-Scout-a-14
10113: PPUSH
10114: CALL 162 0 2
10118: NOT
10119: IFFALSE 10148
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10121: LD_EXP 24
10125: PPUSH
10126: LD_INT 26
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 72
10140: PPUSH
10141: LD_STRING DArf-Scout-a-14
10143: PPUSH
10144: CALL 162 0 2
// end else
10148: GO 10162
// Say ( Heike , DH-Scout-d-14 ) ;
10150: LD_EXP 12
10154: PPUSH
10155: LD_STRING DH-Scout-d-14
10157: PPUSH
10158: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10162: LD_EXP 12
10166: PPUSH
10167: LD_STRING DH-Scout-15
10169: PPUSH
10170: CALL_OW 88
// InGameOff ;
10174: CALL_OW 9
// usAttacksAllowed := true ;
10178: LD_ADDR_EXP 6
10182: PUSH
10183: LD_INT 1
10185: ST_TO_ADDR
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10189: LD_EXP 4
10193: IFFALSE 10370
10195: GO 10197
10197: DISABLE
10198: LD_INT 0
10200: PPUSH
// begin spoken := true ;
10201: LD_ADDR_VAR 0 1
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10209: LD_INT 1050
10211: PPUSH
10212: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10216: LD_EXP 12
10220: PPUSH
10221: LD_STRING DH-Scout-c-1
10223: PPUSH
10224: CALL_OW 88
// if not IsOk ( Givi ) then
10228: LD_EXP 13
10232: PPUSH
10233: CALL_OW 302
10237: NOT
10238: IFFALSE 10242
// exit ;
10240: GO 10370
// if IsOk ( Givi ) then
10242: LD_EXP 13
10246: PPUSH
10247: CALL_OW 302
10251: IFFALSE 10279
// begin Say ( Givi , DG-Scout-c-2 ) ;
10253: LD_EXP 13
10257: PPUSH
10258: LD_STRING DG-Scout-c-2
10260: PPUSH
10261: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10265: LD_EXP 13
10269: PPUSH
10270: LD_STRING DG-Scout-c-3
10272: PPUSH
10273: CALL_OW 88
// end else
10277: GO 10352
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_EXP 24
10288: PPUSH
10289: LD_INT 26
10291: PUSH
10292: LD_INT 1
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 72
10303: PPUSH
10304: LD_STRING DArm-Scout-c-3
10306: PPUSH
10307: CALL 162 0 2
10311: ST_TO_ADDR
// if not spoken then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10352
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10319: LD_ADDR_VAR 0 1
10323: PUSH
10324: LD_EXP 24
10328: PPUSH
10329: LD_INT 26
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PPUSH
10339: CALL_OW 72
10343: PPUSH
10344: LD_STRING DArf-Scout-c-3
10346: PPUSH
10347: CALL 162 0 2
10351: ST_TO_ADDR
// ; end ; if spoken then
10352: LD_VAR 0 1
10356: IFFALSE 10370
// Say ( Heike , DH-Scout-c-4 ) ;
10358: LD_EXP 12
10362: PPUSH
10363: LD_STRING DH-Scout-c-4
10365: PPUSH
10366: CALL_OW 88
// end ;
10370: PPOPN 1
10372: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10373: LD_INT 22
10375: PUSH
10376: LD_INT 2
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 30
10385: PUSH
10386: LD_INT 7
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PUSH
10402: LD_EXP 23
10406: PPUSH
10407: CALL_OW 302
10411: AND
10412: IFFALSE 10497
10414: GO 10416
10416: DISABLE
// begin DialogueOn ;
10417: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10421: LD_EXP 23
10425: PPUSH
10426: LD_STRING DA-Lab-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10433: LD_EXP 12
10437: PPUSH
10438: LD_STRING DH-Lab-2
10440: PPUSH
10441: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10445: LD_EXP 23
10449: PPUSH
10450: LD_STRING DA-Lab-3
10452: PPUSH
10453: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10457: LD_EXP 23
10461: PPUSH
10462: LD_STRING DA-Lab-4
10464: PPUSH
10465: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10469: LD_EXP 23
10473: PPUSH
10474: LD_STRING DA-Lab-5
10476: PPUSH
10477: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10481: LD_EXP 12
10485: PPUSH
10486: LD_STRING DH-Lab-6
10488: PPUSH
10489: CALL_OW 88
// DialogueOff ;
10493: CALL_OW 7
// end ;
10497: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10498: LD_INT 7
10500: PPUSH
10501: LD_INT 2
10503: PPUSH
10504: CALL_OW 321
10508: PUSH
10509: LD_INT 2
10511: EQUAL
10512: PUSH
10513: LD_EXP 13
10517: PPUSH
10518: CALL_OW 302
10522: AND
10523: IFFALSE 10692
10525: GO 10527
10527: DISABLE
// begin DialogueOn ;
10528: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10532: LD_EXP 13
10536: PPUSH
10537: LD_STRING DG-Opt-1
10539: PPUSH
10540: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10544: LD_EXP 12
10548: PPUSH
10549: LD_STRING DH-Opt-2
10551: PPUSH
10552: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10556: LD_EXP 13
10560: PPUSH
10561: LD_STRING DG-Opt-3
10563: PPUSH
10564: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10568: LD_EXP 13
10572: PPUSH
10573: LD_STRING DG-Opt-4
10575: PPUSH
10576: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10580: LD_EXP 12
10584: PPUSH
10585: LD_STRING DH-Opt-5
10587: PPUSH
10588: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10592: LD_EXP 13
10596: PPUSH
10597: LD_STRING DG-Opt-6
10599: PPUSH
10600: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10604: LD_EXP 12
10608: PPUSH
10609: LD_STRING DH-Opt-7
10611: PPUSH
10612: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10616: LD_EXP 13
10620: PPUSH
10621: LD_STRING DG-Opt-8
10623: PPUSH
10624: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10628: LD_EXP 13
10632: PPUSH
10633: LD_STRING DG-Opt-9
10635: PPUSH
10636: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10640: LD_EXP 12
10644: PPUSH
10645: LD_STRING DH-Opt-10
10647: PPUSH
10648: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10652: LD_EXP 13
10656: PPUSH
10657: LD_STRING DG-Opt-11
10659: PPUSH
10660: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10664: LD_EXP 13
10668: PPUSH
10669: LD_STRING DG-Opt-12
10671: PPUSH
10672: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10676: LD_EXP 12
10680: PPUSH
10681: LD_STRING DH-Opt-13
10683: PPUSH
10684: CALL_OW 88
// DialogueOff ;
10688: CALL_OW 7
// end ;
10692: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10693: LD_INT 40
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: CALL_OW 321
10703: PUSH
10704: LD_INT 2
10706: EQUAL
10707: PUSH
10708: LD_EXP 15
10712: PPUSH
10713: CALL_OW 302
10717: AND
10718: IFFALSE 10968
10720: GO 10722
10722: DISABLE
// begin DialogueOn ;
10723: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10727: LD_EXP 15
10731: PPUSH
10732: LD_STRING DI-Roc-1
10734: PPUSH
10735: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10739: LD_EXP 12
10743: PPUSH
10744: LD_STRING DH-Roc-2
10746: PPUSH
10747: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10751: LD_EXP 15
10755: PPUSH
10756: LD_STRING DI-Roc-3
10758: PPUSH
10759: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10763: LD_EXP 15
10767: PPUSH
10768: LD_STRING DI-Roc-4
10770: PPUSH
10771: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10775: LD_EXP 17
10779: PPUSH
10780: LD_STRING DK-Roc-5
10782: PPUSH
10783: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10787: LD_EXP 17
10791: PPUSH
10792: LD_STRING DK-Roc-6
10794: PPUSH
10795: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10799: LD_EXP 13
10803: PPUSH
10804: LD_STRING DG-Roc-7
10806: PPUSH
10807: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10811: LD_EXP 13
10815: PPUSH
10816: LD_STRING DG-Roc-8
10818: PPUSH
10819: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10823: LD_EXP 19
10827: PPUSH
10828: CALL_OW 302
10832: PUSH
10833: LD_EXP 17
10837: PPUSH
10838: CALL_OW 302
10842: AND
10843: PUSH
10844: LD_EXP 13
10848: PPUSH
10849: CALL_OW 302
10853: AND
10854: IFFALSE 10964
// begin Say ( Markov , DMar-Roc-9 ) ;
10856: LD_EXP 19
10860: PPUSH
10861: LD_STRING DMar-Roc-9
10863: PPUSH
10864: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10868: LD_EXP 19
10872: PPUSH
10873: LD_STRING DMar-Roc-10
10875: PPUSH
10876: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
10880: LD_EXP 17
10884: PPUSH
10885: LD_STRING DK-Roc-11
10887: PPUSH
10888: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
10892: LD_EXP 19
10896: PPUSH
10897: LD_STRING DMar-Roc-12
10899: PPUSH
10900: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
10904: LD_EXP 17
10908: PPUSH
10909: LD_STRING DK-Roc-13
10911: PPUSH
10912: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
10916: LD_EXP 13
10920: PPUSH
10921: LD_STRING DG-Roc-14
10923: PPUSH
10924: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
10928: LD_EXP 19
10932: PPUSH
10933: LD_STRING DMar-Roc-15
10935: PPUSH
10936: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
10940: LD_EXP 19
10944: PPUSH
10945: LD_STRING DMar-Roc-16
10947: PPUSH
10948: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
10952: LD_EXP 17
10956: PPUSH
10957: LD_STRING DK-Roc-17
10959: PPUSH
10960: CALL_OW 88
// end ; DialogueOff ;
10964: CALL_OW 7
// end ;
10968: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
10969: LD_EXP 27
10973: PPUSH
10974: CALL_OW 256
10978: PUSH
10979: LD_INT 1000
10981: LESS
10982: PUSH
10983: LD_INT 22
10985: PUSH
10986: LD_INT 1
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 21
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 23
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 69
11022: PUSH
11023: LD_INT 6
11025: LESS
11026: OR
11027: PUSH
11028: LD_INT 22
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 21
11040: PUSH
11041: LD_INT 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PPUSH
11063: CALL_OW 69
11067: PUSH
11068: LD_INT 2
11070: LESS
11071: OR
11072: IFFALSE 12281
11074: GO 11076
11076: DISABLE
11077: LD_INT 0
11079: PPUSH
11080: PPUSH
11081: PPUSH
// begin usAttacksAllowed := false ;
11082: LD_ADDR_EXP 6
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// usSurrender := true ;
11090: LD_ADDR_EXP 7
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11098: LD_INT 1
11100: PPUSH
11101: LD_INT 2
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_INT 22
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 21
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 60
11141: PUSH
11142: EMPTY
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: PPUSH
11150: CALL_OW 69
11154: PUSH
11155: FOR_IN
11156: IFFALSE 11169
// ComStop ( i ) ;
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 141
11167: GO 11155
11169: POP
11170: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 3
11188: PUSH
11189: LD_INT 50
11191: PUSH
11192: EMPTY
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 21
11201: PUSH
11202: LD_INT 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: PPUSH
11214: CALL_OW 69
11218: PUSH
11219: FOR_IN
11220: IFFALSE 11236
// SetLives ( i , 251 ) ;
11222: LD_VAR 0 1
11226: PPUSH
11227: LD_INT 251
11229: PPUSH
11230: CALL_OW 234
11234: GO 11219
11236: POP
11237: POP
// InGameOn ;
11238: CALL_OW 8
// ComExit ( usCommander ) ;
11242: LD_EXP 27
11246: PPUSH
11247: CALL 52191 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11251: LD_EXP 27
11255: PPUSH
11256: LD_INT 81
11258: PPUSH
11259: LD_INT 143
11261: PPUSH
11262: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11266: LD_EXP 27
11270: PPUSH
11271: LD_INT 81
11273: PPUSH
11274: LD_INT 139
11276: PPUSH
11277: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11281: LD_INT 81
11283: PPUSH
11284: LD_INT 144
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: LD_INT 10
11292: NEG
11293: PPUSH
11294: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11298: LD_EXP 27
11302: PPUSH
11303: CALL_OW 87
// wait ( 0 0$2 ) ;
11307: LD_INT 70
11309: PPUSH
11310: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11314: LD_EXP 27
11318: PPUSH
11319: LD_STRING DCa-Surrender-1
11321: PPUSH
11322: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11326: LD_EXP 12
11330: PPUSH
11331: LD_STRING DH-Surrender-2
11333: PPUSH
11334: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11338: LD_EXP 12
11342: PPUSH
11343: CALL_OW 310
11347: PPUSH
11348: CALL_OW 247
11352: PUSH
11353: LD_INT 3
11355: EQUAL
11356: IFFALSE 11374
// begin ComExit ( Heike ) ;
11358: LD_EXP 12
11362: PPUSH
11363: CALL 52191 0 1
// wait ( 3 ) ;
11367: LD_INT 3
11369: PPUSH
11370: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11374: LD_EXP 12
11378: PPUSH
11379: LD_INT 82
11381: PPUSH
11382: LD_INT 133
11384: PPUSH
11385: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11389: LD_EXP 12
11393: PPUSH
11394: LD_EXP 27
11398: PPUSH
11399: CALL_OW 179
// wait ( 0 0$3 ) ;
11403: LD_INT 105
11405: PPUSH
11406: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11410: LD_EXP 12
11414: PPUSH
11415: LD_STRING DH-Surrender-3
11417: PPUSH
11418: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11422: LD_EXP 12
11426: PPUSH
11427: LD_STRING DH-Surrender-4
11429: PPUSH
11430: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11434: LD_INT 81
11436: PPUSH
11437: LD_INT 144
11439: PPUSH
11440: LD_INT 2
11442: PPUSH
11443: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11447: LD_INT 1
11449: PPUSH
11450: LD_INT 2
11452: PPUSH
11453: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11457: LD_ADDR_VAR 0 1
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 23
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 54
11484: PUSH
11485: EMPTY
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: PPUSH
11493: CALL_OW 69
11497: PUSH
11498: FOR_IN
11499: IFFALSE 11512
// ComExit ( i ) ;
11501: LD_VAR 0 1
11505: PPUSH
11506: CALL 52191 0 1
11510: GO 11498
11512: POP
11513: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: LD_INT 22
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 4
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 69
11547: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 3
11565: PUSH
11566: LD_INT 50
11568: PUSH
11569: EMPTY
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 69
11584: ST_TO_ADDR
// if sci and hurts then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_VAR 0 2
11594: AND
11595: IFFALSE 11657
// begin for i := 1 to hurts do
11597: LD_ADDR_VAR 0 1
11601: PUSH
11602: DOUBLE
11603: LD_INT 1
11605: DEC
11606: ST_TO_ADDR
11607: LD_VAR 0 2
11611: PUSH
11612: FOR_TO
11613: IFFALSE 11655
// if i <= sci then
11615: LD_VAR 0 1
11619: PUSH
11620: LD_VAR 0 3
11624: LESSEQUAL
11625: IFFALSE 11653
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11627: LD_VAR 0 3
11631: PUSH
11632: LD_VAR 0 1
11636: ARRAY
11637: PPUSH
11638: LD_VAR 0 2
11642: PUSH
11643: LD_VAR 0 1
11647: ARRAY
11648: PPUSH
11649: CALL_OW 188
11653: GO 11612
11655: POP
11656: POP
// end ; if IsOk ( Givi ) then
11657: LD_EXP 13
11661: PPUSH
11662: CALL_OW 302
11666: IFFALSE 11682
// Say ( Givi , DG-Surrender-5 ) else
11668: LD_EXP 13
11672: PPUSH
11673: LD_STRING DG-Surrender-5
11675: PPUSH
11676: CALL_OW 88
11680: GO 11694
// Say ( Heike , DH-Surrender-a-5 ) ;
11682: LD_EXP 12
11686: PPUSH
11687: LD_STRING DH-Surrender-a-5
11689: PPUSH
11690: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11694: LD_EXP 27
11698: PPUSH
11699: LD_STRING DCa-Surrender-6
11701: PPUSH
11702: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11706: LD_EXP 27
11710: PPUSH
11711: LD_STRING DCa-Surrender-7
11713: PPUSH
11714: CALL_OW 88
// if IsOk ( Givi ) then
11718: LD_EXP 13
11722: PPUSH
11723: CALL_OW 302
11727: IFFALSE 11743
// Say ( Givi , DG-Surrender-8 ) else
11729: LD_EXP 13
11733: PPUSH
11734: LD_STRING DG-Surrender-8
11736: PPUSH
11737: CALL_OW 88
11741: GO 11755
// Say ( Heike , DH-Surrender-a-8 ) ;
11743: LD_EXP 12
11747: PPUSH
11748: LD_STRING DH-Surrender-a-8
11750: PPUSH
11751: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11755: LD_EXP 27
11759: PPUSH
11760: LD_STRING DCa-Surrender-9
11762: PPUSH
11763: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11767: LD_EXP 12
11771: PPUSH
11772: LD_STRING DH-Surrender-10
11774: PPUSH
11775: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11779: LD_EXP 27
11783: PPUSH
11784: LD_STRING DCa-Surrender-11
11786: PPUSH
11787: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11791: LD_EXP 12
11795: PPUSH
11796: LD_STRING DH-Surrender-12
11798: PPUSH
11799: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11803: LD_EXP 27
11807: PPUSH
11808: LD_STRING DCa-Surrender-13
11810: PPUSH
11811: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11815: LD_EXP 27
11819: PPUSH
11820: LD_STRING DCa-Surrender-14
11822: PPUSH
11823: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11827: LD_EXP 27
11831: PPUSH
11832: LD_STRING DCa-Surrender-15
11834: PPUSH
11835: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11839: LD_EXP 27
11843: PPUSH
11844: LD_STRING DCa-Surrender-16
11846: PPUSH
11847: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11851: LD_EXP 17
11855: PPUSH
11856: LD_STRING DK-Surrender-17
11858: PPUSH
11859: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11863: LD_EXP 21
11867: PPUSH
11868: LD_STRING DO-Surrender-18
11870: PPUSH
11871: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11875: LD_EXP 21
11879: PPUSH
11880: LD_STRING DO-Surrender-19
11882: PPUSH
11883: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
11887: LD_EXP 22
11891: PPUSH
11892: LD_STRING DKs-Surrender-20
11894: PPUSH
11895: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
11899: LD_EXP 22
11903: PPUSH
11904: LD_STRING DKs-Surrender-21
11906: PPUSH
11907: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
11911: LD_EXP 19
11915: PPUSH
11916: LD_STRING DMar-Surrender-22
11918: PPUSH
11919: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
11923: LD_EXP 19
11927: PPUSH
11928: LD_STRING DMar-Surrender-23
11930: PPUSH
11931: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
11935: LD_EXP 18
11939: PPUSH
11940: LD_STRING DS-Surrender-24
11942: PPUSH
11943: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
11947: LD_EXP 23
11951: PPUSH
11952: LD_STRING DA-Surrender-25
11954: PPUSH
11955: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
11959: LD_EXP 15
11963: PPUSH
11964: LD_STRING DI-Surrender-26
11966: PPUSH
11967: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
11971: LD_EXP 16
11975: PPUSH
11976: LD_STRING DKam-Surrender-27
11978: PPUSH
11979: CALL_OW 88
// if IsOk ( Givi ) then
11983: LD_EXP 13
11987: PPUSH
11988: CALL_OW 302
11992: IFFALSE 12032
// begin Say ( Givi , DG-Surrender-28 ) ;
11994: LD_EXP 13
11998: PPUSH
11999: LD_STRING DG-Surrender-28
12001: PPUSH
12002: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12006: LD_EXP 13
12010: PPUSH
12011: LD_STRING DG-Surrender-29
12013: PPUSH
12014: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12018: LD_EXP 13
12022: PPUSH
12023: LD_STRING DG-Surrender-30
12025: PPUSH
12026: CALL_OW 88
// end else
12030: GO 12068
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12032: LD_EXP 12
12036: PPUSH
12037: LD_STRING DH-Surrender-a-28
12039: PPUSH
12040: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12044: LD_EXP 12
12048: PPUSH
12049: LD_STRING DH-Surrender-a-29
12051: PPUSH
12052: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12056: LD_EXP 12
12060: PPUSH
12061: LD_STRING DH-Surrender-a-30
12063: PPUSH
12064: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12068: CALL 13892 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12072: LD_INT 22
12074: PUSH
12075: LD_INT 3
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 69
12086: PPUSH
12087: LD_INT 176
12089: PUSH
12090: LD_INT 123
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: PPUSH
12100: CALL 54198 0 2
// if not IsEnvironment ( 190 , 150 ) then
12104: LD_INT 190
12106: PPUSH
12107: LD_INT 150
12109: PPUSH
12110: CALL_OW 351
12114: NOT
12115: IFFALSE 12134
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12117: LD_INT 190
12119: PPUSH
12120: LD_INT 150
12122: PPUSH
12123: LD_INT 2
12125: PPUSH
12126: LD_INT 8
12128: NEG
12129: PPUSH
12130: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12134: LD_INT 193
12136: PPUSH
12137: LD_INT 150
12139: PPUSH
12140: CALL_OW 84
// if IsOk ( Markov ) then
12144: LD_EXP 19
12148: PPUSH
12149: CALL_OW 302
12153: IFFALSE 12169
// Say ( Markov , DMar-Surrender-31 ) else
12155: LD_EXP 19
12159: PPUSH
12160: LD_STRING DMar-Surrender-31
12162: PPUSH
12163: CALL_OW 88
12167: GO 12226
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12169: LD_EXP 24
12173: PPUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 1
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PPUSH
12184: CALL_OW 72
12188: PPUSH
12189: LD_STRING DArm-Surrender-a-31
12191: PPUSH
12192: CALL 162 0 2
12196: NOT
12197: IFFALSE 12226
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12199: LD_EXP 24
12203: PPUSH
12204: LD_INT 26
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: PPUSH
12219: LD_STRING DArf-Surrender-a-31
12221: PPUSH
12222: CALL 162 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12226: LD_EXP 12
12230: PPUSH
12231: LD_STRING DH-Surrender-32
12233: PPUSH
12234: CALL_OW 88
// InGameOff ;
12238: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12242: LD_STRING M2
12244: PPUSH
12245: CALL_OW 337
// wait ( 0 0$20 ) ;
12249: LD_INT 700
12251: PPUSH
12252: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12256: CALL 14254 0 0
// russianAttack := true ;
12260: LD_ADDR_EXP 8
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12268: LD_INT 190
12270: PPUSH
12271: LD_INT 150
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 331
// end ;
12281: PPOPN 3
12283: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12284: LD_EXP 11
12288: PUSH
12289: LD_INT 2
12291: PPUSH
12292: CALL_OW 463
12296: NOT
12297: AND
12298: PUSH
12299: LD_EXP 12
12303: PPUSH
12304: CALL_OW 302
12308: AND
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 3
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 69
12338: AND
12339: PUSH
12340: LD_EXP 19
12344: PPUSH
12345: CALL_OW 302
12349: PUSH
12350: LD_EXP 24
12354: PPUSH
12355: LD_INT 50
12357: PUSH
12358: EMPTY
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: OR
12366: AND
12367: IFFALSE 12595
12369: GO 12371
12371: DISABLE
// begin DialogueOn ;
12372: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DH-Heavy-1
12383: PPUSH
12384: CALL_OW 88
// if IsOk ( Markov ) then
12388: LD_EXP 19
12392: PPUSH
12393: CALL_OW 302
12397: IFFALSE 12522
// begin Say ( Markov , DMar-Heavy-2 ) ;
12399: LD_EXP 19
12403: PPUSH
12404: LD_STRING DMar-Heavy-2
12406: PPUSH
12407: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12411: LD_INT 22
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 30
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 69
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: PPUSH
12444: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12448: LD_EXP 19
12452: PPUSH
12453: LD_STRING DMar-Heavy-3
12455: PPUSH
12456: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12460: LD_EXP 19
12464: PPUSH
12465: LD_STRING DMar-Heavy-4
12467: PPUSH
12468: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12472: LD_EXP 19
12476: PPUSH
12477: LD_STRING DMar-Heavy-5
12479: PPUSH
12480: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12484: LD_EXP 19
12488: PPUSH
12489: LD_STRING DMar-Heavy-6
12491: PPUSH
12492: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12496: LD_EXP 12
12500: PPUSH
12501: LD_STRING DH-Heavy-7
12503: PPUSH
12504: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12508: LD_EXP 12
12512: PPUSH
12513: LD_STRING DH-Heavy-8
12515: PPUSH
12516: CALL_OW 88
// end else
12520: GO 12579
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12522: LD_EXP 24
12526: PPUSH
12527: LD_INT 26
12529: PUSH
12530: LD_INT 1
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: PPUSH
12542: LD_STRING DArm-Heavy-a-2
12544: PPUSH
12545: CALL 162 0 2
12549: NOT
12550: IFFALSE 12579
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12552: LD_EXP 24
12556: PPUSH
12557: LD_INT 26
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 72
12571: PPUSH
12572: LD_STRING DArf-Heavy-a-2
12574: PPUSH
12575: CALL 162 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12579: LD_EXP 12
12583: PPUSH
12584: LD_STRING DH-Heavy-9
12586: PPUSH
12587: CALL_OW 88
// DialogueOff ;
12591: CALL_OW 7
// end ;
12595: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12596: LD_EXP 31
12600: PPUSH
12601: LD_INT 101
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PPUSH
12611: CALL_OW 72
12615: PUSH
12616: LD_EXP 12
12620: PPUSH
12621: CALL_OW 302
12625: AND
12626: IFFALSE 12769
12628: GO 12630
12630: DISABLE
// begin DialogueOn ;
12631: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12635: LD_EXP 31
12639: PPUSH
12640: LD_INT 101
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 72
12654: PPUSH
12655: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12659: LD_EXP 12
12663: PPUSH
12664: LD_STRING DH-Flank-1
12666: PPUSH
12667: CALL_OW 88
// if IsOk ( Mike ) then
12671: LD_EXP 14
12675: PPUSH
12676: CALL_OW 302
12680: IFFALSE 12696
// Say ( Mike , DM-Flank-2 ) else
12682: LD_EXP 14
12686: PPUSH
12687: LD_STRING DM-Flank-2
12689: PPUSH
12690: CALL_OW 88
12694: GO 12753
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12696: LD_EXP 24
12700: PPUSH
12701: LD_INT 26
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 72
12715: PPUSH
12716: LD_STRING DArm-Flank-a-2
12718: PPUSH
12719: CALL 162 0 2
12723: NOT
12724: IFFALSE 12753
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12726: LD_EXP 24
12730: PPUSH
12731: LD_INT 26
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 72
12745: PPUSH
12746: LD_STRING DArm-Flank-a-2
12748: PPUSH
12749: CALL 162 0 2
// Say ( Heike , DH-Flank-3 ) ;
12753: LD_EXP 12
12757: PPUSH
12758: LD_STRING DH-Flank-3
12760: PPUSH
12761: CALL_OW 88
// DialogueOff ;
12765: CALL_OW 7
// end ;
12769: END
// every 0 0$3 trigger seeRemoteVehicle do
12770: LD_EXP 10
12774: IFFALSE 12998
12776: GO 12778
12778: DISABLE
// begin DialogueOn ;
12779: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12783: LD_EXP 12
12787: PPUSH
12788: LD_STRING DH-USRC-1
12790: PPUSH
12791: CALL_OW 88
// if IsOk ( Markov ) then
12795: LD_EXP 19
12799: PPUSH
12800: CALL_OW 302
12804: IFFALSE 12820
// Say ( Markov , DMar-USRC-2 ) else
12806: LD_EXP 19
12810: PPUSH
12811: LD_STRING DMar-USRC-2
12813: PPUSH
12814: CALL_OW 88
12818: GO 12877
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12820: LD_EXP 24
12824: PPUSH
12825: LD_INT 26
12827: PUSH
12828: LD_INT 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 72
12839: PPUSH
12840: LD_STRING DArm-USRC-a-2
12842: PPUSH
12843: CALL 162 0 2
12847: NOT
12848: IFFALSE 12877
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12850: LD_EXP 24
12854: PPUSH
12855: LD_INT 26
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 72
12869: PPUSH
12870: LD_STRING DArf-USRC-a-2
12872: PPUSH
12873: CALL 162 0 2
// DialogueOff ;
12877: CALL_OW 7
// wait ( 0 0$10 ) ;
12881: LD_INT 350
12883: PPUSH
12884: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
12888: LD_EXP 12
12892: PPUSH
12893: LD_STRING DH-USRC-3
12895: PPUSH
12896: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12900: LD_INT 35
12902: PPUSH
12903: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12907: LD_INT 2
12909: PPUSH
12910: LD_INT 22
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 30
12922: PUSH
12923: LD_INT 36
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: PUSH
12939: LD_INT 1
12941: ARRAY
12942: PPUSH
12943: CALL_OW 292
12947: IFFALSE 12900
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12949: LD_INT 22
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 30
12961: PUSH
12962: LD_INT 36
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
12986: LD_EXP 12
12990: PPUSH
12991: LD_STRING DH-USRCFound-1
12993: PPUSH
12994: CALL_OW 88
// end ;
12998: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
12999: LD_EXP 17
13003: PPUSH
13004: CALL_OW 256
13008: PUSH
13009: LD_INT 3
13011: LESS
13012: IFFALSE 13049
13014: GO 13016
13016: DISABLE
// begin DialogueOn ;
13017: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13021: LD_EXP 17
13025: PPUSH
13026: LD_STRING DK-Dead-1
13028: PPUSH
13029: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13033: LD_EXP 17
13037: PPUSH
13038: LD_STRING DK-Dead-2
13040: PPUSH
13041: CALL_OW 91
// DialogueOff ;
13045: CALL_OW 7
// end ;
13049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_rocket_launcher ] ] ) do
13050: LD_INT 22
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 34
13062: PUSH
13063: LD_INT 28
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: IFFALSE 13091
13080: GO 13082
13082: DISABLE
// hasRockets := true ;
13083: LD_ADDR_EXP 9
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
13091: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13092: LD_EXP 8
13096: PUSH
13097: LD_INT 22
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PPUSH
13107: CALL_OW 69
13111: NOT
13112: AND
13113: IFFALSE 13723
13115: GO 13117
13117: DISABLE
// begin DialogueOn ;
13118: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13122: LD_EXP 12
13126: PPUSH
13127: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13131: LD_EXP 12
13135: PPUSH
13136: LD_STRING DH-End-1
13138: PPUSH
13139: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13143: LD_EXP 20
13147: PPUSH
13148: LD_STRING DShar-End-2
13150: PPUSH
13151: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13155: LD_EXP 17
13159: PPUSH
13160: LD_STRING DK-End-3
13162: PPUSH
13163: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13167: LD_EXP 12
13171: PPUSH
13172: LD_STRING DH-End-4
13174: PPUSH
13175: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13179: LD_EXP 20
13183: PPUSH
13184: LD_STRING DShar-End-5
13186: PPUSH
13187: CALL_OW 94
// if IsOk ( Markov ) then
13191: LD_EXP 19
13195: PPUSH
13196: CALL_OW 302
13200: IFFALSE 13214
// Say ( Kaia , DK-End-6 ) ;
13202: LD_EXP 17
13206: PPUSH
13207: LD_STRING DK-End-6
13209: PPUSH
13210: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13214: LD_EXP 17
13218: PPUSH
13219: LD_STRING DK-End-7
13221: PPUSH
13222: CALL_OW 88
// if IsOk ( Kaia ) then
13226: LD_EXP 17
13230: PPUSH
13231: CALL_OW 302
13235: IFFALSE 13273
// begin Say ( Givi , DG-End-8 ) ;
13237: LD_EXP 13
13241: PPUSH
13242: LD_STRING DG-End-8
13244: PPUSH
13245: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13249: LD_EXP 13
13253: PPUSH
13254: LD_STRING DG-End-9
13256: PPUSH
13257: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13261: LD_EXP 12
13265: PPUSH
13266: LD_STRING DH-End-10
13268: PPUSH
13269: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13273: LD_EXP 12
13277: PPUSH
13278: LD_STRING DH-End-11
13280: PPUSH
13281: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13285: LD_INT 7
13287: PPUSH
13288: LD_INT 2
13290: PPUSH
13291: CALL_OW 321
13295: PUSH
13296: LD_INT 2
13298: EQUAL
13299: IFFALSE 13313
// AddMedal ( med1 , 1 ) else
13301: LD_STRING med1
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 101
13311: GO 13324
// AddMedal ( med1 , - 1 ) ;
13313: LD_STRING med1
13315: PPUSH
13316: LD_INT 1
13318: NEG
13319: PPUSH
13320: CALL_OW 101
// if hasRockets then
13324: LD_EXP 9
13328: IFFALSE 13342
// AddMedal ( med2 , 1 ) else
13330: LD_STRING med2
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 101
13340: GO 13353
// AddMedal ( med2 , - 1 ) ;
13342: LD_STRING med2
13344: PPUSH
13345: LD_INT 1
13347: NEG
13348: PPUSH
13349: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13353: LD_OWVAR 1
13357: PUSH
13358: LD_INT 105000
13360: PUSH
13361: LD_INT 94500
13363: PUSH
13364: LD_INT 84000
13366: PUSH
13367: LD_INT 73500
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_OWVAR 67
13380: ARRAY
13381: LESS
13382: IFFALSE 13396
// AddMedal ( med3 , 1 ) else
13384: LD_STRING med3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 101
13394: GO 13407
// AddMedal ( med3 , - 1 ) ;
13396: LD_STRING med3
13398: PPUSH
13399: LD_INT 1
13401: NEG
13402: PPUSH
13403: CALL_OW 101
// GiveMedals ( MAIN ) ;
13407: LD_STRING MAIN
13409: PPUSH
13410: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13414: LD_INT 22
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: PPUSH
13454: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13458: LD_EXP 27
13462: PPUSH
13463: LD_STRING 07_UsCommander
13465: PPUSH
13466: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13470: LD_INT 22
13472: PUSH
13473: LD_INT 1
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 69
13509: PUSH
13510: LD_EXP 27
13514: DIFF
13515: PPUSH
13516: LD_STRING 07_Americans
13518: PPUSH
13519: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13523: LD_EXP 12
13527: PPUSH
13528: LD_STRING 07_Heike
13530: PPUSH
13531: CALL_OW 38
// if Aviradze then
13535: LD_EXP 23
13539: IFFALSE 13553
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13541: LD_EXP 23
13545: PPUSH
13546: LD_STRING 07_Aviradze
13548: PPUSH
13549: CALL_OW 38
// if Ibrahim then
13553: LD_EXP 15
13557: IFFALSE 13571
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13559: LD_EXP 15
13563: PPUSH
13564: LD_STRING 07_Ibrahim
13566: PPUSH
13567: CALL_OW 38
// if Kamil then
13571: LD_EXP 16
13575: IFFALSE 13589
// SaveCharacters ( Kamil , 07_Kamil ) ;
13577: LD_EXP 16
13581: PPUSH
13582: LD_STRING 07_Kamil
13584: PPUSH
13585: CALL_OW 38
// if Sophia then
13589: LD_EXP 18
13593: IFFALSE 13607
// SaveCharacters ( Sophia , 07_Sophia ) ;
13595: LD_EXP 18
13599: PPUSH
13600: LD_STRING 07_Sophia
13602: PPUSH
13603: CALL_OW 38
// if Kaia then
13607: LD_EXP 17
13611: IFFALSE 13625
// SaveCharacters ( Kaia , 07_Kaia ) ;
13613: LD_EXP 17
13617: PPUSH
13618: LD_STRING 07_Kaia
13620: PPUSH
13621: CALL_OW 38
// if Givi then
13625: LD_EXP 13
13629: IFFALSE 13643
// SaveCharacters ( Givi , 07_Givi ) ;
13631: LD_EXP 13
13635: PPUSH
13636: LD_STRING 07_Givi
13638: PPUSH
13639: CALL_OW 38
// if Mike then
13643: LD_EXP 14
13647: IFFALSE 13661
// SaveCharacters ( Mike , 07_Mike ) ;
13649: LD_EXP 14
13653: PPUSH
13654: LD_STRING 07_Mike
13656: PPUSH
13657: CALL_OW 38
// if Markov then
13661: LD_EXP 19
13665: IFFALSE 13679
// SaveCharacters ( Markov , 07_Markov ) ;
13667: LD_EXP 19
13671: PPUSH
13672: LD_STRING 07_Markov
13674: PPUSH
13675: CALL_OW 38
// if Kurt then
13679: LD_EXP 22
13683: IFFALSE 13697
// SaveCharacters ( Kurt , 07_Kurt ) ;
13685: LD_EXP 22
13689: PPUSH
13690: LD_STRING 07_Kurt
13692: PPUSH
13693: CALL_OW 38
// if heikeSecondSquad then
13697: LD_EXP 24
13701: IFFALSE 13715
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13703: LD_EXP 24
13707: PPUSH
13708: LD_STRING 07_others
13710: PPUSH
13711: CALL_OW 38
// YouWin ;
13715: CALL_OW 103
// DialogueOff ;
13719: CALL_OW 7
// end ; end_of_file
13723: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13724: LD_INT 7
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: CALL_OW 287
13734: PUSH
13735: LD_INT 300
13737: PUSH
13738: LD_INT 150
13740: PUSH
13741: LD_INT 100
13743: PUSH
13744: LD_INT 80
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: PUSH
13753: LD_OWVAR 67
13757: ARRAY
13758: LESS
13759: IFFALSE 13786
13761: GO 13763
13763: DISABLE
// begin enable ;
13764: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 5
13770: PPUSH
13771: CALL_OW 12
13775: PPUSH
13776: LD_INT 7
13778: PPUSH
13779: LD_INT 1
13781: PPUSH
13782: CALL_OW 55
// end ;
13786: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13787: LD_INT 8
13789: PPUSH
13790: LD_INT 1
13792: PPUSH
13793: CALL_OW 287
13797: PUSH
13798: LD_INT 300
13800: PUSH
13801: LD_INT 250
13803: PUSH
13804: LD_INT 200
13806: PUSH
13807: LD_INT 180
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: PUSH
13816: LD_OWVAR 67
13820: ARRAY
13821: LESS
13822: IFFALSE 13849
13824: GO 13826
13826: DISABLE
// begin enable ;
13827: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 5
13833: PPUSH
13834: CALL_OW 12
13838: PPUSH
13839: LD_INT 8
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 55
// end ;
13849: END
// every 0 0$40 trigger tick < 4 4$10 do
13850: LD_OWVAR 1
13854: PUSH
13855: LD_INT 8750
13857: LESS
13858: IFFALSE 13891
13860: GO 13862
13862: DISABLE
// begin enable ;
13863: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
13864: LD_INT 1
13866: PPUSH
13867: LD_INT 5
13869: PPUSH
13870: CALL_OW 12
13874: PPUSH
13875: LD_INT 130
13877: PPUSH
13878: LD_INT 18
13880: PPUSH
13881: LD_INT 12
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: CALL_OW 56
// end ; end_of_file
13891: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
// uc_side := 3 ;
13899: LD_ADDR_OWVAR 20
13903: PUSH
13904: LD_INT 3
13906: ST_TO_ADDR
// uc_nation := 3 ;
13907: LD_ADDR_OWVAR 21
13911: PUSH
13912: LD_INT 3
13914: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: LD_INT 184
13922: PUSH
13923: LD_INT 144
13925: PUSH
13926: LD_INT 5
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 191
13936: PUSH
13937: LD_INT 147
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 202
13950: PUSH
13951: LD_INT 151
13953: PUSH
13954: LD_INT 4
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 210
13964: PUSH
13965: LD_INT 152
13967: PUSH
13968: LD_INT 4
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: ST_TO_ADDR
// for i := 1 to 4 do
13982: LD_ADDR_VAR 0 2
13986: PUSH
13987: DOUBLE
13988: LD_INT 1
13990: DEC
13991: ST_TO_ADDR
13992: LD_INT 4
13994: PUSH
13995: FOR_TO
13996: IFFALSE 14165
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
13998: LD_INT 24
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: LD_INT 43
14009: PUSH
14010: LD_INT 44
14012: PUSH
14013: LD_INT 46
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_VAR 0 2
14025: PUSH
14026: LD_INT 3
14028: MOD
14029: PUSH
14030: LD_INT 1
14032: PLUS
14033: ARRAY
14034: PPUSH
14035: LD_INT 40
14037: PPUSH
14038: CALL 19930 0 5
// veh := CreateVehicle ;
14042: LD_ADDR_VAR 0 5
14046: PUSH
14047: CALL_OW 45
14051: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14052: LD_VAR 0 5
14056: PPUSH
14057: LD_VAR 0 3
14061: PUSH
14062: LD_VAR 0 2
14066: ARRAY
14067: PUSH
14068: LD_INT 3
14070: ARRAY
14071: PPUSH
14072: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14076: LD_VAR 0 5
14080: PPUSH
14081: LD_VAR 0 3
14085: PUSH
14086: LD_VAR 0 2
14090: ARRAY
14091: PUSH
14092: LD_INT 1
14094: ARRAY
14095: PPUSH
14096: LD_VAR 0 3
14100: PUSH
14101: LD_VAR 0 2
14105: ARRAY
14106: PUSH
14107: LD_INT 2
14109: ARRAY
14110: PPUSH
14111: LD_INT 0
14113: PPUSH
14114: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14118: LD_INT 0
14120: PPUSH
14121: LD_INT 6
14123: PUSH
14124: LD_INT 7
14126: PUSH
14127: LD_INT 8
14129: PUSH
14130: LD_INT 8
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_OWVAR 67
14143: ARRAY
14144: PPUSH
14145: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14149: CALL_OW 44
14153: PPUSH
14154: LD_VAR 0 5
14158: PPUSH
14159: CALL_OW 52
// end ;
14163: GO 13995
14165: POP
14166: POP
// for i := 1 to 4 do
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_INT 4
14179: PUSH
14180: FOR_TO
14181: IFFALSE 14247
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14183: LD_INT 0
14185: PPUSH
14186: LD_INT 6
14188: PUSH
14189: LD_INT 7
14191: PUSH
14192: LD_INT 8
14194: PUSH
14195: LD_INT 8
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_OWVAR 67
14208: ARRAY
14209: PPUSH
14210: CALL_OW 381
// un := CreateHuman ;
14214: LD_ADDR_VAR 0 4
14218: PUSH
14219: CALL_OW 44
14223: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14224: LD_VAR 0 4
14228: PPUSH
14229: LD_INT 185
14231: PPUSH
14232: LD_INT 145
14234: PPUSH
14235: LD_INT 6
14237: PPUSH
14238: LD_INT 0
14240: PPUSH
14241: CALL_OW 50
// end ;
14245: GO 14180
14247: POP
14248: POP
// end ;
14249: LD_VAR 0 1
14253: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14254: LD_INT 0
14256: PPUSH
14257: PPUSH
14258: PPUSH
// uc_side := 3 ;
14259: LD_ADDR_OWVAR 20
14263: PUSH
14264: LD_INT 3
14266: ST_TO_ADDR
// if Difficulty > 1 then
14267: LD_OWVAR 67
14271: PUSH
14272: LD_INT 1
14274: GREATER
14275: IFFALSE 14437
// begin uc_nation := 0 ;
14277: LD_ADDR_OWVAR 21
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14285: LD_ADDR_VAR 0 2
14289: PUSH
14290: DOUBLE
14291: LD_INT 1
14293: DEC
14294: ST_TO_ADDR
14295: LD_INT 4
14297: PUSH
14298: LD_INT 5
14300: PUSH
14301: LD_INT 6
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_OWVAR 67
14313: PUSH
14314: LD_INT 1
14316: PLUS
14317: ARRAY
14318: PUSH
14319: FOR_TO
14320: IFFALSE 14435
// begin hc_class := class_apeman_soldier ;
14322: LD_ADDR_OWVAR 28
14326: PUSH
14327: LD_INT 15
14329: ST_TO_ADDR
// hc_gallery :=  ;
14330: LD_ADDR_OWVAR 33
14334: PUSH
14335: LD_STRING 
14337: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14338: LD_ADDR_OWVAR 26
14342: PUSH
14343: LD_STRING Treci
14345: PUSH
14346: LD_STRING Ivan
14348: PUSH
14349: LD_STRING Yaromir
14351: PUSH
14352: LD_STRING Nadzieia
14354: PUSH
14355: LD_STRING Krasna
14357: PUSH
14358: LD_STRING Piaty
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 1
14371: PPUSH
14372: LD_INT 6
14374: PPUSH
14375: CALL_OW 12
14379: ARRAY
14380: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14381: LD_ADDR_OWVAR 31
14385: PUSH
14386: LD_INT 5
14388: PUSH
14389: LD_INT 0
14391: PUSH
14392: LD_INT 0
14394: PUSH
14395: LD_INT 0
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: ST_TO_ADDR
// hc_sex := sex_male ;
14404: LD_ADDR_OWVAR 27
14408: PUSH
14409: LD_INT 1
14411: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14412: CALL_OW 44
14416: PPUSH
14417: LD_INT 178
14419: PPUSH
14420: LD_INT 148
14422: PPUSH
14423: LD_INT 6
14425: PPUSH
14426: LD_INT 0
14428: PPUSH
14429: CALL_OW 50
// end ;
14433: GO 14319
14435: POP
14436: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14437: LD_ADDR_VAR 0 2
14441: PUSH
14442: DOUBLE
14443: LD_INT 1
14445: DEC
14446: ST_TO_ADDR
14447: LD_INT 4
14449: PUSH
14450: LD_INT 6
14452: PUSH
14453: LD_INT 7
14455: PUSH
14456: LD_INT 9
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: PUSH
14465: LD_OWVAR 67
14469: ARRAY
14470: PUSH
14471: FOR_TO
14472: IFFALSE 14639
// begin uc_nation := 3 ;
14474: LD_ADDR_OWVAR 21
14478: PUSH
14479: LD_INT 3
14481: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14482: LD_INT 22
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: LD_INT 1
14490: PPUSH
14491: LD_INT 45
14493: PUSH
14494: LD_INT 43
14496: PUSH
14497: LD_INT 44
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 3
14512: MOD
14513: PUSH
14514: LD_INT 1
14516: PLUS
14517: ARRAY
14518: PPUSH
14519: LD_INT 44
14521: PPUSH
14522: CALL 19930 0 5
// veh := CreateVehicle ;
14526: LD_ADDR_VAR 0 3
14530: PUSH
14531: CALL_OW 45
14535: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 4
14543: PPUSH
14544: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14548: LD_VAR 0 3
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: LD_INT 0
14558: PPUSH
14559: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14563: LD_INT 0
14565: PPUSH
14566: LD_INT 6
14568: PUSH
14569: LD_INT 7
14571: PUSH
14572: LD_INT 8
14574: PUSH
14575: LD_INT 8
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: PUSH
14584: LD_OWVAR 67
14588: ARRAY
14589: PPUSH
14590: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14594: CALL_OW 44
14598: PPUSH
14599: LD_VAR 0 3
14603: PPUSH
14604: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14608: LD_VAR 0 3
14612: PPUSH
14613: LD_INT 178
14615: PUSH
14616: LD_INT 137
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: PPUSH
14626: CALL 54198 0 2
// wait ( 0 0$2 ) ;
14630: LD_INT 70
14632: PPUSH
14633: CALL_OW 67
// end ;
14637: GO 14471
14639: POP
14640: POP
// end ;
14641: LD_VAR 0 1
14645: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14646: LD_INT 22
14648: PUSH
14649: LD_INT 3
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 32
14658: PUSH
14659: LD_INT 1
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: IFFALSE 14762
14676: GO 14678
14678: DISABLE
14679: LD_INT 0
14681: PPUSH
14682: PPUSH
// begin enable ;
14683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: LD_INT 22
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 32
14701: PUSH
14702: LD_INT 1
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: ST_TO_ADDR
// for i in tmp do
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: LD_VAR 0 2
14727: PUSH
14728: FOR_IN
14729: IFFALSE 14760
// if GetFuel ( i ) < 3 then
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 261
14740: PUSH
14741: LD_INT 3
14743: LESS
14744: IFFALSE 14758
// SetFuel ( i , 3 ) ;
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_INT 3
14753: PPUSH
14754: CALL_OW 240
14758: GO 14728
14760: POP
14761: POP
// end ;
14762: PPOPN 2
14764: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14765: LD_EXP 8
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: AND
14799: IFFALSE 15063
14801: GO 14803
14803: DISABLE
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
14808: PPUSH
// begin enable ;
14809: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14810: LD_ADDR_VAR 0 2
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 25
14827: PUSH
14828: LD_INT 3
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 3
14837: PUSH
14838: LD_INT 55
14840: PUSH
14841: EMPTY
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: ST_TO_ADDR
// if mech then
14858: LD_VAR 0 2
14862: IFFALSE 14932
// for i in mech do
14864: LD_ADDR_VAR 0 1
14868: PUSH
14869: LD_VAR 0 2
14873: PUSH
14874: FOR_IN
14875: IFFALSE 14930
// begin if IsInArea ( i , escapeArea ) then
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 13
14884: PPUSH
14885: CALL_OW 308
14889: IFFALSE 14902
// RemoveUnit ( i ) else
14891: LD_VAR 0 1
14895: PPUSH
14896: CALL_OW 64
14900: GO 14928
// if IsOk ( i ) then
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 302
14911: IFFALSE 14928
// ComMoveXY ( i , 196 , 155 ) ;
14913: LD_VAR 0 1
14917: PPUSH
14918: LD_INT 196
14920: PPUSH
14921: LD_INT 155
14923: PPUSH
14924: CALL_OW 111
// end ;
14928: GO 14874
14930: POP
14931: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
14932: LD_ADDR_VAR 0 3
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 3
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 2
14949: PUSH
14950: LD_INT 25
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 25
14962: PUSH
14963: LD_INT 15
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 2
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 50
14988: PUSH
14989: EMPTY
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: ST_TO_ADDR
// if tmp then
15002: LD_VAR 0 3
15006: IFFALSE 15063
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 171
15015: PUSH
15016: LD_INT 106
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 145
15025: PUSH
15026: LD_INT 69
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 132
15035: PUSH
15036: LD_INT 38
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 126
15045: PUSH
15046: LD_INT 15
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL 54198 0 2
// end ; end_of_file
15063: PPOPN 3
15065: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15066: LD_INT 0
15068: PPUSH
15069: PPUSH
// if exist_mode then
15070: LD_VAR 0 2
15074: IFFALSE 15099
// unit := CreateCharacter ( prefix & ident ) else
15076: LD_ADDR_VAR 0 5
15080: PUSH
15081: LD_VAR 0 3
15085: PUSH
15086: LD_VAR 0 1
15090: STR
15091: PPUSH
15092: CALL_OW 34
15096: ST_TO_ADDR
15097: GO 15114
// unit := NewCharacter ( ident ) ;
15099: LD_ADDR_VAR 0 5
15103: PUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: CALL_OW 25
15113: ST_TO_ADDR
// result := unit ;
15114: LD_ADDR_VAR 0 4
15118: PUSH
15119: LD_VAR 0 5
15123: ST_TO_ADDR
// end ;
15124: LD_VAR 0 4
15128: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15129: LD_INT 0
15131: PPUSH
15132: PPUSH
// if not side or not nation then
15133: LD_VAR 0 1
15137: NOT
15138: PUSH
15139: LD_VAR 0 2
15143: NOT
15144: OR
15145: IFFALSE 15149
// exit ;
15147: GO 15917
// case nation of nation_american :
15149: LD_VAR 0 2
15153: PUSH
15154: LD_INT 1
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15376
15162: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15163: LD_ADDR_VAR 0 4
15167: PUSH
15168: LD_INT 35
15170: PUSH
15171: LD_INT 45
15173: PUSH
15174: LD_INT 46
15176: PUSH
15177: LD_INT 47
15179: PUSH
15180: LD_INT 82
15182: PUSH
15183: LD_INT 83
15185: PUSH
15186: LD_INT 84
15188: PUSH
15189: LD_INT 85
15191: PUSH
15192: LD_INT 86
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 6
15203: PUSH
15204: LD_INT 15
15206: PUSH
15207: LD_INT 16
15209: PUSH
15210: LD_INT 7
15212: PUSH
15213: LD_INT 12
15215: PUSH
15216: LD_INT 13
15218: PUSH
15219: LD_INT 10
15221: PUSH
15222: LD_INT 14
15224: PUSH
15225: LD_INT 20
15227: PUSH
15228: LD_INT 21
15230: PUSH
15231: LD_INT 22
15233: PUSH
15234: LD_INT 25
15236: PUSH
15237: LD_INT 32
15239: PUSH
15240: LD_INT 27
15242: PUSH
15243: LD_INT 36
15245: PUSH
15246: LD_INT 69
15248: PUSH
15249: LD_INT 39
15251: PUSH
15252: LD_INT 34
15254: PUSH
15255: LD_INT 40
15257: PUSH
15258: LD_INT 48
15260: PUSH
15261: LD_INT 49
15263: PUSH
15264: LD_INT 50
15266: PUSH
15267: LD_INT 51
15269: PUSH
15270: LD_INT 52
15272: PUSH
15273: LD_INT 53
15275: PUSH
15276: LD_INT 54
15278: PUSH
15279: LD_INT 55
15281: PUSH
15282: LD_INT 56
15284: PUSH
15285: LD_INT 57
15287: PUSH
15288: LD_INT 58
15290: PUSH
15291: LD_INT 59
15293: PUSH
15294: LD_INT 60
15296: PUSH
15297: LD_INT 61
15299: PUSH
15300: LD_INT 62
15302: PUSH
15303: LD_INT 80
15305: PUSH
15306: LD_INT 82
15308: PUSH
15309: LD_INT 83
15311: PUSH
15312: LD_INT 84
15314: PUSH
15315: LD_INT 85
15317: PUSH
15318: LD_INT 86
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: ST_TO_ADDR
15374: GO 15841
15376: LD_INT 2
15378: DOUBLE
15379: EQUAL
15380: IFTRUE 15384
15382: GO 15610
15384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15385: LD_ADDR_VAR 0 4
15389: PUSH
15390: LD_INT 35
15392: PUSH
15393: LD_INT 45
15395: PUSH
15396: LD_INT 46
15398: PUSH
15399: LD_INT 47
15401: PUSH
15402: LD_INT 82
15404: PUSH
15405: LD_INT 83
15407: PUSH
15408: LD_INT 84
15410: PUSH
15411: LD_INT 85
15413: PUSH
15414: LD_INT 87
15416: PUSH
15417: LD_INT 70
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: LD_INT 11
15425: PUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 4
15431: PUSH
15432: LD_INT 5
15434: PUSH
15435: LD_INT 6
15437: PUSH
15438: LD_INT 15
15440: PUSH
15441: LD_INT 18
15443: PUSH
15444: LD_INT 7
15446: PUSH
15447: LD_INT 17
15449: PUSH
15450: LD_INT 8
15452: PUSH
15453: LD_INT 20
15455: PUSH
15456: LD_INT 21
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 72
15464: PUSH
15465: LD_INT 26
15467: PUSH
15468: LD_INT 69
15470: PUSH
15471: LD_INT 39
15473: PUSH
15474: LD_INT 40
15476: PUSH
15477: LD_INT 41
15479: PUSH
15480: LD_INT 42
15482: PUSH
15483: LD_INT 43
15485: PUSH
15486: LD_INT 48
15488: PUSH
15489: LD_INT 49
15491: PUSH
15492: LD_INT 50
15494: PUSH
15495: LD_INT 51
15497: PUSH
15498: LD_INT 52
15500: PUSH
15501: LD_INT 53
15503: PUSH
15504: LD_INT 54
15506: PUSH
15507: LD_INT 55
15509: PUSH
15510: LD_INT 56
15512: PUSH
15513: LD_INT 60
15515: PUSH
15516: LD_INT 61
15518: PUSH
15519: LD_INT 62
15521: PUSH
15522: LD_INT 66
15524: PUSH
15525: LD_INT 67
15527: PUSH
15528: LD_INT 68
15530: PUSH
15531: LD_INT 81
15533: PUSH
15534: LD_INT 82
15536: PUSH
15537: LD_INT 83
15539: PUSH
15540: LD_INT 84
15542: PUSH
15543: LD_INT 85
15545: PUSH
15546: LD_INT 87
15548: PUSH
15549: LD_INT 88
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: ST_TO_ADDR
15608: GO 15841
15610: LD_INT 3
15612: DOUBLE
15613: EQUAL
15614: IFTRUE 15618
15616: GO 15840
15618: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15619: LD_ADDR_VAR 0 4
15623: PUSH
15624: LD_INT 46
15626: PUSH
15627: LD_INT 47
15629: PUSH
15630: LD_INT 1
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: LD_INT 82
15638: PUSH
15639: LD_INT 83
15641: PUSH
15642: LD_INT 84
15644: PUSH
15645: LD_INT 85
15647: PUSH
15648: LD_INT 86
15650: PUSH
15651: LD_INT 11
15653: PUSH
15654: LD_INT 9
15656: PUSH
15657: LD_INT 20
15659: PUSH
15660: LD_INT 19
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 24
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 25
15674: PUSH
15675: LD_INT 28
15677: PUSH
15678: LD_INT 29
15680: PUSH
15681: LD_INT 30
15683: PUSH
15684: LD_INT 31
15686: PUSH
15687: LD_INT 37
15689: PUSH
15690: LD_INT 38
15692: PUSH
15693: LD_INT 32
15695: PUSH
15696: LD_INT 27
15698: PUSH
15699: LD_INT 33
15701: PUSH
15702: LD_INT 69
15704: PUSH
15705: LD_INT 39
15707: PUSH
15708: LD_INT 34
15710: PUSH
15711: LD_INT 40
15713: PUSH
15714: LD_INT 71
15716: PUSH
15717: LD_INT 23
15719: PUSH
15720: LD_INT 44
15722: PUSH
15723: LD_INT 48
15725: PUSH
15726: LD_INT 49
15728: PUSH
15729: LD_INT 50
15731: PUSH
15732: LD_INT 51
15734: PUSH
15735: LD_INT 52
15737: PUSH
15738: LD_INT 53
15740: PUSH
15741: LD_INT 54
15743: PUSH
15744: LD_INT 55
15746: PUSH
15747: LD_INT 56
15749: PUSH
15750: LD_INT 57
15752: PUSH
15753: LD_INT 58
15755: PUSH
15756: LD_INT 59
15758: PUSH
15759: LD_INT 63
15761: PUSH
15762: LD_INT 64
15764: PUSH
15765: LD_INT 65
15767: PUSH
15768: LD_INT 82
15770: PUSH
15771: LD_INT 83
15773: PUSH
15774: LD_INT 84
15776: PUSH
15777: LD_INT 85
15779: PUSH
15780: LD_INT 86
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: ST_TO_ADDR
15838: GO 15841
15840: POP
// if state > - 1 and state < 3 then
15841: LD_VAR 0 3
15845: PUSH
15846: LD_INT 1
15848: NEG
15849: GREATER
15850: PUSH
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 3
15858: LESS
15859: AND
15860: IFFALSE 15917
// for i in result do
15862: LD_ADDR_VAR 0 5
15866: PUSH
15867: LD_VAR 0 4
15871: PUSH
15872: FOR_IN
15873: IFFALSE 15915
// if GetTech ( i , side ) <> state then
15875: LD_VAR 0 5
15879: PPUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 321
15889: PUSH
15890: LD_VAR 0 3
15894: NONEQUAL
15895: IFFALSE 15913
// result := result diff i ;
15897: LD_ADDR_VAR 0 4
15901: PUSH
15902: LD_VAR 0 4
15906: PUSH
15907: LD_VAR 0 5
15911: DIFF
15912: ST_TO_ADDR
15913: GO 15872
15915: POP
15916: POP
// end ;
15917: LD_VAR 0 4
15921: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15922: LD_INT 0
15924: PPUSH
15925: PPUSH
15926: PPUSH
// result := true ;
15927: LD_ADDR_VAR 0 3
15931: PUSH
15932: LD_INT 1
15934: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 2
15944: PPUSH
15945: CALL_OW 480
15949: ST_TO_ADDR
// if not tmp then
15950: LD_VAR 0 5
15954: NOT
15955: IFFALSE 15959
// exit ;
15957: GO 16008
// for i in tmp do
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 5
15968: PUSH
15969: FOR_IN
15970: IFFALSE 16006
// if GetTech ( i , side ) <> state_researched then
15972: LD_VAR 0 4
15976: PPUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 321
15986: PUSH
15987: LD_INT 2
15989: NONEQUAL
15990: IFFALSE 16004
// begin result := false ;
15992: LD_ADDR_VAR 0 3
15996: PUSH
15997: LD_INT 0
15999: ST_TO_ADDR
// exit ;
16000: POP
16001: POP
16002: GO 16008
// end ;
16004: GO 15969
16006: POP
16007: POP
// end ;
16008: LD_VAR 0 3
16012: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16013: LD_INT 0
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16028: LD_VAR 0 1
16032: NOT
16033: PUSH
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 257
16043: PUSH
16044: LD_INT 9
16046: NONEQUAL
16047: OR
16048: IFFALSE 16052
// exit ;
16050: GO 16625
// side := GetSide ( unit ) ;
16052: LD_ADDR_VAR 0 9
16056: PUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 255
16066: ST_TO_ADDR
// tech_space := tech_spacanom ;
16067: LD_ADDR_VAR 0 12
16071: PUSH
16072: LD_INT 29
16074: ST_TO_ADDR
// tech_time := tech_taurad ;
16075: LD_ADDR_VAR 0 13
16079: PUSH
16080: LD_INT 28
16082: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16083: LD_ADDR_VAR 0 11
16087: PUSH
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 310
16097: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16098: LD_VAR 0 11
16102: PPUSH
16103: CALL_OW 247
16107: PUSH
16108: LD_INT 2
16110: EQUAL
16111: IFFALSE 16115
// exit ;
16113: GO 16625
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16115: LD_ADDR_VAR 0 8
16119: PUSH
16120: LD_INT 81
16122: PUSH
16123: LD_VAR 0 9
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 3
16134: PUSH
16135: LD_INT 21
16137: PUSH
16138: LD_INT 3
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: ST_TO_ADDR
// if not tmp then
16158: LD_VAR 0 8
16162: NOT
16163: IFFALSE 16167
// exit ;
16165: GO 16625
// if in_unit then
16167: LD_VAR 0 11
16171: IFFALSE 16195
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16173: LD_ADDR_VAR 0 10
16177: PUSH
16178: LD_VAR 0 8
16182: PPUSH
16183: LD_VAR 0 11
16187: PPUSH
16188: CALL_OW 74
16192: ST_TO_ADDR
16193: GO 16215
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16195: LD_ADDR_VAR 0 10
16199: PUSH
16200: LD_VAR 0 8
16204: PPUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 74
16214: ST_TO_ADDR
// if not enemy then
16215: LD_VAR 0 10
16219: NOT
16220: IFFALSE 16224
// exit ;
16222: GO 16625
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16224: LD_VAR 0 11
16228: PUSH
16229: LD_VAR 0 11
16233: PPUSH
16234: LD_VAR 0 10
16238: PPUSH
16239: CALL_OW 296
16243: PUSH
16244: LD_INT 13
16246: GREATER
16247: AND
16248: PUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: LD_VAR 0 10
16258: PPUSH
16259: CALL_OW 296
16263: PUSH
16264: LD_INT 12
16266: GREATER
16267: OR
16268: IFFALSE 16272
// exit ;
16270: GO 16625
// missile := [ 1 ] ;
16272: LD_ADDR_VAR 0 14
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16283: LD_VAR 0 9
16287: PPUSH
16288: LD_VAR 0 12
16292: PPUSH
16293: CALL_OW 325
16297: IFFALSE 16326
// missile := Insert ( missile , missile + 1 , 2 ) ;
16299: LD_ADDR_VAR 0 14
16303: PUSH
16304: LD_VAR 0 14
16308: PPUSH
16309: LD_VAR 0 14
16313: PUSH
16314: LD_INT 1
16316: PLUS
16317: PPUSH
16318: LD_INT 2
16320: PPUSH
16321: CALL_OW 2
16325: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16326: LD_VAR 0 9
16330: PPUSH
16331: LD_VAR 0 13
16335: PPUSH
16336: CALL_OW 325
16340: PUSH
16341: LD_VAR 0 10
16345: PPUSH
16346: CALL_OW 255
16350: PPUSH
16351: LD_VAR 0 13
16355: PPUSH
16356: CALL_OW 325
16360: NOT
16361: AND
16362: IFFALSE 16391
// missile := Insert ( missile , missile + 1 , 3 ) ;
16364: LD_ADDR_VAR 0 14
16368: PUSH
16369: LD_VAR 0 14
16373: PPUSH
16374: LD_VAR 0 14
16378: PUSH
16379: LD_INT 1
16381: PLUS
16382: PPUSH
16383: LD_INT 3
16385: PPUSH
16386: CALL_OW 2
16390: ST_TO_ADDR
// if missile < 2 then
16391: LD_VAR 0 14
16395: PUSH
16396: LD_INT 2
16398: LESS
16399: IFFALSE 16403
// exit ;
16401: GO 16625
// x := GetX ( enemy ) ;
16403: LD_ADDR_VAR 0 4
16407: PUSH
16408: LD_VAR 0 10
16412: PPUSH
16413: CALL_OW 250
16417: ST_TO_ADDR
// y := GetY ( enemy ) ;
16418: LD_ADDR_VAR 0 5
16422: PUSH
16423: LD_VAR 0 10
16427: PPUSH
16428: CALL_OW 251
16432: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16433: LD_ADDR_VAR 0 6
16437: PUSH
16438: LD_VAR 0 4
16442: PUSH
16443: LD_INT 1
16445: NEG
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL_OW 12
16454: PLUS
16455: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16456: LD_ADDR_VAR 0 7
16460: PUSH
16461: LD_VAR 0 5
16465: PUSH
16466: LD_INT 1
16468: NEG
16469: PPUSH
16470: LD_INT 1
16472: PPUSH
16473: CALL_OW 12
16477: PLUS
16478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16479: LD_VAR 0 6
16483: PPUSH
16484: LD_VAR 0 7
16488: PPUSH
16489: CALL_OW 488
16493: NOT
16494: IFFALSE 16516
// begin _x := x ;
16496: LD_ADDR_VAR 0 6
16500: PUSH
16501: LD_VAR 0 4
16505: ST_TO_ADDR
// _y := y ;
16506: LD_ADDR_VAR 0 7
16510: PUSH
16511: LD_VAR 0 5
16515: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16516: LD_ADDR_VAR 0 3
16520: PUSH
16521: LD_INT 1
16523: PPUSH
16524: LD_VAR 0 14
16528: PPUSH
16529: CALL_OW 12
16533: ST_TO_ADDR
// case i of 1 :
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 1
16541: DOUBLE
16542: EQUAL
16543: IFTRUE 16547
16545: GO 16564
16547: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16548: LD_VAR 0 1
16552: PPUSH
16553: LD_VAR 0 10
16557: PPUSH
16558: CALL_OW 115
16562: GO 16625
16564: LD_INT 2
16566: DOUBLE
16567: EQUAL
16568: IFTRUE 16572
16570: GO 16594
16572: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16573: LD_VAR 0 1
16577: PPUSH
16578: LD_VAR 0 6
16582: PPUSH
16583: LD_VAR 0 7
16587: PPUSH
16588: CALL_OW 153
16592: GO 16625
16594: LD_INT 3
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 16624
16602: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16603: LD_VAR 0 1
16607: PPUSH
16608: LD_VAR 0 6
16612: PPUSH
16613: LD_VAR 0 7
16617: PPUSH
16618: CALL_OW 154
16622: GO 16625
16624: POP
// end ;
16625: LD_VAR 0 2
16629: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
// if not unit or not building then
16638: LD_VAR 0 1
16642: NOT
16643: PUSH
16644: LD_VAR 0 2
16648: NOT
16649: OR
16650: IFFALSE 16654
// exit ;
16652: GO 16812
// x := GetX ( building ) ;
16654: LD_ADDR_VAR 0 5
16658: PUSH
16659: LD_VAR 0 2
16663: PPUSH
16664: CALL_OW 250
16668: ST_TO_ADDR
// y := GetY ( building ) ;
16669: LD_ADDR_VAR 0 6
16673: PUSH
16674: LD_VAR 0 2
16678: PPUSH
16679: CALL_OW 251
16683: ST_TO_ADDR
// for i = 0 to 5 do
16684: LD_ADDR_VAR 0 4
16688: PUSH
16689: DOUBLE
16690: LD_INT 0
16692: DEC
16693: ST_TO_ADDR
16694: LD_INT 5
16696: PUSH
16697: FOR_TO
16698: IFFALSE 16810
// begin _x := ShiftX ( x , i , 3 ) ;
16700: LD_ADDR_VAR 0 7
16704: PUSH
16705: LD_VAR 0 5
16709: PPUSH
16710: LD_VAR 0 4
16714: PPUSH
16715: LD_INT 3
16717: PPUSH
16718: CALL_OW 272
16722: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16723: LD_ADDR_VAR 0 8
16727: PUSH
16728: LD_VAR 0 6
16732: PPUSH
16733: LD_VAR 0 4
16737: PPUSH
16738: LD_INT 3
16740: PPUSH
16741: CALL_OW 273
16745: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16746: LD_VAR 0 7
16750: PPUSH
16751: LD_VAR 0 8
16755: PPUSH
16756: CALL_OW 488
16760: NOT
16761: IFFALSE 16765
// continue ;
16763: GO 16697
// if HexInfo ( _x , _y ) = 0 then
16765: LD_VAR 0 7
16769: PPUSH
16770: LD_VAR 0 8
16774: PPUSH
16775: CALL_OW 428
16779: PUSH
16780: LD_INT 0
16782: EQUAL
16783: IFFALSE 16808
// begin ComMoveXY ( unit , _x , _y ) ;
16785: LD_VAR 0 1
16789: PPUSH
16790: LD_VAR 0 7
16794: PPUSH
16795: LD_VAR 0 8
16799: PPUSH
16800: CALL_OW 111
// exit ;
16804: POP
16805: POP
16806: GO 16812
// end ; end ;
16808: GO 16697
16810: POP
16811: POP
// end ;
16812: LD_VAR 0 3
16816: RET
// export function ScanBase ( side , base_area ) ; begin
16817: LD_INT 0
16819: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16820: LD_ADDR_VAR 0 3
16824: PUSH
16825: LD_VAR 0 2
16829: PPUSH
16830: LD_INT 81
16832: PUSH
16833: LD_VAR 0 1
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 70
16846: ST_TO_ADDR
// end ;
16847: LD_VAR 0 3
16851: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16852: LD_INT 0
16854: PPUSH
16855: PPUSH
16856: PPUSH
16857: PPUSH
// result := false ;
16858: LD_ADDR_VAR 0 2
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// side := GetSide ( unit ) ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 255
16880: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16881: LD_ADDR_VAR 0 4
16885: PUSH
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 248
16895: ST_TO_ADDR
// case nat of 1 :
16896: LD_VAR 0 4
16900: PUSH
16901: LD_INT 1
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 16920
16909: POP
// tech := tech_lassight ; 2 :
16910: LD_ADDR_VAR 0 5
16914: PUSH
16915: LD_INT 12
16917: ST_TO_ADDR
16918: GO 16959
16920: LD_INT 2
16922: DOUBLE
16923: EQUAL
16924: IFTRUE 16928
16926: GO 16939
16928: POP
// tech := tech_mortar ; 3 :
16929: LD_ADDR_VAR 0 5
16933: PUSH
16934: LD_INT 41
16936: ST_TO_ADDR
16937: GO 16959
16939: LD_INT 3
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 16958
16947: POP
// tech := tech_bazooka ; end ;
16948: LD_ADDR_VAR 0 5
16952: PUSH
16953: LD_INT 44
16955: ST_TO_ADDR
16956: GO 16959
16958: POP
// if Researched ( side , tech ) then
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_VAR 0 5
16968: PPUSH
16969: CALL_OW 325
16973: IFFALSE 17000
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16975: LD_ADDR_VAR 0 2
16979: PUSH
16980: LD_INT 5
16982: PUSH
16983: LD_INT 8
16985: PUSH
16986: LD_INT 9
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 4
16998: ARRAY
16999: ST_TO_ADDR
// end ;
17000: LD_VAR 0 2
17004: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17005: LD_INT 0
17007: PPUSH
17008: PPUSH
17009: PPUSH
// if not mines then
17010: LD_VAR 0 2
17014: NOT
17015: IFFALSE 17019
// exit ;
17017: GO 17163
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17019: LD_ADDR_VAR 0 5
17023: PUSH
17024: LD_INT 81
17026: PUSH
17027: LD_VAR 0 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 3
17038: PUSH
17039: LD_INT 21
17041: PUSH
17042: LD_INT 3
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PPUSH
17057: CALL_OW 69
17061: ST_TO_ADDR
// for i in mines do
17062: LD_ADDR_VAR 0 4
17066: PUSH
17067: LD_VAR 0 2
17071: PUSH
17072: FOR_IN
17073: IFFALSE 17161
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17075: LD_VAR 0 4
17079: PUSH
17080: LD_INT 1
17082: ARRAY
17083: PPUSH
17084: LD_VAR 0 4
17088: PUSH
17089: LD_INT 2
17091: ARRAY
17092: PPUSH
17093: CALL_OW 458
17097: NOT
17098: IFFALSE 17102
// continue ;
17100: GO 17072
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17102: LD_VAR 0 4
17106: PUSH
17107: LD_INT 1
17109: ARRAY
17110: PPUSH
17111: LD_VAR 0 4
17115: PUSH
17116: LD_INT 2
17118: ARRAY
17119: PPUSH
17120: CALL_OW 428
17124: PUSH
17125: LD_VAR 0 5
17129: IN
17130: IFFALSE 17159
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17132: LD_VAR 0 4
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_VAR 0 4
17145: PUSH
17146: LD_INT 2
17148: ARRAY
17149: PPUSH
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 456
// end ;
17159: GO 17072
17161: POP
17162: POP
// end ;
17163: LD_VAR 0 3
17167: RET
// export function Count ( array ) ; var i ; begin
17168: LD_INT 0
17170: PPUSH
17171: PPUSH
// result := 0 ;
17172: LD_ADDR_VAR 0 2
17176: PUSH
17177: LD_INT 0
17179: ST_TO_ADDR
// for i in array do
17180: LD_ADDR_VAR 0 3
17184: PUSH
17185: LD_VAR 0 1
17189: PUSH
17190: FOR_IN
17191: IFFALSE 17215
// if i then
17193: LD_VAR 0 3
17197: IFFALSE 17213
// result := result + 1 ;
17199: LD_ADDR_VAR 0 2
17203: PUSH
17204: LD_VAR 0 2
17208: PUSH
17209: LD_INT 1
17211: PLUS
17212: ST_TO_ADDR
17213: GO 17190
17215: POP
17216: POP
// end ;
17217: LD_VAR 0 2
17221: RET
// export function IsEmpty ( building ) ; begin
17222: LD_INT 0
17224: PPUSH
// if not building then
17225: LD_VAR 0 1
17229: NOT
17230: IFFALSE 17234
// exit ;
17232: GO 17277
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17234: LD_ADDR_VAR 0 2
17238: PUSH
17239: LD_VAR 0 1
17243: PUSH
17244: LD_INT 22
17246: PUSH
17247: LD_VAR 0 1
17251: PPUSH
17252: CALL_OW 255
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 58
17263: PUSH
17264: EMPTY
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: IN
17276: ST_TO_ADDR
// end ;
17277: LD_VAR 0 2
17281: RET
// export function IsNotFull ( building ) ; begin
17282: LD_INT 0
17284: PPUSH
// if not building then
17285: LD_VAR 0 1
17289: NOT
17290: IFFALSE 17294
// exit ;
17292: GO 17313
// result := UnitsInside ( building ) < 6 ;
17294: LD_ADDR_VAR 0 2
17298: PUSH
17299: LD_VAR 0 1
17303: PPUSH
17304: CALL_OW 313
17308: PUSH
17309: LD_INT 6
17311: LESS
17312: ST_TO_ADDR
// end ;
17313: LD_VAR 0 2
17317: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17318: LD_INT 0
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
// tmp := [ ] ;
17324: LD_ADDR_VAR 0 3
17328: PUSH
17329: EMPTY
17330: ST_TO_ADDR
// list := [ ] ;
17331: LD_ADDR_VAR 0 5
17335: PUSH
17336: EMPTY
17337: ST_TO_ADDR
// for i = 16 to 25 do
17338: LD_ADDR_VAR 0 4
17342: PUSH
17343: DOUBLE
17344: LD_INT 16
17346: DEC
17347: ST_TO_ADDR
17348: LD_INT 25
17350: PUSH
17351: FOR_TO
17352: IFFALSE 17425
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17354: LD_ADDR_VAR 0 3
17358: PUSH
17359: LD_VAR 0 3
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_VAR 0 1
17371: PPUSH
17372: CALL_OW 255
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 91
17383: PUSH
17384: LD_VAR 0 1
17388: PUSH
17389: LD_INT 6
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_VAR 0 4
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: ADD
17422: ST_TO_ADDR
17423: GO 17351
17425: POP
17426: POP
// for i = 1 to tmp do
17427: LD_ADDR_VAR 0 4
17431: PUSH
17432: DOUBLE
17433: LD_INT 1
17435: DEC
17436: ST_TO_ADDR
17437: LD_VAR 0 3
17441: PUSH
17442: FOR_TO
17443: IFFALSE 17531
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17445: LD_ADDR_VAR 0 5
17449: PUSH
17450: LD_VAR 0 5
17454: PUSH
17455: LD_VAR 0 3
17459: PUSH
17460: LD_VAR 0 4
17464: ARRAY
17465: PPUSH
17466: CALL_OW 266
17470: PUSH
17471: LD_VAR 0 3
17475: PUSH
17476: LD_VAR 0 4
17480: ARRAY
17481: PPUSH
17482: CALL_OW 250
17486: PUSH
17487: LD_VAR 0 3
17491: PUSH
17492: LD_VAR 0 4
17496: ARRAY
17497: PPUSH
17498: CALL_OW 251
17502: PUSH
17503: LD_VAR 0 3
17507: PUSH
17508: LD_VAR 0 4
17512: ARRAY
17513: PPUSH
17514: CALL_OW 254
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: ADD
17528: ST_TO_ADDR
17529: GO 17442
17531: POP
17532: POP
// result := list ;
17533: LD_ADDR_VAR 0 2
17537: PUSH
17538: LD_VAR 0 5
17542: ST_TO_ADDR
// end ;
17543: LD_VAR 0 2
17547: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17548: LD_INT 0
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
17555: PPUSH
17556: PPUSH
// if not factory then
17557: LD_VAR 0 1
17561: NOT
17562: IFFALSE 17566
// exit ;
17564: GO 18159
// if control = control_apeman then
17566: LD_VAR 0 4
17570: PUSH
17571: LD_INT 5
17573: EQUAL
17574: IFFALSE 17683
// begin tmp := UnitsInside ( factory ) ;
17576: LD_ADDR_VAR 0 8
17580: PUSH
17581: LD_VAR 0 1
17585: PPUSH
17586: CALL_OW 313
17590: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17591: LD_VAR 0 8
17595: PPUSH
17596: LD_INT 25
17598: PUSH
17599: LD_INT 12
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PPUSH
17606: CALL_OW 72
17610: NOT
17611: IFFALSE 17621
// control := control_manual ;
17613: LD_ADDR_VAR 0 4
17617: PUSH
17618: LD_INT 1
17620: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17621: LD_ADDR_VAR 0 8
17625: PUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL 17318 0 1
17635: ST_TO_ADDR
// if tmp then
17636: LD_VAR 0 8
17640: IFFALSE 17683
// begin for i in tmp do
17642: LD_ADDR_VAR 0 7
17646: PUSH
17647: LD_VAR 0 8
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17681
// if i [ 1 ] = b_ext_radio then
17655: LD_VAR 0 7
17659: PUSH
17660: LD_INT 1
17662: ARRAY
17663: PUSH
17664: LD_INT 22
17666: EQUAL
17667: IFFALSE 17679
// begin control := control_remote ;
17669: LD_ADDR_VAR 0 4
17673: PUSH
17674: LD_INT 2
17676: ST_TO_ADDR
// break ;
17677: GO 17681
// end ;
17679: GO 17652
17681: POP
17682: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17683: LD_VAR 0 1
17687: PPUSH
17688: LD_VAR 0 2
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_VAR 0 4
17702: PPUSH
17703: LD_VAR 0 5
17707: PPUSH
17708: CALL_OW 448
17712: IFFALSE 17747
// begin result := [ chassis , engine , control , weapon ] ;
17714: LD_ADDR_VAR 0 6
17718: PUSH
17719: LD_VAR 0 2
17723: PUSH
17724: LD_VAR 0 3
17728: PUSH
17729: LD_VAR 0 4
17733: PUSH
17734: LD_VAR 0 5
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: ST_TO_ADDR
// exit ;
17745: GO 18159
// end ; _chassis := AvailableChassisList ( factory ) ;
17747: LD_ADDR_VAR 0 9
17751: PUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 475
17761: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17762: LD_ADDR_VAR 0 11
17766: PUSH
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 476
17776: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17777: LD_ADDR_VAR 0 12
17781: PUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 477
17791: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17792: LD_ADDR_VAR 0 10
17796: PUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 478
17806: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17807: LD_VAR 0 9
17811: NOT
17812: PUSH
17813: LD_VAR 0 11
17817: NOT
17818: OR
17819: PUSH
17820: LD_VAR 0 12
17824: NOT
17825: OR
17826: PUSH
17827: LD_VAR 0 10
17831: NOT
17832: OR
17833: IFFALSE 17868
// begin result := [ chassis , engine , control , weapon ] ;
17835: LD_ADDR_VAR 0 6
17839: PUSH
17840: LD_VAR 0 2
17844: PUSH
17845: LD_VAR 0 3
17849: PUSH
17850: LD_VAR 0 4
17854: PUSH
17855: LD_VAR 0 5
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: ST_TO_ADDR
// exit ;
17866: GO 18159
// end ; if not chassis in _chassis then
17868: LD_VAR 0 2
17872: PUSH
17873: LD_VAR 0 9
17877: IN
17878: NOT
17879: IFFALSE 17905
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17881: LD_ADDR_VAR 0 2
17885: PUSH
17886: LD_VAR 0 9
17890: PUSH
17891: LD_INT 1
17893: PPUSH
17894: LD_VAR 0 9
17898: PPUSH
17899: CALL_OW 12
17903: ARRAY
17904: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17905: LD_VAR 0 2
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL 18164 0 2
17919: NOT
17920: IFFALSE 17979
// repeat engine := _engine [ 1 ] ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_VAR 0 11
17931: PUSH
17932: LD_INT 1
17934: ARRAY
17935: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17936: LD_ADDR_VAR 0 11
17940: PUSH
17941: LD_VAR 0 11
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 3
17953: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17954: LD_VAR 0 2
17958: PPUSH
17959: LD_VAR 0 3
17963: PPUSH
17964: CALL 18164 0 2
17968: PUSH
17969: LD_VAR 0 11
17973: PUSH
17974: EMPTY
17975: EQUAL
17976: OR
17977: IFFALSE 17922
// if not control in _control then
17979: LD_VAR 0 4
17983: PUSH
17984: LD_VAR 0 12
17988: IN
17989: NOT
17990: IFFALSE 18016
// control := _control [ rand ( 1 , _control ) ] ;
17992: LD_ADDR_VAR 0 4
17996: PUSH
17997: LD_VAR 0 12
18001: PUSH
18002: LD_INT 1
18004: PPUSH
18005: LD_VAR 0 12
18009: PPUSH
18010: CALL_OW 12
18014: ARRAY
18015: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18016: LD_VAR 0 2
18020: PPUSH
18021: LD_VAR 0 5
18025: PPUSH
18026: CALL 18384 0 2
18030: NOT
18031: IFFALSE 18090
// repeat weapon := _weapon [ 1 ] ;
18033: LD_ADDR_VAR 0 5
18037: PUSH
18038: LD_VAR 0 10
18042: PUSH
18043: LD_INT 1
18045: ARRAY
18046: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18047: LD_ADDR_VAR 0 10
18051: PUSH
18052: LD_VAR 0 10
18056: PPUSH
18057: LD_INT 1
18059: PPUSH
18060: CALL_OW 3
18064: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18065: LD_VAR 0 2
18069: PPUSH
18070: LD_VAR 0 5
18074: PPUSH
18075: CALL 18384 0 2
18079: PUSH
18080: LD_VAR 0 10
18084: PUSH
18085: EMPTY
18086: EQUAL
18087: OR
18088: IFFALSE 18033
// result := [ ] ;
18090: LD_ADDR_VAR 0 6
18094: PUSH
18095: EMPTY
18096: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_VAR 0 2
18106: PPUSH
18107: LD_VAR 0 3
18111: PPUSH
18112: LD_VAR 0 4
18116: PPUSH
18117: LD_VAR 0 5
18121: PPUSH
18122: CALL_OW 448
18126: IFFALSE 18159
// result := [ chassis , engine , control , weapon ] ;
18128: LD_ADDR_VAR 0 6
18132: PUSH
18133: LD_VAR 0 2
18137: PUSH
18138: LD_VAR 0 3
18142: PUSH
18143: LD_VAR 0 4
18147: PUSH
18148: LD_VAR 0 5
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: ST_TO_ADDR
// end ;
18159: LD_VAR 0 6
18163: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18164: LD_INT 0
18166: PPUSH
// if not chassis or not engine then
18167: LD_VAR 0 1
18171: NOT
18172: PUSH
18173: LD_VAR 0 2
18177: NOT
18178: OR
18179: IFFALSE 18183
// exit ;
18181: GO 18379
// case engine of engine_solar :
18183: LD_VAR 0 2
18187: PUSH
18188: LD_INT 2
18190: DOUBLE
18191: EQUAL
18192: IFTRUE 18196
18194: GO 18234
18196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18197: LD_ADDR_VAR 0 3
18201: PUSH
18202: LD_INT 11
18204: PUSH
18205: LD_INT 12
18207: PUSH
18208: LD_INT 13
18210: PUSH
18211: LD_INT 14
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: ST_TO_ADDR
18232: GO 18363
18234: LD_INT 1
18236: DOUBLE
18237: EQUAL
18238: IFTRUE 18242
18240: GO 18304
18242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18243: LD_ADDR_VAR 0 3
18247: PUSH
18248: LD_INT 11
18250: PUSH
18251: LD_INT 12
18253: PUSH
18254: LD_INT 13
18256: PUSH
18257: LD_INT 14
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: LD_INT 2
18265: PUSH
18266: LD_INT 3
18268: PUSH
18269: LD_INT 4
18271: PUSH
18272: LD_INT 5
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 23
18280: PUSH
18281: LD_INT 22
18283: PUSH
18284: LD_INT 24
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: ST_TO_ADDR
18302: GO 18363
18304: LD_INT 3
18306: DOUBLE
18307: EQUAL
18308: IFTRUE 18312
18310: GO 18362
18312: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18313: LD_ADDR_VAR 0 3
18317: PUSH
18318: LD_INT 13
18320: PUSH
18321: LD_INT 14
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: LD_INT 4
18332: PUSH
18333: LD_INT 5
18335: PUSH
18336: LD_INT 21
18338: PUSH
18339: LD_INT 22
18341: PUSH
18342: LD_INT 23
18344: PUSH
18345: LD_INT 24
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: ST_TO_ADDR
18360: GO 18363
18362: POP
// result := ( chassis in result ) ;
18363: LD_ADDR_VAR 0 3
18367: PUSH
18368: LD_VAR 0 1
18372: PUSH
18373: LD_VAR 0 3
18377: IN
18378: ST_TO_ADDR
// end ;
18379: LD_VAR 0 3
18383: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18384: LD_INT 0
18386: PPUSH
// if not chassis or not weapon then
18387: LD_VAR 0 1
18391: NOT
18392: PUSH
18393: LD_VAR 0 2
18397: NOT
18398: OR
18399: IFFALSE 18403
// exit ;
18401: GO 19465
// case weapon of us_machine_gun :
18403: LD_VAR 0 2
18407: PUSH
18408: LD_INT 2
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18446
18416: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18417: LD_ADDR_VAR 0 3
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 4
18433: PUSH
18434: LD_INT 5
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: ST_TO_ADDR
18444: GO 19449
18446: LD_INT 3
18448: DOUBLE
18449: EQUAL
18450: IFTRUE 18454
18452: GO 18484
18454: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18455: LD_ADDR_VAR 0 3
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 3
18468: PUSH
18469: LD_INT 4
18471: PUSH
18472: LD_INT 5
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: ST_TO_ADDR
18482: GO 19449
18484: LD_INT 11
18486: DOUBLE
18487: EQUAL
18488: IFTRUE 18492
18490: GO 18522
18492: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18493: LD_ADDR_VAR 0 3
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: LD_INT 2
18503: PUSH
18504: LD_INT 3
18506: PUSH
18507: LD_INT 4
18509: PUSH
18510: LD_INT 5
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: ST_TO_ADDR
18520: GO 19449
18522: LD_INT 4
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18556
18530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_INT 2
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: LD_INT 4
18544: PUSH
18545: LD_INT 5
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: ST_TO_ADDR
18554: GO 19449
18556: LD_INT 5
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18590
18564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18565: LD_ADDR_VAR 0 3
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 3
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: LD_INT 5
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: ST_TO_ADDR
18588: GO 19449
18590: LD_INT 9
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18624
18598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18599: LD_ADDR_VAR 0 3
18603: PUSH
18604: LD_INT 2
18606: PUSH
18607: LD_INT 3
18609: PUSH
18610: LD_INT 4
18612: PUSH
18613: LD_INT 5
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: ST_TO_ADDR
18622: GO 19449
18624: LD_INT 7
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18658
18632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18633: LD_ADDR_VAR 0 3
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: LD_INT 4
18646: PUSH
18647: LD_INT 5
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: ST_TO_ADDR
18656: GO 19449
18658: LD_INT 12
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18692
18666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18667: LD_ADDR_VAR 0 3
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: LD_INT 3
18677: PUSH
18678: LD_INT 4
18680: PUSH
18681: LD_INT 5
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
18690: GO 19449
18692: LD_INT 13
18694: DOUBLE
18695: EQUAL
18696: IFTRUE 18700
18698: GO 18726
18700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18701: LD_ADDR_VAR 0 3
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: LD_INT 4
18714: PUSH
18715: LD_INT 5
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: ST_TO_ADDR
18724: GO 19449
18726: LD_INT 14
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18752
18734: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18735: LD_ADDR_VAR 0 3
18739: PUSH
18740: LD_INT 4
18742: PUSH
18743: LD_INT 5
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: ST_TO_ADDR
18750: GO 19449
18752: LD_INT 6
18754: DOUBLE
18755: EQUAL
18756: IFTRUE 18760
18758: GO 18778
18760: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18761: LD_ADDR_VAR 0 3
18765: PUSH
18766: LD_INT 4
18768: PUSH
18769: LD_INT 5
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: ST_TO_ADDR
18776: GO 19449
18778: LD_INT 10
18780: DOUBLE
18781: EQUAL
18782: IFTRUE 18786
18784: GO 18804
18786: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18787: LD_ADDR_VAR 0 3
18791: PUSH
18792: LD_INT 4
18794: PUSH
18795: LD_INT 5
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: ST_TO_ADDR
18802: GO 19449
18804: LD_INT 22
18806: DOUBLE
18807: EQUAL
18808: IFTRUE 18812
18810: GO 18838
18812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18813: LD_ADDR_VAR 0 3
18817: PUSH
18818: LD_INT 11
18820: PUSH
18821: LD_INT 12
18823: PUSH
18824: LD_INT 13
18826: PUSH
18827: LD_INT 14
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: ST_TO_ADDR
18836: GO 19449
18838: LD_INT 23
18840: DOUBLE
18841: EQUAL
18842: IFTRUE 18846
18844: GO 18872
18846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 11
18854: PUSH
18855: LD_INT 12
18857: PUSH
18858: LD_INT 13
18860: PUSH
18861: LD_INT 14
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
18870: GO 19449
18872: LD_INT 24
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 18906
18880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18881: LD_ADDR_VAR 0 3
18885: PUSH
18886: LD_INT 11
18888: PUSH
18889: LD_INT 12
18891: PUSH
18892: LD_INT 13
18894: PUSH
18895: LD_INT 14
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: ST_TO_ADDR
18904: GO 19449
18906: LD_INT 30
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18940
18914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18915: LD_ADDR_VAR 0 3
18919: PUSH
18920: LD_INT 11
18922: PUSH
18923: LD_INT 12
18925: PUSH
18926: LD_INT 13
18928: PUSH
18929: LD_INT 14
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
18938: GO 19449
18940: LD_INT 25
18942: DOUBLE
18943: EQUAL
18944: IFTRUE 18948
18946: GO 18966
18948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18949: LD_ADDR_VAR 0 3
18953: PUSH
18954: LD_INT 13
18956: PUSH
18957: LD_INT 14
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: ST_TO_ADDR
18964: GO 19449
18966: LD_INT 27
18968: DOUBLE
18969: EQUAL
18970: IFTRUE 18974
18972: GO 18992
18974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18975: LD_ADDR_VAR 0 3
18979: PUSH
18980: LD_INT 13
18982: PUSH
18983: LD_INT 14
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: ST_TO_ADDR
18990: GO 19449
18992: LD_EXP 104
18996: DOUBLE
18997: EQUAL
18998: IFTRUE 19002
19000: GO 19028
19002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19003: LD_ADDR_VAR 0 3
19007: PUSH
19008: LD_INT 11
19010: PUSH
19011: LD_INT 12
19013: PUSH
19014: LD_INT 13
19016: PUSH
19017: LD_INT 14
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 19449
19028: LD_INT 28
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19054
19036: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19037: LD_ADDR_VAR 0 3
19041: PUSH
19042: LD_INT 13
19044: PUSH
19045: LD_INT 14
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: ST_TO_ADDR
19052: GO 19449
19054: LD_INT 29
19056: DOUBLE
19057: EQUAL
19058: IFTRUE 19062
19060: GO 19080
19062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19063: LD_ADDR_VAR 0 3
19067: PUSH
19068: LD_INT 13
19070: PUSH
19071: LD_INT 14
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: ST_TO_ADDR
19078: GO 19449
19080: LD_INT 31
19082: DOUBLE
19083: EQUAL
19084: IFTRUE 19088
19086: GO 19106
19088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19089: LD_ADDR_VAR 0 3
19093: PUSH
19094: LD_INT 13
19096: PUSH
19097: LD_INT 14
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: ST_TO_ADDR
19104: GO 19449
19106: LD_INT 26
19108: DOUBLE
19109: EQUAL
19110: IFTRUE 19114
19112: GO 19132
19114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: LD_INT 13
19122: PUSH
19123: LD_INT 14
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: ST_TO_ADDR
19130: GO 19449
19132: LD_INT 42
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19166
19140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19141: LD_ADDR_VAR 0 3
19145: PUSH
19146: LD_INT 21
19148: PUSH
19149: LD_INT 22
19151: PUSH
19152: LD_INT 23
19154: PUSH
19155: LD_INT 24
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: ST_TO_ADDR
19164: GO 19449
19166: LD_INT 43
19168: DOUBLE
19169: EQUAL
19170: IFTRUE 19174
19172: GO 19200
19174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 21
19182: PUSH
19183: LD_INT 22
19185: PUSH
19186: LD_INT 23
19188: PUSH
19189: LD_INT 24
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: ST_TO_ADDR
19198: GO 19449
19200: LD_INT 44
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19234
19208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19209: LD_ADDR_VAR 0 3
19213: PUSH
19214: LD_INT 21
19216: PUSH
19217: LD_INT 22
19219: PUSH
19220: LD_INT 23
19222: PUSH
19223: LD_INT 24
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: ST_TO_ADDR
19232: GO 19449
19234: LD_INT 45
19236: DOUBLE
19237: EQUAL
19238: IFTRUE 19242
19240: GO 19268
19242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19243: LD_ADDR_VAR 0 3
19247: PUSH
19248: LD_INT 21
19250: PUSH
19251: LD_INT 22
19253: PUSH
19254: LD_INT 23
19256: PUSH
19257: LD_INT 24
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: ST_TO_ADDR
19266: GO 19449
19268: LD_INT 49
19270: DOUBLE
19271: EQUAL
19272: IFTRUE 19276
19274: GO 19302
19276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: LD_INT 21
19284: PUSH
19285: LD_INT 22
19287: PUSH
19288: LD_INT 23
19290: PUSH
19291: LD_INT 24
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: ST_TO_ADDR
19300: GO 19449
19302: LD_INT 51
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19336
19310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 21
19318: PUSH
19319: LD_INT 22
19321: PUSH
19322: LD_INT 23
19324: PUSH
19325: LD_INT 24
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: ST_TO_ADDR
19334: GO 19449
19336: LD_INT 52
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19370
19344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 21
19352: PUSH
19353: LD_INT 22
19355: PUSH
19356: LD_INT 23
19358: PUSH
19359: LD_INT 24
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
19368: GO 19449
19370: LD_INT 53
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19396
19378: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 23
19386: PUSH
19387: LD_INT 24
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: ST_TO_ADDR
19394: GO 19449
19396: LD_INT 46
19398: DOUBLE
19399: EQUAL
19400: IFTRUE 19404
19402: GO 19422
19404: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19405: LD_ADDR_VAR 0 3
19409: PUSH
19410: LD_INT 23
19412: PUSH
19413: LD_INT 24
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: ST_TO_ADDR
19420: GO 19449
19422: LD_INT 47
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19448
19430: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19431: LD_ADDR_VAR 0 3
19435: PUSH
19436: LD_INT 23
19438: PUSH
19439: LD_INT 24
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: ST_TO_ADDR
19446: GO 19449
19448: POP
// result := ( chassis in result ) ;
19449: LD_ADDR_VAR 0 3
19453: PUSH
19454: LD_VAR 0 1
19458: PUSH
19459: LD_VAR 0 3
19463: IN
19464: ST_TO_ADDR
// end ;
19465: LD_VAR 0 3
19469: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19470: LD_INT 0
19472: PPUSH
19473: PPUSH
19474: PPUSH
19475: PPUSH
19476: PPUSH
19477: PPUSH
19478: PPUSH
// result := array ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_VAR 0 1
19488: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19489: LD_VAR 0 1
19493: NOT
19494: PUSH
19495: LD_VAR 0 2
19499: NOT
19500: OR
19501: PUSH
19502: LD_VAR 0 3
19506: NOT
19507: OR
19508: PUSH
19509: LD_VAR 0 2
19513: PUSH
19514: LD_VAR 0 1
19518: GREATER
19519: OR
19520: PUSH
19521: LD_VAR 0 3
19525: PUSH
19526: LD_VAR 0 1
19530: GREATER
19531: OR
19532: IFFALSE 19536
// exit ;
19534: GO 19832
// if direction then
19536: LD_VAR 0 4
19540: IFFALSE 19604
// begin d := 1 ;
19542: LD_ADDR_VAR 0 9
19546: PUSH
19547: LD_INT 1
19549: ST_TO_ADDR
// if i_from > i_to then
19550: LD_VAR 0 2
19554: PUSH
19555: LD_VAR 0 3
19559: GREATER
19560: IFFALSE 19586
// length := ( array - i_from ) + i_to else
19562: LD_ADDR_VAR 0 11
19566: PUSH
19567: LD_VAR 0 1
19571: PUSH
19572: LD_VAR 0 2
19576: MINUS
19577: PUSH
19578: LD_VAR 0 3
19582: PLUS
19583: ST_TO_ADDR
19584: GO 19602
// length := i_to - i_from ;
19586: LD_ADDR_VAR 0 11
19590: PUSH
19591: LD_VAR 0 3
19595: PUSH
19596: LD_VAR 0 2
19600: MINUS
19601: ST_TO_ADDR
// end else
19602: GO 19665
// begin d := - 1 ;
19604: LD_ADDR_VAR 0 9
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: ST_TO_ADDR
// if i_from > i_to then
19613: LD_VAR 0 2
19617: PUSH
19618: LD_VAR 0 3
19622: GREATER
19623: IFFALSE 19643
// length := i_from - i_to else
19625: LD_ADDR_VAR 0 11
19629: PUSH
19630: LD_VAR 0 2
19634: PUSH
19635: LD_VAR 0 3
19639: MINUS
19640: ST_TO_ADDR
19641: GO 19665
// length := ( array - i_to ) + i_from ;
19643: LD_ADDR_VAR 0 11
19647: PUSH
19648: LD_VAR 0 1
19652: PUSH
19653: LD_VAR 0 3
19657: MINUS
19658: PUSH
19659: LD_VAR 0 2
19663: PLUS
19664: ST_TO_ADDR
// end ; if not length then
19665: LD_VAR 0 11
19669: NOT
19670: IFFALSE 19674
// exit ;
19672: GO 19832
// tmp := array ;
19674: LD_ADDR_VAR 0 10
19678: PUSH
19679: LD_VAR 0 1
19683: ST_TO_ADDR
// for i = 1 to length do
19684: LD_ADDR_VAR 0 6
19688: PUSH
19689: DOUBLE
19690: LD_INT 1
19692: DEC
19693: ST_TO_ADDR
19694: LD_VAR 0 11
19698: PUSH
19699: FOR_TO
19700: IFFALSE 19820
// begin for j = 1 to array do
19702: LD_ADDR_VAR 0 7
19706: PUSH
19707: DOUBLE
19708: LD_INT 1
19710: DEC
19711: ST_TO_ADDR
19712: LD_VAR 0 1
19716: PUSH
19717: FOR_TO
19718: IFFALSE 19806
// begin k := j + d ;
19720: LD_ADDR_VAR 0 8
19724: PUSH
19725: LD_VAR 0 7
19729: PUSH
19730: LD_VAR 0 9
19734: PLUS
19735: ST_TO_ADDR
// if k > array then
19736: LD_VAR 0 8
19740: PUSH
19741: LD_VAR 0 1
19745: GREATER
19746: IFFALSE 19756
// k := 1 ;
19748: LD_ADDR_VAR 0 8
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if not k then
19756: LD_VAR 0 8
19760: NOT
19761: IFFALSE 19773
// k := array ;
19763: LD_ADDR_VAR 0 8
19767: PUSH
19768: LD_VAR 0 1
19772: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19773: LD_ADDR_VAR 0 10
19777: PUSH
19778: LD_VAR 0 10
19782: PPUSH
19783: LD_VAR 0 8
19787: PPUSH
19788: LD_VAR 0 1
19792: PUSH
19793: LD_VAR 0 7
19797: ARRAY
19798: PPUSH
19799: CALL_OW 1
19803: ST_TO_ADDR
// end ;
19804: GO 19717
19806: POP
19807: POP
// array := tmp ;
19808: LD_ADDR_VAR 0 1
19812: PUSH
19813: LD_VAR 0 10
19817: ST_TO_ADDR
// end ;
19818: GO 19699
19820: POP
19821: POP
// result := array ;
19822: LD_ADDR_VAR 0 5
19826: PUSH
19827: LD_VAR 0 1
19831: ST_TO_ADDR
// end ;
19832: LD_VAR 0 5
19836: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19837: LD_INT 0
19839: PPUSH
19840: PPUSH
// result := 0 ;
19841: LD_ADDR_VAR 0 3
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// if not array or not value in array then
19849: LD_VAR 0 1
19853: NOT
19854: PUSH
19855: LD_VAR 0 2
19859: PUSH
19860: LD_VAR 0 1
19864: IN
19865: NOT
19866: OR
19867: IFFALSE 19871
// exit ;
19869: GO 19925
// for i = 1 to array do
19871: LD_ADDR_VAR 0 4
19875: PUSH
19876: DOUBLE
19877: LD_INT 1
19879: DEC
19880: ST_TO_ADDR
19881: LD_VAR 0 1
19885: PUSH
19886: FOR_TO
19887: IFFALSE 19923
// if value = array [ i ] then
19889: LD_VAR 0 2
19893: PUSH
19894: LD_VAR 0 1
19898: PUSH
19899: LD_VAR 0 4
19903: ARRAY
19904: EQUAL
19905: IFFALSE 19921
// begin result := i ;
19907: LD_ADDR_VAR 0 3
19911: PUSH
19912: LD_VAR 0 4
19916: ST_TO_ADDR
// exit ;
19917: POP
19918: POP
19919: GO 19925
// end ;
19921: GO 19886
19923: POP
19924: POP
// end ;
19925: LD_VAR 0 3
19929: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19930: LD_INT 0
19932: PPUSH
// vc_chassis := chassis ;
19933: LD_ADDR_OWVAR 37
19937: PUSH
19938: LD_VAR 0 1
19942: ST_TO_ADDR
// vc_engine := engine ;
19943: LD_ADDR_OWVAR 39
19947: PUSH
19948: LD_VAR 0 2
19952: ST_TO_ADDR
// vc_control := control ;
19953: LD_ADDR_OWVAR 38
19957: PUSH
19958: LD_VAR 0 3
19962: ST_TO_ADDR
// vc_weapon := weapon ;
19963: LD_ADDR_OWVAR 40
19967: PUSH
19968: LD_VAR 0 4
19972: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19973: LD_ADDR_OWVAR 41
19977: PUSH
19978: LD_VAR 0 5
19982: ST_TO_ADDR
// end ;
19983: LD_VAR 0 6
19987: RET
// export function WantPlant ( unit ) ; var task ; begin
19988: LD_INT 0
19990: PPUSH
19991: PPUSH
// result := false ;
19992: LD_ADDR_VAR 0 2
19996: PUSH
19997: LD_INT 0
19999: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20000: LD_ADDR_VAR 0 3
20004: PUSH
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 437
20014: ST_TO_ADDR
// if task then
20015: LD_VAR 0 3
20019: IFFALSE 20047
// if task [ 1 ] [ 1 ] = p then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PUSH
20030: LD_INT 1
20032: ARRAY
20033: PUSH
20034: LD_STRING p
20036: EQUAL
20037: IFFALSE 20047
// result := true ;
20039: LD_ADDR_VAR 0 2
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// end ;
20047: LD_VAR 0 2
20051: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20052: LD_INT 0
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
// if pos < 1 then
20058: LD_VAR 0 2
20062: PUSH
20063: LD_INT 1
20065: LESS
20066: IFFALSE 20070
// exit ;
20068: GO 20373
// if pos = 1 then
20070: LD_VAR 0 2
20074: PUSH
20075: LD_INT 1
20077: EQUAL
20078: IFFALSE 20111
// result := Replace ( arr , pos [ 1 ] , value ) else
20080: LD_ADDR_VAR 0 4
20084: PUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_VAR 0 2
20094: PUSH
20095: LD_INT 1
20097: ARRAY
20098: PPUSH
20099: LD_VAR 0 3
20103: PPUSH
20104: CALL_OW 1
20108: ST_TO_ADDR
20109: GO 20373
// begin tmp := arr ;
20111: LD_ADDR_VAR 0 6
20115: PUSH
20116: LD_VAR 0 1
20120: ST_TO_ADDR
// s_arr := [ tmp ] ;
20121: LD_ADDR_VAR 0 7
20125: PUSH
20126: LD_VAR 0 6
20130: PUSH
20131: EMPTY
20132: LIST
20133: ST_TO_ADDR
// for i = 1 to pos - 1 do
20134: LD_ADDR_VAR 0 5
20138: PUSH
20139: DOUBLE
20140: LD_INT 1
20142: DEC
20143: ST_TO_ADDR
20144: LD_VAR 0 2
20148: PUSH
20149: LD_INT 1
20151: MINUS
20152: PUSH
20153: FOR_TO
20154: IFFALSE 20199
// begin tmp := tmp [ pos [ i ] ] ;
20156: LD_ADDR_VAR 0 6
20160: PUSH
20161: LD_VAR 0 6
20165: PUSH
20166: LD_VAR 0 2
20170: PUSH
20171: LD_VAR 0 5
20175: ARRAY
20176: ARRAY
20177: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20178: LD_ADDR_VAR 0 7
20182: PUSH
20183: LD_VAR 0 7
20187: PUSH
20188: LD_VAR 0 6
20192: PUSH
20193: EMPTY
20194: LIST
20195: ADD
20196: ST_TO_ADDR
// end ;
20197: GO 20153
20199: POP
20200: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20201: LD_ADDR_VAR 0 6
20205: PUSH
20206: LD_VAR 0 6
20210: PPUSH
20211: LD_VAR 0 2
20215: PUSH
20216: LD_VAR 0 2
20220: ARRAY
20221: PPUSH
20222: LD_VAR 0 3
20226: PPUSH
20227: CALL_OW 1
20231: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20232: LD_ADDR_VAR 0 7
20236: PUSH
20237: LD_VAR 0 7
20241: PPUSH
20242: LD_VAR 0 7
20246: PPUSH
20247: LD_VAR 0 6
20251: PPUSH
20252: CALL_OW 1
20256: ST_TO_ADDR
// for i = s_arr downto 2 do
20257: LD_ADDR_VAR 0 5
20261: PUSH
20262: DOUBLE
20263: LD_VAR 0 7
20267: INC
20268: ST_TO_ADDR
20269: LD_INT 2
20271: PUSH
20272: FOR_DOWNTO
20273: IFFALSE 20357
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20275: LD_ADDR_VAR 0 6
20279: PUSH
20280: LD_VAR 0 7
20284: PUSH
20285: LD_VAR 0 5
20289: PUSH
20290: LD_INT 1
20292: MINUS
20293: ARRAY
20294: PPUSH
20295: LD_VAR 0 2
20299: PUSH
20300: LD_VAR 0 5
20304: PUSH
20305: LD_INT 1
20307: MINUS
20308: ARRAY
20309: PPUSH
20310: LD_VAR 0 7
20314: PUSH
20315: LD_VAR 0 5
20319: ARRAY
20320: PPUSH
20321: CALL_OW 1
20325: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20326: LD_ADDR_VAR 0 7
20330: PUSH
20331: LD_VAR 0 7
20335: PPUSH
20336: LD_VAR 0 5
20340: PUSH
20341: LD_INT 1
20343: MINUS
20344: PPUSH
20345: LD_VAR 0 6
20349: PPUSH
20350: CALL_OW 1
20354: ST_TO_ADDR
// end ;
20355: GO 20272
20357: POP
20358: POP
// result := s_arr [ 1 ] ;
20359: LD_ADDR_VAR 0 4
20363: PUSH
20364: LD_VAR 0 7
20368: PUSH
20369: LD_INT 1
20371: ARRAY
20372: ST_TO_ADDR
// end ; end ;
20373: LD_VAR 0 4
20377: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20378: LD_INT 0
20380: PPUSH
20381: PPUSH
// if not list then
20382: LD_VAR 0 1
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20482
// i := list [ pos1 ] ;
20391: LD_ADDR_VAR 0 5
20395: PUSH
20396: LD_VAR 0 1
20400: PUSH
20401: LD_VAR 0 2
20405: ARRAY
20406: ST_TO_ADDR
// if not i then
20407: LD_VAR 0 5
20411: NOT
20412: IFFALSE 20416
// exit ;
20414: GO 20482
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_VAR 0 1
20425: PPUSH
20426: LD_VAR 0 2
20430: PPUSH
20431: LD_VAR 0 1
20435: PUSH
20436: LD_VAR 0 3
20440: ARRAY
20441: PPUSH
20442: CALL_OW 1
20446: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20447: LD_ADDR_VAR 0 1
20451: PUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_VAR 0 3
20461: PPUSH
20462: LD_VAR 0 5
20466: PPUSH
20467: CALL_OW 1
20471: ST_TO_ADDR
// result := list ;
20472: LD_ADDR_VAR 0 4
20476: PUSH
20477: LD_VAR 0 1
20481: ST_TO_ADDR
// end ;
20482: LD_VAR 0 4
20486: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20487: LD_INT 0
20489: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20490: LD_ADDR_VAR 0 5
20494: PUSH
20495: LD_VAR 0 1
20499: PPUSH
20500: CALL_OW 250
20504: PPUSH
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 251
20514: PPUSH
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_VAR 0 4
20529: PPUSH
20530: CALL 20540 0 5
20534: ST_TO_ADDR
// end ;
20535: LD_VAR 0 5
20539: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
20544: PPUSH
20545: PPUSH
// if not list then
20546: LD_VAR 0 3
20550: NOT
20551: IFFALSE 20555
// exit ;
20553: GO 20943
// result := [ ] ;
20555: LD_ADDR_VAR 0 6
20559: PUSH
20560: EMPTY
20561: ST_TO_ADDR
// for i in list do
20562: LD_ADDR_VAR 0 7
20566: PUSH
20567: LD_VAR 0 3
20571: PUSH
20572: FOR_IN
20573: IFFALSE 20775
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20575: LD_ADDR_VAR 0 9
20579: PUSH
20580: LD_VAR 0 7
20584: PPUSH
20585: LD_VAR 0 1
20589: PPUSH
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 297
20599: ST_TO_ADDR
// if not result then
20600: LD_VAR 0 6
20604: NOT
20605: IFFALSE 20631
// result := [ [ i , tmp ] ] else
20607: LD_ADDR_VAR 0 6
20611: PUSH
20612: LD_VAR 0 7
20616: PUSH
20617: LD_VAR 0 9
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: ST_TO_ADDR
20629: GO 20773
// begin if result [ result ] [ 2 ] < tmp then
20631: LD_VAR 0 6
20635: PUSH
20636: LD_VAR 0 6
20640: ARRAY
20641: PUSH
20642: LD_INT 2
20644: ARRAY
20645: PUSH
20646: LD_VAR 0 9
20650: LESS
20651: IFFALSE 20693
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20653: LD_ADDR_VAR 0 6
20657: PUSH
20658: LD_VAR 0 6
20662: PPUSH
20663: LD_VAR 0 6
20667: PUSH
20668: LD_INT 1
20670: PLUS
20671: PPUSH
20672: LD_VAR 0 7
20676: PUSH
20677: LD_VAR 0 9
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PPUSH
20686: CALL_OW 2
20690: ST_TO_ADDR
20691: GO 20773
// for j = 1 to result do
20693: LD_ADDR_VAR 0 8
20697: PUSH
20698: DOUBLE
20699: LD_INT 1
20701: DEC
20702: ST_TO_ADDR
20703: LD_VAR 0 6
20707: PUSH
20708: FOR_TO
20709: IFFALSE 20771
// begin if tmp < result [ j ] [ 2 ] then
20711: LD_VAR 0 9
20715: PUSH
20716: LD_VAR 0 6
20720: PUSH
20721: LD_VAR 0 8
20725: ARRAY
20726: PUSH
20727: LD_INT 2
20729: ARRAY
20730: LESS
20731: IFFALSE 20769
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20733: LD_ADDR_VAR 0 6
20737: PUSH
20738: LD_VAR 0 6
20742: PPUSH
20743: LD_VAR 0 8
20747: PPUSH
20748: LD_VAR 0 7
20752: PUSH
20753: LD_VAR 0 9
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PPUSH
20762: CALL_OW 2
20766: ST_TO_ADDR
// break ;
20767: GO 20771
// end ; end ;
20769: GO 20708
20771: POP
20772: POP
// end ; end ;
20773: GO 20572
20775: POP
20776: POP
// if result and not asc then
20777: LD_VAR 0 6
20781: PUSH
20782: LD_VAR 0 4
20786: NOT
20787: AND
20788: IFFALSE 20863
// begin tmp := result ;
20790: LD_ADDR_VAR 0 9
20794: PUSH
20795: LD_VAR 0 6
20799: ST_TO_ADDR
// for i = tmp downto 1 do
20800: LD_ADDR_VAR 0 7
20804: PUSH
20805: DOUBLE
20806: LD_VAR 0 9
20810: INC
20811: ST_TO_ADDR
20812: LD_INT 1
20814: PUSH
20815: FOR_DOWNTO
20816: IFFALSE 20861
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20818: LD_ADDR_VAR 0 6
20822: PUSH
20823: LD_VAR 0 6
20827: PPUSH
20828: LD_VAR 0 9
20832: PUSH
20833: LD_VAR 0 7
20837: MINUS
20838: PUSH
20839: LD_INT 1
20841: PLUS
20842: PPUSH
20843: LD_VAR 0 9
20847: PUSH
20848: LD_VAR 0 7
20852: ARRAY
20853: PPUSH
20854: CALL_OW 1
20858: ST_TO_ADDR
20859: GO 20815
20861: POP
20862: POP
// end ; tmp := [ ] ;
20863: LD_ADDR_VAR 0 9
20867: PUSH
20868: EMPTY
20869: ST_TO_ADDR
// if mode then
20870: LD_VAR 0 5
20874: IFFALSE 20943
// begin for i = 1 to result do
20876: LD_ADDR_VAR 0 7
20880: PUSH
20881: DOUBLE
20882: LD_INT 1
20884: DEC
20885: ST_TO_ADDR
20886: LD_VAR 0 6
20890: PUSH
20891: FOR_TO
20892: IFFALSE 20931
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20894: LD_ADDR_VAR 0 9
20898: PUSH
20899: LD_VAR 0 9
20903: PPUSH
20904: LD_VAR 0 7
20908: PPUSH
20909: LD_VAR 0 6
20913: PUSH
20914: LD_VAR 0 7
20918: ARRAY
20919: PUSH
20920: LD_INT 1
20922: ARRAY
20923: PPUSH
20924: CALL_OW 1
20928: ST_TO_ADDR
20929: GO 20891
20931: POP
20932: POP
// result := tmp ;
20933: LD_ADDR_VAR 0 6
20937: PUSH
20938: LD_VAR 0 9
20942: ST_TO_ADDR
// end ; end ;
20943: LD_VAR 0 6
20947: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20948: LD_INT 0
20950: PPUSH
20951: PPUSH
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20956: LD_ADDR_VAR 0 5
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
// if not x or not y then
20978: LD_VAR 0 2
20982: NOT
20983: PUSH
20984: LD_VAR 0 3
20988: NOT
20989: OR
20990: IFFALSE 20994
// exit ;
20992: GO 22646
// if not range then
20994: LD_VAR 0 4
20998: NOT
20999: IFFALSE 21009
// range := 10 ;
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: LD_INT 10
21008: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21009: LD_ADDR_VAR 0 8
21013: PUSH
21014: LD_INT 81
21016: PUSH
21017: LD_VAR 0 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 92
21028: PUSH
21029: LD_VAR 0 2
21033: PUSH
21034: LD_VAR 0 3
21038: PUSH
21039: LD_VAR 0 4
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 3
21052: PUSH
21053: LD_INT 21
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: PPUSH
21072: CALL_OW 69
21076: ST_TO_ADDR
// if not tmp then
21077: LD_VAR 0 8
21081: NOT
21082: IFFALSE 21086
// exit ;
21084: GO 22646
// for i in tmp do
21086: LD_ADDR_VAR 0 6
21090: PUSH
21091: LD_VAR 0 8
21095: PUSH
21096: FOR_IN
21097: IFFALSE 22621
// begin points := [ 0 , 0 , 0 ] ;
21099: LD_ADDR_VAR 0 9
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: ST_TO_ADDR
// bpoints := 1 ;
21118: LD_ADDR_VAR 0 10
21122: PUSH
21123: LD_INT 1
21125: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21126: LD_VAR 0 6
21130: PPUSH
21131: CALL_OW 247
21135: PUSH
21136: LD_INT 1
21138: DOUBLE
21139: EQUAL
21140: IFTRUE 21144
21142: GO 21722
21144: POP
// begin if GetClass ( i ) = 1 then
21145: LD_VAR 0 6
21149: PPUSH
21150: CALL_OW 257
21154: PUSH
21155: LD_INT 1
21157: EQUAL
21158: IFFALSE 21179
// points := [ 10 , 5 , 3 ] ;
21160: LD_ADDR_VAR 0 9
21164: PUSH
21165: LD_INT 10
21167: PUSH
21168: LD_INT 5
21170: PUSH
21171: LD_INT 3
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21179: LD_VAR 0 6
21183: PPUSH
21184: CALL_OW 257
21188: PUSH
21189: LD_INT 2
21191: PUSH
21192: LD_INT 3
21194: PUSH
21195: LD_INT 4
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: IN
21203: IFFALSE 21224
// points := [ 3 , 2 , 1 ] ;
21205: LD_ADDR_VAR 0 9
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21224: LD_VAR 0 6
21228: PPUSH
21229: CALL_OW 257
21233: PUSH
21234: LD_INT 5
21236: EQUAL
21237: IFFALSE 21258
// points := [ 130 , 5 , 2 ] ;
21239: LD_ADDR_VAR 0 9
21243: PUSH
21244: LD_INT 130
21246: PUSH
21247: LD_INT 5
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21258: LD_VAR 0 6
21262: PPUSH
21263: CALL_OW 257
21267: PUSH
21268: LD_INT 8
21270: EQUAL
21271: IFFALSE 21292
// points := [ 35 , 35 , 30 ] ;
21273: LD_ADDR_VAR 0 9
21277: PUSH
21278: LD_INT 35
21280: PUSH
21281: LD_INT 35
21283: PUSH
21284: LD_INT 30
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21292: LD_VAR 0 6
21296: PPUSH
21297: CALL_OW 257
21301: PUSH
21302: LD_INT 9
21304: EQUAL
21305: IFFALSE 21326
// points := [ 20 , 55 , 40 ] ;
21307: LD_ADDR_VAR 0 9
21311: PUSH
21312: LD_INT 20
21314: PUSH
21315: LD_INT 55
21317: PUSH
21318: LD_INT 40
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21326: LD_VAR 0 6
21330: PPUSH
21331: CALL_OW 257
21335: PUSH
21336: LD_INT 12
21338: PUSH
21339: LD_INT 16
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: IN
21346: IFFALSE 21367
// points := [ 5 , 3 , 2 ] ;
21348: LD_ADDR_VAR 0 9
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21367: LD_VAR 0 6
21371: PPUSH
21372: CALL_OW 257
21376: PUSH
21377: LD_INT 17
21379: EQUAL
21380: IFFALSE 21401
// points := [ 100 , 50 , 75 ] ;
21382: LD_ADDR_VAR 0 9
21386: PUSH
21387: LD_INT 100
21389: PUSH
21390: LD_INT 50
21392: PUSH
21393: LD_INT 75
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21401: LD_VAR 0 6
21405: PPUSH
21406: CALL_OW 257
21410: PUSH
21411: LD_INT 15
21413: EQUAL
21414: IFFALSE 21435
// points := [ 10 , 5 , 3 ] ;
21416: LD_ADDR_VAR 0 9
21420: PUSH
21421: LD_INT 10
21423: PUSH
21424: LD_INT 5
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21435: LD_VAR 0 6
21439: PPUSH
21440: CALL_OW 257
21444: PUSH
21445: LD_INT 14
21447: EQUAL
21448: IFFALSE 21469
// points := [ 10 , 0 , 0 ] ;
21450: LD_ADDR_VAR 0 9
21454: PUSH
21455: LD_INT 10
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21469: LD_VAR 0 6
21473: PPUSH
21474: CALL_OW 257
21478: PUSH
21479: LD_INT 11
21481: EQUAL
21482: IFFALSE 21503
// points := [ 30 , 10 , 5 ] ;
21484: LD_ADDR_VAR 0 9
21488: PUSH
21489: LD_INT 30
21491: PUSH
21492: LD_INT 10
21494: PUSH
21495: LD_INT 5
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21503: LD_VAR 0 1
21507: PPUSH
21508: LD_INT 5
21510: PPUSH
21511: CALL_OW 321
21515: PUSH
21516: LD_INT 2
21518: EQUAL
21519: IFFALSE 21536
// bpoints := bpoints * 1.8 ;
21521: LD_ADDR_VAR 0 10
21525: PUSH
21526: LD_VAR 0 10
21530: PUSH
21531: LD_REAL  1.80000000000000E+0000
21534: MUL
21535: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21536: LD_VAR 0 6
21540: PPUSH
21541: CALL_OW 257
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 3
21554: PUSH
21555: LD_INT 4
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: IN
21564: PUSH
21565: LD_VAR 0 1
21569: PPUSH
21570: LD_INT 51
21572: PPUSH
21573: CALL_OW 321
21577: PUSH
21578: LD_INT 2
21580: EQUAL
21581: AND
21582: IFFALSE 21599
// bpoints := bpoints * 1.2 ;
21584: LD_ADDR_VAR 0 10
21588: PUSH
21589: LD_VAR 0 10
21593: PUSH
21594: LD_REAL  1.20000000000000E+0000
21597: MUL
21598: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21599: LD_VAR 0 6
21603: PPUSH
21604: CALL_OW 257
21608: PUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 7
21614: PUSH
21615: LD_INT 9
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: IN
21623: PUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: LD_INT 52
21631: PPUSH
21632: CALL_OW 321
21636: PUSH
21637: LD_INT 2
21639: EQUAL
21640: AND
21641: IFFALSE 21658
// bpoints := bpoints * 1.5 ;
21643: LD_ADDR_VAR 0 10
21647: PUSH
21648: LD_VAR 0 10
21652: PUSH
21653: LD_REAL  1.50000000000000E+0000
21656: MUL
21657: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21658: LD_VAR 0 1
21662: PPUSH
21663: LD_INT 66
21665: PPUSH
21666: CALL_OW 321
21670: PUSH
21671: LD_INT 2
21673: EQUAL
21674: IFFALSE 21691
// bpoints := bpoints * 1.1 ;
21676: LD_ADDR_VAR 0 10
21680: PUSH
21681: LD_VAR 0 10
21685: PUSH
21686: LD_REAL  1.10000000000000E+0000
21689: MUL
21690: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21691: LD_ADDR_VAR 0 10
21695: PUSH
21696: LD_VAR 0 10
21700: PUSH
21701: LD_VAR 0 6
21705: PPUSH
21706: LD_INT 1
21708: PPUSH
21709: CALL_OW 259
21713: PUSH
21714: LD_REAL  1.15000000000000E+0000
21717: MUL
21718: MUL
21719: ST_TO_ADDR
// end ; unit_vehicle :
21720: GO 22550
21722: LD_INT 2
21724: DOUBLE
21725: EQUAL
21726: IFTRUE 21730
21728: GO 22538
21730: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21731: LD_VAR 0 6
21735: PPUSH
21736: CALL_OW 264
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 42
21746: PUSH
21747: LD_INT 24
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: IN
21755: IFFALSE 21776
// points := [ 25 , 5 , 3 ] ;
21757: LD_ADDR_VAR 0 9
21761: PUSH
21762: LD_INT 25
21764: PUSH
21765: LD_INT 5
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21776: LD_VAR 0 6
21780: PPUSH
21781: CALL_OW 264
21785: PUSH
21786: LD_INT 4
21788: PUSH
21789: LD_INT 43
21791: PUSH
21792: LD_INT 25
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: IN
21800: IFFALSE 21821
// points := [ 40 , 15 , 5 ] ;
21802: LD_ADDR_VAR 0 9
21806: PUSH
21807: LD_INT 40
21809: PUSH
21810: LD_INT 15
21812: PUSH
21813: LD_INT 5
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21821: LD_VAR 0 6
21825: PPUSH
21826: CALL_OW 264
21830: PUSH
21831: LD_INT 3
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: IN
21841: IFFALSE 21862
// points := [ 7 , 25 , 8 ] ;
21843: LD_ADDR_VAR 0 9
21847: PUSH
21848: LD_INT 7
21850: PUSH
21851: LD_INT 25
21853: PUSH
21854: LD_INT 8
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21862: LD_VAR 0 6
21866: PPUSH
21867: CALL_OW 264
21871: PUSH
21872: LD_INT 5
21874: PUSH
21875: LD_INT 27
21877: PUSH
21878: LD_INT 44
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: IN
21886: IFFALSE 21907
// points := [ 14 , 50 , 16 ] ;
21888: LD_ADDR_VAR 0 9
21892: PUSH
21893: LD_INT 14
21895: PUSH
21896: LD_INT 50
21898: PUSH
21899: LD_INT 16
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21907: LD_VAR 0 6
21911: PPUSH
21912: CALL_OW 264
21916: PUSH
21917: LD_INT 6
21919: PUSH
21920: LD_INT 46
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: IN
21927: IFFALSE 21948
// points := [ 32 , 120 , 70 ] ;
21929: LD_ADDR_VAR 0 9
21933: PUSH
21934: LD_INT 32
21936: PUSH
21937: LD_INT 120
21939: PUSH
21940: LD_INT 70
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21948: LD_VAR 0 6
21952: PPUSH
21953: CALL_OW 264
21957: PUSH
21958: LD_INT 7
21960: PUSH
21961: LD_INT 28
21963: PUSH
21964: LD_INT 45
21966: PUSH
21967: LD_EXP 104
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: IN
21978: IFFALSE 21999
// points := [ 35 , 20 , 45 ] ;
21980: LD_ADDR_VAR 0 9
21984: PUSH
21985: LD_INT 35
21987: PUSH
21988: LD_INT 20
21990: PUSH
21991: LD_INT 45
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21999: LD_VAR 0 6
22003: PPUSH
22004: CALL_OW 264
22008: PUSH
22009: LD_INT 47
22011: PUSH
22012: EMPTY
22013: LIST
22014: IN
22015: IFFALSE 22036
// points := [ 67 , 45 , 75 ] ;
22017: LD_ADDR_VAR 0 9
22021: PUSH
22022: LD_INT 67
22024: PUSH
22025: LD_INT 45
22027: PUSH
22028: LD_INT 75
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22036: LD_VAR 0 6
22040: PPUSH
22041: CALL_OW 264
22045: PUSH
22046: LD_INT 26
22048: PUSH
22049: EMPTY
22050: LIST
22051: IN
22052: IFFALSE 22073
// points := [ 120 , 30 , 80 ] ;
22054: LD_ADDR_VAR 0 9
22058: PUSH
22059: LD_INT 120
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 80
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22073: LD_VAR 0 6
22077: PPUSH
22078: CALL_OW 264
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: EMPTY
22087: LIST
22088: IN
22089: IFFALSE 22110
// points := [ 40 , 1 , 1 ] ;
22091: LD_ADDR_VAR 0 9
22095: PUSH
22096: LD_INT 40
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22110: LD_VAR 0 6
22114: PPUSH
22115: CALL_OW 264
22119: PUSH
22120: LD_INT 29
22122: PUSH
22123: EMPTY
22124: LIST
22125: IN
22126: IFFALSE 22147
// points := [ 70 , 200 , 400 ] ;
22128: LD_ADDR_VAR 0 9
22132: PUSH
22133: LD_INT 70
22135: PUSH
22136: LD_INT 200
22138: PUSH
22139: LD_INT 400
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22147: LD_VAR 0 6
22151: PPUSH
22152: CALL_OW 264
22156: PUSH
22157: LD_INT 14
22159: PUSH
22160: LD_INT 53
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: IN
22167: IFFALSE 22188
// points := [ 40 , 10 , 20 ] ;
22169: LD_ADDR_VAR 0 9
22173: PUSH
22174: LD_INT 40
22176: PUSH
22177: LD_INT 10
22179: PUSH
22180: LD_INT 20
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22188: LD_VAR 0 6
22192: PPUSH
22193: CALL_OW 264
22197: PUSH
22198: LD_INT 9
22200: PUSH
22201: EMPTY
22202: LIST
22203: IN
22204: IFFALSE 22225
// points := [ 5 , 70 , 20 ] ;
22206: LD_ADDR_VAR 0 9
22210: PUSH
22211: LD_INT 5
22213: PUSH
22214: LD_INT 70
22216: PUSH
22217: LD_INT 20
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22225: LD_VAR 0 6
22229: PPUSH
22230: CALL_OW 264
22234: PUSH
22235: LD_INT 10
22237: PUSH
22238: EMPTY
22239: LIST
22240: IN
22241: IFFALSE 22262
// points := [ 35 , 110 , 70 ] ;
22243: LD_ADDR_VAR 0 9
22247: PUSH
22248: LD_INT 35
22250: PUSH
22251: LD_INT 110
22253: PUSH
22254: LD_INT 70
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22262: LD_VAR 0 6
22266: PPUSH
22267: CALL_OW 265
22271: PUSH
22272: LD_INT 25
22274: EQUAL
22275: IFFALSE 22296
// points := [ 80 , 65 , 100 ] ;
22277: LD_ADDR_VAR 0 9
22281: PUSH
22282: LD_INT 80
22284: PUSH
22285: LD_INT 65
22287: PUSH
22288: LD_INT 100
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22296: LD_VAR 0 6
22300: PPUSH
22301: CALL_OW 263
22305: PUSH
22306: LD_INT 1
22308: EQUAL
22309: IFFALSE 22344
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22311: LD_ADDR_VAR 0 10
22315: PUSH
22316: LD_VAR 0 10
22320: PUSH
22321: LD_VAR 0 6
22325: PPUSH
22326: CALL_OW 311
22330: PPUSH
22331: LD_INT 3
22333: PPUSH
22334: CALL_OW 259
22338: PUSH
22339: LD_INT 4
22341: MUL
22342: MUL
22343: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22344: LD_VAR 0 6
22348: PPUSH
22349: CALL_OW 263
22353: PUSH
22354: LD_INT 2
22356: EQUAL
22357: IFFALSE 22408
// begin j := IsControledBy ( i ) ;
22359: LD_ADDR_VAR 0 7
22363: PUSH
22364: LD_VAR 0 6
22368: PPUSH
22369: CALL_OW 312
22373: ST_TO_ADDR
// if j then
22374: LD_VAR 0 7
22378: IFFALSE 22408
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22380: LD_ADDR_VAR 0 10
22384: PUSH
22385: LD_VAR 0 10
22389: PUSH
22390: LD_VAR 0 7
22394: PPUSH
22395: LD_INT 3
22397: PPUSH
22398: CALL_OW 259
22402: PUSH
22403: LD_INT 3
22405: MUL
22406: MUL
22407: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22408: LD_VAR 0 6
22412: PPUSH
22413: CALL_OW 264
22417: PUSH
22418: LD_INT 5
22420: PUSH
22421: LD_INT 6
22423: PUSH
22424: LD_INT 46
22426: PUSH
22427: LD_INT 44
22429: PUSH
22430: LD_INT 47
22432: PUSH
22433: LD_INT 45
22435: PUSH
22436: LD_INT 28
22438: PUSH
22439: LD_INT 7
22441: PUSH
22442: LD_INT 27
22444: PUSH
22445: LD_INT 29
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: IN
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: LD_INT 52
22468: PPUSH
22469: CALL_OW 321
22473: PUSH
22474: LD_INT 2
22476: EQUAL
22477: AND
22478: IFFALSE 22495
// bpoints := bpoints * 1.2 ;
22480: LD_ADDR_VAR 0 10
22484: PUSH
22485: LD_VAR 0 10
22489: PUSH
22490: LD_REAL  1.20000000000000E+0000
22493: MUL
22494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22495: LD_VAR 0 6
22499: PPUSH
22500: CALL_OW 264
22504: PUSH
22505: LD_INT 6
22507: PUSH
22508: LD_INT 46
22510: PUSH
22511: LD_INT 47
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: IN
22519: IFFALSE 22536
// bpoints := bpoints * 1.2 ;
22521: LD_ADDR_VAR 0 10
22525: PUSH
22526: LD_VAR 0 10
22530: PUSH
22531: LD_REAL  1.20000000000000E+0000
22534: MUL
22535: ST_TO_ADDR
// end ; unit_building :
22536: GO 22550
22538: LD_INT 3
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22549
22546: POP
// ; end ;
22547: GO 22550
22549: POP
// for j = 1 to 3 do
22550: LD_ADDR_VAR 0 7
22554: PUSH
22555: DOUBLE
22556: LD_INT 1
22558: DEC
22559: ST_TO_ADDR
22560: LD_INT 3
22562: PUSH
22563: FOR_TO
22564: IFFALSE 22617
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22566: LD_ADDR_VAR 0 5
22570: PUSH
22571: LD_VAR 0 5
22575: PPUSH
22576: LD_VAR 0 7
22580: PPUSH
22581: LD_VAR 0 5
22585: PUSH
22586: LD_VAR 0 7
22590: ARRAY
22591: PUSH
22592: LD_VAR 0 9
22596: PUSH
22597: LD_VAR 0 7
22601: ARRAY
22602: PUSH
22603: LD_VAR 0 10
22607: MUL
22608: PLUS
22609: PPUSH
22610: CALL_OW 1
22614: ST_TO_ADDR
22615: GO 22563
22617: POP
22618: POP
// end ;
22619: GO 21096
22621: POP
22622: POP
// result := Replace ( result , 4 , tmp ) ;
22623: LD_ADDR_VAR 0 5
22627: PUSH
22628: LD_VAR 0 5
22632: PPUSH
22633: LD_INT 4
22635: PPUSH
22636: LD_VAR 0 8
22640: PPUSH
22641: CALL_OW 1
22645: ST_TO_ADDR
// end ;
22646: LD_VAR 0 5
22650: RET
// export function DangerAtRange ( unit , range ) ; begin
22651: LD_INT 0
22653: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22654: LD_ADDR_VAR 0 3
22658: PUSH
22659: LD_VAR 0 1
22663: PPUSH
22664: CALL_OW 255
22668: PPUSH
22669: LD_VAR 0 1
22673: PPUSH
22674: CALL_OW 250
22678: PPUSH
22679: LD_VAR 0 1
22683: PPUSH
22684: CALL_OW 251
22688: PPUSH
22689: LD_VAR 0 2
22693: PPUSH
22694: CALL 20948 0 4
22698: ST_TO_ADDR
// end ;
22699: LD_VAR 0 3
22703: RET
// export function DangerInArea ( side , area ) ; begin
22704: LD_INT 0
22706: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22707: LD_ADDR_VAR 0 3
22711: PUSH
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_INT 81
22719: PUSH
22720: LD_VAR 0 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PPUSH
22729: CALL_OW 70
22733: ST_TO_ADDR
// end ;
22734: LD_VAR 0 3
22738: RET
// export function IsExtension ( b ) ; begin
22739: LD_INT 0
22741: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22742: LD_ADDR_VAR 0 2
22746: PUSH
22747: LD_VAR 0 1
22751: PUSH
22752: LD_INT 23
22754: PUSH
22755: LD_INT 20
22757: PUSH
22758: LD_INT 22
22760: PUSH
22761: LD_INT 17
22763: PUSH
22764: LD_INT 24
22766: PUSH
22767: LD_INT 21
22769: PUSH
22770: LD_INT 19
22772: PUSH
22773: LD_INT 16
22775: PUSH
22776: LD_INT 25
22778: PUSH
22779: LD_INT 18
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: IN
22794: ST_TO_ADDR
// end ;
22795: LD_VAR 0 2
22799: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
22804: PPUSH
// result := [ ] ;
22805: LD_ADDR_VAR 0 4
22809: PUSH
22810: EMPTY
22811: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22812: LD_ADDR_VAR 0 5
22816: PUSH
22817: LD_VAR 0 2
22821: PPUSH
22822: LD_INT 21
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 70
22836: ST_TO_ADDR
// if not tmp then
22837: LD_VAR 0 5
22841: NOT
22842: IFFALSE 22846
// exit ;
22844: GO 22910
// if checkLink then
22846: LD_VAR 0 3
22850: IFFALSE 22900
// begin for i in tmp do
22852: LD_ADDR_VAR 0 6
22856: PUSH
22857: LD_VAR 0 5
22861: PUSH
22862: FOR_IN
22863: IFFALSE 22898
// if GetBase ( i ) <> base then
22865: LD_VAR 0 6
22869: PPUSH
22870: CALL_OW 274
22874: PUSH
22875: LD_VAR 0 1
22879: NONEQUAL
22880: IFFALSE 22896
// ComLinkToBase ( base , i ) ;
22882: LD_VAR 0 1
22886: PPUSH
22887: LD_VAR 0 6
22891: PPUSH
22892: CALL_OW 169
22896: GO 22862
22898: POP
22899: POP
// end ; result := tmp ;
22900: LD_ADDR_VAR 0 4
22904: PUSH
22905: LD_VAR 0 5
22909: ST_TO_ADDR
// end ;
22910: LD_VAR 0 4
22914: RET
// export function ComComplete ( units , b ) ; var i ; begin
22915: LD_INT 0
22917: PPUSH
22918: PPUSH
// if not units then
22919: LD_VAR 0 1
22923: NOT
22924: IFFALSE 22928
// exit ;
22926: GO 23018
// for i in units do
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: LD_VAR 0 1
22937: PUSH
22938: FOR_IN
22939: IFFALSE 23016
// if BuildingStatus ( b ) = bs_build then
22941: LD_VAR 0 2
22945: PPUSH
22946: CALL_OW 461
22950: PUSH
22951: LD_INT 1
22953: EQUAL
22954: IFFALSE 23014
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22956: LD_VAR 0 4
22960: PPUSH
22961: LD_STRING h
22963: PUSH
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 250
22973: PUSH
22974: LD_VAR 0 2
22978: PPUSH
22979: CALL_OW 251
22983: PUSH
22984: LD_VAR 0 2
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: PPUSH
23010: CALL_OW 446
23014: GO 22938
23016: POP
23017: POP
// end ;
23018: LD_VAR 0 3
23022: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23023: LD_INT 0
23025: PPUSH
23026: PPUSH
23027: PPUSH
23028: PPUSH
23029: PPUSH
23030: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23031: LD_VAR 0 1
23035: NOT
23036: PUSH
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL_OW 263
23046: PUSH
23047: LD_INT 2
23049: NONEQUAL
23050: OR
23051: IFFALSE 23055
// exit ;
23053: GO 23371
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23055: LD_ADDR_VAR 0 6
23059: PUSH
23060: LD_INT 22
23062: PUSH
23063: LD_VAR 0 1
23067: PPUSH
23068: CALL_OW 255
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 30
23082: PUSH
23083: LD_INT 36
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 34
23092: PUSH
23093: LD_INT 31
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PPUSH
23109: CALL_OW 69
23113: ST_TO_ADDR
// if not tmp then
23114: LD_VAR 0 6
23118: NOT
23119: IFFALSE 23123
// exit ;
23121: GO 23371
// result := [ ] ;
23123: LD_ADDR_VAR 0 2
23127: PUSH
23128: EMPTY
23129: ST_TO_ADDR
// for i in tmp do
23130: LD_ADDR_VAR 0 3
23134: PUSH
23135: LD_VAR 0 6
23139: PUSH
23140: FOR_IN
23141: IFFALSE 23212
// begin t := UnitsInside ( i ) ;
23143: LD_ADDR_VAR 0 4
23147: PUSH
23148: LD_VAR 0 3
23152: PPUSH
23153: CALL_OW 313
23157: ST_TO_ADDR
// if t then
23158: LD_VAR 0 4
23162: IFFALSE 23210
// for j in t do
23164: LD_ADDR_VAR 0 7
23168: PUSH
23169: LD_VAR 0 4
23173: PUSH
23174: FOR_IN
23175: IFFALSE 23208
// result := Replace ( result , result + 1 , j ) ;
23177: LD_ADDR_VAR 0 2
23181: PUSH
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_VAR 0 2
23191: PUSH
23192: LD_INT 1
23194: PLUS
23195: PPUSH
23196: LD_VAR 0 7
23200: PPUSH
23201: CALL_OW 1
23205: ST_TO_ADDR
23206: GO 23174
23208: POP
23209: POP
// end ;
23210: GO 23140
23212: POP
23213: POP
// if not result then
23214: LD_VAR 0 2
23218: NOT
23219: IFFALSE 23223
// exit ;
23221: GO 23371
// mech := result [ 1 ] ;
23223: LD_ADDR_VAR 0 5
23227: PUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: ST_TO_ADDR
// if result > 1 then
23237: LD_VAR 0 2
23241: PUSH
23242: LD_INT 1
23244: GREATER
23245: IFFALSE 23357
// begin for i = 2 to result do
23247: LD_ADDR_VAR 0 3
23251: PUSH
23252: DOUBLE
23253: LD_INT 2
23255: DEC
23256: ST_TO_ADDR
23257: LD_VAR 0 2
23261: PUSH
23262: FOR_TO
23263: IFFALSE 23355
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23265: LD_ADDR_VAR 0 4
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: LD_VAR 0 3
23279: ARRAY
23280: PPUSH
23281: LD_INT 3
23283: PPUSH
23284: CALL_OW 259
23288: PUSH
23289: LD_VAR 0 2
23293: PUSH
23294: LD_VAR 0 3
23298: ARRAY
23299: PPUSH
23300: CALL_OW 432
23304: MINUS
23305: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23306: LD_VAR 0 4
23310: PUSH
23311: LD_VAR 0 5
23315: PPUSH
23316: LD_INT 3
23318: PPUSH
23319: CALL_OW 259
23323: PUSH
23324: LD_VAR 0 5
23328: PPUSH
23329: CALL_OW 432
23333: MINUS
23334: GREATEREQUAL
23335: IFFALSE 23353
// mech := result [ i ] ;
23337: LD_ADDR_VAR 0 5
23341: PUSH
23342: LD_VAR 0 2
23346: PUSH
23347: LD_VAR 0 3
23351: ARRAY
23352: ST_TO_ADDR
// end ;
23353: GO 23262
23355: POP
23356: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23357: LD_VAR 0 1
23361: PPUSH
23362: LD_VAR 0 5
23366: PPUSH
23367: CALL_OW 135
// end ;
23371: LD_VAR 0 2
23375: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23376: LD_INT 0
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
23382: PPUSH
23383: PPUSH
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
// result := [ ] ;
23391: LD_ADDR_VAR 0 7
23395: PUSH
23396: EMPTY
23397: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23398: LD_VAR 0 1
23402: PPUSH
23403: CALL_OW 266
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: IN
23418: NOT
23419: IFFALSE 23423
// exit ;
23421: GO 25057
// if name then
23423: LD_VAR 0 3
23427: IFFALSE 23443
// SetBName ( base_dep , name ) ;
23429: LD_VAR 0 1
23433: PPUSH
23434: LD_VAR 0 3
23438: PPUSH
23439: CALL_OW 500
// base := GetBase ( base_dep ) ;
23443: LD_ADDR_VAR 0 15
23447: PUSH
23448: LD_VAR 0 1
23452: PPUSH
23453: CALL_OW 274
23457: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23458: LD_ADDR_VAR 0 16
23462: PUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 255
23472: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23473: LD_ADDR_VAR 0 17
23477: PUSH
23478: LD_VAR 0 1
23482: PPUSH
23483: CALL_OW 248
23487: ST_TO_ADDR
// if sources then
23488: LD_VAR 0 5
23492: IFFALSE 23539
// for i = 1 to 3 do
23494: LD_ADDR_VAR 0 8
23498: PUSH
23499: DOUBLE
23500: LD_INT 1
23502: DEC
23503: ST_TO_ADDR
23504: LD_INT 3
23506: PUSH
23507: FOR_TO
23508: IFFALSE 23537
// AddResourceType ( base , i , sources [ i ] ) ;
23510: LD_VAR 0 15
23514: PPUSH
23515: LD_VAR 0 8
23519: PPUSH
23520: LD_VAR 0 5
23524: PUSH
23525: LD_VAR 0 8
23529: ARRAY
23530: PPUSH
23531: CALL_OW 276
23535: GO 23507
23537: POP
23538: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23539: LD_ADDR_VAR 0 18
23543: PUSH
23544: LD_VAR 0 15
23548: PPUSH
23549: LD_VAR 0 2
23553: PPUSH
23554: LD_INT 1
23556: PPUSH
23557: CALL 22800 0 3
23561: ST_TO_ADDR
// InitHc ;
23562: CALL_OW 19
// InitUc ;
23566: CALL_OW 18
// uc_side := side ;
23570: LD_ADDR_OWVAR 20
23574: PUSH
23575: LD_VAR 0 16
23579: ST_TO_ADDR
// uc_nation := nation ;
23580: LD_ADDR_OWVAR 21
23584: PUSH
23585: LD_VAR 0 17
23589: ST_TO_ADDR
// if buildings then
23590: LD_VAR 0 18
23594: IFFALSE 24916
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23596: LD_ADDR_VAR 0 19
23600: PUSH
23601: LD_VAR 0 18
23605: PPUSH
23606: LD_INT 2
23608: PUSH
23609: LD_INT 30
23611: PUSH
23612: LD_INT 29
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 30
23621: PUSH
23622: LD_INT 30
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: PPUSH
23634: CALL_OW 72
23638: ST_TO_ADDR
// if tmp then
23639: LD_VAR 0 19
23643: IFFALSE 23691
// for i in tmp do
23645: LD_ADDR_VAR 0 8
23649: PUSH
23650: LD_VAR 0 19
23654: PUSH
23655: FOR_IN
23656: IFFALSE 23689
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23658: LD_VAR 0 8
23662: PPUSH
23663: CALL_OW 250
23667: PPUSH
23668: LD_VAR 0 8
23672: PPUSH
23673: CALL_OW 251
23677: PPUSH
23678: LD_VAR 0 16
23682: PPUSH
23683: CALL_OW 441
23687: GO 23655
23689: POP
23690: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23691: LD_VAR 0 18
23695: PPUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 32
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 30
23711: PUSH
23712: LD_INT 33
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: PPUSH
23724: CALL_OW 72
23728: IFFALSE 23816
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23730: LD_ADDR_VAR 0 8
23734: PUSH
23735: LD_VAR 0 18
23739: PPUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 30
23745: PUSH
23746: LD_INT 32
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 30
23755: PUSH
23756: LD_INT 33
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: PPUSH
23768: CALL_OW 72
23772: PUSH
23773: FOR_IN
23774: IFFALSE 23814
// begin if not GetBWeapon ( i ) then
23776: LD_VAR 0 8
23780: PPUSH
23781: CALL_OW 269
23785: NOT
23786: IFFALSE 23812
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23788: LD_VAR 0 8
23792: PPUSH
23793: LD_VAR 0 8
23797: PPUSH
23798: LD_VAR 0 2
23802: PPUSH
23803: CALL 25062 0 2
23807: PPUSH
23808: CALL_OW 431
// end ;
23812: GO 23773
23814: POP
23815: POP
// end ; for i = 1 to personel do
23816: LD_ADDR_VAR 0 8
23820: PUSH
23821: DOUBLE
23822: LD_INT 1
23824: DEC
23825: ST_TO_ADDR
23826: LD_VAR 0 6
23830: PUSH
23831: FOR_TO
23832: IFFALSE 24896
// begin if i > 4 then
23834: LD_VAR 0 8
23838: PUSH
23839: LD_INT 4
23841: GREATER
23842: IFFALSE 23846
// break ;
23844: GO 24896
// case i of 1 :
23846: LD_VAR 0 8
23850: PUSH
23851: LD_INT 1
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23939
23859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23860: LD_ADDR_VAR 0 12
23864: PUSH
23865: LD_VAR 0 18
23869: PPUSH
23870: LD_INT 22
23872: PUSH
23873: LD_VAR 0 16
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 58
23884: PUSH
23885: EMPTY
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: LD_INT 30
23893: PUSH
23894: LD_INT 32
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 30
23903: PUSH
23904: LD_INT 4
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 30
23913: PUSH
23914: LD_INT 5
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 72
23936: ST_TO_ADDR
23937: GO 24161
23939: LD_INT 2
23941: DOUBLE
23942: EQUAL
23943: IFTRUE 23947
23945: GO 24009
23947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23948: LD_ADDR_VAR 0 12
23952: PUSH
23953: LD_VAR 0 18
23957: PPUSH
23958: LD_INT 22
23960: PUSH
23961: LD_VAR 0 16
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 30
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 30
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PPUSH
24002: CALL_OW 72
24006: ST_TO_ADDR
24007: GO 24161
24009: LD_INT 3
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24079
24017: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24018: LD_ADDR_VAR 0 12
24022: PUSH
24023: LD_VAR 0 18
24027: PPUSH
24028: LD_INT 22
24030: PUSH
24031: LD_VAR 0 16
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: LD_INT 30
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PPUSH
24072: CALL_OW 72
24076: ST_TO_ADDR
24077: GO 24161
24079: LD_INT 4
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24160
24087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24088: LD_ADDR_VAR 0 12
24092: PUSH
24093: LD_VAR 0 18
24097: PPUSH
24098: LD_INT 22
24100: PUSH
24101: LD_VAR 0 16
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 30
24115: PUSH
24116: LD_INT 6
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 30
24125: PUSH
24126: LD_INT 7
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 8
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PPUSH
24153: CALL_OW 72
24157: ST_TO_ADDR
24158: GO 24161
24160: POP
// if i = 1 then
24161: LD_VAR 0 8
24165: PUSH
24166: LD_INT 1
24168: EQUAL
24169: IFFALSE 24280
// begin tmp := [ ] ;
24171: LD_ADDR_VAR 0 19
24175: PUSH
24176: EMPTY
24177: ST_TO_ADDR
// for j in f do
24178: LD_ADDR_VAR 0 9
24182: PUSH
24183: LD_VAR 0 12
24187: PUSH
24188: FOR_IN
24189: IFFALSE 24262
// if GetBType ( j ) = b_bunker then
24191: LD_VAR 0 9
24195: PPUSH
24196: CALL_OW 266
24200: PUSH
24201: LD_INT 32
24203: EQUAL
24204: IFFALSE 24231
// tmp := Insert ( tmp , 1 , j ) else
24206: LD_ADDR_VAR 0 19
24210: PUSH
24211: LD_VAR 0 19
24215: PPUSH
24216: LD_INT 1
24218: PPUSH
24219: LD_VAR 0 9
24223: PPUSH
24224: CALL_OW 2
24228: ST_TO_ADDR
24229: GO 24260
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24231: LD_ADDR_VAR 0 19
24235: PUSH
24236: LD_VAR 0 19
24240: PPUSH
24241: LD_VAR 0 19
24245: PUSH
24246: LD_INT 1
24248: PLUS
24249: PPUSH
24250: LD_VAR 0 9
24254: PPUSH
24255: CALL_OW 2
24259: ST_TO_ADDR
24260: GO 24188
24262: POP
24263: POP
// if tmp then
24264: LD_VAR 0 19
24268: IFFALSE 24280
// f := tmp ;
24270: LD_ADDR_VAR 0 12
24274: PUSH
24275: LD_VAR 0 19
24279: ST_TO_ADDR
// end ; x := personel [ i ] ;
24280: LD_ADDR_VAR 0 13
24284: PUSH
24285: LD_VAR 0 6
24289: PUSH
24290: LD_VAR 0 8
24294: ARRAY
24295: ST_TO_ADDR
// if x = - 1 then
24296: LD_VAR 0 13
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: EQUAL
24305: IFFALSE 24514
// begin for j in f do
24307: LD_ADDR_VAR 0 9
24311: PUSH
24312: LD_VAR 0 12
24316: PUSH
24317: FOR_IN
24318: IFFALSE 24510
// repeat InitHc ;
24320: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24324: LD_VAR 0 9
24328: PPUSH
24329: CALL_OW 266
24333: PUSH
24334: LD_INT 5
24336: EQUAL
24337: IFFALSE 24407
// begin if UnitsInside ( j ) < 3 then
24339: LD_VAR 0 9
24343: PPUSH
24344: CALL_OW 313
24348: PUSH
24349: LD_INT 3
24351: LESS
24352: IFFALSE 24388
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24354: LD_INT 0
24356: PPUSH
24357: LD_INT 5
24359: PUSH
24360: LD_INT 8
24362: PUSH
24363: LD_INT 9
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: LD_VAR 0 17
24375: ARRAY
24376: PPUSH
24377: LD_VAR 0 4
24381: PPUSH
24382: CALL_OW 380
24386: GO 24405
// PrepareHuman ( false , i , skill ) ;
24388: LD_INT 0
24390: PPUSH
24391: LD_VAR 0 8
24395: PPUSH
24396: LD_VAR 0 4
24400: PPUSH
24401: CALL_OW 380
// end else
24405: GO 24424
// PrepareHuman ( false , i , skill ) ;
24407: LD_INT 0
24409: PPUSH
24410: LD_VAR 0 8
24414: PPUSH
24415: LD_VAR 0 4
24419: PPUSH
24420: CALL_OW 380
// un := CreateHuman ;
24424: LD_ADDR_VAR 0 14
24428: PUSH
24429: CALL_OW 44
24433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24434: LD_ADDR_VAR 0 7
24438: PUSH
24439: LD_VAR 0 7
24443: PPUSH
24444: LD_INT 1
24446: PPUSH
24447: LD_VAR 0 14
24451: PPUSH
24452: CALL_OW 2
24456: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24457: LD_VAR 0 14
24461: PPUSH
24462: LD_VAR 0 9
24466: PPUSH
24467: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24471: LD_VAR 0 9
24475: PPUSH
24476: CALL_OW 313
24480: PUSH
24481: LD_INT 6
24483: EQUAL
24484: PUSH
24485: LD_VAR 0 9
24489: PPUSH
24490: CALL_OW 266
24494: PUSH
24495: LD_INT 32
24497: PUSH
24498: LD_INT 31
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: IN
24505: OR
24506: IFFALSE 24320
24508: GO 24317
24510: POP
24511: POP
// end else
24512: GO 24894
// for j = 1 to x do
24514: LD_ADDR_VAR 0 9
24518: PUSH
24519: DOUBLE
24520: LD_INT 1
24522: DEC
24523: ST_TO_ADDR
24524: LD_VAR 0 13
24528: PUSH
24529: FOR_TO
24530: IFFALSE 24892
// begin InitHc ;
24532: CALL_OW 19
// if not f then
24536: LD_VAR 0 12
24540: NOT
24541: IFFALSE 24630
// begin PrepareHuman ( false , i , skill ) ;
24543: LD_INT 0
24545: PPUSH
24546: LD_VAR 0 8
24550: PPUSH
24551: LD_VAR 0 4
24555: PPUSH
24556: CALL_OW 380
// un := CreateHuman ;
24560: LD_ADDR_VAR 0 14
24564: PUSH
24565: CALL_OW 44
24569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24570: LD_ADDR_VAR 0 7
24574: PUSH
24575: LD_VAR 0 7
24579: PPUSH
24580: LD_INT 1
24582: PPUSH
24583: LD_VAR 0 14
24587: PPUSH
24588: CALL_OW 2
24592: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24593: LD_VAR 0 14
24597: PPUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 250
24607: PPUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 251
24617: PPUSH
24618: LD_INT 10
24620: PPUSH
24621: LD_INT 0
24623: PPUSH
24624: CALL_OW 50
// continue ;
24628: GO 24529
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24630: LD_VAR 0 12
24634: PUSH
24635: LD_INT 1
24637: ARRAY
24638: PPUSH
24639: CALL_OW 313
24643: PUSH
24644: LD_VAR 0 12
24648: PUSH
24649: LD_INT 1
24651: ARRAY
24652: PPUSH
24653: CALL_OW 266
24657: PUSH
24658: LD_INT 32
24660: PUSH
24661: LD_INT 31
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: IN
24668: AND
24669: PUSH
24670: LD_VAR 0 12
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: CALL_OW 313
24683: PUSH
24684: LD_INT 6
24686: EQUAL
24687: OR
24688: IFFALSE 24708
// f := Delete ( f , 1 ) ;
24690: LD_ADDR_VAR 0 12
24694: PUSH
24695: LD_VAR 0 12
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: CALL_OW 3
24707: ST_TO_ADDR
// if not f then
24708: LD_VAR 0 12
24712: NOT
24713: IFFALSE 24731
// begin x := x + 2 ;
24715: LD_ADDR_VAR 0 13
24719: PUSH
24720: LD_VAR 0 13
24724: PUSH
24725: LD_INT 2
24727: PLUS
24728: ST_TO_ADDR
// continue ;
24729: GO 24529
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24731: LD_VAR 0 12
24735: PUSH
24736: LD_INT 1
24738: ARRAY
24739: PPUSH
24740: CALL_OW 266
24744: PUSH
24745: LD_INT 5
24747: EQUAL
24748: IFFALSE 24822
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24750: LD_VAR 0 12
24754: PUSH
24755: LD_INT 1
24757: ARRAY
24758: PPUSH
24759: CALL_OW 313
24763: PUSH
24764: LD_INT 3
24766: LESS
24767: IFFALSE 24803
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24769: LD_INT 0
24771: PPUSH
24772: LD_INT 5
24774: PUSH
24775: LD_INT 8
24777: PUSH
24778: LD_INT 9
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: PUSH
24786: LD_VAR 0 17
24790: ARRAY
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: CALL_OW 380
24801: GO 24820
// PrepareHuman ( false , i , skill ) ;
24803: LD_INT 0
24805: PPUSH
24806: LD_VAR 0 8
24810: PPUSH
24811: LD_VAR 0 4
24815: PPUSH
24816: CALL_OW 380
// end else
24820: GO 24839
// PrepareHuman ( false , i , skill ) ;
24822: LD_INT 0
24824: PPUSH
24825: LD_VAR 0 8
24829: PPUSH
24830: LD_VAR 0 4
24834: PPUSH
24835: CALL_OW 380
// un := CreateHuman ;
24839: LD_ADDR_VAR 0 14
24843: PUSH
24844: CALL_OW 44
24848: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24849: LD_ADDR_VAR 0 7
24853: PUSH
24854: LD_VAR 0 7
24858: PPUSH
24859: LD_INT 1
24861: PPUSH
24862: LD_VAR 0 14
24866: PPUSH
24867: CALL_OW 2
24871: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24872: LD_VAR 0 14
24876: PPUSH
24877: LD_VAR 0 12
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: PPUSH
24886: CALL_OW 52
// end ;
24890: GO 24529
24892: POP
24893: POP
// end ;
24894: GO 23831
24896: POP
24897: POP
// result := result ^ buildings ;
24898: LD_ADDR_VAR 0 7
24902: PUSH
24903: LD_VAR 0 7
24907: PUSH
24908: LD_VAR 0 18
24912: ADD
24913: ST_TO_ADDR
// end else
24914: GO 25057
// begin for i = 1 to personel do
24916: LD_ADDR_VAR 0 8
24920: PUSH
24921: DOUBLE
24922: LD_INT 1
24924: DEC
24925: ST_TO_ADDR
24926: LD_VAR 0 6
24930: PUSH
24931: FOR_TO
24932: IFFALSE 25055
// begin if i > 4 then
24934: LD_VAR 0 8
24938: PUSH
24939: LD_INT 4
24941: GREATER
24942: IFFALSE 24946
// break ;
24944: GO 25055
// x := personel [ i ] ;
24946: LD_ADDR_VAR 0 13
24950: PUSH
24951: LD_VAR 0 6
24955: PUSH
24956: LD_VAR 0 8
24960: ARRAY
24961: ST_TO_ADDR
// if x = - 1 then
24962: LD_VAR 0 13
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: EQUAL
24971: IFFALSE 24975
// continue ;
24973: GO 24931
// PrepareHuman ( false , i , skill ) ;
24975: LD_INT 0
24977: PPUSH
24978: LD_VAR 0 8
24982: PPUSH
24983: LD_VAR 0 4
24987: PPUSH
24988: CALL_OW 380
// un := CreateHuman ;
24992: LD_ADDR_VAR 0 14
24996: PUSH
24997: CALL_OW 44
25001: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25002: LD_VAR 0 14
25006: PPUSH
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 250
25016: PPUSH
25017: LD_VAR 0 1
25021: PPUSH
25022: CALL_OW 251
25026: PPUSH
25027: LD_INT 10
25029: PPUSH
25030: LD_INT 0
25032: PPUSH
25033: CALL_OW 50
// result := result ^ un ;
25037: LD_ADDR_VAR 0 7
25041: PUSH
25042: LD_VAR 0 7
25046: PUSH
25047: LD_VAR 0 14
25051: ADD
25052: ST_TO_ADDR
// end ;
25053: GO 24931
25055: POP
25056: POP
// end ; end ;
25057: LD_VAR 0 7
25061: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25062: LD_INT 0
25064: PPUSH
25065: PPUSH
25066: PPUSH
25067: PPUSH
25068: PPUSH
25069: PPUSH
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
// result := false ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_INT 0
25087: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25088: LD_VAR 0 1
25092: NOT
25093: PUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 266
25103: PUSH
25104: LD_INT 32
25106: PUSH
25107: LD_INT 33
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: IN
25114: NOT
25115: OR
25116: IFFALSE 25120
// exit ;
25118: GO 26229
// nat := GetNation ( tower ) ;
25120: LD_ADDR_VAR 0 12
25124: PUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 248
25134: ST_TO_ADDR
// side := GetSide ( tower ) ;
25135: LD_ADDR_VAR 0 16
25139: PUSH
25140: LD_VAR 0 1
25144: PPUSH
25145: CALL_OW 255
25149: ST_TO_ADDR
// x := GetX ( tower ) ;
25150: LD_ADDR_VAR 0 10
25154: PUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 250
25164: ST_TO_ADDR
// y := GetY ( tower ) ;
25165: LD_ADDR_VAR 0 11
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: CALL_OW 251
25179: ST_TO_ADDR
// if not x or not y then
25180: LD_VAR 0 10
25184: NOT
25185: PUSH
25186: LD_VAR 0 11
25190: NOT
25191: OR
25192: IFFALSE 25196
// exit ;
25194: GO 26229
// weapon := 0 ;
25196: LD_ADDR_VAR 0 18
25200: PUSH
25201: LD_INT 0
25203: ST_TO_ADDR
// fac_list := [ ] ;
25204: LD_ADDR_VAR 0 17
25208: PUSH
25209: EMPTY
25210: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25211: LD_ADDR_VAR 0 6
25215: PUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: CALL_OW 274
25225: PPUSH
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_INT 0
25233: PPUSH
25234: CALL 22800 0 3
25238: PPUSH
25239: LD_INT 30
25241: PUSH
25242: LD_INT 3
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PPUSH
25249: CALL_OW 72
25253: ST_TO_ADDR
// if not factories then
25254: LD_VAR 0 6
25258: NOT
25259: IFFALSE 25263
// exit ;
25261: GO 26229
// for i in factories do
25263: LD_ADDR_VAR 0 8
25267: PUSH
25268: LD_VAR 0 6
25272: PUSH
25273: FOR_IN
25274: IFFALSE 25299
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25276: LD_ADDR_VAR 0 17
25280: PUSH
25281: LD_VAR 0 17
25285: PUSH
25286: LD_VAR 0 8
25290: PPUSH
25291: CALL_OW 478
25295: UNION
25296: ST_TO_ADDR
25297: GO 25273
25299: POP
25300: POP
// if not fac_list then
25301: LD_VAR 0 17
25305: NOT
25306: IFFALSE 25310
// exit ;
25308: GO 26229
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25310: LD_ADDR_VAR 0 5
25314: PUSH
25315: LD_INT 4
25317: PUSH
25318: LD_INT 5
25320: PUSH
25321: LD_INT 9
25323: PUSH
25324: LD_INT 10
25326: PUSH
25327: LD_INT 6
25329: PUSH
25330: LD_INT 7
25332: PUSH
25333: LD_INT 11
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 27
25347: PUSH
25348: LD_INT 28
25350: PUSH
25351: LD_INT 26
25353: PUSH
25354: LD_INT 30
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 43
25365: PUSH
25366: LD_INT 44
25368: PUSH
25369: LD_INT 46
25371: PUSH
25372: LD_INT 45
25374: PUSH
25375: LD_INT 47
25377: PUSH
25378: LD_INT 49
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: PUSH
25394: LD_VAR 0 12
25398: ARRAY
25399: ST_TO_ADDR
// list := list isect fac_list ;
25400: LD_ADDR_VAR 0 5
25404: PUSH
25405: LD_VAR 0 5
25409: PUSH
25410: LD_VAR 0 17
25414: ISECT
25415: ST_TO_ADDR
// if not list then
25416: LD_VAR 0 5
25420: NOT
25421: IFFALSE 25425
// exit ;
25423: GO 26229
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25425: LD_VAR 0 12
25429: PUSH
25430: LD_INT 3
25432: EQUAL
25433: PUSH
25434: LD_INT 49
25436: PUSH
25437: LD_VAR 0 5
25441: IN
25442: AND
25443: PUSH
25444: LD_INT 31
25446: PPUSH
25447: LD_VAR 0 16
25451: PPUSH
25452: CALL_OW 321
25456: PUSH
25457: LD_INT 2
25459: EQUAL
25460: AND
25461: IFFALSE 25521
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25463: LD_INT 22
25465: PUSH
25466: LD_VAR 0 16
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 35
25477: PUSH
25478: LD_INT 49
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 91
25487: PUSH
25488: LD_VAR 0 1
25492: PUSH
25493: LD_INT 10
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: PPUSH
25506: CALL_OW 69
25510: NOT
25511: IFFALSE 25521
// weapon := ru_time_lapser ;
25513: LD_ADDR_VAR 0 18
25517: PUSH
25518: LD_INT 49
25520: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25521: LD_VAR 0 12
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: IN
25536: PUSH
25537: LD_INT 11
25539: PUSH
25540: LD_VAR 0 5
25544: IN
25545: PUSH
25546: LD_INT 30
25548: PUSH
25549: LD_VAR 0 5
25553: IN
25554: OR
25555: AND
25556: PUSH
25557: LD_INT 6
25559: PPUSH
25560: LD_VAR 0 16
25564: PPUSH
25565: CALL_OW 321
25569: PUSH
25570: LD_INT 2
25572: EQUAL
25573: AND
25574: IFFALSE 25739
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25576: LD_INT 22
25578: PUSH
25579: LD_VAR 0 16
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: LD_INT 35
25593: PUSH
25594: LD_INT 11
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 35
25603: PUSH
25604: LD_INT 30
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 91
25618: PUSH
25619: LD_VAR 0 1
25623: PUSH
25624: LD_INT 18
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 69
25641: NOT
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_VAR 0 16
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 30
25660: PUSH
25661: LD_INT 32
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 30
25670: PUSH
25671: LD_INT 33
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 91
25685: PUSH
25686: LD_VAR 0 1
25690: PUSH
25691: LD_INT 12
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: EMPTY
25705: LIST
25706: PPUSH
25707: CALL_OW 69
25711: PUSH
25712: LD_INT 2
25714: GREATER
25715: AND
25716: IFFALSE 25739
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25718: LD_ADDR_VAR 0 18
25722: PUSH
25723: LD_INT 11
25725: PUSH
25726: LD_INT 30
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_VAR 0 12
25737: ARRAY
25738: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25739: LD_VAR 0 18
25743: NOT
25744: PUSH
25745: LD_INT 40
25747: PPUSH
25748: LD_VAR 0 16
25752: PPUSH
25753: CALL_OW 321
25757: PUSH
25758: LD_INT 2
25760: EQUAL
25761: AND
25762: PUSH
25763: LD_INT 7
25765: PUSH
25766: LD_VAR 0 5
25770: IN
25771: PUSH
25772: LD_INT 28
25774: PUSH
25775: LD_VAR 0 5
25779: IN
25780: OR
25781: PUSH
25782: LD_INT 45
25784: PUSH
25785: LD_VAR 0 5
25789: IN
25790: OR
25791: AND
25792: IFFALSE 26046
// begin hex := GetHexInfo ( x , y ) ;
25794: LD_ADDR_VAR 0 4
25798: PUSH
25799: LD_VAR 0 10
25803: PPUSH
25804: LD_VAR 0 11
25808: PPUSH
25809: CALL_OW 546
25813: ST_TO_ADDR
// if hex [ 1 ] then
25814: LD_VAR 0 4
25818: PUSH
25819: LD_INT 1
25821: ARRAY
25822: IFFALSE 25826
// exit ;
25824: GO 26229
// height := hex [ 2 ] ;
25826: LD_ADDR_VAR 0 15
25830: PUSH
25831: LD_VAR 0 4
25835: PUSH
25836: LD_INT 2
25838: ARRAY
25839: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25840: LD_ADDR_VAR 0 14
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: LD_INT 5
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: ST_TO_ADDR
// for i in tmp do
25863: LD_ADDR_VAR 0 8
25867: PUSH
25868: LD_VAR 0 14
25872: PUSH
25873: FOR_IN
25874: IFFALSE 26044
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25876: LD_ADDR_VAR 0 9
25880: PUSH
25881: LD_VAR 0 10
25885: PPUSH
25886: LD_VAR 0 8
25890: PPUSH
25891: LD_INT 5
25893: PPUSH
25894: CALL_OW 272
25898: PUSH
25899: LD_VAR 0 11
25903: PPUSH
25904: LD_VAR 0 8
25908: PPUSH
25909: LD_INT 5
25911: PPUSH
25912: CALL_OW 273
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25921: LD_VAR 0 9
25925: PUSH
25926: LD_INT 1
25928: ARRAY
25929: PPUSH
25930: LD_VAR 0 9
25934: PUSH
25935: LD_INT 2
25937: ARRAY
25938: PPUSH
25939: CALL_OW 488
25943: IFFALSE 26042
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25945: LD_ADDR_VAR 0 4
25949: PUSH
25950: LD_VAR 0 9
25954: PUSH
25955: LD_INT 1
25957: ARRAY
25958: PPUSH
25959: LD_VAR 0 9
25963: PUSH
25964: LD_INT 2
25966: ARRAY
25967: PPUSH
25968: CALL_OW 546
25972: ST_TO_ADDR
// if hex [ 1 ] then
25973: LD_VAR 0 4
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: IFFALSE 25985
// continue ;
25983: GO 25873
// h := hex [ 2 ] ;
25985: LD_ADDR_VAR 0 13
25989: PUSH
25990: LD_VAR 0 4
25994: PUSH
25995: LD_INT 2
25997: ARRAY
25998: ST_TO_ADDR
// if h + 7 < height then
25999: LD_VAR 0 13
26003: PUSH
26004: LD_INT 7
26006: PLUS
26007: PUSH
26008: LD_VAR 0 15
26012: LESS
26013: IFFALSE 26042
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26015: LD_ADDR_VAR 0 18
26019: PUSH
26020: LD_INT 7
26022: PUSH
26023: LD_INT 28
26025: PUSH
26026: LD_INT 45
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: PUSH
26034: LD_VAR 0 12
26038: ARRAY
26039: ST_TO_ADDR
// break ;
26040: GO 26044
// end ; end ; end ;
26042: GO 25873
26044: POP
26045: POP
// end ; if not weapon then
26046: LD_VAR 0 18
26050: NOT
26051: IFFALSE 26111
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26053: LD_ADDR_VAR 0 5
26057: PUSH
26058: LD_VAR 0 5
26062: PUSH
26063: LD_INT 11
26065: PUSH
26066: LD_INT 30
26068: PUSH
26069: LD_INT 49
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: LIST
26076: DIFF
26077: ST_TO_ADDR
// if not list then
26078: LD_VAR 0 5
26082: NOT
26083: IFFALSE 26087
// exit ;
26085: GO 26229
// weapon := list [ rand ( 1 , list ) ] ;
26087: LD_ADDR_VAR 0 18
26091: PUSH
26092: LD_VAR 0 5
26096: PUSH
26097: LD_INT 1
26099: PPUSH
26100: LD_VAR 0 5
26104: PPUSH
26105: CALL_OW 12
26109: ARRAY
26110: ST_TO_ADDR
// end ; if weapon then
26111: LD_VAR 0 18
26115: IFFALSE 26229
// begin tmp := CostOfWeapon ( weapon ) ;
26117: LD_ADDR_VAR 0 14
26121: PUSH
26122: LD_VAR 0 18
26126: PPUSH
26127: CALL_OW 451
26131: ST_TO_ADDR
// j := GetBase ( tower ) ;
26132: LD_ADDR_VAR 0 9
26136: PUSH
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL_OW 274
26146: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26147: LD_VAR 0 9
26151: PPUSH
26152: LD_INT 1
26154: PPUSH
26155: CALL_OW 275
26159: PUSH
26160: LD_VAR 0 14
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: GREATEREQUAL
26169: PUSH
26170: LD_VAR 0 9
26174: PPUSH
26175: LD_INT 2
26177: PPUSH
26178: CALL_OW 275
26182: PUSH
26183: LD_VAR 0 14
26187: PUSH
26188: LD_INT 2
26190: ARRAY
26191: GREATEREQUAL
26192: AND
26193: PUSH
26194: LD_VAR 0 9
26198: PPUSH
26199: LD_INT 3
26201: PPUSH
26202: CALL_OW 275
26206: PUSH
26207: LD_VAR 0 14
26211: PUSH
26212: LD_INT 3
26214: ARRAY
26215: GREATEREQUAL
26216: AND
26217: IFFALSE 26229
// result := weapon ;
26219: LD_ADDR_VAR 0 3
26223: PUSH
26224: LD_VAR 0 18
26228: ST_TO_ADDR
// end ; end ;
26229: LD_VAR 0 3
26233: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26234: LD_INT 0
26236: PPUSH
26237: PPUSH
// result := true ;
26238: LD_ADDR_VAR 0 3
26242: PUSH
26243: LD_INT 1
26245: ST_TO_ADDR
// if array1 = array2 then
26246: LD_VAR 0 1
26250: PUSH
26251: LD_VAR 0 2
26255: EQUAL
26256: IFFALSE 26316
// begin for i = 1 to array1 do
26258: LD_ADDR_VAR 0 4
26262: PUSH
26263: DOUBLE
26264: LD_INT 1
26266: DEC
26267: ST_TO_ADDR
26268: LD_VAR 0 1
26272: PUSH
26273: FOR_TO
26274: IFFALSE 26312
// if array1 [ i ] <> array2 [ i ] then
26276: LD_VAR 0 1
26280: PUSH
26281: LD_VAR 0 4
26285: ARRAY
26286: PUSH
26287: LD_VAR 0 2
26291: PUSH
26292: LD_VAR 0 4
26296: ARRAY
26297: NONEQUAL
26298: IFFALSE 26310
// begin result := false ;
26300: LD_ADDR_VAR 0 3
26304: PUSH
26305: LD_INT 0
26307: ST_TO_ADDR
// break ;
26308: GO 26312
// end ;
26310: GO 26273
26312: POP
26313: POP
// end else
26314: GO 26324
// result := false ;
26316: LD_ADDR_VAR 0 3
26320: PUSH
26321: LD_INT 0
26323: ST_TO_ADDR
// end ;
26324: LD_VAR 0 3
26328: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26329: LD_INT 0
26331: PPUSH
26332: PPUSH
// if not array1 or not array2 then
26333: LD_VAR 0 1
26337: NOT
26338: PUSH
26339: LD_VAR 0 2
26343: NOT
26344: OR
26345: IFFALSE 26349
// exit ;
26347: GO 26413
// result := true ;
26349: LD_ADDR_VAR 0 3
26353: PUSH
26354: LD_INT 1
26356: ST_TO_ADDR
// for i = 1 to array1 do
26357: LD_ADDR_VAR 0 4
26361: PUSH
26362: DOUBLE
26363: LD_INT 1
26365: DEC
26366: ST_TO_ADDR
26367: LD_VAR 0 1
26371: PUSH
26372: FOR_TO
26373: IFFALSE 26411
// if array1 [ i ] <> array2 [ i ] then
26375: LD_VAR 0 1
26379: PUSH
26380: LD_VAR 0 4
26384: ARRAY
26385: PUSH
26386: LD_VAR 0 2
26390: PUSH
26391: LD_VAR 0 4
26395: ARRAY
26396: NONEQUAL
26397: IFFALSE 26409
// begin result := false ;
26399: LD_ADDR_VAR 0 3
26403: PUSH
26404: LD_INT 0
26406: ST_TO_ADDR
// break ;
26407: GO 26411
// end ;
26409: GO 26372
26411: POP
26412: POP
// end ;
26413: LD_VAR 0 3
26417: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
26422: PPUSH
// pom := GetBase ( fac ) ;
26423: LD_ADDR_VAR 0 5
26427: PUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 274
26437: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26438: LD_ADDR_VAR 0 4
26442: PUSH
26443: LD_VAR 0 2
26447: PUSH
26448: LD_INT 1
26450: ARRAY
26451: PPUSH
26452: LD_VAR 0 2
26456: PUSH
26457: LD_INT 2
26459: ARRAY
26460: PPUSH
26461: LD_VAR 0 2
26465: PUSH
26466: LD_INT 3
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 2
26474: PUSH
26475: LD_INT 4
26477: ARRAY
26478: PPUSH
26479: CALL_OW 449
26483: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26484: LD_ADDR_VAR 0 3
26488: PUSH
26489: LD_VAR 0 5
26493: PPUSH
26494: LD_INT 1
26496: PPUSH
26497: CALL_OW 275
26501: PUSH
26502: LD_VAR 0 4
26506: PUSH
26507: LD_INT 1
26509: ARRAY
26510: GREATEREQUAL
26511: PUSH
26512: LD_VAR 0 5
26516: PPUSH
26517: LD_INT 2
26519: PPUSH
26520: CALL_OW 275
26524: PUSH
26525: LD_VAR 0 4
26529: PUSH
26530: LD_INT 2
26532: ARRAY
26533: GREATEREQUAL
26534: AND
26535: PUSH
26536: LD_VAR 0 5
26540: PPUSH
26541: LD_INT 3
26543: PPUSH
26544: CALL_OW 275
26548: PUSH
26549: LD_VAR 0 4
26553: PUSH
26554: LD_INT 3
26556: ARRAY
26557: GREATEREQUAL
26558: AND
26559: ST_TO_ADDR
// end ;
26560: LD_VAR 0 3
26564: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26565: LD_INT 0
26567: PPUSH
26568: PPUSH
26569: PPUSH
26570: PPUSH
// pom := GetBase ( building ) ;
26571: LD_ADDR_VAR 0 3
26575: PUSH
26576: LD_VAR 0 1
26580: PPUSH
26581: CALL_OW 274
26585: ST_TO_ADDR
// if not pom then
26586: LD_VAR 0 3
26590: NOT
26591: IFFALSE 26595
// exit ;
26593: GO 26765
// btype := GetBType ( building ) ;
26595: LD_ADDR_VAR 0 5
26599: PUSH
26600: LD_VAR 0 1
26604: PPUSH
26605: CALL_OW 266
26609: ST_TO_ADDR
// if btype = b_armoury then
26610: LD_VAR 0 5
26614: PUSH
26615: LD_INT 4
26617: EQUAL
26618: IFFALSE 26628
// btype := b_barracks ;
26620: LD_ADDR_VAR 0 5
26624: PUSH
26625: LD_INT 5
26627: ST_TO_ADDR
// if btype = b_depot then
26628: LD_VAR 0 5
26632: PUSH
26633: LD_INT 0
26635: EQUAL
26636: IFFALSE 26646
// btype := b_warehouse ;
26638: LD_ADDR_VAR 0 5
26642: PUSH
26643: LD_INT 1
26645: ST_TO_ADDR
// if btype = b_workshop then
26646: LD_VAR 0 5
26650: PUSH
26651: LD_INT 2
26653: EQUAL
26654: IFFALSE 26664
// btype := b_factory ;
26656: LD_ADDR_VAR 0 5
26660: PUSH
26661: LD_INT 3
26663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26664: LD_ADDR_VAR 0 4
26668: PUSH
26669: LD_VAR 0 5
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 248
26683: PPUSH
26684: CALL_OW 450
26688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26689: LD_ADDR_VAR 0 2
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: LD_INT 1
26701: PPUSH
26702: CALL_OW 275
26706: PUSH
26707: LD_VAR 0 4
26711: PUSH
26712: LD_INT 1
26714: ARRAY
26715: GREATEREQUAL
26716: PUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: LD_INT 2
26724: PPUSH
26725: CALL_OW 275
26729: PUSH
26730: LD_VAR 0 4
26734: PUSH
26735: LD_INT 2
26737: ARRAY
26738: GREATEREQUAL
26739: AND
26740: PUSH
26741: LD_VAR 0 3
26745: PPUSH
26746: LD_INT 3
26748: PPUSH
26749: CALL_OW 275
26753: PUSH
26754: LD_VAR 0 4
26758: PUSH
26759: LD_INT 3
26761: ARRAY
26762: GREATEREQUAL
26763: AND
26764: ST_TO_ADDR
// end ;
26765: LD_VAR 0 2
26769: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26770: LD_INT 0
26772: PPUSH
26773: PPUSH
26774: PPUSH
// pom := GetBase ( building ) ;
26775: LD_ADDR_VAR 0 4
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 274
26789: ST_TO_ADDR
// if not pom then
26790: LD_VAR 0 4
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26900
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26799: LD_ADDR_VAR 0 5
26803: PUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 248
26818: PPUSH
26819: CALL_OW 450
26823: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_VAR 0 4
26833: PPUSH
26834: LD_INT 1
26836: PPUSH
26837: CALL_OW 275
26841: PUSH
26842: LD_VAR 0 5
26846: PUSH
26847: LD_INT 1
26849: ARRAY
26850: GREATEREQUAL
26851: PUSH
26852: LD_VAR 0 4
26856: PPUSH
26857: LD_INT 2
26859: PPUSH
26860: CALL_OW 275
26864: PUSH
26865: LD_VAR 0 5
26869: PUSH
26870: LD_INT 2
26872: ARRAY
26873: GREATEREQUAL
26874: AND
26875: PUSH
26876: LD_VAR 0 4
26880: PPUSH
26881: LD_INT 3
26883: PPUSH
26884: CALL_OW 275
26888: PUSH
26889: LD_VAR 0 5
26893: PUSH
26894: LD_INT 3
26896: ARRAY
26897: GREATEREQUAL
26898: AND
26899: ST_TO_ADDR
// end ;
26900: LD_VAR 0 3
26904: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26905: LD_INT 0
26907: PPUSH
26908: PPUSH
26909: PPUSH
26910: PPUSH
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
// result := false ;
26918: LD_ADDR_VAR 0 8
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26926: LD_VAR 0 5
26930: NOT
26931: PUSH
26932: LD_VAR 0 1
26936: NOT
26937: OR
26938: PUSH
26939: LD_VAR 0 2
26943: NOT
26944: OR
26945: PUSH
26946: LD_VAR 0 3
26950: NOT
26951: OR
26952: IFFALSE 26956
// exit ;
26954: GO 27770
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26956: LD_ADDR_VAR 0 14
26960: PUSH
26961: LD_VAR 0 1
26965: PPUSH
26966: LD_VAR 0 2
26970: PPUSH
26971: LD_VAR 0 3
26975: PPUSH
26976: LD_VAR 0 4
26980: PPUSH
26981: LD_VAR 0 5
26985: PUSH
26986: LD_INT 1
26988: ARRAY
26989: PPUSH
26990: CALL_OW 248
26994: PPUSH
26995: LD_INT 0
26997: PPUSH
26998: CALL 29007 0 6
27002: ST_TO_ADDR
// if not hexes then
27003: LD_VAR 0 14
27007: NOT
27008: IFFALSE 27012
// exit ;
27010: GO 27770
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27012: LD_ADDR_VAR 0 17
27016: PUSH
27017: LD_VAR 0 5
27021: PPUSH
27022: LD_INT 22
27024: PUSH
27025: LD_VAR 0 13
27029: PPUSH
27030: CALL_OW 255
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 30
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 30
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 72
27075: ST_TO_ADDR
// for i = 1 to hexes do
27076: LD_ADDR_VAR 0 9
27080: PUSH
27081: DOUBLE
27082: LD_INT 1
27084: DEC
27085: ST_TO_ADDR
27086: LD_VAR 0 14
27090: PUSH
27091: FOR_TO
27092: IFFALSE 27768
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27094: LD_ADDR_VAR 0 13
27098: PUSH
27099: LD_VAR 0 14
27103: PUSH
27104: LD_VAR 0 9
27108: ARRAY
27109: PUSH
27110: LD_INT 1
27112: ARRAY
27113: PPUSH
27114: LD_VAR 0 14
27118: PUSH
27119: LD_VAR 0 9
27123: ARRAY
27124: PUSH
27125: LD_INT 2
27127: ARRAY
27128: PPUSH
27129: CALL_OW 428
27133: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27134: LD_VAR 0 14
27138: PUSH
27139: LD_VAR 0 9
27143: ARRAY
27144: PUSH
27145: LD_INT 1
27147: ARRAY
27148: PPUSH
27149: LD_VAR 0 14
27153: PUSH
27154: LD_VAR 0 9
27158: ARRAY
27159: PUSH
27160: LD_INT 2
27162: ARRAY
27163: PPUSH
27164: CALL_OW 351
27168: PUSH
27169: LD_VAR 0 14
27173: PUSH
27174: LD_VAR 0 9
27178: ARRAY
27179: PUSH
27180: LD_INT 1
27182: ARRAY
27183: PPUSH
27184: LD_VAR 0 14
27188: PUSH
27189: LD_VAR 0 9
27193: ARRAY
27194: PUSH
27195: LD_INT 2
27197: ARRAY
27198: PPUSH
27199: CALL_OW 488
27203: NOT
27204: OR
27205: PUSH
27206: LD_VAR 0 13
27210: PPUSH
27211: CALL_OW 247
27215: PUSH
27216: LD_INT 3
27218: EQUAL
27219: OR
27220: IFFALSE 27226
// exit ;
27222: POP
27223: POP
27224: GO 27770
// if not tmp then
27226: LD_VAR 0 13
27230: NOT
27231: IFFALSE 27235
// continue ;
27233: GO 27091
// result := true ;
27235: LD_ADDR_VAR 0 8
27239: PUSH
27240: LD_INT 1
27242: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27243: LD_VAR 0 6
27247: PUSH
27248: LD_VAR 0 13
27252: PPUSH
27253: CALL_OW 247
27257: PUSH
27258: LD_INT 2
27260: EQUAL
27261: AND
27262: PUSH
27263: LD_VAR 0 13
27267: PPUSH
27268: CALL_OW 263
27272: PUSH
27273: LD_INT 1
27275: EQUAL
27276: AND
27277: IFFALSE 27441
// begin if IsDrivenBy ( tmp ) then
27279: LD_VAR 0 13
27283: PPUSH
27284: CALL_OW 311
27288: IFFALSE 27292
// continue ;
27290: GO 27091
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27292: LD_VAR 0 6
27296: PPUSH
27297: LD_INT 3
27299: PUSH
27300: LD_INT 60
27302: PUSH
27303: EMPTY
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 55
27315: PUSH
27316: EMPTY
27317: LIST
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 72
27331: IFFALSE 27439
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27333: LD_ADDR_VAR 0 18
27337: PUSH
27338: LD_VAR 0 6
27342: PPUSH
27343: LD_INT 3
27345: PUSH
27346: LD_INT 60
27348: PUSH
27349: EMPTY
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: PUSH
27359: LD_INT 55
27361: PUSH
27362: EMPTY
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 72
27377: PUSH
27378: LD_INT 1
27380: ARRAY
27381: ST_TO_ADDR
// if IsInUnit ( driver ) then
27382: LD_VAR 0 18
27386: PPUSH
27387: CALL_OW 310
27391: IFFALSE 27402
// ComExit ( driver ) ;
27393: LD_VAR 0 18
27397: PPUSH
27398: CALL 52191 0 1
// AddComEnterUnit ( driver , tmp ) ;
27402: LD_VAR 0 18
27406: PPUSH
27407: LD_VAR 0 13
27411: PPUSH
27412: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27416: LD_VAR 0 18
27420: PPUSH
27421: LD_VAR 0 7
27425: PPUSH
27426: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27430: LD_VAR 0 18
27434: PPUSH
27435: CALL_OW 181
// end ; continue ;
27439: GO 27091
// end ; if not cleaners or not tmp in cleaners then
27441: LD_VAR 0 6
27445: NOT
27446: PUSH
27447: LD_VAR 0 13
27451: PUSH
27452: LD_VAR 0 6
27456: IN
27457: NOT
27458: OR
27459: IFFALSE 27766
// begin if dep then
27461: LD_VAR 0 17
27465: IFFALSE 27601
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27467: LD_ADDR_VAR 0 16
27471: PUSH
27472: LD_VAR 0 17
27476: PUSH
27477: LD_INT 1
27479: ARRAY
27480: PPUSH
27481: CALL_OW 250
27485: PPUSH
27486: LD_VAR 0 17
27490: PUSH
27491: LD_INT 1
27493: ARRAY
27494: PPUSH
27495: CALL_OW 254
27499: PPUSH
27500: LD_INT 5
27502: PPUSH
27503: CALL_OW 272
27507: PUSH
27508: LD_VAR 0 17
27512: PUSH
27513: LD_INT 1
27515: ARRAY
27516: PPUSH
27517: CALL_OW 251
27521: PPUSH
27522: LD_VAR 0 17
27526: PUSH
27527: LD_INT 1
27529: ARRAY
27530: PPUSH
27531: CALL_OW 254
27535: PPUSH
27536: LD_INT 5
27538: PPUSH
27539: CALL_OW 273
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27548: LD_VAR 0 16
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: LD_VAR 0 16
27561: PUSH
27562: LD_INT 2
27564: ARRAY
27565: PPUSH
27566: CALL_OW 488
27570: IFFALSE 27601
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27572: LD_VAR 0 13
27576: PPUSH
27577: LD_VAR 0 16
27581: PUSH
27582: LD_INT 1
27584: ARRAY
27585: PPUSH
27586: LD_VAR 0 16
27590: PUSH
27591: LD_INT 2
27593: ARRAY
27594: PPUSH
27595: CALL_OW 111
// continue ;
27599: GO 27091
// end ; end ; r := GetDir ( tmp ) ;
27601: LD_ADDR_VAR 0 15
27605: PUSH
27606: LD_VAR 0 13
27610: PPUSH
27611: CALL_OW 254
27615: ST_TO_ADDR
// if r = 5 then
27616: LD_VAR 0 15
27620: PUSH
27621: LD_INT 5
27623: EQUAL
27624: IFFALSE 27634
// r := 0 ;
27626: LD_ADDR_VAR 0 15
27630: PUSH
27631: LD_INT 0
27633: ST_TO_ADDR
// for j = r to 5 do
27634: LD_ADDR_VAR 0 10
27638: PUSH
27639: DOUBLE
27640: LD_VAR 0 15
27644: DEC
27645: ST_TO_ADDR
27646: LD_INT 5
27648: PUSH
27649: FOR_TO
27650: IFFALSE 27764
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27652: LD_ADDR_VAR 0 11
27656: PUSH
27657: LD_VAR 0 13
27661: PPUSH
27662: CALL_OW 250
27666: PPUSH
27667: LD_VAR 0 10
27671: PPUSH
27672: LD_INT 2
27674: PPUSH
27675: CALL_OW 272
27679: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27680: LD_ADDR_VAR 0 12
27684: PUSH
27685: LD_VAR 0 13
27689: PPUSH
27690: CALL_OW 251
27694: PPUSH
27695: LD_VAR 0 10
27699: PPUSH
27700: LD_INT 2
27702: PPUSH
27703: CALL_OW 273
27707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27708: LD_VAR 0 11
27712: PPUSH
27713: LD_VAR 0 12
27717: PPUSH
27718: CALL_OW 488
27722: PUSH
27723: LD_VAR 0 11
27727: PPUSH
27728: LD_VAR 0 12
27732: PPUSH
27733: CALL_OW 428
27737: NOT
27738: AND
27739: IFFALSE 27762
// begin ComMoveXY ( tmp , _x , _y ) ;
27741: LD_VAR 0 13
27745: PPUSH
27746: LD_VAR 0 11
27750: PPUSH
27751: LD_VAR 0 12
27755: PPUSH
27756: CALL_OW 111
// break ;
27760: GO 27764
// end ; end ;
27762: GO 27649
27764: POP
27765: POP
// end ; end ;
27766: GO 27091
27768: POP
27769: POP
// end ;
27770: LD_VAR 0 8
27774: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27775: LD_INT 0
27777: PPUSH
// result := true ;
27778: LD_ADDR_VAR 0 3
27782: PUSH
27783: LD_INT 1
27785: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27786: LD_VAR 0 2
27790: PUSH
27791: LD_INT 24
27793: DOUBLE
27794: EQUAL
27795: IFTRUE 27805
27797: LD_INT 33
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27830
27805: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: LD_INT 32
27813: PPUSH
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 321
27823: PUSH
27824: LD_INT 2
27826: EQUAL
27827: ST_TO_ADDR
27828: GO 28150
27830: LD_INT 20
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27838
27836: GO 27863
27838: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27839: LD_ADDR_VAR 0 3
27843: PUSH
27844: LD_INT 6
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 321
27856: PUSH
27857: LD_INT 2
27859: EQUAL
27860: ST_TO_ADDR
27861: GO 28150
27863: LD_INT 22
27865: DOUBLE
27866: EQUAL
27867: IFTRUE 27877
27869: LD_INT 36
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27877
27875: GO 27902
27877: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_INT 15
27885: PPUSH
27886: LD_VAR 0 1
27890: PPUSH
27891: CALL_OW 321
27895: PUSH
27896: LD_INT 2
27898: EQUAL
27899: ST_TO_ADDR
27900: GO 28150
27902: LD_INT 30
27904: DOUBLE
27905: EQUAL
27906: IFTRUE 27910
27908: GO 27935
27910: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27911: LD_ADDR_VAR 0 3
27915: PUSH
27916: LD_INT 20
27918: PPUSH
27919: LD_VAR 0 1
27923: PPUSH
27924: CALL_OW 321
27928: PUSH
27929: LD_INT 2
27931: EQUAL
27932: ST_TO_ADDR
27933: GO 28150
27935: LD_INT 28
27937: DOUBLE
27938: EQUAL
27939: IFTRUE 27949
27941: LD_INT 21
27943: DOUBLE
27944: EQUAL
27945: IFTRUE 27949
27947: GO 27974
27949: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27950: LD_ADDR_VAR 0 3
27954: PUSH
27955: LD_INT 21
27957: PPUSH
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 321
27967: PUSH
27968: LD_INT 2
27970: EQUAL
27971: ST_TO_ADDR
27972: GO 28150
27974: LD_INT 16
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 27982
27980: GO 28009
27982: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27983: LD_ADDR_VAR 0 3
27987: PUSH
27988: LD_EXP 111
27992: PPUSH
27993: LD_VAR 0 1
27997: PPUSH
27998: CALL_OW 321
28002: PUSH
28003: LD_INT 2
28005: EQUAL
28006: ST_TO_ADDR
28007: GO 28150
28009: LD_INT 19
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28023
28015: LD_INT 23
28017: DOUBLE
28018: EQUAL
28019: IFTRUE 28023
28021: GO 28050
28023: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_EXP 110
28033: PPUSH
28034: LD_VAR 0 1
28038: PPUSH
28039: CALL_OW 321
28043: PUSH
28044: LD_INT 2
28046: EQUAL
28047: ST_TO_ADDR
28048: GO 28150
28050: LD_INT 17
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28058
28056: GO 28083
28058: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28059: LD_ADDR_VAR 0 3
28063: PUSH
28064: LD_INT 39
28066: PPUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 321
28076: PUSH
28077: LD_INT 2
28079: EQUAL
28080: ST_TO_ADDR
28081: GO 28150
28083: LD_INT 18
28085: DOUBLE
28086: EQUAL
28087: IFTRUE 28091
28089: GO 28116
28091: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28092: LD_ADDR_VAR 0 3
28096: PUSH
28097: LD_INT 40
28099: PPUSH
28100: LD_VAR 0 1
28104: PPUSH
28105: CALL_OW 321
28109: PUSH
28110: LD_INT 2
28112: EQUAL
28113: ST_TO_ADDR
28114: GO 28150
28116: LD_INT 27
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28149
28124: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_INT 35
28132: PPUSH
28133: LD_VAR 0 1
28137: PPUSH
28138: CALL_OW 321
28142: PUSH
28143: LD_INT 2
28145: EQUAL
28146: ST_TO_ADDR
28147: GO 28150
28149: POP
// end ;
28150: LD_VAR 0 3
28154: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28155: LD_INT 0
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
// result := false ;
28168: LD_ADDR_VAR 0 6
28172: PUSH
28173: LD_INT 0
28175: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28176: LD_VAR 0 1
28180: NOT
28181: PUSH
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 266
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: IN
28202: NOT
28203: OR
28204: PUSH
28205: LD_VAR 0 2
28209: NOT
28210: OR
28211: PUSH
28212: LD_VAR 0 5
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: LD_INT 3
28228: PUSH
28229: LD_INT 4
28231: PUSH
28232: LD_INT 5
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: IN
28243: NOT
28244: OR
28245: PUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: LD_VAR 0 4
28255: PPUSH
28256: CALL_OW 488
28260: NOT
28261: OR
28262: IFFALSE 28266
// exit ;
28264: GO 29002
// side := GetSide ( depot ) ;
28266: LD_ADDR_VAR 0 9
28270: PUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 255
28280: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28281: LD_VAR 0 9
28285: PPUSH
28286: LD_VAR 0 2
28290: PPUSH
28291: CALL 27775 0 2
28295: NOT
28296: IFFALSE 28300
// exit ;
28298: GO 29002
// pom := GetBase ( depot ) ;
28300: LD_ADDR_VAR 0 10
28304: PUSH
28305: LD_VAR 0 1
28309: PPUSH
28310: CALL_OW 274
28314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28315: LD_ADDR_VAR 0 11
28319: PUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: LD_VAR 0 1
28329: PPUSH
28330: CALL_OW 248
28334: PPUSH
28335: CALL_OW 450
28339: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28340: LD_VAR 0 10
28344: PPUSH
28345: LD_INT 1
28347: PPUSH
28348: CALL_OW 275
28352: PUSH
28353: LD_VAR 0 11
28357: PUSH
28358: LD_INT 1
28360: ARRAY
28361: GREATEREQUAL
28362: PUSH
28363: LD_VAR 0 10
28367: PPUSH
28368: LD_INT 2
28370: PPUSH
28371: CALL_OW 275
28375: PUSH
28376: LD_VAR 0 11
28380: PUSH
28381: LD_INT 2
28383: ARRAY
28384: GREATEREQUAL
28385: AND
28386: PUSH
28387: LD_VAR 0 10
28391: PPUSH
28392: LD_INT 3
28394: PPUSH
28395: CALL_OW 275
28399: PUSH
28400: LD_VAR 0 11
28404: PUSH
28405: LD_INT 3
28407: ARRAY
28408: GREATEREQUAL
28409: AND
28410: NOT
28411: IFFALSE 28415
// exit ;
28413: GO 29002
// if GetBType ( depot ) = b_depot then
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 266
28424: PUSH
28425: LD_INT 0
28427: EQUAL
28428: IFFALSE 28440
// dist := 28 else
28430: LD_ADDR_VAR 0 14
28434: PUSH
28435: LD_INT 28
28437: ST_TO_ADDR
28438: GO 28448
// dist := 36 ;
28440: LD_ADDR_VAR 0 14
28444: PUSH
28445: LD_INT 36
28447: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28448: LD_VAR 0 1
28452: PPUSH
28453: LD_VAR 0 3
28457: PPUSH
28458: LD_VAR 0 4
28462: PPUSH
28463: CALL_OW 297
28467: PUSH
28468: LD_VAR 0 14
28472: GREATER
28473: IFFALSE 28477
// exit ;
28475: GO 29002
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28477: LD_ADDR_VAR 0 12
28481: PUSH
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 3
28491: PPUSH
28492: LD_VAR 0 4
28496: PPUSH
28497: LD_VAR 0 5
28501: PPUSH
28502: LD_VAR 0 1
28506: PPUSH
28507: CALL_OW 248
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL 29007 0 6
28519: ST_TO_ADDR
// if not hexes then
28520: LD_VAR 0 12
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 29002
// hex := GetHexInfo ( x , y ) ;
28529: LD_ADDR_VAR 0 15
28533: PUSH
28534: LD_VAR 0 3
28538: PPUSH
28539: LD_VAR 0 4
28543: PPUSH
28544: CALL_OW 546
28548: ST_TO_ADDR
// if hex [ 1 ] then
28549: LD_VAR 0 15
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: IFFALSE 28561
// exit ;
28559: GO 29002
// height := hex [ 2 ] ;
28561: LD_ADDR_VAR 0 13
28565: PUSH
28566: LD_VAR 0 15
28570: PUSH
28571: LD_INT 2
28573: ARRAY
28574: ST_TO_ADDR
// for i = 1 to hexes do
28575: LD_ADDR_VAR 0 7
28579: PUSH
28580: DOUBLE
28581: LD_INT 1
28583: DEC
28584: ST_TO_ADDR
28585: LD_VAR 0 12
28589: PUSH
28590: FOR_TO
28591: IFFALSE 28921
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28593: LD_VAR 0 12
28597: PUSH
28598: LD_VAR 0 7
28602: ARRAY
28603: PUSH
28604: LD_INT 1
28606: ARRAY
28607: PPUSH
28608: LD_VAR 0 12
28612: PUSH
28613: LD_VAR 0 7
28617: ARRAY
28618: PUSH
28619: LD_INT 2
28621: ARRAY
28622: PPUSH
28623: CALL_OW 488
28627: NOT
28628: PUSH
28629: LD_VAR 0 12
28633: PUSH
28634: LD_VAR 0 7
28638: ARRAY
28639: PUSH
28640: LD_INT 1
28642: ARRAY
28643: PPUSH
28644: LD_VAR 0 12
28648: PUSH
28649: LD_VAR 0 7
28653: ARRAY
28654: PUSH
28655: LD_INT 2
28657: ARRAY
28658: PPUSH
28659: CALL_OW 428
28663: PUSH
28664: LD_INT 0
28666: GREATER
28667: OR
28668: PUSH
28669: LD_VAR 0 12
28673: PUSH
28674: LD_VAR 0 7
28678: ARRAY
28679: PUSH
28680: LD_INT 1
28682: ARRAY
28683: PPUSH
28684: LD_VAR 0 12
28688: PUSH
28689: LD_VAR 0 7
28693: ARRAY
28694: PUSH
28695: LD_INT 2
28697: ARRAY
28698: PPUSH
28699: CALL_OW 351
28703: OR
28704: IFFALSE 28710
// exit ;
28706: POP
28707: POP
28708: GO 29002
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28710: LD_ADDR_VAR 0 8
28714: PUSH
28715: LD_VAR 0 12
28719: PUSH
28720: LD_VAR 0 7
28724: ARRAY
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: PPUSH
28730: LD_VAR 0 12
28734: PUSH
28735: LD_VAR 0 7
28739: ARRAY
28740: PUSH
28741: LD_INT 2
28743: ARRAY
28744: PPUSH
28745: CALL_OW 546
28749: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28750: LD_VAR 0 8
28754: PUSH
28755: LD_INT 1
28757: ARRAY
28758: PUSH
28759: LD_VAR 0 8
28763: PUSH
28764: LD_INT 2
28766: ARRAY
28767: PUSH
28768: LD_VAR 0 13
28772: PUSH
28773: LD_INT 2
28775: PLUS
28776: GREATER
28777: OR
28778: PUSH
28779: LD_VAR 0 8
28783: PUSH
28784: LD_INT 2
28786: ARRAY
28787: PUSH
28788: LD_VAR 0 13
28792: PUSH
28793: LD_INT 2
28795: MINUS
28796: LESS
28797: OR
28798: PUSH
28799: LD_VAR 0 8
28803: PUSH
28804: LD_INT 3
28806: ARRAY
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: LD_INT 8
28813: PUSH
28814: LD_INT 9
28816: PUSH
28817: LD_INT 10
28819: PUSH
28820: LD_INT 11
28822: PUSH
28823: LD_INT 12
28825: PUSH
28826: LD_INT 13
28828: PUSH
28829: LD_INT 16
28831: PUSH
28832: LD_INT 17
28834: PUSH
28835: LD_INT 18
28837: PUSH
28838: LD_INT 19
28840: PUSH
28841: LD_INT 20
28843: PUSH
28844: LD_INT 21
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: IN
28862: NOT
28863: OR
28864: PUSH
28865: LD_VAR 0 8
28869: PUSH
28870: LD_INT 5
28872: ARRAY
28873: NOT
28874: OR
28875: PUSH
28876: LD_VAR 0 8
28880: PUSH
28881: LD_INT 6
28883: ARRAY
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 7
28893: PUSH
28894: LD_INT 9
28896: PUSH
28897: LD_INT 10
28899: PUSH
28900: LD_INT 11
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: IN
28911: NOT
28912: OR
28913: IFFALSE 28919
// exit ;
28915: POP
28916: POP
28917: GO 29002
// end ;
28919: GO 28590
28921: POP
28922: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28923: LD_VAR 0 9
28927: PPUSH
28928: LD_VAR 0 3
28932: PPUSH
28933: LD_VAR 0 4
28937: PPUSH
28938: LD_INT 20
28940: PPUSH
28941: CALL 20948 0 4
28945: PUSH
28946: LD_INT 4
28948: ARRAY
28949: IFFALSE 28953
// exit ;
28951: GO 29002
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28953: LD_VAR 0 2
28957: PUSH
28958: LD_INT 29
28960: PUSH
28961: LD_INT 30
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: IN
28968: PUSH
28969: LD_VAR 0 3
28973: PPUSH
28974: LD_VAR 0 4
28978: PPUSH
28979: LD_VAR 0 9
28983: PPUSH
28984: CALL_OW 440
28988: NOT
28989: AND
28990: IFFALSE 28994
// exit ;
28992: GO 29002
// result := true ;
28994: LD_ADDR_VAR 0 6
28998: PUSH
28999: LD_INT 1
29001: ST_TO_ADDR
// end ;
29002: LD_VAR 0 6
29006: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29007: LD_INT 0
29009: PPUSH
29010: PPUSH
29011: PPUSH
29012: PPUSH
29013: PPUSH
29014: PPUSH
29015: PPUSH
29016: PPUSH
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
29021: PPUSH
29022: PPUSH
29023: PPUSH
29024: PPUSH
29025: PPUSH
29026: PPUSH
29027: PPUSH
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
29058: PPUSH
29059: PPUSH
29060: PPUSH
29061: PPUSH
29062: PPUSH
29063: PPUSH
29064: PPUSH
29065: PPUSH
29066: PPUSH
// result = [ ] ;
29067: LD_ADDR_VAR 0 7
29071: PUSH
29072: EMPTY
29073: ST_TO_ADDR
// temp_list = [ ] ;
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: EMPTY
29080: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29081: LD_VAR 0 4
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: LD_INT 3
29097: PUSH
29098: LD_INT 4
29100: PUSH
29101: LD_INT 5
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: IN
29112: NOT
29113: PUSH
29114: LD_VAR 0 1
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: IN
29129: PUSH
29130: LD_VAR 0 5
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 3
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: IN
29149: NOT
29150: AND
29151: OR
29152: IFFALSE 29156
// exit ;
29154: GO 47547
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29156: LD_VAR 0 1
29160: PUSH
29161: LD_INT 6
29163: PUSH
29164: LD_INT 7
29166: PUSH
29167: LD_INT 8
29169: PUSH
29170: LD_INT 13
29172: PUSH
29173: LD_INT 12
29175: PUSH
29176: LD_INT 15
29178: PUSH
29179: LD_INT 11
29181: PUSH
29182: LD_INT 14
29184: PUSH
29185: LD_INT 10
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: IN
29199: IFFALSE 29209
// btype = b_lab ;
29201: LD_ADDR_VAR 0 1
29205: PUSH
29206: LD_INT 6
29208: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29209: LD_VAR 0 6
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: IN
29228: NOT
29229: PUSH
29230: LD_VAR 0 1
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: LD_INT 3
29246: PUSH
29247: LD_INT 6
29249: PUSH
29250: LD_INT 36
29252: PUSH
29253: LD_INT 4
29255: PUSH
29256: LD_INT 5
29258: PUSH
29259: LD_INT 31
29261: PUSH
29262: LD_INT 32
29264: PUSH
29265: LD_INT 33
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: IN
29281: NOT
29282: PUSH
29283: LD_VAR 0 6
29287: PUSH
29288: LD_INT 1
29290: EQUAL
29291: AND
29292: OR
29293: PUSH
29294: LD_VAR 0 1
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: IN
29309: NOT
29310: PUSH
29311: LD_VAR 0 6
29315: PUSH
29316: LD_INT 2
29318: EQUAL
29319: AND
29320: OR
29321: IFFALSE 29331
// mode = 0 ;
29323: LD_ADDR_VAR 0 6
29327: PUSH
29328: LD_INT 0
29330: ST_TO_ADDR
// case mode of 0 :
29331: LD_VAR 0 6
29335: PUSH
29336: LD_INT 0
29338: DOUBLE
29339: EQUAL
29340: IFTRUE 29344
29342: GO 40797
29344: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29345: LD_ADDR_VAR 0 11
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: LD_INT 3
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29538: LD_ADDR_VAR 0 12
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: NEG
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 3
29695: NEG
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 3
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29734: LD_ADDR_VAR 0 13
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: LD_INT 3
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 3
29893: NEG
29894: PUSH
29895: LD_INT 2
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: LD_INT 3
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29933: LD_ADDR_VAR 0 14
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: LD_INT 2
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 2
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: LD_INT 3
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: LD_INT 3
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30129: LD_ADDR_VAR 0 15
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30322: LD_ADDR_VAR 0 16
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: NEG
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: LD_INT 2
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 2
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30515: LD_ADDR_VAR 0 17
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: NEG
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 2
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30745: LD_ADDR_VAR 0 18
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 2
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30975: LD_ADDR_VAR 0 19
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: LD_INT 2
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: LD_INT 2
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31205: LD_ADDR_VAR 0 20
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31435: LD_ADDR_VAR 0 21
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: NEG
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 2
31622: NEG
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31665: LD_ADDR_VAR 0 22
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: LD_INT 2
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31895: LD_ADDR_VAR 0 23
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: LD_INT 2
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 2
32094: NEG
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32175: LD_ADDR_VAR 0 24
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 3
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32451: LD_ADDR_VAR 0 25
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 3
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32725: LD_ADDR_VAR 0 26
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 2
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33001: LD_ADDR_VAR 0 27
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: LD_INT 2
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 2
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33281: LD_ADDR_VAR 0 28
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 2
33457: NEG
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 3
33528: NEG
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33563: LD_ADDR_VAR 0 29
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: LD_INT 3
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 3
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 3
33807: NEG
33808: PUSH
33809: LD_INT 2
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33842: LD_ADDR_VAR 0 30
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 2
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 3
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 3
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34120: LD_ADDR_VAR 0 31
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: NEG
34310: PUSH
34311: LD_INT 3
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34398: LD_ADDR_VAR 0 32
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 3
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: NEG
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34676: LD_ADDR_VAR 0 33
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: LD_INT 2
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: NEG
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: NEG
34867: PUSH
34868: LD_INT 3
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34955: LD_ADDR_VAR 0 34
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: LD_INT 1
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 2
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 2
35122: NEG
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 3
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35235: LD_ADDR_VAR 0 35
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35347: LD_ADDR_VAR 0 36
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35459: LD_ADDR_VAR 0 37
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35571: LD_ADDR_VAR 0 38
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35683: LD_ADDR_VAR 0 39
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35795: LD_ADDR_VAR 0 40
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35907: LD_ADDR_VAR 0 41
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 2
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 3
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 3
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 3
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 3
36181: NEG
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 3
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 3
36204: NEG
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 3
36216: NEG
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36257: LD_ADDR_VAR 0 42
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 3
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 3
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 2
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 3
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 3
36503: PUSH
36504: LD_INT 3
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: LD_INT 3
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 3
36554: NEG
36555: PUSH
36556: LD_INT 2
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 3
36566: NEG
36567: PUSH
36568: LD_INT 3
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36607: LD_ADDR_VAR 0 43
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: LD_INT 3
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 3
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 3
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: LD_INT 3
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: NEG
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 3
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36955: LD_ADDR_VAR 0 44
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 2
37133: NEG
37134: PUSH
37135: LD_INT 2
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 2
37145: NEG
37146: PUSH
37147: LD_INT 3
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 3
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 3
37229: NEG
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 3
37252: NEG
37253: PUSH
37254: LD_INT 2
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: LD_INT 3
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37305: LD_ADDR_VAR 0 45
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: LD_INT 3
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 3
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 3
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: LD_INT 3
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 3
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: NEG
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 3
37614: NEG
37615: PUSH
37616: LD_INT 3
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37655: LD_ADDR_VAR 0 46
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: LD_INT 2
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 3
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 3
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38003: LD_ADDR_VAR 0 47
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38154: LD_ADDR_VAR 0 48
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38301: LD_ADDR_VAR 0 49
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38445: LD_ADDR_VAR 0 50
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38589: LD_ADDR_VAR 0 51
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38736: LD_ADDR_VAR 0 52
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38887: LD_ADDR_VAR 0 53
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39117: LD_ADDR_VAR 0 54
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39347: LD_ADDR_VAR 0 55
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39577: LD_ADDR_VAR 0 56
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39807: LD_ADDR_VAR 0 57
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40037: LD_ADDR_VAR 0 58
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40267: LD_ADDR_VAR 0 59
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40355: LD_ADDR_VAR 0 60
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40443: LD_ADDR_VAR 0 61
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40531: LD_ADDR_VAR 0 62
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40619: LD_ADDR_VAR 0 63
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40707: LD_ADDR_VAR 0 64
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: ST_TO_ADDR
// end ; 1 :
40795: GO 46692
40797: LD_INT 1
40799: DOUBLE
40800: EQUAL
40801: IFTRUE 40805
40803: GO 43428
40805: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40806: LD_ADDR_VAR 0 11
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 3
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 3
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40850: LD_ADDR_VAR 0 12
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40891: LD_ADDR_VAR 0 13
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 3
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40931: LD_ADDR_VAR 0 14
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40972: LD_ADDR_VAR 0 15
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 3
40990: NEG
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 3
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41016: LD_ADDR_VAR 0 16
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 3
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 3
41035: NEG
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 3
41047: NEG
41048: PUSH
41049: LD_INT 3
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41062: LD_ADDR_VAR 0 17
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 3
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 3
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: LIST
41105: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41106: LD_ADDR_VAR 0 18
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 3
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 3
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41147: LD_ADDR_VAR 0 19
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: PUSH
41175: LD_INT 3
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41187: LD_ADDR_VAR 0 20
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41228: LD_ADDR_VAR 0 21
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 3
41246: NEG
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 3
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41272: LD_ADDR_VAR 0 22
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 3
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: NEG
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: LD_INT 3
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41318: LD_ADDR_VAR 0 23
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 4
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 3
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41362: LD_ADDR_VAR 0 24
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 4
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41403: LD_ADDR_VAR 0 25
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 4
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 4
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41443: LD_ADDR_VAR 0 26
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 4
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41484: LD_ADDR_VAR 0 27
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 4
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41528: LD_ADDR_VAR 0 28
41532: PUSH
41533: LD_INT 3
41535: NEG
41536: PUSH
41537: LD_INT 3
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 3
41547: NEG
41548: PUSH
41549: LD_INT 4
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 4
41559: NEG
41560: PUSH
41561: LD_INT 3
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41574: LD_ADDR_VAR 0 29
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 4
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 4
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 5
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 5
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 4
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 6
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 6
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 5
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41729: LD_ADDR_VAR 0 30
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 4
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 4
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 4
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 5
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 5
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 5
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 6
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 6
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41872: LD_ADDR_VAR 0 31
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: LD_INT 3
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 3
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 4
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 4
41919: PUSH
41920: LD_INT 4
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: LD_INT 4
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 5
41939: PUSH
41940: LD_INT 4
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 5
41949: PUSH
41950: LD_INT 5
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 4
41959: PUSH
41960: LD_INT 5
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 6
41969: PUSH
41970: LD_INT 5
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 6
41979: PUSH
41980: LD_INT 6
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 5
41989: PUSH
41990: LD_INT 6
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42011: LD_ADDR_VAR 0 32
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 4
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 4
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 5
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 5
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 4
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 6
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 6
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 5
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42154: LD_ADDR_VAR 0 33
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 3
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 4
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 4
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 4
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 5
42240: NEG
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 5
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 5
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 6
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 6
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42309: LD_ADDR_VAR 0 34
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 3
42328: NEG
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: LD_INT 3
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 4
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 4
42364: NEG
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 4
42376: NEG
42377: PUSH
42378: LD_INT 4
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 4
42388: NEG
42389: PUSH
42390: LD_INT 5
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 5
42400: NEG
42401: PUSH
42402: LD_INT 4
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 5
42412: NEG
42413: PUSH
42414: LD_INT 5
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 5
42424: NEG
42425: PUSH
42426: LD_INT 6
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 6
42436: NEG
42437: PUSH
42438: LD_INT 5
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 6
42448: NEG
42449: PUSH
42450: LD_INT 6
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42472: LD_ADDR_VAR 0 41
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42516: LD_ADDR_VAR 0 42
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 3
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42557: LD_ADDR_VAR 0 43
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 3
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42597: LD_ADDR_VAR 0 44
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42638: LD_ADDR_VAR 0 45
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42682: LD_ADDR_VAR 0 46
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: LD_INT 3
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: NEG
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42728: LD_ADDR_VAR 0 47
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42761: LD_ADDR_VAR 0 48
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42792: LD_ADDR_VAR 0 49
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42821: LD_ADDR_VAR 0 50
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42850: LD_ADDR_VAR 0 51
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42881: LD_ADDR_VAR 0 52
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: NEG
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42914: LD_ADDR_VAR 0 53
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 3
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 3
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42958: LD_ADDR_VAR 0 54
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42999: LD_ADDR_VAR 0 55
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43039: LD_ADDR_VAR 0 56
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43080: LD_ADDR_VAR 0 57
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 3
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43124: LD_ADDR_VAR 0 58
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: LD_INT 3
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: NEG
43156: PUSH
43157: LD_INT 3
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43170: LD_ADDR_VAR 0 59
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43214: LD_ADDR_VAR 0 60
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43255: LD_ADDR_VAR 0 61
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43295: LD_ADDR_VAR 0 62
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43336: LD_ADDR_VAR 0 63
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43380: LD_ADDR_VAR 0 64
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: ST_TO_ADDR
// end ; 2 :
43426: GO 46692
43428: LD_INT 2
43430: DOUBLE
43431: EQUAL
43432: IFTRUE 43436
43434: GO 46691
43436: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43437: LD_ADDR_VAR 0 29
43441: PUSH
43442: LD_INT 4
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 4
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 5
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 5
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 4
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 5
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 4
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 4
43567: PUSH
43568: LD_INT 4
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: LD_INT 4
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 4
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 4
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 4
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 3
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 5
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 5
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 3
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 5
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 3
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 3
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 4
43776: NEG
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 4
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 4
43799: NEG
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 4
43822: NEG
43823: PUSH
43824: LD_INT 4
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 4
43834: NEG
43835: PUSH
43836: LD_INT 5
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: NEG
43847: PUSH
43848: LD_INT 4
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 3
43858: NEG
43859: PUSH
43860: LD_INT 3
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 4
43870: NEG
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 5
43882: NEG
43883: PUSH
43884: LD_INT 4
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 5
43894: NEG
43895: PUSH
43896: LD_INT 5
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: LD_INT 5
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 5
43918: NEG
43919: PUSH
43920: LD_INT 3
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43975: LD_ADDR_VAR 0 30
43979: PUSH
43980: LD_INT 4
43982: PUSH
43983: LD_INT 4
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 4
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 5
44002: PUSH
44003: LD_INT 4
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 5
44012: PUSH
44013: LD_INT 5
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: LD_INT 5
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 3
44032: PUSH
44033: LD_INT 4
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 5
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 5
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 3
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 4
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 4
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 4
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 4
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 4
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 4
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 5
44221: NEG
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 5
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 5
44244: NEG
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: LD_INT 4
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 3
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 4
44327: NEG
44328: PUSH
44329: LD_INT 3
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 4
44339: NEG
44340: PUSH
44341: LD_INT 4
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 4
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 4
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 4
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: LD_INT 5
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 4
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 3
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 3
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 4
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 5
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 5
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44522: LD_ADDR_VAR 0 31
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 4
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 4
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 5
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 5
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 4
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 5
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 4
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 4
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 4
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 4
44724: NEG
44725: PUSH
44726: LD_INT 4
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 4
44736: NEG
44737: PUSH
44738: LD_INT 5
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 3
44748: NEG
44749: PUSH
44750: LD_INT 4
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: LD_INT 3
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 4
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 5
44784: NEG
44785: PUSH
44786: LD_INT 4
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 5
44796: NEG
44797: PUSH
44798: LD_INT 5
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: LD_INT 5
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 5
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 3
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 4
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 3
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 3
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 4
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 4
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 4
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 4
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 5
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 5
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 4
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 5
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45072: LD_ADDR_VAR 0 32
45076: PUSH
45077: LD_INT 4
45079: NEG
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 4
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 4
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 5
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 5
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 5
45158: NEG
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: NEG
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 3
45181: NEG
45182: PUSH
45183: LD_INT 3
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: LD_INT 4
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 4
45241: NEG
45242: PUSH
45243: LD_INT 3
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 4
45253: NEG
45254: PUSH
45255: LD_INT 4
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 4
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 4
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 4
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 5
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 4
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 3
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 3
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 4
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 5
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 3
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 5
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 4
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 4
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 4
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 4
45484: PUSH
45485: LD_INT 4
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 4
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 5
45504: PUSH
45505: LD_INT 4
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 5
45514: PUSH
45515: LD_INT 5
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 4
45524: PUSH
45525: LD_INT 5
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: LD_INT 4
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 5
45554: PUSH
45555: LD_INT 3
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 5
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45619: LD_ADDR_VAR 0 33
45623: PUSH
45624: LD_INT 4
45626: NEG
45627: PUSH
45628: LD_INT 4
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 4
45638: NEG
45639: PUSH
45640: LD_INT 5
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: LD_INT 4
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 3
45662: NEG
45663: PUSH
45664: LD_INT 3
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 4
45674: NEG
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 5
45686: NEG
45687: PUSH
45688: LD_INT 4
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 5
45698: NEG
45699: PUSH
45700: LD_INT 5
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: LD_INT 5
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 5
45722: NEG
45723: PUSH
45724: LD_INT 3
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 4
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 4
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 4
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 4
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 4
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 5
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 5
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 4
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 5
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 3
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 4
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 4
45959: PUSH
45960: LD_INT 4
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 3
45969: PUSH
45970: LD_INT 4
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 4
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 4
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 4
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 3
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 4
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 5
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 5
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 5
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: LD_INT 3
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46157: LD_ADDR_VAR 0 34
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 4
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 5
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 4
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 3
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 4
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 5
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: LD_INT 5
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 3
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 4
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 4
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 4
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 4
46359: PUSH
46360: LD_INT 4
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 5
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 5
46389: PUSH
46390: LD_INT 5
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 4
46399: PUSH
46400: LD_INT 5
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: LD_INT 4
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 5
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 5
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 4
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 4
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: LD_INT 4
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 4
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 4
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 5
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 5
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 5
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: ST_TO_ADDR
// end ; end ;
46689: GO 46692
46691: POP
// case btype of b_depot , b_warehouse :
46692: LD_VAR 0 1
46696: PUSH
46697: LD_INT 0
46699: DOUBLE
46700: EQUAL
46701: IFTRUE 46711
46703: LD_INT 1
46705: DOUBLE
46706: EQUAL
46707: IFTRUE 46711
46709: GO 46912
46711: POP
// case nation of nation_american :
46712: LD_VAR 0 5
46716: PUSH
46717: LD_INT 1
46719: DOUBLE
46720: EQUAL
46721: IFTRUE 46725
46723: GO 46781
46725: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46726: LD_ADDR_VAR 0 9
46730: PUSH
46731: LD_VAR 0 11
46735: PUSH
46736: LD_VAR 0 12
46740: PUSH
46741: LD_VAR 0 13
46745: PUSH
46746: LD_VAR 0 14
46750: PUSH
46751: LD_VAR 0 15
46755: PUSH
46756: LD_VAR 0 16
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: PUSH
46769: LD_VAR 0 4
46773: PUSH
46774: LD_INT 1
46776: PLUS
46777: ARRAY
46778: ST_TO_ADDR
46779: GO 46910
46781: LD_INT 2
46783: DOUBLE
46784: EQUAL
46785: IFTRUE 46789
46787: GO 46845
46789: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46790: LD_ADDR_VAR 0 9
46794: PUSH
46795: LD_VAR 0 17
46799: PUSH
46800: LD_VAR 0 18
46804: PUSH
46805: LD_VAR 0 19
46809: PUSH
46810: LD_VAR 0 20
46814: PUSH
46815: LD_VAR 0 21
46819: PUSH
46820: LD_VAR 0 22
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: PUSH
46833: LD_VAR 0 4
46837: PUSH
46838: LD_INT 1
46840: PLUS
46841: ARRAY
46842: ST_TO_ADDR
46843: GO 46910
46845: LD_INT 3
46847: DOUBLE
46848: EQUAL
46849: IFTRUE 46853
46851: GO 46909
46853: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46854: LD_ADDR_VAR 0 9
46858: PUSH
46859: LD_VAR 0 23
46863: PUSH
46864: LD_VAR 0 24
46868: PUSH
46869: LD_VAR 0 25
46873: PUSH
46874: LD_VAR 0 26
46878: PUSH
46879: LD_VAR 0 27
46883: PUSH
46884: LD_VAR 0 28
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: PUSH
46897: LD_VAR 0 4
46901: PUSH
46902: LD_INT 1
46904: PLUS
46905: ARRAY
46906: ST_TO_ADDR
46907: GO 46910
46909: POP
46910: GO 47465
46912: LD_INT 2
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46926
46918: LD_INT 3
46920: DOUBLE
46921: EQUAL
46922: IFTRUE 46926
46924: GO 46982
46926: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46927: LD_ADDR_VAR 0 9
46931: PUSH
46932: LD_VAR 0 29
46936: PUSH
46937: LD_VAR 0 30
46941: PUSH
46942: LD_VAR 0 31
46946: PUSH
46947: LD_VAR 0 32
46951: PUSH
46952: LD_VAR 0 33
46956: PUSH
46957: LD_VAR 0 34
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: PUSH
46970: LD_VAR 0 4
46974: PUSH
46975: LD_INT 1
46977: PLUS
46978: ARRAY
46979: ST_TO_ADDR
46980: GO 47465
46982: LD_INT 16
46984: DOUBLE
46985: EQUAL
46986: IFTRUE 47044
46988: LD_INT 17
46990: DOUBLE
46991: EQUAL
46992: IFTRUE 47044
46994: LD_INT 18
46996: DOUBLE
46997: EQUAL
46998: IFTRUE 47044
47000: LD_INT 19
47002: DOUBLE
47003: EQUAL
47004: IFTRUE 47044
47006: LD_INT 22
47008: DOUBLE
47009: EQUAL
47010: IFTRUE 47044
47012: LD_INT 20
47014: DOUBLE
47015: EQUAL
47016: IFTRUE 47044
47018: LD_INT 21
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47044
47024: LD_INT 23
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47044
47030: LD_INT 24
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47044
47036: LD_INT 25
47038: DOUBLE
47039: EQUAL
47040: IFTRUE 47044
47042: GO 47100
47044: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47045: LD_ADDR_VAR 0 9
47049: PUSH
47050: LD_VAR 0 35
47054: PUSH
47055: LD_VAR 0 36
47059: PUSH
47060: LD_VAR 0 37
47064: PUSH
47065: LD_VAR 0 38
47069: PUSH
47070: LD_VAR 0 39
47074: PUSH
47075: LD_VAR 0 40
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: PUSH
47088: LD_VAR 0 4
47092: PUSH
47093: LD_INT 1
47095: PLUS
47096: ARRAY
47097: ST_TO_ADDR
47098: GO 47465
47100: LD_INT 6
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47156
47106: LD_INT 7
47108: DOUBLE
47109: EQUAL
47110: IFTRUE 47156
47112: LD_INT 8
47114: DOUBLE
47115: EQUAL
47116: IFTRUE 47156
47118: LD_INT 13
47120: DOUBLE
47121: EQUAL
47122: IFTRUE 47156
47124: LD_INT 12
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47156
47130: LD_INT 15
47132: DOUBLE
47133: EQUAL
47134: IFTRUE 47156
47136: LD_INT 11
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47156
47142: LD_INT 14
47144: DOUBLE
47145: EQUAL
47146: IFTRUE 47156
47148: LD_INT 10
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47156
47154: GO 47212
47156: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47157: LD_ADDR_VAR 0 9
47161: PUSH
47162: LD_VAR 0 41
47166: PUSH
47167: LD_VAR 0 42
47171: PUSH
47172: LD_VAR 0 43
47176: PUSH
47177: LD_VAR 0 44
47181: PUSH
47182: LD_VAR 0 45
47186: PUSH
47187: LD_VAR 0 46
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: PUSH
47200: LD_VAR 0 4
47204: PUSH
47205: LD_INT 1
47207: PLUS
47208: ARRAY
47209: ST_TO_ADDR
47210: GO 47465
47212: LD_INT 36
47214: DOUBLE
47215: EQUAL
47216: IFTRUE 47220
47218: GO 47276
47220: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47221: LD_ADDR_VAR 0 9
47225: PUSH
47226: LD_VAR 0 47
47230: PUSH
47231: LD_VAR 0 48
47235: PUSH
47236: LD_VAR 0 49
47240: PUSH
47241: LD_VAR 0 50
47245: PUSH
47246: LD_VAR 0 51
47250: PUSH
47251: LD_VAR 0 52
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: PUSH
47264: LD_VAR 0 4
47268: PUSH
47269: LD_INT 1
47271: PLUS
47272: ARRAY
47273: ST_TO_ADDR
47274: GO 47465
47276: LD_INT 4
47278: DOUBLE
47279: EQUAL
47280: IFTRUE 47302
47282: LD_INT 5
47284: DOUBLE
47285: EQUAL
47286: IFTRUE 47302
47288: LD_INT 34
47290: DOUBLE
47291: EQUAL
47292: IFTRUE 47302
47294: LD_INT 37
47296: DOUBLE
47297: EQUAL
47298: IFTRUE 47302
47300: GO 47358
47302: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47303: LD_ADDR_VAR 0 9
47307: PUSH
47308: LD_VAR 0 53
47312: PUSH
47313: LD_VAR 0 54
47317: PUSH
47318: LD_VAR 0 55
47322: PUSH
47323: LD_VAR 0 56
47327: PUSH
47328: LD_VAR 0 57
47332: PUSH
47333: LD_VAR 0 58
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: PUSH
47346: LD_VAR 0 4
47350: PUSH
47351: LD_INT 1
47353: PLUS
47354: ARRAY
47355: ST_TO_ADDR
47356: GO 47465
47358: LD_INT 31
47360: DOUBLE
47361: EQUAL
47362: IFTRUE 47408
47364: LD_INT 32
47366: DOUBLE
47367: EQUAL
47368: IFTRUE 47408
47370: LD_INT 33
47372: DOUBLE
47373: EQUAL
47374: IFTRUE 47408
47376: LD_INT 27
47378: DOUBLE
47379: EQUAL
47380: IFTRUE 47408
47382: LD_INT 26
47384: DOUBLE
47385: EQUAL
47386: IFTRUE 47408
47388: LD_INT 28
47390: DOUBLE
47391: EQUAL
47392: IFTRUE 47408
47394: LD_INT 29
47396: DOUBLE
47397: EQUAL
47398: IFTRUE 47408
47400: LD_INT 30
47402: DOUBLE
47403: EQUAL
47404: IFTRUE 47408
47406: GO 47464
47408: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47409: LD_ADDR_VAR 0 9
47413: PUSH
47414: LD_VAR 0 59
47418: PUSH
47419: LD_VAR 0 60
47423: PUSH
47424: LD_VAR 0 61
47428: PUSH
47429: LD_VAR 0 62
47433: PUSH
47434: LD_VAR 0 63
47438: PUSH
47439: LD_VAR 0 64
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: PUSH
47452: LD_VAR 0 4
47456: PUSH
47457: LD_INT 1
47459: PLUS
47460: ARRAY
47461: ST_TO_ADDR
47462: GO 47465
47464: POP
// temp_list2 = [ ] ;
47465: LD_ADDR_VAR 0 10
47469: PUSH
47470: EMPTY
47471: ST_TO_ADDR
// for i in temp_list do
47472: LD_ADDR_VAR 0 8
47476: PUSH
47477: LD_VAR 0 9
47481: PUSH
47482: FOR_IN
47483: IFFALSE 47535
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47485: LD_ADDR_VAR 0 10
47489: PUSH
47490: LD_VAR 0 10
47494: PUSH
47495: LD_VAR 0 8
47499: PUSH
47500: LD_INT 1
47502: ARRAY
47503: PUSH
47504: LD_VAR 0 2
47508: PLUS
47509: PUSH
47510: LD_VAR 0 8
47514: PUSH
47515: LD_INT 2
47517: ARRAY
47518: PUSH
47519: LD_VAR 0 3
47523: PLUS
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: ADD
47532: ST_TO_ADDR
47533: GO 47482
47535: POP
47536: POP
// result = temp_list2 ;
47537: LD_ADDR_VAR 0 7
47541: PUSH
47542: LD_VAR 0 10
47546: ST_TO_ADDR
// end ;
47547: LD_VAR 0 7
47551: RET
// export function EnemyInRange ( unit , dist ) ; begin
47552: LD_INT 0
47554: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47555: LD_ADDR_VAR 0 3
47559: PUSH
47560: LD_VAR 0 1
47564: PPUSH
47565: CALL_OW 255
47569: PPUSH
47570: LD_VAR 0 1
47574: PPUSH
47575: CALL_OW 250
47579: PPUSH
47580: LD_VAR 0 1
47584: PPUSH
47585: CALL_OW 251
47589: PPUSH
47590: LD_VAR 0 2
47594: PPUSH
47595: CALL 20948 0 4
47599: PUSH
47600: LD_INT 4
47602: ARRAY
47603: ST_TO_ADDR
// end ;
47604: LD_VAR 0 3
47608: RET
// export function PlayerSeeMe ( unit ) ; begin
47609: LD_INT 0
47611: PPUSH
// result := See ( your_side , unit ) ;
47612: LD_ADDR_VAR 0 2
47616: PUSH
47617: LD_OWVAR 2
47621: PPUSH
47622: LD_VAR 0 1
47626: PPUSH
47627: CALL_OW 292
47631: ST_TO_ADDR
// end ;
47632: LD_VAR 0 2
47636: RET
// export function ReverseDir ( unit ) ; begin
47637: LD_INT 0
47639: PPUSH
// if not unit then
47640: LD_VAR 0 1
47644: NOT
47645: IFFALSE 47649
// exit ;
47647: GO 47672
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47649: LD_ADDR_VAR 0 2
47653: PUSH
47654: LD_VAR 0 1
47658: PPUSH
47659: CALL_OW 254
47663: PUSH
47664: LD_INT 3
47666: PLUS
47667: PUSH
47668: LD_INT 6
47670: MOD
47671: ST_TO_ADDR
// end ;
47672: LD_VAR 0 2
47676: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
47677: LD_INT 0
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
// if not hexes then
47684: LD_VAR 0 2
47688: NOT
47689: IFFALSE 47693
// exit ;
47691: GO 47841
// dist := 9999 ;
47693: LD_ADDR_VAR 0 5
47697: PUSH
47698: LD_INT 9999
47700: ST_TO_ADDR
// for i = 1 to hexes do
47701: LD_ADDR_VAR 0 4
47705: PUSH
47706: DOUBLE
47707: LD_INT 1
47709: DEC
47710: ST_TO_ADDR
47711: LD_VAR 0 2
47715: PUSH
47716: FOR_TO
47717: IFFALSE 47829
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
47719: LD_VAR 0 1
47723: PPUSH
47724: LD_VAR 0 2
47728: PUSH
47729: LD_VAR 0 4
47733: ARRAY
47734: PUSH
47735: LD_INT 1
47737: ARRAY
47738: PPUSH
47739: LD_VAR 0 2
47743: PUSH
47744: LD_VAR 0 4
47748: ARRAY
47749: PUSH
47750: LD_INT 2
47752: ARRAY
47753: PPUSH
47754: CALL_OW 297
47758: PUSH
47759: LD_VAR 0 5
47763: LESS
47764: IFFALSE 47827
// begin hex := hexes [ i ] ;
47766: LD_ADDR_VAR 0 7
47770: PUSH
47771: LD_VAR 0 2
47775: PUSH
47776: LD_VAR 0 4
47780: ARRAY
47781: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47782: LD_ADDR_VAR 0 5
47786: PUSH
47787: LD_VAR 0 1
47791: PPUSH
47792: LD_VAR 0 2
47796: PUSH
47797: LD_VAR 0 4
47801: ARRAY
47802: PUSH
47803: LD_INT 1
47805: ARRAY
47806: PPUSH
47807: LD_VAR 0 2
47811: PUSH
47812: LD_VAR 0 4
47816: ARRAY
47817: PUSH
47818: LD_INT 2
47820: ARRAY
47821: PPUSH
47822: CALL_OW 297
47826: ST_TO_ADDR
// end ; end ;
47827: GO 47716
47829: POP
47830: POP
// result := hex ;
47831: LD_ADDR_VAR 0 3
47835: PUSH
47836: LD_VAR 0 7
47840: ST_TO_ADDR
// end ;
47841: LD_VAR 0 3
47845: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47846: LD_INT 0
47848: PPUSH
47849: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47850: LD_VAR 0 1
47854: NOT
47855: PUSH
47856: LD_VAR 0 1
47860: PUSH
47861: LD_INT 21
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 23
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PPUSH
47885: CALL_OW 69
47889: IN
47890: NOT
47891: OR
47892: IFFALSE 47896
// exit ;
47894: GO 47943
// for i = 1 to 3 do
47896: LD_ADDR_VAR 0 3
47900: PUSH
47901: DOUBLE
47902: LD_INT 1
47904: DEC
47905: ST_TO_ADDR
47906: LD_INT 3
47908: PUSH
47909: FOR_TO
47910: IFFALSE 47941
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47912: LD_VAR 0 1
47916: PPUSH
47917: CALL_OW 250
47921: PPUSH
47922: LD_VAR 0 1
47926: PPUSH
47927: CALL_OW 251
47931: PPUSH
47932: LD_INT 1
47934: PPUSH
47935: CALL_OW 453
47939: GO 47909
47941: POP
47942: POP
// end ;
47943: LD_VAR 0 2
47947: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47948: LD_INT 0
47950: PPUSH
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47956: LD_VAR 0 1
47960: NOT
47961: PUSH
47962: LD_VAR 0 2
47966: NOT
47967: OR
47968: PUSH
47969: LD_VAR 0 1
47973: PPUSH
47974: CALL_OW 314
47978: OR
47979: IFFALSE 47983
// exit ;
47981: GO 48424
// x := GetX ( enemy_unit ) ;
47983: LD_ADDR_VAR 0 7
47987: PUSH
47988: LD_VAR 0 2
47992: PPUSH
47993: CALL_OW 250
47997: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47998: LD_ADDR_VAR 0 8
48002: PUSH
48003: LD_VAR 0 2
48007: PPUSH
48008: CALL_OW 251
48012: ST_TO_ADDR
// if not x or not y then
48013: LD_VAR 0 7
48017: NOT
48018: PUSH
48019: LD_VAR 0 8
48023: NOT
48024: OR
48025: IFFALSE 48029
// exit ;
48027: GO 48424
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48029: LD_ADDR_VAR 0 6
48033: PUSH
48034: LD_VAR 0 7
48038: PPUSH
48039: LD_INT 0
48041: PPUSH
48042: LD_INT 4
48044: PPUSH
48045: CALL_OW 272
48049: PUSH
48050: LD_VAR 0 8
48054: PPUSH
48055: LD_INT 0
48057: PPUSH
48058: LD_INT 4
48060: PPUSH
48061: CALL_OW 273
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_VAR 0 7
48074: PPUSH
48075: LD_INT 1
48077: PPUSH
48078: LD_INT 4
48080: PPUSH
48081: CALL_OW 272
48085: PUSH
48086: LD_VAR 0 8
48090: PPUSH
48091: LD_INT 1
48093: PPUSH
48094: LD_INT 4
48096: PPUSH
48097: CALL_OW 273
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_VAR 0 7
48110: PPUSH
48111: LD_INT 2
48113: PPUSH
48114: LD_INT 4
48116: PPUSH
48117: CALL_OW 272
48121: PUSH
48122: LD_VAR 0 8
48126: PPUSH
48127: LD_INT 2
48129: PPUSH
48130: LD_INT 4
48132: PPUSH
48133: CALL_OW 273
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_VAR 0 7
48146: PPUSH
48147: LD_INT 3
48149: PPUSH
48150: LD_INT 4
48152: PPUSH
48153: CALL_OW 272
48157: PUSH
48158: LD_VAR 0 8
48162: PPUSH
48163: LD_INT 3
48165: PPUSH
48166: LD_INT 4
48168: PPUSH
48169: CALL_OW 273
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_VAR 0 7
48182: PPUSH
48183: LD_INT 4
48185: PPUSH
48186: LD_INT 4
48188: PPUSH
48189: CALL_OW 272
48193: PUSH
48194: LD_VAR 0 8
48198: PPUSH
48199: LD_INT 4
48201: PPUSH
48202: LD_INT 4
48204: PPUSH
48205: CALL_OW 273
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_VAR 0 7
48218: PPUSH
48219: LD_INT 5
48221: PPUSH
48222: LD_INT 4
48224: PPUSH
48225: CALL_OW 272
48229: PUSH
48230: LD_VAR 0 8
48234: PPUSH
48235: LD_INT 5
48237: PPUSH
48238: LD_INT 4
48240: PPUSH
48241: CALL_OW 273
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// for i = tmp downto 1 do
48258: LD_ADDR_VAR 0 4
48262: PUSH
48263: DOUBLE
48264: LD_VAR 0 6
48268: INC
48269: ST_TO_ADDR
48270: LD_INT 1
48272: PUSH
48273: FOR_DOWNTO
48274: IFFALSE 48375
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48276: LD_VAR 0 6
48280: PUSH
48281: LD_VAR 0 4
48285: ARRAY
48286: PUSH
48287: LD_INT 1
48289: ARRAY
48290: PPUSH
48291: LD_VAR 0 6
48295: PUSH
48296: LD_VAR 0 4
48300: ARRAY
48301: PUSH
48302: LD_INT 2
48304: ARRAY
48305: PPUSH
48306: CALL_OW 488
48310: NOT
48311: PUSH
48312: LD_VAR 0 6
48316: PUSH
48317: LD_VAR 0 4
48321: ARRAY
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: PPUSH
48327: LD_VAR 0 6
48331: PUSH
48332: LD_VAR 0 4
48336: ARRAY
48337: PUSH
48338: LD_INT 2
48340: ARRAY
48341: PPUSH
48342: CALL_OW 428
48346: PUSH
48347: LD_INT 0
48349: NONEQUAL
48350: OR
48351: IFFALSE 48373
// tmp := Delete ( tmp , i ) ;
48353: LD_ADDR_VAR 0 6
48357: PUSH
48358: LD_VAR 0 6
48362: PPUSH
48363: LD_VAR 0 4
48367: PPUSH
48368: CALL_OW 3
48372: ST_TO_ADDR
48373: GO 48273
48375: POP
48376: POP
// j := GetClosestHex ( unit , tmp ) ;
48377: LD_ADDR_VAR 0 5
48381: PUSH
48382: LD_VAR 0 1
48386: PPUSH
48387: LD_VAR 0 6
48391: PPUSH
48392: CALL 47677 0 2
48396: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48397: LD_VAR 0 1
48401: PPUSH
48402: LD_VAR 0 5
48406: PUSH
48407: LD_INT 1
48409: ARRAY
48410: PPUSH
48411: LD_VAR 0 5
48415: PUSH
48416: LD_INT 2
48418: ARRAY
48419: PPUSH
48420: CALL_OW 111
// end ;
48424: LD_VAR 0 3
48428: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48429: LD_INT 0
48431: PPUSH
48432: PPUSH
48433: PPUSH
// uc_side = 0 ;
48434: LD_ADDR_OWVAR 20
48438: PUSH
48439: LD_INT 0
48441: ST_TO_ADDR
// uc_nation = 0 ;
48442: LD_ADDR_OWVAR 21
48446: PUSH
48447: LD_INT 0
48449: ST_TO_ADDR
// InitHc_All ( ) ;
48450: CALL_OW 584
// InitVc ;
48454: CALL_OW 20
// if mastodonts then
48458: LD_VAR 0 6
48462: IFFALSE 48529
// for i = 1 to mastodonts do
48464: LD_ADDR_VAR 0 11
48468: PUSH
48469: DOUBLE
48470: LD_INT 1
48472: DEC
48473: ST_TO_ADDR
48474: LD_VAR 0 6
48478: PUSH
48479: FOR_TO
48480: IFFALSE 48527
// begin vc_chassis := 31 ;
48482: LD_ADDR_OWVAR 37
48486: PUSH
48487: LD_INT 31
48489: ST_TO_ADDR
// vc_control := control_rider ;
48490: LD_ADDR_OWVAR 38
48494: PUSH
48495: LD_INT 4
48497: ST_TO_ADDR
// animal := CreateVehicle ;
48498: LD_ADDR_VAR 0 12
48502: PUSH
48503: CALL_OW 45
48507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48508: LD_VAR 0 12
48512: PPUSH
48513: LD_VAR 0 8
48517: PPUSH
48518: LD_INT 0
48520: PPUSH
48521: CALL 50717 0 3
// end ;
48525: GO 48479
48527: POP
48528: POP
// if horses then
48529: LD_VAR 0 5
48533: IFFALSE 48600
// for i = 1 to horses do
48535: LD_ADDR_VAR 0 11
48539: PUSH
48540: DOUBLE
48541: LD_INT 1
48543: DEC
48544: ST_TO_ADDR
48545: LD_VAR 0 5
48549: PUSH
48550: FOR_TO
48551: IFFALSE 48598
// begin hc_class := 21 ;
48553: LD_ADDR_OWVAR 28
48557: PUSH
48558: LD_INT 21
48560: ST_TO_ADDR
// hc_gallery :=  ;
48561: LD_ADDR_OWVAR 33
48565: PUSH
48566: LD_STRING 
48568: ST_TO_ADDR
// animal := CreateHuman ;
48569: LD_ADDR_VAR 0 12
48573: PUSH
48574: CALL_OW 44
48578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48579: LD_VAR 0 12
48583: PPUSH
48584: LD_VAR 0 8
48588: PPUSH
48589: LD_INT 0
48591: PPUSH
48592: CALL 50717 0 3
// end ;
48596: GO 48550
48598: POP
48599: POP
// if birds then
48600: LD_VAR 0 1
48604: IFFALSE 48671
// for i = 1 to birds do
48606: LD_ADDR_VAR 0 11
48610: PUSH
48611: DOUBLE
48612: LD_INT 1
48614: DEC
48615: ST_TO_ADDR
48616: LD_VAR 0 1
48620: PUSH
48621: FOR_TO
48622: IFFALSE 48669
// begin hc_class = 18 ;
48624: LD_ADDR_OWVAR 28
48628: PUSH
48629: LD_INT 18
48631: ST_TO_ADDR
// hc_gallery =  ;
48632: LD_ADDR_OWVAR 33
48636: PUSH
48637: LD_STRING 
48639: ST_TO_ADDR
// animal := CreateHuman ;
48640: LD_ADDR_VAR 0 12
48644: PUSH
48645: CALL_OW 44
48649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48650: LD_VAR 0 12
48654: PPUSH
48655: LD_VAR 0 8
48659: PPUSH
48660: LD_INT 0
48662: PPUSH
48663: CALL 50717 0 3
// end ;
48667: GO 48621
48669: POP
48670: POP
// if tigers then
48671: LD_VAR 0 2
48675: IFFALSE 48759
// for i = 1 to tigers do
48677: LD_ADDR_VAR 0 11
48681: PUSH
48682: DOUBLE
48683: LD_INT 1
48685: DEC
48686: ST_TO_ADDR
48687: LD_VAR 0 2
48691: PUSH
48692: FOR_TO
48693: IFFALSE 48757
// begin hc_class = class_tiger ;
48695: LD_ADDR_OWVAR 28
48699: PUSH
48700: LD_INT 14
48702: ST_TO_ADDR
// hc_gallery =  ;
48703: LD_ADDR_OWVAR 33
48707: PUSH
48708: LD_STRING 
48710: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48711: LD_ADDR_OWVAR 35
48715: PUSH
48716: LD_INT 7
48718: NEG
48719: PPUSH
48720: LD_INT 7
48722: PPUSH
48723: CALL_OW 12
48727: ST_TO_ADDR
// animal := CreateHuman ;
48728: LD_ADDR_VAR 0 12
48732: PUSH
48733: CALL_OW 44
48737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48738: LD_VAR 0 12
48742: PPUSH
48743: LD_VAR 0 8
48747: PPUSH
48748: LD_INT 0
48750: PPUSH
48751: CALL 50717 0 3
// end ;
48755: GO 48692
48757: POP
48758: POP
// if apemans then
48759: LD_VAR 0 3
48763: IFFALSE 48886
// for i = 1 to apemans do
48765: LD_ADDR_VAR 0 11
48769: PUSH
48770: DOUBLE
48771: LD_INT 1
48773: DEC
48774: ST_TO_ADDR
48775: LD_VAR 0 3
48779: PUSH
48780: FOR_TO
48781: IFFALSE 48884
// begin hc_class = class_apeman ;
48783: LD_ADDR_OWVAR 28
48787: PUSH
48788: LD_INT 12
48790: ST_TO_ADDR
// hc_gallery =  ;
48791: LD_ADDR_OWVAR 33
48795: PUSH
48796: LD_STRING 
48798: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48799: LD_ADDR_OWVAR 35
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PPUSH
48808: LD_INT 2
48810: PPUSH
48811: CALL_OW 12
48815: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48816: LD_ADDR_OWVAR 31
48820: PUSH
48821: LD_INT 1
48823: PPUSH
48824: LD_INT 3
48826: PPUSH
48827: CALL_OW 12
48831: PUSH
48832: LD_INT 1
48834: PPUSH
48835: LD_INT 3
48837: PPUSH
48838: CALL_OW 12
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// animal := CreateHuman ;
48855: LD_ADDR_VAR 0 12
48859: PUSH
48860: CALL_OW 44
48864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48865: LD_VAR 0 12
48869: PPUSH
48870: LD_VAR 0 8
48874: PPUSH
48875: LD_INT 0
48877: PPUSH
48878: CALL 50717 0 3
// end ;
48882: GO 48780
48884: POP
48885: POP
// if enchidnas then
48886: LD_VAR 0 4
48890: IFFALSE 48957
// for i = 1 to enchidnas do
48892: LD_ADDR_VAR 0 11
48896: PUSH
48897: DOUBLE
48898: LD_INT 1
48900: DEC
48901: ST_TO_ADDR
48902: LD_VAR 0 4
48906: PUSH
48907: FOR_TO
48908: IFFALSE 48955
// begin hc_class = 13 ;
48910: LD_ADDR_OWVAR 28
48914: PUSH
48915: LD_INT 13
48917: ST_TO_ADDR
// hc_gallery =  ;
48918: LD_ADDR_OWVAR 33
48922: PUSH
48923: LD_STRING 
48925: ST_TO_ADDR
// animal := CreateHuman ;
48926: LD_ADDR_VAR 0 12
48930: PUSH
48931: CALL_OW 44
48935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48936: LD_VAR 0 12
48940: PPUSH
48941: LD_VAR 0 8
48945: PPUSH
48946: LD_INT 0
48948: PPUSH
48949: CALL 50717 0 3
// end ;
48953: GO 48907
48955: POP
48956: POP
// if fishes then
48957: LD_VAR 0 7
48961: IFFALSE 49028
// for i = 1 to fishes do
48963: LD_ADDR_VAR 0 11
48967: PUSH
48968: DOUBLE
48969: LD_INT 1
48971: DEC
48972: ST_TO_ADDR
48973: LD_VAR 0 7
48977: PUSH
48978: FOR_TO
48979: IFFALSE 49026
// begin hc_class = 20 ;
48981: LD_ADDR_OWVAR 28
48985: PUSH
48986: LD_INT 20
48988: ST_TO_ADDR
// hc_gallery =  ;
48989: LD_ADDR_OWVAR 33
48993: PUSH
48994: LD_STRING 
48996: ST_TO_ADDR
// animal := CreateHuman ;
48997: LD_ADDR_VAR 0 12
49001: PUSH
49002: CALL_OW 44
49006: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49007: LD_VAR 0 12
49011: PPUSH
49012: LD_VAR 0 9
49016: PPUSH
49017: LD_INT 0
49019: PPUSH
49020: CALL 50717 0 3
// end ;
49024: GO 48978
49026: POP
49027: POP
// end ;
49028: LD_VAR 0 10
49032: RET
// export function WantHeal ( sci , unit ) ; begin
49033: LD_INT 0
49035: PPUSH
// if GetTaskList ( sci ) > 0 then
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 437
49045: PUSH
49046: LD_INT 0
49048: GREATER
49049: IFFALSE 49119
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 437
49060: PUSH
49061: LD_INT 1
49063: ARRAY
49064: PUSH
49065: LD_INT 1
49067: ARRAY
49068: PUSH
49069: LD_STRING l
49071: EQUAL
49072: PUSH
49073: LD_VAR 0 1
49077: PPUSH
49078: CALL_OW 437
49082: PUSH
49083: LD_INT 1
49085: ARRAY
49086: PUSH
49087: LD_INT 4
49089: ARRAY
49090: PUSH
49091: LD_VAR 0 2
49095: EQUAL
49096: AND
49097: IFFALSE 49109
// result := true else
49099: LD_ADDR_VAR 0 3
49103: PUSH
49104: LD_INT 1
49106: ST_TO_ADDR
49107: GO 49117
// result := false ;
49109: LD_ADDR_VAR 0 3
49113: PUSH
49114: LD_INT 0
49116: ST_TO_ADDR
// end else
49117: GO 49127
// result := false ;
49119: LD_ADDR_VAR 0 3
49123: PUSH
49124: LD_INT 0
49126: ST_TO_ADDR
// end ;
49127: LD_VAR 0 3
49131: RET
// export function HealTarget ( sci ) ; begin
49132: LD_INT 0
49134: PPUSH
// if not sci then
49135: LD_VAR 0 1
49139: NOT
49140: IFFALSE 49144
// exit ;
49142: GO 49209
// result := 0 ;
49144: LD_ADDR_VAR 0 2
49148: PUSH
49149: LD_INT 0
49151: ST_TO_ADDR
// if GetTaskList ( sci ) then
49152: LD_VAR 0 1
49156: PPUSH
49157: CALL_OW 437
49161: IFFALSE 49209
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49163: LD_VAR 0 1
49167: PPUSH
49168: CALL_OW 437
49172: PUSH
49173: LD_INT 1
49175: ARRAY
49176: PUSH
49177: LD_INT 1
49179: ARRAY
49180: PUSH
49181: LD_STRING l
49183: EQUAL
49184: IFFALSE 49209
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49186: LD_ADDR_VAR 0 2
49190: PUSH
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL_OW 437
49200: PUSH
49201: LD_INT 1
49203: ARRAY
49204: PUSH
49205: LD_INT 4
49207: ARRAY
49208: ST_TO_ADDR
// end ;
49209: LD_VAR 0 2
49213: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49214: LD_INT 0
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
// if not base_units then
49220: LD_VAR 0 1
49224: NOT
49225: IFFALSE 49229
// exit ;
49227: GO 49316
// result := false ;
49229: LD_ADDR_VAR 0 2
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49237: LD_ADDR_VAR 0 5
49241: PUSH
49242: LD_VAR 0 1
49246: PPUSH
49247: LD_INT 21
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PPUSH
49257: CALL_OW 72
49261: ST_TO_ADDR
// if not tmp then
49262: LD_VAR 0 5
49266: NOT
49267: IFFALSE 49271
// exit ;
49269: GO 49316
// for i in tmp do
49271: LD_ADDR_VAR 0 3
49275: PUSH
49276: LD_VAR 0 5
49280: PUSH
49281: FOR_IN
49282: IFFALSE 49314
// begin result := EnemyInRange ( i , 22 ) ;
49284: LD_ADDR_VAR 0 2
49288: PUSH
49289: LD_VAR 0 3
49293: PPUSH
49294: LD_INT 22
49296: PPUSH
49297: CALL 47552 0 2
49301: ST_TO_ADDR
// if result then
49302: LD_VAR 0 2
49306: IFFALSE 49312
// exit ;
49308: POP
49309: POP
49310: GO 49316
// end ;
49312: GO 49281
49314: POP
49315: POP
// end ;
49316: LD_VAR 0 2
49320: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49321: LD_INT 0
49323: PPUSH
49324: PPUSH
// if not units then
49325: LD_VAR 0 1
49329: NOT
49330: IFFALSE 49334
// exit ;
49332: GO 49404
// result := [ ] ;
49334: LD_ADDR_VAR 0 3
49338: PUSH
49339: EMPTY
49340: ST_TO_ADDR
// for i in units do
49341: LD_ADDR_VAR 0 4
49345: PUSH
49346: LD_VAR 0 1
49350: PUSH
49351: FOR_IN
49352: IFFALSE 49402
// if GetTag ( i ) = tag then
49354: LD_VAR 0 4
49358: PPUSH
49359: CALL_OW 110
49363: PUSH
49364: LD_VAR 0 2
49368: EQUAL
49369: IFFALSE 49400
// result := Replace ( result , result + 1 , i ) ;
49371: LD_ADDR_VAR 0 3
49375: PUSH
49376: LD_VAR 0 3
49380: PPUSH
49381: LD_VAR 0 3
49385: PUSH
49386: LD_INT 1
49388: PLUS
49389: PPUSH
49390: LD_VAR 0 4
49394: PPUSH
49395: CALL_OW 1
49399: ST_TO_ADDR
49400: GO 49351
49402: POP
49403: POP
// end ;
49404: LD_VAR 0 3
49408: RET
// export function IsDriver ( un ) ; begin
49409: LD_INT 0
49411: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49412: LD_ADDR_VAR 0 2
49416: PUSH
49417: LD_VAR 0 1
49421: PUSH
49422: LD_INT 55
49424: PUSH
49425: EMPTY
49426: LIST
49427: PPUSH
49428: CALL_OW 69
49432: IN
49433: ST_TO_ADDR
// end ;
49434: LD_VAR 0 2
49438: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49439: LD_INT 0
49441: PPUSH
49442: PPUSH
// list := [ ] ;
49443: LD_ADDR_VAR 0 5
49447: PUSH
49448: EMPTY
49449: ST_TO_ADDR
// case d of 0 :
49450: LD_VAR 0 3
49454: PUSH
49455: LD_INT 0
49457: DOUBLE
49458: EQUAL
49459: IFTRUE 49463
49461: GO 49596
49463: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49464: LD_ADDR_VAR 0 5
49468: PUSH
49469: LD_VAR 0 1
49473: PUSH
49474: LD_INT 4
49476: MINUS
49477: PUSH
49478: LD_VAR 0 2
49482: PUSH
49483: LD_INT 4
49485: MINUS
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: PUSH
49495: LD_VAR 0 1
49499: PUSH
49500: LD_INT 3
49502: MINUS
49503: PUSH
49504: LD_VAR 0 2
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: PUSH
49517: LD_VAR 0 1
49521: PUSH
49522: LD_INT 4
49524: PLUS
49525: PUSH
49526: LD_VAR 0 2
49530: PUSH
49531: LD_INT 4
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: PUSH
49539: LD_VAR 0 1
49543: PUSH
49544: LD_INT 3
49546: PLUS
49547: PUSH
49548: LD_VAR 0 2
49552: PUSH
49553: LD_INT 3
49555: PLUS
49556: PUSH
49557: LD_INT 5
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: PUSH
49565: LD_VAR 0 1
49569: PUSH
49570: LD_VAR 0 2
49574: PUSH
49575: LD_INT 4
49577: PLUS
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: ST_TO_ADDR
// end ; 1 :
49594: GO 50294
49596: LD_INT 1
49598: DOUBLE
49599: EQUAL
49600: IFTRUE 49604
49602: GO 49737
49604: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49605: LD_ADDR_VAR 0 5
49609: PUSH
49610: LD_VAR 0 1
49614: PUSH
49615: LD_VAR 0 2
49619: PUSH
49620: LD_INT 4
49622: MINUS
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: PUSH
49632: LD_VAR 0 1
49636: PUSH
49637: LD_INT 3
49639: MINUS
49640: PUSH
49641: LD_VAR 0 2
49645: PUSH
49646: LD_INT 3
49648: MINUS
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: PUSH
49658: LD_VAR 0 1
49662: PUSH
49663: LD_INT 4
49665: MINUS
49666: PUSH
49667: LD_VAR 0 2
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: LD_VAR 0 1
49684: PUSH
49685: LD_VAR 0 2
49689: PUSH
49690: LD_INT 3
49692: PLUS
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: PUSH
49702: LD_VAR 0 1
49706: PUSH
49707: LD_INT 4
49709: PLUS
49710: PUSH
49711: LD_VAR 0 2
49715: PUSH
49716: LD_INT 4
49718: PLUS
49719: PUSH
49720: LD_INT 5
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// end ; 2 :
49735: GO 50294
49737: LD_INT 2
49739: DOUBLE
49740: EQUAL
49741: IFTRUE 49745
49743: GO 49874
49745: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49746: LD_ADDR_VAR 0 5
49750: PUSH
49751: LD_VAR 0 1
49755: PUSH
49756: LD_VAR 0 2
49760: PUSH
49761: LD_INT 3
49763: MINUS
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: PUSH
49773: LD_VAR 0 1
49777: PUSH
49778: LD_INT 4
49780: PLUS
49781: PUSH
49782: LD_VAR 0 2
49786: PUSH
49787: LD_INT 4
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: LD_VAR 0 1
49799: PUSH
49800: LD_VAR 0 2
49804: PUSH
49805: LD_INT 4
49807: PLUS
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: PUSH
49817: LD_VAR 0 1
49821: PUSH
49822: LD_INT 3
49824: MINUS
49825: PUSH
49826: LD_VAR 0 2
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: PUSH
49839: LD_VAR 0 1
49843: PUSH
49844: LD_INT 4
49846: MINUS
49847: PUSH
49848: LD_VAR 0 2
49852: PUSH
49853: LD_INT 4
49855: MINUS
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
// end ; 3 :
49872: GO 50294
49874: LD_INT 3
49876: DOUBLE
49877: EQUAL
49878: IFTRUE 49882
49880: GO 50015
49882: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49883: LD_ADDR_VAR 0 5
49887: PUSH
49888: LD_VAR 0 1
49892: PUSH
49893: LD_INT 3
49895: PLUS
49896: PUSH
49897: LD_VAR 0 2
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: PUSH
49910: LD_VAR 0 1
49914: PUSH
49915: LD_INT 4
49917: PLUS
49918: PUSH
49919: LD_VAR 0 2
49923: PUSH
49924: LD_INT 4
49926: PLUS
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: PUSH
49936: LD_VAR 0 1
49940: PUSH
49941: LD_INT 4
49943: MINUS
49944: PUSH
49945: LD_VAR 0 2
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: LIST
49957: PUSH
49958: LD_VAR 0 1
49962: PUSH
49963: LD_VAR 0 2
49967: PUSH
49968: LD_INT 4
49970: MINUS
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: PUSH
49980: LD_VAR 0 1
49984: PUSH
49985: LD_INT 3
49987: MINUS
49988: PUSH
49989: LD_VAR 0 2
49993: PUSH
49994: LD_INT 3
49996: MINUS
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// end ; 4 :
50013: GO 50294
50015: LD_INT 4
50017: DOUBLE
50018: EQUAL
50019: IFTRUE 50023
50021: GO 50156
50023: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50024: LD_ADDR_VAR 0 5
50028: PUSH
50029: LD_VAR 0 1
50033: PUSH
50034: LD_VAR 0 2
50038: PUSH
50039: LD_INT 4
50041: PLUS
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: PUSH
50051: LD_VAR 0 1
50055: PUSH
50056: LD_INT 3
50058: PLUS
50059: PUSH
50060: LD_VAR 0 2
50064: PUSH
50065: LD_INT 3
50067: PLUS
50068: PUSH
50069: LD_INT 5
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: PUSH
50077: LD_VAR 0 1
50081: PUSH
50082: LD_INT 4
50084: PLUS
50085: PUSH
50086: LD_VAR 0 2
50090: PUSH
50091: LD_INT 4
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: PUSH
50099: LD_VAR 0 1
50103: PUSH
50104: LD_VAR 0 2
50108: PUSH
50109: LD_INT 3
50111: MINUS
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: LIST
50120: PUSH
50121: LD_VAR 0 1
50125: PUSH
50126: LD_INT 4
50128: MINUS
50129: PUSH
50130: LD_VAR 0 2
50134: PUSH
50135: LD_INT 4
50137: MINUS
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: ST_TO_ADDR
// end ; 5 :
50154: GO 50294
50156: LD_INT 5
50158: DOUBLE
50159: EQUAL
50160: IFTRUE 50164
50162: GO 50293
50164: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50165: LD_ADDR_VAR 0 5
50169: PUSH
50170: LD_VAR 0 1
50174: PUSH
50175: LD_INT 4
50177: MINUS
50178: PUSH
50179: LD_VAR 0 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: PUSH
50192: LD_VAR 0 1
50196: PUSH
50197: LD_VAR 0 2
50201: PUSH
50202: LD_INT 4
50204: MINUS
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_VAR 0 1
50218: PUSH
50219: LD_INT 4
50221: PLUS
50222: PUSH
50223: LD_VAR 0 2
50227: PUSH
50228: LD_INT 4
50230: PLUS
50231: PUSH
50232: LD_INT 5
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: PUSH
50240: LD_VAR 0 1
50244: PUSH
50245: LD_INT 3
50247: PLUS
50248: PUSH
50249: LD_VAR 0 2
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: PUSH
50262: LD_VAR 0 1
50266: PUSH
50267: LD_VAR 0 2
50271: PUSH
50272: LD_INT 3
50274: PLUS
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// end ; end ;
50291: GO 50294
50293: POP
// result := list ;
50294: LD_ADDR_VAR 0 4
50298: PUSH
50299: LD_VAR 0 5
50303: ST_TO_ADDR
// end ;
50304: LD_VAR 0 4
50308: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50309: LD_INT 0
50311: PPUSH
50312: PPUSH
50313: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50314: LD_VAR 0 1
50318: NOT
50319: PUSH
50320: LD_VAR 0 2
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: LD_INT 4
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: IN
50343: NOT
50344: OR
50345: IFFALSE 50349
// exit ;
50347: GO 50441
// tmp := [ ] ;
50349: LD_ADDR_VAR 0 5
50353: PUSH
50354: EMPTY
50355: ST_TO_ADDR
// for i in units do
50356: LD_ADDR_VAR 0 4
50360: PUSH
50361: LD_VAR 0 1
50365: PUSH
50366: FOR_IN
50367: IFFALSE 50410
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50369: LD_ADDR_VAR 0 5
50373: PUSH
50374: LD_VAR 0 5
50378: PPUSH
50379: LD_VAR 0 5
50383: PUSH
50384: LD_INT 1
50386: PLUS
50387: PPUSH
50388: LD_VAR 0 4
50392: PPUSH
50393: LD_VAR 0 2
50397: PPUSH
50398: CALL_OW 259
50402: PPUSH
50403: CALL_OW 2
50407: ST_TO_ADDR
50408: GO 50366
50410: POP
50411: POP
// if not tmp then
50412: LD_VAR 0 5
50416: NOT
50417: IFFALSE 50421
// exit ;
50419: GO 50441
// result := SortListByListDesc ( units , tmp ) ;
50421: LD_ADDR_VAR 0 3
50425: PUSH
50426: LD_VAR 0 1
50430: PPUSH
50431: LD_VAR 0 5
50435: PPUSH
50436: CALL_OW 77
50440: ST_TO_ADDR
// end ;
50441: LD_VAR 0 3
50445: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50446: LD_INT 0
50448: PPUSH
50449: PPUSH
50450: PPUSH
// result := false ;
50451: LD_ADDR_VAR 0 3
50455: PUSH
50456: LD_INT 0
50458: ST_TO_ADDR
// x := GetX ( building ) ;
50459: LD_ADDR_VAR 0 4
50463: PUSH
50464: LD_VAR 0 2
50468: PPUSH
50469: CALL_OW 250
50473: ST_TO_ADDR
// y := GetY ( building ) ;
50474: LD_ADDR_VAR 0 5
50478: PUSH
50479: LD_VAR 0 2
50483: PPUSH
50484: CALL_OW 251
50488: ST_TO_ADDR
// if not building or not x or not y then
50489: LD_VAR 0 2
50493: NOT
50494: PUSH
50495: LD_VAR 0 4
50499: NOT
50500: OR
50501: PUSH
50502: LD_VAR 0 5
50506: NOT
50507: OR
50508: IFFALSE 50512
// exit ;
50510: GO 50604
// if GetTaskList ( unit ) then
50512: LD_VAR 0 1
50516: PPUSH
50517: CALL_OW 437
50521: IFFALSE 50604
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50523: LD_STRING e
50525: PUSH
50526: LD_VAR 0 1
50530: PPUSH
50531: CALL_OW 437
50535: PUSH
50536: LD_INT 1
50538: ARRAY
50539: PUSH
50540: LD_INT 1
50542: ARRAY
50543: EQUAL
50544: PUSH
50545: LD_VAR 0 4
50549: PUSH
50550: LD_VAR 0 1
50554: PPUSH
50555: CALL_OW 437
50559: PUSH
50560: LD_INT 1
50562: ARRAY
50563: PUSH
50564: LD_INT 2
50566: ARRAY
50567: EQUAL
50568: AND
50569: PUSH
50570: LD_VAR 0 5
50574: PUSH
50575: LD_VAR 0 1
50579: PPUSH
50580: CALL_OW 437
50584: PUSH
50585: LD_INT 1
50587: ARRAY
50588: PUSH
50589: LD_INT 3
50591: ARRAY
50592: EQUAL
50593: AND
50594: IFFALSE 50604
// result := true end ;
50596: LD_ADDR_VAR 0 3
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// end ;
50604: LD_VAR 0 3
50608: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50609: LD_INT 0
50611: PPUSH
// result := false ;
50612: LD_ADDR_VAR 0 4
50616: PUSH
50617: LD_INT 0
50619: ST_TO_ADDR
// if GetTaskList ( unit ) then
50620: LD_VAR 0 1
50624: PPUSH
50625: CALL_OW 437
50629: IFFALSE 50712
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50631: LD_STRING M
50633: PUSH
50634: LD_VAR 0 1
50638: PPUSH
50639: CALL_OW 437
50643: PUSH
50644: LD_INT 1
50646: ARRAY
50647: PUSH
50648: LD_INT 1
50650: ARRAY
50651: EQUAL
50652: PUSH
50653: LD_VAR 0 2
50657: PUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 437
50667: PUSH
50668: LD_INT 1
50670: ARRAY
50671: PUSH
50672: LD_INT 2
50674: ARRAY
50675: EQUAL
50676: AND
50677: PUSH
50678: LD_VAR 0 3
50682: PUSH
50683: LD_VAR 0 1
50687: PPUSH
50688: CALL_OW 437
50692: PUSH
50693: LD_INT 1
50695: ARRAY
50696: PUSH
50697: LD_INT 3
50699: ARRAY
50700: EQUAL
50701: AND
50702: IFFALSE 50712
// result := true ;
50704: LD_ADDR_VAR 0 4
50708: PUSH
50709: LD_INT 1
50711: ST_TO_ADDR
// end ; end ;
50712: LD_VAR 0 4
50716: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50717: LD_INT 0
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
// if not unit or not area then
50723: LD_VAR 0 1
50727: NOT
50728: PUSH
50729: LD_VAR 0 2
50733: NOT
50734: OR
50735: IFFALSE 50739
// exit ;
50737: GO 50903
// tmp := AreaToList ( area , i ) ;
50739: LD_ADDR_VAR 0 6
50743: PUSH
50744: LD_VAR 0 2
50748: PPUSH
50749: LD_VAR 0 5
50753: PPUSH
50754: CALL_OW 517
50758: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50759: LD_ADDR_VAR 0 5
50763: PUSH
50764: DOUBLE
50765: LD_INT 1
50767: DEC
50768: ST_TO_ADDR
50769: LD_VAR 0 6
50773: PUSH
50774: LD_INT 1
50776: ARRAY
50777: PUSH
50778: FOR_TO
50779: IFFALSE 50901
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50781: LD_ADDR_VAR 0 7
50785: PUSH
50786: LD_VAR 0 6
50790: PUSH
50791: LD_INT 1
50793: ARRAY
50794: PUSH
50795: LD_VAR 0 5
50799: ARRAY
50800: PUSH
50801: LD_VAR 0 6
50805: PUSH
50806: LD_INT 2
50808: ARRAY
50809: PUSH
50810: LD_VAR 0 5
50814: ARRAY
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50820: LD_VAR 0 7
50824: PUSH
50825: LD_INT 1
50827: ARRAY
50828: PPUSH
50829: LD_VAR 0 7
50833: PUSH
50834: LD_INT 2
50836: ARRAY
50837: PPUSH
50838: CALL_OW 428
50842: PUSH
50843: LD_INT 0
50845: EQUAL
50846: IFFALSE 50899
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50848: LD_VAR 0 1
50852: PPUSH
50853: LD_VAR 0 7
50857: PUSH
50858: LD_INT 1
50860: ARRAY
50861: PPUSH
50862: LD_VAR 0 7
50866: PUSH
50867: LD_INT 2
50869: ARRAY
50870: PPUSH
50871: LD_VAR 0 3
50875: PPUSH
50876: CALL_OW 48
// result := IsPlaced ( unit ) ;
50880: LD_ADDR_VAR 0 4
50884: PUSH
50885: LD_VAR 0 1
50889: PPUSH
50890: CALL_OW 305
50894: ST_TO_ADDR
// exit ;
50895: POP
50896: POP
50897: GO 50903
// end ; end ;
50899: GO 50778
50901: POP
50902: POP
// end ;
50903: LD_VAR 0 4
50907: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50908: LD_INT 0
50910: PPUSH
50911: PPUSH
50912: PPUSH
// if not side or side > 8 then
50913: LD_VAR 0 1
50917: NOT
50918: PUSH
50919: LD_VAR 0 1
50923: PUSH
50924: LD_INT 8
50926: GREATER
50927: OR
50928: IFFALSE 50932
// exit ;
50930: GO 51119
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50932: LD_ADDR_VAR 0 4
50936: PUSH
50937: LD_INT 22
50939: PUSH
50940: LD_VAR 0 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 21
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PPUSH
50963: CALL_OW 69
50967: ST_TO_ADDR
// if not tmp then
50968: LD_VAR 0 4
50972: NOT
50973: IFFALSE 50977
// exit ;
50975: GO 51119
// enable_addtolog := true ;
50977: LD_ADDR_OWVAR 81
50981: PUSH
50982: LD_INT 1
50984: ST_TO_ADDR
// AddToLog ( [ ) ;
50985: LD_STRING [
50987: PPUSH
50988: CALL_OW 561
// for i in tmp do
50992: LD_ADDR_VAR 0 3
50996: PUSH
50997: LD_VAR 0 4
51001: PUSH
51002: FOR_IN
51003: IFFALSE 51110
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51005: LD_STRING [
51007: PUSH
51008: LD_VAR 0 3
51012: PPUSH
51013: CALL_OW 266
51017: STR
51018: PUSH
51019: LD_STRING , 
51021: STR
51022: PUSH
51023: LD_VAR 0 3
51027: PPUSH
51028: CALL_OW 250
51032: STR
51033: PUSH
51034: LD_STRING , 
51036: STR
51037: PUSH
51038: LD_VAR 0 3
51042: PPUSH
51043: CALL_OW 251
51047: STR
51048: PUSH
51049: LD_STRING , 
51051: STR
51052: PUSH
51053: LD_VAR 0 3
51057: PPUSH
51058: CALL_OW 254
51062: STR
51063: PUSH
51064: LD_STRING , 
51066: STR
51067: PUSH
51068: LD_VAR 0 3
51072: PPUSH
51073: LD_INT 1
51075: PPUSH
51076: CALL_OW 268
51080: STR
51081: PUSH
51082: LD_STRING , 
51084: STR
51085: PUSH
51086: LD_VAR 0 3
51090: PPUSH
51091: LD_INT 2
51093: PPUSH
51094: CALL_OW 268
51098: STR
51099: PUSH
51100: LD_STRING ],
51102: STR
51103: PPUSH
51104: CALL_OW 561
// end ;
51108: GO 51002
51110: POP
51111: POP
// AddToLog ( ]; ) ;
51112: LD_STRING ];
51114: PPUSH
51115: CALL_OW 561
// end ;
51119: LD_VAR 0 2
51123: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51124: LD_INT 0
51126: PPUSH
51127: PPUSH
51128: PPUSH
51129: PPUSH
51130: PPUSH
// if not area or not rate or not max then
51131: LD_VAR 0 1
51135: NOT
51136: PUSH
51137: LD_VAR 0 2
51141: NOT
51142: OR
51143: PUSH
51144: LD_VAR 0 4
51148: NOT
51149: OR
51150: IFFALSE 51154
// exit ;
51152: GO 51346
// while 1 do
51154: LD_INT 1
51156: IFFALSE 51346
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51158: LD_ADDR_VAR 0 9
51162: PUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: LD_INT 1
51170: PPUSH
51171: CALL_OW 287
51175: PUSH
51176: LD_INT 10
51178: MUL
51179: ST_TO_ADDR
// r := rate / 10 ;
51180: LD_ADDR_VAR 0 7
51184: PUSH
51185: LD_VAR 0 2
51189: PUSH
51190: LD_INT 10
51192: DIVREAL
51193: ST_TO_ADDR
// time := 1 1$00 ;
51194: LD_ADDR_VAR 0 8
51198: PUSH
51199: LD_INT 2100
51201: ST_TO_ADDR
// if amount < min then
51202: LD_VAR 0 9
51206: PUSH
51207: LD_VAR 0 3
51211: LESS
51212: IFFALSE 51230
// r := r * 2 else
51214: LD_ADDR_VAR 0 7
51218: PUSH
51219: LD_VAR 0 7
51223: PUSH
51224: LD_INT 2
51226: MUL
51227: ST_TO_ADDR
51228: GO 51256
// if amount > max then
51230: LD_VAR 0 9
51234: PUSH
51235: LD_VAR 0 4
51239: GREATER
51240: IFFALSE 51256
// r := r / 2 ;
51242: LD_ADDR_VAR 0 7
51246: PUSH
51247: LD_VAR 0 7
51251: PUSH
51252: LD_INT 2
51254: DIVREAL
51255: ST_TO_ADDR
// time := time / r ;
51256: LD_ADDR_VAR 0 8
51260: PUSH
51261: LD_VAR 0 8
51265: PUSH
51266: LD_VAR 0 7
51270: DIVREAL
51271: ST_TO_ADDR
// if time < 0 then
51272: LD_VAR 0 8
51276: PUSH
51277: LD_INT 0
51279: LESS
51280: IFFALSE 51297
// time := time * - 1 ;
51282: LD_ADDR_VAR 0 8
51286: PUSH
51287: LD_VAR 0 8
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: MUL
51296: ST_TO_ADDR
// wait ( time ) ;
51297: LD_VAR 0 8
51301: PPUSH
51302: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
51306: LD_INT 35
51308: PPUSH
51309: LD_INT 875
51311: PPUSH
51312: CALL_OW 12
51316: PPUSH
51317: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51321: LD_INT 1
51323: PPUSH
51324: LD_INT 5
51326: PPUSH
51327: CALL_OW 12
51331: PPUSH
51332: LD_VAR 0 1
51336: PPUSH
51337: LD_INT 1
51339: PPUSH
51340: CALL_OW 55
// end ;
51344: GO 51154
// end ;
51346: LD_VAR 0 5
51350: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51351: LD_INT 0
51353: PPUSH
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
// if not turrets or not factories then
51361: LD_VAR 0 1
51365: NOT
51366: PUSH
51367: LD_VAR 0 2
51371: NOT
51372: OR
51373: IFFALSE 51377
// exit ;
51375: GO 51684
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51377: LD_ADDR_VAR 0 10
51381: PUSH
51382: LD_INT 5
51384: PUSH
51385: LD_INT 6
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 4
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: LD_INT 5
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 24
51419: PUSH
51420: LD_INT 25
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 23
51429: PUSH
51430: LD_INT 27
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 42
51443: PUSH
51444: LD_INT 43
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 44
51453: PUSH
51454: LD_INT 46
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 45
51463: PUSH
51464: LD_INT 47
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// result := [ ] ;
51481: LD_ADDR_VAR 0 3
51485: PUSH
51486: EMPTY
51487: ST_TO_ADDR
// for i in turrets do
51488: LD_ADDR_VAR 0 4
51492: PUSH
51493: LD_VAR 0 1
51497: PUSH
51498: FOR_IN
51499: IFFALSE 51682
// begin nat := GetNation ( i ) ;
51501: LD_ADDR_VAR 0 7
51505: PUSH
51506: LD_VAR 0 4
51510: PPUSH
51511: CALL_OW 248
51515: ST_TO_ADDR
// weapon := 0 ;
51516: LD_ADDR_VAR 0 8
51520: PUSH
51521: LD_INT 0
51523: ST_TO_ADDR
// if not nat then
51524: LD_VAR 0 7
51528: NOT
51529: IFFALSE 51533
// continue ;
51531: GO 51498
// for j in list [ nat ] do
51533: LD_ADDR_VAR 0 5
51537: PUSH
51538: LD_VAR 0 10
51542: PUSH
51543: LD_VAR 0 7
51547: ARRAY
51548: PUSH
51549: FOR_IN
51550: IFFALSE 51591
// if GetBWeapon ( i ) = j [ 1 ] then
51552: LD_VAR 0 4
51556: PPUSH
51557: CALL_OW 269
51561: PUSH
51562: LD_VAR 0 5
51566: PUSH
51567: LD_INT 1
51569: ARRAY
51570: EQUAL
51571: IFFALSE 51589
// begin weapon := j [ 2 ] ;
51573: LD_ADDR_VAR 0 8
51577: PUSH
51578: LD_VAR 0 5
51582: PUSH
51583: LD_INT 2
51585: ARRAY
51586: ST_TO_ADDR
// break ;
51587: GO 51591
// end ;
51589: GO 51549
51591: POP
51592: POP
// if not weapon then
51593: LD_VAR 0 8
51597: NOT
51598: IFFALSE 51602
// continue ;
51600: GO 51498
// for k in factories do
51602: LD_ADDR_VAR 0 6
51606: PUSH
51607: LD_VAR 0 2
51611: PUSH
51612: FOR_IN
51613: IFFALSE 51678
// begin weapons := AvailableWeaponList ( k ) ;
51615: LD_ADDR_VAR 0 9
51619: PUSH
51620: LD_VAR 0 6
51624: PPUSH
51625: CALL_OW 478
51629: ST_TO_ADDR
// if not weapons then
51630: LD_VAR 0 9
51634: NOT
51635: IFFALSE 51639
// continue ;
51637: GO 51612
// if weapon in weapons then
51639: LD_VAR 0 8
51643: PUSH
51644: LD_VAR 0 9
51648: IN
51649: IFFALSE 51676
// begin result := [ i , weapon ] ;
51651: LD_ADDR_VAR 0 3
51655: PUSH
51656: LD_VAR 0 4
51660: PUSH
51661: LD_VAR 0 8
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: ST_TO_ADDR
// exit ;
51670: POP
51671: POP
51672: POP
51673: POP
51674: GO 51684
// end ; end ;
51676: GO 51612
51678: POP
51679: POP
// end ;
51680: GO 51498
51682: POP
51683: POP
// end ;
51684: LD_VAR 0 3
51688: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51689: LD_INT 0
51691: PPUSH
// if not side or side > 8 then
51692: LD_VAR 0 3
51696: NOT
51697: PUSH
51698: LD_VAR 0 3
51702: PUSH
51703: LD_INT 8
51705: GREATER
51706: OR
51707: IFFALSE 51711
// exit ;
51709: GO 51770
// if not range then
51711: LD_VAR 0 4
51715: NOT
51716: IFFALSE 51727
// range := - 12 ;
51718: LD_ADDR_VAR 0 4
51722: PUSH
51723: LD_INT 12
51725: NEG
51726: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51727: LD_VAR 0 1
51731: PPUSH
51732: LD_VAR 0 2
51736: PPUSH
51737: LD_VAR 0 3
51741: PPUSH
51742: LD_VAR 0 4
51746: PPUSH
51747: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51751: LD_VAR 0 1
51755: PPUSH
51756: LD_VAR 0 2
51760: PPUSH
51761: LD_VAR 0 3
51765: PPUSH
51766: CALL_OW 331
// end ;
51770: LD_VAR 0 5
51774: RET
// export function Video ( mode ) ; begin
51775: LD_INT 0
51777: PPUSH
// ingame_video = mode ;
51778: LD_ADDR_OWVAR 52
51782: PUSH
51783: LD_VAR 0 1
51787: ST_TO_ADDR
// interface_hidden = mode ;
51788: LD_ADDR_OWVAR 54
51792: PUSH
51793: LD_VAR 0 1
51797: ST_TO_ADDR
// end ;
51798: LD_VAR 0 2
51802: RET
// export function Join ( array , element ) ; begin
51803: LD_INT 0
51805: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51806: LD_ADDR_VAR 0 3
51810: PUSH
51811: LD_VAR 0 1
51815: PPUSH
51816: LD_VAR 0 1
51820: PUSH
51821: LD_INT 1
51823: PLUS
51824: PPUSH
51825: LD_VAR 0 2
51829: PPUSH
51830: CALL_OW 1
51834: ST_TO_ADDR
// end ;
51835: LD_VAR 0 3
51839: RET
// export function JoinUnion ( array , element ) ; begin
51840: LD_INT 0
51842: PPUSH
// result := array union element ;
51843: LD_ADDR_VAR 0 3
51847: PUSH
51848: LD_VAR 0 1
51852: PUSH
51853: LD_VAR 0 2
51857: UNION
51858: ST_TO_ADDR
// end ;
51859: LD_VAR 0 3
51863: RET
// export function GetBehemoths ( side ) ; begin
51864: LD_INT 0
51866: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
51867: LD_ADDR_VAR 0 2
51871: PUSH
51872: LD_INT 22
51874: PUSH
51875: LD_VAR 0 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 31
51886: PUSH
51887: LD_INT 25
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PPUSH
51898: CALL_OW 69
51902: ST_TO_ADDR
// end ;
51903: LD_VAR 0 2
51907: RET
// export function Shuffle ( array ) ; var i , index ; begin
51908: LD_INT 0
51910: PPUSH
51911: PPUSH
51912: PPUSH
// result := [ ] ;
51913: LD_ADDR_VAR 0 2
51917: PUSH
51918: EMPTY
51919: ST_TO_ADDR
// if not array then
51920: LD_VAR 0 1
51924: NOT
51925: IFFALSE 51929
// exit ;
51927: GO 52028
// Randomize ;
51929: CALL_OW 10
// for i = array downto 1 do
51933: LD_ADDR_VAR 0 3
51937: PUSH
51938: DOUBLE
51939: LD_VAR 0 1
51943: INC
51944: ST_TO_ADDR
51945: LD_INT 1
51947: PUSH
51948: FOR_DOWNTO
51949: IFFALSE 52026
// begin index := rand ( 1 , array ) ;
51951: LD_ADDR_VAR 0 4
51955: PUSH
51956: LD_INT 1
51958: PPUSH
51959: LD_VAR 0 1
51963: PPUSH
51964: CALL_OW 12
51968: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51969: LD_ADDR_VAR 0 2
51973: PUSH
51974: LD_VAR 0 2
51978: PPUSH
51979: LD_VAR 0 2
51983: PUSH
51984: LD_INT 1
51986: PLUS
51987: PPUSH
51988: LD_VAR 0 1
51992: PUSH
51993: LD_VAR 0 4
51997: ARRAY
51998: PPUSH
51999: CALL_OW 2
52003: ST_TO_ADDR
// array := Delete ( array , index ) ;
52004: LD_ADDR_VAR 0 1
52008: PUSH
52009: LD_VAR 0 1
52013: PPUSH
52014: LD_VAR 0 4
52018: PPUSH
52019: CALL_OW 3
52023: ST_TO_ADDR
// end ;
52024: GO 51948
52026: POP
52027: POP
// end ;
52028: LD_VAR 0 2
52032: RET
// export function GetBaseMaterials ( base ) ; begin
52033: LD_INT 0
52035: PPUSH
// result := [ 0 , 0 , 0 ] ;
52036: LD_ADDR_VAR 0 2
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: ST_TO_ADDR
// if not base then
52055: LD_VAR 0 1
52059: NOT
52060: IFFALSE 52064
// exit ;
52062: GO 52113
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52064: LD_ADDR_VAR 0 2
52068: PUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: LD_INT 1
52076: PPUSH
52077: CALL_OW 275
52081: PUSH
52082: LD_VAR 0 1
52086: PPUSH
52087: LD_INT 2
52089: PPUSH
52090: CALL_OW 275
52094: PUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: LD_INT 3
52102: PPUSH
52103: CALL_OW 275
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// end ;
52113: LD_VAR 0 2
52117: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52118: LD_INT 0
52120: PPUSH
52121: PPUSH
// result := array ;
52122: LD_ADDR_VAR 0 3
52126: PUSH
52127: LD_VAR 0 1
52131: ST_TO_ADDR
// if size > 0 then
52132: LD_VAR 0 2
52136: PUSH
52137: LD_INT 0
52139: GREATER
52140: IFFALSE 52186
// for i := array downto size do
52142: LD_ADDR_VAR 0 4
52146: PUSH
52147: DOUBLE
52148: LD_VAR 0 1
52152: INC
52153: ST_TO_ADDR
52154: LD_VAR 0 2
52158: PUSH
52159: FOR_DOWNTO
52160: IFFALSE 52184
// result := Delete ( result , result ) ;
52162: LD_ADDR_VAR 0 3
52166: PUSH
52167: LD_VAR 0 3
52171: PPUSH
52172: LD_VAR 0 3
52176: PPUSH
52177: CALL_OW 3
52181: ST_TO_ADDR
52182: GO 52159
52184: POP
52185: POP
// end ;
52186: LD_VAR 0 3
52190: RET
// export function ComExit ( unit ) ; var tmp ; begin
52191: LD_INT 0
52193: PPUSH
52194: PPUSH
// if not IsInUnit ( unit ) then
52195: LD_VAR 0 1
52199: PPUSH
52200: CALL_OW 310
52204: NOT
52205: IFFALSE 52209
// exit ;
52207: GO 52269
// tmp := IsInUnit ( unit ) ;
52209: LD_ADDR_VAR 0 3
52213: PUSH
52214: LD_VAR 0 1
52218: PPUSH
52219: CALL_OW 310
52223: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52224: LD_VAR 0 3
52228: PPUSH
52229: CALL_OW 247
52233: PUSH
52234: LD_INT 2
52236: EQUAL
52237: IFFALSE 52250
// ComExitVehicle ( unit ) else
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 121
52248: GO 52259
// ComExitBuilding ( unit ) ;
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 122
// result := tmp ;
52259: LD_ADDR_VAR 0 2
52263: PUSH
52264: LD_VAR 0 3
52268: ST_TO_ADDR
// end ;
52269: LD_VAR 0 2
52273: RET
// export function ComExitAll ( units ) ; var i ; begin
52274: LD_INT 0
52276: PPUSH
52277: PPUSH
// if not units then
52278: LD_VAR 0 1
52282: NOT
52283: IFFALSE 52287
// exit ;
52285: GO 52313
// for i in units do
52287: LD_ADDR_VAR 0 3
52291: PUSH
52292: LD_VAR 0 1
52296: PUSH
52297: FOR_IN
52298: IFFALSE 52311
// ComExit ( i ) ;
52300: LD_VAR 0 3
52304: PPUSH
52305: CALL 52191 0 1
52309: GO 52297
52311: POP
52312: POP
// end ;
52313: LD_VAR 0 2
52317: RET
// export function ResetHc ; begin
52318: LD_INT 0
52320: PPUSH
// InitHc ;
52321: CALL_OW 19
// hc_importance := 0 ;
52325: LD_ADDR_OWVAR 32
52329: PUSH
52330: LD_INT 0
52332: ST_TO_ADDR
// end ;
52333: LD_VAR 0 1
52337: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52338: LD_INT 0
52340: PPUSH
52341: PPUSH
52342: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52343: LD_ADDR_VAR 0 6
52347: PUSH
52348: LD_VAR 0 1
52352: PUSH
52353: LD_VAR 0 3
52357: PLUS
52358: PUSH
52359: LD_INT 2
52361: DIV
52362: ST_TO_ADDR
// if _x < 0 then
52363: LD_VAR 0 6
52367: PUSH
52368: LD_INT 0
52370: LESS
52371: IFFALSE 52388
// _x := _x * - 1 ;
52373: LD_ADDR_VAR 0 6
52377: PUSH
52378: LD_VAR 0 6
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: MUL
52387: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52388: LD_ADDR_VAR 0 7
52392: PUSH
52393: LD_VAR 0 2
52397: PUSH
52398: LD_VAR 0 4
52402: PLUS
52403: PUSH
52404: LD_INT 2
52406: DIV
52407: ST_TO_ADDR
// if _y < 0 then
52408: LD_VAR 0 7
52412: PUSH
52413: LD_INT 0
52415: LESS
52416: IFFALSE 52433
// _y := _y * - 1 ;
52418: LD_ADDR_VAR 0 7
52422: PUSH
52423: LD_VAR 0 7
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: MUL
52432: ST_TO_ADDR
// result := [ _x , _y ] ;
52433: LD_ADDR_VAR 0 5
52437: PUSH
52438: LD_VAR 0 6
52442: PUSH
52443: LD_VAR 0 7
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// end ;
52452: LD_VAR 0 5
52456: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52457: LD_INT 0
52459: PPUSH
52460: PPUSH
52461: PPUSH
52462: PPUSH
// task := GetTaskList ( unit ) ;
52463: LD_ADDR_VAR 0 7
52467: PUSH
52468: LD_VAR 0 1
52472: PPUSH
52473: CALL_OW 437
52477: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52478: LD_VAR 0 7
52482: NOT
52483: PUSH
52484: LD_VAR 0 1
52488: PPUSH
52489: LD_VAR 0 2
52493: PPUSH
52494: CALL_OW 308
52498: NOT
52499: AND
52500: IFFALSE 52504
// exit ;
52502: GO 52622
// if IsInArea ( unit , area ) then
52504: LD_VAR 0 1
52508: PPUSH
52509: LD_VAR 0 2
52513: PPUSH
52514: CALL_OW 308
52518: IFFALSE 52536
// begin ComMoveToArea ( unit , goAway ) ;
52520: LD_VAR 0 1
52524: PPUSH
52525: LD_VAR 0 3
52529: PPUSH
52530: CALL_OW 113
// exit ;
52534: GO 52622
// end ; if task [ 1 ] [ 1 ] <> M then
52536: LD_VAR 0 7
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: PUSH
52545: LD_INT 1
52547: ARRAY
52548: PUSH
52549: LD_STRING M
52551: NONEQUAL
52552: IFFALSE 52556
// exit ;
52554: GO 52622
// x := task [ 1 ] [ 2 ] ;
52556: LD_ADDR_VAR 0 5
52560: PUSH
52561: LD_VAR 0 7
52565: PUSH
52566: LD_INT 1
52568: ARRAY
52569: PUSH
52570: LD_INT 2
52572: ARRAY
52573: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52574: LD_ADDR_VAR 0 6
52578: PUSH
52579: LD_VAR 0 7
52583: PUSH
52584: LD_INT 1
52586: ARRAY
52587: PUSH
52588: LD_INT 3
52590: ARRAY
52591: ST_TO_ADDR
// if InArea ( x , y , area ) then
52592: LD_VAR 0 5
52596: PPUSH
52597: LD_VAR 0 6
52601: PPUSH
52602: LD_VAR 0 2
52606: PPUSH
52607: CALL_OW 309
52611: IFFALSE 52622
// ComStop ( unit ) ;
52613: LD_VAR 0 1
52617: PPUSH
52618: CALL_OW 141
// end ;
52622: LD_VAR 0 4
52626: RET
// export function Abs ( value ) ; begin
52627: LD_INT 0
52629: PPUSH
// result := value ;
52630: LD_ADDR_VAR 0 2
52634: PUSH
52635: LD_VAR 0 1
52639: ST_TO_ADDR
// if value < 0 then
52640: LD_VAR 0 1
52644: PUSH
52645: LD_INT 0
52647: LESS
52648: IFFALSE 52665
// result := value * - 1 ;
52650: LD_ADDR_VAR 0 2
52654: PUSH
52655: LD_VAR 0 1
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: MUL
52664: ST_TO_ADDR
// end ;
52665: LD_VAR 0 2
52669: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52670: LD_INT 0
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
// if not unit or not building then
52680: LD_VAR 0 1
52684: NOT
52685: PUSH
52686: LD_VAR 0 2
52690: NOT
52691: OR
52692: IFFALSE 52696
// exit ;
52694: GO 52922
// x := GetX ( building ) ;
52696: LD_ADDR_VAR 0 4
52700: PUSH
52701: LD_VAR 0 2
52705: PPUSH
52706: CALL_OW 250
52710: ST_TO_ADDR
// y := GetY ( building ) ;
52711: LD_ADDR_VAR 0 6
52715: PUSH
52716: LD_VAR 0 2
52720: PPUSH
52721: CALL_OW 251
52725: ST_TO_ADDR
// d := GetDir ( building ) ;
52726: LD_ADDR_VAR 0 8
52730: PUSH
52731: LD_VAR 0 2
52735: PPUSH
52736: CALL_OW 254
52740: ST_TO_ADDR
// r := 4 ;
52741: LD_ADDR_VAR 0 9
52745: PUSH
52746: LD_INT 4
52748: ST_TO_ADDR
// for i := 1 to 5 do
52749: LD_ADDR_VAR 0 10
52753: PUSH
52754: DOUBLE
52755: LD_INT 1
52757: DEC
52758: ST_TO_ADDR
52759: LD_INT 5
52761: PUSH
52762: FOR_TO
52763: IFFALSE 52920
// begin _x := ShiftX ( x , d , r + i ) ;
52765: LD_ADDR_VAR 0 5
52769: PUSH
52770: LD_VAR 0 4
52774: PPUSH
52775: LD_VAR 0 8
52779: PPUSH
52780: LD_VAR 0 9
52784: PUSH
52785: LD_VAR 0 10
52789: PLUS
52790: PPUSH
52791: CALL_OW 272
52795: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52796: LD_ADDR_VAR 0 7
52800: PUSH
52801: LD_VAR 0 6
52805: PPUSH
52806: LD_VAR 0 8
52810: PPUSH
52811: LD_VAR 0 9
52815: PUSH
52816: LD_VAR 0 10
52820: PLUS
52821: PPUSH
52822: CALL_OW 273
52826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52827: LD_VAR 0 5
52831: PPUSH
52832: LD_VAR 0 7
52836: PPUSH
52837: CALL_OW 488
52841: PUSH
52842: LD_VAR 0 5
52846: PPUSH
52847: LD_VAR 0 7
52851: PPUSH
52852: CALL_OW 428
52856: PPUSH
52857: CALL_OW 247
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: IN
52872: NOT
52873: AND
52874: IFFALSE 52918
// begin ComMoveXY ( unit , _x , _y ) ;
52876: LD_VAR 0 1
52880: PPUSH
52881: LD_VAR 0 5
52885: PPUSH
52886: LD_VAR 0 7
52890: PPUSH
52891: CALL_OW 111
// result := [ _x , _y ] ;
52895: LD_ADDR_VAR 0 3
52899: PUSH
52900: LD_VAR 0 5
52904: PUSH
52905: LD_VAR 0 7
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// exit ;
52914: POP
52915: POP
52916: GO 52922
// end ; end ;
52918: GO 52762
52920: POP
52921: POP
// end ;
52922: LD_VAR 0 3
52926: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52927: LD_INT 0
52929: PPUSH
52930: PPUSH
52931: PPUSH
// result := 0 ;
52932: LD_ADDR_VAR 0 3
52936: PUSH
52937: LD_INT 0
52939: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52940: LD_VAR 0 1
52944: PUSH
52945: LD_INT 0
52947: LESS
52948: PUSH
52949: LD_VAR 0 1
52953: PUSH
52954: LD_INT 8
52956: GREATER
52957: OR
52958: PUSH
52959: LD_VAR 0 2
52963: PUSH
52964: LD_INT 0
52966: LESS
52967: OR
52968: PUSH
52969: LD_VAR 0 2
52973: PUSH
52974: LD_INT 8
52976: GREATER
52977: OR
52978: IFFALSE 52982
// exit ;
52980: GO 53057
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52982: LD_ADDR_VAR 0 4
52986: PUSH
52987: LD_INT 22
52989: PUSH
52990: LD_VAR 0 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PPUSH
52999: CALL_OW 69
53003: PUSH
53004: FOR_IN
53005: IFFALSE 53055
// begin un := UnitShoot ( i ) ;
53007: LD_ADDR_VAR 0 5
53011: PUSH
53012: LD_VAR 0 4
53016: PPUSH
53017: CALL_OW 504
53021: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53022: LD_VAR 0 5
53026: PPUSH
53027: CALL_OW 255
53031: PUSH
53032: LD_VAR 0 1
53036: EQUAL
53037: IFFALSE 53053
// begin result := un ;
53039: LD_ADDR_VAR 0 3
53043: PUSH
53044: LD_VAR 0 5
53048: ST_TO_ADDR
// exit ;
53049: POP
53050: POP
53051: GO 53057
// end ; end ;
53053: GO 53004
53055: POP
53056: POP
// end ;
53057: LD_VAR 0 3
53061: RET
// export function GetCargoBay ( units ) ; begin
53062: LD_INT 0
53064: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53065: LD_ADDR_VAR 0 2
53069: PUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 34
53080: PUSH
53081: LD_INT 12
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 34
53090: PUSH
53091: LD_INT 51
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 34
53100: PUSH
53101: LD_INT 32
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 34
53110: PUSH
53111: LD_EXP 100
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: PPUSH
53127: CALL_OW 72
53131: ST_TO_ADDR
// end ;
53132: LD_VAR 0 2
53136: RET
// export function Negate ( value ) ; begin
53137: LD_INT 0
53139: PPUSH
// result := not value ;
53140: LD_ADDR_VAR 0 2
53144: PUSH
53145: LD_VAR 0 1
53149: NOT
53150: ST_TO_ADDR
// end ;
53151: LD_VAR 0 2
53155: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
53156: LD_INT 0
53158: PPUSH
// if x1 = x2 then
53159: LD_VAR 0 1
53163: PUSH
53164: LD_VAR 0 3
53168: EQUAL
53169: IFFALSE 53203
// begin if y1 > y2 then
53171: LD_VAR 0 2
53175: PUSH
53176: LD_VAR 0 4
53180: GREATER
53181: IFFALSE 53193
// result := 0 else
53183: LD_ADDR_VAR 0 5
53187: PUSH
53188: LD_INT 0
53190: ST_TO_ADDR
53191: GO 53201
// result := 3 ;
53193: LD_ADDR_VAR 0 5
53197: PUSH
53198: LD_INT 3
53200: ST_TO_ADDR
// exit ;
53201: GO 53289
// end ; if y1 = y2 then
53203: LD_VAR 0 2
53207: PUSH
53208: LD_VAR 0 4
53212: EQUAL
53213: IFFALSE 53247
// begin if x1 > x2 then
53215: LD_VAR 0 1
53219: PUSH
53220: LD_VAR 0 3
53224: GREATER
53225: IFFALSE 53237
// result := 1 else
53227: LD_ADDR_VAR 0 5
53231: PUSH
53232: LD_INT 1
53234: ST_TO_ADDR
53235: GO 53245
// result := 4 ;
53237: LD_ADDR_VAR 0 5
53241: PUSH
53242: LD_INT 4
53244: ST_TO_ADDR
// exit ;
53245: GO 53289
// end ; if x1 > x2 and y1 > y2 then
53247: LD_VAR 0 1
53251: PUSH
53252: LD_VAR 0 3
53256: GREATER
53257: PUSH
53258: LD_VAR 0 2
53262: PUSH
53263: LD_VAR 0 4
53267: GREATER
53268: AND
53269: IFFALSE 53281
// result := 2 else
53271: LD_ADDR_VAR 0 5
53275: PUSH
53276: LD_INT 2
53278: ST_TO_ADDR
53279: GO 53289
// result := 5 ;
53281: LD_ADDR_VAR 0 5
53285: PUSH
53286: LD_INT 5
53288: ST_TO_ADDR
// end ;
53289: LD_VAR 0 5
53293: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53294: LD_INT 0
53296: PPUSH
53297: PPUSH
// if not driver or not IsInUnit ( driver ) then
53298: LD_VAR 0 1
53302: NOT
53303: PUSH
53304: LD_VAR 0 1
53308: PPUSH
53309: CALL_OW 310
53313: NOT
53314: OR
53315: IFFALSE 53319
// exit ;
53317: GO 53409
// vehicle := IsInUnit ( driver ) ;
53319: LD_ADDR_VAR 0 3
53323: PUSH
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 310
53333: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53334: LD_VAR 0 1
53338: PPUSH
53339: LD_STRING \
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: PUSH
53369: LD_STRING E
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_VAR 0 3
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PPUSH
53405: CALL_OW 446
// end ;
53409: LD_VAR 0 2
53413: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53414: LD_INT 0
53416: PPUSH
53417: PPUSH
// if not driver or not IsInUnit ( driver ) then
53418: LD_VAR 0 1
53422: NOT
53423: PUSH
53424: LD_VAR 0 1
53428: PPUSH
53429: CALL_OW 310
53433: NOT
53434: OR
53435: IFFALSE 53439
// exit ;
53437: GO 53529
// vehicle := IsInUnit ( driver ) ;
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_VAR 0 1
53448: PPUSH
53449: CALL_OW 310
53453: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53454: LD_VAR 0 1
53458: PPUSH
53459: LD_STRING \
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: PUSH
53489: LD_STRING E
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_VAR 0 3
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PPUSH
53525: CALL_OW 447
// end ;
53529: LD_VAR 0 2
53533: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53534: LD_INT 0
53536: PPUSH
53537: PPUSH
53538: PPUSH
// tmp := [ ] ;
53539: LD_ADDR_VAR 0 5
53543: PUSH
53544: EMPTY
53545: ST_TO_ADDR
// for i in units do
53546: LD_ADDR_VAR 0 4
53550: PUSH
53551: LD_VAR 0 1
53555: PUSH
53556: FOR_IN
53557: IFFALSE 53595
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53559: LD_ADDR_VAR 0 5
53563: PUSH
53564: LD_VAR 0 5
53568: PPUSH
53569: LD_VAR 0 5
53573: PUSH
53574: LD_INT 1
53576: PLUS
53577: PPUSH
53578: LD_VAR 0 4
53582: PPUSH
53583: CALL_OW 256
53587: PPUSH
53588: CALL_OW 2
53592: ST_TO_ADDR
53593: GO 53556
53595: POP
53596: POP
// if not tmp then
53597: LD_VAR 0 5
53601: NOT
53602: IFFALSE 53606
// exit ;
53604: GO 53654
// if asc then
53606: LD_VAR 0 2
53610: IFFALSE 53634
// result := SortListByListAsc ( units , tmp ) else
53612: LD_ADDR_VAR 0 3
53616: PUSH
53617: LD_VAR 0 1
53621: PPUSH
53622: LD_VAR 0 5
53626: PPUSH
53627: CALL_OW 76
53631: ST_TO_ADDR
53632: GO 53654
// result := SortListByListDesc ( units , tmp ) ;
53634: LD_ADDR_VAR 0 3
53638: PUSH
53639: LD_VAR 0 1
53643: PPUSH
53644: LD_VAR 0 5
53648: PPUSH
53649: CALL_OW 77
53653: ST_TO_ADDR
// end ;
53654: LD_VAR 0 3
53658: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53659: LD_INT 0
53661: PPUSH
53662: PPUSH
// task := GetTaskList ( mech ) ;
53663: LD_ADDR_VAR 0 4
53667: PUSH
53668: LD_VAR 0 1
53672: PPUSH
53673: CALL_OW 437
53677: ST_TO_ADDR
// if not task then
53678: LD_VAR 0 4
53682: NOT
53683: IFFALSE 53687
// exit ;
53685: GO 53729
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53687: LD_ADDR_VAR 0 3
53691: PUSH
53692: LD_VAR 0 4
53696: PUSH
53697: LD_INT 1
53699: ARRAY
53700: PUSH
53701: LD_INT 1
53703: ARRAY
53704: PUSH
53705: LD_STRING r
53707: EQUAL
53708: PUSH
53709: LD_VAR 0 4
53713: PUSH
53714: LD_INT 1
53716: ARRAY
53717: PUSH
53718: LD_INT 4
53720: ARRAY
53721: PUSH
53722: LD_VAR 0 2
53726: EQUAL
53727: AND
53728: ST_TO_ADDR
// end ;
53729: LD_VAR 0 3
53733: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53734: LD_INT 0
53736: PPUSH
// SetDir ( unit , d ) ;
53737: LD_VAR 0 1
53741: PPUSH
53742: LD_VAR 0 4
53746: PPUSH
53747: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53751: LD_VAR 0 1
53755: PPUSH
53756: LD_VAR 0 2
53760: PPUSH
53761: LD_VAR 0 3
53765: PPUSH
53766: LD_VAR 0 5
53770: PPUSH
53771: CALL_OW 48
// end ;
53775: LD_VAR 0 6
53779: RET
// export function ToNaturalNumber ( number ) ; begin
53780: LD_INT 0
53782: PPUSH
// result := number div 1 ;
53783: LD_ADDR_VAR 0 2
53787: PUSH
53788: LD_VAR 0 1
53792: PUSH
53793: LD_INT 1
53795: DIV
53796: ST_TO_ADDR
// if number < 0 then
53797: LD_VAR 0 1
53801: PUSH
53802: LD_INT 0
53804: LESS
53805: IFFALSE 53815
// result := 0 ;
53807: LD_ADDR_VAR 0 2
53811: PUSH
53812: LD_INT 0
53814: ST_TO_ADDR
// end ;
53815: LD_VAR 0 2
53819: RET
// export function SortByClass ( units , class ) ; var un ; begin
53820: LD_INT 0
53822: PPUSH
53823: PPUSH
// if not units or not class then
53824: LD_VAR 0 1
53828: NOT
53829: PUSH
53830: LD_VAR 0 2
53834: NOT
53835: OR
53836: IFFALSE 53840
// exit ;
53838: GO 53935
// result := [ ] ;
53840: LD_ADDR_VAR 0 3
53844: PUSH
53845: EMPTY
53846: ST_TO_ADDR
// for un in units do
53847: LD_ADDR_VAR 0 4
53851: PUSH
53852: LD_VAR 0 1
53856: PUSH
53857: FOR_IN
53858: IFFALSE 53933
// if GetClass ( un ) = class then
53860: LD_VAR 0 4
53864: PPUSH
53865: CALL_OW 257
53869: PUSH
53870: LD_VAR 0 2
53874: EQUAL
53875: IFFALSE 53902
// result := Insert ( result , 1 , un ) else
53877: LD_ADDR_VAR 0 3
53881: PUSH
53882: LD_VAR 0 3
53886: PPUSH
53887: LD_INT 1
53889: PPUSH
53890: LD_VAR 0 4
53894: PPUSH
53895: CALL_OW 2
53899: ST_TO_ADDR
53900: GO 53931
// result := Replace ( result , result + 1 , un ) ;
53902: LD_ADDR_VAR 0 3
53906: PUSH
53907: LD_VAR 0 3
53911: PPUSH
53912: LD_VAR 0 3
53916: PUSH
53917: LD_INT 1
53919: PLUS
53920: PPUSH
53921: LD_VAR 0 4
53925: PPUSH
53926: CALL_OW 1
53930: ST_TO_ADDR
53931: GO 53857
53933: POP
53934: POP
// end ;
53935: LD_VAR 0 3
53939: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53940: LD_INT 0
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
// result := [ ] ;
53949: LD_ADDR_VAR 0 4
53953: PUSH
53954: EMPTY
53955: ST_TO_ADDR
// if x - r < 0 then
53956: LD_VAR 0 1
53960: PUSH
53961: LD_VAR 0 3
53965: MINUS
53966: PUSH
53967: LD_INT 0
53969: LESS
53970: IFFALSE 53982
// min_x := 0 else
53972: LD_ADDR_VAR 0 8
53976: PUSH
53977: LD_INT 0
53979: ST_TO_ADDR
53980: GO 53998
// min_x := x - r ;
53982: LD_ADDR_VAR 0 8
53986: PUSH
53987: LD_VAR 0 1
53991: PUSH
53992: LD_VAR 0 3
53996: MINUS
53997: ST_TO_ADDR
// if y - r < 0 then
53998: LD_VAR 0 2
54002: PUSH
54003: LD_VAR 0 3
54007: MINUS
54008: PUSH
54009: LD_INT 0
54011: LESS
54012: IFFALSE 54024
// min_y := 0 else
54014: LD_ADDR_VAR 0 7
54018: PUSH
54019: LD_INT 0
54021: ST_TO_ADDR
54022: GO 54040
// min_y := y - r ;
54024: LD_ADDR_VAR 0 7
54028: PUSH
54029: LD_VAR 0 2
54033: PUSH
54034: LD_VAR 0 3
54038: MINUS
54039: ST_TO_ADDR
// max_x := x + r ;
54040: LD_ADDR_VAR 0 9
54044: PUSH
54045: LD_VAR 0 1
54049: PUSH
54050: LD_VAR 0 3
54054: PLUS
54055: ST_TO_ADDR
// max_y := y + r ;
54056: LD_ADDR_VAR 0 10
54060: PUSH
54061: LD_VAR 0 2
54065: PUSH
54066: LD_VAR 0 3
54070: PLUS
54071: ST_TO_ADDR
// for _x = min_x to max_x do
54072: LD_ADDR_VAR 0 5
54076: PUSH
54077: DOUBLE
54078: LD_VAR 0 8
54082: DEC
54083: ST_TO_ADDR
54084: LD_VAR 0 9
54088: PUSH
54089: FOR_TO
54090: IFFALSE 54191
// for _y = min_y to max_y do
54092: LD_ADDR_VAR 0 6
54096: PUSH
54097: DOUBLE
54098: LD_VAR 0 7
54102: DEC
54103: ST_TO_ADDR
54104: LD_VAR 0 10
54108: PUSH
54109: FOR_TO
54110: IFFALSE 54187
// begin if not ValidHex ( _x , _y ) then
54112: LD_VAR 0 5
54116: PPUSH
54117: LD_VAR 0 6
54121: PPUSH
54122: CALL_OW 488
54126: NOT
54127: IFFALSE 54131
// continue ;
54129: GO 54109
// if GetResourceTypeXY ( _x , _y ) then
54131: LD_VAR 0 5
54135: PPUSH
54136: LD_VAR 0 6
54140: PPUSH
54141: CALL_OW 283
54145: IFFALSE 54185
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54147: LD_ADDR_VAR 0 4
54151: PUSH
54152: LD_VAR 0 4
54156: PPUSH
54157: LD_VAR 0 4
54161: PUSH
54162: LD_INT 1
54164: PLUS
54165: PPUSH
54166: LD_VAR 0 5
54170: PUSH
54171: LD_VAR 0 6
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PPUSH
54180: CALL_OW 1
54184: ST_TO_ADDR
// end ;
54185: GO 54109
54187: POP
54188: POP
54189: GO 54089
54191: POP
54192: POP
// end ;
54193: LD_VAR 0 4
54197: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
54198: LD_INT 0
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
// if not units then
54206: LD_VAR 0 1
54210: NOT
54211: IFFALSE 54215
// exit ;
54213: GO 54616
// result := UnitFilter ( units , [ f_ok ] ) ;
54215: LD_ADDR_VAR 0 3
54219: PUSH
54220: LD_VAR 0 1
54224: PPUSH
54225: LD_INT 50
54227: PUSH
54228: EMPTY
54229: LIST
54230: PPUSH
54231: CALL_OW 72
54235: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54236: LD_ADDR_VAR 0 7
54240: PUSH
54241: LD_VAR 0 1
54245: PUSH
54246: LD_INT 1
54248: ARRAY
54249: PPUSH
54250: CALL_OW 255
54254: ST_TO_ADDR
// if not result then
54255: LD_VAR 0 3
54259: NOT
54260: IFFALSE 54264
// exit ;
54262: GO 54616
// for i in result do
54264: LD_ADDR_VAR 0 4
54268: PUSH
54269: LD_VAR 0 3
54273: PUSH
54274: FOR_IN
54275: IFFALSE 54614
// begin tag := GetTag ( i ) + 1 ;
54277: LD_ADDR_VAR 0 8
54281: PUSH
54282: LD_VAR 0 4
54286: PPUSH
54287: CALL_OW 110
54291: PUSH
54292: LD_INT 1
54294: PLUS
54295: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54296: LD_ADDR_VAR 0 6
54300: PUSH
54301: LD_VAR 0 4
54305: PPUSH
54306: CALL_OW 250
54310: PPUSH
54311: LD_VAR 0 4
54315: PPUSH
54316: CALL_OW 251
54320: PPUSH
54321: LD_INT 6
54323: PPUSH
54324: CALL 53940 0 3
54328: ST_TO_ADDR
// if cr then
54329: LD_VAR 0 6
54333: IFFALSE 54372
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54335: LD_VAR 0 4
54339: PPUSH
54340: LD_VAR 0 6
54344: PUSH
54345: LD_INT 1
54347: ARRAY
54348: PUSH
54349: LD_INT 1
54351: ARRAY
54352: PPUSH
54353: LD_VAR 0 6
54357: PUSH
54358: LD_INT 1
54360: ARRAY
54361: PUSH
54362: LD_INT 2
54364: ARRAY
54365: PPUSH
54366: CALL_OW 116
54370: GO 54612
// if path > tag then
54372: LD_VAR 0 2
54376: PUSH
54377: LD_VAR 0 8
54381: GREATER
54382: IFFALSE 54560
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
54384: LD_ADDR_VAR 0 5
54388: PUSH
54389: LD_INT 81
54391: PUSH
54392: LD_VAR 0 7
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 91
54403: PUSH
54404: LD_VAR 0 4
54408: PUSH
54409: LD_INT 12
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PPUSH
54421: CALL_OW 69
54425: ST_TO_ADDR
// if enemy then
54426: LD_VAR 0 5
54430: IFFALSE 54458
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54432: LD_VAR 0 4
54436: PPUSH
54437: LD_VAR 0 5
54441: PPUSH
54442: LD_VAR 0 4
54446: PPUSH
54447: CALL_OW 74
54451: PPUSH
54452: CALL_OW 115
54456: GO 54558
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54458: LD_VAR 0 4
54462: PPUSH
54463: LD_VAR 0 2
54467: PUSH
54468: LD_VAR 0 8
54472: ARRAY
54473: PUSH
54474: LD_INT 1
54476: ARRAY
54477: PPUSH
54478: LD_VAR 0 2
54482: PUSH
54483: LD_VAR 0 8
54487: ARRAY
54488: PUSH
54489: LD_INT 2
54491: ARRAY
54492: PPUSH
54493: CALL_OW 297
54497: PUSH
54498: LD_INT 6
54500: GREATER
54501: IFFALSE 54544
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54503: LD_VAR 0 4
54507: PPUSH
54508: LD_VAR 0 2
54512: PUSH
54513: LD_VAR 0 8
54517: ARRAY
54518: PUSH
54519: LD_INT 1
54521: ARRAY
54522: PPUSH
54523: LD_VAR 0 2
54527: PUSH
54528: LD_VAR 0 8
54532: ARRAY
54533: PUSH
54534: LD_INT 2
54536: ARRAY
54537: PPUSH
54538: CALL_OW 114
54542: GO 54558
// SetTag ( i , tag ) ;
54544: LD_VAR 0 4
54548: PPUSH
54549: LD_VAR 0 8
54553: PPUSH
54554: CALL_OW 109
// end else
54558: GO 54612
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54560: LD_ADDR_VAR 0 5
54564: PUSH
54565: LD_INT 81
54567: PUSH
54568: LD_VAR 0 7
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PPUSH
54577: CALL_OW 69
54581: ST_TO_ADDR
// if enemy then
54582: LD_VAR 0 5
54586: IFFALSE 54612
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54588: LD_VAR 0 4
54592: PPUSH
54593: LD_VAR 0 5
54597: PPUSH
54598: LD_VAR 0 4
54602: PPUSH
54603: CALL_OW 74
54607: PPUSH
54608: CALL_OW 115
// end ; end ;
54612: GO 54274
54614: POP
54615: POP
// end ; end_of_file
54616: LD_VAR 0 3
54620: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54621: LD_VAR 0 1
54625: PUSH
54626: LD_INT 200
54628: DOUBLE
54629: GREATEREQUAL
54630: IFFALSE 54638
54632: LD_INT 299
54634: DOUBLE
54635: LESSEQUAL
54636: IFTRUE 54640
54638: GO 54672
54640: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54641: LD_VAR 0 1
54645: PPUSH
54646: LD_VAR 0 2
54650: PPUSH
54651: LD_VAR 0 3
54655: PPUSH
54656: LD_VAR 0 4
54660: PPUSH
54661: LD_VAR 0 5
54665: PPUSH
54666: CALL 54916 0 5
54670: GO 54749
54672: LD_INT 300
54674: DOUBLE
54675: GREATEREQUAL
54676: IFFALSE 54684
54678: LD_INT 399
54680: DOUBLE
54681: LESSEQUAL
54682: IFTRUE 54686
54684: GO 54748
54686: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54687: LD_VAR 0 1
54691: PPUSH
54692: LD_VAR 0 2
54696: PPUSH
54697: LD_VAR 0 3
54701: PPUSH
54702: LD_VAR 0 4
54706: PPUSH
54707: LD_VAR 0 5
54711: PPUSH
54712: LD_VAR 0 6
54716: PPUSH
54717: LD_VAR 0 7
54721: PPUSH
54722: LD_VAR 0 8
54726: PPUSH
54727: LD_VAR 0 9
54731: PPUSH
54732: LD_VAR 0 10
54736: PPUSH
54737: LD_VAR 0 11
54741: PPUSH
54742: CALL 69991 0 11
54746: GO 54749
54748: POP
// end ;
54749: PPOPN 11
54751: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54752: LD_VAR 0 1
54756: PPUSH
54757: LD_VAR 0 2
54761: PPUSH
54762: LD_VAR 0 3
54766: PPUSH
54767: LD_VAR 0 4
54771: PPUSH
54772: LD_VAR 0 5
54776: PPUSH
54777: CALL 54898 0 5
// end ; end_of_file
54781: PPOPN 5
54783: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
54784: LD_INT 0
54786: PPUSH
54787: PPUSH
54788: PPUSH
54789: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 264
54799: PUSH
54800: LD_EXP 103
54804: EQUAL
54805: IFFALSE 54877
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54807: LD_INT 68
54809: PPUSH
54810: LD_VAR 0 1
54814: PPUSH
54815: CALL_OW 255
54819: PPUSH
54820: CALL_OW 321
54824: PUSH
54825: LD_INT 2
54827: EQUAL
54828: IFFALSE 54840
// eff := 70 else
54830: LD_ADDR_VAR 0 4
54834: PUSH
54835: LD_INT 70
54837: ST_TO_ADDR
54838: GO 54848
// eff := 30 ;
54840: LD_ADDR_VAR 0 4
54844: PUSH
54845: LD_INT 30
54847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54848: LD_VAR 0 1
54852: PPUSH
54853: CALL_OW 250
54857: PPUSH
54858: LD_VAR 0 1
54862: PPUSH
54863: CALL_OW 251
54867: PPUSH
54868: LD_VAR 0 4
54872: PPUSH
54873: CALL_OW 495
// end ; end ;
54877: LD_VAR 0 2
54881: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54882: LD_INT 0
54884: PPUSH
// end ;
54885: LD_VAR 0 4
54889: RET
// export function SOS_Command ( cmd ) ; begin
54890: LD_INT 0
54892: PPUSH
// end ;
54893: LD_VAR 0 2
54897: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54898: LD_INT 0
54900: PPUSH
// if cmd = 121 then
54901: LD_VAR 0 1
54905: PUSH
54906: LD_INT 121
54908: EQUAL
54909: IFFALSE 54911
// end ;
54911: LD_VAR 0 6
54915: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54916: LD_INT 0
54918: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54919: LD_VAR 0 1
54923: PUSH
54924: LD_INT 250
54926: EQUAL
54927: PUSH
54928: LD_VAR 0 2
54932: PPUSH
54933: CALL_OW 264
54937: PUSH
54938: LD_EXP 106
54942: EQUAL
54943: AND
54944: IFFALSE 54965
// MinerPlaceMine ( unit , x , y ) ;
54946: LD_VAR 0 2
54950: PPUSH
54951: LD_VAR 0 4
54955: PPUSH
54956: LD_VAR 0 5
54960: PPUSH
54961: CALL 57314 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54965: LD_VAR 0 1
54969: PUSH
54970: LD_INT 251
54972: EQUAL
54973: PUSH
54974: LD_VAR 0 2
54978: PPUSH
54979: CALL_OW 264
54983: PUSH
54984: LD_EXP 106
54988: EQUAL
54989: AND
54990: IFFALSE 55011
// MinerDetonateMine ( unit , x , y ) ;
54992: LD_VAR 0 2
54996: PPUSH
54997: LD_VAR 0 4
55001: PPUSH
55002: LD_VAR 0 5
55006: PPUSH
55007: CALL 57591 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55011: LD_VAR 0 1
55015: PUSH
55016: LD_INT 252
55018: EQUAL
55019: PUSH
55020: LD_VAR 0 2
55024: PPUSH
55025: CALL_OW 264
55029: PUSH
55030: LD_EXP 106
55034: EQUAL
55035: AND
55036: IFFALSE 55057
// MinerCreateMinefield ( unit , x , y ) ;
55038: LD_VAR 0 2
55042: PPUSH
55043: LD_VAR 0 4
55047: PPUSH
55048: LD_VAR 0 5
55052: PPUSH
55053: CALL 58008 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55057: LD_VAR 0 1
55061: PUSH
55062: LD_INT 253
55064: EQUAL
55065: PUSH
55066: LD_VAR 0 2
55070: PPUSH
55071: CALL_OW 257
55075: PUSH
55076: LD_INT 5
55078: EQUAL
55079: AND
55080: IFFALSE 55101
// ComBinocular ( unit , x , y ) ;
55082: LD_VAR 0 2
55086: PPUSH
55087: LD_VAR 0 4
55091: PPUSH
55092: LD_VAR 0 5
55096: PPUSH
55097: CALL 58379 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55101: LD_VAR 0 1
55105: PUSH
55106: LD_INT 254
55108: EQUAL
55109: PUSH
55110: LD_VAR 0 2
55114: PPUSH
55115: CALL_OW 264
55119: PUSH
55120: LD_EXP 101
55124: EQUAL
55125: AND
55126: PUSH
55127: LD_VAR 0 3
55131: PPUSH
55132: CALL_OW 263
55136: PUSH
55137: LD_INT 3
55139: EQUAL
55140: AND
55141: IFFALSE 55157
// HackDestroyVehicle ( unit , selectedUnit ) ;
55143: LD_VAR 0 2
55147: PPUSH
55148: LD_VAR 0 3
55152: PPUSH
55153: CALL 56674 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55157: LD_VAR 0 1
55161: PUSH
55162: LD_INT 255
55164: EQUAL
55165: PUSH
55166: LD_VAR 0 2
55170: PPUSH
55171: CALL_OW 264
55175: PUSH
55176: LD_INT 14
55178: PUSH
55179: LD_INT 53
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: IN
55186: AND
55187: PUSH
55188: LD_VAR 0 4
55192: PPUSH
55193: LD_VAR 0 5
55197: PPUSH
55198: CALL_OW 488
55202: AND
55203: IFFALSE 55227
// CutTreeXYR ( unit , x , y , 12 ) ;
55205: LD_VAR 0 2
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: LD_VAR 0 5
55219: PPUSH
55220: LD_INT 12
55222: PPUSH
55223: CALL 55240 0 4
// end ;
55227: LD_VAR 0 6
55231: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
55232: LD_INT 0
55234: PPUSH
// end ;
55235: LD_VAR 0 4
55239: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55240: LD_INT 0
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
55250: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
55251: LD_VAR 0 1
55255: NOT
55256: PUSH
55257: LD_VAR 0 2
55261: PPUSH
55262: LD_VAR 0 3
55266: PPUSH
55267: CALL_OW 488
55271: NOT
55272: OR
55273: PUSH
55274: LD_VAR 0 4
55278: NOT
55279: OR
55280: IFFALSE 55284
// exit ;
55282: GO 55624
// list := [ ] ;
55284: LD_ADDR_VAR 0 13
55288: PUSH
55289: EMPTY
55290: ST_TO_ADDR
// if x - r < 0 then
55291: LD_VAR 0 2
55295: PUSH
55296: LD_VAR 0 4
55300: MINUS
55301: PUSH
55302: LD_INT 0
55304: LESS
55305: IFFALSE 55317
// min_x := 0 else
55307: LD_ADDR_VAR 0 7
55311: PUSH
55312: LD_INT 0
55314: ST_TO_ADDR
55315: GO 55333
// min_x := x - r ;
55317: LD_ADDR_VAR 0 7
55321: PUSH
55322: LD_VAR 0 2
55326: PUSH
55327: LD_VAR 0 4
55331: MINUS
55332: ST_TO_ADDR
// if y - r < 0 then
55333: LD_VAR 0 3
55337: PUSH
55338: LD_VAR 0 4
55342: MINUS
55343: PUSH
55344: LD_INT 0
55346: LESS
55347: IFFALSE 55359
// min_y := 0 else
55349: LD_ADDR_VAR 0 8
55353: PUSH
55354: LD_INT 0
55356: ST_TO_ADDR
55357: GO 55375
// min_y := y - r ;
55359: LD_ADDR_VAR 0 8
55363: PUSH
55364: LD_VAR 0 3
55368: PUSH
55369: LD_VAR 0 4
55373: MINUS
55374: ST_TO_ADDR
// max_x := x + r ;
55375: LD_ADDR_VAR 0 9
55379: PUSH
55380: LD_VAR 0 2
55384: PUSH
55385: LD_VAR 0 4
55389: PLUS
55390: ST_TO_ADDR
// max_y := y + r ;
55391: LD_ADDR_VAR 0 10
55395: PUSH
55396: LD_VAR 0 3
55400: PUSH
55401: LD_VAR 0 4
55405: PLUS
55406: ST_TO_ADDR
// for _x = min_x to max_x do
55407: LD_ADDR_VAR 0 11
55411: PUSH
55412: DOUBLE
55413: LD_VAR 0 7
55417: DEC
55418: ST_TO_ADDR
55419: LD_VAR 0 9
55423: PUSH
55424: FOR_TO
55425: IFFALSE 55542
// for _y = min_y to max_y do
55427: LD_ADDR_VAR 0 12
55431: PUSH
55432: DOUBLE
55433: LD_VAR 0 8
55437: DEC
55438: ST_TO_ADDR
55439: LD_VAR 0 10
55443: PUSH
55444: FOR_TO
55445: IFFALSE 55538
// begin if not ValidHex ( _x , _y ) then
55447: LD_VAR 0 11
55451: PPUSH
55452: LD_VAR 0 12
55456: PPUSH
55457: CALL_OW 488
55461: NOT
55462: IFFALSE 55466
// continue ;
55464: GO 55444
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55466: LD_VAR 0 11
55470: PPUSH
55471: LD_VAR 0 12
55475: PPUSH
55476: CALL_OW 351
55480: PUSH
55481: LD_VAR 0 11
55485: PPUSH
55486: LD_VAR 0 12
55490: PPUSH
55491: CALL_OW 554
55495: AND
55496: IFFALSE 55536
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55498: LD_ADDR_VAR 0 13
55502: PUSH
55503: LD_VAR 0 13
55507: PPUSH
55508: LD_VAR 0 13
55512: PUSH
55513: LD_INT 1
55515: PLUS
55516: PPUSH
55517: LD_VAR 0 11
55521: PUSH
55522: LD_VAR 0 12
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PPUSH
55531: CALL_OW 2
55535: ST_TO_ADDR
// end ;
55536: GO 55444
55538: POP
55539: POP
55540: GO 55424
55542: POP
55543: POP
// if not list then
55544: LD_VAR 0 13
55548: NOT
55549: IFFALSE 55553
// exit ;
55551: GO 55624
// for i in list do
55553: LD_ADDR_VAR 0 6
55557: PUSH
55558: LD_VAR 0 13
55562: PUSH
55563: FOR_IN
55564: IFFALSE 55622
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55566: LD_VAR 0 1
55570: PPUSH
55571: LD_STRING M
55573: PUSH
55574: LD_VAR 0 6
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: PUSH
55583: LD_VAR 0 6
55587: PUSH
55588: LD_INT 2
55590: ARRAY
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: PPUSH
55616: CALL_OW 447
55620: GO 55563
55622: POP
55623: POP
// end ;
55624: LD_VAR 0 5
55628: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55629: LD_EXP 34
55633: NOT
55634: IFFALSE 55684
55636: GO 55638
55638: DISABLE
// begin initHack := true ;
55639: LD_ADDR_EXP 34
55643: PUSH
55644: LD_INT 1
55646: ST_TO_ADDR
// hackTanks := [ ] ;
55647: LD_ADDR_EXP 35
55651: PUSH
55652: EMPTY
55653: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55654: LD_ADDR_EXP 36
55658: PUSH
55659: EMPTY
55660: ST_TO_ADDR
// hackLimit := 3 ;
55661: LD_ADDR_EXP 37
55665: PUSH
55666: LD_INT 3
55668: ST_TO_ADDR
// hackDist := 12 ;
55669: LD_ADDR_EXP 38
55673: PUSH
55674: LD_INT 12
55676: ST_TO_ADDR
// hackCounter := [ ] ;
55677: LD_ADDR_EXP 39
55681: PUSH
55682: EMPTY
55683: ST_TO_ADDR
// end ;
55684: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55685: LD_EXP 34
55689: PUSH
55690: LD_INT 34
55692: PUSH
55693: LD_EXP 101
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PPUSH
55702: CALL_OW 69
55706: AND
55707: IFFALSE 55962
55709: GO 55711
55711: DISABLE
55712: LD_INT 0
55714: PPUSH
55715: PPUSH
// begin enable ;
55716: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55717: LD_ADDR_VAR 0 1
55721: PUSH
55722: LD_INT 34
55724: PUSH
55725: LD_EXP 101
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PPUSH
55734: CALL_OW 69
55738: PUSH
55739: FOR_IN
55740: IFFALSE 55960
// begin if not i in hackTanks then
55742: LD_VAR 0 1
55746: PUSH
55747: LD_EXP 35
55751: IN
55752: NOT
55753: IFFALSE 55836
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55755: LD_ADDR_EXP 35
55759: PUSH
55760: LD_EXP 35
55764: PPUSH
55765: LD_EXP 35
55769: PUSH
55770: LD_INT 1
55772: PLUS
55773: PPUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: CALL_OW 1
55783: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55784: LD_ADDR_EXP 36
55788: PUSH
55789: LD_EXP 36
55793: PPUSH
55794: LD_EXP 36
55798: PUSH
55799: LD_INT 1
55801: PLUS
55802: PPUSH
55803: EMPTY
55804: PPUSH
55805: CALL_OW 1
55809: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55810: LD_ADDR_EXP 39
55814: PUSH
55815: LD_EXP 39
55819: PPUSH
55820: LD_EXP 39
55824: PUSH
55825: LD_INT 1
55827: PLUS
55828: PPUSH
55829: EMPTY
55830: PPUSH
55831: CALL_OW 1
55835: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55836: LD_VAR 0 1
55840: PPUSH
55841: CALL_OW 302
55845: NOT
55846: IFFALSE 55859
// begin HackUnlinkAll ( i ) ;
55848: LD_VAR 0 1
55852: PPUSH
55853: CALL 55965 0 1
// continue ;
55857: GO 55739
// end ; HackCheckCapturedStatus ( i ) ;
55859: LD_VAR 0 1
55863: PPUSH
55864: CALL 56408 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: LD_INT 81
55875: PUSH
55876: LD_VAR 0 1
55880: PPUSH
55881: CALL_OW 255
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 33
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 91
55902: PUSH
55903: LD_VAR 0 1
55907: PUSH
55908: LD_EXP 38
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 50
55920: PUSH
55921: EMPTY
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: PPUSH
55930: CALL_OW 69
55934: ST_TO_ADDR
// if not tmp then
55935: LD_VAR 0 2
55939: NOT
55940: IFFALSE 55944
// continue ;
55942: GO 55739
// HackLink ( i , tmp ) ;
55944: LD_VAR 0 1
55948: PPUSH
55949: LD_VAR 0 2
55953: PPUSH
55954: CALL 56101 0 2
// end ;
55958: GO 55739
55960: POP
55961: POP
// end ;
55962: PPOPN 2
55964: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55965: LD_INT 0
55967: PPUSH
55968: PPUSH
55969: PPUSH
// if not hack in hackTanks then
55970: LD_VAR 0 1
55974: PUSH
55975: LD_EXP 35
55979: IN
55980: NOT
55981: IFFALSE 55985
// exit ;
55983: GO 56096
// index := GetElementIndex ( hackTanks , hack ) ;
55985: LD_ADDR_VAR 0 4
55989: PUSH
55990: LD_EXP 35
55994: PPUSH
55995: LD_VAR 0 1
55999: PPUSH
56000: CALL 19837 0 2
56004: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56005: LD_EXP 36
56009: PUSH
56010: LD_VAR 0 4
56014: ARRAY
56015: IFFALSE 56096
// begin for i in hackTanksCaptured [ index ] do
56017: LD_ADDR_VAR 0 3
56021: PUSH
56022: LD_EXP 36
56026: PUSH
56027: LD_VAR 0 4
56031: ARRAY
56032: PUSH
56033: FOR_IN
56034: IFFALSE 56060
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56036: LD_VAR 0 3
56040: PUSH
56041: LD_INT 1
56043: ARRAY
56044: PPUSH
56045: LD_VAR 0 3
56049: PUSH
56050: LD_INT 2
56052: ARRAY
56053: PPUSH
56054: CALL_OW 235
56058: GO 56033
56060: POP
56061: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56062: LD_ADDR_EXP 36
56066: PUSH
56067: LD_EXP 36
56071: PPUSH
56072: LD_VAR 0 4
56076: PPUSH
56077: EMPTY
56078: PPUSH
56079: CALL_OW 1
56083: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56084: LD_VAR 0 1
56088: PPUSH
56089: LD_INT 0
56091: PPUSH
56092: CALL_OW 505
// end ; end ;
56096: LD_VAR 0 2
56100: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56101: LD_INT 0
56103: PPUSH
56104: PPUSH
56105: PPUSH
// if not hack in hackTanks or not vehicles then
56106: LD_VAR 0 1
56110: PUSH
56111: LD_EXP 35
56115: IN
56116: NOT
56117: PUSH
56118: LD_VAR 0 2
56122: NOT
56123: OR
56124: IFFALSE 56128
// exit ;
56126: GO 56403
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56128: LD_ADDR_VAR 0 2
56132: PUSH
56133: LD_VAR 0 1
56137: PPUSH
56138: LD_VAR 0 2
56142: PPUSH
56143: LD_INT 1
56145: PPUSH
56146: LD_INT 1
56148: PPUSH
56149: CALL 20487 0 4
56153: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56154: LD_ADDR_VAR 0 5
56158: PUSH
56159: LD_EXP 35
56163: PPUSH
56164: LD_VAR 0 1
56168: PPUSH
56169: CALL 19837 0 2
56173: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56174: LD_EXP 36
56178: PUSH
56179: LD_VAR 0 5
56183: ARRAY
56184: PUSH
56185: LD_EXP 37
56189: LESS
56190: IFFALSE 56379
// begin for i := 1 to vehicles do
56192: LD_ADDR_VAR 0 4
56196: PUSH
56197: DOUBLE
56198: LD_INT 1
56200: DEC
56201: ST_TO_ADDR
56202: LD_VAR 0 2
56206: PUSH
56207: FOR_TO
56208: IFFALSE 56377
// begin if hackTanksCaptured [ index ] = hackLimit then
56210: LD_EXP 36
56214: PUSH
56215: LD_VAR 0 5
56219: ARRAY
56220: PUSH
56221: LD_EXP 37
56225: EQUAL
56226: IFFALSE 56230
// break ;
56228: GO 56377
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56230: LD_ADDR_EXP 39
56234: PUSH
56235: LD_EXP 39
56239: PPUSH
56240: LD_VAR 0 5
56244: PPUSH
56245: LD_EXP 39
56249: PUSH
56250: LD_VAR 0 5
56254: ARRAY
56255: PUSH
56256: LD_INT 1
56258: PLUS
56259: PPUSH
56260: CALL_OW 1
56264: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56265: LD_ADDR_EXP 36
56269: PUSH
56270: LD_EXP 36
56274: PPUSH
56275: LD_VAR 0 5
56279: PUSH
56280: LD_EXP 36
56284: PUSH
56285: LD_VAR 0 5
56289: ARRAY
56290: PUSH
56291: LD_INT 1
56293: PLUS
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PPUSH
56299: LD_VAR 0 2
56303: PUSH
56304: LD_VAR 0 4
56308: ARRAY
56309: PUSH
56310: LD_VAR 0 2
56314: PUSH
56315: LD_VAR 0 4
56319: ARRAY
56320: PPUSH
56321: CALL_OW 255
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PPUSH
56330: CALL 20052 0 3
56334: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56335: LD_VAR 0 2
56339: PUSH
56340: LD_VAR 0 4
56344: ARRAY
56345: PPUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: CALL_OW 255
56355: PPUSH
56356: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56360: LD_VAR 0 2
56364: PUSH
56365: LD_VAR 0 4
56369: ARRAY
56370: PPUSH
56371: CALL_OW 141
// end ;
56375: GO 56207
56377: POP
56378: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56379: LD_VAR 0 1
56383: PPUSH
56384: LD_EXP 36
56388: PUSH
56389: LD_VAR 0 5
56393: ARRAY
56394: PUSH
56395: LD_INT 0
56397: PLUS
56398: PPUSH
56399: CALL_OW 505
// end ;
56403: LD_VAR 0 3
56407: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56408: LD_INT 0
56410: PPUSH
56411: PPUSH
56412: PPUSH
56413: PPUSH
// if not hack in hackTanks then
56414: LD_VAR 0 1
56418: PUSH
56419: LD_EXP 35
56423: IN
56424: NOT
56425: IFFALSE 56429
// exit ;
56427: GO 56669
// index := GetElementIndex ( hackTanks , hack ) ;
56429: LD_ADDR_VAR 0 4
56433: PUSH
56434: LD_EXP 35
56438: PPUSH
56439: LD_VAR 0 1
56443: PPUSH
56444: CALL 19837 0 2
56448: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56449: LD_ADDR_VAR 0 3
56453: PUSH
56454: DOUBLE
56455: LD_EXP 36
56459: PUSH
56460: LD_VAR 0 4
56464: ARRAY
56465: INC
56466: ST_TO_ADDR
56467: LD_INT 1
56469: PUSH
56470: FOR_DOWNTO
56471: IFFALSE 56643
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56473: LD_ADDR_VAR 0 5
56477: PUSH
56478: LD_EXP 36
56482: PUSH
56483: LD_VAR 0 4
56487: ARRAY
56488: PUSH
56489: LD_VAR 0 3
56493: ARRAY
56494: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56495: LD_VAR 0 5
56499: PUSH
56500: LD_INT 1
56502: ARRAY
56503: PPUSH
56504: CALL_OW 302
56508: NOT
56509: PUSH
56510: LD_VAR 0 5
56514: PUSH
56515: LD_INT 1
56517: ARRAY
56518: PPUSH
56519: CALL_OW 255
56523: PUSH
56524: LD_VAR 0 1
56528: PPUSH
56529: CALL_OW 255
56533: NONEQUAL
56534: OR
56535: IFFALSE 56641
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56537: LD_VAR 0 5
56541: PUSH
56542: LD_INT 1
56544: ARRAY
56545: PPUSH
56546: CALL_OW 305
56550: PUSH
56551: LD_VAR 0 5
56555: PUSH
56556: LD_INT 1
56558: ARRAY
56559: PPUSH
56560: CALL_OW 255
56564: PUSH
56565: LD_VAR 0 1
56569: PPUSH
56570: CALL_OW 255
56574: EQUAL
56575: AND
56576: IFFALSE 56600
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56578: LD_VAR 0 5
56582: PUSH
56583: LD_INT 1
56585: ARRAY
56586: PPUSH
56587: LD_VAR 0 5
56591: PUSH
56592: LD_INT 2
56594: ARRAY
56595: PPUSH
56596: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56600: LD_ADDR_EXP 36
56604: PUSH
56605: LD_EXP 36
56609: PPUSH
56610: LD_VAR 0 4
56614: PPUSH
56615: LD_EXP 36
56619: PUSH
56620: LD_VAR 0 4
56624: ARRAY
56625: PPUSH
56626: LD_VAR 0 3
56630: PPUSH
56631: CALL_OW 3
56635: PPUSH
56636: CALL_OW 1
56640: ST_TO_ADDR
// end ; end ;
56641: GO 56470
56643: POP
56644: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56645: LD_VAR 0 1
56649: PPUSH
56650: LD_EXP 36
56654: PUSH
56655: LD_VAR 0 4
56659: ARRAY
56660: PUSH
56661: LD_INT 0
56663: PLUS
56664: PPUSH
56665: CALL_OW 505
// end ;
56669: LD_VAR 0 2
56673: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56674: LD_INT 0
56676: PPUSH
56677: PPUSH
56678: PPUSH
56679: PPUSH
// if not hack in hackTanks then
56680: LD_VAR 0 1
56684: PUSH
56685: LD_EXP 35
56689: IN
56690: NOT
56691: IFFALSE 56695
// exit ;
56693: GO 56780
// index := GetElementIndex ( hackTanks , hack ) ;
56695: LD_ADDR_VAR 0 5
56699: PUSH
56700: LD_EXP 35
56704: PPUSH
56705: LD_VAR 0 1
56709: PPUSH
56710: CALL 19837 0 2
56714: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56715: LD_ADDR_VAR 0 4
56719: PUSH
56720: DOUBLE
56721: LD_INT 1
56723: DEC
56724: ST_TO_ADDR
56725: LD_EXP 36
56729: PUSH
56730: LD_VAR 0 5
56734: ARRAY
56735: PUSH
56736: FOR_TO
56737: IFFALSE 56778
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56739: LD_EXP 36
56743: PUSH
56744: LD_VAR 0 5
56748: ARRAY
56749: PUSH
56750: LD_VAR 0 4
56754: ARRAY
56755: PUSH
56756: LD_INT 1
56758: ARRAY
56759: PUSH
56760: LD_VAR 0 2
56764: EQUAL
56765: IFFALSE 56776
// KillUnit ( vehicle ) ;
56767: LD_VAR 0 2
56771: PPUSH
56772: CALL_OW 66
56776: GO 56736
56778: POP
56779: POP
// end ;
56780: LD_VAR 0 3
56784: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56785: LD_EXP 40
56789: NOT
56790: IFFALSE 56825
56792: GO 56794
56794: DISABLE
// begin initMiner := true ;
56795: LD_ADDR_EXP 40
56799: PUSH
56800: LD_INT 1
56802: ST_TO_ADDR
// minersList := [ ] ;
56803: LD_ADDR_EXP 41
56807: PUSH
56808: EMPTY
56809: ST_TO_ADDR
// minerMinesList := [ ] ;
56810: LD_ADDR_EXP 42
56814: PUSH
56815: EMPTY
56816: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56817: LD_ADDR_EXP 43
56821: PUSH
56822: LD_INT 5
56824: ST_TO_ADDR
// end ;
56825: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56826: LD_EXP 40
56830: PUSH
56831: LD_INT 34
56833: PUSH
56834: LD_EXP 106
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PPUSH
56843: CALL_OW 69
56847: AND
56848: IFFALSE 57311
56850: GO 56852
56852: DISABLE
56853: LD_INT 0
56855: PPUSH
56856: PPUSH
56857: PPUSH
56858: PPUSH
// begin enable ;
56859: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56860: LD_ADDR_VAR 0 1
56864: PUSH
56865: LD_INT 34
56867: PUSH
56868: LD_EXP 106
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PPUSH
56877: CALL_OW 69
56881: PUSH
56882: FOR_IN
56883: IFFALSE 56955
// begin if not i in minersList then
56885: LD_VAR 0 1
56889: PUSH
56890: LD_EXP 41
56894: IN
56895: NOT
56896: IFFALSE 56953
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56898: LD_ADDR_EXP 41
56902: PUSH
56903: LD_EXP 41
56907: PPUSH
56908: LD_EXP 41
56912: PUSH
56913: LD_INT 1
56915: PLUS
56916: PPUSH
56917: LD_VAR 0 1
56921: PPUSH
56922: CALL_OW 1
56926: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56927: LD_ADDR_EXP 42
56931: PUSH
56932: LD_EXP 42
56936: PPUSH
56937: LD_EXP 42
56941: PUSH
56942: LD_INT 1
56944: PLUS
56945: PPUSH
56946: EMPTY
56947: PPUSH
56948: CALL_OW 1
56952: ST_TO_ADDR
// end end ;
56953: GO 56882
56955: POP
56956: POP
// for i := minerMinesList downto 1 do
56957: LD_ADDR_VAR 0 1
56961: PUSH
56962: DOUBLE
56963: LD_EXP 42
56967: INC
56968: ST_TO_ADDR
56969: LD_INT 1
56971: PUSH
56972: FOR_DOWNTO
56973: IFFALSE 57309
// begin if IsLive ( minersList [ i ] ) then
56975: LD_EXP 41
56979: PUSH
56980: LD_VAR 0 1
56984: ARRAY
56985: PPUSH
56986: CALL_OW 300
56990: IFFALSE 57018
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56992: LD_EXP 41
56996: PUSH
56997: LD_VAR 0 1
57001: ARRAY
57002: PPUSH
57003: LD_EXP 42
57007: PUSH
57008: LD_VAR 0 1
57012: ARRAY
57013: PPUSH
57014: CALL_OW 505
// if not minerMinesList [ i ] then
57018: LD_EXP 42
57022: PUSH
57023: LD_VAR 0 1
57027: ARRAY
57028: NOT
57029: IFFALSE 57033
// continue ;
57031: GO 56972
// for j := minerMinesList [ i ] downto 1 do
57033: LD_ADDR_VAR 0 2
57037: PUSH
57038: DOUBLE
57039: LD_EXP 42
57043: PUSH
57044: LD_VAR 0 1
57048: ARRAY
57049: INC
57050: ST_TO_ADDR
57051: LD_INT 1
57053: PUSH
57054: FOR_DOWNTO
57055: IFFALSE 57305
// begin side := GetSide ( minersList [ i ] ) ;
57057: LD_ADDR_VAR 0 3
57061: PUSH
57062: LD_EXP 41
57066: PUSH
57067: LD_VAR 0 1
57071: ARRAY
57072: PPUSH
57073: CALL_OW 255
57077: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57078: LD_ADDR_VAR 0 4
57082: PUSH
57083: LD_EXP 42
57087: PUSH
57088: LD_VAR 0 1
57092: ARRAY
57093: PUSH
57094: LD_VAR 0 2
57098: ARRAY
57099: PUSH
57100: LD_INT 1
57102: ARRAY
57103: PPUSH
57104: LD_EXP 42
57108: PUSH
57109: LD_VAR 0 1
57113: ARRAY
57114: PUSH
57115: LD_VAR 0 2
57119: ARRAY
57120: PUSH
57121: LD_INT 2
57123: ARRAY
57124: PPUSH
57125: CALL_OW 428
57129: ST_TO_ADDR
// if not tmp then
57130: LD_VAR 0 4
57134: NOT
57135: IFFALSE 57139
// continue ;
57137: GO 57054
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57139: LD_VAR 0 4
57143: PUSH
57144: LD_INT 81
57146: PUSH
57147: LD_VAR 0 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PPUSH
57156: CALL_OW 69
57160: IN
57161: PUSH
57162: LD_EXP 42
57166: PUSH
57167: LD_VAR 0 1
57171: ARRAY
57172: PUSH
57173: LD_VAR 0 2
57177: ARRAY
57178: PUSH
57179: LD_INT 1
57181: ARRAY
57182: PPUSH
57183: LD_EXP 42
57187: PUSH
57188: LD_VAR 0 1
57192: ARRAY
57193: PUSH
57194: LD_VAR 0 2
57198: ARRAY
57199: PUSH
57200: LD_INT 2
57202: ARRAY
57203: PPUSH
57204: CALL_OW 458
57208: AND
57209: IFFALSE 57303
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57211: LD_EXP 42
57215: PUSH
57216: LD_VAR 0 1
57220: ARRAY
57221: PUSH
57222: LD_VAR 0 2
57226: ARRAY
57227: PUSH
57228: LD_INT 1
57230: ARRAY
57231: PPUSH
57232: LD_EXP 42
57236: PUSH
57237: LD_VAR 0 1
57241: ARRAY
57242: PUSH
57243: LD_VAR 0 2
57247: ARRAY
57248: PUSH
57249: LD_INT 2
57251: ARRAY
57252: PPUSH
57253: LD_VAR 0 3
57257: PPUSH
57258: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57262: LD_ADDR_EXP 42
57266: PUSH
57267: LD_EXP 42
57271: PPUSH
57272: LD_VAR 0 1
57276: PPUSH
57277: LD_EXP 42
57281: PUSH
57282: LD_VAR 0 1
57286: ARRAY
57287: PPUSH
57288: LD_VAR 0 2
57292: PPUSH
57293: CALL_OW 3
57297: PPUSH
57298: CALL_OW 1
57302: ST_TO_ADDR
// end ; end ;
57303: GO 57054
57305: POP
57306: POP
// end ;
57307: GO 56972
57309: POP
57310: POP
// end ;
57311: PPOPN 4
57313: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57314: LD_INT 0
57316: PPUSH
57317: PPUSH
// result := false ;
57318: LD_ADDR_VAR 0 4
57322: PUSH
57323: LD_INT 0
57325: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57326: LD_VAR 0 1
57330: PPUSH
57331: CALL_OW 264
57335: PUSH
57336: LD_EXP 106
57340: EQUAL
57341: NOT
57342: IFFALSE 57346
// exit ;
57344: GO 57586
// index := GetElementIndex ( minersList , unit ) ;
57346: LD_ADDR_VAR 0 5
57350: PUSH
57351: LD_EXP 41
57355: PPUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: CALL 19837 0 2
57365: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57366: LD_EXP 42
57370: PUSH
57371: LD_VAR 0 5
57375: ARRAY
57376: PUSH
57377: LD_EXP 43
57381: GREATEREQUAL
57382: IFFALSE 57386
// exit ;
57384: GO 57586
// ComMoveXY ( unit , x , y ) ;
57386: LD_VAR 0 1
57390: PPUSH
57391: LD_VAR 0 2
57395: PPUSH
57396: LD_VAR 0 3
57400: PPUSH
57401: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57405: LD_INT 35
57407: PPUSH
57408: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57412: LD_VAR 0 1
57416: PPUSH
57417: LD_VAR 0 2
57421: PPUSH
57422: LD_VAR 0 3
57426: PPUSH
57427: CALL 50609 0 3
57431: NOT
57432: PUSH
57433: LD_VAR 0 1
57437: PPUSH
57438: CALL_OW 314
57442: AND
57443: IFFALSE 57447
// exit ;
57445: GO 57586
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57447: LD_VAR 0 2
57451: PPUSH
57452: LD_VAR 0 3
57456: PPUSH
57457: CALL_OW 428
57461: PUSH
57462: LD_VAR 0 1
57466: EQUAL
57467: PUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: CALL_OW 314
57477: NOT
57478: AND
57479: IFFALSE 57405
// PlaySoundXY ( x , y , PlantMine ) ;
57481: LD_VAR 0 2
57485: PPUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: LD_STRING PlantMine
57493: PPUSH
57494: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57498: LD_VAR 0 2
57502: PPUSH
57503: LD_VAR 0 3
57507: PPUSH
57508: LD_VAR 0 1
57512: PPUSH
57513: CALL_OW 255
57517: PPUSH
57518: LD_INT 0
57520: PPUSH
57521: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57525: LD_ADDR_EXP 42
57529: PUSH
57530: LD_EXP 42
57534: PPUSH
57535: LD_VAR 0 5
57539: PUSH
57540: LD_EXP 42
57544: PUSH
57545: LD_VAR 0 5
57549: ARRAY
57550: PUSH
57551: LD_INT 1
57553: PLUS
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PPUSH
57559: LD_VAR 0 2
57563: PUSH
57564: LD_VAR 0 3
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PPUSH
57573: CALL 20052 0 3
57577: ST_TO_ADDR
// result := true ;
57578: LD_ADDR_VAR 0 4
57582: PUSH
57583: LD_INT 1
57585: ST_TO_ADDR
// end ;
57586: LD_VAR 0 4
57590: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57591: LD_INT 0
57593: PPUSH
57594: PPUSH
57595: PPUSH
// if not unit in minersList then
57596: LD_VAR 0 1
57600: PUSH
57601: LD_EXP 41
57605: IN
57606: NOT
57607: IFFALSE 57611
// exit ;
57609: GO 58003
// index := GetElementIndex ( minersList , unit ) ;
57611: LD_ADDR_VAR 0 6
57615: PUSH
57616: LD_EXP 41
57620: PPUSH
57621: LD_VAR 0 1
57625: PPUSH
57626: CALL 19837 0 2
57630: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57631: LD_ADDR_VAR 0 5
57635: PUSH
57636: DOUBLE
57637: LD_EXP 42
57641: PUSH
57642: LD_VAR 0 6
57646: ARRAY
57647: INC
57648: ST_TO_ADDR
57649: LD_INT 1
57651: PUSH
57652: FOR_DOWNTO
57653: IFFALSE 57814
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57655: LD_EXP 42
57659: PUSH
57660: LD_VAR 0 6
57664: ARRAY
57665: PUSH
57666: LD_VAR 0 5
57670: ARRAY
57671: PUSH
57672: LD_INT 1
57674: ARRAY
57675: PUSH
57676: LD_VAR 0 2
57680: EQUAL
57681: PUSH
57682: LD_EXP 42
57686: PUSH
57687: LD_VAR 0 6
57691: ARRAY
57692: PUSH
57693: LD_VAR 0 5
57697: ARRAY
57698: PUSH
57699: LD_INT 2
57701: ARRAY
57702: PUSH
57703: LD_VAR 0 3
57707: EQUAL
57708: AND
57709: IFFALSE 57812
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57711: LD_EXP 42
57715: PUSH
57716: LD_VAR 0 6
57720: ARRAY
57721: PUSH
57722: LD_VAR 0 5
57726: ARRAY
57727: PUSH
57728: LD_INT 1
57730: ARRAY
57731: PPUSH
57732: LD_EXP 42
57736: PUSH
57737: LD_VAR 0 6
57741: ARRAY
57742: PUSH
57743: LD_VAR 0 5
57747: ARRAY
57748: PUSH
57749: LD_INT 2
57751: ARRAY
57752: PPUSH
57753: LD_VAR 0 1
57757: PPUSH
57758: CALL_OW 255
57762: PPUSH
57763: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57767: LD_ADDR_EXP 42
57771: PUSH
57772: LD_EXP 42
57776: PPUSH
57777: LD_VAR 0 6
57781: PPUSH
57782: LD_EXP 42
57786: PUSH
57787: LD_VAR 0 6
57791: ARRAY
57792: PPUSH
57793: LD_VAR 0 5
57797: PPUSH
57798: CALL_OW 3
57802: PPUSH
57803: CALL_OW 1
57807: ST_TO_ADDR
// exit ;
57808: POP
57809: POP
57810: GO 58003
// end ; end ;
57812: GO 57652
57814: POP
57815: POP
// for i := minerMinesList [ index ] downto 1 do
57816: LD_ADDR_VAR 0 5
57820: PUSH
57821: DOUBLE
57822: LD_EXP 42
57826: PUSH
57827: LD_VAR 0 6
57831: ARRAY
57832: INC
57833: ST_TO_ADDR
57834: LD_INT 1
57836: PUSH
57837: FOR_DOWNTO
57838: IFFALSE 58001
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57840: LD_EXP 42
57844: PUSH
57845: LD_VAR 0 6
57849: ARRAY
57850: PUSH
57851: LD_VAR 0 5
57855: ARRAY
57856: PUSH
57857: LD_INT 1
57859: ARRAY
57860: PPUSH
57861: LD_EXP 42
57865: PUSH
57866: LD_VAR 0 6
57870: ARRAY
57871: PUSH
57872: LD_VAR 0 5
57876: ARRAY
57877: PUSH
57878: LD_INT 2
57880: ARRAY
57881: PPUSH
57882: LD_VAR 0 2
57886: PPUSH
57887: LD_VAR 0 3
57891: PPUSH
57892: CALL_OW 298
57896: PUSH
57897: LD_INT 6
57899: LESS
57900: IFFALSE 57999
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57902: LD_EXP 42
57906: PUSH
57907: LD_VAR 0 6
57911: ARRAY
57912: PUSH
57913: LD_VAR 0 5
57917: ARRAY
57918: PUSH
57919: LD_INT 1
57921: ARRAY
57922: PPUSH
57923: LD_EXP 42
57927: PUSH
57928: LD_VAR 0 6
57932: ARRAY
57933: PUSH
57934: LD_VAR 0 5
57938: ARRAY
57939: PUSH
57940: LD_INT 2
57942: ARRAY
57943: PPUSH
57944: LD_VAR 0 1
57948: PPUSH
57949: CALL_OW 255
57953: PPUSH
57954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57958: LD_ADDR_EXP 42
57962: PUSH
57963: LD_EXP 42
57967: PPUSH
57968: LD_VAR 0 6
57972: PPUSH
57973: LD_EXP 42
57977: PUSH
57978: LD_VAR 0 6
57982: ARRAY
57983: PPUSH
57984: LD_VAR 0 5
57988: PPUSH
57989: CALL_OW 3
57993: PPUSH
57994: CALL_OW 1
57998: ST_TO_ADDR
// end ; end ;
57999: GO 57837
58001: POP
58002: POP
// end ;
58003: LD_VAR 0 4
58007: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58008: LD_INT 0
58010: PPUSH
58011: PPUSH
58012: PPUSH
58013: PPUSH
58014: PPUSH
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58019: LD_VAR 0 1
58023: PPUSH
58024: CALL_OW 264
58028: PUSH
58029: LD_EXP 106
58033: EQUAL
58034: NOT
58035: PUSH
58036: LD_VAR 0 1
58040: PUSH
58041: LD_EXP 41
58045: IN
58046: NOT
58047: OR
58048: IFFALSE 58052
// exit ;
58050: GO 58374
// index := GetElementIndex ( minersList , unit ) ;
58052: LD_ADDR_VAR 0 6
58056: PUSH
58057: LD_EXP 41
58061: PPUSH
58062: LD_VAR 0 1
58066: PPUSH
58067: CALL 19837 0 2
58071: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58072: LD_ADDR_VAR 0 8
58076: PUSH
58077: LD_EXP 43
58081: PUSH
58082: LD_EXP 42
58086: PUSH
58087: LD_VAR 0 6
58091: ARRAY
58092: MINUS
58093: ST_TO_ADDR
// if not minesFreeAmount then
58094: LD_VAR 0 8
58098: NOT
58099: IFFALSE 58103
// exit ;
58101: GO 58374
// tmp := [ ] ;
58103: LD_ADDR_VAR 0 7
58107: PUSH
58108: EMPTY
58109: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58110: LD_ADDR_VAR 0 5
58114: PUSH
58115: DOUBLE
58116: LD_INT 1
58118: DEC
58119: ST_TO_ADDR
58120: LD_VAR 0 8
58124: PUSH
58125: FOR_TO
58126: IFFALSE 58321
// begin _d := rand ( 0 , 5 ) ;
58128: LD_ADDR_VAR 0 11
58132: PUSH
58133: LD_INT 0
58135: PPUSH
58136: LD_INT 5
58138: PPUSH
58139: CALL_OW 12
58143: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58144: LD_ADDR_VAR 0 12
58148: PUSH
58149: LD_INT 2
58151: PPUSH
58152: LD_INT 6
58154: PPUSH
58155: CALL_OW 12
58159: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58160: LD_ADDR_VAR 0 9
58164: PUSH
58165: LD_VAR 0 2
58169: PPUSH
58170: LD_VAR 0 11
58174: PPUSH
58175: LD_VAR 0 12
58179: PPUSH
58180: CALL_OW 272
58184: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58185: LD_ADDR_VAR 0 10
58189: PUSH
58190: LD_VAR 0 3
58194: PPUSH
58195: LD_VAR 0 11
58199: PPUSH
58200: LD_VAR 0 12
58204: PPUSH
58205: CALL_OW 273
58209: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58210: LD_VAR 0 9
58214: PPUSH
58215: LD_VAR 0 10
58219: PPUSH
58220: CALL_OW 488
58224: PUSH
58225: LD_VAR 0 9
58229: PUSH
58230: LD_VAR 0 10
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_VAR 0 7
58243: IN
58244: NOT
58245: AND
58246: PUSH
58247: LD_VAR 0 9
58251: PPUSH
58252: LD_VAR 0 10
58256: PPUSH
58257: CALL_OW 458
58261: NOT
58262: AND
58263: IFFALSE 58305
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58265: LD_ADDR_VAR 0 7
58269: PUSH
58270: LD_VAR 0 7
58274: PPUSH
58275: LD_VAR 0 7
58279: PUSH
58280: LD_INT 1
58282: PLUS
58283: PPUSH
58284: LD_VAR 0 9
58288: PUSH
58289: LD_VAR 0 10
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PPUSH
58298: CALL_OW 1
58302: ST_TO_ADDR
58303: GO 58319
// i := i - 1 ;
58305: LD_ADDR_VAR 0 5
58309: PUSH
58310: LD_VAR 0 5
58314: PUSH
58315: LD_INT 1
58317: MINUS
58318: ST_TO_ADDR
// end ;
58319: GO 58125
58321: POP
58322: POP
// for i in tmp do
58323: LD_ADDR_VAR 0 5
58327: PUSH
58328: LD_VAR 0 7
58332: PUSH
58333: FOR_IN
58334: IFFALSE 58372
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58336: LD_VAR 0 1
58340: PPUSH
58341: LD_VAR 0 5
58345: PUSH
58346: LD_INT 1
58348: ARRAY
58349: PPUSH
58350: LD_VAR 0 5
58354: PUSH
58355: LD_INT 2
58357: ARRAY
58358: PPUSH
58359: CALL 57314 0 3
58363: NOT
58364: IFFALSE 58370
// exit ;
58366: POP
58367: POP
58368: GO 58374
58370: GO 58333
58372: POP
58373: POP
// end ;
58374: LD_VAR 0 4
58378: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
58379: LD_INT 0
58381: PPUSH
58382: PPUSH
58383: PPUSH
58384: PPUSH
58385: PPUSH
58386: PPUSH
58387: PPUSH
// if not GetClass ( unit ) = class_sniper then
58388: LD_VAR 0 1
58392: PPUSH
58393: CALL_OW 257
58397: PUSH
58398: LD_INT 5
58400: EQUAL
58401: NOT
58402: IFFALSE 58406
// exit ;
58404: GO 58794
// dist := 8 ;
58406: LD_ADDR_VAR 0 5
58410: PUSH
58411: LD_INT 8
58413: ST_TO_ADDR
// viewRange := 12 ;
58414: LD_ADDR_VAR 0 7
58418: PUSH
58419: LD_INT 12
58421: ST_TO_ADDR
// side := GetSide ( unit ) ;
58422: LD_ADDR_VAR 0 6
58426: PUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: CALL_OW 255
58436: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58437: LD_INT 61
58439: PPUSH
58440: LD_VAR 0 6
58444: PPUSH
58445: CALL_OW 321
58449: PUSH
58450: LD_INT 2
58452: EQUAL
58453: IFFALSE 58463
// viewRange := 16 ;
58455: LD_ADDR_VAR 0 7
58459: PUSH
58460: LD_INT 16
58462: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58463: LD_VAR 0 1
58467: PPUSH
58468: LD_VAR 0 2
58472: PPUSH
58473: LD_VAR 0 3
58477: PPUSH
58478: CALL_OW 297
58482: PUSH
58483: LD_VAR 0 5
58487: GREATER
58488: IFFALSE 58567
// begin ComMoveXY ( unit , x , y ) ;
58490: LD_VAR 0 1
58494: PPUSH
58495: LD_VAR 0 2
58499: PPUSH
58500: LD_VAR 0 3
58504: PPUSH
58505: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58509: LD_INT 35
58511: PPUSH
58512: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58516: LD_VAR 0 1
58520: PPUSH
58521: LD_VAR 0 2
58525: PPUSH
58526: LD_VAR 0 3
58530: PPUSH
58531: CALL 50609 0 3
58535: NOT
58536: IFFALSE 58540
// exit ;
58538: GO 58794
// until GetDistUnitXY ( unit , x , y ) < dist ;
58540: LD_VAR 0 1
58544: PPUSH
58545: LD_VAR 0 2
58549: PPUSH
58550: LD_VAR 0 3
58554: PPUSH
58555: CALL_OW 297
58559: PUSH
58560: LD_VAR 0 5
58564: LESS
58565: IFFALSE 58509
// end ; ComTurnXY ( unit , x , y ) ;
58567: LD_VAR 0 1
58571: PPUSH
58572: LD_VAR 0 2
58576: PPUSH
58577: LD_VAR 0 3
58581: PPUSH
58582: CALL_OW 118
// wait ( 5 ) ;
58586: LD_INT 5
58588: PPUSH
58589: CALL_OW 67
// _d := GetDir ( unit ) ;
58593: LD_ADDR_VAR 0 10
58597: PUSH
58598: LD_VAR 0 1
58602: PPUSH
58603: CALL_OW 254
58607: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
58608: LD_ADDR_VAR 0 8
58612: PUSH
58613: LD_VAR 0 1
58617: PPUSH
58618: CALL_OW 250
58622: PPUSH
58623: LD_VAR 0 10
58627: PPUSH
58628: LD_VAR 0 5
58632: PPUSH
58633: CALL_OW 272
58637: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
58638: LD_ADDR_VAR 0 9
58642: PUSH
58643: LD_VAR 0 1
58647: PPUSH
58648: CALL_OW 251
58652: PPUSH
58653: LD_VAR 0 10
58657: PPUSH
58658: LD_VAR 0 5
58662: PPUSH
58663: CALL_OW 273
58667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58668: LD_VAR 0 8
58672: PPUSH
58673: LD_VAR 0 9
58677: PPUSH
58678: CALL_OW 488
58682: NOT
58683: IFFALSE 58687
// exit ;
58685: GO 58794
// ComAnimCustom ( unit , 1 ) ;
58687: LD_VAR 0 1
58691: PPUSH
58692: LD_INT 1
58694: PPUSH
58695: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58699: LD_VAR 0 8
58703: PPUSH
58704: LD_VAR 0 9
58708: PPUSH
58709: LD_VAR 0 6
58713: PPUSH
58714: LD_VAR 0 7
58718: PPUSH
58719: CALL_OW 330
// repeat wait ( 1 ) ;
58723: LD_INT 1
58725: PPUSH
58726: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
58730: LD_VAR 0 1
58734: PPUSH
58735: CALL_OW 316
58739: PUSH
58740: LD_VAR 0 1
58744: PPUSH
58745: CALL_OW 314
58749: OR
58750: PUSH
58751: LD_VAR 0 1
58755: PPUSH
58756: CALL_OW 302
58760: NOT
58761: OR
58762: PUSH
58763: LD_VAR 0 1
58767: PPUSH
58768: CALL_OW 301
58772: OR
58773: IFFALSE 58723
// RemoveSeeing ( _x , _y , side ) ;
58775: LD_VAR 0 8
58779: PPUSH
58780: LD_VAR 0 9
58784: PPUSH
58785: LD_VAR 0 6
58789: PPUSH
58790: CALL_OW 331
// end ; end_of_file
58794: LD_VAR 0 4
58798: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58799: LD_INT 0
58801: PPUSH
// if p2 = 100 then
58802: LD_VAR 0 2
58806: PUSH
58807: LD_INT 100
58809: EQUAL
58810: IFFALSE 59759
// begin if not StreamModeActive then
58812: LD_EXP 44
58816: NOT
58817: IFFALSE 58827
// StreamModeActive := true ;
58819: LD_ADDR_EXP 44
58823: PUSH
58824: LD_INT 1
58826: ST_TO_ADDR
// if p3 = 0 then
58827: LD_VAR 0 3
58831: PUSH
58832: LD_INT 0
58834: EQUAL
58835: IFFALSE 58841
// InitStreamMode ;
58837: CALL 59919 0 0
// if p3 = 1 then
58841: LD_VAR 0 3
58845: PUSH
58846: LD_INT 1
58848: EQUAL
58849: IFFALSE 58859
// sRocket := true ;
58851: LD_ADDR_EXP 49
58855: PUSH
58856: LD_INT 1
58858: ST_TO_ADDR
// if p3 = 2 then
58859: LD_VAR 0 3
58863: PUSH
58864: LD_INT 2
58866: EQUAL
58867: IFFALSE 58877
// sSpeed := true ;
58869: LD_ADDR_EXP 48
58873: PUSH
58874: LD_INT 1
58876: ST_TO_ADDR
// if p3 = 3 then
58877: LD_VAR 0 3
58881: PUSH
58882: LD_INT 3
58884: EQUAL
58885: IFFALSE 58895
// sEngine := true ;
58887: LD_ADDR_EXP 50
58891: PUSH
58892: LD_INT 1
58894: ST_TO_ADDR
// if p3 = 4 then
58895: LD_VAR 0 3
58899: PUSH
58900: LD_INT 4
58902: EQUAL
58903: IFFALSE 58913
// sSpec := true ;
58905: LD_ADDR_EXP 47
58909: PUSH
58910: LD_INT 1
58912: ST_TO_ADDR
// if p3 = 5 then
58913: LD_VAR 0 3
58917: PUSH
58918: LD_INT 5
58920: EQUAL
58921: IFFALSE 58931
// sLevel := true ;
58923: LD_ADDR_EXP 51
58927: PUSH
58928: LD_INT 1
58930: ST_TO_ADDR
// if p3 = 6 then
58931: LD_VAR 0 3
58935: PUSH
58936: LD_INT 6
58938: EQUAL
58939: IFFALSE 58949
// sArmoury := true ;
58941: LD_ADDR_EXP 52
58945: PUSH
58946: LD_INT 1
58948: ST_TO_ADDR
// if p3 = 7 then
58949: LD_VAR 0 3
58953: PUSH
58954: LD_INT 7
58956: EQUAL
58957: IFFALSE 58967
// sRadar := true ;
58959: LD_ADDR_EXP 53
58963: PUSH
58964: LD_INT 1
58966: ST_TO_ADDR
// if p3 = 8 then
58967: LD_VAR 0 3
58971: PUSH
58972: LD_INT 8
58974: EQUAL
58975: IFFALSE 58985
// sBunker := true ;
58977: LD_ADDR_EXP 54
58981: PUSH
58982: LD_INT 1
58984: ST_TO_ADDR
// if p3 = 9 then
58985: LD_VAR 0 3
58989: PUSH
58990: LD_INT 9
58992: EQUAL
58993: IFFALSE 59003
// sHack := true ;
58995: LD_ADDR_EXP 55
58999: PUSH
59000: LD_INT 1
59002: ST_TO_ADDR
// if p3 = 10 then
59003: LD_VAR 0 3
59007: PUSH
59008: LD_INT 10
59010: EQUAL
59011: IFFALSE 59021
// sFire := true ;
59013: LD_ADDR_EXP 56
59017: PUSH
59018: LD_INT 1
59020: ST_TO_ADDR
// if p3 = 11 then
59021: LD_VAR 0 3
59025: PUSH
59026: LD_INT 11
59028: EQUAL
59029: IFFALSE 59039
// sRefresh := true ;
59031: LD_ADDR_EXP 57
59035: PUSH
59036: LD_INT 1
59038: ST_TO_ADDR
// if p3 = 12 then
59039: LD_VAR 0 3
59043: PUSH
59044: LD_INT 12
59046: EQUAL
59047: IFFALSE 59057
// sExp := true ;
59049: LD_ADDR_EXP 58
59053: PUSH
59054: LD_INT 1
59056: ST_TO_ADDR
// if p3 = 13 then
59057: LD_VAR 0 3
59061: PUSH
59062: LD_INT 13
59064: EQUAL
59065: IFFALSE 59075
// sDepot := true ;
59067: LD_ADDR_EXP 59
59071: PUSH
59072: LD_INT 1
59074: ST_TO_ADDR
// if p3 = 14 then
59075: LD_VAR 0 3
59079: PUSH
59080: LD_INT 14
59082: EQUAL
59083: IFFALSE 59093
// sFlag := true ;
59085: LD_ADDR_EXP 60
59089: PUSH
59090: LD_INT 1
59092: ST_TO_ADDR
// if p3 = 15 then
59093: LD_VAR 0 3
59097: PUSH
59098: LD_INT 15
59100: EQUAL
59101: IFFALSE 59111
// sKamikadze := true ;
59103: LD_ADDR_EXP 68
59107: PUSH
59108: LD_INT 1
59110: ST_TO_ADDR
// if p3 = 16 then
59111: LD_VAR 0 3
59115: PUSH
59116: LD_INT 16
59118: EQUAL
59119: IFFALSE 59129
// sTroll := true ;
59121: LD_ADDR_EXP 69
59125: PUSH
59126: LD_INT 1
59128: ST_TO_ADDR
// if p3 = 17 then
59129: LD_VAR 0 3
59133: PUSH
59134: LD_INT 17
59136: EQUAL
59137: IFFALSE 59147
// sSlow := true ;
59139: LD_ADDR_EXP 70
59143: PUSH
59144: LD_INT 1
59146: ST_TO_ADDR
// if p3 = 18 then
59147: LD_VAR 0 3
59151: PUSH
59152: LD_INT 18
59154: EQUAL
59155: IFFALSE 59165
// sLack := true ;
59157: LD_ADDR_EXP 71
59161: PUSH
59162: LD_INT 1
59164: ST_TO_ADDR
// if p3 = 19 then
59165: LD_VAR 0 3
59169: PUSH
59170: LD_INT 19
59172: EQUAL
59173: IFFALSE 59183
// sTank := true ;
59175: LD_ADDR_EXP 73
59179: PUSH
59180: LD_INT 1
59182: ST_TO_ADDR
// if p3 = 20 then
59183: LD_VAR 0 3
59187: PUSH
59188: LD_INT 20
59190: EQUAL
59191: IFFALSE 59201
// sRemote := true ;
59193: LD_ADDR_EXP 74
59197: PUSH
59198: LD_INT 1
59200: ST_TO_ADDR
// if p3 = 21 then
59201: LD_VAR 0 3
59205: PUSH
59206: LD_INT 21
59208: EQUAL
59209: IFFALSE 59219
// sPowell := true ;
59211: LD_ADDR_EXP 75
59215: PUSH
59216: LD_INT 1
59218: ST_TO_ADDR
// if p3 = 22 then
59219: LD_VAR 0 3
59223: PUSH
59224: LD_INT 22
59226: EQUAL
59227: IFFALSE 59237
// sTeleport := true ;
59229: LD_ADDR_EXP 78
59233: PUSH
59234: LD_INT 1
59236: ST_TO_ADDR
// if p3 = 23 then
59237: LD_VAR 0 3
59241: PUSH
59242: LD_INT 23
59244: EQUAL
59245: IFFALSE 59255
// sOilTower := true ;
59247: LD_ADDR_EXP 80
59251: PUSH
59252: LD_INT 1
59254: ST_TO_ADDR
// if p3 = 24 then
59255: LD_VAR 0 3
59259: PUSH
59260: LD_INT 24
59262: EQUAL
59263: IFFALSE 59273
// sShovel := true ;
59265: LD_ADDR_EXP 81
59269: PUSH
59270: LD_INT 1
59272: ST_TO_ADDR
// if p3 = 25 then
59273: LD_VAR 0 3
59277: PUSH
59278: LD_INT 25
59280: EQUAL
59281: IFFALSE 59291
// sSheik := true ;
59283: LD_ADDR_EXP 82
59287: PUSH
59288: LD_INT 1
59290: ST_TO_ADDR
// if p3 = 26 then
59291: LD_VAR 0 3
59295: PUSH
59296: LD_INT 26
59298: EQUAL
59299: IFFALSE 59309
// sEarthquake := true ;
59301: LD_ADDR_EXP 84
59305: PUSH
59306: LD_INT 1
59308: ST_TO_ADDR
// if p3 = 27 then
59309: LD_VAR 0 3
59313: PUSH
59314: LD_INT 27
59316: EQUAL
59317: IFFALSE 59327
// sAI := true ;
59319: LD_ADDR_EXP 85
59323: PUSH
59324: LD_INT 1
59326: ST_TO_ADDR
// if p3 = 28 then
59327: LD_VAR 0 3
59331: PUSH
59332: LD_INT 28
59334: EQUAL
59335: IFFALSE 59345
// sCargo := true ;
59337: LD_ADDR_EXP 88
59341: PUSH
59342: LD_INT 1
59344: ST_TO_ADDR
// if p3 = 29 then
59345: LD_VAR 0 3
59349: PUSH
59350: LD_INT 29
59352: EQUAL
59353: IFFALSE 59363
// sDLaser := true ;
59355: LD_ADDR_EXP 89
59359: PUSH
59360: LD_INT 1
59362: ST_TO_ADDR
// if p3 = 30 then
59363: LD_VAR 0 3
59367: PUSH
59368: LD_INT 30
59370: EQUAL
59371: IFFALSE 59381
// sExchange := true ;
59373: LD_ADDR_EXP 90
59377: PUSH
59378: LD_INT 1
59380: ST_TO_ADDR
// if p3 = 31 then
59381: LD_VAR 0 3
59385: PUSH
59386: LD_INT 31
59388: EQUAL
59389: IFFALSE 59399
// sFac := true ;
59391: LD_ADDR_EXP 91
59395: PUSH
59396: LD_INT 1
59398: ST_TO_ADDR
// if p3 = 32 then
59399: LD_VAR 0 3
59403: PUSH
59404: LD_INT 32
59406: EQUAL
59407: IFFALSE 59417
// sPower := true ;
59409: LD_ADDR_EXP 92
59413: PUSH
59414: LD_INT 1
59416: ST_TO_ADDR
// if p3 = 33 then
59417: LD_VAR 0 3
59421: PUSH
59422: LD_INT 33
59424: EQUAL
59425: IFFALSE 59435
// sRandom := true ;
59427: LD_ADDR_EXP 93
59431: PUSH
59432: LD_INT 1
59434: ST_TO_ADDR
// if p3 = 34 then
59435: LD_VAR 0 3
59439: PUSH
59440: LD_INT 34
59442: EQUAL
59443: IFFALSE 59453
// sShield := true ;
59445: LD_ADDR_EXP 94
59449: PUSH
59450: LD_INT 1
59452: ST_TO_ADDR
// if p3 = 35 then
59453: LD_VAR 0 3
59457: PUSH
59458: LD_INT 35
59460: EQUAL
59461: IFFALSE 59471
// sTime := true ;
59463: LD_ADDR_EXP 95
59467: PUSH
59468: LD_INT 1
59470: ST_TO_ADDR
// if p3 = 36 then
59471: LD_VAR 0 3
59475: PUSH
59476: LD_INT 36
59478: EQUAL
59479: IFFALSE 59489
// sTools := true ;
59481: LD_ADDR_EXP 96
59485: PUSH
59486: LD_INT 1
59488: ST_TO_ADDR
// if p3 = 101 then
59489: LD_VAR 0 3
59493: PUSH
59494: LD_INT 101
59496: EQUAL
59497: IFFALSE 59507
// sSold := true ;
59499: LD_ADDR_EXP 61
59503: PUSH
59504: LD_INT 1
59506: ST_TO_ADDR
// if p3 = 102 then
59507: LD_VAR 0 3
59511: PUSH
59512: LD_INT 102
59514: EQUAL
59515: IFFALSE 59525
// sDiff := true ;
59517: LD_ADDR_EXP 62
59521: PUSH
59522: LD_INT 1
59524: ST_TO_ADDR
// if p3 = 103 then
59525: LD_VAR 0 3
59529: PUSH
59530: LD_INT 103
59532: EQUAL
59533: IFFALSE 59543
// sFog := true ;
59535: LD_ADDR_EXP 65
59539: PUSH
59540: LD_INT 1
59542: ST_TO_ADDR
// if p3 = 104 then
59543: LD_VAR 0 3
59547: PUSH
59548: LD_INT 104
59550: EQUAL
59551: IFFALSE 59561
// sReset := true ;
59553: LD_ADDR_EXP 66
59557: PUSH
59558: LD_INT 1
59560: ST_TO_ADDR
// if p3 = 105 then
59561: LD_VAR 0 3
59565: PUSH
59566: LD_INT 105
59568: EQUAL
59569: IFFALSE 59579
// sSun := true ;
59571: LD_ADDR_EXP 67
59575: PUSH
59576: LD_INT 1
59578: ST_TO_ADDR
// if p3 = 106 then
59579: LD_VAR 0 3
59583: PUSH
59584: LD_INT 106
59586: EQUAL
59587: IFFALSE 59597
// sTiger := true ;
59589: LD_ADDR_EXP 63
59593: PUSH
59594: LD_INT 1
59596: ST_TO_ADDR
// if p3 = 107 then
59597: LD_VAR 0 3
59601: PUSH
59602: LD_INT 107
59604: EQUAL
59605: IFFALSE 59615
// sBomb := true ;
59607: LD_ADDR_EXP 64
59611: PUSH
59612: LD_INT 1
59614: ST_TO_ADDR
// if p3 = 108 then
59615: LD_VAR 0 3
59619: PUSH
59620: LD_INT 108
59622: EQUAL
59623: IFFALSE 59633
// sWound := true ;
59625: LD_ADDR_EXP 72
59629: PUSH
59630: LD_INT 1
59632: ST_TO_ADDR
// if p3 = 109 then
59633: LD_VAR 0 3
59637: PUSH
59638: LD_INT 109
59640: EQUAL
59641: IFFALSE 59651
// sBetray := true ;
59643: LD_ADDR_EXP 76
59647: PUSH
59648: LD_INT 1
59650: ST_TO_ADDR
// if p3 = 110 then
59651: LD_VAR 0 3
59655: PUSH
59656: LD_INT 110
59658: EQUAL
59659: IFFALSE 59669
// sContamin := true ;
59661: LD_ADDR_EXP 77
59665: PUSH
59666: LD_INT 1
59668: ST_TO_ADDR
// if p3 = 111 then
59669: LD_VAR 0 3
59673: PUSH
59674: LD_INT 111
59676: EQUAL
59677: IFFALSE 59687
// sOil := true ;
59679: LD_ADDR_EXP 79
59683: PUSH
59684: LD_INT 1
59686: ST_TO_ADDR
// if p3 = 112 then
59687: LD_VAR 0 3
59691: PUSH
59692: LD_INT 112
59694: EQUAL
59695: IFFALSE 59705
// sStu := true ;
59697: LD_ADDR_EXP 83
59701: PUSH
59702: LD_INT 1
59704: ST_TO_ADDR
// if p3 = 113 then
59705: LD_VAR 0 3
59709: PUSH
59710: LD_INT 113
59712: EQUAL
59713: IFFALSE 59723
// sBazooka := true ;
59715: LD_ADDR_EXP 86
59719: PUSH
59720: LD_INT 1
59722: ST_TO_ADDR
// if p3 = 114 then
59723: LD_VAR 0 3
59727: PUSH
59728: LD_INT 114
59730: EQUAL
59731: IFFALSE 59741
// sMortar := true ;
59733: LD_ADDR_EXP 87
59737: PUSH
59738: LD_INT 1
59740: ST_TO_ADDR
// if p3 = 115 then
59741: LD_VAR 0 3
59745: PUSH
59746: LD_INT 115
59748: EQUAL
59749: IFFALSE 59759
// sRanger := true ;
59751: LD_ADDR_EXP 97
59755: PUSH
59756: LD_INT 1
59758: ST_TO_ADDR
// end ; if p2 = 101 then
59759: LD_VAR 0 2
59763: PUSH
59764: LD_INT 101
59766: EQUAL
59767: IFFALSE 59895
// begin case p3 of 1 :
59769: LD_VAR 0 3
59773: PUSH
59774: LD_INT 1
59776: DOUBLE
59777: EQUAL
59778: IFTRUE 59782
59780: GO 59789
59782: POP
// hHackUnlimitedResources ; 2 :
59783: CALL 70932 0 0
59787: GO 59895
59789: LD_INT 2
59791: DOUBLE
59792: EQUAL
59793: IFTRUE 59797
59795: GO 59804
59797: POP
// hHackSetLevel10 ; 3 :
59798: CALL 71065 0 0
59802: GO 59895
59804: LD_INT 3
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59812
59810: GO 59819
59812: POP
// hHackSetLevel10YourUnits ; 4 :
59813: CALL 71150 0 0
59817: GO 59895
59819: LD_INT 4
59821: DOUBLE
59822: EQUAL
59823: IFTRUE 59827
59825: GO 59834
59827: POP
// hHackInvincible ; 5 :
59828: CALL 71598 0 0
59832: GO 59895
59834: LD_INT 5
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59842
59840: GO 59849
59842: POP
// hHackInvisible ; 6 :
59843: CALL 71709 0 0
59847: GO 59895
59849: LD_INT 6
59851: DOUBLE
59852: EQUAL
59853: IFTRUE 59857
59855: GO 59864
59857: POP
// hHackChangeYourSide ; 7 :
59858: CALL 71766 0 0
59862: GO 59895
59864: LD_INT 7
59866: DOUBLE
59867: EQUAL
59868: IFTRUE 59872
59870: GO 59879
59872: POP
// hHackChangeUnitSide ; 8 :
59873: CALL 71808 0 0
59877: GO 59895
59879: LD_INT 8
59881: DOUBLE
59882: EQUAL
59883: IFTRUE 59887
59885: GO 59894
59887: POP
// hHackFog ; end ;
59888: CALL 71909 0 0
59892: GO 59895
59894: POP
// end ; end ;
59895: LD_VAR 0 7
59899: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
59900: GO 59902
59902: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
59903: LD_STRING initStreamRollete();
59905: PPUSH
59906: CALL_OW 559
// InitStreamMode ;
59910: CALL 59919 0 0
// DefineStreamItems ( ) ;
59914: CALL 60359 0 0
// end ;
59918: END
// function InitStreamMode ; begin
59919: LD_INT 0
59921: PPUSH
// streamModeActive := false ;
59922: LD_ADDR_EXP 44
59926: PUSH
59927: LD_INT 0
59929: ST_TO_ADDR
// normalCounter := 36 ;
59930: LD_ADDR_EXP 45
59934: PUSH
59935: LD_INT 36
59937: ST_TO_ADDR
// hardcoreCounter := 16 ;
59938: LD_ADDR_EXP 46
59942: PUSH
59943: LD_INT 16
59945: ST_TO_ADDR
// sRocket := false ;
59946: LD_ADDR_EXP 49
59950: PUSH
59951: LD_INT 0
59953: ST_TO_ADDR
// sSpeed := false ;
59954: LD_ADDR_EXP 48
59958: PUSH
59959: LD_INT 0
59961: ST_TO_ADDR
// sEngine := false ;
59962: LD_ADDR_EXP 50
59966: PUSH
59967: LD_INT 0
59969: ST_TO_ADDR
// sSpec := false ;
59970: LD_ADDR_EXP 47
59974: PUSH
59975: LD_INT 0
59977: ST_TO_ADDR
// sLevel := false ;
59978: LD_ADDR_EXP 51
59982: PUSH
59983: LD_INT 0
59985: ST_TO_ADDR
// sArmoury := false ;
59986: LD_ADDR_EXP 52
59990: PUSH
59991: LD_INT 0
59993: ST_TO_ADDR
// sRadar := false ;
59994: LD_ADDR_EXP 53
59998: PUSH
59999: LD_INT 0
60001: ST_TO_ADDR
// sBunker := false ;
60002: LD_ADDR_EXP 54
60006: PUSH
60007: LD_INT 0
60009: ST_TO_ADDR
// sHack := false ;
60010: LD_ADDR_EXP 55
60014: PUSH
60015: LD_INT 0
60017: ST_TO_ADDR
// sFire := false ;
60018: LD_ADDR_EXP 56
60022: PUSH
60023: LD_INT 0
60025: ST_TO_ADDR
// sRefresh := false ;
60026: LD_ADDR_EXP 57
60030: PUSH
60031: LD_INT 0
60033: ST_TO_ADDR
// sExp := false ;
60034: LD_ADDR_EXP 58
60038: PUSH
60039: LD_INT 0
60041: ST_TO_ADDR
// sDepot := false ;
60042: LD_ADDR_EXP 59
60046: PUSH
60047: LD_INT 0
60049: ST_TO_ADDR
// sFlag := false ;
60050: LD_ADDR_EXP 60
60054: PUSH
60055: LD_INT 0
60057: ST_TO_ADDR
// sKamikadze := false ;
60058: LD_ADDR_EXP 68
60062: PUSH
60063: LD_INT 0
60065: ST_TO_ADDR
// sTroll := false ;
60066: LD_ADDR_EXP 69
60070: PUSH
60071: LD_INT 0
60073: ST_TO_ADDR
// sSlow := false ;
60074: LD_ADDR_EXP 70
60078: PUSH
60079: LD_INT 0
60081: ST_TO_ADDR
// sLack := false ;
60082: LD_ADDR_EXP 71
60086: PUSH
60087: LD_INT 0
60089: ST_TO_ADDR
// sTank := false ;
60090: LD_ADDR_EXP 73
60094: PUSH
60095: LD_INT 0
60097: ST_TO_ADDR
// sRemote := false ;
60098: LD_ADDR_EXP 74
60102: PUSH
60103: LD_INT 0
60105: ST_TO_ADDR
// sPowell := false ;
60106: LD_ADDR_EXP 75
60110: PUSH
60111: LD_INT 0
60113: ST_TO_ADDR
// sTeleport := false ;
60114: LD_ADDR_EXP 78
60118: PUSH
60119: LD_INT 0
60121: ST_TO_ADDR
// sOilTower := false ;
60122: LD_ADDR_EXP 80
60126: PUSH
60127: LD_INT 0
60129: ST_TO_ADDR
// sShovel := false ;
60130: LD_ADDR_EXP 81
60134: PUSH
60135: LD_INT 0
60137: ST_TO_ADDR
// sSheik := false ;
60138: LD_ADDR_EXP 82
60142: PUSH
60143: LD_INT 0
60145: ST_TO_ADDR
// sEarthquake := false ;
60146: LD_ADDR_EXP 84
60150: PUSH
60151: LD_INT 0
60153: ST_TO_ADDR
// sAI := false ;
60154: LD_ADDR_EXP 85
60158: PUSH
60159: LD_INT 0
60161: ST_TO_ADDR
// sCargo := false ;
60162: LD_ADDR_EXP 88
60166: PUSH
60167: LD_INT 0
60169: ST_TO_ADDR
// sDLaser := false ;
60170: LD_ADDR_EXP 89
60174: PUSH
60175: LD_INT 0
60177: ST_TO_ADDR
// sExchange := false ;
60178: LD_ADDR_EXP 90
60182: PUSH
60183: LD_INT 0
60185: ST_TO_ADDR
// sFac := false ;
60186: LD_ADDR_EXP 91
60190: PUSH
60191: LD_INT 0
60193: ST_TO_ADDR
// sPower := false ;
60194: LD_ADDR_EXP 92
60198: PUSH
60199: LD_INT 0
60201: ST_TO_ADDR
// sRandom := false ;
60202: LD_ADDR_EXP 93
60206: PUSH
60207: LD_INT 0
60209: ST_TO_ADDR
// sShield := false ;
60210: LD_ADDR_EXP 94
60214: PUSH
60215: LD_INT 0
60217: ST_TO_ADDR
// sTime := false ;
60218: LD_ADDR_EXP 95
60222: PUSH
60223: LD_INT 0
60225: ST_TO_ADDR
// sTools := false ;
60226: LD_ADDR_EXP 96
60230: PUSH
60231: LD_INT 0
60233: ST_TO_ADDR
// sSold := false ;
60234: LD_ADDR_EXP 61
60238: PUSH
60239: LD_INT 0
60241: ST_TO_ADDR
// sDiff := false ;
60242: LD_ADDR_EXP 62
60246: PUSH
60247: LD_INT 0
60249: ST_TO_ADDR
// sFog := false ;
60250: LD_ADDR_EXP 65
60254: PUSH
60255: LD_INT 0
60257: ST_TO_ADDR
// sReset := false ;
60258: LD_ADDR_EXP 66
60262: PUSH
60263: LD_INT 0
60265: ST_TO_ADDR
// sSun := false ;
60266: LD_ADDR_EXP 67
60270: PUSH
60271: LD_INT 0
60273: ST_TO_ADDR
// sTiger := false ;
60274: LD_ADDR_EXP 63
60278: PUSH
60279: LD_INT 0
60281: ST_TO_ADDR
// sBomb := false ;
60282: LD_ADDR_EXP 64
60286: PUSH
60287: LD_INT 0
60289: ST_TO_ADDR
// sWound := false ;
60290: LD_ADDR_EXP 72
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// sBetray := false ;
60298: LD_ADDR_EXP 76
60302: PUSH
60303: LD_INT 0
60305: ST_TO_ADDR
// sContamin := false ;
60306: LD_ADDR_EXP 77
60310: PUSH
60311: LD_INT 0
60313: ST_TO_ADDR
// sOil := false ;
60314: LD_ADDR_EXP 79
60318: PUSH
60319: LD_INT 0
60321: ST_TO_ADDR
// sStu := false ;
60322: LD_ADDR_EXP 83
60326: PUSH
60327: LD_INT 0
60329: ST_TO_ADDR
// sBazooka := false ;
60330: LD_ADDR_EXP 86
60334: PUSH
60335: LD_INT 0
60337: ST_TO_ADDR
// sMortar := false ;
60338: LD_ADDR_EXP 87
60342: PUSH
60343: LD_INT 0
60345: ST_TO_ADDR
// sRanger := false ;
60346: LD_ADDR_EXP 97
60350: PUSH
60351: LD_INT 0
60353: ST_TO_ADDR
// end ;
60354: LD_VAR 0 1
60358: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
60359: LD_INT 0
60361: PPUSH
60362: PPUSH
60363: PPUSH
60364: PPUSH
60365: PPUSH
// result := [ ] ;
60366: LD_ADDR_VAR 0 1
60370: PUSH
60371: EMPTY
60372: ST_TO_ADDR
// if campaign_id = 1 then
60373: LD_OWVAR 69
60377: PUSH
60378: LD_INT 1
60380: EQUAL
60381: IFFALSE 63319
// begin case mission_number of 1 :
60383: LD_OWVAR 70
60387: PUSH
60388: LD_INT 1
60390: DOUBLE
60391: EQUAL
60392: IFTRUE 60396
60394: GO 60460
60396: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
60397: LD_ADDR_VAR 0 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: LD_INT 4
60407: PUSH
60408: LD_INT 11
60410: PUSH
60411: LD_INT 12
60413: PUSH
60414: LD_INT 15
60416: PUSH
60417: LD_INT 16
60419: PUSH
60420: LD_INT 22
60422: PUSH
60423: LD_INT 23
60425: PUSH
60426: LD_INT 26
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 101
60442: PUSH
60443: LD_INT 102
60445: PUSH
60446: LD_INT 106
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: ST_TO_ADDR
60458: GO 63317
60460: LD_INT 2
60462: DOUBLE
60463: EQUAL
60464: IFTRUE 60468
60466: GO 60540
60468: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
60469: LD_ADDR_VAR 0 1
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: LD_INT 4
60479: PUSH
60480: LD_INT 11
60482: PUSH
60483: LD_INT 12
60485: PUSH
60486: LD_INT 15
60488: PUSH
60489: LD_INT 16
60491: PUSH
60492: LD_INT 22
60494: PUSH
60495: LD_INT 23
60497: PUSH
60498: LD_INT 26
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 101
60514: PUSH
60515: LD_INT 102
60517: PUSH
60518: LD_INT 105
60520: PUSH
60521: LD_INT 106
60523: PUSH
60524: LD_INT 108
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: ST_TO_ADDR
60538: GO 63317
60540: LD_INT 3
60542: DOUBLE
60543: EQUAL
60544: IFTRUE 60548
60546: GO 60624
60548: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
60549: LD_ADDR_VAR 0 1
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 4
60559: PUSH
60560: LD_INT 5
60562: PUSH
60563: LD_INT 11
60565: PUSH
60566: LD_INT 12
60568: PUSH
60569: LD_INT 15
60571: PUSH
60572: LD_INT 16
60574: PUSH
60575: LD_INT 22
60577: PUSH
60578: LD_INT 26
60580: PUSH
60581: LD_INT 36
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 101
60598: PUSH
60599: LD_INT 102
60601: PUSH
60602: LD_INT 105
60604: PUSH
60605: LD_INT 106
60607: PUSH
60608: LD_INT 108
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: ST_TO_ADDR
60622: GO 63317
60624: LD_INT 4
60626: DOUBLE
60627: EQUAL
60628: IFTRUE 60632
60630: GO 60716
60632: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
60633: LD_ADDR_VAR 0 1
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 4
60643: PUSH
60644: LD_INT 5
60646: PUSH
60647: LD_INT 8
60649: PUSH
60650: LD_INT 11
60652: PUSH
60653: LD_INT 12
60655: PUSH
60656: LD_INT 15
60658: PUSH
60659: LD_INT 16
60661: PUSH
60662: LD_INT 22
60664: PUSH
60665: LD_INT 23
60667: PUSH
60668: LD_INT 26
60670: PUSH
60671: LD_INT 36
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 101
60690: PUSH
60691: LD_INT 102
60693: PUSH
60694: LD_INT 105
60696: PUSH
60697: LD_INT 106
60699: PUSH
60700: LD_INT 108
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: ST_TO_ADDR
60714: GO 63317
60716: LD_INT 5
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60724
60722: GO 60824
60724: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
60725: LD_ADDR_VAR 0 1
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 4
60735: PUSH
60736: LD_INT 5
60738: PUSH
60739: LD_INT 6
60741: PUSH
60742: LD_INT 8
60744: PUSH
60745: LD_INT 11
60747: PUSH
60748: LD_INT 12
60750: PUSH
60751: LD_INT 15
60753: PUSH
60754: LD_INT 16
60756: PUSH
60757: LD_INT 22
60759: PUSH
60760: LD_INT 23
60762: PUSH
60763: LD_INT 25
60765: PUSH
60766: LD_INT 26
60768: PUSH
60769: LD_INT 36
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 101
60790: PUSH
60791: LD_INT 102
60793: PUSH
60794: LD_INT 105
60796: PUSH
60797: LD_INT 106
60799: PUSH
60800: LD_INT 108
60802: PUSH
60803: LD_INT 109
60805: PUSH
60806: LD_INT 112
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: ST_TO_ADDR
60822: GO 63317
60824: LD_INT 6
60826: DOUBLE
60827: EQUAL
60828: IFTRUE 60832
60830: GO 60952
60832: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
60833: LD_ADDR_VAR 0 1
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 4
60843: PUSH
60844: LD_INT 5
60846: PUSH
60847: LD_INT 6
60849: PUSH
60850: LD_INT 8
60852: PUSH
60853: LD_INT 11
60855: PUSH
60856: LD_INT 12
60858: PUSH
60859: LD_INT 15
60861: PUSH
60862: LD_INT 16
60864: PUSH
60865: LD_INT 20
60867: PUSH
60868: LD_INT 21
60870: PUSH
60871: LD_INT 22
60873: PUSH
60874: LD_INT 23
60876: PUSH
60877: LD_INT 25
60879: PUSH
60880: LD_INT 26
60882: PUSH
60883: LD_INT 30
60885: PUSH
60886: LD_INT 31
60888: PUSH
60889: LD_INT 32
60891: PUSH
60892: LD_INT 36
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 101
60918: PUSH
60919: LD_INT 102
60921: PUSH
60922: LD_INT 105
60924: PUSH
60925: LD_INT 106
60927: PUSH
60928: LD_INT 108
60930: PUSH
60931: LD_INT 109
60933: PUSH
60934: LD_INT 112
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: ST_TO_ADDR
60950: GO 63317
60952: LD_INT 7
60954: DOUBLE
60955: EQUAL
60956: IFTRUE 60960
60958: GO 61060
60960: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
60961: LD_ADDR_VAR 0 1
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: LD_INT 7
60977: PUSH
60978: LD_INT 11
60980: PUSH
60981: LD_INT 12
60983: PUSH
60984: LD_INT 15
60986: PUSH
60987: LD_INT 16
60989: PUSH
60990: LD_INT 20
60992: PUSH
60993: LD_INT 21
60995: PUSH
60996: LD_INT 22
60998: PUSH
60999: LD_INT 23
61001: PUSH
61002: LD_INT 25
61004: PUSH
61005: LD_INT 26
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 101
61026: PUSH
61027: LD_INT 102
61029: PUSH
61030: LD_INT 103
61032: PUSH
61033: LD_INT 105
61035: PUSH
61036: LD_INT 106
61038: PUSH
61039: LD_INT 108
61041: PUSH
61042: LD_INT 112
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: ST_TO_ADDR
61058: GO 63317
61060: LD_INT 8
61062: DOUBLE
61063: EQUAL
61064: IFTRUE 61068
61066: GO 61196
61068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
61069: LD_ADDR_VAR 0 1
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 4
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: LD_INT 6
61085: PUSH
61086: LD_INT 7
61088: PUSH
61089: LD_INT 8
61091: PUSH
61092: LD_INT 11
61094: PUSH
61095: LD_INT 12
61097: PUSH
61098: LD_INT 15
61100: PUSH
61101: LD_INT 16
61103: PUSH
61104: LD_INT 20
61106: PUSH
61107: LD_INT 21
61109: PUSH
61110: LD_INT 22
61112: PUSH
61113: LD_INT 23
61115: PUSH
61116: LD_INT 25
61118: PUSH
61119: LD_INT 26
61121: PUSH
61122: LD_INT 30
61124: PUSH
61125: LD_INT 31
61127: PUSH
61128: LD_INT 32
61130: PUSH
61131: LD_INT 36
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 101
61158: PUSH
61159: LD_INT 102
61161: PUSH
61162: LD_INT 103
61164: PUSH
61165: LD_INT 105
61167: PUSH
61168: LD_INT 106
61170: PUSH
61171: LD_INT 108
61173: PUSH
61174: LD_INT 109
61176: PUSH
61177: LD_INT 112
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: ST_TO_ADDR
61194: GO 63317
61196: LD_INT 9
61198: DOUBLE
61199: EQUAL
61200: IFTRUE 61204
61202: GO 61340
61204: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
61205: LD_ADDR_VAR 0 1
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 4
61215: PUSH
61216: LD_INT 5
61218: PUSH
61219: LD_INT 6
61221: PUSH
61222: LD_INT 7
61224: PUSH
61225: LD_INT 8
61227: PUSH
61228: LD_INT 11
61230: PUSH
61231: LD_INT 12
61233: PUSH
61234: LD_INT 15
61236: PUSH
61237: LD_INT 16
61239: PUSH
61240: LD_INT 20
61242: PUSH
61243: LD_INT 21
61245: PUSH
61246: LD_INT 22
61248: PUSH
61249: LD_INT 23
61251: PUSH
61252: LD_INT 25
61254: PUSH
61255: LD_INT 26
61257: PUSH
61258: LD_INT 28
61260: PUSH
61261: LD_INT 30
61263: PUSH
61264: LD_INT 31
61266: PUSH
61267: LD_INT 32
61269: PUSH
61270: LD_INT 36
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 101
61298: PUSH
61299: LD_INT 102
61301: PUSH
61302: LD_INT 103
61304: PUSH
61305: LD_INT 105
61307: PUSH
61308: LD_INT 106
61310: PUSH
61311: LD_INT 108
61313: PUSH
61314: LD_INT 109
61316: PUSH
61317: LD_INT 112
61319: PUSH
61320: LD_INT 114
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: ST_TO_ADDR
61338: GO 63317
61340: LD_INT 10
61342: DOUBLE
61343: EQUAL
61344: IFTRUE 61348
61346: GO 61532
61348: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
61349: LD_ADDR_VAR 0 1
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: LD_INT 6
61365: PUSH
61366: LD_INT 7
61368: PUSH
61369: LD_INT 8
61371: PUSH
61372: LD_INT 9
61374: PUSH
61375: LD_INT 10
61377: PUSH
61378: LD_INT 11
61380: PUSH
61381: LD_INT 12
61383: PUSH
61384: LD_INT 13
61386: PUSH
61387: LD_INT 14
61389: PUSH
61390: LD_INT 15
61392: PUSH
61393: LD_INT 16
61395: PUSH
61396: LD_INT 17
61398: PUSH
61399: LD_INT 18
61401: PUSH
61402: LD_INT 19
61404: PUSH
61405: LD_INT 20
61407: PUSH
61408: LD_INT 21
61410: PUSH
61411: LD_INT 22
61413: PUSH
61414: LD_INT 23
61416: PUSH
61417: LD_INT 24
61419: PUSH
61420: LD_INT 25
61422: PUSH
61423: LD_INT 26
61425: PUSH
61426: LD_INT 28
61428: PUSH
61429: LD_INT 30
61431: PUSH
61432: LD_INT 31
61434: PUSH
61435: LD_INT 32
61437: PUSH
61438: LD_INT 36
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 101
61474: PUSH
61475: LD_INT 102
61477: PUSH
61478: LD_INT 103
61480: PUSH
61481: LD_INT 104
61483: PUSH
61484: LD_INT 105
61486: PUSH
61487: LD_INT 106
61489: PUSH
61490: LD_INT 107
61492: PUSH
61493: LD_INT 108
61495: PUSH
61496: LD_INT 109
61498: PUSH
61499: LD_INT 110
61501: PUSH
61502: LD_INT 111
61504: PUSH
61505: LD_INT 112
61507: PUSH
61508: LD_INT 114
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: ST_TO_ADDR
61530: GO 63317
61532: LD_INT 11
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61540
61538: GO 61732
61540: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
61541: LD_ADDR_VAR 0 1
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: LD_INT 5
61557: PUSH
61558: LD_INT 6
61560: PUSH
61561: LD_INT 7
61563: PUSH
61564: LD_INT 8
61566: PUSH
61567: LD_INT 9
61569: PUSH
61570: LD_INT 10
61572: PUSH
61573: LD_INT 11
61575: PUSH
61576: LD_INT 12
61578: PUSH
61579: LD_INT 13
61581: PUSH
61582: LD_INT 14
61584: PUSH
61585: LD_INT 15
61587: PUSH
61588: LD_INT 16
61590: PUSH
61591: LD_INT 17
61593: PUSH
61594: LD_INT 18
61596: PUSH
61597: LD_INT 19
61599: PUSH
61600: LD_INT 20
61602: PUSH
61603: LD_INT 21
61605: PUSH
61606: LD_INT 22
61608: PUSH
61609: LD_INT 23
61611: PUSH
61612: LD_INT 24
61614: PUSH
61615: LD_INT 25
61617: PUSH
61618: LD_INT 26
61620: PUSH
61621: LD_INT 28
61623: PUSH
61624: LD_INT 30
61626: PUSH
61627: LD_INT 31
61629: PUSH
61630: LD_INT 32
61632: PUSH
61633: LD_INT 34
61635: PUSH
61636: LD_INT 36
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 101
61674: PUSH
61675: LD_INT 102
61677: PUSH
61678: LD_INT 103
61680: PUSH
61681: LD_INT 104
61683: PUSH
61684: LD_INT 105
61686: PUSH
61687: LD_INT 106
61689: PUSH
61690: LD_INT 107
61692: PUSH
61693: LD_INT 108
61695: PUSH
61696: LD_INT 109
61698: PUSH
61699: LD_INT 110
61701: PUSH
61702: LD_INT 111
61704: PUSH
61705: LD_INT 112
61707: PUSH
61708: LD_INT 114
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: ST_TO_ADDR
61730: GO 63317
61732: LD_INT 12
61734: DOUBLE
61735: EQUAL
61736: IFTRUE 61740
61738: GO 61948
61740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
61741: LD_ADDR_VAR 0 1
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 4
61757: PUSH
61758: LD_INT 5
61760: PUSH
61761: LD_INT 6
61763: PUSH
61764: LD_INT 7
61766: PUSH
61767: LD_INT 8
61769: PUSH
61770: LD_INT 9
61772: PUSH
61773: LD_INT 10
61775: PUSH
61776: LD_INT 11
61778: PUSH
61779: LD_INT 12
61781: PUSH
61782: LD_INT 13
61784: PUSH
61785: LD_INT 14
61787: PUSH
61788: LD_INT 15
61790: PUSH
61791: LD_INT 16
61793: PUSH
61794: LD_INT 17
61796: PUSH
61797: LD_INT 18
61799: PUSH
61800: LD_INT 19
61802: PUSH
61803: LD_INT 20
61805: PUSH
61806: LD_INT 21
61808: PUSH
61809: LD_INT 22
61811: PUSH
61812: LD_INT 23
61814: PUSH
61815: LD_INT 24
61817: PUSH
61818: LD_INT 25
61820: PUSH
61821: LD_INT 26
61823: PUSH
61824: LD_INT 27
61826: PUSH
61827: LD_INT 28
61829: PUSH
61830: LD_INT 30
61832: PUSH
61833: LD_INT 31
61835: PUSH
61836: LD_INT 32
61838: PUSH
61839: LD_INT 33
61841: PUSH
61842: LD_INT 34
61844: PUSH
61845: LD_INT 36
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 101
61886: PUSH
61887: LD_INT 102
61889: PUSH
61890: LD_INT 103
61892: PUSH
61893: LD_INT 104
61895: PUSH
61896: LD_INT 105
61898: PUSH
61899: LD_INT 106
61901: PUSH
61902: LD_INT 107
61904: PUSH
61905: LD_INT 108
61907: PUSH
61908: LD_INT 109
61910: PUSH
61911: LD_INT 110
61913: PUSH
61914: LD_INT 111
61916: PUSH
61917: LD_INT 112
61919: PUSH
61920: LD_INT 113
61922: PUSH
61923: LD_INT 114
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: ST_TO_ADDR
61946: GO 63317
61948: LD_INT 13
61950: DOUBLE
61951: EQUAL
61952: IFTRUE 61956
61954: GO 62152
61956: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
61957: LD_ADDR_VAR 0 1
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: LD_INT 5
61976: PUSH
61977: LD_INT 8
61979: PUSH
61980: LD_INT 9
61982: PUSH
61983: LD_INT 10
61985: PUSH
61986: LD_INT 11
61988: PUSH
61989: LD_INT 12
61991: PUSH
61992: LD_INT 14
61994: PUSH
61995: LD_INT 15
61997: PUSH
61998: LD_INT 16
62000: PUSH
62001: LD_INT 17
62003: PUSH
62004: LD_INT 18
62006: PUSH
62007: LD_INT 19
62009: PUSH
62010: LD_INT 20
62012: PUSH
62013: LD_INT 21
62015: PUSH
62016: LD_INT 22
62018: PUSH
62019: LD_INT 23
62021: PUSH
62022: LD_INT 24
62024: PUSH
62025: LD_INT 25
62027: PUSH
62028: LD_INT 26
62030: PUSH
62031: LD_INT 27
62033: PUSH
62034: LD_INT 28
62036: PUSH
62037: LD_INT 30
62039: PUSH
62040: LD_INT 31
62042: PUSH
62043: LD_INT 32
62045: PUSH
62046: LD_INT 33
62048: PUSH
62049: LD_INT 34
62051: PUSH
62052: LD_INT 36
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 101
62090: PUSH
62091: LD_INT 102
62093: PUSH
62094: LD_INT 103
62096: PUSH
62097: LD_INT 104
62099: PUSH
62100: LD_INT 105
62102: PUSH
62103: LD_INT 106
62105: PUSH
62106: LD_INT 107
62108: PUSH
62109: LD_INT 108
62111: PUSH
62112: LD_INT 109
62114: PUSH
62115: LD_INT 110
62117: PUSH
62118: LD_INT 111
62120: PUSH
62121: LD_INT 112
62123: PUSH
62124: LD_INT 113
62126: PUSH
62127: LD_INT 114
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: ST_TO_ADDR
62150: GO 63317
62152: LD_INT 14
62154: DOUBLE
62155: EQUAL
62156: IFTRUE 62160
62158: GO 62372
62160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
62161: LD_ADDR_VAR 0 1
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 3
62174: PUSH
62175: LD_INT 4
62177: PUSH
62178: LD_INT 5
62180: PUSH
62181: LD_INT 6
62183: PUSH
62184: LD_INT 7
62186: PUSH
62187: LD_INT 8
62189: PUSH
62190: LD_INT 9
62192: PUSH
62193: LD_INT 10
62195: PUSH
62196: LD_INT 11
62198: PUSH
62199: LD_INT 12
62201: PUSH
62202: LD_INT 13
62204: PUSH
62205: LD_INT 14
62207: PUSH
62208: LD_INT 15
62210: PUSH
62211: LD_INT 16
62213: PUSH
62214: LD_INT 17
62216: PUSH
62217: LD_INT 18
62219: PUSH
62220: LD_INT 19
62222: PUSH
62223: LD_INT 20
62225: PUSH
62226: LD_INT 21
62228: PUSH
62229: LD_INT 22
62231: PUSH
62232: LD_INT 23
62234: PUSH
62235: LD_INT 24
62237: PUSH
62238: LD_INT 25
62240: PUSH
62241: LD_INT 26
62243: PUSH
62244: LD_INT 27
62246: PUSH
62247: LD_INT 28
62249: PUSH
62250: LD_INT 29
62252: PUSH
62253: LD_INT 30
62255: PUSH
62256: LD_INT 31
62258: PUSH
62259: LD_INT 32
62261: PUSH
62262: LD_INT 33
62264: PUSH
62265: LD_INT 34
62267: PUSH
62268: LD_INT 36
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 101
62310: PUSH
62311: LD_INT 102
62313: PUSH
62314: LD_INT 103
62316: PUSH
62317: LD_INT 104
62319: PUSH
62320: LD_INT 105
62322: PUSH
62323: LD_INT 106
62325: PUSH
62326: LD_INT 107
62328: PUSH
62329: LD_INT 108
62331: PUSH
62332: LD_INT 109
62334: PUSH
62335: LD_INT 110
62337: PUSH
62338: LD_INT 111
62340: PUSH
62341: LD_INT 112
62343: PUSH
62344: LD_INT 113
62346: PUSH
62347: LD_INT 114
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: ST_TO_ADDR
62370: GO 63317
62372: LD_INT 15
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62380
62378: GO 62592
62380: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
62381: LD_ADDR_VAR 0 1
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: LD_INT 5
62400: PUSH
62401: LD_INT 6
62403: PUSH
62404: LD_INT 7
62406: PUSH
62407: LD_INT 8
62409: PUSH
62410: LD_INT 9
62412: PUSH
62413: LD_INT 10
62415: PUSH
62416: LD_INT 11
62418: PUSH
62419: LD_INT 12
62421: PUSH
62422: LD_INT 13
62424: PUSH
62425: LD_INT 14
62427: PUSH
62428: LD_INT 15
62430: PUSH
62431: LD_INT 16
62433: PUSH
62434: LD_INT 17
62436: PUSH
62437: LD_INT 18
62439: PUSH
62440: LD_INT 19
62442: PUSH
62443: LD_INT 20
62445: PUSH
62446: LD_INT 21
62448: PUSH
62449: LD_INT 22
62451: PUSH
62452: LD_INT 23
62454: PUSH
62455: LD_INT 24
62457: PUSH
62458: LD_INT 25
62460: PUSH
62461: LD_INT 26
62463: PUSH
62464: LD_INT 27
62466: PUSH
62467: LD_INT 28
62469: PUSH
62470: LD_INT 29
62472: PUSH
62473: LD_INT 30
62475: PUSH
62476: LD_INT 31
62478: PUSH
62479: LD_INT 32
62481: PUSH
62482: LD_INT 33
62484: PUSH
62485: LD_INT 34
62487: PUSH
62488: LD_INT 36
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 101
62530: PUSH
62531: LD_INT 102
62533: PUSH
62534: LD_INT 103
62536: PUSH
62537: LD_INT 104
62539: PUSH
62540: LD_INT 105
62542: PUSH
62543: LD_INT 106
62545: PUSH
62546: LD_INT 107
62548: PUSH
62549: LD_INT 108
62551: PUSH
62552: LD_INT 109
62554: PUSH
62555: LD_INT 110
62557: PUSH
62558: LD_INT 111
62560: PUSH
62561: LD_INT 112
62563: PUSH
62564: LD_INT 113
62566: PUSH
62567: LD_INT 114
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: ST_TO_ADDR
62590: GO 63317
62592: LD_INT 16
62594: DOUBLE
62595: EQUAL
62596: IFTRUE 62600
62598: GO 62724
62600: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
62601: LD_ADDR_VAR 0 1
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: LD_INT 5
62614: PUSH
62615: LD_INT 7
62617: PUSH
62618: LD_INT 11
62620: PUSH
62621: LD_INT 12
62623: PUSH
62624: LD_INT 15
62626: PUSH
62627: LD_INT 16
62629: PUSH
62630: LD_INT 20
62632: PUSH
62633: LD_INT 21
62635: PUSH
62636: LD_INT 22
62638: PUSH
62639: LD_INT 23
62641: PUSH
62642: LD_INT 25
62644: PUSH
62645: LD_INT 26
62647: PUSH
62648: LD_INT 30
62650: PUSH
62651: LD_INT 31
62653: PUSH
62654: LD_INT 32
62656: PUSH
62657: LD_INT 33
62659: PUSH
62660: LD_INT 34
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 101
62686: PUSH
62687: LD_INT 102
62689: PUSH
62690: LD_INT 103
62692: PUSH
62693: LD_INT 106
62695: PUSH
62696: LD_INT 108
62698: PUSH
62699: LD_INT 112
62701: PUSH
62702: LD_INT 113
62704: PUSH
62705: LD_INT 114
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: ST_TO_ADDR
62722: GO 63317
62724: LD_INT 17
62726: DOUBLE
62727: EQUAL
62728: IFTRUE 62732
62730: GO 62944
62732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
62733: LD_ADDR_VAR 0 1
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 3
62746: PUSH
62747: LD_INT 4
62749: PUSH
62750: LD_INT 5
62752: PUSH
62753: LD_INT 6
62755: PUSH
62756: LD_INT 7
62758: PUSH
62759: LD_INT 8
62761: PUSH
62762: LD_INT 9
62764: PUSH
62765: LD_INT 10
62767: PUSH
62768: LD_INT 11
62770: PUSH
62771: LD_INT 12
62773: PUSH
62774: LD_INT 13
62776: PUSH
62777: LD_INT 14
62779: PUSH
62780: LD_INT 15
62782: PUSH
62783: LD_INT 16
62785: PUSH
62786: LD_INT 17
62788: PUSH
62789: LD_INT 18
62791: PUSH
62792: LD_INT 19
62794: PUSH
62795: LD_INT 20
62797: PUSH
62798: LD_INT 21
62800: PUSH
62801: LD_INT 22
62803: PUSH
62804: LD_INT 23
62806: PUSH
62807: LD_INT 24
62809: PUSH
62810: LD_INT 25
62812: PUSH
62813: LD_INT 26
62815: PUSH
62816: LD_INT 27
62818: PUSH
62819: LD_INT 28
62821: PUSH
62822: LD_INT 29
62824: PUSH
62825: LD_INT 30
62827: PUSH
62828: LD_INT 31
62830: PUSH
62831: LD_INT 32
62833: PUSH
62834: LD_INT 33
62836: PUSH
62837: LD_INT 34
62839: PUSH
62840: LD_INT 36
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 101
62882: PUSH
62883: LD_INT 102
62885: PUSH
62886: LD_INT 103
62888: PUSH
62889: LD_INT 104
62891: PUSH
62892: LD_INT 105
62894: PUSH
62895: LD_INT 106
62897: PUSH
62898: LD_INT 107
62900: PUSH
62901: LD_INT 108
62903: PUSH
62904: LD_INT 109
62906: PUSH
62907: LD_INT 110
62909: PUSH
62910: LD_INT 111
62912: PUSH
62913: LD_INT 112
62915: PUSH
62916: LD_INT 113
62918: PUSH
62919: LD_INT 114
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: ST_TO_ADDR
62942: GO 63317
62944: LD_INT 18
62946: DOUBLE
62947: EQUAL
62948: IFTRUE 62952
62950: GO 63088
62952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
62953: LD_ADDR_VAR 0 1
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: LD_INT 5
62966: PUSH
62967: LD_INT 7
62969: PUSH
62970: LD_INT 11
62972: PUSH
62973: LD_INT 12
62975: PUSH
62976: LD_INT 15
62978: PUSH
62979: LD_INT 16
62981: PUSH
62982: LD_INT 20
62984: PUSH
62985: LD_INT 21
62987: PUSH
62988: LD_INT 22
62990: PUSH
62991: LD_INT 23
62993: PUSH
62994: LD_INT 25
62996: PUSH
62997: LD_INT 26
62999: PUSH
63000: LD_INT 30
63002: PUSH
63003: LD_INT 31
63005: PUSH
63006: LD_INT 32
63008: PUSH
63009: LD_INT 33
63011: PUSH
63012: LD_INT 34
63014: PUSH
63015: LD_INT 35
63017: PUSH
63018: LD_INT 36
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 101
63046: PUSH
63047: LD_INT 102
63049: PUSH
63050: LD_INT 103
63052: PUSH
63053: LD_INT 106
63055: PUSH
63056: LD_INT 108
63058: PUSH
63059: LD_INT 112
63061: PUSH
63062: LD_INT 113
63064: PUSH
63065: LD_INT 114
63067: PUSH
63068: LD_INT 115
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: ST_TO_ADDR
63086: GO 63317
63088: LD_INT 19
63090: DOUBLE
63091: EQUAL
63092: IFTRUE 63096
63094: GO 63316
63096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
63097: LD_ADDR_VAR 0 1
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: LD_INT 4
63113: PUSH
63114: LD_INT 5
63116: PUSH
63117: LD_INT 6
63119: PUSH
63120: LD_INT 7
63122: PUSH
63123: LD_INT 8
63125: PUSH
63126: LD_INT 9
63128: PUSH
63129: LD_INT 10
63131: PUSH
63132: LD_INT 11
63134: PUSH
63135: LD_INT 12
63137: PUSH
63138: LD_INT 13
63140: PUSH
63141: LD_INT 14
63143: PUSH
63144: LD_INT 15
63146: PUSH
63147: LD_INT 16
63149: PUSH
63150: LD_INT 17
63152: PUSH
63153: LD_INT 18
63155: PUSH
63156: LD_INT 19
63158: PUSH
63159: LD_INT 20
63161: PUSH
63162: LD_INT 21
63164: PUSH
63165: LD_INT 22
63167: PUSH
63168: LD_INT 23
63170: PUSH
63171: LD_INT 24
63173: PUSH
63174: LD_INT 25
63176: PUSH
63177: LD_INT 26
63179: PUSH
63180: LD_INT 27
63182: PUSH
63183: LD_INT 28
63185: PUSH
63186: LD_INT 29
63188: PUSH
63189: LD_INT 30
63191: PUSH
63192: LD_INT 31
63194: PUSH
63195: LD_INT 32
63197: PUSH
63198: LD_INT 33
63200: PUSH
63201: LD_INT 34
63203: PUSH
63204: LD_INT 35
63206: PUSH
63207: LD_INT 36
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 101
63250: PUSH
63251: LD_INT 102
63253: PUSH
63254: LD_INT 103
63256: PUSH
63257: LD_INT 104
63259: PUSH
63260: LD_INT 105
63262: PUSH
63263: LD_INT 106
63265: PUSH
63266: LD_INT 107
63268: PUSH
63269: LD_INT 108
63271: PUSH
63272: LD_INT 109
63274: PUSH
63275: LD_INT 110
63277: PUSH
63278: LD_INT 111
63280: PUSH
63281: LD_INT 112
63283: PUSH
63284: LD_INT 113
63286: PUSH
63287: LD_INT 114
63289: PUSH
63290: LD_INT 115
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: ST_TO_ADDR
63314: GO 63317
63316: POP
// end else
63317: GO 63536
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
63319: LD_ADDR_VAR 0 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 2
63329: PUSH
63330: LD_INT 3
63332: PUSH
63333: LD_INT 4
63335: PUSH
63336: LD_INT 5
63338: PUSH
63339: LD_INT 6
63341: PUSH
63342: LD_INT 7
63344: PUSH
63345: LD_INT 8
63347: PUSH
63348: LD_INT 9
63350: PUSH
63351: LD_INT 10
63353: PUSH
63354: LD_INT 11
63356: PUSH
63357: LD_INT 12
63359: PUSH
63360: LD_INT 13
63362: PUSH
63363: LD_INT 14
63365: PUSH
63366: LD_INT 15
63368: PUSH
63369: LD_INT 16
63371: PUSH
63372: LD_INT 17
63374: PUSH
63375: LD_INT 18
63377: PUSH
63378: LD_INT 19
63380: PUSH
63381: LD_INT 20
63383: PUSH
63384: LD_INT 21
63386: PUSH
63387: LD_INT 22
63389: PUSH
63390: LD_INT 23
63392: PUSH
63393: LD_INT 24
63395: PUSH
63396: LD_INT 25
63398: PUSH
63399: LD_INT 26
63401: PUSH
63402: LD_INT 27
63404: PUSH
63405: LD_INT 28
63407: PUSH
63408: LD_INT 29
63410: PUSH
63411: LD_INT 30
63413: PUSH
63414: LD_INT 31
63416: PUSH
63417: LD_INT 32
63419: PUSH
63420: LD_INT 33
63422: PUSH
63423: LD_INT 34
63425: PUSH
63426: LD_INT 35
63428: PUSH
63429: LD_INT 36
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 101
63472: PUSH
63473: LD_INT 102
63475: PUSH
63476: LD_INT 103
63478: PUSH
63479: LD_INT 104
63481: PUSH
63482: LD_INT 105
63484: PUSH
63485: LD_INT 106
63487: PUSH
63488: LD_INT 107
63490: PUSH
63491: LD_INT 108
63493: PUSH
63494: LD_INT 109
63496: PUSH
63497: LD_INT 110
63499: PUSH
63500: LD_INT 111
63502: PUSH
63503: LD_INT 112
63505: PUSH
63506: LD_INT 113
63508: PUSH
63509: LD_INT 114
63511: PUSH
63512: LD_INT 115
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: ST_TO_ADDR
// if result then
63536: LD_VAR 0 1
63540: IFFALSE 63829
// begin normal :=  ;
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_STRING 
63549: ST_TO_ADDR
// hardcore :=  ;
63550: LD_ADDR_VAR 0 4
63554: PUSH
63555: LD_STRING 
63557: ST_TO_ADDR
// for i = 1 to normalCounter do
63558: LD_ADDR_VAR 0 5
63562: PUSH
63563: DOUBLE
63564: LD_INT 1
63566: DEC
63567: ST_TO_ADDR
63568: LD_EXP 45
63572: PUSH
63573: FOR_TO
63574: IFFALSE 63675
// begin tmp := 0 ;
63576: LD_ADDR_VAR 0 2
63580: PUSH
63581: LD_STRING 0
63583: ST_TO_ADDR
// if result [ 1 ] then
63584: LD_VAR 0 1
63588: PUSH
63589: LD_INT 1
63591: ARRAY
63592: IFFALSE 63657
// if result [ 1 ] [ 1 ] = i then
63594: LD_VAR 0 1
63598: PUSH
63599: LD_INT 1
63601: ARRAY
63602: PUSH
63603: LD_INT 1
63605: ARRAY
63606: PUSH
63607: LD_VAR 0 5
63611: EQUAL
63612: IFFALSE 63657
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63614: LD_ADDR_VAR 0 1
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: LD_INT 1
63626: PPUSH
63627: LD_VAR 0 1
63631: PUSH
63632: LD_INT 1
63634: ARRAY
63635: PPUSH
63636: LD_INT 1
63638: PPUSH
63639: CALL_OW 3
63643: PPUSH
63644: CALL_OW 1
63648: ST_TO_ADDR
// tmp := 1 ;
63649: LD_ADDR_VAR 0 2
63653: PUSH
63654: LD_STRING 1
63656: ST_TO_ADDR
// end ; normal := normal & tmp ;
63657: LD_ADDR_VAR 0 3
63661: PUSH
63662: LD_VAR 0 3
63666: PUSH
63667: LD_VAR 0 2
63671: STR
63672: ST_TO_ADDR
// end ;
63673: GO 63573
63675: POP
63676: POP
// for i = 1 to hardcoreCounter do
63677: LD_ADDR_VAR 0 5
63681: PUSH
63682: DOUBLE
63683: LD_INT 1
63685: DEC
63686: ST_TO_ADDR
63687: LD_EXP 46
63691: PUSH
63692: FOR_TO
63693: IFFALSE 63798
// begin tmp := 0 ;
63695: LD_ADDR_VAR 0 2
63699: PUSH
63700: LD_STRING 0
63702: ST_TO_ADDR
// if result [ 2 ] then
63703: LD_VAR 0 1
63707: PUSH
63708: LD_INT 2
63710: ARRAY
63711: IFFALSE 63780
// if result [ 2 ] [ 1 ] = 100 + i then
63713: LD_VAR 0 1
63717: PUSH
63718: LD_INT 2
63720: ARRAY
63721: PUSH
63722: LD_INT 1
63724: ARRAY
63725: PUSH
63726: LD_INT 100
63728: PUSH
63729: LD_VAR 0 5
63733: PLUS
63734: EQUAL
63735: IFFALSE 63780
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63737: LD_ADDR_VAR 0 1
63741: PUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: LD_INT 2
63749: PPUSH
63750: LD_VAR 0 1
63754: PUSH
63755: LD_INT 2
63757: ARRAY
63758: PPUSH
63759: LD_INT 1
63761: PPUSH
63762: CALL_OW 3
63766: PPUSH
63767: CALL_OW 1
63771: ST_TO_ADDR
// tmp := 1 ;
63772: LD_ADDR_VAR 0 2
63776: PUSH
63777: LD_STRING 1
63779: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63780: LD_ADDR_VAR 0 4
63784: PUSH
63785: LD_VAR 0 4
63789: PUSH
63790: LD_VAR 0 2
63794: STR
63795: ST_TO_ADDR
// end ;
63796: GO 63692
63798: POP
63799: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
63800: LD_STRING getStreamItemsFromMission("
63802: PUSH
63803: LD_VAR 0 3
63807: STR
63808: PUSH
63809: LD_STRING ","
63811: STR
63812: PUSH
63813: LD_VAR 0 4
63817: STR
63818: PUSH
63819: LD_STRING ")
63821: STR
63822: PPUSH
63823: CALL_OW 559
// end else
63827: GO 63836
// ToLua ( getStreamItemsFromMission("","") ) ;
63829: LD_STRING getStreamItemsFromMission("","")
63831: PPUSH
63832: CALL_OW 559
// end ;
63836: LD_VAR 0 1
63840: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63841: LD_EXP 44
63845: PUSH
63846: LD_EXP 49
63850: AND
63851: IFFALSE 63975
63853: GO 63855
63855: DISABLE
63856: LD_INT 0
63858: PPUSH
63859: PPUSH
// begin enable ;
63860: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63861: LD_ADDR_VAR 0 2
63865: PUSH
63866: LD_INT 22
63868: PUSH
63869: LD_OWVAR 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: LD_INT 34
63883: PUSH
63884: LD_INT 7
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 34
63893: PUSH
63894: LD_INT 45
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 34
63903: PUSH
63904: LD_INT 28
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 34
63913: PUSH
63914: LD_INT 47
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PPUSH
63932: CALL_OW 69
63936: ST_TO_ADDR
// if not tmp then
63937: LD_VAR 0 2
63941: NOT
63942: IFFALSE 63946
// exit ;
63944: GO 63975
// for i in tmp do
63946: LD_ADDR_VAR 0 1
63950: PUSH
63951: LD_VAR 0 2
63955: PUSH
63956: FOR_IN
63957: IFFALSE 63973
// begin SetLives ( i , 0 ) ;
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_INT 0
63966: PPUSH
63967: CALL_OW 234
// end ;
63971: GO 63956
63973: POP
63974: POP
// end ;
63975: PPOPN 2
63977: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63978: LD_EXP 44
63982: PUSH
63983: LD_EXP 50
63987: AND
63988: IFFALSE 64072
63990: GO 63992
63992: DISABLE
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
// begin enable ;
63997: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63998: LD_ADDR_VAR 0 2
64002: PUSH
64003: LD_INT 22
64005: PUSH
64006: LD_OWVAR 2
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 32
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PPUSH
64029: CALL_OW 69
64033: ST_TO_ADDR
// if not tmp then
64034: LD_VAR 0 2
64038: NOT
64039: IFFALSE 64043
// exit ;
64041: GO 64072
// for i in tmp do
64043: LD_ADDR_VAR 0 1
64047: PUSH
64048: LD_VAR 0 2
64052: PUSH
64053: FOR_IN
64054: IFFALSE 64070
// begin SetLives ( i , 0 ) ;
64056: LD_VAR 0 1
64060: PPUSH
64061: LD_INT 0
64063: PPUSH
64064: CALL_OW 234
// end ;
64068: GO 64053
64070: POP
64071: POP
// end ;
64072: PPOPN 2
64074: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64075: LD_EXP 44
64079: PUSH
64080: LD_EXP 47
64084: AND
64085: IFFALSE 64178
64087: GO 64089
64089: DISABLE
64090: LD_INT 0
64092: PPUSH
// begin enable ;
64093: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64094: LD_ADDR_VAR 0 1
64098: PUSH
64099: LD_INT 22
64101: PUSH
64102: LD_OWVAR 2
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: LD_INT 25
64116: PUSH
64117: LD_INT 5
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 25
64126: PUSH
64127: LD_INT 9
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 25
64136: PUSH
64137: LD_INT 8
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PPUSH
64154: CALL_OW 69
64158: PUSH
64159: FOR_IN
64160: IFFALSE 64176
// begin SetClass ( i , 1 ) ;
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_INT 1
64169: PPUSH
64170: CALL_OW 336
// end ;
64174: GO 64159
64176: POP
64177: POP
// end ;
64178: PPOPN 1
64180: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64181: LD_EXP 44
64185: PUSH
64186: LD_EXP 48
64190: AND
64191: PUSH
64192: LD_OWVAR 65
64196: PUSH
64197: LD_INT 7
64199: LESS
64200: AND
64201: IFFALSE 64215
64203: GO 64205
64205: DISABLE
// begin enable ;
64206: ENABLE
// game_speed := 7 ;
64207: LD_ADDR_OWVAR 65
64211: PUSH
64212: LD_INT 7
64214: ST_TO_ADDR
// end ;
64215: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64216: LD_EXP 44
64220: PUSH
64221: LD_EXP 51
64225: AND
64226: IFFALSE 64428
64228: GO 64230
64230: DISABLE
64231: LD_INT 0
64233: PPUSH
64234: PPUSH
64235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64236: LD_ADDR_VAR 0 3
64240: PUSH
64241: LD_INT 81
64243: PUSH
64244: LD_OWVAR 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 21
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PPUSH
64267: CALL_OW 69
64271: ST_TO_ADDR
// if not tmp then
64272: LD_VAR 0 3
64276: NOT
64277: IFFALSE 64281
// exit ;
64279: GO 64428
// if tmp > 5 then
64281: LD_VAR 0 3
64285: PUSH
64286: LD_INT 5
64288: GREATER
64289: IFFALSE 64301
// k := 5 else
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: LD_INT 5
64298: ST_TO_ADDR
64299: GO 64311
// k := tmp ;
64301: LD_ADDR_VAR 0 2
64305: PUSH
64306: LD_VAR 0 3
64310: ST_TO_ADDR
// for i := 1 to k do
64311: LD_ADDR_VAR 0 1
64315: PUSH
64316: DOUBLE
64317: LD_INT 1
64319: DEC
64320: ST_TO_ADDR
64321: LD_VAR 0 2
64325: PUSH
64326: FOR_TO
64327: IFFALSE 64426
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64329: LD_VAR 0 3
64333: PUSH
64334: LD_VAR 0 1
64338: ARRAY
64339: PPUSH
64340: LD_VAR 0 1
64344: PUSH
64345: LD_INT 4
64347: MOD
64348: PUSH
64349: LD_INT 1
64351: PLUS
64352: PPUSH
64353: CALL_OW 259
64357: PUSH
64358: LD_INT 10
64360: LESS
64361: IFFALSE 64424
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64363: LD_VAR 0 3
64367: PUSH
64368: LD_VAR 0 1
64372: ARRAY
64373: PPUSH
64374: LD_VAR 0 1
64378: PUSH
64379: LD_INT 4
64381: MOD
64382: PUSH
64383: LD_INT 1
64385: PLUS
64386: PPUSH
64387: LD_VAR 0 3
64391: PUSH
64392: LD_VAR 0 1
64396: ARRAY
64397: PPUSH
64398: LD_VAR 0 1
64402: PUSH
64403: LD_INT 4
64405: MOD
64406: PUSH
64407: LD_INT 1
64409: PLUS
64410: PPUSH
64411: CALL_OW 259
64415: PUSH
64416: LD_INT 1
64418: PLUS
64419: PPUSH
64420: CALL_OW 237
64424: GO 64326
64426: POP
64427: POP
// end ;
64428: PPOPN 3
64430: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64431: LD_EXP 44
64435: PUSH
64436: LD_EXP 52
64440: AND
64441: IFFALSE 64461
64443: GO 64445
64445: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64446: LD_INT 4
64448: PPUSH
64449: LD_OWVAR 2
64453: PPUSH
64454: LD_INT 0
64456: PPUSH
64457: CALL_OW 324
64461: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64462: LD_EXP 44
64466: PUSH
64467: LD_EXP 81
64471: AND
64472: IFFALSE 64492
64474: GO 64476
64476: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64477: LD_INT 19
64479: PPUSH
64480: LD_OWVAR 2
64484: PPUSH
64485: LD_INT 0
64487: PPUSH
64488: CALL_OW 324
64492: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64493: LD_EXP 44
64497: PUSH
64498: LD_EXP 53
64502: AND
64503: IFFALSE 64605
64505: GO 64507
64507: DISABLE
64508: LD_INT 0
64510: PPUSH
64511: PPUSH
// begin enable ;
64512: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64513: LD_ADDR_VAR 0 2
64517: PUSH
64518: LD_INT 22
64520: PUSH
64521: LD_OWVAR 2
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 34
64535: PUSH
64536: LD_INT 11
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 34
64545: PUSH
64546: LD_INT 30
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PPUSH
64562: CALL_OW 69
64566: ST_TO_ADDR
// if not tmp then
64567: LD_VAR 0 2
64571: NOT
64572: IFFALSE 64576
// exit ;
64574: GO 64605
// for i in tmp do
64576: LD_ADDR_VAR 0 1
64580: PUSH
64581: LD_VAR 0 2
64585: PUSH
64586: FOR_IN
64587: IFFALSE 64603
// begin SetLives ( i , 0 ) ;
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_INT 0
64596: PPUSH
64597: CALL_OW 234
// end ;
64601: GO 64586
64603: POP
64604: POP
// end ;
64605: PPOPN 2
64607: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64608: LD_EXP 44
64612: PUSH
64613: LD_EXP 54
64617: AND
64618: IFFALSE 64638
64620: GO 64622
64622: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64623: LD_INT 32
64625: PPUSH
64626: LD_OWVAR 2
64630: PPUSH
64631: LD_INT 0
64633: PPUSH
64634: CALL_OW 324
64638: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64639: LD_EXP 44
64643: PUSH
64644: LD_EXP 55
64648: AND
64649: IFFALSE 64830
64651: GO 64653
64653: DISABLE
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
64658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64659: LD_ADDR_VAR 0 2
64663: PUSH
64664: LD_INT 22
64666: PUSH
64667: LD_OWVAR 2
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 33
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PPUSH
64690: CALL_OW 69
64694: ST_TO_ADDR
// if not tmp then
64695: LD_VAR 0 2
64699: NOT
64700: IFFALSE 64704
// exit ;
64702: GO 64830
// side := 0 ;
64704: LD_ADDR_VAR 0 3
64708: PUSH
64709: LD_INT 0
64711: ST_TO_ADDR
// for i := 1 to 8 do
64712: LD_ADDR_VAR 0 1
64716: PUSH
64717: DOUBLE
64718: LD_INT 1
64720: DEC
64721: ST_TO_ADDR
64722: LD_INT 8
64724: PUSH
64725: FOR_TO
64726: IFFALSE 64774
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64728: LD_OWVAR 2
64732: PUSH
64733: LD_VAR 0 1
64737: NONEQUAL
64738: PUSH
64739: LD_OWVAR 2
64743: PPUSH
64744: LD_VAR 0 1
64748: PPUSH
64749: CALL_OW 81
64753: PUSH
64754: LD_INT 2
64756: EQUAL
64757: AND
64758: IFFALSE 64772
// begin side := i ;
64760: LD_ADDR_VAR 0 3
64764: PUSH
64765: LD_VAR 0 1
64769: ST_TO_ADDR
// break ;
64770: GO 64774
// end ;
64772: GO 64725
64774: POP
64775: POP
// if not side then
64776: LD_VAR 0 3
64780: NOT
64781: IFFALSE 64785
// exit ;
64783: GO 64830
// for i := 1 to tmp do
64785: LD_ADDR_VAR 0 1
64789: PUSH
64790: DOUBLE
64791: LD_INT 1
64793: DEC
64794: ST_TO_ADDR
64795: LD_VAR 0 2
64799: PUSH
64800: FOR_TO
64801: IFFALSE 64828
// if Prob ( 60 ) then
64803: LD_INT 60
64805: PPUSH
64806: CALL_OW 13
64810: IFFALSE 64826
// SetSide ( i , side ) ;
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_VAR 0 3
64821: PPUSH
64822: CALL_OW 235
64826: GO 64800
64828: POP
64829: POP
// end ;
64830: PPOPN 3
64832: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64833: LD_EXP 44
64837: PUSH
64838: LD_EXP 57
64842: AND
64843: IFFALSE 64962
64845: GO 64847
64847: DISABLE
64848: LD_INT 0
64850: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64851: LD_ADDR_VAR 0 1
64855: PUSH
64856: LD_INT 22
64858: PUSH
64859: LD_OWVAR 2
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 21
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: PUSH
64881: LD_INT 23
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: PPUSH
64900: CALL_OW 69
64904: PUSH
64905: FOR_IN
64906: IFFALSE 64960
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64908: LD_VAR 0 1
64912: PPUSH
64913: CALL_OW 257
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 2
64923: PUSH
64924: LD_INT 3
64926: PUSH
64927: LD_INT 4
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: IN
64936: IFFALSE 64958
// SetClass ( un , rand ( 1 , 4 ) ) ;
64938: LD_VAR 0 1
64942: PPUSH
64943: LD_INT 1
64945: PPUSH
64946: LD_INT 4
64948: PPUSH
64949: CALL_OW 12
64953: PPUSH
64954: CALL_OW 336
64958: GO 64905
64960: POP
64961: POP
// end ;
64962: PPOPN 1
64964: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64965: LD_EXP 44
64969: PUSH
64970: LD_EXP 56
64974: AND
64975: IFFALSE 65054
64977: GO 64979
64979: DISABLE
64980: LD_INT 0
64982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64983: LD_ADDR_VAR 0 1
64987: PUSH
64988: LD_INT 22
64990: PUSH
64991: LD_OWVAR 2
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 21
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PPUSH
65014: CALL_OW 69
65018: ST_TO_ADDR
// if not tmp then
65019: LD_VAR 0 1
65023: NOT
65024: IFFALSE 65028
// exit ;
65026: GO 65054
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65028: LD_VAR 0 1
65032: PUSH
65033: LD_INT 1
65035: PPUSH
65036: LD_VAR 0 1
65040: PPUSH
65041: CALL_OW 12
65045: ARRAY
65046: PPUSH
65047: LD_INT 100
65049: PPUSH
65050: CALL_OW 234
// end ;
65054: PPOPN 1
65056: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65057: LD_EXP 44
65061: PUSH
65062: LD_EXP 58
65066: AND
65067: IFFALSE 65165
65069: GO 65071
65071: DISABLE
65072: LD_INT 0
65074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65075: LD_ADDR_VAR 0 1
65079: PUSH
65080: LD_INT 22
65082: PUSH
65083: LD_OWVAR 2
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 21
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PPUSH
65106: CALL_OW 69
65110: ST_TO_ADDR
// if not tmp then
65111: LD_VAR 0 1
65115: NOT
65116: IFFALSE 65120
// exit ;
65118: GO 65165
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65120: LD_VAR 0 1
65124: PUSH
65125: LD_INT 1
65127: PPUSH
65128: LD_VAR 0 1
65132: PPUSH
65133: CALL_OW 12
65137: ARRAY
65138: PPUSH
65139: LD_INT 1
65141: PPUSH
65142: LD_INT 4
65144: PPUSH
65145: CALL_OW 12
65149: PPUSH
65150: LD_INT 3000
65152: PPUSH
65153: LD_INT 9000
65155: PPUSH
65156: CALL_OW 12
65160: PPUSH
65161: CALL_OW 492
// end ;
65165: PPOPN 1
65167: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65168: LD_EXP 44
65172: PUSH
65173: LD_EXP 59
65177: AND
65178: IFFALSE 65198
65180: GO 65182
65182: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65183: LD_INT 1
65185: PPUSH
65186: LD_OWVAR 2
65190: PPUSH
65191: LD_INT 0
65193: PPUSH
65194: CALL_OW 324
65198: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65199: LD_EXP 44
65203: PUSH
65204: LD_EXP 60
65208: AND
65209: IFFALSE 65292
65211: GO 65213
65213: DISABLE
65214: LD_INT 0
65216: PPUSH
65217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65218: LD_ADDR_VAR 0 2
65222: PUSH
65223: LD_INT 22
65225: PUSH
65226: LD_OWVAR 2
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 21
65237: PUSH
65238: LD_INT 3
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PPUSH
65249: CALL_OW 69
65253: ST_TO_ADDR
// if not tmp then
65254: LD_VAR 0 2
65258: NOT
65259: IFFALSE 65263
// exit ;
65261: GO 65292
// for i in tmp do
65263: LD_ADDR_VAR 0 1
65267: PUSH
65268: LD_VAR 0 2
65272: PUSH
65273: FOR_IN
65274: IFFALSE 65290
// SetBLevel ( i , 10 ) ;
65276: LD_VAR 0 1
65280: PPUSH
65281: LD_INT 10
65283: PPUSH
65284: CALL_OW 241
65288: GO 65273
65290: POP
65291: POP
// end ;
65292: PPOPN 2
65294: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65295: LD_EXP 44
65299: PUSH
65300: LD_EXP 61
65304: AND
65305: IFFALSE 65416
65307: GO 65309
65309: DISABLE
65310: LD_INT 0
65312: PPUSH
65313: PPUSH
65314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65315: LD_ADDR_VAR 0 3
65319: PUSH
65320: LD_INT 22
65322: PUSH
65323: LD_OWVAR 2
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 25
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 69
65350: ST_TO_ADDR
// if not tmp then
65351: LD_VAR 0 3
65355: NOT
65356: IFFALSE 65360
// exit ;
65358: GO 65416
// un := tmp [ rand ( 1 , tmp ) ] ;
65360: LD_ADDR_VAR 0 2
65364: PUSH
65365: LD_VAR 0 3
65369: PUSH
65370: LD_INT 1
65372: PPUSH
65373: LD_VAR 0 3
65377: PPUSH
65378: CALL_OW 12
65382: ARRAY
65383: ST_TO_ADDR
// if Crawls ( un ) then
65384: LD_VAR 0 2
65388: PPUSH
65389: CALL_OW 318
65393: IFFALSE 65404
// ComWalk ( un ) ;
65395: LD_VAR 0 2
65399: PPUSH
65400: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65404: LD_VAR 0 2
65408: PPUSH
65409: LD_INT 5
65411: PPUSH
65412: CALL_OW 336
// end ;
65416: PPOPN 3
65418: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65419: LD_EXP 44
65423: PUSH
65424: LD_EXP 62
65428: AND
65429: PUSH
65430: LD_OWVAR 67
65434: PUSH
65435: LD_INT 4
65437: LESS
65438: AND
65439: IFFALSE 65458
65441: GO 65443
65443: DISABLE
// begin Difficulty := Difficulty + 1 ;
65444: LD_ADDR_OWVAR 67
65448: PUSH
65449: LD_OWVAR 67
65453: PUSH
65454: LD_INT 1
65456: PLUS
65457: ST_TO_ADDR
// end ;
65458: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65459: LD_EXP 44
65463: PUSH
65464: LD_EXP 63
65468: AND
65469: IFFALSE 65572
65471: GO 65473
65473: DISABLE
65474: LD_INT 0
65476: PPUSH
// begin for i := 1 to 5 do
65477: LD_ADDR_VAR 0 1
65481: PUSH
65482: DOUBLE
65483: LD_INT 1
65485: DEC
65486: ST_TO_ADDR
65487: LD_INT 5
65489: PUSH
65490: FOR_TO
65491: IFFALSE 65570
// begin uc_nation := nation_nature ;
65493: LD_ADDR_OWVAR 21
65497: PUSH
65498: LD_INT 0
65500: ST_TO_ADDR
// uc_side := 0 ;
65501: LD_ADDR_OWVAR 20
65505: PUSH
65506: LD_INT 0
65508: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65509: LD_ADDR_OWVAR 29
65513: PUSH
65514: LD_INT 12
65516: PUSH
65517: LD_INT 12
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: ST_TO_ADDR
// hc_agressivity := 20 ;
65524: LD_ADDR_OWVAR 35
65528: PUSH
65529: LD_INT 20
65531: ST_TO_ADDR
// hc_class := class_tiger ;
65532: LD_ADDR_OWVAR 28
65536: PUSH
65537: LD_INT 14
65539: ST_TO_ADDR
// hc_gallery :=  ;
65540: LD_ADDR_OWVAR 33
65544: PUSH
65545: LD_STRING 
65547: ST_TO_ADDR
// hc_name :=  ;
65548: LD_ADDR_OWVAR 26
65552: PUSH
65553: LD_STRING 
65555: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65556: CALL_OW 44
65560: PPUSH
65561: LD_INT 0
65563: PPUSH
65564: CALL_OW 51
// end ;
65568: GO 65490
65570: POP
65571: POP
// end ;
65572: PPOPN 1
65574: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65575: LD_EXP 44
65579: PUSH
65580: LD_EXP 64
65584: AND
65585: IFFALSE 65594
65587: GO 65589
65589: DISABLE
// StreamSibBomb ;
65590: CALL 65595 0 0
65594: END
// export function StreamSibBomb ; var i , x , y ; begin
65595: LD_INT 0
65597: PPUSH
65598: PPUSH
65599: PPUSH
65600: PPUSH
// result := false ;
65601: LD_ADDR_VAR 0 1
65605: PUSH
65606: LD_INT 0
65608: ST_TO_ADDR
// for i := 1 to 16 do
65609: LD_ADDR_VAR 0 2
65613: PUSH
65614: DOUBLE
65615: LD_INT 1
65617: DEC
65618: ST_TO_ADDR
65619: LD_INT 16
65621: PUSH
65622: FOR_TO
65623: IFFALSE 65822
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65625: LD_ADDR_VAR 0 3
65629: PUSH
65630: LD_INT 10
65632: PUSH
65633: LD_INT 20
65635: PUSH
65636: LD_INT 30
65638: PUSH
65639: LD_INT 40
65641: PUSH
65642: LD_INT 50
65644: PUSH
65645: LD_INT 60
65647: PUSH
65648: LD_INT 70
65650: PUSH
65651: LD_INT 80
65653: PUSH
65654: LD_INT 90
65656: PUSH
65657: LD_INT 100
65659: PUSH
65660: LD_INT 110
65662: PUSH
65663: LD_INT 120
65665: PUSH
65666: LD_INT 130
65668: PUSH
65669: LD_INT 140
65671: PUSH
65672: LD_INT 150
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PPUSH
65695: LD_INT 15
65697: PPUSH
65698: CALL_OW 12
65702: ARRAY
65703: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65704: LD_ADDR_VAR 0 4
65708: PUSH
65709: LD_INT 10
65711: PUSH
65712: LD_INT 20
65714: PUSH
65715: LD_INT 30
65717: PUSH
65718: LD_INT 40
65720: PUSH
65721: LD_INT 50
65723: PUSH
65724: LD_INT 60
65726: PUSH
65727: LD_INT 70
65729: PUSH
65730: LD_INT 80
65732: PUSH
65733: LD_INT 90
65735: PUSH
65736: LD_INT 100
65738: PUSH
65739: LD_INT 110
65741: PUSH
65742: LD_INT 120
65744: PUSH
65745: LD_INT 130
65747: PUSH
65748: LD_INT 140
65750: PUSH
65751: LD_INT 150
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: PPUSH
65774: LD_INT 15
65776: PPUSH
65777: CALL_OW 12
65781: ARRAY
65782: ST_TO_ADDR
// if ValidHex ( x , y ) then
65783: LD_VAR 0 3
65787: PPUSH
65788: LD_VAR 0 4
65792: PPUSH
65793: CALL_OW 488
65797: IFFALSE 65820
// begin result := [ x , y ] ;
65799: LD_ADDR_VAR 0 1
65803: PUSH
65804: LD_VAR 0 3
65808: PUSH
65809: LD_VAR 0 4
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// break ;
65818: GO 65822
// end ; end ;
65820: GO 65622
65822: POP
65823: POP
// if result then
65824: LD_VAR 0 1
65828: IFFALSE 65888
// begin ToLua ( playSibBomb() ) ;
65830: LD_STRING playSibBomb()
65832: PPUSH
65833: CALL_OW 559
// wait ( 0 0$14 ) ;
65837: LD_INT 490
65839: PPUSH
65840: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65844: LD_VAR 0 1
65848: PUSH
65849: LD_INT 1
65851: ARRAY
65852: PPUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_INT 2
65860: ARRAY
65861: PPUSH
65862: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65866: LD_VAR 0 1
65870: PUSH
65871: LD_INT 1
65873: ARRAY
65874: PPUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 2
65882: ARRAY
65883: PPUSH
65884: CALL_OW 429
// end ; end ;
65888: LD_VAR 0 1
65892: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65893: LD_EXP 44
65897: PUSH
65898: LD_EXP 66
65902: AND
65903: IFFALSE 65915
65905: GO 65907
65907: DISABLE
// YouLost (  ) ;
65908: LD_STRING 
65910: PPUSH
65911: CALL_OW 104
65915: END
// every 0 0$1 trigger StreamModeActive and sFog do
65916: LD_EXP 44
65920: PUSH
65921: LD_EXP 65
65925: AND
65926: IFFALSE 65940
65928: GO 65930
65930: DISABLE
// FogOff ( your_side ) ;
65931: LD_OWVAR 2
65935: PPUSH
65936: CALL_OW 344
65940: END
// every 0 0$1 trigger StreamModeActive and sSun do
65941: LD_EXP 44
65945: PUSH
65946: LD_EXP 67
65950: AND
65951: IFFALSE 65979
65953: GO 65955
65955: DISABLE
// begin solar_recharge_percent := 0 ;
65956: LD_ADDR_OWVAR 79
65960: PUSH
65961: LD_INT 0
65963: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65964: LD_INT 10500
65966: PPUSH
65967: CALL_OW 67
// solar_recharge_percent := 100 ;
65971: LD_ADDR_OWVAR 79
65975: PUSH
65976: LD_INT 100
65978: ST_TO_ADDR
// end ;
65979: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65980: LD_EXP 44
65984: PUSH
65985: LD_EXP 68
65989: AND
65990: IFFALSE 66229
65992: GO 65994
65994: DISABLE
65995: LD_INT 0
65997: PPUSH
65998: PPUSH
65999: PPUSH
// begin tmp := [ ] ;
66000: LD_ADDR_VAR 0 3
66004: PUSH
66005: EMPTY
66006: ST_TO_ADDR
// for i := 1 to 6 do
66007: LD_ADDR_VAR 0 1
66011: PUSH
66012: DOUBLE
66013: LD_INT 1
66015: DEC
66016: ST_TO_ADDR
66017: LD_INT 6
66019: PUSH
66020: FOR_TO
66021: IFFALSE 66126
// begin uc_nation := nation_nature ;
66023: LD_ADDR_OWVAR 21
66027: PUSH
66028: LD_INT 0
66030: ST_TO_ADDR
// uc_side := 0 ;
66031: LD_ADDR_OWVAR 20
66035: PUSH
66036: LD_INT 0
66038: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66039: LD_ADDR_OWVAR 29
66043: PUSH
66044: LD_INT 12
66046: PUSH
66047: LD_INT 12
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: ST_TO_ADDR
// hc_agressivity := 20 ;
66054: LD_ADDR_OWVAR 35
66058: PUSH
66059: LD_INT 20
66061: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66062: LD_ADDR_OWVAR 28
66066: PUSH
66067: LD_INT 17
66069: ST_TO_ADDR
// hc_gallery :=  ;
66070: LD_ADDR_OWVAR 33
66074: PUSH
66075: LD_STRING 
66077: ST_TO_ADDR
// hc_name :=  ;
66078: LD_ADDR_OWVAR 26
66082: PUSH
66083: LD_STRING 
66085: ST_TO_ADDR
// un := CreateHuman ;
66086: LD_ADDR_VAR 0 2
66090: PUSH
66091: CALL_OW 44
66095: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66096: LD_VAR 0 2
66100: PPUSH
66101: LD_INT 1
66103: PPUSH
66104: CALL_OW 51
// tmp := tmp ^ un ;
66108: LD_ADDR_VAR 0 3
66112: PUSH
66113: LD_VAR 0 3
66117: PUSH
66118: LD_VAR 0 2
66122: ADD
66123: ST_TO_ADDR
// end ;
66124: GO 66020
66126: POP
66127: POP
// repeat wait ( 0 0$1 ) ;
66128: LD_INT 35
66130: PPUSH
66131: CALL_OW 67
// for un in tmp do
66135: LD_ADDR_VAR 0 2
66139: PUSH
66140: LD_VAR 0 3
66144: PUSH
66145: FOR_IN
66146: IFFALSE 66220
// begin if IsDead ( un ) then
66148: LD_VAR 0 2
66152: PPUSH
66153: CALL_OW 301
66157: IFFALSE 66177
// begin tmp := tmp diff un ;
66159: LD_ADDR_VAR 0 3
66163: PUSH
66164: LD_VAR 0 3
66168: PUSH
66169: LD_VAR 0 2
66173: DIFF
66174: ST_TO_ADDR
// continue ;
66175: GO 66145
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66177: LD_VAR 0 2
66181: PPUSH
66182: LD_INT 3
66184: PUSH
66185: LD_INT 22
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PPUSH
66199: CALL_OW 69
66203: PPUSH
66204: LD_VAR 0 2
66208: PPUSH
66209: CALL_OW 74
66213: PPUSH
66214: CALL_OW 115
// end ;
66218: GO 66145
66220: POP
66221: POP
// until not tmp ;
66222: LD_VAR 0 3
66226: NOT
66227: IFFALSE 66128
// end ;
66229: PPOPN 3
66231: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66232: LD_EXP 44
66236: PUSH
66237: LD_EXP 69
66241: AND
66242: IFFALSE 66296
66244: GO 66246
66246: DISABLE
// begin ToLua ( displayTroll(); ) ;
66247: LD_STRING displayTroll();
66249: PPUSH
66250: CALL_OW 559
// wait ( 3 3$00 ) ;
66254: LD_INT 6300
66256: PPUSH
66257: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66261: LD_STRING hideTroll();
66263: PPUSH
66264: CALL_OW 559
// wait ( 1 1$00 ) ;
66268: LD_INT 2100
66270: PPUSH
66271: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66275: LD_STRING displayTroll();
66277: PPUSH
66278: CALL_OW 559
// wait ( 1 1$00 ) ;
66282: LD_INT 2100
66284: PPUSH
66285: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66289: LD_STRING hideTroll();
66291: PPUSH
66292: CALL_OW 559
// end ;
66296: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66297: LD_EXP 44
66301: PUSH
66302: LD_EXP 70
66306: AND
66307: IFFALSE 66370
66309: GO 66311
66311: DISABLE
66312: LD_INT 0
66314: PPUSH
// begin p := 0 ;
66315: LD_ADDR_VAR 0 1
66319: PUSH
66320: LD_INT 0
66322: ST_TO_ADDR
// repeat game_speed := 1 ;
66323: LD_ADDR_OWVAR 65
66327: PUSH
66328: LD_INT 1
66330: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66331: LD_INT 35
66333: PPUSH
66334: CALL_OW 67
// p := p + 1 ;
66338: LD_ADDR_VAR 0 1
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 1
66350: PLUS
66351: ST_TO_ADDR
// until p >= 60 ;
66352: LD_VAR 0 1
66356: PUSH
66357: LD_INT 60
66359: GREATEREQUAL
66360: IFFALSE 66323
// game_speed := 4 ;
66362: LD_ADDR_OWVAR 65
66366: PUSH
66367: LD_INT 4
66369: ST_TO_ADDR
// end ;
66370: PPOPN 1
66372: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66373: LD_EXP 44
66377: PUSH
66378: LD_EXP 71
66382: AND
66383: IFFALSE 66529
66385: GO 66387
66387: DISABLE
66388: LD_INT 0
66390: PPUSH
66391: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66392: LD_ADDR_VAR 0 1
66396: PUSH
66397: LD_INT 22
66399: PUSH
66400: LD_OWVAR 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 30
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 30
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PPUSH
66441: CALL_OW 69
66445: ST_TO_ADDR
// if not depot then
66446: LD_VAR 0 1
66450: NOT
66451: IFFALSE 66455
// exit ;
66453: GO 66529
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66455: LD_ADDR_VAR 0 2
66459: PUSH
66460: LD_VAR 0 1
66464: PUSH
66465: LD_INT 1
66467: PPUSH
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 12
66477: ARRAY
66478: PPUSH
66479: CALL_OW 274
66483: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66484: LD_VAR 0 2
66488: PPUSH
66489: LD_INT 1
66491: PPUSH
66492: LD_INT 0
66494: PPUSH
66495: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66499: LD_VAR 0 2
66503: PPUSH
66504: LD_INT 2
66506: PPUSH
66507: LD_INT 0
66509: PPUSH
66510: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66514: LD_VAR 0 2
66518: PPUSH
66519: LD_INT 3
66521: PPUSH
66522: LD_INT 0
66524: PPUSH
66525: CALL_OW 277
// end ;
66529: PPOPN 2
66531: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66532: LD_EXP 44
66536: PUSH
66537: LD_EXP 72
66541: AND
66542: IFFALSE 66639
66544: GO 66546
66546: DISABLE
66547: LD_INT 0
66549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66550: LD_ADDR_VAR 0 1
66554: PUSH
66555: LD_INT 22
66557: PUSH
66558: LD_OWVAR 2
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 21
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: LD_INT 23
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: PPUSH
66599: CALL_OW 69
66603: ST_TO_ADDR
// if not tmp then
66604: LD_VAR 0 1
66608: NOT
66609: IFFALSE 66613
// exit ;
66611: GO 66639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66613: LD_VAR 0 1
66617: PUSH
66618: LD_INT 1
66620: PPUSH
66621: LD_VAR 0 1
66625: PPUSH
66626: CALL_OW 12
66630: ARRAY
66631: PPUSH
66632: LD_INT 200
66634: PPUSH
66635: CALL_OW 234
// end ;
66639: PPOPN 1
66641: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66642: LD_EXP 44
66646: PUSH
66647: LD_EXP 73
66651: AND
66652: IFFALSE 66731
66654: GO 66656
66656: DISABLE
66657: LD_INT 0
66659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66660: LD_ADDR_VAR 0 1
66664: PUSH
66665: LD_INT 22
66667: PUSH
66668: LD_OWVAR 2
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 21
66679: PUSH
66680: LD_INT 2
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PPUSH
66691: CALL_OW 69
66695: ST_TO_ADDR
// if not tmp then
66696: LD_VAR 0 1
66700: NOT
66701: IFFALSE 66705
// exit ;
66703: GO 66731
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66705: LD_VAR 0 1
66709: PUSH
66710: LD_INT 1
66712: PPUSH
66713: LD_VAR 0 1
66717: PPUSH
66718: CALL_OW 12
66722: ARRAY
66723: PPUSH
66724: LD_INT 60
66726: PPUSH
66727: CALL_OW 234
// end ;
66731: PPOPN 1
66733: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66734: LD_EXP 44
66738: PUSH
66739: LD_EXP 74
66743: AND
66744: IFFALSE 66843
66746: GO 66748
66748: DISABLE
66749: LD_INT 0
66751: PPUSH
66752: PPUSH
// begin enable ;
66753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66754: LD_ADDR_VAR 0 1
66758: PUSH
66759: LD_INT 22
66761: PUSH
66762: LD_OWVAR 2
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 61
66773: PUSH
66774: EMPTY
66775: LIST
66776: PUSH
66777: LD_INT 33
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: PPUSH
66792: CALL_OW 69
66796: ST_TO_ADDR
// if not tmp then
66797: LD_VAR 0 1
66801: NOT
66802: IFFALSE 66806
// exit ;
66804: GO 66843
// for i in tmp do
66806: LD_ADDR_VAR 0 2
66810: PUSH
66811: LD_VAR 0 1
66815: PUSH
66816: FOR_IN
66817: IFFALSE 66841
// if IsControledBy ( i ) then
66819: LD_VAR 0 2
66823: PPUSH
66824: CALL_OW 312
66828: IFFALSE 66839
// ComUnlink ( i ) ;
66830: LD_VAR 0 2
66834: PPUSH
66835: CALL_OW 136
66839: GO 66816
66841: POP
66842: POP
// end ;
66843: PPOPN 2
66845: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66846: LD_EXP 44
66850: PUSH
66851: LD_EXP 75
66855: AND
66856: IFFALSE 66996
66858: GO 66860
66860: DISABLE
66861: LD_INT 0
66863: PPUSH
66864: PPUSH
// begin ToLua ( displayPowell(); ) ;
66865: LD_STRING displayPowell();
66867: PPUSH
66868: CALL_OW 559
// uc_side := 0 ;
66872: LD_ADDR_OWVAR 20
66876: PUSH
66877: LD_INT 0
66879: ST_TO_ADDR
// uc_nation := 2 ;
66880: LD_ADDR_OWVAR 21
66884: PUSH
66885: LD_INT 2
66887: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66888: LD_ADDR_OWVAR 37
66892: PUSH
66893: LD_INT 14
66895: ST_TO_ADDR
// vc_engine := engine_siberite ;
66896: LD_ADDR_OWVAR 39
66900: PUSH
66901: LD_INT 3
66903: ST_TO_ADDR
// vc_control := control_apeman ;
66904: LD_ADDR_OWVAR 38
66908: PUSH
66909: LD_INT 5
66911: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66912: LD_ADDR_OWVAR 40
66916: PUSH
66917: LD_INT 29
66919: ST_TO_ADDR
// un := CreateVehicle ;
66920: LD_ADDR_VAR 0 2
66924: PUSH
66925: CALL_OW 45
66929: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66930: LD_VAR 0 2
66934: PPUSH
66935: LD_INT 1
66937: PPUSH
66938: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66942: LD_INT 35
66944: PPUSH
66945: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66949: LD_VAR 0 2
66953: PPUSH
66954: LD_INT 22
66956: PUSH
66957: LD_OWVAR 2
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PPUSH
66966: CALL_OW 69
66970: PPUSH
66971: LD_VAR 0 2
66975: PPUSH
66976: CALL_OW 74
66980: PPUSH
66981: CALL_OW 115
// until IsDead ( un ) ;
66985: LD_VAR 0 2
66989: PPUSH
66990: CALL_OW 301
66994: IFFALSE 66942
// end ;
66996: PPOPN 2
66998: END
// every 0 0$1 trigger StreamModeActive and sStu do
66999: LD_EXP 44
67003: PUSH
67004: LD_EXP 83
67008: AND
67009: IFFALSE 67025
67011: GO 67013
67013: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67014: LD_STRING displayStucuk();
67016: PPUSH
67017: CALL_OW 559
// ResetFog ;
67021: CALL_OW 335
// end ;
67025: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67026: LD_EXP 44
67030: PUSH
67031: LD_EXP 76
67035: AND
67036: IFFALSE 67177
67038: GO 67040
67040: DISABLE
67041: LD_INT 0
67043: PPUSH
67044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67045: LD_ADDR_VAR 0 2
67049: PUSH
67050: LD_INT 22
67052: PUSH
67053: LD_OWVAR 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 21
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PPUSH
67076: CALL_OW 69
67080: ST_TO_ADDR
// if not tmp then
67081: LD_VAR 0 2
67085: NOT
67086: IFFALSE 67090
// exit ;
67088: GO 67177
// un := tmp [ rand ( 1 , tmp ) ] ;
67090: LD_ADDR_VAR 0 1
67094: PUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 1
67102: PPUSH
67103: LD_VAR 0 2
67107: PPUSH
67108: CALL_OW 12
67112: ARRAY
67113: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67114: LD_VAR 0 1
67118: PPUSH
67119: LD_INT 0
67121: PPUSH
67122: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67126: LD_VAR 0 1
67130: PPUSH
67131: LD_OWVAR 3
67135: PUSH
67136: LD_VAR 0 1
67140: DIFF
67141: PPUSH
67142: LD_VAR 0 1
67146: PPUSH
67147: CALL_OW 74
67151: PPUSH
67152: CALL_OW 115
// wait ( 0 0$20 ) ;
67156: LD_INT 700
67158: PPUSH
67159: CALL_OW 67
// SetSide ( un , your_side ) ;
67163: LD_VAR 0 1
67167: PPUSH
67168: LD_OWVAR 2
67172: PPUSH
67173: CALL_OW 235
// end ;
67177: PPOPN 2
67179: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67180: LD_EXP 44
67184: PUSH
67185: LD_EXP 77
67189: AND
67190: IFFALSE 67296
67192: GO 67194
67194: DISABLE
67195: LD_INT 0
67197: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67198: LD_ADDR_VAR 0 1
67202: PUSH
67203: LD_INT 22
67205: PUSH
67206: LD_OWVAR 2
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: LD_INT 30
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 30
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PPUSH
67247: CALL_OW 69
67251: ST_TO_ADDR
// if not depot then
67252: LD_VAR 0 1
67256: NOT
67257: IFFALSE 67261
// exit ;
67259: GO 67296
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67261: LD_VAR 0 1
67265: PUSH
67266: LD_INT 1
67268: ARRAY
67269: PPUSH
67270: CALL_OW 250
67274: PPUSH
67275: LD_VAR 0 1
67279: PUSH
67280: LD_INT 1
67282: ARRAY
67283: PPUSH
67284: CALL_OW 251
67288: PPUSH
67289: LD_INT 70
67291: PPUSH
67292: CALL_OW 495
// end ;
67296: PPOPN 1
67298: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67299: LD_EXP 44
67303: PUSH
67304: LD_EXP 78
67308: AND
67309: IFFALSE 67520
67311: GO 67313
67313: DISABLE
67314: LD_INT 0
67316: PPUSH
67317: PPUSH
67318: PPUSH
67319: PPUSH
67320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67321: LD_ADDR_VAR 0 5
67325: PUSH
67326: LD_INT 22
67328: PUSH
67329: LD_OWVAR 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 21
67340: PUSH
67341: LD_INT 1
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PPUSH
67352: CALL_OW 69
67356: ST_TO_ADDR
// if not tmp then
67357: LD_VAR 0 5
67361: NOT
67362: IFFALSE 67366
// exit ;
67364: GO 67520
// for i in tmp do
67366: LD_ADDR_VAR 0 1
67370: PUSH
67371: LD_VAR 0 5
67375: PUSH
67376: FOR_IN
67377: IFFALSE 67518
// begin d := rand ( 0 , 5 ) ;
67379: LD_ADDR_VAR 0 4
67383: PUSH
67384: LD_INT 0
67386: PPUSH
67387: LD_INT 5
67389: PPUSH
67390: CALL_OW 12
67394: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67395: LD_ADDR_VAR 0 2
67399: PUSH
67400: LD_VAR 0 1
67404: PPUSH
67405: CALL_OW 250
67409: PPUSH
67410: LD_VAR 0 4
67414: PPUSH
67415: LD_INT 3
67417: PPUSH
67418: LD_INT 12
67420: PPUSH
67421: CALL_OW 12
67425: PPUSH
67426: CALL_OW 272
67430: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67431: LD_ADDR_VAR 0 3
67435: PUSH
67436: LD_VAR 0 1
67440: PPUSH
67441: CALL_OW 251
67445: PPUSH
67446: LD_VAR 0 4
67450: PPUSH
67451: LD_INT 3
67453: PPUSH
67454: LD_INT 12
67456: PPUSH
67457: CALL_OW 12
67461: PPUSH
67462: CALL_OW 273
67466: ST_TO_ADDR
// if ValidHex ( x , y ) then
67467: LD_VAR 0 2
67471: PPUSH
67472: LD_VAR 0 3
67476: PPUSH
67477: CALL_OW 488
67481: IFFALSE 67516
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67483: LD_VAR 0 1
67487: PPUSH
67488: LD_VAR 0 2
67492: PPUSH
67493: LD_VAR 0 3
67497: PPUSH
67498: LD_INT 3
67500: PPUSH
67501: LD_INT 6
67503: PPUSH
67504: CALL_OW 12
67508: PPUSH
67509: LD_INT 1
67511: PPUSH
67512: CALL_OW 483
// end ;
67516: GO 67376
67518: POP
67519: POP
// end ;
67520: PPOPN 5
67522: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67523: LD_EXP 44
67527: PUSH
67528: LD_EXP 79
67532: AND
67533: IFFALSE 67627
67535: GO 67537
67537: DISABLE
67538: LD_INT 0
67540: PPUSH
67541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67542: LD_ADDR_VAR 0 2
67546: PUSH
67547: LD_INT 22
67549: PUSH
67550: LD_OWVAR 2
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 32
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 21
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: LIST
67583: PPUSH
67584: CALL_OW 69
67588: ST_TO_ADDR
// if not tmp then
67589: LD_VAR 0 2
67593: NOT
67594: IFFALSE 67598
// exit ;
67596: GO 67627
// for i in tmp do
67598: LD_ADDR_VAR 0 1
67602: PUSH
67603: LD_VAR 0 2
67607: PUSH
67608: FOR_IN
67609: IFFALSE 67625
// SetFuel ( i , 0 ) ;
67611: LD_VAR 0 1
67615: PPUSH
67616: LD_INT 0
67618: PPUSH
67619: CALL_OW 240
67623: GO 67608
67625: POP
67626: POP
// end ;
67627: PPOPN 2
67629: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67630: LD_EXP 44
67634: PUSH
67635: LD_EXP 80
67639: AND
67640: IFFALSE 67706
67642: GO 67644
67644: DISABLE
67645: LD_INT 0
67647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67648: LD_ADDR_VAR 0 1
67652: PUSH
67653: LD_INT 22
67655: PUSH
67656: LD_OWVAR 2
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 30
67667: PUSH
67668: LD_INT 29
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PPUSH
67679: CALL_OW 69
67683: ST_TO_ADDR
// if not tmp then
67684: LD_VAR 0 1
67688: NOT
67689: IFFALSE 67693
// exit ;
67691: GO 67706
// DestroyUnit ( tmp [ 1 ] ) ;
67693: LD_VAR 0 1
67697: PUSH
67698: LD_INT 1
67700: ARRAY
67701: PPUSH
67702: CALL_OW 65
// end ;
67706: PPOPN 1
67708: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67709: LD_EXP 44
67713: PUSH
67714: LD_EXP 82
67718: AND
67719: IFFALSE 67848
67721: GO 67723
67723: DISABLE
67724: LD_INT 0
67726: PPUSH
// begin uc_side := 0 ;
67727: LD_ADDR_OWVAR 20
67731: PUSH
67732: LD_INT 0
67734: ST_TO_ADDR
// uc_nation := nation_arabian ;
67735: LD_ADDR_OWVAR 21
67739: PUSH
67740: LD_INT 2
67742: ST_TO_ADDR
// hc_gallery :=  ;
67743: LD_ADDR_OWVAR 33
67747: PUSH
67748: LD_STRING 
67750: ST_TO_ADDR
// hc_name :=  ;
67751: LD_ADDR_OWVAR 26
67755: PUSH
67756: LD_STRING 
67758: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67759: LD_INT 1
67761: PPUSH
67762: LD_INT 11
67764: PPUSH
67765: LD_INT 10
67767: PPUSH
67768: CALL_OW 380
// un := CreateHuman ;
67772: LD_ADDR_VAR 0 1
67776: PUSH
67777: CALL_OW 44
67781: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67782: LD_VAR 0 1
67786: PPUSH
67787: LD_INT 1
67789: PPUSH
67790: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67794: LD_INT 35
67796: PPUSH
67797: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67801: LD_VAR 0 1
67805: PPUSH
67806: LD_INT 22
67808: PUSH
67809: LD_OWVAR 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PPUSH
67818: CALL_OW 69
67822: PPUSH
67823: LD_VAR 0 1
67827: PPUSH
67828: CALL_OW 74
67832: PPUSH
67833: CALL_OW 115
// until IsDead ( un ) ;
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 301
67846: IFFALSE 67794
// end ;
67848: PPOPN 1
67850: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67851: LD_EXP 44
67855: PUSH
67856: LD_EXP 84
67860: AND
67861: IFFALSE 67873
67863: GO 67865
67865: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67866: LD_STRING earthquake(getX(game), 0, 32)
67868: PPUSH
67869: CALL_OW 559
67873: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67874: LD_EXP 44
67878: PUSH
67879: LD_EXP 85
67883: AND
67884: IFFALSE 67975
67886: GO 67888
67888: DISABLE
67889: LD_INT 0
67891: PPUSH
// begin enable ;
67892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67893: LD_ADDR_VAR 0 1
67897: PUSH
67898: LD_INT 22
67900: PUSH
67901: LD_OWVAR 2
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 21
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 33
67922: PUSH
67923: LD_INT 3
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: PPUSH
67935: CALL_OW 69
67939: ST_TO_ADDR
// if not tmp then
67940: LD_VAR 0 1
67944: NOT
67945: IFFALSE 67949
// exit ;
67947: GO 67975
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 1
67956: PPUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: CALL_OW 12
67966: ARRAY
67967: PPUSH
67968: LD_INT 1
67970: PPUSH
67971: CALL_OW 234
// end ;
67975: PPOPN 1
67977: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67978: LD_EXP 44
67982: PUSH
67983: LD_EXP 86
67987: AND
67988: IFFALSE 68129
67990: GO 67992
67992: DISABLE
67993: LD_INT 0
67995: PPUSH
67996: PPUSH
67997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67998: LD_ADDR_VAR 0 3
68002: PUSH
68003: LD_INT 22
68005: PUSH
68006: LD_OWVAR 2
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 25
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PPUSH
68029: CALL_OW 69
68033: ST_TO_ADDR
// if not tmp then
68034: LD_VAR 0 3
68038: NOT
68039: IFFALSE 68043
// exit ;
68041: GO 68129
// un := tmp [ rand ( 1 , tmp ) ] ;
68043: LD_ADDR_VAR 0 2
68047: PUSH
68048: LD_VAR 0 3
68052: PUSH
68053: LD_INT 1
68055: PPUSH
68056: LD_VAR 0 3
68060: PPUSH
68061: CALL_OW 12
68065: ARRAY
68066: ST_TO_ADDR
// if Crawls ( un ) then
68067: LD_VAR 0 2
68071: PPUSH
68072: CALL_OW 318
68076: IFFALSE 68087
// ComWalk ( un ) ;
68078: LD_VAR 0 2
68082: PPUSH
68083: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68087: LD_VAR 0 2
68091: PPUSH
68092: LD_INT 9
68094: PPUSH
68095: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68099: LD_INT 28
68101: PPUSH
68102: LD_OWVAR 2
68106: PPUSH
68107: LD_INT 2
68109: PPUSH
68110: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68114: LD_INT 29
68116: PPUSH
68117: LD_OWVAR 2
68121: PPUSH
68122: LD_INT 2
68124: PPUSH
68125: CALL_OW 322
// end ;
68129: PPOPN 3
68131: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68132: LD_EXP 44
68136: PUSH
68137: LD_EXP 87
68141: AND
68142: IFFALSE 68253
68144: GO 68146
68146: DISABLE
68147: LD_INT 0
68149: PPUSH
68150: PPUSH
68151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68152: LD_ADDR_VAR 0 3
68156: PUSH
68157: LD_INT 22
68159: PUSH
68160: LD_OWVAR 2
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 25
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PPUSH
68183: CALL_OW 69
68187: ST_TO_ADDR
// if not tmp then
68188: LD_VAR 0 3
68192: NOT
68193: IFFALSE 68197
// exit ;
68195: GO 68253
// un := tmp [ rand ( 1 , tmp ) ] ;
68197: LD_ADDR_VAR 0 2
68201: PUSH
68202: LD_VAR 0 3
68206: PUSH
68207: LD_INT 1
68209: PPUSH
68210: LD_VAR 0 3
68214: PPUSH
68215: CALL_OW 12
68219: ARRAY
68220: ST_TO_ADDR
// if Crawls ( un ) then
68221: LD_VAR 0 2
68225: PPUSH
68226: CALL_OW 318
68230: IFFALSE 68241
// ComWalk ( un ) ;
68232: LD_VAR 0 2
68236: PPUSH
68237: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68241: LD_VAR 0 2
68245: PPUSH
68246: LD_INT 8
68248: PPUSH
68249: CALL_OW 336
// end ;
68253: PPOPN 3
68255: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68256: LD_EXP 44
68260: PUSH
68261: LD_EXP 88
68265: AND
68266: IFFALSE 68410
68268: GO 68270
68270: DISABLE
68271: LD_INT 0
68273: PPUSH
68274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68275: LD_ADDR_VAR 0 2
68279: PUSH
68280: LD_INT 22
68282: PUSH
68283: LD_OWVAR 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 21
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: LD_INT 34
68307: PUSH
68308: LD_INT 12
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 34
68317: PUSH
68318: LD_INT 51
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 34
68327: PUSH
68328: LD_INT 32
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: PPUSH
68346: CALL_OW 69
68350: ST_TO_ADDR
// if not tmp then
68351: LD_VAR 0 2
68355: NOT
68356: IFFALSE 68360
// exit ;
68358: GO 68410
// for i in tmp do
68360: LD_ADDR_VAR 0 1
68364: PUSH
68365: LD_VAR 0 2
68369: PUSH
68370: FOR_IN
68371: IFFALSE 68408
// if GetCargo ( i , mat_artifact ) = 0 then
68373: LD_VAR 0 1
68377: PPUSH
68378: LD_INT 4
68380: PPUSH
68381: CALL_OW 289
68385: PUSH
68386: LD_INT 0
68388: EQUAL
68389: IFFALSE 68406
// SetCargo ( i , mat_siberit , 100 ) ;
68391: LD_VAR 0 1
68395: PPUSH
68396: LD_INT 3
68398: PPUSH
68399: LD_INT 100
68401: PPUSH
68402: CALL_OW 290
68406: GO 68370
68408: POP
68409: POP
// end ;
68410: PPOPN 2
68412: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68413: LD_EXP 44
68417: PUSH
68418: LD_EXP 89
68422: AND
68423: IFFALSE 68606
68425: GO 68427
68427: DISABLE
68428: LD_INT 0
68430: PPUSH
68431: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68432: LD_ADDR_VAR 0 2
68436: PUSH
68437: LD_INT 22
68439: PUSH
68440: LD_OWVAR 2
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PPUSH
68449: CALL_OW 69
68453: ST_TO_ADDR
// if not tmp then
68454: LD_VAR 0 2
68458: NOT
68459: IFFALSE 68463
// exit ;
68461: GO 68606
// for i := 1 to 2 do
68463: LD_ADDR_VAR 0 1
68467: PUSH
68468: DOUBLE
68469: LD_INT 1
68471: DEC
68472: ST_TO_ADDR
68473: LD_INT 2
68475: PUSH
68476: FOR_TO
68477: IFFALSE 68604
// begin uc_side := your_side ;
68479: LD_ADDR_OWVAR 20
68483: PUSH
68484: LD_OWVAR 2
68488: ST_TO_ADDR
// uc_nation := nation_american ;
68489: LD_ADDR_OWVAR 21
68493: PUSH
68494: LD_INT 1
68496: ST_TO_ADDR
// vc_chassis := us_morphling ;
68497: LD_ADDR_OWVAR 37
68501: PUSH
68502: LD_INT 5
68504: ST_TO_ADDR
// vc_engine := engine_siberite ;
68505: LD_ADDR_OWVAR 39
68509: PUSH
68510: LD_INT 3
68512: ST_TO_ADDR
// vc_control := control_computer ;
68513: LD_ADDR_OWVAR 38
68517: PUSH
68518: LD_INT 3
68520: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68521: LD_ADDR_OWVAR 40
68525: PUSH
68526: LD_INT 10
68528: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68529: LD_VAR 0 2
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PPUSH
68538: CALL_OW 310
68542: NOT
68543: IFFALSE 68590
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68545: CALL_OW 45
68549: PPUSH
68550: LD_VAR 0 2
68554: PUSH
68555: LD_INT 1
68557: ARRAY
68558: PPUSH
68559: CALL_OW 250
68563: PPUSH
68564: LD_VAR 0 2
68568: PUSH
68569: LD_INT 1
68571: ARRAY
68572: PPUSH
68573: CALL_OW 251
68577: PPUSH
68578: LD_INT 12
68580: PPUSH
68581: LD_INT 1
68583: PPUSH
68584: CALL_OW 50
68588: GO 68602
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68590: CALL_OW 45
68594: PPUSH
68595: LD_INT 1
68597: PPUSH
68598: CALL_OW 51
// end ;
68602: GO 68476
68604: POP
68605: POP
// end ;
68606: PPOPN 2
68608: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68609: LD_EXP 44
68613: PUSH
68614: LD_EXP 90
68618: AND
68619: IFFALSE 68841
68621: GO 68623
68623: DISABLE
68624: LD_INT 0
68626: PPUSH
68627: PPUSH
68628: PPUSH
68629: PPUSH
68630: PPUSH
68631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68632: LD_ADDR_VAR 0 6
68636: PUSH
68637: LD_INT 22
68639: PUSH
68640: LD_OWVAR 2
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 21
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: LD_INT 23
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: LIST
68680: PPUSH
68681: CALL_OW 69
68685: ST_TO_ADDR
// if not tmp then
68686: LD_VAR 0 6
68690: NOT
68691: IFFALSE 68695
// exit ;
68693: GO 68841
// s1 := rand ( 1 , 4 ) ;
68695: LD_ADDR_VAR 0 2
68699: PUSH
68700: LD_INT 1
68702: PPUSH
68703: LD_INT 4
68705: PPUSH
68706: CALL_OW 12
68710: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68711: LD_ADDR_VAR 0 4
68715: PUSH
68716: LD_VAR 0 6
68720: PUSH
68721: LD_INT 1
68723: ARRAY
68724: PPUSH
68725: LD_VAR 0 2
68729: PPUSH
68730: CALL_OW 259
68734: ST_TO_ADDR
// if s1 = 1 then
68735: LD_VAR 0 2
68739: PUSH
68740: LD_INT 1
68742: EQUAL
68743: IFFALSE 68763
// s2 := rand ( 2 , 4 ) else
68745: LD_ADDR_VAR 0 3
68749: PUSH
68750: LD_INT 2
68752: PPUSH
68753: LD_INT 4
68755: PPUSH
68756: CALL_OW 12
68760: ST_TO_ADDR
68761: GO 68771
// s2 := 1 ;
68763: LD_ADDR_VAR 0 3
68767: PUSH
68768: LD_INT 1
68770: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68771: LD_ADDR_VAR 0 5
68775: PUSH
68776: LD_VAR 0 6
68780: PUSH
68781: LD_INT 1
68783: ARRAY
68784: PPUSH
68785: LD_VAR 0 3
68789: PPUSH
68790: CALL_OW 259
68794: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68795: LD_VAR 0 6
68799: PUSH
68800: LD_INT 1
68802: ARRAY
68803: PPUSH
68804: LD_VAR 0 2
68808: PPUSH
68809: LD_VAR 0 5
68813: PPUSH
68814: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68818: LD_VAR 0 6
68822: PUSH
68823: LD_INT 1
68825: ARRAY
68826: PPUSH
68827: LD_VAR 0 3
68831: PPUSH
68832: LD_VAR 0 4
68836: PPUSH
68837: CALL_OW 237
// end ;
68841: PPOPN 6
68843: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68844: LD_EXP 44
68848: PUSH
68849: LD_EXP 91
68853: AND
68854: IFFALSE 68933
68856: GO 68858
68858: DISABLE
68859: LD_INT 0
68861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68862: LD_ADDR_VAR 0 1
68866: PUSH
68867: LD_INT 22
68869: PUSH
68870: LD_OWVAR 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 30
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PPUSH
68893: CALL_OW 69
68897: ST_TO_ADDR
// if not tmp then
68898: LD_VAR 0 1
68902: NOT
68903: IFFALSE 68907
// exit ;
68905: GO 68933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68907: LD_VAR 0 1
68911: PUSH
68912: LD_INT 1
68914: PPUSH
68915: LD_VAR 0 1
68919: PPUSH
68920: CALL_OW 12
68924: ARRAY
68925: PPUSH
68926: LD_INT 1
68928: PPUSH
68929: CALL_OW 234
// end ;
68933: PPOPN 1
68935: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68936: LD_EXP 44
68940: PUSH
68941: LD_EXP 92
68945: AND
68946: IFFALSE 69058
68948: GO 68950
68950: DISABLE
68951: LD_INT 0
68953: PPUSH
68954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68955: LD_ADDR_VAR 0 2
68959: PUSH
68960: LD_INT 22
68962: PUSH
68963: LD_OWVAR 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 2
68974: PUSH
68975: LD_INT 30
68977: PUSH
68978: LD_INT 27
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 30
68987: PUSH
68988: LD_INT 26
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 30
68997: PUSH
68998: LD_INT 28
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PPUSH
69015: CALL_OW 69
69019: ST_TO_ADDR
// if not tmp then
69020: LD_VAR 0 2
69024: NOT
69025: IFFALSE 69029
// exit ;
69027: GO 69058
// for i in tmp do
69029: LD_ADDR_VAR 0 1
69033: PUSH
69034: LD_VAR 0 2
69038: PUSH
69039: FOR_IN
69040: IFFALSE 69056
// SetLives ( i , 1 ) ;
69042: LD_VAR 0 1
69046: PPUSH
69047: LD_INT 1
69049: PPUSH
69050: CALL_OW 234
69054: GO 69039
69056: POP
69057: POP
// end ;
69058: PPOPN 2
69060: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69061: LD_EXP 44
69065: PUSH
69066: LD_EXP 93
69070: AND
69071: IFFALSE 69345
69073: GO 69075
69075: DISABLE
69076: LD_INT 0
69078: PPUSH
69079: PPUSH
69080: PPUSH
// begin i := rand ( 1 , 7 ) ;
69081: LD_ADDR_VAR 0 1
69085: PUSH
69086: LD_INT 1
69088: PPUSH
69089: LD_INT 7
69091: PPUSH
69092: CALL_OW 12
69096: ST_TO_ADDR
// case i of 1 :
69097: LD_VAR 0 1
69101: PUSH
69102: LD_INT 1
69104: DOUBLE
69105: EQUAL
69106: IFTRUE 69110
69108: GO 69120
69110: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69111: LD_STRING earthquake(getX(game), 0, 32)
69113: PPUSH
69114: CALL_OW 559
69118: GO 69345
69120: LD_INT 2
69122: DOUBLE
69123: EQUAL
69124: IFTRUE 69128
69126: GO 69142
69128: POP
// begin ToLua ( displayStucuk(); ) ;
69129: LD_STRING displayStucuk();
69131: PPUSH
69132: CALL_OW 559
// ResetFog ;
69136: CALL_OW 335
// end ; 3 :
69140: GO 69345
69142: LD_INT 3
69144: DOUBLE
69145: EQUAL
69146: IFTRUE 69150
69148: GO 69254
69150: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69151: LD_ADDR_VAR 0 2
69155: PUSH
69156: LD_INT 22
69158: PUSH
69159: LD_OWVAR 2
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 25
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PPUSH
69182: CALL_OW 69
69186: ST_TO_ADDR
// if not tmp then
69187: LD_VAR 0 2
69191: NOT
69192: IFFALSE 69196
// exit ;
69194: GO 69345
// un := tmp [ rand ( 1 , tmp ) ] ;
69196: LD_ADDR_VAR 0 3
69200: PUSH
69201: LD_VAR 0 2
69205: PUSH
69206: LD_INT 1
69208: PPUSH
69209: LD_VAR 0 2
69213: PPUSH
69214: CALL_OW 12
69218: ARRAY
69219: ST_TO_ADDR
// if Crawls ( un ) then
69220: LD_VAR 0 3
69224: PPUSH
69225: CALL_OW 318
69229: IFFALSE 69240
// ComWalk ( un ) ;
69231: LD_VAR 0 3
69235: PPUSH
69236: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69240: LD_VAR 0 3
69244: PPUSH
69245: LD_INT 8
69247: PPUSH
69248: CALL_OW 336
// end ; 4 :
69252: GO 69345
69254: LD_INT 4
69256: DOUBLE
69257: EQUAL
69258: IFTRUE 69262
69260: GO 69323
69262: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69263: LD_ADDR_VAR 0 2
69267: PUSH
69268: LD_INT 22
69270: PUSH
69271: LD_OWVAR 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 30
69282: PUSH
69283: LD_INT 29
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PPUSH
69294: CALL_OW 69
69298: ST_TO_ADDR
// if not tmp then
69299: LD_VAR 0 2
69303: NOT
69304: IFFALSE 69308
// exit ;
69306: GO 69345
// DestroyUnit ( tmp [ 1 ] ) ;
69308: LD_VAR 0 2
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PPUSH
69317: CALL_OW 65
// end ; 5 .. 7 :
69321: GO 69345
69323: LD_INT 5
69325: DOUBLE
69326: GREATEREQUAL
69327: IFFALSE 69335
69329: LD_INT 7
69331: DOUBLE
69332: LESSEQUAL
69333: IFTRUE 69337
69335: GO 69344
69337: POP
// StreamSibBomb ; end ;
69338: CALL 65595 0 0
69342: GO 69345
69344: POP
// end ;
69345: PPOPN 3
69347: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69348: LD_EXP 44
69352: PUSH
69353: LD_EXP 94
69357: AND
69358: IFFALSE 69514
69360: GO 69362
69362: DISABLE
69363: LD_INT 0
69365: PPUSH
69366: PPUSH
69367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69368: LD_ADDR_VAR 0 2
69372: PUSH
69373: LD_INT 81
69375: PUSH
69376: LD_OWVAR 2
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: LD_INT 21
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 21
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PPUSH
69417: CALL_OW 69
69421: ST_TO_ADDR
// if not tmp then
69422: LD_VAR 0 2
69426: NOT
69427: IFFALSE 69431
// exit ;
69429: GO 69514
// p := 0 ;
69431: LD_ADDR_VAR 0 3
69435: PUSH
69436: LD_INT 0
69438: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69439: LD_INT 35
69441: PPUSH
69442: CALL_OW 67
// p := p + 1 ;
69446: LD_ADDR_VAR 0 3
69450: PUSH
69451: LD_VAR 0 3
69455: PUSH
69456: LD_INT 1
69458: PLUS
69459: ST_TO_ADDR
// for i in tmp do
69460: LD_ADDR_VAR 0 1
69464: PUSH
69465: LD_VAR 0 2
69469: PUSH
69470: FOR_IN
69471: IFFALSE 69502
// if GetLives ( i ) < 1000 then
69473: LD_VAR 0 1
69477: PPUSH
69478: CALL_OW 256
69482: PUSH
69483: LD_INT 1000
69485: LESS
69486: IFFALSE 69500
// SetLives ( i , 1000 ) ;
69488: LD_VAR 0 1
69492: PPUSH
69493: LD_INT 1000
69495: PPUSH
69496: CALL_OW 234
69500: GO 69470
69502: POP
69503: POP
// until p > 20 ;
69504: LD_VAR 0 3
69508: PUSH
69509: LD_INT 20
69511: GREATER
69512: IFFALSE 69439
// end ;
69514: PPOPN 3
69516: END
// every 0 0$1 trigger StreamModeActive and sTime do
69517: LD_EXP 44
69521: PUSH
69522: LD_EXP 95
69526: AND
69527: IFFALSE 69562
69529: GO 69531
69531: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69532: LD_INT 28
69534: PPUSH
69535: LD_OWVAR 2
69539: PPUSH
69540: LD_INT 2
69542: PPUSH
69543: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69547: LD_INT 30
69549: PPUSH
69550: LD_OWVAR 2
69554: PPUSH
69555: LD_INT 2
69557: PPUSH
69558: CALL_OW 322
// end ;
69562: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69563: LD_EXP 44
69567: PUSH
69568: LD_EXP 96
69572: AND
69573: IFFALSE 69694
69575: GO 69577
69577: DISABLE
69578: LD_INT 0
69580: PPUSH
69581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69582: LD_ADDR_VAR 0 2
69586: PUSH
69587: LD_INT 22
69589: PUSH
69590: LD_OWVAR 2
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 21
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 3
69611: PUSH
69612: LD_INT 23
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: LIST
69630: PPUSH
69631: CALL_OW 69
69635: ST_TO_ADDR
// if not tmp then
69636: LD_VAR 0 2
69640: NOT
69641: IFFALSE 69645
// exit ;
69643: GO 69694
// for i in tmp do
69645: LD_ADDR_VAR 0 1
69649: PUSH
69650: LD_VAR 0 2
69654: PUSH
69655: FOR_IN
69656: IFFALSE 69692
// begin if Crawls ( i ) then
69658: LD_VAR 0 1
69662: PPUSH
69663: CALL_OW 318
69667: IFFALSE 69678
// ComWalk ( i ) ;
69669: LD_VAR 0 1
69673: PPUSH
69674: CALL_OW 138
// SetClass ( i , 2 ) ;
69678: LD_VAR 0 1
69682: PPUSH
69683: LD_INT 2
69685: PPUSH
69686: CALL_OW 336
// end ;
69690: GO 69655
69692: POP
69693: POP
// end ;
69694: PPOPN 2
69696: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69697: LD_EXP 44
69701: PUSH
69702: LD_EXP 97
69706: AND
69707: IFFALSE 69988
69709: GO 69711
69711: DISABLE
69712: LD_INT 0
69714: PPUSH
69715: PPUSH
69716: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69717: LD_OWVAR 2
69721: PPUSH
69722: LD_INT 9
69724: PPUSH
69725: LD_INT 1
69727: PPUSH
69728: LD_INT 1
69730: PPUSH
69731: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69735: LD_INT 9
69737: PPUSH
69738: LD_OWVAR 2
69742: PPUSH
69743: CALL_OW 343
// uc_side := 9 ;
69747: LD_ADDR_OWVAR 20
69751: PUSH
69752: LD_INT 9
69754: ST_TO_ADDR
// uc_nation := 2 ;
69755: LD_ADDR_OWVAR 21
69759: PUSH
69760: LD_INT 2
69762: ST_TO_ADDR
// hc_name := Dark Warrior ;
69763: LD_ADDR_OWVAR 26
69767: PUSH
69768: LD_STRING Dark Warrior
69770: ST_TO_ADDR
// hc_gallery :=  ;
69771: LD_ADDR_OWVAR 33
69775: PUSH
69776: LD_STRING 
69778: ST_TO_ADDR
// hc_noskilllimit := true ;
69779: LD_ADDR_OWVAR 76
69783: PUSH
69784: LD_INT 1
69786: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69787: LD_ADDR_OWVAR 31
69791: PUSH
69792: LD_INT 30
69794: PUSH
69795: LD_INT 30
69797: PUSH
69798: LD_INT 30
69800: PUSH
69801: LD_INT 30
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: ST_TO_ADDR
// un := CreateHuman ;
69810: LD_ADDR_VAR 0 3
69814: PUSH
69815: CALL_OW 44
69819: ST_TO_ADDR
// hc_noskilllimit := false ;
69820: LD_ADDR_OWVAR 76
69824: PUSH
69825: LD_INT 0
69827: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69828: LD_VAR 0 3
69832: PPUSH
69833: LD_INT 1
69835: PPUSH
69836: CALL_OW 51
// p := 0 ;
69840: LD_ADDR_VAR 0 2
69844: PUSH
69845: LD_INT 0
69847: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69848: LD_INT 35
69850: PPUSH
69851: CALL_OW 67
// p := p + 1 ;
69855: LD_ADDR_VAR 0 2
69859: PUSH
69860: LD_VAR 0 2
69864: PUSH
69865: LD_INT 1
69867: PLUS
69868: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69869: LD_VAR 0 3
69873: PPUSH
69874: CALL_OW 256
69878: PUSH
69879: LD_INT 1000
69881: LESS
69882: IFFALSE 69896
// SetLives ( un , 1000 ) ;
69884: LD_VAR 0 3
69888: PPUSH
69889: LD_INT 1000
69891: PPUSH
69892: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69896: LD_VAR 0 3
69900: PPUSH
69901: LD_INT 81
69903: PUSH
69904: LD_OWVAR 2
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 91
69915: PUSH
69916: LD_VAR 0 3
69920: PUSH
69921: LD_INT 30
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: LIST
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PPUSH
69933: CALL_OW 69
69937: PPUSH
69938: LD_VAR 0 3
69942: PPUSH
69943: CALL_OW 74
69947: PPUSH
69948: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
69952: LD_VAR 0 2
69956: PUSH
69957: LD_INT 60
69959: GREATER
69960: PUSH
69961: LD_VAR 0 3
69965: PPUSH
69966: CALL_OW 301
69970: OR
69971: IFFALSE 69848
// if un then
69973: LD_VAR 0 3
69977: IFFALSE 69988
// RemoveUnit ( un ) ;
69979: LD_VAR 0 3
69983: PPUSH
69984: CALL_OW 64
// end ;
69988: PPOPN 3
69990: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69991: LD_INT 0
69993: PPUSH
// case cmd of 301 :
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 301
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70007
70005: GO 70039
70007: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70008: LD_VAR 0 6
70012: PPUSH
70013: LD_VAR 0 7
70017: PPUSH
70018: LD_VAR 0 8
70022: PPUSH
70023: LD_VAR 0 4
70027: PPUSH
70028: LD_VAR 0 5
70032: PPUSH
70033: CALL 71240 0 5
70037: GO 70160
70039: LD_INT 302
70041: DOUBLE
70042: EQUAL
70043: IFTRUE 70047
70045: GO 70084
70047: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70048: LD_VAR 0 6
70052: PPUSH
70053: LD_VAR 0 7
70057: PPUSH
70058: LD_VAR 0 8
70062: PPUSH
70063: LD_VAR 0 9
70067: PPUSH
70068: LD_VAR 0 4
70072: PPUSH
70073: LD_VAR 0 5
70077: PPUSH
70078: CALL 71331 0 6
70082: GO 70160
70084: LD_INT 303
70086: DOUBLE
70087: EQUAL
70088: IFTRUE 70092
70090: GO 70129
70092: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70093: LD_VAR 0 6
70097: PPUSH
70098: LD_VAR 0 7
70102: PPUSH
70103: LD_VAR 0 8
70107: PPUSH
70108: LD_VAR 0 9
70112: PPUSH
70113: LD_VAR 0 4
70117: PPUSH
70118: LD_VAR 0 5
70122: PPUSH
70123: CALL 70165 0 6
70127: GO 70160
70129: LD_INT 304
70131: DOUBLE
70132: EQUAL
70133: IFTRUE 70137
70135: GO 70159
70137: POP
// hHackTeleport ( unit , x , y ) ; end ;
70138: LD_VAR 0 2
70142: PPUSH
70143: LD_VAR 0 4
70147: PPUSH
70148: LD_VAR 0 5
70152: PPUSH
70153: CALL 71924 0 3
70157: GO 70160
70159: POP
// end ;
70160: LD_VAR 0 12
70164: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70165: LD_INT 0
70167: PPUSH
70168: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70169: LD_VAR 0 1
70173: PUSH
70174: LD_INT 1
70176: LESS
70177: PUSH
70178: LD_VAR 0 1
70182: PUSH
70183: LD_INT 3
70185: GREATER
70186: OR
70187: PUSH
70188: LD_VAR 0 5
70192: PPUSH
70193: LD_VAR 0 6
70197: PPUSH
70198: CALL_OW 428
70202: OR
70203: IFFALSE 70207
// exit ;
70205: GO 70927
// uc_side := your_side ;
70207: LD_ADDR_OWVAR 20
70211: PUSH
70212: LD_OWVAR 2
70216: ST_TO_ADDR
// uc_nation := nation ;
70217: LD_ADDR_OWVAR 21
70221: PUSH
70222: LD_VAR 0 1
70226: ST_TO_ADDR
// bc_level = 1 ;
70227: LD_ADDR_OWVAR 43
70231: PUSH
70232: LD_INT 1
70234: ST_TO_ADDR
// case btype of 1 :
70235: LD_VAR 0 2
70239: PUSH
70240: LD_INT 1
70242: DOUBLE
70243: EQUAL
70244: IFTRUE 70248
70246: GO 70259
70248: POP
// bc_type := b_depot ; 2 :
70249: LD_ADDR_OWVAR 42
70253: PUSH
70254: LD_INT 0
70256: ST_TO_ADDR
70257: GO 70871
70259: LD_INT 2
70261: DOUBLE
70262: EQUAL
70263: IFTRUE 70267
70265: GO 70278
70267: POP
// bc_type := b_warehouse ; 3 :
70268: LD_ADDR_OWVAR 42
70272: PUSH
70273: LD_INT 1
70275: ST_TO_ADDR
70276: GO 70871
70278: LD_INT 3
70280: DOUBLE
70281: EQUAL
70282: IFTRUE 70286
70284: GO 70297
70286: POP
// bc_type := b_lab ; 4 .. 9 :
70287: LD_ADDR_OWVAR 42
70291: PUSH
70292: LD_INT 6
70294: ST_TO_ADDR
70295: GO 70871
70297: LD_INT 4
70299: DOUBLE
70300: GREATEREQUAL
70301: IFFALSE 70309
70303: LD_INT 9
70305: DOUBLE
70306: LESSEQUAL
70307: IFTRUE 70311
70309: GO 70363
70311: POP
// begin bc_type := b_lab_half ;
70312: LD_ADDR_OWVAR 42
70316: PUSH
70317: LD_INT 7
70319: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70320: LD_ADDR_OWVAR 44
70324: PUSH
70325: LD_INT 10
70327: PUSH
70328: LD_INT 11
70330: PUSH
70331: LD_INT 12
70333: PUSH
70334: LD_INT 15
70336: PUSH
70337: LD_INT 14
70339: PUSH
70340: LD_INT 13
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: PUSH
70351: LD_VAR 0 2
70355: PUSH
70356: LD_INT 3
70358: MINUS
70359: ARRAY
70360: ST_TO_ADDR
// end ; 10 .. 13 :
70361: GO 70871
70363: LD_INT 10
70365: DOUBLE
70366: GREATEREQUAL
70367: IFFALSE 70375
70369: LD_INT 13
70371: DOUBLE
70372: LESSEQUAL
70373: IFTRUE 70377
70375: GO 70454
70377: POP
// begin bc_type := b_lab_full ;
70378: LD_ADDR_OWVAR 42
70382: PUSH
70383: LD_INT 8
70385: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70386: LD_ADDR_OWVAR 44
70390: PUSH
70391: LD_INT 10
70393: PUSH
70394: LD_INT 12
70396: PUSH
70397: LD_INT 14
70399: PUSH
70400: LD_INT 13
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: PUSH
70409: LD_VAR 0 2
70413: PUSH
70414: LD_INT 9
70416: MINUS
70417: ARRAY
70418: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70419: LD_ADDR_OWVAR 45
70423: PUSH
70424: LD_INT 11
70426: PUSH
70427: LD_INT 15
70429: PUSH
70430: LD_INT 12
70432: PUSH
70433: LD_INT 15
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: PUSH
70442: LD_VAR 0 2
70446: PUSH
70447: LD_INT 9
70449: MINUS
70450: ARRAY
70451: ST_TO_ADDR
// end ; 14 :
70452: GO 70871
70454: LD_INT 14
70456: DOUBLE
70457: EQUAL
70458: IFTRUE 70462
70460: GO 70473
70462: POP
// bc_type := b_workshop ; 15 :
70463: LD_ADDR_OWVAR 42
70467: PUSH
70468: LD_INT 2
70470: ST_TO_ADDR
70471: GO 70871
70473: LD_INT 15
70475: DOUBLE
70476: EQUAL
70477: IFTRUE 70481
70479: GO 70492
70481: POP
// bc_type := b_factory ; 16 :
70482: LD_ADDR_OWVAR 42
70486: PUSH
70487: LD_INT 3
70489: ST_TO_ADDR
70490: GO 70871
70492: LD_INT 16
70494: DOUBLE
70495: EQUAL
70496: IFTRUE 70500
70498: GO 70511
70500: POP
// bc_type := b_ext_gun ; 17 :
70501: LD_ADDR_OWVAR 42
70505: PUSH
70506: LD_INT 17
70508: ST_TO_ADDR
70509: GO 70871
70511: LD_INT 17
70513: DOUBLE
70514: EQUAL
70515: IFTRUE 70519
70517: GO 70547
70519: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70520: LD_ADDR_OWVAR 42
70524: PUSH
70525: LD_INT 19
70527: PUSH
70528: LD_INT 23
70530: PUSH
70531: LD_INT 19
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: LIST
70538: PUSH
70539: LD_VAR 0 1
70543: ARRAY
70544: ST_TO_ADDR
70545: GO 70871
70547: LD_INT 18
70549: DOUBLE
70550: EQUAL
70551: IFTRUE 70555
70553: GO 70566
70555: POP
// bc_type := b_ext_radar ; 19 :
70556: LD_ADDR_OWVAR 42
70560: PUSH
70561: LD_INT 20
70563: ST_TO_ADDR
70564: GO 70871
70566: LD_INT 19
70568: DOUBLE
70569: EQUAL
70570: IFTRUE 70574
70572: GO 70585
70574: POP
// bc_type := b_ext_radio ; 20 :
70575: LD_ADDR_OWVAR 42
70579: PUSH
70580: LD_INT 22
70582: ST_TO_ADDR
70583: GO 70871
70585: LD_INT 20
70587: DOUBLE
70588: EQUAL
70589: IFTRUE 70593
70591: GO 70604
70593: POP
// bc_type := b_ext_siberium ; 21 :
70594: LD_ADDR_OWVAR 42
70598: PUSH
70599: LD_INT 21
70601: ST_TO_ADDR
70602: GO 70871
70604: LD_INT 21
70606: DOUBLE
70607: EQUAL
70608: IFTRUE 70612
70610: GO 70623
70612: POP
// bc_type := b_ext_computer ; 22 :
70613: LD_ADDR_OWVAR 42
70617: PUSH
70618: LD_INT 24
70620: ST_TO_ADDR
70621: GO 70871
70623: LD_INT 22
70625: DOUBLE
70626: EQUAL
70627: IFTRUE 70631
70629: GO 70642
70631: POP
// bc_type := b_ext_track ; 23 :
70632: LD_ADDR_OWVAR 42
70636: PUSH
70637: LD_INT 16
70639: ST_TO_ADDR
70640: GO 70871
70642: LD_INT 23
70644: DOUBLE
70645: EQUAL
70646: IFTRUE 70650
70648: GO 70661
70650: POP
// bc_type := b_ext_laser ; 24 :
70651: LD_ADDR_OWVAR 42
70655: PUSH
70656: LD_INT 25
70658: ST_TO_ADDR
70659: GO 70871
70661: LD_INT 24
70663: DOUBLE
70664: EQUAL
70665: IFTRUE 70669
70667: GO 70680
70669: POP
// bc_type := b_control_tower ; 25 :
70670: LD_ADDR_OWVAR 42
70674: PUSH
70675: LD_INT 36
70677: ST_TO_ADDR
70678: GO 70871
70680: LD_INT 25
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70688
70686: GO 70699
70688: POP
// bc_type := b_breastwork ; 26 :
70689: LD_ADDR_OWVAR 42
70693: PUSH
70694: LD_INT 31
70696: ST_TO_ADDR
70697: GO 70871
70699: LD_INT 26
70701: DOUBLE
70702: EQUAL
70703: IFTRUE 70707
70705: GO 70718
70707: POP
// bc_type := b_bunker ; 27 :
70708: LD_ADDR_OWVAR 42
70712: PUSH
70713: LD_INT 32
70715: ST_TO_ADDR
70716: GO 70871
70718: LD_INT 27
70720: DOUBLE
70721: EQUAL
70722: IFTRUE 70726
70724: GO 70737
70726: POP
// bc_type := b_turret ; 28 :
70727: LD_ADDR_OWVAR 42
70731: PUSH
70732: LD_INT 33
70734: ST_TO_ADDR
70735: GO 70871
70737: LD_INT 28
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70745
70743: GO 70756
70745: POP
// bc_type := b_armoury ; 29 :
70746: LD_ADDR_OWVAR 42
70750: PUSH
70751: LD_INT 4
70753: ST_TO_ADDR
70754: GO 70871
70756: LD_INT 29
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70764
70762: GO 70775
70764: POP
// bc_type := b_barracks ; 30 :
70765: LD_ADDR_OWVAR 42
70769: PUSH
70770: LD_INT 5
70772: ST_TO_ADDR
70773: GO 70871
70775: LD_INT 30
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70783
70781: GO 70794
70783: POP
// bc_type := b_solar_power ; 31 :
70784: LD_ADDR_OWVAR 42
70788: PUSH
70789: LD_INT 27
70791: ST_TO_ADDR
70792: GO 70871
70794: LD_INT 31
70796: DOUBLE
70797: EQUAL
70798: IFTRUE 70802
70800: GO 70813
70802: POP
// bc_type := b_oil_power ; 32 :
70803: LD_ADDR_OWVAR 42
70807: PUSH
70808: LD_INT 26
70810: ST_TO_ADDR
70811: GO 70871
70813: LD_INT 32
70815: DOUBLE
70816: EQUAL
70817: IFTRUE 70821
70819: GO 70832
70821: POP
// bc_type := b_siberite_power ; 33 :
70822: LD_ADDR_OWVAR 42
70826: PUSH
70827: LD_INT 28
70829: ST_TO_ADDR
70830: GO 70871
70832: LD_INT 33
70834: DOUBLE
70835: EQUAL
70836: IFTRUE 70840
70838: GO 70851
70840: POP
// bc_type := b_oil_mine ; 34 :
70841: LD_ADDR_OWVAR 42
70845: PUSH
70846: LD_INT 29
70848: ST_TO_ADDR
70849: GO 70871
70851: LD_INT 34
70853: DOUBLE
70854: EQUAL
70855: IFTRUE 70859
70857: GO 70870
70859: POP
// bc_type := b_siberite_mine ; end ;
70860: LD_ADDR_OWVAR 42
70864: PUSH
70865: LD_INT 30
70867: ST_TO_ADDR
70868: GO 70871
70870: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70871: LD_ADDR_VAR 0 8
70875: PUSH
70876: LD_VAR 0 5
70880: PPUSH
70881: LD_VAR 0 6
70885: PPUSH
70886: LD_VAR 0 3
70890: PPUSH
70891: CALL_OW 47
70895: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70896: LD_OWVAR 42
70900: PUSH
70901: LD_INT 32
70903: PUSH
70904: LD_INT 33
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: IN
70911: IFFALSE 70927
// PlaceWeaponTurret ( b , weapon ) ;
70913: LD_VAR 0 8
70917: PPUSH
70918: LD_VAR 0 4
70922: PPUSH
70923: CALL_OW 431
// end ;
70927: LD_VAR 0 7
70931: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70932: LD_INT 0
70934: PPUSH
70935: PPUSH
70936: PPUSH
70937: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70938: LD_ADDR_VAR 0 4
70942: PUSH
70943: LD_INT 22
70945: PUSH
70946: LD_OWVAR 2
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 2
70957: PUSH
70958: LD_INT 30
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 30
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: LIST
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PPUSH
70987: CALL_OW 69
70991: ST_TO_ADDR
// if not tmp then
70992: LD_VAR 0 4
70996: NOT
70997: IFFALSE 71001
// exit ;
70999: GO 71060
// for i in tmp do
71001: LD_ADDR_VAR 0 2
71005: PUSH
71006: LD_VAR 0 4
71010: PUSH
71011: FOR_IN
71012: IFFALSE 71058
// for j = 1 to 3 do
71014: LD_ADDR_VAR 0 3
71018: PUSH
71019: DOUBLE
71020: LD_INT 1
71022: DEC
71023: ST_TO_ADDR
71024: LD_INT 3
71026: PUSH
71027: FOR_TO
71028: IFFALSE 71054
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71030: LD_VAR 0 2
71034: PPUSH
71035: CALL_OW 274
71039: PPUSH
71040: LD_VAR 0 3
71044: PPUSH
71045: LD_INT 99999
71047: PPUSH
71048: CALL_OW 277
71052: GO 71027
71054: POP
71055: POP
71056: GO 71011
71058: POP
71059: POP
// end ;
71060: LD_VAR 0 1
71064: RET
// export function hHackSetLevel10 ; var i , j ; begin
71065: LD_INT 0
71067: PPUSH
71068: PPUSH
71069: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71070: LD_ADDR_VAR 0 2
71074: PUSH
71075: LD_INT 21
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PPUSH
71085: CALL_OW 69
71089: PUSH
71090: FOR_IN
71091: IFFALSE 71143
// if IsSelected ( i ) then
71093: LD_VAR 0 2
71097: PPUSH
71098: CALL_OW 306
71102: IFFALSE 71141
// begin for j := 1 to 4 do
71104: LD_ADDR_VAR 0 3
71108: PUSH
71109: DOUBLE
71110: LD_INT 1
71112: DEC
71113: ST_TO_ADDR
71114: LD_INT 4
71116: PUSH
71117: FOR_TO
71118: IFFALSE 71139
// SetSkill ( i , j , 10 ) ;
71120: LD_VAR 0 2
71124: PPUSH
71125: LD_VAR 0 3
71129: PPUSH
71130: LD_INT 10
71132: PPUSH
71133: CALL_OW 237
71137: GO 71117
71139: POP
71140: POP
// end ;
71141: GO 71090
71143: POP
71144: POP
// end ;
71145: LD_VAR 0 1
71149: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71150: LD_INT 0
71152: PPUSH
71153: PPUSH
71154: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71155: LD_ADDR_VAR 0 2
71159: PUSH
71160: LD_INT 22
71162: PUSH
71163: LD_OWVAR 2
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 21
71174: PUSH
71175: LD_INT 1
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PPUSH
71186: CALL_OW 69
71190: PUSH
71191: FOR_IN
71192: IFFALSE 71233
// begin for j := 1 to 4 do
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: DOUBLE
71200: LD_INT 1
71202: DEC
71203: ST_TO_ADDR
71204: LD_INT 4
71206: PUSH
71207: FOR_TO
71208: IFFALSE 71229
// SetSkill ( i , j , 10 ) ;
71210: LD_VAR 0 2
71214: PPUSH
71215: LD_VAR 0 3
71219: PPUSH
71220: LD_INT 10
71222: PPUSH
71223: CALL_OW 237
71227: GO 71207
71229: POP
71230: POP
// end ;
71231: GO 71191
71233: POP
71234: POP
// end ;
71235: LD_VAR 0 1
71239: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71240: LD_INT 0
71242: PPUSH
// uc_side := your_side ;
71243: LD_ADDR_OWVAR 20
71247: PUSH
71248: LD_OWVAR 2
71252: ST_TO_ADDR
// uc_nation := nation ;
71253: LD_ADDR_OWVAR 21
71257: PUSH
71258: LD_VAR 0 1
71262: ST_TO_ADDR
// InitHc ;
71263: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71267: LD_INT 0
71269: PPUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: LD_VAR 0 3
71279: PPUSH
71280: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71284: LD_VAR 0 4
71288: PPUSH
71289: LD_VAR 0 5
71293: PPUSH
71294: CALL_OW 428
71298: PUSH
71299: LD_INT 0
71301: EQUAL
71302: IFFALSE 71326
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71304: CALL_OW 44
71308: PPUSH
71309: LD_VAR 0 4
71313: PPUSH
71314: LD_VAR 0 5
71318: PPUSH
71319: LD_INT 1
71321: PPUSH
71322: CALL_OW 48
// end ;
71326: LD_VAR 0 6
71330: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71331: LD_INT 0
71333: PPUSH
71334: PPUSH
// uc_side := your_side ;
71335: LD_ADDR_OWVAR 20
71339: PUSH
71340: LD_OWVAR 2
71344: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71345: LD_VAR 0 1
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: LD_INT 2
71355: PUSH
71356: LD_INT 3
71358: PUSH
71359: LD_INT 4
71361: PUSH
71362: LD_INT 5
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: IN
71372: IFFALSE 71384
// uc_nation := nation_american else
71374: LD_ADDR_OWVAR 21
71378: PUSH
71379: LD_INT 1
71381: ST_TO_ADDR
71382: GO 71427
// if chassis in [ 11 , 12 , 13 , 14 ] then
71384: LD_VAR 0 1
71388: PUSH
71389: LD_INT 11
71391: PUSH
71392: LD_INT 12
71394: PUSH
71395: LD_INT 13
71397: PUSH
71398: LD_INT 14
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: IN
71407: IFFALSE 71419
// uc_nation := nation_arabian else
71409: LD_ADDR_OWVAR 21
71413: PUSH
71414: LD_INT 2
71416: ST_TO_ADDR
71417: GO 71427
// uc_nation := nation_russian ;
71419: LD_ADDR_OWVAR 21
71423: PUSH
71424: LD_INT 3
71426: ST_TO_ADDR
// vc_chassis := chassis ;
71427: LD_ADDR_OWVAR 37
71431: PUSH
71432: LD_VAR 0 1
71436: ST_TO_ADDR
// vc_engine := engine ;
71437: LD_ADDR_OWVAR 39
71441: PUSH
71442: LD_VAR 0 2
71446: ST_TO_ADDR
// vc_control := control ;
71447: LD_ADDR_OWVAR 38
71451: PUSH
71452: LD_VAR 0 3
71456: ST_TO_ADDR
// vc_weapon := weapon ;
71457: LD_ADDR_OWVAR 40
71461: PUSH
71462: LD_VAR 0 4
71466: ST_TO_ADDR
// un := CreateVehicle ;
71467: LD_ADDR_VAR 0 8
71471: PUSH
71472: CALL_OW 45
71476: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71477: LD_VAR 0 8
71481: PPUSH
71482: LD_INT 0
71484: PPUSH
71485: LD_INT 5
71487: PPUSH
71488: CALL_OW 12
71492: PPUSH
71493: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71497: LD_VAR 0 8
71501: PPUSH
71502: LD_VAR 0 5
71506: PPUSH
71507: LD_VAR 0 6
71511: PPUSH
71512: LD_INT 1
71514: PPUSH
71515: CALL_OW 48
// end ;
71519: LD_VAR 0 7
71523: RET
// export hInvincible ; every 1 do
71524: GO 71526
71526: DISABLE
// hInvincible := [ ] ;
71527: LD_ADDR_EXP 98
71531: PUSH
71532: EMPTY
71533: ST_TO_ADDR
71534: END
// every 10 do var i ;
71535: GO 71537
71537: DISABLE
71538: LD_INT 0
71540: PPUSH
// begin enable ;
71541: ENABLE
// if not hInvincible then
71542: LD_EXP 98
71546: NOT
71547: IFFALSE 71551
// exit ;
71549: GO 71595
// for i in hInvincible do
71551: LD_ADDR_VAR 0 1
71555: PUSH
71556: LD_EXP 98
71560: PUSH
71561: FOR_IN
71562: IFFALSE 71593
// if GetLives ( i ) < 1000 then
71564: LD_VAR 0 1
71568: PPUSH
71569: CALL_OW 256
71573: PUSH
71574: LD_INT 1000
71576: LESS
71577: IFFALSE 71591
// SetLives ( i , 1000 ) ;
71579: LD_VAR 0 1
71583: PPUSH
71584: LD_INT 1000
71586: PPUSH
71587: CALL_OW 234
71591: GO 71561
71593: POP
71594: POP
// end ;
71595: PPOPN 1
71597: END
// export function hHackInvincible ; var i ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71602: LD_ADDR_VAR 0 2
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 21
71612: PUSH
71613: LD_INT 1
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 21
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: PPUSH
71635: CALL_OW 69
71639: PUSH
71640: FOR_IN
71641: IFFALSE 71702
// if IsSelected ( i ) then
71643: LD_VAR 0 2
71647: PPUSH
71648: CALL_OW 306
71652: IFFALSE 71700
// begin if i in hInvincible then
71654: LD_VAR 0 2
71658: PUSH
71659: LD_EXP 98
71663: IN
71664: IFFALSE 71684
// hInvincible := hInvincible diff i else
71666: LD_ADDR_EXP 98
71670: PUSH
71671: LD_EXP 98
71675: PUSH
71676: LD_VAR 0 2
71680: DIFF
71681: ST_TO_ADDR
71682: GO 71700
// hInvincible := hInvincible union i ;
71684: LD_ADDR_EXP 98
71688: PUSH
71689: LD_EXP 98
71693: PUSH
71694: LD_VAR 0 2
71698: UNION
71699: ST_TO_ADDR
// end ;
71700: GO 71640
71702: POP
71703: POP
// end ;
71704: LD_VAR 0 1
71708: RET
// export function hHackInvisible ; var i , j ; begin
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
71713: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71714: LD_ADDR_VAR 0 2
71718: PUSH
71719: LD_INT 21
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PPUSH
71729: CALL_OW 69
71733: PUSH
71734: FOR_IN
71735: IFFALSE 71759
// if IsSelected ( i ) then
71737: LD_VAR 0 2
71741: PPUSH
71742: CALL_OW 306
71746: IFFALSE 71757
// ComForceInvisible ( i ) ;
71748: LD_VAR 0 2
71752: PPUSH
71753: CALL_OW 496
71757: GO 71734
71759: POP
71760: POP
// end ;
71761: LD_VAR 0 1
71765: RET
// export function hHackChangeYourSide ; begin
71766: LD_INT 0
71768: PPUSH
// if your_side = 8 then
71769: LD_OWVAR 2
71773: PUSH
71774: LD_INT 8
71776: EQUAL
71777: IFFALSE 71789
// your_side := 0 else
71779: LD_ADDR_OWVAR 2
71783: PUSH
71784: LD_INT 0
71786: ST_TO_ADDR
71787: GO 71803
// your_side := your_side + 1 ;
71789: LD_ADDR_OWVAR 2
71793: PUSH
71794: LD_OWVAR 2
71798: PUSH
71799: LD_INT 1
71801: PLUS
71802: ST_TO_ADDR
// end ;
71803: LD_VAR 0 1
71807: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71808: LD_INT 0
71810: PPUSH
71811: PPUSH
71812: PPUSH
// for i in all_units do
71813: LD_ADDR_VAR 0 2
71817: PUSH
71818: LD_OWVAR 3
71822: PUSH
71823: FOR_IN
71824: IFFALSE 71902
// if IsSelected ( i ) then
71826: LD_VAR 0 2
71830: PPUSH
71831: CALL_OW 306
71835: IFFALSE 71900
// begin j := GetSide ( i ) ;
71837: LD_ADDR_VAR 0 3
71841: PUSH
71842: LD_VAR 0 2
71846: PPUSH
71847: CALL_OW 255
71851: ST_TO_ADDR
// if j = 8 then
71852: LD_VAR 0 3
71856: PUSH
71857: LD_INT 8
71859: EQUAL
71860: IFFALSE 71872
// j := 0 else
71862: LD_ADDR_VAR 0 3
71866: PUSH
71867: LD_INT 0
71869: ST_TO_ADDR
71870: GO 71886
// j := j + 1 ;
71872: LD_ADDR_VAR 0 3
71876: PUSH
71877: LD_VAR 0 3
71881: PUSH
71882: LD_INT 1
71884: PLUS
71885: ST_TO_ADDR
// SetSide ( i , j ) ;
71886: LD_VAR 0 2
71890: PPUSH
71891: LD_VAR 0 3
71895: PPUSH
71896: CALL_OW 235
// end ;
71900: GO 71823
71902: POP
71903: POP
// end ;
71904: LD_VAR 0 1
71908: RET
// export function hHackFog ; begin
71909: LD_INT 0
71911: PPUSH
// FogOff ( true ) ;
71912: LD_INT 1
71914: PPUSH
71915: CALL_OW 344
// end ;
71919: LD_VAR 0 1
71923: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71924: LD_INT 0
71926: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71927: LD_VAR 0 1
71931: PPUSH
71932: LD_VAR 0 2
71936: PPUSH
71937: LD_VAR 0 3
71941: PPUSH
71942: LD_INT 1
71944: PPUSH
71945: LD_INT 1
71947: PPUSH
71948: CALL_OW 483
// CenterOnXY ( x , y ) ;
71952: LD_VAR 0 2
71956: PPUSH
71957: LD_VAR 0 3
71961: PPUSH
71962: CALL_OW 84
// end ; end_of_file
71966: LD_VAR 0 4
71970: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71971: LD_VAR 0 1
71975: PPUSH
71976: LD_VAR 0 2
71980: PPUSH
71981: LD_VAR 0 3
71985: PPUSH
71986: LD_VAR 0 4
71990: PPUSH
71991: LD_VAR 0 5
71995: PPUSH
71996: LD_VAR 0 6
72000: PPUSH
72001: CALL 58799 0 6
// end ; end_of_file end_of_file
72005: PPOPN 6
72007: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
72008: LD_INT 0
72010: PPUSH
// ar_miner := 81 ;
72011: LD_ADDR_EXP 106
72015: PUSH
72016: LD_INT 81
72018: ST_TO_ADDR
// ar_crane := 88 ;
72019: LD_ADDR_EXP 105
72023: PUSH
72024: LD_INT 88
72026: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
72027: LD_ADDR_EXP 100
72031: PUSH
72032: LD_INT 89
72034: ST_TO_ADDR
// us_hack := 99 ;
72035: LD_ADDR_EXP 101
72039: PUSH
72040: LD_INT 99
72042: ST_TO_ADDR
// us_artillery := 97 ;
72043: LD_ADDR_EXP 102
72047: PUSH
72048: LD_INT 97
72050: ST_TO_ADDR
// ar_bio_bomb := 91 ;
72051: LD_ADDR_EXP 103
72055: PUSH
72056: LD_INT 91
72058: ST_TO_ADDR
// ar_mortar := 92 ;
72059: LD_ADDR_EXP 104
72063: PUSH
72064: LD_INT 92
72066: ST_TO_ADDR
// ru_radar := 98 ;
72067: LD_ADDR_EXP 99
72071: PUSH
72072: LD_INT 98
72074: ST_TO_ADDR
// tech_Artillery := 80 ;
72075: LD_ADDR_EXP 107
72079: PUSH
72080: LD_INT 80
72082: ST_TO_ADDR
// tech_RadMat := 81 ;
72083: LD_ADDR_EXP 108
72087: PUSH
72088: LD_INT 81
72090: ST_TO_ADDR
// tech_BasicTools := 82 ;
72091: LD_ADDR_EXP 109
72095: PUSH
72096: LD_INT 82
72098: ST_TO_ADDR
// tech_Cargo := 83 ;
72099: LD_ADDR_EXP 110
72103: PUSH
72104: LD_INT 83
72106: ST_TO_ADDR
// tech_Track := 84 ;
72107: LD_ADDR_EXP 111
72111: PUSH
72112: LD_INT 84
72114: ST_TO_ADDR
// tech_Crane := 85 ;
72115: LD_ADDR_EXP 112
72119: PUSH
72120: LD_INT 85
72122: ST_TO_ADDR
// tech_Bulldozer := 86 ;
72123: LD_ADDR_EXP 113
72127: PUSH
72128: LD_INT 86
72130: ST_TO_ADDR
// tech_Hovercraft := 87 ;
72131: LD_ADDR_EXP 114
72135: PUSH
72136: LD_INT 87
72138: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
72139: LD_ADDR_EXP 115
72143: PUSH
72144: LD_INT 88
72146: ST_TO_ADDR
// class_mastodont := 31 ;
72147: LD_ADDR_EXP 116
72151: PUSH
72152: LD_INT 31
72154: ST_TO_ADDR
// class_horse := 21 ;
72155: LD_ADDR_EXP 117
72159: PUSH
72160: LD_INT 21
72162: ST_TO_ADDR
// end ;
72163: LD_VAR 0 1
72167: RET
// every 1 do
72168: GO 72170
72170: DISABLE
// InitGlobalVariables ;
72171: CALL 72008 0 0
72175: END
