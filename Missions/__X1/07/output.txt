// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 74705 0 0
// Init ;
   8: CALL 66 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 408 0 3
// PrepareAmerican ;
  32: CALL 2524 0 0
// PrepareArabian ;
  36: CALL 1206 0 0
// Action ;
  40: CALL 7259 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 65
// begin Difficulty := 4 ;
  50: LD_ADDR_OWVAR 67
  54: PUSH
  55: LD_INT 4
  57: ST_TO_ADDR
// FogOff ( 2 ) ;
  58: LD_INT 2
  60: PPUSH
  61: CALL_OW 344
// end ; end ;
  65: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// prefix := 06_ ;
  77: LD_ADDR_EXP 2
  81: PUSH
  82: LD_STRING 06_
  84: ST_TO_ADDR
// scoutActive := 0 ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutFailed := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// scoutSuccess := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usAttacksAllowed := false ;
 109: LD_ADDR_EXP 6
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// usSurrender := false ;
 117: LD_ADDR_EXP 7
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianAttack := false ;
 125: LD_ADDR_EXP 8
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// hasRockets := false ;
 133: LD_ADDR_EXP 9
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// seeRemoteVehicle := false ;
 141: LD_ADDR_EXP 10
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// seeHeavyGun := false ;
 149: LD_ADDR_EXP 11
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 12
 161: PUSH
 162: LD_INT 3
 164: PUSH
 165: LD_INT 2
 167: PUSH
 168: LD_INT 2
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// end ; end_of_file
 186: LD_VAR 0 1
 190: RET
// export function SayX ( units , ident ) ; var i ; begin
 191: LD_INT 0
 193: PPUSH
 194: PPUSH
// result := false ;
 195: LD_ADDR_VAR 0 3
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// if not units then
 203: LD_VAR 0 1
 207: NOT
 208: IFFALSE 212
// exit ;
 210: GO 266
// for i in units do
 212: LD_ADDR_VAR 0 4
 216: PUSH
 217: LD_VAR 0 1
 221: PUSH
 222: FOR_IN
 223: IFFALSE 264
// if IsOk ( i ) then
 225: LD_VAR 0 4
 229: PPUSH
 230: CALL_OW 302
 234: IFFALSE 262
// begin Say ( i , ident ) ;
 236: LD_VAR 0 4
 240: PPUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 88
// result := i ;
 250: LD_ADDR_VAR 0 3
 254: PUSH
 255: LD_VAR 0 4
 259: ST_TO_ADDR
// break ;
 260: GO 264
// end ;
 262: GO 222
 264: POP
 265: POP
// end ;
 266: LD_VAR 0 3
 270: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 271: LD_INT 0
 273: PPUSH
 274: PPUSH
// InitUc ;
 275: CALL_OW 18
// InitHc ;
 279: CALL_OW 19
// uc_side := 0 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// uc_nation := 0 ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 0
 298: ST_TO_ADDR
// for i = 1 to amount do
 299: LD_ADDR_VAR 0 4
 303: PUSH
 304: DOUBLE
 305: LD_INT 1
 307: DEC
 308: ST_TO_ADDR
 309: LD_VAR 0 2
 313: PUSH
 314: FOR_TO
 315: IFFALSE 397
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 317: LD_ADDR_OWVAR 29
 321: PUSH
 322: LD_INT 9
 324: PPUSH
 325: LD_INT 12
 327: PPUSH
 328: CALL_OW 12
 332: PUSH
 333: LD_INT 9
 335: PPUSH
 336: LD_INT 12
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 348: LD_ADDR_OWVAR 35
 352: PUSH
 353: LD_INT 1
 355: NEG
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 12
 364: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 365: LD_INT 0
 367: PPUSH
 368: LD_INT 12
 370: PPUSH
 371: LD_INT 1
 373: PPUSH
 374: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 378: CALL_OW 44
 382: PPUSH
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 49
// end ;
 395: GO 314
 397: POP
 398: POP
// InitHc ;
 399: CALL_OW 19
// end ;
 403: LD_VAR 0 3
 407: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 408: LD_INT 0
 410: PPUSH
 411: PPUSH
// uc_side := 0 ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// uc_nation := 0 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 0
 427: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 9
 435: PUSH
 436: LD_INT 8
 438: PUSH
 439: LD_INT 7
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_OWVAR 67
 455: ARRAY
 456: PPUSH
 457: CALL 271 0 2
// for i := 1 to 4 do
 461: LD_ADDR_VAR 0 5
 465: PUSH
 466: DOUBLE
 467: LD_INT 1
 469: DEC
 470: ST_TO_ADDR
 471: LD_INT 4
 473: PUSH
 474: FOR_TO
 475: IFFALSE 514
// begin hc_class := class_horse ;
 477: LD_ADDR_OWVAR 28
 481: PUSH
 482: LD_EXP 121
 486: ST_TO_ADDR
// hc_gallery :=  ;
 487: LD_ADDR_OWVAR 33
 491: PUSH
 492: LD_STRING 
 494: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 495: CALL_OW 44
 499: PPUSH
 500: LD_VAR 0 2
 504: PPUSH
 505: LD_INT 0
 507: PPUSH
 508: CALL_OW 49
// end ;
 512: GO 474
 514: POP
 515: POP
// for i = 1 to 5 do
 516: LD_ADDR_VAR 0 5
 520: PUSH
 521: DOUBLE
 522: LD_INT 1
 524: DEC
 525: ST_TO_ADDR
 526: LD_INT 5
 528: PUSH
 529: FOR_TO
 530: IFFALSE 584
// begin hc_class = class_tiger ;
 532: LD_ADDR_OWVAR 28
 536: PUSH
 537: LD_INT 14
 539: ST_TO_ADDR
// hc_gallery =  ;
 540: LD_ADDR_OWVAR 33
 544: PUSH
 545: LD_STRING 
 547: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 548: LD_ADDR_OWVAR 35
 552: PUSH
 553: LD_INT 7
 555: NEG
 556: PPUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 12
 564: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 565: CALL_OW 44
 569: PPUSH
 570: LD_VAR 0 2
 574: PPUSH
 575: LD_INT 0
 577: PPUSH
 578: CALL 50810 0 3
// end ;
 582: GO 529
 584: POP
 585: POP
// for i := 1 to 4 do
 586: LD_ADDR_VAR 0 5
 590: PUSH
 591: DOUBLE
 592: LD_INT 1
 594: DEC
 595: ST_TO_ADDR
 596: LD_INT 4
 598: PUSH
 599: FOR_TO
 600: IFFALSE 637
// begin hc_class := class_phororhacos ;
 602: LD_ADDR_OWVAR 28
 606: PUSH
 607: LD_INT 18
 609: ST_TO_ADDR
// hc_gallery :=  ;
 610: LD_ADDR_OWVAR 33
 614: PUSH
 615: LD_STRING 
 617: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 618: CALL_OW 44
 622: PPUSH
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 0
 630: PPUSH
 631: CALL_OW 49
// end ;
 635: GO 599
 637: POP
 638: POP
// for i := 1 to 4 do
 639: LD_ADDR_VAR 0 5
 643: PUSH
 644: DOUBLE
 645: LD_INT 1
 647: DEC
 648: ST_TO_ADDR
 649: LD_INT 4
 651: PUSH
 652: FOR_TO
 653: IFFALSE 690
// begin hc_class := class_baggie ;
 655: LD_ADDR_OWVAR 28
 659: PUSH
 660: LD_INT 13
 662: ST_TO_ADDR
// hc_gallery :=  ;
 663: LD_ADDR_OWVAR 33
 667: PUSH
 668: LD_STRING 
 670: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 671: CALL_OW 44
 675: PPUSH
 676: LD_VAR 0 2
 680: PPUSH
 681: LD_INT 0
 683: PPUSH
 684: CALL_OW 49
// end ;
 688: GO 652
 690: POP
 691: POP
// for i := 1 to 5 do
 692: LD_ADDR_VAR 0 5
 696: PUSH
 697: DOUBLE
 698: LD_INT 1
 700: DEC
 701: ST_TO_ADDR
 702: LD_INT 5
 704: PUSH
 705: FOR_TO
 706: IFFALSE 743
// begin hc_class := class_fish ;
 708: LD_ADDR_OWVAR 28
 712: PUSH
 713: LD_INT 20
 715: ST_TO_ADDR
// hc_gallery :=  ;
 716: LD_ADDR_OWVAR 33
 720: PUSH
 721: LD_STRING 
 723: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 724: CALL_OW 44
 728: PPUSH
 729: LD_VAR 0 3
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL_OW 49
// end ;
 741: GO 705
 743: POP
 744: POP
// end ;
 745: LD_VAR 0 4
 749: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
 754: PPUSH
// if not observer or not unit then
 755: LD_VAR 0 1
 759: NOT
 760: PUSH
 761: LD_VAR 0 2
 765: NOT
 766: OR
 767: IFFALSE 771
// exit ;
 769: GO 819
// if not See ( GetSide ( observer ) , unit ) then
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 255
 780: PPUSH
 781: LD_VAR 0 2
 785: PPUSH
 786: CALL_OW 292
 790: NOT
 791: IFFALSE 795
// exit ;
 793: GO 819
// result := GetDistUnits ( observer , unit ) < 12 ;
 795: LD_ADDR_VAR 0 3
 799: PUSH
 800: LD_VAR 0 1
 804: PPUSH
 805: LD_VAR 0 2
 809: PPUSH
 810: CALL_OW 296
 814: PUSH
 815: LD_INT 12
 817: LESS
 818: ST_TO_ADDR
// end ;
 819: LD_VAR 0 3
 823: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 824: LD_INT 0
 826: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 2
 843: ARRAY
 844: PPUSH
 845: CALL_OW 488
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_INT 1
 857: ARRAY
 858: PPUSH
 859: LD_VAR 0 2
 863: PUSH
 864: LD_INT 2
 866: ARRAY
 867: PPUSH
 868: CALL_OW 428
 872: PUSH
 873: LD_INT 0
 875: EQUAL
 876: AND
 877: IFFALSE 911
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 879: LD_VAR 0 1
 883: PPUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 3
 906: PPUSH
 907: CALL_OW 48
// end ;
 911: LD_VAR 0 4
 915: RET
// export function ReverseArray ( array ) ; var i ; begin
 916: LD_INT 0
 918: PPUSH
 919: PPUSH
// if not array then
 920: LD_VAR 0 1
 924: NOT
 925: IFFALSE 929
// exit ;
 927: GO 987
// result := [ ] ;
 929: LD_ADDR_VAR 0 2
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// for i := 1 to array do
 936: LD_ADDR_VAR 0 3
 940: PUSH
 941: DOUBLE
 942: LD_INT 1
 944: DEC
 945: ST_TO_ADDR
 946: LD_VAR 0 1
 950: PUSH
 951: FOR_TO
 952: IFFALSE 985
// result := Insert ( result , 1 , array [ i ] ) ;
 954: LD_ADDR_VAR 0 2
 958: PUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: LD_VAR 0 1
 971: PUSH
 972: LD_VAR 0 3
 976: ARRAY
 977: PPUSH
 978: CALL_OW 2
 982: ST_TO_ADDR
 983: GO 951
 985: POP
 986: POP
// end ;
 987: LD_VAR 0 2
 991: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 992: LD_INT 0
 994: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 995: LD_VAR 0 1
 999: PPUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: LD_VAR 0 3
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1019: LD_VAR 0 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: LD_VAR 0 3
1033: PPUSH
1034: CALL_OW 331
// end ;
1038: LD_VAR 0 5
1042: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1043: LD_INT 0
1045: PPUSH
// if not units then
1046: LD_VAR 0 1
1050: NOT
1051: IFFALSE 1055
// exit ;
1053: GO 1138
// result := true ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_INT 1
1062: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1063: LD_VAR 0 1
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: LD_VAR 0 2
1091: PPUSH
1092: CALL_OW 88
1096: NOT
1097: IFFALSE 1138
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1099: LD_ADDR_VAR 0 4
1103: PUSH
1104: LD_VAR 0 1
1108: PPUSH
1109: LD_INT 26
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PPUSH
1119: CALL_OW 72
1123: PUSH
1124: LD_INT 1
1126: ARRAY
1127: PPUSH
1128: LD_VAR 0 3
1132: PPUSH
1133: CALL_OW 88
1137: ST_TO_ADDR
// end ;
1138: LD_VAR 0 4
1142: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not group then
1147: LD_VAR 0 2
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1201
// for i in group do
1156: LD_ADDR_VAR 0 4
1160: PUSH
1161: LD_VAR 0 2
1165: PUSH
1166: FOR_IN
1167: IFFALSE 1199
// if See ( side , i ) then
1169: LD_VAR 0 1
1173: PPUSH
1174: LD_VAR 0 4
1178: PPUSH
1179: CALL_OW 292
1183: IFFALSE 1197
// begin result := true ;
1185: LD_ADDR_VAR 0 3
1189: PUSH
1190: LD_INT 1
1192: ST_TO_ADDR
// exit ;
1193: POP
1194: POP
1195: GO 1201
// end ;
1197: GO 1166
1199: POP
1200: POP
// end ; end_of_file
1201: LD_VAR 0 3
1205: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1206: LD_INT 0
1208: PPUSH
1209: PPUSH
1210: PPUSH
1211: PPUSH
// uc_nation := 2 ;
1212: LD_ADDR_OWVAR 21
1216: PUSH
1217: LD_INT 2
1219: ST_TO_ADDR
// uc_side := 5 ;
1220: LD_ADDR_OWVAR 20
1224: PUSH
1225: LD_INT 5
1227: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1228: LD_ADDR_EXP 21
1232: PUSH
1233: LD_STRING Abdul
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: LD_STRING 
1241: PPUSH
1242: CALL 15212 0 3
1246: ST_TO_ADDR
// uc_side := 2 ;
1247: LD_ADDR_OWVAR 20
1251: PUSH
1252: LD_INT 2
1254: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1255: LD_ADDR_EXP 13
1259: PUSH
1260: LD_STRING Heike
1262: PPUSH
1263: LD_EXP 1
1267: NOT
1268: PPUSH
1269: LD_EXP 2
1273: PPUSH
1274: CALL 15212 0 3
1278: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1279: LD_ADDR_EXP 16
1283: PUSH
1284: LD_STRING Ibrahim
1286: PPUSH
1287: LD_EXP 1
1291: NOT
1292: PPUSH
1293: LD_EXP 2
1297: PPUSH
1298: CALL 15212 0 3
1302: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1303: LD_ADDR_EXP 14
1307: PUSH
1308: LD_STRING Givi
1310: PPUSH
1311: LD_EXP 1
1315: NOT
1316: PPUSH
1317: LD_EXP 2
1321: PPUSH
1322: CALL 15212 0 3
1326: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1327: LD_ADDR_EXP 17
1331: PUSH
1332: LD_STRING Kamil
1334: PPUSH
1335: LD_EXP 1
1339: NOT
1340: PPUSH
1341: LD_EXP 2
1345: PPUSH
1346: CALL 15212 0 3
1350: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1351: LD_ADDR_EXP 18
1355: PUSH
1356: LD_STRING Kaia
1358: PPUSH
1359: LD_EXP 1
1363: NOT
1364: PPUSH
1365: LD_EXP 2
1369: PPUSH
1370: CALL 15212 0 3
1374: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1375: LD_ADDR_EXP 19
1379: PUSH
1380: LD_STRING Sophia
1382: PPUSH
1383: LD_EXP 1
1387: NOT
1388: PPUSH
1389: LD_EXP 2
1393: PPUSH
1394: CALL 15212 0 3
1398: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 20
1403: PUSH
1404: LD_STRING Markov
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 15212 0 3
1422: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 24
1427: PUSH
1428: LD_STRING Aviradze
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 15212 0 3
1446: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 23
1451: PUSH
1452: LD_STRING Kurt
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 15212 0 3
1470: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 15
1475: PUSH
1476: LD_STRING Mike
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 15212 0 3
1494: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1495: LD_ADDR_EXP 22
1499: PUSH
1500: LD_STRING Olaf
1502: PPUSH
1503: LD_INT 0
1505: PPUSH
1506: LD_STRING 
1508: PPUSH
1509: CALL 15212 0 3
1513: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1514: LD_ADDR_EXP 25
1518: PUSH
1519: LD_STRING 06_others
1521: PPUSH
1522: CALL_OW 31
1526: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1527: LD_ADDR_EXP 26
1531: PUSH
1532: LD_STRING 06_apes
1534: PPUSH
1535: CALL_OW 31
1539: ST_TO_ADDR
// if debug then
1540: LD_EXP 1
1544: IFFALSE 1819
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1546: LD_ADDR_VAR 0 3
1550: PUSH
1551: LD_INT 14
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 25
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 1000
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 31
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 1000
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 27
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 750
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 27
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 900
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 14
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 1000
1688: PUSH
1689: LD_INT 100
1691: PUSH
1692: LD_INT 0
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 14
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 32
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: LD_INT 1000
1725: PUSH
1726: LD_INT 50
1728: PUSH
1729: LD_INT 50
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 2
1753: PUSH
1754: LD_INT 27
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 1000
1762: PUSH
1763: LD_INT 0
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: LD_EXP 107
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 1000
1794: PUSH
1795: LD_INT 0
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1826
// tmp := [ ] ;
1819: LD_ADDR_VAR 0 3
1823: PUSH
1824: EMPTY
1825: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1826: LD_ADDR_EXP 27
1830: PUSH
1831: LD_STRING 06_Vehicles
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: CALL_OW 30
1843: ST_TO_ADDR
// counter := 0 ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 0
1851: ST_TO_ADDR
// if heikeVehicles then
1852: LD_EXP 27
1856: IFFALSE 1978
// begin for i := heikeVehicles downto 1 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_EXP 27
1868: INC
1869: ST_TO_ADDR
1870: LD_INT 1
1872: PUSH
1873: FOR_DOWNTO
1874: IFFALSE 1976
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1876: LD_EXP 27
1880: PUSH
1881: LD_VAR 0 2
1885: ARRAY
1886: PUSH
1887: LD_INT 3
1889: ARRAY
1890: PUSH
1891: LD_INT 2
1893: EQUAL
1894: IFFALSE 1974
// begin if counter < remoteControlLimit then
1896: LD_VAR 0 4
1900: PUSH
1901: LD_EXP 12
1905: LESS
1906: IFFALSE 1954
// begin counter := Inc ( counter ) ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: LD_VAR 0 4
1917: PPUSH
1918: CALL 53246 0 1
1922: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1923: LD_ADDR_EXP 27
1927: PUSH
1928: LD_EXP 27
1932: PPUSH
1933: LD_EXP 27
1937: PPUSH
1938: LD_EXP 27
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: CALL_OW 2
1953: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1954: LD_ADDR_EXP 27
1958: PUSH
1959: LD_EXP 27
1963: PPUSH
1964: LD_VAR 0 2
1968: PPUSH
1969: CALL_OW 3
1973: ST_TO_ADDR
// end ; end ;
1974: GO 1873
1976: POP
1977: POP
// end ; end ;
1978: LD_VAR 0 1
1982: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1983: LD_EXP 3
1987: IFFALSE 2521
1989: GO 1991
1991: DISABLE
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_INT 96
2003: PUSH
2004: LD_INT 50
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 49
2013: PUSH
2014: LD_INT 52
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 34
2023: PUSH
2024: LD_INT 55
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 41
2033: PUSH
2034: LD_INT 70
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 53
2043: PUSH
2044: LD_INT 96
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 103
2053: PUSH
2054: LD_INT 64
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 104
2071: PUSH
2072: LD_INT 70
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 111
2081: PUSH
2082: LD_INT 103
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 131
2091: PUSH
2092: LD_INT 147
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 130
2101: PUSH
2102: LD_INT 153
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 110
2111: PUSH
2112: LD_INT 93
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 103
2121: PUSH
2122: LD_INT 65
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// for i in tmp [ 1 ] do
2141: LD_ADDR_VAR 0 1
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 1
2153: ARRAY
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2208
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2158: LD_EXP 15
2162: PPUSH
2163: LD_VAR 0 1
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 1
2176: PUSH
2177: LD_INT 2
2179: ARRAY
2180: PPUSH
2181: CALL_OW 174
// AddComHold ( Mike ) ;
2185: LD_EXP 15
2189: PPUSH
2190: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2194: LD_EXP 15
2198: PPUSH
2199: LD_INT 175
2201: PPUSH
2202: CALL_OW 202
// end ;
2206: GO 2155
2208: POP
2209: POP
// for i in tmp [ 2 ] do
2210: LD_ADDR_VAR 0 1
2214: PUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_INT 2
2222: ARRAY
2223: PUSH
2224: FOR_IN
2225: IFFALSE 2277
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2227: LD_EXP 23
2231: PPUSH
2232: LD_VAR 0 1
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: LD_VAR 0 1
2245: PUSH
2246: LD_INT 2
2248: ARRAY
2249: PPUSH
2250: CALL_OW 174
// AddComHold ( Kurt ) ;
2254: LD_EXP 23
2258: PPUSH
2259: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2263: LD_EXP 23
2267: PPUSH
2268: LD_INT 175
2270: PPUSH
2271: CALL_OW 202
// end ;
2275: GO 2224
2277: POP
2278: POP
// wait ( 2 2$00 ) ;
2279: LD_INT 4200
2281: PPUSH
2282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2286: LD_INT 35
2288: PPUSH
2289: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2293: LD_EXP 15
2297: PPUSH
2298: CALL_OW 314
2302: NOT
2303: PUSH
2304: LD_EXP 15
2308: PPUSH
2309: CALL_OW 301
2313: OR
2314: PUSH
2315: LD_EXP 23
2319: PPUSH
2320: CALL_OW 314
2324: NOT
2325: PUSH
2326: LD_EXP 23
2330: PPUSH
2331: CALL_OW 301
2335: OR
2336: AND
2337: IFFALSE 2286
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2339: LD_EXP 23
2343: PPUSH
2344: CALL_OW 301
2348: PUSH
2349: LD_EXP 15
2353: PPUSH
2354: CALL_OW 301
2358: AND
2359: IFFALSE 2371
// begin scoutFailed := true ;
2361: LD_ADDR_EXP 4
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// exit ;
2369: GO 2521
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2371: LD_EXP 23
2375: PUSH
2376: LD_EXP 15
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: LD_INT 132
2387: PPUSH
2388: LD_INT 52
2390: PPUSH
2391: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2395: LD_EXP 23
2399: PUSH
2400: LD_EXP 15
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PPUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 2
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PPUSH
2419: CALL_OW 69
2423: PUSH
2424: LD_INT 1
2426: ARRAY
2427: PPUSH
2428: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2432: LD_INT 35
2434: PPUSH
2435: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2439: LD_INT 2
2441: PPUSH
2442: LD_EXP 23
2446: PPUSH
2447: CALL_OW 292
2451: PUSH
2452: LD_INT 2
2454: PPUSH
2455: LD_EXP 15
2459: PPUSH
2460: CALL_OW 292
2464: OR
2465: IFFALSE 2432
// if IsLive ( Kurt ) then
2467: LD_EXP 23
2471: PPUSH
2472: CALL_OW 300
2476: IFFALSE 2490
// SetSide ( Kurt , 2 ) ;
2478: LD_EXP 23
2482: PPUSH
2483: LD_INT 2
2485: PPUSH
2486: CALL_OW 235
// if IsLive ( Mike ) then
2490: LD_EXP 15
2494: PPUSH
2495: CALL_OW 300
2499: IFFALSE 2513
// SetSide ( Mike , 2 ) ;
2501: LD_EXP 15
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 235
// scoutSuccess := true ;
2513: LD_ADDR_EXP 5
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// end ; end_of_file
2521: PPOPN 2
2523: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2524: LD_INT 0
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// uc_side := 1 ;
2530: LD_ADDR_OWVAR 20
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// uc_nation := 1 ;
2538: LD_ADDR_OWVAR 21
2542: PUSH
2543: LD_INT 1
2545: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2546: LD_INT 1
2548: PPUSH
2549: CALL_OW 274
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 2500
2559: PUSH
2560: LD_INT 3200
2562: PUSH
2563: LD_INT 3500
2565: PUSH
2566: LD_INT 3900
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: PUSH
2575: LD_OWVAR 67
2579: ARRAY
2580: PPUSH
2581: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2585: LD_INT 1
2587: PPUSH
2588: CALL_OW 274
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: LD_INT 800
2598: PPUSH
2599: CALL_OW 277
// usForces := [ ] ;
2603: LD_ADDR_EXP 29
2607: PUSH
2608: EMPTY
2609: ST_TO_ADDR
// usToBuild := [ ] ;
2610: LD_ADDR_EXP 31
2614: PUSH
2615: EMPTY
2616: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2617: LD_ADDR_EXP 32
2621: PUSH
2622: EMPTY
2623: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2624: LD_ADDR_VAR 0 2
2628: PUSH
2629: LD_INT 21
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2682
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_INT 6
2654: PUSH
2655: LD_INT 7
2657: PUSH
2658: LD_INT 8
2660: PUSH
2661: LD_INT 8
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PPUSH
2676: CALL_OW 241
2680: GO 2644
2682: POP
2683: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2684: LD_ADDR_VAR 0 2
2688: PUSH
2689: LD_INT 30
2691: PUSH
2692: LD_INT 32
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: PUSH
2704: FOR_IN
2705: IFFALSE 2795
// begin if GetBWeapon ( i ) = us_radar then
2707: LD_VAR 0 2
2711: PPUSH
2712: CALL_OW 269
2716: PUSH
2717: LD_INT 11
2719: EQUAL
2720: IFFALSE 2745
// begin uc_nation := 0 ;
2722: LD_ADDR_OWVAR 21
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 16
2735: PPUSH
2736: LD_INT 2
2738: PPUSH
2739: CALL_OW 380
// end else
2743: GO 2779
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2745: LD_INT 0
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: LD_INT 5
2753: PUSH
2754: LD_INT 6
2756: PUSH
2757: LD_INT 7
2759: PUSH
2760: LD_INT 8
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: LD_OWVAR 67
2773: ARRAY
2774: PPUSH
2775: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2779: CALL_OW 44
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 52
// end ;
2793: GO 2704
2795: POP
2796: POP
// b := HexInfo ( 74 , 120 ) ;
2797: LD_ADDR_VAR 0 3
2801: PUSH
2802: LD_INT 74
2804: PPUSH
2805: LD_INT 120
2807: PPUSH
2808: CALL_OW 428
2812: ST_TO_ADDR
// uc_nation := 1 ;
2813: LD_ADDR_OWVAR 21
2817: PUSH
2818: LD_INT 1
2820: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: DOUBLE
2827: LD_INT 1
2829: DEC
2830: ST_TO_ADDR
2831: LD_INT 1
2833: PUSH
2834: LD_INT 2
2836: PUSH
2837: LD_INT 3
2839: PUSH
2840: LD_INT 4
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: LD_OWVAR 67
2853: ARRAY
2854: PUSH
2855: FOR_TO
2856: IFFALSE 2908
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2858: LD_INT 0
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: LD_INT 5
2866: PUSH
2867: LD_INT 6
2869: PUSH
2870: LD_INT 7
2872: PUSH
2873: LD_INT 8
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_OWVAR 67
2886: ARRAY
2887: PPUSH
2888: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2892: CALL_OW 44
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 52
// end ;
2906: GO 2855
2908: POP
2909: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: CALL_OW 313
2919: PPUSH
2920: LD_INT 5
2922: PPUSH
2923: CALL_OW 336
// for i := 1 to 6 do
2927: LD_ADDR_VAR 0 2
2931: PUSH
2932: DOUBLE
2933: LD_INT 1
2935: DEC
2936: ST_TO_ADDR
2937: LD_INT 6
2939: PUSH
2940: FOR_TO
2941: IFFALSE 2991
// begin PrepareHuman ( false , 4 , 6 ) ;
2943: LD_INT 0
2945: PPUSH
2946: LD_INT 4
2948: PPUSH
2949: LD_INT 6
2951: PPUSH
2952: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2956: CALL_OW 44
2960: PPUSH
2961: LD_INT 32
2963: PUSH
2964: LD_INT 33
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_VAR 0 2
2975: PUSH
2976: LD_INT 2
2978: MOD
2979: PUSH
2980: LD_INT 1
2982: PLUS
2983: ARRAY
2984: PPUSH
2985: CALL_OW 52
// end ;
2989: GO 2940
2991: POP
2992: POP
// for i := 1 to 3 do
2993: LD_ADDR_VAR 0 2
2997: PUSH
2998: DOUBLE
2999: LD_INT 1
3001: DEC
3002: ST_TO_ADDR
3003: LD_INT 3
3005: PUSH
3006: FOR_TO
3007: IFFALSE 3036
// begin PrepareHuman ( false , 3 , 6 ) ;
3009: LD_INT 0
3011: PPUSH
3012: LD_INT 3
3014: PPUSH
3015: LD_INT 6
3017: PPUSH
3018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3022: CALL_OW 44
3026: PPUSH
3027: LD_INT 25
3029: PPUSH
3030: CALL_OW 52
// end ;
3034: GO 3006
3036: POP
3037: POP
// for i := 1 to 3 do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: DOUBLE
3044: LD_INT 1
3046: DEC
3047: ST_TO_ADDR
3048: LD_INT 3
3050: PUSH
3051: FOR_TO
3052: IFFALSE 3110
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: LD_INT 6
3062: PUSH
3063: LD_INT 7
3065: PUSH
3066: LD_INT 7
3068: PUSH
3069: LD_INT 7
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: PUSH
3078: LD_OWVAR 67
3082: ARRAY
3083: PPUSH
3084: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3088: CALL_OW 44
3092: PPUSH
3093: LD_INT 78
3095: PPUSH
3096: LD_INT 130
3098: PPUSH
3099: CALL_OW 428
3103: PPUSH
3104: CALL_OW 52
// end ;
3108: GO 3051
3110: POP
3111: POP
// for i := 1 to 3 do
3112: LD_ADDR_VAR 0 2
3116: PUSH
3117: DOUBLE
3118: LD_INT 1
3120: DEC
3121: ST_TO_ADDR
3122: LD_INT 3
3124: PUSH
3125: FOR_TO
3126: IFFALSE 3213
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3128: LD_INT 2
3130: PPUSH
3131: LD_INT 2
3133: PPUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_INT 13
3139: PPUSH
3140: LD_INT 100
3142: PPUSH
3143: CALL 20076 0 5
// veh := CreateVehicle ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: CALL_OW 45
3156: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_INT 9
3176: PPUSH
3177: LD_INT 0
3179: PPUSH
3180: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3184: LD_INT 0
3186: PPUSH
3187: LD_INT 3
3189: PPUSH
3190: LD_INT 6
3192: PPUSH
3193: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3197: CALL_OW 44
3201: PPUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 52
// end ;
3211: GO 3125
3213: POP
3214: POP
// InitHc ;
3215: CALL_OW 19
// hc_gallery := us ;
3219: LD_ADDR_OWVAR 33
3223: PUSH
3224: LD_STRING us
3226: ST_TO_ADDR
// hc_face_number := 26 ;
3227: LD_ADDR_OWVAR 34
3231: PUSH
3232: LD_INT 26
3234: ST_TO_ADDR
// hc_name := Max Caldera ;
3235: LD_ADDR_OWVAR 26
3239: PUSH
3240: LD_STRING Max Caldera
3242: ST_TO_ADDR
// hc_class := class_engineer ;
3243: LD_ADDR_OWVAR 28
3247: PUSH
3248: LD_INT 2
3250: ST_TO_ADDR
// hc_sex := sex_male ;
3251: LD_ADDR_OWVAR 27
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3259: LD_ADDR_OWVAR 29
3263: PUSH
3264: LD_INT 10
3266: PUSH
3267: LD_INT 11
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3274: LD_ADDR_OWVAR 30
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 0
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3297: LD_ADDR_OWVAR 31
3301: PUSH
3302: LD_INT 4
3304: PUSH
3305: LD_INT 6
3307: PUSH
3308: LD_INT 3
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: ST_TO_ADDR
// usCommander := CreateHuman ;
3320: LD_ADDR_EXP 28
3324: PUSH
3325: CALL_OW 44
3329: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3330: LD_EXP 28
3334: PPUSH
3335: LD_INT 1
3337: PPUSH
3338: CALL_OW 52
// InitHC_All ( ) ;
3342: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3346: LD_INT 2
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: LD_INT 12
3357: PPUSH
3358: LD_INT 100
3360: PPUSH
3361: CALL 20076 0 5
// usCargo := CreateVehicle ;
3365: LD_ADDR_EXP 30
3369: PUSH
3370: CALL_OW 45
3374: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3375: LD_EXP 30
3379: PPUSH
3380: LD_INT 81
3382: PPUSH
3383: LD_INT 143
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// Connect ( usCargo ) ;
3393: LD_EXP 30
3397: PPUSH
3398: CALL 23169 0 1
// DoNotAttack ( 5 , usCargo ) ;
3402: LD_INT 5
3404: PPUSH
3405: LD_EXP 30
3409: PPUSH
3410: CALL_OW 471
// end ;
3414: LD_VAR 0 1
3418: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3419: LD_EXP 29
3423: NOT
3424: PUSH
3425: LD_EXP 6
3429: AND
3430: PUSH
3431: LD_INT 25
3433: PPUSH
3434: CALL_OW 302
3438: AND
3439: PUSH
3440: LD_INT 25
3442: PPUSH
3443: CALL_OW 461
3447: PUSH
3448: LD_INT 2
3450: EQUAL
3451: AND
3452: IFFALSE 3609
3454: GO 3456
3456: DISABLE
3457: LD_INT 0
3459: PPUSH
3460: PPUSH
3461: PPUSH
// begin enable ;
3462: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3463: LD_ADDR_VAR 0 1
3467: PUSH
3468: DOUBLE
3469: LD_INT 1
3471: DEC
3472: ST_TO_ADDR
3473: LD_INT 5
3475: PUSH
3476: LD_INT 6
3478: PUSH
3479: LD_INT 7
3481: PUSH
3482: LD_INT 8
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_OWVAR 67
3495: ARRAY
3496: PUSH
3497: FOR_TO
3498: IFFALSE 3607
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: LD_INT 3
3510: PUSH
3511: LD_INT 4
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 1
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: CALL_OW 12
3529: ARRAY
3530: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3531: LD_VAR 0 2
3535: PUSH
3536: LD_INT 4
3538: EQUAL
3539: IFFALSE 3551
// weapon := us_heavy_gun else
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: LD_INT 6
3548: ST_TO_ADDR
3549: GO 3582
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: LD_INT 7
3561: PUSH
3562: LD_INT 4
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 1
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: CALL_OW 12
3580: ARRAY
3581: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3582: LD_INT 25
3584: PPUSH
3585: LD_VAR 0 2
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 2
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL_OW 185
// end ;
3605: GO 3497
3607: POP
3608: POP
// end ;
3609: PPOPN 3
3611: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3612: LD_EXP 29
3616: PUSH
3617: LD_INT 5
3619: PUSH
3620: LD_INT 6
3622: PUSH
3623: LD_INT 7
3625: PUSH
3626: LD_INT 8
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: GREATEREQUAL
3641: IFFALSE 3752
3643: GO 3645
3645: DISABLE
3646: LD_INT 0
3648: PPUSH
3649: PPUSH
// begin enable ;
3650: ENABLE
// tmp := usForces ;
3651: LD_ADDR_VAR 0 2
3655: PUSH
3656: LD_EXP 29
3660: ST_TO_ADDR
// usForces := [ ] ;
3661: LD_ADDR_EXP 29
3665: PUSH
3666: EMPTY
3667: ST_TO_ADDR
// if not tmp then
3668: LD_VAR 0 2
3672: NOT
3673: IFFALSE 3677
// exit ;
3675: GO 3752
// repeat wait ( 0 0$1 ) ;
3677: LD_INT 35
3679: PPUSH
3680: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3684: LD_ADDR_VAR 0 2
3688: PUSH
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_INT 98
3696: PUSH
3697: LD_INT 50
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 114
3706: PUSH
3707: LD_INT 50
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 127
3716: PUSH
3717: LD_INT 51
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 131
3726: PUSH
3727: LD_INT 35
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PPUSH
3740: CALL 54489 0 2
3744: ST_TO_ADDR
// until not tmp ;
3745: LD_VAR 0 2
3749: NOT
3750: IFFALSE 3677
// end ;
3752: PPOPN 2
3754: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3755: LD_EXP 3
3759: PUSH
3760: LD_EXP 5
3764: NOT
3765: AND
3766: PUSH
3767: LD_INT 11
3769: PPUSH
3770: LD_INT 22
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 70
3784: AND
3785: IFFALSE 3906
3787: GO 3789
3789: DISABLE
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
// begin uc_side := 1 ;
3795: LD_ADDR_OWVAR 20
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// uc_nation := 1 ;
3803: LD_ADDR_OWVAR 21
3807: PUSH
3808: LD_INT 1
3810: ST_TO_ADDR
// tmp := [ ] ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: EMPTY
3817: ST_TO_ADDR
// for i := 1 to 2 do
3818: LD_ADDR_VAR 0 1
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 2
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3904
// begin PrepareSoldier ( false , 7 ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 7
3839: PPUSH
3840: CALL_OW 381
// un := CreateHuman ;
3844: LD_ADDR_VAR 0 2
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3854: LD_VAR 0 2
3858: PPUSH
3859: LD_INT 130
3861: PPUSH
3862: LD_INT 153
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3875: LD_VAR 0 2
3879: PPUSH
3880: LD_INT 5
3882: PPUSH
3883: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_INT 108
3894: PPUSH
3895: LD_INT 108
3897: PPUSH
3898: CALL_OW 174
// end ;
3902: GO 3831
3904: POP
3905: POP
// end ;
3906: PPOPN 3
3908: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3909: LD_EXP 3
3913: PUSH
3914: LD_EXP 5
3918: NOT
3919: AND
3920: PUSH
3921: LD_INT 10
3923: PPUSH
3924: LD_INT 22
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 70
3938: AND
3939: IFFALSE 4060
3941: GO 3943
3943: DISABLE
3944: LD_INT 0
3946: PPUSH
3947: PPUSH
3948: PPUSH
// begin uc_side := 1 ;
3949: LD_ADDR_OWVAR 20
3953: PUSH
3954: LD_INT 1
3956: ST_TO_ADDR
// uc_nation := 1 ;
3957: LD_ADDR_OWVAR 21
3961: PUSH
3962: LD_INT 1
3964: ST_TO_ADDR
// tmp := [ ] ;
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: EMPTY
3971: ST_TO_ADDR
// for i := 1 to 2 do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_INT 2
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4058
// begin PrepareSoldier ( false , 7 ) ;
3988: LD_INT 0
3990: PPUSH
3991: LD_INT 7
3993: PPUSH
3994: CALL_OW 381
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4008: LD_VAR 0 2
4012: PPUSH
4013: LD_INT 56
4015: PPUSH
4016: LD_INT 101
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: LD_INT 0
4024: PPUSH
4025: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4029: LD_VAR 0 2
4033: PPUSH
4034: LD_INT 5
4036: PPUSH
4037: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4041: LD_VAR 0 2
4045: PPUSH
4046: LD_INT 72
4048: PPUSH
4049: LD_INT 92
4051: PPUSH
4052: CALL_OW 174
// end ;
4056: GO 3985
4058: POP
4059: POP
// end ;
4060: PPOPN 3
4062: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4063: LD_EXP 30
4067: PPUSH
4068: CALL_OW 302
4072: PUSH
4073: LD_EXP 7
4077: NOT
4078: AND
4079: IFFALSE 4342
4081: GO 4083
4083: DISABLE
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
// begin enable ;
4088: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4089: LD_ADDR_VAR 0 2
4093: PUSH
4094: LD_INT 14
4096: PPUSH
4097: LD_INT 81
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 50
4109: PUSH
4110: EMPTY
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4122: LD_ADDR_VAR 0 1
4126: PUSH
4127: LD_INT 12
4129: PPUSH
4130: CALL_OW 435
4134: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4135: LD_EXP 30
4139: PPUSH
4140: CALL_OW 261
4144: PUSH
4145: LD_INT 10
4147: LESS
4148: PUSH
4149: LD_INT 2
4151: PPUSH
4152: LD_EXP 30
4156: PPUSH
4157: CALL_OW 292
4161: NOT
4162: AND
4163: IFFALSE 4177
// SetFuel ( usCargo , 100 ) ;
4165: LD_EXP 30
4169: PPUSH
4170: LD_INT 100
4172: PPUSH
4173: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4177: LD_EXP 30
4181: PPUSH
4182: CALL_OW 314
4186: NOT
4187: PUSH
4188: LD_EXP 30
4192: PPUSH
4193: LD_INT 1
4195: PPUSH
4196: CALL_OW 289
4200: PUSH
4201: LD_INT 100
4203: LESS
4204: AND
4205: PUSH
4206: LD_VAR 0 2
4210: NOT
4211: AND
4212: IFFALSE 4278
// begin if cr then
4214: LD_VAR 0 1
4218: IFFALSE 4249
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4220: LD_EXP 30
4224: PPUSH
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: PPUSH
4234: LD_VAR 0 1
4238: PUSH
4239: LD_INT 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 117
4247: GO 4276
// if not IsInArea ( usCargo , usCratesArea ) then
4249: LD_EXP 30
4253: PPUSH
4254: LD_INT 12
4256: PPUSH
4257: CALL_OW 308
4261: NOT
4262: IFFALSE 4276
// ComMoveToArea ( usCargo , usCratesArea ) ;
4264: LD_EXP 30
4268: PPUSH
4269: LD_INT 12
4271: PPUSH
4272: CALL_OW 113
// exit ;
4276: GO 4342
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4278: LD_VAR 0 2
4282: PUSH
4283: LD_EXP 30
4287: PPUSH
4288: LD_INT 14
4290: PPUSH
4291: CALL_OW 308
4295: NOT
4296: AND
4297: IFFALSE 4316
// ComMoveXY ( usCargo , 80 , 143 ) else
4299: LD_EXP 30
4303: PPUSH
4304: LD_INT 80
4306: PPUSH
4307: LD_INT 143
4309: PPUSH
4310: CALL_OW 111
4314: GO 4342
// if GetCargo ( usCargo , mat_cans ) then
4316: LD_EXP 30
4320: PPUSH
4321: LD_INT 1
4323: PPUSH
4324: CALL_OW 289
4328: IFFALSE 4342
// ComGive ( usCargo , usDepot ) ;
4330: LD_EXP 30
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 161
// end ;
4342: PPOPN 2
4344: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4345: LD_EXP 7
4349: NOT
4350: PUSH
4351: LD_INT 22
4353: PUSH
4354: LD_INT 1
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 21
4363: PUSH
4364: LD_INT 1
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 50
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: PPUSH
4389: CALL_OW 69
4393: AND
4394: PUSH
4395: LD_INT 22
4397: PUSH
4398: LD_INT 1
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 3
4407: PUSH
4408: LD_INT 60
4410: PUSH
4411: EMPTY
4412: LIST
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 25
4420: PUSH
4421: LD_INT 4
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 69
4437: AND
4438: IFFALSE 4641
4440: GO 4442
4442: DISABLE
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
// begin enable ;
4447: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4448: LD_ADDR_VAR 0 1
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: LD_INT 50
4478: PUSH
4479: EMPTY
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 69
4495: PUSH
4496: FOR_IN
4497: IFFALSE 4639
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 1
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 3
4516: PUSH
4517: LD_INT 60
4519: PUSH
4520: EMPTY
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 25
4529: PUSH
4530: LD_INT 4
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 69
4546: ST_TO_ADDR
// if not sci then
4547: LD_VAR 0 2
4551: NOT
4552: IFFALSE 4556
// break ;
4554: GO 4639
// sci := sci [ 1 ] ;
4556: LD_ADDR_VAR 0 2
4560: PUSH
4561: LD_VAR 0 2
4565: PUSH
4566: LD_INT 1
4568: ARRAY
4569: ST_TO_ADDR
// if IsInUnit ( sci ) then
4570: LD_VAR 0 2
4574: PPUSH
4575: CALL_OW 310
4579: IFFALSE 4592
// ComExit ( sci ) else
4581: LD_VAR 0 2
4585: PPUSH
4586: CALL 52281 0 1
4590: GO 4637
// begin ComHeal ( sci , i ) ;
4592: LD_VAR 0 2
4596: PPUSH
4597: LD_VAR 0 1
4601: PPUSH
4602: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4606: LD_VAR 0 2
4610: PPUSH
4611: LD_INT 32
4613: PUSH
4614: LD_INT 33
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 1
4623: PPUSH
4624: LD_INT 2
4626: PPUSH
4627: CALL_OW 12
4631: ARRAY
4632: PPUSH
4633: CALL_OW 180
// end ; end ;
4637: GO 4496
4639: POP
4640: POP
// end ;
4641: PPOPN 2
4643: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4644: LD_EXP 7
4648: NOT
4649: PUSH
4650: LD_INT 22
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 3
4662: PUSH
4663: LD_INT 60
4665: PUSH
4666: EMPTY
4667: LIST
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 50
4675: PUSH
4676: EMPTY
4677: LIST
4678: PUSH
4679: LD_INT 34
4681: PUSH
4682: LD_INT 13
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: PPUSH
4695: CALL_OW 69
4699: AND
4700: PUSH
4701: LD_INT 22
4703: PUSH
4704: LD_INT 1
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 3
4713: PUSH
4714: LD_INT 24
4716: PUSH
4717: LD_INT 1000
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 21
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: LD_INT 30
4743: PUSH
4744: LD_INT 29
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 69
4765: AND
4766: IFFALSE 5035
4768: GO 4770
4770: DISABLE
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
// begin enable ;
4776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4777: LD_ADDR_VAR 0 2
4781: PUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 3
4794: PUSH
4795: LD_INT 24
4797: PUSH
4798: LD_INT 1000
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 21
4811: PUSH
4812: LD_INT 3
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 3
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 29
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 69
4846: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: LD_INT 22
4854: PUSH
4855: LD_INT 1
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 3
4864: PUSH
4865: LD_INT 24
4867: PUSH
4868: LD_INT 600
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 21
4881: PUSH
4882: LD_INT 3
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 3
4891: PUSH
4892: LD_INT 30
4894: PUSH
4895: LD_INT 29
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4917: LD_ADDR_VAR 0 1
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 3
4934: PUSH
4935: LD_INT 60
4937: PUSH
4938: EMPTY
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 50
4947: PUSH
4948: EMPTY
4949: LIST
4950: PUSH
4951: LD_INT 34
4953: PUSH
4954: LD_INT 13
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: PPUSH
4967: CALL_OW 69
4971: PUSH
4972: FOR_IN
4973: IFFALSE 5033
// begin if tmp2 then
4975: LD_VAR 0 3
4979: IFFALSE 5007
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4981: LD_VAR 0 1
4985: PPUSH
4986: LD_VAR 0 3
4990: PPUSH
4991: LD_VAR 0 1
4995: PPUSH
4996: CALL_OW 74
5000: PPUSH
5001: CALL_OW 130
5005: GO 5031
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5007: LD_VAR 0 1
5011: PPUSH
5012: LD_VAR 0 2
5016: PPUSH
5017: LD_VAR 0 1
5021: PPUSH
5022: CALL_OW 74
5026: PPUSH
5027: CALL_OW 130
// end ;
5031: GO 4972
5033: POP
5034: POP
// end ;
5035: PPOPN 3
5037: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5038: LD_EXP 7
5042: NOT
5043: PUSH
5044: LD_INT 14
5046: PPUSH
5047: LD_INT 81
5049: PUSH
5050: LD_INT 1
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 50
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 70
5071: NOT
5072: AND
5073: PUSH
5074: LD_EXP 31
5078: AND
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 3
5092: PUSH
5093: LD_INT 60
5095: PUSH
5096: EMPTY
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 50
5105: PUSH
5106: EMPTY
5107: LIST
5108: PUSH
5109: LD_INT 34
5111: PUSH
5112: LD_INT 13
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: PPUSH
5125: CALL_OW 69
5129: AND
5130: IFFALSE 5242
5132: GO 5134
5134: DISABLE
// begin enable ;
5135: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5136: LD_INT 22
5138: PUSH
5139: LD_INT 1
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 3
5148: PUSH
5149: LD_INT 60
5151: PUSH
5152: EMPTY
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 50
5161: PUSH
5162: EMPTY
5163: LIST
5164: PUSH
5165: LD_INT 34
5167: PUSH
5168: LD_INT 13
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: PPUSH
5186: LD_EXP 31
5190: PUSH
5191: LD_INT 1
5193: ARRAY
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PPUSH
5199: LD_EXP 31
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: PUSH
5208: LD_INT 2
5210: ARRAY
5211: PPUSH
5212: LD_EXP 31
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PUSH
5221: LD_INT 3
5223: ARRAY
5224: PPUSH
5225: LD_EXP 31
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PUSH
5234: LD_INT 4
5236: ARRAY
5237: PPUSH
5238: CALL_OW 566
// end ;
5242: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5243: LD_INT 22
5245: PUSH
5246: LD_INT 1
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: PUSH
5253: LD_INT 50
5255: PUSH
5256: EMPTY
5257: LIST
5258: PUSH
5259: LD_INT 3
5261: PUSH
5262: LD_INT 54
5264: PUSH
5265: EMPTY
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 2
5274: PUSH
5275: LD_INT 25
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 25
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 25
5297: PUSH
5298: LD_INT 16
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PPUSH
5317: CALL_OW 69
5321: IFFALSE 5683
5323: GO 5325
5325: DISABLE
5326: LD_INT 0
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
// begin enable ;
5332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 50
5350: PUSH
5351: EMPTY
5352: LIST
5353: PUSH
5354: LD_INT 3
5356: PUSH
5357: LD_INT 54
5359: PUSH
5360: EMPTY
5361: LIST
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: LD_INT 25
5372: PUSH
5373: LD_INT 1
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 25
5382: PUSH
5383: LD_INT 5
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 25
5392: PUSH
5393: LD_INT 16
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 69
5416: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 1
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 50
5434: PUSH
5435: EMPTY
5436: LIST
5437: PUSH
5438: LD_INT 21
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 30
5450: PUSH
5451: LD_INT 32
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 58
5460: PUSH
5461: EMPTY
5462: LIST
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: PPUSH
5471: CALL_OW 69
5475: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5476: LD_ADDR_VAR 0 4
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 50
5493: PUSH
5494: EMPTY
5495: LIST
5496: PUSH
5497: LD_INT 30
5499: PUSH
5500: LD_INT 5
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 69
5516: ST_TO_ADDR
// if not tmp then
5517: LD_VAR 0 2
5521: NOT
5522: IFFALSE 5526
// exit ;
5524: GO 5683
// for i in tmp do
5526: LD_ADDR_VAR 0 1
5530: PUSH
5531: LD_VAR 0 2
5535: PUSH
5536: FOR_IN
5537: IFFALSE 5681
// begin btmp := FilterByTag ( btmp , 0 ) ;
5539: LD_ADDR_VAR 0 3
5543: PUSH
5544: LD_VAR 0 3
5548: PPUSH
5549: LD_INT 0
5551: PPUSH
5552: CALL 49467 0 2
5556: ST_TO_ADDR
// if not btmp then
5557: LD_VAR 0 3
5561: NOT
5562: IFFALSE 5607
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 257
5573: PUSH
5574: LD_INT 16
5576: NONEQUAL
5577: PUSH
5578: LD_VAR 0 4
5582: AND
5583: IFFALSE 5603
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5585: LD_VAR 0 1
5589: PPUSH
5590: LD_VAR 0 4
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: PPUSH
5599: CALL_OW 120
// continue ;
5603: GO 5536
// end else
5605: GO 5679
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5607: LD_VAR 0 3
5611: PUSH
5612: LD_INT 1
5614: ARRAY
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: CALL_OW 120
// wait ( 0 0$9 ) ;
5641: LD_INT 315
5643: PPUSH
5644: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 1
5655: ARRAY
5656: PPUSH
5657: CALL 17368 0 1
5661: IFFALSE 5679
// SetTag ( btmp [ 1 ] , 0 ) ;
5663: LD_VAR 0 3
5667: PUSH
5668: LD_INT 1
5670: ARRAY
5671: PPUSH
5672: LD_INT 0
5674: PPUSH
5675: CALL_OW 109
// end ; end ;
5679: GO 5536
5681: POP
5682: POP
// end ;
5683: PPOPN 4
5685: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5686: LD_INT 22
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 33
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 50
5708: PUSH
5709: EMPTY
5710: LIST
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: LD_INT 61
5717: PUSH
5718: EMPTY
5719: LIST
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: IFFALSE 5826
5737: GO 5739
5739: DISABLE
5740: LD_INT 0
5742: PPUSH
5743: PPUSH
// begin enable ;
5744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 1
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 33
5762: PUSH
5763: LD_INT 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 50
5772: PUSH
5773: EMPTY
5774: LIST
5775: PUSH
5776: LD_INT 3
5778: PUSH
5779: LD_INT 61
5781: PUSH
5782: EMPTY
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: PPUSH
5795: CALL_OW 69
5799: ST_TO_ADDR
// for i in tmp do
5800: LD_ADDR_VAR 0 1
5804: PUSH
5805: LD_VAR 0 2
5809: PUSH
5810: FOR_IN
5811: IFFALSE 5824
// Connect ( i ) ;
5813: LD_VAR 0 1
5817: PPUSH
5818: CALL 23169 0 1
5822: GO 5810
5824: POP
5825: POP
// end ;
5826: PPOPN 2
5828: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5829: LD_EXP 6
5833: PUSH
5834: LD_OWVAR 67
5838: PUSH
5839: LD_INT 1
5841: GREATER
5842: AND
5843: IFFALSE 6285
5845: GO 5847
5847: DISABLE
5848: LD_INT 0
5850: PPUSH
5851: PPUSH
5852: PPUSH
5853: PPUSH
5854: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5855: LD_INT 21000
5857: PUSH
5858: LD_INT 18900
5860: PUSH
5861: LD_INT 16800
5863: PUSH
5864: LD_INT 14700
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: PUSH
5873: LD_OWVAR 67
5877: ARRAY
5878: PPUSH
5879: CALL_OW 67
// if usSurrender then
5883: LD_EXP 7
5887: IFFALSE 5891
// exit ;
5889: GO 6285
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_INT 4
5903: PUSH
5904: LD_INT 5
5906: PUSH
5907: LD_INT 5
5909: PUSH
5910: LD_INT 6
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: LD_OWVAR 67
5923: ARRAY
5924: PUSH
5925: FOR_TO
5926: IFFALSE 6230
// begin uc_side := 1 ;
5928: LD_ADDR_OWVAR 20
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// uc_nation := 1 ;
5936: LD_ADDR_OWVAR 21
5940: PUSH
5941: LD_INT 1
5943: ST_TO_ADDR
// InitHc_All ( ) ;
5944: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5948: LD_INT 0
5950: PPUSH
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 6
5959: PUSH
5960: LD_INT 7
5962: PUSH
5963: LD_INT 8
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_OWVAR 67
5976: ARRAY
5977: PPUSH
5978: CALL_OW 380
// un := CreateHuman ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: CALL_OW 44
5991: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5992: LD_ADDR_VAR 0 4
5996: PUSH
5997: LD_INT 2
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: PUSH
6011: LD_VAR 0 1
6015: PUSH
6016: LD_INT 3
6018: MOD
6019: PUSH
6020: LD_INT 1
6022: PLUS
6023: ARRAY
6024: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6025: LD_VAR 0 4
6029: PUSH
6030: LD_INT 4
6032: EQUAL
6033: IFFALSE 6068
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6035: LD_ADDR_VAR 0 5
6039: PUSH
6040: LD_INT 6
6042: PUSH
6043: LD_INT 4
6045: PUSH
6046: LD_INT 5
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 3
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: ST_TO_ADDR
6066: GO 6103
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6068: LD_ADDR_VAR 0 5
6072: PUSH
6073: LD_INT 5
6075: PUSH
6076: LD_INT 5
6078: PUSH
6079: LD_INT 7
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 1
6093: PPUSH
6094: LD_INT 4
6096: PPUSH
6097: CALL_OW 12
6101: ARRAY
6102: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_INT 1
6113: PPUSH
6114: LD_VAR 0 5
6118: PPUSH
6119: LD_INT 30
6121: PPUSH
6122: CALL 20076 0 5
// veh := CreateVehicle ;
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: CALL_OW 45
6135: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6136: LD_ADDR_EXP 32
6140: PUSH
6141: LD_EXP 32
6145: PPUSH
6146: LD_EXP 32
6150: PUSH
6151: LD_INT 1
6153: PLUS
6154: PPUSH
6155: LD_VAR 0 3
6159: PPUSH
6160: CALL_OW 1
6164: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6165: LD_VAR 0 3
6169: PPUSH
6170: LD_INT 4
6172: PPUSH
6173: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6177: LD_VAR 0 3
6181: PPUSH
6182: LD_INT 15
6184: PPUSH
6185: LD_INT 0
6187: PPUSH
6188: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6192: LD_VAR 0 2
6196: PPUSH
6197: LD_VAR 0 3
6201: PPUSH
6202: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 153
6213: PPUSH
6214: LD_INT 45
6216: PPUSH
6217: CALL_OW 111
// wait ( 0 0$2 ) ;
6221: LD_INT 70
6223: PPUSH
6224: CALL_OW 67
// end ;
6228: GO 5925
6230: POP
6231: POP
// repeat wait ( 0 0$1 ) ;
6232: LD_INT 35
6234: PPUSH
6235: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6239: LD_ADDR_EXP 32
6243: PUSH
6244: LD_EXP 32
6248: PPUSH
6249: LD_INT 150
6251: PUSH
6252: LD_INT 36
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 138
6261: PUSH
6262: LD_INT 25
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL 54489 0 2
6277: ST_TO_ADDR
// until not usAdditionalForces ;
6278: LD_EXP 32
6282: NOT
6283: IFFALSE 6232
// end ;
6285: PPOPN 5
6287: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6288: LD_INT 22
6290: PUSH
6291: LD_INT 1
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 101
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: IFFALSE 6329
6318: GO 6320
6320: DISABLE
// usAttacksAllowed := true ; end_of_file
6321: LD_ADDR_EXP 6
6325: PUSH
6326: LD_INT 1
6328: ST_TO_ADDR
6329: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 55687 0 1
// if un = Heike then
6339: LD_VAR 0 1
6343: PUSH
6344: LD_EXP 13
6348: EQUAL
6349: IFFALSE 6358
// YouLost ( Heike ) ;
6351: LD_STRING Heike
6353: PPUSH
6354: CALL_OW 104
// if un = usCommander then
6358: LD_VAR 0 1
6362: PUSH
6363: LD_EXP 28
6367: EQUAL
6368: IFFALSE 6377
// YouLost ( Commander ) ;
6370: LD_STRING Commander
6372: PPUSH
6373: CALL_OW 104
// if GetSide ( un ) = 1 then
6377: LD_VAR 0 1
6381: PPUSH
6382: CALL_OW 255
6386: PUSH
6387: LD_INT 1
6389: EQUAL
6390: IFFALSE 6641
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 264
6401: PUSH
6402: LD_INT 13
6404: EQUAL
6405: PUSH
6406: LD_INT 25
6408: PPUSH
6409: CALL_OW 302
6413: AND
6414: IFFALSE 6435
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6416: LD_INT 25
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: LD_INT 2
6427: PPUSH
6428: LD_INT 13
6430: PPUSH
6431: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 264
6444: PUSH
6445: LD_INT 12
6447: EQUAL
6448: PUSH
6449: LD_INT 25
6451: PPUSH
6452: CALL_OW 302
6456: AND
6457: IFFALSE 6478
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6459: LD_INT 25
6461: PPUSH
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: LD_INT 2
6470: PPUSH
6471: LD_INT 12
6473: PPUSH
6474: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 266
6487: PUSH
6488: LD_INT 32
6490: EQUAL
6491: IFFALSE 6556
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6493: LD_ADDR_EXP 31
6497: PUSH
6498: LD_EXP 31
6502: PPUSH
6503: LD_EXP 31
6507: PUSH
6508: LD_INT 1
6510: PLUS
6511: PPUSH
6512: LD_INT 32
6514: PUSH
6515: LD_VAR 0 1
6519: PPUSH
6520: CALL_OW 250
6524: PUSH
6525: LD_VAR 0 1
6529: PPUSH
6530: CALL_OW 251
6534: PUSH
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 254
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: PPUSH
6551: CALL_OW 1
6555: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6556: LD_VAR 0 1
6560: PPUSH
6561: CALL_OW 266
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: IN
6576: IFFALSE 6641
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6578: LD_ADDR_EXP 31
6582: PUSH
6583: LD_EXP 31
6587: PPUSH
6588: LD_EXP 31
6592: PUSH
6593: LD_INT 1
6595: PLUS
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_VAR 0 1
6604: PPUSH
6605: CALL_OW 250
6609: PUSH
6610: LD_VAR 0 1
6614: PPUSH
6615: CALL_OW 251
6619: PUSH
6620: LD_VAR 0 1
6624: PPUSH
6625: CALL_OW 254
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PPUSH
6636: CALL_OW 1
6640: ST_TO_ADDR
// end ; end ;
6641: PPOPN 1
6643: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6644: LD_VAR 0 1
6648: PPUSH
6649: CALL_OW 255
6653: PUSH
6654: LD_INT 1
6656: EQUAL
6657: PUSH
6658: LD_VAR 0 1
6662: PPUSH
6663: CALL_OW 110
6667: PUSH
6668: LD_INT 1
6670: EQUAL
6671: AND
6672: IFFALSE 6686
// SetTag ( un , 0 ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: LD_INT 0
6681: PPUSH
6682: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6686: LD_VAR 0 1
6690: PPUSH
6691: CALL_OW 255
6695: PUSH
6696: LD_INT 1
6698: EQUAL
6699: PUSH
6700: LD_VAR 0 1
6704: PPUSH
6705: CALL_OW 264
6709: PUSH
6710: LD_INT 6
6712: EQUAL
6713: AND
6714: PUSH
6715: LD_EXP 11
6719: NOT
6720: AND
6721: IFFALSE 6731
// seeHeavyGun := true ;
6723: LD_ADDR_EXP 11
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6731: LD_VAR 0 1
6735: PPUSH
6736: CALL_OW 263
6740: PUSH
6741: LD_INT 2
6743: EQUAL
6744: PUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: CALL_OW 255
6754: PUSH
6755: LD_INT 2
6757: NONEQUAL
6758: AND
6759: IFFALSE 6785
// begin ComUnlink ( un ) ;
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 136
// if not seeRemoteVehicle then
6770: LD_EXP 10
6774: NOT
6775: IFFALSE 6785
// seeRemoteVehicle := true ;
6777: LD_ADDR_EXP 10
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// end ; end ;
6785: PPOPN 1
6787: END
// on BuildingComplete ( b ) do var i , barracks ;
6788: LD_INT 0
6790: PPUSH
6791: PPUSH
// begin if GetSide ( b ) = 1 then
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 255
6801: PUSH
6802: LD_INT 1
6804: EQUAL
6805: IFFALSE 6957
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6807: LD_ADDR_EXP 31
6811: PUSH
6812: LD_EXP 31
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 3
6824: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 266
6834: PUSH
6835: LD_INT 4
6837: EQUAL
6838: IFFALSE 6849
// ComUpgrade ( b ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 266
6858: PUSH
6859: LD_INT 32
6861: EQUAL
6862: IFFALSE 6957
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: LD_INT 6
6871: PUSH
6872: LD_INT 7
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 1
6881: PPUSH
6882: LD_INT 2
6884: PPUSH
6885: CALL_OW 12
6889: ARRAY
6890: PPUSH
6891: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: LD_INT 22
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 30
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: ST_TO_ADDR
// if barracks then
6929: LD_VAR 0 3
6933: IFFALSE 6957
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6935: LD_VAR 0 3
6939: PUSH
6940: LD_INT 1
6942: ARRAY
6943: PPUSH
6944: CALL_OW 313
6948: PUSH
6949: LD_INT 1
6951: ARRAY
6952: PPUSH
6953: CALL_OW 122
// end ; end ; end ;
6957: PPOPN 3
6959: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6960: LD_VAR 0 1
6964: PPUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: CALL 55809 0 2
// if GetSide ( factory ) = 1 then
6974: LD_VAR 0 2
6978: PPUSH
6979: CALL_OW 255
6983: PUSH
6984: LD_INT 1
6986: EQUAL
6987: IFFALSE 7066
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6989: LD_VAR 0 1
6993: PPUSH
6994: CALL_OW 264
6998: PUSH
6999: LD_INT 12
7001: EQUAL
7002: IFFALSE 7014
// usCargo := vehicle ;
7004: LD_ADDR_EXP 30
7008: PUSH
7009: LD_VAR 0 1
7013: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 264
7023: PUSH
7024: LD_INT 12
7026: PUSH
7027: LD_INT 13
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: IN
7034: NOT
7035: IFFALSE 7066
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7037: LD_ADDR_EXP 29
7041: PUSH
7042: LD_EXP 29
7046: PPUSH
7047: LD_EXP 29
7051: PUSH
7052: LD_INT 1
7054: PLUS
7055: PPUSH
7056: LD_VAR 0 1
7060: PPUSH
7061: CALL_OW 1
7065: ST_TO_ADDR
// end ; end ;
7066: PPOPN 2
7068: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7069: LD_VAR 0 2
7073: PPUSH
7074: CALL_OW 255
7078: PUSH
7079: LD_INT 1
7081: EQUAL
7082: IFFALSE 7096
// AddComEnterUnit ( un , amFac ) ;
7084: LD_VAR 0 1
7088: PPUSH
7089: LD_INT 25
7091: PPUSH
7092: CALL_OW 180
// end ;
7096: PPOPN 4
7098: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7099: LD_VAR 0 1
7103: PPUSH
7104: CALL_OW 255
7108: PUSH
7109: LD_INT 1
7111: EQUAL
7112: PUSH
7113: LD_VAR 0 1
7117: PPUSH
7118: CALL_OW 266
7122: PUSH
7123: LD_INT 32
7125: EQUAL
7126: AND
7127: PUSH
7128: LD_VAR 0 2
7132: PPUSH
7133: CALL_OW 257
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: IN
7148: AND
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 30
7162: PUSH
7163: LD_INT 5
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: AND
7186: IFFALSE 7256
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7188: LD_INT 74
7190: PPUSH
7191: LD_INT 120
7193: PPUSH
7194: CALL_OW 428
7198: PPUSH
7199: CALL_OW 313
7203: PUSH
7204: LD_INT 6
7206: LESS
7207: IFFALSE 7256
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7209: LD_VAR 0 2
7213: PPUSH
7214: LD_INT 74
7216: PPUSH
7217: LD_INT 120
7219: PPUSH
7220: CALL_OW 428
7224: PPUSH
7225: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7229: LD_VAR 0 2
7233: PPUSH
7234: CALL_OW 257
7238: PUSH
7239: LD_INT 1
7241: EQUAL
7242: IFFALSE 7256
// AddComChangeProfession ( un , class_sniper ) ;
7244: LD_VAR 0 2
7248: PPUSH
7249: LD_INT 5
7251: PPUSH
7252: CALL_OW 183
// end ; end ; end_of_file
7256: PPOPN 2
7258: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7259: LD_INT 0
7261: PPUSH
7262: PPUSH
7263: PPUSH
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
// Video ( true ) ;
7270: LD_INT 1
7272: PPUSH
7273: CALL 51865 0 1
// music_nat := 1 ;
7277: LD_ADDR_OWVAR 71
7281: PUSH
7282: LD_INT 1
7284: ST_TO_ADDR
// music_class := music_recon ;
7285: LD_ADDR_OWVAR 72
7289: PUSH
7290: LD_INT 3
7292: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7293: LD_INT 184
7295: PPUSH
7296: LD_INT 142
7298: PPUSH
7299: LD_INT 2
7301: PPUSH
7302: LD_INT 10
7304: NEG
7305: PPUSH
7306: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7310: LD_INT 184
7312: PPUSH
7313: LD_INT 142
7315: PPUSH
7316: LD_INT 2
7318: PPUSH
7319: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7323: LD_INT 204
7325: PPUSH
7326: LD_INT 151
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: LD_INT 10
7334: NEG
7335: PPUSH
7336: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7340: LD_INT 204
7342: PPUSH
7343: LD_INT 151
7345: PPUSH
7346: LD_INT 2
7348: PPUSH
7349: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7353: LD_INT 184
7355: PPUSH
7356: LD_INT 142
7358: PPUSH
7359: CALL_OW 86
// wait ( 0 0$2 ) ;
7363: LD_INT 70
7365: PPUSH
7366: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: LD_EXP 13
7379: PUSH
7380: LD_EXP 14
7384: PUSH
7385: LD_EXP 15
7389: PUSH
7390: LD_EXP 16
7394: PUSH
7395: LD_EXP 17
7399: PUSH
7400: LD_EXP 18
7404: PUSH
7405: LD_EXP 19
7409: PUSH
7410: LD_EXP 20
7414: PUSH
7415: LD_EXP 22
7419: PUSH
7420: LD_EXP 23
7424: PUSH
7425: LD_EXP 24
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 25
7447: UNION
7448: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7449: LD_ADDR_VAR 0 6
7453: PUSH
7454: LD_VAR 0 5
7458: PPUSH
7459: LD_INT 25
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 72
7473: PUSH
7474: LD_INT 0
7476: GREATER
7477: ST_TO_ADDR
// hasCamera := false ;
7478: LD_ADDR_VAR 0 7
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// if not hasEng then
7486: LD_VAR 0 6
7490: NOT
7491: IFFALSE 7519
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7493: LD_VAR 0 5
7497: PUSH
7498: LD_INT 1
7500: PPUSH
7501: LD_VAR 0 5
7505: PPUSH
7506: CALL_OW 12
7510: ARRAY
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 336
// if heikeVehicles then
7519: LD_EXP 27
7523: IFFALSE 8147
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7525: LD_ADDR_VAR 0 5
7529: PUSH
7530: LD_VAR 0 5
7534: PPUSH
7535: LD_INT 3
7537: PPUSH
7538: CALL 54111 0 2
7542: ST_TO_ADDR
// for i in heikeVehicles do
7543: LD_ADDR_VAR 0 2
7547: PUSH
7548: LD_EXP 27
7552: PUSH
7553: FOR_IN
7554: IFFALSE 8145
// begin if not tmp then
7556: LD_VAR 0 5
7560: NOT
7561: IFFALSE 7565
// break ;
7563: GO 8145
// uc_side := 2 ;
7565: LD_ADDR_OWVAR 20
7569: PUSH
7570: LD_INT 2
7572: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7573: LD_ADDR_OWVAR 21
7577: PUSH
7578: LD_VAR 0 2
7582: PUSH
7583: LD_INT 5
7585: ARRAY
7586: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7587: LD_ADDR_OWVAR 37
7591: PUSH
7592: LD_VAR 0 2
7596: PUSH
7597: LD_INT 1
7599: ARRAY
7600: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7601: LD_ADDR_OWVAR 39
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: LD_INT 2
7613: ARRAY
7614: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7615: LD_ADDR_OWVAR 38
7619: PUSH
7620: LD_VAR 0 2
7624: PUSH
7625: LD_INT 3
7627: ARRAY
7628: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7629: LD_ADDR_OWVAR 40
7633: PUSH
7634: LD_VAR 0 2
7638: PUSH
7639: LD_INT 4
7641: ARRAY
7642: ST_TO_ADDR
// veh := CreateVehicle ;
7643: LD_ADDR_VAR 0 4
7647: PUSH
7648: CALL_OW 45
7652: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_INT 4
7660: PPUSH
7661: CALL_OW 233
// if i [ 3 ] = control_manual then
7665: LD_VAR 0 2
7669: PUSH
7670: LD_INT 3
7672: ARRAY
7673: PUSH
7674: LD_INT 1
7676: EQUAL
7677: IFFALSE 7762
// begin PlaceUnitArea ( veh , startArea , false ) ;
7679: LD_VAR 0 4
7683: PPUSH
7684: LD_INT 1
7686: PPUSH
7687: LD_INT 0
7689: PPUSH
7690: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7694: LD_VAR 0 2
7698: PUSH
7699: LD_INT 4
7701: ARRAY
7702: PUSH
7703: LD_INT 31
7705: EQUAL
7706: IFFALSE 7724
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7708: LD_VAR 0 5
7712: PUSH
7713: LD_INT 1
7715: ARRAY
7716: PPUSH
7717: LD_INT 3
7719: PPUSH
7720: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7724: LD_VAR 0 5
7728: PUSH
7729: LD_INT 1
7731: ARRAY
7732: PPUSH
7733: LD_VAR 0 4
7737: PPUSH
7738: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7742: LD_ADDR_VAR 0 5
7746: PUSH
7747: LD_VAR 0 5
7751: PPUSH
7752: LD_INT 1
7754: PPUSH
7755: CALL_OW 3
7759: ST_TO_ADDR
// end else
7760: GO 7823
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7762: LD_INT 22
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 31
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PPUSH
7786: CALL_OW 69
7790: IFFALSE 7823
// begin PlaceUnitArea ( veh , startArea , false ) ;
7792: LD_VAR 0 4
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 0
7802: PPUSH
7803: CALL_OW 49
// Connect ( veh ) ;
7807: LD_VAR 0 4
7811: PPUSH
7812: CALL 23169 0 1
// wait ( 0 0$2 ) ;
7816: LD_INT 70
7818: PPUSH
7819: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7823: LD_VAR 0 4
7827: PPUSH
7828: LD_VAR 0 2
7832: PUSH
7833: LD_INT 6
7835: ARRAY
7836: PPUSH
7837: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7841: LD_VAR 0 4
7845: PPUSH
7846: LD_INT 20
7848: PPUSH
7849: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7853: LD_VAR 0 2
7857: PUSH
7858: LD_INT 7
7860: ARRAY
7861: PUSH
7862: LD_VAR 0 4
7866: PPUSH
7867: CALL_OW 264
7871: PUSH
7872: LD_INT 51
7874: PUSH
7875: LD_INT 32
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: IN
7882: AND
7883: IFFALSE 7934
// begin for j := 1 to 2 do
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: DOUBLE
7891: LD_INT 1
7893: DEC
7894: ST_TO_ADDR
7895: LD_INT 2
7897: PUSH
7898: FOR_TO
7899: IFFALSE 7932
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7901: LD_VAR 0 4
7905: PPUSH
7906: LD_VAR 0 3
7910: PPUSH
7911: LD_VAR 0 2
7915: PUSH
7916: LD_INT 7
7918: ARRAY
7919: PUSH
7920: LD_VAR 0 3
7924: ARRAY
7925: PPUSH
7926: CALL_OW 291
7930: GO 7898
7932: POP
7933: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7934: LD_VAR 0 4
7938: PPUSH
7939: LD_INT 185
7941: PPUSH
7942: LD_INT 144
7944: PPUSH
7945: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7949: LD_VAR 0 4
7953: PPUSH
7954: CALL_OW 263
7958: PUSH
7959: LD_INT 1
7961: EQUAL
7962: PUSH
7963: LD_VAR 0 7
7967: NOT
7968: AND
7969: PUSH
7970: LD_VAR 0 4
7974: PPUSH
7975: CALL_OW 311
7979: PPUSH
7980: CALL_OW 257
7984: PUSH
7985: LD_INT 2
7987: EQUAL
7988: AND
7989: IFFALSE 8094
// begin hasCamera := true ;
7991: LD_ADDR_VAR 0 7
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7999: LD_ADDR_VAR 0 8
8003: PUSH
8004: LD_VAR 0 4
8008: PPUSH
8009: CALL_OW 311
8013: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8014: LD_VAR 0 4
8018: PPUSH
8019: LD_INT 177
8021: PPUSH
8022: LD_INT 138
8024: PPUSH
8025: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8029: LD_VAR 0 8
8033: PPUSH
8034: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8038: LD_VAR 0 8
8042: PPUSH
8043: LD_INT 190
8045: PPUSH
8046: LD_INT 150
8048: PPUSH
8049: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8053: LD_VAR 0 8
8057: PPUSH
8058: LD_VAR 0 4
8062: PPUSH
8063: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8067: LD_VAR 0 8
8071: PPUSH
8072: LD_INT 170
8074: PPUSH
8075: LD_INT 103
8077: PPUSH
8078: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8082: LD_INT 190
8084: PPUSH
8085: LD_INT 150
8087: PPUSH
8088: CALL_OW 84
// end else
8092: GO 8136
// begin AddComWait ( veh , 0 0$2 ) ;
8094: LD_VAR 0 4
8098: PPUSH
8099: LD_INT 70
8101: PPUSH
8102: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8106: LD_VAR 0 4
8110: PPUSH
8111: LD_INT 179
8113: PPUSH
8114: LD_INT 129
8116: PPUSH
8117: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8121: LD_VAR 0 4
8125: PPUSH
8126: LD_INT 170
8128: PPUSH
8129: LD_INT 103
8131: PPUSH
8132: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8136: LD_INT 70
8138: PPUSH
8139: CALL_OW 67
// end ;
8143: GO 7553
8145: POP
8146: POP
// end ; if tmp then
8147: LD_VAR 0 5
8151: IFFALSE 8296
// begin for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8294
// begin SetDir ( i , 4 ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 4
8173: PPUSH
8174: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8178: LD_VAR 0 2
8182: PPUSH
8183: LD_INT 1
8185: PPUSH
8186: LD_INT 0
8188: PPUSH
8189: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8193: LD_VAR 0 2
8197: PPUSH
8198: LD_INT 185
8200: PPUSH
8201: LD_INT 144
8203: PPUSH
8204: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8208: LD_VAR 0 2
8212: PPUSH
8213: CALL_OW 257
8217: PUSH
8218: LD_INT 2
8220: EQUAL
8221: PUSH
8222: LD_VAR 0 7
8226: NOT
8227: AND
8228: IFFALSE 8255
// begin hasCamera := true ;
8230: LD_ADDR_VAR 0 7
8234: PUSH
8235: LD_INT 1
8237: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8238: LD_VAR 0 2
8242: PPUSH
8243: LD_INT 190
8245: PPUSH
8246: LD_INT 150
8248: PPUSH
8249: CALL_OW 217
// end else
8253: GO 8270
// AddComMoveXY ( i , 179 , 129 ) ;
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_INT 179
8262: PPUSH
8263: LD_INT 129
8265: PPUSH
8266: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_INT 170
8277: PPUSH
8278: LD_INT 103
8280: PPUSH
8281: CALL_OW 171
// wait ( 0 0$2 ) ;
8285: LD_INT 70
8287: PPUSH
8288: CALL_OW 67
// end ;
8292: GO 8163
8294: POP
8295: POP
// end ; if heikeApes then
8296: LD_EXP 26
8300: IFFALSE 8418
// begin counter := 0 ;
8302: LD_ADDR_VAR 0 9
8306: PUSH
8307: LD_INT 0
8309: ST_TO_ADDR
// for i in heikeApes do
8310: LD_ADDR_VAR 0 2
8314: PUSH
8315: LD_EXP 26
8319: PUSH
8320: FOR_IN
8321: IFFALSE 8416
// begin if counter > 2 then
8323: LD_VAR 0 9
8327: PUSH
8328: LD_INT 2
8330: GREATER
8331: IFFALSE 8335
// break ;
8333: GO 8416
// counter := Inc ( counter ) ;
8335: LD_ADDR_VAR 0 9
8339: PUSH
8340: LD_VAR 0 9
8344: PPUSH
8345: CALL 53246 0 1
8349: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8350: LD_VAR 0 2
8354: PPUSH
8355: LD_INT 4
8357: PPUSH
8358: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 0
8372: PPUSH
8373: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_INT 185
8384: PPUSH
8385: LD_INT 144
8387: PPUSH
8388: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_INT 170
8399: PPUSH
8400: LD_INT 103
8402: PPUSH
8403: CALL_OW 171
// wait ( 0 0$2 ) ;
8407: LD_INT 70
8409: PPUSH
8410: CALL_OW 67
// end ;
8414: GO 8320
8416: POP
8417: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8418: LD_EXP 13
8422: PPUSH
8423: LD_INT 163
8425: PPUSH
8426: LD_INT 89
8428: PPUSH
8429: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8433: LD_EXP 13
8437: PPUSH
8438: LD_STRING DH-Intro-1
8440: PPUSH
8441: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8445: LD_INT 175
8447: PPUSH
8448: LD_INT 117
8450: PPUSH
8451: CALL_OW 84
// if Markov then
8455: LD_EXP 20
8459: IFFALSE 9034
// begin Say ( Markov , DMar-Intro-2 ) ;
8461: LD_EXP 20
8465: PPUSH
8466: LD_STRING DMar-Intro-2
8468: PPUSH
8469: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8473: LD_EXP 20
8477: PPUSH
8478: LD_STRING DMar-Intro-3
8480: PPUSH
8481: CALL_OW 88
// wait ( 0 0$1 ) ;
8485: LD_INT 35
8487: PPUSH
8488: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8492: LD_EXP 13
8496: PPUSH
8497: CALL_OW 85
// if Kurt then
8501: LD_EXP 23
8505: IFFALSE 8557
// begin if IsInUnit ( Kurt ) then
8507: LD_EXP 23
8511: PPUSH
8512: CALL_OW 310
8516: IFFALSE 8527
// ComExit ( Kurt ) ;
8518: LD_EXP 23
8522: PPUSH
8523: CALL 52281 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8527: LD_EXP 23
8531: PPUSH
8532: LD_INT 130
8534: PPUSH
8535: LD_INT 56
8537: PPUSH
8538: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8542: LD_EXP 23
8546: PPUSH
8547: LD_INT 129
8549: PPUSH
8550: LD_INT 56
8552: PPUSH
8553: CALL_OW 178
// end ; if Kaia then
8557: LD_EXP 18
8561: IFFALSE 8741
// begin Say ( Kaia , DK-Intro-4 ) ;
8563: LD_EXP 18
8567: PPUSH
8568: LD_STRING DK-Intro-4
8570: PPUSH
8571: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8575: LD_EXP 20
8579: PPUSH
8580: LD_STRING DMar-Intro-5
8582: PPUSH
8583: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8587: LD_EXP 20
8591: PPUSH
8592: LD_STRING DMar-Intro-6
8594: PPUSH
8595: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8599: LD_EXP 22
8603: PPUSH
8604: LD_STRING DO-Intro-7
8606: PPUSH
8607: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8611: LD_INT 160
8613: PPUSH
8614: LD_INT 85
8616: PPUSH
8617: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8621: LD_EXP 20
8625: PPUSH
8626: LD_STRING DMar-Intro-8
8628: PPUSH
8629: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8633: LD_EXP 20
8637: PPUSH
8638: LD_STRING DMar-Intro-9
8640: PPUSH
8641: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8645: LD_EXP 20
8649: PPUSH
8650: LD_STRING DMar-Intro-10
8652: PPUSH
8653: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8657: LD_EXP 20
8661: PPUSH
8662: LD_STRING DMar-Intro-11
8664: PPUSH
8665: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8669: LD_EXP 14
8673: PPUSH
8674: LD_STRING DG-Intro-12
8676: PPUSH
8677: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8681: LD_EXP 14
8685: PPUSH
8686: LD_STRING DG-Intro-13
8688: PPUSH
8689: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8693: LD_EXP 14
8697: PPUSH
8698: LD_STRING DG-Intro-14
8700: PPUSH
8701: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8705: LD_EXP 14
8709: PPUSH
8710: LD_STRING DG-Intro-15
8712: PPUSH
8713: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8717: LD_EXP 13
8721: PPUSH
8722: LD_STRING DH-Intro-16
8724: PPUSH
8725: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8729: LD_EXP 20
8733: PPUSH
8734: LD_STRING DMar-Intro-17
8736: PPUSH
8737: CALL_OW 88
// end ; if Kurt and Mike then
8741: LD_EXP 23
8745: PUSH
8746: LD_EXP 15
8750: AND
8751: IFFALSE 9034
// begin CenterNowOnUnits ( Kurt ) ;
8753: LD_EXP 23
8757: PPUSH
8758: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8762: LD_EXP 23
8766: PPUSH
8767: LD_EXP 13
8771: PPUSH
8772: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8776: LD_EXP 23
8780: PPUSH
8781: LD_STRING DKs-Intro-18
8783: PPUSH
8784: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8788: LD_EXP 23
8792: PPUSH
8793: LD_STRING DKs-Intro-19
8795: PPUSH
8796: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8800: LD_EXP 15
8804: PPUSH
8805: CALL_OW 87
// if IsInUnit ( Mike ) then
8809: LD_EXP 15
8813: PPUSH
8814: CALL_OW 310
8818: IFFALSE 8829
// ComExit ( Mike ) ;
8820: LD_EXP 15
8824: PPUSH
8825: CALL 52281 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8829: LD_EXP 15
8833: PPUSH
8834: LD_INT 129
8836: PPUSH
8837: LD_INT 53
8839: PPUSH
8840: CALL_OW 171
// AddComHold ( Mike ) ;
8844: LD_EXP 15
8848: PPUSH
8849: CALL_OW 200
// wait ( 0 0$2 ) ;
8853: LD_INT 70
8855: PPUSH
8856: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8860: LD_EXP 15
8864: PPUSH
8865: LD_STRING DM-Intro-20
8867: PPUSH
8868: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8872: LD_ADDR_EXP 3
8876: PUSH
8877: LD_STRING Scout
8879: PPUSH
8880: CALL_OW 97
8884: ST_TO_ADDR
// if scoutActive = 1 then
8885: LD_EXP 3
8889: PUSH
8890: LD_INT 1
8892: EQUAL
8893: IFFALSE 8990
// begin CenterNowOnUnits ( Kurt ) ;
8895: LD_EXP 23
8899: PPUSH
8900: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8904: LD_EXP 13
8908: PPUSH
8909: LD_STRING DH-Intro-21
8911: PPUSH
8912: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8916: LD_EXP 15
8920: PPUSH
8921: LD_STRING DM-Intro-22
8923: PPUSH
8924: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8928: LD_EXP 23
8932: PPUSH
8933: LD_STRING DKs-Intro-23
8935: PPUSH
8936: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8940: LD_EXP 23
8944: PPUSH
8945: LD_INT 5
8947: PPUSH
8948: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8952: LD_EXP 15
8956: PPUSH
8957: LD_INT 5
8959: PPUSH
8960: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8964: LD_EXP 23
8968: PUSH
8969: LD_EXP 15
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PPUSH
8978: LD_INT 104
8980: PPUSH
8981: LD_INT 66
8983: PPUSH
8984: CALL_OW 111
// end else
8988: GO 9034
// begin scoutActive := 0 ;
8990: LD_ADDR_EXP 3
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8998: LD_EXP 13
9002: PPUSH
9003: LD_STRING DH-Intro-a-21
9005: PPUSH
9006: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9010: LD_EXP 15
9014: PPUSH
9015: LD_STRING DM-Intro-a-22
9017: PPUSH
9018: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9022: LD_EXP 23
9026: PPUSH
9027: LD_STRING DKs-Intro-a-23
9029: PPUSH
9030: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9034: LD_INT 0
9036: PPUSH
9037: CALL 51865 0 1
// music_nat := music_auto ;
9041: LD_ADDR_OWVAR 71
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// music_class := music_auto ;
9049: LD_ADDR_OWVAR 72
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9057: LD_STRING M1
9059: PPUSH
9060: CALL_OW 337
// wait ( 0 0$3 ) ;
9064: LD_INT 105
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9071: LD_EXP 13
9075: PPUSH
9076: LD_STRING DH-Base-1
9078: PPUSH
9079: CALL_OW 88
// if Kaia then
9083: LD_EXP 18
9087: IFFALSE 9197
// begin Say ( Kaia , DK-Base-2 ) ;
9089: LD_EXP 18
9093: PPUSH
9094: LD_STRING DK-Base-2
9096: PPUSH
9097: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9101: LD_EXP 13
9105: PPUSH
9106: LD_STRING DH-Base-3
9108: PPUSH
9109: CALL_OW 88
// if Aviradze then
9113: LD_EXP 24
9117: IFFALSE 9197
// begin Say ( Aviradze , DA-Base-4 ) ;
9119: LD_EXP 24
9123: PPUSH
9124: LD_STRING DA-Base-4
9126: PPUSH
9127: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9131: LD_EXP 18
9135: PPUSH
9136: LD_STRING DK-Base-5
9138: PPUSH
9139: CALL_OW 88
// if Markov then
9143: LD_EXP 20
9147: IFFALSE 9197
// begin Say ( Markov , DMar-Base-6 ) ;
9149: LD_EXP 20
9153: PPUSH
9154: LD_STRING DMar-Base-6
9156: PPUSH
9157: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9161: LD_EXP 18
9165: PPUSH
9166: LD_STRING DK-Base-7
9168: PPUSH
9169: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9173: LD_EXP 20
9177: PPUSH
9178: LD_STRING DMar-Base-8
9180: PPUSH
9181: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9185: LD_EXP 20
9189: PPUSH
9190: LD_STRING DMar-Base-9
9192: PPUSH
9193: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9197: CALL_OW 22
// end ;
9201: LD_VAR 0 1
9205: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9206: LD_EXP 5
9210: IFFALSE 10314
9212: GO 9214
9214: DISABLE
9215: LD_INT 0
9217: PPUSH
9218: PPUSH
// begin InGameOn ;
9219: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9223: LD_EXP 15
9227: PUSH
9228: LD_EXP 23
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PPUSH
9237: LD_EXP 13
9241: PPUSH
9242: CALL_OW 119
// ComExit ( Heike ) ;
9246: LD_EXP 13
9250: PPUSH
9251: CALL 52281 0 1
// if IsOk ( Mike ) then
9255: LD_EXP 15
9259: PPUSH
9260: CALL_OW 302
9264: IFFALSE 9282
// AddComTurnUnit ( Heike , Mike ) else
9266: LD_EXP 13
9270: PPUSH
9271: LD_EXP 15
9275: PPUSH
9276: CALL_OW 179
9280: GO 9296
// AddComTurnUnit ( Heike , Kurt ) ;
9282: LD_EXP 13
9286: PPUSH
9287: LD_EXP 23
9291: PPUSH
9292: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9296: LD_EXP 15
9300: PPUSH
9301: CALL_OW 302
9305: PUSH
9306: LD_EXP 23
9310: PPUSH
9311: CALL_OW 302
9315: AND
9316: IFFALSE 9567
// begin CenterNowOnUnits ( Mike ) ;
9318: LD_EXP 15
9322: PPUSH
9323: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9327: LD_EXP 15
9331: PPUSH
9332: LD_STRING DM-Scout-1
9334: PPUSH
9335: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9339: LD_EXP 13
9343: PPUSH
9344: LD_STRING DH-Scout-2
9346: PPUSH
9347: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9351: LD_EXP 23
9355: PPUSH
9356: LD_STRING DKs-Scout-3
9358: PPUSH
9359: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9363: LD_EXP 13
9367: PPUSH
9368: LD_STRING DH-Scout-4
9370: PPUSH
9371: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9375: LD_EXP 13
9379: PPUSH
9380: LD_STRING DH-Scout-5
9382: PPUSH
9383: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: LD_INT 72
9394: PUSH
9395: LD_INT 122
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 89
9404: PUSH
9405: LD_INT 131
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 99
9414: PUSH
9415: LD_INT 139
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 100
9424: PUSH
9425: LD_INT 148
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// for i in tmp do
9438: LD_ADDR_VAR 0 1
9442: PUSH
9443: LD_VAR 0 2
9447: PUSH
9448: FOR_IN
9449: IFFALSE 9507
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9451: LD_VAR 0 1
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: PPUSH
9460: LD_VAR 0 1
9464: PUSH
9465: LD_INT 2
9467: ARRAY
9468: PPUSH
9469: LD_INT 2
9471: PPUSH
9472: LD_INT 6
9474: NEG
9475: PPUSH
9476: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9480: LD_VAR 0 1
9484: PUSH
9485: LD_INT 1
9487: ARRAY
9488: PPUSH
9489: LD_VAR 0 1
9493: PUSH
9494: LD_INT 2
9496: ARRAY
9497: PPUSH
9498: LD_INT 2
9500: PPUSH
9501: CALL_OW 331
// end ;
9505: GO 9448
9507: POP
9508: POP
// CenterOnXY ( 83 , 132 ) ;
9509: LD_INT 83
9511: PPUSH
9512: LD_INT 132
9514: PPUSH
9515: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9519: LD_EXP 23
9523: PPUSH
9524: LD_STRING DKs-Scout-6
9526: PPUSH
9527: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9531: LD_EXP 15
9535: PPUSH
9536: LD_STRING DM-Scout-7
9538: PPUSH
9539: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9543: LD_EXP 15
9547: PPUSH
9548: LD_STRING DM-Scout-8
9550: PPUSH
9551: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9555: LD_EXP 23
9559: PPUSH
9560: LD_STRING DKs-Scout-9
9562: PPUSH
9563: CALL_OW 88
// end ; if IsDead ( Mike ) then
9567: LD_EXP 15
9571: PPUSH
9572: CALL_OW 301
9576: IFFALSE 9743
// begin CenterNowOnUnits ( Kurt ) ;
9578: LD_EXP 23
9582: PPUSH
9583: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9587: LD_EXP 23
9591: PPUSH
9592: LD_STRING DKs-Scout-b-1
9594: PPUSH
9595: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9599: LD_EXP 23
9603: PPUSH
9604: LD_STRING DKs-Scout-b-2
9606: PPUSH
9607: CALL_OW 88
// if IsOk ( Givi ) then
9611: LD_EXP 14
9615: PPUSH
9616: CALL_OW 302
9620: IFFALSE 9695
// begin ComExit ( Givi ) ;
9622: LD_EXP 14
9626: PPUSH
9627: CALL 52281 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9631: LD_EXP 14
9635: PPUSH
9636: LD_EXP 23
9640: PPUSH
9641: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9645: LD_EXP 14
9649: PPUSH
9650: LD_STRING DG-Scout-b-3
9652: PPUSH
9653: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9657: LD_EXP 14
9661: PPUSH
9662: LD_STRING DG-Scout-b-4
9664: PPUSH
9665: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9669: LD_EXP 14
9673: PPUSH
9674: LD_STRING DG-Scout-b-5
9676: PPUSH
9677: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9681: LD_EXP 13
9685: PPUSH
9686: LD_STRING DH-Scout-b-6
9688: PPUSH
9689: CALL_OW 88
// end else
9693: GO 9707
// Say ( Heike , DH-Scout-a-4 ) ;
9695: LD_EXP 13
9699: PPUSH
9700: LD_STRING DH-Scout-a-4
9702: PPUSH
9703: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9707: LD_EXP 23
9711: PPUSH
9712: LD_STRING DKs-Scout-b-7
9714: PPUSH
9715: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9719: LD_EXP 23
9723: PPUSH
9724: LD_STRING DKs-Scout-b-8
9726: PPUSH
9727: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9731: LD_EXP 23
9735: PPUSH
9736: LD_STRING DKs-Scout-b-9
9738: PPUSH
9739: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9743: LD_EXP 23
9747: PPUSH
9748: CALL_OW 301
9752: IFFALSE 10031
// begin CenterNowOnUnits ( Mike ) ;
9754: LD_EXP 15
9758: PPUSH
9759: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9763: LD_EXP 15
9767: PPUSH
9768: LD_STRING DM-Scout-a-1
9770: PPUSH
9771: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9775: LD_EXP 15
9779: PPUSH
9780: LD_STRING DM-Scout-a-2
9782: PPUSH
9783: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9787: LD_EXP 15
9791: PPUSH
9792: CALL_OW 256
9796: PUSH
9797: LD_INT 1000
9799: LESS
9800: IFFALSE 9816
// Say ( Heike , DH-Scout-a-3 ) else
9802: LD_EXP 13
9806: PPUSH
9807: LD_STRING DH-Scout-a-3
9809: PPUSH
9810: CALL_OW 88
9814: GO 9828
// Say ( Heike , DH-Scout-a-4 ) ;
9816: LD_EXP 13
9820: PPUSH
9821: LD_STRING DH-Scout-a-4
9823: PPUSH
9824: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9828: LD_EXP 15
9832: PPUSH
9833: LD_STRING DM-Scout-a-5
9835: PPUSH
9836: CALL_OW 88
// if IsOk ( Kaia ) then
9840: LD_EXP 18
9844: PPUSH
9845: CALL_OW 302
9849: IFFALSE 10031
// begin ComExit ( Kaia ) ;
9851: LD_EXP 18
9855: PPUSH
9856: CALL 52281 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9860: LD_EXP 18
9864: PPUSH
9865: LD_EXP 15
9869: PPUSH
9870: CALL_OW 172
// wait ( 0 0$2 ) ;
9874: LD_INT 70
9876: PPUSH
9877: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9881: LD_EXP 18
9885: PPUSH
9886: LD_EXP 15
9890: PPUSH
9891: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9895: LD_EXP 15
9899: PPUSH
9900: LD_EXP 18
9904: PPUSH
9905: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9909: LD_EXP 18
9913: PPUSH
9914: LD_STRING DK-Scout-a-6
9916: PPUSH
9917: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9921: LD_EXP 15
9925: PPUSH
9926: LD_STRING DM-Scout-a-7
9928: PPUSH
9929: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9933: LD_EXP 18
9937: PPUSH
9938: LD_STRING DK-Scout-a-8
9940: PPUSH
9941: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9945: LD_EXP 18
9949: PPUSH
9950: LD_STRING DK-Scout-a-9
9952: PPUSH
9953: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9957: LD_EXP 13
9961: PPUSH
9962: LD_STRING DH-Scout-a-10
9964: PPUSH
9965: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9969: LD_EXP 15
9973: PPUSH
9974: LD_EXP 13
9978: PPUSH
9979: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9983: LD_EXP 15
9987: PPUSH
9988: LD_STRING DM-Scout-a-11
9990: PPUSH
9991: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9995: LD_EXP 15
9999: PPUSH
10000: LD_STRING DM-Scout-a-12
10002: PPUSH
10003: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10007: LD_EXP 15
10011: PPUSH
10012: LD_STRING DM-Scout-a-13
10014: PPUSH
10015: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10019: LD_EXP 15
10023: PPUSH
10024: LD_STRING DM-Scout-a-14
10026: PPUSH
10027: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10031: LD_EXP 14
10035: PPUSH
10036: CALL_OW 302
10040: IFFALSE 10068
// begin Say ( Givi , DG-Scout-10 ) ;
10042: LD_EXP 14
10046: PPUSH
10047: LD_STRING DG-Scout-10
10049: PPUSH
10050: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10054: LD_EXP 14
10058: PPUSH
10059: LD_STRING DG-Scout-11
10061: PPUSH
10062: CALL_OW 88
// end else
10066: GO 10125
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10068: LD_EXP 25
10072: PPUSH
10073: LD_INT 26
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: PPUSH
10088: LD_STRING DArm-Scout-10
10090: PPUSH
10091: CALL 191 0 2
10095: NOT
10096: IFFALSE 10125
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10098: LD_EXP 25
10102: PPUSH
10103: LD_INT 26
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 72
10117: PPUSH
10118: LD_STRING DArf-Scout-10
10120: PPUSH
10121: CALL 191 0 2
// Say ( Heike , DH-Scout-12 ) ;
10125: LD_EXP 13
10129: PPUSH
10130: LD_STRING DH-Scout-12
10132: PPUSH
10133: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10137: LD_EXP 13
10141: PPUSH
10142: LD_STRING DH-Scout-13
10144: PPUSH
10145: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10149: LD_EXP 15
10153: PPUSH
10154: CALL_OW 302
10158: PUSH
10159: LD_EXP 23
10163: PPUSH
10164: CALL_OW 302
10168: AND
10169: IFFALSE 10197
// begin Say ( Mike , DM-Scout-14 ) ;
10171: LD_EXP 15
10175: PPUSH
10176: LD_STRING DM-Scout-14
10178: PPUSH
10179: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10183: LD_EXP 13
10187: PPUSH
10188: LD_STRING DH-Scout-c-14
10190: PPUSH
10191: CALL_OW 88
// end else
10195: GO 10290
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10197: LD_EXP 15
10201: PPUSH
10202: CALL_OW 302
10206: PUSH
10207: LD_EXP 23
10211: PPUSH
10212: CALL_OW 302
10216: XOR
10217: IFFALSE 10278
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10219: LD_EXP 25
10223: PPUSH
10224: LD_INT 26
10226: PUSH
10227: LD_INT 1
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 72
10238: PPUSH
10239: LD_STRING DArm-Scout-a-14
10241: PPUSH
10242: CALL 191 0 2
10246: NOT
10247: IFFALSE 10276
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10249: LD_EXP 25
10253: PPUSH
10254: LD_INT 26
10256: PUSH
10257: LD_INT 2
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 72
10268: PPUSH
10269: LD_STRING DArf-Scout-a-14
10271: PPUSH
10272: CALL 191 0 2
// end else
10276: GO 10290
// Say ( Heike , DH-Scout-d-14 ) ;
10278: LD_EXP 13
10282: PPUSH
10283: LD_STRING DH-Scout-d-14
10285: PPUSH
10286: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10290: LD_EXP 13
10294: PPUSH
10295: LD_STRING DH-Scout-15
10297: PPUSH
10298: CALL_OW 88
// InGameOff ;
10302: CALL_OW 9
// usAttacksAllowed := true ;
10306: LD_ADDR_EXP 6
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// end ;
10314: PPOPN 2
10316: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10317: LD_EXP 4
10321: IFFALSE 10498
10323: GO 10325
10325: DISABLE
10326: LD_INT 0
10328: PPUSH
// begin spoken := true ;
10329: LD_ADDR_VAR 0 1
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10337: LD_INT 1050
10339: PPUSH
10340: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10344: LD_EXP 13
10348: PPUSH
10349: LD_STRING DH-Scout-c-1
10351: PPUSH
10352: CALL_OW 88
// if not IsOk ( Givi ) then
10356: LD_EXP 14
10360: PPUSH
10361: CALL_OW 302
10365: NOT
10366: IFFALSE 10370
// exit ;
10368: GO 10498
// if IsOk ( Givi ) then
10370: LD_EXP 14
10374: PPUSH
10375: CALL_OW 302
10379: IFFALSE 10407
// begin Say ( Givi , DG-Scout-c-2 ) ;
10381: LD_EXP 14
10385: PPUSH
10386: LD_STRING DG-Scout-c-2
10388: PPUSH
10389: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10393: LD_EXP 14
10397: PPUSH
10398: LD_STRING DG-Scout-c-3
10400: PPUSH
10401: CALL_OW 88
// end else
10405: GO 10480
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10407: LD_ADDR_VAR 0 1
10411: PUSH
10412: LD_EXP 25
10416: PPUSH
10417: LD_INT 26
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 72
10431: PPUSH
10432: LD_STRING DArm-Scout-c-3
10434: PPUSH
10435: CALL 191 0 2
10439: ST_TO_ADDR
// if not spoken then
10440: LD_VAR 0 1
10444: NOT
10445: IFFALSE 10480
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10447: LD_ADDR_VAR 0 1
10451: PUSH
10452: LD_EXP 25
10456: PPUSH
10457: LD_INT 26
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 72
10471: PPUSH
10472: LD_STRING DArf-Scout-c-3
10474: PPUSH
10475: CALL 191 0 2
10479: ST_TO_ADDR
// ; end ; if spoken then
10480: LD_VAR 0 1
10484: IFFALSE 10498
// Say ( Heike , DH-Scout-c-4 ) ;
10486: LD_EXP 13
10490: PPUSH
10491: LD_STRING DH-Scout-c-4
10493: PPUSH
10494: CALL_OW 88
// end ;
10498: PPOPN 1
10500: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10501: LD_INT 22
10503: PUSH
10504: LD_INT 2
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 30
10513: PUSH
10514: LD_INT 7
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: CALL_OW 69
10529: PUSH
10530: LD_EXP 24
10534: PPUSH
10535: CALL_OW 302
10539: AND
10540: IFFALSE 10625
10542: GO 10544
10544: DISABLE
// begin DialogueOn ;
10545: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10549: LD_EXP 24
10553: PPUSH
10554: LD_STRING DA-Lab-1
10556: PPUSH
10557: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10561: LD_EXP 13
10565: PPUSH
10566: LD_STRING DH-Lab-2
10568: PPUSH
10569: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10573: LD_EXP 24
10577: PPUSH
10578: LD_STRING DA-Lab-3
10580: PPUSH
10581: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10585: LD_EXP 24
10589: PPUSH
10590: LD_STRING DA-Lab-4
10592: PPUSH
10593: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10597: LD_EXP 24
10601: PPUSH
10602: LD_STRING DA-Lab-5
10604: PPUSH
10605: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10609: LD_EXP 13
10613: PPUSH
10614: LD_STRING DH-Lab-6
10616: PPUSH
10617: CALL_OW 88
// DialogueOff ;
10621: CALL_OW 7
// end ;
10625: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10626: LD_INT 7
10628: PPUSH
10629: LD_INT 2
10631: PPUSH
10632: CALL_OW 321
10636: PUSH
10637: LD_INT 2
10639: EQUAL
10640: PUSH
10641: LD_EXP 14
10645: PPUSH
10646: CALL_OW 302
10650: AND
10651: IFFALSE 10820
10653: GO 10655
10655: DISABLE
// begin DialogueOn ;
10656: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10660: LD_EXP 14
10664: PPUSH
10665: LD_STRING DG-Opt-1
10667: PPUSH
10668: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10672: LD_EXP 13
10676: PPUSH
10677: LD_STRING DH-Opt-2
10679: PPUSH
10680: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10684: LD_EXP 14
10688: PPUSH
10689: LD_STRING DG-Opt-3
10691: PPUSH
10692: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10696: LD_EXP 14
10700: PPUSH
10701: LD_STRING DG-Opt-4
10703: PPUSH
10704: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10708: LD_EXP 13
10712: PPUSH
10713: LD_STRING DH-Opt-5
10715: PPUSH
10716: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10720: LD_EXP 14
10724: PPUSH
10725: LD_STRING DG-Opt-6
10727: PPUSH
10728: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10732: LD_EXP 13
10736: PPUSH
10737: LD_STRING DH-Opt-7
10739: PPUSH
10740: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10744: LD_EXP 14
10748: PPUSH
10749: LD_STRING DG-Opt-8
10751: PPUSH
10752: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10756: LD_EXP 14
10760: PPUSH
10761: LD_STRING DG-Opt-9
10763: PPUSH
10764: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10768: LD_EXP 13
10772: PPUSH
10773: LD_STRING DH-Opt-10
10775: PPUSH
10776: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10780: LD_EXP 14
10784: PPUSH
10785: LD_STRING DG-Opt-11
10787: PPUSH
10788: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10792: LD_EXP 14
10796: PPUSH
10797: LD_STRING DG-Opt-12
10799: PPUSH
10800: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10804: LD_EXP 13
10808: PPUSH
10809: LD_STRING DH-Opt-13
10811: PPUSH
10812: CALL_OW 88
// DialogueOff ;
10816: CALL_OW 7
// end ;
10820: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10821: LD_INT 40
10823: PPUSH
10824: LD_INT 2
10826: PPUSH
10827: CALL_OW 321
10831: PUSH
10832: LD_INT 2
10834: EQUAL
10835: PUSH
10836: LD_EXP 16
10840: PPUSH
10841: CALL_OW 302
10845: AND
10846: IFFALSE 11096
10848: GO 10850
10850: DISABLE
// begin DialogueOn ;
10851: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10855: LD_EXP 16
10859: PPUSH
10860: LD_STRING DI-Roc-1
10862: PPUSH
10863: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10867: LD_EXP 13
10871: PPUSH
10872: LD_STRING DH-Roc-2
10874: PPUSH
10875: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10879: LD_EXP 16
10883: PPUSH
10884: LD_STRING DI-Roc-3
10886: PPUSH
10887: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10891: LD_EXP 16
10895: PPUSH
10896: LD_STRING DI-Roc-4
10898: PPUSH
10899: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10903: LD_EXP 18
10907: PPUSH
10908: LD_STRING DK-Roc-5
10910: PPUSH
10911: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10915: LD_EXP 18
10919: PPUSH
10920: LD_STRING DK-Roc-6
10922: PPUSH
10923: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10927: LD_EXP 14
10931: PPUSH
10932: LD_STRING DG-Roc-7
10934: PPUSH
10935: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10939: LD_EXP 14
10943: PPUSH
10944: LD_STRING DG-Roc-8
10946: PPUSH
10947: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10951: LD_EXP 20
10955: PPUSH
10956: CALL_OW 302
10960: PUSH
10961: LD_EXP 18
10965: PPUSH
10966: CALL_OW 302
10970: AND
10971: PUSH
10972: LD_EXP 14
10976: PPUSH
10977: CALL_OW 302
10981: AND
10982: IFFALSE 11092
// begin Say ( Markov , DMar-Roc-9 ) ;
10984: LD_EXP 20
10988: PPUSH
10989: LD_STRING DMar-Roc-9
10991: PPUSH
10992: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10996: LD_EXP 20
11000: PPUSH
11001: LD_STRING DMar-Roc-10
11003: PPUSH
11004: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11008: LD_EXP 18
11012: PPUSH
11013: LD_STRING DK-Roc-11
11015: PPUSH
11016: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11020: LD_EXP 20
11024: PPUSH
11025: LD_STRING DMar-Roc-12
11027: PPUSH
11028: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11032: LD_EXP 18
11036: PPUSH
11037: LD_STRING DK-Roc-13
11039: PPUSH
11040: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11044: LD_EXP 14
11048: PPUSH
11049: LD_STRING DG-Roc-14
11051: PPUSH
11052: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11056: LD_EXP 20
11060: PPUSH
11061: LD_STRING DMar-Roc-15
11063: PPUSH
11064: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11068: LD_EXP 20
11072: PPUSH
11073: LD_STRING DMar-Roc-16
11075: PPUSH
11076: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11080: LD_EXP 18
11084: PPUSH
11085: LD_STRING DK-Roc-17
11087: PPUSH
11088: CALL_OW 88
// end ; DialogueOff ;
11092: CALL_OW 7
// end ;
11096: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11097: LD_EXP 28
11101: PPUSH
11102: CALL_OW 256
11106: PUSH
11107: LD_INT 1000
11109: LESS
11110: PUSH
11111: LD_INT 22
11113: PUSH
11114: LD_INT 1
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 23
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 69
11150: PUSH
11151: LD_INT 6
11153: LESS
11154: OR
11155: PUSH
11156: LD_INT 22
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 25
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: PPUSH
11191: CALL_OW 69
11195: PUSH
11196: LD_INT 2
11198: LESS
11199: OR
11200: IFFALSE 12409
11202: GO 11204
11204: DISABLE
11205: LD_INT 0
11207: PPUSH
11208: PPUSH
11209: PPUSH
// begin usAttacksAllowed := false ;
11210: LD_ADDR_EXP 6
11214: PUSH
11215: LD_INT 0
11217: ST_TO_ADDR
// usSurrender := true ;
11218: LD_ADDR_EXP 7
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11226: LD_INT 1
11228: PPUSH
11229: LD_INT 2
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11242: LD_ADDR_VAR 0 1
11246: PUSH
11247: LD_INT 22
11249: PUSH
11250: LD_INT 2
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 21
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 60
11269: PUSH
11270: EMPTY
11271: LIST
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: PUSH
11283: FOR_IN
11284: IFFALSE 11297
// ComStop ( i ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 141
11295: GO 11283
11297: POP
11298: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11299: LD_ADDR_VAR 0 1
11303: PUSH
11304: LD_INT 22
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 50
11319: PUSH
11320: EMPTY
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 69
11346: PUSH
11347: FOR_IN
11348: IFFALSE 11364
// SetLives ( i , 251 ) ;
11350: LD_VAR 0 1
11354: PPUSH
11355: LD_INT 251
11357: PPUSH
11358: CALL_OW 234
11362: GO 11347
11364: POP
11365: POP
// InGameOn ;
11366: CALL_OW 8
// ComExit ( usCommander ) ;
11370: LD_EXP 28
11374: PPUSH
11375: CALL 52281 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11379: LD_EXP 28
11383: PPUSH
11384: LD_INT 81
11386: PPUSH
11387: LD_INT 143
11389: PPUSH
11390: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11394: LD_EXP 28
11398: PPUSH
11399: LD_INT 81
11401: PPUSH
11402: LD_INT 139
11404: PPUSH
11405: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11409: LD_INT 81
11411: PPUSH
11412: LD_INT 144
11414: PPUSH
11415: LD_INT 2
11417: PPUSH
11418: LD_INT 10
11420: NEG
11421: PPUSH
11422: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11426: LD_EXP 28
11430: PPUSH
11431: CALL_OW 87
// wait ( 0 0$2 ) ;
11435: LD_INT 70
11437: PPUSH
11438: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11442: LD_EXP 28
11446: PPUSH
11447: LD_STRING DCa-Surrender-1
11449: PPUSH
11450: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11454: LD_EXP 13
11458: PPUSH
11459: LD_STRING DH-Surrender-2
11461: PPUSH
11462: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11466: LD_EXP 13
11470: PPUSH
11471: CALL_OW 310
11475: PPUSH
11476: CALL_OW 247
11480: PUSH
11481: LD_INT 3
11483: EQUAL
11484: IFFALSE 11502
// begin ComExit ( Heike ) ;
11486: LD_EXP 13
11490: PPUSH
11491: CALL 52281 0 1
// wait ( 3 ) ;
11495: LD_INT 3
11497: PPUSH
11498: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11502: LD_EXP 13
11506: PPUSH
11507: LD_INT 82
11509: PPUSH
11510: LD_INT 133
11512: PPUSH
11513: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11517: LD_EXP 13
11521: PPUSH
11522: LD_EXP 28
11526: PPUSH
11527: CALL_OW 179
// wait ( 0 0$3 ) ;
11531: LD_INT 105
11533: PPUSH
11534: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11538: LD_EXP 13
11542: PPUSH
11543: LD_STRING DH-Surrender-3
11545: PPUSH
11546: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11550: LD_EXP 13
11554: PPUSH
11555: LD_STRING DH-Surrender-4
11557: PPUSH
11558: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11562: LD_INT 81
11564: PPUSH
11565: LD_INT 144
11567: PPUSH
11568: LD_INT 2
11570: PPUSH
11571: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11575: LD_INT 1
11577: PPUSH
11578: LD_INT 2
11580: PPUSH
11581: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11585: LD_ADDR_VAR 0 1
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 1
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 23
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 54
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: PPUSH
11621: CALL_OW 69
11625: PUSH
11626: FOR_IN
11627: IFFALSE 11640
// ComExit ( i ) ;
11629: LD_VAR 0 1
11633: PPUSH
11634: CALL 52281 0 1
11638: GO 11626
11640: POP
11641: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 25
11659: PUSH
11660: LD_INT 4
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PPUSH
11671: CALL_OW 69
11675: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 3
11693: PUSH
11694: LD_INT 50
11696: PUSH
11697: EMPTY
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: ST_TO_ADDR
// if sci and hurts then
11713: LD_VAR 0 3
11717: PUSH
11718: LD_VAR 0 2
11722: AND
11723: IFFALSE 11785
// begin for i := 1 to hurts do
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: DOUBLE
11731: LD_INT 1
11733: DEC
11734: ST_TO_ADDR
11735: LD_VAR 0 2
11739: PUSH
11740: FOR_TO
11741: IFFALSE 11783
// if i <= sci then
11743: LD_VAR 0 1
11747: PUSH
11748: LD_VAR 0 3
11752: LESSEQUAL
11753: IFFALSE 11781
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11755: LD_VAR 0 3
11759: PUSH
11760: LD_VAR 0 1
11764: ARRAY
11765: PPUSH
11766: LD_VAR 0 2
11770: PUSH
11771: LD_VAR 0 1
11775: ARRAY
11776: PPUSH
11777: CALL_OW 188
11781: GO 11740
11783: POP
11784: POP
// end ; if IsOk ( Givi ) then
11785: LD_EXP 14
11789: PPUSH
11790: CALL_OW 302
11794: IFFALSE 11810
// Say ( Givi , DG-Surrender-5 ) else
11796: LD_EXP 14
11800: PPUSH
11801: LD_STRING DG-Surrender-5
11803: PPUSH
11804: CALL_OW 88
11808: GO 11822
// Say ( Heike , DH-Surrender-a-5 ) ;
11810: LD_EXP 13
11814: PPUSH
11815: LD_STRING DH-Surrender-a-5
11817: PPUSH
11818: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11822: LD_EXP 28
11826: PPUSH
11827: LD_STRING DCa-Surrender-6
11829: PPUSH
11830: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11834: LD_EXP 28
11838: PPUSH
11839: LD_STRING DCa-Surrender-7
11841: PPUSH
11842: CALL_OW 88
// if IsOk ( Givi ) then
11846: LD_EXP 14
11850: PPUSH
11851: CALL_OW 302
11855: IFFALSE 11871
// Say ( Givi , DG-Surrender-8 ) else
11857: LD_EXP 14
11861: PPUSH
11862: LD_STRING DG-Surrender-8
11864: PPUSH
11865: CALL_OW 88
11869: GO 11883
// Say ( Heike , DH-Surrender-a-8 ) ;
11871: LD_EXP 13
11875: PPUSH
11876: LD_STRING DH-Surrender-a-8
11878: PPUSH
11879: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11883: LD_EXP 28
11887: PPUSH
11888: LD_STRING DCa-Surrender-9
11890: PPUSH
11891: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11895: LD_EXP 13
11899: PPUSH
11900: LD_STRING DH-Surrender-10
11902: PPUSH
11903: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11907: LD_EXP 28
11911: PPUSH
11912: LD_STRING DCa-Surrender-11
11914: PPUSH
11915: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11919: LD_EXP 13
11923: PPUSH
11924: LD_STRING DH-Surrender-12
11926: PPUSH
11927: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11931: LD_EXP 28
11935: PPUSH
11936: LD_STRING DCa-Surrender-13
11938: PPUSH
11939: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11943: LD_EXP 28
11947: PPUSH
11948: LD_STRING DCa-Surrender-14
11950: PPUSH
11951: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11955: LD_EXP 28
11959: PPUSH
11960: LD_STRING DCa-Surrender-15
11962: PPUSH
11963: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11967: LD_EXP 28
11971: PPUSH
11972: LD_STRING DCa-Surrender-16
11974: PPUSH
11975: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11979: LD_EXP 18
11983: PPUSH
11984: LD_STRING DK-Surrender-17
11986: PPUSH
11987: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11991: LD_EXP 22
11995: PPUSH
11996: LD_STRING DO-Surrender-18
11998: PPUSH
11999: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12003: LD_EXP 22
12007: PPUSH
12008: LD_STRING DO-Surrender-19
12010: PPUSH
12011: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12015: LD_EXP 23
12019: PPUSH
12020: LD_STRING DKs-Surrender-20
12022: PPUSH
12023: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12027: LD_EXP 23
12031: PPUSH
12032: LD_STRING DKs-Surrender-21
12034: PPUSH
12035: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12039: LD_EXP 20
12043: PPUSH
12044: LD_STRING DMar-Surrender-22
12046: PPUSH
12047: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12051: LD_EXP 20
12055: PPUSH
12056: LD_STRING DMar-Surrender-23
12058: PPUSH
12059: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12063: LD_EXP 19
12067: PPUSH
12068: LD_STRING DS-Surrender-24
12070: PPUSH
12071: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12075: LD_EXP 24
12079: PPUSH
12080: LD_STRING DA-Surrender-25
12082: PPUSH
12083: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12087: LD_EXP 16
12091: PPUSH
12092: LD_STRING DI-Surrender-26
12094: PPUSH
12095: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12099: LD_EXP 17
12103: PPUSH
12104: LD_STRING DKam-Surrender-27
12106: PPUSH
12107: CALL_OW 88
// if IsOk ( Givi ) then
12111: LD_EXP 14
12115: PPUSH
12116: CALL_OW 302
12120: IFFALSE 12160
// begin Say ( Givi , DG-Surrender-28 ) ;
12122: LD_EXP 14
12126: PPUSH
12127: LD_STRING DG-Surrender-28
12129: PPUSH
12130: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12134: LD_EXP 14
12138: PPUSH
12139: LD_STRING DG-Surrender-29
12141: PPUSH
12142: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12146: LD_EXP 14
12150: PPUSH
12151: LD_STRING DG-Surrender-30
12153: PPUSH
12154: CALL_OW 88
// end else
12158: GO 12196
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12160: LD_EXP 13
12164: PPUSH
12165: LD_STRING DH-Surrender-a-28
12167: PPUSH
12168: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12172: LD_EXP 13
12176: PPUSH
12177: LD_STRING DH-Surrender-a-29
12179: PPUSH
12180: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12184: LD_EXP 13
12188: PPUSH
12189: LD_STRING DH-Surrender-a-30
12191: PPUSH
12192: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12196: CALL 14038 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12200: LD_INT 22
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: PPUSH
12215: LD_INT 176
12217: PUSH
12218: LD_INT 123
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: PPUSH
12228: CALL 54489 0 2
// if not IsEnvironment ( 190 , 150 ) then
12232: LD_INT 190
12234: PPUSH
12235: LD_INT 150
12237: PPUSH
12238: CALL_OW 351
12242: NOT
12243: IFFALSE 12262
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12245: LD_INT 190
12247: PPUSH
12248: LD_INT 150
12250: PPUSH
12251: LD_INT 2
12253: PPUSH
12254: LD_INT 8
12256: NEG
12257: PPUSH
12258: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12262: LD_INT 193
12264: PPUSH
12265: LD_INT 150
12267: PPUSH
12268: CALL_OW 84
// if IsOk ( Markov ) then
12272: LD_EXP 20
12276: PPUSH
12277: CALL_OW 302
12281: IFFALSE 12297
// Say ( Markov , DMar-Surrender-31 ) else
12283: LD_EXP 20
12287: PPUSH
12288: LD_STRING DMar-Surrender-31
12290: PPUSH
12291: CALL_OW 88
12295: GO 12354
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12297: LD_EXP 25
12301: PPUSH
12302: LD_INT 26
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 72
12316: PPUSH
12317: LD_STRING DArm-Surrender-a-31
12319: PPUSH
12320: CALL 191 0 2
12324: NOT
12325: IFFALSE 12354
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12327: LD_EXP 25
12331: PPUSH
12332: LD_INT 26
12334: PUSH
12335: LD_INT 2
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 72
12346: PPUSH
12347: LD_STRING DArf-Surrender-a-31
12349: PPUSH
12350: CALL 191 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12354: LD_EXP 13
12358: PPUSH
12359: LD_STRING DH-Surrender-32
12361: PPUSH
12362: CALL_OW 88
// InGameOff ;
12366: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12370: LD_STRING M2
12372: PPUSH
12373: CALL_OW 337
// wait ( 0 0$20 ) ;
12377: LD_INT 700
12379: PPUSH
12380: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12384: CALL 14400 0 0
// russianAttack := true ;
12388: LD_ADDR_EXP 8
12392: PUSH
12393: LD_INT 1
12395: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12396: LD_INT 190
12398: PPUSH
12399: LD_INT 150
12401: PPUSH
12402: LD_INT 2
12404: PPUSH
12405: CALL_OW 331
// end ;
12409: PPOPN 3
12411: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12412: LD_EXP 11
12416: PUSH
12417: LD_INT 2
12419: PPUSH
12420: CALL_OW 463
12424: NOT
12425: AND
12426: PUSH
12427: LD_EXP 13
12431: PPUSH
12432: CALL_OW 302
12436: AND
12437: PUSH
12438: LD_INT 22
12440: PUSH
12441: LD_INT 2
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 30
12450: PUSH
12451: LD_INT 3
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PPUSH
12462: CALL_OW 69
12466: AND
12467: PUSH
12468: LD_EXP 20
12472: PPUSH
12473: CALL_OW 302
12477: PUSH
12478: LD_EXP 25
12482: PPUSH
12483: LD_INT 50
12485: PUSH
12486: EMPTY
12487: LIST
12488: PPUSH
12489: CALL_OW 72
12493: OR
12494: AND
12495: IFFALSE 12723
12497: GO 12499
12499: DISABLE
// begin DialogueOn ;
12500: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12504: LD_EXP 13
12508: PPUSH
12509: LD_STRING DH-Heavy-1
12511: PPUSH
12512: CALL_OW 88
// if IsOk ( Markov ) then
12516: LD_EXP 20
12520: PPUSH
12521: CALL_OW 302
12525: IFFALSE 12650
// begin Say ( Markov , DMar-Heavy-2 ) ;
12527: LD_EXP 20
12531: PPUSH
12532: LD_STRING DMar-Heavy-2
12534: PPUSH
12535: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12539: LD_INT 22
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 30
12551: PUSH
12552: LD_INT 3
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PPUSH
12563: CALL_OW 69
12567: PUSH
12568: LD_INT 1
12570: ARRAY
12571: PPUSH
12572: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12576: LD_EXP 20
12580: PPUSH
12581: LD_STRING DMar-Heavy-3
12583: PPUSH
12584: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12588: LD_EXP 20
12592: PPUSH
12593: LD_STRING DMar-Heavy-4
12595: PPUSH
12596: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12600: LD_EXP 20
12604: PPUSH
12605: LD_STRING DMar-Heavy-5
12607: PPUSH
12608: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12612: LD_EXP 20
12616: PPUSH
12617: LD_STRING DMar-Heavy-6
12619: PPUSH
12620: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12624: LD_EXP 13
12628: PPUSH
12629: LD_STRING DH-Heavy-7
12631: PPUSH
12632: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12636: LD_EXP 13
12640: PPUSH
12641: LD_STRING DH-Heavy-8
12643: PPUSH
12644: CALL_OW 88
// end else
12648: GO 12707
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12650: LD_EXP 25
12654: PPUSH
12655: LD_INT 26
12657: PUSH
12658: LD_INT 1
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PPUSH
12665: CALL_OW 72
12669: PPUSH
12670: LD_STRING DArm-Heavy-a-2
12672: PPUSH
12673: CALL 191 0 2
12677: NOT
12678: IFFALSE 12707
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12680: LD_EXP 25
12684: PPUSH
12685: LD_INT 26
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 72
12699: PPUSH
12700: LD_STRING DArf-Heavy-a-2
12702: PPUSH
12703: CALL 191 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12707: LD_EXP 13
12711: PPUSH
12712: LD_STRING DH-Heavy-9
12714: PPUSH
12715: CALL_OW 88
// DialogueOff ;
12719: CALL_OW 7
// end ;
12723: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12724: LD_EXP 32
12728: PPUSH
12729: LD_INT 101
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 72
12743: PUSH
12744: LD_EXP 13
12748: PPUSH
12749: CALL_OW 302
12753: AND
12754: IFFALSE 12897
12756: GO 12758
12758: DISABLE
// begin DialogueOn ;
12759: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12763: LD_EXP 32
12767: PPUSH
12768: LD_INT 101
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 72
12782: PPUSH
12783: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12787: LD_EXP 13
12791: PPUSH
12792: LD_STRING DH-Flank-1
12794: PPUSH
12795: CALL_OW 88
// if IsOk ( Mike ) then
12799: LD_EXP 15
12803: PPUSH
12804: CALL_OW 302
12808: IFFALSE 12824
// Say ( Mike , DM-Flank-2 ) else
12810: LD_EXP 15
12814: PPUSH
12815: LD_STRING DM-Flank-2
12817: PPUSH
12818: CALL_OW 88
12822: GO 12881
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12824: LD_EXP 25
12828: PPUSH
12829: LD_INT 26
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: PPUSH
12844: LD_STRING DArm-Flank-a-2
12846: PPUSH
12847: CALL 191 0 2
12851: NOT
12852: IFFALSE 12881
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12854: LD_EXP 25
12858: PPUSH
12859: LD_INT 26
12861: PUSH
12862: LD_INT 2
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PPUSH
12869: CALL_OW 72
12873: PPUSH
12874: LD_STRING DArm-Flank-a-2
12876: PPUSH
12877: CALL 191 0 2
// Say ( Heike , DH-Flank-3 ) ;
12881: LD_EXP 13
12885: PPUSH
12886: LD_STRING DH-Flank-3
12888: PPUSH
12889: CALL_OW 88
// DialogueOff ;
12893: CALL_OW 7
// end ;
12897: END
// every 0 0$3 trigger seeRemoteVehicle do
12898: LD_EXP 10
12902: IFFALSE 13126
12904: GO 12906
12906: DISABLE
// begin DialogueOn ;
12907: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12911: LD_EXP 13
12915: PPUSH
12916: LD_STRING DH-USRC-1
12918: PPUSH
12919: CALL_OW 88
// if IsOk ( Markov ) then
12923: LD_EXP 20
12927: PPUSH
12928: CALL_OW 302
12932: IFFALSE 12948
// Say ( Markov , DMar-USRC-2 ) else
12934: LD_EXP 20
12938: PPUSH
12939: LD_STRING DMar-USRC-2
12941: PPUSH
12942: CALL_OW 88
12946: GO 13005
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12948: LD_EXP 25
12952: PPUSH
12953: LD_INT 26
12955: PUSH
12956: LD_INT 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 72
12967: PPUSH
12968: LD_STRING DArm-USRC-a-2
12970: PPUSH
12971: CALL 191 0 2
12975: NOT
12976: IFFALSE 13005
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12978: LD_EXP 25
12982: PPUSH
12983: LD_INT 26
12985: PUSH
12986: LD_INT 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PPUSH
12993: CALL_OW 72
12997: PPUSH
12998: LD_STRING DArf-USRC-a-2
13000: PPUSH
13001: CALL 191 0 2
// DialogueOff ;
13005: CALL_OW 7
// wait ( 0 0$10 ) ;
13009: LD_INT 350
13011: PPUSH
13012: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13016: LD_EXP 13
13020: PPUSH
13021: LD_STRING DH-USRC-3
13023: PPUSH
13024: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13028: LD_INT 35
13030: PPUSH
13031: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13035: LD_INT 2
13037: PPUSH
13038: LD_INT 22
13040: PUSH
13041: LD_INT 1
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 36
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PPUSH
13062: CALL_OW 69
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PPUSH
13071: CALL_OW 292
13075: IFFALSE 13028
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13077: LD_INT 22
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 30
13089: PUSH
13090: LD_INT 36
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PPUSH
13101: CALL_OW 69
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: PPUSH
13110: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13114: LD_EXP 13
13118: PPUSH
13119: LD_STRING DH-USRCFound-1
13121: PPUSH
13122: CALL_OW 88
// end ;
13126: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13127: LD_EXP 18
13131: PPUSH
13132: CALL_OW 256
13136: PUSH
13137: LD_INT 3
13139: LESS
13140: IFFALSE 13177
13142: GO 13144
13144: DISABLE
// begin DialogueOn ;
13145: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13149: LD_EXP 18
13153: PPUSH
13154: LD_STRING DK-Dead-1
13156: PPUSH
13157: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13161: LD_EXP 18
13165: PPUSH
13166: LD_STRING DK-Dead-2
13168: PPUSH
13169: CALL_OW 91
// DialogueOff ;
13173: CALL_OW 7
// end ;
13177: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13178: LD_INT 22
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 2
13190: PUSH
13191: LD_INT 35
13193: PUSH
13194: LD_INT 28
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 34
13203: PUSH
13204: LD_INT 28
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: IFFALSE 13237
13226: GO 13228
13228: DISABLE
// hasRockets := true ;
13229: LD_ADDR_EXP 9
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
13237: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13238: LD_EXP 8
13242: PUSH
13243: LD_INT 22
13245: PUSH
13246: LD_INT 3
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 69
13257: NOT
13258: AND
13259: IFFALSE 13869
13261: GO 13263
13263: DISABLE
// begin DialogueOn ;
13264: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13268: LD_EXP 13
13272: PPUSH
13273: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13277: LD_EXP 13
13281: PPUSH
13282: LD_STRING DH-End-1
13284: PPUSH
13285: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13289: LD_EXP 21
13293: PPUSH
13294: LD_STRING DShar-End-2
13296: PPUSH
13297: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13301: LD_EXP 18
13305: PPUSH
13306: LD_STRING DK-End-3
13308: PPUSH
13309: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13313: LD_EXP 13
13317: PPUSH
13318: LD_STRING DH-End-4
13320: PPUSH
13321: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13325: LD_EXP 21
13329: PPUSH
13330: LD_STRING DShar-End-5
13332: PPUSH
13333: CALL_OW 94
// if IsOk ( Markov ) then
13337: LD_EXP 20
13341: PPUSH
13342: CALL_OW 302
13346: IFFALSE 13360
// Say ( Kaia , DK-End-6 ) ;
13348: LD_EXP 18
13352: PPUSH
13353: LD_STRING DK-End-6
13355: PPUSH
13356: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13360: LD_EXP 18
13364: PPUSH
13365: LD_STRING DK-End-7
13367: PPUSH
13368: CALL_OW 88
// if IsOk ( Kaia ) then
13372: LD_EXP 18
13376: PPUSH
13377: CALL_OW 302
13381: IFFALSE 13419
// begin Say ( Givi , DG-End-8 ) ;
13383: LD_EXP 14
13387: PPUSH
13388: LD_STRING DG-End-8
13390: PPUSH
13391: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13395: LD_EXP 14
13399: PPUSH
13400: LD_STRING DG-End-9
13402: PPUSH
13403: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13407: LD_EXP 13
13411: PPUSH
13412: LD_STRING DH-End-10
13414: PPUSH
13415: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13419: LD_EXP 13
13423: PPUSH
13424: LD_STRING DH-End-11
13426: PPUSH
13427: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13431: LD_INT 7
13433: PPUSH
13434: LD_INT 2
13436: PPUSH
13437: CALL_OW 321
13441: PUSH
13442: LD_INT 2
13444: EQUAL
13445: IFFALSE 13459
// AddMedal ( med1 , 1 ) else
13447: LD_STRING med1
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 101
13457: GO 13470
// AddMedal ( med1 , - 1 ) ;
13459: LD_STRING med1
13461: PPUSH
13462: LD_INT 1
13464: NEG
13465: PPUSH
13466: CALL_OW 101
// if hasRockets then
13470: LD_EXP 9
13474: IFFALSE 13488
// AddMedal ( med2 , 1 ) else
13476: LD_STRING med2
13478: PPUSH
13479: LD_INT 1
13481: PPUSH
13482: CALL_OW 101
13486: GO 13499
// AddMedal ( med2 , - 1 ) ;
13488: LD_STRING med2
13490: PPUSH
13491: LD_INT 1
13493: NEG
13494: PPUSH
13495: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13499: LD_OWVAR 1
13503: PUSH
13504: LD_INT 105000
13506: PUSH
13507: LD_INT 94500
13509: PUSH
13510: LD_INT 84000
13512: PUSH
13513: LD_INT 73500
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: LD_OWVAR 67
13526: ARRAY
13527: LESS
13528: IFFALSE 13542
// AddMedal ( med3 , 1 ) else
13530: LD_STRING med3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 101
13540: GO 13553
// AddMedal ( med3 , - 1 ) ;
13542: LD_STRING med3
13544: PPUSH
13545: LD_INT 1
13547: NEG
13548: PPUSH
13549: CALL_OW 101
// GiveMedals ( MAIN ) ;
13553: LD_STRING MAIN
13555: PPUSH
13556: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13560: LD_INT 22
13562: PUSH
13563: LD_INT 2
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 23
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 21
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PPUSH
13595: CALL_OW 69
13599: PPUSH
13600: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13604: LD_EXP 28
13608: PPUSH
13609: LD_STRING 07_UsCommander
13611: PPUSH
13612: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13616: LD_INT 22
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 23
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 1
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: PPUSH
13651: CALL_OW 69
13655: PUSH
13656: LD_EXP 28
13660: DIFF
13661: PPUSH
13662: LD_STRING 07_Americans
13664: PPUSH
13665: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13669: LD_EXP 13
13673: PPUSH
13674: LD_STRING 07_Heike
13676: PPUSH
13677: CALL_OW 38
// if Aviradze then
13681: LD_EXP 24
13685: IFFALSE 13699
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13687: LD_EXP 24
13691: PPUSH
13692: LD_STRING 07_Aviradze
13694: PPUSH
13695: CALL_OW 38
// if Ibrahim then
13699: LD_EXP 16
13703: IFFALSE 13717
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13705: LD_EXP 16
13709: PPUSH
13710: LD_STRING 07_Ibrahim
13712: PPUSH
13713: CALL_OW 38
// if Kamil then
13717: LD_EXP 17
13721: IFFALSE 13735
// SaveCharacters ( Kamil , 07_Kamil ) ;
13723: LD_EXP 17
13727: PPUSH
13728: LD_STRING 07_Kamil
13730: PPUSH
13731: CALL_OW 38
// if Sophia then
13735: LD_EXP 19
13739: IFFALSE 13753
// SaveCharacters ( Sophia , 07_Sophia ) ;
13741: LD_EXP 19
13745: PPUSH
13746: LD_STRING 07_Sophia
13748: PPUSH
13749: CALL_OW 38
// if Kaia then
13753: LD_EXP 18
13757: IFFALSE 13771
// SaveCharacters ( Kaia , 07_Kaia ) ;
13759: LD_EXP 18
13763: PPUSH
13764: LD_STRING 07_Kaia
13766: PPUSH
13767: CALL_OW 38
// if Givi then
13771: LD_EXP 14
13775: IFFALSE 13789
// SaveCharacters ( Givi , 07_Givi ) ;
13777: LD_EXP 14
13781: PPUSH
13782: LD_STRING 07_Givi
13784: PPUSH
13785: CALL_OW 38
// if Mike then
13789: LD_EXP 15
13793: IFFALSE 13807
// SaveCharacters ( Mike , 07_Mike ) ;
13795: LD_EXP 15
13799: PPUSH
13800: LD_STRING 07_Mike
13802: PPUSH
13803: CALL_OW 38
// if Markov then
13807: LD_EXP 20
13811: IFFALSE 13825
// SaveCharacters ( Markov , 07_Markov ) ;
13813: LD_EXP 20
13817: PPUSH
13818: LD_STRING 07_Markov
13820: PPUSH
13821: CALL_OW 38
// if Kurt then
13825: LD_EXP 23
13829: IFFALSE 13843
// SaveCharacters ( Kurt , 07_Kurt ) ;
13831: LD_EXP 23
13835: PPUSH
13836: LD_STRING 07_Kurt
13838: PPUSH
13839: CALL_OW 38
// if heikeSecondSquad then
13843: LD_EXP 25
13847: IFFALSE 13861
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13849: LD_EXP 25
13853: PPUSH
13854: LD_STRING 07_others
13856: PPUSH
13857: CALL_OW 38
// YouWin ;
13861: CALL_OW 103
// DialogueOff ;
13865: CALL_OW 7
// end ; end_of_file
13869: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13870: LD_INT 7
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 287
13880: PUSH
13881: LD_INT 300
13883: PUSH
13884: LD_INT 150
13886: PUSH
13887: LD_INT 100
13889: PUSH
13890: LD_INT 80
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: LD_OWVAR 67
13903: ARRAY
13904: LESS
13905: IFFALSE 13932
13907: GO 13909
13909: DISABLE
// begin enable ;
13910: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 5
13916: PPUSH
13917: CALL_OW 12
13921: PPUSH
13922: LD_INT 7
13924: PPUSH
13925: LD_INT 1
13927: PPUSH
13928: CALL_OW 55
// end ;
13932: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13933: LD_INT 8
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 287
13943: PUSH
13944: LD_INT 300
13946: PUSH
13947: LD_INT 250
13949: PUSH
13950: LD_INT 200
13952: PUSH
13953: LD_INT 180
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: LD_OWVAR 67
13966: ARRAY
13967: LESS
13968: IFFALSE 13995
13970: GO 13972
13972: DISABLE
// begin enable ;
13973: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13974: LD_INT 1
13976: PPUSH
13977: LD_INT 5
13979: PPUSH
13980: CALL_OW 12
13984: PPUSH
13985: LD_INT 8
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: CALL_OW 55
// end ;
13995: END
// every 0 0$40 trigger tick < 4 4$10 do
13996: LD_OWVAR 1
14000: PUSH
14001: LD_INT 8750
14003: LESS
14004: IFFALSE 14037
14006: GO 14008
14008: DISABLE
// begin enable ;
14009: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14010: LD_INT 1
14012: PPUSH
14013: LD_INT 5
14015: PPUSH
14016: CALL_OW 12
14020: PPUSH
14021: LD_INT 130
14023: PPUSH
14024: LD_INT 18
14026: PPUSH
14027: LD_INT 12
14029: PPUSH
14030: LD_INT 1
14032: PPUSH
14033: CALL_OW 56
// end ; end_of_file
14037: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
// uc_side := 3 ;
14045: LD_ADDR_OWVAR 20
14049: PUSH
14050: LD_INT 3
14052: ST_TO_ADDR
// uc_nation := 3 ;
14053: LD_ADDR_OWVAR 21
14057: PUSH
14058: LD_INT 3
14060: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14061: LD_ADDR_VAR 0 3
14065: PUSH
14066: LD_INT 184
14068: PUSH
14069: LD_INT 144
14071: PUSH
14072: LD_INT 5
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 191
14082: PUSH
14083: LD_INT 147
14085: PUSH
14086: LD_INT 5
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 202
14096: PUSH
14097: LD_INT 151
14099: PUSH
14100: LD_INT 4
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 210
14110: PUSH
14111: LD_INT 152
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: ST_TO_ADDR
// for i := 1 to 4 do
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: DOUBLE
14134: LD_INT 1
14136: DEC
14137: ST_TO_ADDR
14138: LD_INT 4
14140: PUSH
14141: FOR_TO
14142: IFFALSE 14311
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14144: LD_INT 24
14146: PPUSH
14147: LD_INT 1
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: LD_INT 43
14155: PUSH
14156: LD_INT 44
14158: PUSH
14159: LD_INT 46
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_VAR 0 2
14171: PUSH
14172: LD_INT 3
14174: MOD
14175: PUSH
14176: LD_INT 1
14178: PLUS
14179: ARRAY
14180: PPUSH
14181: LD_INT 40
14183: PPUSH
14184: CALL 20076 0 5
// veh := CreateVehicle ;
14188: LD_ADDR_VAR 0 5
14192: PUSH
14193: CALL_OW 45
14197: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14198: LD_VAR 0 5
14202: PPUSH
14203: LD_VAR 0 3
14207: PUSH
14208: LD_VAR 0 2
14212: ARRAY
14213: PUSH
14214: LD_INT 3
14216: ARRAY
14217: PPUSH
14218: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14222: LD_VAR 0 5
14226: PPUSH
14227: LD_VAR 0 3
14231: PUSH
14232: LD_VAR 0 2
14236: ARRAY
14237: PUSH
14238: LD_INT 1
14240: ARRAY
14241: PPUSH
14242: LD_VAR 0 3
14246: PUSH
14247: LD_VAR 0 2
14251: ARRAY
14252: PUSH
14253: LD_INT 2
14255: ARRAY
14256: PPUSH
14257: LD_INT 0
14259: PPUSH
14260: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14264: LD_INT 0
14266: PPUSH
14267: LD_INT 6
14269: PUSH
14270: LD_INT 7
14272: PUSH
14273: LD_INT 8
14275: PUSH
14276: LD_INT 8
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: PUSH
14285: LD_OWVAR 67
14289: ARRAY
14290: PPUSH
14291: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14295: CALL_OW 44
14299: PPUSH
14300: LD_VAR 0 5
14304: PPUSH
14305: CALL_OW 52
// end ;
14309: GO 14141
14311: POP
14312: POP
// for i := 1 to 4 do
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: DOUBLE
14319: LD_INT 1
14321: DEC
14322: ST_TO_ADDR
14323: LD_INT 4
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14393
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14329: LD_INT 0
14331: PPUSH
14332: LD_INT 6
14334: PUSH
14335: LD_INT 7
14337: PUSH
14338: LD_INT 8
14340: PUSH
14341: LD_INT 8
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: LD_OWVAR 67
14354: ARRAY
14355: PPUSH
14356: CALL_OW 381
// un := CreateHuman ;
14360: LD_ADDR_VAR 0 4
14364: PUSH
14365: CALL_OW 44
14369: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14370: LD_VAR 0 4
14374: PPUSH
14375: LD_INT 185
14377: PPUSH
14378: LD_INT 145
14380: PPUSH
14381: LD_INT 6
14383: PPUSH
14384: LD_INT 0
14386: PPUSH
14387: CALL_OW 50
// end ;
14391: GO 14326
14393: POP
14394: POP
// end ;
14395: LD_VAR 0 1
14399: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14400: LD_INT 0
14402: PPUSH
14403: PPUSH
14404: PPUSH
// uc_side := 3 ;
14405: LD_ADDR_OWVAR 20
14409: PUSH
14410: LD_INT 3
14412: ST_TO_ADDR
// if Difficulty > 1 then
14413: LD_OWVAR 67
14417: PUSH
14418: LD_INT 1
14420: GREATER
14421: IFFALSE 14583
// begin uc_nation := 0 ;
14423: LD_ADDR_OWVAR 21
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: DOUBLE
14437: LD_INT 1
14439: DEC
14440: ST_TO_ADDR
14441: LD_INT 4
14443: PUSH
14444: LD_INT 5
14446: PUSH
14447: LD_INT 6
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: LD_OWVAR 67
14459: PUSH
14460: LD_INT 1
14462: PLUS
14463: ARRAY
14464: PUSH
14465: FOR_TO
14466: IFFALSE 14581
// begin hc_class := class_apeman_soldier ;
14468: LD_ADDR_OWVAR 28
14472: PUSH
14473: LD_INT 15
14475: ST_TO_ADDR
// hc_gallery :=  ;
14476: LD_ADDR_OWVAR 33
14480: PUSH
14481: LD_STRING 
14483: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14484: LD_ADDR_OWVAR 26
14488: PUSH
14489: LD_STRING Treci
14491: PUSH
14492: LD_STRING Ivan
14494: PUSH
14495: LD_STRING Yaromir
14497: PUSH
14498: LD_STRING Nadzieia
14500: PUSH
14501: LD_STRING Krasna
14503: PUSH
14504: LD_STRING Piaty
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 1
14517: PPUSH
14518: LD_INT 6
14520: PPUSH
14521: CALL_OW 12
14525: ARRAY
14526: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14527: LD_ADDR_OWVAR 31
14531: PUSH
14532: LD_INT 5
14534: PUSH
14535: LD_INT 0
14537: PUSH
14538: LD_INT 0
14540: PUSH
14541: LD_INT 0
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: ST_TO_ADDR
// hc_sex := sex_male ;
14550: LD_ADDR_OWVAR 27
14554: PUSH
14555: LD_INT 1
14557: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14558: CALL_OW 44
14562: PPUSH
14563: LD_INT 178
14565: PPUSH
14566: LD_INT 148
14568: PPUSH
14569: LD_INT 6
14571: PPUSH
14572: LD_INT 0
14574: PPUSH
14575: CALL_OW 50
// end ;
14579: GO 14465
14581: POP
14582: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: DOUBLE
14589: LD_INT 1
14591: DEC
14592: ST_TO_ADDR
14593: LD_INT 4
14595: PUSH
14596: LD_INT 6
14598: PUSH
14599: LD_INT 7
14601: PUSH
14602: LD_INT 9
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: LD_OWVAR 67
14615: ARRAY
14616: PUSH
14617: FOR_TO
14618: IFFALSE 14785
// begin uc_nation := 3 ;
14620: LD_ADDR_OWVAR 21
14624: PUSH
14625: LD_INT 3
14627: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14628: LD_INT 22
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: LD_INT 1
14636: PPUSH
14637: LD_INT 45
14639: PUSH
14640: LD_INT 43
14642: PUSH
14643: LD_INT 44
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_VAR 0 2
14655: PUSH
14656: LD_INT 3
14658: MOD
14659: PUSH
14660: LD_INT 1
14662: PLUS
14663: ARRAY
14664: PPUSH
14665: LD_INT 44
14667: PPUSH
14668: CALL 20076 0 5
// veh := CreateVehicle ;
14672: LD_ADDR_VAR 0 3
14676: PUSH
14677: CALL_OW 45
14681: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14682: LD_VAR 0 3
14686: PPUSH
14687: LD_INT 4
14689: PPUSH
14690: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14694: LD_VAR 0 3
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: LD_INT 0
14704: PPUSH
14705: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14709: LD_INT 0
14711: PPUSH
14712: LD_INT 6
14714: PUSH
14715: LD_INT 7
14717: PUSH
14718: LD_INT 8
14720: PUSH
14721: LD_INT 8
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: LD_OWVAR 67
14734: ARRAY
14735: PPUSH
14736: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14740: CALL_OW 44
14744: PPUSH
14745: LD_VAR 0 3
14749: PPUSH
14750: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14754: LD_VAR 0 3
14758: PPUSH
14759: LD_INT 178
14761: PUSH
14762: LD_INT 137
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: PPUSH
14772: CALL 54489 0 2
// wait ( 0 0$2 ) ;
14776: LD_INT 70
14778: PPUSH
14779: CALL_OW 67
// end ;
14783: GO 14617
14785: POP
14786: POP
// end ;
14787: LD_VAR 0 1
14791: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14792: LD_INT 22
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 32
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: IFFALSE 14908
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
// begin enable ;
14829: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_INT 22
14837: PUSH
14838: LD_INT 3
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 32
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: ST_TO_ADDR
// for i in tmp do
14864: LD_ADDR_VAR 0 1
14868: PUSH
14869: LD_VAR 0 2
14873: PUSH
14874: FOR_IN
14875: IFFALSE 14906
// if GetFuel ( i ) < 3 then
14877: LD_VAR 0 1
14881: PPUSH
14882: CALL_OW 261
14886: PUSH
14887: LD_INT 3
14889: LESS
14890: IFFALSE 14904
// SetFuel ( i , 3 ) ;
14892: LD_VAR 0 1
14896: PPUSH
14897: LD_INT 3
14899: PPUSH
14900: CALL_OW 240
14904: GO 14874
14906: POP
14907: POP
// end ;
14908: PPOPN 2
14910: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14911: LD_EXP 8
14915: PUSH
14916: LD_INT 22
14918: PUSH
14919: LD_INT 3
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 21
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 69
14944: AND
14945: IFFALSE 15209
14947: GO 14949
14949: DISABLE
14950: LD_INT 0
14952: PPUSH
14953: PPUSH
14954: PPUSH
// begin enable ;
14955: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_INT 3
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 25
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: LD_INT 55
14986: PUSH
14987: EMPTY
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: PPUSH
14999: CALL_OW 69
15003: ST_TO_ADDR
// if mech then
15004: LD_VAR 0 2
15008: IFFALSE 15078
// for i in mech do
15010: LD_ADDR_VAR 0 1
15014: PUSH
15015: LD_VAR 0 2
15019: PUSH
15020: FOR_IN
15021: IFFALSE 15076
// begin if IsInArea ( i , escapeArea ) then
15023: LD_VAR 0 1
15027: PPUSH
15028: LD_INT 13
15030: PPUSH
15031: CALL_OW 308
15035: IFFALSE 15048
// RemoveUnit ( i ) else
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 64
15046: GO 15074
// if IsOk ( i ) then
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL_OW 302
15057: IFFALSE 15074
// ComMoveXY ( i , 196 , 155 ) ;
15059: LD_VAR 0 1
15063: PPUSH
15064: LD_INT 196
15066: PPUSH
15067: LD_INT 155
15069: PPUSH
15070: CALL_OW 111
// end ;
15074: GO 15020
15076: POP
15077: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 22
15085: PUSH
15086: LD_INT 3
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: LD_INT 25
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: LD_INT 25
15108: PUSH
15109: LD_INT 15
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 21
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 50
15134: PUSH
15135: EMPTY
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: PPUSH
15143: CALL_OW 69
15147: ST_TO_ADDR
// if tmp then
15148: LD_VAR 0 3
15152: IFFALSE 15209
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 171
15161: PUSH
15162: LD_INT 106
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 145
15171: PUSH
15172: LD_INT 69
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 132
15181: PUSH
15182: LD_INT 38
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 126
15191: PUSH
15192: LD_INT 15
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: PPUSH
15205: CALL 54489 0 2
// end ; end_of_file
15209: PPOPN 3
15211: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15212: LD_INT 0
15214: PPUSH
15215: PPUSH
// if exist_mode then
15216: LD_VAR 0 2
15220: IFFALSE 15245
// unit := CreateCharacter ( prefix & ident ) else
15222: LD_ADDR_VAR 0 5
15226: PUSH
15227: LD_VAR 0 3
15231: PUSH
15232: LD_VAR 0 1
15236: STR
15237: PPUSH
15238: CALL_OW 34
15242: ST_TO_ADDR
15243: GO 15260
// unit := NewCharacter ( ident ) ;
15245: LD_ADDR_VAR 0 5
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 25
15259: ST_TO_ADDR
// result := unit ;
15260: LD_ADDR_VAR 0 4
15264: PUSH
15265: LD_VAR 0 5
15269: ST_TO_ADDR
// end ;
15270: LD_VAR 0 4
15274: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15275: LD_INT 0
15277: PPUSH
15278: PPUSH
// if not side or not nation then
15279: LD_VAR 0 1
15283: NOT
15284: PUSH
15285: LD_VAR 0 2
15289: NOT
15290: OR
15291: IFFALSE 15295
// exit ;
15293: GO 16063
// case nation of nation_american :
15295: LD_VAR 0 2
15299: PUSH
15300: LD_INT 1
15302: DOUBLE
15303: EQUAL
15304: IFTRUE 15308
15306: GO 15522
15308: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15309: LD_ADDR_VAR 0 4
15313: PUSH
15314: LD_INT 35
15316: PUSH
15317: LD_INT 45
15319: PUSH
15320: LD_INT 46
15322: PUSH
15323: LD_INT 47
15325: PUSH
15326: LD_INT 82
15328: PUSH
15329: LD_INT 83
15331: PUSH
15332: LD_INT 84
15334: PUSH
15335: LD_INT 85
15337: PUSH
15338: LD_INT 86
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: LD_INT 2
15346: PUSH
15347: LD_INT 6
15349: PUSH
15350: LD_INT 15
15352: PUSH
15353: LD_INT 16
15355: PUSH
15356: LD_INT 7
15358: PUSH
15359: LD_INT 12
15361: PUSH
15362: LD_INT 13
15364: PUSH
15365: LD_INT 10
15367: PUSH
15368: LD_INT 14
15370: PUSH
15371: LD_INT 20
15373: PUSH
15374: LD_INT 21
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_INT 25
15382: PUSH
15383: LD_INT 32
15385: PUSH
15386: LD_INT 27
15388: PUSH
15389: LD_INT 36
15391: PUSH
15392: LD_INT 69
15394: PUSH
15395: LD_INT 39
15397: PUSH
15398: LD_INT 34
15400: PUSH
15401: LD_INT 40
15403: PUSH
15404: LD_INT 48
15406: PUSH
15407: LD_INT 49
15409: PUSH
15410: LD_INT 50
15412: PUSH
15413: LD_INT 51
15415: PUSH
15416: LD_INT 52
15418: PUSH
15419: LD_INT 53
15421: PUSH
15422: LD_INT 54
15424: PUSH
15425: LD_INT 55
15427: PUSH
15428: LD_INT 56
15430: PUSH
15431: LD_INT 57
15433: PUSH
15434: LD_INT 58
15436: PUSH
15437: LD_INT 59
15439: PUSH
15440: LD_INT 60
15442: PUSH
15443: LD_INT 61
15445: PUSH
15446: LD_INT 62
15448: PUSH
15449: LD_INT 80
15451: PUSH
15452: LD_INT 82
15454: PUSH
15455: LD_INT 83
15457: PUSH
15458: LD_INT 84
15460: PUSH
15461: LD_INT 85
15463: PUSH
15464: LD_INT 86
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: ST_TO_ADDR
15520: GO 15987
15522: LD_INT 2
15524: DOUBLE
15525: EQUAL
15526: IFTRUE 15530
15528: GO 15756
15530: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15531: LD_ADDR_VAR 0 4
15535: PUSH
15536: LD_INT 35
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: LD_INT 46
15544: PUSH
15545: LD_INT 47
15547: PUSH
15548: LD_INT 82
15550: PUSH
15551: LD_INT 83
15553: PUSH
15554: LD_INT 84
15556: PUSH
15557: LD_INT 85
15559: PUSH
15560: LD_INT 87
15562: PUSH
15563: LD_INT 70
15565: PUSH
15566: LD_INT 1
15568: PUSH
15569: LD_INT 11
15571: PUSH
15572: LD_INT 3
15574: PUSH
15575: LD_INT 4
15577: PUSH
15578: LD_INT 5
15580: PUSH
15581: LD_INT 6
15583: PUSH
15584: LD_INT 15
15586: PUSH
15587: LD_INT 18
15589: PUSH
15590: LD_INT 7
15592: PUSH
15593: LD_INT 17
15595: PUSH
15596: LD_INT 8
15598: PUSH
15599: LD_INT 20
15601: PUSH
15602: LD_INT 21
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_INT 72
15610: PUSH
15611: LD_INT 26
15613: PUSH
15614: LD_INT 69
15616: PUSH
15617: LD_INT 39
15619: PUSH
15620: LD_INT 40
15622: PUSH
15623: LD_INT 41
15625: PUSH
15626: LD_INT 42
15628: PUSH
15629: LD_INT 43
15631: PUSH
15632: LD_INT 48
15634: PUSH
15635: LD_INT 49
15637: PUSH
15638: LD_INT 50
15640: PUSH
15641: LD_INT 51
15643: PUSH
15644: LD_INT 52
15646: PUSH
15647: LD_INT 53
15649: PUSH
15650: LD_INT 54
15652: PUSH
15653: LD_INT 55
15655: PUSH
15656: LD_INT 56
15658: PUSH
15659: LD_INT 60
15661: PUSH
15662: LD_INT 61
15664: PUSH
15665: LD_INT 62
15667: PUSH
15668: LD_INT 66
15670: PUSH
15671: LD_INT 67
15673: PUSH
15674: LD_INT 68
15676: PUSH
15677: LD_INT 81
15679: PUSH
15680: LD_INT 82
15682: PUSH
15683: LD_INT 83
15685: PUSH
15686: LD_INT 84
15688: PUSH
15689: LD_INT 85
15691: PUSH
15692: LD_INT 87
15694: PUSH
15695: LD_INT 88
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: ST_TO_ADDR
15754: GO 15987
15756: LD_INT 3
15758: DOUBLE
15759: EQUAL
15760: IFTRUE 15764
15762: GO 15986
15764: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15765: LD_ADDR_VAR 0 4
15769: PUSH
15770: LD_INT 46
15772: PUSH
15773: LD_INT 47
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: LD_INT 82
15784: PUSH
15785: LD_INT 83
15787: PUSH
15788: LD_INT 84
15790: PUSH
15791: LD_INT 85
15793: PUSH
15794: LD_INT 86
15796: PUSH
15797: LD_INT 11
15799: PUSH
15800: LD_INT 9
15802: PUSH
15803: LD_INT 20
15805: PUSH
15806: LD_INT 19
15808: PUSH
15809: LD_INT 21
15811: PUSH
15812: LD_INT 24
15814: PUSH
15815: LD_INT 22
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 28
15823: PUSH
15824: LD_INT 29
15826: PUSH
15827: LD_INT 30
15829: PUSH
15830: LD_INT 31
15832: PUSH
15833: LD_INT 37
15835: PUSH
15836: LD_INT 38
15838: PUSH
15839: LD_INT 32
15841: PUSH
15842: LD_INT 27
15844: PUSH
15845: LD_INT 33
15847: PUSH
15848: LD_INT 69
15850: PUSH
15851: LD_INT 39
15853: PUSH
15854: LD_INT 34
15856: PUSH
15857: LD_INT 40
15859: PUSH
15860: LD_INT 71
15862: PUSH
15863: LD_INT 23
15865: PUSH
15866: LD_INT 44
15868: PUSH
15869: LD_INT 48
15871: PUSH
15872: LD_INT 49
15874: PUSH
15875: LD_INT 50
15877: PUSH
15878: LD_INT 51
15880: PUSH
15881: LD_INT 52
15883: PUSH
15884: LD_INT 53
15886: PUSH
15887: LD_INT 54
15889: PUSH
15890: LD_INT 55
15892: PUSH
15893: LD_INT 56
15895: PUSH
15896: LD_INT 57
15898: PUSH
15899: LD_INT 58
15901: PUSH
15902: LD_INT 59
15904: PUSH
15905: LD_INT 63
15907: PUSH
15908: LD_INT 64
15910: PUSH
15911: LD_INT 65
15913: PUSH
15914: LD_INT 82
15916: PUSH
15917: LD_INT 83
15919: PUSH
15920: LD_INT 84
15922: PUSH
15923: LD_INT 85
15925: PUSH
15926: LD_INT 86
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: ST_TO_ADDR
15984: GO 15987
15986: POP
// if state > - 1 and state < 3 then
15987: LD_VAR 0 3
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: GREATER
15996: PUSH
15997: LD_VAR 0 3
16001: PUSH
16002: LD_INT 3
16004: LESS
16005: AND
16006: IFFALSE 16063
// for i in result do
16008: LD_ADDR_VAR 0 5
16012: PUSH
16013: LD_VAR 0 4
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16061
// if GetTech ( i , side ) <> state then
16021: LD_VAR 0 5
16025: PPUSH
16026: LD_VAR 0 1
16030: PPUSH
16031: CALL_OW 321
16035: PUSH
16036: LD_VAR 0 3
16040: NONEQUAL
16041: IFFALSE 16059
// result := result diff i ;
16043: LD_ADDR_VAR 0 4
16047: PUSH
16048: LD_VAR 0 4
16052: PUSH
16053: LD_VAR 0 5
16057: DIFF
16058: ST_TO_ADDR
16059: GO 16018
16061: POP
16062: POP
// end ;
16063: LD_VAR 0 4
16067: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
// result := true ;
16073: LD_ADDR_VAR 0 3
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_VAR 0 2
16090: PPUSH
16091: CALL_OW 480
16095: ST_TO_ADDR
// if not tmp then
16096: LD_VAR 0 5
16100: NOT
16101: IFFALSE 16105
// exit ;
16103: GO 16154
// for i in tmp do
16105: LD_ADDR_VAR 0 4
16109: PUSH
16110: LD_VAR 0 5
16114: PUSH
16115: FOR_IN
16116: IFFALSE 16152
// if GetTech ( i , side ) <> state_researched then
16118: LD_VAR 0 4
16122: PPUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 321
16132: PUSH
16133: LD_INT 2
16135: NONEQUAL
16136: IFFALSE 16150
// begin result := false ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 0
16145: ST_TO_ADDR
// exit ;
16146: POP
16147: POP
16148: GO 16154
// end ;
16150: GO 16115
16152: POP
16153: POP
// end ;
16154: LD_VAR 0 3
16158: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16159: LD_INT 0
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
16165: PPUSH
16166: PPUSH
16167: PPUSH
16168: PPUSH
16169: PPUSH
16170: PPUSH
16171: PPUSH
16172: PPUSH
16173: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16174: LD_VAR 0 1
16178: NOT
16179: PUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 257
16189: PUSH
16190: LD_INT 9
16192: NONEQUAL
16193: OR
16194: IFFALSE 16198
// exit ;
16196: GO 16771
// side := GetSide ( unit ) ;
16198: LD_ADDR_VAR 0 9
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 255
16212: ST_TO_ADDR
// tech_space := tech_spacanom ;
16213: LD_ADDR_VAR 0 12
16217: PUSH
16218: LD_INT 29
16220: ST_TO_ADDR
// tech_time := tech_taurad ;
16221: LD_ADDR_VAR 0 13
16225: PUSH
16226: LD_INT 28
16228: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16229: LD_ADDR_VAR 0 11
16233: PUSH
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 310
16243: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16244: LD_VAR 0 11
16248: PPUSH
16249: CALL_OW 247
16253: PUSH
16254: LD_INT 2
16256: EQUAL
16257: IFFALSE 16261
// exit ;
16259: GO 16771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16261: LD_ADDR_VAR 0 8
16265: PUSH
16266: LD_INT 81
16268: PUSH
16269: LD_VAR 0 9
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 3
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 3
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: ST_TO_ADDR
// if not tmp then
16304: LD_VAR 0 8
16308: NOT
16309: IFFALSE 16313
// exit ;
16311: GO 16771
// if in_unit then
16313: LD_VAR 0 11
16317: IFFALSE 16341
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16319: LD_ADDR_VAR 0 10
16323: PUSH
16324: LD_VAR 0 8
16328: PPUSH
16329: LD_VAR 0 11
16333: PPUSH
16334: CALL_OW 74
16338: ST_TO_ADDR
16339: GO 16361
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_VAR 0 8
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 74
16360: ST_TO_ADDR
// if not enemy then
16361: LD_VAR 0 10
16365: NOT
16366: IFFALSE 16370
// exit ;
16368: GO 16771
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16370: LD_VAR 0 11
16374: PUSH
16375: LD_VAR 0 11
16379: PPUSH
16380: LD_VAR 0 10
16384: PPUSH
16385: CALL_OW 296
16389: PUSH
16390: LD_INT 13
16392: GREATER
16393: AND
16394: PUSH
16395: LD_VAR 0 1
16399: PPUSH
16400: LD_VAR 0 10
16404: PPUSH
16405: CALL_OW 296
16409: PUSH
16410: LD_INT 12
16412: GREATER
16413: OR
16414: IFFALSE 16418
// exit ;
16416: GO 16771
// missile := [ 1 ] ;
16418: LD_ADDR_VAR 0 14
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: EMPTY
16427: LIST
16428: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16429: LD_VAR 0 9
16433: PPUSH
16434: LD_VAR 0 12
16438: PPUSH
16439: CALL_OW 325
16443: IFFALSE 16472
// missile := Replace ( missile , missile + 1 , 2 ) ;
16445: LD_ADDR_VAR 0 14
16449: PUSH
16450: LD_VAR 0 14
16454: PPUSH
16455: LD_VAR 0 14
16459: PUSH
16460: LD_INT 1
16462: PLUS
16463: PPUSH
16464: LD_INT 2
16466: PPUSH
16467: CALL_OW 1
16471: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16472: LD_VAR 0 9
16476: PPUSH
16477: LD_VAR 0 13
16481: PPUSH
16482: CALL_OW 325
16486: PUSH
16487: LD_VAR 0 10
16491: PPUSH
16492: CALL_OW 255
16496: PPUSH
16497: LD_VAR 0 13
16501: PPUSH
16502: CALL_OW 325
16506: NOT
16507: AND
16508: IFFALSE 16537
// missile := Replace ( missile , missile + 1 , 3 ) ;
16510: LD_ADDR_VAR 0 14
16514: PUSH
16515: LD_VAR 0 14
16519: PPUSH
16520: LD_VAR 0 14
16524: PUSH
16525: LD_INT 1
16527: PLUS
16528: PPUSH
16529: LD_INT 3
16531: PPUSH
16532: CALL_OW 1
16536: ST_TO_ADDR
// if missile < 2 then
16537: LD_VAR 0 14
16541: PUSH
16542: LD_INT 2
16544: LESS
16545: IFFALSE 16549
// exit ;
16547: GO 16771
// x := GetX ( enemy ) ;
16549: LD_ADDR_VAR 0 4
16553: PUSH
16554: LD_VAR 0 10
16558: PPUSH
16559: CALL_OW 250
16563: ST_TO_ADDR
// y := GetY ( enemy ) ;
16564: LD_ADDR_VAR 0 5
16568: PUSH
16569: LD_VAR 0 10
16573: PPUSH
16574: CALL_OW 251
16578: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16579: LD_ADDR_VAR 0 6
16583: PUSH
16584: LD_VAR 0 4
16588: PUSH
16589: LD_INT 1
16591: NEG
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 12
16600: PLUS
16601: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16602: LD_ADDR_VAR 0 7
16606: PUSH
16607: LD_VAR 0 5
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PPUSH
16616: LD_INT 1
16618: PPUSH
16619: CALL_OW 12
16623: PLUS
16624: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16625: LD_VAR 0 6
16629: PPUSH
16630: LD_VAR 0 7
16634: PPUSH
16635: CALL_OW 488
16639: NOT
16640: IFFALSE 16662
// begin _x := x ;
16642: LD_ADDR_VAR 0 6
16646: PUSH
16647: LD_VAR 0 4
16651: ST_TO_ADDR
// _y := y ;
16652: LD_ADDR_VAR 0 7
16656: PUSH
16657: LD_VAR 0 5
16661: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16662: LD_ADDR_VAR 0 3
16666: PUSH
16667: LD_INT 1
16669: PPUSH
16670: LD_VAR 0 14
16674: PPUSH
16675: CALL_OW 12
16679: ST_TO_ADDR
// case i of 1 :
16680: LD_VAR 0 3
16684: PUSH
16685: LD_INT 1
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16710
16693: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 10
16703: PPUSH
16704: CALL_OW 115
16708: GO 16771
16710: LD_INT 2
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16718
16716: GO 16740
16718: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_VAR 0 6
16728: PPUSH
16729: LD_VAR 0 7
16733: PPUSH
16734: CALL_OW 153
16738: GO 16771
16740: LD_INT 3
16742: DOUBLE
16743: EQUAL
16744: IFTRUE 16748
16746: GO 16770
16748: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16749: LD_VAR 0 1
16753: PPUSH
16754: LD_VAR 0 6
16758: PPUSH
16759: LD_VAR 0 7
16763: PPUSH
16764: CALL_OW 154
16768: GO 16771
16770: POP
// end ;
16771: LD_VAR 0 2
16775: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
// if not unit or not building then
16784: LD_VAR 0 1
16788: NOT
16789: PUSH
16790: LD_VAR 0 2
16794: NOT
16795: OR
16796: IFFALSE 16800
// exit ;
16798: GO 16958
// x := GetX ( building ) ;
16800: LD_ADDR_VAR 0 5
16804: PUSH
16805: LD_VAR 0 2
16809: PPUSH
16810: CALL_OW 250
16814: ST_TO_ADDR
// y := GetY ( building ) ;
16815: LD_ADDR_VAR 0 6
16819: PUSH
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL_OW 251
16829: ST_TO_ADDR
// for i = 0 to 5 do
16830: LD_ADDR_VAR 0 4
16834: PUSH
16835: DOUBLE
16836: LD_INT 0
16838: DEC
16839: ST_TO_ADDR
16840: LD_INT 5
16842: PUSH
16843: FOR_TO
16844: IFFALSE 16956
// begin _x := ShiftX ( x , i , 3 ) ;
16846: LD_ADDR_VAR 0 7
16850: PUSH
16851: LD_VAR 0 5
16855: PPUSH
16856: LD_VAR 0 4
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: CALL_OW 272
16868: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16869: LD_ADDR_VAR 0 8
16873: PUSH
16874: LD_VAR 0 6
16878: PPUSH
16879: LD_VAR 0 4
16883: PPUSH
16884: LD_INT 3
16886: PPUSH
16887: CALL_OW 273
16891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16892: LD_VAR 0 7
16896: PPUSH
16897: LD_VAR 0 8
16901: PPUSH
16902: CALL_OW 488
16906: NOT
16907: IFFALSE 16911
// continue ;
16909: GO 16843
// if HexInfo ( _x , _y ) = 0 then
16911: LD_VAR 0 7
16915: PPUSH
16916: LD_VAR 0 8
16920: PPUSH
16921: CALL_OW 428
16925: PUSH
16926: LD_INT 0
16928: EQUAL
16929: IFFALSE 16954
// begin ComMoveXY ( unit , _x , _y ) ;
16931: LD_VAR 0 1
16935: PPUSH
16936: LD_VAR 0 7
16940: PPUSH
16941: LD_VAR 0 8
16945: PPUSH
16946: CALL_OW 111
// exit ;
16950: POP
16951: POP
16952: GO 16958
// end ; end ;
16954: GO 16843
16956: POP
16957: POP
// end ;
16958: LD_VAR 0 3
16962: RET
// export function ScanBase ( side , base_area ) ; begin
16963: LD_INT 0
16965: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: LD_INT 81
16978: PUSH
16979: LD_VAR 0 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 70
16992: ST_TO_ADDR
// end ;
16993: LD_VAR 0 3
16997: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
17002: PPUSH
17003: PPUSH
// result := false ;
17004: LD_ADDR_VAR 0 2
17008: PUSH
17009: LD_INT 0
17011: ST_TO_ADDR
// side := GetSide ( unit ) ;
17012: LD_ADDR_VAR 0 3
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 255
17026: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17027: LD_ADDR_VAR 0 4
17031: PUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 248
17041: ST_TO_ADDR
// case nat of 1 :
17042: LD_VAR 0 4
17046: PUSH
17047: LD_INT 1
17049: DOUBLE
17050: EQUAL
17051: IFTRUE 17055
17053: GO 17066
17055: POP
// tech := tech_lassight ; 2 :
17056: LD_ADDR_VAR 0 5
17060: PUSH
17061: LD_INT 12
17063: ST_TO_ADDR
17064: GO 17105
17066: LD_INT 2
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17085
17074: POP
// tech := tech_mortar ; 3 :
17075: LD_ADDR_VAR 0 5
17079: PUSH
17080: LD_INT 41
17082: ST_TO_ADDR
17083: GO 17105
17085: LD_INT 3
17087: DOUBLE
17088: EQUAL
17089: IFTRUE 17093
17091: GO 17104
17093: POP
// tech := tech_bazooka ; end ;
17094: LD_ADDR_VAR 0 5
17098: PUSH
17099: LD_INT 44
17101: ST_TO_ADDR
17102: GO 17105
17104: POP
// if Researched ( side , tech ) then
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_VAR 0 5
17114: PPUSH
17115: CALL_OW 325
17119: IFFALSE 17146
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17121: LD_ADDR_VAR 0 2
17125: PUSH
17126: LD_INT 5
17128: PUSH
17129: LD_INT 8
17131: PUSH
17132: LD_INT 9
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PUSH
17140: LD_VAR 0 4
17144: ARRAY
17145: ST_TO_ADDR
// end ;
17146: LD_VAR 0 2
17150: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17151: LD_INT 0
17153: PPUSH
17154: PPUSH
17155: PPUSH
// if not mines then
17156: LD_VAR 0 2
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17165: LD_ADDR_VAR 0 5
17169: PUSH
17170: LD_INT 81
17172: PUSH
17173: LD_VAR 0 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 3
17184: PUSH
17185: LD_INT 21
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: ST_TO_ADDR
// for i in mines do
17208: LD_ADDR_VAR 0 4
17212: PUSH
17213: LD_VAR 0 2
17217: PUSH
17218: FOR_IN
17219: IFFALSE 17307
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17221: LD_VAR 0 4
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PPUSH
17230: LD_VAR 0 4
17234: PUSH
17235: LD_INT 2
17237: ARRAY
17238: PPUSH
17239: CALL_OW 458
17243: NOT
17244: IFFALSE 17248
// continue ;
17246: GO 17218
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17248: LD_VAR 0 4
17252: PUSH
17253: LD_INT 1
17255: ARRAY
17256: PPUSH
17257: LD_VAR 0 4
17261: PUSH
17262: LD_INT 2
17264: ARRAY
17265: PPUSH
17266: CALL_OW 428
17270: PUSH
17271: LD_VAR 0 5
17275: IN
17276: IFFALSE 17305
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17278: LD_VAR 0 4
17282: PUSH
17283: LD_INT 1
17285: ARRAY
17286: PPUSH
17287: LD_VAR 0 4
17291: PUSH
17292: LD_INT 2
17294: ARRAY
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 456
// end ;
17305: GO 17218
17307: POP
17308: POP
// end ;
17309: LD_VAR 0 3
17313: RET
// export function Count ( array ) ; var i ; begin
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
// result := 0 ;
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_INT 0
17325: ST_TO_ADDR
// for i in array do
17326: LD_ADDR_VAR 0 3
17330: PUSH
17331: LD_VAR 0 1
17335: PUSH
17336: FOR_IN
17337: IFFALSE 17361
// if i then
17339: LD_VAR 0 3
17343: IFFALSE 17359
// result := result + 1 ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_VAR 0 2
17354: PUSH
17355: LD_INT 1
17357: PLUS
17358: ST_TO_ADDR
17359: GO 17336
17361: POP
17362: POP
// end ;
17363: LD_VAR 0 2
17367: RET
// export function IsEmpty ( building ) ; begin
17368: LD_INT 0
17370: PPUSH
// if not building then
17371: LD_VAR 0 1
17375: NOT
17376: IFFALSE 17380
// exit ;
17378: GO 17423
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_VAR 0 1
17389: PUSH
17390: LD_INT 22
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 255
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 58
17409: PUSH
17410: EMPTY
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: IN
17422: ST_TO_ADDR
// end ;
17423: LD_VAR 0 2
17427: RET
// export function IsNotFull ( building ) ; begin
17428: LD_INT 0
17430: PPUSH
// if not building then
17431: LD_VAR 0 1
17435: NOT
17436: IFFALSE 17440
// exit ;
17438: GO 17459
// result := UnitsInside ( building ) < 6 ;
17440: LD_ADDR_VAR 0 2
17444: PUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: CALL_OW 313
17454: PUSH
17455: LD_INT 6
17457: LESS
17458: ST_TO_ADDR
// end ;
17459: LD_VAR 0 2
17463: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
// tmp := [ ] ;
17470: LD_ADDR_VAR 0 3
17474: PUSH
17475: EMPTY
17476: ST_TO_ADDR
// list := [ ] ;
17477: LD_ADDR_VAR 0 5
17481: PUSH
17482: EMPTY
17483: ST_TO_ADDR
// for i = 16 to 25 do
17484: LD_ADDR_VAR 0 4
17488: PUSH
17489: DOUBLE
17490: LD_INT 16
17492: DEC
17493: ST_TO_ADDR
17494: LD_INT 25
17496: PUSH
17497: FOR_TO
17498: IFFALSE 17571
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17500: LD_ADDR_VAR 0 3
17504: PUSH
17505: LD_VAR 0 3
17509: PUSH
17510: LD_INT 22
17512: PUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 255
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 91
17529: PUSH
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 6
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 30
17545: PUSH
17546: LD_VAR 0 4
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: PPUSH
17563: CALL_OW 69
17567: ADD
17568: ST_TO_ADDR
17569: GO 17497
17571: POP
17572: POP
// for i = 1 to tmp do
17573: LD_ADDR_VAR 0 4
17577: PUSH
17578: DOUBLE
17579: LD_INT 1
17581: DEC
17582: ST_TO_ADDR
17583: LD_VAR 0 3
17587: PUSH
17588: FOR_TO
17589: IFFALSE 17677
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17591: LD_ADDR_VAR 0 5
17595: PUSH
17596: LD_VAR 0 5
17600: PUSH
17601: LD_VAR 0 3
17605: PUSH
17606: LD_VAR 0 4
17610: ARRAY
17611: PPUSH
17612: CALL_OW 266
17616: PUSH
17617: LD_VAR 0 3
17621: PUSH
17622: LD_VAR 0 4
17626: ARRAY
17627: PPUSH
17628: CALL_OW 250
17632: PUSH
17633: LD_VAR 0 3
17637: PUSH
17638: LD_VAR 0 4
17642: ARRAY
17643: PPUSH
17644: CALL_OW 251
17648: PUSH
17649: LD_VAR 0 3
17653: PUSH
17654: LD_VAR 0 4
17658: ARRAY
17659: PPUSH
17660: CALL_OW 254
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: ADD
17674: ST_TO_ADDR
17675: GO 17588
17677: POP
17678: POP
// result := list ;
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_VAR 0 5
17688: ST_TO_ADDR
// end ;
17689: LD_VAR 0 2
17693: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17694: LD_INT 0
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
// if not factory then
17703: LD_VAR 0 1
17707: NOT
17708: IFFALSE 17712
// exit ;
17710: GO 18305
// if control = control_apeman then
17712: LD_VAR 0 4
17716: PUSH
17717: LD_INT 5
17719: EQUAL
17720: IFFALSE 17829
// begin tmp := UnitsInside ( factory ) ;
17722: LD_ADDR_VAR 0 8
17726: PUSH
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 313
17736: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17737: LD_VAR 0 8
17741: PPUSH
17742: LD_INT 25
17744: PUSH
17745: LD_INT 12
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PPUSH
17752: CALL_OW 72
17756: NOT
17757: IFFALSE 17767
// control := control_manual ;
17759: LD_ADDR_VAR 0 4
17763: PUSH
17764: LD_INT 1
17766: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17767: LD_ADDR_VAR 0 8
17771: PUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL 17464 0 1
17781: ST_TO_ADDR
// if tmp then
17782: LD_VAR 0 8
17786: IFFALSE 17829
// begin for i in tmp do
17788: LD_ADDR_VAR 0 7
17792: PUSH
17793: LD_VAR 0 8
17797: PUSH
17798: FOR_IN
17799: IFFALSE 17827
// if i [ 1 ] = b_ext_radio then
17801: LD_VAR 0 7
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PUSH
17810: LD_INT 22
17812: EQUAL
17813: IFFALSE 17825
// begin control := control_remote ;
17815: LD_ADDR_VAR 0 4
17819: PUSH
17820: LD_INT 2
17822: ST_TO_ADDR
// break ;
17823: GO 17827
// end ;
17825: GO 17798
17827: POP
17828: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17829: LD_VAR 0 1
17833: PPUSH
17834: LD_VAR 0 2
17838: PPUSH
17839: LD_VAR 0 3
17843: PPUSH
17844: LD_VAR 0 4
17848: PPUSH
17849: LD_VAR 0 5
17853: PPUSH
17854: CALL_OW 448
17858: IFFALSE 17893
// begin result := [ chassis , engine , control , weapon ] ;
17860: LD_ADDR_VAR 0 6
17864: PUSH
17865: LD_VAR 0 2
17869: PUSH
17870: LD_VAR 0 3
17874: PUSH
17875: LD_VAR 0 4
17879: PUSH
17880: LD_VAR 0 5
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: ST_TO_ADDR
// exit ;
17891: GO 18305
// end ; _chassis := AvailableChassisList ( factory ) ;
17893: LD_ADDR_VAR 0 9
17897: PUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 475
17907: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17908: LD_ADDR_VAR 0 11
17912: PUSH
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 476
17922: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17923: LD_ADDR_VAR 0 12
17927: PUSH
17928: LD_VAR 0 1
17932: PPUSH
17933: CALL_OW 477
17937: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17938: LD_ADDR_VAR 0 10
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 478
17952: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17953: LD_VAR 0 9
17957: NOT
17958: PUSH
17959: LD_VAR 0 11
17963: NOT
17964: OR
17965: PUSH
17966: LD_VAR 0 12
17970: NOT
17971: OR
17972: PUSH
17973: LD_VAR 0 10
17977: NOT
17978: OR
17979: IFFALSE 18014
// begin result := [ chassis , engine , control , weapon ] ;
17981: LD_ADDR_VAR 0 6
17985: PUSH
17986: LD_VAR 0 2
17990: PUSH
17991: LD_VAR 0 3
17995: PUSH
17996: LD_VAR 0 4
18000: PUSH
18001: LD_VAR 0 5
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: ST_TO_ADDR
// exit ;
18012: GO 18305
// end ; if not chassis in _chassis then
18014: LD_VAR 0 2
18018: PUSH
18019: LD_VAR 0 9
18023: IN
18024: NOT
18025: IFFALSE 18051
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18027: LD_ADDR_VAR 0 2
18031: PUSH
18032: LD_VAR 0 9
18036: PUSH
18037: LD_INT 1
18039: PPUSH
18040: LD_VAR 0 9
18044: PPUSH
18045: CALL_OW 12
18049: ARRAY
18050: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18051: LD_VAR 0 2
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: CALL 18310 0 2
18065: NOT
18066: IFFALSE 18125
// repeat engine := _engine [ 1 ] ;
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_VAR 0 11
18077: PUSH
18078: LD_INT 1
18080: ARRAY
18081: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18082: LD_ADDR_VAR 0 11
18086: PUSH
18087: LD_VAR 0 11
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 3
18099: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18100: LD_VAR 0 2
18104: PPUSH
18105: LD_VAR 0 3
18109: PPUSH
18110: CALL 18310 0 2
18114: PUSH
18115: LD_VAR 0 11
18119: PUSH
18120: EMPTY
18121: EQUAL
18122: OR
18123: IFFALSE 18068
// if not control in _control then
18125: LD_VAR 0 4
18129: PUSH
18130: LD_VAR 0 12
18134: IN
18135: NOT
18136: IFFALSE 18162
// control := _control [ rand ( 1 , _control ) ] ;
18138: LD_ADDR_VAR 0 4
18142: PUSH
18143: LD_VAR 0 12
18147: PUSH
18148: LD_INT 1
18150: PPUSH
18151: LD_VAR 0 12
18155: PPUSH
18156: CALL_OW 12
18160: ARRAY
18161: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 5
18171: PPUSH
18172: CALL 18530 0 2
18176: NOT
18177: IFFALSE 18236
// repeat weapon := _weapon [ 1 ] ;
18179: LD_ADDR_VAR 0 5
18183: PUSH
18184: LD_VAR 0 10
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18193: LD_ADDR_VAR 0 10
18197: PUSH
18198: LD_VAR 0 10
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 3
18210: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18211: LD_VAR 0 2
18215: PPUSH
18216: LD_VAR 0 5
18220: PPUSH
18221: CALL 18530 0 2
18225: PUSH
18226: LD_VAR 0 10
18230: PUSH
18231: EMPTY
18232: EQUAL
18233: OR
18234: IFFALSE 18179
// result := [ ] ;
18236: LD_ADDR_VAR 0 6
18240: PUSH
18241: EMPTY
18242: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18243: LD_VAR 0 1
18247: PPUSH
18248: LD_VAR 0 2
18252: PPUSH
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_VAR 0 4
18262: PPUSH
18263: LD_VAR 0 5
18267: PPUSH
18268: CALL_OW 448
18272: IFFALSE 18305
// result := [ chassis , engine , control , weapon ] ;
18274: LD_ADDR_VAR 0 6
18278: PUSH
18279: LD_VAR 0 2
18283: PUSH
18284: LD_VAR 0 3
18288: PUSH
18289: LD_VAR 0 4
18293: PUSH
18294: LD_VAR 0 5
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: ST_TO_ADDR
// end ;
18305: LD_VAR 0 6
18309: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18310: LD_INT 0
18312: PPUSH
// if not chassis or not engine then
18313: LD_VAR 0 1
18317: NOT
18318: PUSH
18319: LD_VAR 0 2
18323: NOT
18324: OR
18325: IFFALSE 18329
// exit ;
18327: GO 18525
// case engine of engine_solar :
18329: LD_VAR 0 2
18333: PUSH
18334: LD_INT 2
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18380
18342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18343: LD_ADDR_VAR 0 3
18347: PUSH
18348: LD_INT 11
18350: PUSH
18351: LD_INT 12
18353: PUSH
18354: LD_INT 13
18356: PUSH
18357: LD_INT 14
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: LD_INT 2
18365: PUSH
18366: LD_INT 3
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: ST_TO_ADDR
18378: GO 18509
18380: LD_INT 1
18382: DOUBLE
18383: EQUAL
18384: IFTRUE 18388
18386: GO 18450
18388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18389: LD_ADDR_VAR 0 3
18393: PUSH
18394: LD_INT 11
18396: PUSH
18397: LD_INT 12
18399: PUSH
18400: LD_INT 13
18402: PUSH
18403: LD_INT 14
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: LD_INT 3
18414: PUSH
18415: LD_INT 4
18417: PUSH
18418: LD_INT 5
18420: PUSH
18421: LD_INT 21
18423: PUSH
18424: LD_INT 23
18426: PUSH
18427: LD_INT 22
18429: PUSH
18430: LD_INT 24
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: ST_TO_ADDR
18448: GO 18509
18450: LD_INT 3
18452: DOUBLE
18453: EQUAL
18454: IFTRUE 18458
18456: GO 18508
18458: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18459: LD_ADDR_VAR 0 3
18463: PUSH
18464: LD_INT 13
18466: PUSH
18467: LD_INT 14
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: LD_INT 3
18475: PUSH
18476: LD_INT 4
18478: PUSH
18479: LD_INT 5
18481: PUSH
18482: LD_INT 21
18484: PUSH
18485: LD_INT 22
18487: PUSH
18488: LD_INT 23
18490: PUSH
18491: LD_INT 24
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: ST_TO_ADDR
18506: GO 18509
18508: POP
// result := ( chassis in result ) ;
18509: LD_ADDR_VAR 0 3
18513: PUSH
18514: LD_VAR 0 1
18518: PUSH
18519: LD_VAR 0 3
18523: IN
18524: ST_TO_ADDR
// end ;
18525: LD_VAR 0 3
18529: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18530: LD_INT 0
18532: PPUSH
// if not chassis or not weapon then
18533: LD_VAR 0 1
18537: NOT
18538: PUSH
18539: LD_VAR 0 2
18543: NOT
18544: OR
18545: IFFALSE 18549
// exit ;
18547: GO 19611
// case weapon of us_machine_gun :
18549: LD_VAR 0 2
18553: PUSH
18554: LD_INT 2
18556: DOUBLE
18557: EQUAL
18558: IFTRUE 18562
18560: GO 18592
18562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18563: LD_ADDR_VAR 0 3
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 3
18576: PUSH
18577: LD_INT 4
18579: PUSH
18580: LD_INT 5
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: ST_TO_ADDR
18590: GO 19595
18592: LD_INT 3
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18630
18600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: LD_INT 4
18617: PUSH
18618: LD_INT 5
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: ST_TO_ADDR
18628: GO 19595
18630: LD_INT 11
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18668
18638: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18639: LD_ADDR_VAR 0 3
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 5
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: ST_TO_ADDR
18666: GO 19595
18668: LD_INT 4
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18702
18676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18677: LD_ADDR_VAR 0 3
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 3
18687: PUSH
18688: LD_INT 4
18690: PUSH
18691: LD_INT 5
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: ST_TO_ADDR
18700: GO 19595
18702: LD_INT 5
18704: DOUBLE
18705: EQUAL
18706: IFTRUE 18710
18708: GO 18736
18710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18711: LD_ADDR_VAR 0 3
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: LD_INT 4
18724: PUSH
18725: LD_INT 5
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: ST_TO_ADDR
18734: GO 19595
18736: LD_INT 9
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18770
18744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18745: LD_ADDR_VAR 0 3
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: LD_INT 3
18755: PUSH
18756: LD_INT 4
18758: PUSH
18759: LD_INT 5
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: ST_TO_ADDR
18768: GO 19595
18770: LD_INT 7
18772: DOUBLE
18773: EQUAL
18774: IFTRUE 18778
18776: GO 18804
18778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18779: LD_ADDR_VAR 0 3
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: LD_INT 3
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: LD_INT 5
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: ST_TO_ADDR
18802: GO 19595
18804: LD_INT 12
18806: DOUBLE
18807: EQUAL
18808: IFTRUE 18812
18810: GO 18838
18812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18813: LD_ADDR_VAR 0 3
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 3
18823: PUSH
18824: LD_INT 4
18826: PUSH
18827: LD_INT 5
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: ST_TO_ADDR
18836: GO 19595
18838: LD_INT 13
18840: DOUBLE
18841: EQUAL
18842: IFTRUE 18846
18844: GO 18872
18846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: LD_INT 4
18860: PUSH
18861: LD_INT 5
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
18870: GO 19595
18872: LD_INT 14
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 18898
18880: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18881: LD_ADDR_VAR 0 3
18885: PUSH
18886: LD_INT 4
18888: PUSH
18889: LD_INT 5
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: ST_TO_ADDR
18896: GO 19595
18898: LD_INT 6
18900: DOUBLE
18901: EQUAL
18902: IFTRUE 18906
18904: GO 18924
18906: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_INT 4
18914: PUSH
18915: LD_INT 5
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: ST_TO_ADDR
18922: GO 19595
18924: LD_INT 10
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18950
18932: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18933: LD_ADDR_VAR 0 3
18937: PUSH
18938: LD_INT 4
18940: PUSH
18941: LD_INT 5
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: ST_TO_ADDR
18948: GO 19595
18950: LD_INT 22
18952: DOUBLE
18953: EQUAL
18954: IFTRUE 18958
18956: GO 18984
18958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_INT 11
18966: PUSH
18967: LD_INT 12
18969: PUSH
18970: LD_INT 13
18972: PUSH
18973: LD_INT 14
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: ST_TO_ADDR
18982: GO 19595
18984: LD_INT 23
18986: DOUBLE
18987: EQUAL
18988: IFTRUE 18992
18990: GO 19018
18992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18993: LD_ADDR_VAR 0 3
18997: PUSH
18998: LD_INT 11
19000: PUSH
19001: LD_INT 12
19003: PUSH
19004: LD_INT 13
19006: PUSH
19007: LD_INT 14
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: ST_TO_ADDR
19016: GO 19595
19018: LD_INT 24
19020: DOUBLE
19021: EQUAL
19022: IFTRUE 19026
19024: GO 19052
19026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19027: LD_ADDR_VAR 0 3
19031: PUSH
19032: LD_INT 11
19034: PUSH
19035: LD_INT 12
19037: PUSH
19038: LD_INT 13
19040: PUSH
19041: LD_INT 14
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: ST_TO_ADDR
19050: GO 19595
19052: LD_INT 30
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19086
19060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19061: LD_ADDR_VAR 0 3
19065: PUSH
19066: LD_INT 11
19068: PUSH
19069: LD_INT 12
19071: PUSH
19072: LD_INT 13
19074: PUSH
19075: LD_INT 14
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: ST_TO_ADDR
19084: GO 19595
19086: LD_INT 25
19088: DOUBLE
19089: EQUAL
19090: IFTRUE 19094
19092: GO 19112
19094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19095: LD_ADDR_VAR 0 3
19099: PUSH
19100: LD_INT 13
19102: PUSH
19103: LD_INT 14
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: ST_TO_ADDR
19110: GO 19595
19112: LD_INT 27
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19138
19120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19121: LD_ADDR_VAR 0 3
19125: PUSH
19126: LD_INT 13
19128: PUSH
19129: LD_INT 14
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: ST_TO_ADDR
19136: GO 19595
19138: LD_EXP 107
19142: DOUBLE
19143: EQUAL
19144: IFTRUE 19148
19146: GO 19174
19148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19149: LD_ADDR_VAR 0 3
19153: PUSH
19154: LD_INT 11
19156: PUSH
19157: LD_INT 12
19159: PUSH
19160: LD_INT 13
19162: PUSH
19163: LD_INT 14
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: ST_TO_ADDR
19172: GO 19595
19174: LD_INT 28
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19200
19182: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19183: LD_ADDR_VAR 0 3
19187: PUSH
19188: LD_INT 13
19190: PUSH
19191: LD_INT 14
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: ST_TO_ADDR
19198: GO 19595
19200: LD_INT 29
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19226
19208: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19209: LD_ADDR_VAR 0 3
19213: PUSH
19214: LD_INT 13
19216: PUSH
19217: LD_INT 14
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: ST_TO_ADDR
19224: GO 19595
19226: LD_INT 31
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19252
19234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19235: LD_ADDR_VAR 0 3
19239: PUSH
19240: LD_INT 13
19242: PUSH
19243: LD_INT 14
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 19595
19252: LD_INT 26
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19278
19260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 13
19268: PUSH
19269: LD_INT 14
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: ST_TO_ADDR
19276: GO 19595
19278: LD_INT 42
19280: DOUBLE
19281: EQUAL
19282: IFTRUE 19286
19284: GO 19312
19286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_INT 23
19300: PUSH
19301: LD_INT 24
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: ST_TO_ADDR
19310: GO 19595
19312: LD_INT 43
19314: DOUBLE
19315: EQUAL
19316: IFTRUE 19320
19318: GO 19346
19320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_INT 21
19328: PUSH
19329: LD_INT 22
19331: PUSH
19332: LD_INT 23
19334: PUSH
19335: LD_INT 24
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: ST_TO_ADDR
19344: GO 19595
19346: LD_INT 44
19348: DOUBLE
19349: EQUAL
19350: IFTRUE 19354
19352: GO 19380
19354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19355: LD_ADDR_VAR 0 3
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 22
19365: PUSH
19366: LD_INT 23
19368: PUSH
19369: LD_INT 24
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: ST_TO_ADDR
19378: GO 19595
19380: LD_INT 45
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19414
19388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 21
19396: PUSH
19397: LD_INT 22
19399: PUSH
19400: LD_INT 23
19402: PUSH
19403: LD_INT 24
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: ST_TO_ADDR
19412: GO 19595
19414: LD_INT 49
19416: DOUBLE
19417: EQUAL
19418: IFTRUE 19422
19420: GO 19448
19422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19423: LD_ADDR_VAR 0 3
19427: PUSH
19428: LD_INT 21
19430: PUSH
19431: LD_INT 22
19433: PUSH
19434: LD_INT 23
19436: PUSH
19437: LD_INT 24
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: ST_TO_ADDR
19446: GO 19595
19448: LD_INT 51
19450: DOUBLE
19451: EQUAL
19452: IFTRUE 19456
19454: GO 19482
19456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19457: LD_ADDR_VAR 0 3
19461: PUSH
19462: LD_INT 21
19464: PUSH
19465: LD_INT 22
19467: PUSH
19468: LD_INT 23
19470: PUSH
19471: LD_INT 24
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: ST_TO_ADDR
19480: GO 19595
19482: LD_INT 52
19484: DOUBLE
19485: EQUAL
19486: IFTRUE 19490
19488: GO 19516
19490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_INT 21
19498: PUSH
19499: LD_INT 22
19501: PUSH
19502: LD_INT 23
19504: PUSH
19505: LD_INT 24
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: ST_TO_ADDR
19514: GO 19595
19516: LD_INT 53
19518: DOUBLE
19519: EQUAL
19520: IFTRUE 19524
19522: GO 19542
19524: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: LD_INT 23
19532: PUSH
19533: LD_INT 24
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: ST_TO_ADDR
19540: GO 19595
19542: LD_INT 46
19544: DOUBLE
19545: EQUAL
19546: IFTRUE 19550
19548: GO 19568
19550: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: LD_INT 23
19558: PUSH
19559: LD_INT 24
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: ST_TO_ADDR
19566: GO 19595
19568: LD_INT 47
19570: DOUBLE
19571: EQUAL
19572: IFTRUE 19576
19574: GO 19594
19576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19577: LD_ADDR_VAR 0 3
19581: PUSH
19582: LD_INT 23
19584: PUSH
19585: LD_INT 24
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: ST_TO_ADDR
19592: GO 19595
19594: POP
// result := ( chassis in result ) ;
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_VAR 0 1
19604: PUSH
19605: LD_VAR 0 3
19609: IN
19610: ST_TO_ADDR
// end ;
19611: LD_VAR 0 3
19615: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19616: LD_INT 0
19618: PPUSH
19619: PPUSH
19620: PPUSH
19621: PPUSH
19622: PPUSH
19623: PPUSH
19624: PPUSH
// result := array ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_VAR 0 1
19634: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19635: LD_VAR 0 1
19639: NOT
19640: PUSH
19641: LD_VAR 0 2
19645: NOT
19646: OR
19647: PUSH
19648: LD_VAR 0 3
19652: NOT
19653: OR
19654: PUSH
19655: LD_VAR 0 2
19659: PUSH
19660: LD_VAR 0 1
19664: GREATER
19665: OR
19666: PUSH
19667: LD_VAR 0 3
19671: PUSH
19672: LD_VAR 0 1
19676: GREATER
19677: OR
19678: IFFALSE 19682
// exit ;
19680: GO 19978
// if direction then
19682: LD_VAR 0 4
19686: IFFALSE 19750
// begin d := 1 ;
19688: LD_ADDR_VAR 0 9
19692: PUSH
19693: LD_INT 1
19695: ST_TO_ADDR
// if i_from > i_to then
19696: LD_VAR 0 2
19700: PUSH
19701: LD_VAR 0 3
19705: GREATER
19706: IFFALSE 19732
// length := ( array - i_from ) + i_to else
19708: LD_ADDR_VAR 0 11
19712: PUSH
19713: LD_VAR 0 1
19717: PUSH
19718: LD_VAR 0 2
19722: MINUS
19723: PUSH
19724: LD_VAR 0 3
19728: PLUS
19729: ST_TO_ADDR
19730: GO 19748
// length := i_to - i_from ;
19732: LD_ADDR_VAR 0 11
19736: PUSH
19737: LD_VAR 0 3
19741: PUSH
19742: LD_VAR 0 2
19746: MINUS
19747: ST_TO_ADDR
// end else
19748: GO 19811
// begin d := - 1 ;
19750: LD_ADDR_VAR 0 9
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: ST_TO_ADDR
// if i_from > i_to then
19759: LD_VAR 0 2
19763: PUSH
19764: LD_VAR 0 3
19768: GREATER
19769: IFFALSE 19789
// length := i_from - i_to else
19771: LD_ADDR_VAR 0 11
19775: PUSH
19776: LD_VAR 0 2
19780: PUSH
19781: LD_VAR 0 3
19785: MINUS
19786: ST_TO_ADDR
19787: GO 19811
// length := ( array - i_to ) + i_from ;
19789: LD_ADDR_VAR 0 11
19793: PUSH
19794: LD_VAR 0 1
19798: PUSH
19799: LD_VAR 0 3
19803: MINUS
19804: PUSH
19805: LD_VAR 0 2
19809: PLUS
19810: ST_TO_ADDR
// end ; if not length then
19811: LD_VAR 0 11
19815: NOT
19816: IFFALSE 19820
// exit ;
19818: GO 19978
// tmp := array ;
19820: LD_ADDR_VAR 0 10
19824: PUSH
19825: LD_VAR 0 1
19829: ST_TO_ADDR
// for i = 1 to length do
19830: LD_ADDR_VAR 0 6
19834: PUSH
19835: DOUBLE
19836: LD_INT 1
19838: DEC
19839: ST_TO_ADDR
19840: LD_VAR 0 11
19844: PUSH
19845: FOR_TO
19846: IFFALSE 19966
// begin for j = 1 to array do
19848: LD_ADDR_VAR 0 7
19852: PUSH
19853: DOUBLE
19854: LD_INT 1
19856: DEC
19857: ST_TO_ADDR
19858: LD_VAR 0 1
19862: PUSH
19863: FOR_TO
19864: IFFALSE 19952
// begin k := j + d ;
19866: LD_ADDR_VAR 0 8
19870: PUSH
19871: LD_VAR 0 7
19875: PUSH
19876: LD_VAR 0 9
19880: PLUS
19881: ST_TO_ADDR
// if k > array then
19882: LD_VAR 0 8
19886: PUSH
19887: LD_VAR 0 1
19891: GREATER
19892: IFFALSE 19902
// k := 1 ;
19894: LD_ADDR_VAR 0 8
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if not k then
19902: LD_VAR 0 8
19906: NOT
19907: IFFALSE 19919
// k := array ;
19909: LD_ADDR_VAR 0 8
19913: PUSH
19914: LD_VAR 0 1
19918: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19919: LD_ADDR_VAR 0 10
19923: PUSH
19924: LD_VAR 0 10
19928: PPUSH
19929: LD_VAR 0 8
19933: PPUSH
19934: LD_VAR 0 1
19938: PUSH
19939: LD_VAR 0 7
19943: ARRAY
19944: PPUSH
19945: CALL_OW 1
19949: ST_TO_ADDR
// end ;
19950: GO 19863
19952: POP
19953: POP
// array := tmp ;
19954: LD_ADDR_VAR 0 1
19958: PUSH
19959: LD_VAR 0 10
19963: ST_TO_ADDR
// end ;
19964: GO 19845
19966: POP
19967: POP
// result := array ;
19968: LD_ADDR_VAR 0 5
19972: PUSH
19973: LD_VAR 0 1
19977: ST_TO_ADDR
// end ;
19978: LD_VAR 0 5
19982: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19983: LD_INT 0
19985: PPUSH
19986: PPUSH
// result := 0 ;
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// if not array or not value in array then
19995: LD_VAR 0 1
19999: NOT
20000: PUSH
20001: LD_VAR 0 2
20005: PUSH
20006: LD_VAR 0 1
20010: IN
20011: NOT
20012: OR
20013: IFFALSE 20017
// exit ;
20015: GO 20071
// for i = 1 to array do
20017: LD_ADDR_VAR 0 4
20021: PUSH
20022: DOUBLE
20023: LD_INT 1
20025: DEC
20026: ST_TO_ADDR
20027: LD_VAR 0 1
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20069
// if value = array [ i ] then
20035: LD_VAR 0 2
20039: PUSH
20040: LD_VAR 0 1
20044: PUSH
20045: LD_VAR 0 4
20049: ARRAY
20050: EQUAL
20051: IFFALSE 20067
// begin result := i ;
20053: LD_ADDR_VAR 0 3
20057: PUSH
20058: LD_VAR 0 4
20062: ST_TO_ADDR
// exit ;
20063: POP
20064: POP
20065: GO 20071
// end ;
20067: GO 20032
20069: POP
20070: POP
// end ;
20071: LD_VAR 0 3
20075: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20076: LD_INT 0
20078: PPUSH
// vc_chassis := chassis ;
20079: LD_ADDR_OWVAR 37
20083: PUSH
20084: LD_VAR 0 1
20088: ST_TO_ADDR
// vc_engine := engine ;
20089: LD_ADDR_OWVAR 39
20093: PUSH
20094: LD_VAR 0 2
20098: ST_TO_ADDR
// vc_control := control ;
20099: LD_ADDR_OWVAR 38
20103: PUSH
20104: LD_VAR 0 3
20108: ST_TO_ADDR
// vc_weapon := weapon ;
20109: LD_ADDR_OWVAR 40
20113: PUSH
20114: LD_VAR 0 4
20118: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20119: LD_ADDR_OWVAR 41
20123: PUSH
20124: LD_VAR 0 5
20128: ST_TO_ADDR
// end ;
20129: LD_VAR 0 6
20133: RET
// export function WantPlant ( unit ) ; var task ; begin
20134: LD_INT 0
20136: PPUSH
20137: PPUSH
// result := false ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: LD_INT 0
20145: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20146: LD_ADDR_VAR 0 3
20150: PUSH
20151: LD_VAR 0 1
20155: PPUSH
20156: CALL_OW 437
20160: ST_TO_ADDR
// if task then
20161: LD_VAR 0 3
20165: IFFALSE 20193
// if task [ 1 ] [ 1 ] = p then
20167: LD_VAR 0 3
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: PUSH
20176: LD_INT 1
20178: ARRAY
20179: PUSH
20180: LD_STRING p
20182: EQUAL
20183: IFFALSE 20193
// result := true ;
20185: LD_ADDR_VAR 0 2
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// end ;
20193: LD_VAR 0 2
20197: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20198: LD_INT 0
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
// if pos < 1 then
20204: LD_VAR 0 2
20208: PUSH
20209: LD_INT 1
20211: LESS
20212: IFFALSE 20216
// exit ;
20214: GO 20519
// if pos = 1 then
20216: LD_VAR 0 2
20220: PUSH
20221: LD_INT 1
20223: EQUAL
20224: IFFALSE 20257
// result := Replace ( arr , pos [ 1 ] , value ) else
20226: LD_ADDR_VAR 0 4
20230: PUSH
20231: LD_VAR 0 1
20235: PPUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: LD_VAR 0 3
20249: PPUSH
20250: CALL_OW 1
20254: ST_TO_ADDR
20255: GO 20519
// begin tmp := arr ;
20257: LD_ADDR_VAR 0 6
20261: PUSH
20262: LD_VAR 0 1
20266: ST_TO_ADDR
// s_arr := [ tmp ] ;
20267: LD_ADDR_VAR 0 7
20271: PUSH
20272: LD_VAR 0 6
20276: PUSH
20277: EMPTY
20278: LIST
20279: ST_TO_ADDR
// for i = 1 to pos - 1 do
20280: LD_ADDR_VAR 0 5
20284: PUSH
20285: DOUBLE
20286: LD_INT 1
20288: DEC
20289: ST_TO_ADDR
20290: LD_VAR 0 2
20294: PUSH
20295: LD_INT 1
20297: MINUS
20298: PUSH
20299: FOR_TO
20300: IFFALSE 20345
// begin tmp := tmp [ pos [ i ] ] ;
20302: LD_ADDR_VAR 0 6
20306: PUSH
20307: LD_VAR 0 6
20311: PUSH
20312: LD_VAR 0 2
20316: PUSH
20317: LD_VAR 0 5
20321: ARRAY
20322: ARRAY
20323: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20324: LD_ADDR_VAR 0 7
20328: PUSH
20329: LD_VAR 0 7
20333: PUSH
20334: LD_VAR 0 6
20338: PUSH
20339: EMPTY
20340: LIST
20341: ADD
20342: ST_TO_ADDR
// end ;
20343: GO 20299
20345: POP
20346: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20347: LD_ADDR_VAR 0 6
20351: PUSH
20352: LD_VAR 0 6
20356: PPUSH
20357: LD_VAR 0 2
20361: PUSH
20362: LD_VAR 0 2
20366: ARRAY
20367: PPUSH
20368: LD_VAR 0 3
20372: PPUSH
20373: CALL_OW 1
20377: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20378: LD_ADDR_VAR 0 7
20382: PUSH
20383: LD_VAR 0 7
20387: PPUSH
20388: LD_VAR 0 7
20392: PPUSH
20393: LD_VAR 0 6
20397: PPUSH
20398: CALL_OW 1
20402: ST_TO_ADDR
// for i = s_arr downto 2 do
20403: LD_ADDR_VAR 0 5
20407: PUSH
20408: DOUBLE
20409: LD_VAR 0 7
20413: INC
20414: ST_TO_ADDR
20415: LD_INT 2
20417: PUSH
20418: FOR_DOWNTO
20419: IFFALSE 20503
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20421: LD_ADDR_VAR 0 6
20425: PUSH
20426: LD_VAR 0 7
20430: PUSH
20431: LD_VAR 0 5
20435: PUSH
20436: LD_INT 1
20438: MINUS
20439: ARRAY
20440: PPUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_VAR 0 5
20450: PUSH
20451: LD_INT 1
20453: MINUS
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 7
20460: PUSH
20461: LD_VAR 0 5
20465: ARRAY
20466: PPUSH
20467: CALL_OW 1
20471: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20472: LD_ADDR_VAR 0 7
20476: PUSH
20477: LD_VAR 0 7
20481: PPUSH
20482: LD_VAR 0 5
20486: PUSH
20487: LD_INT 1
20489: MINUS
20490: PPUSH
20491: LD_VAR 0 6
20495: PPUSH
20496: CALL_OW 1
20500: ST_TO_ADDR
// end ;
20501: GO 20418
20503: POP
20504: POP
// result := s_arr [ 1 ] ;
20505: LD_ADDR_VAR 0 4
20509: PUSH
20510: LD_VAR 0 7
20514: PUSH
20515: LD_INT 1
20517: ARRAY
20518: ST_TO_ADDR
// end ; end ;
20519: LD_VAR 0 4
20523: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
// if not list then
20528: LD_VAR 0 1
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 20628
// i := list [ pos1 ] ;
20537: LD_ADDR_VAR 0 5
20541: PUSH
20542: LD_VAR 0 1
20546: PUSH
20547: LD_VAR 0 2
20551: ARRAY
20552: ST_TO_ADDR
// if not i then
20553: LD_VAR 0 5
20557: NOT
20558: IFFALSE 20562
// exit ;
20560: GO 20628
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20562: LD_ADDR_VAR 0 1
20566: PUSH
20567: LD_VAR 0 1
20571: PPUSH
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_VAR 0 1
20581: PUSH
20582: LD_VAR 0 3
20586: ARRAY
20587: PPUSH
20588: CALL_OW 1
20592: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20593: LD_ADDR_VAR 0 1
20597: PUSH
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_VAR 0 3
20607: PPUSH
20608: LD_VAR 0 5
20612: PPUSH
20613: CALL_OW 1
20617: ST_TO_ADDR
// result := list ;
20618: LD_ADDR_VAR 0 4
20622: PUSH
20623: LD_VAR 0 1
20627: ST_TO_ADDR
// end ;
20628: LD_VAR 0 4
20632: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20633: LD_INT 0
20635: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20636: LD_ADDR_VAR 0 5
20640: PUSH
20641: LD_VAR 0 1
20645: PPUSH
20646: CALL_OW 250
20650: PPUSH
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 251
20660: PPUSH
20661: LD_VAR 0 2
20665: PPUSH
20666: LD_VAR 0 3
20670: PPUSH
20671: LD_VAR 0 4
20675: PPUSH
20676: CALL 20686 0 5
20680: ST_TO_ADDR
// end ;
20681: LD_VAR 0 5
20685: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20686: LD_INT 0
20688: PPUSH
20689: PPUSH
20690: PPUSH
20691: PPUSH
// if not list then
20692: LD_VAR 0 3
20696: NOT
20697: IFFALSE 20701
// exit ;
20699: GO 21089
// result := [ ] ;
20701: LD_ADDR_VAR 0 6
20705: PUSH
20706: EMPTY
20707: ST_TO_ADDR
// for i in list do
20708: LD_ADDR_VAR 0 7
20712: PUSH
20713: LD_VAR 0 3
20717: PUSH
20718: FOR_IN
20719: IFFALSE 20921
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20721: LD_ADDR_VAR 0 9
20725: PUSH
20726: LD_VAR 0 7
20730: PPUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: LD_VAR 0 2
20740: PPUSH
20741: CALL_OW 297
20745: ST_TO_ADDR
// if not result then
20746: LD_VAR 0 6
20750: NOT
20751: IFFALSE 20777
// result := [ [ i , tmp ] ] else
20753: LD_ADDR_VAR 0 6
20757: PUSH
20758: LD_VAR 0 7
20762: PUSH
20763: LD_VAR 0 9
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: EMPTY
20773: LIST
20774: ST_TO_ADDR
20775: GO 20919
// begin if result [ result ] [ 2 ] < tmp then
20777: LD_VAR 0 6
20781: PUSH
20782: LD_VAR 0 6
20786: ARRAY
20787: PUSH
20788: LD_INT 2
20790: ARRAY
20791: PUSH
20792: LD_VAR 0 9
20796: LESS
20797: IFFALSE 20839
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20799: LD_ADDR_VAR 0 6
20803: PUSH
20804: LD_VAR 0 6
20808: PPUSH
20809: LD_VAR 0 6
20813: PUSH
20814: LD_INT 1
20816: PLUS
20817: PPUSH
20818: LD_VAR 0 7
20822: PUSH
20823: LD_VAR 0 9
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 2
20836: ST_TO_ADDR
20837: GO 20919
// for j = 1 to result do
20839: LD_ADDR_VAR 0 8
20843: PUSH
20844: DOUBLE
20845: LD_INT 1
20847: DEC
20848: ST_TO_ADDR
20849: LD_VAR 0 6
20853: PUSH
20854: FOR_TO
20855: IFFALSE 20917
// begin if tmp < result [ j ] [ 2 ] then
20857: LD_VAR 0 9
20861: PUSH
20862: LD_VAR 0 6
20866: PUSH
20867: LD_VAR 0 8
20871: ARRAY
20872: PUSH
20873: LD_INT 2
20875: ARRAY
20876: LESS
20877: IFFALSE 20915
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20879: LD_ADDR_VAR 0 6
20883: PUSH
20884: LD_VAR 0 6
20888: PPUSH
20889: LD_VAR 0 8
20893: PPUSH
20894: LD_VAR 0 7
20898: PUSH
20899: LD_VAR 0 9
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PPUSH
20908: CALL_OW 2
20912: ST_TO_ADDR
// break ;
20913: GO 20917
// end ; end ;
20915: GO 20854
20917: POP
20918: POP
// end ; end ;
20919: GO 20718
20921: POP
20922: POP
// if result and not asc then
20923: LD_VAR 0 6
20927: PUSH
20928: LD_VAR 0 4
20932: NOT
20933: AND
20934: IFFALSE 21009
// begin tmp := result ;
20936: LD_ADDR_VAR 0 9
20940: PUSH
20941: LD_VAR 0 6
20945: ST_TO_ADDR
// for i = tmp downto 1 do
20946: LD_ADDR_VAR 0 7
20950: PUSH
20951: DOUBLE
20952: LD_VAR 0 9
20956: INC
20957: ST_TO_ADDR
20958: LD_INT 1
20960: PUSH
20961: FOR_DOWNTO
20962: IFFALSE 21007
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20964: LD_ADDR_VAR 0 6
20968: PUSH
20969: LD_VAR 0 6
20973: PPUSH
20974: LD_VAR 0 9
20978: PUSH
20979: LD_VAR 0 7
20983: MINUS
20984: PUSH
20985: LD_INT 1
20987: PLUS
20988: PPUSH
20989: LD_VAR 0 9
20993: PUSH
20994: LD_VAR 0 7
20998: ARRAY
20999: PPUSH
21000: CALL_OW 1
21004: ST_TO_ADDR
21005: GO 20961
21007: POP
21008: POP
// end ; tmp := [ ] ;
21009: LD_ADDR_VAR 0 9
21013: PUSH
21014: EMPTY
21015: ST_TO_ADDR
// if mode then
21016: LD_VAR 0 5
21020: IFFALSE 21089
// begin for i = 1 to result do
21022: LD_ADDR_VAR 0 7
21026: PUSH
21027: DOUBLE
21028: LD_INT 1
21030: DEC
21031: ST_TO_ADDR
21032: LD_VAR 0 6
21036: PUSH
21037: FOR_TO
21038: IFFALSE 21077
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21040: LD_ADDR_VAR 0 9
21044: PUSH
21045: LD_VAR 0 9
21049: PPUSH
21050: LD_VAR 0 7
21054: PPUSH
21055: LD_VAR 0 6
21059: PUSH
21060: LD_VAR 0 7
21064: ARRAY
21065: PUSH
21066: LD_INT 1
21068: ARRAY
21069: PPUSH
21070: CALL_OW 1
21074: ST_TO_ADDR
21075: GO 21037
21077: POP
21078: POP
// result := tmp ;
21079: LD_ADDR_VAR 0 6
21083: PUSH
21084: LD_VAR 0 9
21088: ST_TO_ADDR
// end ; end ;
21089: LD_VAR 0 6
21093: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21094: LD_INT 0
21096: PPUSH
21097: PPUSH
21098: PPUSH
21099: PPUSH
21100: PPUSH
21101: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: EMPTY
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: ST_TO_ADDR
// if not x or not y then
21124: LD_VAR 0 2
21128: NOT
21129: PUSH
21130: LD_VAR 0 3
21134: NOT
21135: OR
21136: IFFALSE 21140
// exit ;
21138: GO 22792
// if not range then
21140: LD_VAR 0 4
21144: NOT
21145: IFFALSE 21155
// range := 10 ;
21147: LD_ADDR_VAR 0 4
21151: PUSH
21152: LD_INT 10
21154: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21155: LD_ADDR_VAR 0 8
21159: PUSH
21160: LD_INT 81
21162: PUSH
21163: LD_VAR 0 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 92
21174: PUSH
21175: LD_VAR 0 2
21179: PUSH
21180: LD_VAR 0 3
21184: PUSH
21185: LD_VAR 0 4
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 3
21198: PUSH
21199: LD_INT 21
21201: PUSH
21202: LD_INT 3
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: PPUSH
21218: CALL_OW 69
21222: ST_TO_ADDR
// if not tmp then
21223: LD_VAR 0 8
21227: NOT
21228: IFFALSE 21232
// exit ;
21230: GO 22792
// for i in tmp do
21232: LD_ADDR_VAR 0 6
21236: PUSH
21237: LD_VAR 0 8
21241: PUSH
21242: FOR_IN
21243: IFFALSE 22767
// begin points := [ 0 , 0 , 0 ] ;
21245: LD_ADDR_VAR 0 9
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: ST_TO_ADDR
// bpoints := 1 ;
21264: LD_ADDR_VAR 0 10
21268: PUSH
21269: LD_INT 1
21271: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21272: LD_VAR 0 6
21276: PPUSH
21277: CALL_OW 247
21281: PUSH
21282: LD_INT 1
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21868
21290: POP
// begin if GetClass ( i ) = 1 then
21291: LD_VAR 0 6
21295: PPUSH
21296: CALL_OW 257
21300: PUSH
21301: LD_INT 1
21303: EQUAL
21304: IFFALSE 21325
// points := [ 10 , 5 , 3 ] ;
21306: LD_ADDR_VAR 0 9
21310: PUSH
21311: LD_INT 10
21313: PUSH
21314: LD_INT 5
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21325: LD_VAR 0 6
21329: PPUSH
21330: CALL_OW 257
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 3
21340: PUSH
21341: LD_INT 4
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: IN
21349: IFFALSE 21370
// points := [ 3 , 2 , 1 ] ;
21351: LD_ADDR_VAR 0 9
21355: PUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21370: LD_VAR 0 6
21374: PPUSH
21375: CALL_OW 257
21379: PUSH
21380: LD_INT 5
21382: EQUAL
21383: IFFALSE 21404
// points := [ 130 , 5 , 2 ] ;
21385: LD_ADDR_VAR 0 9
21389: PUSH
21390: LD_INT 130
21392: PUSH
21393: LD_INT 5
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21404: LD_VAR 0 6
21408: PPUSH
21409: CALL_OW 257
21413: PUSH
21414: LD_INT 8
21416: EQUAL
21417: IFFALSE 21438
// points := [ 35 , 35 , 30 ] ;
21419: LD_ADDR_VAR 0 9
21423: PUSH
21424: LD_INT 35
21426: PUSH
21427: LD_INT 35
21429: PUSH
21430: LD_INT 30
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21438: LD_VAR 0 6
21442: PPUSH
21443: CALL_OW 257
21447: PUSH
21448: LD_INT 9
21450: EQUAL
21451: IFFALSE 21472
// points := [ 20 , 55 , 40 ] ;
21453: LD_ADDR_VAR 0 9
21457: PUSH
21458: LD_INT 20
21460: PUSH
21461: LD_INT 55
21463: PUSH
21464: LD_INT 40
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 257
21481: PUSH
21482: LD_INT 12
21484: PUSH
21485: LD_INT 16
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: IN
21492: IFFALSE 21513
// points := [ 5 , 3 , 2 ] ;
21494: LD_ADDR_VAR 0 9
21498: PUSH
21499: LD_INT 5
21501: PUSH
21502: LD_INT 3
21504: PUSH
21505: LD_INT 2
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21513: LD_VAR 0 6
21517: PPUSH
21518: CALL_OW 257
21522: PUSH
21523: LD_INT 17
21525: EQUAL
21526: IFFALSE 21547
// points := [ 100 , 50 , 75 ] ;
21528: LD_ADDR_VAR 0 9
21532: PUSH
21533: LD_INT 100
21535: PUSH
21536: LD_INT 50
21538: PUSH
21539: LD_INT 75
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21547: LD_VAR 0 6
21551: PPUSH
21552: CALL_OW 257
21556: PUSH
21557: LD_INT 15
21559: EQUAL
21560: IFFALSE 21581
// points := [ 10 , 5 , 3 ] ;
21562: LD_ADDR_VAR 0 9
21566: PUSH
21567: LD_INT 10
21569: PUSH
21570: LD_INT 5
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21581: LD_VAR 0 6
21585: PPUSH
21586: CALL_OW 257
21590: PUSH
21591: LD_INT 14
21593: EQUAL
21594: IFFALSE 21615
// points := [ 10 , 0 , 0 ] ;
21596: LD_ADDR_VAR 0 9
21600: PUSH
21601: LD_INT 10
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21615: LD_VAR 0 6
21619: PPUSH
21620: CALL_OW 257
21624: PUSH
21625: LD_INT 11
21627: EQUAL
21628: IFFALSE 21649
// points := [ 30 , 10 , 5 ] ;
21630: LD_ADDR_VAR 0 9
21634: PUSH
21635: LD_INT 30
21637: PUSH
21638: LD_INT 10
21640: PUSH
21641: LD_INT 5
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_INT 5
21656: PPUSH
21657: CALL_OW 321
21661: PUSH
21662: LD_INT 2
21664: EQUAL
21665: IFFALSE 21682
// bpoints := bpoints * 1.8 ;
21667: LD_ADDR_VAR 0 10
21671: PUSH
21672: LD_VAR 0 10
21676: PUSH
21677: LD_REAL  1.80000000000000E+0000
21680: MUL
21681: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21682: LD_VAR 0 6
21686: PPUSH
21687: CALL_OW 257
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: IN
21710: PUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_INT 51
21718: PPUSH
21719: CALL_OW 321
21723: PUSH
21724: LD_INT 2
21726: EQUAL
21727: AND
21728: IFFALSE 21745
// bpoints := bpoints * 1.2 ;
21730: LD_ADDR_VAR 0 10
21734: PUSH
21735: LD_VAR 0 10
21739: PUSH
21740: LD_REAL  1.20000000000000E+0000
21743: MUL
21744: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21745: LD_VAR 0 6
21749: PPUSH
21750: CALL_OW 257
21754: PUSH
21755: LD_INT 5
21757: PUSH
21758: LD_INT 7
21760: PUSH
21761: LD_INT 9
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: IN
21769: PUSH
21770: LD_VAR 0 1
21774: PPUSH
21775: LD_INT 52
21777: PPUSH
21778: CALL_OW 321
21782: PUSH
21783: LD_INT 2
21785: EQUAL
21786: AND
21787: IFFALSE 21804
// bpoints := bpoints * 1.5 ;
21789: LD_ADDR_VAR 0 10
21793: PUSH
21794: LD_VAR 0 10
21798: PUSH
21799: LD_REAL  1.50000000000000E+0000
21802: MUL
21803: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21804: LD_VAR 0 1
21808: PPUSH
21809: LD_INT 66
21811: PPUSH
21812: CALL_OW 321
21816: PUSH
21817: LD_INT 2
21819: EQUAL
21820: IFFALSE 21837
// bpoints := bpoints * 1.1 ;
21822: LD_ADDR_VAR 0 10
21826: PUSH
21827: LD_VAR 0 10
21831: PUSH
21832: LD_REAL  1.10000000000000E+0000
21835: MUL
21836: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21837: LD_ADDR_VAR 0 10
21841: PUSH
21842: LD_VAR 0 10
21846: PUSH
21847: LD_VAR 0 6
21851: PPUSH
21852: LD_INT 1
21854: PPUSH
21855: CALL_OW 259
21859: PUSH
21860: LD_REAL  1.15000000000000E+0000
21863: MUL
21864: MUL
21865: ST_TO_ADDR
// end ; unit_vehicle :
21866: GO 22696
21868: LD_INT 2
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 22684
21876: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21877: LD_VAR 0 6
21881: PPUSH
21882: CALL_OW 264
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 42
21892: PUSH
21893: LD_INT 24
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: IN
21901: IFFALSE 21922
// points := [ 25 , 5 , 3 ] ;
21903: LD_ADDR_VAR 0 9
21907: PUSH
21908: LD_INT 25
21910: PUSH
21911: LD_INT 5
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21922: LD_VAR 0 6
21926: PPUSH
21927: CALL_OW 264
21931: PUSH
21932: LD_INT 4
21934: PUSH
21935: LD_INT 43
21937: PUSH
21938: LD_INT 25
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: IN
21946: IFFALSE 21967
// points := [ 40 , 15 , 5 ] ;
21948: LD_ADDR_VAR 0 9
21952: PUSH
21953: LD_INT 40
21955: PUSH
21956: LD_INT 15
21958: PUSH
21959: LD_INT 5
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21967: LD_VAR 0 6
21971: PPUSH
21972: CALL_OW 264
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: LD_INT 23
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: IN
21987: IFFALSE 22008
// points := [ 7 , 25 , 8 ] ;
21989: LD_ADDR_VAR 0 9
21993: PUSH
21994: LD_INT 7
21996: PUSH
21997: LD_INT 25
21999: PUSH
22000: LD_INT 8
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22008: LD_VAR 0 6
22012: PPUSH
22013: CALL_OW 264
22017: PUSH
22018: LD_INT 5
22020: PUSH
22021: LD_INT 27
22023: PUSH
22024: LD_INT 44
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: IN
22032: IFFALSE 22053
// points := [ 14 , 50 , 16 ] ;
22034: LD_ADDR_VAR 0 9
22038: PUSH
22039: LD_INT 14
22041: PUSH
22042: LD_INT 50
22044: PUSH
22045: LD_INT 16
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22053: LD_VAR 0 6
22057: PPUSH
22058: CALL_OW 264
22062: PUSH
22063: LD_INT 6
22065: PUSH
22066: LD_INT 46
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: IN
22073: IFFALSE 22094
// points := [ 32 , 120 , 70 ] ;
22075: LD_ADDR_VAR 0 9
22079: PUSH
22080: LD_INT 32
22082: PUSH
22083: LD_INT 120
22085: PUSH
22086: LD_INT 70
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22094: LD_VAR 0 6
22098: PPUSH
22099: CALL_OW 264
22103: PUSH
22104: LD_INT 7
22106: PUSH
22107: LD_INT 28
22109: PUSH
22110: LD_INT 45
22112: PUSH
22113: LD_EXP 107
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: IN
22124: IFFALSE 22145
// points := [ 35 , 20 , 45 ] ;
22126: LD_ADDR_VAR 0 9
22130: PUSH
22131: LD_INT 35
22133: PUSH
22134: LD_INT 20
22136: PUSH
22137: LD_INT 45
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: LIST
22144: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22145: LD_VAR 0 6
22149: PPUSH
22150: CALL_OW 264
22154: PUSH
22155: LD_INT 47
22157: PUSH
22158: EMPTY
22159: LIST
22160: IN
22161: IFFALSE 22182
// points := [ 67 , 45 , 75 ] ;
22163: LD_ADDR_VAR 0 9
22167: PUSH
22168: LD_INT 67
22170: PUSH
22171: LD_INT 45
22173: PUSH
22174: LD_INT 75
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22182: LD_VAR 0 6
22186: PPUSH
22187: CALL_OW 264
22191: PUSH
22192: LD_INT 26
22194: PUSH
22195: EMPTY
22196: LIST
22197: IN
22198: IFFALSE 22219
// points := [ 120 , 30 , 80 ] ;
22200: LD_ADDR_VAR 0 9
22204: PUSH
22205: LD_INT 120
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 80
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22219: LD_VAR 0 6
22223: PPUSH
22224: CALL_OW 264
22228: PUSH
22229: LD_INT 22
22231: PUSH
22232: EMPTY
22233: LIST
22234: IN
22235: IFFALSE 22256
// points := [ 40 , 1 , 1 ] ;
22237: LD_ADDR_VAR 0 9
22241: PUSH
22242: LD_INT 40
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22256: LD_VAR 0 6
22260: PPUSH
22261: CALL_OW 264
22265: PUSH
22266: LD_INT 29
22268: PUSH
22269: EMPTY
22270: LIST
22271: IN
22272: IFFALSE 22293
// points := [ 70 , 200 , 400 ] ;
22274: LD_ADDR_VAR 0 9
22278: PUSH
22279: LD_INT 70
22281: PUSH
22282: LD_INT 200
22284: PUSH
22285: LD_INT 400
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22293: LD_VAR 0 6
22297: PPUSH
22298: CALL_OW 264
22302: PUSH
22303: LD_INT 14
22305: PUSH
22306: LD_INT 53
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: IN
22313: IFFALSE 22334
// points := [ 40 , 10 , 20 ] ;
22315: LD_ADDR_VAR 0 9
22319: PUSH
22320: LD_INT 40
22322: PUSH
22323: LD_INT 10
22325: PUSH
22326: LD_INT 20
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22334: LD_VAR 0 6
22338: PPUSH
22339: CALL_OW 264
22343: PUSH
22344: LD_INT 9
22346: PUSH
22347: EMPTY
22348: LIST
22349: IN
22350: IFFALSE 22371
// points := [ 5 , 70 , 20 ] ;
22352: LD_ADDR_VAR 0 9
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 70
22362: PUSH
22363: LD_INT 20
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22371: LD_VAR 0 6
22375: PPUSH
22376: CALL_OW 264
22380: PUSH
22381: LD_INT 10
22383: PUSH
22384: EMPTY
22385: LIST
22386: IN
22387: IFFALSE 22408
// points := [ 35 , 110 , 70 ] ;
22389: LD_ADDR_VAR 0 9
22393: PUSH
22394: LD_INT 35
22396: PUSH
22397: LD_INT 110
22399: PUSH
22400: LD_INT 70
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: LIST
22407: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22408: LD_VAR 0 6
22412: PPUSH
22413: CALL_OW 265
22417: PUSH
22418: LD_INT 25
22420: EQUAL
22421: IFFALSE 22442
// points := [ 80 , 65 , 100 ] ;
22423: LD_ADDR_VAR 0 9
22427: PUSH
22428: LD_INT 80
22430: PUSH
22431: LD_INT 65
22433: PUSH
22434: LD_INT 100
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22442: LD_VAR 0 6
22446: PPUSH
22447: CALL_OW 263
22451: PUSH
22452: LD_INT 1
22454: EQUAL
22455: IFFALSE 22490
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22457: LD_ADDR_VAR 0 10
22461: PUSH
22462: LD_VAR 0 10
22466: PUSH
22467: LD_VAR 0 6
22471: PPUSH
22472: CALL_OW 311
22476: PPUSH
22477: LD_INT 3
22479: PPUSH
22480: CALL_OW 259
22484: PUSH
22485: LD_INT 4
22487: MUL
22488: MUL
22489: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22490: LD_VAR 0 6
22494: PPUSH
22495: CALL_OW 263
22499: PUSH
22500: LD_INT 2
22502: EQUAL
22503: IFFALSE 22554
// begin j := IsControledBy ( i ) ;
22505: LD_ADDR_VAR 0 7
22509: PUSH
22510: LD_VAR 0 6
22514: PPUSH
22515: CALL_OW 312
22519: ST_TO_ADDR
// if j then
22520: LD_VAR 0 7
22524: IFFALSE 22554
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22526: LD_ADDR_VAR 0 10
22530: PUSH
22531: LD_VAR 0 10
22535: PUSH
22536: LD_VAR 0 7
22540: PPUSH
22541: LD_INT 3
22543: PPUSH
22544: CALL_OW 259
22548: PUSH
22549: LD_INT 3
22551: MUL
22552: MUL
22553: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22554: LD_VAR 0 6
22558: PPUSH
22559: CALL_OW 264
22563: PUSH
22564: LD_INT 5
22566: PUSH
22567: LD_INT 6
22569: PUSH
22570: LD_INT 46
22572: PUSH
22573: LD_INT 44
22575: PUSH
22576: LD_INT 47
22578: PUSH
22579: LD_INT 45
22581: PUSH
22582: LD_INT 28
22584: PUSH
22585: LD_INT 7
22587: PUSH
22588: LD_INT 27
22590: PUSH
22591: LD_INT 29
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: IN
22606: PUSH
22607: LD_VAR 0 1
22611: PPUSH
22612: LD_INT 52
22614: PPUSH
22615: CALL_OW 321
22619: PUSH
22620: LD_INT 2
22622: EQUAL
22623: AND
22624: IFFALSE 22641
// bpoints := bpoints * 1.2 ;
22626: LD_ADDR_VAR 0 10
22630: PUSH
22631: LD_VAR 0 10
22635: PUSH
22636: LD_REAL  1.20000000000000E+0000
22639: MUL
22640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22641: LD_VAR 0 6
22645: PPUSH
22646: CALL_OW 264
22650: PUSH
22651: LD_INT 6
22653: PUSH
22654: LD_INT 46
22656: PUSH
22657: LD_INT 47
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: IN
22665: IFFALSE 22682
// bpoints := bpoints * 1.2 ;
22667: LD_ADDR_VAR 0 10
22671: PUSH
22672: LD_VAR 0 10
22676: PUSH
22677: LD_REAL  1.20000000000000E+0000
22680: MUL
22681: ST_TO_ADDR
// end ; unit_building :
22682: GO 22696
22684: LD_INT 3
22686: DOUBLE
22687: EQUAL
22688: IFTRUE 22692
22690: GO 22695
22692: POP
// ; end ;
22693: GO 22696
22695: POP
// for j = 1 to 3 do
22696: LD_ADDR_VAR 0 7
22700: PUSH
22701: DOUBLE
22702: LD_INT 1
22704: DEC
22705: ST_TO_ADDR
22706: LD_INT 3
22708: PUSH
22709: FOR_TO
22710: IFFALSE 22763
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22712: LD_ADDR_VAR 0 5
22716: PUSH
22717: LD_VAR 0 5
22721: PPUSH
22722: LD_VAR 0 7
22726: PPUSH
22727: LD_VAR 0 5
22731: PUSH
22732: LD_VAR 0 7
22736: ARRAY
22737: PUSH
22738: LD_VAR 0 9
22742: PUSH
22743: LD_VAR 0 7
22747: ARRAY
22748: PUSH
22749: LD_VAR 0 10
22753: MUL
22754: PLUS
22755: PPUSH
22756: CALL_OW 1
22760: ST_TO_ADDR
22761: GO 22709
22763: POP
22764: POP
// end ;
22765: GO 21242
22767: POP
22768: POP
// result := Replace ( result , 4 , tmp ) ;
22769: LD_ADDR_VAR 0 5
22773: PUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: LD_INT 4
22781: PPUSH
22782: LD_VAR 0 8
22786: PPUSH
22787: CALL_OW 1
22791: ST_TO_ADDR
// end ;
22792: LD_VAR 0 5
22796: RET
// export function DangerAtRange ( unit , range ) ; begin
22797: LD_INT 0
22799: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22800: LD_ADDR_VAR 0 3
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 255
22814: PPUSH
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL_OW 250
22824: PPUSH
22825: LD_VAR 0 1
22829: PPUSH
22830: CALL_OW 251
22834: PPUSH
22835: LD_VAR 0 2
22839: PPUSH
22840: CALL 21094 0 4
22844: ST_TO_ADDR
// end ;
22845: LD_VAR 0 3
22849: RET
// export function DangerInArea ( side , area ) ; begin
22850: LD_INT 0
22852: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22853: LD_ADDR_VAR 0 3
22857: PUSH
22858: LD_VAR 0 2
22862: PPUSH
22863: LD_INT 81
22865: PUSH
22866: LD_VAR 0 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PPUSH
22875: CALL_OW 70
22879: ST_TO_ADDR
// end ;
22880: LD_VAR 0 3
22884: RET
// export function IsExtension ( b ) ; begin
22885: LD_INT 0
22887: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: LD_VAR 0 1
22897: PUSH
22898: LD_INT 23
22900: PUSH
22901: LD_INT 20
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 17
22909: PUSH
22910: LD_INT 24
22912: PUSH
22913: LD_INT 21
22915: PUSH
22916: LD_INT 19
22918: PUSH
22919: LD_INT 16
22921: PUSH
22922: LD_INT 25
22924: PUSH
22925: LD_INT 18
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: IN
22940: ST_TO_ADDR
// end ;
22941: LD_VAR 0 2
22945: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22946: LD_INT 0
22948: PPUSH
22949: PPUSH
22950: PPUSH
// result := [ ] ;
22951: LD_ADDR_VAR 0 4
22955: PUSH
22956: EMPTY
22957: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22958: LD_ADDR_VAR 0 5
22962: PUSH
22963: LD_VAR 0 2
22967: PPUSH
22968: LD_INT 21
22970: PUSH
22971: LD_INT 3
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PPUSH
22978: CALL_OW 70
22982: ST_TO_ADDR
// if not tmp then
22983: LD_VAR 0 5
22987: NOT
22988: IFFALSE 22992
// exit ;
22990: GO 23056
// if checkLink then
22992: LD_VAR 0 3
22996: IFFALSE 23046
// begin for i in tmp do
22998: LD_ADDR_VAR 0 6
23002: PUSH
23003: LD_VAR 0 5
23007: PUSH
23008: FOR_IN
23009: IFFALSE 23044
// if GetBase ( i ) <> base then
23011: LD_VAR 0 6
23015: PPUSH
23016: CALL_OW 274
23020: PUSH
23021: LD_VAR 0 1
23025: NONEQUAL
23026: IFFALSE 23042
// ComLinkToBase ( base , i ) ;
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_VAR 0 6
23037: PPUSH
23038: CALL_OW 169
23042: GO 23008
23044: POP
23045: POP
// end ; result := tmp ;
23046: LD_ADDR_VAR 0 4
23050: PUSH
23051: LD_VAR 0 5
23055: ST_TO_ADDR
// end ;
23056: LD_VAR 0 4
23060: RET
// export function ComComplete ( units , b ) ; var i ; begin
23061: LD_INT 0
23063: PPUSH
23064: PPUSH
// if not units then
23065: LD_VAR 0 1
23069: NOT
23070: IFFALSE 23074
// exit ;
23072: GO 23164
// for i in units do
23074: LD_ADDR_VAR 0 4
23078: PUSH
23079: LD_VAR 0 1
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23162
// if BuildingStatus ( b ) = bs_build then
23087: LD_VAR 0 2
23091: PPUSH
23092: CALL_OW 461
23096: PUSH
23097: LD_INT 1
23099: EQUAL
23100: IFFALSE 23160
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23102: LD_VAR 0 4
23106: PPUSH
23107: LD_STRING h
23109: PUSH
23110: LD_VAR 0 2
23114: PPUSH
23115: CALL_OW 250
23119: PUSH
23120: LD_VAR 0 2
23124: PPUSH
23125: CALL_OW 251
23129: PUSH
23130: LD_VAR 0 2
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: PPUSH
23156: CALL_OW 446
23160: GO 23084
23162: POP
23163: POP
// end ;
23164: LD_VAR 0 3
23168: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23169: LD_INT 0
23171: PPUSH
23172: PPUSH
23173: PPUSH
23174: PPUSH
23175: PPUSH
23176: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23177: LD_VAR 0 1
23181: NOT
23182: PUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 263
23192: PUSH
23193: LD_INT 2
23195: NONEQUAL
23196: OR
23197: IFFALSE 23201
// exit ;
23199: GO 23517
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23201: LD_ADDR_VAR 0 6
23205: PUSH
23206: LD_INT 22
23208: PUSH
23209: LD_VAR 0 1
23213: PPUSH
23214: CALL_OW 255
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 30
23228: PUSH
23229: LD_INT 36
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 34
23238: PUSH
23239: LD_INT 31
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PPUSH
23255: CALL_OW 69
23259: ST_TO_ADDR
// if not tmp then
23260: LD_VAR 0 6
23264: NOT
23265: IFFALSE 23269
// exit ;
23267: GO 23517
// result := [ ] ;
23269: LD_ADDR_VAR 0 2
23273: PUSH
23274: EMPTY
23275: ST_TO_ADDR
// for i in tmp do
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: LD_VAR 0 6
23285: PUSH
23286: FOR_IN
23287: IFFALSE 23358
// begin t := UnitsInside ( i ) ;
23289: LD_ADDR_VAR 0 4
23293: PUSH
23294: LD_VAR 0 3
23298: PPUSH
23299: CALL_OW 313
23303: ST_TO_ADDR
// if t then
23304: LD_VAR 0 4
23308: IFFALSE 23356
// for j in t do
23310: LD_ADDR_VAR 0 7
23314: PUSH
23315: LD_VAR 0 4
23319: PUSH
23320: FOR_IN
23321: IFFALSE 23354
// result := Replace ( result , result + 1 , j ) ;
23323: LD_ADDR_VAR 0 2
23327: PUSH
23328: LD_VAR 0 2
23332: PPUSH
23333: LD_VAR 0 2
23337: PUSH
23338: LD_INT 1
23340: PLUS
23341: PPUSH
23342: LD_VAR 0 7
23346: PPUSH
23347: CALL_OW 1
23351: ST_TO_ADDR
23352: GO 23320
23354: POP
23355: POP
// end ;
23356: GO 23286
23358: POP
23359: POP
// if not result then
23360: LD_VAR 0 2
23364: NOT
23365: IFFALSE 23369
// exit ;
23367: GO 23517
// mech := result [ 1 ] ;
23369: LD_ADDR_VAR 0 5
23373: PUSH
23374: LD_VAR 0 2
23378: PUSH
23379: LD_INT 1
23381: ARRAY
23382: ST_TO_ADDR
// if result > 1 then
23383: LD_VAR 0 2
23387: PUSH
23388: LD_INT 1
23390: GREATER
23391: IFFALSE 23503
// begin for i = 2 to result do
23393: LD_ADDR_VAR 0 3
23397: PUSH
23398: DOUBLE
23399: LD_INT 2
23401: DEC
23402: ST_TO_ADDR
23403: LD_VAR 0 2
23407: PUSH
23408: FOR_TO
23409: IFFALSE 23501
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23411: LD_ADDR_VAR 0 4
23415: PUSH
23416: LD_VAR 0 2
23420: PUSH
23421: LD_VAR 0 3
23425: ARRAY
23426: PPUSH
23427: LD_INT 3
23429: PPUSH
23430: CALL_OW 259
23434: PUSH
23435: LD_VAR 0 2
23439: PUSH
23440: LD_VAR 0 3
23444: ARRAY
23445: PPUSH
23446: CALL_OW 432
23450: MINUS
23451: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23452: LD_VAR 0 4
23456: PUSH
23457: LD_VAR 0 5
23461: PPUSH
23462: LD_INT 3
23464: PPUSH
23465: CALL_OW 259
23469: PUSH
23470: LD_VAR 0 5
23474: PPUSH
23475: CALL_OW 432
23479: MINUS
23480: GREATEREQUAL
23481: IFFALSE 23499
// mech := result [ i ] ;
23483: LD_ADDR_VAR 0 5
23487: PUSH
23488: LD_VAR 0 2
23492: PUSH
23493: LD_VAR 0 3
23497: ARRAY
23498: ST_TO_ADDR
// end ;
23499: GO 23408
23501: POP
23502: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23503: LD_VAR 0 1
23507: PPUSH
23508: LD_VAR 0 5
23512: PPUSH
23513: CALL_OW 135
// end ;
23517: LD_VAR 0 2
23521: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
23526: PPUSH
23527: PPUSH
23528: PPUSH
23529: PPUSH
23530: PPUSH
23531: PPUSH
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
// result := [ ] ;
23537: LD_ADDR_VAR 0 7
23541: PUSH
23542: EMPTY
23543: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 266
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: IN
23564: NOT
23565: IFFALSE 23569
// exit ;
23567: GO 25203
// if name then
23569: LD_VAR 0 3
23573: IFFALSE 23589
// SetBName ( base_dep , name ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_VAR 0 3
23584: PPUSH
23585: CALL_OW 500
// base := GetBase ( base_dep ) ;
23589: LD_ADDR_VAR 0 15
23593: PUSH
23594: LD_VAR 0 1
23598: PPUSH
23599: CALL_OW 274
23603: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23604: LD_ADDR_VAR 0 16
23608: PUSH
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL_OW 255
23618: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23619: LD_ADDR_VAR 0 17
23623: PUSH
23624: LD_VAR 0 1
23628: PPUSH
23629: CALL_OW 248
23633: ST_TO_ADDR
// if sources then
23634: LD_VAR 0 5
23638: IFFALSE 23685
// for i = 1 to 3 do
23640: LD_ADDR_VAR 0 8
23644: PUSH
23645: DOUBLE
23646: LD_INT 1
23648: DEC
23649: ST_TO_ADDR
23650: LD_INT 3
23652: PUSH
23653: FOR_TO
23654: IFFALSE 23683
// AddResourceType ( base , i , sources [ i ] ) ;
23656: LD_VAR 0 15
23660: PPUSH
23661: LD_VAR 0 8
23665: PPUSH
23666: LD_VAR 0 5
23670: PUSH
23671: LD_VAR 0 8
23675: ARRAY
23676: PPUSH
23677: CALL_OW 276
23681: GO 23653
23683: POP
23684: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23685: LD_ADDR_VAR 0 18
23689: PUSH
23690: LD_VAR 0 15
23694: PPUSH
23695: LD_VAR 0 2
23699: PPUSH
23700: LD_INT 1
23702: PPUSH
23703: CALL 22946 0 3
23707: ST_TO_ADDR
// InitHc ;
23708: CALL_OW 19
// InitUc ;
23712: CALL_OW 18
// uc_side := side ;
23716: LD_ADDR_OWVAR 20
23720: PUSH
23721: LD_VAR 0 16
23725: ST_TO_ADDR
// uc_nation := nation ;
23726: LD_ADDR_OWVAR 21
23730: PUSH
23731: LD_VAR 0 17
23735: ST_TO_ADDR
// if buildings then
23736: LD_VAR 0 18
23740: IFFALSE 25062
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23742: LD_ADDR_VAR 0 19
23746: PUSH
23747: LD_VAR 0 18
23751: PPUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 30
23757: PUSH
23758: LD_INT 29
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 30
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: PPUSH
23780: CALL_OW 72
23784: ST_TO_ADDR
// if tmp then
23785: LD_VAR 0 19
23789: IFFALSE 23837
// for i in tmp do
23791: LD_ADDR_VAR 0 8
23795: PUSH
23796: LD_VAR 0 19
23800: PUSH
23801: FOR_IN
23802: IFFALSE 23835
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23804: LD_VAR 0 8
23808: PPUSH
23809: CALL_OW 250
23813: PPUSH
23814: LD_VAR 0 8
23818: PPUSH
23819: CALL_OW 251
23823: PPUSH
23824: LD_VAR 0 16
23828: PPUSH
23829: CALL_OW 441
23833: GO 23801
23835: POP
23836: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23837: LD_VAR 0 18
23841: PPUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_INT 32
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 30
23857: PUSH
23858: LD_INT 33
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: PPUSH
23870: CALL_OW 72
23874: IFFALSE 23962
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23876: LD_ADDR_VAR 0 8
23880: PUSH
23881: LD_VAR 0 18
23885: PPUSH
23886: LD_INT 2
23888: PUSH
23889: LD_INT 30
23891: PUSH
23892: LD_INT 32
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 30
23901: PUSH
23902: LD_INT 33
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 72
23918: PUSH
23919: FOR_IN
23920: IFFALSE 23960
// begin if not GetBWeapon ( i ) then
23922: LD_VAR 0 8
23926: PPUSH
23927: CALL_OW 269
23931: NOT
23932: IFFALSE 23958
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23934: LD_VAR 0 8
23938: PPUSH
23939: LD_VAR 0 8
23943: PPUSH
23944: LD_VAR 0 2
23948: PPUSH
23949: CALL 25208 0 2
23953: PPUSH
23954: CALL_OW 431
// end ;
23958: GO 23919
23960: POP
23961: POP
// end ; for i = 1 to personel do
23962: LD_ADDR_VAR 0 8
23966: PUSH
23967: DOUBLE
23968: LD_INT 1
23970: DEC
23971: ST_TO_ADDR
23972: LD_VAR 0 6
23976: PUSH
23977: FOR_TO
23978: IFFALSE 25042
// begin if i > 4 then
23980: LD_VAR 0 8
23984: PUSH
23985: LD_INT 4
23987: GREATER
23988: IFFALSE 23992
// break ;
23990: GO 25042
// case i of 1 :
23992: LD_VAR 0 8
23996: PUSH
23997: LD_INT 1
23999: DOUBLE
24000: EQUAL
24001: IFTRUE 24005
24003: GO 24085
24005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24006: LD_ADDR_VAR 0 12
24010: PUSH
24011: LD_VAR 0 18
24015: PPUSH
24016: LD_INT 22
24018: PUSH
24019: LD_VAR 0 16
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 58
24030: PUSH
24031: EMPTY
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: LD_INT 30
24039: PUSH
24040: LD_INT 32
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 30
24049: PUSH
24050: LD_INT 4
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 30
24059: PUSH
24060: LD_INT 5
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: PPUSH
24078: CALL_OW 72
24082: ST_TO_ADDR
24083: GO 24307
24085: LD_INT 2
24087: DOUBLE
24088: EQUAL
24089: IFTRUE 24093
24091: GO 24155
24093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24094: LD_ADDR_VAR 0 12
24098: PUSH
24099: LD_VAR 0 18
24103: PPUSH
24104: LD_INT 22
24106: PUSH
24107: LD_VAR 0 16
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 30
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 30
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
24153: GO 24307
24155: LD_INT 3
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24225
24163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24164: LD_ADDR_VAR 0 12
24168: PUSH
24169: LD_VAR 0 18
24173: PPUSH
24174: LD_INT 22
24176: PUSH
24177: LD_VAR 0 16
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 30
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 30
24201: PUSH
24202: LD_INT 3
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PPUSH
24218: CALL_OW 72
24222: ST_TO_ADDR
24223: GO 24307
24225: LD_INT 4
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24306
24233: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24234: LD_ADDR_VAR 0 12
24238: PUSH
24239: LD_VAR 0 18
24243: PPUSH
24244: LD_INT 22
24246: PUSH
24247: LD_VAR 0 16
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: LD_INT 30
24261: PUSH
24262: LD_INT 6
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 30
24271: PUSH
24272: LD_INT 7
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 30
24281: PUSH
24282: LD_INT 8
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 72
24303: ST_TO_ADDR
24304: GO 24307
24306: POP
// if i = 1 then
24307: LD_VAR 0 8
24311: PUSH
24312: LD_INT 1
24314: EQUAL
24315: IFFALSE 24426
// begin tmp := [ ] ;
24317: LD_ADDR_VAR 0 19
24321: PUSH
24322: EMPTY
24323: ST_TO_ADDR
// for j in f do
24324: LD_ADDR_VAR 0 9
24328: PUSH
24329: LD_VAR 0 12
24333: PUSH
24334: FOR_IN
24335: IFFALSE 24408
// if GetBType ( j ) = b_bunker then
24337: LD_VAR 0 9
24341: PPUSH
24342: CALL_OW 266
24346: PUSH
24347: LD_INT 32
24349: EQUAL
24350: IFFALSE 24377
// tmp := Insert ( tmp , 1 , j ) else
24352: LD_ADDR_VAR 0 19
24356: PUSH
24357: LD_VAR 0 19
24361: PPUSH
24362: LD_INT 1
24364: PPUSH
24365: LD_VAR 0 9
24369: PPUSH
24370: CALL_OW 2
24374: ST_TO_ADDR
24375: GO 24406
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24377: LD_ADDR_VAR 0 19
24381: PUSH
24382: LD_VAR 0 19
24386: PPUSH
24387: LD_VAR 0 19
24391: PUSH
24392: LD_INT 1
24394: PLUS
24395: PPUSH
24396: LD_VAR 0 9
24400: PPUSH
24401: CALL_OW 2
24405: ST_TO_ADDR
24406: GO 24334
24408: POP
24409: POP
// if tmp then
24410: LD_VAR 0 19
24414: IFFALSE 24426
// f := tmp ;
24416: LD_ADDR_VAR 0 12
24420: PUSH
24421: LD_VAR 0 19
24425: ST_TO_ADDR
// end ; x := personel [ i ] ;
24426: LD_ADDR_VAR 0 13
24430: PUSH
24431: LD_VAR 0 6
24435: PUSH
24436: LD_VAR 0 8
24440: ARRAY
24441: ST_TO_ADDR
// if x = - 1 then
24442: LD_VAR 0 13
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: EQUAL
24451: IFFALSE 24660
// begin for j in f do
24453: LD_ADDR_VAR 0 9
24457: PUSH
24458: LD_VAR 0 12
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24656
// repeat InitHc ;
24466: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24470: LD_VAR 0 9
24474: PPUSH
24475: CALL_OW 266
24479: PUSH
24480: LD_INT 5
24482: EQUAL
24483: IFFALSE 24553
// begin if UnitsInside ( j ) < 3 then
24485: LD_VAR 0 9
24489: PPUSH
24490: CALL_OW 313
24494: PUSH
24495: LD_INT 3
24497: LESS
24498: IFFALSE 24534
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24500: LD_INT 0
24502: PPUSH
24503: LD_INT 5
24505: PUSH
24506: LD_INT 8
24508: PUSH
24509: LD_INT 9
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: PUSH
24517: LD_VAR 0 17
24521: ARRAY
24522: PPUSH
24523: LD_VAR 0 4
24527: PPUSH
24528: CALL_OW 380
24532: GO 24551
// PrepareHuman ( false , i , skill ) ;
24534: LD_INT 0
24536: PPUSH
24537: LD_VAR 0 8
24541: PPUSH
24542: LD_VAR 0 4
24546: PPUSH
24547: CALL_OW 380
// end else
24551: GO 24570
// PrepareHuman ( false , i , skill ) ;
24553: LD_INT 0
24555: PPUSH
24556: LD_VAR 0 8
24560: PPUSH
24561: LD_VAR 0 4
24565: PPUSH
24566: CALL_OW 380
// un := CreateHuman ;
24570: LD_ADDR_VAR 0 14
24574: PUSH
24575: CALL_OW 44
24579: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24580: LD_ADDR_VAR 0 7
24584: PUSH
24585: LD_VAR 0 7
24589: PPUSH
24590: LD_INT 1
24592: PPUSH
24593: LD_VAR 0 14
24597: PPUSH
24598: CALL_OW 2
24602: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24603: LD_VAR 0 14
24607: PPUSH
24608: LD_VAR 0 9
24612: PPUSH
24613: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24617: LD_VAR 0 9
24621: PPUSH
24622: CALL_OW 313
24626: PUSH
24627: LD_INT 6
24629: EQUAL
24630: PUSH
24631: LD_VAR 0 9
24635: PPUSH
24636: CALL_OW 266
24640: PUSH
24641: LD_INT 32
24643: PUSH
24644: LD_INT 31
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: IN
24651: OR
24652: IFFALSE 24466
24654: GO 24463
24656: POP
24657: POP
// end else
24658: GO 25040
// for j = 1 to x do
24660: LD_ADDR_VAR 0 9
24664: PUSH
24665: DOUBLE
24666: LD_INT 1
24668: DEC
24669: ST_TO_ADDR
24670: LD_VAR 0 13
24674: PUSH
24675: FOR_TO
24676: IFFALSE 25038
// begin InitHc ;
24678: CALL_OW 19
// if not f then
24682: LD_VAR 0 12
24686: NOT
24687: IFFALSE 24776
// begin PrepareHuman ( false , i , skill ) ;
24689: LD_INT 0
24691: PPUSH
24692: LD_VAR 0 8
24696: PPUSH
24697: LD_VAR 0 4
24701: PPUSH
24702: CALL_OW 380
// un := CreateHuman ;
24706: LD_ADDR_VAR 0 14
24710: PUSH
24711: CALL_OW 44
24715: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24716: LD_ADDR_VAR 0 7
24720: PUSH
24721: LD_VAR 0 7
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: LD_VAR 0 14
24733: PPUSH
24734: CALL_OW 2
24738: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24739: LD_VAR 0 14
24743: PPUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 250
24753: PPUSH
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 251
24763: PPUSH
24764: LD_INT 10
24766: PPUSH
24767: LD_INT 0
24769: PPUSH
24770: CALL_OW 50
// continue ;
24774: GO 24675
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24776: LD_VAR 0 12
24780: PUSH
24781: LD_INT 1
24783: ARRAY
24784: PPUSH
24785: CALL_OW 313
24789: PUSH
24790: LD_VAR 0 12
24794: PUSH
24795: LD_INT 1
24797: ARRAY
24798: PPUSH
24799: CALL_OW 266
24803: PUSH
24804: LD_INT 32
24806: PUSH
24807: LD_INT 31
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: IN
24814: AND
24815: PUSH
24816: LD_VAR 0 12
24820: PUSH
24821: LD_INT 1
24823: ARRAY
24824: PPUSH
24825: CALL_OW 313
24829: PUSH
24830: LD_INT 6
24832: EQUAL
24833: OR
24834: IFFALSE 24854
// f := Delete ( f , 1 ) ;
24836: LD_ADDR_VAR 0 12
24840: PUSH
24841: LD_VAR 0 12
24845: PPUSH
24846: LD_INT 1
24848: PPUSH
24849: CALL_OW 3
24853: ST_TO_ADDR
// if not f then
24854: LD_VAR 0 12
24858: NOT
24859: IFFALSE 24877
// begin x := x + 2 ;
24861: LD_ADDR_VAR 0 13
24865: PUSH
24866: LD_VAR 0 13
24870: PUSH
24871: LD_INT 2
24873: PLUS
24874: ST_TO_ADDR
// continue ;
24875: GO 24675
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24877: LD_VAR 0 12
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: PPUSH
24886: CALL_OW 266
24890: PUSH
24891: LD_INT 5
24893: EQUAL
24894: IFFALSE 24968
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24896: LD_VAR 0 12
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: CALL_OW 313
24909: PUSH
24910: LD_INT 3
24912: LESS
24913: IFFALSE 24949
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24915: LD_INT 0
24917: PPUSH
24918: LD_INT 5
24920: PUSH
24921: LD_INT 8
24923: PUSH
24924: LD_INT 9
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: LD_VAR 0 17
24936: ARRAY
24937: PPUSH
24938: LD_VAR 0 4
24942: PPUSH
24943: CALL_OW 380
24947: GO 24966
// PrepareHuman ( false , i , skill ) ;
24949: LD_INT 0
24951: PPUSH
24952: LD_VAR 0 8
24956: PPUSH
24957: LD_VAR 0 4
24961: PPUSH
24962: CALL_OW 380
// end else
24966: GO 24985
// PrepareHuman ( false , i , skill ) ;
24968: LD_INT 0
24970: PPUSH
24971: LD_VAR 0 8
24975: PPUSH
24976: LD_VAR 0 4
24980: PPUSH
24981: CALL_OW 380
// un := CreateHuman ;
24985: LD_ADDR_VAR 0 14
24989: PUSH
24990: CALL_OW 44
24994: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24995: LD_ADDR_VAR 0 7
24999: PUSH
25000: LD_VAR 0 7
25004: PPUSH
25005: LD_INT 1
25007: PPUSH
25008: LD_VAR 0 14
25012: PPUSH
25013: CALL_OW 2
25017: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25018: LD_VAR 0 14
25022: PPUSH
25023: LD_VAR 0 12
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: PPUSH
25032: CALL_OW 52
// end ;
25036: GO 24675
25038: POP
25039: POP
// end ;
25040: GO 23977
25042: POP
25043: POP
// result := result ^ buildings ;
25044: LD_ADDR_VAR 0 7
25048: PUSH
25049: LD_VAR 0 7
25053: PUSH
25054: LD_VAR 0 18
25058: ADD
25059: ST_TO_ADDR
// end else
25060: GO 25203
// begin for i = 1 to personel do
25062: LD_ADDR_VAR 0 8
25066: PUSH
25067: DOUBLE
25068: LD_INT 1
25070: DEC
25071: ST_TO_ADDR
25072: LD_VAR 0 6
25076: PUSH
25077: FOR_TO
25078: IFFALSE 25201
// begin if i > 4 then
25080: LD_VAR 0 8
25084: PUSH
25085: LD_INT 4
25087: GREATER
25088: IFFALSE 25092
// break ;
25090: GO 25201
// x := personel [ i ] ;
25092: LD_ADDR_VAR 0 13
25096: PUSH
25097: LD_VAR 0 6
25101: PUSH
25102: LD_VAR 0 8
25106: ARRAY
25107: ST_TO_ADDR
// if x = - 1 then
25108: LD_VAR 0 13
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: EQUAL
25117: IFFALSE 25121
// continue ;
25119: GO 25077
// PrepareHuman ( false , i , skill ) ;
25121: LD_INT 0
25123: PPUSH
25124: LD_VAR 0 8
25128: PPUSH
25129: LD_VAR 0 4
25133: PPUSH
25134: CALL_OW 380
// un := CreateHuman ;
25138: LD_ADDR_VAR 0 14
25142: PUSH
25143: CALL_OW 44
25147: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25148: LD_VAR 0 14
25152: PPUSH
25153: LD_VAR 0 1
25157: PPUSH
25158: CALL_OW 250
25162: PPUSH
25163: LD_VAR 0 1
25167: PPUSH
25168: CALL_OW 251
25172: PPUSH
25173: LD_INT 10
25175: PPUSH
25176: LD_INT 0
25178: PPUSH
25179: CALL_OW 50
// result := result ^ un ;
25183: LD_ADDR_VAR 0 7
25187: PUSH
25188: LD_VAR 0 7
25192: PUSH
25193: LD_VAR 0 14
25197: ADD
25198: ST_TO_ADDR
// end ;
25199: GO 25077
25201: POP
25202: POP
// end ; end ;
25203: LD_VAR 0 7
25207: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25208: LD_INT 0
25210: PPUSH
25211: PPUSH
25212: PPUSH
25213: PPUSH
25214: PPUSH
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
25225: PPUSH
// result := false ;
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_INT 0
25233: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25234: LD_VAR 0 1
25238: NOT
25239: PUSH
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL_OW 266
25249: PUSH
25250: LD_INT 32
25252: PUSH
25253: LD_INT 33
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: IN
25260: NOT
25261: OR
25262: IFFALSE 25266
// exit ;
25264: GO 26375
// nat := GetNation ( tower ) ;
25266: LD_ADDR_VAR 0 12
25270: PUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 248
25280: ST_TO_ADDR
// side := GetSide ( tower ) ;
25281: LD_ADDR_VAR 0 16
25285: PUSH
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 255
25295: ST_TO_ADDR
// x := GetX ( tower ) ;
25296: LD_ADDR_VAR 0 10
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 250
25310: ST_TO_ADDR
// y := GetY ( tower ) ;
25311: LD_ADDR_VAR 0 11
25315: PUSH
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 251
25325: ST_TO_ADDR
// if not x or not y then
25326: LD_VAR 0 10
25330: NOT
25331: PUSH
25332: LD_VAR 0 11
25336: NOT
25337: OR
25338: IFFALSE 25342
// exit ;
25340: GO 26375
// weapon := 0 ;
25342: LD_ADDR_VAR 0 18
25346: PUSH
25347: LD_INT 0
25349: ST_TO_ADDR
// fac_list := [ ] ;
25350: LD_ADDR_VAR 0 17
25354: PUSH
25355: EMPTY
25356: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25357: LD_ADDR_VAR 0 6
25361: PUSH
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 274
25371: PPUSH
25372: LD_VAR 0 2
25376: PPUSH
25377: LD_INT 0
25379: PPUSH
25380: CALL 22946 0 3
25384: PPUSH
25385: LD_INT 30
25387: PUSH
25388: LD_INT 3
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 72
25399: ST_TO_ADDR
// if not factories then
25400: LD_VAR 0 6
25404: NOT
25405: IFFALSE 25409
// exit ;
25407: GO 26375
// for i in factories do
25409: LD_ADDR_VAR 0 8
25413: PUSH
25414: LD_VAR 0 6
25418: PUSH
25419: FOR_IN
25420: IFFALSE 25445
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25422: LD_ADDR_VAR 0 17
25426: PUSH
25427: LD_VAR 0 17
25431: PUSH
25432: LD_VAR 0 8
25436: PPUSH
25437: CALL_OW 478
25441: UNION
25442: ST_TO_ADDR
25443: GO 25419
25445: POP
25446: POP
// if not fac_list then
25447: LD_VAR 0 17
25451: NOT
25452: IFFALSE 25456
// exit ;
25454: GO 26375
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25456: LD_ADDR_VAR 0 5
25460: PUSH
25461: LD_INT 4
25463: PUSH
25464: LD_INT 5
25466: PUSH
25467: LD_INT 9
25469: PUSH
25470: LD_INT 10
25472: PUSH
25473: LD_INT 6
25475: PUSH
25476: LD_INT 7
25478: PUSH
25479: LD_INT 11
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 27
25493: PUSH
25494: LD_INT 28
25496: PUSH
25497: LD_INT 26
25499: PUSH
25500: LD_INT 30
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 43
25511: PUSH
25512: LD_INT 44
25514: PUSH
25515: LD_INT 46
25517: PUSH
25518: LD_INT 45
25520: PUSH
25521: LD_INT 47
25523: PUSH
25524: LD_INT 49
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: LIST
25539: PUSH
25540: LD_VAR 0 12
25544: ARRAY
25545: ST_TO_ADDR
// list := list isect fac_list ;
25546: LD_ADDR_VAR 0 5
25550: PUSH
25551: LD_VAR 0 5
25555: PUSH
25556: LD_VAR 0 17
25560: ISECT
25561: ST_TO_ADDR
// if not list then
25562: LD_VAR 0 5
25566: NOT
25567: IFFALSE 25571
// exit ;
25569: GO 26375
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25571: LD_VAR 0 12
25575: PUSH
25576: LD_INT 3
25578: EQUAL
25579: PUSH
25580: LD_INT 49
25582: PUSH
25583: LD_VAR 0 5
25587: IN
25588: AND
25589: PUSH
25590: LD_INT 31
25592: PPUSH
25593: LD_VAR 0 16
25597: PPUSH
25598: CALL_OW 321
25602: PUSH
25603: LD_INT 2
25605: EQUAL
25606: AND
25607: IFFALSE 25667
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25609: LD_INT 22
25611: PUSH
25612: LD_VAR 0 16
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 35
25623: PUSH
25624: LD_INT 49
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 91
25633: PUSH
25634: LD_VAR 0 1
25638: PUSH
25639: LD_INT 10
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: NOT
25657: IFFALSE 25667
// weapon := ru_time_lapser ;
25659: LD_ADDR_VAR 0 18
25663: PUSH
25664: LD_INT 49
25666: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25667: LD_VAR 0 12
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: IN
25682: PUSH
25683: LD_INT 11
25685: PUSH
25686: LD_VAR 0 5
25690: IN
25691: PUSH
25692: LD_INT 30
25694: PUSH
25695: LD_VAR 0 5
25699: IN
25700: OR
25701: AND
25702: PUSH
25703: LD_INT 6
25705: PPUSH
25706: LD_VAR 0 16
25710: PPUSH
25711: CALL_OW 321
25715: PUSH
25716: LD_INT 2
25718: EQUAL
25719: AND
25720: IFFALSE 25885
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25722: LD_INT 22
25724: PUSH
25725: LD_VAR 0 16
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: LD_INT 35
25739: PUSH
25740: LD_INT 11
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 35
25749: PUSH
25750: LD_INT 30
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 91
25764: PUSH
25765: LD_VAR 0 1
25769: PUSH
25770: LD_INT 18
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 69
25787: NOT
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_VAR 0 16
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 30
25806: PUSH
25807: LD_INT 32
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 30
25816: PUSH
25817: LD_INT 33
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 91
25831: PUSH
25832: LD_VAR 0 1
25836: PUSH
25837: LD_INT 12
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: PPUSH
25853: CALL_OW 69
25857: PUSH
25858: LD_INT 2
25860: GREATER
25861: AND
25862: IFFALSE 25885
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25864: LD_ADDR_VAR 0 18
25868: PUSH
25869: LD_INT 11
25871: PUSH
25872: LD_INT 30
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_VAR 0 12
25883: ARRAY
25884: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25885: LD_VAR 0 18
25889: NOT
25890: PUSH
25891: LD_INT 40
25893: PPUSH
25894: LD_VAR 0 16
25898: PPUSH
25899: CALL_OW 321
25903: PUSH
25904: LD_INT 2
25906: EQUAL
25907: AND
25908: PUSH
25909: LD_INT 7
25911: PUSH
25912: LD_VAR 0 5
25916: IN
25917: PUSH
25918: LD_INT 28
25920: PUSH
25921: LD_VAR 0 5
25925: IN
25926: OR
25927: PUSH
25928: LD_INT 45
25930: PUSH
25931: LD_VAR 0 5
25935: IN
25936: OR
25937: AND
25938: IFFALSE 26192
// begin hex := GetHexInfo ( x , y ) ;
25940: LD_ADDR_VAR 0 4
25944: PUSH
25945: LD_VAR 0 10
25949: PPUSH
25950: LD_VAR 0 11
25954: PPUSH
25955: CALL_OW 546
25959: ST_TO_ADDR
// if hex [ 1 ] then
25960: LD_VAR 0 4
25964: PUSH
25965: LD_INT 1
25967: ARRAY
25968: IFFALSE 25972
// exit ;
25970: GO 26375
// height := hex [ 2 ] ;
25972: LD_ADDR_VAR 0 15
25976: PUSH
25977: LD_VAR 0 4
25981: PUSH
25982: LD_INT 2
25984: ARRAY
25985: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25986: LD_ADDR_VAR 0 14
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: LD_INT 3
25999: PUSH
26000: LD_INT 5
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: ST_TO_ADDR
// for i in tmp do
26009: LD_ADDR_VAR 0 8
26013: PUSH
26014: LD_VAR 0 14
26018: PUSH
26019: FOR_IN
26020: IFFALSE 26190
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26022: LD_ADDR_VAR 0 9
26026: PUSH
26027: LD_VAR 0 10
26031: PPUSH
26032: LD_VAR 0 8
26036: PPUSH
26037: LD_INT 5
26039: PPUSH
26040: CALL_OW 272
26044: PUSH
26045: LD_VAR 0 11
26049: PPUSH
26050: LD_VAR 0 8
26054: PPUSH
26055: LD_INT 5
26057: PPUSH
26058: CALL_OW 273
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26067: LD_VAR 0 9
26071: PUSH
26072: LD_INT 1
26074: ARRAY
26075: PPUSH
26076: LD_VAR 0 9
26080: PUSH
26081: LD_INT 2
26083: ARRAY
26084: PPUSH
26085: CALL_OW 488
26089: IFFALSE 26188
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26091: LD_ADDR_VAR 0 4
26095: PUSH
26096: LD_VAR 0 9
26100: PUSH
26101: LD_INT 1
26103: ARRAY
26104: PPUSH
26105: LD_VAR 0 9
26109: PUSH
26110: LD_INT 2
26112: ARRAY
26113: PPUSH
26114: CALL_OW 546
26118: ST_TO_ADDR
// if hex [ 1 ] then
26119: LD_VAR 0 4
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: IFFALSE 26131
// continue ;
26129: GO 26019
// h := hex [ 2 ] ;
26131: LD_ADDR_VAR 0 13
26135: PUSH
26136: LD_VAR 0 4
26140: PUSH
26141: LD_INT 2
26143: ARRAY
26144: ST_TO_ADDR
// if h + 7 < height then
26145: LD_VAR 0 13
26149: PUSH
26150: LD_INT 7
26152: PLUS
26153: PUSH
26154: LD_VAR 0 15
26158: LESS
26159: IFFALSE 26188
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26161: LD_ADDR_VAR 0 18
26165: PUSH
26166: LD_INT 7
26168: PUSH
26169: LD_INT 28
26171: PUSH
26172: LD_INT 45
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: PUSH
26180: LD_VAR 0 12
26184: ARRAY
26185: ST_TO_ADDR
// break ;
26186: GO 26190
// end ; end ; end ;
26188: GO 26019
26190: POP
26191: POP
// end ; if not weapon then
26192: LD_VAR 0 18
26196: NOT
26197: IFFALSE 26257
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26199: LD_ADDR_VAR 0 5
26203: PUSH
26204: LD_VAR 0 5
26208: PUSH
26209: LD_INT 11
26211: PUSH
26212: LD_INT 30
26214: PUSH
26215: LD_INT 49
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: DIFF
26223: ST_TO_ADDR
// if not list then
26224: LD_VAR 0 5
26228: NOT
26229: IFFALSE 26233
// exit ;
26231: GO 26375
// weapon := list [ rand ( 1 , list ) ] ;
26233: LD_ADDR_VAR 0 18
26237: PUSH
26238: LD_VAR 0 5
26242: PUSH
26243: LD_INT 1
26245: PPUSH
26246: LD_VAR 0 5
26250: PPUSH
26251: CALL_OW 12
26255: ARRAY
26256: ST_TO_ADDR
// end ; if weapon then
26257: LD_VAR 0 18
26261: IFFALSE 26375
// begin tmp := CostOfWeapon ( weapon ) ;
26263: LD_ADDR_VAR 0 14
26267: PUSH
26268: LD_VAR 0 18
26272: PPUSH
26273: CALL_OW 451
26277: ST_TO_ADDR
// j := GetBase ( tower ) ;
26278: LD_ADDR_VAR 0 9
26282: PUSH
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 274
26292: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26293: LD_VAR 0 9
26297: PPUSH
26298: LD_INT 1
26300: PPUSH
26301: CALL_OW 275
26305: PUSH
26306: LD_VAR 0 14
26310: PUSH
26311: LD_INT 1
26313: ARRAY
26314: GREATEREQUAL
26315: PUSH
26316: LD_VAR 0 9
26320: PPUSH
26321: LD_INT 2
26323: PPUSH
26324: CALL_OW 275
26328: PUSH
26329: LD_VAR 0 14
26333: PUSH
26334: LD_INT 2
26336: ARRAY
26337: GREATEREQUAL
26338: AND
26339: PUSH
26340: LD_VAR 0 9
26344: PPUSH
26345: LD_INT 3
26347: PPUSH
26348: CALL_OW 275
26352: PUSH
26353: LD_VAR 0 14
26357: PUSH
26358: LD_INT 3
26360: ARRAY
26361: GREATEREQUAL
26362: AND
26363: IFFALSE 26375
// result := weapon ;
26365: LD_ADDR_VAR 0 3
26369: PUSH
26370: LD_VAR 0 18
26374: ST_TO_ADDR
// end ; end ;
26375: LD_VAR 0 3
26379: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26380: LD_INT 0
26382: PPUSH
26383: PPUSH
// result := true ;
26384: LD_ADDR_VAR 0 3
26388: PUSH
26389: LD_INT 1
26391: ST_TO_ADDR
// if array1 = array2 then
26392: LD_VAR 0 1
26396: PUSH
26397: LD_VAR 0 2
26401: EQUAL
26402: IFFALSE 26462
// begin for i = 1 to array1 do
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: DOUBLE
26410: LD_INT 1
26412: DEC
26413: ST_TO_ADDR
26414: LD_VAR 0 1
26418: PUSH
26419: FOR_TO
26420: IFFALSE 26458
// if array1 [ i ] <> array2 [ i ] then
26422: LD_VAR 0 1
26426: PUSH
26427: LD_VAR 0 4
26431: ARRAY
26432: PUSH
26433: LD_VAR 0 2
26437: PUSH
26438: LD_VAR 0 4
26442: ARRAY
26443: NONEQUAL
26444: IFFALSE 26456
// begin result := false ;
26446: LD_ADDR_VAR 0 3
26450: PUSH
26451: LD_INT 0
26453: ST_TO_ADDR
// break ;
26454: GO 26458
// end ;
26456: GO 26419
26458: POP
26459: POP
// end else
26460: GO 26470
// result := false ;
26462: LD_ADDR_VAR 0 3
26466: PUSH
26467: LD_INT 0
26469: ST_TO_ADDR
// end ;
26470: LD_VAR 0 3
26474: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// if not array1 or not array2 then
26479: LD_VAR 0 1
26483: NOT
26484: PUSH
26485: LD_VAR 0 2
26489: NOT
26490: OR
26491: IFFALSE 26495
// exit ;
26493: GO 26559
// result := true ;
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 1
26502: ST_TO_ADDR
// for i = 1 to array1 do
26503: LD_ADDR_VAR 0 4
26507: PUSH
26508: DOUBLE
26509: LD_INT 1
26511: DEC
26512: ST_TO_ADDR
26513: LD_VAR 0 1
26517: PUSH
26518: FOR_TO
26519: IFFALSE 26557
// if array1 [ i ] <> array2 [ i ] then
26521: LD_VAR 0 1
26525: PUSH
26526: LD_VAR 0 4
26530: ARRAY
26531: PUSH
26532: LD_VAR 0 2
26536: PUSH
26537: LD_VAR 0 4
26541: ARRAY
26542: NONEQUAL
26543: IFFALSE 26555
// begin result := false ;
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_INT 0
26552: ST_TO_ADDR
// break ;
26553: GO 26557
// end ;
26555: GO 26518
26557: POP
26558: POP
// end ;
26559: LD_VAR 0 3
26563: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26564: LD_INT 0
26566: PPUSH
26567: PPUSH
26568: PPUSH
// pom := GetBase ( fac ) ;
26569: LD_ADDR_VAR 0 5
26573: PUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 274
26583: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26584: LD_ADDR_VAR 0 4
26588: PUSH
26589: LD_VAR 0 2
26593: PUSH
26594: LD_INT 1
26596: ARRAY
26597: PPUSH
26598: LD_VAR 0 2
26602: PUSH
26603: LD_INT 2
26605: ARRAY
26606: PPUSH
26607: LD_VAR 0 2
26611: PUSH
26612: LD_INT 3
26614: ARRAY
26615: PPUSH
26616: LD_VAR 0 2
26620: PUSH
26621: LD_INT 4
26623: ARRAY
26624: PPUSH
26625: CALL_OW 449
26629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26630: LD_ADDR_VAR 0 3
26634: PUSH
26635: LD_VAR 0 5
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: CALL_OW 275
26647: PUSH
26648: LD_VAR 0 4
26652: PUSH
26653: LD_INT 1
26655: ARRAY
26656: GREATEREQUAL
26657: PUSH
26658: LD_VAR 0 5
26662: PPUSH
26663: LD_INT 2
26665: PPUSH
26666: CALL_OW 275
26670: PUSH
26671: LD_VAR 0 4
26675: PUSH
26676: LD_INT 2
26678: ARRAY
26679: GREATEREQUAL
26680: AND
26681: PUSH
26682: LD_VAR 0 5
26686: PPUSH
26687: LD_INT 3
26689: PPUSH
26690: CALL_OW 275
26694: PUSH
26695: LD_VAR 0 4
26699: PUSH
26700: LD_INT 3
26702: ARRAY
26703: GREATEREQUAL
26704: AND
26705: ST_TO_ADDR
// end ;
26706: LD_VAR 0 3
26710: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26711: LD_INT 0
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
// pom := GetBase ( building ) ;
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: CALL_OW 274
26731: ST_TO_ADDR
// if not pom then
26732: LD_VAR 0 3
26736: NOT
26737: IFFALSE 26741
// exit ;
26739: GO 26911
// btype := GetBType ( building ) ;
26741: LD_ADDR_VAR 0 5
26745: PUSH
26746: LD_VAR 0 1
26750: PPUSH
26751: CALL_OW 266
26755: ST_TO_ADDR
// if btype = b_armoury then
26756: LD_VAR 0 5
26760: PUSH
26761: LD_INT 4
26763: EQUAL
26764: IFFALSE 26774
// btype := b_barracks ;
26766: LD_ADDR_VAR 0 5
26770: PUSH
26771: LD_INT 5
26773: ST_TO_ADDR
// if btype = b_depot then
26774: LD_VAR 0 5
26778: PUSH
26779: LD_INT 0
26781: EQUAL
26782: IFFALSE 26792
// btype := b_warehouse ;
26784: LD_ADDR_VAR 0 5
26788: PUSH
26789: LD_INT 1
26791: ST_TO_ADDR
// if btype = b_workshop then
26792: LD_VAR 0 5
26796: PUSH
26797: LD_INT 2
26799: EQUAL
26800: IFFALSE 26810
// btype := b_factory ;
26802: LD_ADDR_VAR 0 5
26806: PUSH
26807: LD_INT 3
26809: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_VAR 0 5
26819: PPUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL_OW 248
26829: PPUSH
26830: CALL_OW 450
26834: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26835: LD_ADDR_VAR 0 2
26839: PUSH
26840: LD_VAR 0 3
26844: PPUSH
26845: LD_INT 1
26847: PPUSH
26848: CALL_OW 275
26852: PUSH
26853: LD_VAR 0 4
26857: PUSH
26858: LD_INT 1
26860: ARRAY
26861: GREATEREQUAL
26862: PUSH
26863: LD_VAR 0 3
26867: PPUSH
26868: LD_INT 2
26870: PPUSH
26871: CALL_OW 275
26875: PUSH
26876: LD_VAR 0 4
26880: PUSH
26881: LD_INT 2
26883: ARRAY
26884: GREATEREQUAL
26885: AND
26886: PUSH
26887: LD_VAR 0 3
26891: PPUSH
26892: LD_INT 3
26894: PPUSH
26895: CALL_OW 275
26899: PUSH
26900: LD_VAR 0 4
26904: PUSH
26905: LD_INT 3
26907: ARRAY
26908: GREATEREQUAL
26909: AND
26910: ST_TO_ADDR
// end ;
26911: LD_VAR 0 2
26915: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26916: LD_INT 0
26918: PPUSH
26919: PPUSH
26920: PPUSH
// pom := GetBase ( building ) ;
26921: LD_ADDR_VAR 0 4
26925: PUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 274
26935: ST_TO_ADDR
// if not pom then
26936: LD_VAR 0 4
26940: NOT
26941: IFFALSE 26945
// exit ;
26943: GO 27046
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26945: LD_ADDR_VAR 0 5
26949: PUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: LD_VAR 0 1
26959: PPUSH
26960: CALL_OW 248
26964: PPUSH
26965: CALL_OW 450
26969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: LD_VAR 0 4
26979: PPUSH
26980: LD_INT 1
26982: PPUSH
26983: CALL_OW 275
26987: PUSH
26988: LD_VAR 0 5
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: GREATEREQUAL
26997: PUSH
26998: LD_VAR 0 4
27002: PPUSH
27003: LD_INT 2
27005: PPUSH
27006: CALL_OW 275
27010: PUSH
27011: LD_VAR 0 5
27015: PUSH
27016: LD_INT 2
27018: ARRAY
27019: GREATEREQUAL
27020: AND
27021: PUSH
27022: LD_VAR 0 4
27026: PPUSH
27027: LD_INT 3
27029: PPUSH
27030: CALL_OW 275
27034: PUSH
27035: LD_VAR 0 5
27039: PUSH
27040: LD_INT 3
27042: ARRAY
27043: GREATEREQUAL
27044: AND
27045: ST_TO_ADDR
// end ;
27046: LD_VAR 0 3
27050: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27051: LD_INT 0
27053: PPUSH
27054: PPUSH
27055: PPUSH
27056: PPUSH
27057: PPUSH
27058: PPUSH
27059: PPUSH
27060: PPUSH
27061: PPUSH
27062: PPUSH
27063: PPUSH
// result := false ;
27064: LD_ADDR_VAR 0 8
27068: PUSH
27069: LD_INT 0
27071: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27072: LD_VAR 0 5
27076: NOT
27077: PUSH
27078: LD_VAR 0 1
27082: NOT
27083: OR
27084: PUSH
27085: LD_VAR 0 2
27089: NOT
27090: OR
27091: PUSH
27092: LD_VAR 0 3
27096: NOT
27097: OR
27098: IFFALSE 27102
// exit ;
27100: GO 27916
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27102: LD_ADDR_VAR 0 14
27106: PUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: LD_VAR 0 2
27116: PPUSH
27117: LD_VAR 0 3
27121: PPUSH
27122: LD_VAR 0 4
27126: PPUSH
27127: LD_VAR 0 5
27131: PUSH
27132: LD_INT 1
27134: ARRAY
27135: PPUSH
27136: CALL_OW 248
27140: PPUSH
27141: LD_INT 0
27143: PPUSH
27144: CALL 29153 0 6
27148: ST_TO_ADDR
// if not hexes then
27149: LD_VAR 0 14
27153: NOT
27154: IFFALSE 27158
// exit ;
27156: GO 27916
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27158: LD_ADDR_VAR 0 17
27162: PUSH
27163: LD_VAR 0 5
27167: PPUSH
27168: LD_INT 22
27170: PUSH
27171: LD_VAR 0 13
27175: PPUSH
27176: CALL_OW 255
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: LD_INT 30
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 30
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 72
27221: ST_TO_ADDR
// for i = 1 to hexes do
27222: LD_ADDR_VAR 0 9
27226: PUSH
27227: DOUBLE
27228: LD_INT 1
27230: DEC
27231: ST_TO_ADDR
27232: LD_VAR 0 14
27236: PUSH
27237: FOR_TO
27238: IFFALSE 27914
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27240: LD_ADDR_VAR 0 13
27244: PUSH
27245: LD_VAR 0 14
27249: PUSH
27250: LD_VAR 0 9
27254: ARRAY
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PPUSH
27260: LD_VAR 0 14
27264: PUSH
27265: LD_VAR 0 9
27269: ARRAY
27270: PUSH
27271: LD_INT 2
27273: ARRAY
27274: PPUSH
27275: CALL_OW 428
27279: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27280: LD_VAR 0 14
27284: PUSH
27285: LD_VAR 0 9
27289: ARRAY
27290: PUSH
27291: LD_INT 1
27293: ARRAY
27294: PPUSH
27295: LD_VAR 0 14
27299: PUSH
27300: LD_VAR 0 9
27304: ARRAY
27305: PUSH
27306: LD_INT 2
27308: ARRAY
27309: PPUSH
27310: CALL_OW 351
27314: PUSH
27315: LD_VAR 0 14
27319: PUSH
27320: LD_VAR 0 9
27324: ARRAY
27325: PUSH
27326: LD_INT 1
27328: ARRAY
27329: PPUSH
27330: LD_VAR 0 14
27334: PUSH
27335: LD_VAR 0 9
27339: ARRAY
27340: PUSH
27341: LD_INT 2
27343: ARRAY
27344: PPUSH
27345: CALL_OW 488
27349: NOT
27350: OR
27351: PUSH
27352: LD_VAR 0 13
27356: PPUSH
27357: CALL_OW 247
27361: PUSH
27362: LD_INT 3
27364: EQUAL
27365: OR
27366: IFFALSE 27372
// exit ;
27368: POP
27369: POP
27370: GO 27916
// if not tmp then
27372: LD_VAR 0 13
27376: NOT
27377: IFFALSE 27381
// continue ;
27379: GO 27237
// result := true ;
27381: LD_ADDR_VAR 0 8
27385: PUSH
27386: LD_INT 1
27388: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27389: LD_VAR 0 6
27393: PUSH
27394: LD_VAR 0 13
27398: PPUSH
27399: CALL_OW 247
27403: PUSH
27404: LD_INT 2
27406: EQUAL
27407: AND
27408: PUSH
27409: LD_VAR 0 13
27413: PPUSH
27414: CALL_OW 263
27418: PUSH
27419: LD_INT 1
27421: EQUAL
27422: AND
27423: IFFALSE 27587
// begin if IsDrivenBy ( tmp ) then
27425: LD_VAR 0 13
27429: PPUSH
27430: CALL_OW 311
27434: IFFALSE 27438
// continue ;
27436: GO 27237
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27438: LD_VAR 0 6
27442: PPUSH
27443: LD_INT 3
27445: PUSH
27446: LD_INT 60
27448: PUSH
27449: EMPTY
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: LD_INT 55
27461: PUSH
27462: EMPTY
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PPUSH
27473: CALL_OW 72
27477: IFFALSE 27585
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27479: LD_ADDR_VAR 0 18
27483: PUSH
27484: LD_VAR 0 6
27488: PPUSH
27489: LD_INT 3
27491: PUSH
27492: LD_INT 60
27494: PUSH
27495: EMPTY
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 3
27504: PUSH
27505: LD_INT 55
27507: PUSH
27508: EMPTY
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 72
27523: PUSH
27524: LD_INT 1
27526: ARRAY
27527: ST_TO_ADDR
// if IsInUnit ( driver ) then
27528: LD_VAR 0 18
27532: PPUSH
27533: CALL_OW 310
27537: IFFALSE 27548
// ComExit ( driver ) ;
27539: LD_VAR 0 18
27543: PPUSH
27544: CALL 52281 0 1
// AddComEnterUnit ( driver , tmp ) ;
27548: LD_VAR 0 18
27552: PPUSH
27553: LD_VAR 0 13
27557: PPUSH
27558: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27562: LD_VAR 0 18
27566: PPUSH
27567: LD_VAR 0 7
27571: PPUSH
27572: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27576: LD_VAR 0 18
27580: PPUSH
27581: CALL_OW 181
// end ; continue ;
27585: GO 27237
// end ; if not cleaners or not tmp in cleaners then
27587: LD_VAR 0 6
27591: NOT
27592: PUSH
27593: LD_VAR 0 13
27597: PUSH
27598: LD_VAR 0 6
27602: IN
27603: NOT
27604: OR
27605: IFFALSE 27912
// begin if dep then
27607: LD_VAR 0 17
27611: IFFALSE 27747
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27613: LD_ADDR_VAR 0 16
27617: PUSH
27618: LD_VAR 0 17
27622: PUSH
27623: LD_INT 1
27625: ARRAY
27626: PPUSH
27627: CALL_OW 250
27631: PPUSH
27632: LD_VAR 0 17
27636: PUSH
27637: LD_INT 1
27639: ARRAY
27640: PPUSH
27641: CALL_OW 254
27645: PPUSH
27646: LD_INT 5
27648: PPUSH
27649: CALL_OW 272
27653: PUSH
27654: LD_VAR 0 17
27658: PUSH
27659: LD_INT 1
27661: ARRAY
27662: PPUSH
27663: CALL_OW 251
27667: PPUSH
27668: LD_VAR 0 17
27672: PUSH
27673: LD_INT 1
27675: ARRAY
27676: PPUSH
27677: CALL_OW 254
27681: PPUSH
27682: LD_INT 5
27684: PPUSH
27685: CALL_OW 273
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27694: LD_VAR 0 16
27698: PUSH
27699: LD_INT 1
27701: ARRAY
27702: PPUSH
27703: LD_VAR 0 16
27707: PUSH
27708: LD_INT 2
27710: ARRAY
27711: PPUSH
27712: CALL_OW 488
27716: IFFALSE 27747
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27718: LD_VAR 0 13
27722: PPUSH
27723: LD_VAR 0 16
27727: PUSH
27728: LD_INT 1
27730: ARRAY
27731: PPUSH
27732: LD_VAR 0 16
27736: PUSH
27737: LD_INT 2
27739: ARRAY
27740: PPUSH
27741: CALL_OW 111
// continue ;
27745: GO 27237
// end ; end ; r := GetDir ( tmp ) ;
27747: LD_ADDR_VAR 0 15
27751: PUSH
27752: LD_VAR 0 13
27756: PPUSH
27757: CALL_OW 254
27761: ST_TO_ADDR
// if r = 5 then
27762: LD_VAR 0 15
27766: PUSH
27767: LD_INT 5
27769: EQUAL
27770: IFFALSE 27780
// r := 0 ;
27772: LD_ADDR_VAR 0 15
27776: PUSH
27777: LD_INT 0
27779: ST_TO_ADDR
// for j = r to 5 do
27780: LD_ADDR_VAR 0 10
27784: PUSH
27785: DOUBLE
27786: LD_VAR 0 15
27790: DEC
27791: ST_TO_ADDR
27792: LD_INT 5
27794: PUSH
27795: FOR_TO
27796: IFFALSE 27910
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27798: LD_ADDR_VAR 0 11
27802: PUSH
27803: LD_VAR 0 13
27807: PPUSH
27808: CALL_OW 250
27812: PPUSH
27813: LD_VAR 0 10
27817: PPUSH
27818: LD_INT 2
27820: PPUSH
27821: CALL_OW 272
27825: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27826: LD_ADDR_VAR 0 12
27830: PUSH
27831: LD_VAR 0 13
27835: PPUSH
27836: CALL_OW 251
27840: PPUSH
27841: LD_VAR 0 10
27845: PPUSH
27846: LD_INT 2
27848: PPUSH
27849: CALL_OW 273
27853: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27854: LD_VAR 0 11
27858: PPUSH
27859: LD_VAR 0 12
27863: PPUSH
27864: CALL_OW 488
27868: PUSH
27869: LD_VAR 0 11
27873: PPUSH
27874: LD_VAR 0 12
27878: PPUSH
27879: CALL_OW 428
27883: NOT
27884: AND
27885: IFFALSE 27908
// begin ComMoveXY ( tmp , _x , _y ) ;
27887: LD_VAR 0 13
27891: PPUSH
27892: LD_VAR 0 11
27896: PPUSH
27897: LD_VAR 0 12
27901: PPUSH
27902: CALL_OW 111
// break ;
27906: GO 27910
// end ; end ;
27908: GO 27795
27910: POP
27911: POP
// end ; end ;
27912: GO 27237
27914: POP
27915: POP
// end ;
27916: LD_VAR 0 8
27920: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27921: LD_INT 0
27923: PPUSH
// result := true ;
27924: LD_ADDR_VAR 0 3
27928: PUSH
27929: LD_INT 1
27931: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27932: LD_VAR 0 2
27936: PUSH
27937: LD_INT 24
27939: DOUBLE
27940: EQUAL
27941: IFTRUE 27951
27943: LD_INT 33
27945: DOUBLE
27946: EQUAL
27947: IFTRUE 27951
27949: GO 27976
27951: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_INT 32
27959: PPUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 321
27969: PUSH
27970: LD_INT 2
27972: EQUAL
27973: ST_TO_ADDR
27974: GO 28296
27976: LD_INT 20
27978: DOUBLE
27979: EQUAL
27980: IFTRUE 27984
27982: GO 28009
27984: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: LD_INT 6
27992: PPUSH
27993: LD_VAR 0 1
27997: PPUSH
27998: CALL_OW 321
28002: PUSH
28003: LD_INT 2
28005: EQUAL
28006: ST_TO_ADDR
28007: GO 28296
28009: LD_INT 22
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28023
28015: LD_INT 36
28017: DOUBLE
28018: EQUAL
28019: IFTRUE 28023
28021: GO 28048
28023: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_INT 15
28031: PPUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 321
28041: PUSH
28042: LD_INT 2
28044: EQUAL
28045: ST_TO_ADDR
28046: GO 28296
28048: LD_INT 30
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28081
28056: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 20
28064: PPUSH
28065: LD_VAR 0 1
28069: PPUSH
28070: CALL_OW 321
28074: PUSH
28075: LD_INT 2
28077: EQUAL
28078: ST_TO_ADDR
28079: GO 28296
28081: LD_INT 28
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28095
28087: LD_INT 21
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28095
28093: GO 28120
28095: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28096: LD_ADDR_VAR 0 3
28100: PUSH
28101: LD_INT 21
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 321
28113: PUSH
28114: LD_INT 2
28116: EQUAL
28117: ST_TO_ADDR
28118: GO 28296
28120: LD_INT 16
28122: DOUBLE
28123: EQUAL
28124: IFTRUE 28128
28126: GO 28155
28128: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28129: LD_ADDR_VAR 0 3
28133: PUSH
28134: LD_EXP 115
28138: PPUSH
28139: LD_VAR 0 1
28143: PPUSH
28144: CALL_OW 321
28148: PUSH
28149: LD_INT 2
28151: EQUAL
28152: ST_TO_ADDR
28153: GO 28296
28155: LD_INT 19
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28169
28161: LD_INT 23
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28196
28169: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_EXP 114
28179: PPUSH
28180: LD_VAR 0 1
28184: PPUSH
28185: CALL_OW 321
28189: PUSH
28190: LD_INT 2
28192: EQUAL
28193: ST_TO_ADDR
28194: GO 28296
28196: LD_INT 17
28198: DOUBLE
28199: EQUAL
28200: IFTRUE 28204
28202: GO 28229
28204: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28205: LD_ADDR_VAR 0 3
28209: PUSH
28210: LD_INT 39
28212: PPUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 321
28222: PUSH
28223: LD_INT 2
28225: EQUAL
28226: ST_TO_ADDR
28227: GO 28296
28229: LD_INT 18
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28262
28237: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 40
28245: PPUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: CALL_OW 321
28255: PUSH
28256: LD_INT 2
28258: EQUAL
28259: ST_TO_ADDR
28260: GO 28296
28262: LD_INT 27
28264: DOUBLE
28265: EQUAL
28266: IFTRUE 28270
28268: GO 28295
28270: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28271: LD_ADDR_VAR 0 3
28275: PUSH
28276: LD_INT 35
28278: PPUSH
28279: LD_VAR 0 1
28283: PPUSH
28284: CALL_OW 321
28288: PUSH
28289: LD_INT 2
28291: EQUAL
28292: ST_TO_ADDR
28293: GO 28296
28295: POP
// end ;
28296: LD_VAR 0 3
28300: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28301: LD_INT 0
28303: PPUSH
28304: PPUSH
28305: PPUSH
28306: PPUSH
28307: PPUSH
28308: PPUSH
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
// result := false ;
28314: LD_ADDR_VAR 0 6
28318: PUSH
28319: LD_INT 0
28321: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28322: LD_VAR 0 1
28326: NOT
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 266
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: IN
28348: NOT
28349: OR
28350: PUSH
28351: LD_VAR 0 2
28355: NOT
28356: OR
28357: PUSH
28358: LD_VAR 0 5
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: LD_INT 3
28374: PUSH
28375: LD_INT 4
28377: PUSH
28378: LD_INT 5
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: IN
28389: NOT
28390: OR
28391: PUSH
28392: LD_VAR 0 3
28396: PPUSH
28397: LD_VAR 0 4
28401: PPUSH
28402: CALL_OW 488
28406: NOT
28407: OR
28408: IFFALSE 28412
// exit ;
28410: GO 29148
// side := GetSide ( depot ) ;
28412: LD_ADDR_VAR 0 9
28416: PUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 255
28426: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28427: LD_VAR 0 9
28431: PPUSH
28432: LD_VAR 0 2
28436: PPUSH
28437: CALL 27921 0 2
28441: NOT
28442: IFFALSE 28446
// exit ;
28444: GO 29148
// pom := GetBase ( depot ) ;
28446: LD_ADDR_VAR 0 10
28450: PUSH
28451: LD_VAR 0 1
28455: PPUSH
28456: CALL_OW 274
28460: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28461: LD_ADDR_VAR 0 11
28465: PUSH
28466: LD_VAR 0 2
28470: PPUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 248
28480: PPUSH
28481: CALL_OW 450
28485: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28486: LD_VAR 0 10
28490: PPUSH
28491: LD_INT 1
28493: PPUSH
28494: CALL_OW 275
28498: PUSH
28499: LD_VAR 0 11
28503: PUSH
28504: LD_INT 1
28506: ARRAY
28507: GREATEREQUAL
28508: PUSH
28509: LD_VAR 0 10
28513: PPUSH
28514: LD_INT 2
28516: PPUSH
28517: CALL_OW 275
28521: PUSH
28522: LD_VAR 0 11
28526: PUSH
28527: LD_INT 2
28529: ARRAY
28530: GREATEREQUAL
28531: AND
28532: PUSH
28533: LD_VAR 0 10
28537: PPUSH
28538: LD_INT 3
28540: PPUSH
28541: CALL_OW 275
28545: PUSH
28546: LD_VAR 0 11
28550: PUSH
28551: LD_INT 3
28553: ARRAY
28554: GREATEREQUAL
28555: AND
28556: NOT
28557: IFFALSE 28561
// exit ;
28559: GO 29148
// if GetBType ( depot ) = b_depot then
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 266
28570: PUSH
28571: LD_INT 0
28573: EQUAL
28574: IFFALSE 28586
// dist := 28 else
28576: LD_ADDR_VAR 0 14
28580: PUSH
28581: LD_INT 28
28583: ST_TO_ADDR
28584: GO 28594
// dist := 36 ;
28586: LD_ADDR_VAR 0 14
28590: PUSH
28591: LD_INT 36
28593: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28594: LD_VAR 0 1
28598: PPUSH
28599: LD_VAR 0 3
28603: PPUSH
28604: LD_VAR 0 4
28608: PPUSH
28609: CALL_OW 297
28613: PUSH
28614: LD_VAR 0 14
28618: GREATER
28619: IFFALSE 28623
// exit ;
28621: GO 29148
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28623: LD_ADDR_VAR 0 12
28627: PUSH
28628: LD_VAR 0 2
28632: PPUSH
28633: LD_VAR 0 3
28637: PPUSH
28638: LD_VAR 0 4
28642: PPUSH
28643: LD_VAR 0 5
28647: PPUSH
28648: LD_VAR 0 1
28652: PPUSH
28653: CALL_OW 248
28657: PPUSH
28658: LD_INT 0
28660: PPUSH
28661: CALL 29153 0 6
28665: ST_TO_ADDR
// if not hexes then
28666: LD_VAR 0 12
28670: NOT
28671: IFFALSE 28675
// exit ;
28673: GO 29148
// hex := GetHexInfo ( x , y ) ;
28675: LD_ADDR_VAR 0 15
28679: PUSH
28680: LD_VAR 0 3
28684: PPUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: CALL_OW 546
28694: ST_TO_ADDR
// if hex [ 1 ] then
28695: LD_VAR 0 15
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: IFFALSE 28707
// exit ;
28705: GO 29148
// height := hex [ 2 ] ;
28707: LD_ADDR_VAR 0 13
28711: PUSH
28712: LD_VAR 0 15
28716: PUSH
28717: LD_INT 2
28719: ARRAY
28720: ST_TO_ADDR
// for i = 1 to hexes do
28721: LD_ADDR_VAR 0 7
28725: PUSH
28726: DOUBLE
28727: LD_INT 1
28729: DEC
28730: ST_TO_ADDR
28731: LD_VAR 0 12
28735: PUSH
28736: FOR_TO
28737: IFFALSE 29067
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28739: LD_VAR 0 12
28743: PUSH
28744: LD_VAR 0 7
28748: ARRAY
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: PPUSH
28754: LD_VAR 0 12
28758: PUSH
28759: LD_VAR 0 7
28763: ARRAY
28764: PUSH
28765: LD_INT 2
28767: ARRAY
28768: PPUSH
28769: CALL_OW 488
28773: NOT
28774: PUSH
28775: LD_VAR 0 12
28779: PUSH
28780: LD_VAR 0 7
28784: ARRAY
28785: PUSH
28786: LD_INT 1
28788: ARRAY
28789: PPUSH
28790: LD_VAR 0 12
28794: PUSH
28795: LD_VAR 0 7
28799: ARRAY
28800: PUSH
28801: LD_INT 2
28803: ARRAY
28804: PPUSH
28805: CALL_OW 428
28809: PUSH
28810: LD_INT 0
28812: GREATER
28813: OR
28814: PUSH
28815: LD_VAR 0 12
28819: PUSH
28820: LD_VAR 0 7
28824: ARRAY
28825: PUSH
28826: LD_INT 1
28828: ARRAY
28829: PPUSH
28830: LD_VAR 0 12
28834: PUSH
28835: LD_VAR 0 7
28839: ARRAY
28840: PUSH
28841: LD_INT 2
28843: ARRAY
28844: PPUSH
28845: CALL_OW 351
28849: OR
28850: IFFALSE 28856
// exit ;
28852: POP
28853: POP
28854: GO 29148
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28856: LD_ADDR_VAR 0 8
28860: PUSH
28861: LD_VAR 0 12
28865: PUSH
28866: LD_VAR 0 7
28870: ARRAY
28871: PUSH
28872: LD_INT 1
28874: ARRAY
28875: PPUSH
28876: LD_VAR 0 12
28880: PUSH
28881: LD_VAR 0 7
28885: ARRAY
28886: PUSH
28887: LD_INT 2
28889: ARRAY
28890: PPUSH
28891: CALL_OW 546
28895: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28896: LD_VAR 0 8
28900: PUSH
28901: LD_INT 1
28903: ARRAY
28904: PUSH
28905: LD_VAR 0 8
28909: PUSH
28910: LD_INT 2
28912: ARRAY
28913: PUSH
28914: LD_VAR 0 13
28918: PUSH
28919: LD_INT 2
28921: PLUS
28922: GREATER
28923: OR
28924: PUSH
28925: LD_VAR 0 8
28929: PUSH
28930: LD_INT 2
28932: ARRAY
28933: PUSH
28934: LD_VAR 0 13
28938: PUSH
28939: LD_INT 2
28941: MINUS
28942: LESS
28943: OR
28944: PUSH
28945: LD_VAR 0 8
28949: PUSH
28950: LD_INT 3
28952: ARRAY
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 8
28959: PUSH
28960: LD_INT 9
28962: PUSH
28963: LD_INT 10
28965: PUSH
28966: LD_INT 11
28968: PUSH
28969: LD_INT 12
28971: PUSH
28972: LD_INT 13
28974: PUSH
28975: LD_INT 16
28977: PUSH
28978: LD_INT 17
28980: PUSH
28981: LD_INT 18
28983: PUSH
28984: LD_INT 19
28986: PUSH
28987: LD_INT 20
28989: PUSH
28990: LD_INT 21
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: IN
29008: NOT
29009: OR
29010: PUSH
29011: LD_VAR 0 8
29015: PUSH
29016: LD_INT 5
29018: ARRAY
29019: NOT
29020: OR
29021: PUSH
29022: LD_VAR 0 8
29026: PUSH
29027: LD_INT 6
29029: ARRAY
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 2
29036: PUSH
29037: LD_INT 7
29039: PUSH
29040: LD_INT 9
29042: PUSH
29043: LD_INT 10
29045: PUSH
29046: LD_INT 11
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: IN
29057: NOT
29058: OR
29059: IFFALSE 29065
// exit ;
29061: POP
29062: POP
29063: GO 29148
// end ;
29065: GO 28736
29067: POP
29068: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29069: LD_VAR 0 9
29073: PPUSH
29074: LD_VAR 0 3
29078: PPUSH
29079: LD_VAR 0 4
29083: PPUSH
29084: LD_INT 20
29086: PPUSH
29087: CALL 21094 0 4
29091: PUSH
29092: LD_INT 4
29094: ARRAY
29095: IFFALSE 29099
// exit ;
29097: GO 29148
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29099: LD_VAR 0 2
29103: PUSH
29104: LD_INT 29
29106: PUSH
29107: LD_INT 30
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: IN
29114: PUSH
29115: LD_VAR 0 3
29119: PPUSH
29120: LD_VAR 0 4
29124: PPUSH
29125: LD_VAR 0 9
29129: PPUSH
29130: CALL_OW 440
29134: NOT
29135: AND
29136: IFFALSE 29140
// exit ;
29138: GO 29148
// result := true ;
29140: LD_ADDR_VAR 0 6
29144: PUSH
29145: LD_INT 1
29147: ST_TO_ADDR
// end ;
29148: LD_VAR 0 6
29152: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29153: LD_INT 0
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
29177: PPUSH
29178: PPUSH
29179: PPUSH
29180: PPUSH
29181: PPUSH
29182: PPUSH
29183: PPUSH
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
29199: PPUSH
29200: PPUSH
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
29209: PPUSH
29210: PPUSH
29211: PPUSH
29212: PPUSH
// result = [ ] ;
29213: LD_ADDR_VAR 0 7
29217: PUSH
29218: EMPTY
29219: ST_TO_ADDR
// temp_list = [ ] ;
29220: LD_ADDR_VAR 0 9
29224: PUSH
29225: EMPTY
29226: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29227: LD_VAR 0 4
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: LD_INT 4
29246: PUSH
29247: LD_INT 5
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: IN
29258: NOT
29259: PUSH
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: IN
29275: PUSH
29276: LD_VAR 0 5
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: IN
29295: NOT
29296: AND
29297: OR
29298: IFFALSE 29302
// exit ;
29300: GO 47693
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 6
29309: PUSH
29310: LD_INT 7
29312: PUSH
29313: LD_INT 8
29315: PUSH
29316: LD_INT 13
29318: PUSH
29319: LD_INT 12
29321: PUSH
29322: LD_INT 15
29324: PUSH
29325: LD_INT 11
29327: PUSH
29328: LD_INT 14
29330: PUSH
29331: LD_INT 10
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: IN
29345: IFFALSE 29355
// btype = b_lab ;
29347: LD_ADDR_VAR 0 1
29351: PUSH
29352: LD_INT 6
29354: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29355: LD_VAR 0 6
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: IN
29374: NOT
29375: PUSH
29376: LD_VAR 0 1
29380: PUSH
29381: LD_INT 0
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: LD_INT 3
29392: PUSH
29393: LD_INT 6
29395: PUSH
29396: LD_INT 36
29398: PUSH
29399: LD_INT 4
29401: PUSH
29402: LD_INT 5
29404: PUSH
29405: LD_INT 31
29407: PUSH
29408: LD_INT 32
29410: PUSH
29411: LD_INT 33
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: IN
29427: NOT
29428: PUSH
29429: LD_VAR 0 6
29433: PUSH
29434: LD_INT 1
29436: EQUAL
29437: AND
29438: OR
29439: PUSH
29440: LD_VAR 0 1
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: IN
29455: NOT
29456: PUSH
29457: LD_VAR 0 6
29461: PUSH
29462: LD_INT 2
29464: EQUAL
29465: AND
29466: OR
29467: IFFALSE 29477
// mode = 0 ;
29469: LD_ADDR_VAR 0 6
29473: PUSH
29474: LD_INT 0
29476: ST_TO_ADDR
// case mode of 0 :
29477: LD_VAR 0 6
29481: PUSH
29482: LD_INT 0
29484: DOUBLE
29485: EQUAL
29486: IFTRUE 29490
29488: GO 40943
29490: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29491: LD_ADDR_VAR 0 11
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: LD_INT 2
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29684: LD_ADDR_VAR 0 12
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29880: LD_ADDR_VAR 0 13
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 2
30027: NEG
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 3
30039: NEG
30040: PUSH
30041: LD_INT 2
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 3
30051: NEG
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30079: LD_ADDR_VAR 0 14
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: LD_INT 2
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30275: LD_ADDR_VAR 0 15
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30468: LD_ADDR_VAR 0 16
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30661: LD_ADDR_VAR 0 17
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30891: LD_ADDR_VAR 0 18
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 2
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31121: LD_ADDR_VAR 0 19
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31351: LD_ADDR_VAR 0 20
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 1
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: NEG
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31581: LD_ADDR_VAR 0 21
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31811: LD_ADDR_VAR 0 22
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 2
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: NEG
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32041: LD_ADDR_VAR 0 23
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32321: LD_ADDR_VAR 0 24
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 2
32520: NEG
32521: PUSH
32522: LD_INT 2
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 3
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32597: LD_ADDR_VAR 0 25
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 2
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 3
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32871: LD_ADDR_VAR 0 26
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: LD_INT 2
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33147: LD_ADDR_VAR 0 27
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: NEG
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 2
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: NEG
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: NEG
33347: PUSH
33348: LD_INT 2
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 3
33380: NEG
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 3
33392: NEG
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33427: LD_ADDR_VAR 0 28
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 2
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 2
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 2
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: LD_INT 3
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 3
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: LD_INT 2
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33709: LD_ADDR_VAR 0 29
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 3
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 3
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33988: LD_ADDR_VAR 0 30
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: LD_INT 2
34073: NEG
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 2
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: PUSH
34211: LD_INT 3
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: NEG
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34266: LD_ADDR_VAR 0 31
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 3
34509: NEG
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34544: LD_ADDR_VAR 0 32
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 2
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 3
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 3
34787: NEG
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34822: LD_ADDR_VAR 0 33
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: NEG
35013: PUSH
35014: LD_INT 3
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 3
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 3
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35101: LD_ADDR_VAR 0 34
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 1
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: LD_INT 3
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 3
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 3
35346: NEG
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35381: LD_ADDR_VAR 0 35
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35493: LD_ADDR_VAR 0 36
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35605: LD_ADDR_VAR 0 37
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35717: LD_ADDR_VAR 0 38
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35829: LD_ADDR_VAR 0 39
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 2
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35941: LD_ADDR_VAR 0 40
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36053: LD_ADDR_VAR 0 41
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: NEG
36232: PUSH
36233: LD_INT 2
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 3
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 2
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 3
36350: NEG
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 3
36362: NEG
36363: PUSH
36364: LD_INT 3
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36403: LD_ADDR_VAR 0 42
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: LD_INT 2
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: NEG
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 3
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 3
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 3
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: LD_INT 3
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: PUSH
36660: LD_INT 3
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 3
36700: NEG
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 3
36712: NEG
36713: PUSH
36714: LD_INT 3
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36753: LD_ADDR_VAR 0 43
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 2
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: LD_INT 3
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 3
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 3
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 3
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: LD_INT 3
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 3
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: NEG
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 3
37049: NEG
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 3
37060: NEG
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37101: LD_ADDR_VAR 0 44
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: NEG
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: NEG
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: NEG
37292: PUSH
37293: LD_INT 3
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: LD_INT 3
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 3
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 3
37375: NEG
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: NEG
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 3
37398: NEG
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 3
37410: NEG
37411: PUSH
37412: LD_INT 3
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37451: LD_ADDR_VAR 0 45
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 2
37641: NEG
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 3
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 3
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 3
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 3
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 3
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 3
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 3
37748: NEG
37749: PUSH
37750: LD_INT 2
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 3
37760: NEG
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37801: LD_ADDR_VAR 0 46
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 2
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: NEG
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: NEG
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 3
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 3
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 3
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 3
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38149: LD_ADDR_VAR 0 47
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38300: LD_ADDR_VAR 0 48
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38447: LD_ADDR_VAR 0 49
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38591: LD_ADDR_VAR 0 50
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38735: LD_ADDR_VAR 0 51
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: NEG
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38882: LD_ADDR_VAR 0 52
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39033: LD_ADDR_VAR 0 53
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39263: LD_ADDR_VAR 0 54
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39493: LD_ADDR_VAR 0 55
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39723: LD_ADDR_VAR 0 56
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39953: LD_ADDR_VAR 0 57
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40183: LD_ADDR_VAR 0 58
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40413: LD_ADDR_VAR 0 59
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40501: LD_ADDR_VAR 0 60
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40589: LD_ADDR_VAR 0 61
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40677: LD_ADDR_VAR 0 62
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40765: LD_ADDR_VAR 0 63
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40853: LD_ADDR_VAR 0 64
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: ST_TO_ADDR
// end ; 1 :
40941: GO 46838
40943: LD_INT 1
40945: DOUBLE
40946: EQUAL
40947: IFTRUE 40951
40949: GO 43574
40951: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40952: LD_ADDR_VAR 0 11
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 3
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 3
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40996: LD_ADDR_VAR 0 12
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 3
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41037: LD_ADDR_VAR 0 13
41041: PUSH
41042: LD_INT 3
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41077: LD_ADDR_VAR 0 14
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 3
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41118: LD_ADDR_VAR 0 15
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41162: LD_ADDR_VAR 0 16
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 3
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 3
41193: NEG
41194: PUSH
41195: LD_INT 3
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41208: LD_ADDR_VAR 0 17
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 3
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41252: LD_ADDR_VAR 0 18
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 3
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41293: LD_ADDR_VAR 0 19
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 3
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41333: LD_ADDR_VAR 0 20
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 3
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41374: LD_ADDR_VAR 0 21
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 3
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41418: LD_ADDR_VAR 0 22
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: LD_INT 3
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 3
41437: NEG
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 3
41449: NEG
41450: PUSH
41451: LD_INT 3
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41464: LD_ADDR_VAR 0 23
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 3
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 4
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 3
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41508: LD_ADDR_VAR 0 24
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 4
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41549: LD_ADDR_VAR 0 25
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 4
41566: PUSH
41567: LD_INT 3
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: LD_INT 4
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41589: LD_ADDR_VAR 0 26
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 4
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 3
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41630: LD_ADDR_VAR 0 27
41634: PUSH
41635: LD_INT 3
41637: NEG
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: NEG
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 4
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41674: LD_ADDR_VAR 0 28
41678: PUSH
41679: LD_INT 3
41681: NEG
41682: PUSH
41683: LD_INT 3
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 3
41693: NEG
41694: PUSH
41695: LD_INT 4
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 4
41705: NEG
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41720: LD_ADDR_VAR 0 29
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 3
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: LD_INT 4
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 4
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 3
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 5
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 5
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 4
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 6
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 6
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 5
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41875: LD_ADDR_VAR 0 30
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 3
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 4
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 4
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 4
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 5
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 5
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 6
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 6
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42018: LD_ADDR_VAR 0 31
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 4
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 4
42065: PUSH
42066: LD_INT 4
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 4
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 5
42085: PUSH
42086: LD_INT 4
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 5
42095: PUSH
42096: LD_INT 5
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: LD_INT 5
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 6
42115: PUSH
42116: LD_INT 5
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 6
42125: PUSH
42126: LD_INT 6
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 5
42135: PUSH
42136: LD_INT 6
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42157: LD_ADDR_VAR 0 32
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 3
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: LD_INT 4
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 4
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 5
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 5
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 4
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 6
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 6
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: LD_INT 5
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42300: LD_ADDR_VAR 0 33
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 3
42329: NEG
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 4
42352: NEG
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 4
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 4
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 5
42386: NEG
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 5
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 5
42409: NEG
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 6
42420: NEG
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 6
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42455: LD_ADDR_VAR 0 34
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 3
42498: NEG
42499: PUSH
42500: LD_INT 4
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 4
42510: NEG
42511: PUSH
42512: LD_INT 3
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 4
42522: NEG
42523: PUSH
42524: LD_INT 4
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 4
42534: NEG
42535: PUSH
42536: LD_INT 5
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 5
42546: NEG
42547: PUSH
42548: LD_INT 4
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 5
42558: NEG
42559: PUSH
42560: LD_INT 5
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 5
42570: NEG
42571: PUSH
42572: LD_INT 6
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 6
42582: NEG
42583: PUSH
42584: LD_INT 5
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 6
42594: NEG
42595: PUSH
42596: LD_INT 6
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42618: LD_ADDR_VAR 0 41
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42662: LD_ADDR_VAR 0 42
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42703: LD_ADDR_VAR 0 43
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42743: LD_ADDR_VAR 0 44
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42784: LD_ADDR_VAR 0 45
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42828: LD_ADDR_VAR 0 46
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 3
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42874: LD_ADDR_VAR 0 47
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 3
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42907: LD_ADDR_VAR 0 48
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42938: LD_ADDR_VAR 0 49
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42967: LD_ADDR_VAR 0 50
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 3
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42996: LD_ADDR_VAR 0 51
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43027: LD_ADDR_VAR 0 52
43031: PUSH
43032: LD_INT 3
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43060: LD_ADDR_VAR 0 53
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 3
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43104: LD_ADDR_VAR 0 54
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43145: LD_ADDR_VAR 0 55
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43185: LD_ADDR_VAR 0 56
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: LIST
43225: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43226: LD_ADDR_VAR 0 57
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 3
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43270: LD_ADDR_VAR 0 58
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43316: LD_ADDR_VAR 0 59
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43360: LD_ADDR_VAR 0 60
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43401: LD_ADDR_VAR 0 61
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43441: LD_ADDR_VAR 0 62
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43482: LD_ADDR_VAR 0 63
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43526: LD_ADDR_VAR 0 64
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// end ; 2 :
43572: GO 46838
43574: LD_INT 2
43576: DOUBLE
43577: EQUAL
43578: IFTRUE 43582
43580: GO 46837
43582: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43583: LD_ADDR_VAR 0 29
43587: PUSH
43588: LD_INT 4
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 5
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 5
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 4
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 5
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 4
43713: PUSH
43714: LD_INT 4
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 4
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 4
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 5
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 5
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 3
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: LD_INT 5
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 3
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 3
43911: NEG
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 4
43922: NEG
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 4
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 4
43945: NEG
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 4
43968: NEG
43969: PUSH
43970: LD_INT 4
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 4
43980: NEG
43981: PUSH
43982: LD_INT 5
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: LD_INT 4
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 4
44016: NEG
44017: PUSH
44018: LD_INT 3
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 5
44028: NEG
44029: PUSH
44030: LD_INT 4
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 5
44040: NEG
44041: PUSH
44042: LD_INT 5
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: LD_INT 5
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 5
44064: NEG
44065: PUSH
44066: LD_INT 3
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44121: LD_ADDR_VAR 0 30
44125: PUSH
44126: LD_INT 4
44128: PUSH
44129: LD_INT 4
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 4
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 5
44148: PUSH
44149: LD_INT 4
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 5
44158: PUSH
44159: LD_INT 5
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 4
44168: PUSH
44169: LD_INT 5
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 3
44178: PUSH
44179: LD_INT 4
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: LD_INT 3
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 5
44198: PUSH
44199: LD_INT 3
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: LD_INT 5
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 4
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 4
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 4
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 4
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 4
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 4
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 5
44367: NEG
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 5
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 5
44390: NEG
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: NEG
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 3
44413: NEG
44414: PUSH
44415: LD_INT 3
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: LD_INT 4
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 3
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 3
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 4
44473: NEG
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 4
44485: NEG
44486: PUSH
44487: LD_INT 4
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: LD_INT 4
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 4
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 4
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 5
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 4
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 4
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 5
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 3
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 5
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44668: LD_ADDR_VAR 0 31
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 4
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 4
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 5
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 5
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 4
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 5
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 3
44768: NEG
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 4
44824: NEG
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 4
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 4
44847: NEG
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 4
44870: NEG
44871: PUSH
44872: LD_INT 4
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 4
44882: NEG
44883: PUSH
44884: LD_INT 5
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: LD_INT 4
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 3
44906: NEG
44907: PUSH
44908: LD_INT 3
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 4
44918: NEG
44919: PUSH
44920: LD_INT 3
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 5
44930: NEG
44931: PUSH
44932: LD_INT 4
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 5
44942: NEG
44943: PUSH
44944: LD_INT 5
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: NEG
44955: PUSH
44956: LD_INT 5
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 5
44966: NEG
44967: PUSH
44968: LD_INT 3
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 3
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 4
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 3
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 4
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 4
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 4
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 4
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 5
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 5
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 4
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 5
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45218: LD_ADDR_VAR 0 32
45222: PUSH
45223: LD_INT 4
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 4
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 3
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 3
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 4
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 5
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 5
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 5
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: LD_INT 4
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: NEG
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 4
45387: NEG
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 4
45399: NEG
45400: PUSH
45401: LD_INT 4
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 4
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 4
45423: NEG
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 4
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 5
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 4
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 4
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 5
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: LD_INT 5
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 4
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 4
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 4
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 4
45630: PUSH
45631: LD_INT 4
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 4
45640: PUSH
45641: LD_INT 3
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 5
45650: PUSH
45651: LD_INT 4
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 5
45660: PUSH
45661: LD_INT 5
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 4
45670: PUSH
45671: LD_INT 5
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: LD_INT 4
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 5
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: LD_INT 5
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45765: LD_ADDR_VAR 0 33
45769: PUSH
45770: LD_INT 4
45772: NEG
45773: PUSH
45774: LD_INT 4
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 4
45784: NEG
45785: PUSH
45786: LD_INT 5
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: LD_INT 4
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: LD_INT 3
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 4
45820: NEG
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 5
45832: NEG
45833: PUSH
45834: LD_INT 4
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 5
45844: NEG
45845: PUSH
45846: LD_INT 5
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 3
45856: NEG
45857: PUSH
45858: LD_INT 5
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 5
45868: NEG
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 4
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 3
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 4
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 4
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 4
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 4
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 5
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 5
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 4
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 5
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 4
46095: PUSH
46096: LD_INT 3
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 4
46105: PUSH
46106: LD_INT 4
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 4
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 4
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 4
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 4
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 3
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 4
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 5
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 5
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 5
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46303: LD_ADDR_VAR 0 34
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 4
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 5
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 4
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 3
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 5
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 5
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 4
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 4
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 4
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 4
46505: PUSH
46506: LD_INT 4
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 4
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 5
46525: PUSH
46526: LD_INT 4
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 5
46535: PUSH
46536: LD_INT 5
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: LD_INT 5
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: PUSH
46556: LD_INT 4
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: PUSH
46566: LD_INT 3
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 5
46575: PUSH
46576: LD_INT 3
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 4
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 4
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 4
46688: NEG
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 4
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 4
46733: NEG
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 5
46744: NEG
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 5
46755: NEG
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 5
46767: NEG
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
// end ; end ;
46835: GO 46838
46837: POP
// case btype of b_depot , b_warehouse :
46838: LD_VAR 0 1
46842: PUSH
46843: LD_INT 0
46845: DOUBLE
46846: EQUAL
46847: IFTRUE 46857
46849: LD_INT 1
46851: DOUBLE
46852: EQUAL
46853: IFTRUE 46857
46855: GO 47058
46857: POP
// case nation of nation_american :
46858: LD_VAR 0 5
46862: PUSH
46863: LD_INT 1
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46871
46869: GO 46927
46871: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46872: LD_ADDR_VAR 0 9
46876: PUSH
46877: LD_VAR 0 11
46881: PUSH
46882: LD_VAR 0 12
46886: PUSH
46887: LD_VAR 0 13
46891: PUSH
46892: LD_VAR 0 14
46896: PUSH
46897: LD_VAR 0 15
46901: PUSH
46902: LD_VAR 0 16
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: PUSH
46915: LD_VAR 0 4
46919: PUSH
46920: LD_INT 1
46922: PLUS
46923: ARRAY
46924: ST_TO_ADDR
46925: GO 47056
46927: LD_INT 2
46929: DOUBLE
46930: EQUAL
46931: IFTRUE 46935
46933: GO 46991
46935: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46936: LD_ADDR_VAR 0 9
46940: PUSH
46941: LD_VAR 0 17
46945: PUSH
46946: LD_VAR 0 18
46950: PUSH
46951: LD_VAR 0 19
46955: PUSH
46956: LD_VAR 0 20
46960: PUSH
46961: LD_VAR 0 21
46965: PUSH
46966: LD_VAR 0 22
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: LD_VAR 0 4
46983: PUSH
46984: LD_INT 1
46986: PLUS
46987: ARRAY
46988: ST_TO_ADDR
46989: GO 47056
46991: LD_INT 3
46993: DOUBLE
46994: EQUAL
46995: IFTRUE 46999
46997: GO 47055
46999: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47000: LD_ADDR_VAR 0 9
47004: PUSH
47005: LD_VAR 0 23
47009: PUSH
47010: LD_VAR 0 24
47014: PUSH
47015: LD_VAR 0 25
47019: PUSH
47020: LD_VAR 0 26
47024: PUSH
47025: LD_VAR 0 27
47029: PUSH
47030: LD_VAR 0 28
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: PUSH
47043: LD_VAR 0 4
47047: PUSH
47048: LD_INT 1
47050: PLUS
47051: ARRAY
47052: ST_TO_ADDR
47053: GO 47056
47055: POP
47056: GO 47611
47058: LD_INT 2
47060: DOUBLE
47061: EQUAL
47062: IFTRUE 47072
47064: LD_INT 3
47066: DOUBLE
47067: EQUAL
47068: IFTRUE 47072
47070: GO 47128
47072: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47073: LD_ADDR_VAR 0 9
47077: PUSH
47078: LD_VAR 0 29
47082: PUSH
47083: LD_VAR 0 30
47087: PUSH
47088: LD_VAR 0 31
47092: PUSH
47093: LD_VAR 0 32
47097: PUSH
47098: LD_VAR 0 33
47102: PUSH
47103: LD_VAR 0 34
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: PUSH
47116: LD_VAR 0 4
47120: PUSH
47121: LD_INT 1
47123: PLUS
47124: ARRAY
47125: ST_TO_ADDR
47126: GO 47611
47128: LD_INT 16
47130: DOUBLE
47131: EQUAL
47132: IFTRUE 47190
47134: LD_INT 17
47136: DOUBLE
47137: EQUAL
47138: IFTRUE 47190
47140: LD_INT 18
47142: DOUBLE
47143: EQUAL
47144: IFTRUE 47190
47146: LD_INT 19
47148: DOUBLE
47149: EQUAL
47150: IFTRUE 47190
47152: LD_INT 22
47154: DOUBLE
47155: EQUAL
47156: IFTRUE 47190
47158: LD_INT 20
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47190
47164: LD_INT 21
47166: DOUBLE
47167: EQUAL
47168: IFTRUE 47190
47170: LD_INT 23
47172: DOUBLE
47173: EQUAL
47174: IFTRUE 47190
47176: LD_INT 24
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47190
47182: LD_INT 25
47184: DOUBLE
47185: EQUAL
47186: IFTRUE 47190
47188: GO 47246
47190: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47191: LD_ADDR_VAR 0 9
47195: PUSH
47196: LD_VAR 0 35
47200: PUSH
47201: LD_VAR 0 36
47205: PUSH
47206: LD_VAR 0 37
47210: PUSH
47211: LD_VAR 0 38
47215: PUSH
47216: LD_VAR 0 39
47220: PUSH
47221: LD_VAR 0 40
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: PUSH
47234: LD_VAR 0 4
47238: PUSH
47239: LD_INT 1
47241: PLUS
47242: ARRAY
47243: ST_TO_ADDR
47244: GO 47611
47246: LD_INT 6
47248: DOUBLE
47249: EQUAL
47250: IFTRUE 47302
47252: LD_INT 7
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47302
47258: LD_INT 8
47260: DOUBLE
47261: EQUAL
47262: IFTRUE 47302
47264: LD_INT 13
47266: DOUBLE
47267: EQUAL
47268: IFTRUE 47302
47270: LD_INT 12
47272: DOUBLE
47273: EQUAL
47274: IFTRUE 47302
47276: LD_INT 15
47278: DOUBLE
47279: EQUAL
47280: IFTRUE 47302
47282: LD_INT 11
47284: DOUBLE
47285: EQUAL
47286: IFTRUE 47302
47288: LD_INT 14
47290: DOUBLE
47291: EQUAL
47292: IFTRUE 47302
47294: LD_INT 10
47296: DOUBLE
47297: EQUAL
47298: IFTRUE 47302
47300: GO 47358
47302: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47303: LD_ADDR_VAR 0 9
47307: PUSH
47308: LD_VAR 0 41
47312: PUSH
47313: LD_VAR 0 42
47317: PUSH
47318: LD_VAR 0 43
47322: PUSH
47323: LD_VAR 0 44
47327: PUSH
47328: LD_VAR 0 45
47332: PUSH
47333: LD_VAR 0 46
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: PUSH
47346: LD_VAR 0 4
47350: PUSH
47351: LD_INT 1
47353: PLUS
47354: ARRAY
47355: ST_TO_ADDR
47356: GO 47611
47358: LD_INT 36
47360: DOUBLE
47361: EQUAL
47362: IFTRUE 47366
47364: GO 47422
47366: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47367: LD_ADDR_VAR 0 9
47371: PUSH
47372: LD_VAR 0 47
47376: PUSH
47377: LD_VAR 0 48
47381: PUSH
47382: LD_VAR 0 49
47386: PUSH
47387: LD_VAR 0 50
47391: PUSH
47392: LD_VAR 0 51
47396: PUSH
47397: LD_VAR 0 52
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: PUSH
47410: LD_VAR 0 4
47414: PUSH
47415: LD_INT 1
47417: PLUS
47418: ARRAY
47419: ST_TO_ADDR
47420: GO 47611
47422: LD_INT 4
47424: DOUBLE
47425: EQUAL
47426: IFTRUE 47448
47428: LD_INT 5
47430: DOUBLE
47431: EQUAL
47432: IFTRUE 47448
47434: LD_INT 34
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47448
47440: LD_INT 37
47442: DOUBLE
47443: EQUAL
47444: IFTRUE 47448
47446: GO 47504
47448: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47449: LD_ADDR_VAR 0 9
47453: PUSH
47454: LD_VAR 0 53
47458: PUSH
47459: LD_VAR 0 54
47463: PUSH
47464: LD_VAR 0 55
47468: PUSH
47469: LD_VAR 0 56
47473: PUSH
47474: LD_VAR 0 57
47478: PUSH
47479: LD_VAR 0 58
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: PUSH
47492: LD_VAR 0 4
47496: PUSH
47497: LD_INT 1
47499: PLUS
47500: ARRAY
47501: ST_TO_ADDR
47502: GO 47611
47504: LD_INT 31
47506: DOUBLE
47507: EQUAL
47508: IFTRUE 47554
47510: LD_INT 32
47512: DOUBLE
47513: EQUAL
47514: IFTRUE 47554
47516: LD_INT 33
47518: DOUBLE
47519: EQUAL
47520: IFTRUE 47554
47522: LD_INT 27
47524: DOUBLE
47525: EQUAL
47526: IFTRUE 47554
47528: LD_INT 26
47530: DOUBLE
47531: EQUAL
47532: IFTRUE 47554
47534: LD_INT 28
47536: DOUBLE
47537: EQUAL
47538: IFTRUE 47554
47540: LD_INT 29
47542: DOUBLE
47543: EQUAL
47544: IFTRUE 47554
47546: LD_INT 30
47548: DOUBLE
47549: EQUAL
47550: IFTRUE 47554
47552: GO 47610
47554: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47555: LD_ADDR_VAR 0 9
47559: PUSH
47560: LD_VAR 0 59
47564: PUSH
47565: LD_VAR 0 60
47569: PUSH
47570: LD_VAR 0 61
47574: PUSH
47575: LD_VAR 0 62
47579: PUSH
47580: LD_VAR 0 63
47584: PUSH
47585: LD_VAR 0 64
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: PUSH
47598: LD_VAR 0 4
47602: PUSH
47603: LD_INT 1
47605: PLUS
47606: ARRAY
47607: ST_TO_ADDR
47608: GO 47611
47610: POP
// temp_list2 = [ ] ;
47611: LD_ADDR_VAR 0 10
47615: PUSH
47616: EMPTY
47617: ST_TO_ADDR
// for i in temp_list do
47618: LD_ADDR_VAR 0 8
47622: PUSH
47623: LD_VAR 0 9
47627: PUSH
47628: FOR_IN
47629: IFFALSE 47681
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47631: LD_ADDR_VAR 0 10
47635: PUSH
47636: LD_VAR 0 10
47640: PUSH
47641: LD_VAR 0 8
47645: PUSH
47646: LD_INT 1
47648: ARRAY
47649: PUSH
47650: LD_VAR 0 2
47654: PLUS
47655: PUSH
47656: LD_VAR 0 8
47660: PUSH
47661: LD_INT 2
47663: ARRAY
47664: PUSH
47665: LD_VAR 0 3
47669: PLUS
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: ADD
47678: ST_TO_ADDR
47679: GO 47628
47681: POP
47682: POP
// result = temp_list2 ;
47683: LD_ADDR_VAR 0 7
47687: PUSH
47688: LD_VAR 0 10
47692: ST_TO_ADDR
// end ;
47693: LD_VAR 0 7
47697: RET
// export function EnemyInRange ( unit , dist ) ; begin
47698: LD_INT 0
47700: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47701: LD_ADDR_VAR 0 3
47705: PUSH
47706: LD_VAR 0 1
47710: PPUSH
47711: CALL_OW 255
47715: PPUSH
47716: LD_VAR 0 1
47720: PPUSH
47721: CALL_OW 250
47725: PPUSH
47726: LD_VAR 0 1
47730: PPUSH
47731: CALL_OW 251
47735: PPUSH
47736: LD_VAR 0 2
47740: PPUSH
47741: CALL 21094 0 4
47745: PUSH
47746: LD_INT 4
47748: ARRAY
47749: ST_TO_ADDR
// end ;
47750: LD_VAR 0 3
47754: RET
// export function PlayerSeeMe ( unit ) ; begin
47755: LD_INT 0
47757: PPUSH
// result := See ( your_side , unit ) ;
47758: LD_ADDR_VAR 0 2
47762: PUSH
47763: LD_OWVAR 2
47767: PPUSH
47768: LD_VAR 0 1
47772: PPUSH
47773: CALL_OW 292
47777: ST_TO_ADDR
// end ;
47778: LD_VAR 0 2
47782: RET
// export function ReverseDir ( unit ) ; begin
47783: LD_INT 0
47785: PPUSH
// if not unit then
47786: LD_VAR 0 1
47790: NOT
47791: IFFALSE 47795
// exit ;
47793: GO 47818
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47795: LD_ADDR_VAR 0 2
47799: PUSH
47800: LD_VAR 0 1
47804: PPUSH
47805: CALL_OW 254
47809: PUSH
47810: LD_INT 3
47812: PLUS
47813: PUSH
47814: LD_INT 6
47816: MOD
47817: ST_TO_ADDR
// end ;
47818: LD_VAR 0 2
47822: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
47823: LD_INT 0
47825: PPUSH
47826: PPUSH
47827: PPUSH
47828: PPUSH
47829: PPUSH
// if not hexes then
47830: LD_VAR 0 2
47834: NOT
47835: IFFALSE 47839
// exit ;
47837: GO 47987
// dist := 9999 ;
47839: LD_ADDR_VAR 0 5
47843: PUSH
47844: LD_INT 9999
47846: ST_TO_ADDR
// for i = 1 to hexes do
47847: LD_ADDR_VAR 0 4
47851: PUSH
47852: DOUBLE
47853: LD_INT 1
47855: DEC
47856: ST_TO_ADDR
47857: LD_VAR 0 2
47861: PUSH
47862: FOR_TO
47863: IFFALSE 47975
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
47865: LD_VAR 0 1
47869: PPUSH
47870: LD_VAR 0 2
47874: PUSH
47875: LD_VAR 0 4
47879: ARRAY
47880: PUSH
47881: LD_INT 1
47883: ARRAY
47884: PPUSH
47885: LD_VAR 0 2
47889: PUSH
47890: LD_VAR 0 4
47894: ARRAY
47895: PUSH
47896: LD_INT 2
47898: ARRAY
47899: PPUSH
47900: CALL_OW 297
47904: PUSH
47905: LD_VAR 0 5
47909: LESS
47910: IFFALSE 47973
// begin hex := hexes [ i ] ;
47912: LD_ADDR_VAR 0 7
47916: PUSH
47917: LD_VAR 0 2
47921: PUSH
47922: LD_VAR 0 4
47926: ARRAY
47927: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47928: LD_ADDR_VAR 0 5
47932: PUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: LD_VAR 0 2
47942: PUSH
47943: LD_VAR 0 4
47947: ARRAY
47948: PUSH
47949: LD_INT 1
47951: ARRAY
47952: PPUSH
47953: LD_VAR 0 2
47957: PUSH
47958: LD_VAR 0 4
47962: ARRAY
47963: PUSH
47964: LD_INT 2
47966: ARRAY
47967: PPUSH
47968: CALL_OW 297
47972: ST_TO_ADDR
// end ; end ;
47973: GO 47862
47975: POP
47976: POP
// result := hex ;
47977: LD_ADDR_VAR 0 3
47981: PUSH
47982: LD_VAR 0 7
47986: ST_TO_ADDR
// end ;
47987: LD_VAR 0 3
47991: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47992: LD_INT 0
47994: PPUSH
47995: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47996: LD_VAR 0 1
48000: NOT
48001: PUSH
48002: LD_VAR 0 1
48006: PUSH
48007: LD_INT 21
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 23
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PPUSH
48031: CALL_OW 69
48035: IN
48036: NOT
48037: OR
48038: IFFALSE 48042
// exit ;
48040: GO 48089
// for i = 1 to 3 do
48042: LD_ADDR_VAR 0 3
48046: PUSH
48047: DOUBLE
48048: LD_INT 1
48050: DEC
48051: ST_TO_ADDR
48052: LD_INT 3
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48087
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48058: LD_VAR 0 1
48062: PPUSH
48063: CALL_OW 250
48067: PPUSH
48068: LD_VAR 0 1
48072: PPUSH
48073: CALL_OW 251
48077: PPUSH
48078: LD_INT 1
48080: PPUSH
48081: CALL_OW 453
48085: GO 48055
48087: POP
48088: POP
// end ;
48089: LD_VAR 0 2
48093: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48094: LD_INT 0
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48102: LD_VAR 0 1
48106: NOT
48107: PUSH
48108: LD_VAR 0 2
48112: NOT
48113: OR
48114: PUSH
48115: LD_VAR 0 1
48119: PPUSH
48120: CALL_OW 314
48124: OR
48125: IFFALSE 48129
// exit ;
48127: GO 48570
// x := GetX ( enemy_unit ) ;
48129: LD_ADDR_VAR 0 7
48133: PUSH
48134: LD_VAR 0 2
48138: PPUSH
48139: CALL_OW 250
48143: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48144: LD_ADDR_VAR 0 8
48148: PUSH
48149: LD_VAR 0 2
48153: PPUSH
48154: CALL_OW 251
48158: ST_TO_ADDR
// if not x or not y then
48159: LD_VAR 0 7
48163: NOT
48164: PUSH
48165: LD_VAR 0 8
48169: NOT
48170: OR
48171: IFFALSE 48175
// exit ;
48173: GO 48570
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48175: LD_ADDR_VAR 0 6
48179: PUSH
48180: LD_VAR 0 7
48184: PPUSH
48185: LD_INT 0
48187: PPUSH
48188: LD_INT 4
48190: PPUSH
48191: CALL_OW 272
48195: PUSH
48196: LD_VAR 0 8
48200: PPUSH
48201: LD_INT 0
48203: PPUSH
48204: LD_INT 4
48206: PPUSH
48207: CALL_OW 273
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_VAR 0 7
48220: PPUSH
48221: LD_INT 1
48223: PPUSH
48224: LD_INT 4
48226: PPUSH
48227: CALL_OW 272
48231: PUSH
48232: LD_VAR 0 8
48236: PPUSH
48237: LD_INT 1
48239: PPUSH
48240: LD_INT 4
48242: PPUSH
48243: CALL_OW 273
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_VAR 0 7
48256: PPUSH
48257: LD_INT 2
48259: PPUSH
48260: LD_INT 4
48262: PPUSH
48263: CALL_OW 272
48267: PUSH
48268: LD_VAR 0 8
48272: PPUSH
48273: LD_INT 2
48275: PPUSH
48276: LD_INT 4
48278: PPUSH
48279: CALL_OW 273
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_VAR 0 7
48292: PPUSH
48293: LD_INT 3
48295: PPUSH
48296: LD_INT 4
48298: PPUSH
48299: CALL_OW 272
48303: PUSH
48304: LD_VAR 0 8
48308: PPUSH
48309: LD_INT 3
48311: PPUSH
48312: LD_INT 4
48314: PPUSH
48315: CALL_OW 273
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_VAR 0 7
48328: PPUSH
48329: LD_INT 4
48331: PPUSH
48332: LD_INT 4
48334: PPUSH
48335: CALL_OW 272
48339: PUSH
48340: LD_VAR 0 8
48344: PPUSH
48345: LD_INT 4
48347: PPUSH
48348: LD_INT 4
48350: PPUSH
48351: CALL_OW 273
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_VAR 0 7
48364: PPUSH
48365: LD_INT 5
48367: PPUSH
48368: LD_INT 4
48370: PPUSH
48371: CALL_OW 272
48375: PUSH
48376: LD_VAR 0 8
48380: PPUSH
48381: LD_INT 5
48383: PPUSH
48384: LD_INT 4
48386: PPUSH
48387: CALL_OW 273
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// for i = tmp downto 1 do
48404: LD_ADDR_VAR 0 4
48408: PUSH
48409: DOUBLE
48410: LD_VAR 0 6
48414: INC
48415: ST_TO_ADDR
48416: LD_INT 1
48418: PUSH
48419: FOR_DOWNTO
48420: IFFALSE 48521
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48422: LD_VAR 0 6
48426: PUSH
48427: LD_VAR 0 4
48431: ARRAY
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: LD_VAR 0 6
48441: PUSH
48442: LD_VAR 0 4
48446: ARRAY
48447: PUSH
48448: LD_INT 2
48450: ARRAY
48451: PPUSH
48452: CALL_OW 488
48456: NOT
48457: PUSH
48458: LD_VAR 0 6
48462: PUSH
48463: LD_VAR 0 4
48467: ARRAY
48468: PUSH
48469: LD_INT 1
48471: ARRAY
48472: PPUSH
48473: LD_VAR 0 6
48477: PUSH
48478: LD_VAR 0 4
48482: ARRAY
48483: PUSH
48484: LD_INT 2
48486: ARRAY
48487: PPUSH
48488: CALL_OW 428
48492: PUSH
48493: LD_INT 0
48495: NONEQUAL
48496: OR
48497: IFFALSE 48519
// tmp := Delete ( tmp , i ) ;
48499: LD_ADDR_VAR 0 6
48503: PUSH
48504: LD_VAR 0 6
48508: PPUSH
48509: LD_VAR 0 4
48513: PPUSH
48514: CALL_OW 3
48518: ST_TO_ADDR
48519: GO 48419
48521: POP
48522: POP
// j := GetClosestHex ( unit , tmp ) ;
48523: LD_ADDR_VAR 0 5
48527: PUSH
48528: LD_VAR 0 1
48532: PPUSH
48533: LD_VAR 0 6
48537: PPUSH
48538: CALL 47823 0 2
48542: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48543: LD_VAR 0 1
48547: PPUSH
48548: LD_VAR 0 5
48552: PUSH
48553: LD_INT 1
48555: ARRAY
48556: PPUSH
48557: LD_VAR 0 5
48561: PUSH
48562: LD_INT 2
48564: ARRAY
48565: PPUSH
48566: CALL_OW 111
// end ;
48570: LD_VAR 0 3
48574: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48575: LD_INT 0
48577: PPUSH
48578: PPUSH
48579: PPUSH
// uc_side = 0 ;
48580: LD_ADDR_OWVAR 20
48584: PUSH
48585: LD_INT 0
48587: ST_TO_ADDR
// uc_nation = 0 ;
48588: LD_ADDR_OWVAR 21
48592: PUSH
48593: LD_INT 0
48595: ST_TO_ADDR
// InitHc_All ( ) ;
48596: CALL_OW 584
// InitVc ;
48600: CALL_OW 20
// if mastodonts then
48604: LD_VAR 0 6
48608: IFFALSE 48675
// for i = 1 to mastodonts do
48610: LD_ADDR_VAR 0 11
48614: PUSH
48615: DOUBLE
48616: LD_INT 1
48618: DEC
48619: ST_TO_ADDR
48620: LD_VAR 0 6
48624: PUSH
48625: FOR_TO
48626: IFFALSE 48673
// begin vc_chassis := 31 ;
48628: LD_ADDR_OWVAR 37
48632: PUSH
48633: LD_INT 31
48635: ST_TO_ADDR
// vc_control := control_rider ;
48636: LD_ADDR_OWVAR 38
48640: PUSH
48641: LD_INT 4
48643: ST_TO_ADDR
// animal := CreateVehicle ;
48644: LD_ADDR_VAR 0 12
48648: PUSH
48649: CALL_OW 45
48653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48654: LD_VAR 0 12
48658: PPUSH
48659: LD_VAR 0 8
48663: PPUSH
48664: LD_INT 0
48666: PPUSH
48667: CALL 50810 0 3
// end ;
48671: GO 48625
48673: POP
48674: POP
// if horses then
48675: LD_VAR 0 5
48679: IFFALSE 48746
// for i = 1 to horses do
48681: LD_ADDR_VAR 0 11
48685: PUSH
48686: DOUBLE
48687: LD_INT 1
48689: DEC
48690: ST_TO_ADDR
48691: LD_VAR 0 5
48695: PUSH
48696: FOR_TO
48697: IFFALSE 48744
// begin hc_class := 21 ;
48699: LD_ADDR_OWVAR 28
48703: PUSH
48704: LD_INT 21
48706: ST_TO_ADDR
// hc_gallery :=  ;
48707: LD_ADDR_OWVAR 33
48711: PUSH
48712: LD_STRING 
48714: ST_TO_ADDR
// animal := CreateHuman ;
48715: LD_ADDR_VAR 0 12
48719: PUSH
48720: CALL_OW 44
48724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48725: LD_VAR 0 12
48729: PPUSH
48730: LD_VAR 0 8
48734: PPUSH
48735: LD_INT 0
48737: PPUSH
48738: CALL 50810 0 3
// end ;
48742: GO 48696
48744: POP
48745: POP
// if birds then
48746: LD_VAR 0 1
48750: IFFALSE 48817
// for i = 1 to birds do
48752: LD_ADDR_VAR 0 11
48756: PUSH
48757: DOUBLE
48758: LD_INT 1
48760: DEC
48761: ST_TO_ADDR
48762: LD_VAR 0 1
48766: PUSH
48767: FOR_TO
48768: IFFALSE 48815
// begin hc_class = 18 ;
48770: LD_ADDR_OWVAR 28
48774: PUSH
48775: LD_INT 18
48777: ST_TO_ADDR
// hc_gallery =  ;
48778: LD_ADDR_OWVAR 33
48782: PUSH
48783: LD_STRING 
48785: ST_TO_ADDR
// animal := CreateHuman ;
48786: LD_ADDR_VAR 0 12
48790: PUSH
48791: CALL_OW 44
48795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48796: LD_VAR 0 12
48800: PPUSH
48801: LD_VAR 0 8
48805: PPUSH
48806: LD_INT 0
48808: PPUSH
48809: CALL 50810 0 3
// end ;
48813: GO 48767
48815: POP
48816: POP
// if tigers then
48817: LD_VAR 0 2
48821: IFFALSE 48905
// for i = 1 to tigers do
48823: LD_ADDR_VAR 0 11
48827: PUSH
48828: DOUBLE
48829: LD_INT 1
48831: DEC
48832: ST_TO_ADDR
48833: LD_VAR 0 2
48837: PUSH
48838: FOR_TO
48839: IFFALSE 48903
// begin hc_class = class_tiger ;
48841: LD_ADDR_OWVAR 28
48845: PUSH
48846: LD_INT 14
48848: ST_TO_ADDR
// hc_gallery =  ;
48849: LD_ADDR_OWVAR 33
48853: PUSH
48854: LD_STRING 
48856: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48857: LD_ADDR_OWVAR 35
48861: PUSH
48862: LD_INT 7
48864: NEG
48865: PPUSH
48866: LD_INT 7
48868: PPUSH
48869: CALL_OW 12
48873: ST_TO_ADDR
// animal := CreateHuman ;
48874: LD_ADDR_VAR 0 12
48878: PUSH
48879: CALL_OW 44
48883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48884: LD_VAR 0 12
48888: PPUSH
48889: LD_VAR 0 8
48893: PPUSH
48894: LD_INT 0
48896: PPUSH
48897: CALL 50810 0 3
// end ;
48901: GO 48838
48903: POP
48904: POP
// if apemans then
48905: LD_VAR 0 3
48909: IFFALSE 49032
// for i = 1 to apemans do
48911: LD_ADDR_VAR 0 11
48915: PUSH
48916: DOUBLE
48917: LD_INT 1
48919: DEC
48920: ST_TO_ADDR
48921: LD_VAR 0 3
48925: PUSH
48926: FOR_TO
48927: IFFALSE 49030
// begin hc_class = class_apeman ;
48929: LD_ADDR_OWVAR 28
48933: PUSH
48934: LD_INT 12
48936: ST_TO_ADDR
// hc_gallery =  ;
48937: LD_ADDR_OWVAR 33
48941: PUSH
48942: LD_STRING 
48944: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48945: LD_ADDR_OWVAR 35
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PPUSH
48954: LD_INT 2
48956: PPUSH
48957: CALL_OW 12
48961: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48962: LD_ADDR_OWVAR 31
48966: PUSH
48967: LD_INT 1
48969: PPUSH
48970: LD_INT 3
48972: PPUSH
48973: CALL_OW 12
48977: PUSH
48978: LD_INT 1
48980: PPUSH
48981: LD_INT 3
48983: PPUSH
48984: CALL_OW 12
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: ST_TO_ADDR
// animal := CreateHuman ;
49001: LD_ADDR_VAR 0 12
49005: PUSH
49006: CALL_OW 44
49010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49011: LD_VAR 0 12
49015: PPUSH
49016: LD_VAR 0 8
49020: PPUSH
49021: LD_INT 0
49023: PPUSH
49024: CALL 50810 0 3
// end ;
49028: GO 48926
49030: POP
49031: POP
// if enchidnas then
49032: LD_VAR 0 4
49036: IFFALSE 49103
// for i = 1 to enchidnas do
49038: LD_ADDR_VAR 0 11
49042: PUSH
49043: DOUBLE
49044: LD_INT 1
49046: DEC
49047: ST_TO_ADDR
49048: LD_VAR 0 4
49052: PUSH
49053: FOR_TO
49054: IFFALSE 49101
// begin hc_class = 13 ;
49056: LD_ADDR_OWVAR 28
49060: PUSH
49061: LD_INT 13
49063: ST_TO_ADDR
// hc_gallery =  ;
49064: LD_ADDR_OWVAR 33
49068: PUSH
49069: LD_STRING 
49071: ST_TO_ADDR
// animal := CreateHuman ;
49072: LD_ADDR_VAR 0 12
49076: PUSH
49077: CALL_OW 44
49081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49082: LD_VAR 0 12
49086: PPUSH
49087: LD_VAR 0 8
49091: PPUSH
49092: LD_INT 0
49094: PPUSH
49095: CALL 50810 0 3
// end ;
49099: GO 49053
49101: POP
49102: POP
// if fishes then
49103: LD_VAR 0 7
49107: IFFALSE 49174
// for i = 1 to fishes do
49109: LD_ADDR_VAR 0 11
49113: PUSH
49114: DOUBLE
49115: LD_INT 1
49117: DEC
49118: ST_TO_ADDR
49119: LD_VAR 0 7
49123: PUSH
49124: FOR_TO
49125: IFFALSE 49172
// begin hc_class = 20 ;
49127: LD_ADDR_OWVAR 28
49131: PUSH
49132: LD_INT 20
49134: ST_TO_ADDR
// hc_gallery =  ;
49135: LD_ADDR_OWVAR 33
49139: PUSH
49140: LD_STRING 
49142: ST_TO_ADDR
// animal := CreateHuman ;
49143: LD_ADDR_VAR 0 12
49147: PUSH
49148: CALL_OW 44
49152: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49153: LD_VAR 0 12
49157: PPUSH
49158: LD_VAR 0 9
49162: PPUSH
49163: LD_INT 0
49165: PPUSH
49166: CALL 50810 0 3
// end ;
49170: GO 49124
49172: POP
49173: POP
// end ;
49174: LD_VAR 0 10
49178: RET
// export function WantHeal ( sci , unit ) ; begin
49179: LD_INT 0
49181: PPUSH
// if GetTaskList ( sci ) > 0 then
49182: LD_VAR 0 1
49186: PPUSH
49187: CALL_OW 437
49191: PUSH
49192: LD_INT 0
49194: GREATER
49195: IFFALSE 49265
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 437
49206: PUSH
49207: LD_INT 1
49209: ARRAY
49210: PUSH
49211: LD_INT 1
49213: ARRAY
49214: PUSH
49215: LD_STRING l
49217: EQUAL
49218: PUSH
49219: LD_VAR 0 1
49223: PPUSH
49224: CALL_OW 437
49228: PUSH
49229: LD_INT 1
49231: ARRAY
49232: PUSH
49233: LD_INT 4
49235: ARRAY
49236: PUSH
49237: LD_VAR 0 2
49241: EQUAL
49242: AND
49243: IFFALSE 49255
// result := true else
49245: LD_ADDR_VAR 0 3
49249: PUSH
49250: LD_INT 1
49252: ST_TO_ADDR
49253: GO 49263
// result := false ;
49255: LD_ADDR_VAR 0 3
49259: PUSH
49260: LD_INT 0
49262: ST_TO_ADDR
// end else
49263: GO 49273
// result := false ;
49265: LD_ADDR_VAR 0 3
49269: PUSH
49270: LD_INT 0
49272: ST_TO_ADDR
// end ;
49273: LD_VAR 0 3
49277: RET
// export function HealTarget ( sci ) ; begin
49278: LD_INT 0
49280: PPUSH
// if not sci then
49281: LD_VAR 0 1
49285: NOT
49286: IFFALSE 49290
// exit ;
49288: GO 49355
// result := 0 ;
49290: LD_ADDR_VAR 0 2
49294: PUSH
49295: LD_INT 0
49297: ST_TO_ADDR
// if GetTaskList ( sci ) then
49298: LD_VAR 0 1
49302: PPUSH
49303: CALL_OW 437
49307: IFFALSE 49355
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49309: LD_VAR 0 1
49313: PPUSH
49314: CALL_OW 437
49318: PUSH
49319: LD_INT 1
49321: ARRAY
49322: PUSH
49323: LD_INT 1
49325: ARRAY
49326: PUSH
49327: LD_STRING l
49329: EQUAL
49330: IFFALSE 49355
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49332: LD_ADDR_VAR 0 2
49336: PUSH
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 437
49346: PUSH
49347: LD_INT 1
49349: ARRAY
49350: PUSH
49351: LD_INT 4
49353: ARRAY
49354: ST_TO_ADDR
// end ;
49355: LD_VAR 0 2
49359: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49360: LD_INT 0
49362: PPUSH
49363: PPUSH
49364: PPUSH
49365: PPUSH
// if not base_units then
49366: LD_VAR 0 1
49370: NOT
49371: IFFALSE 49375
// exit ;
49373: GO 49462
// result := false ;
49375: LD_ADDR_VAR 0 2
49379: PUSH
49380: LD_INT 0
49382: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49383: LD_ADDR_VAR 0 5
49387: PUSH
49388: LD_VAR 0 1
49392: PPUSH
49393: LD_INT 21
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PPUSH
49403: CALL_OW 72
49407: ST_TO_ADDR
// if not tmp then
49408: LD_VAR 0 5
49412: NOT
49413: IFFALSE 49417
// exit ;
49415: GO 49462
// for i in tmp do
49417: LD_ADDR_VAR 0 3
49421: PUSH
49422: LD_VAR 0 5
49426: PUSH
49427: FOR_IN
49428: IFFALSE 49460
// begin result := EnemyInRange ( i , 22 ) ;
49430: LD_ADDR_VAR 0 2
49434: PUSH
49435: LD_VAR 0 3
49439: PPUSH
49440: LD_INT 22
49442: PPUSH
49443: CALL 47698 0 2
49447: ST_TO_ADDR
// if result then
49448: LD_VAR 0 2
49452: IFFALSE 49458
// exit ;
49454: POP
49455: POP
49456: GO 49462
// end ;
49458: GO 49427
49460: POP
49461: POP
// end ;
49462: LD_VAR 0 2
49466: RET
// export function FilterByTag ( units , tag ) ; begin
49467: LD_INT 0
49469: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49470: LD_ADDR_VAR 0 3
49474: PUSH
49475: LD_VAR 0 1
49479: PPUSH
49480: LD_INT 120
49482: PUSH
49483: LD_VAR 0 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PPUSH
49492: CALL_OW 72
49496: ST_TO_ADDR
// end ;
49497: LD_VAR 0 3
49501: RET
// export function IsDriver ( un ) ; begin
49502: LD_INT 0
49504: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49505: LD_ADDR_VAR 0 2
49509: PUSH
49510: LD_VAR 0 1
49514: PUSH
49515: LD_INT 55
49517: PUSH
49518: EMPTY
49519: LIST
49520: PPUSH
49521: CALL_OW 69
49525: IN
49526: ST_TO_ADDR
// end ;
49527: LD_VAR 0 2
49531: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49532: LD_INT 0
49534: PPUSH
49535: PPUSH
// list := [ ] ;
49536: LD_ADDR_VAR 0 5
49540: PUSH
49541: EMPTY
49542: ST_TO_ADDR
// case d of 0 :
49543: LD_VAR 0 3
49547: PUSH
49548: LD_INT 0
49550: DOUBLE
49551: EQUAL
49552: IFTRUE 49556
49554: GO 49689
49556: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49557: LD_ADDR_VAR 0 5
49561: PUSH
49562: LD_VAR 0 1
49566: PUSH
49567: LD_INT 4
49569: MINUS
49570: PUSH
49571: LD_VAR 0 2
49575: PUSH
49576: LD_INT 4
49578: MINUS
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: LIST
49587: PUSH
49588: LD_VAR 0 1
49592: PUSH
49593: LD_INT 3
49595: MINUS
49596: PUSH
49597: LD_VAR 0 2
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: LD_VAR 0 1
49614: PUSH
49615: LD_INT 4
49617: PLUS
49618: PUSH
49619: LD_VAR 0 2
49623: PUSH
49624: LD_INT 4
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: PUSH
49632: LD_VAR 0 1
49636: PUSH
49637: LD_INT 3
49639: PLUS
49640: PUSH
49641: LD_VAR 0 2
49645: PUSH
49646: LD_INT 3
49648: PLUS
49649: PUSH
49650: LD_INT 5
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: PUSH
49658: LD_VAR 0 1
49662: PUSH
49663: LD_VAR 0 2
49667: PUSH
49668: LD_INT 4
49670: PLUS
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// end ; 1 :
49687: GO 50387
49689: LD_INT 1
49691: DOUBLE
49692: EQUAL
49693: IFTRUE 49697
49695: GO 49830
49697: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49698: LD_ADDR_VAR 0 5
49702: PUSH
49703: LD_VAR 0 1
49707: PUSH
49708: LD_VAR 0 2
49712: PUSH
49713: LD_INT 4
49715: MINUS
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: PUSH
49725: LD_VAR 0 1
49729: PUSH
49730: LD_INT 3
49732: MINUS
49733: PUSH
49734: LD_VAR 0 2
49738: PUSH
49739: LD_INT 3
49741: MINUS
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: PUSH
49751: LD_VAR 0 1
49755: PUSH
49756: LD_INT 4
49758: MINUS
49759: PUSH
49760: LD_VAR 0 2
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: PUSH
49773: LD_VAR 0 1
49777: PUSH
49778: LD_VAR 0 2
49782: PUSH
49783: LD_INT 3
49785: PLUS
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: LD_VAR 0 1
49799: PUSH
49800: LD_INT 4
49802: PLUS
49803: PUSH
49804: LD_VAR 0 2
49808: PUSH
49809: LD_INT 4
49811: PLUS
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: ST_TO_ADDR
// end ; 2 :
49828: GO 50387
49830: LD_INT 2
49832: DOUBLE
49833: EQUAL
49834: IFTRUE 49838
49836: GO 49967
49838: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49839: LD_ADDR_VAR 0 5
49843: PUSH
49844: LD_VAR 0 1
49848: PUSH
49849: LD_VAR 0 2
49853: PUSH
49854: LD_INT 3
49856: MINUS
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: PUSH
49866: LD_VAR 0 1
49870: PUSH
49871: LD_INT 4
49873: PLUS
49874: PUSH
49875: LD_VAR 0 2
49879: PUSH
49880: LD_INT 4
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: PUSH
49888: LD_VAR 0 1
49892: PUSH
49893: LD_VAR 0 2
49897: PUSH
49898: LD_INT 4
49900: PLUS
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: PUSH
49910: LD_VAR 0 1
49914: PUSH
49915: LD_INT 3
49917: MINUS
49918: PUSH
49919: LD_VAR 0 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: PUSH
49932: LD_VAR 0 1
49936: PUSH
49937: LD_INT 4
49939: MINUS
49940: PUSH
49941: LD_VAR 0 2
49945: PUSH
49946: LD_INT 4
49948: MINUS
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// end ; 3 :
49965: GO 50387
49967: LD_INT 3
49969: DOUBLE
49970: EQUAL
49971: IFTRUE 49975
49973: GO 50108
49975: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49976: LD_ADDR_VAR 0 5
49980: PUSH
49981: LD_VAR 0 1
49985: PUSH
49986: LD_INT 3
49988: PLUS
49989: PUSH
49990: LD_VAR 0 2
49994: PUSH
49995: LD_INT 4
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: PUSH
50003: LD_VAR 0 1
50007: PUSH
50008: LD_INT 4
50010: PLUS
50011: PUSH
50012: LD_VAR 0 2
50016: PUSH
50017: LD_INT 4
50019: PLUS
50020: PUSH
50021: LD_INT 5
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: PUSH
50029: LD_VAR 0 1
50033: PUSH
50034: LD_INT 4
50036: MINUS
50037: PUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: PUSH
50051: LD_VAR 0 1
50055: PUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 4
50063: MINUS
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: PUSH
50073: LD_VAR 0 1
50077: PUSH
50078: LD_INT 3
50080: MINUS
50081: PUSH
50082: LD_VAR 0 2
50086: PUSH
50087: LD_INT 3
50089: MINUS
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: ST_TO_ADDR
// end ; 4 :
50106: GO 50387
50108: LD_INT 4
50110: DOUBLE
50111: EQUAL
50112: IFTRUE 50116
50114: GO 50249
50116: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50117: LD_ADDR_VAR 0 5
50121: PUSH
50122: LD_VAR 0 1
50126: PUSH
50127: LD_VAR 0 2
50131: PUSH
50132: LD_INT 4
50134: PLUS
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: PUSH
50144: LD_VAR 0 1
50148: PUSH
50149: LD_INT 3
50151: PLUS
50152: PUSH
50153: LD_VAR 0 2
50157: PUSH
50158: LD_INT 3
50160: PLUS
50161: PUSH
50162: LD_INT 5
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: PUSH
50170: LD_VAR 0 1
50174: PUSH
50175: LD_INT 4
50177: PLUS
50178: PUSH
50179: LD_VAR 0 2
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: PUSH
50192: LD_VAR 0 1
50196: PUSH
50197: LD_VAR 0 2
50201: PUSH
50202: LD_INT 3
50204: MINUS
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_VAR 0 1
50218: PUSH
50219: LD_INT 4
50221: MINUS
50222: PUSH
50223: LD_VAR 0 2
50227: PUSH
50228: LD_INT 4
50230: MINUS
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// end ; 5 :
50247: GO 50387
50249: LD_INT 5
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50257
50255: GO 50386
50257: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50258: LD_ADDR_VAR 0 5
50262: PUSH
50263: LD_VAR 0 1
50267: PUSH
50268: LD_INT 4
50270: MINUS
50271: PUSH
50272: LD_VAR 0 2
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: PUSH
50285: LD_VAR 0 1
50289: PUSH
50290: LD_VAR 0 2
50294: PUSH
50295: LD_INT 4
50297: MINUS
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: PUSH
50307: LD_VAR 0 1
50311: PUSH
50312: LD_INT 4
50314: PLUS
50315: PUSH
50316: LD_VAR 0 2
50320: PUSH
50321: LD_INT 4
50323: PLUS
50324: PUSH
50325: LD_INT 5
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: PUSH
50333: LD_VAR 0 1
50337: PUSH
50338: LD_INT 3
50340: PLUS
50341: PUSH
50342: LD_VAR 0 2
50346: PUSH
50347: LD_INT 4
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: PUSH
50355: LD_VAR 0 1
50359: PUSH
50360: LD_VAR 0 2
50364: PUSH
50365: LD_INT 3
50367: PLUS
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// end ; end ;
50384: GO 50387
50386: POP
// result := list ;
50387: LD_ADDR_VAR 0 4
50391: PUSH
50392: LD_VAR 0 5
50396: ST_TO_ADDR
// end ;
50397: LD_VAR 0 4
50401: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50402: LD_INT 0
50404: PPUSH
50405: PPUSH
50406: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50407: LD_VAR 0 1
50411: NOT
50412: PUSH
50413: LD_VAR 0 2
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 4
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: IN
50436: NOT
50437: OR
50438: IFFALSE 50442
// exit ;
50440: GO 50534
// tmp := [ ] ;
50442: LD_ADDR_VAR 0 5
50446: PUSH
50447: EMPTY
50448: ST_TO_ADDR
// for i in units do
50449: LD_ADDR_VAR 0 4
50453: PUSH
50454: LD_VAR 0 1
50458: PUSH
50459: FOR_IN
50460: IFFALSE 50503
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50462: LD_ADDR_VAR 0 5
50466: PUSH
50467: LD_VAR 0 5
50471: PPUSH
50472: LD_VAR 0 5
50476: PUSH
50477: LD_INT 1
50479: PLUS
50480: PPUSH
50481: LD_VAR 0 4
50485: PPUSH
50486: LD_VAR 0 2
50490: PPUSH
50491: CALL_OW 259
50495: PPUSH
50496: CALL_OW 2
50500: ST_TO_ADDR
50501: GO 50459
50503: POP
50504: POP
// if not tmp then
50505: LD_VAR 0 5
50509: NOT
50510: IFFALSE 50514
// exit ;
50512: GO 50534
// result := SortListByListDesc ( units , tmp ) ;
50514: LD_ADDR_VAR 0 3
50518: PUSH
50519: LD_VAR 0 1
50523: PPUSH
50524: LD_VAR 0 5
50528: PPUSH
50529: CALL_OW 77
50533: ST_TO_ADDR
// end ;
50534: LD_VAR 0 3
50538: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50539: LD_INT 0
50541: PPUSH
50542: PPUSH
50543: PPUSH
// result := false ;
50544: LD_ADDR_VAR 0 3
50548: PUSH
50549: LD_INT 0
50551: ST_TO_ADDR
// x := GetX ( building ) ;
50552: LD_ADDR_VAR 0 4
50556: PUSH
50557: LD_VAR 0 2
50561: PPUSH
50562: CALL_OW 250
50566: ST_TO_ADDR
// y := GetY ( building ) ;
50567: LD_ADDR_VAR 0 5
50571: PUSH
50572: LD_VAR 0 2
50576: PPUSH
50577: CALL_OW 251
50581: ST_TO_ADDR
// if not building or not x or not y then
50582: LD_VAR 0 2
50586: NOT
50587: PUSH
50588: LD_VAR 0 4
50592: NOT
50593: OR
50594: PUSH
50595: LD_VAR 0 5
50599: NOT
50600: OR
50601: IFFALSE 50605
// exit ;
50603: GO 50697
// if GetTaskList ( unit ) then
50605: LD_VAR 0 1
50609: PPUSH
50610: CALL_OW 437
50614: IFFALSE 50697
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50616: LD_STRING e
50618: PUSH
50619: LD_VAR 0 1
50623: PPUSH
50624: CALL_OW 437
50628: PUSH
50629: LD_INT 1
50631: ARRAY
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: EQUAL
50637: PUSH
50638: LD_VAR 0 4
50642: PUSH
50643: LD_VAR 0 1
50647: PPUSH
50648: CALL_OW 437
50652: PUSH
50653: LD_INT 1
50655: ARRAY
50656: PUSH
50657: LD_INT 2
50659: ARRAY
50660: EQUAL
50661: AND
50662: PUSH
50663: LD_VAR 0 5
50667: PUSH
50668: LD_VAR 0 1
50672: PPUSH
50673: CALL_OW 437
50677: PUSH
50678: LD_INT 1
50680: ARRAY
50681: PUSH
50682: LD_INT 3
50684: ARRAY
50685: EQUAL
50686: AND
50687: IFFALSE 50697
// result := true end ;
50689: LD_ADDR_VAR 0 3
50693: PUSH
50694: LD_INT 1
50696: ST_TO_ADDR
// end ;
50697: LD_VAR 0 3
50701: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50702: LD_INT 0
50704: PPUSH
// result := false ;
50705: LD_ADDR_VAR 0 4
50709: PUSH
50710: LD_INT 0
50712: ST_TO_ADDR
// if GetTaskList ( unit ) then
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 437
50722: IFFALSE 50805
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50724: LD_STRING M
50726: PUSH
50727: LD_VAR 0 1
50731: PPUSH
50732: CALL_OW 437
50736: PUSH
50737: LD_INT 1
50739: ARRAY
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: EQUAL
50745: PUSH
50746: LD_VAR 0 2
50750: PUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: CALL_OW 437
50760: PUSH
50761: LD_INT 1
50763: ARRAY
50764: PUSH
50765: LD_INT 2
50767: ARRAY
50768: EQUAL
50769: AND
50770: PUSH
50771: LD_VAR 0 3
50775: PUSH
50776: LD_VAR 0 1
50780: PPUSH
50781: CALL_OW 437
50785: PUSH
50786: LD_INT 1
50788: ARRAY
50789: PUSH
50790: LD_INT 3
50792: ARRAY
50793: EQUAL
50794: AND
50795: IFFALSE 50805
// result := true ;
50797: LD_ADDR_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: ST_TO_ADDR
// end ; end ;
50805: LD_VAR 0 4
50809: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50810: LD_INT 0
50812: PPUSH
50813: PPUSH
50814: PPUSH
50815: PPUSH
// if not unit or not area then
50816: LD_VAR 0 1
50820: NOT
50821: PUSH
50822: LD_VAR 0 2
50826: NOT
50827: OR
50828: IFFALSE 50832
// exit ;
50830: GO 50996
// tmp := AreaToList ( area , i ) ;
50832: LD_ADDR_VAR 0 6
50836: PUSH
50837: LD_VAR 0 2
50841: PPUSH
50842: LD_VAR 0 5
50846: PPUSH
50847: CALL_OW 517
50851: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50852: LD_ADDR_VAR 0 5
50856: PUSH
50857: DOUBLE
50858: LD_INT 1
50860: DEC
50861: ST_TO_ADDR
50862: LD_VAR 0 6
50866: PUSH
50867: LD_INT 1
50869: ARRAY
50870: PUSH
50871: FOR_TO
50872: IFFALSE 50994
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50874: LD_ADDR_VAR 0 7
50878: PUSH
50879: LD_VAR 0 6
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: PUSH
50888: LD_VAR 0 5
50892: ARRAY
50893: PUSH
50894: LD_VAR 0 6
50898: PUSH
50899: LD_INT 2
50901: ARRAY
50902: PUSH
50903: LD_VAR 0 5
50907: ARRAY
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50913: LD_VAR 0 7
50917: PUSH
50918: LD_INT 1
50920: ARRAY
50921: PPUSH
50922: LD_VAR 0 7
50926: PUSH
50927: LD_INT 2
50929: ARRAY
50930: PPUSH
50931: CALL_OW 428
50935: PUSH
50936: LD_INT 0
50938: EQUAL
50939: IFFALSE 50992
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50941: LD_VAR 0 1
50945: PPUSH
50946: LD_VAR 0 7
50950: PUSH
50951: LD_INT 1
50953: ARRAY
50954: PPUSH
50955: LD_VAR 0 7
50959: PUSH
50960: LD_INT 2
50962: ARRAY
50963: PPUSH
50964: LD_VAR 0 3
50968: PPUSH
50969: CALL_OW 48
// result := IsPlaced ( unit ) ;
50973: LD_ADDR_VAR 0 4
50977: PUSH
50978: LD_VAR 0 1
50982: PPUSH
50983: CALL_OW 305
50987: ST_TO_ADDR
// exit ;
50988: POP
50989: POP
50990: GO 50996
// end ; end ;
50992: GO 50871
50994: POP
50995: POP
// end ;
50996: LD_VAR 0 4
51000: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51001: LD_INT 0
51003: PPUSH
51004: PPUSH
51005: PPUSH
// if not side or side > 8 then
51006: LD_VAR 0 1
51010: NOT
51011: PUSH
51012: LD_VAR 0 1
51016: PUSH
51017: LD_INT 8
51019: GREATER
51020: OR
51021: IFFALSE 51025
// exit ;
51023: GO 51212
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51025: LD_ADDR_VAR 0 4
51029: PUSH
51030: LD_INT 22
51032: PUSH
51033: LD_VAR 0 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 21
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PPUSH
51056: CALL_OW 69
51060: ST_TO_ADDR
// if not tmp then
51061: LD_VAR 0 4
51065: NOT
51066: IFFALSE 51070
// exit ;
51068: GO 51212
// enable_addtolog := true ;
51070: LD_ADDR_OWVAR 81
51074: PUSH
51075: LD_INT 1
51077: ST_TO_ADDR
// AddToLog ( [ ) ;
51078: LD_STRING [
51080: PPUSH
51081: CALL_OW 561
// for i in tmp do
51085: LD_ADDR_VAR 0 3
51089: PUSH
51090: LD_VAR 0 4
51094: PUSH
51095: FOR_IN
51096: IFFALSE 51203
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51098: LD_STRING [
51100: PUSH
51101: LD_VAR 0 3
51105: PPUSH
51106: CALL_OW 266
51110: STR
51111: PUSH
51112: LD_STRING , 
51114: STR
51115: PUSH
51116: LD_VAR 0 3
51120: PPUSH
51121: CALL_OW 250
51125: STR
51126: PUSH
51127: LD_STRING , 
51129: STR
51130: PUSH
51131: LD_VAR 0 3
51135: PPUSH
51136: CALL_OW 251
51140: STR
51141: PUSH
51142: LD_STRING , 
51144: STR
51145: PUSH
51146: LD_VAR 0 3
51150: PPUSH
51151: CALL_OW 254
51155: STR
51156: PUSH
51157: LD_STRING , 
51159: STR
51160: PUSH
51161: LD_VAR 0 3
51165: PPUSH
51166: LD_INT 1
51168: PPUSH
51169: CALL_OW 268
51173: STR
51174: PUSH
51175: LD_STRING , 
51177: STR
51178: PUSH
51179: LD_VAR 0 3
51183: PPUSH
51184: LD_INT 2
51186: PPUSH
51187: CALL_OW 268
51191: STR
51192: PUSH
51193: LD_STRING ],
51195: STR
51196: PPUSH
51197: CALL_OW 561
// end ;
51201: GO 51095
51203: POP
51204: POP
// AddToLog ( ]; ) ;
51205: LD_STRING ];
51207: PPUSH
51208: CALL_OW 561
// end ;
51212: LD_VAR 0 2
51216: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51217: LD_INT 0
51219: PPUSH
51220: PPUSH
51221: PPUSH
51222: PPUSH
51223: PPUSH
// if not area or not rate or not max then
51224: LD_VAR 0 1
51228: NOT
51229: PUSH
51230: LD_VAR 0 2
51234: NOT
51235: OR
51236: PUSH
51237: LD_VAR 0 4
51241: NOT
51242: OR
51243: IFFALSE 51247
// exit ;
51245: GO 51436
// while 1 do
51247: LD_INT 1
51249: IFFALSE 51436
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51251: LD_ADDR_VAR 0 9
51255: PUSH
51256: LD_VAR 0 1
51260: PPUSH
51261: LD_INT 1
51263: PPUSH
51264: CALL_OW 287
51268: PUSH
51269: LD_INT 10
51271: MUL
51272: ST_TO_ADDR
// r := rate / 10 ;
51273: LD_ADDR_VAR 0 7
51277: PUSH
51278: LD_VAR 0 2
51282: PUSH
51283: LD_INT 10
51285: DIVREAL
51286: ST_TO_ADDR
// time := 1 1$00 ;
51287: LD_ADDR_VAR 0 8
51291: PUSH
51292: LD_INT 2100
51294: ST_TO_ADDR
// if amount < min then
51295: LD_VAR 0 9
51299: PUSH
51300: LD_VAR 0 3
51304: LESS
51305: IFFALSE 51323
// r := r * 2 else
51307: LD_ADDR_VAR 0 7
51311: PUSH
51312: LD_VAR 0 7
51316: PUSH
51317: LD_INT 2
51319: MUL
51320: ST_TO_ADDR
51321: GO 51349
// if amount > max then
51323: LD_VAR 0 9
51327: PUSH
51328: LD_VAR 0 4
51332: GREATER
51333: IFFALSE 51349
// r := r / 2 ;
51335: LD_ADDR_VAR 0 7
51339: PUSH
51340: LD_VAR 0 7
51344: PUSH
51345: LD_INT 2
51347: DIVREAL
51348: ST_TO_ADDR
// time := time / r ;
51349: LD_ADDR_VAR 0 8
51353: PUSH
51354: LD_VAR 0 8
51358: PUSH
51359: LD_VAR 0 7
51363: DIVREAL
51364: ST_TO_ADDR
// if time < 0 then
51365: LD_VAR 0 8
51369: PUSH
51370: LD_INT 0
51372: LESS
51373: IFFALSE 51390
// time := time * - 1 ;
51375: LD_ADDR_VAR 0 8
51379: PUSH
51380: LD_VAR 0 8
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: MUL
51389: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51390: LD_VAR 0 8
51394: PUSH
51395: LD_INT 35
51397: PPUSH
51398: LD_INT 875
51400: PPUSH
51401: CALL_OW 12
51405: PLUS
51406: PPUSH
51407: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51411: LD_INT 1
51413: PPUSH
51414: LD_INT 5
51416: PPUSH
51417: CALL_OW 12
51421: PPUSH
51422: LD_VAR 0 1
51426: PPUSH
51427: LD_INT 1
51429: PPUSH
51430: CALL_OW 55
// end ;
51434: GO 51247
// end ;
51436: LD_VAR 0 5
51440: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51441: LD_INT 0
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
// if not turrets or not factories then
51451: LD_VAR 0 1
51455: NOT
51456: PUSH
51457: LD_VAR 0 2
51461: NOT
51462: OR
51463: IFFALSE 51467
// exit ;
51465: GO 51774
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51467: LD_ADDR_VAR 0 10
51471: PUSH
51472: LD_INT 5
51474: PUSH
51475: LD_INT 6
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 4
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: LD_INT 5
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 24
51509: PUSH
51510: LD_INT 25
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 23
51519: PUSH
51520: LD_INT 27
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 42
51533: PUSH
51534: LD_INT 43
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 44
51543: PUSH
51544: LD_INT 46
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 45
51553: PUSH
51554: LD_INT 47
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// result := [ ] ;
51571: LD_ADDR_VAR 0 3
51575: PUSH
51576: EMPTY
51577: ST_TO_ADDR
// for i in turrets do
51578: LD_ADDR_VAR 0 4
51582: PUSH
51583: LD_VAR 0 1
51587: PUSH
51588: FOR_IN
51589: IFFALSE 51772
// begin nat := GetNation ( i ) ;
51591: LD_ADDR_VAR 0 7
51595: PUSH
51596: LD_VAR 0 4
51600: PPUSH
51601: CALL_OW 248
51605: ST_TO_ADDR
// weapon := 0 ;
51606: LD_ADDR_VAR 0 8
51610: PUSH
51611: LD_INT 0
51613: ST_TO_ADDR
// if not nat then
51614: LD_VAR 0 7
51618: NOT
51619: IFFALSE 51623
// continue ;
51621: GO 51588
// for j in list [ nat ] do
51623: LD_ADDR_VAR 0 5
51627: PUSH
51628: LD_VAR 0 10
51632: PUSH
51633: LD_VAR 0 7
51637: ARRAY
51638: PUSH
51639: FOR_IN
51640: IFFALSE 51681
// if GetBWeapon ( i ) = j [ 1 ] then
51642: LD_VAR 0 4
51646: PPUSH
51647: CALL_OW 269
51651: PUSH
51652: LD_VAR 0 5
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: EQUAL
51661: IFFALSE 51679
// begin weapon := j [ 2 ] ;
51663: LD_ADDR_VAR 0 8
51667: PUSH
51668: LD_VAR 0 5
51672: PUSH
51673: LD_INT 2
51675: ARRAY
51676: ST_TO_ADDR
// break ;
51677: GO 51681
// end ;
51679: GO 51639
51681: POP
51682: POP
// if not weapon then
51683: LD_VAR 0 8
51687: NOT
51688: IFFALSE 51692
// continue ;
51690: GO 51588
// for k in factories do
51692: LD_ADDR_VAR 0 6
51696: PUSH
51697: LD_VAR 0 2
51701: PUSH
51702: FOR_IN
51703: IFFALSE 51768
// begin weapons := AvailableWeaponList ( k ) ;
51705: LD_ADDR_VAR 0 9
51709: PUSH
51710: LD_VAR 0 6
51714: PPUSH
51715: CALL_OW 478
51719: ST_TO_ADDR
// if not weapons then
51720: LD_VAR 0 9
51724: NOT
51725: IFFALSE 51729
// continue ;
51727: GO 51702
// if weapon in weapons then
51729: LD_VAR 0 8
51733: PUSH
51734: LD_VAR 0 9
51738: IN
51739: IFFALSE 51766
// begin result := [ i , weapon ] ;
51741: LD_ADDR_VAR 0 3
51745: PUSH
51746: LD_VAR 0 4
51750: PUSH
51751: LD_VAR 0 8
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: ST_TO_ADDR
// exit ;
51760: POP
51761: POP
51762: POP
51763: POP
51764: GO 51774
// end ; end ;
51766: GO 51702
51768: POP
51769: POP
// end ;
51770: GO 51588
51772: POP
51773: POP
// end ;
51774: LD_VAR 0 3
51778: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51779: LD_INT 0
51781: PPUSH
// if not side or side > 8 then
51782: LD_VAR 0 3
51786: NOT
51787: PUSH
51788: LD_VAR 0 3
51792: PUSH
51793: LD_INT 8
51795: GREATER
51796: OR
51797: IFFALSE 51801
// exit ;
51799: GO 51860
// if not range then
51801: LD_VAR 0 4
51805: NOT
51806: IFFALSE 51817
// range := - 12 ;
51808: LD_ADDR_VAR 0 4
51812: PUSH
51813: LD_INT 12
51815: NEG
51816: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51817: LD_VAR 0 1
51821: PPUSH
51822: LD_VAR 0 2
51826: PPUSH
51827: LD_VAR 0 3
51831: PPUSH
51832: LD_VAR 0 4
51836: PPUSH
51837: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51841: LD_VAR 0 1
51845: PPUSH
51846: LD_VAR 0 2
51850: PPUSH
51851: LD_VAR 0 3
51855: PPUSH
51856: CALL_OW 331
// end ;
51860: LD_VAR 0 5
51864: RET
// export function Video ( mode ) ; begin
51865: LD_INT 0
51867: PPUSH
// ingame_video = mode ;
51868: LD_ADDR_OWVAR 52
51872: PUSH
51873: LD_VAR 0 1
51877: ST_TO_ADDR
// interface_hidden = mode ;
51878: LD_ADDR_OWVAR 54
51882: PUSH
51883: LD_VAR 0 1
51887: ST_TO_ADDR
// end ;
51888: LD_VAR 0 2
51892: RET
// export function Join ( array , element ) ; begin
51893: LD_INT 0
51895: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51896: LD_ADDR_VAR 0 3
51900: PUSH
51901: LD_VAR 0 1
51905: PPUSH
51906: LD_VAR 0 1
51910: PUSH
51911: LD_INT 1
51913: PLUS
51914: PPUSH
51915: LD_VAR 0 2
51919: PPUSH
51920: CALL_OW 1
51924: ST_TO_ADDR
// end ;
51925: LD_VAR 0 3
51929: RET
// export function JoinUnion ( array , element ) ; begin
51930: LD_INT 0
51932: PPUSH
// result := array union element ;
51933: LD_ADDR_VAR 0 3
51937: PUSH
51938: LD_VAR 0 1
51942: PUSH
51943: LD_VAR 0 2
51947: UNION
51948: ST_TO_ADDR
// end ;
51949: LD_VAR 0 3
51953: RET
// export function GetBehemoths ( side ) ; begin
51954: LD_INT 0
51956: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
51957: LD_ADDR_VAR 0 2
51961: PUSH
51962: LD_INT 22
51964: PUSH
51965: LD_VAR 0 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 31
51976: PUSH
51977: LD_INT 25
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PPUSH
51988: CALL_OW 69
51992: ST_TO_ADDR
// end ;
51993: LD_VAR 0 2
51997: RET
// export function Shuffle ( array ) ; var i , index ; begin
51998: LD_INT 0
52000: PPUSH
52001: PPUSH
52002: PPUSH
// result := [ ] ;
52003: LD_ADDR_VAR 0 2
52007: PUSH
52008: EMPTY
52009: ST_TO_ADDR
// if not array then
52010: LD_VAR 0 1
52014: NOT
52015: IFFALSE 52019
// exit ;
52017: GO 52118
// Randomize ;
52019: CALL_OW 10
// for i = array downto 1 do
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: DOUBLE
52029: LD_VAR 0 1
52033: INC
52034: ST_TO_ADDR
52035: LD_INT 1
52037: PUSH
52038: FOR_DOWNTO
52039: IFFALSE 52116
// begin index := rand ( 1 , array ) ;
52041: LD_ADDR_VAR 0 4
52045: PUSH
52046: LD_INT 1
52048: PPUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 12
52058: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52059: LD_ADDR_VAR 0 2
52063: PUSH
52064: LD_VAR 0 2
52068: PPUSH
52069: LD_VAR 0 2
52073: PUSH
52074: LD_INT 1
52076: PLUS
52077: PPUSH
52078: LD_VAR 0 1
52082: PUSH
52083: LD_VAR 0 4
52087: ARRAY
52088: PPUSH
52089: CALL_OW 2
52093: ST_TO_ADDR
// array := Delete ( array , index ) ;
52094: LD_ADDR_VAR 0 1
52098: PUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: LD_VAR 0 4
52108: PPUSH
52109: CALL_OW 3
52113: ST_TO_ADDR
// end ;
52114: GO 52038
52116: POP
52117: POP
// end ;
52118: LD_VAR 0 2
52122: RET
// export function GetBaseMaterials ( base ) ; begin
52123: LD_INT 0
52125: PPUSH
// result := [ 0 , 0 , 0 ] ;
52126: LD_ADDR_VAR 0 2
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: ST_TO_ADDR
// if not base then
52145: LD_VAR 0 1
52149: NOT
52150: IFFALSE 52154
// exit ;
52152: GO 52203
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52154: LD_ADDR_VAR 0 2
52158: PUSH
52159: LD_VAR 0 1
52163: PPUSH
52164: LD_INT 1
52166: PPUSH
52167: CALL_OW 275
52171: PUSH
52172: LD_VAR 0 1
52176: PPUSH
52177: LD_INT 2
52179: PPUSH
52180: CALL_OW 275
52184: PUSH
52185: LD_VAR 0 1
52189: PPUSH
52190: LD_INT 3
52192: PPUSH
52193: CALL_OW 275
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
// end ;
52203: LD_VAR 0 2
52207: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52208: LD_INT 0
52210: PPUSH
52211: PPUSH
// result := array ;
52212: LD_ADDR_VAR 0 3
52216: PUSH
52217: LD_VAR 0 1
52221: ST_TO_ADDR
// if size > 0 then
52222: LD_VAR 0 2
52226: PUSH
52227: LD_INT 0
52229: GREATER
52230: IFFALSE 52276
// for i := array downto size do
52232: LD_ADDR_VAR 0 4
52236: PUSH
52237: DOUBLE
52238: LD_VAR 0 1
52242: INC
52243: ST_TO_ADDR
52244: LD_VAR 0 2
52248: PUSH
52249: FOR_DOWNTO
52250: IFFALSE 52274
// result := Delete ( result , result ) ;
52252: LD_ADDR_VAR 0 3
52256: PUSH
52257: LD_VAR 0 3
52261: PPUSH
52262: LD_VAR 0 3
52266: PPUSH
52267: CALL_OW 3
52271: ST_TO_ADDR
52272: GO 52249
52274: POP
52275: POP
// end ;
52276: LD_VAR 0 3
52280: RET
// export function ComExit ( unit ) ; var tmp ; begin
52281: LD_INT 0
52283: PPUSH
52284: PPUSH
// if not IsInUnit ( unit ) then
52285: LD_VAR 0 1
52289: PPUSH
52290: CALL_OW 310
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52359
// tmp := IsInUnit ( unit ) ;
52299: LD_ADDR_VAR 0 3
52303: PUSH
52304: LD_VAR 0 1
52308: PPUSH
52309: CALL_OW 310
52313: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52314: LD_VAR 0 3
52318: PPUSH
52319: CALL_OW 247
52323: PUSH
52324: LD_INT 2
52326: EQUAL
52327: IFFALSE 52340
// ComExitVehicle ( unit ) else
52329: LD_VAR 0 1
52333: PPUSH
52334: CALL_OW 121
52338: GO 52349
// ComExitBuilding ( unit ) ;
52340: LD_VAR 0 1
52344: PPUSH
52345: CALL_OW 122
// result := tmp ;
52349: LD_ADDR_VAR 0 2
52353: PUSH
52354: LD_VAR 0 3
52358: ST_TO_ADDR
// end ;
52359: LD_VAR 0 2
52363: RET
// export function ComExitAll ( units ) ; var i ; begin
52364: LD_INT 0
52366: PPUSH
52367: PPUSH
// if not units then
52368: LD_VAR 0 1
52372: NOT
52373: IFFALSE 52377
// exit ;
52375: GO 52403
// for i in units do
52377: LD_ADDR_VAR 0 3
52381: PUSH
52382: LD_VAR 0 1
52386: PUSH
52387: FOR_IN
52388: IFFALSE 52401
// ComExit ( i ) ;
52390: LD_VAR 0 3
52394: PPUSH
52395: CALL 52281 0 1
52399: GO 52387
52401: POP
52402: POP
// end ;
52403: LD_VAR 0 2
52407: RET
// export function ResetHc ; begin
52408: LD_INT 0
52410: PPUSH
// InitHc ;
52411: CALL_OW 19
// hc_importance := 0 ;
52415: LD_ADDR_OWVAR 32
52419: PUSH
52420: LD_INT 0
52422: ST_TO_ADDR
// end ;
52423: LD_VAR 0 1
52427: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52428: LD_INT 0
52430: PPUSH
52431: PPUSH
52432: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52433: LD_ADDR_VAR 0 6
52437: PUSH
52438: LD_VAR 0 1
52442: PUSH
52443: LD_VAR 0 3
52447: PLUS
52448: PUSH
52449: LD_INT 2
52451: DIV
52452: ST_TO_ADDR
// if _x < 0 then
52453: LD_VAR 0 6
52457: PUSH
52458: LD_INT 0
52460: LESS
52461: IFFALSE 52478
// _x := _x * - 1 ;
52463: LD_ADDR_VAR 0 6
52467: PUSH
52468: LD_VAR 0 6
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: MUL
52477: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52478: LD_ADDR_VAR 0 7
52482: PUSH
52483: LD_VAR 0 2
52487: PUSH
52488: LD_VAR 0 4
52492: PLUS
52493: PUSH
52494: LD_INT 2
52496: DIV
52497: ST_TO_ADDR
// if _y < 0 then
52498: LD_VAR 0 7
52502: PUSH
52503: LD_INT 0
52505: LESS
52506: IFFALSE 52523
// _y := _y * - 1 ;
52508: LD_ADDR_VAR 0 7
52512: PUSH
52513: LD_VAR 0 7
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: MUL
52522: ST_TO_ADDR
// result := [ _x , _y ] ;
52523: LD_ADDR_VAR 0 5
52527: PUSH
52528: LD_VAR 0 6
52532: PUSH
52533: LD_VAR 0 7
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// end ;
52542: LD_VAR 0 5
52546: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52547: LD_INT 0
52549: PPUSH
52550: PPUSH
52551: PPUSH
52552: PPUSH
// task := GetTaskList ( unit ) ;
52553: LD_ADDR_VAR 0 7
52557: PUSH
52558: LD_VAR 0 1
52562: PPUSH
52563: CALL_OW 437
52567: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52568: LD_VAR 0 7
52572: NOT
52573: PUSH
52574: LD_VAR 0 1
52578: PPUSH
52579: LD_VAR 0 2
52583: PPUSH
52584: CALL_OW 308
52588: NOT
52589: AND
52590: IFFALSE 52594
// exit ;
52592: GO 52712
// if IsInArea ( unit , area ) then
52594: LD_VAR 0 1
52598: PPUSH
52599: LD_VAR 0 2
52603: PPUSH
52604: CALL_OW 308
52608: IFFALSE 52626
// begin ComMoveToArea ( unit , goAway ) ;
52610: LD_VAR 0 1
52614: PPUSH
52615: LD_VAR 0 3
52619: PPUSH
52620: CALL_OW 113
// exit ;
52624: GO 52712
// end ; if task [ 1 ] [ 1 ] <> M then
52626: LD_VAR 0 7
52630: PUSH
52631: LD_INT 1
52633: ARRAY
52634: PUSH
52635: LD_INT 1
52637: ARRAY
52638: PUSH
52639: LD_STRING M
52641: NONEQUAL
52642: IFFALSE 52646
// exit ;
52644: GO 52712
// x := task [ 1 ] [ 2 ] ;
52646: LD_ADDR_VAR 0 5
52650: PUSH
52651: LD_VAR 0 7
52655: PUSH
52656: LD_INT 1
52658: ARRAY
52659: PUSH
52660: LD_INT 2
52662: ARRAY
52663: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52664: LD_ADDR_VAR 0 6
52668: PUSH
52669: LD_VAR 0 7
52673: PUSH
52674: LD_INT 1
52676: ARRAY
52677: PUSH
52678: LD_INT 3
52680: ARRAY
52681: ST_TO_ADDR
// if InArea ( x , y , area ) then
52682: LD_VAR 0 5
52686: PPUSH
52687: LD_VAR 0 6
52691: PPUSH
52692: LD_VAR 0 2
52696: PPUSH
52697: CALL_OW 309
52701: IFFALSE 52712
// ComStop ( unit ) ;
52703: LD_VAR 0 1
52707: PPUSH
52708: CALL_OW 141
// end ;
52712: LD_VAR 0 4
52716: RET
// export function Abs ( value ) ; begin
52717: LD_INT 0
52719: PPUSH
// result := value ;
52720: LD_ADDR_VAR 0 2
52724: PUSH
52725: LD_VAR 0 1
52729: ST_TO_ADDR
// if value < 0 then
52730: LD_VAR 0 1
52734: PUSH
52735: LD_INT 0
52737: LESS
52738: IFFALSE 52755
// result := value * - 1 ;
52740: LD_ADDR_VAR 0 2
52744: PUSH
52745: LD_VAR 0 1
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: MUL
52754: ST_TO_ADDR
// end ;
52755: LD_VAR 0 2
52759: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52760: LD_INT 0
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
// if not unit or not building then
52770: LD_VAR 0 1
52774: NOT
52775: PUSH
52776: LD_VAR 0 2
52780: NOT
52781: OR
52782: IFFALSE 52786
// exit ;
52784: GO 53012
// x := GetX ( building ) ;
52786: LD_ADDR_VAR 0 4
52790: PUSH
52791: LD_VAR 0 2
52795: PPUSH
52796: CALL_OW 250
52800: ST_TO_ADDR
// y := GetY ( building ) ;
52801: LD_ADDR_VAR 0 6
52805: PUSH
52806: LD_VAR 0 2
52810: PPUSH
52811: CALL_OW 251
52815: ST_TO_ADDR
// d := GetDir ( building ) ;
52816: LD_ADDR_VAR 0 8
52820: PUSH
52821: LD_VAR 0 2
52825: PPUSH
52826: CALL_OW 254
52830: ST_TO_ADDR
// r := 4 ;
52831: LD_ADDR_VAR 0 9
52835: PUSH
52836: LD_INT 4
52838: ST_TO_ADDR
// for i := 1 to 5 do
52839: LD_ADDR_VAR 0 10
52843: PUSH
52844: DOUBLE
52845: LD_INT 1
52847: DEC
52848: ST_TO_ADDR
52849: LD_INT 5
52851: PUSH
52852: FOR_TO
52853: IFFALSE 53010
// begin _x := ShiftX ( x , d , r + i ) ;
52855: LD_ADDR_VAR 0 5
52859: PUSH
52860: LD_VAR 0 4
52864: PPUSH
52865: LD_VAR 0 8
52869: PPUSH
52870: LD_VAR 0 9
52874: PUSH
52875: LD_VAR 0 10
52879: PLUS
52880: PPUSH
52881: CALL_OW 272
52885: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52886: LD_ADDR_VAR 0 7
52890: PUSH
52891: LD_VAR 0 6
52895: PPUSH
52896: LD_VAR 0 8
52900: PPUSH
52901: LD_VAR 0 9
52905: PUSH
52906: LD_VAR 0 10
52910: PLUS
52911: PPUSH
52912: CALL_OW 273
52916: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52917: LD_VAR 0 5
52921: PPUSH
52922: LD_VAR 0 7
52926: PPUSH
52927: CALL_OW 488
52931: PUSH
52932: LD_VAR 0 5
52936: PPUSH
52937: LD_VAR 0 7
52941: PPUSH
52942: CALL_OW 428
52946: PPUSH
52947: CALL_OW 247
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: IN
52962: NOT
52963: AND
52964: IFFALSE 53008
// begin ComMoveXY ( unit , _x , _y ) ;
52966: LD_VAR 0 1
52970: PPUSH
52971: LD_VAR 0 5
52975: PPUSH
52976: LD_VAR 0 7
52980: PPUSH
52981: CALL_OW 111
// result := [ _x , _y ] ;
52985: LD_ADDR_VAR 0 3
52989: PUSH
52990: LD_VAR 0 5
52994: PUSH
52995: LD_VAR 0 7
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// exit ;
53004: POP
53005: POP
53006: GO 53012
// end ; end ;
53008: GO 52852
53010: POP
53011: POP
// end ;
53012: LD_VAR 0 3
53016: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53017: LD_INT 0
53019: PPUSH
53020: PPUSH
53021: PPUSH
// result := 0 ;
53022: LD_ADDR_VAR 0 3
53026: PUSH
53027: LD_INT 0
53029: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53030: LD_VAR 0 1
53034: PUSH
53035: LD_INT 0
53037: LESS
53038: PUSH
53039: LD_VAR 0 1
53043: PUSH
53044: LD_INT 8
53046: GREATER
53047: OR
53048: PUSH
53049: LD_VAR 0 2
53053: PUSH
53054: LD_INT 0
53056: LESS
53057: OR
53058: PUSH
53059: LD_VAR 0 2
53063: PUSH
53064: LD_INT 8
53066: GREATER
53067: OR
53068: IFFALSE 53072
// exit ;
53070: GO 53147
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53072: LD_ADDR_VAR 0 4
53076: PUSH
53077: LD_INT 22
53079: PUSH
53080: LD_VAR 0 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PPUSH
53089: CALL_OW 69
53093: PUSH
53094: FOR_IN
53095: IFFALSE 53145
// begin un := UnitShoot ( i ) ;
53097: LD_ADDR_VAR 0 5
53101: PUSH
53102: LD_VAR 0 4
53106: PPUSH
53107: CALL_OW 504
53111: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53112: LD_VAR 0 5
53116: PPUSH
53117: CALL_OW 255
53121: PUSH
53122: LD_VAR 0 1
53126: EQUAL
53127: IFFALSE 53143
// begin result := un ;
53129: LD_ADDR_VAR 0 3
53133: PUSH
53134: LD_VAR 0 5
53138: ST_TO_ADDR
// exit ;
53139: POP
53140: POP
53141: GO 53147
// end ; end ;
53143: GO 53094
53145: POP
53146: POP
// end ;
53147: LD_VAR 0 3
53151: RET
// export function GetCargoBay ( units ) ; begin
53152: LD_INT 0
53154: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53155: LD_ADDR_VAR 0 2
53159: PUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 34
53170: PUSH
53171: LD_INT 12
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 34
53180: PUSH
53181: LD_INT 51
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 34
53190: PUSH
53191: LD_INT 32
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 34
53200: PUSH
53201: LD_EXP 103
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: PPUSH
53217: CALL_OW 72
53221: ST_TO_ADDR
// end ;
53222: LD_VAR 0 2
53226: RET
// export function Negate ( value ) ; begin
53227: LD_INT 0
53229: PPUSH
// result := not value ;
53230: LD_ADDR_VAR 0 2
53234: PUSH
53235: LD_VAR 0 1
53239: NOT
53240: ST_TO_ADDR
// end ;
53241: LD_VAR 0 2
53245: RET
// export function Inc ( value ) ; begin
53246: LD_INT 0
53248: PPUSH
// result := value + 1 ;
53249: LD_ADDR_VAR 0 2
53253: PUSH
53254: LD_VAR 0 1
53258: PUSH
53259: LD_INT 1
53261: PLUS
53262: ST_TO_ADDR
// end ;
53263: LD_VAR 0 2
53267: RET
// export function Dec ( value ) ; begin
53268: LD_INT 0
53270: PPUSH
// result := value - 1 ;
53271: LD_ADDR_VAR 0 2
53275: PUSH
53276: LD_VAR 0 1
53280: PUSH
53281: LD_INT 1
53283: MINUS
53284: ST_TO_ADDR
// end ;
53285: LD_VAR 0 2
53289: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53290: LD_INT 0
53292: PPUSH
53293: PPUSH
53294: PPUSH
53295: PPUSH
53296: PPUSH
53297: PPUSH
53298: PPUSH
53299: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53300: LD_VAR 0 1
53304: PPUSH
53305: LD_VAR 0 2
53309: PPUSH
53310: CALL_OW 488
53314: NOT
53315: PUSH
53316: LD_VAR 0 3
53320: PPUSH
53321: LD_VAR 0 4
53325: PPUSH
53326: CALL_OW 488
53330: NOT
53331: OR
53332: IFFALSE 53345
// begin result := - 1 ;
53334: LD_ADDR_VAR 0 5
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: ST_TO_ADDR
// exit ;
53343: GO 53580
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53345: LD_ADDR_VAR 0 12
53349: PUSH
53350: LD_VAR 0 1
53354: PPUSH
53355: LD_VAR 0 2
53359: PPUSH
53360: LD_VAR 0 3
53364: PPUSH
53365: LD_VAR 0 4
53369: PPUSH
53370: CALL 52428 0 4
53374: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53375: LD_ADDR_VAR 0 11
53379: PUSH
53380: LD_VAR 0 1
53384: PPUSH
53385: LD_VAR 0 2
53389: PPUSH
53390: LD_VAR 0 12
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 12
53403: PUSH
53404: LD_INT 2
53406: ARRAY
53407: PPUSH
53408: CALL_OW 298
53412: ST_TO_ADDR
// distance := 9999 ;
53413: LD_ADDR_VAR 0 10
53417: PUSH
53418: LD_INT 9999
53420: ST_TO_ADDR
// for i := 0 to 5 do
53421: LD_ADDR_VAR 0 6
53425: PUSH
53426: DOUBLE
53427: LD_INT 0
53429: DEC
53430: ST_TO_ADDR
53431: LD_INT 5
53433: PUSH
53434: FOR_TO
53435: IFFALSE 53578
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53437: LD_ADDR_VAR 0 7
53441: PUSH
53442: LD_VAR 0 1
53446: PPUSH
53447: LD_VAR 0 6
53451: PPUSH
53452: LD_VAR 0 11
53456: PPUSH
53457: CALL_OW 272
53461: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53462: LD_ADDR_VAR 0 8
53466: PUSH
53467: LD_VAR 0 2
53471: PPUSH
53472: LD_VAR 0 6
53476: PPUSH
53477: LD_VAR 0 11
53481: PPUSH
53482: CALL_OW 273
53486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53487: LD_VAR 0 7
53491: PPUSH
53492: LD_VAR 0 8
53496: PPUSH
53497: CALL_OW 488
53501: NOT
53502: IFFALSE 53506
// continue ;
53504: GO 53434
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53506: LD_ADDR_VAR 0 9
53510: PUSH
53511: LD_VAR 0 12
53515: PUSH
53516: LD_INT 1
53518: ARRAY
53519: PPUSH
53520: LD_VAR 0 12
53524: PUSH
53525: LD_INT 2
53527: ARRAY
53528: PPUSH
53529: LD_VAR 0 7
53533: PPUSH
53534: LD_VAR 0 8
53538: PPUSH
53539: CALL_OW 298
53543: ST_TO_ADDR
// if tmp < distance then
53544: LD_VAR 0 9
53548: PUSH
53549: LD_VAR 0 10
53553: LESS
53554: IFFALSE 53576
// begin result := i ;
53556: LD_ADDR_VAR 0 5
53560: PUSH
53561: LD_VAR 0 6
53565: ST_TO_ADDR
// distance := tmp ;
53566: LD_ADDR_VAR 0 10
53570: PUSH
53571: LD_VAR 0 9
53575: ST_TO_ADDR
// end ; end ;
53576: GO 53434
53578: POP
53579: POP
// end ;
53580: LD_VAR 0 5
53584: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53585: LD_INT 0
53587: PPUSH
53588: PPUSH
// if not driver or not IsInUnit ( driver ) then
53589: LD_VAR 0 1
53593: NOT
53594: PUSH
53595: LD_VAR 0 1
53599: PPUSH
53600: CALL_OW 310
53604: NOT
53605: OR
53606: IFFALSE 53610
// exit ;
53608: GO 53700
// vehicle := IsInUnit ( driver ) ;
53610: LD_ADDR_VAR 0 3
53614: PUSH
53615: LD_VAR 0 1
53619: PPUSH
53620: CALL_OW 310
53624: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53625: LD_VAR 0 1
53629: PPUSH
53630: LD_STRING \
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: PUSH
53660: LD_STRING E
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_VAR 0 3
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PPUSH
53696: CALL_OW 446
// end ;
53700: LD_VAR 0 2
53704: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53705: LD_INT 0
53707: PPUSH
53708: PPUSH
// if not driver or not IsInUnit ( driver ) then
53709: LD_VAR 0 1
53713: NOT
53714: PUSH
53715: LD_VAR 0 1
53719: PPUSH
53720: CALL_OW 310
53724: NOT
53725: OR
53726: IFFALSE 53730
// exit ;
53728: GO 53820
// vehicle := IsInUnit ( driver ) ;
53730: LD_ADDR_VAR 0 3
53734: PUSH
53735: LD_VAR 0 1
53739: PPUSH
53740: CALL_OW 310
53744: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53745: LD_VAR 0 1
53749: PPUSH
53750: LD_STRING \
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: PUSH
53780: LD_STRING E
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_VAR 0 3
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PPUSH
53816: CALL_OW 447
// end ;
53820: LD_VAR 0 2
53824: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53825: LD_INT 0
53827: PPUSH
53828: PPUSH
53829: PPUSH
// tmp := [ ] ;
53830: LD_ADDR_VAR 0 5
53834: PUSH
53835: EMPTY
53836: ST_TO_ADDR
// for i in units do
53837: LD_ADDR_VAR 0 4
53841: PUSH
53842: LD_VAR 0 1
53846: PUSH
53847: FOR_IN
53848: IFFALSE 53886
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53850: LD_ADDR_VAR 0 5
53854: PUSH
53855: LD_VAR 0 5
53859: PPUSH
53860: LD_VAR 0 5
53864: PUSH
53865: LD_INT 1
53867: PLUS
53868: PPUSH
53869: LD_VAR 0 4
53873: PPUSH
53874: CALL_OW 256
53878: PPUSH
53879: CALL_OW 2
53883: ST_TO_ADDR
53884: GO 53847
53886: POP
53887: POP
// if not tmp then
53888: LD_VAR 0 5
53892: NOT
53893: IFFALSE 53897
// exit ;
53895: GO 53945
// if asc then
53897: LD_VAR 0 2
53901: IFFALSE 53925
// result := SortListByListAsc ( units , tmp ) else
53903: LD_ADDR_VAR 0 3
53907: PUSH
53908: LD_VAR 0 1
53912: PPUSH
53913: LD_VAR 0 5
53917: PPUSH
53918: CALL_OW 76
53922: ST_TO_ADDR
53923: GO 53945
// result := SortListByListDesc ( units , tmp ) ;
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: LD_VAR 0 1
53934: PPUSH
53935: LD_VAR 0 5
53939: PPUSH
53940: CALL_OW 77
53944: ST_TO_ADDR
// end ;
53945: LD_VAR 0 3
53949: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53950: LD_INT 0
53952: PPUSH
53953: PPUSH
// task := GetTaskList ( mech ) ;
53954: LD_ADDR_VAR 0 4
53958: PUSH
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 437
53968: ST_TO_ADDR
// if not task then
53969: LD_VAR 0 4
53973: NOT
53974: IFFALSE 53978
// exit ;
53976: GO 54020
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53978: LD_ADDR_VAR 0 3
53982: PUSH
53983: LD_VAR 0 4
53987: PUSH
53988: LD_INT 1
53990: ARRAY
53991: PUSH
53992: LD_INT 1
53994: ARRAY
53995: PUSH
53996: LD_STRING r
53998: EQUAL
53999: PUSH
54000: LD_VAR 0 4
54004: PUSH
54005: LD_INT 1
54007: ARRAY
54008: PUSH
54009: LD_INT 4
54011: ARRAY
54012: PUSH
54013: LD_VAR 0 2
54017: EQUAL
54018: AND
54019: ST_TO_ADDR
// end ;
54020: LD_VAR 0 3
54024: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54025: LD_INT 0
54027: PPUSH
// SetDir ( unit , d ) ;
54028: LD_VAR 0 1
54032: PPUSH
54033: LD_VAR 0 4
54037: PPUSH
54038: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54042: LD_VAR 0 1
54046: PPUSH
54047: LD_VAR 0 2
54051: PPUSH
54052: LD_VAR 0 3
54056: PPUSH
54057: LD_VAR 0 5
54061: PPUSH
54062: CALL_OW 48
// end ;
54066: LD_VAR 0 6
54070: RET
// export function ToNaturalNumber ( number ) ; begin
54071: LD_INT 0
54073: PPUSH
// result := number div 1 ;
54074: LD_ADDR_VAR 0 2
54078: PUSH
54079: LD_VAR 0 1
54083: PUSH
54084: LD_INT 1
54086: DIV
54087: ST_TO_ADDR
// if number < 0 then
54088: LD_VAR 0 1
54092: PUSH
54093: LD_INT 0
54095: LESS
54096: IFFALSE 54106
// result := 0 ;
54098: LD_ADDR_VAR 0 2
54102: PUSH
54103: LD_INT 0
54105: ST_TO_ADDR
// end ;
54106: LD_VAR 0 2
54110: RET
// export function SortByClass ( units , class ) ; var un ; begin
54111: LD_INT 0
54113: PPUSH
54114: PPUSH
// if not units or not class then
54115: LD_VAR 0 1
54119: NOT
54120: PUSH
54121: LD_VAR 0 2
54125: NOT
54126: OR
54127: IFFALSE 54131
// exit ;
54129: GO 54226
// result := [ ] ;
54131: LD_ADDR_VAR 0 3
54135: PUSH
54136: EMPTY
54137: ST_TO_ADDR
// for un in units do
54138: LD_ADDR_VAR 0 4
54142: PUSH
54143: LD_VAR 0 1
54147: PUSH
54148: FOR_IN
54149: IFFALSE 54224
// if GetClass ( un ) = class then
54151: LD_VAR 0 4
54155: PPUSH
54156: CALL_OW 257
54160: PUSH
54161: LD_VAR 0 2
54165: EQUAL
54166: IFFALSE 54193
// result := Insert ( result , 1 , un ) else
54168: LD_ADDR_VAR 0 3
54172: PUSH
54173: LD_VAR 0 3
54177: PPUSH
54178: LD_INT 1
54180: PPUSH
54181: LD_VAR 0 4
54185: PPUSH
54186: CALL_OW 2
54190: ST_TO_ADDR
54191: GO 54222
// result := Replace ( result , result + 1 , un ) ;
54193: LD_ADDR_VAR 0 3
54197: PUSH
54198: LD_VAR 0 3
54202: PPUSH
54203: LD_VAR 0 3
54207: PUSH
54208: LD_INT 1
54210: PLUS
54211: PPUSH
54212: LD_VAR 0 4
54216: PPUSH
54217: CALL_OW 1
54221: ST_TO_ADDR
54222: GO 54148
54224: POP
54225: POP
// end ;
54226: LD_VAR 0 3
54230: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54231: LD_INT 0
54233: PPUSH
54234: PPUSH
54235: PPUSH
54236: PPUSH
54237: PPUSH
54238: PPUSH
54239: PPUSH
// result := [ ] ;
54240: LD_ADDR_VAR 0 4
54244: PUSH
54245: EMPTY
54246: ST_TO_ADDR
// if x - r < 0 then
54247: LD_VAR 0 1
54251: PUSH
54252: LD_VAR 0 3
54256: MINUS
54257: PUSH
54258: LD_INT 0
54260: LESS
54261: IFFALSE 54273
// min_x := 0 else
54263: LD_ADDR_VAR 0 8
54267: PUSH
54268: LD_INT 0
54270: ST_TO_ADDR
54271: GO 54289
// min_x := x - r ;
54273: LD_ADDR_VAR 0 8
54277: PUSH
54278: LD_VAR 0 1
54282: PUSH
54283: LD_VAR 0 3
54287: MINUS
54288: ST_TO_ADDR
// if y - r < 0 then
54289: LD_VAR 0 2
54293: PUSH
54294: LD_VAR 0 3
54298: MINUS
54299: PUSH
54300: LD_INT 0
54302: LESS
54303: IFFALSE 54315
// min_y := 0 else
54305: LD_ADDR_VAR 0 7
54309: PUSH
54310: LD_INT 0
54312: ST_TO_ADDR
54313: GO 54331
// min_y := y - r ;
54315: LD_ADDR_VAR 0 7
54319: PUSH
54320: LD_VAR 0 2
54324: PUSH
54325: LD_VAR 0 3
54329: MINUS
54330: ST_TO_ADDR
// max_x := x + r ;
54331: LD_ADDR_VAR 0 9
54335: PUSH
54336: LD_VAR 0 1
54340: PUSH
54341: LD_VAR 0 3
54345: PLUS
54346: ST_TO_ADDR
// max_y := y + r ;
54347: LD_ADDR_VAR 0 10
54351: PUSH
54352: LD_VAR 0 2
54356: PUSH
54357: LD_VAR 0 3
54361: PLUS
54362: ST_TO_ADDR
// for _x = min_x to max_x do
54363: LD_ADDR_VAR 0 5
54367: PUSH
54368: DOUBLE
54369: LD_VAR 0 8
54373: DEC
54374: ST_TO_ADDR
54375: LD_VAR 0 9
54379: PUSH
54380: FOR_TO
54381: IFFALSE 54482
// for _y = min_y to max_y do
54383: LD_ADDR_VAR 0 6
54387: PUSH
54388: DOUBLE
54389: LD_VAR 0 7
54393: DEC
54394: ST_TO_ADDR
54395: LD_VAR 0 10
54399: PUSH
54400: FOR_TO
54401: IFFALSE 54478
// begin if not ValidHex ( _x , _y ) then
54403: LD_VAR 0 5
54407: PPUSH
54408: LD_VAR 0 6
54412: PPUSH
54413: CALL_OW 488
54417: NOT
54418: IFFALSE 54422
// continue ;
54420: GO 54400
// if GetResourceTypeXY ( _x , _y ) then
54422: LD_VAR 0 5
54426: PPUSH
54427: LD_VAR 0 6
54431: PPUSH
54432: CALL_OW 283
54436: IFFALSE 54476
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54438: LD_ADDR_VAR 0 4
54442: PUSH
54443: LD_VAR 0 4
54447: PPUSH
54448: LD_VAR 0 4
54452: PUSH
54453: LD_INT 1
54455: PLUS
54456: PPUSH
54457: LD_VAR 0 5
54461: PUSH
54462: LD_VAR 0 6
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PPUSH
54471: CALL_OW 1
54475: ST_TO_ADDR
// end ;
54476: GO 54400
54478: POP
54479: POP
54480: GO 54380
54482: POP
54483: POP
// end ;
54484: LD_VAR 0 4
54488: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54489: LD_INT 0
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
54497: PPUSH
54498: PPUSH
// if not units then
54499: LD_VAR 0 1
54503: NOT
54504: IFFALSE 54508
// exit ;
54506: GO 54933
// result := UnitFilter ( units , [ f_ok ] ) ;
54508: LD_ADDR_VAR 0 3
54512: PUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: LD_INT 50
54520: PUSH
54521: EMPTY
54522: LIST
54523: PPUSH
54524: CALL_OW 72
54528: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54529: LD_ADDR_VAR 0 8
54533: PUSH
54534: LD_VAR 0 1
54538: PUSH
54539: LD_INT 1
54541: ARRAY
54542: PPUSH
54543: CALL_OW 255
54547: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
54548: LD_ADDR_VAR 0 10
54552: PUSH
54553: LD_INT 29
54555: PUSH
54556: LD_EXP 106
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// if not result then
54565: LD_VAR 0 3
54569: NOT
54570: IFFALSE 54574
// exit ;
54572: GO 54933
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54574: LD_ADDR_VAR 0 5
54578: PUSH
54579: LD_INT 81
54581: PUSH
54582: LD_VAR 0 8
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PPUSH
54591: CALL_OW 69
54595: ST_TO_ADDR
// for i in result do
54596: LD_ADDR_VAR 0 4
54600: PUSH
54601: LD_VAR 0 3
54605: PUSH
54606: FOR_IN
54607: IFFALSE 54931
// begin tag := GetTag ( i ) + 1 ;
54609: LD_ADDR_VAR 0 9
54613: PUSH
54614: LD_VAR 0 4
54618: PPUSH
54619: CALL_OW 110
54623: PUSH
54624: LD_INT 1
54626: PLUS
54627: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54628: LD_ADDR_VAR 0 7
54632: PUSH
54633: LD_VAR 0 4
54637: PPUSH
54638: CALL_OW 250
54642: PPUSH
54643: LD_VAR 0 4
54647: PPUSH
54648: CALL_OW 251
54652: PPUSH
54653: LD_INT 6
54655: PPUSH
54656: CALL 54231 0 3
54660: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
54661: LD_VAR 0 7
54665: PUSH
54666: LD_VAR 0 4
54670: PPUSH
54671: CALL_OW 264
54675: PUSH
54676: LD_VAR 0 10
54680: IN
54681: NOT
54682: AND
54683: IFFALSE 54722
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54685: LD_VAR 0 4
54689: PPUSH
54690: LD_VAR 0 7
54694: PUSH
54695: LD_INT 1
54697: ARRAY
54698: PUSH
54699: LD_INT 1
54701: ARRAY
54702: PPUSH
54703: LD_VAR 0 7
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PUSH
54712: LD_INT 2
54714: ARRAY
54715: PPUSH
54716: CALL_OW 116
54720: GO 54929
// if path > tag then
54722: LD_VAR 0 2
54726: PUSH
54727: LD_VAR 0 9
54731: GREATER
54732: IFFALSE 54899
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
54734: LD_ADDR_VAR 0 6
54738: PUSH
54739: LD_VAR 0 5
54743: PPUSH
54744: LD_INT 91
54746: PUSH
54747: LD_VAR 0 4
54751: PUSH
54752: LD_INT 12
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: PPUSH
54760: CALL_OW 72
54764: ST_TO_ADDR
// if nearEnemy then
54765: LD_VAR 0 6
54769: IFFALSE 54797
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54771: LD_VAR 0 4
54775: PPUSH
54776: LD_VAR 0 6
54780: PPUSH
54781: LD_VAR 0 4
54785: PPUSH
54786: CALL_OW 74
54790: PPUSH
54791: CALL_OW 115
54795: GO 54897
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54797: LD_VAR 0 4
54801: PPUSH
54802: LD_VAR 0 2
54806: PUSH
54807: LD_VAR 0 9
54811: ARRAY
54812: PUSH
54813: LD_INT 1
54815: ARRAY
54816: PPUSH
54817: LD_VAR 0 2
54821: PUSH
54822: LD_VAR 0 9
54826: ARRAY
54827: PUSH
54828: LD_INT 2
54830: ARRAY
54831: PPUSH
54832: CALL_OW 297
54836: PUSH
54837: LD_INT 6
54839: GREATER
54840: IFFALSE 54883
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54842: LD_VAR 0 4
54846: PPUSH
54847: LD_VAR 0 2
54851: PUSH
54852: LD_VAR 0 9
54856: ARRAY
54857: PUSH
54858: LD_INT 1
54860: ARRAY
54861: PPUSH
54862: LD_VAR 0 2
54866: PUSH
54867: LD_VAR 0 9
54871: ARRAY
54872: PUSH
54873: LD_INT 2
54875: ARRAY
54876: PPUSH
54877: CALL_OW 114
54881: GO 54897
// SetTag ( i , tag ) ;
54883: LD_VAR 0 4
54887: PPUSH
54888: LD_VAR 0 9
54892: PPUSH
54893: CALL_OW 109
// end else
54897: GO 54929
// if enemy then
54899: LD_VAR 0 5
54903: IFFALSE 54929
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54905: LD_VAR 0 4
54909: PPUSH
54910: LD_VAR 0 5
54914: PPUSH
54915: LD_VAR 0 4
54919: PPUSH
54920: CALL_OW 74
54924: PPUSH
54925: CALL_OW 115
// end ;
54929: GO 54606
54931: POP
54932: POP
// end ;
54933: LD_VAR 0 3
54937: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54938: LD_INT 0
54940: PPUSH
54941: PPUSH
54942: PPUSH
// if not unit or IsInUnit ( unit ) then
54943: LD_VAR 0 1
54947: NOT
54948: PUSH
54949: LD_VAR 0 1
54953: PPUSH
54954: CALL_OW 310
54958: OR
54959: IFFALSE 54963
// exit ;
54961: GO 55054
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54963: LD_ADDR_VAR 0 4
54967: PUSH
54968: LD_VAR 0 1
54972: PPUSH
54973: CALL_OW 250
54977: PPUSH
54978: LD_VAR 0 2
54982: PPUSH
54983: LD_INT 1
54985: PPUSH
54986: CALL_OW 272
54990: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54991: LD_ADDR_VAR 0 5
54995: PUSH
54996: LD_VAR 0 1
55000: PPUSH
55001: CALL_OW 251
55005: PPUSH
55006: LD_VAR 0 2
55010: PPUSH
55011: LD_INT 1
55013: PPUSH
55014: CALL_OW 273
55018: ST_TO_ADDR
// if ValidHex ( x , y ) then
55019: LD_VAR 0 4
55023: PPUSH
55024: LD_VAR 0 5
55028: PPUSH
55029: CALL_OW 488
55033: IFFALSE 55054
// ComTurnXY ( unit , x , y ) ;
55035: LD_VAR 0 1
55039: PPUSH
55040: LD_VAR 0 4
55044: PPUSH
55045: LD_VAR 0 5
55049: PPUSH
55050: CALL_OW 118
// end ;
55054: LD_VAR 0 3
55058: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55059: LD_INT 0
55061: PPUSH
55062: PPUSH
// result := false ;
55063: LD_ADDR_VAR 0 3
55067: PUSH
55068: LD_INT 0
55070: ST_TO_ADDR
// if not units then
55071: LD_VAR 0 2
55075: NOT
55076: IFFALSE 55080
// exit ;
55078: GO 55125
// for i in units do
55080: LD_ADDR_VAR 0 4
55084: PUSH
55085: LD_VAR 0 2
55089: PUSH
55090: FOR_IN
55091: IFFALSE 55123
// if See ( side , i ) then
55093: LD_VAR 0 1
55097: PPUSH
55098: LD_VAR 0 4
55102: PPUSH
55103: CALL_OW 292
55107: IFFALSE 55121
// begin result := true ;
55109: LD_ADDR_VAR 0 3
55113: PUSH
55114: LD_INT 1
55116: ST_TO_ADDR
// exit ;
55117: POP
55118: POP
55119: GO 55125
// end ;
55121: GO 55090
55123: POP
55124: POP
// end ;
55125: LD_VAR 0 3
55129: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55130: LD_INT 0
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
// if not unit or not points then
55136: LD_VAR 0 1
55140: NOT
55141: PUSH
55142: LD_VAR 0 2
55146: NOT
55147: OR
55148: IFFALSE 55152
// exit ;
55150: GO 55242
// dist := 99999 ;
55152: LD_ADDR_VAR 0 5
55156: PUSH
55157: LD_INT 99999
55159: ST_TO_ADDR
// for i in points do
55160: LD_ADDR_VAR 0 4
55164: PUSH
55165: LD_VAR 0 2
55169: PUSH
55170: FOR_IN
55171: IFFALSE 55240
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55173: LD_ADDR_VAR 0 6
55177: PUSH
55178: LD_VAR 0 1
55182: PPUSH
55183: LD_VAR 0 4
55187: PUSH
55188: LD_INT 1
55190: ARRAY
55191: PPUSH
55192: LD_VAR 0 4
55196: PUSH
55197: LD_INT 2
55199: ARRAY
55200: PPUSH
55201: CALL_OW 297
55205: ST_TO_ADDR
// if tmpDist < dist then
55206: LD_VAR 0 6
55210: PUSH
55211: LD_VAR 0 5
55215: LESS
55216: IFFALSE 55238
// begin result := i ;
55218: LD_ADDR_VAR 0 3
55222: PUSH
55223: LD_VAR 0 4
55227: ST_TO_ADDR
// dist := tmpDist ;
55228: LD_ADDR_VAR 0 5
55232: PUSH
55233: LD_VAR 0 6
55237: ST_TO_ADDR
// end ; end ;
55238: GO 55170
55240: POP
55241: POP
// end ;
55242: LD_VAR 0 3
55246: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
55247: LD_INT 0
55249: PPUSH
// uc_side := side ;
55250: LD_ADDR_OWVAR 20
55254: PUSH
55255: LD_VAR 0 1
55259: ST_TO_ADDR
// uc_nation := 3 ;
55260: LD_ADDR_OWVAR 21
55264: PUSH
55265: LD_INT 3
55267: ST_TO_ADDR
// vc_chassis := 25 ;
55268: LD_ADDR_OWVAR 37
55272: PUSH
55273: LD_INT 25
55275: ST_TO_ADDR
// vc_engine := engine_siberite ;
55276: LD_ADDR_OWVAR 39
55280: PUSH
55281: LD_INT 3
55283: ST_TO_ADDR
// vc_control := control_computer ;
55284: LD_ADDR_OWVAR 38
55288: PUSH
55289: LD_INT 3
55291: ST_TO_ADDR
// vc_weapon := 59 ;
55292: LD_ADDR_OWVAR 40
55296: PUSH
55297: LD_INT 59
55299: ST_TO_ADDR
// result := CreateVehicle ;
55300: LD_ADDR_VAR 0 5
55304: PUSH
55305: CALL_OW 45
55309: ST_TO_ADDR
// SetDir ( result , d ) ;
55310: LD_VAR 0 5
55314: PPUSH
55315: LD_VAR 0 4
55319: PPUSH
55320: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55324: LD_VAR 0 5
55328: PPUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: LD_VAR 0 3
55338: PPUSH
55339: LD_INT 0
55341: PPUSH
55342: CALL_OW 48
// end ;
55346: LD_VAR 0 5
55350: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55351: LD_INT 0
55353: PPUSH
55354: PPUSH
55355: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55356: LD_ADDR_VAR 0 2
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
55379: LD_VAR 0 1
55383: NOT
55384: PUSH
55385: LD_VAR 0 1
55389: PPUSH
55390: CALL_OW 264
55394: PUSH
55395: LD_INT 12
55397: PUSH
55398: LD_INT 51
55400: PUSH
55401: LD_INT 32
55403: PUSH
55404: LD_EXP 103
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: IN
55415: NOT
55416: OR
55417: IFFALSE 55421
// exit ;
55419: GO 55519
// for i := 1 to 3 do
55421: LD_ADDR_VAR 0 3
55425: PUSH
55426: DOUBLE
55427: LD_INT 1
55429: DEC
55430: ST_TO_ADDR
55431: LD_INT 3
55433: PUSH
55434: FOR_TO
55435: IFFALSE 55517
// begin tmp := GetCargo ( cargo , i ) ;
55437: LD_ADDR_VAR 0 4
55441: PUSH
55442: LD_VAR 0 1
55446: PPUSH
55447: LD_VAR 0 3
55451: PPUSH
55452: CALL_OW 289
55456: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55457: LD_ADDR_VAR 0 2
55461: PUSH
55462: LD_VAR 0 2
55466: PPUSH
55467: LD_VAR 0 3
55471: PPUSH
55472: LD_VAR 0 4
55476: PPUSH
55477: CALL_OW 1
55481: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55482: LD_ADDR_VAR 0 2
55486: PUSH
55487: LD_VAR 0 2
55491: PPUSH
55492: LD_INT 4
55494: PPUSH
55495: LD_VAR 0 2
55499: PUSH
55500: LD_INT 4
55502: ARRAY
55503: PUSH
55504: LD_VAR 0 4
55508: PLUS
55509: PPUSH
55510: CALL_OW 1
55514: ST_TO_ADDR
// end ;
55515: GO 55434
55517: POP
55518: POP
// end ; end_of_file
55519: LD_VAR 0 2
55523: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55524: LD_VAR 0 1
55528: PUSH
55529: LD_INT 200
55531: DOUBLE
55532: GREATEREQUAL
55533: IFFALSE 55541
55535: LD_INT 299
55537: DOUBLE
55538: LESSEQUAL
55539: IFTRUE 55543
55541: GO 55575
55543: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55544: LD_VAR 0 1
55548: PPUSH
55549: LD_VAR 0 2
55553: PPUSH
55554: LD_VAR 0 3
55558: PPUSH
55559: LD_VAR 0 4
55563: PPUSH
55564: LD_VAR 0 5
55568: PPUSH
55569: CALL 56065 0 5
55573: GO 55652
55575: LD_INT 300
55577: DOUBLE
55578: GREATEREQUAL
55579: IFFALSE 55587
55581: LD_INT 399
55583: DOUBLE
55584: LESSEQUAL
55585: IFTRUE 55589
55587: GO 55651
55589: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55590: LD_VAR 0 1
55594: PPUSH
55595: LD_VAR 0 2
55599: PPUSH
55600: LD_VAR 0 3
55604: PPUSH
55605: LD_VAR 0 4
55609: PPUSH
55610: LD_VAR 0 5
55614: PPUSH
55615: LD_VAR 0 6
55619: PPUSH
55620: LD_VAR 0 7
55624: PPUSH
55625: LD_VAR 0 8
55629: PPUSH
55630: LD_VAR 0 9
55634: PPUSH
55635: LD_VAR 0 10
55639: PPUSH
55640: LD_VAR 0 11
55644: PPUSH
55645: CALL 72681 0 11
55649: GO 55652
55651: POP
// end ;
55652: PPOPN 11
55654: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55655: LD_VAR 0 1
55659: PPUSH
55660: LD_VAR 0 2
55664: PPUSH
55665: LD_VAR 0 3
55669: PPUSH
55670: LD_VAR 0 4
55674: PPUSH
55675: LD_VAR 0 5
55679: PPUSH
55680: CALL 55801 0 5
// end ; end_of_file
55684: PPOPN 5
55686: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55687: LD_INT 0
55689: PPUSH
55690: PPUSH
55691: PPUSH
55692: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 264
55702: PUSH
55703: LD_EXP 106
55707: EQUAL
55708: IFFALSE 55780
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55710: LD_INT 68
55712: PPUSH
55713: LD_VAR 0 1
55717: PPUSH
55718: CALL_OW 255
55722: PPUSH
55723: CALL_OW 321
55727: PUSH
55728: LD_INT 2
55730: EQUAL
55731: IFFALSE 55743
// eff := 70 else
55733: LD_ADDR_VAR 0 4
55737: PUSH
55738: LD_INT 70
55740: ST_TO_ADDR
55741: GO 55751
// eff := 30 ;
55743: LD_ADDR_VAR 0 4
55747: PUSH
55748: LD_INT 30
55750: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55751: LD_VAR 0 1
55755: PPUSH
55756: CALL_OW 250
55760: PPUSH
55761: LD_VAR 0 1
55765: PPUSH
55766: CALL_OW 251
55770: PPUSH
55771: LD_VAR 0 4
55775: PPUSH
55776: CALL_OW 495
// end ; end ;
55780: LD_VAR 0 2
55784: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55785: LD_INT 0
55787: PPUSH
// end ;
55788: LD_VAR 0 4
55792: RET
// export function SOS_Command ( cmd ) ; begin
55793: LD_INT 0
55795: PPUSH
// end ;
55796: LD_VAR 0 2
55800: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55801: LD_INT 0
55803: PPUSH
// end ;
55804: LD_VAR 0 6
55808: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
55809: LD_INT 0
55811: PPUSH
55812: PPUSH
// if not vehicle or not factory then
55813: LD_VAR 0 1
55817: NOT
55818: PUSH
55819: LD_VAR 0 2
55823: NOT
55824: OR
55825: IFFALSE 55829
// exit ;
55827: GO 56060
// if factoryWaypoints >= factory then
55829: LD_EXP 33
55833: PUSH
55834: LD_VAR 0 2
55838: GREATEREQUAL
55839: IFFALSE 56060
// if factoryWaypoints [ factory ] then
55841: LD_EXP 33
55845: PUSH
55846: LD_VAR 0 2
55850: ARRAY
55851: IFFALSE 56060
// begin if GetControl ( vehicle ) = control_manual then
55853: LD_VAR 0 1
55857: PPUSH
55858: CALL_OW 263
55862: PUSH
55863: LD_INT 1
55865: EQUAL
55866: IFFALSE 55947
// begin driver := IsDrivenBy ( vehicle ) ;
55868: LD_ADDR_VAR 0 4
55872: PUSH
55873: LD_VAR 0 1
55877: PPUSH
55878: CALL_OW 311
55882: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55883: LD_VAR 0 4
55887: PPUSH
55888: LD_EXP 33
55892: PUSH
55893: LD_VAR 0 2
55897: ARRAY
55898: PUSH
55899: LD_INT 3
55901: ARRAY
55902: PPUSH
55903: LD_EXP 33
55907: PUSH
55908: LD_VAR 0 2
55912: ARRAY
55913: PUSH
55914: LD_INT 4
55916: ARRAY
55917: PPUSH
55918: CALL_OW 171
// AddComExitVehicle ( driver ) ;
55922: LD_VAR 0 4
55926: PPUSH
55927: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
55931: LD_VAR 0 4
55935: PPUSH
55936: LD_VAR 0 2
55940: PPUSH
55941: CALL_OW 180
// end else
55945: GO 56060
// if GetControl ( vehicle ) = control_remote then
55947: LD_VAR 0 1
55951: PPUSH
55952: CALL_OW 263
55956: PUSH
55957: LD_INT 2
55959: EQUAL
55960: IFFALSE 56021
// begin wait ( 0 0$2 ) ;
55962: LD_INT 70
55964: PPUSH
55965: CALL_OW 67
// if Connect ( vehicle ) then
55969: LD_VAR 0 1
55973: PPUSH
55974: CALL 23169 0 1
55978: IFFALSE 56019
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55980: LD_VAR 0 1
55984: PPUSH
55985: LD_EXP 33
55989: PUSH
55990: LD_VAR 0 2
55994: ARRAY
55995: PUSH
55996: LD_INT 3
55998: ARRAY
55999: PPUSH
56000: LD_EXP 33
56004: PUSH
56005: LD_VAR 0 2
56009: ARRAY
56010: PUSH
56011: LD_INT 4
56013: ARRAY
56014: PPUSH
56015: CALL_OW 171
// end else
56019: GO 56060
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56021: LD_VAR 0 1
56025: PPUSH
56026: LD_EXP 33
56030: PUSH
56031: LD_VAR 0 2
56035: ARRAY
56036: PUSH
56037: LD_INT 3
56039: ARRAY
56040: PPUSH
56041: LD_EXP 33
56045: PUSH
56046: LD_VAR 0 2
56050: ARRAY
56051: PUSH
56052: LD_INT 4
56054: ARRAY
56055: PPUSH
56056: CALL_OW 171
// end ; end ;
56060: LD_VAR 0 3
56064: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56065: LD_INT 0
56067: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56068: LD_VAR 0 1
56072: PUSH
56073: LD_INT 250
56075: EQUAL
56076: PUSH
56077: LD_VAR 0 2
56081: PPUSH
56082: CALL_OW 264
56086: PUSH
56087: LD_EXP 109
56091: EQUAL
56092: AND
56093: IFFALSE 56114
// MinerPlaceMine ( unit , x , y ) ;
56095: LD_VAR 0 2
56099: PPUSH
56100: LD_VAR 0 4
56104: PPUSH
56105: LD_VAR 0 5
56109: PPUSH
56110: CALL 58842 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56114: LD_VAR 0 1
56118: PUSH
56119: LD_INT 251
56121: EQUAL
56122: PUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: CALL_OW 264
56132: PUSH
56133: LD_EXP 109
56137: EQUAL
56138: AND
56139: IFFALSE 56160
// MinerDetonateMine ( unit , x , y ) ;
56141: LD_VAR 0 2
56145: PPUSH
56146: LD_VAR 0 4
56150: PPUSH
56151: LD_VAR 0 5
56155: PPUSH
56156: CALL 59119 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56160: LD_VAR 0 1
56164: PUSH
56165: LD_INT 252
56167: EQUAL
56168: PUSH
56169: LD_VAR 0 2
56173: PPUSH
56174: CALL_OW 264
56178: PUSH
56179: LD_EXP 109
56183: EQUAL
56184: AND
56185: IFFALSE 56206
// MinerCreateMinefield ( unit , x , y ) ;
56187: LD_VAR 0 2
56191: PPUSH
56192: LD_VAR 0 4
56196: PPUSH
56197: LD_VAR 0 5
56201: PPUSH
56202: CALL 59536 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56206: LD_VAR 0 1
56210: PUSH
56211: LD_INT 253
56213: EQUAL
56214: PUSH
56215: LD_VAR 0 2
56219: PPUSH
56220: CALL_OW 257
56224: PUSH
56225: LD_INT 5
56227: EQUAL
56228: AND
56229: IFFALSE 56250
// ComBinocular ( unit , x , y ) ;
56231: LD_VAR 0 2
56235: PPUSH
56236: LD_VAR 0 4
56240: PPUSH
56241: LD_VAR 0 5
56245: PPUSH
56246: CALL 59907 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56250: LD_VAR 0 1
56254: PUSH
56255: LD_INT 254
56257: EQUAL
56258: PUSH
56259: LD_VAR 0 2
56263: PPUSH
56264: CALL_OW 264
56268: PUSH
56269: LD_EXP 104
56273: EQUAL
56274: AND
56275: PUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: CALL_OW 263
56285: PUSH
56286: LD_INT 3
56288: EQUAL
56289: AND
56290: IFFALSE 56306
// HackDestroyVehicle ( unit , selectedUnit ) ;
56292: LD_VAR 0 2
56296: PPUSH
56297: LD_VAR 0 3
56301: PPUSH
56302: CALL 58202 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56306: LD_VAR 0 1
56310: PUSH
56311: LD_INT 255
56313: EQUAL
56314: PUSH
56315: LD_VAR 0 2
56319: PPUSH
56320: CALL_OW 264
56324: PUSH
56325: LD_INT 14
56327: PUSH
56328: LD_INT 53
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: IN
56335: AND
56336: PUSH
56337: LD_VAR 0 4
56341: PPUSH
56342: LD_VAR 0 5
56346: PPUSH
56347: CALL_OW 488
56351: AND
56352: IFFALSE 56376
// CutTreeXYR ( unit , x , y , 12 ) ;
56354: LD_VAR 0 2
56358: PPUSH
56359: LD_VAR 0 4
56363: PPUSH
56364: LD_VAR 0 5
56368: PPUSH
56369: LD_INT 12
56371: PPUSH
56372: CALL 56768 0 4
// if cmd = 256 then
56376: LD_VAR 0 1
56380: PUSH
56381: LD_INT 256
56383: EQUAL
56384: IFFALSE 56405
// SetFactoryWaypoint ( unit , x , y ) ;
56386: LD_VAR 0 2
56390: PPUSH
56391: LD_VAR 0 4
56395: PPUSH
56396: LD_VAR 0 5
56400: PPUSH
56401: CALL 56410 0 3
// end ;
56405: LD_VAR 0 6
56409: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56410: LD_INT 0
56412: PPUSH
56413: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56414: LD_VAR 0 1
56418: NOT
56419: PUSH
56420: LD_VAR 0 2
56424: PPUSH
56425: LD_VAR 0 3
56429: PPUSH
56430: CALL_OW 488
56434: NOT
56435: OR
56436: PUSH
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 266
56446: PUSH
56447: LD_INT 3
56449: NONEQUAL
56450: PUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 247
56460: PUSH
56461: LD_INT 1
56463: EQUAL
56464: NOT
56465: AND
56466: OR
56467: IFFALSE 56471
// exit ;
56469: GO 56620
// if GetType ( factory ) = unit_human then
56471: LD_VAR 0 1
56475: PPUSH
56476: CALL_OW 247
56480: PUSH
56481: LD_INT 1
56483: EQUAL
56484: IFFALSE 56501
// factory := IsInUnit ( factory ) ;
56486: LD_ADDR_VAR 0 1
56490: PUSH
56491: LD_VAR 0 1
56495: PPUSH
56496: CALL_OW 310
56500: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56501: LD_VAR 0 1
56505: PPUSH
56506: CALL_OW 266
56510: PUSH
56511: LD_INT 3
56513: NONEQUAL
56514: IFFALSE 56518
// exit ;
56516: GO 56620
// if HexInfo ( x , y ) = factory then
56518: LD_VAR 0 2
56522: PPUSH
56523: LD_VAR 0 3
56527: PPUSH
56528: CALL_OW 428
56532: PUSH
56533: LD_VAR 0 1
56537: EQUAL
56538: IFFALSE 56565
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56540: LD_ADDR_EXP 33
56544: PUSH
56545: LD_EXP 33
56549: PPUSH
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_INT 0
56557: PPUSH
56558: CALL_OW 1
56562: ST_TO_ADDR
56563: GO 56616
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56565: LD_ADDR_EXP 33
56569: PUSH
56570: LD_EXP 33
56574: PPUSH
56575: LD_VAR 0 1
56579: PPUSH
56580: LD_VAR 0 1
56584: PPUSH
56585: CALL_OW 255
56589: PUSH
56590: LD_VAR 0 1
56594: PUSH
56595: LD_VAR 0 2
56599: PUSH
56600: LD_VAR 0 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: PPUSH
56611: CALL_OW 1
56615: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56616: CALL 56625 0 0
// end ;
56620: LD_VAR 0 4
56624: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
56625: LD_INT 0
56627: PPUSH
56628: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56629: LD_STRING resetFactoryWaypoint();
56631: PPUSH
56632: CALL_OW 559
// if factoryWaypoints then
56636: LD_EXP 33
56640: IFFALSE 56763
// begin for i := 1 to factoryWaypoints do
56642: LD_ADDR_VAR 0 2
56646: PUSH
56647: DOUBLE
56648: LD_INT 1
56650: DEC
56651: ST_TO_ADDR
56652: LD_EXP 33
56656: PUSH
56657: FOR_TO
56658: IFFALSE 56761
// if factoryWaypoints [ i ] then
56660: LD_EXP 33
56664: PUSH
56665: LD_VAR 0 2
56669: ARRAY
56670: IFFALSE 56759
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
56672: LD_STRING setFactoryWaypointXY(
56674: PUSH
56675: LD_EXP 33
56679: PUSH
56680: LD_VAR 0 2
56684: ARRAY
56685: PUSH
56686: LD_INT 1
56688: ARRAY
56689: STR
56690: PUSH
56691: LD_STRING ,
56693: STR
56694: PUSH
56695: LD_EXP 33
56699: PUSH
56700: LD_VAR 0 2
56704: ARRAY
56705: PUSH
56706: LD_INT 2
56708: ARRAY
56709: STR
56710: PUSH
56711: LD_STRING ,
56713: STR
56714: PUSH
56715: LD_EXP 33
56719: PUSH
56720: LD_VAR 0 2
56724: ARRAY
56725: PUSH
56726: LD_INT 3
56728: ARRAY
56729: STR
56730: PUSH
56731: LD_STRING ,
56733: STR
56734: PUSH
56735: LD_EXP 33
56739: PUSH
56740: LD_VAR 0 2
56744: ARRAY
56745: PUSH
56746: LD_INT 4
56748: ARRAY
56749: STR
56750: PUSH
56751: LD_STRING )
56753: STR
56754: PPUSH
56755: CALL_OW 559
56759: GO 56657
56761: POP
56762: POP
// end ; end ;
56763: LD_VAR 0 1
56767: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56768: LD_INT 0
56770: PPUSH
56771: PPUSH
56772: PPUSH
56773: PPUSH
56774: PPUSH
56775: PPUSH
56776: PPUSH
56777: PPUSH
56778: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
56779: LD_VAR 0 1
56783: NOT
56784: PUSH
56785: LD_VAR 0 2
56789: PPUSH
56790: LD_VAR 0 3
56794: PPUSH
56795: CALL_OW 488
56799: NOT
56800: OR
56801: PUSH
56802: LD_VAR 0 4
56806: NOT
56807: OR
56808: IFFALSE 56812
// exit ;
56810: GO 57152
// list := [ ] ;
56812: LD_ADDR_VAR 0 13
56816: PUSH
56817: EMPTY
56818: ST_TO_ADDR
// if x - r < 0 then
56819: LD_VAR 0 2
56823: PUSH
56824: LD_VAR 0 4
56828: MINUS
56829: PUSH
56830: LD_INT 0
56832: LESS
56833: IFFALSE 56845
// min_x := 0 else
56835: LD_ADDR_VAR 0 7
56839: PUSH
56840: LD_INT 0
56842: ST_TO_ADDR
56843: GO 56861
// min_x := x - r ;
56845: LD_ADDR_VAR 0 7
56849: PUSH
56850: LD_VAR 0 2
56854: PUSH
56855: LD_VAR 0 4
56859: MINUS
56860: ST_TO_ADDR
// if y - r < 0 then
56861: LD_VAR 0 3
56865: PUSH
56866: LD_VAR 0 4
56870: MINUS
56871: PUSH
56872: LD_INT 0
56874: LESS
56875: IFFALSE 56887
// min_y := 0 else
56877: LD_ADDR_VAR 0 8
56881: PUSH
56882: LD_INT 0
56884: ST_TO_ADDR
56885: GO 56903
// min_y := y - r ;
56887: LD_ADDR_VAR 0 8
56891: PUSH
56892: LD_VAR 0 3
56896: PUSH
56897: LD_VAR 0 4
56901: MINUS
56902: ST_TO_ADDR
// max_x := x + r ;
56903: LD_ADDR_VAR 0 9
56907: PUSH
56908: LD_VAR 0 2
56912: PUSH
56913: LD_VAR 0 4
56917: PLUS
56918: ST_TO_ADDR
// max_y := y + r ;
56919: LD_ADDR_VAR 0 10
56923: PUSH
56924: LD_VAR 0 3
56928: PUSH
56929: LD_VAR 0 4
56933: PLUS
56934: ST_TO_ADDR
// for _x = min_x to max_x do
56935: LD_ADDR_VAR 0 11
56939: PUSH
56940: DOUBLE
56941: LD_VAR 0 7
56945: DEC
56946: ST_TO_ADDR
56947: LD_VAR 0 9
56951: PUSH
56952: FOR_TO
56953: IFFALSE 57070
// for _y = min_y to max_y do
56955: LD_ADDR_VAR 0 12
56959: PUSH
56960: DOUBLE
56961: LD_VAR 0 8
56965: DEC
56966: ST_TO_ADDR
56967: LD_VAR 0 10
56971: PUSH
56972: FOR_TO
56973: IFFALSE 57066
// begin if not ValidHex ( _x , _y ) then
56975: LD_VAR 0 11
56979: PPUSH
56980: LD_VAR 0 12
56984: PPUSH
56985: CALL_OW 488
56989: NOT
56990: IFFALSE 56994
// continue ;
56992: GO 56972
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56994: LD_VAR 0 11
56998: PPUSH
56999: LD_VAR 0 12
57003: PPUSH
57004: CALL_OW 351
57008: PUSH
57009: LD_VAR 0 11
57013: PPUSH
57014: LD_VAR 0 12
57018: PPUSH
57019: CALL_OW 554
57023: AND
57024: IFFALSE 57064
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57026: LD_ADDR_VAR 0 13
57030: PUSH
57031: LD_VAR 0 13
57035: PPUSH
57036: LD_VAR 0 13
57040: PUSH
57041: LD_INT 1
57043: PLUS
57044: PPUSH
57045: LD_VAR 0 11
57049: PUSH
57050: LD_VAR 0 12
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PPUSH
57059: CALL_OW 2
57063: ST_TO_ADDR
// end ;
57064: GO 56972
57066: POP
57067: POP
57068: GO 56952
57070: POP
57071: POP
// if not list then
57072: LD_VAR 0 13
57076: NOT
57077: IFFALSE 57081
// exit ;
57079: GO 57152
// for i in list do
57081: LD_ADDR_VAR 0 6
57085: PUSH
57086: LD_VAR 0 13
57090: PUSH
57091: FOR_IN
57092: IFFALSE 57150
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57094: LD_VAR 0 1
57098: PPUSH
57099: LD_STRING M
57101: PUSH
57102: LD_VAR 0 6
57106: PUSH
57107: LD_INT 1
57109: ARRAY
57110: PUSH
57111: LD_VAR 0 6
57115: PUSH
57116: LD_INT 2
57118: ARRAY
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: PPUSH
57144: CALL_OW 447
57148: GO 57091
57150: POP
57151: POP
// end ;
57152: LD_VAR 0 5
57156: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57157: LD_EXP 34
57161: NOT
57162: IFFALSE 57212
57164: GO 57166
57166: DISABLE
// begin initHack := true ;
57167: LD_ADDR_EXP 34
57171: PUSH
57172: LD_INT 1
57174: ST_TO_ADDR
// hackTanks := [ ] ;
57175: LD_ADDR_EXP 35
57179: PUSH
57180: EMPTY
57181: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57182: LD_ADDR_EXP 36
57186: PUSH
57187: EMPTY
57188: ST_TO_ADDR
// hackLimit := 3 ;
57189: LD_ADDR_EXP 37
57193: PUSH
57194: LD_INT 3
57196: ST_TO_ADDR
// hackDist := 12 ;
57197: LD_ADDR_EXP 38
57201: PUSH
57202: LD_INT 12
57204: ST_TO_ADDR
// hackCounter := [ ] ;
57205: LD_ADDR_EXP 39
57209: PUSH
57210: EMPTY
57211: ST_TO_ADDR
// end ;
57212: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57213: LD_EXP 34
57217: PUSH
57218: LD_INT 34
57220: PUSH
57221: LD_EXP 104
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PPUSH
57230: CALL_OW 69
57234: AND
57235: IFFALSE 57490
57237: GO 57239
57239: DISABLE
57240: LD_INT 0
57242: PPUSH
57243: PPUSH
// begin enable ;
57244: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57245: LD_ADDR_VAR 0 1
57249: PUSH
57250: LD_INT 34
57252: PUSH
57253: LD_EXP 104
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PPUSH
57262: CALL_OW 69
57266: PUSH
57267: FOR_IN
57268: IFFALSE 57488
// begin if not i in hackTanks then
57270: LD_VAR 0 1
57274: PUSH
57275: LD_EXP 35
57279: IN
57280: NOT
57281: IFFALSE 57364
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57283: LD_ADDR_EXP 35
57287: PUSH
57288: LD_EXP 35
57292: PPUSH
57293: LD_EXP 35
57297: PUSH
57298: LD_INT 1
57300: PLUS
57301: PPUSH
57302: LD_VAR 0 1
57306: PPUSH
57307: CALL_OW 1
57311: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57312: LD_ADDR_EXP 36
57316: PUSH
57317: LD_EXP 36
57321: PPUSH
57322: LD_EXP 36
57326: PUSH
57327: LD_INT 1
57329: PLUS
57330: PPUSH
57331: EMPTY
57332: PPUSH
57333: CALL_OW 1
57337: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57338: LD_ADDR_EXP 39
57342: PUSH
57343: LD_EXP 39
57347: PPUSH
57348: LD_EXP 39
57352: PUSH
57353: LD_INT 1
57355: PLUS
57356: PPUSH
57357: EMPTY
57358: PPUSH
57359: CALL_OW 1
57363: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57364: LD_VAR 0 1
57368: PPUSH
57369: CALL_OW 302
57373: NOT
57374: IFFALSE 57387
// begin HackUnlinkAll ( i ) ;
57376: LD_VAR 0 1
57380: PPUSH
57381: CALL 57493 0 1
// continue ;
57385: GO 57267
// end ; HackCheckCapturedStatus ( i ) ;
57387: LD_VAR 0 1
57391: PPUSH
57392: CALL 57936 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57396: LD_ADDR_VAR 0 2
57400: PUSH
57401: LD_INT 81
57403: PUSH
57404: LD_VAR 0 1
57408: PPUSH
57409: CALL_OW 255
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 33
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 91
57430: PUSH
57431: LD_VAR 0 1
57435: PUSH
57436: LD_EXP 38
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 50
57448: PUSH
57449: EMPTY
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: PPUSH
57458: CALL_OW 69
57462: ST_TO_ADDR
// if not tmp then
57463: LD_VAR 0 2
57467: NOT
57468: IFFALSE 57472
// continue ;
57470: GO 57267
// HackLink ( i , tmp ) ;
57472: LD_VAR 0 1
57476: PPUSH
57477: LD_VAR 0 2
57481: PPUSH
57482: CALL 57629 0 2
// end ;
57486: GO 57267
57488: POP
57489: POP
// end ;
57490: PPOPN 2
57492: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57493: LD_INT 0
57495: PPUSH
57496: PPUSH
57497: PPUSH
// if not hack in hackTanks then
57498: LD_VAR 0 1
57502: PUSH
57503: LD_EXP 35
57507: IN
57508: NOT
57509: IFFALSE 57513
// exit ;
57511: GO 57624
// index := GetElementIndex ( hackTanks , hack ) ;
57513: LD_ADDR_VAR 0 4
57517: PUSH
57518: LD_EXP 35
57522: PPUSH
57523: LD_VAR 0 1
57527: PPUSH
57528: CALL 19983 0 2
57532: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57533: LD_EXP 36
57537: PUSH
57538: LD_VAR 0 4
57542: ARRAY
57543: IFFALSE 57624
// begin for i in hackTanksCaptured [ index ] do
57545: LD_ADDR_VAR 0 3
57549: PUSH
57550: LD_EXP 36
57554: PUSH
57555: LD_VAR 0 4
57559: ARRAY
57560: PUSH
57561: FOR_IN
57562: IFFALSE 57588
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57564: LD_VAR 0 3
57568: PUSH
57569: LD_INT 1
57571: ARRAY
57572: PPUSH
57573: LD_VAR 0 3
57577: PUSH
57578: LD_INT 2
57580: ARRAY
57581: PPUSH
57582: CALL_OW 235
57586: GO 57561
57588: POP
57589: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57590: LD_ADDR_EXP 36
57594: PUSH
57595: LD_EXP 36
57599: PPUSH
57600: LD_VAR 0 4
57604: PPUSH
57605: EMPTY
57606: PPUSH
57607: CALL_OW 1
57611: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57612: LD_VAR 0 1
57616: PPUSH
57617: LD_INT 0
57619: PPUSH
57620: CALL_OW 505
// end ; end ;
57624: LD_VAR 0 2
57628: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57629: LD_INT 0
57631: PPUSH
57632: PPUSH
57633: PPUSH
// if not hack in hackTanks or not vehicles then
57634: LD_VAR 0 1
57638: PUSH
57639: LD_EXP 35
57643: IN
57644: NOT
57645: PUSH
57646: LD_VAR 0 2
57650: NOT
57651: OR
57652: IFFALSE 57656
// exit ;
57654: GO 57931
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57656: LD_ADDR_VAR 0 2
57660: PUSH
57661: LD_VAR 0 1
57665: PPUSH
57666: LD_VAR 0 2
57670: PPUSH
57671: LD_INT 1
57673: PPUSH
57674: LD_INT 1
57676: PPUSH
57677: CALL 20633 0 4
57681: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57682: LD_ADDR_VAR 0 5
57686: PUSH
57687: LD_EXP 35
57691: PPUSH
57692: LD_VAR 0 1
57696: PPUSH
57697: CALL 19983 0 2
57701: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57702: LD_EXP 36
57706: PUSH
57707: LD_VAR 0 5
57711: ARRAY
57712: PUSH
57713: LD_EXP 37
57717: LESS
57718: IFFALSE 57907
// begin for i := 1 to vehicles do
57720: LD_ADDR_VAR 0 4
57724: PUSH
57725: DOUBLE
57726: LD_INT 1
57728: DEC
57729: ST_TO_ADDR
57730: LD_VAR 0 2
57734: PUSH
57735: FOR_TO
57736: IFFALSE 57905
// begin if hackTanksCaptured [ index ] = hackLimit then
57738: LD_EXP 36
57742: PUSH
57743: LD_VAR 0 5
57747: ARRAY
57748: PUSH
57749: LD_EXP 37
57753: EQUAL
57754: IFFALSE 57758
// break ;
57756: GO 57905
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57758: LD_ADDR_EXP 39
57762: PUSH
57763: LD_EXP 39
57767: PPUSH
57768: LD_VAR 0 5
57772: PPUSH
57773: LD_EXP 39
57777: PUSH
57778: LD_VAR 0 5
57782: ARRAY
57783: PUSH
57784: LD_INT 1
57786: PLUS
57787: PPUSH
57788: CALL_OW 1
57792: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57793: LD_ADDR_EXP 36
57797: PUSH
57798: LD_EXP 36
57802: PPUSH
57803: LD_VAR 0 5
57807: PUSH
57808: LD_EXP 36
57812: PUSH
57813: LD_VAR 0 5
57817: ARRAY
57818: PUSH
57819: LD_INT 1
57821: PLUS
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PPUSH
57827: LD_VAR 0 2
57831: PUSH
57832: LD_VAR 0 4
57836: ARRAY
57837: PUSH
57838: LD_VAR 0 2
57842: PUSH
57843: LD_VAR 0 4
57847: ARRAY
57848: PPUSH
57849: CALL_OW 255
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PPUSH
57858: CALL 20198 0 3
57862: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57863: LD_VAR 0 2
57867: PUSH
57868: LD_VAR 0 4
57872: ARRAY
57873: PPUSH
57874: LD_VAR 0 1
57878: PPUSH
57879: CALL_OW 255
57883: PPUSH
57884: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57888: LD_VAR 0 2
57892: PUSH
57893: LD_VAR 0 4
57897: ARRAY
57898: PPUSH
57899: CALL_OW 141
// end ;
57903: GO 57735
57905: POP
57906: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57907: LD_VAR 0 1
57911: PPUSH
57912: LD_EXP 36
57916: PUSH
57917: LD_VAR 0 5
57921: ARRAY
57922: PUSH
57923: LD_INT 0
57925: PLUS
57926: PPUSH
57927: CALL_OW 505
// end ;
57931: LD_VAR 0 3
57935: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57936: LD_INT 0
57938: PPUSH
57939: PPUSH
57940: PPUSH
57941: PPUSH
// if not hack in hackTanks then
57942: LD_VAR 0 1
57946: PUSH
57947: LD_EXP 35
57951: IN
57952: NOT
57953: IFFALSE 57957
// exit ;
57955: GO 58197
// index := GetElementIndex ( hackTanks , hack ) ;
57957: LD_ADDR_VAR 0 4
57961: PUSH
57962: LD_EXP 35
57966: PPUSH
57967: LD_VAR 0 1
57971: PPUSH
57972: CALL 19983 0 2
57976: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57977: LD_ADDR_VAR 0 3
57981: PUSH
57982: DOUBLE
57983: LD_EXP 36
57987: PUSH
57988: LD_VAR 0 4
57992: ARRAY
57993: INC
57994: ST_TO_ADDR
57995: LD_INT 1
57997: PUSH
57998: FOR_DOWNTO
57999: IFFALSE 58171
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58001: LD_ADDR_VAR 0 5
58005: PUSH
58006: LD_EXP 36
58010: PUSH
58011: LD_VAR 0 4
58015: ARRAY
58016: PUSH
58017: LD_VAR 0 3
58021: ARRAY
58022: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58023: LD_VAR 0 5
58027: PUSH
58028: LD_INT 1
58030: ARRAY
58031: PPUSH
58032: CALL_OW 302
58036: NOT
58037: PUSH
58038: LD_VAR 0 5
58042: PUSH
58043: LD_INT 1
58045: ARRAY
58046: PPUSH
58047: CALL_OW 255
58051: PUSH
58052: LD_VAR 0 1
58056: PPUSH
58057: CALL_OW 255
58061: NONEQUAL
58062: OR
58063: IFFALSE 58169
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58065: LD_VAR 0 5
58069: PUSH
58070: LD_INT 1
58072: ARRAY
58073: PPUSH
58074: CALL_OW 305
58078: PUSH
58079: LD_VAR 0 5
58083: PUSH
58084: LD_INT 1
58086: ARRAY
58087: PPUSH
58088: CALL_OW 255
58092: PUSH
58093: LD_VAR 0 1
58097: PPUSH
58098: CALL_OW 255
58102: EQUAL
58103: AND
58104: IFFALSE 58128
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58106: LD_VAR 0 5
58110: PUSH
58111: LD_INT 1
58113: ARRAY
58114: PPUSH
58115: LD_VAR 0 5
58119: PUSH
58120: LD_INT 2
58122: ARRAY
58123: PPUSH
58124: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58128: LD_ADDR_EXP 36
58132: PUSH
58133: LD_EXP 36
58137: PPUSH
58138: LD_VAR 0 4
58142: PPUSH
58143: LD_EXP 36
58147: PUSH
58148: LD_VAR 0 4
58152: ARRAY
58153: PPUSH
58154: LD_VAR 0 3
58158: PPUSH
58159: CALL_OW 3
58163: PPUSH
58164: CALL_OW 1
58168: ST_TO_ADDR
// end ; end ;
58169: GO 57998
58171: POP
58172: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58173: LD_VAR 0 1
58177: PPUSH
58178: LD_EXP 36
58182: PUSH
58183: LD_VAR 0 4
58187: ARRAY
58188: PUSH
58189: LD_INT 0
58191: PLUS
58192: PPUSH
58193: CALL_OW 505
// end ;
58197: LD_VAR 0 2
58201: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58202: LD_INT 0
58204: PPUSH
58205: PPUSH
58206: PPUSH
58207: PPUSH
// if not hack in hackTanks then
58208: LD_VAR 0 1
58212: PUSH
58213: LD_EXP 35
58217: IN
58218: NOT
58219: IFFALSE 58223
// exit ;
58221: GO 58308
// index := GetElementIndex ( hackTanks , hack ) ;
58223: LD_ADDR_VAR 0 5
58227: PUSH
58228: LD_EXP 35
58232: PPUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL 19983 0 2
58242: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58243: LD_ADDR_VAR 0 4
58247: PUSH
58248: DOUBLE
58249: LD_INT 1
58251: DEC
58252: ST_TO_ADDR
58253: LD_EXP 36
58257: PUSH
58258: LD_VAR 0 5
58262: ARRAY
58263: PUSH
58264: FOR_TO
58265: IFFALSE 58306
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58267: LD_EXP 36
58271: PUSH
58272: LD_VAR 0 5
58276: ARRAY
58277: PUSH
58278: LD_VAR 0 4
58282: ARRAY
58283: PUSH
58284: LD_INT 1
58286: ARRAY
58287: PUSH
58288: LD_VAR 0 2
58292: EQUAL
58293: IFFALSE 58304
// KillUnit ( vehicle ) ;
58295: LD_VAR 0 2
58299: PPUSH
58300: CALL_OW 66
58304: GO 58264
58306: POP
58307: POP
// end ;
58308: LD_VAR 0 3
58312: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58313: LD_EXP 40
58317: NOT
58318: IFFALSE 58353
58320: GO 58322
58322: DISABLE
// begin initMiner := true ;
58323: LD_ADDR_EXP 40
58327: PUSH
58328: LD_INT 1
58330: ST_TO_ADDR
// minersList := [ ] ;
58331: LD_ADDR_EXP 41
58335: PUSH
58336: EMPTY
58337: ST_TO_ADDR
// minerMinesList := [ ] ;
58338: LD_ADDR_EXP 42
58342: PUSH
58343: EMPTY
58344: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58345: LD_ADDR_EXP 43
58349: PUSH
58350: LD_INT 5
58352: ST_TO_ADDR
// end ;
58353: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58354: LD_EXP 40
58358: PUSH
58359: LD_INT 34
58361: PUSH
58362: LD_EXP 109
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PPUSH
58371: CALL_OW 69
58375: AND
58376: IFFALSE 58839
58378: GO 58380
58380: DISABLE
58381: LD_INT 0
58383: PPUSH
58384: PPUSH
58385: PPUSH
58386: PPUSH
// begin enable ;
58387: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58388: LD_ADDR_VAR 0 1
58392: PUSH
58393: LD_INT 34
58395: PUSH
58396: LD_EXP 109
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PPUSH
58405: CALL_OW 69
58409: PUSH
58410: FOR_IN
58411: IFFALSE 58483
// begin if not i in minersList then
58413: LD_VAR 0 1
58417: PUSH
58418: LD_EXP 41
58422: IN
58423: NOT
58424: IFFALSE 58481
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58426: LD_ADDR_EXP 41
58430: PUSH
58431: LD_EXP 41
58435: PPUSH
58436: LD_EXP 41
58440: PUSH
58441: LD_INT 1
58443: PLUS
58444: PPUSH
58445: LD_VAR 0 1
58449: PPUSH
58450: CALL_OW 1
58454: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58455: LD_ADDR_EXP 42
58459: PUSH
58460: LD_EXP 42
58464: PPUSH
58465: LD_EXP 42
58469: PUSH
58470: LD_INT 1
58472: PLUS
58473: PPUSH
58474: EMPTY
58475: PPUSH
58476: CALL_OW 1
58480: ST_TO_ADDR
// end end ;
58481: GO 58410
58483: POP
58484: POP
// for i := minerMinesList downto 1 do
58485: LD_ADDR_VAR 0 1
58489: PUSH
58490: DOUBLE
58491: LD_EXP 42
58495: INC
58496: ST_TO_ADDR
58497: LD_INT 1
58499: PUSH
58500: FOR_DOWNTO
58501: IFFALSE 58837
// begin if IsLive ( minersList [ i ] ) then
58503: LD_EXP 41
58507: PUSH
58508: LD_VAR 0 1
58512: ARRAY
58513: PPUSH
58514: CALL_OW 300
58518: IFFALSE 58546
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58520: LD_EXP 41
58524: PUSH
58525: LD_VAR 0 1
58529: ARRAY
58530: PPUSH
58531: LD_EXP 42
58535: PUSH
58536: LD_VAR 0 1
58540: ARRAY
58541: PPUSH
58542: CALL_OW 505
// if not minerMinesList [ i ] then
58546: LD_EXP 42
58550: PUSH
58551: LD_VAR 0 1
58555: ARRAY
58556: NOT
58557: IFFALSE 58561
// continue ;
58559: GO 58500
// for j := minerMinesList [ i ] downto 1 do
58561: LD_ADDR_VAR 0 2
58565: PUSH
58566: DOUBLE
58567: LD_EXP 42
58571: PUSH
58572: LD_VAR 0 1
58576: ARRAY
58577: INC
58578: ST_TO_ADDR
58579: LD_INT 1
58581: PUSH
58582: FOR_DOWNTO
58583: IFFALSE 58833
// begin side := GetSide ( minersList [ i ] ) ;
58585: LD_ADDR_VAR 0 3
58589: PUSH
58590: LD_EXP 41
58594: PUSH
58595: LD_VAR 0 1
58599: ARRAY
58600: PPUSH
58601: CALL_OW 255
58605: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58606: LD_ADDR_VAR 0 4
58610: PUSH
58611: LD_EXP 42
58615: PUSH
58616: LD_VAR 0 1
58620: ARRAY
58621: PUSH
58622: LD_VAR 0 2
58626: ARRAY
58627: PUSH
58628: LD_INT 1
58630: ARRAY
58631: PPUSH
58632: LD_EXP 42
58636: PUSH
58637: LD_VAR 0 1
58641: ARRAY
58642: PUSH
58643: LD_VAR 0 2
58647: ARRAY
58648: PUSH
58649: LD_INT 2
58651: ARRAY
58652: PPUSH
58653: CALL_OW 428
58657: ST_TO_ADDR
// if not tmp then
58658: LD_VAR 0 4
58662: NOT
58663: IFFALSE 58667
// continue ;
58665: GO 58582
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58667: LD_VAR 0 4
58671: PUSH
58672: LD_INT 81
58674: PUSH
58675: LD_VAR 0 3
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PPUSH
58684: CALL_OW 69
58688: IN
58689: PUSH
58690: LD_EXP 42
58694: PUSH
58695: LD_VAR 0 1
58699: ARRAY
58700: PUSH
58701: LD_VAR 0 2
58705: ARRAY
58706: PUSH
58707: LD_INT 1
58709: ARRAY
58710: PPUSH
58711: LD_EXP 42
58715: PUSH
58716: LD_VAR 0 1
58720: ARRAY
58721: PUSH
58722: LD_VAR 0 2
58726: ARRAY
58727: PUSH
58728: LD_INT 2
58730: ARRAY
58731: PPUSH
58732: CALL_OW 458
58736: AND
58737: IFFALSE 58831
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58739: LD_EXP 42
58743: PUSH
58744: LD_VAR 0 1
58748: ARRAY
58749: PUSH
58750: LD_VAR 0 2
58754: ARRAY
58755: PUSH
58756: LD_INT 1
58758: ARRAY
58759: PPUSH
58760: LD_EXP 42
58764: PUSH
58765: LD_VAR 0 1
58769: ARRAY
58770: PUSH
58771: LD_VAR 0 2
58775: ARRAY
58776: PUSH
58777: LD_INT 2
58779: ARRAY
58780: PPUSH
58781: LD_VAR 0 3
58785: PPUSH
58786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58790: LD_ADDR_EXP 42
58794: PUSH
58795: LD_EXP 42
58799: PPUSH
58800: LD_VAR 0 1
58804: PPUSH
58805: LD_EXP 42
58809: PUSH
58810: LD_VAR 0 1
58814: ARRAY
58815: PPUSH
58816: LD_VAR 0 2
58820: PPUSH
58821: CALL_OW 3
58825: PPUSH
58826: CALL_OW 1
58830: ST_TO_ADDR
// end ; end ;
58831: GO 58582
58833: POP
58834: POP
// end ;
58835: GO 58500
58837: POP
58838: POP
// end ;
58839: PPOPN 4
58841: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
58842: LD_INT 0
58844: PPUSH
58845: PPUSH
// result := false ;
58846: LD_ADDR_VAR 0 4
58850: PUSH
58851: LD_INT 0
58853: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58854: LD_VAR 0 1
58858: PPUSH
58859: CALL_OW 264
58863: PUSH
58864: LD_EXP 109
58868: EQUAL
58869: NOT
58870: IFFALSE 58874
// exit ;
58872: GO 59114
// index := GetElementIndex ( minersList , unit ) ;
58874: LD_ADDR_VAR 0 5
58878: PUSH
58879: LD_EXP 41
58883: PPUSH
58884: LD_VAR 0 1
58888: PPUSH
58889: CALL 19983 0 2
58893: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58894: LD_EXP 42
58898: PUSH
58899: LD_VAR 0 5
58903: ARRAY
58904: PUSH
58905: LD_EXP 43
58909: GREATEREQUAL
58910: IFFALSE 58914
// exit ;
58912: GO 59114
// ComMoveXY ( unit , x , y ) ;
58914: LD_VAR 0 1
58918: PPUSH
58919: LD_VAR 0 2
58923: PPUSH
58924: LD_VAR 0 3
58928: PPUSH
58929: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58933: LD_INT 35
58935: PPUSH
58936: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58940: LD_VAR 0 1
58944: PPUSH
58945: LD_VAR 0 2
58949: PPUSH
58950: LD_VAR 0 3
58954: PPUSH
58955: CALL 50702 0 3
58959: NOT
58960: PUSH
58961: LD_VAR 0 1
58965: PPUSH
58966: CALL_OW 314
58970: AND
58971: IFFALSE 58975
// exit ;
58973: GO 59114
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58975: LD_VAR 0 2
58979: PPUSH
58980: LD_VAR 0 3
58984: PPUSH
58985: CALL_OW 428
58989: PUSH
58990: LD_VAR 0 1
58994: EQUAL
58995: PUSH
58996: LD_VAR 0 1
59000: PPUSH
59001: CALL_OW 314
59005: NOT
59006: AND
59007: IFFALSE 58933
// PlaySoundXY ( x , y , PlantMine ) ;
59009: LD_VAR 0 2
59013: PPUSH
59014: LD_VAR 0 3
59018: PPUSH
59019: LD_STRING PlantMine
59021: PPUSH
59022: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59026: LD_VAR 0 2
59030: PPUSH
59031: LD_VAR 0 3
59035: PPUSH
59036: LD_VAR 0 1
59040: PPUSH
59041: CALL_OW 255
59045: PPUSH
59046: LD_INT 0
59048: PPUSH
59049: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59053: LD_ADDR_EXP 42
59057: PUSH
59058: LD_EXP 42
59062: PPUSH
59063: LD_VAR 0 5
59067: PUSH
59068: LD_EXP 42
59072: PUSH
59073: LD_VAR 0 5
59077: ARRAY
59078: PUSH
59079: LD_INT 1
59081: PLUS
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PPUSH
59087: LD_VAR 0 2
59091: PUSH
59092: LD_VAR 0 3
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PPUSH
59101: CALL 20198 0 3
59105: ST_TO_ADDR
// result := true ;
59106: LD_ADDR_VAR 0 4
59110: PUSH
59111: LD_INT 1
59113: ST_TO_ADDR
// end ;
59114: LD_VAR 0 4
59118: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59119: LD_INT 0
59121: PPUSH
59122: PPUSH
59123: PPUSH
// if not unit in minersList then
59124: LD_VAR 0 1
59128: PUSH
59129: LD_EXP 41
59133: IN
59134: NOT
59135: IFFALSE 59139
// exit ;
59137: GO 59531
// index := GetElementIndex ( minersList , unit ) ;
59139: LD_ADDR_VAR 0 6
59143: PUSH
59144: LD_EXP 41
59148: PPUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: CALL 19983 0 2
59158: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59159: LD_ADDR_VAR 0 5
59163: PUSH
59164: DOUBLE
59165: LD_EXP 42
59169: PUSH
59170: LD_VAR 0 6
59174: ARRAY
59175: INC
59176: ST_TO_ADDR
59177: LD_INT 1
59179: PUSH
59180: FOR_DOWNTO
59181: IFFALSE 59342
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59183: LD_EXP 42
59187: PUSH
59188: LD_VAR 0 6
59192: ARRAY
59193: PUSH
59194: LD_VAR 0 5
59198: ARRAY
59199: PUSH
59200: LD_INT 1
59202: ARRAY
59203: PUSH
59204: LD_VAR 0 2
59208: EQUAL
59209: PUSH
59210: LD_EXP 42
59214: PUSH
59215: LD_VAR 0 6
59219: ARRAY
59220: PUSH
59221: LD_VAR 0 5
59225: ARRAY
59226: PUSH
59227: LD_INT 2
59229: ARRAY
59230: PUSH
59231: LD_VAR 0 3
59235: EQUAL
59236: AND
59237: IFFALSE 59340
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59239: LD_EXP 42
59243: PUSH
59244: LD_VAR 0 6
59248: ARRAY
59249: PUSH
59250: LD_VAR 0 5
59254: ARRAY
59255: PUSH
59256: LD_INT 1
59258: ARRAY
59259: PPUSH
59260: LD_EXP 42
59264: PUSH
59265: LD_VAR 0 6
59269: ARRAY
59270: PUSH
59271: LD_VAR 0 5
59275: ARRAY
59276: PUSH
59277: LD_INT 2
59279: ARRAY
59280: PPUSH
59281: LD_VAR 0 1
59285: PPUSH
59286: CALL_OW 255
59290: PPUSH
59291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59295: LD_ADDR_EXP 42
59299: PUSH
59300: LD_EXP 42
59304: PPUSH
59305: LD_VAR 0 6
59309: PPUSH
59310: LD_EXP 42
59314: PUSH
59315: LD_VAR 0 6
59319: ARRAY
59320: PPUSH
59321: LD_VAR 0 5
59325: PPUSH
59326: CALL_OW 3
59330: PPUSH
59331: CALL_OW 1
59335: ST_TO_ADDR
// exit ;
59336: POP
59337: POP
59338: GO 59531
// end ; end ;
59340: GO 59180
59342: POP
59343: POP
// for i := minerMinesList [ index ] downto 1 do
59344: LD_ADDR_VAR 0 5
59348: PUSH
59349: DOUBLE
59350: LD_EXP 42
59354: PUSH
59355: LD_VAR 0 6
59359: ARRAY
59360: INC
59361: ST_TO_ADDR
59362: LD_INT 1
59364: PUSH
59365: FOR_DOWNTO
59366: IFFALSE 59529
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59368: LD_EXP 42
59372: PUSH
59373: LD_VAR 0 6
59377: ARRAY
59378: PUSH
59379: LD_VAR 0 5
59383: ARRAY
59384: PUSH
59385: LD_INT 1
59387: ARRAY
59388: PPUSH
59389: LD_EXP 42
59393: PUSH
59394: LD_VAR 0 6
59398: ARRAY
59399: PUSH
59400: LD_VAR 0 5
59404: ARRAY
59405: PUSH
59406: LD_INT 2
59408: ARRAY
59409: PPUSH
59410: LD_VAR 0 2
59414: PPUSH
59415: LD_VAR 0 3
59419: PPUSH
59420: CALL_OW 298
59424: PUSH
59425: LD_INT 6
59427: LESS
59428: IFFALSE 59527
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59430: LD_EXP 42
59434: PUSH
59435: LD_VAR 0 6
59439: ARRAY
59440: PUSH
59441: LD_VAR 0 5
59445: ARRAY
59446: PUSH
59447: LD_INT 1
59449: ARRAY
59450: PPUSH
59451: LD_EXP 42
59455: PUSH
59456: LD_VAR 0 6
59460: ARRAY
59461: PUSH
59462: LD_VAR 0 5
59466: ARRAY
59467: PUSH
59468: LD_INT 2
59470: ARRAY
59471: PPUSH
59472: LD_VAR 0 1
59476: PPUSH
59477: CALL_OW 255
59481: PPUSH
59482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59486: LD_ADDR_EXP 42
59490: PUSH
59491: LD_EXP 42
59495: PPUSH
59496: LD_VAR 0 6
59500: PPUSH
59501: LD_EXP 42
59505: PUSH
59506: LD_VAR 0 6
59510: ARRAY
59511: PPUSH
59512: LD_VAR 0 5
59516: PPUSH
59517: CALL_OW 3
59521: PPUSH
59522: CALL_OW 1
59526: ST_TO_ADDR
// end ; end ;
59527: GO 59365
59529: POP
59530: POP
// end ;
59531: LD_VAR 0 4
59535: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59536: LD_INT 0
59538: PPUSH
59539: PPUSH
59540: PPUSH
59541: PPUSH
59542: PPUSH
59543: PPUSH
59544: PPUSH
59545: PPUSH
59546: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59547: LD_VAR 0 1
59551: PPUSH
59552: CALL_OW 264
59556: PUSH
59557: LD_EXP 109
59561: EQUAL
59562: NOT
59563: PUSH
59564: LD_VAR 0 1
59568: PUSH
59569: LD_EXP 41
59573: IN
59574: NOT
59575: OR
59576: IFFALSE 59580
// exit ;
59578: GO 59902
// index := GetElementIndex ( minersList , unit ) ;
59580: LD_ADDR_VAR 0 6
59584: PUSH
59585: LD_EXP 41
59589: PPUSH
59590: LD_VAR 0 1
59594: PPUSH
59595: CALL 19983 0 2
59599: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59600: LD_ADDR_VAR 0 8
59604: PUSH
59605: LD_EXP 43
59609: PUSH
59610: LD_EXP 42
59614: PUSH
59615: LD_VAR 0 6
59619: ARRAY
59620: MINUS
59621: ST_TO_ADDR
// if not minesFreeAmount then
59622: LD_VAR 0 8
59626: NOT
59627: IFFALSE 59631
// exit ;
59629: GO 59902
// tmp := [ ] ;
59631: LD_ADDR_VAR 0 7
59635: PUSH
59636: EMPTY
59637: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59638: LD_ADDR_VAR 0 5
59642: PUSH
59643: DOUBLE
59644: LD_INT 1
59646: DEC
59647: ST_TO_ADDR
59648: LD_VAR 0 8
59652: PUSH
59653: FOR_TO
59654: IFFALSE 59849
// begin _d := rand ( 0 , 5 ) ;
59656: LD_ADDR_VAR 0 11
59660: PUSH
59661: LD_INT 0
59663: PPUSH
59664: LD_INT 5
59666: PPUSH
59667: CALL_OW 12
59671: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59672: LD_ADDR_VAR 0 12
59676: PUSH
59677: LD_INT 2
59679: PPUSH
59680: LD_INT 6
59682: PPUSH
59683: CALL_OW 12
59687: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59688: LD_ADDR_VAR 0 9
59692: PUSH
59693: LD_VAR 0 2
59697: PPUSH
59698: LD_VAR 0 11
59702: PPUSH
59703: LD_VAR 0 12
59707: PPUSH
59708: CALL_OW 272
59712: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59713: LD_ADDR_VAR 0 10
59717: PUSH
59718: LD_VAR 0 3
59722: PPUSH
59723: LD_VAR 0 11
59727: PPUSH
59728: LD_VAR 0 12
59732: PPUSH
59733: CALL_OW 273
59737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59738: LD_VAR 0 9
59742: PPUSH
59743: LD_VAR 0 10
59747: PPUSH
59748: CALL_OW 488
59752: PUSH
59753: LD_VAR 0 9
59757: PUSH
59758: LD_VAR 0 10
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_VAR 0 7
59771: IN
59772: NOT
59773: AND
59774: PUSH
59775: LD_VAR 0 9
59779: PPUSH
59780: LD_VAR 0 10
59784: PPUSH
59785: CALL_OW 458
59789: NOT
59790: AND
59791: IFFALSE 59833
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59793: LD_ADDR_VAR 0 7
59797: PUSH
59798: LD_VAR 0 7
59802: PPUSH
59803: LD_VAR 0 7
59807: PUSH
59808: LD_INT 1
59810: PLUS
59811: PPUSH
59812: LD_VAR 0 9
59816: PUSH
59817: LD_VAR 0 10
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PPUSH
59826: CALL_OW 1
59830: ST_TO_ADDR
59831: GO 59847
// i := i - 1 ;
59833: LD_ADDR_VAR 0 5
59837: PUSH
59838: LD_VAR 0 5
59842: PUSH
59843: LD_INT 1
59845: MINUS
59846: ST_TO_ADDR
// end ;
59847: GO 59653
59849: POP
59850: POP
// for i in tmp do
59851: LD_ADDR_VAR 0 5
59855: PUSH
59856: LD_VAR 0 7
59860: PUSH
59861: FOR_IN
59862: IFFALSE 59900
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59864: LD_VAR 0 1
59868: PPUSH
59869: LD_VAR 0 5
59873: PUSH
59874: LD_INT 1
59876: ARRAY
59877: PPUSH
59878: LD_VAR 0 5
59882: PUSH
59883: LD_INT 2
59885: ARRAY
59886: PPUSH
59887: CALL 58842 0 3
59891: NOT
59892: IFFALSE 59898
// exit ;
59894: POP
59895: POP
59896: GO 59902
59898: GO 59861
59900: POP
59901: POP
// end ;
59902: LD_VAR 0 4
59906: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
59907: LD_INT 0
59909: PPUSH
59910: PPUSH
59911: PPUSH
59912: PPUSH
59913: PPUSH
59914: PPUSH
59915: PPUSH
// if not GetClass ( unit ) = class_sniper then
59916: LD_VAR 0 1
59920: PPUSH
59921: CALL_OW 257
59925: PUSH
59926: LD_INT 5
59928: EQUAL
59929: NOT
59930: IFFALSE 59934
// exit ;
59932: GO 60322
// dist := 8 ;
59934: LD_ADDR_VAR 0 5
59938: PUSH
59939: LD_INT 8
59941: ST_TO_ADDR
// viewRange := 12 ;
59942: LD_ADDR_VAR 0 7
59946: PUSH
59947: LD_INT 12
59949: ST_TO_ADDR
// side := GetSide ( unit ) ;
59950: LD_ADDR_VAR 0 6
59954: PUSH
59955: LD_VAR 0 1
59959: PPUSH
59960: CALL_OW 255
59964: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59965: LD_INT 61
59967: PPUSH
59968: LD_VAR 0 6
59972: PPUSH
59973: CALL_OW 321
59977: PUSH
59978: LD_INT 2
59980: EQUAL
59981: IFFALSE 59991
// viewRange := 16 ;
59983: LD_ADDR_VAR 0 7
59987: PUSH
59988: LD_INT 16
59990: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59991: LD_VAR 0 1
59995: PPUSH
59996: LD_VAR 0 2
60000: PPUSH
60001: LD_VAR 0 3
60005: PPUSH
60006: CALL_OW 297
60010: PUSH
60011: LD_VAR 0 5
60015: GREATER
60016: IFFALSE 60095
// begin ComMoveXY ( unit , x , y ) ;
60018: LD_VAR 0 1
60022: PPUSH
60023: LD_VAR 0 2
60027: PPUSH
60028: LD_VAR 0 3
60032: PPUSH
60033: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60037: LD_INT 35
60039: PPUSH
60040: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60044: LD_VAR 0 1
60048: PPUSH
60049: LD_VAR 0 2
60053: PPUSH
60054: LD_VAR 0 3
60058: PPUSH
60059: CALL 50702 0 3
60063: NOT
60064: IFFALSE 60068
// exit ;
60066: GO 60322
// until GetDistUnitXY ( unit , x , y ) < dist ;
60068: LD_VAR 0 1
60072: PPUSH
60073: LD_VAR 0 2
60077: PPUSH
60078: LD_VAR 0 3
60082: PPUSH
60083: CALL_OW 297
60087: PUSH
60088: LD_VAR 0 5
60092: LESS
60093: IFFALSE 60037
// end ; ComTurnXY ( unit , x , y ) ;
60095: LD_VAR 0 1
60099: PPUSH
60100: LD_VAR 0 2
60104: PPUSH
60105: LD_VAR 0 3
60109: PPUSH
60110: CALL_OW 118
// wait ( 5 ) ;
60114: LD_INT 5
60116: PPUSH
60117: CALL_OW 67
// _d := GetDir ( unit ) ;
60121: LD_ADDR_VAR 0 10
60125: PUSH
60126: LD_VAR 0 1
60130: PPUSH
60131: CALL_OW 254
60135: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60136: LD_ADDR_VAR 0 8
60140: PUSH
60141: LD_VAR 0 1
60145: PPUSH
60146: CALL_OW 250
60150: PPUSH
60151: LD_VAR 0 10
60155: PPUSH
60156: LD_VAR 0 5
60160: PPUSH
60161: CALL_OW 272
60165: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60166: LD_ADDR_VAR 0 9
60170: PUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: CALL_OW 251
60180: PPUSH
60181: LD_VAR 0 10
60185: PPUSH
60186: LD_VAR 0 5
60190: PPUSH
60191: CALL_OW 273
60195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60196: LD_VAR 0 8
60200: PPUSH
60201: LD_VAR 0 9
60205: PPUSH
60206: CALL_OW 488
60210: NOT
60211: IFFALSE 60215
// exit ;
60213: GO 60322
// ComAnimCustom ( unit , 1 ) ;
60215: LD_VAR 0 1
60219: PPUSH
60220: LD_INT 1
60222: PPUSH
60223: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60227: LD_VAR 0 8
60231: PPUSH
60232: LD_VAR 0 9
60236: PPUSH
60237: LD_VAR 0 6
60241: PPUSH
60242: LD_VAR 0 7
60246: PPUSH
60247: CALL_OW 330
// repeat wait ( 1 ) ;
60251: LD_INT 1
60253: PPUSH
60254: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 316
60267: PUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: CALL_OW 314
60277: OR
60278: PUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 302
60288: NOT
60289: OR
60290: PUSH
60291: LD_VAR 0 1
60295: PPUSH
60296: CALL_OW 301
60300: OR
60301: IFFALSE 60251
// RemoveSeeing ( _x , _y , side ) ;
60303: LD_VAR 0 8
60307: PPUSH
60308: LD_VAR 0 9
60312: PPUSH
60313: LD_VAR 0 6
60317: PPUSH
60318: CALL_OW 331
// end ; end_of_file
60322: LD_VAR 0 4
60326: RET
// every 0 0$1 do
60327: GO 60329
60329: DISABLE
// begin enable ;
60330: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60331: LD_STRING updateTimer(
60333: PUSH
60334: LD_OWVAR 1
60338: STR
60339: PUSH
60340: LD_STRING );
60342: STR
60343: PPUSH
60344: CALL_OW 559
// end ;
60348: END
// export function SOS_MapStart ( ) ; begin
60349: LD_INT 0
60351: PPUSH
// if streamModeActive then
60352: LD_EXP 44
60356: IFFALSE 60365
// DefineStreamItems ( true ) ;
60358: LD_INT 1
60360: PPUSH
60361: CALL 62015 0 1
// UpdateFactoryWaypoints ( ) ;
60365: CALL 56625 0 0
// end ;
60369: LD_VAR 0 1
60373: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60374: LD_INT 0
60376: PPUSH
// if p2 = 100 then
60377: LD_VAR 0 2
60381: PUSH
60382: LD_INT 100
60384: EQUAL
60385: IFFALSE 61388
// begin if not StreamModeActive then
60387: LD_EXP 44
60391: NOT
60392: IFFALSE 60402
// StreamModeActive := true ;
60394: LD_ADDR_EXP 44
60398: PUSH
60399: LD_INT 1
60401: ST_TO_ADDR
// if p3 = 0 then
60402: LD_VAR 0 3
60406: PUSH
60407: LD_INT 0
60409: EQUAL
60410: IFFALSE 60416
// InitStreamMode ;
60412: CALL 61551 0 0
// if p3 = 1 then
60416: LD_VAR 0 3
60420: PUSH
60421: LD_INT 1
60423: EQUAL
60424: IFFALSE 60434
// sRocket := true ;
60426: LD_ADDR_EXP 49
60430: PUSH
60431: LD_INT 1
60433: ST_TO_ADDR
// if p3 = 2 then
60434: LD_VAR 0 3
60438: PUSH
60439: LD_INT 2
60441: EQUAL
60442: IFFALSE 60452
// sSpeed := true ;
60444: LD_ADDR_EXP 48
60448: PUSH
60449: LD_INT 1
60451: ST_TO_ADDR
// if p3 = 3 then
60452: LD_VAR 0 3
60456: PUSH
60457: LD_INT 3
60459: EQUAL
60460: IFFALSE 60470
// sEngine := true ;
60462: LD_ADDR_EXP 50
60466: PUSH
60467: LD_INT 1
60469: ST_TO_ADDR
// if p3 = 4 then
60470: LD_VAR 0 3
60474: PUSH
60475: LD_INT 4
60477: EQUAL
60478: IFFALSE 60488
// sSpec := true ;
60480: LD_ADDR_EXP 47
60484: PUSH
60485: LD_INT 1
60487: ST_TO_ADDR
// if p3 = 5 then
60488: LD_VAR 0 3
60492: PUSH
60493: LD_INT 5
60495: EQUAL
60496: IFFALSE 60506
// sLevel := true ;
60498: LD_ADDR_EXP 51
60502: PUSH
60503: LD_INT 1
60505: ST_TO_ADDR
// if p3 = 6 then
60506: LD_VAR 0 3
60510: PUSH
60511: LD_INT 6
60513: EQUAL
60514: IFFALSE 60524
// sArmoury := true ;
60516: LD_ADDR_EXP 52
60520: PUSH
60521: LD_INT 1
60523: ST_TO_ADDR
// if p3 = 7 then
60524: LD_VAR 0 3
60528: PUSH
60529: LD_INT 7
60531: EQUAL
60532: IFFALSE 60542
// sRadar := true ;
60534: LD_ADDR_EXP 53
60538: PUSH
60539: LD_INT 1
60541: ST_TO_ADDR
// if p3 = 8 then
60542: LD_VAR 0 3
60546: PUSH
60547: LD_INT 8
60549: EQUAL
60550: IFFALSE 60560
// sBunker := true ;
60552: LD_ADDR_EXP 54
60556: PUSH
60557: LD_INT 1
60559: ST_TO_ADDR
// if p3 = 9 then
60560: LD_VAR 0 3
60564: PUSH
60565: LD_INT 9
60567: EQUAL
60568: IFFALSE 60578
// sHack := true ;
60570: LD_ADDR_EXP 55
60574: PUSH
60575: LD_INT 1
60577: ST_TO_ADDR
// if p3 = 10 then
60578: LD_VAR 0 3
60582: PUSH
60583: LD_INT 10
60585: EQUAL
60586: IFFALSE 60596
// sFire := true ;
60588: LD_ADDR_EXP 56
60592: PUSH
60593: LD_INT 1
60595: ST_TO_ADDR
// if p3 = 11 then
60596: LD_VAR 0 3
60600: PUSH
60601: LD_INT 11
60603: EQUAL
60604: IFFALSE 60614
// sRefresh := true ;
60606: LD_ADDR_EXP 57
60610: PUSH
60611: LD_INT 1
60613: ST_TO_ADDR
// if p3 = 12 then
60614: LD_VAR 0 3
60618: PUSH
60619: LD_INT 12
60621: EQUAL
60622: IFFALSE 60632
// sExp := true ;
60624: LD_ADDR_EXP 58
60628: PUSH
60629: LD_INT 1
60631: ST_TO_ADDR
// if p3 = 13 then
60632: LD_VAR 0 3
60636: PUSH
60637: LD_INT 13
60639: EQUAL
60640: IFFALSE 60650
// sDepot := true ;
60642: LD_ADDR_EXP 59
60646: PUSH
60647: LD_INT 1
60649: ST_TO_ADDR
// if p3 = 14 then
60650: LD_VAR 0 3
60654: PUSH
60655: LD_INT 14
60657: EQUAL
60658: IFFALSE 60668
// sFlag := true ;
60660: LD_ADDR_EXP 60
60664: PUSH
60665: LD_INT 1
60667: ST_TO_ADDR
// if p3 = 15 then
60668: LD_VAR 0 3
60672: PUSH
60673: LD_INT 15
60675: EQUAL
60676: IFFALSE 60686
// sKamikadze := true ;
60678: LD_ADDR_EXP 68
60682: PUSH
60683: LD_INT 1
60685: ST_TO_ADDR
// if p3 = 16 then
60686: LD_VAR 0 3
60690: PUSH
60691: LD_INT 16
60693: EQUAL
60694: IFFALSE 60704
// sTroll := true ;
60696: LD_ADDR_EXP 69
60700: PUSH
60701: LD_INT 1
60703: ST_TO_ADDR
// if p3 = 17 then
60704: LD_VAR 0 3
60708: PUSH
60709: LD_INT 17
60711: EQUAL
60712: IFFALSE 60722
// sSlow := true ;
60714: LD_ADDR_EXP 70
60718: PUSH
60719: LD_INT 1
60721: ST_TO_ADDR
// if p3 = 18 then
60722: LD_VAR 0 3
60726: PUSH
60727: LD_INT 18
60729: EQUAL
60730: IFFALSE 60740
// sLack := true ;
60732: LD_ADDR_EXP 71
60736: PUSH
60737: LD_INT 1
60739: ST_TO_ADDR
// if p3 = 19 then
60740: LD_VAR 0 3
60744: PUSH
60745: LD_INT 19
60747: EQUAL
60748: IFFALSE 60758
// sTank := true ;
60750: LD_ADDR_EXP 73
60754: PUSH
60755: LD_INT 1
60757: ST_TO_ADDR
// if p3 = 20 then
60758: LD_VAR 0 3
60762: PUSH
60763: LD_INT 20
60765: EQUAL
60766: IFFALSE 60776
// sRemote := true ;
60768: LD_ADDR_EXP 74
60772: PUSH
60773: LD_INT 1
60775: ST_TO_ADDR
// if p3 = 21 then
60776: LD_VAR 0 3
60780: PUSH
60781: LD_INT 21
60783: EQUAL
60784: IFFALSE 60794
// sPowell := true ;
60786: LD_ADDR_EXP 75
60790: PUSH
60791: LD_INT 1
60793: ST_TO_ADDR
// if p3 = 22 then
60794: LD_VAR 0 3
60798: PUSH
60799: LD_INT 22
60801: EQUAL
60802: IFFALSE 60812
// sTeleport := true ;
60804: LD_ADDR_EXP 78
60808: PUSH
60809: LD_INT 1
60811: ST_TO_ADDR
// if p3 = 23 then
60812: LD_VAR 0 3
60816: PUSH
60817: LD_INT 23
60819: EQUAL
60820: IFFALSE 60830
// sOilTower := true ;
60822: LD_ADDR_EXP 80
60826: PUSH
60827: LD_INT 1
60829: ST_TO_ADDR
// if p3 = 24 then
60830: LD_VAR 0 3
60834: PUSH
60835: LD_INT 24
60837: EQUAL
60838: IFFALSE 60848
// sShovel := true ;
60840: LD_ADDR_EXP 81
60844: PUSH
60845: LD_INT 1
60847: ST_TO_ADDR
// if p3 = 25 then
60848: LD_VAR 0 3
60852: PUSH
60853: LD_INT 25
60855: EQUAL
60856: IFFALSE 60866
// sSheik := true ;
60858: LD_ADDR_EXP 82
60862: PUSH
60863: LD_INT 1
60865: ST_TO_ADDR
// if p3 = 26 then
60866: LD_VAR 0 3
60870: PUSH
60871: LD_INT 26
60873: EQUAL
60874: IFFALSE 60884
// sEarthquake := true ;
60876: LD_ADDR_EXP 84
60880: PUSH
60881: LD_INT 1
60883: ST_TO_ADDR
// if p3 = 27 then
60884: LD_VAR 0 3
60888: PUSH
60889: LD_INT 27
60891: EQUAL
60892: IFFALSE 60902
// sAI := true ;
60894: LD_ADDR_EXP 85
60898: PUSH
60899: LD_INT 1
60901: ST_TO_ADDR
// if p3 = 28 then
60902: LD_VAR 0 3
60906: PUSH
60907: LD_INT 28
60909: EQUAL
60910: IFFALSE 60920
// sCargo := true ;
60912: LD_ADDR_EXP 88
60916: PUSH
60917: LD_INT 1
60919: ST_TO_ADDR
// if p3 = 29 then
60920: LD_VAR 0 3
60924: PUSH
60925: LD_INT 29
60927: EQUAL
60928: IFFALSE 60938
// sDLaser := true ;
60930: LD_ADDR_EXP 89
60934: PUSH
60935: LD_INT 1
60937: ST_TO_ADDR
// if p3 = 30 then
60938: LD_VAR 0 3
60942: PUSH
60943: LD_INT 30
60945: EQUAL
60946: IFFALSE 60956
// sExchange := true ;
60948: LD_ADDR_EXP 90
60952: PUSH
60953: LD_INT 1
60955: ST_TO_ADDR
// if p3 = 31 then
60956: LD_VAR 0 3
60960: PUSH
60961: LD_INT 31
60963: EQUAL
60964: IFFALSE 60974
// sFac := true ;
60966: LD_ADDR_EXP 91
60970: PUSH
60971: LD_INT 1
60973: ST_TO_ADDR
// if p3 = 32 then
60974: LD_VAR 0 3
60978: PUSH
60979: LD_INT 32
60981: EQUAL
60982: IFFALSE 60992
// sPower := true ;
60984: LD_ADDR_EXP 92
60988: PUSH
60989: LD_INT 1
60991: ST_TO_ADDR
// if p3 = 33 then
60992: LD_VAR 0 3
60996: PUSH
60997: LD_INT 33
60999: EQUAL
61000: IFFALSE 61010
// sRandom := true ;
61002: LD_ADDR_EXP 93
61006: PUSH
61007: LD_INT 1
61009: ST_TO_ADDR
// if p3 = 34 then
61010: LD_VAR 0 3
61014: PUSH
61015: LD_INT 34
61017: EQUAL
61018: IFFALSE 61028
// sShield := true ;
61020: LD_ADDR_EXP 94
61024: PUSH
61025: LD_INT 1
61027: ST_TO_ADDR
// if p3 = 35 then
61028: LD_VAR 0 3
61032: PUSH
61033: LD_INT 35
61035: EQUAL
61036: IFFALSE 61046
// sTime := true ;
61038: LD_ADDR_EXP 95
61042: PUSH
61043: LD_INT 1
61045: ST_TO_ADDR
// if p3 = 36 then
61046: LD_VAR 0 3
61050: PUSH
61051: LD_INT 36
61053: EQUAL
61054: IFFALSE 61064
// sTools := true ;
61056: LD_ADDR_EXP 96
61060: PUSH
61061: LD_INT 1
61063: ST_TO_ADDR
// if p3 = 101 then
61064: LD_VAR 0 3
61068: PUSH
61069: LD_INT 101
61071: EQUAL
61072: IFFALSE 61082
// sSold := true ;
61074: LD_ADDR_EXP 61
61078: PUSH
61079: LD_INT 1
61081: ST_TO_ADDR
// if p3 = 102 then
61082: LD_VAR 0 3
61086: PUSH
61087: LD_INT 102
61089: EQUAL
61090: IFFALSE 61100
// sDiff := true ;
61092: LD_ADDR_EXP 62
61096: PUSH
61097: LD_INT 1
61099: ST_TO_ADDR
// if p3 = 103 then
61100: LD_VAR 0 3
61104: PUSH
61105: LD_INT 103
61107: EQUAL
61108: IFFALSE 61118
// sFog := true ;
61110: LD_ADDR_EXP 65
61114: PUSH
61115: LD_INT 1
61117: ST_TO_ADDR
// if p3 = 104 then
61118: LD_VAR 0 3
61122: PUSH
61123: LD_INT 104
61125: EQUAL
61126: IFFALSE 61136
// sReset := true ;
61128: LD_ADDR_EXP 66
61132: PUSH
61133: LD_INT 1
61135: ST_TO_ADDR
// if p3 = 105 then
61136: LD_VAR 0 3
61140: PUSH
61141: LD_INT 105
61143: EQUAL
61144: IFFALSE 61154
// sSun := true ;
61146: LD_ADDR_EXP 67
61150: PUSH
61151: LD_INT 1
61153: ST_TO_ADDR
// if p3 = 106 then
61154: LD_VAR 0 3
61158: PUSH
61159: LD_INT 106
61161: EQUAL
61162: IFFALSE 61172
// sTiger := true ;
61164: LD_ADDR_EXP 63
61168: PUSH
61169: LD_INT 1
61171: ST_TO_ADDR
// if p3 = 107 then
61172: LD_VAR 0 3
61176: PUSH
61177: LD_INT 107
61179: EQUAL
61180: IFFALSE 61190
// sBomb := true ;
61182: LD_ADDR_EXP 64
61186: PUSH
61187: LD_INT 1
61189: ST_TO_ADDR
// if p3 = 108 then
61190: LD_VAR 0 3
61194: PUSH
61195: LD_INT 108
61197: EQUAL
61198: IFFALSE 61208
// sWound := true ;
61200: LD_ADDR_EXP 72
61204: PUSH
61205: LD_INT 1
61207: ST_TO_ADDR
// if p3 = 109 then
61208: LD_VAR 0 3
61212: PUSH
61213: LD_INT 109
61215: EQUAL
61216: IFFALSE 61226
// sBetray := true ;
61218: LD_ADDR_EXP 76
61222: PUSH
61223: LD_INT 1
61225: ST_TO_ADDR
// if p3 = 110 then
61226: LD_VAR 0 3
61230: PUSH
61231: LD_INT 110
61233: EQUAL
61234: IFFALSE 61244
// sContamin := true ;
61236: LD_ADDR_EXP 77
61240: PUSH
61241: LD_INT 1
61243: ST_TO_ADDR
// if p3 = 111 then
61244: LD_VAR 0 3
61248: PUSH
61249: LD_INT 111
61251: EQUAL
61252: IFFALSE 61262
// sOil := true ;
61254: LD_ADDR_EXP 79
61258: PUSH
61259: LD_INT 1
61261: ST_TO_ADDR
// if p3 = 112 then
61262: LD_VAR 0 3
61266: PUSH
61267: LD_INT 112
61269: EQUAL
61270: IFFALSE 61280
// sStu := true ;
61272: LD_ADDR_EXP 83
61276: PUSH
61277: LD_INT 1
61279: ST_TO_ADDR
// if p3 = 113 then
61280: LD_VAR 0 3
61284: PUSH
61285: LD_INT 113
61287: EQUAL
61288: IFFALSE 61298
// sBazooka := true ;
61290: LD_ADDR_EXP 86
61294: PUSH
61295: LD_INT 1
61297: ST_TO_ADDR
// if p3 = 114 then
61298: LD_VAR 0 3
61302: PUSH
61303: LD_INT 114
61305: EQUAL
61306: IFFALSE 61316
// sMortar := true ;
61308: LD_ADDR_EXP 87
61312: PUSH
61313: LD_INT 1
61315: ST_TO_ADDR
// if p3 = 115 then
61316: LD_VAR 0 3
61320: PUSH
61321: LD_INT 115
61323: EQUAL
61324: IFFALSE 61334
// sRanger := true ;
61326: LD_ADDR_EXP 97
61330: PUSH
61331: LD_INT 1
61333: ST_TO_ADDR
// if p3 = 116 then
61334: LD_VAR 0 3
61338: PUSH
61339: LD_INT 116
61341: EQUAL
61342: IFFALSE 61352
// sComputer := true ;
61344: LD_ADDR_EXP 98
61348: PUSH
61349: LD_INT 1
61351: ST_TO_ADDR
// if p3 = 117 then
61352: LD_VAR 0 3
61356: PUSH
61357: LD_INT 117
61359: EQUAL
61360: IFFALSE 61370
// s30 := true ;
61362: LD_ADDR_EXP 99
61366: PUSH
61367: LD_INT 1
61369: ST_TO_ADDR
// if p3 = 118 then
61370: LD_VAR 0 3
61374: PUSH
61375: LD_INT 118
61377: EQUAL
61378: IFFALSE 61388
// s60 := true ;
61380: LD_ADDR_EXP 100
61384: PUSH
61385: LD_INT 1
61387: ST_TO_ADDR
// end ; if p2 = 101 then
61388: LD_VAR 0 2
61392: PUSH
61393: LD_INT 101
61395: EQUAL
61396: IFFALSE 61524
// begin case p3 of 1 :
61398: LD_VAR 0 3
61402: PUSH
61403: LD_INT 1
61405: DOUBLE
61406: EQUAL
61407: IFTRUE 61411
61409: GO 61418
61411: POP
// hHackUnlimitedResources ; 2 :
61412: CALL 73622 0 0
61416: GO 61524
61418: LD_INT 2
61420: DOUBLE
61421: EQUAL
61422: IFTRUE 61426
61424: GO 61433
61426: POP
// hHackSetLevel10 ; 3 :
61427: CALL 73755 0 0
61431: GO 61524
61433: LD_INT 3
61435: DOUBLE
61436: EQUAL
61437: IFTRUE 61441
61439: GO 61448
61441: POP
// hHackSetLevel10YourUnits ; 4 :
61442: CALL 73840 0 0
61446: GO 61524
61448: LD_INT 4
61450: DOUBLE
61451: EQUAL
61452: IFTRUE 61456
61454: GO 61463
61456: POP
// hHackInvincible ; 5 :
61457: CALL 74288 0 0
61461: GO 61524
61463: LD_INT 5
61465: DOUBLE
61466: EQUAL
61467: IFTRUE 61471
61469: GO 61478
61471: POP
// hHackInvisible ; 6 :
61472: CALL 74399 0 0
61476: GO 61524
61478: LD_INT 6
61480: DOUBLE
61481: EQUAL
61482: IFTRUE 61486
61484: GO 61493
61486: POP
// hHackChangeYourSide ; 7 :
61487: CALL 74456 0 0
61491: GO 61524
61493: LD_INT 7
61495: DOUBLE
61496: EQUAL
61497: IFTRUE 61501
61499: GO 61508
61501: POP
// hHackChangeUnitSide ; 8 :
61502: CALL 74498 0 0
61506: GO 61524
61508: LD_INT 8
61510: DOUBLE
61511: EQUAL
61512: IFTRUE 61516
61514: GO 61523
61516: POP
// hHackFog ; end ;
61517: CALL 74599 0 0
61521: GO 61524
61523: POP
// end ; end ;
61524: LD_VAR 0 7
61528: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
61529: GO 61531
61531: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
61532: LD_STRING initStreamRollete();
61534: PPUSH
61535: CALL_OW 559
// InitStreamMode ;
61539: CALL 61551 0 0
// DefineStreamItems ( false ) ;
61543: LD_INT 0
61545: PPUSH
61546: CALL 62015 0 1
// end ;
61550: END
// function InitStreamMode ; begin
61551: LD_INT 0
61553: PPUSH
// streamModeActive := false ;
61554: LD_ADDR_EXP 44
61558: PUSH
61559: LD_INT 0
61561: ST_TO_ADDR
// normalCounter := 36 ;
61562: LD_ADDR_EXP 45
61566: PUSH
61567: LD_INT 36
61569: ST_TO_ADDR
// hardcoreCounter := 18 ;
61570: LD_ADDR_EXP 46
61574: PUSH
61575: LD_INT 18
61577: ST_TO_ADDR
// sRocket := false ;
61578: LD_ADDR_EXP 49
61582: PUSH
61583: LD_INT 0
61585: ST_TO_ADDR
// sSpeed := false ;
61586: LD_ADDR_EXP 48
61590: PUSH
61591: LD_INT 0
61593: ST_TO_ADDR
// sEngine := false ;
61594: LD_ADDR_EXP 50
61598: PUSH
61599: LD_INT 0
61601: ST_TO_ADDR
// sSpec := false ;
61602: LD_ADDR_EXP 47
61606: PUSH
61607: LD_INT 0
61609: ST_TO_ADDR
// sLevel := false ;
61610: LD_ADDR_EXP 51
61614: PUSH
61615: LD_INT 0
61617: ST_TO_ADDR
// sArmoury := false ;
61618: LD_ADDR_EXP 52
61622: PUSH
61623: LD_INT 0
61625: ST_TO_ADDR
// sRadar := false ;
61626: LD_ADDR_EXP 53
61630: PUSH
61631: LD_INT 0
61633: ST_TO_ADDR
// sBunker := false ;
61634: LD_ADDR_EXP 54
61638: PUSH
61639: LD_INT 0
61641: ST_TO_ADDR
// sHack := false ;
61642: LD_ADDR_EXP 55
61646: PUSH
61647: LD_INT 0
61649: ST_TO_ADDR
// sFire := false ;
61650: LD_ADDR_EXP 56
61654: PUSH
61655: LD_INT 0
61657: ST_TO_ADDR
// sRefresh := false ;
61658: LD_ADDR_EXP 57
61662: PUSH
61663: LD_INT 0
61665: ST_TO_ADDR
// sExp := false ;
61666: LD_ADDR_EXP 58
61670: PUSH
61671: LD_INT 0
61673: ST_TO_ADDR
// sDepot := false ;
61674: LD_ADDR_EXP 59
61678: PUSH
61679: LD_INT 0
61681: ST_TO_ADDR
// sFlag := false ;
61682: LD_ADDR_EXP 60
61686: PUSH
61687: LD_INT 0
61689: ST_TO_ADDR
// sKamikadze := false ;
61690: LD_ADDR_EXP 68
61694: PUSH
61695: LD_INT 0
61697: ST_TO_ADDR
// sTroll := false ;
61698: LD_ADDR_EXP 69
61702: PUSH
61703: LD_INT 0
61705: ST_TO_ADDR
// sSlow := false ;
61706: LD_ADDR_EXP 70
61710: PUSH
61711: LD_INT 0
61713: ST_TO_ADDR
// sLack := false ;
61714: LD_ADDR_EXP 71
61718: PUSH
61719: LD_INT 0
61721: ST_TO_ADDR
// sTank := false ;
61722: LD_ADDR_EXP 73
61726: PUSH
61727: LD_INT 0
61729: ST_TO_ADDR
// sRemote := false ;
61730: LD_ADDR_EXP 74
61734: PUSH
61735: LD_INT 0
61737: ST_TO_ADDR
// sPowell := false ;
61738: LD_ADDR_EXP 75
61742: PUSH
61743: LD_INT 0
61745: ST_TO_ADDR
// sTeleport := false ;
61746: LD_ADDR_EXP 78
61750: PUSH
61751: LD_INT 0
61753: ST_TO_ADDR
// sOilTower := false ;
61754: LD_ADDR_EXP 80
61758: PUSH
61759: LD_INT 0
61761: ST_TO_ADDR
// sShovel := false ;
61762: LD_ADDR_EXP 81
61766: PUSH
61767: LD_INT 0
61769: ST_TO_ADDR
// sSheik := false ;
61770: LD_ADDR_EXP 82
61774: PUSH
61775: LD_INT 0
61777: ST_TO_ADDR
// sEarthquake := false ;
61778: LD_ADDR_EXP 84
61782: PUSH
61783: LD_INT 0
61785: ST_TO_ADDR
// sAI := false ;
61786: LD_ADDR_EXP 85
61790: PUSH
61791: LD_INT 0
61793: ST_TO_ADDR
// sCargo := false ;
61794: LD_ADDR_EXP 88
61798: PUSH
61799: LD_INT 0
61801: ST_TO_ADDR
// sDLaser := false ;
61802: LD_ADDR_EXP 89
61806: PUSH
61807: LD_INT 0
61809: ST_TO_ADDR
// sExchange := false ;
61810: LD_ADDR_EXP 90
61814: PUSH
61815: LD_INT 0
61817: ST_TO_ADDR
// sFac := false ;
61818: LD_ADDR_EXP 91
61822: PUSH
61823: LD_INT 0
61825: ST_TO_ADDR
// sPower := false ;
61826: LD_ADDR_EXP 92
61830: PUSH
61831: LD_INT 0
61833: ST_TO_ADDR
// sRandom := false ;
61834: LD_ADDR_EXP 93
61838: PUSH
61839: LD_INT 0
61841: ST_TO_ADDR
// sShield := false ;
61842: LD_ADDR_EXP 94
61846: PUSH
61847: LD_INT 0
61849: ST_TO_ADDR
// sTime := false ;
61850: LD_ADDR_EXP 95
61854: PUSH
61855: LD_INT 0
61857: ST_TO_ADDR
// sTools := false ;
61858: LD_ADDR_EXP 96
61862: PUSH
61863: LD_INT 0
61865: ST_TO_ADDR
// sSold := false ;
61866: LD_ADDR_EXP 61
61870: PUSH
61871: LD_INT 0
61873: ST_TO_ADDR
// sDiff := false ;
61874: LD_ADDR_EXP 62
61878: PUSH
61879: LD_INT 0
61881: ST_TO_ADDR
// sFog := false ;
61882: LD_ADDR_EXP 65
61886: PUSH
61887: LD_INT 0
61889: ST_TO_ADDR
// sReset := false ;
61890: LD_ADDR_EXP 66
61894: PUSH
61895: LD_INT 0
61897: ST_TO_ADDR
// sSun := false ;
61898: LD_ADDR_EXP 67
61902: PUSH
61903: LD_INT 0
61905: ST_TO_ADDR
// sTiger := false ;
61906: LD_ADDR_EXP 63
61910: PUSH
61911: LD_INT 0
61913: ST_TO_ADDR
// sBomb := false ;
61914: LD_ADDR_EXP 64
61918: PUSH
61919: LD_INT 0
61921: ST_TO_ADDR
// sWound := false ;
61922: LD_ADDR_EXP 72
61926: PUSH
61927: LD_INT 0
61929: ST_TO_ADDR
// sBetray := false ;
61930: LD_ADDR_EXP 76
61934: PUSH
61935: LD_INT 0
61937: ST_TO_ADDR
// sContamin := false ;
61938: LD_ADDR_EXP 77
61942: PUSH
61943: LD_INT 0
61945: ST_TO_ADDR
// sOil := false ;
61946: LD_ADDR_EXP 79
61950: PUSH
61951: LD_INT 0
61953: ST_TO_ADDR
// sStu := false ;
61954: LD_ADDR_EXP 83
61958: PUSH
61959: LD_INT 0
61961: ST_TO_ADDR
// sBazooka := false ;
61962: LD_ADDR_EXP 86
61966: PUSH
61967: LD_INT 0
61969: ST_TO_ADDR
// sMortar := false ;
61970: LD_ADDR_EXP 87
61974: PUSH
61975: LD_INT 0
61977: ST_TO_ADDR
// sRanger := false ;
61978: LD_ADDR_EXP 97
61982: PUSH
61983: LD_INT 0
61985: ST_TO_ADDR
// sComputer := false ;
61986: LD_ADDR_EXP 98
61990: PUSH
61991: LD_INT 0
61993: ST_TO_ADDR
// s30 := false ;
61994: LD_ADDR_EXP 99
61998: PUSH
61999: LD_INT 0
62001: ST_TO_ADDR
// s60 := false ;
62002: LD_ADDR_EXP 100
62006: PUSH
62007: LD_INT 0
62009: ST_TO_ADDR
// end ;
62010: LD_VAR 0 1
62014: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62015: LD_INT 0
62017: PPUSH
62018: PPUSH
62019: PPUSH
62020: PPUSH
62021: PPUSH
62022: PPUSH
62023: PPUSH
// result := [ ] ;
62024: LD_ADDR_VAR 0 2
62028: PUSH
62029: EMPTY
62030: ST_TO_ADDR
// if campaign_id = 1 then
62031: LD_OWVAR 69
62035: PUSH
62036: LD_INT 1
62038: EQUAL
62039: IFFALSE 65205
// begin case mission_number of 1 :
62041: LD_OWVAR 70
62045: PUSH
62046: LD_INT 1
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62054
62052: GO 62130
62054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62055: LD_ADDR_VAR 0 2
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 4
62065: PUSH
62066: LD_INT 11
62068: PUSH
62069: LD_INT 12
62071: PUSH
62072: LD_INT 15
62074: PUSH
62075: LD_INT 16
62077: PUSH
62078: LD_INT 22
62080: PUSH
62081: LD_INT 23
62083: PUSH
62084: LD_INT 26
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 101
62100: PUSH
62101: LD_INT 102
62103: PUSH
62104: LD_INT 106
62106: PUSH
62107: LD_INT 116
62109: PUSH
62110: LD_INT 117
62112: PUSH
62113: LD_INT 118
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: ST_TO_ADDR
62128: GO 65203
62130: LD_INT 2
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62138
62136: GO 62222
62138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62139: LD_ADDR_VAR 0 2
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: LD_INT 4
62149: PUSH
62150: LD_INT 11
62152: PUSH
62153: LD_INT 12
62155: PUSH
62156: LD_INT 15
62158: PUSH
62159: LD_INT 16
62161: PUSH
62162: LD_INT 22
62164: PUSH
62165: LD_INT 23
62167: PUSH
62168: LD_INT 26
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 101
62184: PUSH
62185: LD_INT 102
62187: PUSH
62188: LD_INT 105
62190: PUSH
62191: LD_INT 106
62193: PUSH
62194: LD_INT 108
62196: PUSH
62197: LD_INT 116
62199: PUSH
62200: LD_INT 117
62202: PUSH
62203: LD_INT 118
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: ST_TO_ADDR
62220: GO 65203
62222: LD_INT 3
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62230
62228: GO 62318
62230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
62231: LD_ADDR_VAR 0 2
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: LD_INT 4
62241: PUSH
62242: LD_INT 5
62244: PUSH
62245: LD_INT 11
62247: PUSH
62248: LD_INT 12
62250: PUSH
62251: LD_INT 15
62253: PUSH
62254: LD_INT 16
62256: PUSH
62257: LD_INT 22
62259: PUSH
62260: LD_INT 26
62262: PUSH
62263: LD_INT 36
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 101
62280: PUSH
62281: LD_INT 102
62283: PUSH
62284: LD_INT 105
62286: PUSH
62287: LD_INT 106
62289: PUSH
62290: LD_INT 108
62292: PUSH
62293: LD_INT 116
62295: PUSH
62296: LD_INT 117
62298: PUSH
62299: LD_INT 118
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: ST_TO_ADDR
62316: GO 65203
62318: LD_INT 4
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62326
62324: GO 62422
62326: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
62327: LD_ADDR_VAR 0 2
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 4
62337: PUSH
62338: LD_INT 5
62340: PUSH
62341: LD_INT 8
62343: PUSH
62344: LD_INT 11
62346: PUSH
62347: LD_INT 12
62349: PUSH
62350: LD_INT 15
62352: PUSH
62353: LD_INT 16
62355: PUSH
62356: LD_INT 22
62358: PUSH
62359: LD_INT 23
62361: PUSH
62362: LD_INT 26
62364: PUSH
62365: LD_INT 36
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 101
62384: PUSH
62385: LD_INT 102
62387: PUSH
62388: LD_INT 105
62390: PUSH
62391: LD_INT 106
62393: PUSH
62394: LD_INT 108
62396: PUSH
62397: LD_INT 116
62399: PUSH
62400: LD_INT 117
62402: PUSH
62403: LD_INT 118
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: ST_TO_ADDR
62420: GO 65203
62422: LD_INT 5
62424: DOUBLE
62425: EQUAL
62426: IFTRUE 62430
62428: GO 62542
62430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62431: LD_ADDR_VAR 0 2
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 5
62444: PUSH
62445: LD_INT 6
62447: PUSH
62448: LD_INT 8
62450: PUSH
62451: LD_INT 11
62453: PUSH
62454: LD_INT 12
62456: PUSH
62457: LD_INT 15
62459: PUSH
62460: LD_INT 16
62462: PUSH
62463: LD_INT 22
62465: PUSH
62466: LD_INT 23
62468: PUSH
62469: LD_INT 25
62471: PUSH
62472: LD_INT 26
62474: PUSH
62475: LD_INT 36
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 101
62496: PUSH
62497: LD_INT 102
62499: PUSH
62500: LD_INT 105
62502: PUSH
62503: LD_INT 106
62505: PUSH
62506: LD_INT 108
62508: PUSH
62509: LD_INT 109
62511: PUSH
62512: LD_INT 112
62514: PUSH
62515: LD_INT 116
62517: PUSH
62518: LD_INT 117
62520: PUSH
62521: LD_INT 118
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: ST_TO_ADDR
62540: GO 65203
62542: LD_INT 6
62544: DOUBLE
62545: EQUAL
62546: IFTRUE 62550
62548: GO 62682
62550: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
62551: LD_ADDR_VAR 0 2
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: LD_INT 5
62564: PUSH
62565: LD_INT 6
62567: PUSH
62568: LD_INT 8
62570: PUSH
62571: LD_INT 11
62573: PUSH
62574: LD_INT 12
62576: PUSH
62577: LD_INT 15
62579: PUSH
62580: LD_INT 16
62582: PUSH
62583: LD_INT 20
62585: PUSH
62586: LD_INT 21
62588: PUSH
62589: LD_INT 22
62591: PUSH
62592: LD_INT 23
62594: PUSH
62595: LD_INT 25
62597: PUSH
62598: LD_INT 26
62600: PUSH
62601: LD_INT 30
62603: PUSH
62604: LD_INT 31
62606: PUSH
62607: LD_INT 32
62609: PUSH
62610: LD_INT 36
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 101
62636: PUSH
62637: LD_INT 102
62639: PUSH
62640: LD_INT 105
62642: PUSH
62643: LD_INT 106
62645: PUSH
62646: LD_INT 108
62648: PUSH
62649: LD_INT 109
62651: PUSH
62652: LD_INT 112
62654: PUSH
62655: LD_INT 116
62657: PUSH
62658: LD_INT 117
62660: PUSH
62661: LD_INT 118
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: ST_TO_ADDR
62680: GO 65203
62682: LD_INT 7
62684: DOUBLE
62685: EQUAL
62686: IFTRUE 62690
62688: GO 62802
62690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
62691: LD_ADDR_VAR 0 2
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 4
62701: PUSH
62702: LD_INT 5
62704: PUSH
62705: LD_INT 7
62707: PUSH
62708: LD_INT 11
62710: PUSH
62711: LD_INT 12
62713: PUSH
62714: LD_INT 15
62716: PUSH
62717: LD_INT 16
62719: PUSH
62720: LD_INT 20
62722: PUSH
62723: LD_INT 21
62725: PUSH
62726: LD_INT 22
62728: PUSH
62729: LD_INT 23
62731: PUSH
62732: LD_INT 25
62734: PUSH
62735: LD_INT 26
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 101
62756: PUSH
62757: LD_INT 102
62759: PUSH
62760: LD_INT 103
62762: PUSH
62763: LD_INT 105
62765: PUSH
62766: LD_INT 106
62768: PUSH
62769: LD_INT 108
62771: PUSH
62772: LD_INT 112
62774: PUSH
62775: LD_INT 116
62777: PUSH
62778: LD_INT 117
62780: PUSH
62781: LD_INT 118
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: ST_TO_ADDR
62800: GO 65203
62802: LD_INT 8
62804: DOUBLE
62805: EQUAL
62806: IFTRUE 62810
62808: GO 62950
62810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
62811: LD_ADDR_VAR 0 2
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: LD_INT 4
62821: PUSH
62822: LD_INT 5
62824: PUSH
62825: LD_INT 6
62827: PUSH
62828: LD_INT 7
62830: PUSH
62831: LD_INT 8
62833: PUSH
62834: LD_INT 11
62836: PUSH
62837: LD_INT 12
62839: PUSH
62840: LD_INT 15
62842: PUSH
62843: LD_INT 16
62845: PUSH
62846: LD_INT 20
62848: PUSH
62849: LD_INT 21
62851: PUSH
62852: LD_INT 22
62854: PUSH
62855: LD_INT 23
62857: PUSH
62858: LD_INT 25
62860: PUSH
62861: LD_INT 26
62863: PUSH
62864: LD_INT 30
62866: PUSH
62867: LD_INT 31
62869: PUSH
62870: LD_INT 32
62872: PUSH
62873: LD_INT 36
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 101
62900: PUSH
62901: LD_INT 102
62903: PUSH
62904: LD_INT 103
62906: PUSH
62907: LD_INT 105
62909: PUSH
62910: LD_INT 106
62912: PUSH
62913: LD_INT 108
62915: PUSH
62916: LD_INT 109
62918: PUSH
62919: LD_INT 112
62921: PUSH
62922: LD_INT 116
62924: PUSH
62925: LD_INT 117
62927: PUSH
62928: LD_INT 118
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: ST_TO_ADDR
62948: GO 65203
62950: LD_INT 9
62952: DOUBLE
62953: EQUAL
62954: IFTRUE 62958
62956: GO 63106
62958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62959: LD_ADDR_VAR 0 2
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: LD_INT 4
62969: PUSH
62970: LD_INT 5
62972: PUSH
62973: LD_INT 6
62975: PUSH
62976: LD_INT 7
62978: PUSH
62979: LD_INT 8
62981: PUSH
62982: LD_INT 11
62984: PUSH
62985: LD_INT 12
62987: PUSH
62988: LD_INT 15
62990: PUSH
62991: LD_INT 16
62993: PUSH
62994: LD_INT 20
62996: PUSH
62997: LD_INT 21
62999: PUSH
63000: LD_INT 22
63002: PUSH
63003: LD_INT 23
63005: PUSH
63006: LD_INT 25
63008: PUSH
63009: LD_INT 26
63011: PUSH
63012: LD_INT 28
63014: PUSH
63015: LD_INT 30
63017: PUSH
63018: LD_INT 31
63020: PUSH
63021: LD_INT 32
63023: PUSH
63024: LD_INT 36
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 101
63052: PUSH
63053: LD_INT 102
63055: PUSH
63056: LD_INT 103
63058: PUSH
63059: LD_INT 105
63061: PUSH
63062: LD_INT 106
63064: PUSH
63065: LD_INT 108
63067: PUSH
63068: LD_INT 109
63070: PUSH
63071: LD_INT 112
63073: PUSH
63074: LD_INT 114
63076: PUSH
63077: LD_INT 116
63079: PUSH
63080: LD_INT 117
63082: PUSH
63083: LD_INT 118
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: ST_TO_ADDR
63104: GO 65203
63106: LD_INT 10
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63114
63112: GO 63310
63114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: LD_INT 5
63128: PUSH
63129: LD_INT 6
63131: PUSH
63132: LD_INT 7
63134: PUSH
63135: LD_INT 8
63137: PUSH
63138: LD_INT 9
63140: PUSH
63141: LD_INT 10
63143: PUSH
63144: LD_INT 11
63146: PUSH
63147: LD_INT 12
63149: PUSH
63150: LD_INT 13
63152: PUSH
63153: LD_INT 14
63155: PUSH
63156: LD_INT 15
63158: PUSH
63159: LD_INT 16
63161: PUSH
63162: LD_INT 17
63164: PUSH
63165: LD_INT 18
63167: PUSH
63168: LD_INT 19
63170: PUSH
63171: LD_INT 20
63173: PUSH
63174: LD_INT 21
63176: PUSH
63177: LD_INT 22
63179: PUSH
63180: LD_INT 23
63182: PUSH
63183: LD_INT 24
63185: PUSH
63186: LD_INT 25
63188: PUSH
63189: LD_INT 26
63191: PUSH
63192: LD_INT 28
63194: PUSH
63195: LD_INT 30
63197: PUSH
63198: LD_INT 31
63200: PUSH
63201: LD_INT 32
63203: PUSH
63204: LD_INT 36
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 101
63240: PUSH
63241: LD_INT 102
63243: PUSH
63244: LD_INT 103
63246: PUSH
63247: LD_INT 104
63249: PUSH
63250: LD_INT 105
63252: PUSH
63253: LD_INT 106
63255: PUSH
63256: LD_INT 107
63258: PUSH
63259: LD_INT 108
63261: PUSH
63262: LD_INT 109
63264: PUSH
63265: LD_INT 110
63267: PUSH
63268: LD_INT 111
63270: PUSH
63271: LD_INT 112
63273: PUSH
63274: LD_INT 114
63276: PUSH
63277: LD_INT 116
63279: PUSH
63280: LD_INT 117
63282: PUSH
63283: LD_INT 118
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: ST_TO_ADDR
63308: GO 65203
63310: LD_INT 11
63312: DOUBLE
63313: EQUAL
63314: IFTRUE 63318
63316: GO 63522
63318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
63319: LD_ADDR_VAR 0 2
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: LD_INT 5
63335: PUSH
63336: LD_INT 6
63338: PUSH
63339: LD_INT 7
63341: PUSH
63342: LD_INT 8
63344: PUSH
63345: LD_INT 9
63347: PUSH
63348: LD_INT 10
63350: PUSH
63351: LD_INT 11
63353: PUSH
63354: LD_INT 12
63356: PUSH
63357: LD_INT 13
63359: PUSH
63360: LD_INT 14
63362: PUSH
63363: LD_INT 15
63365: PUSH
63366: LD_INT 16
63368: PUSH
63369: LD_INT 17
63371: PUSH
63372: LD_INT 18
63374: PUSH
63375: LD_INT 19
63377: PUSH
63378: LD_INT 20
63380: PUSH
63381: LD_INT 21
63383: PUSH
63384: LD_INT 22
63386: PUSH
63387: LD_INT 23
63389: PUSH
63390: LD_INT 24
63392: PUSH
63393: LD_INT 25
63395: PUSH
63396: LD_INT 26
63398: PUSH
63399: LD_INT 28
63401: PUSH
63402: LD_INT 30
63404: PUSH
63405: LD_INT 31
63407: PUSH
63408: LD_INT 32
63410: PUSH
63411: LD_INT 34
63413: PUSH
63414: LD_INT 36
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 101
63452: PUSH
63453: LD_INT 102
63455: PUSH
63456: LD_INT 103
63458: PUSH
63459: LD_INT 104
63461: PUSH
63462: LD_INT 105
63464: PUSH
63465: LD_INT 106
63467: PUSH
63468: LD_INT 107
63470: PUSH
63471: LD_INT 108
63473: PUSH
63474: LD_INT 109
63476: PUSH
63477: LD_INT 110
63479: PUSH
63480: LD_INT 111
63482: PUSH
63483: LD_INT 112
63485: PUSH
63486: LD_INT 114
63488: PUSH
63489: LD_INT 116
63491: PUSH
63492: LD_INT 117
63494: PUSH
63495: LD_INT 118
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: ST_TO_ADDR
63520: GO 65203
63522: LD_INT 12
63524: DOUBLE
63525: EQUAL
63526: IFTRUE 63530
63528: GO 63750
63530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
63531: LD_ADDR_VAR 0 2
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: LD_INT 4
63547: PUSH
63548: LD_INT 5
63550: PUSH
63551: LD_INT 6
63553: PUSH
63554: LD_INT 7
63556: PUSH
63557: LD_INT 8
63559: PUSH
63560: LD_INT 9
63562: PUSH
63563: LD_INT 10
63565: PUSH
63566: LD_INT 11
63568: PUSH
63569: LD_INT 12
63571: PUSH
63572: LD_INT 13
63574: PUSH
63575: LD_INT 14
63577: PUSH
63578: LD_INT 15
63580: PUSH
63581: LD_INT 16
63583: PUSH
63584: LD_INT 17
63586: PUSH
63587: LD_INT 18
63589: PUSH
63590: LD_INT 19
63592: PUSH
63593: LD_INT 20
63595: PUSH
63596: LD_INT 21
63598: PUSH
63599: LD_INT 22
63601: PUSH
63602: LD_INT 23
63604: PUSH
63605: LD_INT 24
63607: PUSH
63608: LD_INT 25
63610: PUSH
63611: LD_INT 26
63613: PUSH
63614: LD_INT 27
63616: PUSH
63617: LD_INT 28
63619: PUSH
63620: LD_INT 30
63622: PUSH
63623: LD_INT 31
63625: PUSH
63626: LD_INT 32
63628: PUSH
63629: LD_INT 33
63631: PUSH
63632: LD_INT 34
63634: PUSH
63635: LD_INT 36
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 101
63676: PUSH
63677: LD_INT 102
63679: PUSH
63680: LD_INT 103
63682: PUSH
63683: LD_INT 104
63685: PUSH
63686: LD_INT 105
63688: PUSH
63689: LD_INT 106
63691: PUSH
63692: LD_INT 107
63694: PUSH
63695: LD_INT 108
63697: PUSH
63698: LD_INT 109
63700: PUSH
63701: LD_INT 110
63703: PUSH
63704: LD_INT 111
63706: PUSH
63707: LD_INT 112
63709: PUSH
63710: LD_INT 113
63712: PUSH
63713: LD_INT 114
63715: PUSH
63716: LD_INT 116
63718: PUSH
63719: LD_INT 117
63721: PUSH
63722: LD_INT 118
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: ST_TO_ADDR
63748: GO 65203
63750: LD_INT 13
63752: DOUBLE
63753: EQUAL
63754: IFTRUE 63758
63756: GO 63966
63758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
63759: LD_ADDR_VAR 0 2
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: LD_INT 8
63781: PUSH
63782: LD_INT 9
63784: PUSH
63785: LD_INT 10
63787: PUSH
63788: LD_INT 11
63790: PUSH
63791: LD_INT 12
63793: PUSH
63794: LD_INT 14
63796: PUSH
63797: LD_INT 15
63799: PUSH
63800: LD_INT 16
63802: PUSH
63803: LD_INT 17
63805: PUSH
63806: LD_INT 18
63808: PUSH
63809: LD_INT 19
63811: PUSH
63812: LD_INT 20
63814: PUSH
63815: LD_INT 21
63817: PUSH
63818: LD_INT 22
63820: PUSH
63821: LD_INT 23
63823: PUSH
63824: LD_INT 24
63826: PUSH
63827: LD_INT 25
63829: PUSH
63830: LD_INT 26
63832: PUSH
63833: LD_INT 27
63835: PUSH
63836: LD_INT 28
63838: PUSH
63839: LD_INT 30
63841: PUSH
63842: LD_INT 31
63844: PUSH
63845: LD_INT 32
63847: PUSH
63848: LD_INT 33
63850: PUSH
63851: LD_INT 34
63853: PUSH
63854: LD_INT 36
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 101
63892: PUSH
63893: LD_INT 102
63895: PUSH
63896: LD_INT 103
63898: PUSH
63899: LD_INT 104
63901: PUSH
63902: LD_INT 105
63904: PUSH
63905: LD_INT 106
63907: PUSH
63908: LD_INT 107
63910: PUSH
63911: LD_INT 108
63913: PUSH
63914: LD_INT 109
63916: PUSH
63917: LD_INT 110
63919: PUSH
63920: LD_INT 111
63922: PUSH
63923: LD_INT 112
63925: PUSH
63926: LD_INT 113
63928: PUSH
63929: LD_INT 114
63931: PUSH
63932: LD_INT 116
63934: PUSH
63935: LD_INT 117
63937: PUSH
63938: LD_INT 118
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: ST_TO_ADDR
63964: GO 65203
63966: LD_INT 14
63968: DOUBLE
63969: EQUAL
63970: IFTRUE 63974
63972: GO 64198
63974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63975: LD_ADDR_VAR 0 2
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: LD_INT 2
63985: PUSH
63986: LD_INT 3
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: LD_INT 5
63994: PUSH
63995: LD_INT 6
63997: PUSH
63998: LD_INT 7
64000: PUSH
64001: LD_INT 8
64003: PUSH
64004: LD_INT 9
64006: PUSH
64007: LD_INT 10
64009: PUSH
64010: LD_INT 11
64012: PUSH
64013: LD_INT 12
64015: PUSH
64016: LD_INT 13
64018: PUSH
64019: LD_INT 14
64021: PUSH
64022: LD_INT 15
64024: PUSH
64025: LD_INT 16
64027: PUSH
64028: LD_INT 17
64030: PUSH
64031: LD_INT 18
64033: PUSH
64034: LD_INT 19
64036: PUSH
64037: LD_INT 20
64039: PUSH
64040: LD_INT 21
64042: PUSH
64043: LD_INT 22
64045: PUSH
64046: LD_INT 23
64048: PUSH
64049: LD_INT 24
64051: PUSH
64052: LD_INT 25
64054: PUSH
64055: LD_INT 26
64057: PUSH
64058: LD_INT 27
64060: PUSH
64061: LD_INT 28
64063: PUSH
64064: LD_INT 29
64066: PUSH
64067: LD_INT 30
64069: PUSH
64070: LD_INT 31
64072: PUSH
64073: LD_INT 32
64075: PUSH
64076: LD_INT 33
64078: PUSH
64079: LD_INT 34
64081: PUSH
64082: LD_INT 36
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 101
64124: PUSH
64125: LD_INT 102
64127: PUSH
64128: LD_INT 103
64130: PUSH
64131: LD_INT 104
64133: PUSH
64134: LD_INT 105
64136: PUSH
64137: LD_INT 106
64139: PUSH
64140: LD_INT 107
64142: PUSH
64143: LD_INT 108
64145: PUSH
64146: LD_INT 109
64148: PUSH
64149: LD_INT 110
64151: PUSH
64152: LD_INT 111
64154: PUSH
64155: LD_INT 112
64157: PUSH
64158: LD_INT 113
64160: PUSH
64161: LD_INT 114
64163: PUSH
64164: LD_INT 116
64166: PUSH
64167: LD_INT 117
64169: PUSH
64170: LD_INT 118
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: ST_TO_ADDR
64196: GO 65203
64198: LD_INT 15
64200: DOUBLE
64201: EQUAL
64202: IFTRUE 64206
64204: GO 64430
64206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64207: LD_ADDR_VAR 0 2
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: LD_INT 5
64226: PUSH
64227: LD_INT 6
64229: PUSH
64230: LD_INT 7
64232: PUSH
64233: LD_INT 8
64235: PUSH
64236: LD_INT 9
64238: PUSH
64239: LD_INT 10
64241: PUSH
64242: LD_INT 11
64244: PUSH
64245: LD_INT 12
64247: PUSH
64248: LD_INT 13
64250: PUSH
64251: LD_INT 14
64253: PUSH
64254: LD_INT 15
64256: PUSH
64257: LD_INT 16
64259: PUSH
64260: LD_INT 17
64262: PUSH
64263: LD_INT 18
64265: PUSH
64266: LD_INT 19
64268: PUSH
64269: LD_INT 20
64271: PUSH
64272: LD_INT 21
64274: PUSH
64275: LD_INT 22
64277: PUSH
64278: LD_INT 23
64280: PUSH
64281: LD_INT 24
64283: PUSH
64284: LD_INT 25
64286: PUSH
64287: LD_INT 26
64289: PUSH
64290: LD_INT 27
64292: PUSH
64293: LD_INT 28
64295: PUSH
64296: LD_INT 29
64298: PUSH
64299: LD_INT 30
64301: PUSH
64302: LD_INT 31
64304: PUSH
64305: LD_INT 32
64307: PUSH
64308: LD_INT 33
64310: PUSH
64311: LD_INT 34
64313: PUSH
64314: LD_INT 36
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 101
64356: PUSH
64357: LD_INT 102
64359: PUSH
64360: LD_INT 103
64362: PUSH
64363: LD_INT 104
64365: PUSH
64366: LD_INT 105
64368: PUSH
64369: LD_INT 106
64371: PUSH
64372: LD_INT 107
64374: PUSH
64375: LD_INT 108
64377: PUSH
64378: LD_INT 109
64380: PUSH
64381: LD_INT 110
64383: PUSH
64384: LD_INT 111
64386: PUSH
64387: LD_INT 112
64389: PUSH
64390: LD_INT 113
64392: PUSH
64393: LD_INT 114
64395: PUSH
64396: LD_INT 116
64398: PUSH
64399: LD_INT 117
64401: PUSH
64402: LD_INT 118
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: ST_TO_ADDR
64428: GO 65203
64430: LD_INT 16
64432: DOUBLE
64433: EQUAL
64434: IFTRUE 64438
64436: GO 64574
64438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64439: LD_ADDR_VAR 0 2
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 4
64449: PUSH
64450: LD_INT 5
64452: PUSH
64453: LD_INT 7
64455: PUSH
64456: LD_INT 11
64458: PUSH
64459: LD_INT 12
64461: PUSH
64462: LD_INT 15
64464: PUSH
64465: LD_INT 16
64467: PUSH
64468: LD_INT 20
64470: PUSH
64471: LD_INT 21
64473: PUSH
64474: LD_INT 22
64476: PUSH
64477: LD_INT 23
64479: PUSH
64480: LD_INT 25
64482: PUSH
64483: LD_INT 26
64485: PUSH
64486: LD_INT 30
64488: PUSH
64489: LD_INT 31
64491: PUSH
64492: LD_INT 32
64494: PUSH
64495: LD_INT 33
64497: PUSH
64498: LD_INT 34
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 101
64524: PUSH
64525: LD_INT 102
64527: PUSH
64528: LD_INT 103
64530: PUSH
64531: LD_INT 106
64533: PUSH
64534: LD_INT 108
64536: PUSH
64537: LD_INT 112
64539: PUSH
64540: LD_INT 113
64542: PUSH
64543: LD_INT 114
64545: PUSH
64546: LD_INT 116
64548: PUSH
64549: LD_INT 117
64551: PUSH
64552: LD_INT 118
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: ST_TO_ADDR
64572: GO 65203
64574: LD_INT 17
64576: DOUBLE
64577: EQUAL
64578: IFTRUE 64582
64580: GO 64806
64582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
64583: LD_ADDR_VAR 0 2
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: LD_INT 4
64599: PUSH
64600: LD_INT 5
64602: PUSH
64603: LD_INT 6
64605: PUSH
64606: LD_INT 7
64608: PUSH
64609: LD_INT 8
64611: PUSH
64612: LD_INT 9
64614: PUSH
64615: LD_INT 10
64617: PUSH
64618: LD_INT 11
64620: PUSH
64621: LD_INT 12
64623: PUSH
64624: LD_INT 13
64626: PUSH
64627: LD_INT 14
64629: PUSH
64630: LD_INT 15
64632: PUSH
64633: LD_INT 16
64635: PUSH
64636: LD_INT 17
64638: PUSH
64639: LD_INT 18
64641: PUSH
64642: LD_INT 19
64644: PUSH
64645: LD_INT 20
64647: PUSH
64648: LD_INT 21
64650: PUSH
64651: LD_INT 22
64653: PUSH
64654: LD_INT 23
64656: PUSH
64657: LD_INT 24
64659: PUSH
64660: LD_INT 25
64662: PUSH
64663: LD_INT 26
64665: PUSH
64666: LD_INT 27
64668: PUSH
64669: LD_INT 28
64671: PUSH
64672: LD_INT 29
64674: PUSH
64675: LD_INT 30
64677: PUSH
64678: LD_INT 31
64680: PUSH
64681: LD_INT 32
64683: PUSH
64684: LD_INT 33
64686: PUSH
64687: LD_INT 34
64689: PUSH
64690: LD_INT 36
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 101
64732: PUSH
64733: LD_INT 102
64735: PUSH
64736: LD_INT 103
64738: PUSH
64739: LD_INT 104
64741: PUSH
64742: LD_INT 105
64744: PUSH
64745: LD_INT 106
64747: PUSH
64748: LD_INT 107
64750: PUSH
64751: LD_INT 108
64753: PUSH
64754: LD_INT 109
64756: PUSH
64757: LD_INT 110
64759: PUSH
64760: LD_INT 111
64762: PUSH
64763: LD_INT 112
64765: PUSH
64766: LD_INT 113
64768: PUSH
64769: LD_INT 114
64771: PUSH
64772: LD_INT 116
64774: PUSH
64775: LD_INT 117
64777: PUSH
64778: LD_INT 118
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: ST_TO_ADDR
64804: GO 65203
64806: LD_INT 18
64808: DOUBLE
64809: EQUAL
64810: IFTRUE 64814
64812: GO 64962
64814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
64815: LD_ADDR_VAR 0 2
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: LD_INT 5
64828: PUSH
64829: LD_INT 7
64831: PUSH
64832: LD_INT 11
64834: PUSH
64835: LD_INT 12
64837: PUSH
64838: LD_INT 15
64840: PUSH
64841: LD_INT 16
64843: PUSH
64844: LD_INT 20
64846: PUSH
64847: LD_INT 21
64849: PUSH
64850: LD_INT 22
64852: PUSH
64853: LD_INT 23
64855: PUSH
64856: LD_INT 25
64858: PUSH
64859: LD_INT 26
64861: PUSH
64862: LD_INT 30
64864: PUSH
64865: LD_INT 31
64867: PUSH
64868: LD_INT 32
64870: PUSH
64871: LD_INT 33
64873: PUSH
64874: LD_INT 34
64876: PUSH
64877: LD_INT 35
64879: PUSH
64880: LD_INT 36
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 101
64908: PUSH
64909: LD_INT 102
64911: PUSH
64912: LD_INT 103
64914: PUSH
64915: LD_INT 106
64917: PUSH
64918: LD_INT 108
64920: PUSH
64921: LD_INT 112
64923: PUSH
64924: LD_INT 113
64926: PUSH
64927: LD_INT 114
64929: PUSH
64930: LD_INT 115
64932: PUSH
64933: LD_INT 116
64935: PUSH
64936: LD_INT 117
64938: PUSH
64939: LD_INT 118
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: ST_TO_ADDR
64960: GO 65203
64962: LD_INT 19
64964: DOUBLE
64965: EQUAL
64966: IFTRUE 64970
64968: GO 65202
64970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64971: LD_ADDR_VAR 0 2
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: LD_INT 4
64987: PUSH
64988: LD_INT 5
64990: PUSH
64991: LD_INT 6
64993: PUSH
64994: LD_INT 7
64996: PUSH
64997: LD_INT 8
64999: PUSH
65000: LD_INT 9
65002: PUSH
65003: LD_INT 10
65005: PUSH
65006: LD_INT 11
65008: PUSH
65009: LD_INT 12
65011: PUSH
65012: LD_INT 13
65014: PUSH
65015: LD_INT 14
65017: PUSH
65018: LD_INT 15
65020: PUSH
65021: LD_INT 16
65023: PUSH
65024: LD_INT 17
65026: PUSH
65027: LD_INT 18
65029: PUSH
65030: LD_INT 19
65032: PUSH
65033: LD_INT 20
65035: PUSH
65036: LD_INT 21
65038: PUSH
65039: LD_INT 22
65041: PUSH
65042: LD_INT 23
65044: PUSH
65045: LD_INT 24
65047: PUSH
65048: LD_INT 25
65050: PUSH
65051: LD_INT 26
65053: PUSH
65054: LD_INT 27
65056: PUSH
65057: LD_INT 28
65059: PUSH
65060: LD_INT 29
65062: PUSH
65063: LD_INT 30
65065: PUSH
65066: LD_INT 31
65068: PUSH
65069: LD_INT 32
65071: PUSH
65072: LD_INT 33
65074: PUSH
65075: LD_INT 34
65077: PUSH
65078: LD_INT 35
65080: PUSH
65081: LD_INT 36
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 101
65124: PUSH
65125: LD_INT 102
65127: PUSH
65128: LD_INT 103
65130: PUSH
65131: LD_INT 104
65133: PUSH
65134: LD_INT 105
65136: PUSH
65137: LD_INT 106
65139: PUSH
65140: LD_INT 107
65142: PUSH
65143: LD_INT 108
65145: PUSH
65146: LD_INT 109
65148: PUSH
65149: LD_INT 110
65151: PUSH
65152: LD_INT 111
65154: PUSH
65155: LD_INT 112
65157: PUSH
65158: LD_INT 113
65160: PUSH
65161: LD_INT 114
65163: PUSH
65164: LD_INT 115
65166: PUSH
65167: LD_INT 116
65169: PUSH
65170: LD_INT 117
65172: PUSH
65173: LD_INT 118
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: ST_TO_ADDR
65200: GO 65203
65202: POP
// end else
65203: GO 65434
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: LD_INT 4
65221: PUSH
65222: LD_INT 5
65224: PUSH
65225: LD_INT 6
65227: PUSH
65228: LD_INT 7
65230: PUSH
65231: LD_INT 8
65233: PUSH
65234: LD_INT 9
65236: PUSH
65237: LD_INT 10
65239: PUSH
65240: LD_INT 11
65242: PUSH
65243: LD_INT 12
65245: PUSH
65246: LD_INT 13
65248: PUSH
65249: LD_INT 14
65251: PUSH
65252: LD_INT 15
65254: PUSH
65255: LD_INT 16
65257: PUSH
65258: LD_INT 17
65260: PUSH
65261: LD_INT 18
65263: PUSH
65264: LD_INT 19
65266: PUSH
65267: LD_INT 20
65269: PUSH
65270: LD_INT 21
65272: PUSH
65273: LD_INT 22
65275: PUSH
65276: LD_INT 23
65278: PUSH
65279: LD_INT 24
65281: PUSH
65282: LD_INT 25
65284: PUSH
65285: LD_INT 26
65287: PUSH
65288: LD_INT 27
65290: PUSH
65291: LD_INT 28
65293: PUSH
65294: LD_INT 29
65296: PUSH
65297: LD_INT 30
65299: PUSH
65300: LD_INT 31
65302: PUSH
65303: LD_INT 32
65305: PUSH
65306: LD_INT 33
65308: PUSH
65309: LD_INT 34
65311: PUSH
65312: LD_INT 35
65314: PUSH
65315: LD_INT 36
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 101
65358: PUSH
65359: LD_INT 102
65361: PUSH
65362: LD_INT 103
65364: PUSH
65365: LD_INT 104
65367: PUSH
65368: LD_INT 105
65370: PUSH
65371: LD_INT 106
65373: PUSH
65374: LD_INT 107
65376: PUSH
65377: LD_INT 108
65379: PUSH
65380: LD_INT 109
65382: PUSH
65383: LD_INT 110
65385: PUSH
65386: LD_INT 111
65388: PUSH
65389: LD_INT 112
65391: PUSH
65392: LD_INT 113
65394: PUSH
65395: LD_INT 114
65397: PUSH
65398: LD_INT 115
65400: PUSH
65401: LD_INT 116
65403: PUSH
65404: LD_INT 117
65406: PUSH
65407: LD_INT 118
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: ST_TO_ADDR
// if result then
65434: LD_VAR 0 2
65438: IFFALSE 66224
// begin normal :=  ;
65440: LD_ADDR_VAR 0 5
65444: PUSH
65445: LD_STRING 
65447: ST_TO_ADDR
// hardcore :=  ;
65448: LD_ADDR_VAR 0 6
65452: PUSH
65453: LD_STRING 
65455: ST_TO_ADDR
// active :=  ;
65456: LD_ADDR_VAR 0 7
65460: PUSH
65461: LD_STRING 
65463: ST_TO_ADDR
// for i = 1 to normalCounter do
65464: LD_ADDR_VAR 0 8
65468: PUSH
65469: DOUBLE
65470: LD_INT 1
65472: DEC
65473: ST_TO_ADDR
65474: LD_EXP 45
65478: PUSH
65479: FOR_TO
65480: IFFALSE 65581
// begin tmp := 0 ;
65482: LD_ADDR_VAR 0 3
65486: PUSH
65487: LD_STRING 0
65489: ST_TO_ADDR
// if result [ 1 ] then
65490: LD_VAR 0 2
65494: PUSH
65495: LD_INT 1
65497: ARRAY
65498: IFFALSE 65563
// if result [ 1 ] [ 1 ] = i then
65500: LD_VAR 0 2
65504: PUSH
65505: LD_INT 1
65507: ARRAY
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: PUSH
65513: LD_VAR 0 8
65517: EQUAL
65518: IFFALSE 65563
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
65520: LD_ADDR_VAR 0 2
65524: PUSH
65525: LD_VAR 0 2
65529: PPUSH
65530: LD_INT 1
65532: PPUSH
65533: LD_VAR 0 2
65537: PUSH
65538: LD_INT 1
65540: ARRAY
65541: PPUSH
65542: LD_INT 1
65544: PPUSH
65545: CALL_OW 3
65549: PPUSH
65550: CALL_OW 1
65554: ST_TO_ADDR
// tmp := 1 ;
65555: LD_ADDR_VAR 0 3
65559: PUSH
65560: LD_STRING 1
65562: ST_TO_ADDR
// end ; normal := normal & tmp ;
65563: LD_ADDR_VAR 0 5
65567: PUSH
65568: LD_VAR 0 5
65572: PUSH
65573: LD_VAR 0 3
65577: STR
65578: ST_TO_ADDR
// end ;
65579: GO 65479
65581: POP
65582: POP
// for i = 1 to hardcoreCounter do
65583: LD_ADDR_VAR 0 8
65587: PUSH
65588: DOUBLE
65589: LD_INT 1
65591: DEC
65592: ST_TO_ADDR
65593: LD_EXP 46
65597: PUSH
65598: FOR_TO
65599: IFFALSE 65704
// begin tmp := 0 ;
65601: LD_ADDR_VAR 0 3
65605: PUSH
65606: LD_STRING 0
65608: ST_TO_ADDR
// if result [ 2 ] then
65609: LD_VAR 0 2
65613: PUSH
65614: LD_INT 2
65616: ARRAY
65617: IFFALSE 65686
// if result [ 2 ] [ 1 ] = 100 + i then
65619: LD_VAR 0 2
65623: PUSH
65624: LD_INT 2
65626: ARRAY
65627: PUSH
65628: LD_INT 1
65630: ARRAY
65631: PUSH
65632: LD_INT 100
65634: PUSH
65635: LD_VAR 0 8
65639: PLUS
65640: EQUAL
65641: IFFALSE 65686
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
65643: LD_ADDR_VAR 0 2
65647: PUSH
65648: LD_VAR 0 2
65652: PPUSH
65653: LD_INT 2
65655: PPUSH
65656: LD_VAR 0 2
65660: PUSH
65661: LD_INT 2
65663: ARRAY
65664: PPUSH
65665: LD_INT 1
65667: PPUSH
65668: CALL_OW 3
65672: PPUSH
65673: CALL_OW 1
65677: ST_TO_ADDR
// tmp := 1 ;
65678: LD_ADDR_VAR 0 3
65682: PUSH
65683: LD_STRING 1
65685: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
65686: LD_ADDR_VAR 0 6
65690: PUSH
65691: LD_VAR 0 6
65695: PUSH
65696: LD_VAR 0 3
65700: STR
65701: ST_TO_ADDR
// end ;
65702: GO 65598
65704: POP
65705: POP
// if isGameLoad then
65706: LD_VAR 0 1
65710: IFFALSE 66185
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
65712: LD_ADDR_VAR 0 4
65716: PUSH
65717: LD_EXP 49
65721: PUSH
65722: LD_EXP 48
65726: PUSH
65727: LD_EXP 50
65731: PUSH
65732: LD_EXP 47
65736: PUSH
65737: LD_EXP 51
65741: PUSH
65742: LD_EXP 52
65746: PUSH
65747: LD_EXP 53
65751: PUSH
65752: LD_EXP 54
65756: PUSH
65757: LD_EXP 55
65761: PUSH
65762: LD_EXP 56
65766: PUSH
65767: LD_EXP 57
65771: PUSH
65772: LD_EXP 58
65776: PUSH
65777: LD_EXP 59
65781: PUSH
65782: LD_EXP 60
65786: PUSH
65787: LD_EXP 68
65791: PUSH
65792: LD_EXP 69
65796: PUSH
65797: LD_EXP 70
65801: PUSH
65802: LD_EXP 71
65806: PUSH
65807: LD_EXP 73
65811: PUSH
65812: LD_EXP 74
65816: PUSH
65817: LD_EXP 75
65821: PUSH
65822: LD_EXP 78
65826: PUSH
65827: LD_EXP 80
65831: PUSH
65832: LD_EXP 81
65836: PUSH
65837: LD_EXP 82
65841: PUSH
65842: LD_EXP 84
65846: PUSH
65847: LD_EXP 85
65851: PUSH
65852: LD_EXP 88
65856: PUSH
65857: LD_EXP 89
65861: PUSH
65862: LD_EXP 90
65866: PUSH
65867: LD_EXP 91
65871: PUSH
65872: LD_EXP 92
65876: PUSH
65877: LD_EXP 93
65881: PUSH
65882: LD_EXP 94
65886: PUSH
65887: LD_EXP 95
65891: PUSH
65892: LD_EXP 96
65896: PUSH
65897: LD_EXP 61
65901: PUSH
65902: LD_EXP 62
65906: PUSH
65907: LD_EXP 65
65911: PUSH
65912: LD_EXP 66
65916: PUSH
65917: LD_EXP 67
65921: PUSH
65922: LD_EXP 63
65926: PUSH
65927: LD_EXP 64
65931: PUSH
65932: LD_EXP 72
65936: PUSH
65937: LD_EXP 76
65941: PUSH
65942: LD_EXP 77
65946: PUSH
65947: LD_EXP 79
65951: PUSH
65952: LD_EXP 83
65956: PUSH
65957: LD_EXP 86
65961: PUSH
65962: LD_EXP 87
65966: PUSH
65967: LD_EXP 97
65971: PUSH
65972: LD_EXP 98
65976: PUSH
65977: LD_EXP 99
65981: PUSH
65982: LD_EXP 100
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: ST_TO_ADDR
// tmp :=  ;
66043: LD_ADDR_VAR 0 3
66047: PUSH
66048: LD_STRING 
66050: ST_TO_ADDR
// for i = 1 to normalCounter do
66051: LD_ADDR_VAR 0 8
66055: PUSH
66056: DOUBLE
66057: LD_INT 1
66059: DEC
66060: ST_TO_ADDR
66061: LD_EXP 45
66065: PUSH
66066: FOR_TO
66067: IFFALSE 66103
// begin if flags [ i ] then
66069: LD_VAR 0 4
66073: PUSH
66074: LD_VAR 0 8
66078: ARRAY
66079: IFFALSE 66101
// tmp := tmp & i & ; ;
66081: LD_ADDR_VAR 0 3
66085: PUSH
66086: LD_VAR 0 3
66090: PUSH
66091: LD_VAR 0 8
66095: STR
66096: PUSH
66097: LD_STRING ;
66099: STR
66100: ST_TO_ADDR
// end ;
66101: GO 66066
66103: POP
66104: POP
// for i = 1 to hardcoreCounter do
66105: LD_ADDR_VAR 0 8
66109: PUSH
66110: DOUBLE
66111: LD_INT 1
66113: DEC
66114: ST_TO_ADDR
66115: LD_EXP 46
66119: PUSH
66120: FOR_TO
66121: IFFALSE 66167
// begin if flags [ normalCounter + i ] then
66123: LD_VAR 0 4
66127: PUSH
66128: LD_EXP 45
66132: PUSH
66133: LD_VAR 0 8
66137: PLUS
66138: ARRAY
66139: IFFALSE 66165
// tmp := tmp & ( 100 + i ) & ; ;
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: LD_VAR 0 3
66150: PUSH
66151: LD_INT 100
66153: PUSH
66154: LD_VAR 0 8
66158: PLUS
66159: STR
66160: PUSH
66161: LD_STRING ;
66163: STR
66164: ST_TO_ADDR
// end ;
66165: GO 66120
66167: POP
66168: POP
// if tmp then
66169: LD_VAR 0 3
66173: IFFALSE 66185
// active := tmp ;
66175: LD_ADDR_VAR 0 7
66179: PUSH
66180: LD_VAR 0 3
66184: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66185: LD_STRING getStreamItemsFromMission("
66187: PUSH
66188: LD_VAR 0 5
66192: STR
66193: PUSH
66194: LD_STRING ","
66196: STR
66197: PUSH
66198: LD_VAR 0 6
66202: STR
66203: PUSH
66204: LD_STRING ","
66206: STR
66207: PUSH
66208: LD_VAR 0 7
66212: STR
66213: PUSH
66214: LD_STRING ")
66216: STR
66217: PPUSH
66218: CALL_OW 559
// end else
66222: GO 66231
// ToLua ( getStreamItemsFromMission("","","") ) ;
66224: LD_STRING getStreamItemsFromMission("","","")
66226: PPUSH
66227: CALL_OW 559
// end ;
66231: LD_VAR 0 2
66235: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66236: LD_EXP 44
66240: PUSH
66241: LD_EXP 49
66245: AND
66246: IFFALSE 66370
66248: GO 66250
66250: DISABLE
66251: LD_INT 0
66253: PPUSH
66254: PPUSH
// begin enable ;
66255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66256: LD_ADDR_VAR 0 2
66260: PUSH
66261: LD_INT 22
66263: PUSH
66264: LD_OWVAR 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: LD_INT 34
66278: PUSH
66279: LD_INT 7
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 34
66288: PUSH
66289: LD_INT 45
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 34
66298: PUSH
66299: LD_INT 28
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 34
66308: PUSH
66309: LD_INT 47
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PPUSH
66327: CALL_OW 69
66331: ST_TO_ADDR
// if not tmp then
66332: LD_VAR 0 2
66336: NOT
66337: IFFALSE 66341
// exit ;
66339: GO 66370
// for i in tmp do
66341: LD_ADDR_VAR 0 1
66345: PUSH
66346: LD_VAR 0 2
66350: PUSH
66351: FOR_IN
66352: IFFALSE 66368
// begin SetLives ( i , 0 ) ;
66354: LD_VAR 0 1
66358: PPUSH
66359: LD_INT 0
66361: PPUSH
66362: CALL_OW 234
// end ;
66366: GO 66351
66368: POP
66369: POP
// end ;
66370: PPOPN 2
66372: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66373: LD_EXP 44
66377: PUSH
66378: LD_EXP 50
66382: AND
66383: IFFALSE 66467
66385: GO 66387
66387: DISABLE
66388: LD_INT 0
66390: PPUSH
66391: PPUSH
// begin enable ;
66392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66393: LD_ADDR_VAR 0 2
66397: PUSH
66398: LD_INT 22
66400: PUSH
66401: LD_OWVAR 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 32
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PPUSH
66424: CALL_OW 69
66428: ST_TO_ADDR
// if not tmp then
66429: LD_VAR 0 2
66433: NOT
66434: IFFALSE 66438
// exit ;
66436: GO 66467
// for i in tmp do
66438: LD_ADDR_VAR 0 1
66442: PUSH
66443: LD_VAR 0 2
66447: PUSH
66448: FOR_IN
66449: IFFALSE 66465
// begin SetLives ( i , 0 ) ;
66451: LD_VAR 0 1
66455: PPUSH
66456: LD_INT 0
66458: PPUSH
66459: CALL_OW 234
// end ;
66463: GO 66448
66465: POP
66466: POP
// end ;
66467: PPOPN 2
66469: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66470: LD_EXP 44
66474: PUSH
66475: LD_EXP 47
66479: AND
66480: IFFALSE 66573
66482: GO 66484
66484: DISABLE
66485: LD_INT 0
66487: PPUSH
// begin enable ;
66488: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66489: LD_ADDR_VAR 0 1
66493: PUSH
66494: LD_INT 22
66496: PUSH
66497: LD_OWVAR 2
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: LD_INT 25
66511: PUSH
66512: LD_INT 5
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 25
66521: PUSH
66522: LD_INT 9
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 25
66531: PUSH
66532: LD_INT 8
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PPUSH
66549: CALL_OW 69
66553: PUSH
66554: FOR_IN
66555: IFFALSE 66571
// begin SetClass ( i , 1 ) ;
66557: LD_VAR 0 1
66561: PPUSH
66562: LD_INT 1
66564: PPUSH
66565: CALL_OW 336
// end ;
66569: GO 66554
66571: POP
66572: POP
// end ;
66573: PPOPN 1
66575: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66576: LD_EXP 44
66580: PUSH
66581: LD_EXP 48
66585: AND
66586: PUSH
66587: LD_OWVAR 65
66591: PUSH
66592: LD_INT 7
66594: LESS
66595: AND
66596: IFFALSE 66610
66598: GO 66600
66600: DISABLE
// begin enable ;
66601: ENABLE
// game_speed := 7 ;
66602: LD_ADDR_OWVAR 65
66606: PUSH
66607: LD_INT 7
66609: ST_TO_ADDR
// end ;
66610: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66611: LD_EXP 44
66615: PUSH
66616: LD_EXP 51
66620: AND
66621: IFFALSE 66823
66623: GO 66625
66625: DISABLE
66626: LD_INT 0
66628: PPUSH
66629: PPUSH
66630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66631: LD_ADDR_VAR 0 3
66635: PUSH
66636: LD_INT 81
66638: PUSH
66639: LD_OWVAR 2
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 21
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PPUSH
66662: CALL_OW 69
66666: ST_TO_ADDR
// if not tmp then
66667: LD_VAR 0 3
66671: NOT
66672: IFFALSE 66676
// exit ;
66674: GO 66823
// if tmp > 5 then
66676: LD_VAR 0 3
66680: PUSH
66681: LD_INT 5
66683: GREATER
66684: IFFALSE 66696
// k := 5 else
66686: LD_ADDR_VAR 0 2
66690: PUSH
66691: LD_INT 5
66693: ST_TO_ADDR
66694: GO 66706
// k := tmp ;
66696: LD_ADDR_VAR 0 2
66700: PUSH
66701: LD_VAR 0 3
66705: ST_TO_ADDR
// for i := 1 to k do
66706: LD_ADDR_VAR 0 1
66710: PUSH
66711: DOUBLE
66712: LD_INT 1
66714: DEC
66715: ST_TO_ADDR
66716: LD_VAR 0 2
66720: PUSH
66721: FOR_TO
66722: IFFALSE 66821
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66724: LD_VAR 0 3
66728: PUSH
66729: LD_VAR 0 1
66733: ARRAY
66734: PPUSH
66735: LD_VAR 0 1
66739: PUSH
66740: LD_INT 4
66742: MOD
66743: PUSH
66744: LD_INT 1
66746: PLUS
66747: PPUSH
66748: CALL_OW 259
66752: PUSH
66753: LD_INT 10
66755: LESS
66756: IFFALSE 66819
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66758: LD_VAR 0 3
66762: PUSH
66763: LD_VAR 0 1
66767: ARRAY
66768: PPUSH
66769: LD_VAR 0 1
66773: PUSH
66774: LD_INT 4
66776: MOD
66777: PUSH
66778: LD_INT 1
66780: PLUS
66781: PPUSH
66782: LD_VAR 0 3
66786: PUSH
66787: LD_VAR 0 1
66791: ARRAY
66792: PPUSH
66793: LD_VAR 0 1
66797: PUSH
66798: LD_INT 4
66800: MOD
66801: PUSH
66802: LD_INT 1
66804: PLUS
66805: PPUSH
66806: CALL_OW 259
66810: PUSH
66811: LD_INT 1
66813: PLUS
66814: PPUSH
66815: CALL_OW 237
66819: GO 66721
66821: POP
66822: POP
// end ;
66823: PPOPN 3
66825: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66826: LD_EXP 44
66830: PUSH
66831: LD_EXP 52
66835: AND
66836: IFFALSE 66856
66838: GO 66840
66840: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66841: LD_INT 4
66843: PPUSH
66844: LD_OWVAR 2
66848: PPUSH
66849: LD_INT 0
66851: PPUSH
66852: CALL_OW 324
66856: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66857: LD_EXP 44
66861: PUSH
66862: LD_EXP 81
66866: AND
66867: IFFALSE 66887
66869: GO 66871
66871: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66872: LD_INT 19
66874: PPUSH
66875: LD_OWVAR 2
66879: PPUSH
66880: LD_INT 0
66882: PPUSH
66883: CALL_OW 324
66887: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66888: LD_EXP 44
66892: PUSH
66893: LD_EXP 53
66897: AND
66898: IFFALSE 67000
66900: GO 66902
66902: DISABLE
66903: LD_INT 0
66905: PPUSH
66906: PPUSH
// begin enable ;
66907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66908: LD_ADDR_VAR 0 2
66912: PUSH
66913: LD_INT 22
66915: PUSH
66916: LD_OWVAR 2
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: LD_INT 34
66930: PUSH
66931: LD_INT 11
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 34
66940: PUSH
66941: LD_INT 30
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PPUSH
66957: CALL_OW 69
66961: ST_TO_ADDR
// if not tmp then
66962: LD_VAR 0 2
66966: NOT
66967: IFFALSE 66971
// exit ;
66969: GO 67000
// for i in tmp do
66971: LD_ADDR_VAR 0 1
66975: PUSH
66976: LD_VAR 0 2
66980: PUSH
66981: FOR_IN
66982: IFFALSE 66998
// begin SetLives ( i , 0 ) ;
66984: LD_VAR 0 1
66988: PPUSH
66989: LD_INT 0
66991: PPUSH
66992: CALL_OW 234
// end ;
66996: GO 66981
66998: POP
66999: POP
// end ;
67000: PPOPN 2
67002: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67003: LD_EXP 44
67007: PUSH
67008: LD_EXP 54
67012: AND
67013: IFFALSE 67033
67015: GO 67017
67017: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67018: LD_INT 32
67020: PPUSH
67021: LD_OWVAR 2
67025: PPUSH
67026: LD_INT 0
67028: PPUSH
67029: CALL_OW 324
67033: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67034: LD_EXP 44
67038: PUSH
67039: LD_EXP 55
67043: AND
67044: IFFALSE 67225
67046: GO 67048
67048: DISABLE
67049: LD_INT 0
67051: PPUSH
67052: PPUSH
67053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67054: LD_ADDR_VAR 0 2
67058: PUSH
67059: LD_INT 22
67061: PUSH
67062: LD_OWVAR 2
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 33
67073: PUSH
67074: LD_INT 3
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PPUSH
67085: CALL_OW 69
67089: ST_TO_ADDR
// if not tmp then
67090: LD_VAR 0 2
67094: NOT
67095: IFFALSE 67099
// exit ;
67097: GO 67225
// side := 0 ;
67099: LD_ADDR_VAR 0 3
67103: PUSH
67104: LD_INT 0
67106: ST_TO_ADDR
// for i := 1 to 8 do
67107: LD_ADDR_VAR 0 1
67111: PUSH
67112: DOUBLE
67113: LD_INT 1
67115: DEC
67116: ST_TO_ADDR
67117: LD_INT 8
67119: PUSH
67120: FOR_TO
67121: IFFALSE 67169
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67123: LD_OWVAR 2
67127: PUSH
67128: LD_VAR 0 1
67132: NONEQUAL
67133: PUSH
67134: LD_OWVAR 2
67138: PPUSH
67139: LD_VAR 0 1
67143: PPUSH
67144: CALL_OW 81
67148: PUSH
67149: LD_INT 2
67151: EQUAL
67152: AND
67153: IFFALSE 67167
// begin side := i ;
67155: LD_ADDR_VAR 0 3
67159: PUSH
67160: LD_VAR 0 1
67164: ST_TO_ADDR
// break ;
67165: GO 67169
// end ;
67167: GO 67120
67169: POP
67170: POP
// if not side then
67171: LD_VAR 0 3
67175: NOT
67176: IFFALSE 67180
// exit ;
67178: GO 67225
// for i := 1 to tmp do
67180: LD_ADDR_VAR 0 1
67184: PUSH
67185: DOUBLE
67186: LD_INT 1
67188: DEC
67189: ST_TO_ADDR
67190: LD_VAR 0 2
67194: PUSH
67195: FOR_TO
67196: IFFALSE 67223
// if Prob ( 60 ) then
67198: LD_INT 60
67200: PPUSH
67201: CALL_OW 13
67205: IFFALSE 67221
// SetSide ( i , side ) ;
67207: LD_VAR 0 1
67211: PPUSH
67212: LD_VAR 0 3
67216: PPUSH
67217: CALL_OW 235
67221: GO 67195
67223: POP
67224: POP
// end ;
67225: PPOPN 3
67227: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67228: LD_EXP 44
67232: PUSH
67233: LD_EXP 57
67237: AND
67238: IFFALSE 67357
67240: GO 67242
67242: DISABLE
67243: LD_INT 0
67245: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67246: LD_ADDR_VAR 0 1
67250: PUSH
67251: LD_INT 22
67253: PUSH
67254: LD_OWVAR 2
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 21
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 23
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: PPUSH
67295: CALL_OW 69
67299: PUSH
67300: FOR_IN
67301: IFFALSE 67355
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
67303: LD_VAR 0 1
67307: PPUSH
67308: CALL_OW 257
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 2
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: LD_INT 4
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: IN
67331: IFFALSE 67353
// SetClass ( un , rand ( 1 , 4 ) ) ;
67333: LD_VAR 0 1
67337: PPUSH
67338: LD_INT 1
67340: PPUSH
67341: LD_INT 4
67343: PPUSH
67344: CALL_OW 12
67348: PPUSH
67349: CALL_OW 336
67353: GO 67300
67355: POP
67356: POP
// end ;
67357: PPOPN 1
67359: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67360: LD_EXP 44
67364: PUSH
67365: LD_EXP 56
67369: AND
67370: IFFALSE 67449
67372: GO 67374
67374: DISABLE
67375: LD_INT 0
67377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67378: LD_ADDR_VAR 0 1
67382: PUSH
67383: LD_INT 22
67385: PUSH
67386: LD_OWVAR 2
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 21
67397: PUSH
67398: LD_INT 3
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PPUSH
67409: CALL_OW 69
67413: ST_TO_ADDR
// if not tmp then
67414: LD_VAR 0 1
67418: NOT
67419: IFFALSE 67423
// exit ;
67421: GO 67449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67423: LD_VAR 0 1
67427: PUSH
67428: LD_INT 1
67430: PPUSH
67431: LD_VAR 0 1
67435: PPUSH
67436: CALL_OW 12
67440: ARRAY
67441: PPUSH
67442: LD_INT 100
67444: PPUSH
67445: CALL_OW 234
// end ;
67449: PPOPN 1
67451: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67452: LD_EXP 44
67456: PUSH
67457: LD_EXP 58
67461: AND
67462: IFFALSE 67560
67464: GO 67466
67466: DISABLE
67467: LD_INT 0
67469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67470: LD_ADDR_VAR 0 1
67474: PUSH
67475: LD_INT 22
67477: PUSH
67478: LD_OWVAR 2
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 21
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PPUSH
67501: CALL_OW 69
67505: ST_TO_ADDR
// if not tmp then
67506: LD_VAR 0 1
67510: NOT
67511: IFFALSE 67515
// exit ;
67513: GO 67560
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67515: LD_VAR 0 1
67519: PUSH
67520: LD_INT 1
67522: PPUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: CALL_OW 12
67532: ARRAY
67533: PPUSH
67534: LD_INT 1
67536: PPUSH
67537: LD_INT 4
67539: PPUSH
67540: CALL_OW 12
67544: PPUSH
67545: LD_INT 3000
67547: PPUSH
67548: LD_INT 9000
67550: PPUSH
67551: CALL_OW 12
67555: PPUSH
67556: CALL_OW 492
// end ;
67560: PPOPN 1
67562: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67563: LD_EXP 44
67567: PUSH
67568: LD_EXP 59
67572: AND
67573: IFFALSE 67593
67575: GO 67577
67577: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67578: LD_INT 1
67580: PPUSH
67581: LD_OWVAR 2
67585: PPUSH
67586: LD_INT 0
67588: PPUSH
67589: CALL_OW 324
67593: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67594: LD_EXP 44
67598: PUSH
67599: LD_EXP 60
67603: AND
67604: IFFALSE 67687
67606: GO 67608
67608: DISABLE
67609: LD_INT 0
67611: PPUSH
67612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67613: LD_ADDR_VAR 0 2
67617: PUSH
67618: LD_INT 22
67620: PUSH
67621: LD_OWVAR 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 21
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PPUSH
67644: CALL_OW 69
67648: ST_TO_ADDR
// if not tmp then
67649: LD_VAR 0 2
67653: NOT
67654: IFFALSE 67658
// exit ;
67656: GO 67687
// for i in tmp do
67658: LD_ADDR_VAR 0 1
67662: PUSH
67663: LD_VAR 0 2
67667: PUSH
67668: FOR_IN
67669: IFFALSE 67685
// SetBLevel ( i , 10 ) ;
67671: LD_VAR 0 1
67675: PPUSH
67676: LD_INT 10
67678: PPUSH
67679: CALL_OW 241
67683: GO 67668
67685: POP
67686: POP
// end ;
67687: PPOPN 2
67689: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67690: LD_EXP 44
67694: PUSH
67695: LD_EXP 61
67699: AND
67700: IFFALSE 67811
67702: GO 67704
67704: DISABLE
67705: LD_INT 0
67707: PPUSH
67708: PPUSH
67709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67710: LD_ADDR_VAR 0 3
67714: PUSH
67715: LD_INT 22
67717: PUSH
67718: LD_OWVAR 2
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 25
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PPUSH
67741: CALL_OW 69
67745: ST_TO_ADDR
// if not tmp then
67746: LD_VAR 0 3
67750: NOT
67751: IFFALSE 67755
// exit ;
67753: GO 67811
// un := tmp [ rand ( 1 , tmp ) ] ;
67755: LD_ADDR_VAR 0 2
67759: PUSH
67760: LD_VAR 0 3
67764: PUSH
67765: LD_INT 1
67767: PPUSH
67768: LD_VAR 0 3
67772: PPUSH
67773: CALL_OW 12
67777: ARRAY
67778: ST_TO_ADDR
// if Crawls ( un ) then
67779: LD_VAR 0 2
67783: PPUSH
67784: CALL_OW 318
67788: IFFALSE 67799
// ComWalk ( un ) ;
67790: LD_VAR 0 2
67794: PPUSH
67795: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67799: LD_VAR 0 2
67803: PPUSH
67804: LD_INT 5
67806: PPUSH
67807: CALL_OW 336
// end ;
67811: PPOPN 3
67813: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
67814: LD_EXP 44
67818: PUSH
67819: LD_EXP 62
67823: AND
67824: PUSH
67825: LD_OWVAR 67
67829: PUSH
67830: LD_INT 4
67832: LESS
67833: AND
67834: IFFALSE 67853
67836: GO 67838
67838: DISABLE
// begin Difficulty := Difficulty + 1 ;
67839: LD_ADDR_OWVAR 67
67843: PUSH
67844: LD_OWVAR 67
67848: PUSH
67849: LD_INT 1
67851: PLUS
67852: ST_TO_ADDR
// end ;
67853: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67854: LD_EXP 44
67858: PUSH
67859: LD_EXP 63
67863: AND
67864: IFFALSE 67967
67866: GO 67868
67868: DISABLE
67869: LD_INT 0
67871: PPUSH
// begin for i := 1 to 5 do
67872: LD_ADDR_VAR 0 1
67876: PUSH
67877: DOUBLE
67878: LD_INT 1
67880: DEC
67881: ST_TO_ADDR
67882: LD_INT 5
67884: PUSH
67885: FOR_TO
67886: IFFALSE 67965
// begin uc_nation := nation_nature ;
67888: LD_ADDR_OWVAR 21
67892: PUSH
67893: LD_INT 0
67895: ST_TO_ADDR
// uc_side := 0 ;
67896: LD_ADDR_OWVAR 20
67900: PUSH
67901: LD_INT 0
67903: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67904: LD_ADDR_OWVAR 29
67908: PUSH
67909: LD_INT 12
67911: PUSH
67912: LD_INT 12
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: ST_TO_ADDR
// hc_agressivity := 20 ;
67919: LD_ADDR_OWVAR 35
67923: PUSH
67924: LD_INT 20
67926: ST_TO_ADDR
// hc_class := class_tiger ;
67927: LD_ADDR_OWVAR 28
67931: PUSH
67932: LD_INT 14
67934: ST_TO_ADDR
// hc_gallery :=  ;
67935: LD_ADDR_OWVAR 33
67939: PUSH
67940: LD_STRING 
67942: ST_TO_ADDR
// hc_name :=  ;
67943: LD_ADDR_OWVAR 26
67947: PUSH
67948: LD_STRING 
67950: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67951: CALL_OW 44
67955: PPUSH
67956: LD_INT 0
67958: PPUSH
67959: CALL_OW 51
// end ;
67963: GO 67885
67965: POP
67966: POP
// end ;
67967: PPOPN 1
67969: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67970: LD_EXP 44
67974: PUSH
67975: LD_EXP 64
67979: AND
67980: IFFALSE 67989
67982: GO 67984
67984: DISABLE
// StreamSibBomb ;
67985: CALL 67990 0 0
67989: END
// export function StreamSibBomb ; var i , x , y ; begin
67990: LD_INT 0
67992: PPUSH
67993: PPUSH
67994: PPUSH
67995: PPUSH
// result := false ;
67996: LD_ADDR_VAR 0 1
68000: PUSH
68001: LD_INT 0
68003: ST_TO_ADDR
// for i := 1 to 16 do
68004: LD_ADDR_VAR 0 2
68008: PUSH
68009: DOUBLE
68010: LD_INT 1
68012: DEC
68013: ST_TO_ADDR
68014: LD_INT 16
68016: PUSH
68017: FOR_TO
68018: IFFALSE 68217
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68020: LD_ADDR_VAR 0 3
68024: PUSH
68025: LD_INT 10
68027: PUSH
68028: LD_INT 20
68030: PUSH
68031: LD_INT 30
68033: PUSH
68034: LD_INT 40
68036: PUSH
68037: LD_INT 50
68039: PUSH
68040: LD_INT 60
68042: PUSH
68043: LD_INT 70
68045: PUSH
68046: LD_INT 80
68048: PUSH
68049: LD_INT 90
68051: PUSH
68052: LD_INT 100
68054: PUSH
68055: LD_INT 110
68057: PUSH
68058: LD_INT 120
68060: PUSH
68061: LD_INT 130
68063: PUSH
68064: LD_INT 140
68066: PUSH
68067: LD_INT 150
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: PPUSH
68090: LD_INT 15
68092: PPUSH
68093: CALL_OW 12
68097: ARRAY
68098: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68099: LD_ADDR_VAR 0 4
68103: PUSH
68104: LD_INT 10
68106: PUSH
68107: LD_INT 20
68109: PUSH
68110: LD_INT 30
68112: PUSH
68113: LD_INT 40
68115: PUSH
68116: LD_INT 50
68118: PUSH
68119: LD_INT 60
68121: PUSH
68122: LD_INT 70
68124: PUSH
68125: LD_INT 80
68127: PUSH
68128: LD_INT 90
68130: PUSH
68131: LD_INT 100
68133: PUSH
68134: LD_INT 110
68136: PUSH
68137: LD_INT 120
68139: PUSH
68140: LD_INT 130
68142: PUSH
68143: LD_INT 140
68145: PUSH
68146: LD_INT 150
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: PPUSH
68169: LD_INT 15
68171: PPUSH
68172: CALL_OW 12
68176: ARRAY
68177: ST_TO_ADDR
// if ValidHex ( x , y ) then
68178: LD_VAR 0 3
68182: PPUSH
68183: LD_VAR 0 4
68187: PPUSH
68188: CALL_OW 488
68192: IFFALSE 68215
// begin result := [ x , y ] ;
68194: LD_ADDR_VAR 0 1
68198: PUSH
68199: LD_VAR 0 3
68203: PUSH
68204: LD_VAR 0 4
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: ST_TO_ADDR
// break ;
68213: GO 68217
// end ; end ;
68215: GO 68017
68217: POP
68218: POP
// if result then
68219: LD_VAR 0 1
68223: IFFALSE 68283
// begin ToLua ( playSibBomb() ) ;
68225: LD_STRING playSibBomb()
68227: PPUSH
68228: CALL_OW 559
// wait ( 0 0$14 ) ;
68232: LD_INT 490
68234: PPUSH
68235: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68239: LD_VAR 0 1
68243: PUSH
68244: LD_INT 1
68246: ARRAY
68247: PPUSH
68248: LD_VAR 0 1
68252: PUSH
68253: LD_INT 2
68255: ARRAY
68256: PPUSH
68257: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68261: LD_VAR 0 1
68265: PUSH
68266: LD_INT 1
68268: ARRAY
68269: PPUSH
68270: LD_VAR 0 1
68274: PUSH
68275: LD_INT 2
68277: ARRAY
68278: PPUSH
68279: CALL_OW 429
// end ; end ;
68283: LD_VAR 0 1
68287: RET
// every 0 0$1 trigger StreamModeActive and sReset do
68288: LD_EXP 44
68292: PUSH
68293: LD_EXP 66
68297: AND
68298: IFFALSE 68310
68300: GO 68302
68302: DISABLE
// YouLost (  ) ;
68303: LD_STRING 
68305: PPUSH
68306: CALL_OW 104
68310: END
// every 0 0$1 trigger StreamModeActive and sFog do
68311: LD_EXP 44
68315: PUSH
68316: LD_EXP 65
68320: AND
68321: IFFALSE 68335
68323: GO 68325
68325: DISABLE
// FogOff ( your_side ) ;
68326: LD_OWVAR 2
68330: PPUSH
68331: CALL_OW 344
68335: END
// every 0 0$1 trigger StreamModeActive and sSun do
68336: LD_EXP 44
68340: PUSH
68341: LD_EXP 67
68345: AND
68346: IFFALSE 68374
68348: GO 68350
68350: DISABLE
// begin solar_recharge_percent := 0 ;
68351: LD_ADDR_OWVAR 79
68355: PUSH
68356: LD_INT 0
68358: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68359: LD_INT 10500
68361: PPUSH
68362: CALL_OW 67
// solar_recharge_percent := 100 ;
68366: LD_ADDR_OWVAR 79
68370: PUSH
68371: LD_INT 100
68373: ST_TO_ADDR
// end ;
68374: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68375: LD_EXP 44
68379: PUSH
68380: LD_EXP 68
68384: AND
68385: IFFALSE 68624
68387: GO 68389
68389: DISABLE
68390: LD_INT 0
68392: PPUSH
68393: PPUSH
68394: PPUSH
// begin tmp := [ ] ;
68395: LD_ADDR_VAR 0 3
68399: PUSH
68400: EMPTY
68401: ST_TO_ADDR
// for i := 1 to 6 do
68402: LD_ADDR_VAR 0 1
68406: PUSH
68407: DOUBLE
68408: LD_INT 1
68410: DEC
68411: ST_TO_ADDR
68412: LD_INT 6
68414: PUSH
68415: FOR_TO
68416: IFFALSE 68521
// begin uc_nation := nation_nature ;
68418: LD_ADDR_OWVAR 21
68422: PUSH
68423: LD_INT 0
68425: ST_TO_ADDR
// uc_side := 0 ;
68426: LD_ADDR_OWVAR 20
68430: PUSH
68431: LD_INT 0
68433: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68434: LD_ADDR_OWVAR 29
68438: PUSH
68439: LD_INT 12
68441: PUSH
68442: LD_INT 12
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// hc_agressivity := 20 ;
68449: LD_ADDR_OWVAR 35
68453: PUSH
68454: LD_INT 20
68456: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68457: LD_ADDR_OWVAR 28
68461: PUSH
68462: LD_INT 17
68464: ST_TO_ADDR
// hc_gallery :=  ;
68465: LD_ADDR_OWVAR 33
68469: PUSH
68470: LD_STRING 
68472: ST_TO_ADDR
// hc_name :=  ;
68473: LD_ADDR_OWVAR 26
68477: PUSH
68478: LD_STRING 
68480: ST_TO_ADDR
// un := CreateHuman ;
68481: LD_ADDR_VAR 0 2
68485: PUSH
68486: CALL_OW 44
68490: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68491: LD_VAR 0 2
68495: PPUSH
68496: LD_INT 1
68498: PPUSH
68499: CALL_OW 51
// tmp := tmp ^ un ;
68503: LD_ADDR_VAR 0 3
68507: PUSH
68508: LD_VAR 0 3
68512: PUSH
68513: LD_VAR 0 2
68517: ADD
68518: ST_TO_ADDR
// end ;
68519: GO 68415
68521: POP
68522: POP
// repeat wait ( 0 0$1 ) ;
68523: LD_INT 35
68525: PPUSH
68526: CALL_OW 67
// for un in tmp do
68530: LD_ADDR_VAR 0 2
68534: PUSH
68535: LD_VAR 0 3
68539: PUSH
68540: FOR_IN
68541: IFFALSE 68615
// begin if IsDead ( un ) then
68543: LD_VAR 0 2
68547: PPUSH
68548: CALL_OW 301
68552: IFFALSE 68572
// begin tmp := tmp diff un ;
68554: LD_ADDR_VAR 0 3
68558: PUSH
68559: LD_VAR 0 3
68563: PUSH
68564: LD_VAR 0 2
68568: DIFF
68569: ST_TO_ADDR
// continue ;
68570: GO 68540
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68572: LD_VAR 0 2
68576: PPUSH
68577: LD_INT 3
68579: PUSH
68580: LD_INT 22
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PPUSH
68594: CALL_OW 69
68598: PPUSH
68599: LD_VAR 0 2
68603: PPUSH
68604: CALL_OW 74
68608: PPUSH
68609: CALL_OW 115
// end ;
68613: GO 68540
68615: POP
68616: POP
// until not tmp ;
68617: LD_VAR 0 3
68621: NOT
68622: IFFALSE 68523
// end ;
68624: PPOPN 3
68626: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68627: LD_EXP 44
68631: PUSH
68632: LD_EXP 69
68636: AND
68637: IFFALSE 68691
68639: GO 68641
68641: DISABLE
// begin ToLua ( displayTroll(); ) ;
68642: LD_STRING displayTroll();
68644: PPUSH
68645: CALL_OW 559
// wait ( 3 3$00 ) ;
68649: LD_INT 6300
68651: PPUSH
68652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68656: LD_STRING hideTroll();
68658: PPUSH
68659: CALL_OW 559
// wait ( 1 1$00 ) ;
68663: LD_INT 2100
68665: PPUSH
68666: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68670: LD_STRING displayTroll();
68672: PPUSH
68673: CALL_OW 559
// wait ( 1 1$00 ) ;
68677: LD_INT 2100
68679: PPUSH
68680: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68684: LD_STRING hideTroll();
68686: PPUSH
68687: CALL_OW 559
// end ;
68691: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68692: LD_EXP 44
68696: PUSH
68697: LD_EXP 70
68701: AND
68702: IFFALSE 68765
68704: GO 68706
68706: DISABLE
68707: LD_INT 0
68709: PPUSH
// begin p := 0 ;
68710: LD_ADDR_VAR 0 1
68714: PUSH
68715: LD_INT 0
68717: ST_TO_ADDR
// repeat game_speed := 1 ;
68718: LD_ADDR_OWVAR 65
68722: PUSH
68723: LD_INT 1
68725: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68726: LD_INT 35
68728: PPUSH
68729: CALL_OW 67
// p := p + 1 ;
68733: LD_ADDR_VAR 0 1
68737: PUSH
68738: LD_VAR 0 1
68742: PUSH
68743: LD_INT 1
68745: PLUS
68746: ST_TO_ADDR
// until p >= 60 ;
68747: LD_VAR 0 1
68751: PUSH
68752: LD_INT 60
68754: GREATEREQUAL
68755: IFFALSE 68718
// game_speed := 4 ;
68757: LD_ADDR_OWVAR 65
68761: PUSH
68762: LD_INT 4
68764: ST_TO_ADDR
// end ;
68765: PPOPN 1
68767: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68768: LD_EXP 44
68772: PUSH
68773: LD_EXP 71
68777: AND
68778: IFFALSE 68924
68780: GO 68782
68782: DISABLE
68783: LD_INT 0
68785: PPUSH
68786: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68787: LD_ADDR_VAR 0 1
68791: PUSH
68792: LD_INT 22
68794: PUSH
68795: LD_OWVAR 2
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 30
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 30
68819: PUSH
68820: LD_INT 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: LIST
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PPUSH
68836: CALL_OW 69
68840: ST_TO_ADDR
// if not depot then
68841: LD_VAR 0 1
68845: NOT
68846: IFFALSE 68850
// exit ;
68848: GO 68924
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68850: LD_ADDR_VAR 0 2
68854: PUSH
68855: LD_VAR 0 1
68859: PUSH
68860: LD_INT 1
68862: PPUSH
68863: LD_VAR 0 1
68867: PPUSH
68868: CALL_OW 12
68872: ARRAY
68873: PPUSH
68874: CALL_OW 274
68878: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68879: LD_VAR 0 2
68883: PPUSH
68884: LD_INT 1
68886: PPUSH
68887: LD_INT 0
68889: PPUSH
68890: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68894: LD_VAR 0 2
68898: PPUSH
68899: LD_INT 2
68901: PPUSH
68902: LD_INT 0
68904: PPUSH
68905: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68909: LD_VAR 0 2
68913: PPUSH
68914: LD_INT 3
68916: PPUSH
68917: LD_INT 0
68919: PPUSH
68920: CALL_OW 277
// end ;
68924: PPOPN 2
68926: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68927: LD_EXP 44
68931: PUSH
68932: LD_EXP 72
68936: AND
68937: IFFALSE 69034
68939: GO 68941
68941: DISABLE
68942: LD_INT 0
68944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68945: LD_ADDR_VAR 0 1
68949: PUSH
68950: LD_INT 22
68952: PUSH
68953: LD_OWVAR 2
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 21
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: PUSH
68975: LD_INT 23
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: PPUSH
68994: CALL_OW 69
68998: ST_TO_ADDR
// if not tmp then
68999: LD_VAR 0 1
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69008: LD_VAR 0 1
69012: PUSH
69013: LD_INT 1
69015: PPUSH
69016: LD_VAR 0 1
69020: PPUSH
69021: CALL_OW 12
69025: ARRAY
69026: PPUSH
69027: LD_INT 200
69029: PPUSH
69030: CALL_OW 234
// end ;
69034: PPOPN 1
69036: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69037: LD_EXP 44
69041: PUSH
69042: LD_EXP 73
69046: AND
69047: IFFALSE 69126
69049: GO 69051
69051: DISABLE
69052: LD_INT 0
69054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69055: LD_ADDR_VAR 0 1
69059: PUSH
69060: LD_INT 22
69062: PUSH
69063: LD_OWVAR 2
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 21
69074: PUSH
69075: LD_INT 2
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PPUSH
69086: CALL_OW 69
69090: ST_TO_ADDR
// if not tmp then
69091: LD_VAR 0 1
69095: NOT
69096: IFFALSE 69100
// exit ;
69098: GO 69126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69100: LD_VAR 0 1
69104: PUSH
69105: LD_INT 1
69107: PPUSH
69108: LD_VAR 0 1
69112: PPUSH
69113: CALL_OW 12
69117: ARRAY
69118: PPUSH
69119: LD_INT 60
69121: PPUSH
69122: CALL_OW 234
// end ;
69126: PPOPN 1
69128: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69129: LD_EXP 44
69133: PUSH
69134: LD_EXP 74
69138: AND
69139: IFFALSE 69238
69141: GO 69143
69143: DISABLE
69144: LD_INT 0
69146: PPUSH
69147: PPUSH
// begin enable ;
69148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69149: LD_ADDR_VAR 0 1
69153: PUSH
69154: LD_INT 22
69156: PUSH
69157: LD_OWVAR 2
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 61
69168: PUSH
69169: EMPTY
69170: LIST
69171: PUSH
69172: LD_INT 33
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: LIST
69186: PPUSH
69187: CALL_OW 69
69191: ST_TO_ADDR
// if not tmp then
69192: LD_VAR 0 1
69196: NOT
69197: IFFALSE 69201
// exit ;
69199: GO 69238
// for i in tmp do
69201: LD_ADDR_VAR 0 2
69205: PUSH
69206: LD_VAR 0 1
69210: PUSH
69211: FOR_IN
69212: IFFALSE 69236
// if IsControledBy ( i ) then
69214: LD_VAR 0 2
69218: PPUSH
69219: CALL_OW 312
69223: IFFALSE 69234
// ComUnlink ( i ) ;
69225: LD_VAR 0 2
69229: PPUSH
69230: CALL_OW 136
69234: GO 69211
69236: POP
69237: POP
// end ;
69238: PPOPN 2
69240: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69241: LD_EXP 44
69245: PUSH
69246: LD_EXP 75
69250: AND
69251: IFFALSE 69391
69253: GO 69255
69255: DISABLE
69256: LD_INT 0
69258: PPUSH
69259: PPUSH
// begin ToLua ( displayPowell(); ) ;
69260: LD_STRING displayPowell();
69262: PPUSH
69263: CALL_OW 559
// uc_side := 0 ;
69267: LD_ADDR_OWVAR 20
69271: PUSH
69272: LD_INT 0
69274: ST_TO_ADDR
// uc_nation := 2 ;
69275: LD_ADDR_OWVAR 21
69279: PUSH
69280: LD_INT 2
69282: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
69283: LD_ADDR_OWVAR 37
69287: PUSH
69288: LD_INT 14
69290: ST_TO_ADDR
// vc_engine := engine_siberite ;
69291: LD_ADDR_OWVAR 39
69295: PUSH
69296: LD_INT 3
69298: ST_TO_ADDR
// vc_control := control_apeman ;
69299: LD_ADDR_OWVAR 38
69303: PUSH
69304: LD_INT 5
69306: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
69307: LD_ADDR_OWVAR 40
69311: PUSH
69312: LD_INT 29
69314: ST_TO_ADDR
// un := CreateVehicle ;
69315: LD_ADDR_VAR 0 2
69319: PUSH
69320: CALL_OW 45
69324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69325: LD_VAR 0 2
69329: PPUSH
69330: LD_INT 1
69332: PPUSH
69333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69337: LD_INT 35
69339: PPUSH
69340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69344: LD_VAR 0 2
69348: PPUSH
69349: LD_INT 22
69351: PUSH
69352: LD_OWVAR 2
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PPUSH
69361: CALL_OW 69
69365: PPUSH
69366: LD_VAR 0 2
69370: PPUSH
69371: CALL_OW 74
69375: PPUSH
69376: CALL_OW 115
// until IsDead ( un ) ;
69380: LD_VAR 0 2
69384: PPUSH
69385: CALL_OW 301
69389: IFFALSE 69337
// end ;
69391: PPOPN 2
69393: END
// every 0 0$1 trigger StreamModeActive and sStu do
69394: LD_EXP 44
69398: PUSH
69399: LD_EXP 83
69403: AND
69404: IFFALSE 69420
69406: GO 69408
69408: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69409: LD_STRING displayStucuk();
69411: PPUSH
69412: CALL_OW 559
// ResetFog ;
69416: CALL_OW 335
// end ;
69420: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69421: LD_EXP 44
69425: PUSH
69426: LD_EXP 76
69430: AND
69431: IFFALSE 69572
69433: GO 69435
69435: DISABLE
69436: LD_INT 0
69438: PPUSH
69439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69440: LD_ADDR_VAR 0 2
69444: PUSH
69445: LD_INT 22
69447: PUSH
69448: LD_OWVAR 2
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 21
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PPUSH
69471: CALL_OW 69
69475: ST_TO_ADDR
// if not tmp then
69476: LD_VAR 0 2
69480: NOT
69481: IFFALSE 69485
// exit ;
69483: GO 69572
// un := tmp [ rand ( 1 , tmp ) ] ;
69485: LD_ADDR_VAR 0 1
69489: PUSH
69490: LD_VAR 0 2
69494: PUSH
69495: LD_INT 1
69497: PPUSH
69498: LD_VAR 0 2
69502: PPUSH
69503: CALL_OW 12
69507: ARRAY
69508: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69509: LD_VAR 0 1
69513: PPUSH
69514: LD_INT 0
69516: PPUSH
69517: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69521: LD_VAR 0 1
69525: PPUSH
69526: LD_OWVAR 3
69530: PUSH
69531: LD_VAR 0 1
69535: DIFF
69536: PPUSH
69537: LD_VAR 0 1
69541: PPUSH
69542: CALL_OW 74
69546: PPUSH
69547: CALL_OW 115
// wait ( 0 0$20 ) ;
69551: LD_INT 700
69553: PPUSH
69554: CALL_OW 67
// SetSide ( un , your_side ) ;
69558: LD_VAR 0 1
69562: PPUSH
69563: LD_OWVAR 2
69567: PPUSH
69568: CALL_OW 235
// end ;
69572: PPOPN 2
69574: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69575: LD_EXP 44
69579: PUSH
69580: LD_EXP 77
69584: AND
69585: IFFALSE 69691
69587: GO 69589
69589: DISABLE
69590: LD_INT 0
69592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69593: LD_ADDR_VAR 0 1
69597: PUSH
69598: LD_INT 22
69600: PUSH
69601: LD_OWVAR 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: LD_INT 30
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 30
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PPUSH
69642: CALL_OW 69
69646: ST_TO_ADDR
// if not depot then
69647: LD_VAR 0 1
69651: NOT
69652: IFFALSE 69656
// exit ;
69654: GO 69691
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 1
69663: ARRAY
69664: PPUSH
69665: CALL_OW 250
69669: PPUSH
69670: LD_VAR 0 1
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PPUSH
69679: CALL_OW 251
69683: PPUSH
69684: LD_INT 70
69686: PPUSH
69687: CALL_OW 495
// end ;
69691: PPOPN 1
69693: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69694: LD_EXP 44
69698: PUSH
69699: LD_EXP 78
69703: AND
69704: IFFALSE 69915
69706: GO 69708
69708: DISABLE
69709: LD_INT 0
69711: PPUSH
69712: PPUSH
69713: PPUSH
69714: PPUSH
69715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69716: LD_ADDR_VAR 0 5
69720: PUSH
69721: LD_INT 22
69723: PUSH
69724: LD_OWVAR 2
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 21
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PPUSH
69747: CALL_OW 69
69751: ST_TO_ADDR
// if not tmp then
69752: LD_VAR 0 5
69756: NOT
69757: IFFALSE 69761
// exit ;
69759: GO 69915
// for i in tmp do
69761: LD_ADDR_VAR 0 1
69765: PUSH
69766: LD_VAR 0 5
69770: PUSH
69771: FOR_IN
69772: IFFALSE 69913
// begin d := rand ( 0 , 5 ) ;
69774: LD_ADDR_VAR 0 4
69778: PUSH
69779: LD_INT 0
69781: PPUSH
69782: LD_INT 5
69784: PPUSH
69785: CALL_OW 12
69789: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69790: LD_ADDR_VAR 0 2
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: CALL_OW 250
69804: PPUSH
69805: LD_VAR 0 4
69809: PPUSH
69810: LD_INT 3
69812: PPUSH
69813: LD_INT 12
69815: PPUSH
69816: CALL_OW 12
69820: PPUSH
69821: CALL_OW 272
69825: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69826: LD_ADDR_VAR 0 3
69830: PUSH
69831: LD_VAR 0 1
69835: PPUSH
69836: CALL_OW 251
69840: PPUSH
69841: LD_VAR 0 4
69845: PPUSH
69846: LD_INT 3
69848: PPUSH
69849: LD_INT 12
69851: PPUSH
69852: CALL_OW 12
69856: PPUSH
69857: CALL_OW 273
69861: ST_TO_ADDR
// if ValidHex ( x , y ) then
69862: LD_VAR 0 2
69866: PPUSH
69867: LD_VAR 0 3
69871: PPUSH
69872: CALL_OW 488
69876: IFFALSE 69911
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_VAR 0 2
69887: PPUSH
69888: LD_VAR 0 3
69892: PPUSH
69893: LD_INT 3
69895: PPUSH
69896: LD_INT 6
69898: PPUSH
69899: CALL_OW 12
69903: PPUSH
69904: LD_INT 1
69906: PPUSH
69907: CALL_OW 483
// end ;
69911: GO 69771
69913: POP
69914: POP
// end ;
69915: PPOPN 5
69917: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69918: LD_EXP 44
69922: PUSH
69923: LD_EXP 79
69927: AND
69928: IFFALSE 70022
69930: GO 69932
69932: DISABLE
69933: LD_INT 0
69935: PPUSH
69936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69937: LD_ADDR_VAR 0 2
69941: PUSH
69942: LD_INT 22
69944: PUSH
69945: LD_OWVAR 2
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 32
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 21
69966: PUSH
69967: LD_INT 2
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: PPUSH
69979: CALL_OW 69
69983: ST_TO_ADDR
// if not tmp then
69984: LD_VAR 0 2
69988: NOT
69989: IFFALSE 69993
// exit ;
69991: GO 70022
// for i in tmp do
69993: LD_ADDR_VAR 0 1
69997: PUSH
69998: LD_VAR 0 2
70002: PUSH
70003: FOR_IN
70004: IFFALSE 70020
// SetFuel ( i , 0 ) ;
70006: LD_VAR 0 1
70010: PPUSH
70011: LD_INT 0
70013: PPUSH
70014: CALL_OW 240
70018: GO 70003
70020: POP
70021: POP
// end ;
70022: PPOPN 2
70024: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70025: LD_EXP 44
70029: PUSH
70030: LD_EXP 80
70034: AND
70035: IFFALSE 70101
70037: GO 70039
70039: DISABLE
70040: LD_INT 0
70042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70043: LD_ADDR_VAR 0 1
70047: PUSH
70048: LD_INT 22
70050: PUSH
70051: LD_OWVAR 2
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 30
70062: PUSH
70063: LD_INT 29
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PPUSH
70074: CALL_OW 69
70078: ST_TO_ADDR
// if not tmp then
70079: LD_VAR 0 1
70083: NOT
70084: IFFALSE 70088
// exit ;
70086: GO 70101
// DestroyUnit ( tmp [ 1 ] ) ;
70088: LD_VAR 0 1
70092: PUSH
70093: LD_INT 1
70095: ARRAY
70096: PPUSH
70097: CALL_OW 65
// end ;
70101: PPOPN 1
70103: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70104: LD_EXP 44
70108: PUSH
70109: LD_EXP 82
70113: AND
70114: IFFALSE 70243
70116: GO 70118
70118: DISABLE
70119: LD_INT 0
70121: PPUSH
// begin uc_side := 0 ;
70122: LD_ADDR_OWVAR 20
70126: PUSH
70127: LD_INT 0
70129: ST_TO_ADDR
// uc_nation := nation_arabian ;
70130: LD_ADDR_OWVAR 21
70134: PUSH
70135: LD_INT 2
70137: ST_TO_ADDR
// hc_gallery :=  ;
70138: LD_ADDR_OWVAR 33
70142: PUSH
70143: LD_STRING 
70145: ST_TO_ADDR
// hc_name :=  ;
70146: LD_ADDR_OWVAR 26
70150: PUSH
70151: LD_STRING 
70153: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70154: LD_INT 1
70156: PPUSH
70157: LD_INT 11
70159: PPUSH
70160: LD_INT 10
70162: PPUSH
70163: CALL_OW 380
// un := CreateHuman ;
70167: LD_ADDR_VAR 0 1
70171: PUSH
70172: CALL_OW 44
70176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70177: LD_VAR 0 1
70181: PPUSH
70182: LD_INT 1
70184: PPUSH
70185: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70189: LD_INT 35
70191: PPUSH
70192: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70196: LD_VAR 0 1
70200: PPUSH
70201: LD_INT 22
70203: PUSH
70204: LD_OWVAR 2
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PPUSH
70213: CALL_OW 69
70217: PPUSH
70218: LD_VAR 0 1
70222: PPUSH
70223: CALL_OW 74
70227: PPUSH
70228: CALL_OW 115
// until IsDead ( un ) ;
70232: LD_VAR 0 1
70236: PPUSH
70237: CALL_OW 301
70241: IFFALSE 70189
// end ;
70243: PPOPN 1
70245: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70246: LD_EXP 44
70250: PUSH
70251: LD_EXP 84
70255: AND
70256: IFFALSE 70268
70258: GO 70260
70260: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70261: LD_STRING earthquake(getX(game), 0, 32)
70263: PPUSH
70264: CALL_OW 559
70268: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
70269: LD_EXP 44
70273: PUSH
70274: LD_EXP 85
70278: AND
70279: IFFALSE 70370
70281: GO 70283
70283: DISABLE
70284: LD_INT 0
70286: PPUSH
// begin enable ;
70287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
70288: LD_ADDR_VAR 0 1
70292: PUSH
70293: LD_INT 22
70295: PUSH
70296: LD_OWVAR 2
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 21
70307: PUSH
70308: LD_INT 2
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 33
70317: PUSH
70318: LD_INT 3
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: PPUSH
70330: CALL_OW 69
70334: ST_TO_ADDR
// if not tmp then
70335: LD_VAR 0 1
70339: NOT
70340: IFFALSE 70344
// exit ;
70342: GO 70370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70344: LD_VAR 0 1
70348: PUSH
70349: LD_INT 1
70351: PPUSH
70352: LD_VAR 0 1
70356: PPUSH
70357: CALL_OW 12
70361: ARRAY
70362: PPUSH
70363: LD_INT 1
70365: PPUSH
70366: CALL_OW 234
// end ;
70370: PPOPN 1
70372: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70373: LD_EXP 44
70377: PUSH
70378: LD_EXP 86
70382: AND
70383: IFFALSE 70524
70385: GO 70387
70387: DISABLE
70388: LD_INT 0
70390: PPUSH
70391: PPUSH
70392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70393: LD_ADDR_VAR 0 3
70397: PUSH
70398: LD_INT 22
70400: PUSH
70401: LD_OWVAR 2
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 25
70412: PUSH
70413: LD_INT 1
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PPUSH
70424: CALL_OW 69
70428: ST_TO_ADDR
// if not tmp then
70429: LD_VAR 0 3
70433: NOT
70434: IFFALSE 70438
// exit ;
70436: GO 70524
// un := tmp [ rand ( 1 , tmp ) ] ;
70438: LD_ADDR_VAR 0 2
70442: PUSH
70443: LD_VAR 0 3
70447: PUSH
70448: LD_INT 1
70450: PPUSH
70451: LD_VAR 0 3
70455: PPUSH
70456: CALL_OW 12
70460: ARRAY
70461: ST_TO_ADDR
// if Crawls ( un ) then
70462: LD_VAR 0 2
70466: PPUSH
70467: CALL_OW 318
70471: IFFALSE 70482
// ComWalk ( un ) ;
70473: LD_VAR 0 2
70477: PPUSH
70478: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70482: LD_VAR 0 2
70486: PPUSH
70487: LD_INT 9
70489: PPUSH
70490: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70494: LD_INT 28
70496: PPUSH
70497: LD_OWVAR 2
70501: PPUSH
70502: LD_INT 2
70504: PPUSH
70505: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70509: LD_INT 29
70511: PPUSH
70512: LD_OWVAR 2
70516: PPUSH
70517: LD_INT 2
70519: PPUSH
70520: CALL_OW 322
// end ;
70524: PPOPN 3
70526: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70527: LD_EXP 44
70531: PUSH
70532: LD_EXP 87
70536: AND
70537: IFFALSE 70648
70539: GO 70541
70541: DISABLE
70542: LD_INT 0
70544: PPUSH
70545: PPUSH
70546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70547: LD_ADDR_VAR 0 3
70551: PUSH
70552: LD_INT 22
70554: PUSH
70555: LD_OWVAR 2
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 25
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PPUSH
70578: CALL_OW 69
70582: ST_TO_ADDR
// if not tmp then
70583: LD_VAR 0 3
70587: NOT
70588: IFFALSE 70592
// exit ;
70590: GO 70648
// un := tmp [ rand ( 1 , tmp ) ] ;
70592: LD_ADDR_VAR 0 2
70596: PUSH
70597: LD_VAR 0 3
70601: PUSH
70602: LD_INT 1
70604: PPUSH
70605: LD_VAR 0 3
70609: PPUSH
70610: CALL_OW 12
70614: ARRAY
70615: ST_TO_ADDR
// if Crawls ( un ) then
70616: LD_VAR 0 2
70620: PPUSH
70621: CALL_OW 318
70625: IFFALSE 70636
// ComWalk ( un ) ;
70627: LD_VAR 0 2
70631: PPUSH
70632: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70636: LD_VAR 0 2
70640: PPUSH
70641: LD_INT 8
70643: PPUSH
70644: CALL_OW 336
// end ;
70648: PPOPN 3
70650: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70651: LD_EXP 44
70655: PUSH
70656: LD_EXP 88
70660: AND
70661: IFFALSE 70805
70663: GO 70665
70665: DISABLE
70666: LD_INT 0
70668: PPUSH
70669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70670: LD_ADDR_VAR 0 2
70674: PUSH
70675: LD_INT 22
70677: PUSH
70678: LD_OWVAR 2
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 21
70689: PUSH
70690: LD_INT 2
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: LD_INT 34
70702: PUSH
70703: LD_INT 12
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 34
70712: PUSH
70713: LD_INT 51
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 34
70722: PUSH
70723: LD_INT 32
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: PPUSH
70741: CALL_OW 69
70745: ST_TO_ADDR
// if not tmp then
70746: LD_VAR 0 2
70750: NOT
70751: IFFALSE 70755
// exit ;
70753: GO 70805
// for i in tmp do
70755: LD_ADDR_VAR 0 1
70759: PUSH
70760: LD_VAR 0 2
70764: PUSH
70765: FOR_IN
70766: IFFALSE 70803
// if GetCargo ( i , mat_artifact ) = 0 then
70768: LD_VAR 0 1
70772: PPUSH
70773: LD_INT 4
70775: PPUSH
70776: CALL_OW 289
70780: PUSH
70781: LD_INT 0
70783: EQUAL
70784: IFFALSE 70801
// SetCargo ( i , mat_siberit , 100 ) ;
70786: LD_VAR 0 1
70790: PPUSH
70791: LD_INT 3
70793: PPUSH
70794: LD_INT 100
70796: PPUSH
70797: CALL_OW 290
70801: GO 70765
70803: POP
70804: POP
// end ;
70805: PPOPN 2
70807: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70808: LD_EXP 44
70812: PUSH
70813: LD_EXP 89
70817: AND
70818: IFFALSE 71001
70820: GO 70822
70822: DISABLE
70823: LD_INT 0
70825: PPUSH
70826: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70827: LD_ADDR_VAR 0 2
70831: PUSH
70832: LD_INT 22
70834: PUSH
70835: LD_OWVAR 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PPUSH
70844: CALL_OW 69
70848: ST_TO_ADDR
// if not tmp then
70849: LD_VAR 0 2
70853: NOT
70854: IFFALSE 70858
// exit ;
70856: GO 71001
// for i := 1 to 2 do
70858: LD_ADDR_VAR 0 1
70862: PUSH
70863: DOUBLE
70864: LD_INT 1
70866: DEC
70867: ST_TO_ADDR
70868: LD_INT 2
70870: PUSH
70871: FOR_TO
70872: IFFALSE 70999
// begin uc_side := your_side ;
70874: LD_ADDR_OWVAR 20
70878: PUSH
70879: LD_OWVAR 2
70883: ST_TO_ADDR
// uc_nation := nation_american ;
70884: LD_ADDR_OWVAR 21
70888: PUSH
70889: LD_INT 1
70891: ST_TO_ADDR
// vc_chassis := us_morphling ;
70892: LD_ADDR_OWVAR 37
70896: PUSH
70897: LD_INT 5
70899: ST_TO_ADDR
// vc_engine := engine_siberite ;
70900: LD_ADDR_OWVAR 39
70904: PUSH
70905: LD_INT 3
70907: ST_TO_ADDR
// vc_control := control_computer ;
70908: LD_ADDR_OWVAR 38
70912: PUSH
70913: LD_INT 3
70915: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70916: LD_ADDR_OWVAR 40
70920: PUSH
70921: LD_INT 10
70923: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70924: LD_VAR 0 2
70928: PUSH
70929: LD_INT 1
70931: ARRAY
70932: PPUSH
70933: CALL_OW 310
70937: NOT
70938: IFFALSE 70985
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70940: CALL_OW 45
70944: PPUSH
70945: LD_VAR 0 2
70949: PUSH
70950: LD_INT 1
70952: ARRAY
70953: PPUSH
70954: CALL_OW 250
70958: PPUSH
70959: LD_VAR 0 2
70963: PUSH
70964: LD_INT 1
70966: ARRAY
70967: PPUSH
70968: CALL_OW 251
70972: PPUSH
70973: LD_INT 12
70975: PPUSH
70976: LD_INT 1
70978: PPUSH
70979: CALL_OW 50
70983: GO 70997
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70985: CALL_OW 45
70989: PPUSH
70990: LD_INT 1
70992: PPUSH
70993: CALL_OW 51
// end ;
70997: GO 70871
70999: POP
71000: POP
// end ;
71001: PPOPN 2
71003: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71004: LD_EXP 44
71008: PUSH
71009: LD_EXP 90
71013: AND
71014: IFFALSE 71236
71016: GO 71018
71018: DISABLE
71019: LD_INT 0
71021: PPUSH
71022: PPUSH
71023: PPUSH
71024: PPUSH
71025: PPUSH
71026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71027: LD_ADDR_VAR 0 6
71031: PUSH
71032: LD_INT 22
71034: PUSH
71035: LD_OWVAR 2
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 21
71046: PUSH
71047: LD_INT 1
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 3
71056: PUSH
71057: LD_INT 23
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: LIST
71075: PPUSH
71076: CALL_OW 69
71080: ST_TO_ADDR
// if not tmp then
71081: LD_VAR 0 6
71085: NOT
71086: IFFALSE 71090
// exit ;
71088: GO 71236
// s1 := rand ( 1 , 4 ) ;
71090: LD_ADDR_VAR 0 2
71094: PUSH
71095: LD_INT 1
71097: PPUSH
71098: LD_INT 4
71100: PPUSH
71101: CALL_OW 12
71105: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71106: LD_ADDR_VAR 0 4
71110: PUSH
71111: LD_VAR 0 6
71115: PUSH
71116: LD_INT 1
71118: ARRAY
71119: PPUSH
71120: LD_VAR 0 2
71124: PPUSH
71125: CALL_OW 259
71129: ST_TO_ADDR
// if s1 = 1 then
71130: LD_VAR 0 2
71134: PUSH
71135: LD_INT 1
71137: EQUAL
71138: IFFALSE 71158
// s2 := rand ( 2 , 4 ) else
71140: LD_ADDR_VAR 0 3
71144: PUSH
71145: LD_INT 2
71147: PPUSH
71148: LD_INT 4
71150: PPUSH
71151: CALL_OW 12
71155: ST_TO_ADDR
71156: GO 71166
// s2 := 1 ;
71158: LD_ADDR_VAR 0 3
71162: PUSH
71163: LD_INT 1
71165: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71166: LD_ADDR_VAR 0 5
71170: PUSH
71171: LD_VAR 0 6
71175: PUSH
71176: LD_INT 1
71178: ARRAY
71179: PPUSH
71180: LD_VAR 0 3
71184: PPUSH
71185: CALL_OW 259
71189: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71190: LD_VAR 0 6
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PPUSH
71199: LD_VAR 0 2
71203: PPUSH
71204: LD_VAR 0 5
71208: PPUSH
71209: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71213: LD_VAR 0 6
71217: PUSH
71218: LD_INT 1
71220: ARRAY
71221: PPUSH
71222: LD_VAR 0 3
71226: PPUSH
71227: LD_VAR 0 4
71231: PPUSH
71232: CALL_OW 237
// end ;
71236: PPOPN 6
71238: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71239: LD_EXP 44
71243: PUSH
71244: LD_EXP 91
71248: AND
71249: IFFALSE 71328
71251: GO 71253
71253: DISABLE
71254: LD_INT 0
71256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71257: LD_ADDR_VAR 0 1
71261: PUSH
71262: LD_INT 22
71264: PUSH
71265: LD_OWVAR 2
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 30
71276: PUSH
71277: LD_INT 3
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PPUSH
71288: CALL_OW 69
71292: ST_TO_ADDR
// if not tmp then
71293: LD_VAR 0 1
71297: NOT
71298: IFFALSE 71302
// exit ;
71300: GO 71328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71302: LD_VAR 0 1
71306: PUSH
71307: LD_INT 1
71309: PPUSH
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 12
71319: ARRAY
71320: PPUSH
71321: LD_INT 1
71323: PPUSH
71324: CALL_OW 234
// end ;
71328: PPOPN 1
71330: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
71331: LD_EXP 44
71335: PUSH
71336: LD_EXP 92
71340: AND
71341: IFFALSE 71453
71343: GO 71345
71345: DISABLE
71346: LD_INT 0
71348: PPUSH
71349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71350: LD_ADDR_VAR 0 2
71354: PUSH
71355: LD_INT 22
71357: PUSH
71358: LD_OWVAR 2
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 2
71369: PUSH
71370: LD_INT 30
71372: PUSH
71373: LD_INT 27
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 30
71382: PUSH
71383: LD_INT 26
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 30
71392: PUSH
71393: LD_INT 28
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PPUSH
71410: CALL_OW 69
71414: ST_TO_ADDR
// if not tmp then
71415: LD_VAR 0 2
71419: NOT
71420: IFFALSE 71424
// exit ;
71422: GO 71453
// for i in tmp do
71424: LD_ADDR_VAR 0 1
71428: PUSH
71429: LD_VAR 0 2
71433: PUSH
71434: FOR_IN
71435: IFFALSE 71451
// SetLives ( i , 1 ) ;
71437: LD_VAR 0 1
71441: PPUSH
71442: LD_INT 1
71444: PPUSH
71445: CALL_OW 234
71449: GO 71434
71451: POP
71452: POP
// end ;
71453: PPOPN 2
71455: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71456: LD_EXP 44
71460: PUSH
71461: LD_EXP 93
71465: AND
71466: IFFALSE 71753
71468: GO 71470
71470: DISABLE
71471: LD_INT 0
71473: PPUSH
71474: PPUSH
71475: PPUSH
// begin i := rand ( 1 , 7 ) ;
71476: LD_ADDR_VAR 0 1
71480: PUSH
71481: LD_INT 1
71483: PPUSH
71484: LD_INT 7
71486: PPUSH
71487: CALL_OW 12
71491: ST_TO_ADDR
// case i of 1 :
71492: LD_VAR 0 1
71496: PUSH
71497: LD_INT 1
71499: DOUBLE
71500: EQUAL
71501: IFTRUE 71505
71503: GO 71515
71505: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71506: LD_STRING earthquake(getX(game), 0, 32)
71508: PPUSH
71509: CALL_OW 559
71513: GO 71753
71515: LD_INT 2
71517: DOUBLE
71518: EQUAL
71519: IFTRUE 71523
71521: GO 71537
71523: POP
// begin ToLua ( displayStucuk(); ) ;
71524: LD_STRING displayStucuk();
71526: PPUSH
71527: CALL_OW 559
// ResetFog ;
71531: CALL_OW 335
// end ; 3 :
71535: GO 71753
71537: LD_INT 3
71539: DOUBLE
71540: EQUAL
71541: IFTRUE 71545
71543: GO 71649
71545: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71546: LD_ADDR_VAR 0 2
71550: PUSH
71551: LD_INT 22
71553: PUSH
71554: LD_OWVAR 2
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 25
71565: PUSH
71566: LD_INT 1
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PPUSH
71577: CALL_OW 69
71581: ST_TO_ADDR
// if not tmp then
71582: LD_VAR 0 2
71586: NOT
71587: IFFALSE 71591
// exit ;
71589: GO 71753
// un := tmp [ rand ( 1 , tmp ) ] ;
71591: LD_ADDR_VAR 0 3
71595: PUSH
71596: LD_VAR 0 2
71600: PUSH
71601: LD_INT 1
71603: PPUSH
71604: LD_VAR 0 2
71608: PPUSH
71609: CALL_OW 12
71613: ARRAY
71614: ST_TO_ADDR
// if Crawls ( un ) then
71615: LD_VAR 0 3
71619: PPUSH
71620: CALL_OW 318
71624: IFFALSE 71635
// ComWalk ( un ) ;
71626: LD_VAR 0 3
71630: PPUSH
71631: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71635: LD_VAR 0 3
71639: PPUSH
71640: LD_INT 8
71642: PPUSH
71643: CALL_OW 336
// end ; 4 :
71647: GO 71753
71649: LD_INT 4
71651: DOUBLE
71652: EQUAL
71653: IFTRUE 71657
71655: GO 71731
71657: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71658: LD_ADDR_VAR 0 2
71662: PUSH
71663: LD_INT 22
71665: PUSH
71666: LD_OWVAR 2
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 30
71677: PUSH
71678: LD_INT 29
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PPUSH
71689: CALL_OW 69
71693: ST_TO_ADDR
// if not tmp then
71694: LD_VAR 0 2
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71753
// CenterNowOnUnits ( tmp [ 1 ] ) ;
71703: LD_VAR 0 2
71707: PUSH
71708: LD_INT 1
71710: ARRAY
71711: PPUSH
71712: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
71716: LD_VAR 0 2
71720: PUSH
71721: LD_INT 1
71723: ARRAY
71724: PPUSH
71725: CALL_OW 65
// end ; 5 .. 7 :
71729: GO 71753
71731: LD_INT 5
71733: DOUBLE
71734: GREATEREQUAL
71735: IFFALSE 71743
71737: LD_INT 7
71739: DOUBLE
71740: LESSEQUAL
71741: IFTRUE 71745
71743: GO 71752
71745: POP
// StreamSibBomb ; end ;
71746: CALL 67990 0 0
71750: GO 71753
71752: POP
// end ;
71753: PPOPN 3
71755: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71756: LD_EXP 44
71760: PUSH
71761: LD_EXP 94
71765: AND
71766: IFFALSE 71922
71768: GO 71770
71770: DISABLE
71771: LD_INT 0
71773: PPUSH
71774: PPUSH
71775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71776: LD_ADDR_VAR 0 2
71780: PUSH
71781: LD_INT 81
71783: PUSH
71784: LD_OWVAR 2
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: PUSH
71796: LD_INT 21
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 21
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: LIST
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PPUSH
71825: CALL_OW 69
71829: ST_TO_ADDR
// if not tmp then
71830: LD_VAR 0 2
71834: NOT
71835: IFFALSE 71839
// exit ;
71837: GO 71922
// p := 0 ;
71839: LD_ADDR_VAR 0 3
71843: PUSH
71844: LD_INT 0
71846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71847: LD_INT 35
71849: PPUSH
71850: CALL_OW 67
// p := p + 1 ;
71854: LD_ADDR_VAR 0 3
71858: PUSH
71859: LD_VAR 0 3
71863: PUSH
71864: LD_INT 1
71866: PLUS
71867: ST_TO_ADDR
// for i in tmp do
71868: LD_ADDR_VAR 0 1
71872: PUSH
71873: LD_VAR 0 2
71877: PUSH
71878: FOR_IN
71879: IFFALSE 71910
// if GetLives ( i ) < 1000 then
71881: LD_VAR 0 1
71885: PPUSH
71886: CALL_OW 256
71890: PUSH
71891: LD_INT 1000
71893: LESS
71894: IFFALSE 71908
// SetLives ( i , 1000 ) ;
71896: LD_VAR 0 1
71900: PPUSH
71901: LD_INT 1000
71903: PPUSH
71904: CALL_OW 234
71908: GO 71878
71910: POP
71911: POP
// until p > 20 ;
71912: LD_VAR 0 3
71916: PUSH
71917: LD_INT 20
71919: GREATER
71920: IFFALSE 71847
// end ;
71922: PPOPN 3
71924: END
// every 0 0$1 trigger StreamModeActive and sTime do
71925: LD_EXP 44
71929: PUSH
71930: LD_EXP 95
71934: AND
71935: IFFALSE 71970
71937: GO 71939
71939: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71940: LD_INT 28
71942: PPUSH
71943: LD_OWVAR 2
71947: PPUSH
71948: LD_INT 2
71950: PPUSH
71951: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71955: LD_INT 30
71957: PPUSH
71958: LD_OWVAR 2
71962: PPUSH
71963: LD_INT 2
71965: PPUSH
71966: CALL_OW 322
// end ;
71970: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71971: LD_EXP 44
71975: PUSH
71976: LD_EXP 96
71980: AND
71981: IFFALSE 72102
71983: GO 71985
71985: DISABLE
71986: LD_INT 0
71988: PPUSH
71989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71990: LD_ADDR_VAR 0 2
71994: PUSH
71995: LD_INT 22
71997: PUSH
71998: LD_OWVAR 2
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 21
72009: PUSH
72010: LD_INT 1
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: LD_INT 23
72022: PUSH
72023: LD_INT 0
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: LIST
72038: PPUSH
72039: CALL_OW 69
72043: ST_TO_ADDR
// if not tmp then
72044: LD_VAR 0 2
72048: NOT
72049: IFFALSE 72053
// exit ;
72051: GO 72102
// for i in tmp do
72053: LD_ADDR_VAR 0 1
72057: PUSH
72058: LD_VAR 0 2
72062: PUSH
72063: FOR_IN
72064: IFFALSE 72100
// begin if Crawls ( i ) then
72066: LD_VAR 0 1
72070: PPUSH
72071: CALL_OW 318
72075: IFFALSE 72086
// ComWalk ( i ) ;
72077: LD_VAR 0 1
72081: PPUSH
72082: CALL_OW 138
// SetClass ( i , 2 ) ;
72086: LD_VAR 0 1
72090: PPUSH
72091: LD_INT 2
72093: PPUSH
72094: CALL_OW 336
// end ;
72098: GO 72063
72100: POP
72101: POP
// end ;
72102: PPOPN 2
72104: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72105: LD_EXP 44
72109: PUSH
72110: LD_EXP 97
72114: AND
72115: IFFALSE 72403
72117: GO 72119
72119: DISABLE
72120: LD_INT 0
72122: PPUSH
72123: PPUSH
72124: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72125: LD_OWVAR 2
72129: PPUSH
72130: LD_INT 9
72132: PPUSH
72133: LD_INT 1
72135: PPUSH
72136: LD_INT 1
72138: PPUSH
72139: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72143: LD_INT 9
72145: PPUSH
72146: LD_OWVAR 2
72150: PPUSH
72151: CALL_OW 343
// uc_side := 9 ;
72155: LD_ADDR_OWVAR 20
72159: PUSH
72160: LD_INT 9
72162: ST_TO_ADDR
// uc_nation := 2 ;
72163: LD_ADDR_OWVAR 21
72167: PUSH
72168: LD_INT 2
72170: ST_TO_ADDR
// hc_name := Dark Warrior ;
72171: LD_ADDR_OWVAR 26
72175: PUSH
72176: LD_STRING Dark Warrior
72178: ST_TO_ADDR
// hc_gallery :=  ;
72179: LD_ADDR_OWVAR 33
72183: PUSH
72184: LD_STRING 
72186: ST_TO_ADDR
// hc_noskilllimit := true ;
72187: LD_ADDR_OWVAR 76
72191: PUSH
72192: LD_INT 1
72194: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72195: LD_ADDR_OWVAR 31
72199: PUSH
72200: LD_INT 30
72202: PUSH
72203: LD_INT 30
72205: PUSH
72206: LD_INT 30
72208: PUSH
72209: LD_INT 30
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: ST_TO_ADDR
// un := CreateHuman ;
72218: LD_ADDR_VAR 0 3
72222: PUSH
72223: CALL_OW 44
72227: ST_TO_ADDR
// hc_noskilllimit := false ;
72228: LD_ADDR_OWVAR 76
72232: PUSH
72233: LD_INT 0
72235: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72236: LD_VAR 0 3
72240: PPUSH
72241: LD_INT 1
72243: PPUSH
72244: CALL_OW 51
// ToLua ( playRanger() ) ;
72248: LD_STRING playRanger()
72250: PPUSH
72251: CALL_OW 559
// p := 0 ;
72255: LD_ADDR_VAR 0 2
72259: PUSH
72260: LD_INT 0
72262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72263: LD_INT 35
72265: PPUSH
72266: CALL_OW 67
// p := p + 1 ;
72270: LD_ADDR_VAR 0 2
72274: PUSH
72275: LD_VAR 0 2
72279: PUSH
72280: LD_INT 1
72282: PLUS
72283: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
72284: LD_VAR 0 3
72288: PPUSH
72289: CALL_OW 256
72293: PUSH
72294: LD_INT 1000
72296: LESS
72297: IFFALSE 72311
// SetLives ( un , 1000 ) ;
72299: LD_VAR 0 3
72303: PPUSH
72304: LD_INT 1000
72306: PPUSH
72307: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
72311: LD_VAR 0 3
72315: PPUSH
72316: LD_INT 81
72318: PUSH
72319: LD_OWVAR 2
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 91
72330: PUSH
72331: LD_VAR 0 3
72335: PUSH
72336: LD_INT 30
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: LIST
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PPUSH
72348: CALL_OW 69
72352: PPUSH
72353: LD_VAR 0 3
72357: PPUSH
72358: CALL_OW 74
72362: PPUSH
72363: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72367: LD_VAR 0 2
72371: PUSH
72372: LD_INT 80
72374: GREATER
72375: PUSH
72376: LD_VAR 0 3
72380: PPUSH
72381: CALL_OW 301
72385: OR
72386: IFFALSE 72263
// if un then
72388: LD_VAR 0 3
72392: IFFALSE 72403
// RemoveUnit ( un ) ;
72394: LD_VAR 0 3
72398: PPUSH
72399: CALL_OW 64
// end ;
72403: PPOPN 3
72405: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72406: LD_EXP 98
72410: IFFALSE 72526
72412: GO 72414
72414: DISABLE
72415: LD_INT 0
72417: PPUSH
72418: PPUSH
72419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72420: LD_ADDR_VAR 0 2
72424: PUSH
72425: LD_INT 81
72427: PUSH
72428: LD_OWVAR 2
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 21
72439: PUSH
72440: LD_INT 1
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PPUSH
72451: CALL_OW 69
72455: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72456: LD_STRING playComputer()
72458: PPUSH
72459: CALL_OW 559
// if not tmp then
72463: LD_VAR 0 2
72467: NOT
72468: IFFALSE 72472
// exit ;
72470: GO 72526
// for i in tmp do
72472: LD_ADDR_VAR 0 1
72476: PUSH
72477: LD_VAR 0 2
72481: PUSH
72482: FOR_IN
72483: IFFALSE 72524
// for j := 1 to 4 do
72485: LD_ADDR_VAR 0 3
72489: PUSH
72490: DOUBLE
72491: LD_INT 1
72493: DEC
72494: ST_TO_ADDR
72495: LD_INT 4
72497: PUSH
72498: FOR_TO
72499: IFFALSE 72520
// SetSkill ( i , j , 10 ) ;
72501: LD_VAR 0 1
72505: PPUSH
72506: LD_VAR 0 3
72510: PPUSH
72511: LD_INT 10
72513: PPUSH
72514: CALL_OW 237
72518: GO 72498
72520: POP
72521: POP
72522: GO 72482
72524: POP
72525: POP
// end ;
72526: PPOPN 3
72528: END
// every 0 0$1 trigger s30 do var i , tmp ;
72529: LD_EXP 99
72533: IFFALSE 72602
72535: GO 72537
72537: DISABLE
72538: LD_INT 0
72540: PPUSH
72541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72542: LD_ADDR_VAR 0 2
72546: PUSH
72547: LD_INT 22
72549: PUSH
72550: LD_OWVAR 2
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 69
72563: ST_TO_ADDR
// if not tmp then
72564: LD_VAR 0 2
72568: NOT
72569: IFFALSE 72573
// exit ;
72571: GO 72602
// for i in tmp do
72573: LD_ADDR_VAR 0 1
72577: PUSH
72578: LD_VAR 0 2
72582: PUSH
72583: FOR_IN
72584: IFFALSE 72600
// SetLives ( i , 300 ) ;
72586: LD_VAR 0 1
72590: PPUSH
72591: LD_INT 300
72593: PPUSH
72594: CALL_OW 234
72598: GO 72583
72600: POP
72601: POP
// end ;
72602: PPOPN 2
72604: END
// every 0 0$1 trigger s60 do var i , tmp ;
72605: LD_EXP 100
72609: IFFALSE 72678
72611: GO 72613
72613: DISABLE
72614: LD_INT 0
72616: PPUSH
72617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72618: LD_ADDR_VAR 0 2
72622: PUSH
72623: LD_INT 22
72625: PUSH
72626: LD_OWVAR 2
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PPUSH
72635: CALL_OW 69
72639: ST_TO_ADDR
// if not tmp then
72640: LD_VAR 0 2
72644: NOT
72645: IFFALSE 72649
// exit ;
72647: GO 72678
// for i in tmp do
72649: LD_ADDR_VAR 0 1
72653: PUSH
72654: LD_VAR 0 2
72658: PUSH
72659: FOR_IN
72660: IFFALSE 72676
// SetLives ( i , 600 ) ;
72662: LD_VAR 0 1
72666: PPUSH
72667: LD_INT 600
72669: PPUSH
72670: CALL_OW 234
72674: GO 72659
72676: POP
72677: POP
// end ;
72678: PPOPN 2
72680: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72681: LD_INT 0
72683: PPUSH
// case cmd of 301 :
72684: LD_VAR 0 1
72688: PUSH
72689: LD_INT 301
72691: DOUBLE
72692: EQUAL
72693: IFTRUE 72697
72695: GO 72729
72697: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72698: LD_VAR 0 6
72702: PPUSH
72703: LD_VAR 0 7
72707: PPUSH
72708: LD_VAR 0 8
72712: PPUSH
72713: LD_VAR 0 4
72717: PPUSH
72718: LD_VAR 0 5
72722: PPUSH
72723: CALL 73930 0 5
72727: GO 72850
72729: LD_INT 302
72731: DOUBLE
72732: EQUAL
72733: IFTRUE 72737
72735: GO 72774
72737: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72738: LD_VAR 0 6
72742: PPUSH
72743: LD_VAR 0 7
72747: PPUSH
72748: LD_VAR 0 8
72752: PPUSH
72753: LD_VAR 0 9
72757: PPUSH
72758: LD_VAR 0 4
72762: PPUSH
72763: LD_VAR 0 5
72767: PPUSH
72768: CALL 74021 0 6
72772: GO 72850
72774: LD_INT 303
72776: DOUBLE
72777: EQUAL
72778: IFTRUE 72782
72780: GO 72819
72782: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72783: LD_VAR 0 6
72787: PPUSH
72788: LD_VAR 0 7
72792: PPUSH
72793: LD_VAR 0 8
72797: PPUSH
72798: LD_VAR 0 9
72802: PPUSH
72803: LD_VAR 0 4
72807: PPUSH
72808: LD_VAR 0 5
72812: PPUSH
72813: CALL 72855 0 6
72817: GO 72850
72819: LD_INT 304
72821: DOUBLE
72822: EQUAL
72823: IFTRUE 72827
72825: GO 72849
72827: POP
// hHackTeleport ( unit , x , y ) ; end ;
72828: LD_VAR 0 2
72832: PPUSH
72833: LD_VAR 0 4
72837: PPUSH
72838: LD_VAR 0 5
72842: PPUSH
72843: CALL 74614 0 3
72847: GO 72850
72849: POP
// end ;
72850: LD_VAR 0 12
72854: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72855: LD_INT 0
72857: PPUSH
72858: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72859: LD_VAR 0 1
72863: PUSH
72864: LD_INT 1
72866: LESS
72867: PUSH
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 3
72875: GREATER
72876: OR
72877: PUSH
72878: LD_VAR 0 5
72882: PPUSH
72883: LD_VAR 0 6
72887: PPUSH
72888: CALL_OW 428
72892: OR
72893: IFFALSE 72897
// exit ;
72895: GO 73617
// uc_side := your_side ;
72897: LD_ADDR_OWVAR 20
72901: PUSH
72902: LD_OWVAR 2
72906: ST_TO_ADDR
// uc_nation := nation ;
72907: LD_ADDR_OWVAR 21
72911: PUSH
72912: LD_VAR 0 1
72916: ST_TO_ADDR
// bc_level = 1 ;
72917: LD_ADDR_OWVAR 43
72921: PUSH
72922: LD_INT 1
72924: ST_TO_ADDR
// case btype of 1 :
72925: LD_VAR 0 2
72929: PUSH
72930: LD_INT 1
72932: DOUBLE
72933: EQUAL
72934: IFTRUE 72938
72936: GO 72949
72938: POP
// bc_type := b_depot ; 2 :
72939: LD_ADDR_OWVAR 42
72943: PUSH
72944: LD_INT 0
72946: ST_TO_ADDR
72947: GO 73561
72949: LD_INT 2
72951: DOUBLE
72952: EQUAL
72953: IFTRUE 72957
72955: GO 72968
72957: POP
// bc_type := b_warehouse ; 3 :
72958: LD_ADDR_OWVAR 42
72962: PUSH
72963: LD_INT 1
72965: ST_TO_ADDR
72966: GO 73561
72968: LD_INT 3
72970: DOUBLE
72971: EQUAL
72972: IFTRUE 72976
72974: GO 72987
72976: POP
// bc_type := b_lab ; 4 .. 9 :
72977: LD_ADDR_OWVAR 42
72981: PUSH
72982: LD_INT 6
72984: ST_TO_ADDR
72985: GO 73561
72987: LD_INT 4
72989: DOUBLE
72990: GREATEREQUAL
72991: IFFALSE 72999
72993: LD_INT 9
72995: DOUBLE
72996: LESSEQUAL
72997: IFTRUE 73001
72999: GO 73053
73001: POP
// begin bc_type := b_lab_half ;
73002: LD_ADDR_OWVAR 42
73006: PUSH
73007: LD_INT 7
73009: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73010: LD_ADDR_OWVAR 44
73014: PUSH
73015: LD_INT 10
73017: PUSH
73018: LD_INT 11
73020: PUSH
73021: LD_INT 12
73023: PUSH
73024: LD_INT 15
73026: PUSH
73027: LD_INT 14
73029: PUSH
73030: LD_INT 13
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: PUSH
73041: LD_VAR 0 2
73045: PUSH
73046: LD_INT 3
73048: MINUS
73049: ARRAY
73050: ST_TO_ADDR
// end ; 10 .. 13 :
73051: GO 73561
73053: LD_INT 10
73055: DOUBLE
73056: GREATEREQUAL
73057: IFFALSE 73065
73059: LD_INT 13
73061: DOUBLE
73062: LESSEQUAL
73063: IFTRUE 73067
73065: GO 73144
73067: POP
// begin bc_type := b_lab_full ;
73068: LD_ADDR_OWVAR 42
73072: PUSH
73073: LD_INT 8
73075: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73076: LD_ADDR_OWVAR 44
73080: PUSH
73081: LD_INT 10
73083: PUSH
73084: LD_INT 12
73086: PUSH
73087: LD_INT 14
73089: PUSH
73090: LD_INT 13
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_VAR 0 2
73103: PUSH
73104: LD_INT 9
73106: MINUS
73107: ARRAY
73108: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73109: LD_ADDR_OWVAR 45
73113: PUSH
73114: LD_INT 11
73116: PUSH
73117: LD_INT 15
73119: PUSH
73120: LD_INT 12
73122: PUSH
73123: LD_INT 15
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: PUSH
73132: LD_VAR 0 2
73136: PUSH
73137: LD_INT 9
73139: MINUS
73140: ARRAY
73141: ST_TO_ADDR
// end ; 14 :
73142: GO 73561
73144: LD_INT 14
73146: DOUBLE
73147: EQUAL
73148: IFTRUE 73152
73150: GO 73163
73152: POP
// bc_type := b_workshop ; 15 :
73153: LD_ADDR_OWVAR 42
73157: PUSH
73158: LD_INT 2
73160: ST_TO_ADDR
73161: GO 73561
73163: LD_INT 15
73165: DOUBLE
73166: EQUAL
73167: IFTRUE 73171
73169: GO 73182
73171: POP
// bc_type := b_factory ; 16 :
73172: LD_ADDR_OWVAR 42
73176: PUSH
73177: LD_INT 3
73179: ST_TO_ADDR
73180: GO 73561
73182: LD_INT 16
73184: DOUBLE
73185: EQUAL
73186: IFTRUE 73190
73188: GO 73201
73190: POP
// bc_type := b_ext_gun ; 17 :
73191: LD_ADDR_OWVAR 42
73195: PUSH
73196: LD_INT 17
73198: ST_TO_ADDR
73199: GO 73561
73201: LD_INT 17
73203: DOUBLE
73204: EQUAL
73205: IFTRUE 73209
73207: GO 73237
73209: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73210: LD_ADDR_OWVAR 42
73214: PUSH
73215: LD_INT 19
73217: PUSH
73218: LD_INT 23
73220: PUSH
73221: LD_INT 19
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: LIST
73228: PUSH
73229: LD_VAR 0 1
73233: ARRAY
73234: ST_TO_ADDR
73235: GO 73561
73237: LD_INT 18
73239: DOUBLE
73240: EQUAL
73241: IFTRUE 73245
73243: GO 73256
73245: POP
// bc_type := b_ext_radar ; 19 :
73246: LD_ADDR_OWVAR 42
73250: PUSH
73251: LD_INT 20
73253: ST_TO_ADDR
73254: GO 73561
73256: LD_INT 19
73258: DOUBLE
73259: EQUAL
73260: IFTRUE 73264
73262: GO 73275
73264: POP
// bc_type := b_ext_radio ; 20 :
73265: LD_ADDR_OWVAR 42
73269: PUSH
73270: LD_INT 22
73272: ST_TO_ADDR
73273: GO 73561
73275: LD_INT 20
73277: DOUBLE
73278: EQUAL
73279: IFTRUE 73283
73281: GO 73294
73283: POP
// bc_type := b_ext_siberium ; 21 :
73284: LD_ADDR_OWVAR 42
73288: PUSH
73289: LD_INT 21
73291: ST_TO_ADDR
73292: GO 73561
73294: LD_INT 21
73296: DOUBLE
73297: EQUAL
73298: IFTRUE 73302
73300: GO 73313
73302: POP
// bc_type := b_ext_computer ; 22 :
73303: LD_ADDR_OWVAR 42
73307: PUSH
73308: LD_INT 24
73310: ST_TO_ADDR
73311: GO 73561
73313: LD_INT 22
73315: DOUBLE
73316: EQUAL
73317: IFTRUE 73321
73319: GO 73332
73321: POP
// bc_type := b_ext_track ; 23 :
73322: LD_ADDR_OWVAR 42
73326: PUSH
73327: LD_INT 16
73329: ST_TO_ADDR
73330: GO 73561
73332: LD_INT 23
73334: DOUBLE
73335: EQUAL
73336: IFTRUE 73340
73338: GO 73351
73340: POP
// bc_type := b_ext_laser ; 24 :
73341: LD_ADDR_OWVAR 42
73345: PUSH
73346: LD_INT 25
73348: ST_TO_ADDR
73349: GO 73561
73351: LD_INT 24
73353: DOUBLE
73354: EQUAL
73355: IFTRUE 73359
73357: GO 73370
73359: POP
// bc_type := b_control_tower ; 25 :
73360: LD_ADDR_OWVAR 42
73364: PUSH
73365: LD_INT 36
73367: ST_TO_ADDR
73368: GO 73561
73370: LD_INT 25
73372: DOUBLE
73373: EQUAL
73374: IFTRUE 73378
73376: GO 73389
73378: POP
// bc_type := b_breastwork ; 26 :
73379: LD_ADDR_OWVAR 42
73383: PUSH
73384: LD_INT 31
73386: ST_TO_ADDR
73387: GO 73561
73389: LD_INT 26
73391: DOUBLE
73392: EQUAL
73393: IFTRUE 73397
73395: GO 73408
73397: POP
// bc_type := b_bunker ; 27 :
73398: LD_ADDR_OWVAR 42
73402: PUSH
73403: LD_INT 32
73405: ST_TO_ADDR
73406: GO 73561
73408: LD_INT 27
73410: DOUBLE
73411: EQUAL
73412: IFTRUE 73416
73414: GO 73427
73416: POP
// bc_type := b_turret ; 28 :
73417: LD_ADDR_OWVAR 42
73421: PUSH
73422: LD_INT 33
73424: ST_TO_ADDR
73425: GO 73561
73427: LD_INT 28
73429: DOUBLE
73430: EQUAL
73431: IFTRUE 73435
73433: GO 73446
73435: POP
// bc_type := b_armoury ; 29 :
73436: LD_ADDR_OWVAR 42
73440: PUSH
73441: LD_INT 4
73443: ST_TO_ADDR
73444: GO 73561
73446: LD_INT 29
73448: DOUBLE
73449: EQUAL
73450: IFTRUE 73454
73452: GO 73465
73454: POP
// bc_type := b_barracks ; 30 :
73455: LD_ADDR_OWVAR 42
73459: PUSH
73460: LD_INT 5
73462: ST_TO_ADDR
73463: GO 73561
73465: LD_INT 30
73467: DOUBLE
73468: EQUAL
73469: IFTRUE 73473
73471: GO 73484
73473: POP
// bc_type := b_solar_power ; 31 :
73474: LD_ADDR_OWVAR 42
73478: PUSH
73479: LD_INT 27
73481: ST_TO_ADDR
73482: GO 73561
73484: LD_INT 31
73486: DOUBLE
73487: EQUAL
73488: IFTRUE 73492
73490: GO 73503
73492: POP
// bc_type := b_oil_power ; 32 :
73493: LD_ADDR_OWVAR 42
73497: PUSH
73498: LD_INT 26
73500: ST_TO_ADDR
73501: GO 73561
73503: LD_INT 32
73505: DOUBLE
73506: EQUAL
73507: IFTRUE 73511
73509: GO 73522
73511: POP
// bc_type := b_siberite_power ; 33 :
73512: LD_ADDR_OWVAR 42
73516: PUSH
73517: LD_INT 28
73519: ST_TO_ADDR
73520: GO 73561
73522: LD_INT 33
73524: DOUBLE
73525: EQUAL
73526: IFTRUE 73530
73528: GO 73541
73530: POP
// bc_type := b_oil_mine ; 34 :
73531: LD_ADDR_OWVAR 42
73535: PUSH
73536: LD_INT 29
73538: ST_TO_ADDR
73539: GO 73561
73541: LD_INT 34
73543: DOUBLE
73544: EQUAL
73545: IFTRUE 73549
73547: GO 73560
73549: POP
// bc_type := b_siberite_mine ; end ;
73550: LD_ADDR_OWVAR 42
73554: PUSH
73555: LD_INT 30
73557: ST_TO_ADDR
73558: GO 73561
73560: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73561: LD_ADDR_VAR 0 8
73565: PUSH
73566: LD_VAR 0 5
73570: PPUSH
73571: LD_VAR 0 6
73575: PPUSH
73576: LD_VAR 0 3
73580: PPUSH
73581: CALL_OW 47
73585: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73586: LD_OWVAR 42
73590: PUSH
73591: LD_INT 32
73593: PUSH
73594: LD_INT 33
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: IN
73601: IFFALSE 73617
// PlaceWeaponTurret ( b , weapon ) ;
73603: LD_VAR 0 8
73607: PPUSH
73608: LD_VAR 0 4
73612: PPUSH
73613: CALL_OW 431
// end ;
73617: LD_VAR 0 7
73621: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73622: LD_INT 0
73624: PPUSH
73625: PPUSH
73626: PPUSH
73627: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73628: LD_ADDR_VAR 0 4
73632: PUSH
73633: LD_INT 22
73635: PUSH
73636: LD_OWVAR 2
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 2
73647: PUSH
73648: LD_INT 30
73650: PUSH
73651: LD_INT 0
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 30
73660: PUSH
73661: LD_INT 1
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: LIST
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PPUSH
73677: CALL_OW 69
73681: ST_TO_ADDR
// if not tmp then
73682: LD_VAR 0 4
73686: NOT
73687: IFFALSE 73691
// exit ;
73689: GO 73750
// for i in tmp do
73691: LD_ADDR_VAR 0 2
73695: PUSH
73696: LD_VAR 0 4
73700: PUSH
73701: FOR_IN
73702: IFFALSE 73748
// for j = 1 to 3 do
73704: LD_ADDR_VAR 0 3
73708: PUSH
73709: DOUBLE
73710: LD_INT 1
73712: DEC
73713: ST_TO_ADDR
73714: LD_INT 3
73716: PUSH
73717: FOR_TO
73718: IFFALSE 73744
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73720: LD_VAR 0 2
73724: PPUSH
73725: CALL_OW 274
73729: PPUSH
73730: LD_VAR 0 3
73734: PPUSH
73735: LD_INT 99999
73737: PPUSH
73738: CALL_OW 277
73742: GO 73717
73744: POP
73745: POP
73746: GO 73701
73748: POP
73749: POP
// end ;
73750: LD_VAR 0 1
73754: RET
// export function hHackSetLevel10 ; var i , j ; begin
73755: LD_INT 0
73757: PPUSH
73758: PPUSH
73759: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73760: LD_ADDR_VAR 0 2
73764: PUSH
73765: LD_INT 21
73767: PUSH
73768: LD_INT 1
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PPUSH
73775: CALL_OW 69
73779: PUSH
73780: FOR_IN
73781: IFFALSE 73833
// if IsSelected ( i ) then
73783: LD_VAR 0 2
73787: PPUSH
73788: CALL_OW 306
73792: IFFALSE 73831
// begin for j := 1 to 4 do
73794: LD_ADDR_VAR 0 3
73798: PUSH
73799: DOUBLE
73800: LD_INT 1
73802: DEC
73803: ST_TO_ADDR
73804: LD_INT 4
73806: PUSH
73807: FOR_TO
73808: IFFALSE 73829
// SetSkill ( i , j , 10 ) ;
73810: LD_VAR 0 2
73814: PPUSH
73815: LD_VAR 0 3
73819: PPUSH
73820: LD_INT 10
73822: PPUSH
73823: CALL_OW 237
73827: GO 73807
73829: POP
73830: POP
// end ;
73831: GO 73780
73833: POP
73834: POP
// end ;
73835: LD_VAR 0 1
73839: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73840: LD_INT 0
73842: PPUSH
73843: PPUSH
73844: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73845: LD_ADDR_VAR 0 2
73849: PUSH
73850: LD_INT 22
73852: PUSH
73853: LD_OWVAR 2
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 21
73864: PUSH
73865: LD_INT 1
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PPUSH
73876: CALL_OW 69
73880: PUSH
73881: FOR_IN
73882: IFFALSE 73923
// begin for j := 1 to 4 do
73884: LD_ADDR_VAR 0 3
73888: PUSH
73889: DOUBLE
73890: LD_INT 1
73892: DEC
73893: ST_TO_ADDR
73894: LD_INT 4
73896: PUSH
73897: FOR_TO
73898: IFFALSE 73919
// SetSkill ( i , j , 10 ) ;
73900: LD_VAR 0 2
73904: PPUSH
73905: LD_VAR 0 3
73909: PPUSH
73910: LD_INT 10
73912: PPUSH
73913: CALL_OW 237
73917: GO 73897
73919: POP
73920: POP
// end ;
73921: GO 73881
73923: POP
73924: POP
// end ;
73925: LD_VAR 0 1
73929: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73930: LD_INT 0
73932: PPUSH
// uc_side := your_side ;
73933: LD_ADDR_OWVAR 20
73937: PUSH
73938: LD_OWVAR 2
73942: ST_TO_ADDR
// uc_nation := nation ;
73943: LD_ADDR_OWVAR 21
73947: PUSH
73948: LD_VAR 0 1
73952: ST_TO_ADDR
// InitHc ;
73953: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73957: LD_INT 0
73959: PPUSH
73960: LD_VAR 0 2
73964: PPUSH
73965: LD_VAR 0 3
73969: PPUSH
73970: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73974: LD_VAR 0 4
73978: PPUSH
73979: LD_VAR 0 5
73983: PPUSH
73984: CALL_OW 428
73988: PUSH
73989: LD_INT 0
73991: EQUAL
73992: IFFALSE 74016
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73994: CALL_OW 44
73998: PPUSH
73999: LD_VAR 0 4
74003: PPUSH
74004: LD_VAR 0 5
74008: PPUSH
74009: LD_INT 1
74011: PPUSH
74012: CALL_OW 48
// end ;
74016: LD_VAR 0 6
74020: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74021: LD_INT 0
74023: PPUSH
74024: PPUSH
// uc_side := your_side ;
74025: LD_ADDR_OWVAR 20
74029: PUSH
74030: LD_OWVAR 2
74034: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74035: LD_VAR 0 1
74039: PUSH
74040: LD_INT 1
74042: PUSH
74043: LD_INT 2
74045: PUSH
74046: LD_INT 3
74048: PUSH
74049: LD_INT 4
74051: PUSH
74052: LD_INT 5
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: IN
74062: IFFALSE 74074
// uc_nation := nation_american else
74064: LD_ADDR_OWVAR 21
74068: PUSH
74069: LD_INT 1
74071: ST_TO_ADDR
74072: GO 74117
// if chassis in [ 11 , 12 , 13 , 14 ] then
74074: LD_VAR 0 1
74078: PUSH
74079: LD_INT 11
74081: PUSH
74082: LD_INT 12
74084: PUSH
74085: LD_INT 13
74087: PUSH
74088: LD_INT 14
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: IN
74097: IFFALSE 74109
// uc_nation := nation_arabian else
74099: LD_ADDR_OWVAR 21
74103: PUSH
74104: LD_INT 2
74106: ST_TO_ADDR
74107: GO 74117
// uc_nation := nation_russian ;
74109: LD_ADDR_OWVAR 21
74113: PUSH
74114: LD_INT 3
74116: ST_TO_ADDR
// vc_chassis := chassis ;
74117: LD_ADDR_OWVAR 37
74121: PUSH
74122: LD_VAR 0 1
74126: ST_TO_ADDR
// vc_engine := engine ;
74127: LD_ADDR_OWVAR 39
74131: PUSH
74132: LD_VAR 0 2
74136: ST_TO_ADDR
// vc_control := control ;
74137: LD_ADDR_OWVAR 38
74141: PUSH
74142: LD_VAR 0 3
74146: ST_TO_ADDR
// vc_weapon := weapon ;
74147: LD_ADDR_OWVAR 40
74151: PUSH
74152: LD_VAR 0 4
74156: ST_TO_ADDR
// un := CreateVehicle ;
74157: LD_ADDR_VAR 0 8
74161: PUSH
74162: CALL_OW 45
74166: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74167: LD_VAR 0 8
74171: PPUSH
74172: LD_INT 0
74174: PPUSH
74175: LD_INT 5
74177: PPUSH
74178: CALL_OW 12
74182: PPUSH
74183: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74187: LD_VAR 0 8
74191: PPUSH
74192: LD_VAR 0 5
74196: PPUSH
74197: LD_VAR 0 6
74201: PPUSH
74202: LD_INT 1
74204: PPUSH
74205: CALL_OW 48
// end ;
74209: LD_VAR 0 7
74213: RET
// export hInvincible ; every 1 do
74214: GO 74216
74216: DISABLE
// hInvincible := [ ] ;
74217: LD_ADDR_EXP 101
74221: PUSH
74222: EMPTY
74223: ST_TO_ADDR
74224: END
// every 10 do var i ;
74225: GO 74227
74227: DISABLE
74228: LD_INT 0
74230: PPUSH
// begin enable ;
74231: ENABLE
// if not hInvincible then
74232: LD_EXP 101
74236: NOT
74237: IFFALSE 74241
// exit ;
74239: GO 74285
// for i in hInvincible do
74241: LD_ADDR_VAR 0 1
74245: PUSH
74246: LD_EXP 101
74250: PUSH
74251: FOR_IN
74252: IFFALSE 74283
// if GetLives ( i ) < 1000 then
74254: LD_VAR 0 1
74258: PPUSH
74259: CALL_OW 256
74263: PUSH
74264: LD_INT 1000
74266: LESS
74267: IFFALSE 74281
// SetLives ( i , 1000 ) ;
74269: LD_VAR 0 1
74273: PPUSH
74274: LD_INT 1000
74276: PPUSH
74277: CALL_OW 234
74281: GO 74251
74283: POP
74284: POP
// end ;
74285: PPOPN 1
74287: END
// export function hHackInvincible ; var i ; begin
74288: LD_INT 0
74290: PPUSH
74291: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74292: LD_ADDR_VAR 0 2
74296: PUSH
74297: LD_INT 2
74299: PUSH
74300: LD_INT 21
74302: PUSH
74303: LD_INT 1
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 21
74312: PUSH
74313: LD_INT 2
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: LIST
74324: PPUSH
74325: CALL_OW 69
74329: PUSH
74330: FOR_IN
74331: IFFALSE 74392
// if IsSelected ( i ) then
74333: LD_VAR 0 2
74337: PPUSH
74338: CALL_OW 306
74342: IFFALSE 74390
// begin if i in hInvincible then
74344: LD_VAR 0 2
74348: PUSH
74349: LD_EXP 101
74353: IN
74354: IFFALSE 74374
// hInvincible := hInvincible diff i else
74356: LD_ADDR_EXP 101
74360: PUSH
74361: LD_EXP 101
74365: PUSH
74366: LD_VAR 0 2
74370: DIFF
74371: ST_TO_ADDR
74372: GO 74390
// hInvincible := hInvincible union i ;
74374: LD_ADDR_EXP 101
74378: PUSH
74379: LD_EXP 101
74383: PUSH
74384: LD_VAR 0 2
74388: UNION
74389: ST_TO_ADDR
// end ;
74390: GO 74330
74392: POP
74393: POP
// end ;
74394: LD_VAR 0 1
74398: RET
// export function hHackInvisible ; var i , j ; begin
74399: LD_INT 0
74401: PPUSH
74402: PPUSH
74403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74404: LD_ADDR_VAR 0 2
74408: PUSH
74409: LD_INT 21
74411: PUSH
74412: LD_INT 1
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PPUSH
74419: CALL_OW 69
74423: PUSH
74424: FOR_IN
74425: IFFALSE 74449
// if IsSelected ( i ) then
74427: LD_VAR 0 2
74431: PPUSH
74432: CALL_OW 306
74436: IFFALSE 74447
// ComForceInvisible ( i ) ;
74438: LD_VAR 0 2
74442: PPUSH
74443: CALL_OW 496
74447: GO 74424
74449: POP
74450: POP
// end ;
74451: LD_VAR 0 1
74455: RET
// export function hHackChangeYourSide ; begin
74456: LD_INT 0
74458: PPUSH
// if your_side = 8 then
74459: LD_OWVAR 2
74463: PUSH
74464: LD_INT 8
74466: EQUAL
74467: IFFALSE 74479
// your_side := 0 else
74469: LD_ADDR_OWVAR 2
74473: PUSH
74474: LD_INT 0
74476: ST_TO_ADDR
74477: GO 74493
// your_side := your_side + 1 ;
74479: LD_ADDR_OWVAR 2
74483: PUSH
74484: LD_OWVAR 2
74488: PUSH
74489: LD_INT 1
74491: PLUS
74492: ST_TO_ADDR
// end ;
74493: LD_VAR 0 1
74497: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74498: LD_INT 0
74500: PPUSH
74501: PPUSH
74502: PPUSH
// for i in all_units do
74503: LD_ADDR_VAR 0 2
74507: PUSH
74508: LD_OWVAR 3
74512: PUSH
74513: FOR_IN
74514: IFFALSE 74592
// if IsSelected ( i ) then
74516: LD_VAR 0 2
74520: PPUSH
74521: CALL_OW 306
74525: IFFALSE 74590
// begin j := GetSide ( i ) ;
74527: LD_ADDR_VAR 0 3
74531: PUSH
74532: LD_VAR 0 2
74536: PPUSH
74537: CALL_OW 255
74541: ST_TO_ADDR
// if j = 8 then
74542: LD_VAR 0 3
74546: PUSH
74547: LD_INT 8
74549: EQUAL
74550: IFFALSE 74562
// j := 0 else
74552: LD_ADDR_VAR 0 3
74556: PUSH
74557: LD_INT 0
74559: ST_TO_ADDR
74560: GO 74576
// j := j + 1 ;
74562: LD_ADDR_VAR 0 3
74566: PUSH
74567: LD_VAR 0 3
74571: PUSH
74572: LD_INT 1
74574: PLUS
74575: ST_TO_ADDR
// SetSide ( i , j ) ;
74576: LD_VAR 0 2
74580: PPUSH
74581: LD_VAR 0 3
74585: PPUSH
74586: CALL_OW 235
// end ;
74590: GO 74513
74592: POP
74593: POP
// end ;
74594: LD_VAR 0 1
74598: RET
// export function hHackFog ; begin
74599: LD_INT 0
74601: PPUSH
// FogOff ( true ) ;
74602: LD_INT 1
74604: PPUSH
74605: CALL_OW 344
// end ;
74609: LD_VAR 0 1
74613: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74614: LD_INT 0
74616: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74617: LD_VAR 0 1
74621: PPUSH
74622: LD_VAR 0 2
74626: PPUSH
74627: LD_VAR 0 3
74631: PPUSH
74632: LD_INT 1
74634: PPUSH
74635: LD_INT 1
74637: PPUSH
74638: CALL_OW 483
// CenterOnXY ( x , y ) ;
74642: LD_VAR 0 2
74646: PPUSH
74647: LD_VAR 0 3
74651: PPUSH
74652: CALL_OW 84
// end ; end_of_file
74656: LD_VAR 0 4
74660: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74661: LD_VAR 0 1
74665: PPUSH
74666: LD_VAR 0 2
74670: PPUSH
74671: LD_VAR 0 3
74675: PPUSH
74676: LD_VAR 0 4
74680: PPUSH
74681: LD_VAR 0 5
74685: PPUSH
74686: LD_VAR 0 6
74690: PPUSH
74691: CALL 60374 0 6
// end ;
74695: PPOPN 6
74697: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74698: CALL 60349 0 0
// end ; end_of_file end_of_file
74702: PPOPN 1
74704: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
74705: LD_INT 0
74707: PPUSH
// ar_miner := 81 ;
74708: LD_ADDR_EXP 109
74712: PUSH
74713: LD_INT 81
74715: ST_TO_ADDR
// ar_crane := 88 ;
74716: LD_ADDR_EXP 108
74720: PUSH
74721: LD_INT 88
74723: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
74724: LD_ADDR_EXP 103
74728: PUSH
74729: LD_INT 89
74731: ST_TO_ADDR
// us_hack := 99 ;
74732: LD_ADDR_EXP 104
74736: PUSH
74737: LD_INT 99
74739: ST_TO_ADDR
// us_artillery := 97 ;
74740: LD_ADDR_EXP 105
74744: PUSH
74745: LD_INT 97
74747: ST_TO_ADDR
// ar_bio_bomb := 91 ;
74748: LD_ADDR_EXP 106
74752: PUSH
74753: LD_INT 91
74755: ST_TO_ADDR
// ar_mortar := 92 ;
74756: LD_ADDR_EXP 107
74760: PUSH
74761: LD_INT 92
74763: ST_TO_ADDR
// ru_flamethrower := 93 ;
74764: LD_ADDR_EXP 110
74768: PUSH
74769: LD_INT 93
74771: ST_TO_ADDR
// ru_radar := 98 ;
74772: LD_ADDR_EXP 102
74776: PUSH
74777: LD_INT 98
74779: ST_TO_ADDR
// tech_Artillery := 80 ;
74780: LD_ADDR_EXP 111
74784: PUSH
74785: LD_INT 80
74787: ST_TO_ADDR
// tech_RadMat := 81 ;
74788: LD_ADDR_EXP 112
74792: PUSH
74793: LD_INT 81
74795: ST_TO_ADDR
// tech_BasicTools := 82 ;
74796: LD_ADDR_EXP 113
74800: PUSH
74801: LD_INT 82
74803: ST_TO_ADDR
// tech_Cargo := 83 ;
74804: LD_ADDR_EXP 114
74808: PUSH
74809: LD_INT 83
74811: ST_TO_ADDR
// tech_Track := 84 ;
74812: LD_ADDR_EXP 115
74816: PUSH
74817: LD_INT 84
74819: ST_TO_ADDR
// tech_Crane := 85 ;
74820: LD_ADDR_EXP 116
74824: PUSH
74825: LD_INT 85
74827: ST_TO_ADDR
// tech_Bulldozer := 86 ;
74828: LD_ADDR_EXP 117
74832: PUSH
74833: LD_INT 86
74835: ST_TO_ADDR
// tech_Hovercraft := 87 ;
74836: LD_ADDR_EXP 118
74840: PUSH
74841: LD_INT 87
74843: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
74844: LD_ADDR_EXP 119
74848: PUSH
74849: LD_INT 88
74851: ST_TO_ADDR
// class_mastodont := 31 ;
74852: LD_ADDR_EXP 120
74856: PUSH
74857: LD_INT 31
74859: ST_TO_ADDR
// class_horse := 21 ;
74860: LD_ADDR_EXP 121
74864: PUSH
74865: LD_INT 21
74867: ST_TO_ADDR
// end ;
74868: LD_VAR 0 1
74872: RET
// every 1 do
74873: GO 74875
74875: DISABLE
// InitGlobalVariables ;
74876: CALL 74705 0 0
74880: END
