// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 7463 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 15684 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 15684 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 15684 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 15684 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 15684 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 15684 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 15684 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 15684 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 15684 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 15684 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 15684 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 15684 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 54366 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: LD_INT 21
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL_OW 69
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2678
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2643: LD_VAR 0 2
2647: PPUSH
2648: LD_INT 6
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: LD_INT 8
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_OWVAR 67
2670: ARRAY
2671: PPUSH
2672: CALL_OW 241
2676: GO 2640
2678: POP
2679: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 32
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 69
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2791
// begin if GetBWeapon ( i ) = us_radar then
2703: LD_VAR 0 2
2707: PPUSH
2708: CALL_OW 269
2712: PUSH
2713: LD_INT 11
2715: EQUAL
2716: IFFALSE 2741
// begin uc_nation := 0 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 16
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: CALL_OW 380
// end else
2739: GO 2775
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 5
2749: PUSH
2750: LD_INT 6
2752: PUSH
2753: LD_INT 7
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_OWVAR 67
2769: ARRAY
2770: PPUSH
2771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2775: CALL_OW 44
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: CALL_OW 52
// end ;
2789: GO 2700
2791: POP
2792: POP
// b := HexInfo ( 74 , 120 ) ;
2793: LD_ADDR_VAR 0 3
2797: PUSH
2798: LD_INT 74
2800: PPUSH
2801: LD_INT 120
2803: PPUSH
2804: CALL_OW 428
2808: ST_TO_ADDR
// uc_nation := 1 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 1
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: LD_INT 4
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: PUSH
2845: LD_OWVAR 67
2849: ARRAY
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2904
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 5
2862: PUSH
2863: LD_INT 6
2865: PUSH
2866: LD_INT 7
2868: PUSH
2869: LD_INT 8
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_OWVAR 67
2882: ARRAY
2883: PPUSH
2884: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2888: CALL_OW 44
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 52
// end ;
2902: GO 2851
2904: POP
2905: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: CALL_OW 313
2915: PPUSH
2916: LD_INT 5
2918: PPUSH
2919: CALL_OW 336
// for i := 1 to 6 do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_INT 6
2935: PUSH
2936: FOR_TO
2937: IFFALSE 2987
// begin PrepareHuman ( false , 4 , 6 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: LD_INT 6
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_INT 32
2959: PUSH
2960: LD_INT 33
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: MOD
2975: PUSH
2976: LD_INT 1
2978: PLUS
2979: ARRAY
2980: PPUSH
2981: CALL_OW 52
// end ;
2985: GO 2936
2987: POP
2988: POP
// for i := 1 to 3 do
2989: LD_ADDR_VAR 0 2
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3032
// begin PrepareHuman ( false , 3 , 6 ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 3
3010: PPUSH
3011: LD_INT 6
3013: PPUSH
3014: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3018: CALL_OW 44
3022: PPUSH
3023: LD_INT 25
3025: PPUSH
3026: CALL_OW 52
// end ;
3030: GO 3002
3032: POP
3033: POP
// for i := 1 to 3 do
3034: LD_ADDR_VAR 0 2
3038: PUSH
3039: DOUBLE
3040: LD_INT 1
3042: DEC
3043: ST_TO_ADDR
3044: LD_INT 3
3046: PUSH
3047: FOR_TO
3048: IFFALSE 3106
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3050: LD_INT 0
3052: PPUSH
3053: LD_INT 3
3055: PPUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: LD_INT 7
3064: PUSH
3065: LD_INT 7
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_OWVAR 67
3078: ARRAY
3079: PPUSH
3080: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3084: CALL_OW 44
3088: PPUSH
3089: LD_INT 78
3091: PPUSH
3092: LD_INT 130
3094: PPUSH
3095: CALL_OW 428
3099: PPUSH
3100: CALL_OW 52
// end ;
3104: GO 3047
3106: POP
3107: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 1
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: LD_OWVAR 67
3140: ARRAY
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3230
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_INT 13
3156: PPUSH
3157: LD_INT 100
3159: PPUSH
3160: CALL 20524 0 5
// veh := CreateVehicle ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 45
3173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 9
3193: PPUSH
3194: LD_INT 0
3196: PPUSH
3197: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 3
3206: PPUSH
3207: LD_INT 6
3209: PPUSH
3210: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3214: CALL_OW 44
3218: PPUSH
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 52
// end ;
3228: GO 3142
3230: POP
3231: POP
// InitHc ;
3232: CALL_OW 19
// hc_gallery := sandar ;
3236: LD_ADDR_OWVAR 33
3240: PUSH
3241: LD_STRING sandar
3243: ST_TO_ADDR
// hc_face_number := 38 ;
3244: LD_ADDR_OWVAR 34
3248: PUSH
3249: LD_INT 38
3251: ST_TO_ADDR
// hc_name := Doug Callahan ;
3252: LD_ADDR_OWVAR 26
3256: PUSH
3257: LD_STRING Doug Callahan
3259: ST_TO_ADDR
// hc_class := class_engineer ;
3260: LD_ADDR_OWVAR 28
3264: PUSH
3265: LD_INT 2
3267: ST_TO_ADDR
// hc_sex := sex_male ;
3268: LD_ADDR_OWVAR 27
3272: PUSH
3273: LD_INT 1
3275: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3276: LD_ADDR_OWVAR 29
3280: PUSH
3281: LD_INT 10
3283: PUSH
3284: LD_INT 11
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3291: LD_ADDR_OWVAR 30
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 0
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3314: LD_ADDR_OWVAR 31
3318: PUSH
3319: LD_INT 4
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: LD_INT 3
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: ST_TO_ADDR
// usCommander := CreateHuman ;
3337: LD_ADDR_EXP 30
3341: PUSH
3342: CALL_OW 44
3346: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3347: LD_EXP 30
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3359: LD_INT 2
3361: PPUSH
3362: LD_EXP 30
3366: PPUSH
3367: CALL_OW 471
// InitHC_All ( ) ;
3371: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: LD_INT 12
3386: PPUSH
3387: LD_INT 100
3389: PPUSH
3390: CALL 20524 0 5
// usCargo := CreateVehicle ;
3394: LD_ADDR_EXP 32
3398: PUSH
3399: CALL_OW 45
3403: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3404: LD_EXP 32
3408: PPUSH
3409: LD_INT 81
3411: PPUSH
3412: LD_INT 143
3414: PPUSH
3415: LD_INT 0
3417: PPUSH
3418: CALL_OW 48
// Connect ( usCargo ) ;
3422: LD_EXP 32
3426: PPUSH
3427: CALL 23624 0 1
// DoNotAttack ( 5 , usCargo ) ;
3431: LD_INT 5
3433: PPUSH
3434: LD_EXP 32
3438: PPUSH
3439: CALL_OW 471
// end ;
3443: LD_VAR 0 1
3447: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3448: LD_EXP 31
3452: NOT
3453: PUSH
3454: LD_EXP 6
3458: AND
3459: PUSH
3460: LD_INT 25
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: PUSH
3469: LD_INT 25
3471: PPUSH
3472: CALL_OW 461
3476: PUSH
3477: LD_INT 2
3479: EQUAL
3480: AND
3481: IFFALSE 3638
3483: GO 3485
3485: DISABLE
3486: LD_INT 0
3488: PPUSH
3489: PPUSH
3490: PPUSH
// begin enable ;
3491: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 4
3504: PUSH
3505: LD_INT 5
3507: PUSH
3508: LD_INT 6
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: PUSH
3520: LD_OWVAR 67
3524: ARRAY
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3636
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 1
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: CALL_OW 12
3558: ARRAY
3559: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3560: LD_VAR 0 2
3564: PUSH
3565: LD_INT 4
3567: EQUAL
3568: IFFALSE 3580
// weapon := us_heavy_gun else
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_INT 6
3577: ST_TO_ADDR
3578: GO 3611
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_INT 5
3587: PUSH
3588: LD_INT 7
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3611: LD_INT 25
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: LD_INT 1
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: LD_VAR 0 3
3629: PPUSH
3630: CALL_OW 185
// end ;
3634: GO 3526
3636: POP
3637: POP
// end ;
3638: PPOPN 3
3640: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3641: LD_EXP 31
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 6
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: LD_OWVAR 67
3668: ARRAY
3669: GREATEREQUAL
3670: IFFALSE 3781
3672: GO 3674
3674: DISABLE
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
// begin enable ;
3679: ENABLE
// tmp := usForces ;
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: LD_EXP 31
3689: ST_TO_ADDR
// usForces := [ ] ;
3690: LD_ADDR_EXP 31
3694: PUSH
3695: EMPTY
3696: ST_TO_ADDR
// if not tmp then
3697: LD_VAR 0 2
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 3781
// repeat wait ( 0 0$1 ) ;
3706: LD_INT 35
3708: PPUSH
3709: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3713: LD_ADDR_VAR 0 2
3717: PUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 98
3725: PUSH
3726: LD_INT 50
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 114
3735: PUSH
3736: LD_INT 50
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 127
3745: PUSH
3746: LD_INT 51
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 131
3755: PUSH
3756: LD_INT 35
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL 55609 0 2
3773: ST_TO_ADDR
// until not tmp ;
3774: LD_VAR 0 2
3778: NOT
3779: IFFALSE 3706
// end ;
3781: PPOPN 2
3783: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3784: LD_EXP 3
3788: PUSH
3789: LD_EXP 5
3793: NOT
3794: AND
3795: PUSH
3796: LD_INT 11
3798: PPUSH
3799: LD_INT 22
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 70
3813: AND
3814: IFFALSE 3935
3816: GO 3818
3818: DISABLE
3819: LD_INT 0
3821: PPUSH
3822: PPUSH
3823: PPUSH
// begin uc_side := 1 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// uc_nation := 1 ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// tmp := [ ] ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i := 1 to 2 do
3847: LD_ADDR_VAR 0 1
3851: PUSH
3852: DOUBLE
3853: LD_INT 1
3855: DEC
3856: ST_TO_ADDR
3857: LD_INT 2
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3933
// begin PrepareSoldier ( false , 7 ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 7
3868: PPUSH
3869: CALL_OW 381
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 130
3890: PPUSH
3891: LD_INT 153
3893: PPUSH
3894: LD_INT 3
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3916: LD_VAR 0 2
3920: PPUSH
3921: LD_INT 108
3923: PPUSH
3924: LD_INT 108
3926: PPUSH
3927: CALL_OW 174
// end ;
3931: GO 3860
3933: POP
3934: POP
// end ;
3935: PPOPN 3
3937: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3938: LD_EXP 3
3942: PUSH
3943: LD_EXP 5
3947: NOT
3948: AND
3949: PUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 70
3967: AND
3968: IFFALSE 4089
3970: GO 3972
3972: DISABLE
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
// begin uc_side := 1 ;
3978: LD_ADDR_OWVAR 20
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// uc_nation := 1 ;
3986: LD_ADDR_OWVAR 21
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// tmp := [ ] ;
3994: LD_ADDR_VAR 0 3
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i := 1 to 2 do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: DOUBLE
4007: LD_INT 1
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4087
// begin PrepareSoldier ( false , 7 ) ;
4017: LD_INT 0
4019: PPUSH
4020: LD_INT 7
4022: PPUSH
4023: CALL_OW 381
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4037: LD_VAR 0 2
4041: PPUSH
4042: LD_INT 56
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 5
4065: PPUSH
4066: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4070: LD_VAR 0 2
4074: PPUSH
4075: LD_INT 72
4077: PPUSH
4078: LD_INT 92
4080: PPUSH
4081: CALL_OW 174
// end ;
4085: GO 4014
4087: POP
4088: POP
// end ;
4089: PPOPN 3
4091: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4092: LD_EXP 32
4096: PPUSH
4097: CALL_OW 302
4101: PUSH
4102: LD_EXP 7
4106: NOT
4107: AND
4108: IFFALSE 4371
4110: GO 4112
4112: DISABLE
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
// begin enable ;
4117: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 16
4125: PPUSH
4126: LD_INT 81
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 70
4150: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 435
4163: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4164: LD_EXP 32
4168: PPUSH
4169: CALL_OW 261
4173: PUSH
4174: LD_INT 10
4176: LESS
4177: PUSH
4178: LD_INT 2
4180: PPUSH
4181: LD_EXP 32
4185: PPUSH
4186: CALL_OW 292
4190: NOT
4191: AND
4192: IFFALSE 4206
// SetFuel ( usCargo , 100 ) ;
4194: LD_EXP 32
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4206: LD_EXP 32
4210: PPUSH
4211: CALL_OW 314
4215: NOT
4216: PUSH
4217: LD_EXP 32
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 289
4229: PUSH
4230: LD_INT 100
4232: LESS
4233: AND
4234: PUSH
4235: LD_VAR 0 2
4239: NOT
4240: AND
4241: IFFALSE 4307
// begin if cr then
4243: LD_VAR 0 1
4247: IFFALSE 4278
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4249: LD_EXP 32
4253: PPUSH
4254: LD_VAR 0 1
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: PPUSH
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: PPUSH
4272: CALL_OW 117
4276: GO 4305
// if not IsInArea ( usCargo , usCratesArea ) then
4278: LD_EXP 32
4282: PPUSH
4283: LD_INT 12
4285: PPUSH
4286: CALL_OW 308
4290: NOT
4291: IFFALSE 4305
// ComMoveToArea ( usCargo , usCratesArea ) ;
4293: LD_EXP 32
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 113
// exit ;
4305: GO 4371
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_EXP 32
4316: PPUSH
4317: LD_INT 16
4319: PPUSH
4320: CALL_OW 308
4324: NOT
4325: AND
4326: IFFALSE 4345
// ComMoveXY ( usCargo , 80 , 143 ) else
4328: LD_EXP 32
4332: PPUSH
4333: LD_INT 80
4335: PPUSH
4336: LD_INT 143
4338: PPUSH
4339: CALL_OW 111
4343: GO 4371
// if GetCargo ( usCargo , mat_cans ) then
4345: LD_EXP 32
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: CALL_OW 289
4357: IFFALSE 4371
// ComGive ( usCargo , usDepot ) ;
4359: LD_EXP 32
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 161
// end ;
4371: PPOPN 2
4373: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4374: LD_EXP 7
4378: NOT
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 50
4405: PUSH
4406: EMPTY
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 60
4439: PUSH
4440: EMPTY
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 25
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: AND
4467: IFFALSE 4670
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
// begin enable ;
4476: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4477: LD_ADDR_VAR 0 1
4481: PUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 21
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 50
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: PUSH
4525: FOR_IN
4526: IFFALSE 4668
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 60
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 25
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: ST_TO_ADDR
// if not sci then
4576: LD_VAR 0 2
4580: NOT
4581: IFFALSE 4585
// break ;
4583: GO 4668
// sci := sci [ 1 ] ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_VAR 0 2
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: ST_TO_ADDR
// if IsInUnit ( sci ) then
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL_OW 310
4608: IFFALSE 4621
// ComExit ( sci ) else
4610: LD_VAR 0 2
4614: PPUSH
4615: CALL 53403 0 1
4619: GO 4666
// begin ComHeal ( sci , i ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_INT 32
4642: PUSH
4643: LD_INT 33
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 2
4655: PPUSH
4656: CALL_OW 12
4660: ARRAY
4661: PPUSH
4662: CALL_OW 180
// end ; end ;
4666: GO 4525
4668: POP
4669: POP
// end ;
4670: PPOPN 2
4672: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4673: LD_EXP 7
4677: NOT
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 3
4691: PUSH
4692: LD_INT 60
4694: PUSH
4695: EMPTY
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 50
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: LD_INT 34
4710: PUSH
4711: LD_INT 13
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: AND
4729: PUSH
4730: LD_INT 22
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 24
4745: PUSH
4746: LD_INT 1000
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 3
4769: PUSH
4770: LD_INT 30
4772: PUSH
4773: LD_INT 29
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PPUSH
4790: CALL_OW 69
4794: AND
4795: IFFALSE 5064
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// begin enable ;
4805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 24
4826: PUSH
4827: LD_INT 1000
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 21
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 29
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 24
4896: PUSH
4897: LD_INT 600
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 29
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4946: LD_ADDR_VAR 0 1
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 60
4966: PUSH
4967: EMPTY
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 50
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 13
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: PUSH
5001: FOR_IN
5002: IFFALSE 5062
// begin if tmp2 then
5004: LD_VAR 0 3
5008: IFFALSE 5036
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 74
5029: PPUSH
5030: CALL_OW 130
5034: GO 5060
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 74
5055: PPUSH
5056: CALL_OW 130
// end ;
5060: GO 5001
5062: POP
5063: POP
// end ;
5064: PPOPN 3
5066: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5067: LD_EXP 7
5071: NOT
5072: PUSH
5073: LD_INT 16
5075: PPUSH
5076: LD_INT 81
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 50
5088: PUSH
5089: EMPTY
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: NOT
5101: AND
5102: PUSH
5103: LD_EXP 33
5107: AND
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 1
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 60
5124: PUSH
5125: EMPTY
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 50
5134: PUSH
5135: EMPTY
5136: LIST
5137: PUSH
5138: LD_INT 34
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: AND
5159: IFFALSE 5271
5161: GO 5163
5163: DISABLE
// begin enable ;
5164: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5165: LD_INT 22
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 60
5180: PUSH
5181: EMPTY
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 34
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_EXP 33
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_EXP 33
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: LD_EXP 33
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: LD_INT 3
5252: ARRAY
5253: PPUSH
5254: LD_EXP 33
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PUSH
5263: LD_INT 4
5265: ARRAY
5266: PPUSH
5267: CALL_OW 566
// end ;
5271: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5272: LD_INT 22
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 50
5284: PUSH
5285: EMPTY
5286: LIST
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 54
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 25
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 25
5316: PUSH
5317: LD_INT 5
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 25
5326: PUSH
5327: LD_INT 16
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: IFFALSE 5712
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin enable ;
5361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 50
5379: PUSH
5380: EMPTY
5381: LIST
5382: PUSH
5383: LD_INT 3
5385: PUSH
5386: LD_INT 54
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 16
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5446: LD_ADDR_VAR 0 3
5450: PUSH
5451: LD_INT 22
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 50
5463: PUSH
5464: EMPTY
5465: LIST
5466: PUSH
5467: LD_INT 21
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 30
5479: PUSH
5480: LD_INT 32
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 58
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5505: LD_ADDR_VAR 0 4
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 50
5522: PUSH
5523: EMPTY
5524: LIST
5525: PUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 5
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// if not tmp then
5546: LD_VAR 0 2
5550: NOT
5551: IFFALSE 5555
// exit ;
5553: GO 5712
// for i in tmp do
5555: LD_ADDR_VAR 0 1
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5710
// begin btmp := FilterByTag ( btmp , 0 ) ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 0
5580: PPUSH
5581: CALL 50587 0 2
5585: ST_TO_ADDR
// if not btmp then
5586: LD_VAR 0 3
5590: NOT
5591: IFFALSE 5636
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 257
5602: PUSH
5603: LD_INT 16
5605: NONEQUAL
5606: PUSH
5607: LD_VAR 0 4
5611: AND
5612: IFFALSE 5632
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_VAR 0 4
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PPUSH
5628: CALL_OW 120
// continue ;
5632: GO 5565
// end else
5634: GO 5708
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5652: LD_VAR 0 1
5656: PPUSH
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 120
// wait ( 0 0$9 ) ;
5670: LD_INT 315
5672: PPUSH
5673: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 1
5684: ARRAY
5685: PPUSH
5686: CALL 17808 0 1
5690: IFFALSE 5708
// SetTag ( btmp [ 1 ] , 0 ) ;
5692: LD_VAR 0 3
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: PPUSH
5701: LD_INT 0
5703: PPUSH
5704: CALL_OW 109
// end ; end ;
5708: GO 5565
5710: POP
5711: POP
// end ;
5712: PPOPN 4
5714: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5715: LD_INT 22
5717: PUSH
5718: LD_INT 1
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 33
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 50
5737: PUSH
5738: EMPTY
5739: LIST
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 61
5746: PUSH
5747: EMPTY
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PPUSH
5760: CALL_OW 69
5764: IFFALSE 5855
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
// begin enable ;
5773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 50
5801: PUSH
5802: EMPTY
5803: LIST
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 61
5810: PUSH
5811: EMPTY
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: ST_TO_ADDR
// for i in tmp do
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_VAR 0 2
5838: PUSH
5839: FOR_IN
5840: IFFALSE 5853
// Connect ( i ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 23624 0 1
5851: GO 5839
5853: POP
5854: POP
// end ;
5855: PPOPN 2
5857: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5858: LD_EXP 6
5862: PUSH
5863: LD_OWVAR 67
5867: PUSH
5868: LD_INT 1
5870: GREATER
5871: AND
5872: IFFALSE 6314
5874: GO 5876
5876: DISABLE
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5884: LD_INT 31500
5886: PUSH
5887: LD_INT 31500
5889: PUSH
5890: LD_INT 29400
5892: PUSH
5893: LD_INT 27300
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_OWVAR 67
5906: ARRAY
5907: PPUSH
5908: CALL_OW 67
// if usSurrender then
5912: LD_EXP 7
5916: IFFALSE 5920
// exit ;
5918: GO 6314
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5920: LD_ADDR_VAR 0 1
5924: PUSH
5925: DOUBLE
5926: LD_INT 1
5928: DEC
5929: ST_TO_ADDR
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: LD_INT 6
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6259
// begin uc_side := 1 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// uc_nation := 1 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// InitHc_All ( ) ;
5973: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5977: LD_INT 0
5979: PPUSH
5980: LD_INT 3
5982: PPUSH
5983: LD_INT 5
5985: PUSH
5986: LD_INT 6
5988: PUSH
5989: LD_INT 7
5991: PUSH
5992: LD_INT 8
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: PPUSH
6007: CALL_OW 380
// un := CreateHuman ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: CALL_OW 44
6020: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6021: LD_ADDR_VAR 0 4
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6054: LD_VAR 0 4
6058: PUSH
6059: LD_INT 4
6061: EQUAL
6062: IFFALSE 6097
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_INT 6
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: CALL_OW 12
6093: ARRAY
6094: ST_TO_ADDR
6095: GO 6132
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 5
6107: PUSH
6108: LD_INT 7
6110: PUSH
6111: LD_INT 4
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6132: LD_VAR 0 4
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_VAR 0 5
6147: PPUSH
6148: LD_INT 30
6150: PPUSH
6151: CALL 20524 0 5
// veh := CreateVehicle ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: CALL_OW 45
6164: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6165: LD_ADDR_EXP 34
6169: PUSH
6170: LD_EXP 34
6174: PPUSH
6175: LD_EXP 34
6179: PUSH
6180: LD_INT 1
6182: PLUS
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 4
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6221: LD_VAR 0 2
6225: PPUSH
6226: LD_VAR 0 3
6230: PPUSH
6231: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_INT 153
6242: PPUSH
6243: LD_INT 45
6245: PPUSH
6246: CALL_OW 111
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// end ;
6257: GO 5954
6259: POP
6260: POP
// repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6268: LD_ADDR_EXP 34
6272: PUSH
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 150
6280: PUSH
6281: LD_INT 36
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 138
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL 55609 0 2
6306: ST_TO_ADDR
// until not usAdditionalForces ;
6307: LD_EXP 34
6311: NOT
6312: IFFALSE 6261
// end ;
6314: PPOPN 5
6316: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6317: LD_INT 22
6319: PUSH
6320: LD_INT 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 101
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 69
6345: IFFALSE 6365
6347: GO 6349
6349: DISABLE
// begin wait ( 0 0$30 ) ;
6350: LD_INT 1050
6352: PPUSH
6353: CALL_OW 67
// usAttacksAllowed := true ;
6357: LD_ADDR_EXP 6
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// end ; end_of_file
6365: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL 57390 0 1
// if un = Heike then
6375: LD_VAR 0 1
6379: PUSH
6380: LD_EXP 15
6384: EQUAL
6385: IFFALSE 6394
// YouLost ( Heike ) ;
6387: LD_STRING Heike
6389: PPUSH
6390: CALL_OW 104
// if un = usCommander then
6394: LD_VAR 0 1
6398: PUSH
6399: LD_EXP 30
6403: EQUAL
6404: IFFALSE 6413
// YouLost ( Commander ) ;
6406: LD_STRING Commander
6408: PPUSH
6409: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 247
6436: PUSH
6437: LD_INT 2
6439: EQUAL
6440: AND
6441: IFFALSE 6458
// vehLossCounter := Inc ( vehLossCounter ) ;
6443: LD_ADDR_EXP 14
6447: PUSH
6448: LD_EXP 14
6452: PPUSH
6453: CALL 54366 0 1
6457: ST_TO_ADDR
// if GetSide ( un ) = 1 then
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 255
6467: PUSH
6468: LD_INT 1
6470: EQUAL
6471: IFFALSE 6794
// begin if GetClass ( un ) = class_sniper then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 257
6482: PUSH
6483: LD_INT 5
6485: EQUAL
6486: IFFALSE 6503
// sniperKillCounter := Inc ( sniperKillCounter ) ;
6488: LD_ADDR_EXP 13
6492: PUSH
6493: LD_EXP 13
6497: PPUSH
6498: CALL 54366 0 1
6502: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 264
6512: PUSH
6513: LD_INT 13
6515: EQUAL
6516: PUSH
6517: LD_INT 25
6519: PPUSH
6520: CALL_OW 302
6524: AND
6525: IFFALSE 6588
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
6527: LD_INT 175
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 1
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 13
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 69
6558: PPUSH
6559: CALL 17786 0 1
6563: MUL
6564: PPUSH
6565: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6569: LD_INT 25
6571: PPUSH
6572: LD_INT 2
6574: PPUSH
6575: LD_INT 2
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_INT 13
6583: PPUSH
6584: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 264
6597: PUSH
6598: LD_INT 12
6600: EQUAL
6601: PUSH
6602: LD_INT 25
6604: PPUSH
6605: CALL_OW 302
6609: AND
6610: IFFALSE 6631
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6612: LD_INT 25
6614: PPUSH
6615: LD_INT 2
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 12
6626: PPUSH
6627: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 266
6640: PUSH
6641: LD_INT 32
6643: EQUAL
6644: IFFALSE 6709
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6646: LD_ADDR_EXP 33
6650: PUSH
6651: LD_EXP 33
6655: PPUSH
6656: LD_EXP 33
6660: PUSH
6661: LD_INT 1
6663: PLUS
6664: PPUSH
6665: LD_INT 32
6667: PUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 250
6677: PUSH
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 251
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 254
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 1
6708: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 266
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 4
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: IN
6729: IFFALSE 6794
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6731: LD_ADDR_EXP 33
6735: PUSH
6736: LD_EXP 33
6740: PPUSH
6741: LD_EXP 33
6745: PUSH
6746: LD_INT 1
6748: PLUS
6749: PPUSH
6750: LD_INT 4
6752: PUSH
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 254
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// end ; end ;
6794: PPOPN 1
6796: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 255
6806: PUSH
6807: LD_INT 1
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL_OW 110
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: IFFALSE 6839
// SetTag ( un , 0 ) ;
6827: LD_VAR 0 1
6831: PPUSH
6832: LD_INT 0
6834: PPUSH
6835: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 255
6848: PUSH
6849: LD_INT 1
6851: EQUAL
6852: PUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 264
6862: PUSH
6863: LD_INT 6
6865: EQUAL
6866: AND
6867: PUSH
6868: LD_EXP 11
6872: NOT
6873: AND
6874: IFFALSE 6884
// seeHeavyGun := true ;
6876: LD_ADDR_EXP 11
6880: PUSH
6881: LD_INT 1
6883: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 263
6893: PUSH
6894: LD_INT 2
6896: EQUAL
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 255
6907: PUSH
6908: LD_INT 2
6910: NONEQUAL
6911: AND
6912: IFFALSE 6938
// begin ComUnlink ( un ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 136
// if not seeRemoteVehicle then
6923: LD_EXP 10
6927: NOT
6928: IFFALSE 6938
// seeRemoteVehicle := true ;
6930: LD_ADDR_EXP 10
6934: PUSH
6935: LD_INT 1
6937: ST_TO_ADDR
// end ; end ;
6938: PPOPN 1
6940: END
// on BuildingComplete ( b ) do var i , barracks ;
6941: LD_INT 0
6943: PPUSH
6944: PPUSH
// begin if GetSide ( b ) = 2 then
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 255
6954: PUSH
6955: LD_INT 2
6957: EQUAL
6958: IFFALSE 6996
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 266
6969: PUSH
6970: LD_INT 0
6972: EQUAL
6973: PUSH
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 18
6981: PPUSH
6982: CALL_OW 308
6986: AND
6987: IFFALSE 6996
// SetAchievement ( ACH_WEST ) ;
6989: LD_STRING ACH_WEST
6991: PPUSH
6992: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: LD_INT 1
7008: EQUAL
7009: IFFALSE 7161
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7011: LD_ADDR_EXP 33
7015: PUSH
7016: LD_EXP 33
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 3
7028: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 266
7038: PUSH
7039: LD_INT 4
7041: EQUAL
7042: IFFALSE 7053
// ComUpgrade ( b ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 146
// if GetBType ( b ) = b_bunker then
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 266
7062: PUSH
7063: LD_INT 32
7065: EQUAL
7066: IFFALSE 7161
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 6
7075: PUSH
7076: LD_INT 7
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 2
7088: PPUSH
7089: CALL_OW 12
7093: ARRAY
7094: PPUSH
7095: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 5
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// if barracks then
7133: LD_VAR 0 3
7137: IFFALSE 7161
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7139: LD_VAR 0 3
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PPUSH
7148: CALL_OW 313
7152: PUSH
7153: LD_INT 1
7155: ARRAY
7156: PPUSH
7157: CALL_OW 122
// end ; end ; end ;
7161: PPOPN 3
7163: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7164: LD_VAR 0 1
7168: PPUSH
7169: LD_VAR 0 2
7173: PPUSH
7174: CALL 57510 0 2
// if GetSide ( factory ) = 1 then
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 255
7187: PUSH
7188: LD_INT 1
7190: EQUAL
7191: IFFALSE 7270
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7193: LD_VAR 0 1
7197: PPUSH
7198: CALL_OW 264
7202: PUSH
7203: LD_INT 12
7205: EQUAL
7206: IFFALSE 7218
// usCargo := vehicle ;
7208: LD_ADDR_EXP 32
7212: PUSH
7213: LD_VAR 0 1
7217: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 264
7227: PUSH
7228: LD_INT 12
7230: PUSH
7231: LD_INT 13
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: IN
7238: NOT
7239: IFFALSE 7270
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_EXP 31
7250: PPUSH
7251: LD_EXP 31
7255: PUSH
7256: LD_INT 1
7258: PLUS
7259: PPUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 1
7269: ST_TO_ADDR
// end ; end ;
7270: PPOPN 2
7272: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7273: LD_VAR 0 2
7277: PPUSH
7278: CALL_OW 255
7282: PUSH
7283: LD_INT 1
7285: EQUAL
7286: IFFALSE 7300
// AddComEnterUnit ( un , amFac ) ;
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_INT 25
7295: PPUSH
7296: CALL_OW 180
// end ;
7300: PPOPN 4
7302: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 255
7312: PUSH
7313: LD_INT 1
7315: EQUAL
7316: PUSH
7317: LD_VAR 0 1
7321: PPUSH
7322: CALL_OW 266
7326: PUSH
7327: LD_INT 32
7329: EQUAL
7330: AND
7331: PUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 257
7341: PUSH
7342: LD_INT 1
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: IN
7352: AND
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 30
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 50
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: AND
7390: IFFALSE 7460
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7392: LD_INT 74
7394: PPUSH
7395: LD_INT 120
7397: PPUSH
7398: CALL_OW 428
7402: PPUSH
7403: CALL_OW 313
7407: PUSH
7408: LD_INT 6
7410: LESS
7411: IFFALSE 7460
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7413: LD_VAR 0 2
7417: PPUSH
7418: LD_INT 74
7420: PPUSH
7421: LD_INT 120
7423: PPUSH
7424: CALL_OW 428
7428: PPUSH
7429: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7433: LD_VAR 0 2
7437: PPUSH
7438: CALL_OW 257
7442: PUSH
7443: LD_INT 1
7445: EQUAL
7446: IFFALSE 7460
// AddComChangeProfession ( un , class_sniper ) ;
7448: LD_VAR 0 2
7452: PPUSH
7453: LD_INT 5
7455: PPUSH
7456: CALL_OW 183
// end ; end ; end_of_file
7460: PPOPN 2
7462: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
// Video ( true ) ;
7474: LD_INT 1
7476: PPUSH
7477: CALL 52977 0 1
// music_nat := 1 ;
7481: LD_ADDR_OWVAR 71
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// music_class := music_recon ;
7489: LD_ADDR_OWVAR 72
7493: PUSH
7494: LD_INT 3
7496: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7497: LD_INT 184
7499: PPUSH
7500: LD_INT 142
7502: PPUSH
7503: LD_INT 2
7505: PPUSH
7506: LD_INT 10
7508: NEG
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7514: LD_INT 184
7516: PPUSH
7517: LD_INT 142
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7527: LD_INT 204
7529: PPUSH
7530: LD_INT 151
7532: PPUSH
7533: LD_INT 2
7535: PPUSH
7536: LD_INT 10
7538: NEG
7539: PPUSH
7540: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7544: LD_INT 204
7546: PPUSH
7547: LD_INT 151
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7557: LD_INT 184
7559: PPUSH
7560: LD_INT 142
7562: PPUSH
7563: CALL_OW 86
// wait ( 0 0$2 ) ;
7567: LD_INT 70
7569: PPUSH
7570: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7574: LD_ADDR_VAR 0 5
7578: PUSH
7579: LD_EXP 15
7583: PUSH
7584: LD_EXP 16
7588: PUSH
7589: LD_EXP 17
7593: PUSH
7594: LD_EXP 18
7598: PUSH
7599: LD_EXP 19
7603: PUSH
7604: LD_EXP 20
7608: PUSH
7609: LD_EXP 21
7613: PUSH
7614: LD_EXP 22
7618: PUSH
7619: LD_EXP 24
7623: PUSH
7624: LD_EXP 25
7628: PUSH
7629: LD_EXP 26
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: LD_EXP 27
7651: UNION
7652: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 5
7662: PPUSH
7663: LD_INT 25
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: PUSH
7678: LD_INT 0
7680: GREATER
7681: ST_TO_ADDR
// hasCamera := false ;
7682: LD_ADDR_VAR 0 7
7686: PUSH
7687: LD_INT 0
7689: ST_TO_ADDR
// if not hasEng then
7690: LD_VAR 0 6
7694: NOT
7695: IFFALSE 7723
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7697: LD_VAR 0 5
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_VAR 0 5
7709: PPUSH
7710: CALL_OW 12
7714: ARRAY
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 336
// if heikeVehicles then
7723: LD_EXP 29
7727: IFFALSE 8351
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7729: LD_ADDR_VAR 0 5
7733: PUSH
7734: LD_VAR 0 5
7738: PPUSH
7739: LD_INT 3
7741: PPUSH
7742: CALL 55231 0 2
7746: ST_TO_ADDR
// for i in heikeVehicles do
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_EXP 29
7756: PUSH
7757: FOR_IN
7758: IFFALSE 8349
// begin if not tmp then
7760: LD_VAR 0 5
7764: NOT
7765: IFFALSE 7769
// break ;
7767: GO 8349
// uc_side := 2 ;
7769: LD_ADDR_OWVAR 20
7773: PUSH
7774: LD_INT 2
7776: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7777: LD_ADDR_OWVAR 21
7781: PUSH
7782: LD_VAR 0 2
7786: PUSH
7787: LD_INT 5
7789: ARRAY
7790: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7791: LD_ADDR_OWVAR 37
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7805: LD_ADDR_OWVAR 39
7809: PUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: ARRAY
7818: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7819: LD_ADDR_OWVAR 38
7823: PUSH
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 3
7831: ARRAY
7832: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7833: LD_ADDR_OWVAR 40
7837: PUSH
7838: LD_VAR 0 2
7842: PUSH
7843: LD_INT 4
7845: ARRAY
7846: ST_TO_ADDR
// veh := CreateVehicle ;
7847: LD_ADDR_VAR 0 4
7851: PUSH
7852: CALL_OW 45
7856: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7857: LD_VAR 0 4
7861: PPUSH
7862: LD_INT 4
7864: PPUSH
7865: CALL_OW 233
// if i [ 3 ] = control_manual then
7869: LD_VAR 0 2
7873: PUSH
7874: LD_INT 3
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: EQUAL
7881: IFFALSE 7966
// begin PlaceUnitArea ( veh , startArea , false ) ;
7883: LD_VAR 0 4
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 4
7905: ARRAY
7906: PUSH
7907: LD_INT 31
7909: EQUAL
7910: IFFALSE 7928
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7912: LD_VAR 0 5
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_INT 3
7923: PPUSH
7924: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 4
7941: PPUSH
7942: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7946: LD_ADDR_VAR 0 5
7950: PUSH
7951: LD_VAR 0 5
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 3
7963: ST_TO_ADDR
// end else
7964: GO 8027
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7966: LD_INT 22
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 34
7978: PUSH
7979: LD_INT 31
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 69
7994: IFFALSE 8027
// begin PlaceUnitArea ( veh , startArea , false ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 49
// Connect ( veh ) ;
8011: LD_VAR 0 4
8015: PPUSH
8016: CALL 23624 0 1
// wait ( 0 0$2 ) ;
8020: LD_INT 70
8022: PPUSH
8023: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8027: LD_VAR 0 4
8031: PPUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 6
8039: ARRAY
8040: PPUSH
8041: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8045: LD_VAR 0 4
8049: PPUSH
8050: LD_INT 20
8052: PPUSH
8053: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8057: LD_VAR 0 2
8061: PUSH
8062: LD_INT 7
8064: ARRAY
8065: PUSH
8066: LD_VAR 0 4
8070: PPUSH
8071: CALL_OW 264
8075: PUSH
8076: LD_INT 51
8078: PUSH
8079: LD_INT 32
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: IN
8086: AND
8087: IFFALSE 8138
// begin for j := 1 to 2 do
8089: LD_ADDR_VAR 0 3
8093: PUSH
8094: DOUBLE
8095: LD_INT 1
8097: DEC
8098: ST_TO_ADDR
8099: LD_INT 2
8101: PUSH
8102: FOR_TO
8103: IFFALSE 8136
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_VAR 0 3
8114: PPUSH
8115: LD_VAR 0 2
8119: PUSH
8120: LD_INT 7
8122: ARRAY
8123: PUSH
8124: LD_VAR 0 3
8128: ARRAY
8129: PPUSH
8130: CALL_OW 291
8134: GO 8102
8136: POP
8137: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8138: LD_VAR 0 4
8142: PPUSH
8143: LD_INT 185
8145: PPUSH
8146: LD_INT 144
8148: PPUSH
8149: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8153: LD_VAR 0 4
8157: PPUSH
8158: CALL_OW 263
8162: PUSH
8163: LD_INT 1
8165: EQUAL
8166: PUSH
8167: LD_VAR 0 7
8171: NOT
8172: AND
8173: PUSH
8174: LD_VAR 0 4
8178: PPUSH
8179: CALL_OW 311
8183: PPUSH
8184: CALL_OW 257
8188: PUSH
8189: LD_INT 2
8191: EQUAL
8192: AND
8193: IFFALSE 8298
// begin hasCamera := true ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8203: LD_ADDR_VAR 0 8
8207: PUSH
8208: LD_VAR 0 4
8212: PPUSH
8213: CALL_OW 311
8217: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8218: LD_VAR 0 4
8222: PPUSH
8223: LD_INT 177
8225: PPUSH
8226: LD_INT 138
8228: PPUSH
8229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8233: LD_VAR 0 8
8237: PPUSH
8238: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8242: LD_VAR 0 8
8246: PPUSH
8247: LD_INT 190
8249: PPUSH
8250: LD_INT 150
8252: PPUSH
8253: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8257: LD_VAR 0 8
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8271: LD_VAR 0 8
8275: PPUSH
8276: LD_INT 170
8278: PPUSH
8279: LD_INT 103
8281: PPUSH
8282: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8286: LD_INT 190
8288: PPUSH
8289: LD_INT 150
8291: PPUSH
8292: CALL_OW 84
// end else
8296: GO 8340
// begin AddComWait ( veh , 0 0$2 ) ;
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_INT 70
8305: PPUSH
8306: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8310: LD_VAR 0 4
8314: PPUSH
8315: LD_INT 179
8317: PPUSH
8318: LD_INT 129
8320: PPUSH
8321: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8325: LD_VAR 0 4
8329: PPUSH
8330: LD_INT 170
8332: PPUSH
8333: LD_INT 103
8335: PPUSH
8336: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8340: LD_INT 70
8342: PPUSH
8343: CALL_OW 67
// end ;
8347: GO 7757
8349: POP
8350: POP
// end ; if tmp then
8351: LD_VAR 0 5
8355: IFFALSE 8500
// begin for i in tmp do
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8498
// begin SetDir ( i , 4 ) ;
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_INT 4
8377: PPUSH
8378: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: LD_INT 0
8392: PPUSH
8393: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_INT 185
8404: PPUSH
8405: LD_INT 144
8407: PPUSH
8408: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8412: LD_VAR 0 2
8416: PPUSH
8417: CALL_OW 257
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: PUSH
8426: LD_VAR 0 7
8430: NOT
8431: AND
8432: IFFALSE 8459
// begin hasCamera := true ;
8434: LD_ADDR_VAR 0 7
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_INT 190
8449: PPUSH
8450: LD_INT 150
8452: PPUSH
8453: CALL_OW 217
// end else
8457: GO 8474
// AddComMoveXY ( i , 179 , 129 ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_INT 179
8466: PPUSH
8467: LD_INT 129
8469: PPUSH
8470: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_INT 170
8481: PPUSH
8482: LD_INT 103
8484: PPUSH
8485: CALL_OW 171
// wait ( 0 0$2 ) ;
8489: LD_INT 70
8491: PPUSH
8492: CALL_OW 67
// end ;
8496: GO 8367
8498: POP
8499: POP
// end ; if heikeApes then
8500: LD_EXP 28
8504: IFFALSE 8622
// begin counter := 0 ;
8506: LD_ADDR_VAR 0 9
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// for i in heikeApes do
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: LD_EXP 28
8523: PUSH
8524: FOR_IN
8525: IFFALSE 8620
// begin if counter > 2 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_INT 2
8534: GREATER
8535: IFFALSE 8539
// break ;
8537: GO 8620
// counter := Inc ( counter ) ;
8539: LD_ADDR_VAR 0 9
8543: PUSH
8544: LD_VAR 0 9
8548: PPUSH
8549: CALL 54366 0 1
8553: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_INT 4
8561: PPUSH
8562: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_INT 185
8588: PPUSH
8589: LD_INT 144
8591: PPUSH
8592: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8596: LD_VAR 0 2
8600: PPUSH
8601: LD_INT 170
8603: PPUSH
8604: LD_INT 103
8606: PPUSH
8607: CALL_OW 171
// wait ( 0 0$2 ) ;
8611: LD_INT 70
8613: PPUSH
8614: CALL_OW 67
// end ;
8618: GO 8524
8620: POP
8621: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8622: LD_EXP 15
8626: PPUSH
8627: LD_INT 163
8629: PPUSH
8630: LD_INT 89
8632: PPUSH
8633: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8637: LD_EXP 15
8641: PPUSH
8642: LD_STRING DH-Intro-1
8644: PPUSH
8645: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8649: LD_INT 175
8651: PPUSH
8652: LD_INT 117
8654: PPUSH
8655: CALL_OW 84
// if Markov then
8659: LD_EXP 22
8663: IFFALSE 9238
// begin Say ( Markov , DMar-Intro-2 ) ;
8665: LD_EXP 22
8669: PPUSH
8670: LD_STRING DMar-Intro-2
8672: PPUSH
8673: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8677: LD_EXP 22
8681: PPUSH
8682: LD_STRING DMar-Intro-3
8684: PPUSH
8685: CALL_OW 88
// wait ( 0 0$1 ) ;
8689: LD_INT 35
8691: PPUSH
8692: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8696: LD_EXP 15
8700: PPUSH
8701: CALL_OW 85
// if Kurt then
8705: LD_EXP 25
8709: IFFALSE 8761
// begin if IsInUnit ( Kurt ) then
8711: LD_EXP 25
8715: PPUSH
8716: CALL_OW 310
8720: IFFALSE 8731
// ComExit ( Kurt ) ;
8722: LD_EXP 25
8726: PPUSH
8727: CALL 53403 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8731: LD_EXP 25
8735: PPUSH
8736: LD_INT 130
8738: PPUSH
8739: LD_INT 56
8741: PPUSH
8742: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8746: LD_EXP 25
8750: PPUSH
8751: LD_INT 129
8753: PPUSH
8754: LD_INT 56
8756: PPUSH
8757: CALL_OW 178
// end ; if Kaia then
8761: LD_EXP 20
8765: IFFALSE 8945
// begin Say ( Kaia , DK-Intro-4 ) ;
8767: LD_EXP 20
8771: PPUSH
8772: LD_STRING DK-Intro-4
8774: PPUSH
8775: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8779: LD_EXP 22
8783: PPUSH
8784: LD_STRING DMar-Intro-5
8786: PPUSH
8787: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8791: LD_EXP 22
8795: PPUSH
8796: LD_STRING DMar-Intro-6
8798: PPUSH
8799: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8803: LD_EXP 24
8807: PPUSH
8808: LD_STRING DO-Intro-7
8810: PPUSH
8811: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8815: LD_INT 160
8817: PPUSH
8818: LD_INT 85
8820: PPUSH
8821: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8825: LD_EXP 22
8829: PPUSH
8830: LD_STRING DMar-Intro-8
8832: PPUSH
8833: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8837: LD_EXP 22
8841: PPUSH
8842: LD_STRING DMar-Intro-9
8844: PPUSH
8845: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8849: LD_EXP 22
8853: PPUSH
8854: LD_STRING DMar-Intro-10
8856: PPUSH
8857: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8861: LD_EXP 22
8865: PPUSH
8866: LD_STRING DMar-Intro-11
8868: PPUSH
8869: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DG-Intro-12
8880: PPUSH
8881: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8885: LD_EXP 16
8889: PPUSH
8890: LD_STRING DG-Intro-13
8892: PPUSH
8893: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8897: LD_EXP 16
8901: PPUSH
8902: LD_STRING DG-Intro-14
8904: PPUSH
8905: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8909: LD_EXP 16
8913: PPUSH
8914: LD_STRING DG-Intro-15
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8921: LD_EXP 15
8925: PPUSH
8926: LD_STRING DH-Intro-16
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8933: LD_EXP 22
8937: PPUSH
8938: LD_STRING DMar-Intro-17
8940: PPUSH
8941: CALL_OW 88
// end ; if Kurt and Mike then
8945: LD_EXP 25
8949: PUSH
8950: LD_EXP 17
8954: AND
8955: IFFALSE 9238
// begin CenterNowOnUnits ( Kurt ) ;
8957: LD_EXP 25
8961: PPUSH
8962: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8966: LD_EXP 25
8970: PPUSH
8971: LD_EXP 15
8975: PPUSH
8976: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8980: LD_EXP 25
8984: PPUSH
8985: LD_STRING DKs-Intro-18
8987: PPUSH
8988: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8992: LD_EXP 25
8996: PPUSH
8997: LD_STRING DKs-Intro-19
8999: PPUSH
9000: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9004: LD_EXP 17
9008: PPUSH
9009: CALL_OW 87
// if IsInUnit ( Mike ) then
9013: LD_EXP 17
9017: PPUSH
9018: CALL_OW 310
9022: IFFALSE 9033
// ComExit ( Mike ) ;
9024: LD_EXP 17
9028: PPUSH
9029: CALL 53403 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_INT 129
9040: PPUSH
9041: LD_INT 53
9043: PPUSH
9044: CALL_OW 171
// AddComHold ( Mike ) ;
9048: LD_EXP 17
9052: PPUSH
9053: CALL_OW 200
// wait ( 0 0$2 ) ;
9057: LD_INT 70
9059: PPUSH
9060: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9064: LD_EXP 17
9068: PPUSH
9069: LD_STRING DM-Intro-20
9071: PPUSH
9072: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9076: LD_ADDR_EXP 3
9080: PUSH
9081: LD_STRING Scout
9083: PPUSH
9084: CALL_OW 97
9088: ST_TO_ADDR
// if scoutActive = 1 then
9089: LD_EXP 3
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: IFFALSE 9194
// begin CenterNowOnUnits ( Kurt ) ;
9099: LD_EXP 25
9103: PPUSH
9104: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9108: LD_EXP 15
9112: PPUSH
9113: LD_STRING DH-Intro-21
9115: PPUSH
9116: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9120: LD_EXP 17
9124: PPUSH
9125: LD_STRING DM-Intro-22
9127: PPUSH
9128: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9132: LD_EXP 25
9136: PPUSH
9137: LD_STRING DKs-Intro-23
9139: PPUSH
9140: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9144: LD_EXP 25
9148: PPUSH
9149: LD_INT 5
9151: PPUSH
9152: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9156: LD_EXP 17
9160: PPUSH
9161: LD_INT 5
9163: PPUSH
9164: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9168: LD_EXP 25
9172: PUSH
9173: LD_EXP 17
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: LD_INT 104
9184: PPUSH
9185: LD_INT 66
9187: PPUSH
9188: CALL_OW 111
// end else
9192: GO 9238
// begin scoutActive := 0 ;
9194: LD_ADDR_EXP 3
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9202: LD_EXP 15
9206: PPUSH
9207: LD_STRING DH-Intro-a-21
9209: PPUSH
9210: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9214: LD_EXP 17
9218: PPUSH
9219: LD_STRING DM-Intro-a-22
9221: PPUSH
9222: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9226: LD_EXP 25
9230: PPUSH
9231: LD_STRING DKs-Intro-a-23
9233: PPUSH
9234: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9238: LD_INT 0
9240: PPUSH
9241: CALL 52977 0 1
// music_nat := music_auto ;
9245: LD_ADDR_OWVAR 71
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// music_class := music_auto ;
9253: LD_ADDR_OWVAR 72
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9261: LD_STRING M1
9263: PPUSH
9264: CALL_OW 337
// wait ( 0 0$3 ) ;
9268: LD_INT 105
9270: PPUSH
9271: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9275: LD_EXP 15
9279: PPUSH
9280: LD_STRING DH-Base-1
9282: PPUSH
9283: CALL_OW 88
// if Kaia then
9287: LD_EXP 20
9291: IFFALSE 9401
// begin Say ( Kaia , DK-Base-2 ) ;
9293: LD_EXP 20
9297: PPUSH
9298: LD_STRING DK-Base-2
9300: PPUSH
9301: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9305: LD_EXP 15
9309: PPUSH
9310: LD_STRING DH-Base-3
9312: PPUSH
9313: CALL_OW 88
// if Aviradze then
9317: LD_EXP 26
9321: IFFALSE 9401
// begin Say ( Aviradze , DA-Base-4 ) ;
9323: LD_EXP 26
9327: PPUSH
9328: LD_STRING DA-Base-4
9330: PPUSH
9331: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9335: LD_EXP 20
9339: PPUSH
9340: LD_STRING DK-Base-5
9342: PPUSH
9343: CALL_OW 88
// if Markov then
9347: LD_EXP 22
9351: IFFALSE 9401
// begin Say ( Markov , DMar-Base-6 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DMar-Base-6
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9365: LD_EXP 20
9369: PPUSH
9370: LD_STRING DK-Base-7
9372: PPUSH
9373: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9377: LD_EXP 22
9381: PPUSH
9382: LD_STRING DMar-Base-8
9384: PPUSH
9385: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9389: LD_EXP 22
9393: PPUSH
9394: LD_STRING DMar-Base-9
9396: PPUSH
9397: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9401: CALL_OW 22
// end ;
9405: LD_VAR 0 1
9409: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9410: LD_EXP 5
9414: IFFALSE 10525
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin InGameOn ;
9423: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9427: LD_EXP 17
9431: PUSH
9432: LD_EXP 25
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PPUSH
9441: LD_EXP 15
9445: PPUSH
9446: CALL_OW 119
// ComExit ( Heike ) ;
9450: LD_EXP 15
9454: PPUSH
9455: CALL 53403 0 1
// if IsOk ( Mike ) then
9459: LD_EXP 17
9463: PPUSH
9464: CALL_OW 302
9468: IFFALSE 9486
// AddComTurnUnit ( Heike , Mike ) else
9470: LD_EXP 15
9474: PPUSH
9475: LD_EXP 17
9479: PPUSH
9480: CALL_OW 179
9484: GO 9500
// AddComTurnUnit ( Heike , Kurt ) ;
9486: LD_EXP 15
9490: PPUSH
9491: LD_EXP 25
9495: PPUSH
9496: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9500: LD_EXP 17
9504: PPUSH
9505: CALL_OW 302
9509: PUSH
9510: LD_EXP 25
9514: PPUSH
9515: CALL_OW 302
9519: AND
9520: IFFALSE 9771
// begin CenterNowOnUnits ( Mike ) ;
9522: LD_EXP 17
9526: PPUSH
9527: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9531: LD_EXP 17
9535: PPUSH
9536: LD_STRING DM-Scout-1
9538: PPUSH
9539: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9543: LD_EXP 15
9547: PPUSH
9548: LD_STRING DH-Scout-2
9550: PPUSH
9551: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9555: LD_EXP 25
9559: PPUSH
9560: LD_STRING DKs-Scout-3
9562: PPUSH
9563: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9567: LD_EXP 15
9571: PPUSH
9572: LD_STRING DH-Scout-4
9574: PPUSH
9575: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9579: LD_EXP 15
9583: PPUSH
9584: LD_STRING DH-Scout-5
9586: PPUSH
9587: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: LD_INT 72
9598: PUSH
9599: LD_INT 122
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 89
9608: PUSH
9609: LD_INT 131
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 99
9618: PUSH
9619: LD_INT 139
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 100
9628: PUSH
9629: LD_INT 148
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// for i in tmp do
9642: LD_ADDR_VAR 0 1
9646: PUSH
9647: LD_VAR 0 2
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9711
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9655: LD_VAR 0 1
9659: PUSH
9660: LD_INT 1
9662: ARRAY
9663: PPUSH
9664: LD_VAR 0 1
9668: PUSH
9669: LD_INT 2
9671: ARRAY
9672: PPUSH
9673: LD_INT 2
9675: PPUSH
9676: LD_INT 6
9678: NEG
9679: PPUSH
9680: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: LD_INT 2
9704: PPUSH
9705: CALL_OW 331
// end ;
9709: GO 9652
9711: POP
9712: POP
// CenterOnXY ( 83 , 132 ) ;
9713: LD_INT 83
9715: PPUSH
9716: LD_INT 132
9718: PPUSH
9719: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9723: LD_EXP 25
9727: PPUSH
9728: LD_STRING DKs-Scout-6
9730: PPUSH
9731: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9735: LD_EXP 17
9739: PPUSH
9740: LD_STRING DM-Scout-7
9742: PPUSH
9743: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9747: LD_EXP 17
9751: PPUSH
9752: LD_STRING DM-Scout-8
9754: PPUSH
9755: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9759: LD_EXP 25
9763: PPUSH
9764: LD_STRING DKs-Scout-9
9766: PPUSH
9767: CALL_OW 88
// end ; if IsDead ( Mike ) then
9771: LD_EXP 17
9775: PPUSH
9776: CALL_OW 301
9780: IFFALSE 9947
// begin CenterNowOnUnits ( Kurt ) ;
9782: LD_EXP 25
9786: PPUSH
9787: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9791: LD_EXP 25
9795: PPUSH
9796: LD_STRING DKs-Scout-b-1
9798: PPUSH
9799: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9803: LD_EXP 25
9807: PPUSH
9808: LD_STRING DKs-Scout-b-2
9810: PPUSH
9811: CALL_OW 88
// if IsOk ( Givi ) then
9815: LD_EXP 16
9819: PPUSH
9820: CALL_OW 302
9824: IFFALSE 9899
// begin ComExit ( Givi ) ;
9826: LD_EXP 16
9830: PPUSH
9831: CALL 53403 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9835: LD_EXP 16
9839: PPUSH
9840: LD_EXP 25
9844: PPUSH
9845: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9849: LD_EXP 16
9853: PPUSH
9854: LD_STRING DG-Scout-b-3
9856: PPUSH
9857: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9861: LD_EXP 16
9865: PPUSH
9866: LD_STRING DG-Scout-b-4
9868: PPUSH
9869: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9873: LD_EXP 16
9877: PPUSH
9878: LD_STRING DG-Scout-b-5
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9885: LD_EXP 15
9889: PPUSH
9890: LD_STRING DH-Scout-b-6
9892: PPUSH
9893: CALL_OW 88
// end else
9897: GO 9911
// Say ( Heike , DH-Scout-a-4 ) ;
9899: LD_EXP 15
9903: PPUSH
9904: LD_STRING DH-Scout-a-4
9906: PPUSH
9907: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9911: LD_EXP 25
9915: PPUSH
9916: LD_STRING DKs-Scout-b-7
9918: PPUSH
9919: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_STRING DKs-Scout-b-8
9930: PPUSH
9931: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9935: LD_EXP 25
9939: PPUSH
9940: LD_STRING DKs-Scout-b-9
9942: PPUSH
9943: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9947: LD_EXP 25
9951: PPUSH
9952: CALL_OW 301
9956: IFFALSE 10235
// begin CenterNowOnUnits ( Mike ) ;
9958: LD_EXP 17
9962: PPUSH
9963: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9967: LD_EXP 17
9971: PPUSH
9972: LD_STRING DM-Scout-a-1
9974: PPUSH
9975: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9979: LD_EXP 17
9983: PPUSH
9984: LD_STRING DM-Scout-a-2
9986: PPUSH
9987: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9991: LD_EXP 17
9995: PPUSH
9996: CALL_OW 256
10000: PUSH
10001: LD_INT 1000
10003: LESS
10004: IFFALSE 10020
// Say ( Heike , DH-Scout-a-3 ) else
10006: LD_EXP 15
10010: PPUSH
10011: LD_STRING DH-Scout-a-3
10013: PPUSH
10014: CALL_OW 88
10018: GO 10032
// Say ( Heike , DH-Scout-a-4 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING DH-Scout-a-4
10027: PPUSH
10028: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10032: LD_EXP 17
10036: PPUSH
10037: LD_STRING DM-Scout-a-5
10039: PPUSH
10040: CALL_OW 88
// if IsOk ( Kaia ) then
10044: LD_EXP 20
10048: PPUSH
10049: CALL_OW 302
10053: IFFALSE 10235
// begin ComExit ( Kaia ) ;
10055: LD_EXP 20
10059: PPUSH
10060: CALL 53403 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10064: LD_EXP 20
10068: PPUSH
10069: LD_EXP 17
10073: PPUSH
10074: CALL_OW 172
// wait ( 0 0$2 ) ;
10078: LD_INT 70
10080: PPUSH
10081: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10085: LD_EXP 20
10089: PPUSH
10090: LD_EXP 17
10094: PPUSH
10095: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10099: LD_EXP 17
10103: PPUSH
10104: LD_EXP 20
10108: PPUSH
10109: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10113: LD_EXP 20
10117: PPUSH
10118: LD_STRING DK-Scout-a-6
10120: PPUSH
10121: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10125: LD_EXP 17
10129: PPUSH
10130: LD_STRING DM-Scout-a-7
10132: PPUSH
10133: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING DK-Scout-a-8
10144: PPUSH
10145: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10149: LD_EXP 20
10153: PPUSH
10154: LD_STRING DK-Scout-a-9
10156: PPUSH
10157: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Scout-a-10
10168: PPUSH
10169: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10173: LD_EXP 17
10177: PPUSH
10178: LD_EXP 15
10182: PPUSH
10183: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10187: LD_EXP 17
10191: PPUSH
10192: LD_STRING DM-Scout-a-11
10194: PPUSH
10195: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10199: LD_EXP 17
10203: PPUSH
10204: LD_STRING DM-Scout-a-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10211: LD_EXP 17
10215: PPUSH
10216: LD_STRING DM-Scout-a-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10223: LD_EXP 17
10227: PPUSH
10228: LD_STRING DM-Scout-a-14
10230: PPUSH
10231: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10235: LD_EXP 16
10239: PPUSH
10240: CALL_OW 302
10244: IFFALSE 10272
// begin Say ( Givi , DG-Scout-10 ) ;
10246: LD_EXP 16
10250: PPUSH
10251: LD_STRING DG-Scout-10
10253: PPUSH
10254: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10258: LD_EXP 16
10262: PPUSH
10263: LD_STRING DG-Scout-11
10265: PPUSH
10266: CALL_OW 88
// end else
10270: GO 10329
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10272: LD_EXP 27
10276: PPUSH
10277: LD_INT 26
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: CALL_OW 72
10291: PPUSH
10292: LD_STRING DArm-Scout-10
10294: PPUSH
10295: CALL 224 0 2
10299: NOT
10300: IFFALSE 10329
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10302: LD_EXP 27
10306: PPUSH
10307: LD_INT 26
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: LD_STRING DArf-Scout-10
10324: PPUSH
10325: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
10329: LD_EXP 15
10333: PPUSH
10334: LD_STRING DH-Scout-12
10336: PPUSH
10337: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10341: LD_EXP 15
10345: PPUSH
10346: LD_STRING DH-Scout-13
10348: PPUSH
10349: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10353: LD_EXP 17
10357: PPUSH
10358: CALL_OW 302
10362: PUSH
10363: LD_EXP 25
10367: PPUSH
10368: CALL_OW 302
10372: AND
10373: IFFALSE 10401
// begin Say ( Mike , DM-Scout-14 ) ;
10375: LD_EXP 17
10379: PPUSH
10380: LD_STRING DM-Scout-14
10382: PPUSH
10383: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10387: LD_EXP 15
10391: PPUSH
10392: LD_STRING DH-Scout-c-14
10394: PPUSH
10395: CALL_OW 88
// end else
10399: GO 10494
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10401: LD_EXP 17
10405: PPUSH
10406: CALL_OW 302
10410: PUSH
10411: LD_EXP 25
10415: PPUSH
10416: CALL_OW 302
10420: XOR
10421: IFFALSE 10482
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10423: LD_EXP 27
10427: PPUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: LD_STRING DArm-Scout-a-14
10445: PPUSH
10446: CALL 224 0 2
10450: NOT
10451: IFFALSE 10480
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10453: LD_EXP 27
10457: PPUSH
10458: LD_INT 26
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 72
10472: PPUSH
10473: LD_STRING DArf-Scout-a-14
10475: PPUSH
10476: CALL 224 0 2
// end else
10480: GO 10494
// Say ( Heike , DH-Scout-d-14 ) ;
10482: LD_EXP 15
10486: PPUSH
10487: LD_STRING DH-Scout-d-14
10489: PPUSH
10490: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10494: LD_EXP 15
10498: PPUSH
10499: LD_STRING DH-Scout-15
10501: PPUSH
10502: CALL_OW 88
// InGameOff ;
10506: CALL_OW 9
// wait ( 1 1$00 ) ;
10510: LD_INT 2100
10512: PPUSH
10513: CALL_OW 67
// usAttacksAllowed := true ;
10517: LD_ADDR_EXP 6
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// end ;
10525: PPOPN 2
10527: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10528: LD_EXP 4
10532: IFFALSE 10709
10534: GO 10536
10536: DISABLE
10537: LD_INT 0
10539: PPUSH
// begin spoken := true ;
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10548: LD_INT 1050
10550: PPUSH
10551: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10555: LD_EXP 15
10559: PPUSH
10560: LD_STRING DH-Scout-c-1
10562: PPUSH
10563: CALL_OW 88
// if not IsOk ( Givi ) then
10567: LD_EXP 16
10571: PPUSH
10572: CALL_OW 302
10576: NOT
10577: IFFALSE 10581
// exit ;
10579: GO 10709
// if IsOk ( Givi ) then
10581: LD_EXP 16
10585: PPUSH
10586: CALL_OW 302
10590: IFFALSE 10618
// begin Say ( Givi , DG-Scout-c-2 ) ;
10592: LD_EXP 16
10596: PPUSH
10597: LD_STRING DG-Scout-c-2
10599: PPUSH
10600: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10604: LD_EXP 16
10608: PPUSH
10609: LD_STRING DG-Scout-c-3
10611: PPUSH
10612: CALL_OW 88
// end else
10616: GO 10691
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10618: LD_ADDR_VAR 0 1
10622: PUSH
10623: LD_EXP 27
10627: PPUSH
10628: LD_INT 26
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 72
10642: PPUSH
10643: LD_STRING DArm-Scout-c-3
10645: PPUSH
10646: CALL 224 0 2
10650: ST_TO_ADDR
// if not spoken then
10651: LD_VAR 0 1
10655: NOT
10656: IFFALSE 10691
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10658: LD_ADDR_VAR 0 1
10662: PUSH
10663: LD_EXP 27
10667: PPUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 72
10682: PPUSH
10683: LD_STRING DArf-Scout-c-3
10685: PPUSH
10686: CALL 224 0 2
10690: ST_TO_ADDR
// ; end ; if spoken then
10691: LD_VAR 0 1
10695: IFFALSE 10709
// Say ( Heike , DH-Scout-c-4 ) ;
10697: LD_EXP 15
10701: PPUSH
10702: LD_STRING DH-Scout-c-4
10704: PPUSH
10705: CALL_OW 88
// end ;
10709: PPOPN 1
10711: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10712: LD_INT 22
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 7
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: PUSH
10741: LD_EXP 26
10745: PPUSH
10746: CALL_OW 302
10750: AND
10751: IFFALSE 10836
10753: GO 10755
10755: DISABLE
// begin DialogueOn ;
10756: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10760: LD_EXP 26
10764: PPUSH
10765: LD_STRING DA-Lab-1
10767: PPUSH
10768: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10772: LD_EXP 15
10776: PPUSH
10777: LD_STRING DH-Lab-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10784: LD_EXP 26
10788: PPUSH
10789: LD_STRING DA-Lab-3
10791: PPUSH
10792: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10796: LD_EXP 26
10800: PPUSH
10801: LD_STRING DA-Lab-4
10803: PPUSH
10804: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10808: LD_EXP 26
10812: PPUSH
10813: LD_STRING DA-Lab-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10820: LD_EXP 15
10824: PPUSH
10825: LD_STRING DH-Lab-6
10827: PPUSH
10828: CALL_OW 88
// DialogueOff ;
10832: CALL_OW 7
// end ;
10836: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10837: LD_INT 7
10839: PPUSH
10840: LD_INT 2
10842: PPUSH
10843: CALL_OW 321
10847: PUSH
10848: LD_INT 2
10850: EQUAL
10851: PUSH
10852: LD_EXP 16
10856: PPUSH
10857: CALL_OW 302
10861: AND
10862: IFFALSE 11031
10864: GO 10866
10866: DISABLE
// begin DialogueOn ;
10867: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10871: LD_EXP 16
10875: PPUSH
10876: LD_STRING DG-Opt-1
10878: PPUSH
10879: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10883: LD_EXP 15
10887: PPUSH
10888: LD_STRING DH-Opt-2
10890: PPUSH
10891: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10895: LD_EXP 16
10899: PPUSH
10900: LD_STRING DG-Opt-3
10902: PPUSH
10903: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10907: LD_EXP 16
10911: PPUSH
10912: LD_STRING DG-Opt-4
10914: PPUSH
10915: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10919: LD_EXP 15
10923: PPUSH
10924: LD_STRING DH-Opt-5
10926: PPUSH
10927: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10931: LD_EXP 16
10935: PPUSH
10936: LD_STRING DG-Opt-6
10938: PPUSH
10939: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10943: LD_EXP 15
10947: PPUSH
10948: LD_STRING DH-Opt-7
10950: PPUSH
10951: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10955: LD_EXP 16
10959: PPUSH
10960: LD_STRING DG-Opt-8
10962: PPUSH
10963: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10967: LD_EXP 16
10971: PPUSH
10972: LD_STRING DG-Opt-9
10974: PPUSH
10975: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10979: LD_EXP 15
10983: PPUSH
10984: LD_STRING DH-Opt-10
10986: PPUSH
10987: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10991: LD_EXP 16
10995: PPUSH
10996: LD_STRING DG-Opt-11
10998: PPUSH
10999: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11003: LD_EXP 16
11007: PPUSH
11008: LD_STRING DG-Opt-12
11010: PPUSH
11011: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11015: LD_EXP 15
11019: PPUSH
11020: LD_STRING DH-Opt-13
11022: PPUSH
11023: CALL_OW 88
// DialogueOff ;
11027: CALL_OW 7
// end ;
11031: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11032: LD_EXP 27
11036: PPUSH
11037: LD_INT 95
11039: PUSH
11040: LD_INT 7
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 23
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 26
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 72
11076: IFFALSE 11137
11078: GO 11080
11080: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11081: LD_EXP 27
11085: PPUSH
11086: LD_INT 95
11088: PUSH
11089: LD_INT 7
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 23
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 26
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 72
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PPUSH
11130: LD_STRING DArm-River
11132: PPUSH
11133: CALL_OW 88
// end ;
11137: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11138: LD_INT 40
11140: PPUSH
11141: LD_INT 2
11143: PPUSH
11144: CALL_OW 321
11148: PUSH
11149: LD_INT 2
11151: EQUAL
11152: PUSH
11153: LD_EXP 18
11157: PPUSH
11158: CALL_OW 302
11162: AND
11163: IFFALSE 11413
11165: GO 11167
11167: DISABLE
// begin DialogueOn ;
11168: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11172: LD_EXP 18
11176: PPUSH
11177: LD_STRING DI-Roc-1
11179: PPUSH
11180: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11184: LD_EXP 15
11188: PPUSH
11189: LD_STRING DH-Roc-2
11191: PPUSH
11192: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11196: LD_EXP 18
11200: PPUSH
11201: LD_STRING DI-Roc-3
11203: PPUSH
11204: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_STRING DI-Roc-4
11215: PPUSH
11216: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11220: LD_EXP 20
11224: PPUSH
11225: LD_STRING DK-Roc-5
11227: PPUSH
11228: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11232: LD_EXP 20
11236: PPUSH
11237: LD_STRING DK-Roc-6
11239: PPUSH
11240: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11244: LD_EXP 16
11248: PPUSH
11249: LD_STRING DG-Roc-7
11251: PPUSH
11252: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11256: LD_EXP 16
11260: PPUSH
11261: LD_STRING DG-Roc-8
11263: PPUSH
11264: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11268: LD_EXP 22
11272: PPUSH
11273: CALL_OW 302
11277: PUSH
11278: LD_EXP 20
11282: PPUSH
11283: CALL_OW 302
11287: AND
11288: PUSH
11289: LD_EXP 16
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: IFFALSE 11409
// begin Say ( Markov , DMar-Roc-9 ) ;
11301: LD_EXP 22
11305: PPUSH
11306: LD_STRING DMar-Roc-9
11308: PPUSH
11309: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11313: LD_EXP 22
11317: PPUSH
11318: LD_STRING DMar-Roc-10
11320: PPUSH
11321: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11325: LD_EXP 20
11329: PPUSH
11330: LD_STRING DK-Roc-11
11332: PPUSH
11333: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11337: LD_EXP 22
11341: PPUSH
11342: LD_STRING DMar-Roc-12
11344: PPUSH
11345: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11349: LD_EXP 20
11353: PPUSH
11354: LD_STRING DK-Roc-13
11356: PPUSH
11357: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11361: LD_EXP 16
11365: PPUSH
11366: LD_STRING DG-Roc-14
11368: PPUSH
11369: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11373: LD_EXP 22
11377: PPUSH
11378: LD_STRING DMar-Roc-15
11380: PPUSH
11381: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11385: LD_EXP 22
11389: PPUSH
11390: LD_STRING DMar-Roc-16
11392: PPUSH
11393: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11397: LD_EXP 20
11401: PPUSH
11402: LD_STRING DK-Roc-17
11404: PPUSH
11405: CALL_OW 88
// end ; DialogueOff ;
11409: CALL_OW 7
// end ;
11413: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11414: LD_EXP 30
11418: PPUSH
11419: CALL_OW 256
11423: PUSH
11424: LD_INT 1000
11426: LESS
11427: PUSH
11428: LD_INT 22
11430: PUSH
11431: LD_INT 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 23
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 69
11467: PUSH
11468: LD_INT 6
11470: LESS
11471: OR
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 1
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PUSH
11513: LD_INT 2
11515: LESS
11516: OR
11517: IFFALSE 12763
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
11525: PPUSH
11526: PPUSH
// begin usAttacksAllowed := false ;
11527: LD_ADDR_EXP 6
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// usSurrender := true ;
11535: LD_ADDR_EXP 7
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11543: LD_INT 1
11545: PPUSH
11546: LD_INT 2
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 80
// if IsDead ( usCommander ) then
11559: LD_EXP 30
11563: PPUSH
11564: CALL_OW 301
11568: IFFALSE 11572
// exit ;
11570: GO 12763
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 60
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11627
// ComStop ( i ) ;
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 141
11625: GO 11613
11627: POP
11628: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: LD_INT 50
11649: PUSH
11650: EMPTY
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 21
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11694
// SetLives ( i , 251 ) ;
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_INT 251
11687: PPUSH
11688: CALL_OW 234
11692: GO 11677
11694: POP
11695: POP
// InGameOn ;
11696: CALL_OW 8
// ComExit ( usCommander ) ;
11700: LD_EXP 30
11704: PPUSH
11705: CALL 53403 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_INT 81
11716: PPUSH
11717: LD_INT 143
11719: PPUSH
11720: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11724: LD_EXP 30
11728: PPUSH
11729: LD_INT 81
11731: PPUSH
11732: LD_INT 139
11734: PPUSH
11735: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11739: LD_INT 81
11741: PPUSH
11742: LD_INT 144
11744: PPUSH
11745: LD_INT 2
11747: PPUSH
11748: LD_INT 10
11750: NEG
11751: PPUSH
11752: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11756: LD_EXP 30
11760: PPUSH
11761: CALL_OW 87
// wait ( 0 0$2 ) ;
11765: LD_INT 70
11767: PPUSH
11768: CALL_OW 67
// if not IsOk ( usCommander ) then
11772: LD_EXP 30
11776: PPUSH
11777: CALL_OW 302
11781: NOT
11782: IFFALSE 11796
// SetLives ( usCommander , 251 ) ;
11784: LD_EXP 30
11788: PPUSH
11789: LD_INT 251
11791: PPUSH
11792: CALL_OW 234
// Say ( usCommander , DCa-Surrender-1 ) ;
11796: LD_EXP 30
11800: PPUSH
11801: LD_STRING DCa-Surrender-1
11803: PPUSH
11804: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11808: LD_EXP 15
11812: PPUSH
11813: LD_STRING DH-Surrender-2
11815: PPUSH
11816: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11820: LD_EXP 15
11824: PPUSH
11825: CALL_OW 310
11829: PPUSH
11830: CALL_OW 247
11834: PUSH
11835: LD_INT 3
11837: EQUAL
11838: IFFALSE 11856
// begin ComExit ( Heike ) ;
11840: LD_EXP 15
11844: PPUSH
11845: CALL 53403 0 1
// wait ( 3 ) ;
11849: LD_INT 3
11851: PPUSH
11852: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11856: LD_EXP 15
11860: PPUSH
11861: LD_INT 82
11863: PPUSH
11864: LD_INT 133
11866: PPUSH
11867: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11871: LD_EXP 15
11875: PPUSH
11876: LD_EXP 30
11880: PPUSH
11881: CALL_OW 179
// wait ( 0 0$3 ) ;
11885: LD_INT 105
11887: PPUSH
11888: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11892: LD_EXP 15
11896: PPUSH
11897: LD_STRING DH-Surrender-3
11899: PPUSH
11900: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11904: LD_EXP 15
11908: PPUSH
11909: LD_STRING DH-Surrender-4
11911: PPUSH
11912: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11916: LD_INT 81
11918: PPUSH
11919: LD_INT 144
11921: PPUSH
11922: LD_INT 2
11924: PPUSH
11925: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11929: LD_INT 1
11931: PPUSH
11932: LD_INT 2
11934: PPUSH
11935: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_INT 22
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 69
11979: PUSH
11980: FOR_IN
11981: IFFALSE 11994
// ComExit ( i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL 53403 0 1
11992: GO 11980
11994: POP
11995: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 4
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12030: LD_ADDR_VAR 0 2
12034: PUSH
12035: LD_INT 22
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 50
12050: PUSH
12051: EMPTY
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: ST_TO_ADDR
// if sci and hurts then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_VAR 0 2
12076: AND
12077: IFFALSE 12139
// begin for i := 1 to hurts do
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: DOUBLE
12085: LD_INT 1
12087: DEC
12088: ST_TO_ADDR
12089: LD_VAR 0 2
12093: PUSH
12094: FOR_TO
12095: IFFALSE 12137
// if i <= sci then
12097: LD_VAR 0 1
12101: PUSH
12102: LD_VAR 0 3
12106: LESSEQUAL
12107: IFFALSE 12135
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12109: LD_VAR 0 3
12113: PUSH
12114: LD_VAR 0 1
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 2
12124: PUSH
12125: LD_VAR 0 1
12129: ARRAY
12130: PPUSH
12131: CALL_OW 188
12135: GO 12094
12137: POP
12138: POP
// end ; if IsOk ( Givi ) then
12139: LD_EXP 16
12143: PPUSH
12144: CALL_OW 302
12148: IFFALSE 12164
// Say ( Givi , DG-Surrender-5 ) else
12150: LD_EXP 16
12154: PPUSH
12155: LD_STRING DG-Surrender-5
12157: PPUSH
12158: CALL_OW 88
12162: GO 12176
// Say ( Heike , DH-Surrender-a-5 ) ;
12164: LD_EXP 15
12168: PPUSH
12169: LD_STRING DH-Surrender-a-5
12171: PPUSH
12172: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12176: LD_EXP 30
12180: PPUSH
12181: LD_STRING DCa-Surrender-6
12183: PPUSH
12184: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12188: LD_EXP 30
12192: PPUSH
12193: LD_STRING DCa-Surrender-7
12195: PPUSH
12196: CALL_OW 88
// if IsOk ( Givi ) then
12200: LD_EXP 16
12204: PPUSH
12205: CALL_OW 302
12209: IFFALSE 12225
// Say ( Givi , DG-Surrender-8 ) else
12211: LD_EXP 16
12215: PPUSH
12216: LD_STRING DG-Surrender-8
12218: PPUSH
12219: CALL_OW 88
12223: GO 12237
// Say ( Heike , DH-Surrender-a-8 ) ;
12225: LD_EXP 15
12229: PPUSH
12230: LD_STRING DH-Surrender-a-8
12232: PPUSH
12233: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
12237: LD_EXP 30
12241: PPUSH
12242: LD_STRING DCa-Surrender-9
12244: PPUSH
12245: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
12249: LD_EXP 15
12253: PPUSH
12254: LD_STRING DH-Surrender-10
12256: PPUSH
12257: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
12261: LD_EXP 30
12265: PPUSH
12266: LD_STRING DCa-Surrender-11
12268: PPUSH
12269: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
12273: LD_EXP 15
12277: PPUSH
12278: LD_STRING DH-Surrender-12
12280: PPUSH
12281: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
12285: LD_EXP 30
12289: PPUSH
12290: LD_STRING DCa-Surrender-13
12292: PPUSH
12293: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
12297: LD_EXP 30
12301: PPUSH
12302: LD_STRING DCa-Surrender-14
12304: PPUSH
12305: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
12309: LD_EXP 30
12313: PPUSH
12314: LD_STRING DCa-Surrender-15
12316: PPUSH
12317: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12321: LD_EXP 30
12325: PPUSH
12326: LD_STRING DCa-Surrender-16
12328: PPUSH
12329: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12333: LD_EXP 20
12337: PPUSH
12338: LD_STRING DK-Surrender-17
12340: PPUSH
12341: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12345: LD_EXP 24
12349: PPUSH
12350: LD_STRING DO-Surrender-18
12352: PPUSH
12353: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12357: LD_EXP 24
12361: PPUSH
12362: LD_STRING DO-Surrender-19
12364: PPUSH
12365: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12369: LD_EXP 25
12373: PPUSH
12374: LD_STRING DKs-Surrender-20
12376: PPUSH
12377: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12381: LD_EXP 25
12385: PPUSH
12386: LD_STRING DKs-Surrender-21
12388: PPUSH
12389: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12393: LD_EXP 22
12397: PPUSH
12398: LD_STRING DMar-Surrender-22
12400: PPUSH
12401: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12405: LD_EXP 22
12409: PPUSH
12410: LD_STRING DMar-Surrender-23
12412: PPUSH
12413: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12417: LD_EXP 21
12421: PPUSH
12422: LD_STRING DS-Surrender-24
12424: PPUSH
12425: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12429: LD_EXP 26
12433: PPUSH
12434: LD_STRING DA-Surrender-25
12436: PPUSH
12437: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12441: LD_EXP 18
12445: PPUSH
12446: LD_STRING DI-Surrender-26
12448: PPUSH
12449: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12453: LD_EXP 19
12457: PPUSH
12458: LD_STRING DKam-Surrender-27
12460: PPUSH
12461: CALL_OW 88
// if IsOk ( Givi ) then
12465: LD_EXP 16
12469: PPUSH
12470: CALL_OW 302
12474: IFFALSE 12514
// begin Say ( Givi , DG-Surrender-28 ) ;
12476: LD_EXP 16
12480: PPUSH
12481: LD_STRING DG-Surrender-28
12483: PPUSH
12484: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12488: LD_EXP 16
12492: PPUSH
12493: LD_STRING DG-Surrender-29
12495: PPUSH
12496: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12500: LD_EXP 16
12504: PPUSH
12505: LD_STRING DG-Surrender-30
12507: PPUSH
12508: CALL_OW 88
// end else
12512: GO 12550
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12514: LD_EXP 15
12518: PPUSH
12519: LD_STRING DH-Surrender-a-28
12521: PPUSH
12522: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12526: LD_EXP 15
12530: PPUSH
12531: LD_STRING DH-Surrender-a-29
12533: PPUSH
12534: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12538: LD_EXP 15
12542: PPUSH
12543: LD_STRING DH-Surrender-a-30
12545: PPUSH
12546: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12550: CALL 14510 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12554: LD_INT 22
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: PPUSH
12569: LD_INT 176
12571: PUSH
12572: LD_INT 123
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: PPUSH
12582: CALL 55609 0 2
// if not IsEnvironment ( 190 , 150 ) then
12586: LD_INT 190
12588: PPUSH
12589: LD_INT 150
12591: PPUSH
12592: CALL_OW 351
12596: NOT
12597: IFFALSE 12616
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12599: LD_INT 190
12601: PPUSH
12602: LD_INT 150
12604: PPUSH
12605: LD_INT 2
12607: PPUSH
12608: LD_INT 8
12610: NEG
12611: PPUSH
12612: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12616: LD_INT 193
12618: PPUSH
12619: LD_INT 150
12621: PPUSH
12622: CALL_OW 84
// if IsOk ( Markov ) then
12626: LD_EXP 22
12630: PPUSH
12631: CALL_OW 302
12635: IFFALSE 12651
// Say ( Markov , DMar-Surrender-31 ) else
12637: LD_EXP 22
12641: PPUSH
12642: LD_STRING DMar-Surrender-31
12644: PPUSH
12645: CALL_OW 88
12649: GO 12708
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12651: LD_EXP 27
12655: PPUSH
12656: LD_INT 26
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: PPUSH
12671: LD_STRING DArm-Surrender-a-31
12673: PPUSH
12674: CALL 224 0 2
12678: NOT
12679: IFFALSE 12708
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12681: LD_EXP 27
12685: PPUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 72
12700: PPUSH
12701: LD_STRING DArf-Surrender-a-31
12703: PPUSH
12704: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12708: LD_EXP 15
12712: PPUSH
12713: LD_STRING DH-Surrender-32
12715: PPUSH
12716: CALL_OW 88
// InGameOff ;
12720: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12724: LD_STRING M2
12726: PPUSH
12727: CALL_OW 337
// wait ( 0 0$20 ) ;
12731: LD_INT 700
12733: PPUSH
12734: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12738: CALL 14872 0 0
// russianAttack := true ;
12742: LD_ADDR_EXP 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12750: LD_INT 190
12752: PPUSH
12753: LD_INT 150
12755: PPUSH
12756: LD_INT 2
12758: PPUSH
12759: CALL_OW 331
// end ;
12763: PPOPN 3
12765: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12766: LD_EXP 11
12770: PUSH
12771: LD_INT 2
12773: PPUSH
12774: CALL_OW 463
12778: NOT
12779: AND
12780: PUSH
12781: LD_EXP 15
12785: PPUSH
12786: CALL_OW 302
12790: AND
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 3
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: PUSH
12822: LD_EXP 22
12826: PPUSH
12827: CALL_OW 302
12831: PUSH
12832: LD_EXP 27
12836: PPUSH
12837: LD_INT 50
12839: PUSH
12840: EMPTY
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: OR
12848: AND
12849: IFFALSE 13077
12851: GO 12853
12853: DISABLE
// begin DialogueOn ;
12854: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12858: LD_EXP 15
12862: PPUSH
12863: LD_STRING DH-Heavy-1
12865: PPUSH
12866: CALL_OW 88
// if IsOk ( Markov ) then
12870: LD_EXP 22
12874: PPUSH
12875: CALL_OW 302
12879: IFFALSE 13004
// begin Say ( Markov , DMar-Heavy-2 ) ;
12881: LD_EXP 22
12885: PPUSH
12886: LD_STRING DMar-Heavy-2
12888: PPUSH
12889: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12930: LD_EXP 22
12934: PPUSH
12935: LD_STRING DMar-Heavy-3
12937: PPUSH
12938: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12942: LD_EXP 22
12946: PPUSH
12947: LD_STRING DMar-Heavy-4
12949: PPUSH
12950: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12954: LD_EXP 22
12958: PPUSH
12959: LD_STRING DMar-Heavy-5
12961: PPUSH
12962: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12966: LD_EXP 22
12970: PPUSH
12971: LD_STRING DMar-Heavy-6
12973: PPUSH
12974: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12978: LD_EXP 15
12982: PPUSH
12983: LD_STRING DH-Heavy-7
12985: PPUSH
12986: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12990: LD_EXP 15
12994: PPUSH
12995: LD_STRING DH-Heavy-8
12997: PPUSH
12998: CALL_OW 88
// end else
13002: GO 13061
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13004: LD_EXP 27
13008: PPUSH
13009: LD_INT 26
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: PPUSH
13024: LD_STRING DArm-Heavy-a-2
13026: PPUSH
13027: CALL 224 0 2
13031: NOT
13032: IFFALSE 13061
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13034: LD_EXP 27
13038: PPUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 72
13053: PPUSH
13054: LD_STRING DArf-Heavy-a-2
13056: PPUSH
13057: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13061: LD_EXP 15
13065: PPUSH
13066: LD_STRING DH-Heavy-9
13068: PPUSH
13069: CALL_OW 88
// DialogueOff ;
13073: CALL_OW 7
// end ;
13077: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13078: LD_EXP 34
13082: PPUSH
13083: LD_INT 101
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 72
13097: PUSH
13098: LD_EXP 15
13102: PPUSH
13103: CALL_OW 302
13107: AND
13108: PUSH
13109: LD_EXP 7
13113: NOT
13114: AND
13115: IFFALSE 13258
13117: GO 13119
13119: DISABLE
// begin DialogueOn ;
13120: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13124: LD_EXP 34
13128: PPUSH
13129: LD_INT 101
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PPUSH
13144: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13148: LD_EXP 15
13152: PPUSH
13153: LD_STRING DH-Flank-1
13155: PPUSH
13156: CALL_OW 88
// if IsOk ( Mike ) then
13160: LD_EXP 17
13164: PPUSH
13165: CALL_OW 302
13169: IFFALSE 13185
// Say ( Mike , DM-Flank-2 ) else
13171: LD_EXP 17
13175: PPUSH
13176: LD_STRING DM-Flank-2
13178: PPUSH
13179: CALL_OW 88
13183: GO 13242
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13185: LD_EXP 27
13189: PPUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: PPUSH
13205: LD_STRING DArm-Flank-a-2
13207: PPUSH
13208: CALL 224 0 2
13212: NOT
13213: IFFALSE 13242
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13215: LD_EXP 27
13219: PPUSH
13220: LD_INT 26
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: PPUSH
13235: LD_STRING DArm-Flank-a-2
13237: PPUSH
13238: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
13242: LD_EXP 15
13246: PPUSH
13247: LD_STRING DH-Flank-3
13249: PPUSH
13250: CALL_OW 88
// DialogueOff ;
13254: CALL_OW 7
// end ;
13258: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
13259: LD_EXP 10
13263: PUSH
13264: LD_EXP 7
13268: NOT
13269: AND
13270: IFFALSE 13494
13272: GO 13274
13274: DISABLE
// begin DialogueOn ;
13275: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
13279: LD_EXP 15
13283: PPUSH
13284: LD_STRING DH-USRC-1
13286: PPUSH
13287: CALL_OW 88
// if IsOk ( Markov ) then
13291: LD_EXP 22
13295: PPUSH
13296: CALL_OW 302
13300: IFFALSE 13316
// Say ( Markov , DMar-USRC-2 ) else
13302: LD_EXP 22
13306: PPUSH
13307: LD_STRING DMar-USRC-2
13309: PPUSH
13310: CALL_OW 88
13314: GO 13373
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
13316: LD_EXP 27
13320: PPUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: PPUSH
13336: LD_STRING DArm-USRC-a-2
13338: PPUSH
13339: CALL 224 0 2
13343: NOT
13344: IFFALSE 13373
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13346: LD_EXP 27
13350: PPUSH
13351: LD_INT 26
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 72
13365: PPUSH
13366: LD_STRING DArf-USRC-a-2
13368: PPUSH
13369: CALL 224 0 2
// DialogueOff ;
13373: CALL_OW 7
// wait ( 0 0$10 ) ;
13377: LD_INT 350
13379: PPUSH
13380: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13384: LD_EXP 15
13388: PPUSH
13389: LD_STRING DH-USRC-3
13391: PPUSH
13392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13396: LD_INT 35
13398: PPUSH
13399: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13403: LD_INT 2
13405: PPUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 36
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: CALL_OW 292
13443: IFFALSE 13396
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13445: LD_INT 22
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 30
13457: PUSH
13458: LD_INT 36
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13482: LD_EXP 15
13486: PPUSH
13487: LD_STRING DH-USRCFound-1
13489: PPUSH
13490: CALL_OW 88
// end ;
13494: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13495: LD_EXP 20
13499: PPUSH
13500: CALL_OW 256
13504: PUSH
13505: LD_INT 3
13507: LESS
13508: IFFALSE 13545
13510: GO 13512
13512: DISABLE
// begin DialogueOn ;
13513: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13517: LD_EXP 20
13521: PPUSH
13522: LD_STRING DK-Dead-1
13524: PPUSH
13525: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13529: LD_EXP 20
13533: PPUSH
13534: LD_STRING DK-Dead-2
13536: PPUSH
13537: CALL_OW 91
// DialogueOff ;
13541: CALL_OW 7
// end ;
13545: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13546: LD_INT 22
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 2
13558: PUSH
13559: LD_INT 35
13561: PUSH
13562: LD_INT 28
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 34
13571: PUSH
13572: LD_INT 28
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: IFFALSE 13605
13594: GO 13596
13596: DISABLE
// hasRockets := true ;
13597: LD_ADDR_EXP 9
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
13605: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13606: LD_EXP 8
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: NOT
13626: AND
13627: IFFALSE 14289
13629: GO 13631
13631: DISABLE
// begin DialogueOn ;
13632: CALL_OW 6
// if vehLossCounter = 0 then
13636: LD_EXP 14
13640: PUSH
13641: LD_INT 0
13643: EQUAL
13644: IFFALSE 13653
// SetAchievement ( ACH_UNTOUCH ) ;
13646: LD_STRING ACH_UNTOUCH
13648: PPUSH
13649: CALL_OW 543
// if tick < 35 35$00 then
13653: LD_OWVAR 1
13657: PUSH
13658: LD_INT 73500
13660: LESS
13661: IFFALSE 13670
// SetAchievement ( ACH_HSPEED_7 ) ;
13663: LD_STRING ACH_HSPEED_7
13665: PPUSH
13666: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
13670: LD_EXP 15
13674: PPUSH
13675: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13679: LD_EXP 15
13683: PPUSH
13684: LD_STRING DH-End-1
13686: PPUSH
13687: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13691: LD_EXP 23
13695: PPUSH
13696: LD_STRING DShar-End-2
13698: PPUSH
13699: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13703: LD_EXP 20
13707: PPUSH
13708: LD_STRING DK-End-3
13710: PPUSH
13711: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13715: LD_EXP 15
13719: PPUSH
13720: LD_STRING DH-End-4
13722: PPUSH
13723: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13727: LD_EXP 23
13731: PPUSH
13732: LD_STRING DShar-End-5
13734: PPUSH
13735: CALL_OW 94
// if IsOk ( Markov ) then
13739: LD_EXP 22
13743: PPUSH
13744: CALL_OW 302
13748: IFFALSE 13762
// Say ( Kaia , DK-End-6 ) ;
13750: LD_EXP 20
13754: PPUSH
13755: LD_STRING DK-End-6
13757: PPUSH
13758: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13762: LD_EXP 20
13766: PPUSH
13767: LD_STRING DK-End-7
13769: PPUSH
13770: CALL_OW 88
// if IsOk ( Kaia ) then
13774: LD_EXP 20
13778: PPUSH
13779: CALL_OW 302
13783: IFFALSE 13821
// begin Say ( Givi , DG-End-8 ) ;
13785: LD_EXP 16
13789: PPUSH
13790: LD_STRING DG-End-8
13792: PPUSH
13793: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13797: LD_EXP 16
13801: PPUSH
13802: LD_STRING DG-End-9
13804: PPUSH
13805: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13809: LD_EXP 15
13813: PPUSH
13814: LD_STRING DH-End-10
13816: PPUSH
13817: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13821: LD_EXP 15
13825: PPUSH
13826: LD_STRING DH-End-11
13828: PPUSH
13829: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13833: LD_INT 7
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 321
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: IFFALSE 13861
// AddMedal ( med1 , 1 ) else
13849: LD_STRING med1
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 101
13859: GO 13872
// AddMedal ( med1 , - 1 ) ;
13861: LD_STRING med1
13863: PPUSH
13864: LD_INT 1
13866: NEG
13867: PPUSH
13868: CALL_OW 101
// if hasRockets then
13872: LD_EXP 9
13876: IFFALSE 13890
// AddMedal ( med2 , 1 ) else
13878: LD_STRING med2
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 101
13888: GO 13901
// AddMedal ( med2 , - 1 ) ;
13890: LD_STRING med2
13892: PPUSH
13893: LD_INT 1
13895: NEG
13896: PPUSH
13897: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13901: LD_OWVAR 1
13905: PUSH
13906: LD_INT 105000
13908: PUSH
13909: LD_INT 94500
13911: PUSH
13912: LD_INT 84000
13914: PUSH
13915: LD_INT 73500
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: LD_OWVAR 67
13928: ARRAY
13929: LESS
13930: IFFALSE 13944
// AddMedal ( med3 , 1 ) else
13932: LD_STRING med3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 101
13942: GO 13955
// AddMedal ( med3 , - 1 ) ;
13944: LD_STRING med3
13946: PPUSH
13947: LD_INT 1
13949: NEG
13950: PPUSH
13951: CALL_OW 101
// GiveMedals ( MAIN ) ;
13955: LD_STRING MAIN
13957: PPUSH
13958: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13962: LD_INT 22
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PPUSH
14002: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14006: LD_EXP 30
14010: PPUSH
14011: LD_STRING 07_UsCommander
14013: PPUSH
14014: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14018: LD_INT 22
14020: PUSH
14021: LD_INT 1
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 23
14030: PUSH
14031: LD_INT 1
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 21
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: PUSH
14058: LD_EXP 30
14062: DIFF
14063: PPUSH
14064: LD_STRING 07_Americans
14066: PPUSH
14067: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14071: LD_EXP 15
14075: PPUSH
14076: LD_STRING 07_Heike
14078: PPUSH
14079: CALL_OW 38
// if Aviradze then
14083: LD_EXP 26
14087: IFFALSE 14101
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14089: LD_EXP 26
14093: PPUSH
14094: LD_STRING 07_Aviradze
14096: PPUSH
14097: CALL_OW 38
// if Ibrahim then
14101: LD_EXP 18
14105: IFFALSE 14119
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14107: LD_EXP 18
14111: PPUSH
14112: LD_STRING 07_Ibrahim
14114: PPUSH
14115: CALL_OW 38
// if Kamil then
14119: LD_EXP 19
14123: IFFALSE 14137
// SaveCharacters ( Kamil , 07_Kamil ) ;
14125: LD_EXP 19
14129: PPUSH
14130: LD_STRING 07_Kamil
14132: PPUSH
14133: CALL_OW 38
// if Sophia then
14137: LD_EXP 21
14141: IFFALSE 14155
// SaveCharacters ( Sophia , 07_Sophia ) ;
14143: LD_EXP 21
14147: PPUSH
14148: LD_STRING 07_Sophia
14150: PPUSH
14151: CALL_OW 38
// if Kaia then
14155: LD_EXP 20
14159: IFFALSE 14173
// SaveCharacters ( Kaia , 07_Kaia ) ;
14161: LD_EXP 20
14165: PPUSH
14166: LD_STRING 07_Kaia
14168: PPUSH
14169: CALL_OW 38
// if Givi then
14173: LD_EXP 16
14177: IFFALSE 14191
// SaveCharacters ( Givi , 07_Givi ) ;
14179: LD_EXP 16
14183: PPUSH
14184: LD_STRING 07_Givi
14186: PPUSH
14187: CALL_OW 38
// if Mike then
14191: LD_EXP 17
14195: IFFALSE 14209
// SaveCharacters ( Mike , 07_Mike ) ;
14197: LD_EXP 17
14201: PPUSH
14202: LD_STRING 07_Mike
14204: PPUSH
14205: CALL_OW 38
// if Markov then
14209: LD_EXP 22
14213: IFFALSE 14227
// SaveCharacters ( Markov , 07_Markov ) ;
14215: LD_EXP 22
14219: PPUSH
14220: LD_STRING 07_Markov
14222: PPUSH
14223: CALL_OW 38
// if Kurt then
14227: LD_EXP 25
14231: IFFALSE 14245
// SaveCharacters ( Kurt , 07_Kurt ) ;
14233: LD_EXP 25
14237: PPUSH
14238: LD_STRING 07_Kurt
14240: PPUSH
14241: CALL_OW 38
// if Olaf then
14245: LD_EXP 24
14249: IFFALSE 14263
// SaveCharacters ( Olaf , 07_Olaf ) ;
14251: LD_EXP 24
14255: PPUSH
14256: LD_STRING 07_Olaf
14258: PPUSH
14259: CALL_OW 38
// if heikeSecondSquad then
14263: LD_EXP 27
14267: IFFALSE 14281
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
14269: LD_EXP 27
14273: PPUSH
14274: LD_STRING 07_others
14276: PPUSH
14277: CALL_OW 38
// YouWin ;
14281: CALL_OW 103
// DialogueOff ;
14285: CALL_OW 7
// end ; end_of_file
14289: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
14290: LD_INT 7
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 287
14300: PUSH
14301: LD_INT 12
14303: PUSH
14304: LD_INT 10
14306: PUSH
14307: LD_INT 8
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_OWVAR 67
14323: ARRAY
14324: LESS
14325: IFFALSE 14352
14327: GO 14329
14329: DISABLE
// begin enable ;
14330: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 5
14336: PPUSH
14337: CALL_OW 12
14341: PPUSH
14342: LD_INT 7
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 55
// end ;
14352: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
14353: LD_INT 8
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 287
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 17
14372: PUSH
14373: LD_INT 14
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_OWVAR 67
14386: ARRAY
14387: LESS
14388: PUSH
14389: LD_OWVAR 1
14393: PUSH
14394: LD_INT 50400
14396: LESS
14397: AND
14398: IFFALSE 14425
14400: GO 14402
14402: DISABLE
// begin enable ;
14403: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14404: LD_INT 1
14406: PPUSH
14407: LD_INT 5
14409: PPUSH
14410: CALL_OW 12
14414: PPUSH
14415: LD_INT 8
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 55
// end ;
14425: END
// every 0 0$40 trigger tick < 8 8$10 do
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 17150
14433: LESS
14434: IFFALSE 14467
14436: GO 14438
14438: DISABLE
// begin enable ;
14439: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: PPUSH
14451: LD_INT 130
14453: PPUSH
14454: LD_INT 18
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 56
// end ;
14467: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
14468: LD_OWVAR 1
14472: PUSH
14473: LD_INT 12950
14475: LESS
14476: IFFALSE 14509
14478: GO 14480
14480: DISABLE
// begin enable ;
14481: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14482: LD_INT 1
14484: PPUSH
14485: LD_INT 5
14487: PPUSH
14488: CALL_OW 12
14492: PPUSH
14493: LD_INT 172
14495: PPUSH
14496: LD_INT 97
14498: PPUSH
14499: LD_INT 12
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 56
// end ; end_of_file
14509: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// uc_side := 3 ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// uc_nation := 3 ;
14525: LD_ADDR_OWVAR 21
14529: PUSH
14530: LD_INT 3
14532: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 184
14540: PUSH
14541: LD_INT 144
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 191
14554: PUSH
14555: LD_INT 147
14557: PUSH
14558: LD_INT 5
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 202
14568: PUSH
14569: LD_INT 151
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 210
14582: PUSH
14583: LD_INT 152
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: ST_TO_ADDR
// for i := 1 to 3 do
14600: LD_ADDR_VAR 0 2
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_INT 3
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14783
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14616: LD_INT 24
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_INT 43
14627: PUSH
14628: LD_INT 44
14630: PUSH
14631: LD_INT 46
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_VAR 0 2
14643: PUSH
14644: LD_INT 3
14646: MOD
14647: PUSH
14648: LD_INT 1
14650: PLUS
14651: ARRAY
14652: PPUSH
14653: LD_INT 40
14655: PPUSH
14656: CALL 20524 0 5
// veh := CreateVehicle ;
14660: LD_ADDR_VAR 0 5
14664: PUSH
14665: CALL_OW 45
14669: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14670: LD_VAR 0 5
14674: PPUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_VAR 0 2
14684: ARRAY
14685: PUSH
14686: LD_INT 3
14688: ARRAY
14689: PPUSH
14690: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14694: LD_VAR 0 5
14698: PPUSH
14699: LD_VAR 0 3
14703: PUSH
14704: LD_VAR 0 2
14708: ARRAY
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_VAR 0 2
14723: ARRAY
14724: PUSH
14725: LD_INT 2
14727: ARRAY
14728: PPUSH
14729: LD_INT 0
14731: PPUSH
14732: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14736: LD_INT 0
14738: PPUSH
14739: LD_INT 6
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: LD_INT 8
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: PPUSH
14763: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14767: CALL_OW 44
14771: PPUSH
14772: LD_VAR 0 5
14776: PPUSH
14777: CALL_OW 52
// end ;
14781: GO 14613
14783: POP
14784: POP
// for i := 1 to 4 do
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 4
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14865
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14801: LD_INT 0
14803: PPUSH
14804: LD_INT 6
14806: PUSH
14807: LD_INT 7
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 8
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: LD_OWVAR 67
14826: ARRAY
14827: PPUSH
14828: CALL_OW 381
// un := CreateHuman ;
14832: LD_ADDR_VAR 0 4
14836: PUSH
14837: CALL_OW 44
14841: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14842: LD_VAR 0 4
14846: PPUSH
14847: LD_INT 185
14849: PPUSH
14850: LD_INT 145
14852: PPUSH
14853: LD_INT 6
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 50
// end ;
14863: GO 14798
14865: POP
14866: POP
// end ;
14867: LD_VAR 0 1
14871: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// uc_side := 3 ;
14877: LD_ADDR_OWVAR 20
14881: PUSH
14882: LD_INT 3
14884: ST_TO_ADDR
// if Difficulty > 1 then
14885: LD_OWVAR 67
14889: PUSH
14890: LD_INT 1
14892: GREATER
14893: IFFALSE 15055
// begin uc_nation := 0 ;
14895: LD_ADDR_OWVAR 21
14899: PUSH
14900: LD_INT 0
14902: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14903: LD_ADDR_VAR 0 2
14907: PUSH
14908: DOUBLE
14909: LD_INT 1
14911: DEC
14912: ST_TO_ADDR
14913: LD_INT 4
14915: PUSH
14916: LD_INT 5
14918: PUSH
14919: LD_INT 6
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_OWVAR 67
14931: PUSH
14932: LD_INT 1
14934: PLUS
14935: ARRAY
14936: PUSH
14937: FOR_TO
14938: IFFALSE 15053
// begin hc_class := class_apeman_soldier ;
14940: LD_ADDR_OWVAR 28
14944: PUSH
14945: LD_INT 15
14947: ST_TO_ADDR
// hc_gallery :=  ;
14948: LD_ADDR_OWVAR 33
14952: PUSH
14953: LD_STRING 
14955: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14956: LD_ADDR_OWVAR 26
14960: PUSH
14961: LD_STRING Treci
14963: PUSH
14964: LD_STRING Ivan
14966: PUSH
14967: LD_STRING Yaromir
14969: PUSH
14970: LD_STRING Nadzieia
14972: PUSH
14973: LD_STRING Krasna
14975: PUSH
14976: LD_STRING Piaty
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 1
14989: PPUSH
14990: LD_INT 6
14992: PPUSH
14993: CALL_OW 12
14997: ARRAY
14998: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14999: LD_ADDR_OWVAR 31
15003: PUSH
15004: LD_INT 5
15006: PUSH
15007: LD_INT 0
15009: PUSH
15010: LD_INT 0
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: ST_TO_ADDR
// hc_sex := sex_male ;
15022: LD_ADDR_OWVAR 27
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15030: CALL_OW 44
15034: PPUSH
15035: LD_INT 178
15037: PPUSH
15038: LD_INT 148
15040: PPUSH
15041: LD_INT 6
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 50
// end ;
15051: GO 14937
15053: POP
15054: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: DOUBLE
15061: LD_INT 1
15063: DEC
15064: ST_TO_ADDR
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: LD_INT 5
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_OWVAR 67
15087: ARRAY
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15257
// begin uc_nation := 3 ;
15092: LD_ADDR_OWVAR 21
15096: PUSH
15097: LD_INT 3
15099: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15100: LD_INT 22
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: LD_INT 45
15111: PUSH
15112: LD_INT 43
15114: PUSH
15115: LD_INT 44
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 3
15130: MOD
15131: PUSH
15132: LD_INT 1
15134: PLUS
15135: ARRAY
15136: PPUSH
15137: LD_INT 44
15139: PPUSH
15140: CALL 20524 0 5
// veh := CreateVehicle ;
15144: LD_ADDR_VAR 0 3
15148: PUSH
15149: CALL_OW 45
15153: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 4
15161: PPUSH
15162: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: LD_INT 0
15176: PPUSH
15177: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15181: LD_INT 0
15183: PPUSH
15184: LD_INT 6
15186: PUSH
15187: LD_INT 7
15189: PUSH
15190: LD_INT 8
15192: PUSH
15193: LD_INT 8
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: LD_OWVAR 67
15206: ARRAY
15207: PPUSH
15208: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 178
15233: PUSH
15234: LD_INT 137
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: PPUSH
15244: CALL 55609 0 2
// wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// end ;
15255: GO 15089
15257: POP
15258: POP
// end ;
15259: LD_VAR 0 1
15263: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
15264: LD_INT 22
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 32
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 69
15292: IFFALSE 15380
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin enable ;
15301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
15302: LD_ADDR_VAR 0 2
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 32
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 69
15335: ST_TO_ADDR
// for i in tmp do
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_VAR 0 2
15345: PUSH
15346: FOR_IN
15347: IFFALSE 15378
// if GetFuel ( i ) < 3 then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 261
15358: PUSH
15359: LD_INT 3
15361: LESS
15362: IFFALSE 15376
// SetFuel ( i , 3 ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_INT 3
15371: PPUSH
15372: CALL_OW 240
15376: GO 15346
15378: POP
15379: POP
// end ;
15380: PPOPN 2
15382: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15383: LD_EXP 8
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 21
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: AND
15417: IFFALSE 15681
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
// begin enable ;
15427: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 25
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 55
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// if mech then
15476: LD_VAR 0 2
15480: IFFALSE 15550
// for i in mech do
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_VAR 0 2
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15548
// begin if IsInArea ( i , escapeArea ) then
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 13
15502: PPUSH
15503: CALL_OW 308
15507: IFFALSE 15520
// RemoveUnit ( i ) else
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 64
15518: GO 15546
// if IsOk ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 302
15529: IFFALSE 15546
// ComMoveXY ( i , 196 , 155 ) ;
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 196
15538: PPUSH
15539: LD_INT 155
15541: PPUSH
15542: CALL_OW 111
// end ;
15546: GO 15492
15548: POP
15549: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15550: LD_ADDR_VAR 0 3
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 15
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 50
15606: PUSH
15607: EMPTY
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: ST_TO_ADDR
// if tmp then
15620: LD_VAR 0 3
15624: IFFALSE 15681
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 171
15633: PUSH
15634: LD_INT 106
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 145
15643: PUSH
15644: LD_INT 69
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 132
15653: PUSH
15654: LD_INT 38
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 126
15663: PUSH
15664: LD_INT 15
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL 55609 0 2
// end ; end_of_file
15681: PPOPN 3
15683: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// if exist_mode then
15688: LD_VAR 0 2
15692: IFFALSE 15717
// unit := CreateCharacter ( prefix & ident ) else
15694: LD_ADDR_VAR 0 5
15698: PUSH
15699: LD_VAR 0 3
15703: PUSH
15704: LD_VAR 0 1
15708: STR
15709: PPUSH
15710: CALL_OW 34
15714: ST_TO_ADDR
15715: GO 15732
// unit := NewCharacter ( ident ) ;
15717: LD_ADDR_VAR 0 5
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 25
15731: ST_TO_ADDR
// result := unit ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// end ;
15742: LD_VAR 0 4
15746: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
// if not side or not nation then
15751: LD_VAR 0 1
15755: NOT
15756: PUSH
15757: LD_VAR 0 2
15761: NOT
15762: OR
15763: IFFALSE 15767
// exit ;
15765: GO 16535
// case nation of nation_american :
15767: LD_VAR 0 2
15771: PUSH
15772: LD_INT 1
15774: DOUBLE
15775: EQUAL
15776: IFTRUE 15780
15778: GO 15994
15780: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15781: LD_ADDR_VAR 0 4
15785: PUSH
15786: LD_INT 35
15788: PUSH
15789: LD_INT 45
15791: PUSH
15792: LD_INT 46
15794: PUSH
15795: LD_INT 47
15797: PUSH
15798: LD_INT 82
15800: PUSH
15801: LD_INT 83
15803: PUSH
15804: LD_INT 84
15806: PUSH
15807: LD_INT 85
15809: PUSH
15810: LD_INT 86
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 6
15821: PUSH
15822: LD_INT 15
15824: PUSH
15825: LD_INT 16
15827: PUSH
15828: LD_INT 7
15830: PUSH
15831: LD_INT 12
15833: PUSH
15834: LD_INT 13
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: LD_INT 14
15842: PUSH
15843: LD_INT 20
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 25
15854: PUSH
15855: LD_INT 32
15857: PUSH
15858: LD_INT 27
15860: PUSH
15861: LD_INT 36
15863: PUSH
15864: LD_INT 69
15866: PUSH
15867: LD_INT 39
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 40
15875: PUSH
15876: LD_INT 48
15878: PUSH
15879: LD_INT 49
15881: PUSH
15882: LD_INT 50
15884: PUSH
15885: LD_INT 51
15887: PUSH
15888: LD_INT 52
15890: PUSH
15891: LD_INT 53
15893: PUSH
15894: LD_INT 54
15896: PUSH
15897: LD_INT 55
15899: PUSH
15900: LD_INT 56
15902: PUSH
15903: LD_INT 57
15905: PUSH
15906: LD_INT 58
15908: PUSH
15909: LD_INT 59
15911: PUSH
15912: LD_INT 60
15914: PUSH
15915: LD_INT 61
15917: PUSH
15918: LD_INT 62
15920: PUSH
15921: LD_INT 80
15923: PUSH
15924: LD_INT 82
15926: PUSH
15927: LD_INT 83
15929: PUSH
15930: LD_INT 84
15932: PUSH
15933: LD_INT 85
15935: PUSH
15936: LD_INT 86
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 16459
15994: LD_INT 2
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16228
16002: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: LD_INT 35
16010: PUSH
16011: LD_INT 45
16013: PUSH
16014: LD_INT 46
16016: PUSH
16017: LD_INT 47
16019: PUSH
16020: LD_INT 82
16022: PUSH
16023: LD_INT 83
16025: PUSH
16026: LD_INT 84
16028: PUSH
16029: LD_INT 85
16031: PUSH
16032: LD_INT 87
16034: PUSH
16035: LD_INT 70
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: LD_INT 5
16052: PUSH
16053: LD_INT 6
16055: PUSH
16056: LD_INT 15
16058: PUSH
16059: LD_INT 18
16061: PUSH
16062: LD_INT 7
16064: PUSH
16065: LD_INT 17
16067: PUSH
16068: LD_INT 8
16070: PUSH
16071: LD_INT 20
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 72
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: LD_INT 69
16088: PUSH
16089: LD_INT 39
16091: PUSH
16092: LD_INT 40
16094: PUSH
16095: LD_INT 41
16097: PUSH
16098: LD_INT 42
16100: PUSH
16101: LD_INT 43
16103: PUSH
16104: LD_INT 48
16106: PUSH
16107: LD_INT 49
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: LD_INT 51
16115: PUSH
16116: LD_INT 52
16118: PUSH
16119: LD_INT 53
16121: PUSH
16122: LD_INT 54
16124: PUSH
16125: LD_INT 55
16127: PUSH
16128: LD_INT 56
16130: PUSH
16131: LD_INT 60
16133: PUSH
16134: LD_INT 61
16136: PUSH
16137: LD_INT 62
16139: PUSH
16140: LD_INT 66
16142: PUSH
16143: LD_INT 67
16145: PUSH
16146: LD_INT 68
16148: PUSH
16149: LD_INT 81
16151: PUSH
16152: LD_INT 82
16154: PUSH
16155: LD_INT 83
16157: PUSH
16158: LD_INT 84
16160: PUSH
16161: LD_INT 85
16163: PUSH
16164: LD_INT 87
16166: PUSH
16167: LD_INT 88
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: ST_TO_ADDR
16226: GO 16459
16228: LD_INT 3
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16458
16236: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16237: LD_ADDR_VAR 0 4
16241: PUSH
16242: LD_INT 46
16244: PUSH
16245: LD_INT 47
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 82
16256: PUSH
16257: LD_INT 83
16259: PUSH
16260: LD_INT 84
16262: PUSH
16263: LD_INT 85
16265: PUSH
16266: LD_INT 86
16268: PUSH
16269: LD_INT 11
16271: PUSH
16272: LD_INT 9
16274: PUSH
16275: LD_INT 20
16277: PUSH
16278: LD_INT 19
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 24
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 28
16295: PUSH
16296: LD_INT 29
16298: PUSH
16299: LD_INT 30
16301: PUSH
16302: LD_INT 31
16304: PUSH
16305: LD_INT 37
16307: PUSH
16308: LD_INT 38
16310: PUSH
16311: LD_INT 32
16313: PUSH
16314: LD_INT 27
16316: PUSH
16317: LD_INT 33
16319: PUSH
16320: LD_INT 69
16322: PUSH
16323: LD_INT 39
16325: PUSH
16326: LD_INT 34
16328: PUSH
16329: LD_INT 40
16331: PUSH
16332: LD_INT 71
16334: PUSH
16335: LD_INT 23
16337: PUSH
16338: LD_INT 44
16340: PUSH
16341: LD_INT 48
16343: PUSH
16344: LD_INT 49
16346: PUSH
16347: LD_INT 50
16349: PUSH
16350: LD_INT 51
16352: PUSH
16353: LD_INT 52
16355: PUSH
16356: LD_INT 53
16358: PUSH
16359: LD_INT 54
16361: PUSH
16362: LD_INT 55
16364: PUSH
16365: LD_INT 56
16367: PUSH
16368: LD_INT 57
16370: PUSH
16371: LD_INT 58
16373: PUSH
16374: LD_INT 59
16376: PUSH
16377: LD_INT 63
16379: PUSH
16380: LD_INT 64
16382: PUSH
16383: LD_INT 65
16385: PUSH
16386: LD_INT 82
16388: PUSH
16389: LD_INT 83
16391: PUSH
16392: LD_INT 84
16394: PUSH
16395: LD_INT 85
16397: PUSH
16398: LD_INT 86
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
16456: GO 16459
16458: POP
// if state > - 1 and state < 3 then
16459: LD_VAR 0 3
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: GREATER
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 3
16476: LESS
16477: AND
16478: IFFALSE 16535
// for i in result do
16480: LD_ADDR_VAR 0 5
16484: PUSH
16485: LD_VAR 0 4
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16533
// if GetTech ( i , side ) <> state then
16493: LD_VAR 0 5
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 321
16507: PUSH
16508: LD_VAR 0 3
16512: NONEQUAL
16513: IFFALSE 16531
// result := result diff i ;
16515: LD_ADDR_VAR 0 4
16519: PUSH
16520: LD_VAR 0 4
16524: PUSH
16525: LD_VAR 0 5
16529: DIFF
16530: ST_TO_ADDR
16531: GO 16490
16533: POP
16534: POP
// end ;
16535: LD_VAR 0 4
16539: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16540: LD_INT 0
16542: PPUSH
16543: PPUSH
16544: PPUSH
// result := true ;
16545: LD_ADDR_VAR 0 3
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16553: LD_ADDR_VAR 0 5
16557: PUSH
16558: LD_VAR 0 2
16562: PPUSH
16563: CALL_OW 480
16567: ST_TO_ADDR
// if not tmp then
16568: LD_VAR 0 5
16572: NOT
16573: IFFALSE 16577
// exit ;
16575: GO 16626
// for i in tmp do
16577: LD_ADDR_VAR 0 4
16581: PUSH
16582: LD_VAR 0 5
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16624
// if GetTech ( i , side ) <> state_researched then
16590: LD_VAR 0 4
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 321
16604: PUSH
16605: LD_INT 2
16607: NONEQUAL
16608: IFFALSE 16622
// begin result := false ;
16610: LD_ADDR_VAR 0 3
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// exit ;
16618: POP
16619: POP
16620: GO 16626
// end ;
16622: GO 16587
16624: POP
16625: POP
// end ;
16626: LD_VAR 0 3
16630: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
16645: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16646: LD_VAR 0 1
16650: NOT
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 257
16661: PUSH
16662: LD_INT 9
16664: NONEQUAL
16665: OR
16666: IFFALSE 16670
// exit ;
16668: GO 17243
// side := GetSide ( unit ) ;
16670: LD_ADDR_VAR 0 9
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 255
16684: ST_TO_ADDR
// tech_space := tech_spacanom ;
16685: LD_ADDR_VAR 0 12
16689: PUSH
16690: LD_INT 29
16692: ST_TO_ADDR
// tech_time := tech_taurad ;
16693: LD_ADDR_VAR 0 13
16697: PUSH
16698: LD_INT 28
16700: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16701: LD_ADDR_VAR 0 11
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 310
16715: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16716: LD_VAR 0 11
16720: PPUSH
16721: CALL_OW 247
16725: PUSH
16726: LD_INT 2
16728: EQUAL
16729: IFFALSE 16733
// exit ;
16731: GO 17243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16733: LD_ADDR_VAR 0 8
16737: PUSH
16738: LD_INT 81
16740: PUSH
16741: LD_VAR 0 9
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 21
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: ST_TO_ADDR
// if not tmp then
16776: LD_VAR 0 8
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 17243
// if in_unit then
16785: LD_VAR 0 11
16789: IFFALSE 16813
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16791: LD_ADDR_VAR 0 10
16795: PUSH
16796: LD_VAR 0 8
16800: PPUSH
16801: LD_VAR 0 11
16805: PPUSH
16806: CALL_OW 74
16810: ST_TO_ADDR
16811: GO 16833
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16813: LD_ADDR_VAR 0 10
16817: PUSH
16818: LD_VAR 0 8
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 74
16832: ST_TO_ADDR
// if not enemy then
16833: LD_VAR 0 10
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 17243
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16842: LD_VAR 0 11
16846: PUSH
16847: LD_VAR 0 11
16851: PPUSH
16852: LD_VAR 0 10
16856: PPUSH
16857: CALL_OW 296
16861: PUSH
16862: LD_INT 13
16864: GREATER
16865: AND
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_VAR 0 10
16876: PPUSH
16877: CALL_OW 296
16881: PUSH
16882: LD_INT 12
16884: GREATER
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17243
// missile := [ 1 ] ;
16890: LD_ADDR_VAR 0 14
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16901: LD_VAR 0 9
16905: PPUSH
16906: LD_VAR 0 12
16910: PPUSH
16911: CALL_OW 325
16915: IFFALSE 16944
// missile := Replace ( missile , missile + 1 , 2 ) ;
16917: LD_ADDR_VAR 0 14
16921: PUSH
16922: LD_VAR 0 14
16926: PPUSH
16927: LD_VAR 0 14
16931: PUSH
16932: LD_INT 1
16934: PLUS
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16944: LD_VAR 0 9
16948: PPUSH
16949: LD_VAR 0 13
16953: PPUSH
16954: CALL_OW 325
16958: PUSH
16959: LD_VAR 0 10
16963: PPUSH
16964: CALL_OW 255
16968: PPUSH
16969: LD_VAR 0 13
16973: PPUSH
16974: CALL_OW 325
16978: NOT
16979: AND
16980: IFFALSE 17009
// missile := Replace ( missile , missile + 1 , 3 ) ;
16982: LD_ADDR_VAR 0 14
16986: PUSH
16987: LD_VAR 0 14
16991: PPUSH
16992: LD_VAR 0 14
16996: PUSH
16997: LD_INT 1
16999: PLUS
17000: PPUSH
17001: LD_INT 3
17003: PPUSH
17004: CALL_OW 1
17008: ST_TO_ADDR
// if missile < 2 then
17009: LD_VAR 0 14
17013: PUSH
17014: LD_INT 2
17016: LESS
17017: IFFALSE 17021
// exit ;
17019: GO 17243
// x := GetX ( enemy ) ;
17021: LD_ADDR_VAR 0 4
17025: PUSH
17026: LD_VAR 0 10
17030: PPUSH
17031: CALL_OW 250
17035: ST_TO_ADDR
// y := GetY ( enemy ) ;
17036: LD_ADDR_VAR 0 5
17040: PUSH
17041: LD_VAR 0 10
17045: PPUSH
17046: CALL_OW 251
17050: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17051: LD_ADDR_VAR 0 6
17055: PUSH
17056: LD_VAR 0 4
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 12
17072: PLUS
17073: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17074: LD_ADDR_VAR 0 7
17078: PUSH
17079: LD_VAR 0 5
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 12
17095: PLUS
17096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17097: LD_VAR 0 6
17101: PPUSH
17102: LD_VAR 0 7
17106: PPUSH
17107: CALL_OW 488
17111: NOT
17112: IFFALSE 17134
// begin _x := x ;
17114: LD_ADDR_VAR 0 6
17118: PUSH
17119: LD_VAR 0 4
17123: ST_TO_ADDR
// _y := y ;
17124: LD_ADDR_VAR 0 7
17128: PUSH
17129: LD_VAR 0 5
17133: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_INT 1
17141: PPUSH
17142: LD_VAR 0 14
17146: PPUSH
17147: CALL_OW 12
17151: ST_TO_ADDR
// case i of 1 :
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 1
17159: DOUBLE
17160: EQUAL
17161: IFTRUE 17165
17163: GO 17182
17165: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_VAR 0 10
17175: PPUSH
17176: CALL_OW 115
17180: GO 17243
17182: LD_INT 2
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17212
17190: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_VAR 0 6
17200: PPUSH
17201: LD_VAR 0 7
17205: PPUSH
17206: CALL_OW 153
17210: GO 17243
17212: LD_INT 3
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17242
17220: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17221: LD_VAR 0 1
17225: PPUSH
17226: LD_VAR 0 6
17230: PPUSH
17231: LD_VAR 0 7
17235: PPUSH
17236: CALL_OW 154
17240: GO 17243
17242: POP
// end ;
17243: LD_VAR 0 2
17247: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
// if not unit or not building then
17256: LD_VAR 0 1
17260: NOT
17261: PUSH
17262: LD_VAR 0 2
17266: NOT
17267: OR
17268: IFFALSE 17272
// exit ;
17270: GO 17430
// x := GetX ( building ) ;
17272: LD_ADDR_VAR 0 5
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 250
17286: ST_TO_ADDR
// y := GetY ( building ) ;
17287: LD_ADDR_VAR 0 6
17291: PUSH
17292: LD_VAR 0 2
17296: PPUSH
17297: CALL_OW 251
17301: ST_TO_ADDR
// for i = 0 to 5 do
17302: LD_ADDR_VAR 0 4
17306: PUSH
17307: DOUBLE
17308: LD_INT 0
17310: DEC
17311: ST_TO_ADDR
17312: LD_INT 5
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17428
// begin _x := ShiftX ( x , i , 3 ) ;
17318: LD_ADDR_VAR 0 7
17322: PUSH
17323: LD_VAR 0 5
17327: PPUSH
17328: LD_VAR 0 4
17332: PPUSH
17333: LD_INT 3
17335: PPUSH
17336: CALL_OW 272
17340: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17341: LD_ADDR_VAR 0 8
17345: PUSH
17346: LD_VAR 0 6
17350: PPUSH
17351: LD_VAR 0 4
17355: PPUSH
17356: LD_INT 3
17358: PPUSH
17359: CALL_OW 273
17363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17364: LD_VAR 0 7
17368: PPUSH
17369: LD_VAR 0 8
17373: PPUSH
17374: CALL_OW 488
17378: NOT
17379: IFFALSE 17383
// continue ;
17381: GO 17315
// if HexInfo ( _x , _y ) = 0 then
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: CALL_OW 428
17397: PUSH
17398: LD_INT 0
17400: EQUAL
17401: IFFALSE 17426
// begin ComMoveXY ( unit , _x , _y ) ;
17403: LD_VAR 0 1
17407: PPUSH
17408: LD_VAR 0 7
17412: PPUSH
17413: LD_VAR 0 8
17417: PPUSH
17418: CALL_OW 111
// exit ;
17422: POP
17423: POP
17424: GO 17430
// end ; end ;
17426: GO 17315
17428: POP
17429: POP
// end ;
17430: LD_VAR 0 3
17434: RET
// export function ScanBase ( side , base_area ) ; begin
17435: LD_INT 0
17437: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 81
17450: PUSH
17451: LD_VAR 0 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 70
17464: ST_TO_ADDR
// end ;
17465: LD_VAR 0 3
17469: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
// result := false ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// side := GetSide ( unit ) ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 255
17498: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17499: LD_ADDR_VAR 0 4
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 248
17513: ST_TO_ADDR
// case nat of 1 :
17514: LD_VAR 0 4
17518: PUSH
17519: LD_INT 1
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17538
17527: POP
// tech := tech_lassight ; 2 :
17528: LD_ADDR_VAR 0 5
17532: PUSH
17533: LD_INT 12
17535: ST_TO_ADDR
17536: GO 17577
17538: LD_INT 2
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17557
17546: POP
// tech := tech_mortar ; 3 :
17547: LD_ADDR_VAR 0 5
17551: PUSH
17552: LD_INT 41
17554: ST_TO_ADDR
17555: GO 17577
17557: LD_INT 3
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17576
17565: POP
// tech := tech_bazooka ; end ;
17566: LD_ADDR_VAR 0 5
17570: PUSH
17571: LD_INT 44
17573: ST_TO_ADDR
17574: GO 17577
17576: POP
// if Researched ( side , tech ) then
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_VAR 0 5
17586: PPUSH
17587: CALL_OW 325
17591: IFFALSE 17618
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 5
17600: PUSH
17601: LD_INT 8
17603: PUSH
17604: LD_INT 9
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_VAR 0 4
17616: ARRAY
17617: ST_TO_ADDR
// end ;
17618: LD_VAR 0 2
17622: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
17627: PPUSH
// if not mines then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17637: LD_ADDR_VAR 0 5
17641: PUSH
17642: LD_INT 81
17644: PUSH
17645: LD_VAR 0 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// for i in mines do
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17779
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17693: LD_VAR 0 4
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 4
17706: PUSH
17707: LD_INT 2
17709: ARRAY
17710: PPUSH
17711: CALL_OW 458
17715: NOT
17716: IFFALSE 17720
// continue ;
17718: GO 17690
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: LD_VAR 0 4
17733: PUSH
17734: LD_INT 2
17736: ARRAY
17737: PPUSH
17738: CALL_OW 428
17742: PUSH
17743: LD_VAR 0 5
17747: IN
17748: IFFALSE 17777
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17750: LD_VAR 0 4
17754: PUSH
17755: LD_INT 1
17757: ARRAY
17758: PPUSH
17759: LD_VAR 0 4
17763: PUSH
17764: LD_INT 2
17766: ARRAY
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 456
// end ;
17777: GO 17690
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 3
17785: RET
// export function Count ( array ) ; begin
17786: LD_INT 0
17788: PPUSH
// result := array + 0 ;
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_VAR 0 1
17798: PUSH
17799: LD_INT 0
17801: PLUS
17802: ST_TO_ADDR
// end ;
17803: LD_VAR 0 2
17807: RET
// export function IsEmpty ( building ) ; begin
17808: LD_INT 0
17810: PPUSH
// if not building then
17811: LD_VAR 0 1
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17863
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_VAR 0 1
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 255
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 58
17849: PUSH
17850: EMPTY
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: IN
17862: ST_TO_ADDR
// end ;
17863: LD_VAR 0 2
17867: RET
// export function IsNotFull ( building ) ; var places ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
// if not building then
17872: LD_VAR 0 1
17876: NOT
17877: IFFALSE 17881
// exit ;
17879: GO 17909
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17881: LD_ADDR_VAR 0 2
17885: PUSH
17886: LD_VAR 0 1
17890: PPUSH
17891: LD_INT 3
17893: PUSH
17894: LD_INT 62
17896: PUSH
17897: EMPTY
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 72
17908: ST_TO_ADDR
// end ;
17909: LD_VAR 0 2
17913: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17914: LD_INT 0
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
// tmp := [ ] ;
17920: LD_ADDR_VAR 0 3
17924: PUSH
17925: EMPTY
17926: ST_TO_ADDR
// list := [ ] ;
17927: LD_ADDR_VAR 0 5
17931: PUSH
17932: EMPTY
17933: ST_TO_ADDR
// for i = 16 to 25 do
17934: LD_ADDR_VAR 0 4
17938: PUSH
17939: DOUBLE
17940: LD_INT 16
17942: DEC
17943: ST_TO_ADDR
17944: LD_INT 25
17946: PUSH
17947: FOR_TO
17948: IFFALSE 18021
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 22
17962: PUSH
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 255
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 91
17979: PUSH
17980: LD_VAR 0 1
17984: PUSH
17985: LD_INT 6
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 30
17995: PUSH
17996: LD_VAR 0 4
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: ADD
18018: ST_TO_ADDR
18019: GO 17947
18021: POP
18022: POP
// for i = 1 to tmp do
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: DOUBLE
18029: LD_INT 1
18031: DEC
18032: ST_TO_ADDR
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18127
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_VAR 0 5
18050: PUSH
18051: LD_VAR 0 3
18055: PUSH
18056: LD_VAR 0 4
18060: ARRAY
18061: PPUSH
18062: CALL_OW 266
18066: PUSH
18067: LD_VAR 0 3
18071: PUSH
18072: LD_VAR 0 4
18076: ARRAY
18077: PPUSH
18078: CALL_OW 250
18082: PUSH
18083: LD_VAR 0 3
18087: PUSH
18088: LD_VAR 0 4
18092: ARRAY
18093: PPUSH
18094: CALL_OW 251
18098: PUSH
18099: LD_VAR 0 3
18103: PUSH
18104: LD_VAR 0 4
18108: ARRAY
18109: PPUSH
18110: CALL_OW 254
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: ADD
18124: ST_TO_ADDR
18125: GO 18038
18127: POP
18128: POP
// result := list ;
18129: LD_ADDR_VAR 0 2
18133: PUSH
18134: LD_VAR 0 5
18138: ST_TO_ADDR
// end ;
18139: LD_VAR 0 2
18143: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
18148: PPUSH
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
// if not factory then
18153: LD_VAR 0 1
18157: NOT
18158: IFFALSE 18162
// exit ;
18160: GO 18755
// if control = control_apeman then
18162: LD_VAR 0 4
18166: PUSH
18167: LD_INT 5
18169: EQUAL
18170: IFFALSE 18279
// begin tmp := UnitsInside ( factory ) ;
18172: LD_ADDR_VAR 0 8
18176: PUSH
18177: LD_VAR 0 1
18181: PPUSH
18182: CALL_OW 313
18186: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18187: LD_VAR 0 8
18191: PPUSH
18192: LD_INT 25
18194: PUSH
18195: LD_INT 12
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 72
18206: NOT
18207: IFFALSE 18217
// control := control_manual ;
18209: LD_ADDR_VAR 0 4
18213: PUSH
18214: LD_INT 1
18216: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18217: LD_ADDR_VAR 0 8
18221: PUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL 17914 0 1
18231: ST_TO_ADDR
// if tmp then
18232: LD_VAR 0 8
18236: IFFALSE 18279
// begin for i in tmp do
18238: LD_ADDR_VAR 0 7
18242: PUSH
18243: LD_VAR 0 8
18247: PUSH
18248: FOR_IN
18249: IFFALSE 18277
// if i [ 1 ] = b_ext_radio then
18251: LD_VAR 0 7
18255: PUSH
18256: LD_INT 1
18258: ARRAY
18259: PUSH
18260: LD_INT 22
18262: EQUAL
18263: IFFALSE 18275
// begin control := control_remote ;
18265: LD_ADDR_VAR 0 4
18269: PUSH
18270: LD_INT 2
18272: ST_TO_ADDR
// break ;
18273: GO 18277
// end ;
18275: GO 18248
18277: POP
18278: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_VAR 0 2
18288: PPUSH
18289: LD_VAR 0 3
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: CALL_OW 448
18308: IFFALSE 18343
// begin result := [ chassis , engine , control , weapon ] ;
18310: LD_ADDR_VAR 0 6
18314: PUSH
18315: LD_VAR 0 2
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_VAR 0 4
18329: PUSH
18330: LD_VAR 0 5
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: ST_TO_ADDR
// exit ;
18341: GO 18755
// end ; _chassis := AvailableChassisList ( factory ) ;
18343: LD_ADDR_VAR 0 9
18347: PUSH
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 475
18357: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18358: LD_ADDR_VAR 0 11
18362: PUSH
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 476
18372: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18373: LD_ADDR_VAR 0 12
18377: PUSH
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 477
18387: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18388: LD_ADDR_VAR 0 10
18392: PUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 478
18402: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18403: LD_VAR 0 9
18407: NOT
18408: PUSH
18409: LD_VAR 0 11
18413: NOT
18414: OR
18415: PUSH
18416: LD_VAR 0 12
18420: NOT
18421: OR
18422: PUSH
18423: LD_VAR 0 10
18427: NOT
18428: OR
18429: IFFALSE 18464
// begin result := [ chassis , engine , control , weapon ] ;
18431: LD_ADDR_VAR 0 6
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: LD_VAR 0 3
18445: PUSH
18446: LD_VAR 0 4
18450: PUSH
18451: LD_VAR 0 5
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: ST_TO_ADDR
// exit ;
18462: GO 18755
// end ; if not chassis in _chassis then
18464: LD_VAR 0 2
18468: PUSH
18469: LD_VAR 0 9
18473: IN
18474: NOT
18475: IFFALSE 18501
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18477: LD_ADDR_VAR 0 2
18481: PUSH
18482: LD_VAR 0 9
18486: PUSH
18487: LD_INT 1
18489: PPUSH
18490: LD_VAR 0 9
18494: PPUSH
18495: CALL_OW 12
18499: ARRAY
18500: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18501: LD_VAR 0 2
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: CALL 18760 0 2
18515: NOT
18516: IFFALSE 18575
// repeat engine := _engine [ 1 ] ;
18518: LD_ADDR_VAR 0 3
18522: PUSH
18523: LD_VAR 0 11
18527: PUSH
18528: LD_INT 1
18530: ARRAY
18531: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18532: LD_ADDR_VAR 0 11
18536: PUSH
18537: LD_VAR 0 11
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 3
18549: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18550: LD_VAR 0 2
18554: PPUSH
18555: LD_VAR 0 3
18559: PPUSH
18560: CALL 18760 0 2
18564: PUSH
18565: LD_VAR 0 11
18569: PUSH
18570: EMPTY
18571: EQUAL
18572: OR
18573: IFFALSE 18518
// if not control in _control then
18575: LD_VAR 0 4
18579: PUSH
18580: LD_VAR 0 12
18584: IN
18585: NOT
18586: IFFALSE 18612
// control := _control [ rand ( 1 , _control ) ] ;
18588: LD_ADDR_VAR 0 4
18592: PUSH
18593: LD_VAR 0 12
18597: PUSH
18598: LD_INT 1
18600: PPUSH
18601: LD_VAR 0 12
18605: PPUSH
18606: CALL_OW 12
18610: ARRAY
18611: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18612: LD_VAR 0 2
18616: PPUSH
18617: LD_VAR 0 5
18621: PPUSH
18622: CALL 18980 0 2
18626: NOT
18627: IFFALSE 18686
// repeat weapon := _weapon [ 1 ] ;
18629: LD_ADDR_VAR 0 5
18633: PUSH
18634: LD_VAR 0 10
18638: PUSH
18639: LD_INT 1
18641: ARRAY
18642: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18643: LD_ADDR_VAR 0 10
18647: PUSH
18648: LD_VAR 0 10
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 3
18660: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18661: LD_VAR 0 2
18665: PPUSH
18666: LD_VAR 0 5
18670: PPUSH
18671: CALL 18980 0 2
18675: PUSH
18676: LD_VAR 0 10
18680: PUSH
18681: EMPTY
18682: EQUAL
18683: OR
18684: IFFALSE 18629
// result := [ ] ;
18686: LD_ADDR_VAR 0 6
18690: PUSH
18691: EMPTY
18692: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18693: LD_VAR 0 1
18697: PPUSH
18698: LD_VAR 0 2
18702: PPUSH
18703: LD_VAR 0 3
18707: PPUSH
18708: LD_VAR 0 4
18712: PPUSH
18713: LD_VAR 0 5
18717: PPUSH
18718: CALL_OW 448
18722: IFFALSE 18755
// result := [ chassis , engine , control , weapon ] ;
18724: LD_ADDR_VAR 0 6
18728: PUSH
18729: LD_VAR 0 2
18733: PUSH
18734: LD_VAR 0 3
18738: PUSH
18739: LD_VAR 0 4
18743: PUSH
18744: LD_VAR 0 5
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: ST_TO_ADDR
// end ;
18755: LD_VAR 0 6
18759: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18760: LD_INT 0
18762: PPUSH
// if not chassis or not engine then
18763: LD_VAR 0 1
18767: NOT
18768: PUSH
18769: LD_VAR 0 2
18773: NOT
18774: OR
18775: IFFALSE 18779
// exit ;
18777: GO 18975
// case engine of engine_solar :
18779: LD_VAR 0 2
18783: PUSH
18784: LD_INT 2
18786: DOUBLE
18787: EQUAL
18788: IFTRUE 18792
18790: GO 18830
18792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18793: LD_ADDR_VAR 0 3
18797: PUSH
18798: LD_INT 11
18800: PUSH
18801: LD_INT 12
18803: PUSH
18804: LD_INT 13
18806: PUSH
18807: LD_INT 14
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: LD_INT 3
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: ST_TO_ADDR
18828: GO 18959
18830: LD_INT 1
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18900
18838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_INT 11
18846: PUSH
18847: LD_INT 12
18849: PUSH
18850: LD_INT 13
18852: PUSH
18853: LD_INT 14
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 3
18864: PUSH
18865: LD_INT 4
18867: PUSH
18868: LD_INT 5
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 23
18876: PUSH
18877: LD_INT 22
18879: PUSH
18880: LD_INT 24
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: ST_TO_ADDR
18898: GO 18959
18900: LD_INT 3
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18958
18908: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_INT 13
18916: PUSH
18917: LD_INT 14
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: LD_INT 3
18925: PUSH
18926: LD_INT 4
18928: PUSH
18929: LD_INT 5
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_INT 23
18940: PUSH
18941: LD_INT 24
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
18956: GO 18959
18958: POP
// result := ( chassis in result ) ;
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_VAR 0 1
18968: PUSH
18969: LD_VAR 0 3
18973: IN
18974: ST_TO_ADDR
// end ;
18975: LD_VAR 0 3
18979: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18980: LD_INT 0
18982: PPUSH
// if not chassis or not weapon then
18983: LD_VAR 0 1
18987: NOT
18988: PUSH
18989: LD_VAR 0 2
18993: NOT
18994: OR
18995: IFFALSE 18999
// exit ;
18997: GO 20059
// case weapon of us_machine_gun :
18999: LD_VAR 0 2
19003: PUSH
19004: LD_INT 2
19006: DOUBLE
19007: EQUAL
19008: IFTRUE 19012
19010: GO 19042
19012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19013: LD_ADDR_VAR 0 3
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: LD_INT 4
19029: PUSH
19030: LD_INT 5
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: ST_TO_ADDR
19040: GO 20043
19042: LD_INT 3
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19080
19050: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19051: LD_ADDR_VAR 0 3
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 3
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
19078: GO 20043
19080: LD_INT 11
19082: DOUBLE
19083: EQUAL
19084: IFTRUE 19088
19086: GO 19118
19088: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19089: LD_ADDR_VAR 0 3
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 3
19102: PUSH
19103: LD_INT 4
19105: PUSH
19106: LD_INT 5
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: ST_TO_ADDR
19116: GO 20043
19118: LD_INT 4
19120: DOUBLE
19121: EQUAL
19122: IFTRUE 19126
19124: GO 19152
19126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19127: LD_ADDR_VAR 0 3
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 3
19137: PUSH
19138: LD_INT 4
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: ST_TO_ADDR
19150: GO 20043
19152: LD_INT 5
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19186
19160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19161: LD_ADDR_VAR 0 3
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: LD_INT 4
19174: PUSH
19175: LD_INT 5
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: ST_TO_ADDR
19184: GO 20043
19186: LD_INT 9
19188: DOUBLE
19189: EQUAL
19190: IFTRUE 19194
19192: GO 19220
19194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: LD_INT 4
19208: PUSH
19209: LD_INT 5
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: ST_TO_ADDR
19218: GO 20043
19220: LD_INT 7
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19254
19228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19229: LD_ADDR_VAR 0 3
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: LD_INT 4
19242: PUSH
19243: LD_INT 5
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: ST_TO_ADDR
19252: GO 20043
19254: LD_INT 12
19256: DOUBLE
19257: EQUAL
19258: IFTRUE 19262
19260: GO 19288
19262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19263: LD_ADDR_VAR 0 3
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 3
19273: PUSH
19274: LD_INT 4
19276: PUSH
19277: LD_INT 5
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 20043
19288: LD_INT 13
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19322
19296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: LD_INT 4
19310: PUSH
19311: LD_INT 5
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: ST_TO_ADDR
19320: GO 20043
19322: LD_INT 14
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19348
19330: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19331: LD_ADDR_VAR 0 3
19335: PUSH
19336: LD_INT 4
19338: PUSH
19339: LD_INT 5
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: ST_TO_ADDR
19346: GO 20043
19348: LD_INT 6
19350: DOUBLE
19351: EQUAL
19352: IFTRUE 19356
19354: GO 19374
19356: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19357: LD_ADDR_VAR 0 3
19361: PUSH
19362: LD_INT 4
19364: PUSH
19365: LD_INT 5
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: ST_TO_ADDR
19372: GO 20043
19374: LD_INT 10
19376: DOUBLE
19377: EQUAL
19378: IFTRUE 19382
19380: GO 19400
19382: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: LD_INT 4
19390: PUSH
19391: LD_INT 5
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: ST_TO_ADDR
19398: GO 20043
19400: LD_INT 22
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19434
19408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_INT 11
19416: PUSH
19417: LD_INT 12
19419: PUSH
19420: LD_INT 13
19422: PUSH
19423: LD_INT 14
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 20043
19434: LD_INT 23
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19468
19442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 11
19450: PUSH
19451: LD_INT 12
19453: PUSH
19454: LD_INT 13
19456: PUSH
19457: LD_INT 14
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: ST_TO_ADDR
19466: GO 20043
19468: LD_INT 24
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19502
19476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: LD_INT 11
19484: PUSH
19485: LD_INT 12
19487: PUSH
19488: LD_INT 13
19490: PUSH
19491: LD_INT 14
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
19500: GO 20043
19502: LD_INT 30
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19536
19510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_INT 11
19518: PUSH
19519: LD_INT 12
19521: PUSH
19522: LD_INT 13
19524: PUSH
19525: LD_INT 14
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 20043
19536: LD_INT 25
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19562
19544: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_INT 13
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: ST_TO_ADDR
19560: GO 20043
19562: LD_INT 27
19564: DOUBLE
19565: EQUAL
19566: IFTRUE 19570
19568: GO 19588
19570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19571: LD_ADDR_VAR 0 3
19575: PUSH
19576: LD_INT 13
19578: PUSH
19579: LD_INT 14
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: ST_TO_ADDR
19586: GO 20043
19588: LD_INT 92
19590: DOUBLE
19591: EQUAL
19592: IFTRUE 19596
19594: GO 19622
19596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19597: LD_ADDR_VAR 0 3
19601: PUSH
19602: LD_INT 11
19604: PUSH
19605: LD_INT 12
19607: PUSH
19608: LD_INT 13
19610: PUSH
19611: LD_INT 14
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: ST_TO_ADDR
19620: GO 20043
19622: LD_INT 28
19624: DOUBLE
19625: EQUAL
19626: IFTRUE 19630
19628: GO 19648
19630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19631: LD_ADDR_VAR 0 3
19635: PUSH
19636: LD_INT 13
19638: PUSH
19639: LD_INT 14
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: ST_TO_ADDR
19646: GO 20043
19648: LD_INT 29
19650: DOUBLE
19651: EQUAL
19652: IFTRUE 19656
19654: GO 19674
19656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19657: LD_ADDR_VAR 0 3
19661: PUSH
19662: LD_INT 13
19664: PUSH
19665: LD_INT 14
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: ST_TO_ADDR
19672: GO 20043
19674: LD_INT 31
19676: DOUBLE
19677: EQUAL
19678: IFTRUE 19682
19680: GO 19700
19682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19683: LD_ADDR_VAR 0 3
19687: PUSH
19688: LD_INT 13
19690: PUSH
19691: LD_INT 14
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: ST_TO_ADDR
19698: GO 20043
19700: LD_INT 26
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19726
19708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19709: LD_ADDR_VAR 0 3
19713: PUSH
19714: LD_INT 13
19716: PUSH
19717: LD_INT 14
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: ST_TO_ADDR
19724: GO 20043
19726: LD_INT 42
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19760
19734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19735: LD_ADDR_VAR 0 3
19739: PUSH
19740: LD_INT 21
19742: PUSH
19743: LD_INT 22
19745: PUSH
19746: LD_INT 23
19748: PUSH
19749: LD_INT 24
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: ST_TO_ADDR
19758: GO 20043
19760: LD_INT 43
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19794
19768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_INT 23
19782: PUSH
19783: LD_INT 24
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: ST_TO_ADDR
19792: GO 20043
19794: LD_INT 44
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19828
19802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_INT 23
19816: PUSH
19817: LD_INT 24
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: ST_TO_ADDR
19826: GO 20043
19828: LD_INT 45
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19862
19836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 22
19847: PUSH
19848: LD_INT 23
19850: PUSH
19851: LD_INT 24
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
19860: GO 20043
19862: LD_INT 49
19864: DOUBLE
19865: EQUAL
19866: IFTRUE 19870
19868: GO 19896
19870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: LD_INT 21
19878: PUSH
19879: LD_INT 22
19881: PUSH
19882: LD_INT 23
19884: PUSH
19885: LD_INT 24
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
19894: GO 20043
19896: LD_INT 51
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 19930
19904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19905: LD_ADDR_VAR 0 3
19909: PUSH
19910: LD_INT 21
19912: PUSH
19913: LD_INT 22
19915: PUSH
19916: LD_INT 23
19918: PUSH
19919: LD_INT 24
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: ST_TO_ADDR
19928: GO 20043
19930: LD_INT 52
19932: DOUBLE
19933: EQUAL
19934: IFTRUE 19938
19936: GO 19964
19938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19939: LD_ADDR_VAR 0 3
19943: PUSH
19944: LD_INT 21
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_INT 23
19952: PUSH
19953: LD_INT 24
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: ST_TO_ADDR
19962: GO 20043
19964: LD_INT 53
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 19990
19972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19973: LD_ADDR_VAR 0 3
19977: PUSH
19978: LD_INT 23
19980: PUSH
19981: LD_INT 24
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: ST_TO_ADDR
19988: GO 20043
19990: LD_INT 46
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20016
19998: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 24
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: ST_TO_ADDR
20014: GO 20043
20016: LD_INT 47
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20042
20024: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20025: LD_ADDR_VAR 0 3
20029: PUSH
20030: LD_INT 23
20032: PUSH
20033: LD_INT 24
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 20043
20042: POP
// result := ( chassis in result ) ;
20043: LD_ADDR_VAR 0 3
20047: PUSH
20048: LD_VAR 0 1
20052: PUSH
20053: LD_VAR 0 3
20057: IN
20058: ST_TO_ADDR
// end ;
20059: LD_VAR 0 3
20063: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20064: LD_INT 0
20066: PPUSH
20067: PPUSH
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
20072: PPUSH
// result := array ;
20073: LD_ADDR_VAR 0 5
20077: PUSH
20078: LD_VAR 0 1
20082: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20083: LD_VAR 0 1
20087: NOT
20088: PUSH
20089: LD_VAR 0 2
20093: NOT
20094: OR
20095: PUSH
20096: LD_VAR 0 3
20100: NOT
20101: OR
20102: PUSH
20103: LD_VAR 0 2
20107: PUSH
20108: LD_VAR 0 1
20112: GREATER
20113: OR
20114: PUSH
20115: LD_VAR 0 3
20119: PUSH
20120: LD_VAR 0 1
20124: GREATER
20125: OR
20126: IFFALSE 20130
// exit ;
20128: GO 20426
// if direction then
20130: LD_VAR 0 4
20134: IFFALSE 20198
// begin d := 1 ;
20136: LD_ADDR_VAR 0 9
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if i_from > i_to then
20144: LD_VAR 0 2
20148: PUSH
20149: LD_VAR 0 3
20153: GREATER
20154: IFFALSE 20180
// length := ( array - i_from ) + i_to else
20156: LD_ADDR_VAR 0 11
20160: PUSH
20161: LD_VAR 0 1
20165: PUSH
20166: LD_VAR 0 2
20170: MINUS
20171: PUSH
20172: LD_VAR 0 3
20176: PLUS
20177: ST_TO_ADDR
20178: GO 20196
// length := i_to - i_from ;
20180: LD_ADDR_VAR 0 11
20184: PUSH
20185: LD_VAR 0 3
20189: PUSH
20190: LD_VAR 0 2
20194: MINUS
20195: ST_TO_ADDR
// end else
20196: GO 20259
// begin d := - 1 ;
20198: LD_ADDR_VAR 0 9
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: ST_TO_ADDR
// if i_from > i_to then
20207: LD_VAR 0 2
20211: PUSH
20212: LD_VAR 0 3
20216: GREATER
20217: IFFALSE 20237
// length := i_from - i_to else
20219: LD_ADDR_VAR 0 11
20223: PUSH
20224: LD_VAR 0 2
20228: PUSH
20229: LD_VAR 0 3
20233: MINUS
20234: ST_TO_ADDR
20235: GO 20259
// length := ( array - i_to ) + i_from ;
20237: LD_ADDR_VAR 0 11
20241: PUSH
20242: LD_VAR 0 1
20246: PUSH
20247: LD_VAR 0 3
20251: MINUS
20252: PUSH
20253: LD_VAR 0 2
20257: PLUS
20258: ST_TO_ADDR
// end ; if not length then
20259: LD_VAR 0 11
20263: NOT
20264: IFFALSE 20268
// exit ;
20266: GO 20426
// tmp := array ;
20268: LD_ADDR_VAR 0 10
20272: PUSH
20273: LD_VAR 0 1
20277: ST_TO_ADDR
// for i = 1 to length do
20278: LD_ADDR_VAR 0 6
20282: PUSH
20283: DOUBLE
20284: LD_INT 1
20286: DEC
20287: ST_TO_ADDR
20288: LD_VAR 0 11
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20414
// begin for j = 1 to array do
20296: LD_ADDR_VAR 0 7
20300: PUSH
20301: DOUBLE
20302: LD_INT 1
20304: DEC
20305: ST_TO_ADDR
20306: LD_VAR 0 1
20310: PUSH
20311: FOR_TO
20312: IFFALSE 20400
// begin k := j + d ;
20314: LD_ADDR_VAR 0 8
20318: PUSH
20319: LD_VAR 0 7
20323: PUSH
20324: LD_VAR 0 9
20328: PLUS
20329: ST_TO_ADDR
// if k > array then
20330: LD_VAR 0 8
20334: PUSH
20335: LD_VAR 0 1
20339: GREATER
20340: IFFALSE 20350
// k := 1 ;
20342: LD_ADDR_VAR 0 8
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if not k then
20350: LD_VAR 0 8
20354: NOT
20355: IFFALSE 20367
// k := array ;
20357: LD_ADDR_VAR 0 8
20361: PUSH
20362: LD_VAR 0 1
20366: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20367: LD_ADDR_VAR 0 10
20371: PUSH
20372: LD_VAR 0 10
20376: PPUSH
20377: LD_VAR 0 8
20381: PPUSH
20382: LD_VAR 0 1
20386: PUSH
20387: LD_VAR 0 7
20391: ARRAY
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
// end ;
20398: GO 20311
20400: POP
20401: POP
// array := tmp ;
20402: LD_ADDR_VAR 0 1
20406: PUSH
20407: LD_VAR 0 10
20411: ST_TO_ADDR
// end ;
20412: GO 20293
20414: POP
20415: POP
// result := array ;
20416: LD_ADDR_VAR 0 5
20420: PUSH
20421: LD_VAR 0 1
20425: ST_TO_ADDR
// end ;
20426: LD_VAR 0 5
20430: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20431: LD_INT 0
20433: PPUSH
20434: PPUSH
// result := 0 ;
20435: LD_ADDR_VAR 0 3
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// if not array or not value in array then
20443: LD_VAR 0 1
20447: NOT
20448: PUSH
20449: LD_VAR 0 2
20453: PUSH
20454: LD_VAR 0 1
20458: IN
20459: NOT
20460: OR
20461: IFFALSE 20465
// exit ;
20463: GO 20519
// for i = 1 to array do
20465: LD_ADDR_VAR 0 4
20469: PUSH
20470: DOUBLE
20471: LD_INT 1
20473: DEC
20474: ST_TO_ADDR
20475: LD_VAR 0 1
20479: PUSH
20480: FOR_TO
20481: IFFALSE 20517
// if value = array [ i ] then
20483: LD_VAR 0 2
20487: PUSH
20488: LD_VAR 0 1
20492: PUSH
20493: LD_VAR 0 4
20497: ARRAY
20498: EQUAL
20499: IFFALSE 20515
// begin result := i ;
20501: LD_ADDR_VAR 0 3
20505: PUSH
20506: LD_VAR 0 4
20510: ST_TO_ADDR
// exit ;
20511: POP
20512: POP
20513: GO 20519
// end ;
20515: GO 20480
20517: POP
20518: POP
// end ;
20519: LD_VAR 0 3
20523: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20524: LD_INT 0
20526: PPUSH
// vc_chassis := chassis ;
20527: LD_ADDR_OWVAR 37
20531: PUSH
20532: LD_VAR 0 1
20536: ST_TO_ADDR
// vc_engine := engine ;
20537: LD_ADDR_OWVAR 39
20541: PUSH
20542: LD_VAR 0 2
20546: ST_TO_ADDR
// vc_control := control ;
20547: LD_ADDR_OWVAR 38
20551: PUSH
20552: LD_VAR 0 3
20556: ST_TO_ADDR
// vc_weapon := weapon ;
20557: LD_ADDR_OWVAR 40
20561: PUSH
20562: LD_VAR 0 4
20566: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20567: LD_ADDR_OWVAR 41
20571: PUSH
20572: LD_VAR 0 5
20576: ST_TO_ADDR
// end ;
20577: LD_VAR 0 6
20581: RET
// export function WantPlant ( unit ) ; var task ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
// result := false ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 437
20608: ST_TO_ADDR
// if task then
20609: LD_VAR 0 3
20613: IFFALSE 20641
// if task [ 1 ] [ 1 ] = p then
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 1
20622: ARRAY
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PUSH
20628: LD_STRING p
20630: EQUAL
20631: IFFALSE 20641
// result := true ;
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// end ;
20641: LD_VAR 0 2
20645: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20646: LD_INT 0
20648: PPUSH
20649: PPUSH
20650: PPUSH
20651: PPUSH
// if pos < 1 then
20652: LD_VAR 0 2
20656: PUSH
20657: LD_INT 1
20659: LESS
20660: IFFALSE 20664
// exit ;
20662: GO 20967
// if pos = 1 then
20664: LD_VAR 0 2
20668: PUSH
20669: LD_INT 1
20671: EQUAL
20672: IFFALSE 20705
// result := Replace ( arr , pos [ 1 ] , value ) else
20674: LD_ADDR_VAR 0 4
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_VAR 0 2
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PPUSH
20693: LD_VAR 0 3
20697: PPUSH
20698: CALL_OW 1
20702: ST_TO_ADDR
20703: GO 20967
// begin tmp := arr ;
20705: LD_ADDR_VAR 0 6
20709: PUSH
20710: LD_VAR 0 1
20714: ST_TO_ADDR
// s_arr := [ tmp ] ;
20715: LD_ADDR_VAR 0 7
20719: PUSH
20720: LD_VAR 0 6
20724: PUSH
20725: EMPTY
20726: LIST
20727: ST_TO_ADDR
// for i = 1 to pos - 1 do
20728: LD_ADDR_VAR 0 5
20732: PUSH
20733: DOUBLE
20734: LD_INT 1
20736: DEC
20737: ST_TO_ADDR
20738: LD_VAR 0 2
20742: PUSH
20743: LD_INT 1
20745: MINUS
20746: PUSH
20747: FOR_TO
20748: IFFALSE 20793
// begin tmp := tmp [ pos [ i ] ] ;
20750: LD_ADDR_VAR 0 6
20754: PUSH
20755: LD_VAR 0 6
20759: PUSH
20760: LD_VAR 0 2
20764: PUSH
20765: LD_VAR 0 5
20769: ARRAY
20770: ARRAY
20771: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20772: LD_ADDR_VAR 0 7
20776: PUSH
20777: LD_VAR 0 7
20781: PUSH
20782: LD_VAR 0 6
20786: PUSH
20787: EMPTY
20788: LIST
20789: ADD
20790: ST_TO_ADDR
// end ;
20791: GO 20747
20793: POP
20794: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20795: LD_ADDR_VAR 0 6
20799: PUSH
20800: LD_VAR 0 6
20804: PPUSH
20805: LD_VAR 0 2
20809: PUSH
20810: LD_VAR 0 2
20814: ARRAY
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: CALL_OW 1
20825: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20826: LD_ADDR_VAR 0 7
20830: PUSH
20831: LD_VAR 0 7
20835: PPUSH
20836: LD_VAR 0 7
20840: PPUSH
20841: LD_VAR 0 6
20845: PPUSH
20846: CALL_OW 1
20850: ST_TO_ADDR
// for i = s_arr downto 2 do
20851: LD_ADDR_VAR 0 5
20855: PUSH
20856: DOUBLE
20857: LD_VAR 0 7
20861: INC
20862: ST_TO_ADDR
20863: LD_INT 2
20865: PUSH
20866: FOR_DOWNTO
20867: IFFALSE 20951
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20869: LD_ADDR_VAR 0 6
20873: PUSH
20874: LD_VAR 0 7
20878: PUSH
20879: LD_VAR 0 5
20883: PUSH
20884: LD_INT 1
20886: MINUS
20887: ARRAY
20888: PPUSH
20889: LD_VAR 0 2
20893: PUSH
20894: LD_VAR 0 5
20898: PUSH
20899: LD_INT 1
20901: MINUS
20902: ARRAY
20903: PPUSH
20904: LD_VAR 0 7
20908: PUSH
20909: LD_VAR 0 5
20913: ARRAY
20914: PPUSH
20915: CALL_OW 1
20919: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20920: LD_ADDR_VAR 0 7
20924: PUSH
20925: LD_VAR 0 7
20929: PPUSH
20930: LD_VAR 0 5
20934: PUSH
20935: LD_INT 1
20937: MINUS
20938: PPUSH
20939: LD_VAR 0 6
20943: PPUSH
20944: CALL_OW 1
20948: ST_TO_ADDR
// end ;
20949: GO 20866
20951: POP
20952: POP
// result := s_arr [ 1 ] ;
20953: LD_ADDR_VAR 0 4
20957: PUSH
20958: LD_VAR 0 7
20962: PUSH
20963: LD_INT 1
20965: ARRAY
20966: ST_TO_ADDR
// end ; end ;
20967: LD_VAR 0 4
20971: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20972: LD_INT 0
20974: PPUSH
20975: PPUSH
// if not list then
20976: LD_VAR 0 1
20980: NOT
20981: IFFALSE 20985
// exit ;
20983: GO 21076
// i := list [ pos1 ] ;
20985: LD_ADDR_VAR 0 5
20989: PUSH
20990: LD_VAR 0 1
20994: PUSH
20995: LD_VAR 0 2
20999: ARRAY
21000: ST_TO_ADDR
// if not i then
21001: LD_VAR 0 5
21005: NOT
21006: IFFALSE 21010
// exit ;
21008: GO 21076
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21010: LD_ADDR_VAR 0 1
21014: PUSH
21015: LD_VAR 0 1
21019: PPUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 1
21029: PUSH
21030: LD_VAR 0 3
21034: ARRAY
21035: PPUSH
21036: CALL_OW 1
21040: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: LD_VAR 0 3
21055: PPUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: CALL_OW 1
21065: ST_TO_ADDR
// result := list ;
21066: LD_ADDR_VAR 0 4
21070: PUSH
21071: LD_VAR 0 1
21075: ST_TO_ADDR
// end ;
21076: LD_VAR 0 4
21080: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21081: LD_INT 0
21083: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21084: LD_ADDR_VAR 0 5
21088: PUSH
21089: LD_VAR 0 1
21093: PPUSH
21094: CALL_OW 250
21098: PPUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 251
21108: PPUSH
21109: LD_VAR 0 2
21113: PPUSH
21114: LD_VAR 0 3
21118: PPUSH
21119: LD_VAR 0 4
21123: PPUSH
21124: CALL 21134 0 5
21128: ST_TO_ADDR
// end ;
21129: LD_VAR 0 5
21133: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21134: LD_INT 0
21136: PPUSH
21137: PPUSH
21138: PPUSH
21139: PPUSH
// if not list then
21140: LD_VAR 0 3
21144: NOT
21145: IFFALSE 21149
// exit ;
21147: GO 21537
// result := [ ] ;
21149: LD_ADDR_VAR 0 6
21153: PUSH
21154: EMPTY
21155: ST_TO_ADDR
// for i in list do
21156: LD_ADDR_VAR 0 7
21160: PUSH
21161: LD_VAR 0 3
21165: PUSH
21166: FOR_IN
21167: IFFALSE 21369
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21169: LD_ADDR_VAR 0 9
21173: PUSH
21174: LD_VAR 0 7
21178: PPUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: LD_VAR 0 2
21188: PPUSH
21189: CALL_OW 297
21193: ST_TO_ADDR
// if not result then
21194: LD_VAR 0 6
21198: NOT
21199: IFFALSE 21225
// result := [ [ i , tmp ] ] else
21201: LD_ADDR_VAR 0 6
21205: PUSH
21206: LD_VAR 0 7
21210: PUSH
21211: LD_VAR 0 9
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: ST_TO_ADDR
21223: GO 21367
// begin if result [ result ] [ 2 ] < tmp then
21225: LD_VAR 0 6
21229: PUSH
21230: LD_VAR 0 6
21234: ARRAY
21235: PUSH
21236: LD_INT 2
21238: ARRAY
21239: PUSH
21240: LD_VAR 0 9
21244: LESS
21245: IFFALSE 21287
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21247: LD_ADDR_VAR 0 6
21251: PUSH
21252: LD_VAR 0 6
21256: PPUSH
21257: LD_VAR 0 6
21261: PUSH
21262: LD_INT 1
21264: PLUS
21265: PPUSH
21266: LD_VAR 0 7
21270: PUSH
21271: LD_VAR 0 9
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 2
21284: ST_TO_ADDR
21285: GO 21367
// for j = 1 to result do
21287: LD_ADDR_VAR 0 8
21291: PUSH
21292: DOUBLE
21293: LD_INT 1
21295: DEC
21296: ST_TO_ADDR
21297: LD_VAR 0 6
21301: PUSH
21302: FOR_TO
21303: IFFALSE 21365
// begin if tmp < result [ j ] [ 2 ] then
21305: LD_VAR 0 9
21309: PUSH
21310: LD_VAR 0 6
21314: PUSH
21315: LD_VAR 0 8
21319: ARRAY
21320: PUSH
21321: LD_INT 2
21323: ARRAY
21324: LESS
21325: IFFALSE 21363
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21327: LD_ADDR_VAR 0 6
21331: PUSH
21332: LD_VAR 0 6
21336: PPUSH
21337: LD_VAR 0 8
21341: PPUSH
21342: LD_VAR 0 7
21346: PUSH
21347: LD_VAR 0 9
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PPUSH
21356: CALL_OW 2
21360: ST_TO_ADDR
// break ;
21361: GO 21365
// end ; end ;
21363: GO 21302
21365: POP
21366: POP
// end ; end ;
21367: GO 21166
21369: POP
21370: POP
// if result and not asc then
21371: LD_VAR 0 6
21375: PUSH
21376: LD_VAR 0 4
21380: NOT
21381: AND
21382: IFFALSE 21457
// begin tmp := result ;
21384: LD_ADDR_VAR 0 9
21388: PUSH
21389: LD_VAR 0 6
21393: ST_TO_ADDR
// for i = tmp downto 1 do
21394: LD_ADDR_VAR 0 7
21398: PUSH
21399: DOUBLE
21400: LD_VAR 0 9
21404: INC
21405: ST_TO_ADDR
21406: LD_INT 1
21408: PUSH
21409: FOR_DOWNTO
21410: IFFALSE 21455
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21412: LD_ADDR_VAR 0 6
21416: PUSH
21417: LD_VAR 0 6
21421: PPUSH
21422: LD_VAR 0 9
21426: PUSH
21427: LD_VAR 0 7
21431: MINUS
21432: PUSH
21433: LD_INT 1
21435: PLUS
21436: PPUSH
21437: LD_VAR 0 9
21441: PUSH
21442: LD_VAR 0 7
21446: ARRAY
21447: PPUSH
21448: CALL_OW 1
21452: ST_TO_ADDR
21453: GO 21409
21455: POP
21456: POP
// end ; tmp := [ ] ;
21457: LD_ADDR_VAR 0 9
21461: PUSH
21462: EMPTY
21463: ST_TO_ADDR
// if mode then
21464: LD_VAR 0 5
21468: IFFALSE 21537
// begin for i = 1 to result do
21470: LD_ADDR_VAR 0 7
21474: PUSH
21475: DOUBLE
21476: LD_INT 1
21478: DEC
21479: ST_TO_ADDR
21480: LD_VAR 0 6
21484: PUSH
21485: FOR_TO
21486: IFFALSE 21525
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21488: LD_ADDR_VAR 0 9
21492: PUSH
21493: LD_VAR 0 9
21497: PPUSH
21498: LD_VAR 0 7
21502: PPUSH
21503: LD_VAR 0 6
21507: PUSH
21508: LD_VAR 0 7
21512: ARRAY
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: CALL_OW 1
21522: ST_TO_ADDR
21523: GO 21485
21525: POP
21526: POP
// result := tmp ;
21527: LD_ADDR_VAR 0 6
21531: PUSH
21532: LD_VAR 0 9
21536: ST_TO_ADDR
// end ; end ;
21537: LD_VAR 0 6
21541: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21542: LD_INT 0
21544: PPUSH
21545: PPUSH
21546: PPUSH
21547: PPUSH
21548: PPUSH
21549: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21550: LD_ADDR_VAR 0 5
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: ST_TO_ADDR
// if not x or not y then
21572: LD_VAR 0 2
21576: NOT
21577: PUSH
21578: LD_VAR 0 3
21582: NOT
21583: OR
21584: IFFALSE 21588
// exit ;
21586: GO 23238
// if not range then
21588: LD_VAR 0 4
21592: NOT
21593: IFFALSE 21603
// range := 10 ;
21595: LD_ADDR_VAR 0 4
21599: PUSH
21600: LD_INT 10
21602: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21603: LD_ADDR_VAR 0 8
21607: PUSH
21608: LD_INT 81
21610: PUSH
21611: LD_VAR 0 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 92
21622: PUSH
21623: LD_VAR 0 2
21627: PUSH
21628: LD_VAR 0 3
21632: PUSH
21633: LD_VAR 0 4
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 3
21646: PUSH
21647: LD_INT 21
21649: PUSH
21650: LD_INT 3
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: PPUSH
21666: CALL_OW 69
21670: ST_TO_ADDR
// if not tmp then
21671: LD_VAR 0 8
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 23238
// for i in tmp do
21680: LD_ADDR_VAR 0 6
21684: PUSH
21685: LD_VAR 0 8
21689: PUSH
21690: FOR_IN
21691: IFFALSE 23213
// begin points := [ 0 , 0 , 0 ] ;
21693: LD_ADDR_VAR 0 9
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: ST_TO_ADDR
// bpoints := 1 ;
21712: LD_ADDR_VAR 0 10
21716: PUSH
21717: LD_INT 1
21719: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21720: LD_VAR 0 6
21724: PPUSH
21725: CALL_OW 247
21729: PUSH
21730: LD_INT 1
21732: DOUBLE
21733: EQUAL
21734: IFTRUE 21738
21736: GO 22316
21738: POP
// begin if GetClass ( i ) = 1 then
21739: LD_VAR 0 6
21743: PPUSH
21744: CALL_OW 257
21748: PUSH
21749: LD_INT 1
21751: EQUAL
21752: IFFALSE 21773
// points := [ 10 , 5 , 3 ] ;
21754: LD_ADDR_VAR 0 9
21758: PUSH
21759: LD_INT 10
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21773: LD_VAR 0 6
21777: PPUSH
21778: CALL_OW 257
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: LD_INT 4
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: IN
21797: IFFALSE 21818
// points := [ 3 , 2 , 1 ] ;
21799: LD_ADDR_VAR 0 9
21803: PUSH
21804: LD_INT 3
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21818: LD_VAR 0 6
21822: PPUSH
21823: CALL_OW 257
21827: PUSH
21828: LD_INT 5
21830: EQUAL
21831: IFFALSE 21852
// points := [ 130 , 5 , 2 ] ;
21833: LD_ADDR_VAR 0 9
21837: PUSH
21838: LD_INT 130
21840: PUSH
21841: LD_INT 5
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21852: LD_VAR 0 6
21856: PPUSH
21857: CALL_OW 257
21861: PUSH
21862: LD_INT 8
21864: EQUAL
21865: IFFALSE 21886
// points := [ 35 , 35 , 30 ] ;
21867: LD_ADDR_VAR 0 9
21871: PUSH
21872: LD_INT 35
21874: PUSH
21875: LD_INT 35
21877: PUSH
21878: LD_INT 30
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21886: LD_VAR 0 6
21890: PPUSH
21891: CALL_OW 257
21895: PUSH
21896: LD_INT 9
21898: EQUAL
21899: IFFALSE 21920
// points := [ 20 , 55 , 40 ] ;
21901: LD_ADDR_VAR 0 9
21905: PUSH
21906: LD_INT 20
21908: PUSH
21909: LD_INT 55
21911: PUSH
21912: LD_INT 40
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: LIST
21919: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21920: LD_VAR 0 6
21924: PPUSH
21925: CALL_OW 257
21929: PUSH
21930: LD_INT 12
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: IN
21940: IFFALSE 21961
// points := [ 5 , 3 , 2 ] ;
21942: LD_ADDR_VAR 0 9
21946: PUSH
21947: LD_INT 5
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21961: LD_VAR 0 6
21965: PPUSH
21966: CALL_OW 257
21970: PUSH
21971: LD_INT 17
21973: EQUAL
21974: IFFALSE 21995
// points := [ 100 , 50 , 75 ] ;
21976: LD_ADDR_VAR 0 9
21980: PUSH
21981: LD_INT 100
21983: PUSH
21984: LD_INT 50
21986: PUSH
21987: LD_INT 75
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21995: LD_VAR 0 6
21999: PPUSH
22000: CALL_OW 257
22004: PUSH
22005: LD_INT 15
22007: EQUAL
22008: IFFALSE 22029
// points := [ 10 , 5 , 3 ] ;
22010: LD_ADDR_VAR 0 9
22014: PUSH
22015: LD_INT 10
22017: PUSH
22018: LD_INT 5
22020: PUSH
22021: LD_INT 3
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22029: LD_VAR 0 6
22033: PPUSH
22034: CALL_OW 257
22038: PUSH
22039: LD_INT 14
22041: EQUAL
22042: IFFALSE 22063
// points := [ 10 , 0 , 0 ] ;
22044: LD_ADDR_VAR 0 9
22048: PUSH
22049: LD_INT 10
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22063: LD_VAR 0 6
22067: PPUSH
22068: CALL_OW 257
22072: PUSH
22073: LD_INT 11
22075: EQUAL
22076: IFFALSE 22097
// points := [ 30 , 10 , 5 ] ;
22078: LD_ADDR_VAR 0 9
22082: PUSH
22083: LD_INT 30
22085: PUSH
22086: LD_INT 10
22088: PUSH
22089: LD_INT 5
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22097: LD_VAR 0 1
22101: PPUSH
22102: LD_INT 5
22104: PPUSH
22105: CALL_OW 321
22109: PUSH
22110: LD_INT 2
22112: EQUAL
22113: IFFALSE 22130
// bpoints := bpoints * 1.8 ;
22115: LD_ADDR_VAR 0 10
22119: PUSH
22120: LD_VAR 0 10
22124: PUSH
22125: LD_REAL  1.80000000000000E+0000
22128: MUL
22129: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22130: LD_VAR 0 6
22134: PPUSH
22135: CALL_OW 257
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 3
22148: PUSH
22149: LD_INT 4
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: IN
22158: PUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: LD_INT 51
22166: PPUSH
22167: CALL_OW 321
22171: PUSH
22172: LD_INT 2
22174: EQUAL
22175: AND
22176: IFFALSE 22193
// bpoints := bpoints * 1.2 ;
22178: LD_ADDR_VAR 0 10
22182: PUSH
22183: LD_VAR 0 10
22187: PUSH
22188: LD_REAL  1.20000000000000E+0000
22191: MUL
22192: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22193: LD_VAR 0 6
22197: PPUSH
22198: CALL_OW 257
22202: PUSH
22203: LD_INT 5
22205: PUSH
22206: LD_INT 7
22208: PUSH
22209: LD_INT 9
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: IN
22217: PUSH
22218: LD_VAR 0 1
22222: PPUSH
22223: LD_INT 52
22225: PPUSH
22226: CALL_OW 321
22230: PUSH
22231: LD_INT 2
22233: EQUAL
22234: AND
22235: IFFALSE 22252
// bpoints := bpoints * 1.5 ;
22237: LD_ADDR_VAR 0 10
22241: PUSH
22242: LD_VAR 0 10
22246: PUSH
22247: LD_REAL  1.50000000000000E+0000
22250: MUL
22251: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22252: LD_VAR 0 1
22256: PPUSH
22257: LD_INT 66
22259: PPUSH
22260: CALL_OW 321
22264: PUSH
22265: LD_INT 2
22267: EQUAL
22268: IFFALSE 22285
// bpoints := bpoints * 1.1 ;
22270: LD_ADDR_VAR 0 10
22274: PUSH
22275: LD_VAR 0 10
22279: PUSH
22280: LD_REAL  1.10000000000000E+0000
22283: MUL
22284: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22285: LD_ADDR_VAR 0 10
22289: PUSH
22290: LD_VAR 0 10
22294: PUSH
22295: LD_VAR 0 6
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: CALL_OW 259
22307: PUSH
22308: LD_REAL  1.15000000000000E+0000
22311: MUL
22312: MUL
22313: ST_TO_ADDR
// end ; unit_vehicle :
22314: GO 23142
22316: LD_INT 2
22318: DOUBLE
22319: EQUAL
22320: IFTRUE 22324
22322: GO 23130
22324: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22325: LD_VAR 0 6
22329: PPUSH
22330: CALL_OW 264
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: LD_INT 42
22340: PUSH
22341: LD_INT 24
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: IN
22349: IFFALSE 22370
// points := [ 25 , 5 , 3 ] ;
22351: LD_ADDR_VAR 0 9
22355: PUSH
22356: LD_INT 25
22358: PUSH
22359: LD_INT 5
22361: PUSH
22362: LD_INT 3
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22370: LD_VAR 0 6
22374: PPUSH
22375: CALL_OW 264
22379: PUSH
22380: LD_INT 4
22382: PUSH
22383: LD_INT 43
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: IN
22394: IFFALSE 22415
// points := [ 40 , 15 , 5 ] ;
22396: LD_ADDR_VAR 0 9
22400: PUSH
22401: LD_INT 40
22403: PUSH
22404: LD_INT 15
22406: PUSH
22407: LD_INT 5
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: LIST
22414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22415: LD_VAR 0 6
22419: PPUSH
22420: CALL_OW 264
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: LD_INT 23
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: IN
22435: IFFALSE 22456
// points := [ 7 , 25 , 8 ] ;
22437: LD_ADDR_VAR 0 9
22441: PUSH
22442: LD_INT 7
22444: PUSH
22445: LD_INT 25
22447: PUSH
22448: LD_INT 8
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22456: LD_VAR 0 6
22460: PPUSH
22461: CALL_OW 264
22465: PUSH
22466: LD_INT 5
22468: PUSH
22469: LD_INT 27
22471: PUSH
22472: LD_INT 44
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: IN
22480: IFFALSE 22501
// points := [ 14 , 50 , 16 ] ;
22482: LD_ADDR_VAR 0 9
22486: PUSH
22487: LD_INT 14
22489: PUSH
22490: LD_INT 50
22492: PUSH
22493: LD_INT 16
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22501: LD_VAR 0 6
22505: PPUSH
22506: CALL_OW 264
22510: PUSH
22511: LD_INT 6
22513: PUSH
22514: LD_INT 46
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: IN
22521: IFFALSE 22542
// points := [ 32 , 120 , 70 ] ;
22523: LD_ADDR_VAR 0 9
22527: PUSH
22528: LD_INT 32
22530: PUSH
22531: LD_INT 120
22533: PUSH
22534: LD_INT 70
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22542: LD_VAR 0 6
22546: PPUSH
22547: CALL_OW 264
22551: PUSH
22552: LD_INT 7
22554: PUSH
22555: LD_INT 28
22557: PUSH
22558: LD_INT 45
22560: PUSH
22561: LD_INT 92
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: IN
22570: IFFALSE 22591
// points := [ 35 , 20 , 45 ] ;
22572: LD_ADDR_VAR 0 9
22576: PUSH
22577: LD_INT 35
22579: PUSH
22580: LD_INT 20
22582: PUSH
22583: LD_INT 45
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22591: LD_VAR 0 6
22595: PPUSH
22596: CALL_OW 264
22600: PUSH
22601: LD_INT 47
22603: PUSH
22604: EMPTY
22605: LIST
22606: IN
22607: IFFALSE 22628
// points := [ 67 , 45 , 75 ] ;
22609: LD_ADDR_VAR 0 9
22613: PUSH
22614: LD_INT 67
22616: PUSH
22617: LD_INT 45
22619: PUSH
22620: LD_INT 75
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22628: LD_VAR 0 6
22632: PPUSH
22633: CALL_OW 264
22637: PUSH
22638: LD_INT 26
22640: PUSH
22641: EMPTY
22642: LIST
22643: IN
22644: IFFALSE 22665
// points := [ 120 , 30 , 80 ] ;
22646: LD_ADDR_VAR 0 9
22650: PUSH
22651: LD_INT 120
22653: PUSH
22654: LD_INT 30
22656: PUSH
22657: LD_INT 80
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22665: LD_VAR 0 6
22669: PPUSH
22670: CALL_OW 264
22674: PUSH
22675: LD_INT 22
22677: PUSH
22678: EMPTY
22679: LIST
22680: IN
22681: IFFALSE 22702
// points := [ 40 , 1 , 1 ] ;
22683: LD_ADDR_VAR 0 9
22687: PUSH
22688: LD_INT 40
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22702: LD_VAR 0 6
22706: PPUSH
22707: CALL_OW 264
22711: PUSH
22712: LD_INT 29
22714: PUSH
22715: EMPTY
22716: LIST
22717: IN
22718: IFFALSE 22739
// points := [ 70 , 200 , 400 ] ;
22720: LD_ADDR_VAR 0 9
22724: PUSH
22725: LD_INT 70
22727: PUSH
22728: LD_INT 200
22730: PUSH
22731: LD_INT 400
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22739: LD_VAR 0 6
22743: PPUSH
22744: CALL_OW 264
22748: PUSH
22749: LD_INT 14
22751: PUSH
22752: LD_INT 53
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: IN
22759: IFFALSE 22780
// points := [ 40 , 10 , 20 ] ;
22761: LD_ADDR_VAR 0 9
22765: PUSH
22766: LD_INT 40
22768: PUSH
22769: LD_INT 10
22771: PUSH
22772: LD_INT 20
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22780: LD_VAR 0 6
22784: PPUSH
22785: CALL_OW 264
22789: PUSH
22790: LD_INT 9
22792: PUSH
22793: EMPTY
22794: LIST
22795: IN
22796: IFFALSE 22817
// points := [ 5 , 70 , 20 ] ;
22798: LD_ADDR_VAR 0 9
22802: PUSH
22803: LD_INT 5
22805: PUSH
22806: LD_INT 70
22808: PUSH
22809: LD_INT 20
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22817: LD_VAR 0 6
22821: PPUSH
22822: CALL_OW 264
22826: PUSH
22827: LD_INT 10
22829: PUSH
22830: EMPTY
22831: LIST
22832: IN
22833: IFFALSE 22854
// points := [ 35 , 110 , 70 ] ;
22835: LD_ADDR_VAR 0 9
22839: PUSH
22840: LD_INT 35
22842: PUSH
22843: LD_INT 110
22845: PUSH
22846: LD_INT 70
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22854: LD_VAR 0 6
22858: PPUSH
22859: CALL_OW 265
22863: PUSH
22864: LD_INT 25
22866: EQUAL
22867: IFFALSE 22888
// points := [ 80 , 65 , 100 ] ;
22869: LD_ADDR_VAR 0 9
22873: PUSH
22874: LD_INT 80
22876: PUSH
22877: LD_INT 65
22879: PUSH
22880: LD_INT 100
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22888: LD_VAR 0 6
22892: PPUSH
22893: CALL_OW 263
22897: PUSH
22898: LD_INT 1
22900: EQUAL
22901: IFFALSE 22936
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22903: LD_ADDR_VAR 0 10
22907: PUSH
22908: LD_VAR 0 10
22912: PUSH
22913: LD_VAR 0 6
22917: PPUSH
22918: CALL_OW 311
22922: PPUSH
22923: LD_INT 3
22925: PPUSH
22926: CALL_OW 259
22930: PUSH
22931: LD_INT 4
22933: MUL
22934: MUL
22935: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22936: LD_VAR 0 6
22940: PPUSH
22941: CALL_OW 263
22945: PUSH
22946: LD_INT 2
22948: EQUAL
22949: IFFALSE 23000
// begin j := IsControledBy ( i ) ;
22951: LD_ADDR_VAR 0 7
22955: PUSH
22956: LD_VAR 0 6
22960: PPUSH
22961: CALL_OW 312
22965: ST_TO_ADDR
// if j then
22966: LD_VAR 0 7
22970: IFFALSE 23000
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22972: LD_ADDR_VAR 0 10
22976: PUSH
22977: LD_VAR 0 10
22981: PUSH
22982: LD_VAR 0 7
22986: PPUSH
22987: LD_INT 3
22989: PPUSH
22990: CALL_OW 259
22994: PUSH
22995: LD_INT 3
22997: MUL
22998: MUL
22999: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23000: LD_VAR 0 6
23004: PPUSH
23005: CALL_OW 264
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 6
23015: PUSH
23016: LD_INT 46
23018: PUSH
23019: LD_INT 44
23021: PUSH
23022: LD_INT 47
23024: PUSH
23025: LD_INT 45
23027: PUSH
23028: LD_INT 28
23030: PUSH
23031: LD_INT 7
23033: PUSH
23034: LD_INT 27
23036: PUSH
23037: LD_INT 29
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: IN
23052: PUSH
23053: LD_VAR 0 1
23057: PPUSH
23058: LD_INT 52
23060: PPUSH
23061: CALL_OW 321
23065: PUSH
23066: LD_INT 2
23068: EQUAL
23069: AND
23070: IFFALSE 23087
// bpoints := bpoints * 1.2 ;
23072: LD_ADDR_VAR 0 10
23076: PUSH
23077: LD_VAR 0 10
23081: PUSH
23082: LD_REAL  1.20000000000000E+0000
23085: MUL
23086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23087: LD_VAR 0 6
23091: PPUSH
23092: CALL_OW 264
23096: PUSH
23097: LD_INT 6
23099: PUSH
23100: LD_INT 46
23102: PUSH
23103: LD_INT 47
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: IN
23111: IFFALSE 23128
// bpoints := bpoints * 1.2 ;
23113: LD_ADDR_VAR 0 10
23117: PUSH
23118: LD_VAR 0 10
23122: PUSH
23123: LD_REAL  1.20000000000000E+0000
23126: MUL
23127: ST_TO_ADDR
// end ; unit_building :
23128: GO 23142
23130: LD_INT 3
23132: DOUBLE
23133: EQUAL
23134: IFTRUE 23138
23136: GO 23141
23138: POP
// ; end ;
23139: GO 23142
23141: POP
// for j = 1 to 3 do
23142: LD_ADDR_VAR 0 7
23146: PUSH
23147: DOUBLE
23148: LD_INT 1
23150: DEC
23151: ST_TO_ADDR
23152: LD_INT 3
23154: PUSH
23155: FOR_TO
23156: IFFALSE 23209
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23158: LD_ADDR_VAR 0 5
23162: PUSH
23163: LD_VAR 0 5
23167: PPUSH
23168: LD_VAR 0 7
23172: PPUSH
23173: LD_VAR 0 5
23177: PUSH
23178: LD_VAR 0 7
23182: ARRAY
23183: PUSH
23184: LD_VAR 0 9
23188: PUSH
23189: LD_VAR 0 7
23193: ARRAY
23194: PUSH
23195: LD_VAR 0 10
23199: MUL
23200: PLUS
23201: PPUSH
23202: CALL_OW 1
23206: ST_TO_ADDR
23207: GO 23155
23209: POP
23210: POP
// end ;
23211: GO 21690
23213: POP
23214: POP
// result := Replace ( result , 4 , tmp ) ;
23215: LD_ADDR_VAR 0 5
23219: PUSH
23220: LD_VAR 0 5
23224: PPUSH
23225: LD_INT 4
23227: PPUSH
23228: LD_VAR 0 8
23232: PPUSH
23233: CALL_OW 1
23237: ST_TO_ADDR
// end ;
23238: LD_VAR 0 5
23242: RET
// export function DangerAtRange ( unit , range ) ; begin
23243: LD_INT 0
23245: PPUSH
// if not unit then
23246: LD_VAR 0 1
23250: NOT
23251: IFFALSE 23255
// exit ;
23253: GO 23300
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23255: LD_ADDR_VAR 0 3
23259: PUSH
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL_OW 255
23269: PPUSH
23270: LD_VAR 0 1
23274: PPUSH
23275: CALL_OW 250
23279: PPUSH
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL_OW 251
23289: PPUSH
23290: LD_VAR 0 2
23294: PPUSH
23295: CALL 21542 0 4
23299: ST_TO_ADDR
// end ;
23300: LD_VAR 0 3
23304: RET
// export function DangerInArea ( side , area ) ; begin
23305: LD_INT 0
23307: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_INT 81
23320: PUSH
23321: LD_VAR 0 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PPUSH
23330: CALL_OW 70
23334: ST_TO_ADDR
// end ;
23335: LD_VAR 0 3
23339: RET
// export function IsExtension ( b ) ; begin
23340: LD_INT 0
23342: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23343: LD_ADDR_VAR 0 2
23347: PUSH
23348: LD_VAR 0 1
23352: PUSH
23353: LD_INT 23
23355: PUSH
23356: LD_INT 20
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 17
23364: PUSH
23365: LD_INT 24
23367: PUSH
23368: LD_INT 21
23370: PUSH
23371: LD_INT 19
23373: PUSH
23374: LD_INT 16
23376: PUSH
23377: LD_INT 25
23379: PUSH
23380: LD_INT 18
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: IN
23395: ST_TO_ADDR
// end ;
23396: LD_VAR 0 2
23400: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23401: LD_INT 0
23403: PPUSH
23404: PPUSH
23405: PPUSH
// result := [ ] ;
23406: LD_ADDR_VAR 0 4
23410: PUSH
23411: EMPTY
23412: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23413: LD_ADDR_VAR 0 5
23417: PUSH
23418: LD_VAR 0 2
23422: PPUSH
23423: LD_INT 21
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 70
23437: ST_TO_ADDR
// if not tmp then
23438: LD_VAR 0 5
23442: NOT
23443: IFFALSE 23447
// exit ;
23445: GO 23511
// if checkLink then
23447: LD_VAR 0 3
23451: IFFALSE 23501
// begin for i in tmp do
23453: LD_ADDR_VAR 0 6
23457: PUSH
23458: LD_VAR 0 5
23462: PUSH
23463: FOR_IN
23464: IFFALSE 23499
// if GetBase ( i ) <> base then
23466: LD_VAR 0 6
23470: PPUSH
23471: CALL_OW 274
23475: PUSH
23476: LD_VAR 0 1
23480: NONEQUAL
23481: IFFALSE 23497
// ComLinkToBase ( base , i ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: LD_VAR 0 6
23492: PPUSH
23493: CALL_OW 169
23497: GO 23463
23499: POP
23500: POP
// end ; result := tmp ;
23501: LD_ADDR_VAR 0 4
23505: PUSH
23506: LD_VAR 0 5
23510: ST_TO_ADDR
// end ;
23511: LD_VAR 0 4
23515: RET
// export function ComComplete ( units , b ) ; var i ; begin
23516: LD_INT 0
23518: PPUSH
23519: PPUSH
// if not units then
23520: LD_VAR 0 1
23524: NOT
23525: IFFALSE 23529
// exit ;
23527: GO 23619
// for i in units do
23529: LD_ADDR_VAR 0 4
23533: PUSH
23534: LD_VAR 0 1
23538: PUSH
23539: FOR_IN
23540: IFFALSE 23617
// if BuildingStatus ( b ) = bs_build then
23542: LD_VAR 0 2
23546: PPUSH
23547: CALL_OW 461
23551: PUSH
23552: LD_INT 1
23554: EQUAL
23555: IFFALSE 23615
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23557: LD_VAR 0 4
23561: PPUSH
23562: LD_STRING h
23564: PUSH
23565: LD_VAR 0 2
23569: PPUSH
23570: CALL_OW 250
23574: PUSH
23575: LD_VAR 0 2
23579: PPUSH
23580: CALL_OW 251
23584: PUSH
23585: LD_VAR 0 2
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: PPUSH
23611: CALL_OW 446
23615: GO 23539
23617: POP
23618: POP
// end ;
23619: LD_VAR 0 3
23623: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23632: LD_VAR 0 1
23636: NOT
23637: PUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 263
23647: PUSH
23648: LD_INT 2
23650: NONEQUAL
23651: OR
23652: IFFALSE 23656
// exit ;
23654: GO 23972
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23656: LD_ADDR_VAR 0 6
23660: PUSH
23661: LD_INT 22
23663: PUSH
23664: LD_VAR 0 1
23668: PPUSH
23669: CALL_OW 255
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: LD_INT 30
23683: PUSH
23684: LD_INT 36
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 34
23693: PUSH
23694: LD_INT 31
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 6
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23972
// result := [ ] ;
23724: LD_ADDR_VAR 0 2
23728: PUSH
23729: EMPTY
23730: ST_TO_ADDR
// for i in tmp do
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_VAR 0 6
23740: PUSH
23741: FOR_IN
23742: IFFALSE 23813
// begin t := UnitsInside ( i ) ;
23744: LD_ADDR_VAR 0 4
23748: PUSH
23749: LD_VAR 0 3
23753: PPUSH
23754: CALL_OW 313
23758: ST_TO_ADDR
// if t then
23759: LD_VAR 0 4
23763: IFFALSE 23811
// for j in t do
23765: LD_ADDR_VAR 0 7
23769: PUSH
23770: LD_VAR 0 4
23774: PUSH
23775: FOR_IN
23776: IFFALSE 23809
// result := Replace ( result , result + 1 , j ) ;
23778: LD_ADDR_VAR 0 2
23782: PUSH
23783: LD_VAR 0 2
23787: PPUSH
23788: LD_VAR 0 2
23792: PUSH
23793: LD_INT 1
23795: PLUS
23796: PPUSH
23797: LD_VAR 0 7
23801: PPUSH
23802: CALL_OW 1
23806: ST_TO_ADDR
23807: GO 23775
23809: POP
23810: POP
// end ;
23811: GO 23741
23813: POP
23814: POP
// if not result then
23815: LD_VAR 0 2
23819: NOT
23820: IFFALSE 23824
// exit ;
23822: GO 23972
// mech := result [ 1 ] ;
23824: LD_ADDR_VAR 0 5
23828: PUSH
23829: LD_VAR 0 2
23833: PUSH
23834: LD_INT 1
23836: ARRAY
23837: ST_TO_ADDR
// if result > 1 then
23838: LD_VAR 0 2
23842: PUSH
23843: LD_INT 1
23845: GREATER
23846: IFFALSE 23958
// begin for i = 2 to result do
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: DOUBLE
23854: LD_INT 2
23856: DEC
23857: ST_TO_ADDR
23858: LD_VAR 0 2
23862: PUSH
23863: FOR_TO
23864: IFFALSE 23956
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23866: LD_ADDR_VAR 0 4
23870: PUSH
23871: LD_VAR 0 2
23875: PUSH
23876: LD_VAR 0 3
23880: ARRAY
23881: PPUSH
23882: LD_INT 3
23884: PPUSH
23885: CALL_OW 259
23889: PUSH
23890: LD_VAR 0 2
23894: PUSH
23895: LD_VAR 0 3
23899: ARRAY
23900: PPUSH
23901: CALL_OW 432
23905: MINUS
23906: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23907: LD_VAR 0 4
23911: PUSH
23912: LD_VAR 0 5
23916: PPUSH
23917: LD_INT 3
23919: PPUSH
23920: CALL_OW 259
23924: PUSH
23925: LD_VAR 0 5
23929: PPUSH
23930: CALL_OW 432
23934: MINUS
23935: GREATEREQUAL
23936: IFFALSE 23954
// mech := result [ i ] ;
23938: LD_ADDR_VAR 0 5
23942: PUSH
23943: LD_VAR 0 2
23947: PUSH
23948: LD_VAR 0 3
23952: ARRAY
23953: ST_TO_ADDR
// end ;
23954: GO 23863
23956: POP
23957: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23958: LD_VAR 0 1
23962: PPUSH
23963: LD_VAR 0 5
23967: PPUSH
23968: CALL_OW 135
// end ;
23972: LD_VAR 0 2
23976: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
23981: PPUSH
23982: PPUSH
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
23988: PPUSH
23989: PPUSH
23990: PPUSH
23991: PPUSH
// result := [ ] ;
23992: LD_ADDR_VAR 0 7
23996: PUSH
23997: EMPTY
23998: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23999: LD_VAR 0 1
24003: PPUSH
24004: CALL_OW 266
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: IN
24019: NOT
24020: IFFALSE 24024
// exit ;
24022: GO 25658
// if name then
24024: LD_VAR 0 3
24028: IFFALSE 24044
// SetBName ( base_dep , name ) ;
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_VAR 0 3
24039: PPUSH
24040: CALL_OW 500
// base := GetBase ( base_dep ) ;
24044: LD_ADDR_VAR 0 15
24048: PUSH
24049: LD_VAR 0 1
24053: PPUSH
24054: CALL_OW 274
24058: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24059: LD_ADDR_VAR 0 16
24063: PUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 255
24073: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24074: LD_ADDR_VAR 0 17
24078: PUSH
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 248
24088: ST_TO_ADDR
// if sources then
24089: LD_VAR 0 5
24093: IFFALSE 24140
// for i = 1 to 3 do
24095: LD_ADDR_VAR 0 8
24099: PUSH
24100: DOUBLE
24101: LD_INT 1
24103: DEC
24104: ST_TO_ADDR
24105: LD_INT 3
24107: PUSH
24108: FOR_TO
24109: IFFALSE 24138
// AddResourceType ( base , i , sources [ i ] ) ;
24111: LD_VAR 0 15
24115: PPUSH
24116: LD_VAR 0 8
24120: PPUSH
24121: LD_VAR 0 5
24125: PUSH
24126: LD_VAR 0 8
24130: ARRAY
24131: PPUSH
24132: CALL_OW 276
24136: GO 24108
24138: POP
24139: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24140: LD_ADDR_VAR 0 18
24144: PUSH
24145: LD_VAR 0 15
24149: PPUSH
24150: LD_VAR 0 2
24154: PPUSH
24155: LD_INT 1
24157: PPUSH
24158: CALL 23401 0 3
24162: ST_TO_ADDR
// InitHc ;
24163: CALL_OW 19
// InitUc ;
24167: CALL_OW 18
// uc_side := side ;
24171: LD_ADDR_OWVAR 20
24175: PUSH
24176: LD_VAR 0 16
24180: ST_TO_ADDR
// uc_nation := nation ;
24181: LD_ADDR_OWVAR 21
24185: PUSH
24186: LD_VAR 0 17
24190: ST_TO_ADDR
// if buildings then
24191: LD_VAR 0 18
24195: IFFALSE 25517
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24197: LD_ADDR_VAR 0 19
24201: PUSH
24202: LD_VAR 0 18
24206: PPUSH
24207: LD_INT 2
24209: PUSH
24210: LD_INT 30
24212: PUSH
24213: LD_INT 29
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 30
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: LIST
24234: PPUSH
24235: CALL_OW 72
24239: ST_TO_ADDR
// if tmp then
24240: LD_VAR 0 19
24244: IFFALSE 24292
// for i in tmp do
24246: LD_ADDR_VAR 0 8
24250: PUSH
24251: LD_VAR 0 19
24255: PUSH
24256: FOR_IN
24257: IFFALSE 24290
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24259: LD_VAR 0 8
24263: PPUSH
24264: CALL_OW 250
24268: PPUSH
24269: LD_VAR 0 8
24273: PPUSH
24274: CALL_OW 251
24278: PPUSH
24279: LD_VAR 0 16
24283: PPUSH
24284: CALL_OW 441
24288: GO 24256
24290: POP
24291: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24292: LD_VAR 0 18
24296: PPUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 32
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 30
24312: PUSH
24313: LD_INT 33
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: PPUSH
24325: CALL_OW 72
24329: IFFALSE 24417
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24331: LD_ADDR_VAR 0 8
24335: PUSH
24336: LD_VAR 0 18
24340: PPUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 32
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 33
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 72
24373: PUSH
24374: FOR_IN
24375: IFFALSE 24415
// begin if not GetBWeapon ( i ) then
24377: LD_VAR 0 8
24381: PPUSH
24382: CALL_OW 269
24386: NOT
24387: IFFALSE 24413
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24389: LD_VAR 0 8
24393: PPUSH
24394: LD_VAR 0 8
24398: PPUSH
24399: LD_VAR 0 2
24403: PPUSH
24404: CALL 25663 0 2
24408: PPUSH
24409: CALL_OW 431
// end ;
24413: GO 24374
24415: POP
24416: POP
// end ; for i = 1 to personel do
24417: LD_ADDR_VAR 0 8
24421: PUSH
24422: DOUBLE
24423: LD_INT 1
24425: DEC
24426: ST_TO_ADDR
24427: LD_VAR 0 6
24431: PUSH
24432: FOR_TO
24433: IFFALSE 25497
// begin if i > 4 then
24435: LD_VAR 0 8
24439: PUSH
24440: LD_INT 4
24442: GREATER
24443: IFFALSE 24447
// break ;
24445: GO 25497
// case i of 1 :
24447: LD_VAR 0 8
24451: PUSH
24452: LD_INT 1
24454: DOUBLE
24455: EQUAL
24456: IFTRUE 24460
24458: GO 24540
24460: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24461: LD_ADDR_VAR 0 12
24465: PUSH
24466: LD_VAR 0 18
24470: PPUSH
24471: LD_INT 22
24473: PUSH
24474: LD_VAR 0 16
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 58
24485: PUSH
24486: EMPTY
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 30
24494: PUSH
24495: LD_INT 32
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 30
24504: PUSH
24505: LD_INT 4
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 30
24514: PUSH
24515: LD_INT 5
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: PPUSH
24533: CALL_OW 72
24537: ST_TO_ADDR
24538: GO 24762
24540: LD_INT 2
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24610
24548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24549: LD_ADDR_VAR 0 12
24553: PUSH
24554: LD_VAR 0 18
24558: PPUSH
24559: LD_INT 22
24561: PUSH
24562: LD_VAR 0 16
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 30
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PPUSH
24603: CALL_OW 72
24607: ST_TO_ADDR
24608: GO 24762
24610: LD_INT 3
24612: DOUBLE
24613: EQUAL
24614: IFTRUE 24618
24616: GO 24680
24618: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24619: LD_ADDR_VAR 0 12
24623: PUSH
24624: LD_VAR 0 18
24628: PPUSH
24629: LD_INT 22
24631: PUSH
24632: LD_VAR 0 16
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 30
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 30
24656: PUSH
24657: LD_INT 3
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PPUSH
24673: CALL_OW 72
24677: ST_TO_ADDR
24678: GO 24762
24680: LD_INT 4
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24761
24688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24689: LD_ADDR_VAR 0 12
24693: PUSH
24694: LD_VAR 0 18
24698: PPUSH
24699: LD_INT 22
24701: PUSH
24702: LD_VAR 0 16
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 30
24716: PUSH
24717: LD_INT 6
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 30
24726: PUSH
24727: LD_INT 7
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 8
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PPUSH
24754: CALL_OW 72
24758: ST_TO_ADDR
24759: GO 24762
24761: POP
// if i = 1 then
24762: LD_VAR 0 8
24766: PUSH
24767: LD_INT 1
24769: EQUAL
24770: IFFALSE 24881
// begin tmp := [ ] ;
24772: LD_ADDR_VAR 0 19
24776: PUSH
24777: EMPTY
24778: ST_TO_ADDR
// for j in f do
24779: LD_ADDR_VAR 0 9
24783: PUSH
24784: LD_VAR 0 12
24788: PUSH
24789: FOR_IN
24790: IFFALSE 24863
// if GetBType ( j ) = b_bunker then
24792: LD_VAR 0 9
24796: PPUSH
24797: CALL_OW 266
24801: PUSH
24802: LD_INT 32
24804: EQUAL
24805: IFFALSE 24832
// tmp := Insert ( tmp , 1 , j ) else
24807: LD_ADDR_VAR 0 19
24811: PUSH
24812: LD_VAR 0 19
24816: PPUSH
24817: LD_INT 1
24819: PPUSH
24820: LD_VAR 0 9
24824: PPUSH
24825: CALL_OW 2
24829: ST_TO_ADDR
24830: GO 24861
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24832: LD_ADDR_VAR 0 19
24836: PUSH
24837: LD_VAR 0 19
24841: PPUSH
24842: LD_VAR 0 19
24846: PUSH
24847: LD_INT 1
24849: PLUS
24850: PPUSH
24851: LD_VAR 0 9
24855: PPUSH
24856: CALL_OW 2
24860: ST_TO_ADDR
24861: GO 24789
24863: POP
24864: POP
// if tmp then
24865: LD_VAR 0 19
24869: IFFALSE 24881
// f := tmp ;
24871: LD_ADDR_VAR 0 12
24875: PUSH
24876: LD_VAR 0 19
24880: ST_TO_ADDR
// end ; x := personel [ i ] ;
24881: LD_ADDR_VAR 0 13
24885: PUSH
24886: LD_VAR 0 6
24890: PUSH
24891: LD_VAR 0 8
24895: ARRAY
24896: ST_TO_ADDR
// if x = - 1 then
24897: LD_VAR 0 13
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: EQUAL
24906: IFFALSE 25115
// begin for j in f do
24908: LD_ADDR_VAR 0 9
24912: PUSH
24913: LD_VAR 0 12
24917: PUSH
24918: FOR_IN
24919: IFFALSE 25111
// repeat InitHc ;
24921: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24925: LD_VAR 0 9
24929: PPUSH
24930: CALL_OW 266
24934: PUSH
24935: LD_INT 5
24937: EQUAL
24938: IFFALSE 25008
// begin if UnitsInside ( j ) < 3 then
24940: LD_VAR 0 9
24944: PPUSH
24945: CALL_OW 313
24949: PUSH
24950: LD_INT 3
24952: LESS
24953: IFFALSE 24989
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24955: LD_INT 0
24957: PPUSH
24958: LD_INT 5
24960: PUSH
24961: LD_INT 8
24963: PUSH
24964: LD_INT 9
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: PUSH
24972: LD_VAR 0 17
24976: ARRAY
24977: PPUSH
24978: LD_VAR 0 4
24982: PPUSH
24983: CALL_OW 380
24987: GO 25006
// PrepareHuman ( false , i , skill ) ;
24989: LD_INT 0
24991: PPUSH
24992: LD_VAR 0 8
24996: PPUSH
24997: LD_VAR 0 4
25001: PPUSH
25002: CALL_OW 380
// end else
25006: GO 25025
// PrepareHuman ( false , i , skill ) ;
25008: LD_INT 0
25010: PPUSH
25011: LD_VAR 0 8
25015: PPUSH
25016: LD_VAR 0 4
25020: PPUSH
25021: CALL_OW 380
// un := CreateHuman ;
25025: LD_ADDR_VAR 0 14
25029: PUSH
25030: CALL_OW 44
25034: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: LD_VAR 0 7
25044: PPUSH
25045: LD_INT 1
25047: PPUSH
25048: LD_VAR 0 14
25052: PPUSH
25053: CALL_OW 2
25057: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25058: LD_VAR 0 14
25062: PPUSH
25063: LD_VAR 0 9
25067: PPUSH
25068: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25072: LD_VAR 0 9
25076: PPUSH
25077: CALL_OW 313
25081: PUSH
25082: LD_INT 6
25084: EQUAL
25085: PUSH
25086: LD_VAR 0 9
25090: PPUSH
25091: CALL_OW 266
25095: PUSH
25096: LD_INT 32
25098: PUSH
25099: LD_INT 31
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: IN
25106: OR
25107: IFFALSE 24921
25109: GO 24918
25111: POP
25112: POP
// end else
25113: GO 25495
// for j = 1 to x do
25115: LD_ADDR_VAR 0 9
25119: PUSH
25120: DOUBLE
25121: LD_INT 1
25123: DEC
25124: ST_TO_ADDR
25125: LD_VAR 0 13
25129: PUSH
25130: FOR_TO
25131: IFFALSE 25493
// begin InitHc ;
25133: CALL_OW 19
// if not f then
25137: LD_VAR 0 12
25141: NOT
25142: IFFALSE 25231
// begin PrepareHuman ( false , i , skill ) ;
25144: LD_INT 0
25146: PPUSH
25147: LD_VAR 0 8
25151: PPUSH
25152: LD_VAR 0 4
25156: PPUSH
25157: CALL_OW 380
// un := CreateHuman ;
25161: LD_ADDR_VAR 0 14
25165: PUSH
25166: CALL_OW 44
25170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25171: LD_ADDR_VAR 0 7
25175: PUSH
25176: LD_VAR 0 7
25180: PPUSH
25181: LD_INT 1
25183: PPUSH
25184: LD_VAR 0 14
25188: PPUSH
25189: CALL_OW 2
25193: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25194: LD_VAR 0 14
25198: PPUSH
25199: LD_VAR 0 1
25203: PPUSH
25204: CALL_OW 250
25208: PPUSH
25209: LD_VAR 0 1
25213: PPUSH
25214: CALL_OW 251
25218: PPUSH
25219: LD_INT 10
25221: PPUSH
25222: LD_INT 0
25224: PPUSH
25225: CALL_OW 50
// continue ;
25229: GO 25130
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25231: LD_VAR 0 12
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: PPUSH
25240: CALL_OW 313
25244: PUSH
25245: LD_VAR 0 12
25249: PUSH
25250: LD_INT 1
25252: ARRAY
25253: PPUSH
25254: CALL_OW 266
25258: PUSH
25259: LD_INT 32
25261: PUSH
25262: LD_INT 31
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: IN
25269: AND
25270: PUSH
25271: LD_VAR 0 12
25275: PUSH
25276: LD_INT 1
25278: ARRAY
25279: PPUSH
25280: CALL_OW 313
25284: PUSH
25285: LD_INT 6
25287: EQUAL
25288: OR
25289: IFFALSE 25309
// f := Delete ( f , 1 ) ;
25291: LD_ADDR_VAR 0 12
25295: PUSH
25296: LD_VAR 0 12
25300: PPUSH
25301: LD_INT 1
25303: PPUSH
25304: CALL_OW 3
25308: ST_TO_ADDR
// if not f then
25309: LD_VAR 0 12
25313: NOT
25314: IFFALSE 25332
// begin x := x + 2 ;
25316: LD_ADDR_VAR 0 13
25320: PUSH
25321: LD_VAR 0 13
25325: PUSH
25326: LD_INT 2
25328: PLUS
25329: ST_TO_ADDR
// continue ;
25330: GO 25130
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25332: LD_VAR 0 12
25336: PUSH
25337: LD_INT 1
25339: ARRAY
25340: PPUSH
25341: CALL_OW 266
25345: PUSH
25346: LD_INT 5
25348: EQUAL
25349: IFFALSE 25423
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25351: LD_VAR 0 12
25355: PUSH
25356: LD_INT 1
25358: ARRAY
25359: PPUSH
25360: CALL_OW 313
25364: PUSH
25365: LD_INT 3
25367: LESS
25368: IFFALSE 25404
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25370: LD_INT 0
25372: PPUSH
25373: LD_INT 5
25375: PUSH
25376: LD_INT 8
25378: PUSH
25379: LD_INT 9
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: PUSH
25387: LD_VAR 0 17
25391: ARRAY
25392: PPUSH
25393: LD_VAR 0 4
25397: PPUSH
25398: CALL_OW 380
25402: GO 25421
// PrepareHuman ( false , i , skill ) ;
25404: LD_INT 0
25406: PPUSH
25407: LD_VAR 0 8
25411: PPUSH
25412: LD_VAR 0 4
25416: PPUSH
25417: CALL_OW 380
// end else
25421: GO 25440
// PrepareHuman ( false , i , skill ) ;
25423: LD_INT 0
25425: PPUSH
25426: LD_VAR 0 8
25430: PPUSH
25431: LD_VAR 0 4
25435: PPUSH
25436: CALL_OW 380
// un := CreateHuman ;
25440: LD_ADDR_VAR 0 14
25444: PUSH
25445: CALL_OW 44
25449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25450: LD_ADDR_VAR 0 7
25454: PUSH
25455: LD_VAR 0 7
25459: PPUSH
25460: LD_INT 1
25462: PPUSH
25463: LD_VAR 0 14
25467: PPUSH
25468: CALL_OW 2
25472: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25473: LD_VAR 0 14
25477: PPUSH
25478: LD_VAR 0 12
25482: PUSH
25483: LD_INT 1
25485: ARRAY
25486: PPUSH
25487: CALL_OW 52
// end ;
25491: GO 25130
25493: POP
25494: POP
// end ;
25495: GO 24432
25497: POP
25498: POP
// result := result ^ buildings ;
25499: LD_ADDR_VAR 0 7
25503: PUSH
25504: LD_VAR 0 7
25508: PUSH
25509: LD_VAR 0 18
25513: ADD
25514: ST_TO_ADDR
// end else
25515: GO 25658
// begin for i = 1 to personel do
25517: LD_ADDR_VAR 0 8
25521: PUSH
25522: DOUBLE
25523: LD_INT 1
25525: DEC
25526: ST_TO_ADDR
25527: LD_VAR 0 6
25531: PUSH
25532: FOR_TO
25533: IFFALSE 25656
// begin if i > 4 then
25535: LD_VAR 0 8
25539: PUSH
25540: LD_INT 4
25542: GREATER
25543: IFFALSE 25547
// break ;
25545: GO 25656
// x := personel [ i ] ;
25547: LD_ADDR_VAR 0 13
25551: PUSH
25552: LD_VAR 0 6
25556: PUSH
25557: LD_VAR 0 8
25561: ARRAY
25562: ST_TO_ADDR
// if x = - 1 then
25563: LD_VAR 0 13
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: EQUAL
25572: IFFALSE 25576
// continue ;
25574: GO 25532
// PrepareHuman ( false , i , skill ) ;
25576: LD_INT 0
25578: PPUSH
25579: LD_VAR 0 8
25583: PPUSH
25584: LD_VAR 0 4
25588: PPUSH
25589: CALL_OW 380
// un := CreateHuman ;
25593: LD_ADDR_VAR 0 14
25597: PUSH
25598: CALL_OW 44
25602: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25603: LD_VAR 0 14
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 250
25617: PPUSH
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 251
25627: PPUSH
25628: LD_INT 10
25630: PPUSH
25631: LD_INT 0
25633: PPUSH
25634: CALL_OW 50
// result := result ^ un ;
25638: LD_ADDR_VAR 0 7
25642: PUSH
25643: LD_VAR 0 7
25647: PUSH
25648: LD_VAR 0 14
25652: ADD
25653: ST_TO_ADDR
// end ;
25654: GO 25532
25656: POP
25657: POP
// end ; end ;
25658: LD_VAR 0 7
25662: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25663: LD_INT 0
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
25677: PPUSH
25678: PPUSH
25679: PPUSH
25680: PPUSH
// result := false ;
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25689: LD_VAR 0 1
25693: NOT
25694: PUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 266
25704: PUSH
25705: LD_INT 32
25707: PUSH
25708: LD_INT 33
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: IN
25715: NOT
25716: OR
25717: IFFALSE 25721
// exit ;
25719: GO 26830
// nat := GetNation ( tower ) ;
25721: LD_ADDR_VAR 0 12
25725: PUSH
25726: LD_VAR 0 1
25730: PPUSH
25731: CALL_OW 248
25735: ST_TO_ADDR
// side := GetSide ( tower ) ;
25736: LD_ADDR_VAR 0 16
25740: PUSH
25741: LD_VAR 0 1
25745: PPUSH
25746: CALL_OW 255
25750: ST_TO_ADDR
// x := GetX ( tower ) ;
25751: LD_ADDR_VAR 0 10
25755: PUSH
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 250
25765: ST_TO_ADDR
// y := GetY ( tower ) ;
25766: LD_ADDR_VAR 0 11
25770: PUSH
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 251
25780: ST_TO_ADDR
// if not x or not y then
25781: LD_VAR 0 10
25785: NOT
25786: PUSH
25787: LD_VAR 0 11
25791: NOT
25792: OR
25793: IFFALSE 25797
// exit ;
25795: GO 26830
// weapon := 0 ;
25797: LD_ADDR_VAR 0 18
25801: PUSH
25802: LD_INT 0
25804: ST_TO_ADDR
// fac_list := [ ] ;
25805: LD_ADDR_VAR 0 17
25809: PUSH
25810: EMPTY
25811: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25812: LD_ADDR_VAR 0 6
25816: PUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 274
25826: PPUSH
25827: LD_VAR 0 2
25831: PPUSH
25832: LD_INT 0
25834: PPUSH
25835: CALL 23401 0 3
25839: PPUSH
25840: LD_INT 30
25842: PUSH
25843: LD_INT 3
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 72
25854: ST_TO_ADDR
// if not factories then
25855: LD_VAR 0 6
25859: NOT
25860: IFFALSE 25864
// exit ;
25862: GO 26830
// for i in factories do
25864: LD_ADDR_VAR 0 8
25868: PUSH
25869: LD_VAR 0 6
25873: PUSH
25874: FOR_IN
25875: IFFALSE 25900
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25877: LD_ADDR_VAR 0 17
25881: PUSH
25882: LD_VAR 0 17
25886: PUSH
25887: LD_VAR 0 8
25891: PPUSH
25892: CALL_OW 478
25896: UNION
25897: ST_TO_ADDR
25898: GO 25874
25900: POP
25901: POP
// if not fac_list then
25902: LD_VAR 0 17
25906: NOT
25907: IFFALSE 25911
// exit ;
25909: GO 26830
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25911: LD_ADDR_VAR 0 5
25915: PUSH
25916: LD_INT 4
25918: PUSH
25919: LD_INT 5
25921: PUSH
25922: LD_INT 9
25924: PUSH
25925: LD_INT 10
25927: PUSH
25928: LD_INT 6
25930: PUSH
25931: LD_INT 7
25933: PUSH
25934: LD_INT 11
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 27
25948: PUSH
25949: LD_INT 28
25951: PUSH
25952: LD_INT 26
25954: PUSH
25955: LD_INT 30
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 43
25966: PUSH
25967: LD_INT 44
25969: PUSH
25970: LD_INT 46
25972: PUSH
25973: LD_INT 45
25975: PUSH
25976: LD_INT 47
25978: PUSH
25979: LD_INT 49
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: PUSH
25995: LD_VAR 0 12
25999: ARRAY
26000: ST_TO_ADDR
// list := list isect fac_list ;
26001: LD_ADDR_VAR 0 5
26005: PUSH
26006: LD_VAR 0 5
26010: PUSH
26011: LD_VAR 0 17
26015: ISECT
26016: ST_TO_ADDR
// if not list then
26017: LD_VAR 0 5
26021: NOT
26022: IFFALSE 26026
// exit ;
26024: GO 26830
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26026: LD_VAR 0 12
26030: PUSH
26031: LD_INT 3
26033: EQUAL
26034: PUSH
26035: LD_INT 49
26037: PUSH
26038: LD_VAR 0 5
26042: IN
26043: AND
26044: PUSH
26045: LD_INT 31
26047: PPUSH
26048: LD_VAR 0 16
26052: PPUSH
26053: CALL_OW 321
26057: PUSH
26058: LD_INT 2
26060: EQUAL
26061: AND
26062: IFFALSE 26122
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26064: LD_INT 22
26066: PUSH
26067: LD_VAR 0 16
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 35
26078: PUSH
26079: LD_INT 49
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 91
26088: PUSH
26089: LD_VAR 0 1
26093: PUSH
26094: LD_INT 10
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: PPUSH
26107: CALL_OW 69
26111: NOT
26112: IFFALSE 26122
// weapon := ru_time_lapser ;
26114: LD_ADDR_VAR 0 18
26118: PUSH
26119: LD_INT 49
26121: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26122: LD_VAR 0 12
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: IN
26137: PUSH
26138: LD_INT 11
26140: PUSH
26141: LD_VAR 0 5
26145: IN
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: LD_VAR 0 5
26154: IN
26155: OR
26156: AND
26157: PUSH
26158: LD_INT 6
26160: PPUSH
26161: LD_VAR 0 16
26165: PPUSH
26166: CALL_OW 321
26170: PUSH
26171: LD_INT 2
26173: EQUAL
26174: AND
26175: IFFALSE 26340
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26177: LD_INT 22
26179: PUSH
26180: LD_VAR 0 16
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 35
26194: PUSH
26195: LD_INT 11
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 35
26204: PUSH
26205: LD_INT 30
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 91
26219: PUSH
26220: LD_VAR 0 1
26224: PUSH
26225: LD_INT 18
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: PPUSH
26238: CALL_OW 69
26242: NOT
26243: PUSH
26244: LD_INT 22
26246: PUSH
26247: LD_VAR 0 16
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 30
26261: PUSH
26262: LD_INT 32
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 30
26271: PUSH
26272: LD_INT 33
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 91
26286: PUSH
26287: LD_VAR 0 1
26291: PUSH
26292: LD_INT 12
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: PUSH
26313: LD_INT 2
26315: GREATER
26316: AND
26317: IFFALSE 26340
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26319: LD_ADDR_VAR 0 18
26323: PUSH
26324: LD_INT 11
26326: PUSH
26327: LD_INT 30
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_VAR 0 12
26338: ARRAY
26339: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26340: LD_VAR 0 18
26344: NOT
26345: PUSH
26346: LD_INT 40
26348: PPUSH
26349: LD_VAR 0 16
26353: PPUSH
26354: CALL_OW 321
26358: PUSH
26359: LD_INT 2
26361: EQUAL
26362: AND
26363: PUSH
26364: LD_INT 7
26366: PUSH
26367: LD_VAR 0 5
26371: IN
26372: PUSH
26373: LD_INT 28
26375: PUSH
26376: LD_VAR 0 5
26380: IN
26381: OR
26382: PUSH
26383: LD_INT 45
26385: PUSH
26386: LD_VAR 0 5
26390: IN
26391: OR
26392: AND
26393: IFFALSE 26647
// begin hex := GetHexInfo ( x , y ) ;
26395: LD_ADDR_VAR 0 4
26399: PUSH
26400: LD_VAR 0 10
26404: PPUSH
26405: LD_VAR 0 11
26409: PPUSH
26410: CALL_OW 546
26414: ST_TO_ADDR
// if hex [ 1 ] then
26415: LD_VAR 0 4
26419: PUSH
26420: LD_INT 1
26422: ARRAY
26423: IFFALSE 26427
// exit ;
26425: GO 26830
// height := hex [ 2 ] ;
26427: LD_ADDR_VAR 0 15
26431: PUSH
26432: LD_VAR 0 4
26436: PUSH
26437: LD_INT 2
26439: ARRAY
26440: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26441: LD_ADDR_VAR 0 14
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: LD_INT 3
26454: PUSH
26455: LD_INT 5
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
// for i in tmp do
26464: LD_ADDR_VAR 0 8
26468: PUSH
26469: LD_VAR 0 14
26473: PUSH
26474: FOR_IN
26475: IFFALSE 26645
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26477: LD_ADDR_VAR 0 9
26481: PUSH
26482: LD_VAR 0 10
26486: PPUSH
26487: LD_VAR 0 8
26491: PPUSH
26492: LD_INT 5
26494: PPUSH
26495: CALL_OW 272
26499: PUSH
26500: LD_VAR 0 11
26504: PPUSH
26505: LD_VAR 0 8
26509: PPUSH
26510: LD_INT 5
26512: PPUSH
26513: CALL_OW 273
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26522: LD_VAR 0 9
26526: PUSH
26527: LD_INT 1
26529: ARRAY
26530: PPUSH
26531: LD_VAR 0 9
26535: PUSH
26536: LD_INT 2
26538: ARRAY
26539: PPUSH
26540: CALL_OW 488
26544: IFFALSE 26643
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: LD_VAR 0 9
26555: PUSH
26556: LD_INT 1
26558: ARRAY
26559: PPUSH
26560: LD_VAR 0 9
26564: PUSH
26565: LD_INT 2
26567: ARRAY
26568: PPUSH
26569: CALL_OW 546
26573: ST_TO_ADDR
// if hex [ 1 ] then
26574: LD_VAR 0 4
26578: PUSH
26579: LD_INT 1
26581: ARRAY
26582: IFFALSE 26586
// continue ;
26584: GO 26474
// h := hex [ 2 ] ;
26586: LD_ADDR_VAR 0 13
26590: PUSH
26591: LD_VAR 0 4
26595: PUSH
26596: LD_INT 2
26598: ARRAY
26599: ST_TO_ADDR
// if h + 7 < height then
26600: LD_VAR 0 13
26604: PUSH
26605: LD_INT 7
26607: PLUS
26608: PUSH
26609: LD_VAR 0 15
26613: LESS
26614: IFFALSE 26643
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26616: LD_ADDR_VAR 0 18
26620: PUSH
26621: LD_INT 7
26623: PUSH
26624: LD_INT 28
26626: PUSH
26627: LD_INT 45
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: PUSH
26635: LD_VAR 0 12
26639: ARRAY
26640: ST_TO_ADDR
// break ;
26641: GO 26645
// end ; end ; end ;
26643: GO 26474
26645: POP
26646: POP
// end ; if not weapon then
26647: LD_VAR 0 18
26651: NOT
26652: IFFALSE 26712
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26654: LD_ADDR_VAR 0 5
26658: PUSH
26659: LD_VAR 0 5
26663: PUSH
26664: LD_INT 11
26666: PUSH
26667: LD_INT 30
26669: PUSH
26670: LD_INT 49
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: DIFF
26678: ST_TO_ADDR
// if not list then
26679: LD_VAR 0 5
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26830
// weapon := list [ rand ( 1 , list ) ] ;
26688: LD_ADDR_VAR 0 18
26692: PUSH
26693: LD_VAR 0 5
26697: PUSH
26698: LD_INT 1
26700: PPUSH
26701: LD_VAR 0 5
26705: PPUSH
26706: CALL_OW 12
26710: ARRAY
26711: ST_TO_ADDR
// end ; if weapon then
26712: LD_VAR 0 18
26716: IFFALSE 26830
// begin tmp := CostOfWeapon ( weapon ) ;
26718: LD_ADDR_VAR 0 14
26722: PUSH
26723: LD_VAR 0 18
26727: PPUSH
26728: CALL_OW 451
26732: ST_TO_ADDR
// j := GetBase ( tower ) ;
26733: LD_ADDR_VAR 0 9
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 274
26747: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26748: LD_VAR 0 9
26752: PPUSH
26753: LD_INT 1
26755: PPUSH
26756: CALL_OW 275
26760: PUSH
26761: LD_VAR 0 14
26765: PUSH
26766: LD_INT 1
26768: ARRAY
26769: GREATEREQUAL
26770: PUSH
26771: LD_VAR 0 9
26775: PPUSH
26776: LD_INT 2
26778: PPUSH
26779: CALL_OW 275
26783: PUSH
26784: LD_VAR 0 14
26788: PUSH
26789: LD_INT 2
26791: ARRAY
26792: GREATEREQUAL
26793: AND
26794: PUSH
26795: LD_VAR 0 9
26799: PPUSH
26800: LD_INT 3
26802: PPUSH
26803: CALL_OW 275
26807: PUSH
26808: LD_VAR 0 14
26812: PUSH
26813: LD_INT 3
26815: ARRAY
26816: GREATEREQUAL
26817: AND
26818: IFFALSE 26830
// result := weapon ;
26820: LD_ADDR_VAR 0 3
26824: PUSH
26825: LD_VAR 0 18
26829: ST_TO_ADDR
// end ; end ;
26830: LD_VAR 0 3
26834: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26835: LD_INT 0
26837: PPUSH
26838: PPUSH
// result := true ;
26839: LD_ADDR_VAR 0 3
26843: PUSH
26844: LD_INT 1
26846: ST_TO_ADDR
// if array1 = array2 then
26847: LD_VAR 0 1
26851: PUSH
26852: LD_VAR 0 2
26856: EQUAL
26857: IFFALSE 26917
// begin for i = 1 to array1 do
26859: LD_ADDR_VAR 0 4
26863: PUSH
26864: DOUBLE
26865: LD_INT 1
26867: DEC
26868: ST_TO_ADDR
26869: LD_VAR 0 1
26873: PUSH
26874: FOR_TO
26875: IFFALSE 26913
// if array1 [ i ] <> array2 [ i ] then
26877: LD_VAR 0 1
26881: PUSH
26882: LD_VAR 0 4
26886: ARRAY
26887: PUSH
26888: LD_VAR 0 2
26892: PUSH
26893: LD_VAR 0 4
26897: ARRAY
26898: NONEQUAL
26899: IFFALSE 26911
// begin result := false ;
26901: LD_ADDR_VAR 0 3
26905: PUSH
26906: LD_INT 0
26908: ST_TO_ADDR
// break ;
26909: GO 26913
// end ;
26911: GO 26874
26913: POP
26914: POP
// end else
26915: GO 26925
// result := false ;
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: LD_INT 0
26924: ST_TO_ADDR
// end ;
26925: LD_VAR 0 3
26929: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26930: LD_INT 0
26932: PPUSH
26933: PPUSH
// if not array1 or not array2 then
26934: LD_VAR 0 1
26938: NOT
26939: PUSH
26940: LD_VAR 0 2
26944: NOT
26945: OR
26946: IFFALSE 26950
// exit ;
26948: GO 27014
// result := true ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_INT 1
26957: ST_TO_ADDR
// for i = 1 to array1 do
26958: LD_ADDR_VAR 0 4
26962: PUSH
26963: DOUBLE
26964: LD_INT 1
26966: DEC
26967: ST_TO_ADDR
26968: LD_VAR 0 1
26972: PUSH
26973: FOR_TO
26974: IFFALSE 27012
// if array1 [ i ] <> array2 [ i ] then
26976: LD_VAR 0 1
26980: PUSH
26981: LD_VAR 0 4
26985: ARRAY
26986: PUSH
26987: LD_VAR 0 2
26991: PUSH
26992: LD_VAR 0 4
26996: ARRAY
26997: NONEQUAL
26998: IFFALSE 27010
// begin result := false ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_INT 0
27007: ST_TO_ADDR
// break ;
27008: GO 27012
// end ;
27010: GO 26973
27012: POP
27013: POP
// end ;
27014: LD_VAR 0 3
27018: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27019: LD_INT 0
27021: PPUSH
27022: PPUSH
27023: PPUSH
// pom := GetBase ( fac ) ;
27024: LD_ADDR_VAR 0 5
27028: PUSH
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 274
27038: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27039: LD_ADDR_VAR 0 4
27043: PUSH
27044: LD_VAR 0 2
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 2
27060: ARRAY
27061: PPUSH
27062: LD_VAR 0 2
27066: PUSH
27067: LD_INT 3
27069: ARRAY
27070: PPUSH
27071: LD_VAR 0 2
27075: PUSH
27076: LD_INT 4
27078: ARRAY
27079: PPUSH
27080: CALL_OW 449
27084: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27085: LD_ADDR_VAR 0 3
27089: PUSH
27090: LD_VAR 0 5
27094: PPUSH
27095: LD_INT 1
27097: PPUSH
27098: CALL_OW 275
27102: PUSH
27103: LD_VAR 0 4
27107: PUSH
27108: LD_INT 1
27110: ARRAY
27111: GREATEREQUAL
27112: PUSH
27113: LD_VAR 0 5
27117: PPUSH
27118: LD_INT 2
27120: PPUSH
27121: CALL_OW 275
27125: PUSH
27126: LD_VAR 0 4
27130: PUSH
27131: LD_INT 2
27133: ARRAY
27134: GREATEREQUAL
27135: AND
27136: PUSH
27137: LD_VAR 0 5
27141: PPUSH
27142: LD_INT 3
27144: PPUSH
27145: CALL_OW 275
27149: PUSH
27150: LD_VAR 0 4
27154: PUSH
27155: LD_INT 3
27157: ARRAY
27158: GREATEREQUAL
27159: AND
27160: ST_TO_ADDR
// end ;
27161: LD_VAR 0 3
27165: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27166: LD_INT 0
27168: PPUSH
27169: PPUSH
27170: PPUSH
27171: PPUSH
// pom := GetBase ( building ) ;
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_VAR 0 1
27181: PPUSH
27182: CALL_OW 274
27186: ST_TO_ADDR
// if not pom then
27187: LD_VAR 0 3
27191: NOT
27192: IFFALSE 27196
// exit ;
27194: GO 27366
// btype := GetBType ( building ) ;
27196: LD_ADDR_VAR 0 5
27200: PUSH
27201: LD_VAR 0 1
27205: PPUSH
27206: CALL_OW 266
27210: ST_TO_ADDR
// if btype = b_armoury then
27211: LD_VAR 0 5
27215: PUSH
27216: LD_INT 4
27218: EQUAL
27219: IFFALSE 27229
// btype := b_barracks ;
27221: LD_ADDR_VAR 0 5
27225: PUSH
27226: LD_INT 5
27228: ST_TO_ADDR
// if btype = b_depot then
27229: LD_VAR 0 5
27233: PUSH
27234: LD_INT 0
27236: EQUAL
27237: IFFALSE 27247
// btype := b_warehouse ;
27239: LD_ADDR_VAR 0 5
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
// if btype = b_workshop then
27247: LD_VAR 0 5
27251: PUSH
27252: LD_INT 2
27254: EQUAL
27255: IFFALSE 27265
// btype := b_factory ;
27257: LD_ADDR_VAR 0 5
27261: PUSH
27262: LD_INT 3
27264: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27265: LD_ADDR_VAR 0 4
27269: PUSH
27270: LD_VAR 0 5
27274: PPUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 248
27284: PPUSH
27285: CALL_OW 450
27289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27290: LD_ADDR_VAR 0 2
27294: PUSH
27295: LD_VAR 0 3
27299: PPUSH
27300: LD_INT 1
27302: PPUSH
27303: CALL_OW 275
27307: PUSH
27308: LD_VAR 0 4
27312: PUSH
27313: LD_INT 1
27315: ARRAY
27316: GREATEREQUAL
27317: PUSH
27318: LD_VAR 0 3
27322: PPUSH
27323: LD_INT 2
27325: PPUSH
27326: CALL_OW 275
27330: PUSH
27331: LD_VAR 0 4
27335: PUSH
27336: LD_INT 2
27338: ARRAY
27339: GREATEREQUAL
27340: AND
27341: PUSH
27342: LD_VAR 0 3
27346: PPUSH
27347: LD_INT 3
27349: PPUSH
27350: CALL_OW 275
27354: PUSH
27355: LD_VAR 0 4
27359: PUSH
27360: LD_INT 3
27362: ARRAY
27363: GREATEREQUAL
27364: AND
27365: ST_TO_ADDR
// end ;
27366: LD_VAR 0 2
27370: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
27375: PPUSH
// pom := GetBase ( building ) ;
27376: LD_ADDR_VAR 0 4
27380: PUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL_OW 274
27390: ST_TO_ADDR
// if not pom then
27391: LD_VAR 0 4
27395: NOT
27396: IFFALSE 27400
// exit ;
27398: GO 27501
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27400: LD_ADDR_VAR 0 5
27404: PUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 248
27419: PPUSH
27420: CALL_OW 450
27424: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_VAR 0 4
27434: PPUSH
27435: LD_INT 1
27437: PPUSH
27438: CALL_OW 275
27442: PUSH
27443: LD_VAR 0 5
27447: PUSH
27448: LD_INT 1
27450: ARRAY
27451: GREATEREQUAL
27452: PUSH
27453: LD_VAR 0 4
27457: PPUSH
27458: LD_INT 2
27460: PPUSH
27461: CALL_OW 275
27465: PUSH
27466: LD_VAR 0 5
27470: PUSH
27471: LD_INT 2
27473: ARRAY
27474: GREATEREQUAL
27475: AND
27476: PUSH
27477: LD_VAR 0 4
27481: PPUSH
27482: LD_INT 3
27484: PPUSH
27485: CALL_OW 275
27489: PUSH
27490: LD_VAR 0 5
27494: PUSH
27495: LD_INT 3
27497: ARRAY
27498: GREATEREQUAL
27499: AND
27500: ST_TO_ADDR
// end ;
27501: LD_VAR 0 3
27505: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27506: LD_INT 0
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
// result := false ;
27519: LD_ADDR_VAR 0 8
27523: PUSH
27524: LD_INT 0
27526: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27527: LD_VAR 0 5
27531: NOT
27532: PUSH
27533: LD_VAR 0 1
27537: NOT
27538: OR
27539: PUSH
27540: LD_VAR 0 2
27544: NOT
27545: OR
27546: PUSH
27547: LD_VAR 0 3
27551: NOT
27552: OR
27553: IFFALSE 27557
// exit ;
27555: GO 28371
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27557: LD_ADDR_VAR 0 14
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_VAR 0 3
27576: PPUSH
27577: LD_VAR 0 4
27581: PPUSH
27582: LD_VAR 0 5
27586: PUSH
27587: LD_INT 1
27589: ARRAY
27590: PPUSH
27591: CALL_OW 248
27595: PPUSH
27596: LD_INT 0
27598: PPUSH
27599: CALL 29624 0 6
27603: ST_TO_ADDR
// if not hexes then
27604: LD_VAR 0 14
27608: NOT
27609: IFFALSE 27613
// exit ;
27611: GO 28371
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27613: LD_ADDR_VAR 0 17
27617: PUSH
27618: LD_VAR 0 5
27622: PPUSH
27623: LD_INT 22
27625: PUSH
27626: LD_VAR 0 13
27630: PPUSH
27631: CALL_OW 255
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: LD_INT 30
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 30
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 72
27676: ST_TO_ADDR
// for i = 1 to hexes do
27677: LD_ADDR_VAR 0 9
27681: PUSH
27682: DOUBLE
27683: LD_INT 1
27685: DEC
27686: ST_TO_ADDR
27687: LD_VAR 0 14
27691: PUSH
27692: FOR_TO
27693: IFFALSE 28369
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27695: LD_ADDR_VAR 0 13
27699: PUSH
27700: LD_VAR 0 14
27704: PUSH
27705: LD_VAR 0 9
27709: ARRAY
27710: PUSH
27711: LD_INT 1
27713: ARRAY
27714: PPUSH
27715: LD_VAR 0 14
27719: PUSH
27720: LD_VAR 0 9
27724: ARRAY
27725: PUSH
27726: LD_INT 2
27728: ARRAY
27729: PPUSH
27730: CALL_OW 428
27734: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27735: LD_VAR 0 14
27739: PUSH
27740: LD_VAR 0 9
27744: ARRAY
27745: PUSH
27746: LD_INT 1
27748: ARRAY
27749: PPUSH
27750: LD_VAR 0 14
27754: PUSH
27755: LD_VAR 0 9
27759: ARRAY
27760: PUSH
27761: LD_INT 2
27763: ARRAY
27764: PPUSH
27765: CALL_OW 351
27769: PUSH
27770: LD_VAR 0 14
27774: PUSH
27775: LD_VAR 0 9
27779: ARRAY
27780: PUSH
27781: LD_INT 1
27783: ARRAY
27784: PPUSH
27785: LD_VAR 0 14
27789: PUSH
27790: LD_VAR 0 9
27794: ARRAY
27795: PUSH
27796: LD_INT 2
27798: ARRAY
27799: PPUSH
27800: CALL_OW 488
27804: NOT
27805: OR
27806: PUSH
27807: LD_VAR 0 13
27811: PPUSH
27812: CALL_OW 247
27816: PUSH
27817: LD_INT 3
27819: EQUAL
27820: OR
27821: IFFALSE 27827
// exit ;
27823: POP
27824: POP
27825: GO 28371
// if not tmp then
27827: LD_VAR 0 13
27831: NOT
27832: IFFALSE 27836
// continue ;
27834: GO 27692
// result := true ;
27836: LD_ADDR_VAR 0 8
27840: PUSH
27841: LD_INT 1
27843: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27844: LD_VAR 0 6
27848: PUSH
27849: LD_VAR 0 13
27853: PPUSH
27854: CALL_OW 247
27858: PUSH
27859: LD_INT 2
27861: EQUAL
27862: AND
27863: PUSH
27864: LD_VAR 0 13
27868: PPUSH
27869: CALL_OW 263
27873: PUSH
27874: LD_INT 1
27876: EQUAL
27877: AND
27878: IFFALSE 28042
// begin if IsDrivenBy ( tmp ) then
27880: LD_VAR 0 13
27884: PPUSH
27885: CALL_OW 311
27889: IFFALSE 27893
// continue ;
27891: GO 27692
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27893: LD_VAR 0 6
27897: PPUSH
27898: LD_INT 3
27900: PUSH
27901: LD_INT 60
27903: PUSH
27904: EMPTY
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 3
27913: PUSH
27914: LD_INT 55
27916: PUSH
27917: EMPTY
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 72
27932: IFFALSE 28040
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27934: LD_ADDR_VAR 0 18
27938: PUSH
27939: LD_VAR 0 6
27943: PPUSH
27944: LD_INT 3
27946: PUSH
27947: LD_INT 60
27949: PUSH
27950: EMPTY
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: PUSH
27960: LD_INT 55
27962: PUSH
27963: EMPTY
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 72
27978: PUSH
27979: LD_INT 1
27981: ARRAY
27982: ST_TO_ADDR
// if IsInUnit ( driver ) then
27983: LD_VAR 0 18
27987: PPUSH
27988: CALL_OW 310
27992: IFFALSE 28003
// ComExit ( driver ) ;
27994: LD_VAR 0 18
27998: PPUSH
27999: CALL 53403 0 1
// AddComEnterUnit ( driver , tmp ) ;
28003: LD_VAR 0 18
28007: PPUSH
28008: LD_VAR 0 13
28012: PPUSH
28013: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28017: LD_VAR 0 18
28021: PPUSH
28022: LD_VAR 0 7
28026: PPUSH
28027: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28031: LD_VAR 0 18
28035: PPUSH
28036: CALL_OW 181
// end ; continue ;
28040: GO 27692
// end ; if not cleaners or not tmp in cleaners then
28042: LD_VAR 0 6
28046: NOT
28047: PUSH
28048: LD_VAR 0 13
28052: PUSH
28053: LD_VAR 0 6
28057: IN
28058: NOT
28059: OR
28060: IFFALSE 28367
// begin if dep then
28062: LD_VAR 0 17
28066: IFFALSE 28202
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28068: LD_ADDR_VAR 0 16
28072: PUSH
28073: LD_VAR 0 17
28077: PUSH
28078: LD_INT 1
28080: ARRAY
28081: PPUSH
28082: CALL_OW 250
28086: PPUSH
28087: LD_VAR 0 17
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: CALL_OW 254
28100: PPUSH
28101: LD_INT 5
28103: PPUSH
28104: CALL_OW 272
28108: PUSH
28109: LD_VAR 0 17
28113: PUSH
28114: LD_INT 1
28116: ARRAY
28117: PPUSH
28118: CALL_OW 251
28122: PPUSH
28123: LD_VAR 0 17
28127: PUSH
28128: LD_INT 1
28130: ARRAY
28131: PPUSH
28132: CALL_OW 254
28136: PPUSH
28137: LD_INT 5
28139: PPUSH
28140: CALL_OW 273
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28149: LD_VAR 0 16
28153: PUSH
28154: LD_INT 1
28156: ARRAY
28157: PPUSH
28158: LD_VAR 0 16
28162: PUSH
28163: LD_INT 2
28165: ARRAY
28166: PPUSH
28167: CALL_OW 488
28171: IFFALSE 28202
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28173: LD_VAR 0 13
28177: PPUSH
28178: LD_VAR 0 16
28182: PUSH
28183: LD_INT 1
28185: ARRAY
28186: PPUSH
28187: LD_VAR 0 16
28191: PUSH
28192: LD_INT 2
28194: ARRAY
28195: PPUSH
28196: CALL_OW 111
// continue ;
28200: GO 27692
// end ; end ; r := GetDir ( tmp ) ;
28202: LD_ADDR_VAR 0 15
28206: PUSH
28207: LD_VAR 0 13
28211: PPUSH
28212: CALL_OW 254
28216: ST_TO_ADDR
// if r = 5 then
28217: LD_VAR 0 15
28221: PUSH
28222: LD_INT 5
28224: EQUAL
28225: IFFALSE 28235
// r := 0 ;
28227: LD_ADDR_VAR 0 15
28231: PUSH
28232: LD_INT 0
28234: ST_TO_ADDR
// for j = r to 5 do
28235: LD_ADDR_VAR 0 10
28239: PUSH
28240: DOUBLE
28241: LD_VAR 0 15
28245: DEC
28246: ST_TO_ADDR
28247: LD_INT 5
28249: PUSH
28250: FOR_TO
28251: IFFALSE 28365
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28253: LD_ADDR_VAR 0 11
28257: PUSH
28258: LD_VAR 0 13
28262: PPUSH
28263: CALL_OW 250
28267: PPUSH
28268: LD_VAR 0 10
28272: PPUSH
28273: LD_INT 2
28275: PPUSH
28276: CALL_OW 272
28280: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28281: LD_ADDR_VAR 0 12
28285: PUSH
28286: LD_VAR 0 13
28290: PPUSH
28291: CALL_OW 251
28295: PPUSH
28296: LD_VAR 0 10
28300: PPUSH
28301: LD_INT 2
28303: PPUSH
28304: CALL_OW 273
28308: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28309: LD_VAR 0 11
28313: PPUSH
28314: LD_VAR 0 12
28318: PPUSH
28319: CALL_OW 488
28323: PUSH
28324: LD_VAR 0 11
28328: PPUSH
28329: LD_VAR 0 12
28333: PPUSH
28334: CALL_OW 428
28338: NOT
28339: AND
28340: IFFALSE 28363
// begin ComMoveXY ( tmp , _x , _y ) ;
28342: LD_VAR 0 13
28346: PPUSH
28347: LD_VAR 0 11
28351: PPUSH
28352: LD_VAR 0 12
28356: PPUSH
28357: CALL_OW 111
// break ;
28361: GO 28365
// end ; end ;
28363: GO 28250
28365: POP
28366: POP
// end ; end ;
28367: GO 27692
28369: POP
28370: POP
// end ;
28371: LD_VAR 0 8
28375: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28376: LD_INT 0
28378: PPUSH
// result := true ;
28379: LD_ADDR_VAR 0 3
28383: PUSH
28384: LD_INT 1
28386: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28387: LD_VAR 0 2
28391: PUSH
28392: LD_INT 24
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28406
28398: LD_INT 33
28400: DOUBLE
28401: EQUAL
28402: IFTRUE 28406
28404: GO 28431
28406: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28407: LD_ADDR_VAR 0 3
28411: PUSH
28412: LD_INT 32
28414: PPUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 321
28424: PUSH
28425: LD_INT 2
28427: EQUAL
28428: ST_TO_ADDR
28429: GO 28747
28431: LD_INT 20
28433: DOUBLE
28434: EQUAL
28435: IFTRUE 28439
28437: GO 28464
28439: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28440: LD_ADDR_VAR 0 3
28444: PUSH
28445: LD_INT 6
28447: PPUSH
28448: LD_VAR 0 1
28452: PPUSH
28453: CALL_OW 321
28457: PUSH
28458: LD_INT 2
28460: EQUAL
28461: ST_TO_ADDR
28462: GO 28747
28464: LD_INT 22
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28478
28470: LD_INT 36
28472: DOUBLE
28473: EQUAL
28474: IFTRUE 28478
28476: GO 28503
28478: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28479: LD_ADDR_VAR 0 3
28483: PUSH
28484: LD_INT 15
28486: PPUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 321
28496: PUSH
28497: LD_INT 2
28499: EQUAL
28500: ST_TO_ADDR
28501: GO 28747
28503: LD_INT 30
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28536
28511: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_INT 20
28519: PPUSH
28520: LD_VAR 0 1
28524: PPUSH
28525: CALL_OW 321
28529: PUSH
28530: LD_INT 2
28532: EQUAL
28533: ST_TO_ADDR
28534: GO 28747
28536: LD_INT 28
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28550
28542: LD_INT 21
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28550
28548: GO 28575
28550: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 21
28558: PPUSH
28559: LD_VAR 0 1
28563: PPUSH
28564: CALL_OW 321
28568: PUSH
28569: LD_INT 2
28571: EQUAL
28572: ST_TO_ADDR
28573: GO 28747
28575: LD_INT 16
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28608
28583: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 84
28591: PPUSH
28592: LD_VAR 0 1
28596: PPUSH
28597: CALL_OW 321
28601: PUSH
28602: LD_INT 2
28604: EQUAL
28605: ST_TO_ADDR
28606: GO 28747
28608: LD_INT 19
28610: DOUBLE
28611: EQUAL
28612: IFTRUE 28622
28614: LD_INT 23
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28647
28622: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 83
28630: PPUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 321
28640: PUSH
28641: LD_INT 2
28643: EQUAL
28644: ST_TO_ADDR
28645: GO 28747
28647: LD_INT 17
28649: DOUBLE
28650: EQUAL
28651: IFTRUE 28655
28653: GO 28680
28655: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28656: LD_ADDR_VAR 0 3
28660: PUSH
28661: LD_INT 39
28663: PPUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 321
28673: PUSH
28674: LD_INT 2
28676: EQUAL
28677: ST_TO_ADDR
28678: GO 28747
28680: LD_INT 18
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28688
28686: GO 28713
28688: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28689: LD_ADDR_VAR 0 3
28693: PUSH
28694: LD_INT 40
28696: PPUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL_OW 321
28706: PUSH
28707: LD_INT 2
28709: EQUAL
28710: ST_TO_ADDR
28711: GO 28747
28713: LD_INT 27
28715: DOUBLE
28716: EQUAL
28717: IFTRUE 28721
28719: GO 28746
28721: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_INT 35
28729: PPUSH
28730: LD_VAR 0 1
28734: PPUSH
28735: CALL_OW 321
28739: PUSH
28740: LD_INT 2
28742: EQUAL
28743: ST_TO_ADDR
28744: GO 28747
28746: POP
// end ;
28747: LD_VAR 0 3
28751: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28752: LD_INT 0
28754: PPUSH
28755: PPUSH
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
// result := false ;
28765: LD_ADDR_VAR 0 6
28769: PUSH
28770: LD_INT 0
28772: ST_TO_ADDR
// if btype = b_depot then
28773: LD_VAR 0 2
28777: PUSH
28778: LD_INT 0
28780: EQUAL
28781: IFFALSE 28793
// begin result := true ;
28783: LD_ADDR_VAR 0 6
28787: PUSH
28788: LD_INT 1
28790: ST_TO_ADDR
// exit ;
28791: GO 29619
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28793: LD_VAR 0 1
28797: NOT
28798: PUSH
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 266
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: IN
28819: NOT
28820: OR
28821: PUSH
28822: LD_VAR 0 2
28826: NOT
28827: OR
28828: PUSH
28829: LD_VAR 0 5
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: LD_INT 4
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: IN
28860: NOT
28861: OR
28862: PUSH
28863: LD_VAR 0 3
28867: PPUSH
28868: LD_VAR 0 4
28872: PPUSH
28873: CALL_OW 488
28877: NOT
28878: OR
28879: IFFALSE 28883
// exit ;
28881: GO 29619
// side := GetSide ( depot ) ;
28883: LD_ADDR_VAR 0 9
28887: PUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL_OW 255
28897: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28898: LD_VAR 0 9
28902: PPUSH
28903: LD_VAR 0 2
28907: PPUSH
28908: CALL 28376 0 2
28912: NOT
28913: IFFALSE 28917
// exit ;
28915: GO 29619
// pom := GetBase ( depot ) ;
28917: LD_ADDR_VAR 0 10
28921: PUSH
28922: LD_VAR 0 1
28926: PPUSH
28927: CALL_OW 274
28931: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28932: LD_ADDR_VAR 0 11
28936: PUSH
28937: LD_VAR 0 2
28941: PPUSH
28942: LD_VAR 0 1
28946: PPUSH
28947: CALL_OW 248
28951: PPUSH
28952: CALL_OW 450
28956: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28957: LD_VAR 0 10
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 275
28969: PUSH
28970: LD_VAR 0 11
28974: PUSH
28975: LD_INT 1
28977: ARRAY
28978: GREATEREQUAL
28979: PUSH
28980: LD_VAR 0 10
28984: PPUSH
28985: LD_INT 2
28987: PPUSH
28988: CALL_OW 275
28992: PUSH
28993: LD_VAR 0 11
28997: PUSH
28998: LD_INT 2
29000: ARRAY
29001: GREATEREQUAL
29002: AND
29003: PUSH
29004: LD_VAR 0 10
29008: PPUSH
29009: LD_INT 3
29011: PPUSH
29012: CALL_OW 275
29016: PUSH
29017: LD_VAR 0 11
29021: PUSH
29022: LD_INT 3
29024: ARRAY
29025: GREATEREQUAL
29026: AND
29027: NOT
29028: IFFALSE 29032
// exit ;
29030: GO 29619
// if GetBType ( depot ) = b_depot then
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 266
29041: PUSH
29042: LD_INT 0
29044: EQUAL
29045: IFFALSE 29057
// dist := 28 else
29047: LD_ADDR_VAR 0 14
29051: PUSH
29052: LD_INT 28
29054: ST_TO_ADDR
29055: GO 29065
// dist := 36 ;
29057: LD_ADDR_VAR 0 14
29061: PUSH
29062: LD_INT 36
29064: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29065: LD_VAR 0 1
29069: PPUSH
29070: LD_VAR 0 3
29074: PPUSH
29075: LD_VAR 0 4
29079: PPUSH
29080: CALL_OW 297
29084: PUSH
29085: LD_VAR 0 14
29089: GREATER
29090: IFFALSE 29094
// exit ;
29092: GO 29619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29094: LD_ADDR_VAR 0 12
29098: PUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: LD_VAR 0 3
29108: PPUSH
29109: LD_VAR 0 4
29113: PPUSH
29114: LD_VAR 0 5
29118: PPUSH
29119: LD_VAR 0 1
29123: PPUSH
29124: CALL_OW 248
29128: PPUSH
29129: LD_INT 0
29131: PPUSH
29132: CALL 29624 0 6
29136: ST_TO_ADDR
// if not hexes then
29137: LD_VAR 0 12
29141: NOT
29142: IFFALSE 29146
// exit ;
29144: GO 29619
// hex := GetHexInfo ( x , y ) ;
29146: LD_ADDR_VAR 0 15
29150: PUSH
29151: LD_VAR 0 3
29155: PPUSH
29156: LD_VAR 0 4
29160: PPUSH
29161: CALL_OW 546
29165: ST_TO_ADDR
// if hex [ 1 ] then
29166: LD_VAR 0 15
29170: PUSH
29171: LD_INT 1
29173: ARRAY
29174: IFFALSE 29178
// exit ;
29176: GO 29619
// height := hex [ 2 ] ;
29178: LD_ADDR_VAR 0 13
29182: PUSH
29183: LD_VAR 0 15
29187: PUSH
29188: LD_INT 2
29190: ARRAY
29191: ST_TO_ADDR
// for i = 1 to hexes do
29192: LD_ADDR_VAR 0 7
29196: PUSH
29197: DOUBLE
29198: LD_INT 1
29200: DEC
29201: ST_TO_ADDR
29202: LD_VAR 0 12
29206: PUSH
29207: FOR_TO
29208: IFFALSE 29538
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29210: LD_VAR 0 12
29214: PUSH
29215: LD_VAR 0 7
29219: ARRAY
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PPUSH
29225: LD_VAR 0 12
29229: PUSH
29230: LD_VAR 0 7
29234: ARRAY
29235: PUSH
29236: LD_INT 2
29238: ARRAY
29239: PPUSH
29240: CALL_OW 488
29244: NOT
29245: PUSH
29246: LD_VAR 0 12
29250: PUSH
29251: LD_VAR 0 7
29255: ARRAY
29256: PUSH
29257: LD_INT 1
29259: ARRAY
29260: PPUSH
29261: LD_VAR 0 12
29265: PUSH
29266: LD_VAR 0 7
29270: ARRAY
29271: PUSH
29272: LD_INT 2
29274: ARRAY
29275: PPUSH
29276: CALL_OW 428
29280: PUSH
29281: LD_INT 0
29283: GREATER
29284: OR
29285: PUSH
29286: LD_VAR 0 12
29290: PUSH
29291: LD_VAR 0 7
29295: ARRAY
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: LD_VAR 0 12
29305: PUSH
29306: LD_VAR 0 7
29310: ARRAY
29311: PUSH
29312: LD_INT 2
29314: ARRAY
29315: PPUSH
29316: CALL_OW 351
29320: OR
29321: IFFALSE 29327
// exit ;
29323: POP
29324: POP
29325: GO 29619
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29327: LD_ADDR_VAR 0 8
29331: PUSH
29332: LD_VAR 0 12
29336: PUSH
29337: LD_VAR 0 7
29341: ARRAY
29342: PUSH
29343: LD_INT 1
29345: ARRAY
29346: PPUSH
29347: LD_VAR 0 12
29351: PUSH
29352: LD_VAR 0 7
29356: ARRAY
29357: PUSH
29358: LD_INT 2
29360: ARRAY
29361: PPUSH
29362: CALL_OW 546
29366: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29367: LD_VAR 0 8
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PUSH
29376: LD_VAR 0 8
29380: PUSH
29381: LD_INT 2
29383: ARRAY
29384: PUSH
29385: LD_VAR 0 13
29389: PUSH
29390: LD_INT 2
29392: PLUS
29393: GREATER
29394: OR
29395: PUSH
29396: LD_VAR 0 8
29400: PUSH
29401: LD_INT 2
29403: ARRAY
29404: PUSH
29405: LD_VAR 0 13
29409: PUSH
29410: LD_INT 2
29412: MINUS
29413: LESS
29414: OR
29415: PUSH
29416: LD_VAR 0 8
29420: PUSH
29421: LD_INT 3
29423: ARRAY
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 8
29430: PUSH
29431: LD_INT 9
29433: PUSH
29434: LD_INT 10
29436: PUSH
29437: LD_INT 11
29439: PUSH
29440: LD_INT 12
29442: PUSH
29443: LD_INT 13
29445: PUSH
29446: LD_INT 16
29448: PUSH
29449: LD_INT 17
29451: PUSH
29452: LD_INT 18
29454: PUSH
29455: LD_INT 19
29457: PUSH
29458: LD_INT 20
29460: PUSH
29461: LD_INT 21
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: IN
29479: NOT
29480: OR
29481: PUSH
29482: LD_VAR 0 8
29486: PUSH
29487: LD_INT 5
29489: ARRAY
29490: NOT
29491: OR
29492: PUSH
29493: LD_VAR 0 8
29497: PUSH
29498: LD_INT 6
29500: ARRAY
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: LD_INT 7
29510: PUSH
29511: LD_INT 9
29513: PUSH
29514: LD_INT 10
29516: PUSH
29517: LD_INT 11
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: IN
29528: NOT
29529: OR
29530: IFFALSE 29536
// exit ;
29532: POP
29533: POP
29534: GO 29619
// end ;
29536: GO 29207
29538: POP
29539: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29540: LD_VAR 0 9
29544: PPUSH
29545: LD_VAR 0 3
29549: PPUSH
29550: LD_VAR 0 4
29554: PPUSH
29555: LD_INT 20
29557: PPUSH
29558: CALL 21542 0 4
29562: PUSH
29563: LD_INT 4
29565: ARRAY
29566: IFFALSE 29570
// exit ;
29568: GO 29619
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29570: LD_VAR 0 2
29574: PUSH
29575: LD_INT 29
29577: PUSH
29578: LD_INT 30
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: IN
29585: PUSH
29586: LD_VAR 0 3
29590: PPUSH
29591: LD_VAR 0 4
29595: PPUSH
29596: LD_VAR 0 9
29600: PPUSH
29601: CALL_OW 440
29605: NOT
29606: AND
29607: IFFALSE 29611
// exit ;
29609: GO 29619
// result := true ;
29611: LD_ADDR_VAR 0 6
29615: PUSH
29616: LD_INT 1
29618: ST_TO_ADDR
// end ;
29619: LD_VAR 0 6
29623: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29624: LD_INT 0
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
29644: PPUSH
29645: PPUSH
29646: PPUSH
29647: PPUSH
29648: PPUSH
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
29655: PPUSH
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
29666: PPUSH
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
29677: PPUSH
29678: PPUSH
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
// result = [ ] ;
29684: LD_ADDR_VAR 0 7
29688: PUSH
29689: EMPTY
29690: ST_TO_ADDR
// temp_list = [ ] ;
29691: LD_ADDR_VAR 0 9
29695: PUSH
29696: EMPTY
29697: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29698: LD_VAR 0 4
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 4
29717: PUSH
29718: LD_INT 5
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: IN
29729: NOT
29730: PUSH
29731: LD_VAR 0 1
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: IN
29746: PUSH
29747: LD_VAR 0 5
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: IN
29766: NOT
29767: AND
29768: OR
29769: IFFALSE 29773
// exit ;
29771: GO 48164
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29773: LD_VAR 0 1
29777: PUSH
29778: LD_INT 6
29780: PUSH
29781: LD_INT 7
29783: PUSH
29784: LD_INT 8
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: LD_INT 12
29792: PUSH
29793: LD_INT 15
29795: PUSH
29796: LD_INT 11
29798: PUSH
29799: LD_INT 14
29801: PUSH
29802: LD_INT 10
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: IN
29816: IFFALSE 29826
// btype = b_lab ;
29818: LD_ADDR_VAR 0 1
29822: PUSH
29823: LD_INT 6
29825: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29826: LD_VAR 0 6
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: IN
29845: NOT
29846: PUSH
29847: LD_VAR 0 1
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 3
29863: PUSH
29864: LD_INT 6
29866: PUSH
29867: LD_INT 36
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: LD_INT 5
29875: PUSH
29876: LD_INT 31
29878: PUSH
29879: LD_INT 32
29881: PUSH
29882: LD_INT 33
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: IN
29898: NOT
29899: PUSH
29900: LD_VAR 0 6
29904: PUSH
29905: LD_INT 1
29907: EQUAL
29908: AND
29909: OR
29910: PUSH
29911: LD_VAR 0 1
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 3
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: IN
29926: NOT
29927: PUSH
29928: LD_VAR 0 6
29932: PUSH
29933: LD_INT 2
29935: EQUAL
29936: AND
29937: OR
29938: IFFALSE 29948
// mode = 0 ;
29940: LD_ADDR_VAR 0 6
29944: PUSH
29945: LD_INT 0
29947: ST_TO_ADDR
// case mode of 0 :
29948: LD_VAR 0 6
29952: PUSH
29953: LD_INT 0
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 41414
29961: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29962: LD_ADDR_VAR 0 11
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 3
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30155: LD_ADDR_VAR 0 12
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: NEG
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 3
30312: NEG
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 3
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30351: LD_ADDR_VAR 0 13
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 2
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30550: LD_ADDR_VAR 0 14
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 3
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 3
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: LD_INT 2
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30746: LD_ADDR_VAR 0 15
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30939: LD_ADDR_VAR 0 16
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 3
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: LD_INT 3
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: LD_INT 3
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31132: LD_ADDR_VAR 0 17
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31362: LD_ADDR_VAR 0 18
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 2
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 2
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31592: LD_ADDR_VAR 0 19
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31822: LD_ADDR_VAR 0 20
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32052: LD_ADDR_VAR 0 21
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: NEG
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32282: LD_ADDR_VAR 0 22
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 2
32458: NEG
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32512: LD_ADDR_VAR 0 23
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 2
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 3
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32792: LD_ADDR_VAR 0 24
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 3
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33068: LD_ADDR_VAR 0 25
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 3
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 3
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: LD_INT 3
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33342: LD_ADDR_VAR 0 26
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 2
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: LD_INT 3
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33618: LD_ADDR_VAR 0 27
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 2
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33898: LD_ADDR_VAR 0 28
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: LD_INT 2
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: LD_INT 3
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: LD_INT 3
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 3
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: NEG
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34180: LD_ADDR_VAR 0 29
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: LD_INT 3
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34459: LD_ADDR_VAR 0 30
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: NEG
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 3
34652: NEG
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 3
34702: NEG
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34737: LD_ADDR_VAR 0 31
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: LD_INT 2
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 3
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 3
34980: NEG
34981: PUSH
34982: LD_INT 2
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35015: LD_ADDR_VAR 0 32
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 2
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 3
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35293: LD_ADDR_VAR 0 33
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: NEG
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: LD_INT 3
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 3
35537: NEG
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35572: LD_ADDR_VAR 0 34
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 2
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: LD_INT 2
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: LD_INT 2
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 3
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 3
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: LD_INT 3
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 3
35817: NEG
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35852: LD_ADDR_VAR 0 35
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35964: LD_ADDR_VAR 0 36
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36076: LD_ADDR_VAR 0 37
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36188: LD_ADDR_VAR 0 38
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36300: LD_ADDR_VAR 0 39
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36412: LD_ADDR_VAR 0 40
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36524: LD_ADDR_VAR 0 41
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 3
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 3
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: NEG
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 3
36798: NEG
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 3
36809: NEG
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 3
36821: NEG
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 3
36833: NEG
36834: PUSH
36835: LD_INT 3
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36874: LD_ADDR_VAR 0 42
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 3
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 3
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 3
37120: PUSH
37121: LD_INT 3
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 3
37171: NEG
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: NEG
37184: PUSH
37185: LD_INT 3
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37224: LD_ADDR_VAR 0 43
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 3
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 3
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 3
37520: NEG
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37572: LD_ADDR_VAR 0 44
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 2
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 3
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 3
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 3
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: LD_INT 3
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: NEG
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: NEG
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 3
37869: NEG
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 3
37881: NEG
37882: PUSH
37883: LD_INT 3
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37922: LD_ADDR_VAR 0 45
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: LD_INT 3
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 3
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 3
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 3
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: NEG
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38272: LD_ADDR_VAR 0 46
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: NEG
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 3
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 3
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38620: LD_ADDR_VAR 0 47
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38771: LD_ADDR_VAR 0 48
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38918: LD_ADDR_VAR 0 49
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39062: LD_ADDR_VAR 0 50
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39206: LD_ADDR_VAR 0 51
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39353: LD_ADDR_VAR 0 52
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39504: LD_ADDR_VAR 0 53
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39734: LD_ADDR_VAR 0 54
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 2
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39964: LD_ADDR_VAR 0 55
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40194: LD_ADDR_VAR 0 56
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40424: LD_ADDR_VAR 0 57
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40654: LD_ADDR_VAR 0 58
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40884: LD_ADDR_VAR 0 59
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40972: LD_ADDR_VAR 0 60
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41060: LD_ADDR_VAR 0 61
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41148: LD_ADDR_VAR 0 62
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41236: LD_ADDR_VAR 0 63
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41324: LD_ADDR_VAR 0 64
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: ST_TO_ADDR
// end ; 1 :
41412: GO 47309
41414: LD_INT 1
41416: DOUBLE
41417: EQUAL
41418: IFTRUE 41422
41420: GO 44045
41422: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41423: LD_ADDR_VAR 0 11
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41467: LD_ADDR_VAR 0 12
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41508: LD_ADDR_VAR 0 13
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41548: LD_ADDR_VAR 0 14
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41589: LD_ADDR_VAR 0 15
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41633: LD_ADDR_VAR 0 16
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 3
41652: NEG
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 3
41664: NEG
41665: PUSH
41666: LD_INT 3
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41679: LD_ADDR_VAR 0 17
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41723: LD_ADDR_VAR 0 18
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 3
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41764: LD_ADDR_VAR 0 19
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41804: LD_ADDR_VAR 0 20
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41845: LD_ADDR_VAR 0 21
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41889: LD_ADDR_VAR 0 22
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 3
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: NEG
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41935: LD_ADDR_VAR 0 23
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 3
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 4
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 3
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41979: LD_ADDR_VAR 0 24
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 4
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42020: LD_ADDR_VAR 0 25
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 4
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 3
42047: PUSH
42048: LD_INT 4
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42060: LD_ADDR_VAR 0 26
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 4
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42101: LD_ADDR_VAR 0 27
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: NEG
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 4
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42145: LD_ADDR_VAR 0 28
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 3
42164: NEG
42165: PUSH
42166: LD_INT 4
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 4
42176: NEG
42177: PUSH
42178: LD_INT 3
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42191: LD_ADDR_VAR 0 29
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 3
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 4
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 4
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 5
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 5
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 4
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 6
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 6
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 5
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42346: LD_ADDR_VAR 0 30
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 3
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 3
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 4
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 5
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 5
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 6
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 6
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42489: LD_ADDR_VAR 0 31
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 4
42526: PUSH
42527: LD_INT 3
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 4
42536: PUSH
42537: LD_INT 4
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 4
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 5
42556: PUSH
42557: LD_INT 4
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 5
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 4
42576: PUSH
42577: LD_INT 5
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 6
42586: PUSH
42587: LD_INT 5
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 6
42596: PUSH
42597: LD_INT 6
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 5
42606: PUSH
42607: LD_INT 6
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42628: LD_ADDR_VAR 0 32
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 3
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 4
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 4
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 5
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 4
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 6
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 6
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 5
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42771: LD_ADDR_VAR 0 33
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: NEG
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 3
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 4
42823: NEG
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 4
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 4
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 5
42857: NEG
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 5
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 5
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 6
42891: NEG
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 6
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42926: LD_ADDR_VAR 0 34
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 3
42957: NEG
42958: PUSH
42959: LD_INT 3
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: LD_INT 4
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 4
42981: NEG
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 4
42993: NEG
42994: PUSH
42995: LD_INT 4
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 4
43005: NEG
43006: PUSH
43007: LD_INT 5
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 5
43017: NEG
43018: PUSH
43019: LD_INT 4
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 5
43029: NEG
43030: PUSH
43031: LD_INT 5
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 5
43041: NEG
43042: PUSH
43043: LD_INT 6
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 6
43053: NEG
43054: PUSH
43055: LD_INT 5
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 6
43065: NEG
43066: PUSH
43067: LD_INT 6
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43089: LD_ADDR_VAR 0 41
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43133: LD_ADDR_VAR 0 42
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43174: LD_ADDR_VAR 0 43
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43214: LD_ADDR_VAR 0 44
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43255: LD_ADDR_VAR 0 45
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 3
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43299: LD_ADDR_VAR 0 46
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43345: LD_ADDR_VAR 0 47
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: LD_INT 3
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43378: LD_ADDR_VAR 0 48
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43409: LD_ADDR_VAR 0 49
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43438: LD_ADDR_VAR 0 50
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43467: LD_ADDR_VAR 0 51
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43498: LD_ADDR_VAR 0 52
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43531: LD_ADDR_VAR 0 53
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: LIST
43574: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43575: LD_ADDR_VAR 0 54
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43616: LD_ADDR_VAR 0 55
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 3
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 3
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43656: LD_ADDR_VAR 0 56
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 3
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43697: LD_ADDR_VAR 0 57
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 3
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43741: LD_ADDR_VAR 0 58
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: LD_INT 3
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 3
43760: NEG
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: LD_INT 3
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43787: LD_ADDR_VAR 0 59
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43831: LD_ADDR_VAR 0 60
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43872: LD_ADDR_VAR 0 61
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43912: LD_ADDR_VAR 0 62
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43953: LD_ADDR_VAR 0 63
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43997: LD_ADDR_VAR 0 64
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: ST_TO_ADDR
// end ; 2 :
44043: GO 47309
44045: LD_INT 2
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 47308
44053: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44054: LD_ADDR_VAR 0 29
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 5
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 5
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 4
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 5
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: LD_INT 3
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 4
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 4
44184: PUSH
44185: LD_INT 4
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: LD_INT 4
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 4
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: LD_INT 4
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 4
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 4
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 5
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 5
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 4
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 5
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 4
44393: NEG
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 4
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 4
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 4
44439: NEG
44440: PUSH
44441: LD_INT 4
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 4
44451: NEG
44452: PUSH
44453: LD_INT 5
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 3
44463: NEG
44464: PUSH
44465: LD_INT 4
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 3
44475: NEG
44476: PUSH
44477: LD_INT 3
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 4
44487: NEG
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 5
44499: NEG
44500: PUSH
44501: LD_INT 4
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 5
44511: NEG
44512: PUSH
44513: LD_INT 5
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 3
44523: NEG
44524: PUSH
44525: LD_INT 5
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 5
44535: NEG
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44592: LD_ADDR_VAR 0 30
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: LD_INT 4
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 4
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 5
44619: PUSH
44620: LD_INT 4
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 5
44629: PUSH
44630: LD_INT 5
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 4
44639: PUSH
44640: LD_INT 5
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: LD_INT 4
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: LD_INT 3
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 5
44669: PUSH
44670: LD_INT 3
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: PUSH
44680: LD_INT 5
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 4
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 4
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 4
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 4
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 4
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 4
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 5
44838: NEG
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 5
44849: NEG
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 5
44861: NEG
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 3
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: LD_INT 3
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 3
44896: NEG
44897: PUSH
44898: LD_INT 4
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: LD_INT 3
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 4
44944: NEG
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 4
44956: NEG
44957: PUSH
44958: LD_INT 4
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 4
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 4
44980: NEG
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 4
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 5
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 4
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 4
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 5
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 5
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45139: LD_ADDR_VAR 0 31
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 4
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 3
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 4
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 5
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 5
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 4
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 5
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 4
45295: NEG
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 4
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 4
45318: NEG
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 4
45341: NEG
45342: PUSH
45343: LD_INT 4
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 4
45353: NEG
45354: PUSH
45355: LD_INT 5
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: LD_INT 4
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 4
45389: NEG
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 5
45401: NEG
45402: PUSH
45403: LD_INT 4
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 5
45413: NEG
45414: PUSH
45415: LD_INT 5
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: LD_INT 5
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 5
45437: NEG
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 3
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 4
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 3
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 3
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 4
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: LD_INT 4
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 4
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 4
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 5
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 5
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 4
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 3
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 3
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 3
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 5
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45689: LD_ADDR_VAR 0 32
45693: PUSH
45694: LD_INT 4
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 4
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: NEG
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 4
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 5
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 5
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 5
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: LD_INT 4
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: LD_INT 3
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 4
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 4
45870: NEG
45871: PUSH
45872: LD_INT 4
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 4
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 4
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 4
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 5
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 4
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 4
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 5
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 5
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 4
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 4
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 4
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 4
46101: PUSH
46102: LD_INT 4
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 4
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 5
46121: PUSH
46122: LD_INT 4
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 5
46131: PUSH
46132: LD_INT 5
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 4
46141: PUSH
46142: LD_INT 5
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: LD_INT 4
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: LD_INT 3
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 5
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 3
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46236: LD_ADDR_VAR 0 33
46240: PUSH
46241: LD_INT 4
46243: NEG
46244: PUSH
46245: LD_INT 4
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 4
46255: NEG
46256: PUSH
46257: LD_INT 5
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: LD_INT 4
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: LD_INT 3
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 4
46291: NEG
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 5
46303: NEG
46304: PUSH
46305: LD_INT 4
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 5
46315: NEG
46316: PUSH
46317: LD_INT 5
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: NEG
46328: PUSH
46329: LD_INT 5
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 5
46339: NEG
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 4
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 3
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 4
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 4
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 4
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 5
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 5
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 4
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 4
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 4
46576: PUSH
46577: LD_INT 4
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: LD_INT 4
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 4
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 4
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 5
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 4
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 5
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46774: LD_ADDR_VAR 0 34
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 4
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 5
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 4
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 4
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 5
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 5
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 4
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 4
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 4
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: PUSH
46977: LD_INT 4
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 4
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 5
46996: PUSH
46997: LD_INT 4
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: LD_INT 5
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 4
47016: PUSH
47017: LD_INT 5
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 4
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 5
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 5
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 4
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 4
47159: NEG
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 4
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 4
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 5
47215: NEG
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 5
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 5
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// end ; end ;
47306: GO 47309
47308: POP
// case btype of b_depot , b_warehouse :
47309: LD_VAR 0 1
47313: PUSH
47314: LD_INT 0
47316: DOUBLE
47317: EQUAL
47318: IFTRUE 47328
47320: LD_INT 1
47322: DOUBLE
47323: EQUAL
47324: IFTRUE 47328
47326: GO 47529
47328: POP
// case nation of nation_american :
47329: LD_VAR 0 5
47333: PUSH
47334: LD_INT 1
47336: DOUBLE
47337: EQUAL
47338: IFTRUE 47342
47340: GO 47398
47342: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47343: LD_ADDR_VAR 0 9
47347: PUSH
47348: LD_VAR 0 11
47352: PUSH
47353: LD_VAR 0 12
47357: PUSH
47358: LD_VAR 0 13
47362: PUSH
47363: LD_VAR 0 14
47367: PUSH
47368: LD_VAR 0 15
47372: PUSH
47373: LD_VAR 0 16
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: PUSH
47386: LD_VAR 0 4
47390: PUSH
47391: LD_INT 1
47393: PLUS
47394: ARRAY
47395: ST_TO_ADDR
47396: GO 47527
47398: LD_INT 2
47400: DOUBLE
47401: EQUAL
47402: IFTRUE 47406
47404: GO 47462
47406: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47407: LD_ADDR_VAR 0 9
47411: PUSH
47412: LD_VAR 0 17
47416: PUSH
47417: LD_VAR 0 18
47421: PUSH
47422: LD_VAR 0 19
47426: PUSH
47427: LD_VAR 0 20
47431: PUSH
47432: LD_VAR 0 21
47436: PUSH
47437: LD_VAR 0 22
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: PUSH
47450: LD_VAR 0 4
47454: PUSH
47455: LD_INT 1
47457: PLUS
47458: ARRAY
47459: ST_TO_ADDR
47460: GO 47527
47462: LD_INT 3
47464: DOUBLE
47465: EQUAL
47466: IFTRUE 47470
47468: GO 47526
47470: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47471: LD_ADDR_VAR 0 9
47475: PUSH
47476: LD_VAR 0 23
47480: PUSH
47481: LD_VAR 0 24
47485: PUSH
47486: LD_VAR 0 25
47490: PUSH
47491: LD_VAR 0 26
47495: PUSH
47496: LD_VAR 0 27
47500: PUSH
47501: LD_VAR 0 28
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: PUSH
47514: LD_VAR 0 4
47518: PUSH
47519: LD_INT 1
47521: PLUS
47522: ARRAY
47523: ST_TO_ADDR
47524: GO 47527
47526: POP
47527: GO 48082
47529: LD_INT 2
47531: DOUBLE
47532: EQUAL
47533: IFTRUE 47543
47535: LD_INT 3
47537: DOUBLE
47538: EQUAL
47539: IFTRUE 47543
47541: GO 47599
47543: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47544: LD_ADDR_VAR 0 9
47548: PUSH
47549: LD_VAR 0 29
47553: PUSH
47554: LD_VAR 0 30
47558: PUSH
47559: LD_VAR 0 31
47563: PUSH
47564: LD_VAR 0 32
47568: PUSH
47569: LD_VAR 0 33
47573: PUSH
47574: LD_VAR 0 34
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: PUSH
47587: LD_VAR 0 4
47591: PUSH
47592: LD_INT 1
47594: PLUS
47595: ARRAY
47596: ST_TO_ADDR
47597: GO 48082
47599: LD_INT 16
47601: DOUBLE
47602: EQUAL
47603: IFTRUE 47661
47605: LD_INT 17
47607: DOUBLE
47608: EQUAL
47609: IFTRUE 47661
47611: LD_INT 18
47613: DOUBLE
47614: EQUAL
47615: IFTRUE 47661
47617: LD_INT 19
47619: DOUBLE
47620: EQUAL
47621: IFTRUE 47661
47623: LD_INT 22
47625: DOUBLE
47626: EQUAL
47627: IFTRUE 47661
47629: LD_INT 20
47631: DOUBLE
47632: EQUAL
47633: IFTRUE 47661
47635: LD_INT 21
47637: DOUBLE
47638: EQUAL
47639: IFTRUE 47661
47641: LD_INT 23
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47661
47647: LD_INT 24
47649: DOUBLE
47650: EQUAL
47651: IFTRUE 47661
47653: LD_INT 25
47655: DOUBLE
47656: EQUAL
47657: IFTRUE 47661
47659: GO 47717
47661: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47662: LD_ADDR_VAR 0 9
47666: PUSH
47667: LD_VAR 0 35
47671: PUSH
47672: LD_VAR 0 36
47676: PUSH
47677: LD_VAR 0 37
47681: PUSH
47682: LD_VAR 0 38
47686: PUSH
47687: LD_VAR 0 39
47691: PUSH
47692: LD_VAR 0 40
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: PUSH
47705: LD_VAR 0 4
47709: PUSH
47710: LD_INT 1
47712: PLUS
47713: ARRAY
47714: ST_TO_ADDR
47715: GO 48082
47717: LD_INT 6
47719: DOUBLE
47720: EQUAL
47721: IFTRUE 47773
47723: LD_INT 7
47725: DOUBLE
47726: EQUAL
47727: IFTRUE 47773
47729: LD_INT 8
47731: DOUBLE
47732: EQUAL
47733: IFTRUE 47773
47735: LD_INT 13
47737: DOUBLE
47738: EQUAL
47739: IFTRUE 47773
47741: LD_INT 12
47743: DOUBLE
47744: EQUAL
47745: IFTRUE 47773
47747: LD_INT 15
47749: DOUBLE
47750: EQUAL
47751: IFTRUE 47773
47753: LD_INT 11
47755: DOUBLE
47756: EQUAL
47757: IFTRUE 47773
47759: LD_INT 14
47761: DOUBLE
47762: EQUAL
47763: IFTRUE 47773
47765: LD_INT 10
47767: DOUBLE
47768: EQUAL
47769: IFTRUE 47773
47771: GO 47829
47773: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47774: LD_ADDR_VAR 0 9
47778: PUSH
47779: LD_VAR 0 41
47783: PUSH
47784: LD_VAR 0 42
47788: PUSH
47789: LD_VAR 0 43
47793: PUSH
47794: LD_VAR 0 44
47798: PUSH
47799: LD_VAR 0 45
47803: PUSH
47804: LD_VAR 0 46
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: PUSH
47817: LD_VAR 0 4
47821: PUSH
47822: LD_INT 1
47824: PLUS
47825: ARRAY
47826: ST_TO_ADDR
47827: GO 48082
47829: LD_INT 36
47831: DOUBLE
47832: EQUAL
47833: IFTRUE 47837
47835: GO 47893
47837: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47838: LD_ADDR_VAR 0 9
47842: PUSH
47843: LD_VAR 0 47
47847: PUSH
47848: LD_VAR 0 48
47852: PUSH
47853: LD_VAR 0 49
47857: PUSH
47858: LD_VAR 0 50
47862: PUSH
47863: LD_VAR 0 51
47867: PUSH
47868: LD_VAR 0 52
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: PUSH
47881: LD_VAR 0 4
47885: PUSH
47886: LD_INT 1
47888: PLUS
47889: ARRAY
47890: ST_TO_ADDR
47891: GO 48082
47893: LD_INT 4
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47919
47899: LD_INT 5
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47919
47905: LD_INT 34
47907: DOUBLE
47908: EQUAL
47909: IFTRUE 47919
47911: LD_INT 37
47913: DOUBLE
47914: EQUAL
47915: IFTRUE 47919
47917: GO 47975
47919: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_VAR 0 53
47929: PUSH
47930: LD_VAR 0 54
47934: PUSH
47935: LD_VAR 0 55
47939: PUSH
47940: LD_VAR 0 56
47944: PUSH
47945: LD_VAR 0 57
47949: PUSH
47950: LD_VAR 0 58
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: PUSH
47963: LD_VAR 0 4
47967: PUSH
47968: LD_INT 1
47970: PLUS
47971: ARRAY
47972: ST_TO_ADDR
47973: GO 48082
47975: LD_INT 31
47977: DOUBLE
47978: EQUAL
47979: IFTRUE 48025
47981: LD_INT 32
47983: DOUBLE
47984: EQUAL
47985: IFTRUE 48025
47987: LD_INT 33
47989: DOUBLE
47990: EQUAL
47991: IFTRUE 48025
47993: LD_INT 27
47995: DOUBLE
47996: EQUAL
47997: IFTRUE 48025
47999: LD_INT 26
48001: DOUBLE
48002: EQUAL
48003: IFTRUE 48025
48005: LD_INT 28
48007: DOUBLE
48008: EQUAL
48009: IFTRUE 48025
48011: LD_INT 29
48013: DOUBLE
48014: EQUAL
48015: IFTRUE 48025
48017: LD_INT 30
48019: DOUBLE
48020: EQUAL
48021: IFTRUE 48025
48023: GO 48081
48025: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48026: LD_ADDR_VAR 0 9
48030: PUSH
48031: LD_VAR 0 59
48035: PUSH
48036: LD_VAR 0 60
48040: PUSH
48041: LD_VAR 0 61
48045: PUSH
48046: LD_VAR 0 62
48050: PUSH
48051: LD_VAR 0 63
48055: PUSH
48056: LD_VAR 0 64
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: PUSH
48069: LD_VAR 0 4
48073: PUSH
48074: LD_INT 1
48076: PLUS
48077: ARRAY
48078: ST_TO_ADDR
48079: GO 48082
48081: POP
// temp_list2 = [ ] ;
48082: LD_ADDR_VAR 0 10
48086: PUSH
48087: EMPTY
48088: ST_TO_ADDR
// for i in temp_list do
48089: LD_ADDR_VAR 0 8
48093: PUSH
48094: LD_VAR 0 9
48098: PUSH
48099: FOR_IN
48100: IFFALSE 48152
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48102: LD_ADDR_VAR 0 10
48106: PUSH
48107: LD_VAR 0 10
48111: PUSH
48112: LD_VAR 0 8
48116: PUSH
48117: LD_INT 1
48119: ARRAY
48120: PUSH
48121: LD_VAR 0 2
48125: PLUS
48126: PUSH
48127: LD_VAR 0 8
48131: PUSH
48132: LD_INT 2
48134: ARRAY
48135: PUSH
48136: LD_VAR 0 3
48140: PLUS
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: EMPTY
48147: LIST
48148: ADD
48149: ST_TO_ADDR
48150: GO 48099
48152: POP
48153: POP
// result = temp_list2 ;
48154: LD_ADDR_VAR 0 7
48158: PUSH
48159: LD_VAR 0 10
48163: ST_TO_ADDR
// end ;
48164: LD_VAR 0 7
48168: RET
// export function EnemyInRange ( unit , dist ) ; begin
48169: LD_INT 0
48171: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48172: LD_ADDR_VAR 0 3
48176: PUSH
48177: LD_VAR 0 1
48181: PPUSH
48182: CALL_OW 255
48186: PPUSH
48187: LD_VAR 0 1
48191: PPUSH
48192: CALL_OW 250
48196: PPUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: CALL_OW 251
48206: PPUSH
48207: LD_VAR 0 2
48211: PPUSH
48212: CALL 21542 0 4
48216: PUSH
48217: LD_INT 4
48219: ARRAY
48220: ST_TO_ADDR
// end ;
48221: LD_VAR 0 3
48225: RET
// export function PlayerSeeMe ( unit ) ; begin
48226: LD_INT 0
48228: PPUSH
// result := See ( your_side , unit ) ;
48229: LD_ADDR_VAR 0 2
48233: PUSH
48234: LD_OWVAR 2
48238: PPUSH
48239: LD_VAR 0 1
48243: PPUSH
48244: CALL_OW 292
48248: ST_TO_ADDR
// end ;
48249: LD_VAR 0 2
48253: RET
// export function ReverseDir ( unit ) ; begin
48254: LD_INT 0
48256: PPUSH
// if not unit then
48257: LD_VAR 0 1
48261: NOT
48262: IFFALSE 48266
// exit ;
48264: GO 48289
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48266: LD_ADDR_VAR 0 2
48270: PUSH
48271: LD_VAR 0 1
48275: PPUSH
48276: CALL_OW 254
48280: PUSH
48281: LD_INT 3
48283: PLUS
48284: PUSH
48285: LD_INT 6
48287: MOD
48288: ST_TO_ADDR
// end ;
48289: LD_VAR 0 2
48293: RET
// export function ReverseArray ( array ) ; var i ; begin
48294: LD_INT 0
48296: PPUSH
48297: PPUSH
// if not array then
48298: LD_VAR 0 1
48302: NOT
48303: IFFALSE 48307
// exit ;
48305: GO 48362
// result := [ ] ;
48307: LD_ADDR_VAR 0 2
48311: PUSH
48312: EMPTY
48313: ST_TO_ADDR
// for i := array downto 1 do
48314: LD_ADDR_VAR 0 3
48318: PUSH
48319: DOUBLE
48320: LD_VAR 0 1
48324: INC
48325: ST_TO_ADDR
48326: LD_INT 1
48328: PUSH
48329: FOR_DOWNTO
48330: IFFALSE 48360
// result := Join ( result , array [ i ] ) ;
48332: LD_ADDR_VAR 0 2
48336: PUSH
48337: LD_VAR 0 2
48341: PPUSH
48342: LD_VAR 0 1
48346: PUSH
48347: LD_VAR 0 3
48351: ARRAY
48352: PPUSH
48353: CALL 53005 0 2
48357: ST_TO_ADDR
48358: GO 48329
48360: POP
48361: POP
// end ;
48362: LD_VAR 0 2
48366: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48367: LD_INT 0
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
// if not unit or not hexes then
48375: LD_VAR 0 1
48379: NOT
48380: PUSH
48381: LD_VAR 0 2
48385: NOT
48386: OR
48387: IFFALSE 48391
// exit ;
48389: GO 48514
// dist := 9999 ;
48391: LD_ADDR_VAR 0 5
48395: PUSH
48396: LD_INT 9999
48398: ST_TO_ADDR
// for i = 1 to hexes do
48399: LD_ADDR_VAR 0 4
48403: PUSH
48404: DOUBLE
48405: LD_INT 1
48407: DEC
48408: ST_TO_ADDR
48409: LD_VAR 0 2
48413: PUSH
48414: FOR_TO
48415: IFFALSE 48502
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48417: LD_ADDR_VAR 0 6
48421: PUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: LD_VAR 0 2
48431: PUSH
48432: LD_VAR 0 4
48436: ARRAY
48437: PUSH
48438: LD_INT 1
48440: ARRAY
48441: PPUSH
48442: LD_VAR 0 2
48446: PUSH
48447: LD_VAR 0 4
48451: ARRAY
48452: PUSH
48453: LD_INT 2
48455: ARRAY
48456: PPUSH
48457: CALL_OW 297
48461: ST_TO_ADDR
// if tdist < dist then
48462: LD_VAR 0 6
48466: PUSH
48467: LD_VAR 0 5
48471: LESS
48472: IFFALSE 48500
// begin hex := hexes [ i ] ;
48474: LD_ADDR_VAR 0 8
48478: PUSH
48479: LD_VAR 0 2
48483: PUSH
48484: LD_VAR 0 4
48488: ARRAY
48489: ST_TO_ADDR
// dist := tdist ;
48490: LD_ADDR_VAR 0 5
48494: PUSH
48495: LD_VAR 0 6
48499: ST_TO_ADDR
// end ; end ;
48500: GO 48414
48502: POP
48503: POP
// result := hex ;
48504: LD_ADDR_VAR 0 3
48508: PUSH
48509: LD_VAR 0 8
48513: ST_TO_ADDR
// end ;
48514: LD_VAR 0 3
48518: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48519: LD_INT 0
48521: PPUSH
48522: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48523: LD_VAR 0 1
48527: NOT
48528: PUSH
48529: LD_VAR 0 1
48533: PUSH
48534: LD_INT 21
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 23
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PPUSH
48558: CALL_OW 69
48562: IN
48563: NOT
48564: OR
48565: IFFALSE 48569
// exit ;
48567: GO 48616
// for i = 1 to 3 do
48569: LD_ADDR_VAR 0 3
48573: PUSH
48574: DOUBLE
48575: LD_INT 1
48577: DEC
48578: ST_TO_ADDR
48579: LD_INT 3
48581: PUSH
48582: FOR_TO
48583: IFFALSE 48614
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48585: LD_VAR 0 1
48589: PPUSH
48590: CALL_OW 250
48594: PPUSH
48595: LD_VAR 0 1
48599: PPUSH
48600: CALL_OW 251
48604: PPUSH
48605: LD_INT 1
48607: PPUSH
48608: CALL_OW 453
48612: GO 48582
48614: POP
48615: POP
// end ;
48616: LD_VAR 0 2
48620: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48621: LD_INT 0
48623: PPUSH
48624: PPUSH
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48629: LD_VAR 0 1
48633: NOT
48634: PUSH
48635: LD_VAR 0 2
48639: NOT
48640: OR
48641: PUSH
48642: LD_VAR 0 1
48646: PPUSH
48647: CALL_OW 314
48651: OR
48652: IFFALSE 48656
// exit ;
48654: GO 49123
// if GetLives ( i ) < 250 then
48656: LD_VAR 0 4
48660: PPUSH
48661: CALL_OW 256
48665: PUSH
48666: LD_INT 250
48668: LESS
48669: IFFALSE 48682
// begin ComAutodestruct ( i ) ;
48671: LD_VAR 0 4
48675: PPUSH
48676: CALL 48519 0 1
// exit ;
48680: GO 49123
// end ; x := GetX ( enemy_unit ) ;
48682: LD_ADDR_VAR 0 7
48686: PUSH
48687: LD_VAR 0 2
48691: PPUSH
48692: CALL_OW 250
48696: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48697: LD_ADDR_VAR 0 8
48701: PUSH
48702: LD_VAR 0 2
48706: PPUSH
48707: CALL_OW 251
48711: ST_TO_ADDR
// if not x or not y then
48712: LD_VAR 0 7
48716: NOT
48717: PUSH
48718: LD_VAR 0 8
48722: NOT
48723: OR
48724: IFFALSE 48728
// exit ;
48726: GO 49123
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48728: LD_ADDR_VAR 0 6
48732: PUSH
48733: LD_VAR 0 7
48737: PPUSH
48738: LD_INT 0
48740: PPUSH
48741: LD_INT 4
48743: PPUSH
48744: CALL_OW 272
48748: PUSH
48749: LD_VAR 0 8
48753: PPUSH
48754: LD_INT 0
48756: PPUSH
48757: LD_INT 4
48759: PPUSH
48760: CALL_OW 273
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_VAR 0 7
48773: PPUSH
48774: LD_INT 1
48776: PPUSH
48777: LD_INT 4
48779: PPUSH
48780: CALL_OW 272
48784: PUSH
48785: LD_VAR 0 8
48789: PPUSH
48790: LD_INT 1
48792: PPUSH
48793: LD_INT 4
48795: PPUSH
48796: CALL_OW 273
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_VAR 0 7
48809: PPUSH
48810: LD_INT 2
48812: PPUSH
48813: LD_INT 4
48815: PPUSH
48816: CALL_OW 272
48820: PUSH
48821: LD_VAR 0 8
48825: PPUSH
48826: LD_INT 2
48828: PPUSH
48829: LD_INT 4
48831: PPUSH
48832: CALL_OW 273
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_VAR 0 7
48845: PPUSH
48846: LD_INT 3
48848: PPUSH
48849: LD_INT 4
48851: PPUSH
48852: CALL_OW 272
48856: PUSH
48857: LD_VAR 0 8
48861: PPUSH
48862: LD_INT 3
48864: PPUSH
48865: LD_INT 4
48867: PPUSH
48868: CALL_OW 273
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_VAR 0 7
48881: PPUSH
48882: LD_INT 4
48884: PPUSH
48885: LD_INT 4
48887: PPUSH
48888: CALL_OW 272
48892: PUSH
48893: LD_VAR 0 8
48897: PPUSH
48898: LD_INT 4
48900: PPUSH
48901: LD_INT 4
48903: PPUSH
48904: CALL_OW 273
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_VAR 0 7
48917: PPUSH
48918: LD_INT 5
48920: PPUSH
48921: LD_INT 4
48923: PPUSH
48924: CALL_OW 272
48928: PUSH
48929: LD_VAR 0 8
48933: PPUSH
48934: LD_INT 5
48936: PPUSH
48937: LD_INT 4
48939: PPUSH
48940: CALL_OW 273
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// for i = tmp downto 1 do
48957: LD_ADDR_VAR 0 4
48961: PUSH
48962: DOUBLE
48963: LD_VAR 0 6
48967: INC
48968: ST_TO_ADDR
48969: LD_INT 1
48971: PUSH
48972: FOR_DOWNTO
48973: IFFALSE 49074
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48975: LD_VAR 0 6
48979: PUSH
48980: LD_VAR 0 4
48984: ARRAY
48985: PUSH
48986: LD_INT 1
48988: ARRAY
48989: PPUSH
48990: LD_VAR 0 6
48994: PUSH
48995: LD_VAR 0 4
48999: ARRAY
49000: PUSH
49001: LD_INT 2
49003: ARRAY
49004: PPUSH
49005: CALL_OW 488
49009: NOT
49010: PUSH
49011: LD_VAR 0 6
49015: PUSH
49016: LD_VAR 0 4
49020: ARRAY
49021: PUSH
49022: LD_INT 1
49024: ARRAY
49025: PPUSH
49026: LD_VAR 0 6
49030: PUSH
49031: LD_VAR 0 4
49035: ARRAY
49036: PUSH
49037: LD_INT 2
49039: ARRAY
49040: PPUSH
49041: CALL_OW 428
49045: PUSH
49046: LD_INT 0
49048: NONEQUAL
49049: OR
49050: IFFALSE 49072
// tmp := Delete ( tmp , i ) ;
49052: LD_ADDR_VAR 0 6
49056: PUSH
49057: LD_VAR 0 6
49061: PPUSH
49062: LD_VAR 0 4
49066: PPUSH
49067: CALL_OW 3
49071: ST_TO_ADDR
49072: GO 48972
49074: POP
49075: POP
// j := GetClosestHex ( unit , tmp ) ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 1
49085: PPUSH
49086: LD_VAR 0 6
49090: PPUSH
49091: CALL 48367 0 2
49095: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49096: LD_VAR 0 1
49100: PPUSH
49101: LD_VAR 0 5
49105: PUSH
49106: LD_INT 1
49108: ARRAY
49109: PPUSH
49110: LD_VAR 0 5
49114: PUSH
49115: LD_INT 2
49117: ARRAY
49118: PPUSH
49119: CALL_OW 111
// end ;
49123: LD_VAR 0 3
49127: RET
// export function PrepareApemanSoldier ( ) ; begin
49128: LD_INT 0
49130: PPUSH
// uc_nation := 0 ;
49131: LD_ADDR_OWVAR 21
49135: PUSH
49136: LD_INT 0
49138: ST_TO_ADDR
// hc_sex := sex_male ;
49139: LD_ADDR_OWVAR 27
49143: PUSH
49144: LD_INT 1
49146: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49147: LD_ADDR_OWVAR 28
49151: PUSH
49152: LD_INT 15
49154: ST_TO_ADDR
// hc_gallery :=  ;
49155: LD_ADDR_OWVAR 33
49159: PUSH
49160: LD_STRING 
49162: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49163: LD_ADDR_OWVAR 31
49167: PUSH
49168: LD_INT 0
49170: PPUSH
49171: LD_INT 3
49173: PPUSH
49174: CALL_OW 12
49178: PUSH
49179: LD_INT 0
49181: PPUSH
49182: LD_INT 3
49184: PPUSH
49185: CALL_OW 12
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// end ;
49202: LD_VAR 0 1
49206: RET
// export function PrepareApemanEngineer ( ) ; begin
49207: LD_INT 0
49209: PPUSH
// uc_nation := 0 ;
49210: LD_ADDR_OWVAR 21
49214: PUSH
49215: LD_INT 0
49217: ST_TO_ADDR
// hc_sex := sex_male ;
49218: LD_ADDR_OWVAR 27
49222: PUSH
49223: LD_INT 1
49225: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49226: LD_ADDR_OWVAR 28
49230: PUSH
49231: LD_INT 16
49233: ST_TO_ADDR
// hc_gallery :=  ;
49234: LD_ADDR_OWVAR 33
49238: PUSH
49239: LD_STRING 
49241: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49242: LD_ADDR_OWVAR 31
49246: PUSH
49247: LD_INT 0
49249: PPUSH
49250: LD_INT 3
49252: PPUSH
49253: CALL_OW 12
49257: PUSH
49258: LD_INT 0
49260: PPUSH
49261: LD_INT 3
49263: PPUSH
49264: CALL_OW 12
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// end ;
49281: LD_VAR 0 1
49285: RET
// export function PrepareApeman ( agressivity ) ; begin
49286: LD_INT 0
49288: PPUSH
// uc_side := 0 ;
49289: LD_ADDR_OWVAR 20
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
// uc_nation := 0 ;
49297: LD_ADDR_OWVAR 21
49301: PUSH
49302: LD_INT 0
49304: ST_TO_ADDR
// hc_sex := sex_male ;
49305: LD_ADDR_OWVAR 27
49309: PUSH
49310: LD_INT 1
49312: ST_TO_ADDR
// hc_class := class_apeman ;
49313: LD_ADDR_OWVAR 28
49317: PUSH
49318: LD_INT 12
49320: ST_TO_ADDR
// hc_gallery :=  ;
49321: LD_ADDR_OWVAR 33
49325: PUSH
49326: LD_STRING 
49328: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49329: LD_ADDR_OWVAR 35
49333: PUSH
49334: LD_VAR 0 1
49338: NEG
49339: PPUSH
49340: LD_VAR 0 1
49344: PPUSH
49345: CALL_OW 12
49349: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49350: LD_ADDR_OWVAR 31
49354: PUSH
49355: LD_INT 0
49357: PPUSH
49358: LD_INT 3
49360: PPUSH
49361: CALL_OW 12
49365: PUSH
49366: LD_INT 0
49368: PPUSH
49369: LD_INT 3
49371: PPUSH
49372: CALL_OW 12
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// end ;
49389: LD_VAR 0 2
49393: RET
// export function PrepareTiger ( agressivity ) ; begin
49394: LD_INT 0
49396: PPUSH
// uc_side := 0 ;
49397: LD_ADDR_OWVAR 20
49401: PUSH
49402: LD_INT 0
49404: ST_TO_ADDR
// uc_nation := 0 ;
49405: LD_ADDR_OWVAR 21
49409: PUSH
49410: LD_INT 0
49412: ST_TO_ADDR
// hc_class := class_tiger ;
49413: LD_ADDR_OWVAR 28
49417: PUSH
49418: LD_INT 14
49420: ST_TO_ADDR
// hc_gallery :=  ;
49421: LD_ADDR_OWVAR 33
49425: PUSH
49426: LD_STRING 
49428: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49429: LD_ADDR_OWVAR 35
49433: PUSH
49434: LD_VAR 0 1
49438: NEG
49439: PPUSH
49440: LD_VAR 0 1
49444: PPUSH
49445: CALL_OW 12
49449: ST_TO_ADDR
// end ;
49450: LD_VAR 0 2
49454: RET
// export function PrepareEnchidna ( ) ; begin
49455: LD_INT 0
49457: PPUSH
// uc_side := 0 ;
49458: LD_ADDR_OWVAR 20
49462: PUSH
49463: LD_INT 0
49465: ST_TO_ADDR
// uc_nation := 0 ;
49466: LD_ADDR_OWVAR 21
49470: PUSH
49471: LD_INT 0
49473: ST_TO_ADDR
// hc_class := class_baggie ;
49474: LD_ADDR_OWVAR 28
49478: PUSH
49479: LD_INT 13
49481: ST_TO_ADDR
// hc_gallery :=  ;
49482: LD_ADDR_OWVAR 33
49486: PUSH
49487: LD_STRING 
49489: ST_TO_ADDR
// end ;
49490: LD_VAR 0 1
49494: RET
// export function PrepareFrog ( ) ; begin
49495: LD_INT 0
49497: PPUSH
// uc_side := 0 ;
49498: LD_ADDR_OWVAR 20
49502: PUSH
49503: LD_INT 0
49505: ST_TO_ADDR
// uc_nation := 0 ;
49506: LD_ADDR_OWVAR 21
49510: PUSH
49511: LD_INT 0
49513: ST_TO_ADDR
// hc_class := class_frog ;
49514: LD_ADDR_OWVAR 28
49518: PUSH
49519: LD_INT 19
49521: ST_TO_ADDR
// hc_gallery :=  ;
49522: LD_ADDR_OWVAR 33
49526: PUSH
49527: LD_STRING 
49529: ST_TO_ADDR
// end ;
49530: LD_VAR 0 1
49534: RET
// export function PrepareFish ( ) ; begin
49535: LD_INT 0
49537: PPUSH
// uc_side := 0 ;
49538: LD_ADDR_OWVAR 20
49542: PUSH
49543: LD_INT 0
49545: ST_TO_ADDR
// uc_nation := 0 ;
49546: LD_ADDR_OWVAR 21
49550: PUSH
49551: LD_INT 0
49553: ST_TO_ADDR
// hc_class := class_fish ;
49554: LD_ADDR_OWVAR 28
49558: PUSH
49559: LD_INT 20
49561: ST_TO_ADDR
// hc_gallery :=  ;
49562: LD_ADDR_OWVAR 33
49566: PUSH
49567: LD_STRING 
49569: ST_TO_ADDR
// end ;
49570: LD_VAR 0 1
49574: RET
// export function PrepareBird ( ) ; begin
49575: LD_INT 0
49577: PPUSH
// uc_side := 0 ;
49578: LD_ADDR_OWVAR 20
49582: PUSH
49583: LD_INT 0
49585: ST_TO_ADDR
// uc_nation := 0 ;
49586: LD_ADDR_OWVAR 21
49590: PUSH
49591: LD_INT 0
49593: ST_TO_ADDR
// hc_class := class_phororhacos ;
49594: LD_ADDR_OWVAR 28
49598: PUSH
49599: LD_INT 18
49601: ST_TO_ADDR
// hc_gallery :=  ;
49602: LD_ADDR_OWVAR 33
49606: PUSH
49607: LD_STRING 
49609: ST_TO_ADDR
// end ;
49610: LD_VAR 0 1
49614: RET
// export function PrepareHorse ( ) ; begin
49615: LD_INT 0
49617: PPUSH
// uc_side := 0 ;
49618: LD_ADDR_OWVAR 20
49622: PUSH
49623: LD_INT 0
49625: ST_TO_ADDR
// uc_nation := 0 ;
49626: LD_ADDR_OWVAR 21
49630: PUSH
49631: LD_INT 0
49633: ST_TO_ADDR
// hc_class := class_horse ;
49634: LD_ADDR_OWVAR 28
49638: PUSH
49639: LD_INT 21
49641: ST_TO_ADDR
// hc_gallery :=  ;
49642: LD_ADDR_OWVAR 33
49646: PUSH
49647: LD_STRING 
49649: ST_TO_ADDR
// end ;
49650: LD_VAR 0 1
49654: RET
// export function PrepareMastodont ( ) ; begin
49655: LD_INT 0
49657: PPUSH
// uc_side := 0 ;
49658: LD_ADDR_OWVAR 20
49662: PUSH
49663: LD_INT 0
49665: ST_TO_ADDR
// uc_nation := 0 ;
49666: LD_ADDR_OWVAR 21
49670: PUSH
49671: LD_INT 0
49673: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49674: LD_ADDR_OWVAR 37
49678: PUSH
49679: LD_INT 31
49681: ST_TO_ADDR
// vc_control := control_rider ;
49682: LD_ADDR_OWVAR 38
49686: PUSH
49687: LD_INT 4
49689: ST_TO_ADDR
// end ;
49690: LD_VAR 0 1
49694: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49695: LD_INT 0
49697: PPUSH
49698: PPUSH
49699: PPUSH
// uc_side = 0 ;
49700: LD_ADDR_OWVAR 20
49704: PUSH
49705: LD_INT 0
49707: ST_TO_ADDR
// uc_nation = 0 ;
49708: LD_ADDR_OWVAR 21
49712: PUSH
49713: LD_INT 0
49715: ST_TO_ADDR
// InitHc_All ( ) ;
49716: CALL_OW 584
// InitVc ;
49720: CALL_OW 20
// if mastodonts then
49724: LD_VAR 0 6
49728: IFFALSE 49795
// for i = 1 to mastodonts do
49730: LD_ADDR_VAR 0 11
49734: PUSH
49735: DOUBLE
49736: LD_INT 1
49738: DEC
49739: ST_TO_ADDR
49740: LD_VAR 0 6
49744: PUSH
49745: FOR_TO
49746: IFFALSE 49793
// begin vc_chassis := 31 ;
49748: LD_ADDR_OWVAR 37
49752: PUSH
49753: LD_INT 31
49755: ST_TO_ADDR
// vc_control := control_rider ;
49756: LD_ADDR_OWVAR 38
49760: PUSH
49761: LD_INT 4
49763: ST_TO_ADDR
// animal := CreateVehicle ;
49764: LD_ADDR_VAR 0 12
49768: PUSH
49769: CALL_OW 45
49773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49774: LD_VAR 0 12
49778: PPUSH
49779: LD_VAR 0 8
49783: PPUSH
49784: LD_INT 0
49786: PPUSH
49787: CALL 51923 0 3
// end ;
49791: GO 49745
49793: POP
49794: POP
// if horses then
49795: LD_VAR 0 5
49799: IFFALSE 49866
// for i = 1 to horses do
49801: LD_ADDR_VAR 0 11
49805: PUSH
49806: DOUBLE
49807: LD_INT 1
49809: DEC
49810: ST_TO_ADDR
49811: LD_VAR 0 5
49815: PUSH
49816: FOR_TO
49817: IFFALSE 49864
// begin hc_class := 21 ;
49819: LD_ADDR_OWVAR 28
49823: PUSH
49824: LD_INT 21
49826: ST_TO_ADDR
// hc_gallery :=  ;
49827: LD_ADDR_OWVAR 33
49831: PUSH
49832: LD_STRING 
49834: ST_TO_ADDR
// animal := CreateHuman ;
49835: LD_ADDR_VAR 0 12
49839: PUSH
49840: CALL_OW 44
49844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49845: LD_VAR 0 12
49849: PPUSH
49850: LD_VAR 0 8
49854: PPUSH
49855: LD_INT 0
49857: PPUSH
49858: CALL 51923 0 3
// end ;
49862: GO 49816
49864: POP
49865: POP
// if birds then
49866: LD_VAR 0 1
49870: IFFALSE 49937
// for i = 1 to birds do
49872: LD_ADDR_VAR 0 11
49876: PUSH
49877: DOUBLE
49878: LD_INT 1
49880: DEC
49881: ST_TO_ADDR
49882: LD_VAR 0 1
49886: PUSH
49887: FOR_TO
49888: IFFALSE 49935
// begin hc_class := 18 ;
49890: LD_ADDR_OWVAR 28
49894: PUSH
49895: LD_INT 18
49897: ST_TO_ADDR
// hc_gallery =  ;
49898: LD_ADDR_OWVAR 33
49902: PUSH
49903: LD_STRING 
49905: ST_TO_ADDR
// animal := CreateHuman ;
49906: LD_ADDR_VAR 0 12
49910: PUSH
49911: CALL_OW 44
49915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49916: LD_VAR 0 12
49920: PPUSH
49921: LD_VAR 0 8
49925: PPUSH
49926: LD_INT 0
49928: PPUSH
49929: CALL 51923 0 3
// end ;
49933: GO 49887
49935: POP
49936: POP
// if tigers then
49937: LD_VAR 0 2
49941: IFFALSE 50025
// for i = 1 to tigers do
49943: LD_ADDR_VAR 0 11
49947: PUSH
49948: DOUBLE
49949: LD_INT 1
49951: DEC
49952: ST_TO_ADDR
49953: LD_VAR 0 2
49957: PUSH
49958: FOR_TO
49959: IFFALSE 50023
// begin hc_class = class_tiger ;
49961: LD_ADDR_OWVAR 28
49965: PUSH
49966: LD_INT 14
49968: ST_TO_ADDR
// hc_gallery =  ;
49969: LD_ADDR_OWVAR 33
49973: PUSH
49974: LD_STRING 
49976: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49977: LD_ADDR_OWVAR 35
49981: PUSH
49982: LD_INT 7
49984: NEG
49985: PPUSH
49986: LD_INT 7
49988: PPUSH
49989: CALL_OW 12
49993: ST_TO_ADDR
// animal := CreateHuman ;
49994: LD_ADDR_VAR 0 12
49998: PUSH
49999: CALL_OW 44
50003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50004: LD_VAR 0 12
50008: PPUSH
50009: LD_VAR 0 8
50013: PPUSH
50014: LD_INT 0
50016: PPUSH
50017: CALL 51923 0 3
// end ;
50021: GO 49958
50023: POP
50024: POP
// if apemans then
50025: LD_VAR 0 3
50029: IFFALSE 50152
// for i = 1 to apemans do
50031: LD_ADDR_VAR 0 11
50035: PUSH
50036: DOUBLE
50037: LD_INT 1
50039: DEC
50040: ST_TO_ADDR
50041: LD_VAR 0 3
50045: PUSH
50046: FOR_TO
50047: IFFALSE 50150
// begin hc_class = class_apeman ;
50049: LD_ADDR_OWVAR 28
50053: PUSH
50054: LD_INT 12
50056: ST_TO_ADDR
// hc_gallery =  ;
50057: LD_ADDR_OWVAR 33
50061: PUSH
50062: LD_STRING 
50064: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50065: LD_ADDR_OWVAR 35
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PPUSH
50074: LD_INT 2
50076: PPUSH
50077: CALL_OW 12
50081: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50082: LD_ADDR_OWVAR 31
50086: PUSH
50087: LD_INT 1
50089: PPUSH
50090: LD_INT 3
50092: PPUSH
50093: CALL_OW 12
50097: PUSH
50098: LD_INT 1
50100: PPUSH
50101: LD_INT 3
50103: PPUSH
50104: CALL_OW 12
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// animal := CreateHuman ;
50121: LD_ADDR_VAR 0 12
50125: PUSH
50126: CALL_OW 44
50130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50131: LD_VAR 0 12
50135: PPUSH
50136: LD_VAR 0 8
50140: PPUSH
50141: LD_INT 0
50143: PPUSH
50144: CALL 51923 0 3
// end ;
50148: GO 50046
50150: POP
50151: POP
// if enchidnas then
50152: LD_VAR 0 4
50156: IFFALSE 50223
// for i = 1 to enchidnas do
50158: LD_ADDR_VAR 0 11
50162: PUSH
50163: DOUBLE
50164: LD_INT 1
50166: DEC
50167: ST_TO_ADDR
50168: LD_VAR 0 4
50172: PUSH
50173: FOR_TO
50174: IFFALSE 50221
// begin hc_class = 13 ;
50176: LD_ADDR_OWVAR 28
50180: PUSH
50181: LD_INT 13
50183: ST_TO_ADDR
// hc_gallery =  ;
50184: LD_ADDR_OWVAR 33
50188: PUSH
50189: LD_STRING 
50191: ST_TO_ADDR
// animal := CreateHuman ;
50192: LD_ADDR_VAR 0 12
50196: PUSH
50197: CALL_OW 44
50201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50202: LD_VAR 0 12
50206: PPUSH
50207: LD_VAR 0 8
50211: PPUSH
50212: LD_INT 0
50214: PPUSH
50215: CALL 51923 0 3
// end ;
50219: GO 50173
50221: POP
50222: POP
// if fishes then
50223: LD_VAR 0 7
50227: IFFALSE 50294
// for i = 1 to fishes do
50229: LD_ADDR_VAR 0 11
50233: PUSH
50234: DOUBLE
50235: LD_INT 1
50237: DEC
50238: ST_TO_ADDR
50239: LD_VAR 0 7
50243: PUSH
50244: FOR_TO
50245: IFFALSE 50292
// begin hc_class = 20 ;
50247: LD_ADDR_OWVAR 28
50251: PUSH
50252: LD_INT 20
50254: ST_TO_ADDR
// hc_gallery =  ;
50255: LD_ADDR_OWVAR 33
50259: PUSH
50260: LD_STRING 
50262: ST_TO_ADDR
// animal := CreateHuman ;
50263: LD_ADDR_VAR 0 12
50267: PUSH
50268: CALL_OW 44
50272: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50273: LD_VAR 0 12
50277: PPUSH
50278: LD_VAR 0 9
50282: PPUSH
50283: LD_INT 0
50285: PPUSH
50286: CALL 51923 0 3
// end ;
50290: GO 50244
50292: POP
50293: POP
// end ;
50294: LD_VAR 0 10
50298: RET
// export function WantHeal ( sci , unit ) ; begin
50299: LD_INT 0
50301: PPUSH
// if GetTaskList ( sci ) > 0 then
50302: LD_VAR 0 1
50306: PPUSH
50307: CALL_OW 437
50311: PUSH
50312: LD_INT 0
50314: GREATER
50315: IFFALSE 50385
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50317: LD_VAR 0 1
50321: PPUSH
50322: CALL_OW 437
50326: PUSH
50327: LD_INT 1
50329: ARRAY
50330: PUSH
50331: LD_INT 1
50333: ARRAY
50334: PUSH
50335: LD_STRING l
50337: EQUAL
50338: PUSH
50339: LD_VAR 0 1
50343: PPUSH
50344: CALL_OW 437
50348: PUSH
50349: LD_INT 1
50351: ARRAY
50352: PUSH
50353: LD_INT 4
50355: ARRAY
50356: PUSH
50357: LD_VAR 0 2
50361: EQUAL
50362: AND
50363: IFFALSE 50375
// result := true else
50365: LD_ADDR_VAR 0 3
50369: PUSH
50370: LD_INT 1
50372: ST_TO_ADDR
50373: GO 50383
// result := false ;
50375: LD_ADDR_VAR 0 3
50379: PUSH
50380: LD_INT 0
50382: ST_TO_ADDR
// end else
50383: GO 50393
// result := false ;
50385: LD_ADDR_VAR 0 3
50389: PUSH
50390: LD_INT 0
50392: ST_TO_ADDR
// end ;
50393: LD_VAR 0 3
50397: RET
// export function HealTarget ( sci ) ; begin
50398: LD_INT 0
50400: PPUSH
// if not sci then
50401: LD_VAR 0 1
50405: NOT
50406: IFFALSE 50410
// exit ;
50408: GO 50475
// result := 0 ;
50410: LD_ADDR_VAR 0 2
50414: PUSH
50415: LD_INT 0
50417: ST_TO_ADDR
// if GetTaskList ( sci ) then
50418: LD_VAR 0 1
50422: PPUSH
50423: CALL_OW 437
50427: IFFALSE 50475
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50429: LD_VAR 0 1
50433: PPUSH
50434: CALL_OW 437
50438: PUSH
50439: LD_INT 1
50441: ARRAY
50442: PUSH
50443: LD_INT 1
50445: ARRAY
50446: PUSH
50447: LD_STRING l
50449: EQUAL
50450: IFFALSE 50475
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50452: LD_ADDR_VAR 0 2
50456: PUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 437
50466: PUSH
50467: LD_INT 1
50469: ARRAY
50470: PUSH
50471: LD_INT 4
50473: ARRAY
50474: ST_TO_ADDR
// end ;
50475: LD_VAR 0 2
50479: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50480: LD_INT 0
50482: PPUSH
50483: PPUSH
50484: PPUSH
50485: PPUSH
// if not base_units then
50486: LD_VAR 0 1
50490: NOT
50491: IFFALSE 50495
// exit ;
50493: GO 50582
// result := false ;
50495: LD_ADDR_VAR 0 2
50499: PUSH
50500: LD_INT 0
50502: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50503: LD_ADDR_VAR 0 5
50507: PUSH
50508: LD_VAR 0 1
50512: PPUSH
50513: LD_INT 21
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PPUSH
50523: CALL_OW 72
50527: ST_TO_ADDR
// if not tmp then
50528: LD_VAR 0 5
50532: NOT
50533: IFFALSE 50537
// exit ;
50535: GO 50582
// for i in tmp do
50537: LD_ADDR_VAR 0 3
50541: PUSH
50542: LD_VAR 0 5
50546: PUSH
50547: FOR_IN
50548: IFFALSE 50580
// begin result := EnemyInRange ( i , 22 ) ;
50550: LD_ADDR_VAR 0 2
50554: PUSH
50555: LD_VAR 0 3
50559: PPUSH
50560: LD_INT 22
50562: PPUSH
50563: CALL 48169 0 2
50567: ST_TO_ADDR
// if result then
50568: LD_VAR 0 2
50572: IFFALSE 50578
// exit ;
50574: POP
50575: POP
50576: GO 50582
// end ;
50578: GO 50547
50580: POP
50581: POP
// end ;
50582: LD_VAR 0 2
50586: RET
// export function FilterByTag ( units , tag ) ; begin
50587: LD_INT 0
50589: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50590: LD_ADDR_VAR 0 3
50594: PUSH
50595: LD_VAR 0 1
50599: PPUSH
50600: LD_INT 120
50602: PUSH
50603: LD_VAR 0 2
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PPUSH
50612: CALL_OW 72
50616: ST_TO_ADDR
// end ;
50617: LD_VAR 0 3
50621: RET
// export function IsDriver ( un ) ; begin
50622: LD_INT 0
50624: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50625: LD_ADDR_VAR 0 2
50629: PUSH
50630: LD_VAR 0 1
50634: PUSH
50635: LD_INT 55
50637: PUSH
50638: EMPTY
50639: LIST
50640: PPUSH
50641: CALL_OW 69
50645: IN
50646: ST_TO_ADDR
// end ;
50647: LD_VAR 0 2
50651: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50652: LD_INT 0
50654: PPUSH
50655: PPUSH
// list := [ ] ;
50656: LD_ADDR_VAR 0 5
50660: PUSH
50661: EMPTY
50662: ST_TO_ADDR
// case d of 0 :
50663: LD_VAR 0 3
50667: PUSH
50668: LD_INT 0
50670: DOUBLE
50671: EQUAL
50672: IFTRUE 50676
50674: GO 50809
50676: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50677: LD_ADDR_VAR 0 5
50681: PUSH
50682: LD_VAR 0 1
50686: PUSH
50687: LD_INT 4
50689: MINUS
50690: PUSH
50691: LD_VAR 0 2
50695: PUSH
50696: LD_INT 4
50698: MINUS
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: PUSH
50708: LD_VAR 0 1
50712: PUSH
50713: LD_INT 3
50715: MINUS
50716: PUSH
50717: LD_VAR 0 2
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: PUSH
50730: LD_VAR 0 1
50734: PUSH
50735: LD_INT 4
50737: PLUS
50738: PUSH
50739: LD_VAR 0 2
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: PUSH
50752: LD_VAR 0 1
50756: PUSH
50757: LD_INT 3
50759: PLUS
50760: PUSH
50761: LD_VAR 0 2
50765: PUSH
50766: LD_INT 3
50768: PLUS
50769: PUSH
50770: LD_INT 5
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: PUSH
50778: LD_VAR 0 1
50782: PUSH
50783: LD_VAR 0 2
50787: PUSH
50788: LD_INT 4
50790: PLUS
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: ST_TO_ADDR
// end ; 1 :
50807: GO 51507
50809: LD_INT 1
50811: DOUBLE
50812: EQUAL
50813: IFTRUE 50817
50815: GO 50950
50817: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50818: LD_ADDR_VAR 0 5
50822: PUSH
50823: LD_VAR 0 1
50827: PUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_INT 4
50835: MINUS
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: PUSH
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 3
50852: MINUS
50853: PUSH
50854: LD_VAR 0 2
50858: PUSH
50859: LD_INT 3
50861: MINUS
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: PUSH
50871: LD_VAR 0 1
50875: PUSH
50876: LD_INT 4
50878: MINUS
50879: PUSH
50880: LD_VAR 0 2
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: PUSH
50893: LD_VAR 0 1
50897: PUSH
50898: LD_VAR 0 2
50902: PUSH
50903: LD_INT 3
50905: PLUS
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: LIST
50914: PUSH
50915: LD_VAR 0 1
50919: PUSH
50920: LD_INT 4
50922: PLUS
50923: PUSH
50924: LD_VAR 0 2
50928: PUSH
50929: LD_INT 4
50931: PLUS
50932: PUSH
50933: LD_INT 5
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// end ; 2 :
50948: GO 51507
50950: LD_INT 2
50952: DOUBLE
50953: EQUAL
50954: IFTRUE 50958
50956: GO 51087
50958: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50959: LD_ADDR_VAR 0 5
50963: PUSH
50964: LD_VAR 0 1
50968: PUSH
50969: LD_VAR 0 2
50973: PUSH
50974: LD_INT 3
50976: MINUS
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 1
50990: PUSH
50991: LD_INT 4
50993: PLUS
50994: PUSH
50995: LD_VAR 0 2
50999: PUSH
51000: LD_INT 4
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: PUSH
51008: LD_VAR 0 1
51012: PUSH
51013: LD_VAR 0 2
51017: PUSH
51018: LD_INT 4
51020: PLUS
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: PUSH
51030: LD_VAR 0 1
51034: PUSH
51035: LD_INT 3
51037: MINUS
51038: PUSH
51039: LD_VAR 0 2
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: PUSH
51052: LD_VAR 0 1
51056: PUSH
51057: LD_INT 4
51059: MINUS
51060: PUSH
51061: LD_VAR 0 2
51065: PUSH
51066: LD_INT 4
51068: MINUS
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// end ; 3 :
51085: GO 51507
51087: LD_INT 3
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51228
51095: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51096: LD_ADDR_VAR 0 5
51100: PUSH
51101: LD_VAR 0 1
51105: PUSH
51106: LD_INT 3
51108: PLUS
51109: PUSH
51110: LD_VAR 0 2
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: PUSH
51123: LD_VAR 0 1
51127: PUSH
51128: LD_INT 4
51130: PLUS
51131: PUSH
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 4
51139: PLUS
51140: PUSH
51141: LD_INT 5
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: PUSH
51149: LD_VAR 0 1
51153: PUSH
51154: LD_INT 4
51156: MINUS
51157: PUSH
51158: LD_VAR 0 2
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: PUSH
51171: LD_VAR 0 1
51175: PUSH
51176: LD_VAR 0 2
51180: PUSH
51181: LD_INT 4
51183: MINUS
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: PUSH
51193: LD_VAR 0 1
51197: PUSH
51198: LD_INT 3
51200: MINUS
51201: PUSH
51202: LD_VAR 0 2
51206: PUSH
51207: LD_INT 3
51209: MINUS
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// end ; 4 :
51226: GO 51507
51228: LD_INT 4
51230: DOUBLE
51231: EQUAL
51232: IFTRUE 51236
51234: GO 51369
51236: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51237: LD_ADDR_VAR 0 5
51241: PUSH
51242: LD_VAR 0 1
51246: PUSH
51247: LD_VAR 0 2
51251: PUSH
51252: LD_INT 4
51254: PLUS
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: PUSH
51264: LD_VAR 0 1
51268: PUSH
51269: LD_INT 3
51271: PLUS
51272: PUSH
51273: LD_VAR 0 2
51277: PUSH
51278: LD_INT 3
51280: PLUS
51281: PUSH
51282: LD_INT 5
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: PUSH
51290: LD_VAR 0 1
51294: PUSH
51295: LD_INT 4
51297: PLUS
51298: PUSH
51299: LD_VAR 0 2
51303: PUSH
51304: LD_INT 4
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: PUSH
51312: LD_VAR 0 1
51316: PUSH
51317: LD_VAR 0 2
51321: PUSH
51322: LD_INT 3
51324: MINUS
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: PUSH
51334: LD_VAR 0 1
51338: PUSH
51339: LD_INT 4
51341: MINUS
51342: PUSH
51343: LD_VAR 0 2
51347: PUSH
51348: LD_INT 4
51350: MINUS
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: ST_TO_ADDR
// end ; 5 :
51367: GO 51507
51369: LD_INT 5
51371: DOUBLE
51372: EQUAL
51373: IFTRUE 51377
51375: GO 51506
51377: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51378: LD_ADDR_VAR 0 5
51382: PUSH
51383: LD_VAR 0 1
51387: PUSH
51388: LD_INT 4
51390: MINUS
51391: PUSH
51392: LD_VAR 0 2
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: LIST
51404: PUSH
51405: LD_VAR 0 1
51409: PUSH
51410: LD_VAR 0 2
51414: PUSH
51415: LD_INT 4
51417: MINUS
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: PUSH
51427: LD_VAR 0 1
51431: PUSH
51432: LD_INT 4
51434: PLUS
51435: PUSH
51436: LD_VAR 0 2
51440: PUSH
51441: LD_INT 4
51443: PLUS
51444: PUSH
51445: LD_INT 5
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: PUSH
51453: LD_VAR 0 1
51457: PUSH
51458: LD_INT 3
51460: PLUS
51461: PUSH
51462: LD_VAR 0 2
51466: PUSH
51467: LD_INT 4
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: PUSH
51475: LD_VAR 0 1
51479: PUSH
51480: LD_VAR 0 2
51484: PUSH
51485: LD_INT 3
51487: PLUS
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: ST_TO_ADDR
// end ; end ;
51504: GO 51507
51506: POP
// result := list ;
51507: LD_ADDR_VAR 0 4
51511: PUSH
51512: LD_VAR 0 5
51516: ST_TO_ADDR
// end ;
51517: LD_VAR 0 4
51521: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51522: LD_INT 0
51524: PPUSH
51525: PPUSH
51526: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51527: LD_VAR 0 1
51531: NOT
51532: PUSH
51533: LD_VAR 0 2
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: IN
51556: NOT
51557: OR
51558: IFFALSE 51562
// exit ;
51560: GO 51645
// tmp := [ ] ;
51562: LD_ADDR_VAR 0 5
51566: PUSH
51567: EMPTY
51568: ST_TO_ADDR
// for i in units do
51569: LD_ADDR_VAR 0 4
51573: PUSH
51574: LD_VAR 0 1
51578: PUSH
51579: FOR_IN
51580: IFFALSE 51614
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51582: LD_ADDR_VAR 0 5
51586: PUSH
51587: LD_VAR 0 5
51591: PPUSH
51592: LD_VAR 0 4
51596: PPUSH
51597: LD_VAR 0 2
51601: PPUSH
51602: CALL_OW 259
51606: PPUSH
51607: CALL 53005 0 2
51611: ST_TO_ADDR
51612: GO 51579
51614: POP
51615: POP
// if not tmp then
51616: LD_VAR 0 5
51620: NOT
51621: IFFALSE 51625
// exit ;
51623: GO 51645
// result := SortListByListDesc ( units , tmp ) ;
51625: LD_ADDR_VAR 0 3
51629: PUSH
51630: LD_VAR 0 1
51634: PPUSH
51635: LD_VAR 0 5
51639: PPUSH
51640: CALL_OW 77
51644: ST_TO_ADDR
// end ;
51645: LD_VAR 0 3
51649: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51650: LD_INT 0
51652: PPUSH
51653: PPUSH
51654: PPUSH
// result := false ;
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: LD_INT 0
51662: ST_TO_ADDR
// if not building then
51663: LD_VAR 0 2
51667: NOT
51668: IFFALSE 51672
// exit ;
51670: GO 51810
// x := GetX ( building ) ;
51672: LD_ADDR_VAR 0 4
51676: PUSH
51677: LD_VAR 0 2
51681: PPUSH
51682: CALL_OW 250
51686: ST_TO_ADDR
// y := GetY ( building ) ;
51687: LD_ADDR_VAR 0 5
51691: PUSH
51692: LD_VAR 0 2
51696: PPUSH
51697: CALL_OW 251
51701: ST_TO_ADDR
// if not x or not y then
51702: LD_VAR 0 4
51706: NOT
51707: PUSH
51708: LD_VAR 0 5
51712: NOT
51713: OR
51714: IFFALSE 51718
// exit ;
51716: GO 51810
// if GetTaskList ( unit ) then
51718: LD_VAR 0 1
51722: PPUSH
51723: CALL_OW 437
51727: IFFALSE 51810
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51729: LD_STRING e
51731: PUSH
51732: LD_VAR 0 1
51736: PPUSH
51737: CALL_OW 437
51741: PUSH
51742: LD_INT 1
51744: ARRAY
51745: PUSH
51746: LD_INT 1
51748: ARRAY
51749: EQUAL
51750: PUSH
51751: LD_VAR 0 4
51755: PUSH
51756: LD_VAR 0 1
51760: PPUSH
51761: CALL_OW 437
51765: PUSH
51766: LD_INT 1
51768: ARRAY
51769: PUSH
51770: LD_INT 2
51772: ARRAY
51773: EQUAL
51774: AND
51775: PUSH
51776: LD_VAR 0 5
51780: PUSH
51781: LD_VAR 0 1
51785: PPUSH
51786: CALL_OW 437
51790: PUSH
51791: LD_INT 1
51793: ARRAY
51794: PUSH
51795: LD_INT 3
51797: ARRAY
51798: EQUAL
51799: AND
51800: IFFALSE 51810
// result := true end ;
51802: LD_ADDR_VAR 0 3
51806: PUSH
51807: LD_INT 1
51809: ST_TO_ADDR
// end ;
51810: LD_VAR 0 3
51814: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51815: LD_INT 0
51817: PPUSH
// result := false ;
51818: LD_ADDR_VAR 0 4
51822: PUSH
51823: LD_INT 0
51825: ST_TO_ADDR
// if GetTaskList ( unit ) then
51826: LD_VAR 0 1
51830: PPUSH
51831: CALL_OW 437
51835: IFFALSE 51918
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51837: LD_STRING M
51839: PUSH
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 437
51849: PUSH
51850: LD_INT 1
51852: ARRAY
51853: PUSH
51854: LD_INT 1
51856: ARRAY
51857: EQUAL
51858: PUSH
51859: LD_VAR 0 2
51863: PUSH
51864: LD_VAR 0 1
51868: PPUSH
51869: CALL_OW 437
51873: PUSH
51874: LD_INT 1
51876: ARRAY
51877: PUSH
51878: LD_INT 2
51880: ARRAY
51881: EQUAL
51882: AND
51883: PUSH
51884: LD_VAR 0 3
51888: PUSH
51889: LD_VAR 0 1
51893: PPUSH
51894: CALL_OW 437
51898: PUSH
51899: LD_INT 1
51901: ARRAY
51902: PUSH
51903: LD_INT 3
51905: ARRAY
51906: EQUAL
51907: AND
51908: IFFALSE 51918
// result := true ;
51910: LD_ADDR_VAR 0 4
51914: PUSH
51915: LD_INT 1
51917: ST_TO_ADDR
// end ; end ;
51918: LD_VAR 0 4
51922: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51923: LD_INT 0
51925: PPUSH
51926: PPUSH
51927: PPUSH
51928: PPUSH
// if not unit or not area then
51929: LD_VAR 0 1
51933: NOT
51934: PUSH
51935: LD_VAR 0 2
51939: NOT
51940: OR
51941: IFFALSE 51945
// exit ;
51943: GO 52108
// tmp := AreaToList ( area , i ) ;
51945: LD_ADDR_VAR 0 6
51949: PUSH
51950: LD_VAR 0 2
51954: PPUSH
51955: LD_VAR 0 5
51959: PPUSH
51960: CALL_OW 517
51964: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51965: LD_ADDR_VAR 0 5
51969: PUSH
51970: DOUBLE
51971: LD_INT 1
51973: DEC
51974: ST_TO_ADDR
51975: LD_VAR 0 6
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: PUSH
51984: FOR_TO
51985: IFFALSE 52106
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51987: LD_ADDR_VAR 0 7
51991: PUSH
51992: LD_VAR 0 6
51996: PUSH
51997: LD_INT 1
51999: ARRAY
52000: PUSH
52001: LD_VAR 0 5
52005: ARRAY
52006: PUSH
52007: LD_VAR 0 6
52011: PUSH
52012: LD_INT 2
52014: ARRAY
52015: PUSH
52016: LD_VAR 0 5
52020: ARRAY
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
52026: LD_INT 92
52028: PUSH
52029: LD_VAR 0 7
52033: PUSH
52034: LD_INT 1
52036: ARRAY
52037: PUSH
52038: LD_VAR 0 7
52042: PUSH
52043: LD_INT 2
52045: ARRAY
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: PPUSH
52056: CALL_OW 69
52060: PUSH
52061: LD_INT 0
52063: EQUAL
52064: IFFALSE 52104
// begin PlaceUnitArea ( unit , area , mode ) ;
52066: LD_VAR 0 1
52070: PPUSH
52071: LD_VAR 0 2
52075: PPUSH
52076: LD_VAR 0 3
52080: PPUSH
52081: CALL_OW 49
// result := IsPlaced ( unit ) ;
52085: LD_ADDR_VAR 0 4
52089: PUSH
52090: LD_VAR 0 1
52094: PPUSH
52095: CALL_OW 305
52099: ST_TO_ADDR
// exit ;
52100: POP
52101: POP
52102: GO 52108
// end ; end ;
52104: GO 51984
52106: POP
52107: POP
// end ;
52108: LD_VAR 0 4
52112: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52113: LD_INT 0
52115: PPUSH
52116: PPUSH
52117: PPUSH
// if not side or side > 8 then
52118: LD_VAR 0 1
52122: NOT
52123: PUSH
52124: LD_VAR 0 1
52128: PUSH
52129: LD_INT 8
52131: GREATER
52132: OR
52133: IFFALSE 52137
// exit ;
52135: GO 52324
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52137: LD_ADDR_VAR 0 4
52141: PUSH
52142: LD_INT 22
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 21
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PPUSH
52168: CALL_OW 69
52172: ST_TO_ADDR
// if not tmp then
52173: LD_VAR 0 4
52177: NOT
52178: IFFALSE 52182
// exit ;
52180: GO 52324
// enable_addtolog := true ;
52182: LD_ADDR_OWVAR 81
52186: PUSH
52187: LD_INT 1
52189: ST_TO_ADDR
// AddToLog ( [ ) ;
52190: LD_STRING [
52192: PPUSH
52193: CALL_OW 561
// for i in tmp do
52197: LD_ADDR_VAR 0 3
52201: PUSH
52202: LD_VAR 0 4
52206: PUSH
52207: FOR_IN
52208: IFFALSE 52315
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52210: LD_STRING [
52212: PUSH
52213: LD_VAR 0 3
52217: PPUSH
52218: CALL_OW 266
52222: STR
52223: PUSH
52224: LD_STRING , 
52226: STR
52227: PUSH
52228: LD_VAR 0 3
52232: PPUSH
52233: CALL_OW 250
52237: STR
52238: PUSH
52239: LD_STRING , 
52241: STR
52242: PUSH
52243: LD_VAR 0 3
52247: PPUSH
52248: CALL_OW 251
52252: STR
52253: PUSH
52254: LD_STRING , 
52256: STR
52257: PUSH
52258: LD_VAR 0 3
52262: PPUSH
52263: CALL_OW 254
52267: STR
52268: PUSH
52269: LD_STRING , 
52271: STR
52272: PUSH
52273: LD_VAR 0 3
52277: PPUSH
52278: LD_INT 1
52280: PPUSH
52281: CALL_OW 268
52285: STR
52286: PUSH
52287: LD_STRING , 
52289: STR
52290: PUSH
52291: LD_VAR 0 3
52295: PPUSH
52296: LD_INT 2
52298: PPUSH
52299: CALL_OW 268
52303: STR
52304: PUSH
52305: LD_STRING ],
52307: STR
52308: PPUSH
52309: CALL_OW 561
// end ;
52313: GO 52207
52315: POP
52316: POP
// AddToLog ( ]; ) ;
52317: LD_STRING ];
52319: PPUSH
52320: CALL_OW 561
// end ;
52324: LD_VAR 0 2
52328: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52329: LD_INT 0
52331: PPUSH
52332: PPUSH
52333: PPUSH
52334: PPUSH
52335: PPUSH
// if not area or not rate or not max then
52336: LD_VAR 0 1
52340: NOT
52341: PUSH
52342: LD_VAR 0 2
52346: NOT
52347: OR
52348: PUSH
52349: LD_VAR 0 4
52353: NOT
52354: OR
52355: IFFALSE 52359
// exit ;
52357: GO 52548
// while 1 do
52359: LD_INT 1
52361: IFFALSE 52548
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52363: LD_ADDR_VAR 0 9
52367: PUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: LD_INT 1
52375: PPUSH
52376: CALL_OW 287
52380: PUSH
52381: LD_INT 10
52383: MUL
52384: ST_TO_ADDR
// r := rate / 10 ;
52385: LD_ADDR_VAR 0 7
52389: PUSH
52390: LD_VAR 0 2
52394: PUSH
52395: LD_INT 10
52397: DIVREAL
52398: ST_TO_ADDR
// time := 1 1$00 ;
52399: LD_ADDR_VAR 0 8
52403: PUSH
52404: LD_INT 2100
52406: ST_TO_ADDR
// if amount < min then
52407: LD_VAR 0 9
52411: PUSH
52412: LD_VAR 0 3
52416: LESS
52417: IFFALSE 52435
// r := r * 2 else
52419: LD_ADDR_VAR 0 7
52423: PUSH
52424: LD_VAR 0 7
52428: PUSH
52429: LD_INT 2
52431: MUL
52432: ST_TO_ADDR
52433: GO 52461
// if amount > max then
52435: LD_VAR 0 9
52439: PUSH
52440: LD_VAR 0 4
52444: GREATER
52445: IFFALSE 52461
// r := r / 2 ;
52447: LD_ADDR_VAR 0 7
52451: PUSH
52452: LD_VAR 0 7
52456: PUSH
52457: LD_INT 2
52459: DIVREAL
52460: ST_TO_ADDR
// time := time / r ;
52461: LD_ADDR_VAR 0 8
52465: PUSH
52466: LD_VAR 0 8
52470: PUSH
52471: LD_VAR 0 7
52475: DIVREAL
52476: ST_TO_ADDR
// if time < 0 then
52477: LD_VAR 0 8
52481: PUSH
52482: LD_INT 0
52484: LESS
52485: IFFALSE 52502
// time := time * - 1 ;
52487: LD_ADDR_VAR 0 8
52491: PUSH
52492: LD_VAR 0 8
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: MUL
52501: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52502: LD_VAR 0 8
52506: PUSH
52507: LD_INT 35
52509: PPUSH
52510: LD_INT 875
52512: PPUSH
52513: CALL_OW 12
52517: PLUS
52518: PPUSH
52519: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52523: LD_INT 1
52525: PPUSH
52526: LD_INT 5
52528: PPUSH
52529: CALL_OW 12
52533: PPUSH
52534: LD_VAR 0 1
52538: PPUSH
52539: LD_INT 1
52541: PPUSH
52542: CALL_OW 55
// end ;
52546: GO 52359
// end ;
52548: LD_VAR 0 5
52552: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52553: LD_INT 0
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
52559: PPUSH
52560: PPUSH
52561: PPUSH
52562: PPUSH
// if not turrets or not factories then
52563: LD_VAR 0 1
52567: NOT
52568: PUSH
52569: LD_VAR 0 2
52573: NOT
52574: OR
52575: IFFALSE 52579
// exit ;
52577: GO 52886
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52579: LD_ADDR_VAR 0 10
52583: PUSH
52584: LD_INT 5
52586: PUSH
52587: LD_INT 6
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 4
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: LD_INT 5
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 24
52621: PUSH
52622: LD_INT 25
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 23
52631: PUSH
52632: LD_INT 27
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 42
52645: PUSH
52646: LD_INT 43
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 44
52655: PUSH
52656: LD_INT 46
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 45
52665: PUSH
52666: LD_INT 47
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// result := [ ] ;
52683: LD_ADDR_VAR 0 3
52687: PUSH
52688: EMPTY
52689: ST_TO_ADDR
// for i in turrets do
52690: LD_ADDR_VAR 0 4
52694: PUSH
52695: LD_VAR 0 1
52699: PUSH
52700: FOR_IN
52701: IFFALSE 52884
// begin nat := GetNation ( i ) ;
52703: LD_ADDR_VAR 0 7
52707: PUSH
52708: LD_VAR 0 4
52712: PPUSH
52713: CALL_OW 248
52717: ST_TO_ADDR
// weapon := 0 ;
52718: LD_ADDR_VAR 0 8
52722: PUSH
52723: LD_INT 0
52725: ST_TO_ADDR
// if not nat then
52726: LD_VAR 0 7
52730: NOT
52731: IFFALSE 52735
// continue ;
52733: GO 52700
// for j in list [ nat ] do
52735: LD_ADDR_VAR 0 5
52739: PUSH
52740: LD_VAR 0 10
52744: PUSH
52745: LD_VAR 0 7
52749: ARRAY
52750: PUSH
52751: FOR_IN
52752: IFFALSE 52793
// if GetBWeapon ( i ) = j [ 1 ] then
52754: LD_VAR 0 4
52758: PPUSH
52759: CALL_OW 269
52763: PUSH
52764: LD_VAR 0 5
52768: PUSH
52769: LD_INT 1
52771: ARRAY
52772: EQUAL
52773: IFFALSE 52791
// begin weapon := j [ 2 ] ;
52775: LD_ADDR_VAR 0 8
52779: PUSH
52780: LD_VAR 0 5
52784: PUSH
52785: LD_INT 2
52787: ARRAY
52788: ST_TO_ADDR
// break ;
52789: GO 52793
// end ;
52791: GO 52751
52793: POP
52794: POP
// if not weapon then
52795: LD_VAR 0 8
52799: NOT
52800: IFFALSE 52804
// continue ;
52802: GO 52700
// for k in factories do
52804: LD_ADDR_VAR 0 6
52808: PUSH
52809: LD_VAR 0 2
52813: PUSH
52814: FOR_IN
52815: IFFALSE 52880
// begin weapons := AvailableWeaponList ( k ) ;
52817: LD_ADDR_VAR 0 9
52821: PUSH
52822: LD_VAR 0 6
52826: PPUSH
52827: CALL_OW 478
52831: ST_TO_ADDR
// if not weapons then
52832: LD_VAR 0 9
52836: NOT
52837: IFFALSE 52841
// continue ;
52839: GO 52814
// if weapon in weapons then
52841: LD_VAR 0 8
52845: PUSH
52846: LD_VAR 0 9
52850: IN
52851: IFFALSE 52878
// begin result := [ i , weapon ] ;
52853: LD_ADDR_VAR 0 3
52857: PUSH
52858: LD_VAR 0 4
52862: PUSH
52863: LD_VAR 0 8
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// exit ;
52872: POP
52873: POP
52874: POP
52875: POP
52876: GO 52886
// end ; end ;
52878: GO 52814
52880: POP
52881: POP
// end ;
52882: GO 52700
52884: POP
52885: POP
// end ;
52886: LD_VAR 0 3
52890: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52891: LD_INT 0
52893: PPUSH
// if not side or side > 8 then
52894: LD_VAR 0 3
52898: NOT
52899: PUSH
52900: LD_VAR 0 3
52904: PUSH
52905: LD_INT 8
52907: GREATER
52908: OR
52909: IFFALSE 52913
// exit ;
52911: GO 52972
// if not range then
52913: LD_VAR 0 4
52917: NOT
52918: IFFALSE 52929
// range := - 12 ;
52920: LD_ADDR_VAR 0 4
52924: PUSH
52925: LD_INT 12
52927: NEG
52928: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52929: LD_VAR 0 1
52933: PPUSH
52934: LD_VAR 0 2
52938: PPUSH
52939: LD_VAR 0 3
52943: PPUSH
52944: LD_VAR 0 4
52948: PPUSH
52949: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52953: LD_VAR 0 1
52957: PPUSH
52958: LD_VAR 0 2
52962: PPUSH
52963: LD_VAR 0 3
52967: PPUSH
52968: CALL_OW 331
// end ;
52972: LD_VAR 0 5
52976: RET
// export function Video ( mode ) ; begin
52977: LD_INT 0
52979: PPUSH
// ingame_video = mode ;
52980: LD_ADDR_OWVAR 52
52984: PUSH
52985: LD_VAR 0 1
52989: ST_TO_ADDR
// interface_hidden = mode ;
52990: LD_ADDR_OWVAR 54
52994: PUSH
52995: LD_VAR 0 1
52999: ST_TO_ADDR
// end ;
53000: LD_VAR 0 2
53004: RET
// export function Join ( array , element ) ; begin
53005: LD_INT 0
53007: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53008: LD_ADDR_VAR 0 3
53012: PUSH
53013: LD_VAR 0 1
53017: PPUSH
53018: LD_VAR 0 1
53022: PUSH
53023: LD_INT 1
53025: PLUS
53026: PPUSH
53027: LD_VAR 0 2
53031: PPUSH
53032: CALL_OW 1
53036: ST_TO_ADDR
// end ;
53037: LD_VAR 0 3
53041: RET
// export function JoinUnion ( array , element ) ; begin
53042: LD_INT 0
53044: PPUSH
// result := array union element ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_VAR 0 1
53054: PUSH
53055: LD_VAR 0 2
53059: UNION
53060: ST_TO_ADDR
// end ;
53061: LD_VAR 0 3
53065: RET
// export function GetBehemoths ( side ) ; begin
53066: LD_INT 0
53068: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53069: LD_ADDR_VAR 0 2
53073: PUSH
53074: LD_INT 22
53076: PUSH
53077: LD_VAR 0 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 31
53088: PUSH
53089: LD_INT 25
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PPUSH
53100: CALL_OW 69
53104: ST_TO_ADDR
// end ;
53105: LD_VAR 0 2
53109: RET
// export function Shuffle ( array ) ; var i , index ; begin
53110: LD_INT 0
53112: PPUSH
53113: PPUSH
53114: PPUSH
// result := [ ] ;
53115: LD_ADDR_VAR 0 2
53119: PUSH
53120: EMPTY
53121: ST_TO_ADDR
// if not array then
53122: LD_VAR 0 1
53126: NOT
53127: IFFALSE 53131
// exit ;
53129: GO 53230
// Randomize ;
53131: CALL_OW 10
// for i = array downto 1 do
53135: LD_ADDR_VAR 0 3
53139: PUSH
53140: DOUBLE
53141: LD_VAR 0 1
53145: INC
53146: ST_TO_ADDR
53147: LD_INT 1
53149: PUSH
53150: FOR_DOWNTO
53151: IFFALSE 53228
// begin index := rand ( 1 , array ) ;
53153: LD_ADDR_VAR 0 4
53157: PUSH
53158: LD_INT 1
53160: PPUSH
53161: LD_VAR 0 1
53165: PPUSH
53166: CALL_OW 12
53170: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53171: LD_ADDR_VAR 0 2
53175: PUSH
53176: LD_VAR 0 2
53180: PPUSH
53181: LD_VAR 0 2
53185: PUSH
53186: LD_INT 1
53188: PLUS
53189: PPUSH
53190: LD_VAR 0 1
53194: PUSH
53195: LD_VAR 0 4
53199: ARRAY
53200: PPUSH
53201: CALL_OW 2
53205: ST_TO_ADDR
// array := Delete ( array , index ) ;
53206: LD_ADDR_VAR 0 1
53210: PUSH
53211: LD_VAR 0 1
53215: PPUSH
53216: LD_VAR 0 4
53220: PPUSH
53221: CALL_OW 3
53225: ST_TO_ADDR
// end ;
53226: GO 53150
53228: POP
53229: POP
// end ;
53230: LD_VAR 0 2
53234: RET
// export function GetBaseMaterials ( base ) ; begin
53235: LD_INT 0
53237: PPUSH
// result := [ 0 , 0 , 0 ] ;
53238: LD_ADDR_VAR 0 2
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// if not base then
53257: LD_VAR 0 1
53261: NOT
53262: IFFALSE 53266
// exit ;
53264: GO 53315
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53266: LD_ADDR_VAR 0 2
53270: PUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: LD_INT 1
53278: PPUSH
53279: CALL_OW 275
53283: PUSH
53284: LD_VAR 0 1
53288: PPUSH
53289: LD_INT 2
53291: PPUSH
53292: CALL_OW 275
53296: PUSH
53297: LD_VAR 0 1
53301: PPUSH
53302: LD_INT 3
53304: PPUSH
53305: CALL_OW 275
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: ST_TO_ADDR
// end ;
53315: LD_VAR 0 2
53319: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53320: LD_INT 0
53322: PPUSH
53323: PPUSH
// result := array ;
53324: LD_ADDR_VAR 0 3
53328: PUSH
53329: LD_VAR 0 1
53333: ST_TO_ADDR
// if size >= result then
53334: LD_VAR 0 2
53338: PUSH
53339: LD_VAR 0 3
53343: GREATEREQUAL
53344: IFFALSE 53348
// exit ;
53346: GO 53398
// if size then
53348: LD_VAR 0 2
53352: IFFALSE 53398
// for i := array downto size do
53354: LD_ADDR_VAR 0 4
53358: PUSH
53359: DOUBLE
53360: LD_VAR 0 1
53364: INC
53365: ST_TO_ADDR
53366: LD_VAR 0 2
53370: PUSH
53371: FOR_DOWNTO
53372: IFFALSE 53396
// result := Delete ( result , result ) ;
53374: LD_ADDR_VAR 0 3
53378: PUSH
53379: LD_VAR 0 3
53383: PPUSH
53384: LD_VAR 0 3
53388: PPUSH
53389: CALL_OW 3
53393: ST_TO_ADDR
53394: GO 53371
53396: POP
53397: POP
// end ;
53398: LD_VAR 0 3
53402: RET
// export function ComExit ( unit ) ; var tmp ; begin
53403: LD_INT 0
53405: PPUSH
53406: PPUSH
// if not IsInUnit ( unit ) then
53407: LD_VAR 0 1
53411: PPUSH
53412: CALL_OW 310
53416: NOT
53417: IFFALSE 53421
// exit ;
53419: GO 53481
// tmp := IsInUnit ( unit ) ;
53421: LD_ADDR_VAR 0 3
53425: PUSH
53426: LD_VAR 0 1
53430: PPUSH
53431: CALL_OW 310
53435: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53436: LD_VAR 0 3
53440: PPUSH
53441: CALL_OW 247
53445: PUSH
53446: LD_INT 2
53448: EQUAL
53449: IFFALSE 53462
// ComExitVehicle ( unit ) else
53451: LD_VAR 0 1
53455: PPUSH
53456: CALL_OW 121
53460: GO 53471
// ComExitBuilding ( unit ) ;
53462: LD_VAR 0 1
53466: PPUSH
53467: CALL_OW 122
// result := tmp ;
53471: LD_ADDR_VAR 0 2
53475: PUSH
53476: LD_VAR 0 3
53480: ST_TO_ADDR
// end ;
53481: LD_VAR 0 2
53485: RET
// export function ComExitAll ( units ) ; var i ; begin
53486: LD_INT 0
53488: PPUSH
53489: PPUSH
// if not units then
53490: LD_VAR 0 1
53494: NOT
53495: IFFALSE 53499
// exit ;
53497: GO 53525
// for i in units do
53499: LD_ADDR_VAR 0 3
53503: PUSH
53504: LD_VAR 0 1
53508: PUSH
53509: FOR_IN
53510: IFFALSE 53523
// ComExit ( i ) ;
53512: LD_VAR 0 3
53516: PPUSH
53517: CALL 53403 0 1
53521: GO 53509
53523: POP
53524: POP
// end ;
53525: LD_VAR 0 2
53529: RET
// export function ResetHc ; begin
53530: LD_INT 0
53532: PPUSH
// InitHc ;
53533: CALL_OW 19
// hc_importance := 0 ;
53537: LD_ADDR_OWVAR 32
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// end ;
53545: LD_VAR 0 1
53549: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53550: LD_INT 0
53552: PPUSH
53553: PPUSH
53554: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53555: LD_ADDR_VAR 0 6
53559: PUSH
53560: LD_VAR 0 1
53564: PUSH
53565: LD_VAR 0 3
53569: PLUS
53570: PUSH
53571: LD_INT 2
53573: DIV
53574: ST_TO_ADDR
// if _x < 0 then
53575: LD_VAR 0 6
53579: PUSH
53580: LD_INT 0
53582: LESS
53583: IFFALSE 53600
// _x := _x * - 1 ;
53585: LD_ADDR_VAR 0 6
53589: PUSH
53590: LD_VAR 0 6
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: MUL
53599: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53600: LD_ADDR_VAR 0 7
53604: PUSH
53605: LD_VAR 0 2
53609: PUSH
53610: LD_VAR 0 4
53614: PLUS
53615: PUSH
53616: LD_INT 2
53618: DIV
53619: ST_TO_ADDR
// if _y < 0 then
53620: LD_VAR 0 7
53624: PUSH
53625: LD_INT 0
53627: LESS
53628: IFFALSE 53645
// _y := _y * - 1 ;
53630: LD_ADDR_VAR 0 7
53634: PUSH
53635: LD_VAR 0 7
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: MUL
53644: ST_TO_ADDR
// result := [ _x , _y ] ;
53645: LD_ADDR_VAR 0 5
53649: PUSH
53650: LD_VAR 0 6
53654: PUSH
53655: LD_VAR 0 7
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// end ;
53664: LD_VAR 0 5
53668: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
// task := GetTaskList ( unit ) ;
53675: LD_ADDR_VAR 0 7
53679: PUSH
53680: LD_VAR 0 1
53684: PPUSH
53685: CALL_OW 437
53689: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53690: LD_VAR 0 7
53694: NOT
53695: PUSH
53696: LD_VAR 0 1
53700: PPUSH
53701: LD_VAR 0 2
53705: PPUSH
53706: CALL_OW 308
53710: NOT
53711: AND
53712: IFFALSE 53716
// exit ;
53714: GO 53834
// if IsInArea ( unit , area ) then
53716: LD_VAR 0 1
53720: PPUSH
53721: LD_VAR 0 2
53725: PPUSH
53726: CALL_OW 308
53730: IFFALSE 53748
// begin ComMoveToArea ( unit , goAway ) ;
53732: LD_VAR 0 1
53736: PPUSH
53737: LD_VAR 0 3
53741: PPUSH
53742: CALL_OW 113
// exit ;
53746: GO 53834
// end ; if task [ 1 ] [ 1 ] <> M then
53748: LD_VAR 0 7
53752: PUSH
53753: LD_INT 1
53755: ARRAY
53756: PUSH
53757: LD_INT 1
53759: ARRAY
53760: PUSH
53761: LD_STRING M
53763: NONEQUAL
53764: IFFALSE 53768
// exit ;
53766: GO 53834
// x := task [ 1 ] [ 2 ] ;
53768: LD_ADDR_VAR 0 5
53772: PUSH
53773: LD_VAR 0 7
53777: PUSH
53778: LD_INT 1
53780: ARRAY
53781: PUSH
53782: LD_INT 2
53784: ARRAY
53785: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53786: LD_ADDR_VAR 0 6
53790: PUSH
53791: LD_VAR 0 7
53795: PUSH
53796: LD_INT 1
53798: ARRAY
53799: PUSH
53800: LD_INT 3
53802: ARRAY
53803: ST_TO_ADDR
// if InArea ( x , y , area ) then
53804: LD_VAR 0 5
53808: PPUSH
53809: LD_VAR 0 6
53813: PPUSH
53814: LD_VAR 0 2
53818: PPUSH
53819: CALL_OW 309
53823: IFFALSE 53834
// ComStop ( unit ) ;
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 141
// end ;
53834: LD_VAR 0 4
53838: RET
// export function Abs ( value ) ; begin
53839: LD_INT 0
53841: PPUSH
// result := value ;
53842: LD_ADDR_VAR 0 2
53846: PUSH
53847: LD_VAR 0 1
53851: ST_TO_ADDR
// if value < 0 then
53852: LD_VAR 0 1
53856: PUSH
53857: LD_INT 0
53859: LESS
53860: IFFALSE 53877
// result := value * - 1 ;
53862: LD_ADDR_VAR 0 2
53866: PUSH
53867: LD_VAR 0 1
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: MUL
53876: ST_TO_ADDR
// end ;
53877: LD_VAR 0 2
53881: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53882: LD_INT 0
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
// if not unit or not building then
53892: LD_VAR 0 1
53896: NOT
53897: PUSH
53898: LD_VAR 0 2
53902: NOT
53903: OR
53904: IFFALSE 53908
// exit ;
53906: GO 54134
// x := GetX ( building ) ;
53908: LD_ADDR_VAR 0 4
53912: PUSH
53913: LD_VAR 0 2
53917: PPUSH
53918: CALL_OW 250
53922: ST_TO_ADDR
// y := GetY ( building ) ;
53923: LD_ADDR_VAR 0 6
53927: PUSH
53928: LD_VAR 0 2
53932: PPUSH
53933: CALL_OW 251
53937: ST_TO_ADDR
// d := GetDir ( building ) ;
53938: LD_ADDR_VAR 0 8
53942: PUSH
53943: LD_VAR 0 2
53947: PPUSH
53948: CALL_OW 254
53952: ST_TO_ADDR
// r := 4 ;
53953: LD_ADDR_VAR 0 9
53957: PUSH
53958: LD_INT 4
53960: ST_TO_ADDR
// for i := 1 to 5 do
53961: LD_ADDR_VAR 0 10
53965: PUSH
53966: DOUBLE
53967: LD_INT 1
53969: DEC
53970: ST_TO_ADDR
53971: LD_INT 5
53973: PUSH
53974: FOR_TO
53975: IFFALSE 54132
// begin _x := ShiftX ( x , d , r + i ) ;
53977: LD_ADDR_VAR 0 5
53981: PUSH
53982: LD_VAR 0 4
53986: PPUSH
53987: LD_VAR 0 8
53991: PPUSH
53992: LD_VAR 0 9
53996: PUSH
53997: LD_VAR 0 10
54001: PLUS
54002: PPUSH
54003: CALL_OW 272
54007: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54008: LD_ADDR_VAR 0 7
54012: PUSH
54013: LD_VAR 0 6
54017: PPUSH
54018: LD_VAR 0 8
54022: PPUSH
54023: LD_VAR 0 9
54027: PUSH
54028: LD_VAR 0 10
54032: PLUS
54033: PPUSH
54034: CALL_OW 273
54038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54039: LD_VAR 0 5
54043: PPUSH
54044: LD_VAR 0 7
54048: PPUSH
54049: CALL_OW 488
54053: PUSH
54054: LD_VAR 0 5
54058: PPUSH
54059: LD_VAR 0 7
54063: PPUSH
54064: CALL_OW 428
54068: PPUSH
54069: CALL_OW 247
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: IN
54084: NOT
54085: AND
54086: IFFALSE 54130
// begin ComMoveXY ( unit , _x , _y ) ;
54088: LD_VAR 0 1
54092: PPUSH
54093: LD_VAR 0 5
54097: PPUSH
54098: LD_VAR 0 7
54102: PPUSH
54103: CALL_OW 111
// result := [ _x , _y ] ;
54107: LD_ADDR_VAR 0 3
54111: PUSH
54112: LD_VAR 0 5
54116: PUSH
54117: LD_VAR 0 7
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: ST_TO_ADDR
// exit ;
54126: POP
54127: POP
54128: GO 54134
// end ; end ;
54130: GO 53974
54132: POP
54133: POP
// end ;
54134: LD_VAR 0 3
54138: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
54143: PPUSH
// result := 0 ;
54144: LD_ADDR_VAR 0 3
54148: PUSH
54149: LD_INT 0
54151: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54152: LD_VAR 0 1
54156: PUSH
54157: LD_INT 0
54159: LESS
54160: PUSH
54161: LD_VAR 0 1
54165: PUSH
54166: LD_INT 8
54168: GREATER
54169: OR
54170: PUSH
54171: LD_VAR 0 2
54175: PUSH
54176: LD_INT 0
54178: LESS
54179: OR
54180: PUSH
54181: LD_VAR 0 2
54185: PUSH
54186: LD_INT 8
54188: GREATER
54189: OR
54190: IFFALSE 54194
// exit ;
54192: GO 54269
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54194: LD_ADDR_VAR 0 4
54198: PUSH
54199: LD_INT 22
54201: PUSH
54202: LD_VAR 0 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PPUSH
54211: CALL_OW 69
54215: PUSH
54216: FOR_IN
54217: IFFALSE 54267
// begin un := UnitShoot ( i ) ;
54219: LD_ADDR_VAR 0 5
54223: PUSH
54224: LD_VAR 0 4
54228: PPUSH
54229: CALL_OW 504
54233: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54234: LD_VAR 0 5
54238: PPUSH
54239: CALL_OW 255
54243: PUSH
54244: LD_VAR 0 1
54248: EQUAL
54249: IFFALSE 54265
// begin result := un ;
54251: LD_ADDR_VAR 0 3
54255: PUSH
54256: LD_VAR 0 5
54260: ST_TO_ADDR
// exit ;
54261: POP
54262: POP
54263: GO 54269
// end ; end ;
54265: GO 54216
54267: POP
54268: POP
// end ;
54269: LD_VAR 0 3
54273: RET
// export function GetCargoBay ( units ) ; begin
54274: LD_INT 0
54276: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54277: LD_ADDR_VAR 0 2
54281: PUSH
54282: LD_VAR 0 1
54286: PPUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 34
54292: PUSH
54293: LD_INT 12
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 34
54302: PUSH
54303: LD_INT 51
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 34
54312: PUSH
54313: LD_INT 32
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 34
54322: PUSH
54323: LD_INT 89
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: PPUSH
54337: CALL_OW 72
54341: ST_TO_ADDR
// end ;
54342: LD_VAR 0 2
54346: RET
// export function Negate ( value ) ; begin
54347: LD_INT 0
54349: PPUSH
// result := not value ;
54350: LD_ADDR_VAR 0 2
54354: PUSH
54355: LD_VAR 0 1
54359: NOT
54360: ST_TO_ADDR
// end ;
54361: LD_VAR 0 2
54365: RET
// export function Inc ( value ) ; begin
54366: LD_INT 0
54368: PPUSH
// result := value + 1 ;
54369: LD_ADDR_VAR 0 2
54373: PUSH
54374: LD_VAR 0 1
54378: PUSH
54379: LD_INT 1
54381: PLUS
54382: ST_TO_ADDR
// end ;
54383: LD_VAR 0 2
54387: RET
// export function Dec ( value ) ; begin
54388: LD_INT 0
54390: PPUSH
// result := value - 1 ;
54391: LD_ADDR_VAR 0 2
54395: PUSH
54396: LD_VAR 0 1
54400: PUSH
54401: LD_INT 1
54403: MINUS
54404: ST_TO_ADDR
// end ;
54405: LD_VAR 0 2
54409: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54410: LD_INT 0
54412: PPUSH
54413: PPUSH
54414: PPUSH
54415: PPUSH
54416: PPUSH
54417: PPUSH
54418: PPUSH
54419: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: CALL_OW 488
54434: NOT
54435: PUSH
54436: LD_VAR 0 3
54440: PPUSH
54441: LD_VAR 0 4
54445: PPUSH
54446: CALL_OW 488
54450: NOT
54451: OR
54452: IFFALSE 54465
// begin result := - 1 ;
54454: LD_ADDR_VAR 0 5
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: ST_TO_ADDR
// exit ;
54463: GO 54700
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54465: LD_ADDR_VAR 0 12
54469: PUSH
54470: LD_VAR 0 1
54474: PPUSH
54475: LD_VAR 0 2
54479: PPUSH
54480: LD_VAR 0 3
54484: PPUSH
54485: LD_VAR 0 4
54489: PPUSH
54490: CALL 53550 0 4
54494: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54495: LD_ADDR_VAR 0 11
54499: PUSH
54500: LD_VAR 0 1
54504: PPUSH
54505: LD_VAR 0 2
54509: PPUSH
54510: LD_VAR 0 12
54514: PUSH
54515: LD_INT 1
54517: ARRAY
54518: PPUSH
54519: LD_VAR 0 12
54523: PUSH
54524: LD_INT 2
54526: ARRAY
54527: PPUSH
54528: CALL_OW 298
54532: ST_TO_ADDR
// distance := 9999 ;
54533: LD_ADDR_VAR 0 10
54537: PUSH
54538: LD_INT 9999
54540: ST_TO_ADDR
// for i := 0 to 5 do
54541: LD_ADDR_VAR 0 6
54545: PUSH
54546: DOUBLE
54547: LD_INT 0
54549: DEC
54550: ST_TO_ADDR
54551: LD_INT 5
54553: PUSH
54554: FOR_TO
54555: IFFALSE 54698
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54557: LD_ADDR_VAR 0 7
54561: PUSH
54562: LD_VAR 0 1
54566: PPUSH
54567: LD_VAR 0 6
54571: PPUSH
54572: LD_VAR 0 11
54576: PPUSH
54577: CALL_OW 272
54581: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54582: LD_ADDR_VAR 0 8
54586: PUSH
54587: LD_VAR 0 2
54591: PPUSH
54592: LD_VAR 0 6
54596: PPUSH
54597: LD_VAR 0 11
54601: PPUSH
54602: CALL_OW 273
54606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54607: LD_VAR 0 7
54611: PPUSH
54612: LD_VAR 0 8
54616: PPUSH
54617: CALL_OW 488
54621: NOT
54622: IFFALSE 54626
// continue ;
54624: GO 54554
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54626: LD_ADDR_VAR 0 9
54630: PUSH
54631: LD_VAR 0 12
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: PPUSH
54640: LD_VAR 0 12
54644: PUSH
54645: LD_INT 2
54647: ARRAY
54648: PPUSH
54649: LD_VAR 0 7
54653: PPUSH
54654: LD_VAR 0 8
54658: PPUSH
54659: CALL_OW 298
54663: ST_TO_ADDR
// if tmp < distance then
54664: LD_VAR 0 9
54668: PUSH
54669: LD_VAR 0 10
54673: LESS
54674: IFFALSE 54696
// begin result := i ;
54676: LD_ADDR_VAR 0 5
54680: PUSH
54681: LD_VAR 0 6
54685: ST_TO_ADDR
// distance := tmp ;
54686: LD_ADDR_VAR 0 10
54690: PUSH
54691: LD_VAR 0 9
54695: ST_TO_ADDR
// end ; end ;
54696: GO 54554
54698: POP
54699: POP
// end ;
54700: LD_VAR 0 5
54704: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54705: LD_INT 0
54707: PPUSH
54708: PPUSH
// if not driver or not IsInUnit ( driver ) then
54709: LD_VAR 0 1
54713: NOT
54714: PUSH
54715: LD_VAR 0 1
54719: PPUSH
54720: CALL_OW 310
54724: NOT
54725: OR
54726: IFFALSE 54730
// exit ;
54728: GO 54820
// vehicle := IsInUnit ( driver ) ;
54730: LD_ADDR_VAR 0 3
54734: PUSH
54735: LD_VAR 0 1
54739: PPUSH
54740: CALL_OW 310
54744: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54745: LD_VAR 0 1
54749: PPUSH
54750: LD_STRING \
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: PUSH
54780: LD_STRING E
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_VAR 0 3
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PPUSH
54816: CALL_OW 446
// end ;
54820: LD_VAR 0 2
54824: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54825: LD_INT 0
54827: PPUSH
54828: PPUSH
// if not driver or not IsInUnit ( driver ) then
54829: LD_VAR 0 1
54833: NOT
54834: PUSH
54835: LD_VAR 0 1
54839: PPUSH
54840: CALL_OW 310
54844: NOT
54845: OR
54846: IFFALSE 54850
// exit ;
54848: GO 54940
// vehicle := IsInUnit ( driver ) ;
54850: LD_ADDR_VAR 0 3
54854: PUSH
54855: LD_VAR 0 1
54859: PPUSH
54860: CALL_OW 310
54864: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54865: LD_VAR 0 1
54869: PPUSH
54870: LD_STRING \
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: PUSH
54900: LD_STRING E
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_VAR 0 3
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PPUSH
54936: CALL_OW 447
// end ;
54940: LD_VAR 0 2
54944: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54945: LD_INT 0
54947: PPUSH
54948: PPUSH
54949: PPUSH
// tmp := [ ] ;
54950: LD_ADDR_VAR 0 5
54954: PUSH
54955: EMPTY
54956: ST_TO_ADDR
// for i in units do
54957: LD_ADDR_VAR 0 4
54961: PUSH
54962: LD_VAR 0 1
54966: PUSH
54967: FOR_IN
54968: IFFALSE 55006
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54970: LD_ADDR_VAR 0 5
54974: PUSH
54975: LD_VAR 0 5
54979: PPUSH
54980: LD_VAR 0 5
54984: PUSH
54985: LD_INT 1
54987: PLUS
54988: PPUSH
54989: LD_VAR 0 4
54993: PPUSH
54994: CALL_OW 256
54998: PPUSH
54999: CALL_OW 2
55003: ST_TO_ADDR
55004: GO 54967
55006: POP
55007: POP
// if not tmp then
55008: LD_VAR 0 5
55012: NOT
55013: IFFALSE 55017
// exit ;
55015: GO 55065
// if asc then
55017: LD_VAR 0 2
55021: IFFALSE 55045
// result := SortListByListAsc ( units , tmp ) else
55023: LD_ADDR_VAR 0 3
55027: PUSH
55028: LD_VAR 0 1
55032: PPUSH
55033: LD_VAR 0 5
55037: PPUSH
55038: CALL_OW 76
55042: ST_TO_ADDR
55043: GO 55065
// result := SortListByListDesc ( units , tmp ) ;
55045: LD_ADDR_VAR 0 3
55049: PUSH
55050: LD_VAR 0 1
55054: PPUSH
55055: LD_VAR 0 5
55059: PPUSH
55060: CALL_OW 77
55064: ST_TO_ADDR
// end ;
55065: LD_VAR 0 3
55069: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55070: LD_INT 0
55072: PPUSH
55073: PPUSH
// task := GetTaskList ( mech ) ;
55074: LD_ADDR_VAR 0 4
55078: PUSH
55079: LD_VAR 0 1
55083: PPUSH
55084: CALL_OW 437
55088: ST_TO_ADDR
// if not task then
55089: LD_VAR 0 4
55093: NOT
55094: IFFALSE 55098
// exit ;
55096: GO 55140
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55098: LD_ADDR_VAR 0 3
55102: PUSH
55103: LD_VAR 0 4
55107: PUSH
55108: LD_INT 1
55110: ARRAY
55111: PUSH
55112: LD_INT 1
55114: ARRAY
55115: PUSH
55116: LD_STRING r
55118: EQUAL
55119: PUSH
55120: LD_VAR 0 4
55124: PUSH
55125: LD_INT 1
55127: ARRAY
55128: PUSH
55129: LD_INT 4
55131: ARRAY
55132: PUSH
55133: LD_VAR 0 2
55137: EQUAL
55138: AND
55139: ST_TO_ADDR
// end ;
55140: LD_VAR 0 3
55144: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55145: LD_INT 0
55147: PPUSH
// SetDir ( unit , d ) ;
55148: LD_VAR 0 1
55152: PPUSH
55153: LD_VAR 0 4
55157: PPUSH
55158: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55162: LD_VAR 0 1
55166: PPUSH
55167: LD_VAR 0 2
55171: PPUSH
55172: LD_VAR 0 3
55176: PPUSH
55177: LD_VAR 0 5
55181: PPUSH
55182: CALL_OW 48
// end ;
55186: LD_VAR 0 6
55190: RET
// export function ToNaturalNumber ( number ) ; begin
55191: LD_INT 0
55193: PPUSH
// result := number div 1 ;
55194: LD_ADDR_VAR 0 2
55198: PUSH
55199: LD_VAR 0 1
55203: PUSH
55204: LD_INT 1
55206: DIV
55207: ST_TO_ADDR
// if number < 0 then
55208: LD_VAR 0 1
55212: PUSH
55213: LD_INT 0
55215: LESS
55216: IFFALSE 55226
// result := 0 ;
55218: LD_ADDR_VAR 0 2
55222: PUSH
55223: LD_INT 0
55225: ST_TO_ADDR
// end ;
55226: LD_VAR 0 2
55230: RET
// export function SortByClass ( units , class ) ; var un ; begin
55231: LD_INT 0
55233: PPUSH
55234: PPUSH
// if not units or not class then
55235: LD_VAR 0 1
55239: NOT
55240: PUSH
55241: LD_VAR 0 2
55245: NOT
55246: OR
55247: IFFALSE 55251
// exit ;
55249: GO 55346
// result := [ ] ;
55251: LD_ADDR_VAR 0 3
55255: PUSH
55256: EMPTY
55257: ST_TO_ADDR
// for un in units do
55258: LD_ADDR_VAR 0 4
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: FOR_IN
55269: IFFALSE 55344
// if GetClass ( un ) = class then
55271: LD_VAR 0 4
55275: PPUSH
55276: CALL_OW 257
55280: PUSH
55281: LD_VAR 0 2
55285: EQUAL
55286: IFFALSE 55313
// result := Insert ( result , 1 , un ) else
55288: LD_ADDR_VAR 0 3
55292: PUSH
55293: LD_VAR 0 3
55297: PPUSH
55298: LD_INT 1
55300: PPUSH
55301: LD_VAR 0 4
55305: PPUSH
55306: CALL_OW 2
55310: ST_TO_ADDR
55311: GO 55342
// result := Replace ( result , result + 1 , un ) ;
55313: LD_ADDR_VAR 0 3
55317: PUSH
55318: LD_VAR 0 3
55322: PPUSH
55323: LD_VAR 0 3
55327: PUSH
55328: LD_INT 1
55330: PLUS
55331: PPUSH
55332: LD_VAR 0 4
55336: PPUSH
55337: CALL_OW 1
55341: ST_TO_ADDR
55342: GO 55268
55344: POP
55345: POP
// end ;
55346: LD_VAR 0 3
55350: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55351: LD_INT 0
55353: PPUSH
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
// result := [ ] ;
55360: LD_ADDR_VAR 0 4
55364: PUSH
55365: EMPTY
55366: ST_TO_ADDR
// if x - r < 0 then
55367: LD_VAR 0 1
55371: PUSH
55372: LD_VAR 0 3
55376: MINUS
55377: PUSH
55378: LD_INT 0
55380: LESS
55381: IFFALSE 55393
// min_x := 0 else
55383: LD_ADDR_VAR 0 8
55387: PUSH
55388: LD_INT 0
55390: ST_TO_ADDR
55391: GO 55409
// min_x := x - r ;
55393: LD_ADDR_VAR 0 8
55397: PUSH
55398: LD_VAR 0 1
55402: PUSH
55403: LD_VAR 0 3
55407: MINUS
55408: ST_TO_ADDR
// if y - r < 0 then
55409: LD_VAR 0 2
55413: PUSH
55414: LD_VAR 0 3
55418: MINUS
55419: PUSH
55420: LD_INT 0
55422: LESS
55423: IFFALSE 55435
// min_y := 0 else
55425: LD_ADDR_VAR 0 7
55429: PUSH
55430: LD_INT 0
55432: ST_TO_ADDR
55433: GO 55451
// min_y := y - r ;
55435: LD_ADDR_VAR 0 7
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_VAR 0 3
55449: MINUS
55450: ST_TO_ADDR
// max_x := x + r ;
55451: LD_ADDR_VAR 0 9
55455: PUSH
55456: LD_VAR 0 1
55460: PUSH
55461: LD_VAR 0 3
55465: PLUS
55466: ST_TO_ADDR
// max_y := y + r ;
55467: LD_ADDR_VAR 0 10
55471: PUSH
55472: LD_VAR 0 2
55476: PUSH
55477: LD_VAR 0 3
55481: PLUS
55482: ST_TO_ADDR
// for _x = min_x to max_x do
55483: LD_ADDR_VAR 0 5
55487: PUSH
55488: DOUBLE
55489: LD_VAR 0 8
55493: DEC
55494: ST_TO_ADDR
55495: LD_VAR 0 9
55499: PUSH
55500: FOR_TO
55501: IFFALSE 55602
// for _y = min_y to max_y do
55503: LD_ADDR_VAR 0 6
55507: PUSH
55508: DOUBLE
55509: LD_VAR 0 7
55513: DEC
55514: ST_TO_ADDR
55515: LD_VAR 0 10
55519: PUSH
55520: FOR_TO
55521: IFFALSE 55598
// begin if not ValidHex ( _x , _y ) then
55523: LD_VAR 0 5
55527: PPUSH
55528: LD_VAR 0 6
55532: PPUSH
55533: CALL_OW 488
55537: NOT
55538: IFFALSE 55542
// continue ;
55540: GO 55520
// if GetResourceTypeXY ( _x , _y ) then
55542: LD_VAR 0 5
55546: PPUSH
55547: LD_VAR 0 6
55551: PPUSH
55552: CALL_OW 283
55556: IFFALSE 55596
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55558: LD_ADDR_VAR 0 4
55562: PUSH
55563: LD_VAR 0 4
55567: PPUSH
55568: LD_VAR 0 4
55572: PUSH
55573: LD_INT 1
55575: PLUS
55576: PPUSH
55577: LD_VAR 0 5
55581: PUSH
55582: LD_VAR 0 6
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PPUSH
55591: CALL_OW 1
55595: ST_TO_ADDR
// end ;
55596: GO 55520
55598: POP
55599: POP
55600: GO 55500
55602: POP
55603: POP
// end ;
55604: LD_VAR 0 4
55608: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55609: LD_INT 0
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
// if not units then
55619: LD_VAR 0 1
55623: NOT
55624: IFFALSE 55628
// exit ;
55626: GO 56152
// result := UnitFilter ( units , [ f_ok ] ) ;
55628: LD_ADDR_VAR 0 3
55632: PUSH
55633: LD_VAR 0 1
55637: PPUSH
55638: LD_INT 50
55640: PUSH
55641: EMPTY
55642: LIST
55643: PPUSH
55644: CALL_OW 72
55648: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55649: LD_ADDR_VAR 0 8
55653: PUSH
55654: LD_VAR 0 1
55658: PUSH
55659: LD_INT 1
55661: ARRAY
55662: PPUSH
55663: CALL_OW 255
55667: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55668: LD_ADDR_VAR 0 10
55672: PUSH
55673: LD_INT 29
55675: PUSH
55676: LD_INT 91
55678: PUSH
55679: LD_INT 49
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// if not result then
55687: LD_VAR 0 3
55691: NOT
55692: IFFALSE 55696
// exit ;
55694: GO 56152
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55696: LD_ADDR_VAR 0 5
55700: PUSH
55701: LD_INT 81
55703: PUSH
55704: LD_VAR 0 8
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PPUSH
55713: CALL_OW 69
55717: ST_TO_ADDR
// for i in result do
55718: LD_ADDR_VAR 0 4
55722: PUSH
55723: LD_VAR 0 3
55727: PUSH
55728: FOR_IN
55729: IFFALSE 56150
// begin tag := GetTag ( i ) + 1 ;
55731: LD_ADDR_VAR 0 9
55735: PUSH
55736: LD_VAR 0 4
55740: PPUSH
55741: CALL_OW 110
55745: PUSH
55746: LD_INT 1
55748: PLUS
55749: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55750: LD_ADDR_VAR 0 7
55754: PUSH
55755: LD_VAR 0 4
55759: PPUSH
55760: CALL_OW 250
55764: PPUSH
55765: LD_VAR 0 4
55769: PPUSH
55770: CALL_OW 251
55774: PPUSH
55775: LD_INT 6
55777: PPUSH
55778: CALL 55351 0 3
55782: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55783: LD_VAR 0 4
55787: PPUSH
55788: CALL_OW 247
55792: PUSH
55793: LD_INT 2
55795: EQUAL
55796: PUSH
55797: LD_VAR 0 7
55801: AND
55802: PUSH
55803: LD_VAR 0 4
55807: PPUSH
55808: CALL_OW 264
55812: PUSH
55813: LD_VAR 0 10
55817: IN
55818: NOT
55819: AND
55820: IFFALSE 55859
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55822: LD_VAR 0 4
55826: PPUSH
55827: LD_VAR 0 7
55831: PUSH
55832: LD_INT 1
55834: ARRAY
55835: PUSH
55836: LD_INT 1
55838: ARRAY
55839: PPUSH
55840: LD_VAR 0 7
55844: PUSH
55845: LD_INT 1
55847: ARRAY
55848: PUSH
55849: LD_INT 2
55851: ARRAY
55852: PPUSH
55853: CALL_OW 116
55857: GO 56148
// if path > tag then
55859: LD_VAR 0 2
55863: PUSH
55864: LD_VAR 0 9
55868: GREATER
55869: IFFALSE 56077
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55871: LD_ADDR_VAR 0 6
55875: PUSH
55876: LD_VAR 0 5
55880: PPUSH
55881: LD_INT 91
55883: PUSH
55884: LD_VAR 0 4
55888: PUSH
55889: LD_INT 8
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: PPUSH
55897: CALL_OW 72
55901: ST_TO_ADDR
// if nearEnemy then
55902: LD_VAR 0 6
55906: IFFALSE 55975
// begin if GetWeapon ( i ) = ru_time_lapser then
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 264
55917: PUSH
55918: LD_INT 49
55920: EQUAL
55921: IFFALSE 55949
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55923: LD_VAR 0 4
55927: PPUSH
55928: LD_VAR 0 6
55932: PPUSH
55933: LD_VAR 0 4
55937: PPUSH
55938: CALL_OW 74
55942: PPUSH
55943: CALL_OW 112
55947: GO 55973
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55949: LD_VAR 0 4
55953: PPUSH
55954: LD_VAR 0 6
55958: PPUSH
55959: LD_VAR 0 4
55963: PPUSH
55964: CALL_OW 74
55968: PPUSH
55969: CALL 57077 0 2
// end else
55973: GO 56075
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55975: LD_VAR 0 4
55979: PPUSH
55980: LD_VAR 0 2
55984: PUSH
55985: LD_VAR 0 9
55989: ARRAY
55990: PUSH
55991: LD_INT 1
55993: ARRAY
55994: PPUSH
55995: LD_VAR 0 2
55999: PUSH
56000: LD_VAR 0 9
56004: ARRAY
56005: PUSH
56006: LD_INT 2
56008: ARRAY
56009: PPUSH
56010: CALL_OW 297
56014: PUSH
56015: LD_INT 6
56017: GREATER
56018: IFFALSE 56061
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56020: LD_VAR 0 4
56024: PPUSH
56025: LD_VAR 0 2
56029: PUSH
56030: LD_VAR 0 9
56034: ARRAY
56035: PUSH
56036: LD_INT 1
56038: ARRAY
56039: PPUSH
56040: LD_VAR 0 2
56044: PUSH
56045: LD_VAR 0 9
56049: ARRAY
56050: PUSH
56051: LD_INT 2
56053: ARRAY
56054: PPUSH
56055: CALL_OW 114
56059: GO 56075
// SetTag ( i , tag ) ;
56061: LD_VAR 0 4
56065: PPUSH
56066: LD_VAR 0 9
56070: PPUSH
56071: CALL_OW 109
// end else
56075: GO 56148
// if enemy then
56077: LD_VAR 0 5
56081: IFFALSE 56148
// begin if GetWeapon ( i ) = ru_time_lapser then
56083: LD_VAR 0 4
56087: PPUSH
56088: CALL_OW 264
56092: PUSH
56093: LD_INT 49
56095: EQUAL
56096: IFFALSE 56124
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56098: LD_VAR 0 4
56102: PPUSH
56103: LD_VAR 0 5
56107: PPUSH
56108: LD_VAR 0 4
56112: PPUSH
56113: CALL_OW 74
56117: PPUSH
56118: CALL_OW 112
56122: GO 56148
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56124: LD_VAR 0 4
56128: PPUSH
56129: LD_VAR 0 5
56133: PPUSH
56134: LD_VAR 0 4
56138: PPUSH
56139: CALL_OW 74
56143: PPUSH
56144: CALL 57077 0 2
// end ; end ;
56148: GO 55728
56150: POP
56151: POP
// end ;
56152: LD_VAR 0 3
56156: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56157: LD_INT 0
56159: PPUSH
56160: PPUSH
56161: PPUSH
// if not unit or IsInUnit ( unit ) then
56162: LD_VAR 0 1
56166: NOT
56167: PUSH
56168: LD_VAR 0 1
56172: PPUSH
56173: CALL_OW 310
56177: OR
56178: IFFALSE 56182
// exit ;
56180: GO 56273
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56182: LD_ADDR_VAR 0 4
56186: PUSH
56187: LD_VAR 0 1
56191: PPUSH
56192: CALL_OW 250
56196: PPUSH
56197: LD_VAR 0 2
56201: PPUSH
56202: LD_INT 1
56204: PPUSH
56205: CALL_OW 272
56209: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56210: LD_ADDR_VAR 0 5
56214: PUSH
56215: LD_VAR 0 1
56219: PPUSH
56220: CALL_OW 251
56224: PPUSH
56225: LD_VAR 0 2
56229: PPUSH
56230: LD_INT 1
56232: PPUSH
56233: CALL_OW 273
56237: ST_TO_ADDR
// if ValidHex ( x , y ) then
56238: LD_VAR 0 4
56242: PPUSH
56243: LD_VAR 0 5
56247: PPUSH
56248: CALL_OW 488
56252: IFFALSE 56273
// ComTurnXY ( unit , x , y ) ;
56254: LD_VAR 0 1
56258: PPUSH
56259: LD_VAR 0 4
56263: PPUSH
56264: LD_VAR 0 5
56268: PPUSH
56269: CALL_OW 118
// end ;
56273: LD_VAR 0 3
56277: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56278: LD_INT 0
56280: PPUSH
56281: PPUSH
// result := false ;
56282: LD_ADDR_VAR 0 3
56286: PUSH
56287: LD_INT 0
56289: ST_TO_ADDR
// if not units then
56290: LD_VAR 0 2
56294: NOT
56295: IFFALSE 56299
// exit ;
56297: GO 56344
// for i in units do
56299: LD_ADDR_VAR 0 4
56303: PUSH
56304: LD_VAR 0 2
56308: PUSH
56309: FOR_IN
56310: IFFALSE 56342
// if See ( side , i ) then
56312: LD_VAR 0 1
56316: PPUSH
56317: LD_VAR 0 4
56321: PPUSH
56322: CALL_OW 292
56326: IFFALSE 56340
// begin result := true ;
56328: LD_ADDR_VAR 0 3
56332: PUSH
56333: LD_INT 1
56335: ST_TO_ADDR
// exit ;
56336: POP
56337: POP
56338: GO 56344
// end ;
56340: GO 56309
56342: POP
56343: POP
// end ;
56344: LD_VAR 0 3
56348: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56349: LD_INT 0
56351: PPUSH
56352: PPUSH
56353: PPUSH
56354: PPUSH
// if not unit or not points then
56355: LD_VAR 0 1
56359: NOT
56360: PUSH
56361: LD_VAR 0 2
56365: NOT
56366: OR
56367: IFFALSE 56371
// exit ;
56369: GO 56461
// dist := 99999 ;
56371: LD_ADDR_VAR 0 5
56375: PUSH
56376: LD_INT 99999
56378: ST_TO_ADDR
// for i in points do
56379: LD_ADDR_VAR 0 4
56383: PUSH
56384: LD_VAR 0 2
56388: PUSH
56389: FOR_IN
56390: IFFALSE 56459
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56392: LD_ADDR_VAR 0 6
56396: PUSH
56397: LD_VAR 0 1
56401: PPUSH
56402: LD_VAR 0 4
56406: PUSH
56407: LD_INT 1
56409: ARRAY
56410: PPUSH
56411: LD_VAR 0 4
56415: PUSH
56416: LD_INT 2
56418: ARRAY
56419: PPUSH
56420: CALL_OW 297
56424: ST_TO_ADDR
// if tmpDist < dist then
56425: LD_VAR 0 6
56429: PUSH
56430: LD_VAR 0 5
56434: LESS
56435: IFFALSE 56457
// begin result := i ;
56437: LD_ADDR_VAR 0 3
56441: PUSH
56442: LD_VAR 0 4
56446: ST_TO_ADDR
// dist := tmpDist ;
56447: LD_ADDR_VAR 0 5
56451: PUSH
56452: LD_VAR 0 6
56456: ST_TO_ADDR
// end ; end ;
56457: GO 56389
56459: POP
56460: POP
// end ;
56461: LD_VAR 0 3
56465: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56466: LD_INT 0
56468: PPUSH
// uc_side := side ;
56469: LD_ADDR_OWVAR 20
56473: PUSH
56474: LD_VAR 0 1
56478: ST_TO_ADDR
// uc_nation := 3 ;
56479: LD_ADDR_OWVAR 21
56483: PUSH
56484: LD_INT 3
56486: ST_TO_ADDR
// vc_chassis := 25 ;
56487: LD_ADDR_OWVAR 37
56491: PUSH
56492: LD_INT 25
56494: ST_TO_ADDR
// vc_engine := engine_siberite ;
56495: LD_ADDR_OWVAR 39
56499: PUSH
56500: LD_INT 3
56502: ST_TO_ADDR
// vc_control := control_computer ;
56503: LD_ADDR_OWVAR 38
56507: PUSH
56508: LD_INT 3
56510: ST_TO_ADDR
// vc_weapon := 59 ;
56511: LD_ADDR_OWVAR 40
56515: PUSH
56516: LD_INT 59
56518: ST_TO_ADDR
// result := CreateVehicle ;
56519: LD_ADDR_VAR 0 5
56523: PUSH
56524: CALL_OW 45
56528: ST_TO_ADDR
// SetDir ( result , d ) ;
56529: LD_VAR 0 5
56533: PPUSH
56534: LD_VAR 0 4
56538: PPUSH
56539: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56543: LD_VAR 0 5
56547: PPUSH
56548: LD_VAR 0 2
56552: PPUSH
56553: LD_VAR 0 3
56557: PPUSH
56558: LD_INT 0
56560: PPUSH
56561: CALL_OW 48
// end ;
56565: LD_VAR 0 5
56569: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56570: LD_INT 0
56572: PPUSH
56573: PPUSH
56574: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56575: LD_ADDR_VAR 0 2
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56598: LD_VAR 0 1
56602: NOT
56603: PUSH
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 264
56613: PUSH
56614: LD_INT 12
56616: PUSH
56617: LD_INT 51
56619: PUSH
56620: LD_INT 32
56622: PUSH
56623: LD_INT 89
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: IN
56632: NOT
56633: OR
56634: IFFALSE 56638
// exit ;
56636: GO 56736
// for i := 1 to 3 do
56638: LD_ADDR_VAR 0 3
56642: PUSH
56643: DOUBLE
56644: LD_INT 1
56646: DEC
56647: ST_TO_ADDR
56648: LD_INT 3
56650: PUSH
56651: FOR_TO
56652: IFFALSE 56734
// begin tmp := GetCargo ( cargo , i ) ;
56654: LD_ADDR_VAR 0 4
56658: PUSH
56659: LD_VAR 0 1
56663: PPUSH
56664: LD_VAR 0 3
56668: PPUSH
56669: CALL_OW 289
56673: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56674: LD_ADDR_VAR 0 2
56678: PUSH
56679: LD_VAR 0 2
56683: PPUSH
56684: LD_VAR 0 3
56688: PPUSH
56689: LD_VAR 0 4
56693: PPUSH
56694: CALL_OW 1
56698: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56699: LD_ADDR_VAR 0 2
56703: PUSH
56704: LD_VAR 0 2
56708: PPUSH
56709: LD_INT 4
56711: PPUSH
56712: LD_VAR 0 2
56716: PUSH
56717: LD_INT 4
56719: ARRAY
56720: PUSH
56721: LD_VAR 0 4
56725: PLUS
56726: PPUSH
56727: CALL_OW 1
56731: ST_TO_ADDR
// end ;
56732: GO 56651
56734: POP
56735: POP
// end ;
56736: LD_VAR 0 2
56740: RET
// export function Length ( array ) ; begin
56741: LD_INT 0
56743: PPUSH
// result := array + 0 ;
56744: LD_ADDR_VAR 0 2
56748: PUSH
56749: LD_VAR 0 1
56753: PUSH
56754: LD_INT 0
56756: PLUS
56757: ST_TO_ADDR
// end ;
56758: LD_VAR 0 2
56762: RET
// export function PrepareArray ( array ) ; begin
56763: LD_INT 0
56765: PPUSH
// result := array diff 0 ;
56766: LD_ADDR_VAR 0 2
56770: PUSH
56771: LD_VAR 0 1
56775: PUSH
56776: LD_INT 0
56778: DIFF
56779: ST_TO_ADDR
// if not result [ 1 ] then
56780: LD_VAR 0 2
56784: PUSH
56785: LD_INT 1
56787: ARRAY
56788: NOT
56789: IFFALSE 56809
// result := Delete ( result , 1 ) ;
56791: LD_ADDR_VAR 0 2
56795: PUSH
56796: LD_VAR 0 2
56800: PPUSH
56801: LD_INT 1
56803: PPUSH
56804: CALL_OW 3
56808: ST_TO_ADDR
// end ;
56809: LD_VAR 0 2
56813: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56814: LD_INT 0
56816: PPUSH
56817: PPUSH
56818: PPUSH
56819: PPUSH
// sibRocketRange := 25 ;
56820: LD_ADDR_VAR 0 6
56824: PUSH
56825: LD_INT 25
56827: ST_TO_ADDR
// result := false ;
56828: LD_ADDR_VAR 0 4
56832: PUSH
56833: LD_INT 0
56835: ST_TO_ADDR
// for i := 0 to 5 do
56836: LD_ADDR_VAR 0 5
56840: PUSH
56841: DOUBLE
56842: LD_INT 0
56844: DEC
56845: ST_TO_ADDR
56846: LD_INT 5
56848: PUSH
56849: FOR_TO
56850: IFFALSE 56917
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56852: LD_VAR 0 1
56856: PPUSH
56857: LD_VAR 0 5
56861: PPUSH
56862: LD_VAR 0 6
56866: PPUSH
56867: CALL_OW 272
56871: PPUSH
56872: LD_VAR 0 2
56876: PPUSH
56877: LD_VAR 0 5
56881: PPUSH
56882: LD_VAR 0 6
56886: PPUSH
56887: CALL_OW 273
56891: PPUSH
56892: LD_VAR 0 3
56896: PPUSH
56897: CALL_OW 309
56901: IFFALSE 56915
// begin result := true ;
56903: LD_ADDR_VAR 0 4
56907: PUSH
56908: LD_INT 1
56910: ST_TO_ADDR
// exit ;
56911: POP
56912: POP
56913: GO 56919
// end ;
56915: GO 56849
56917: POP
56918: POP
// end ;
56919: LD_VAR 0 4
56923: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56924: LD_INT 0
56926: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56927: LD_VAR 0 1
56931: PPUSH
56932: LD_VAR 0 2
56936: PPUSH
56937: LD_INT 0
56939: PPUSH
56940: LD_INT 0
56942: PPUSH
56943: LD_INT 1
56945: PPUSH
56946: LD_INT 0
56948: PPUSH
56949: CALL_OW 587
// end ;
56953: LD_VAR 0 3
56957: RET
// export function CenterOnNow ( unit ) ; begin
56958: LD_INT 0
56960: PPUSH
// result := IsInUnit ( unit ) ;
56961: LD_ADDR_VAR 0 2
56965: PUSH
56966: LD_VAR 0 1
56970: PPUSH
56971: CALL_OW 310
56975: ST_TO_ADDR
// if not result then
56976: LD_VAR 0 2
56980: NOT
56981: IFFALSE 56993
// result := unit ;
56983: LD_ADDR_VAR 0 2
56987: PUSH
56988: LD_VAR 0 1
56992: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56993: LD_VAR 0 1
56997: PPUSH
56998: CALL_OW 87
// end ;
57002: LD_VAR 0 2
57006: RET
// export function ComMoveHex ( unit , hex ) ; begin
57007: LD_INT 0
57009: PPUSH
// if not hex then
57010: LD_VAR 0 2
57014: NOT
57015: IFFALSE 57019
// exit ;
57017: GO 57072
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57019: LD_VAR 0 2
57023: PUSH
57024: LD_INT 1
57026: ARRAY
57027: PPUSH
57028: LD_VAR 0 2
57032: PUSH
57033: LD_INT 2
57035: ARRAY
57036: PPUSH
57037: CALL_OW 428
57041: IFFALSE 57045
// exit ;
57043: GO 57072
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57045: LD_VAR 0 1
57049: PPUSH
57050: LD_VAR 0 2
57054: PUSH
57055: LD_INT 1
57057: ARRAY
57058: PPUSH
57059: LD_VAR 0 2
57063: PUSH
57064: LD_INT 2
57066: ARRAY
57067: PPUSH
57068: CALL_OW 111
// end ;
57072: LD_VAR 0 3
57076: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57077: LD_INT 0
57079: PPUSH
57080: PPUSH
57081: PPUSH
// if not unit or not enemy then
57082: LD_VAR 0 1
57086: NOT
57087: PUSH
57088: LD_VAR 0 2
57092: NOT
57093: OR
57094: IFFALSE 57098
// exit ;
57096: GO 57222
// x := GetX ( enemy ) ;
57098: LD_ADDR_VAR 0 4
57102: PUSH
57103: LD_VAR 0 2
57107: PPUSH
57108: CALL_OW 250
57112: ST_TO_ADDR
// y := GetY ( enemy ) ;
57113: LD_ADDR_VAR 0 5
57117: PUSH
57118: LD_VAR 0 2
57122: PPUSH
57123: CALL_OW 251
57127: ST_TO_ADDR
// if ValidHex ( x , y ) then
57128: LD_VAR 0 4
57132: PPUSH
57133: LD_VAR 0 5
57137: PPUSH
57138: CALL_OW 488
57142: IFFALSE 57222
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
57144: LD_VAR 0 2
57148: PPUSH
57149: CALL_OW 247
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: IN
57164: PUSH
57165: LD_VAR 0 1
57169: PPUSH
57170: CALL_OW 255
57174: PPUSH
57175: LD_VAR 0 2
57179: PPUSH
57180: CALL_OW 292
57184: AND
57185: IFFALSE 57203
// ComAttackUnit ( unit , enemy ) else
57187: LD_VAR 0 1
57191: PPUSH
57192: LD_VAR 0 2
57196: PPUSH
57197: CALL_OW 115
57201: GO 57222
// ComAgressiveMove ( unit , x , y ) ;
57203: LD_VAR 0 1
57207: PPUSH
57208: LD_VAR 0 4
57212: PPUSH
57213: LD_VAR 0 5
57217: PPUSH
57218: CALL_OW 114
// end ; end_of_file
57222: LD_VAR 0 3
57226: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57227: LD_VAR 0 1
57231: PUSH
57232: LD_INT 200
57234: DOUBLE
57235: GREATEREQUAL
57236: IFFALSE 57244
57238: LD_INT 299
57240: DOUBLE
57241: LESSEQUAL
57242: IFTRUE 57246
57244: GO 57278
57246: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57247: LD_VAR 0 1
57251: PPUSH
57252: LD_VAR 0 2
57256: PPUSH
57257: LD_VAR 0 3
57261: PPUSH
57262: LD_VAR 0 4
57266: PPUSH
57267: LD_VAR 0 5
57271: PPUSH
57272: CALL 57766 0 5
57276: GO 57355
57278: LD_INT 300
57280: DOUBLE
57281: GREATEREQUAL
57282: IFFALSE 57290
57284: LD_INT 399
57286: DOUBLE
57287: LESSEQUAL
57288: IFTRUE 57292
57290: GO 57354
57292: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57293: LD_VAR 0 1
57297: PPUSH
57298: LD_VAR 0 2
57302: PPUSH
57303: LD_VAR 0 3
57307: PPUSH
57308: LD_VAR 0 4
57312: PPUSH
57313: LD_VAR 0 5
57317: PPUSH
57318: LD_VAR 0 6
57322: PPUSH
57323: LD_VAR 0 7
57327: PPUSH
57328: LD_VAR 0 8
57332: PPUSH
57333: LD_VAR 0 9
57337: PPUSH
57338: LD_VAR 0 10
57342: PPUSH
57343: LD_VAR 0 11
57347: PPUSH
57348: CALL 74182 0 11
57352: GO 57355
57354: POP
// end ;
57355: PPOPN 11
57357: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57358: LD_VAR 0 1
57362: PPUSH
57363: LD_VAR 0 2
57367: PPUSH
57368: LD_VAR 0 3
57372: PPUSH
57373: LD_VAR 0 4
57377: PPUSH
57378: LD_VAR 0 5
57382: PPUSH
57383: CALL 57502 0 5
// end ; end_of_file
57387: PPOPN 5
57389: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57390: LD_INT 0
57392: PPUSH
57393: PPUSH
57394: PPUSH
57395: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57396: LD_VAR 0 1
57400: PPUSH
57401: CALL_OW 264
57405: PUSH
57406: LD_INT 91
57408: EQUAL
57409: IFFALSE 57481
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57411: LD_INT 68
57413: PPUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 255
57423: PPUSH
57424: CALL_OW 321
57428: PUSH
57429: LD_INT 2
57431: EQUAL
57432: IFFALSE 57444
// eff := 70 else
57434: LD_ADDR_VAR 0 4
57438: PUSH
57439: LD_INT 70
57441: ST_TO_ADDR
57442: GO 57452
// eff := 30 ;
57444: LD_ADDR_VAR 0 4
57448: PUSH
57449: LD_INT 30
57451: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57452: LD_VAR 0 1
57456: PPUSH
57457: CALL_OW 250
57461: PPUSH
57462: LD_VAR 0 1
57466: PPUSH
57467: CALL_OW 251
57471: PPUSH
57472: LD_VAR 0 4
57476: PPUSH
57477: CALL_OW 495
// end ; end ;
57481: LD_VAR 0 2
57485: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57486: LD_INT 0
57488: PPUSH
// end ;
57489: LD_VAR 0 4
57493: RET
// export function SOS_Command ( cmd ) ; begin
57494: LD_INT 0
57496: PPUSH
// end ;
57497: LD_VAR 0 2
57501: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57502: LD_INT 0
57504: PPUSH
// end ;
57505: LD_VAR 0 6
57509: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57510: LD_INT 0
57512: PPUSH
57513: PPUSH
// if not vehicle or not factory then
57514: LD_VAR 0 1
57518: NOT
57519: PUSH
57520: LD_VAR 0 2
57524: NOT
57525: OR
57526: IFFALSE 57530
// exit ;
57528: GO 57761
// if factoryWaypoints >= factory then
57530: LD_EXP 104
57534: PUSH
57535: LD_VAR 0 2
57539: GREATEREQUAL
57540: IFFALSE 57761
// if factoryWaypoints [ factory ] then
57542: LD_EXP 104
57546: PUSH
57547: LD_VAR 0 2
57551: ARRAY
57552: IFFALSE 57761
// begin if GetControl ( vehicle ) = control_manual then
57554: LD_VAR 0 1
57558: PPUSH
57559: CALL_OW 263
57563: PUSH
57564: LD_INT 1
57566: EQUAL
57567: IFFALSE 57648
// begin driver := IsDrivenBy ( vehicle ) ;
57569: LD_ADDR_VAR 0 4
57573: PUSH
57574: LD_VAR 0 1
57578: PPUSH
57579: CALL_OW 311
57583: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57584: LD_VAR 0 4
57588: PPUSH
57589: LD_EXP 104
57593: PUSH
57594: LD_VAR 0 2
57598: ARRAY
57599: PUSH
57600: LD_INT 3
57602: ARRAY
57603: PPUSH
57604: LD_EXP 104
57608: PUSH
57609: LD_VAR 0 2
57613: ARRAY
57614: PUSH
57615: LD_INT 4
57617: ARRAY
57618: PPUSH
57619: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57623: LD_VAR 0 4
57627: PPUSH
57628: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57632: LD_VAR 0 4
57636: PPUSH
57637: LD_VAR 0 2
57641: PPUSH
57642: CALL_OW 180
// end else
57646: GO 57761
// if GetControl ( vehicle ) = control_remote then
57648: LD_VAR 0 1
57652: PPUSH
57653: CALL_OW 263
57657: PUSH
57658: LD_INT 2
57660: EQUAL
57661: IFFALSE 57722
// begin wait ( 0 0$2 ) ;
57663: LD_INT 70
57665: PPUSH
57666: CALL_OW 67
// if Connect ( vehicle ) then
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL 23624 0 1
57679: IFFALSE 57720
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57681: LD_VAR 0 1
57685: PPUSH
57686: LD_EXP 104
57690: PUSH
57691: LD_VAR 0 2
57695: ARRAY
57696: PUSH
57697: LD_INT 3
57699: ARRAY
57700: PPUSH
57701: LD_EXP 104
57705: PUSH
57706: LD_VAR 0 2
57710: ARRAY
57711: PUSH
57712: LD_INT 4
57714: ARRAY
57715: PPUSH
57716: CALL_OW 171
// end else
57720: GO 57761
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57722: LD_VAR 0 1
57726: PPUSH
57727: LD_EXP 104
57731: PUSH
57732: LD_VAR 0 2
57736: ARRAY
57737: PUSH
57738: LD_INT 3
57740: ARRAY
57741: PPUSH
57742: LD_EXP 104
57746: PUSH
57747: LD_VAR 0 2
57751: ARRAY
57752: PUSH
57753: LD_INT 4
57755: ARRAY
57756: PPUSH
57757: CALL_OW 171
// end ; end ;
57761: LD_VAR 0 3
57765: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57766: LD_INT 0
57768: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57769: LD_VAR 0 1
57773: PUSH
57774: LD_INT 250
57776: EQUAL
57777: PUSH
57778: LD_VAR 0 2
57782: PPUSH
57783: CALL_OW 264
57787: PUSH
57788: LD_INT 81
57790: EQUAL
57791: AND
57792: IFFALSE 57813
// MinerPlaceMine ( unit , x , y ) ;
57794: LD_VAR 0 2
57798: PPUSH
57799: LD_VAR 0 4
57803: PPUSH
57804: LD_VAR 0 5
57808: PPUSH
57809: CALL 60198 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57813: LD_VAR 0 1
57817: PUSH
57818: LD_INT 251
57820: EQUAL
57821: PUSH
57822: LD_VAR 0 2
57826: PPUSH
57827: CALL_OW 264
57831: PUSH
57832: LD_INT 81
57834: EQUAL
57835: AND
57836: IFFALSE 57857
// MinerDetonateMine ( unit , x , y ) ;
57838: LD_VAR 0 2
57842: PPUSH
57843: LD_VAR 0 4
57847: PPUSH
57848: LD_VAR 0 5
57852: PPUSH
57853: CALL 60473 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57857: LD_VAR 0 1
57861: PUSH
57862: LD_INT 252
57864: EQUAL
57865: PUSH
57866: LD_VAR 0 2
57870: PPUSH
57871: CALL_OW 264
57875: PUSH
57876: LD_INT 81
57878: EQUAL
57879: AND
57880: IFFALSE 57901
// MinerCreateMinefield ( unit , x , y ) ;
57882: LD_VAR 0 2
57886: PPUSH
57887: LD_VAR 0 4
57891: PPUSH
57892: LD_VAR 0 5
57896: PPUSH
57897: CALL 60890 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57901: LD_VAR 0 1
57905: PUSH
57906: LD_INT 253
57908: EQUAL
57909: PUSH
57910: LD_VAR 0 2
57914: PPUSH
57915: CALL_OW 257
57919: PUSH
57920: LD_INT 5
57922: EQUAL
57923: AND
57924: IFFALSE 57945
// ComBinocular ( unit , x , y ) ;
57926: LD_VAR 0 2
57930: PPUSH
57931: LD_VAR 0 4
57935: PPUSH
57936: LD_VAR 0 5
57940: PPUSH
57941: CALL 61259 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57945: LD_VAR 0 1
57949: PUSH
57950: LD_INT 254
57952: EQUAL
57953: PUSH
57954: LD_VAR 0 2
57958: PPUSH
57959: CALL_OW 264
57963: PUSH
57964: LD_INT 99
57966: EQUAL
57967: AND
57968: PUSH
57969: LD_VAR 0 3
57973: PPUSH
57974: CALL_OW 263
57978: PUSH
57979: LD_INT 3
57981: EQUAL
57982: AND
57983: IFFALSE 57999
// HackDestroyVehicle ( unit , selectedUnit ) ;
57985: LD_VAR 0 2
57989: PPUSH
57990: LD_VAR 0 3
57994: PPUSH
57995: CALL 59562 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57999: LD_VAR 0 1
58003: PUSH
58004: LD_INT 255
58006: EQUAL
58007: PUSH
58008: LD_VAR 0 2
58012: PPUSH
58013: CALL_OW 264
58017: PUSH
58018: LD_INT 14
58020: PUSH
58021: LD_INT 53
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: IN
58028: AND
58029: PUSH
58030: LD_VAR 0 4
58034: PPUSH
58035: LD_VAR 0 5
58039: PPUSH
58040: CALL_OW 488
58044: AND
58045: IFFALSE 58069
// CutTreeXYR ( unit , x , y , 12 ) ;
58047: LD_VAR 0 2
58051: PPUSH
58052: LD_VAR 0 4
58056: PPUSH
58057: LD_VAR 0 5
58061: PPUSH
58062: LD_INT 12
58064: PPUSH
58065: CALL 58132 0 4
// if cmd = 256 then
58069: LD_VAR 0 1
58073: PUSH
58074: LD_INT 256
58076: EQUAL
58077: IFFALSE 58098
// SetFactoryWaypoint ( unit , x , y ) ;
58079: LD_VAR 0 2
58083: PPUSH
58084: LD_VAR 0 4
58088: PPUSH
58089: LD_VAR 0 5
58093: PPUSH
58094: CALL 76170 0 3
// if cmd = 257 then
58098: LD_VAR 0 1
58102: PUSH
58103: LD_INT 257
58105: EQUAL
58106: IFFALSE 58127
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58108: LD_VAR 0 2
58112: PPUSH
58113: LD_VAR 0 4
58117: PPUSH
58118: LD_VAR 0 5
58122: PPUSH
58123: CALL 76532 0 3
// end ;
58127: LD_VAR 0 6
58131: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58132: LD_INT 0
58134: PPUSH
58135: PPUSH
58136: PPUSH
58137: PPUSH
58138: PPUSH
58139: PPUSH
58140: PPUSH
58141: PPUSH
58142: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58143: LD_VAR 0 1
58147: NOT
58148: PUSH
58149: LD_VAR 0 2
58153: PPUSH
58154: LD_VAR 0 3
58158: PPUSH
58159: CALL_OW 488
58163: NOT
58164: OR
58165: PUSH
58166: LD_VAR 0 4
58170: NOT
58171: OR
58172: IFFALSE 58176
// exit ;
58174: GO 58516
// list := [ ] ;
58176: LD_ADDR_VAR 0 13
58180: PUSH
58181: EMPTY
58182: ST_TO_ADDR
// if x - r < 0 then
58183: LD_VAR 0 2
58187: PUSH
58188: LD_VAR 0 4
58192: MINUS
58193: PUSH
58194: LD_INT 0
58196: LESS
58197: IFFALSE 58209
// min_x := 0 else
58199: LD_ADDR_VAR 0 7
58203: PUSH
58204: LD_INT 0
58206: ST_TO_ADDR
58207: GO 58225
// min_x := x - r ;
58209: LD_ADDR_VAR 0 7
58213: PUSH
58214: LD_VAR 0 2
58218: PUSH
58219: LD_VAR 0 4
58223: MINUS
58224: ST_TO_ADDR
// if y - r < 0 then
58225: LD_VAR 0 3
58229: PUSH
58230: LD_VAR 0 4
58234: MINUS
58235: PUSH
58236: LD_INT 0
58238: LESS
58239: IFFALSE 58251
// min_y := 0 else
58241: LD_ADDR_VAR 0 8
58245: PUSH
58246: LD_INT 0
58248: ST_TO_ADDR
58249: GO 58267
// min_y := y - r ;
58251: LD_ADDR_VAR 0 8
58255: PUSH
58256: LD_VAR 0 3
58260: PUSH
58261: LD_VAR 0 4
58265: MINUS
58266: ST_TO_ADDR
// max_x := x + r ;
58267: LD_ADDR_VAR 0 9
58271: PUSH
58272: LD_VAR 0 2
58276: PUSH
58277: LD_VAR 0 4
58281: PLUS
58282: ST_TO_ADDR
// max_y := y + r ;
58283: LD_ADDR_VAR 0 10
58287: PUSH
58288: LD_VAR 0 3
58292: PUSH
58293: LD_VAR 0 4
58297: PLUS
58298: ST_TO_ADDR
// for _x = min_x to max_x do
58299: LD_ADDR_VAR 0 11
58303: PUSH
58304: DOUBLE
58305: LD_VAR 0 7
58309: DEC
58310: ST_TO_ADDR
58311: LD_VAR 0 9
58315: PUSH
58316: FOR_TO
58317: IFFALSE 58434
// for _y = min_y to max_y do
58319: LD_ADDR_VAR 0 12
58323: PUSH
58324: DOUBLE
58325: LD_VAR 0 8
58329: DEC
58330: ST_TO_ADDR
58331: LD_VAR 0 10
58335: PUSH
58336: FOR_TO
58337: IFFALSE 58430
// begin if not ValidHex ( _x , _y ) then
58339: LD_VAR 0 11
58343: PPUSH
58344: LD_VAR 0 12
58348: PPUSH
58349: CALL_OW 488
58353: NOT
58354: IFFALSE 58358
// continue ;
58356: GO 58336
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58358: LD_VAR 0 11
58362: PPUSH
58363: LD_VAR 0 12
58367: PPUSH
58368: CALL_OW 351
58372: PUSH
58373: LD_VAR 0 11
58377: PPUSH
58378: LD_VAR 0 12
58382: PPUSH
58383: CALL_OW 554
58387: AND
58388: IFFALSE 58428
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58390: LD_ADDR_VAR 0 13
58394: PUSH
58395: LD_VAR 0 13
58399: PPUSH
58400: LD_VAR 0 13
58404: PUSH
58405: LD_INT 1
58407: PLUS
58408: PPUSH
58409: LD_VAR 0 11
58413: PUSH
58414: LD_VAR 0 12
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PPUSH
58423: CALL_OW 2
58427: ST_TO_ADDR
// end ;
58428: GO 58336
58430: POP
58431: POP
58432: GO 58316
58434: POP
58435: POP
// if not list then
58436: LD_VAR 0 13
58440: NOT
58441: IFFALSE 58445
// exit ;
58443: GO 58516
// for i in list do
58445: LD_ADDR_VAR 0 6
58449: PUSH
58450: LD_VAR 0 13
58454: PUSH
58455: FOR_IN
58456: IFFALSE 58514
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58458: LD_VAR 0 1
58462: PPUSH
58463: LD_STRING M
58465: PUSH
58466: LD_VAR 0 6
58470: PUSH
58471: LD_INT 1
58473: ARRAY
58474: PUSH
58475: LD_VAR 0 6
58479: PUSH
58480: LD_INT 2
58482: ARRAY
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: PUSH
58505: EMPTY
58506: LIST
58507: PPUSH
58508: CALL_OW 447
58512: GO 58455
58514: POP
58515: POP
// end ;
58516: LD_VAR 0 5
58520: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58521: LD_EXP 35
58525: NOT
58526: IFFALSE 58576
58528: GO 58530
58530: DISABLE
// begin initHack := true ;
58531: LD_ADDR_EXP 35
58535: PUSH
58536: LD_INT 1
58538: ST_TO_ADDR
// hackTanks := [ ] ;
58539: LD_ADDR_EXP 36
58543: PUSH
58544: EMPTY
58545: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58546: LD_ADDR_EXP 37
58550: PUSH
58551: EMPTY
58552: ST_TO_ADDR
// hackLimit := 3 ;
58553: LD_ADDR_EXP 38
58557: PUSH
58558: LD_INT 3
58560: ST_TO_ADDR
// hackDist := 12 ;
58561: LD_ADDR_EXP 39
58565: PUSH
58566: LD_INT 12
58568: ST_TO_ADDR
// hackCounter := [ ] ;
58569: LD_ADDR_EXP 40
58573: PUSH
58574: EMPTY
58575: ST_TO_ADDR
// end ;
58576: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58577: LD_EXP 35
58581: PUSH
58582: LD_INT 34
58584: PUSH
58585: LD_INT 99
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PPUSH
58592: CALL_OW 69
58596: AND
58597: IFFALSE 58850
58599: GO 58601
58601: DISABLE
58602: LD_INT 0
58604: PPUSH
58605: PPUSH
// begin enable ;
58606: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58607: LD_ADDR_VAR 0 1
58611: PUSH
58612: LD_INT 34
58614: PUSH
58615: LD_INT 99
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PPUSH
58622: CALL_OW 69
58626: PUSH
58627: FOR_IN
58628: IFFALSE 58848
// begin if not i in hackTanks then
58630: LD_VAR 0 1
58634: PUSH
58635: LD_EXP 36
58639: IN
58640: NOT
58641: IFFALSE 58724
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58643: LD_ADDR_EXP 36
58647: PUSH
58648: LD_EXP 36
58652: PPUSH
58653: LD_EXP 36
58657: PUSH
58658: LD_INT 1
58660: PLUS
58661: PPUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: CALL_OW 1
58671: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58672: LD_ADDR_EXP 37
58676: PUSH
58677: LD_EXP 37
58681: PPUSH
58682: LD_EXP 37
58686: PUSH
58687: LD_INT 1
58689: PLUS
58690: PPUSH
58691: EMPTY
58692: PPUSH
58693: CALL_OW 1
58697: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58698: LD_ADDR_EXP 40
58702: PUSH
58703: LD_EXP 40
58707: PPUSH
58708: LD_EXP 40
58712: PUSH
58713: LD_INT 1
58715: PLUS
58716: PPUSH
58717: EMPTY
58718: PPUSH
58719: CALL_OW 1
58723: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL_OW 302
58733: NOT
58734: IFFALSE 58747
// begin HackUnlinkAll ( i ) ;
58736: LD_VAR 0 1
58740: PPUSH
58741: CALL 58853 0 1
// continue ;
58745: GO 58627
// end ; HackCheckCapturedStatus ( i ) ;
58747: LD_VAR 0 1
58751: PPUSH
58752: CALL 59296 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58756: LD_ADDR_VAR 0 2
58760: PUSH
58761: LD_INT 81
58763: PUSH
58764: LD_VAR 0 1
58768: PPUSH
58769: CALL_OW 255
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 33
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 91
58790: PUSH
58791: LD_VAR 0 1
58795: PUSH
58796: LD_EXP 39
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 50
58808: PUSH
58809: EMPTY
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: PPUSH
58818: CALL_OW 69
58822: ST_TO_ADDR
// if not tmp then
58823: LD_VAR 0 2
58827: NOT
58828: IFFALSE 58832
// continue ;
58830: GO 58627
// HackLink ( i , tmp ) ;
58832: LD_VAR 0 1
58836: PPUSH
58837: LD_VAR 0 2
58841: PPUSH
58842: CALL 58989 0 2
// end ;
58846: GO 58627
58848: POP
58849: POP
// end ;
58850: PPOPN 2
58852: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58853: LD_INT 0
58855: PPUSH
58856: PPUSH
58857: PPUSH
// if not hack in hackTanks then
58858: LD_VAR 0 1
58862: PUSH
58863: LD_EXP 36
58867: IN
58868: NOT
58869: IFFALSE 58873
// exit ;
58871: GO 58984
// index := GetElementIndex ( hackTanks , hack ) ;
58873: LD_ADDR_VAR 0 4
58877: PUSH
58878: LD_EXP 36
58882: PPUSH
58883: LD_VAR 0 1
58887: PPUSH
58888: CALL 20431 0 2
58892: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58893: LD_EXP 37
58897: PUSH
58898: LD_VAR 0 4
58902: ARRAY
58903: IFFALSE 58984
// begin for i in hackTanksCaptured [ index ] do
58905: LD_ADDR_VAR 0 3
58909: PUSH
58910: LD_EXP 37
58914: PUSH
58915: LD_VAR 0 4
58919: ARRAY
58920: PUSH
58921: FOR_IN
58922: IFFALSE 58948
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58924: LD_VAR 0 3
58928: PUSH
58929: LD_INT 1
58931: ARRAY
58932: PPUSH
58933: LD_VAR 0 3
58937: PUSH
58938: LD_INT 2
58940: ARRAY
58941: PPUSH
58942: CALL_OW 235
58946: GO 58921
58948: POP
58949: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58950: LD_ADDR_EXP 37
58954: PUSH
58955: LD_EXP 37
58959: PPUSH
58960: LD_VAR 0 4
58964: PPUSH
58965: EMPTY
58966: PPUSH
58967: CALL_OW 1
58971: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58972: LD_VAR 0 1
58976: PPUSH
58977: LD_INT 0
58979: PPUSH
58980: CALL_OW 505
// end ; end ;
58984: LD_VAR 0 2
58988: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58989: LD_INT 0
58991: PPUSH
58992: PPUSH
58993: PPUSH
// if not hack in hackTanks or not vehicles then
58994: LD_VAR 0 1
58998: PUSH
58999: LD_EXP 36
59003: IN
59004: NOT
59005: PUSH
59006: LD_VAR 0 2
59010: NOT
59011: OR
59012: IFFALSE 59016
// exit ;
59014: GO 59291
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59016: LD_ADDR_VAR 0 2
59020: PUSH
59021: LD_VAR 0 1
59025: PPUSH
59026: LD_VAR 0 2
59030: PPUSH
59031: LD_INT 1
59033: PPUSH
59034: LD_INT 1
59036: PPUSH
59037: CALL 21081 0 4
59041: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59042: LD_ADDR_VAR 0 5
59046: PUSH
59047: LD_EXP 36
59051: PPUSH
59052: LD_VAR 0 1
59056: PPUSH
59057: CALL 20431 0 2
59061: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59062: LD_EXP 37
59066: PUSH
59067: LD_VAR 0 5
59071: ARRAY
59072: PUSH
59073: LD_EXP 38
59077: LESS
59078: IFFALSE 59267
// begin for i := 1 to vehicles do
59080: LD_ADDR_VAR 0 4
59084: PUSH
59085: DOUBLE
59086: LD_INT 1
59088: DEC
59089: ST_TO_ADDR
59090: LD_VAR 0 2
59094: PUSH
59095: FOR_TO
59096: IFFALSE 59265
// begin if hackTanksCaptured [ index ] = hackLimit then
59098: LD_EXP 37
59102: PUSH
59103: LD_VAR 0 5
59107: ARRAY
59108: PUSH
59109: LD_EXP 38
59113: EQUAL
59114: IFFALSE 59118
// break ;
59116: GO 59265
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59118: LD_ADDR_EXP 40
59122: PUSH
59123: LD_EXP 40
59127: PPUSH
59128: LD_VAR 0 5
59132: PPUSH
59133: LD_EXP 40
59137: PUSH
59138: LD_VAR 0 5
59142: ARRAY
59143: PUSH
59144: LD_INT 1
59146: PLUS
59147: PPUSH
59148: CALL_OW 1
59152: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59153: LD_ADDR_EXP 37
59157: PUSH
59158: LD_EXP 37
59162: PPUSH
59163: LD_VAR 0 5
59167: PUSH
59168: LD_EXP 37
59172: PUSH
59173: LD_VAR 0 5
59177: ARRAY
59178: PUSH
59179: LD_INT 1
59181: PLUS
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PPUSH
59187: LD_VAR 0 2
59191: PUSH
59192: LD_VAR 0 4
59196: ARRAY
59197: PUSH
59198: LD_VAR 0 2
59202: PUSH
59203: LD_VAR 0 4
59207: ARRAY
59208: PPUSH
59209: CALL_OW 255
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PPUSH
59218: CALL 20646 0 3
59222: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59223: LD_VAR 0 2
59227: PUSH
59228: LD_VAR 0 4
59232: ARRAY
59233: PPUSH
59234: LD_VAR 0 1
59238: PPUSH
59239: CALL_OW 255
59243: PPUSH
59244: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59248: LD_VAR 0 2
59252: PUSH
59253: LD_VAR 0 4
59257: ARRAY
59258: PPUSH
59259: CALL_OW 141
// end ;
59263: GO 59095
59265: POP
59266: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59267: LD_VAR 0 1
59271: PPUSH
59272: LD_EXP 37
59276: PUSH
59277: LD_VAR 0 5
59281: ARRAY
59282: PUSH
59283: LD_INT 0
59285: PLUS
59286: PPUSH
59287: CALL_OW 505
// end ;
59291: LD_VAR 0 3
59295: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59296: LD_INT 0
59298: PPUSH
59299: PPUSH
59300: PPUSH
59301: PPUSH
// if not hack in hackTanks then
59302: LD_VAR 0 1
59306: PUSH
59307: LD_EXP 36
59311: IN
59312: NOT
59313: IFFALSE 59317
// exit ;
59315: GO 59557
// index := GetElementIndex ( hackTanks , hack ) ;
59317: LD_ADDR_VAR 0 4
59321: PUSH
59322: LD_EXP 36
59326: PPUSH
59327: LD_VAR 0 1
59331: PPUSH
59332: CALL 20431 0 2
59336: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59337: LD_ADDR_VAR 0 3
59341: PUSH
59342: DOUBLE
59343: LD_EXP 37
59347: PUSH
59348: LD_VAR 0 4
59352: ARRAY
59353: INC
59354: ST_TO_ADDR
59355: LD_INT 1
59357: PUSH
59358: FOR_DOWNTO
59359: IFFALSE 59531
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59361: LD_ADDR_VAR 0 5
59365: PUSH
59366: LD_EXP 37
59370: PUSH
59371: LD_VAR 0 4
59375: ARRAY
59376: PUSH
59377: LD_VAR 0 3
59381: ARRAY
59382: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59383: LD_VAR 0 5
59387: PUSH
59388: LD_INT 1
59390: ARRAY
59391: PPUSH
59392: CALL_OW 302
59396: NOT
59397: PUSH
59398: LD_VAR 0 5
59402: PUSH
59403: LD_INT 1
59405: ARRAY
59406: PPUSH
59407: CALL_OW 255
59411: PUSH
59412: LD_VAR 0 1
59416: PPUSH
59417: CALL_OW 255
59421: NONEQUAL
59422: OR
59423: IFFALSE 59529
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59425: LD_VAR 0 5
59429: PUSH
59430: LD_INT 1
59432: ARRAY
59433: PPUSH
59434: CALL_OW 305
59438: PUSH
59439: LD_VAR 0 5
59443: PUSH
59444: LD_INT 1
59446: ARRAY
59447: PPUSH
59448: CALL_OW 255
59452: PUSH
59453: LD_VAR 0 1
59457: PPUSH
59458: CALL_OW 255
59462: EQUAL
59463: AND
59464: IFFALSE 59488
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59466: LD_VAR 0 5
59470: PUSH
59471: LD_INT 1
59473: ARRAY
59474: PPUSH
59475: LD_VAR 0 5
59479: PUSH
59480: LD_INT 2
59482: ARRAY
59483: PPUSH
59484: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59488: LD_ADDR_EXP 37
59492: PUSH
59493: LD_EXP 37
59497: PPUSH
59498: LD_VAR 0 4
59502: PPUSH
59503: LD_EXP 37
59507: PUSH
59508: LD_VAR 0 4
59512: ARRAY
59513: PPUSH
59514: LD_VAR 0 3
59518: PPUSH
59519: CALL_OW 3
59523: PPUSH
59524: CALL_OW 1
59528: ST_TO_ADDR
// end ; end ;
59529: GO 59358
59531: POP
59532: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59533: LD_VAR 0 1
59537: PPUSH
59538: LD_EXP 37
59542: PUSH
59543: LD_VAR 0 4
59547: ARRAY
59548: PUSH
59549: LD_INT 0
59551: PLUS
59552: PPUSH
59553: CALL_OW 505
// end ;
59557: LD_VAR 0 2
59561: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59562: LD_INT 0
59564: PPUSH
59565: PPUSH
59566: PPUSH
59567: PPUSH
// if not hack in hackTanks then
59568: LD_VAR 0 1
59572: PUSH
59573: LD_EXP 36
59577: IN
59578: NOT
59579: IFFALSE 59583
// exit ;
59581: GO 59668
// index := GetElementIndex ( hackTanks , hack ) ;
59583: LD_ADDR_VAR 0 5
59587: PUSH
59588: LD_EXP 36
59592: PPUSH
59593: LD_VAR 0 1
59597: PPUSH
59598: CALL 20431 0 2
59602: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59603: LD_ADDR_VAR 0 4
59607: PUSH
59608: DOUBLE
59609: LD_INT 1
59611: DEC
59612: ST_TO_ADDR
59613: LD_EXP 37
59617: PUSH
59618: LD_VAR 0 5
59622: ARRAY
59623: PUSH
59624: FOR_TO
59625: IFFALSE 59666
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59627: LD_EXP 37
59631: PUSH
59632: LD_VAR 0 5
59636: ARRAY
59637: PUSH
59638: LD_VAR 0 4
59642: ARRAY
59643: PUSH
59644: LD_INT 1
59646: ARRAY
59647: PUSH
59648: LD_VAR 0 2
59652: EQUAL
59653: IFFALSE 59664
// KillUnit ( vehicle ) ;
59655: LD_VAR 0 2
59659: PPUSH
59660: CALL_OW 66
59664: GO 59624
59666: POP
59667: POP
// end ;
59668: LD_VAR 0 3
59672: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59673: LD_EXP 41
59677: NOT
59678: IFFALSE 59713
59680: GO 59682
59682: DISABLE
// begin initMiner := true ;
59683: LD_ADDR_EXP 41
59687: PUSH
59688: LD_INT 1
59690: ST_TO_ADDR
// minersList := [ ] ;
59691: LD_ADDR_EXP 42
59695: PUSH
59696: EMPTY
59697: ST_TO_ADDR
// minerMinesList := [ ] ;
59698: LD_ADDR_EXP 43
59702: PUSH
59703: EMPTY
59704: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59705: LD_ADDR_EXP 44
59709: PUSH
59710: LD_INT 5
59712: ST_TO_ADDR
// end ;
59713: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59714: LD_EXP 41
59718: PUSH
59719: LD_INT 34
59721: PUSH
59722: LD_INT 81
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PPUSH
59729: CALL_OW 69
59733: AND
59734: IFFALSE 60195
59736: GO 59738
59738: DISABLE
59739: LD_INT 0
59741: PPUSH
59742: PPUSH
59743: PPUSH
59744: PPUSH
// begin enable ;
59745: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59746: LD_ADDR_VAR 0 1
59750: PUSH
59751: LD_INT 34
59753: PUSH
59754: LD_INT 81
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PPUSH
59761: CALL_OW 69
59765: PUSH
59766: FOR_IN
59767: IFFALSE 59839
// begin if not i in minersList then
59769: LD_VAR 0 1
59773: PUSH
59774: LD_EXP 42
59778: IN
59779: NOT
59780: IFFALSE 59837
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59782: LD_ADDR_EXP 42
59786: PUSH
59787: LD_EXP 42
59791: PPUSH
59792: LD_EXP 42
59796: PUSH
59797: LD_INT 1
59799: PLUS
59800: PPUSH
59801: LD_VAR 0 1
59805: PPUSH
59806: CALL_OW 1
59810: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59811: LD_ADDR_EXP 43
59815: PUSH
59816: LD_EXP 43
59820: PPUSH
59821: LD_EXP 43
59825: PUSH
59826: LD_INT 1
59828: PLUS
59829: PPUSH
59830: EMPTY
59831: PPUSH
59832: CALL_OW 1
59836: ST_TO_ADDR
// end end ;
59837: GO 59766
59839: POP
59840: POP
// for i := minerMinesList downto 1 do
59841: LD_ADDR_VAR 0 1
59845: PUSH
59846: DOUBLE
59847: LD_EXP 43
59851: INC
59852: ST_TO_ADDR
59853: LD_INT 1
59855: PUSH
59856: FOR_DOWNTO
59857: IFFALSE 60193
// begin if IsLive ( minersList [ i ] ) then
59859: LD_EXP 42
59863: PUSH
59864: LD_VAR 0 1
59868: ARRAY
59869: PPUSH
59870: CALL_OW 300
59874: IFFALSE 59902
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59876: LD_EXP 42
59880: PUSH
59881: LD_VAR 0 1
59885: ARRAY
59886: PPUSH
59887: LD_EXP 43
59891: PUSH
59892: LD_VAR 0 1
59896: ARRAY
59897: PPUSH
59898: CALL_OW 505
// if not minerMinesList [ i ] then
59902: LD_EXP 43
59906: PUSH
59907: LD_VAR 0 1
59911: ARRAY
59912: NOT
59913: IFFALSE 59917
// continue ;
59915: GO 59856
// for j := minerMinesList [ i ] downto 1 do
59917: LD_ADDR_VAR 0 2
59921: PUSH
59922: DOUBLE
59923: LD_EXP 43
59927: PUSH
59928: LD_VAR 0 1
59932: ARRAY
59933: INC
59934: ST_TO_ADDR
59935: LD_INT 1
59937: PUSH
59938: FOR_DOWNTO
59939: IFFALSE 60189
// begin side := GetSide ( minersList [ i ] ) ;
59941: LD_ADDR_VAR 0 3
59945: PUSH
59946: LD_EXP 42
59950: PUSH
59951: LD_VAR 0 1
59955: ARRAY
59956: PPUSH
59957: CALL_OW 255
59961: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59962: LD_ADDR_VAR 0 4
59966: PUSH
59967: LD_EXP 43
59971: PUSH
59972: LD_VAR 0 1
59976: ARRAY
59977: PUSH
59978: LD_VAR 0 2
59982: ARRAY
59983: PUSH
59984: LD_INT 1
59986: ARRAY
59987: PPUSH
59988: LD_EXP 43
59992: PUSH
59993: LD_VAR 0 1
59997: ARRAY
59998: PUSH
59999: LD_VAR 0 2
60003: ARRAY
60004: PUSH
60005: LD_INT 2
60007: ARRAY
60008: PPUSH
60009: CALL_OW 428
60013: ST_TO_ADDR
// if not tmp then
60014: LD_VAR 0 4
60018: NOT
60019: IFFALSE 60023
// continue ;
60021: GO 59938
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60023: LD_VAR 0 4
60027: PUSH
60028: LD_INT 81
60030: PUSH
60031: LD_VAR 0 3
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PPUSH
60040: CALL_OW 69
60044: IN
60045: PUSH
60046: LD_EXP 43
60050: PUSH
60051: LD_VAR 0 1
60055: ARRAY
60056: PUSH
60057: LD_VAR 0 2
60061: ARRAY
60062: PUSH
60063: LD_INT 1
60065: ARRAY
60066: PPUSH
60067: LD_EXP 43
60071: PUSH
60072: LD_VAR 0 1
60076: ARRAY
60077: PUSH
60078: LD_VAR 0 2
60082: ARRAY
60083: PUSH
60084: LD_INT 2
60086: ARRAY
60087: PPUSH
60088: CALL_OW 458
60092: AND
60093: IFFALSE 60187
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60095: LD_EXP 43
60099: PUSH
60100: LD_VAR 0 1
60104: ARRAY
60105: PUSH
60106: LD_VAR 0 2
60110: ARRAY
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PPUSH
60116: LD_EXP 43
60120: PUSH
60121: LD_VAR 0 1
60125: ARRAY
60126: PUSH
60127: LD_VAR 0 2
60131: ARRAY
60132: PUSH
60133: LD_INT 2
60135: ARRAY
60136: PPUSH
60137: LD_VAR 0 3
60141: PPUSH
60142: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60146: LD_ADDR_EXP 43
60150: PUSH
60151: LD_EXP 43
60155: PPUSH
60156: LD_VAR 0 1
60160: PPUSH
60161: LD_EXP 43
60165: PUSH
60166: LD_VAR 0 1
60170: ARRAY
60171: PPUSH
60172: LD_VAR 0 2
60176: PPUSH
60177: CALL_OW 3
60181: PPUSH
60182: CALL_OW 1
60186: ST_TO_ADDR
// end ; end ;
60187: GO 59938
60189: POP
60190: POP
// end ;
60191: GO 59856
60193: POP
60194: POP
// end ;
60195: PPOPN 4
60197: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60198: LD_INT 0
60200: PPUSH
60201: PPUSH
// result := false ;
60202: LD_ADDR_VAR 0 4
60206: PUSH
60207: LD_INT 0
60209: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60210: LD_VAR 0 1
60214: PPUSH
60215: CALL_OW 264
60219: PUSH
60220: LD_INT 81
60222: EQUAL
60223: NOT
60224: IFFALSE 60228
// exit ;
60226: GO 60468
// index := GetElementIndex ( minersList , unit ) ;
60228: LD_ADDR_VAR 0 5
60232: PUSH
60233: LD_EXP 42
60237: PPUSH
60238: LD_VAR 0 1
60242: PPUSH
60243: CALL 20431 0 2
60247: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60248: LD_EXP 43
60252: PUSH
60253: LD_VAR 0 5
60257: ARRAY
60258: PUSH
60259: LD_EXP 44
60263: GREATEREQUAL
60264: IFFALSE 60268
// exit ;
60266: GO 60468
// ComMoveXY ( unit , x , y ) ;
60268: LD_VAR 0 1
60272: PPUSH
60273: LD_VAR 0 2
60277: PPUSH
60278: LD_VAR 0 3
60282: PPUSH
60283: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60287: LD_INT 35
60289: PPUSH
60290: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60294: LD_VAR 0 1
60298: PPUSH
60299: LD_VAR 0 2
60303: PPUSH
60304: LD_VAR 0 3
60308: PPUSH
60309: CALL 51815 0 3
60313: NOT
60314: PUSH
60315: LD_VAR 0 1
60319: PPUSH
60320: CALL_OW 314
60324: AND
60325: IFFALSE 60329
// exit ;
60327: GO 60468
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60329: LD_VAR 0 2
60333: PPUSH
60334: LD_VAR 0 3
60338: PPUSH
60339: CALL_OW 428
60343: PUSH
60344: LD_VAR 0 1
60348: EQUAL
60349: PUSH
60350: LD_VAR 0 1
60354: PPUSH
60355: CALL_OW 314
60359: NOT
60360: AND
60361: IFFALSE 60287
// PlaySoundXY ( x , y , PlantMine ) ;
60363: LD_VAR 0 2
60367: PPUSH
60368: LD_VAR 0 3
60372: PPUSH
60373: LD_STRING PlantMine
60375: PPUSH
60376: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60380: LD_VAR 0 2
60384: PPUSH
60385: LD_VAR 0 3
60389: PPUSH
60390: LD_VAR 0 1
60394: PPUSH
60395: CALL_OW 255
60399: PPUSH
60400: LD_INT 0
60402: PPUSH
60403: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60407: LD_ADDR_EXP 43
60411: PUSH
60412: LD_EXP 43
60416: PPUSH
60417: LD_VAR 0 5
60421: PUSH
60422: LD_EXP 43
60426: PUSH
60427: LD_VAR 0 5
60431: ARRAY
60432: PUSH
60433: LD_INT 1
60435: PLUS
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PPUSH
60441: LD_VAR 0 2
60445: PUSH
60446: LD_VAR 0 3
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PPUSH
60455: CALL 20646 0 3
60459: ST_TO_ADDR
// result := true ;
60460: LD_ADDR_VAR 0 4
60464: PUSH
60465: LD_INT 1
60467: ST_TO_ADDR
// end ;
60468: LD_VAR 0 4
60472: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60473: LD_INT 0
60475: PPUSH
60476: PPUSH
60477: PPUSH
// if not unit in minersList then
60478: LD_VAR 0 1
60482: PUSH
60483: LD_EXP 42
60487: IN
60488: NOT
60489: IFFALSE 60493
// exit ;
60491: GO 60885
// index := GetElementIndex ( minersList , unit ) ;
60493: LD_ADDR_VAR 0 6
60497: PUSH
60498: LD_EXP 42
60502: PPUSH
60503: LD_VAR 0 1
60507: PPUSH
60508: CALL 20431 0 2
60512: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60513: LD_ADDR_VAR 0 5
60517: PUSH
60518: DOUBLE
60519: LD_EXP 43
60523: PUSH
60524: LD_VAR 0 6
60528: ARRAY
60529: INC
60530: ST_TO_ADDR
60531: LD_INT 1
60533: PUSH
60534: FOR_DOWNTO
60535: IFFALSE 60696
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60537: LD_EXP 43
60541: PUSH
60542: LD_VAR 0 6
60546: ARRAY
60547: PUSH
60548: LD_VAR 0 5
60552: ARRAY
60553: PUSH
60554: LD_INT 1
60556: ARRAY
60557: PUSH
60558: LD_VAR 0 2
60562: EQUAL
60563: PUSH
60564: LD_EXP 43
60568: PUSH
60569: LD_VAR 0 6
60573: ARRAY
60574: PUSH
60575: LD_VAR 0 5
60579: ARRAY
60580: PUSH
60581: LD_INT 2
60583: ARRAY
60584: PUSH
60585: LD_VAR 0 3
60589: EQUAL
60590: AND
60591: IFFALSE 60694
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60593: LD_EXP 43
60597: PUSH
60598: LD_VAR 0 6
60602: ARRAY
60603: PUSH
60604: LD_VAR 0 5
60608: ARRAY
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: PPUSH
60614: LD_EXP 43
60618: PUSH
60619: LD_VAR 0 6
60623: ARRAY
60624: PUSH
60625: LD_VAR 0 5
60629: ARRAY
60630: PUSH
60631: LD_INT 2
60633: ARRAY
60634: PPUSH
60635: LD_VAR 0 1
60639: PPUSH
60640: CALL_OW 255
60644: PPUSH
60645: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60649: LD_ADDR_EXP 43
60653: PUSH
60654: LD_EXP 43
60658: PPUSH
60659: LD_VAR 0 6
60663: PPUSH
60664: LD_EXP 43
60668: PUSH
60669: LD_VAR 0 6
60673: ARRAY
60674: PPUSH
60675: LD_VAR 0 5
60679: PPUSH
60680: CALL_OW 3
60684: PPUSH
60685: CALL_OW 1
60689: ST_TO_ADDR
// exit ;
60690: POP
60691: POP
60692: GO 60885
// end ; end ;
60694: GO 60534
60696: POP
60697: POP
// for i := minerMinesList [ index ] downto 1 do
60698: LD_ADDR_VAR 0 5
60702: PUSH
60703: DOUBLE
60704: LD_EXP 43
60708: PUSH
60709: LD_VAR 0 6
60713: ARRAY
60714: INC
60715: ST_TO_ADDR
60716: LD_INT 1
60718: PUSH
60719: FOR_DOWNTO
60720: IFFALSE 60883
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60722: LD_EXP 43
60726: PUSH
60727: LD_VAR 0 6
60731: ARRAY
60732: PUSH
60733: LD_VAR 0 5
60737: ARRAY
60738: PUSH
60739: LD_INT 1
60741: ARRAY
60742: PPUSH
60743: LD_EXP 43
60747: PUSH
60748: LD_VAR 0 6
60752: ARRAY
60753: PUSH
60754: LD_VAR 0 5
60758: ARRAY
60759: PUSH
60760: LD_INT 2
60762: ARRAY
60763: PPUSH
60764: LD_VAR 0 2
60768: PPUSH
60769: LD_VAR 0 3
60773: PPUSH
60774: CALL_OW 298
60778: PUSH
60779: LD_INT 6
60781: LESS
60782: IFFALSE 60881
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60784: LD_EXP 43
60788: PUSH
60789: LD_VAR 0 6
60793: ARRAY
60794: PUSH
60795: LD_VAR 0 5
60799: ARRAY
60800: PUSH
60801: LD_INT 1
60803: ARRAY
60804: PPUSH
60805: LD_EXP 43
60809: PUSH
60810: LD_VAR 0 6
60814: ARRAY
60815: PUSH
60816: LD_VAR 0 5
60820: ARRAY
60821: PUSH
60822: LD_INT 2
60824: ARRAY
60825: PPUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: CALL_OW 255
60835: PPUSH
60836: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60840: LD_ADDR_EXP 43
60844: PUSH
60845: LD_EXP 43
60849: PPUSH
60850: LD_VAR 0 6
60854: PPUSH
60855: LD_EXP 43
60859: PUSH
60860: LD_VAR 0 6
60864: ARRAY
60865: PPUSH
60866: LD_VAR 0 5
60870: PPUSH
60871: CALL_OW 3
60875: PPUSH
60876: CALL_OW 1
60880: ST_TO_ADDR
// end ; end ;
60881: GO 60719
60883: POP
60884: POP
// end ;
60885: LD_VAR 0 4
60889: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60890: LD_INT 0
60892: PPUSH
60893: PPUSH
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
60898: PPUSH
60899: PPUSH
60900: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60901: LD_VAR 0 1
60905: PPUSH
60906: CALL_OW 264
60910: PUSH
60911: LD_INT 81
60913: EQUAL
60914: NOT
60915: PUSH
60916: LD_VAR 0 1
60920: PUSH
60921: LD_EXP 42
60925: IN
60926: NOT
60927: OR
60928: IFFALSE 60932
// exit ;
60930: GO 61254
// index := GetElementIndex ( minersList , unit ) ;
60932: LD_ADDR_VAR 0 6
60936: PUSH
60937: LD_EXP 42
60941: PPUSH
60942: LD_VAR 0 1
60946: PPUSH
60947: CALL 20431 0 2
60951: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60952: LD_ADDR_VAR 0 8
60956: PUSH
60957: LD_EXP 44
60961: PUSH
60962: LD_EXP 43
60966: PUSH
60967: LD_VAR 0 6
60971: ARRAY
60972: MINUS
60973: ST_TO_ADDR
// if not minesFreeAmount then
60974: LD_VAR 0 8
60978: NOT
60979: IFFALSE 60983
// exit ;
60981: GO 61254
// tmp := [ ] ;
60983: LD_ADDR_VAR 0 7
60987: PUSH
60988: EMPTY
60989: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60990: LD_ADDR_VAR 0 5
60994: PUSH
60995: DOUBLE
60996: LD_INT 1
60998: DEC
60999: ST_TO_ADDR
61000: LD_VAR 0 8
61004: PUSH
61005: FOR_TO
61006: IFFALSE 61201
// begin _d := rand ( 0 , 5 ) ;
61008: LD_ADDR_VAR 0 11
61012: PUSH
61013: LD_INT 0
61015: PPUSH
61016: LD_INT 5
61018: PPUSH
61019: CALL_OW 12
61023: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61024: LD_ADDR_VAR 0 12
61028: PUSH
61029: LD_INT 2
61031: PPUSH
61032: LD_INT 6
61034: PPUSH
61035: CALL_OW 12
61039: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61040: LD_ADDR_VAR 0 9
61044: PUSH
61045: LD_VAR 0 2
61049: PPUSH
61050: LD_VAR 0 11
61054: PPUSH
61055: LD_VAR 0 12
61059: PPUSH
61060: CALL_OW 272
61064: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61065: LD_ADDR_VAR 0 10
61069: PUSH
61070: LD_VAR 0 3
61074: PPUSH
61075: LD_VAR 0 11
61079: PPUSH
61080: LD_VAR 0 12
61084: PPUSH
61085: CALL_OW 273
61089: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61090: LD_VAR 0 9
61094: PPUSH
61095: LD_VAR 0 10
61099: PPUSH
61100: CALL_OW 488
61104: PUSH
61105: LD_VAR 0 9
61109: PUSH
61110: LD_VAR 0 10
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_VAR 0 7
61123: IN
61124: NOT
61125: AND
61126: PUSH
61127: LD_VAR 0 9
61131: PPUSH
61132: LD_VAR 0 10
61136: PPUSH
61137: CALL_OW 458
61141: NOT
61142: AND
61143: IFFALSE 61185
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61145: LD_ADDR_VAR 0 7
61149: PUSH
61150: LD_VAR 0 7
61154: PPUSH
61155: LD_VAR 0 7
61159: PUSH
61160: LD_INT 1
61162: PLUS
61163: PPUSH
61164: LD_VAR 0 9
61168: PUSH
61169: LD_VAR 0 10
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PPUSH
61178: CALL_OW 1
61182: ST_TO_ADDR
61183: GO 61199
// i := i - 1 ;
61185: LD_ADDR_VAR 0 5
61189: PUSH
61190: LD_VAR 0 5
61194: PUSH
61195: LD_INT 1
61197: MINUS
61198: ST_TO_ADDR
// end ;
61199: GO 61005
61201: POP
61202: POP
// for i in tmp do
61203: LD_ADDR_VAR 0 5
61207: PUSH
61208: LD_VAR 0 7
61212: PUSH
61213: FOR_IN
61214: IFFALSE 61252
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61216: LD_VAR 0 1
61220: PPUSH
61221: LD_VAR 0 5
61225: PUSH
61226: LD_INT 1
61228: ARRAY
61229: PPUSH
61230: LD_VAR 0 5
61234: PUSH
61235: LD_INT 2
61237: ARRAY
61238: PPUSH
61239: CALL 60198 0 3
61243: NOT
61244: IFFALSE 61250
// exit ;
61246: POP
61247: POP
61248: GO 61254
61250: GO 61213
61252: POP
61253: POP
// end ;
61254: LD_VAR 0 4
61258: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61259: LD_INT 0
61261: PPUSH
61262: PPUSH
61263: PPUSH
61264: PPUSH
61265: PPUSH
61266: PPUSH
61267: PPUSH
// if not GetClass ( unit ) = class_sniper then
61268: LD_VAR 0 1
61272: PPUSH
61273: CALL_OW 257
61277: PUSH
61278: LD_INT 5
61280: EQUAL
61281: NOT
61282: IFFALSE 61286
// exit ;
61284: GO 61674
// dist := 8 ;
61286: LD_ADDR_VAR 0 5
61290: PUSH
61291: LD_INT 8
61293: ST_TO_ADDR
// viewRange := 12 ;
61294: LD_ADDR_VAR 0 7
61298: PUSH
61299: LD_INT 12
61301: ST_TO_ADDR
// side := GetSide ( unit ) ;
61302: LD_ADDR_VAR 0 6
61306: PUSH
61307: LD_VAR 0 1
61311: PPUSH
61312: CALL_OW 255
61316: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61317: LD_INT 61
61319: PPUSH
61320: LD_VAR 0 6
61324: PPUSH
61325: CALL_OW 321
61329: PUSH
61330: LD_INT 2
61332: EQUAL
61333: IFFALSE 61343
// viewRange := 16 ;
61335: LD_ADDR_VAR 0 7
61339: PUSH
61340: LD_INT 16
61342: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61343: LD_VAR 0 1
61347: PPUSH
61348: LD_VAR 0 2
61352: PPUSH
61353: LD_VAR 0 3
61357: PPUSH
61358: CALL_OW 297
61362: PUSH
61363: LD_VAR 0 5
61367: GREATER
61368: IFFALSE 61447
// begin ComMoveXY ( unit , x , y ) ;
61370: LD_VAR 0 1
61374: PPUSH
61375: LD_VAR 0 2
61379: PPUSH
61380: LD_VAR 0 3
61384: PPUSH
61385: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61389: LD_INT 35
61391: PPUSH
61392: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61396: LD_VAR 0 1
61400: PPUSH
61401: LD_VAR 0 2
61405: PPUSH
61406: LD_VAR 0 3
61410: PPUSH
61411: CALL 51815 0 3
61415: NOT
61416: IFFALSE 61420
// exit ;
61418: GO 61674
// until GetDistUnitXY ( unit , x , y ) < dist ;
61420: LD_VAR 0 1
61424: PPUSH
61425: LD_VAR 0 2
61429: PPUSH
61430: LD_VAR 0 3
61434: PPUSH
61435: CALL_OW 297
61439: PUSH
61440: LD_VAR 0 5
61444: LESS
61445: IFFALSE 61389
// end ; ComTurnXY ( unit , x , y ) ;
61447: LD_VAR 0 1
61451: PPUSH
61452: LD_VAR 0 2
61456: PPUSH
61457: LD_VAR 0 3
61461: PPUSH
61462: CALL_OW 118
// wait ( 5 ) ;
61466: LD_INT 5
61468: PPUSH
61469: CALL_OW 67
// _d := GetDir ( unit ) ;
61473: LD_ADDR_VAR 0 10
61477: PUSH
61478: LD_VAR 0 1
61482: PPUSH
61483: CALL_OW 254
61487: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61488: LD_ADDR_VAR 0 8
61492: PUSH
61493: LD_VAR 0 1
61497: PPUSH
61498: CALL_OW 250
61502: PPUSH
61503: LD_VAR 0 10
61507: PPUSH
61508: LD_VAR 0 5
61512: PPUSH
61513: CALL_OW 272
61517: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61518: LD_ADDR_VAR 0 9
61522: PUSH
61523: LD_VAR 0 1
61527: PPUSH
61528: CALL_OW 251
61532: PPUSH
61533: LD_VAR 0 10
61537: PPUSH
61538: LD_VAR 0 5
61542: PPUSH
61543: CALL_OW 273
61547: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61548: LD_VAR 0 8
61552: PPUSH
61553: LD_VAR 0 9
61557: PPUSH
61558: CALL_OW 488
61562: NOT
61563: IFFALSE 61567
// exit ;
61565: GO 61674
// ComAnimCustom ( unit , 1 ) ;
61567: LD_VAR 0 1
61571: PPUSH
61572: LD_INT 1
61574: PPUSH
61575: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61579: LD_VAR 0 8
61583: PPUSH
61584: LD_VAR 0 9
61588: PPUSH
61589: LD_VAR 0 6
61593: PPUSH
61594: LD_VAR 0 7
61598: PPUSH
61599: CALL_OW 330
// repeat wait ( 1 ) ;
61603: LD_INT 1
61605: PPUSH
61606: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61610: LD_VAR 0 1
61614: PPUSH
61615: CALL_OW 316
61619: PUSH
61620: LD_VAR 0 1
61624: PPUSH
61625: CALL_OW 314
61629: OR
61630: PUSH
61631: LD_VAR 0 1
61635: PPUSH
61636: CALL_OW 302
61640: NOT
61641: OR
61642: PUSH
61643: LD_VAR 0 1
61647: PPUSH
61648: CALL_OW 301
61652: OR
61653: IFFALSE 61603
// RemoveSeeing ( _x , _y , side ) ;
61655: LD_VAR 0 8
61659: PPUSH
61660: LD_VAR 0 9
61664: PPUSH
61665: LD_VAR 0 6
61669: PPUSH
61670: CALL_OW 331
// end ; end_of_file
61674: LD_VAR 0 4
61678: RET
// export globalGameSaveCounter ; every 0 0$1 do
61679: GO 61681
61681: DISABLE
// begin enable ;
61682: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61683: LD_STRING updateTimer(
61685: PUSH
61686: LD_OWVAR 1
61690: STR
61691: PUSH
61692: LD_STRING );
61694: STR
61695: PPUSH
61696: CALL_OW 559
// end ;
61700: END
// every 0 0$1 do
61701: GO 61703
61703: DISABLE
// begin globalGameSaveCounter := 0 ;
61704: LD_ADDR_EXP 45
61708: PUSH
61709: LD_INT 0
61711: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61712: LD_STRING setGameSaveCounter(0)
61714: PPUSH
61715: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61719: LD_STRING initStreamRollete();
61721: PPUSH
61722: CALL_OW 559
// InitStreamMode ;
61726: CALL 63052 0 0
// DefineStreamItems ( false ) ;
61730: LD_INT 0
61732: PPUSH
61733: CALL 63516 0 1
// end ;
61737: END
// export function SOS_MapStart ( ) ; begin
61738: LD_INT 0
61740: PPUSH
// if streamModeActive then
61741: LD_EXP 46
61745: IFFALSE 61754
// DefineStreamItems ( true ) ;
61747: LD_INT 1
61749: PPUSH
61750: CALL 63516 0 1
// UpdateLuaVariables ( ) ;
61754: CALL 61771 0 0
// UpdateFactoryWaypoints ( ) ;
61758: CALL 76385 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61762: CALL 76642 0 0
// end ;
61766: LD_VAR 0 1
61770: RET
// function UpdateLuaVariables ( ) ; begin
61771: LD_INT 0
61773: PPUSH
// if globalGameSaveCounter then
61774: LD_EXP 45
61778: IFFALSE 61812
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61780: LD_ADDR_EXP 45
61784: PUSH
61785: LD_EXP 45
61789: PPUSH
61790: CALL 54366 0 1
61794: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61795: LD_STRING setGameSaveCounter(
61797: PUSH
61798: LD_EXP 45
61802: STR
61803: PUSH
61804: LD_STRING )
61806: STR
61807: PPUSH
61808: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61812: LD_STRING setGameDifficulty(
61814: PUSH
61815: LD_OWVAR 67
61819: STR
61820: PUSH
61821: LD_STRING )
61823: STR
61824: PPUSH
61825: CALL_OW 559
// end ;
61829: LD_VAR 0 1
61833: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61834: LD_INT 0
61836: PPUSH
// if p2 = stream_mode then
61837: LD_VAR 0 2
61841: PUSH
61842: LD_INT 100
61844: EQUAL
61845: IFFALSE 62848
// begin if not StreamModeActive then
61847: LD_EXP 46
61851: NOT
61852: IFFALSE 61862
// StreamModeActive := true ;
61854: LD_ADDR_EXP 46
61858: PUSH
61859: LD_INT 1
61861: ST_TO_ADDR
// if p3 = 0 then
61862: LD_VAR 0 3
61866: PUSH
61867: LD_INT 0
61869: EQUAL
61870: IFFALSE 61876
// InitStreamMode ;
61872: CALL 63052 0 0
// if p3 = 1 then
61876: LD_VAR 0 3
61880: PUSH
61881: LD_INT 1
61883: EQUAL
61884: IFFALSE 61894
// sRocket := true ;
61886: LD_ADDR_EXP 51
61890: PUSH
61891: LD_INT 1
61893: ST_TO_ADDR
// if p3 = 2 then
61894: LD_VAR 0 3
61898: PUSH
61899: LD_INT 2
61901: EQUAL
61902: IFFALSE 61912
// sSpeed := true ;
61904: LD_ADDR_EXP 50
61908: PUSH
61909: LD_INT 1
61911: ST_TO_ADDR
// if p3 = 3 then
61912: LD_VAR 0 3
61916: PUSH
61917: LD_INT 3
61919: EQUAL
61920: IFFALSE 61930
// sEngine := true ;
61922: LD_ADDR_EXP 52
61926: PUSH
61927: LD_INT 1
61929: ST_TO_ADDR
// if p3 = 4 then
61930: LD_VAR 0 3
61934: PUSH
61935: LD_INT 4
61937: EQUAL
61938: IFFALSE 61948
// sSpec := true ;
61940: LD_ADDR_EXP 49
61944: PUSH
61945: LD_INT 1
61947: ST_TO_ADDR
// if p3 = 5 then
61948: LD_VAR 0 3
61952: PUSH
61953: LD_INT 5
61955: EQUAL
61956: IFFALSE 61966
// sLevel := true ;
61958: LD_ADDR_EXP 53
61962: PUSH
61963: LD_INT 1
61965: ST_TO_ADDR
// if p3 = 6 then
61966: LD_VAR 0 3
61970: PUSH
61971: LD_INT 6
61973: EQUAL
61974: IFFALSE 61984
// sArmoury := true ;
61976: LD_ADDR_EXP 54
61980: PUSH
61981: LD_INT 1
61983: ST_TO_ADDR
// if p3 = 7 then
61984: LD_VAR 0 3
61988: PUSH
61989: LD_INT 7
61991: EQUAL
61992: IFFALSE 62002
// sRadar := true ;
61994: LD_ADDR_EXP 55
61998: PUSH
61999: LD_INT 1
62001: ST_TO_ADDR
// if p3 = 8 then
62002: LD_VAR 0 3
62006: PUSH
62007: LD_INT 8
62009: EQUAL
62010: IFFALSE 62020
// sBunker := true ;
62012: LD_ADDR_EXP 56
62016: PUSH
62017: LD_INT 1
62019: ST_TO_ADDR
// if p3 = 9 then
62020: LD_VAR 0 3
62024: PUSH
62025: LD_INT 9
62027: EQUAL
62028: IFFALSE 62038
// sHack := true ;
62030: LD_ADDR_EXP 57
62034: PUSH
62035: LD_INT 1
62037: ST_TO_ADDR
// if p3 = 10 then
62038: LD_VAR 0 3
62042: PUSH
62043: LD_INT 10
62045: EQUAL
62046: IFFALSE 62056
// sFire := true ;
62048: LD_ADDR_EXP 58
62052: PUSH
62053: LD_INT 1
62055: ST_TO_ADDR
// if p3 = 11 then
62056: LD_VAR 0 3
62060: PUSH
62061: LD_INT 11
62063: EQUAL
62064: IFFALSE 62074
// sRefresh := true ;
62066: LD_ADDR_EXP 59
62070: PUSH
62071: LD_INT 1
62073: ST_TO_ADDR
// if p3 = 12 then
62074: LD_VAR 0 3
62078: PUSH
62079: LD_INT 12
62081: EQUAL
62082: IFFALSE 62092
// sExp := true ;
62084: LD_ADDR_EXP 60
62088: PUSH
62089: LD_INT 1
62091: ST_TO_ADDR
// if p3 = 13 then
62092: LD_VAR 0 3
62096: PUSH
62097: LD_INT 13
62099: EQUAL
62100: IFFALSE 62110
// sDepot := true ;
62102: LD_ADDR_EXP 61
62106: PUSH
62107: LD_INT 1
62109: ST_TO_ADDR
// if p3 = 14 then
62110: LD_VAR 0 3
62114: PUSH
62115: LD_INT 14
62117: EQUAL
62118: IFFALSE 62128
// sFlag := true ;
62120: LD_ADDR_EXP 62
62124: PUSH
62125: LD_INT 1
62127: ST_TO_ADDR
// if p3 = 15 then
62128: LD_VAR 0 3
62132: PUSH
62133: LD_INT 15
62135: EQUAL
62136: IFFALSE 62146
// sKamikadze := true ;
62138: LD_ADDR_EXP 70
62142: PUSH
62143: LD_INT 1
62145: ST_TO_ADDR
// if p3 = 16 then
62146: LD_VAR 0 3
62150: PUSH
62151: LD_INT 16
62153: EQUAL
62154: IFFALSE 62164
// sTroll := true ;
62156: LD_ADDR_EXP 71
62160: PUSH
62161: LD_INT 1
62163: ST_TO_ADDR
// if p3 = 17 then
62164: LD_VAR 0 3
62168: PUSH
62169: LD_INT 17
62171: EQUAL
62172: IFFALSE 62182
// sSlow := true ;
62174: LD_ADDR_EXP 72
62178: PUSH
62179: LD_INT 1
62181: ST_TO_ADDR
// if p3 = 18 then
62182: LD_VAR 0 3
62186: PUSH
62187: LD_INT 18
62189: EQUAL
62190: IFFALSE 62200
// sLack := true ;
62192: LD_ADDR_EXP 73
62196: PUSH
62197: LD_INT 1
62199: ST_TO_ADDR
// if p3 = 19 then
62200: LD_VAR 0 3
62204: PUSH
62205: LD_INT 19
62207: EQUAL
62208: IFFALSE 62218
// sTank := true ;
62210: LD_ADDR_EXP 75
62214: PUSH
62215: LD_INT 1
62217: ST_TO_ADDR
// if p3 = 20 then
62218: LD_VAR 0 3
62222: PUSH
62223: LD_INT 20
62225: EQUAL
62226: IFFALSE 62236
// sRemote := true ;
62228: LD_ADDR_EXP 76
62232: PUSH
62233: LD_INT 1
62235: ST_TO_ADDR
// if p3 = 21 then
62236: LD_VAR 0 3
62240: PUSH
62241: LD_INT 21
62243: EQUAL
62244: IFFALSE 62254
// sPowell := true ;
62246: LD_ADDR_EXP 77
62250: PUSH
62251: LD_INT 1
62253: ST_TO_ADDR
// if p3 = 22 then
62254: LD_VAR 0 3
62258: PUSH
62259: LD_INT 22
62261: EQUAL
62262: IFFALSE 62272
// sTeleport := true ;
62264: LD_ADDR_EXP 80
62268: PUSH
62269: LD_INT 1
62271: ST_TO_ADDR
// if p3 = 23 then
62272: LD_VAR 0 3
62276: PUSH
62277: LD_INT 23
62279: EQUAL
62280: IFFALSE 62290
// sOilTower := true ;
62282: LD_ADDR_EXP 82
62286: PUSH
62287: LD_INT 1
62289: ST_TO_ADDR
// if p3 = 24 then
62290: LD_VAR 0 3
62294: PUSH
62295: LD_INT 24
62297: EQUAL
62298: IFFALSE 62308
// sShovel := true ;
62300: LD_ADDR_EXP 83
62304: PUSH
62305: LD_INT 1
62307: ST_TO_ADDR
// if p3 = 25 then
62308: LD_VAR 0 3
62312: PUSH
62313: LD_INT 25
62315: EQUAL
62316: IFFALSE 62326
// sSheik := true ;
62318: LD_ADDR_EXP 84
62322: PUSH
62323: LD_INT 1
62325: ST_TO_ADDR
// if p3 = 26 then
62326: LD_VAR 0 3
62330: PUSH
62331: LD_INT 26
62333: EQUAL
62334: IFFALSE 62344
// sEarthquake := true ;
62336: LD_ADDR_EXP 86
62340: PUSH
62341: LD_INT 1
62343: ST_TO_ADDR
// if p3 = 27 then
62344: LD_VAR 0 3
62348: PUSH
62349: LD_INT 27
62351: EQUAL
62352: IFFALSE 62362
// sAI := true ;
62354: LD_ADDR_EXP 87
62358: PUSH
62359: LD_INT 1
62361: ST_TO_ADDR
// if p3 = 28 then
62362: LD_VAR 0 3
62366: PUSH
62367: LD_INT 28
62369: EQUAL
62370: IFFALSE 62380
// sCargo := true ;
62372: LD_ADDR_EXP 90
62376: PUSH
62377: LD_INT 1
62379: ST_TO_ADDR
// if p3 = 29 then
62380: LD_VAR 0 3
62384: PUSH
62385: LD_INT 29
62387: EQUAL
62388: IFFALSE 62398
// sDLaser := true ;
62390: LD_ADDR_EXP 91
62394: PUSH
62395: LD_INT 1
62397: ST_TO_ADDR
// if p3 = 30 then
62398: LD_VAR 0 3
62402: PUSH
62403: LD_INT 30
62405: EQUAL
62406: IFFALSE 62416
// sExchange := true ;
62408: LD_ADDR_EXP 92
62412: PUSH
62413: LD_INT 1
62415: ST_TO_ADDR
// if p3 = 31 then
62416: LD_VAR 0 3
62420: PUSH
62421: LD_INT 31
62423: EQUAL
62424: IFFALSE 62434
// sFac := true ;
62426: LD_ADDR_EXP 93
62430: PUSH
62431: LD_INT 1
62433: ST_TO_ADDR
// if p3 = 32 then
62434: LD_VAR 0 3
62438: PUSH
62439: LD_INT 32
62441: EQUAL
62442: IFFALSE 62452
// sPower := true ;
62444: LD_ADDR_EXP 94
62448: PUSH
62449: LD_INT 1
62451: ST_TO_ADDR
// if p3 = 33 then
62452: LD_VAR 0 3
62456: PUSH
62457: LD_INT 33
62459: EQUAL
62460: IFFALSE 62470
// sRandom := true ;
62462: LD_ADDR_EXP 95
62466: PUSH
62467: LD_INT 1
62469: ST_TO_ADDR
// if p3 = 34 then
62470: LD_VAR 0 3
62474: PUSH
62475: LD_INT 34
62477: EQUAL
62478: IFFALSE 62488
// sShield := true ;
62480: LD_ADDR_EXP 96
62484: PUSH
62485: LD_INT 1
62487: ST_TO_ADDR
// if p3 = 35 then
62488: LD_VAR 0 3
62492: PUSH
62493: LD_INT 35
62495: EQUAL
62496: IFFALSE 62506
// sTime := true ;
62498: LD_ADDR_EXP 97
62502: PUSH
62503: LD_INT 1
62505: ST_TO_ADDR
// if p3 = 36 then
62506: LD_VAR 0 3
62510: PUSH
62511: LD_INT 36
62513: EQUAL
62514: IFFALSE 62524
// sTools := true ;
62516: LD_ADDR_EXP 98
62520: PUSH
62521: LD_INT 1
62523: ST_TO_ADDR
// if p3 = 101 then
62524: LD_VAR 0 3
62528: PUSH
62529: LD_INT 101
62531: EQUAL
62532: IFFALSE 62542
// sSold := true ;
62534: LD_ADDR_EXP 63
62538: PUSH
62539: LD_INT 1
62541: ST_TO_ADDR
// if p3 = 102 then
62542: LD_VAR 0 3
62546: PUSH
62547: LD_INT 102
62549: EQUAL
62550: IFFALSE 62560
// sDiff := true ;
62552: LD_ADDR_EXP 64
62556: PUSH
62557: LD_INT 1
62559: ST_TO_ADDR
// if p3 = 103 then
62560: LD_VAR 0 3
62564: PUSH
62565: LD_INT 103
62567: EQUAL
62568: IFFALSE 62578
// sFog := true ;
62570: LD_ADDR_EXP 67
62574: PUSH
62575: LD_INT 1
62577: ST_TO_ADDR
// if p3 = 104 then
62578: LD_VAR 0 3
62582: PUSH
62583: LD_INT 104
62585: EQUAL
62586: IFFALSE 62596
// sReset := true ;
62588: LD_ADDR_EXP 68
62592: PUSH
62593: LD_INT 1
62595: ST_TO_ADDR
// if p3 = 105 then
62596: LD_VAR 0 3
62600: PUSH
62601: LD_INT 105
62603: EQUAL
62604: IFFALSE 62614
// sSun := true ;
62606: LD_ADDR_EXP 69
62610: PUSH
62611: LD_INT 1
62613: ST_TO_ADDR
// if p3 = 106 then
62614: LD_VAR 0 3
62618: PUSH
62619: LD_INT 106
62621: EQUAL
62622: IFFALSE 62632
// sTiger := true ;
62624: LD_ADDR_EXP 65
62628: PUSH
62629: LD_INT 1
62631: ST_TO_ADDR
// if p3 = 107 then
62632: LD_VAR 0 3
62636: PUSH
62637: LD_INT 107
62639: EQUAL
62640: IFFALSE 62650
// sBomb := true ;
62642: LD_ADDR_EXP 66
62646: PUSH
62647: LD_INT 1
62649: ST_TO_ADDR
// if p3 = 108 then
62650: LD_VAR 0 3
62654: PUSH
62655: LD_INT 108
62657: EQUAL
62658: IFFALSE 62668
// sWound := true ;
62660: LD_ADDR_EXP 74
62664: PUSH
62665: LD_INT 1
62667: ST_TO_ADDR
// if p3 = 109 then
62668: LD_VAR 0 3
62672: PUSH
62673: LD_INT 109
62675: EQUAL
62676: IFFALSE 62686
// sBetray := true ;
62678: LD_ADDR_EXP 78
62682: PUSH
62683: LD_INT 1
62685: ST_TO_ADDR
// if p3 = 110 then
62686: LD_VAR 0 3
62690: PUSH
62691: LD_INT 110
62693: EQUAL
62694: IFFALSE 62704
// sContamin := true ;
62696: LD_ADDR_EXP 79
62700: PUSH
62701: LD_INT 1
62703: ST_TO_ADDR
// if p3 = 111 then
62704: LD_VAR 0 3
62708: PUSH
62709: LD_INT 111
62711: EQUAL
62712: IFFALSE 62722
// sOil := true ;
62714: LD_ADDR_EXP 81
62718: PUSH
62719: LD_INT 1
62721: ST_TO_ADDR
// if p3 = 112 then
62722: LD_VAR 0 3
62726: PUSH
62727: LD_INT 112
62729: EQUAL
62730: IFFALSE 62740
// sStu := true ;
62732: LD_ADDR_EXP 85
62736: PUSH
62737: LD_INT 1
62739: ST_TO_ADDR
// if p3 = 113 then
62740: LD_VAR 0 3
62744: PUSH
62745: LD_INT 113
62747: EQUAL
62748: IFFALSE 62758
// sBazooka := true ;
62750: LD_ADDR_EXP 88
62754: PUSH
62755: LD_INT 1
62757: ST_TO_ADDR
// if p3 = 114 then
62758: LD_VAR 0 3
62762: PUSH
62763: LD_INT 114
62765: EQUAL
62766: IFFALSE 62776
// sMortar := true ;
62768: LD_ADDR_EXP 89
62772: PUSH
62773: LD_INT 1
62775: ST_TO_ADDR
// if p3 = 115 then
62776: LD_VAR 0 3
62780: PUSH
62781: LD_INT 115
62783: EQUAL
62784: IFFALSE 62794
// sRanger := true ;
62786: LD_ADDR_EXP 99
62790: PUSH
62791: LD_INT 1
62793: ST_TO_ADDR
// if p3 = 116 then
62794: LD_VAR 0 3
62798: PUSH
62799: LD_INT 116
62801: EQUAL
62802: IFFALSE 62812
// sComputer := true ;
62804: LD_ADDR_EXP 100
62808: PUSH
62809: LD_INT 1
62811: ST_TO_ADDR
// if p3 = 117 then
62812: LD_VAR 0 3
62816: PUSH
62817: LD_INT 117
62819: EQUAL
62820: IFFALSE 62830
// s30 := true ;
62822: LD_ADDR_EXP 101
62826: PUSH
62827: LD_INT 1
62829: ST_TO_ADDR
// if p3 = 118 then
62830: LD_VAR 0 3
62834: PUSH
62835: LD_INT 118
62837: EQUAL
62838: IFFALSE 62848
// s60 := true ;
62840: LD_ADDR_EXP 102
62844: PUSH
62845: LD_INT 1
62847: ST_TO_ADDR
// end ; if p2 = hack_mode then
62848: LD_VAR 0 2
62852: PUSH
62853: LD_INT 101
62855: EQUAL
62856: IFFALSE 62984
// begin case p3 of 1 :
62858: LD_VAR 0 3
62862: PUSH
62863: LD_INT 1
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62871
62869: GO 62878
62871: POP
// hHackUnlimitedResources ; 2 :
62872: CALL 75131 0 0
62876: GO 62984
62878: LD_INT 2
62880: DOUBLE
62881: EQUAL
62882: IFTRUE 62886
62884: GO 62893
62886: POP
// hHackSetLevel10 ; 3 :
62887: CALL 75264 0 0
62891: GO 62984
62893: LD_INT 3
62895: DOUBLE
62896: EQUAL
62897: IFTRUE 62901
62899: GO 62908
62901: POP
// hHackSetLevel10YourUnits ; 4 :
62902: CALL 75349 0 0
62906: GO 62984
62908: LD_INT 4
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 62923
62916: POP
// hHackInvincible ; 5 :
62917: CALL 75797 0 0
62921: GO 62984
62923: LD_INT 5
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62931
62929: GO 62938
62931: POP
// hHackInvisible ; 6 :
62932: CALL 75908 0 0
62936: GO 62984
62938: LD_INT 6
62940: DOUBLE
62941: EQUAL
62942: IFTRUE 62946
62944: GO 62953
62946: POP
// hHackChangeYourSide ; 7 :
62947: CALL 75965 0 0
62951: GO 62984
62953: LD_INT 7
62955: DOUBLE
62956: EQUAL
62957: IFTRUE 62961
62959: GO 62968
62961: POP
// hHackChangeUnitSide ; 8 :
62962: CALL 76007 0 0
62966: GO 62984
62968: LD_INT 8
62970: DOUBLE
62971: EQUAL
62972: IFTRUE 62976
62974: GO 62983
62976: POP
// hHackFog ; end ;
62977: CALL 76108 0 0
62981: GO 62984
62983: POP
// end ; if p2 = game_save_mode then
62984: LD_VAR 0 2
62988: PUSH
62989: LD_INT 102
62991: EQUAL
62992: IFFALSE 63047
// begin if p3 = 1 then
62994: LD_VAR 0 3
62998: PUSH
62999: LD_INT 1
63001: EQUAL
63002: IFFALSE 63014
// globalGameSaveCounter := p4 ;
63004: LD_ADDR_EXP 45
63008: PUSH
63009: LD_VAR 0 4
63013: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
63014: LD_VAR 0 3
63018: PUSH
63019: LD_INT 2
63021: EQUAL
63022: PUSH
63023: LD_EXP 45
63027: AND
63028: IFFALSE 63047
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63030: LD_STRING setGameSaveCounter(
63032: PUSH
63033: LD_EXP 45
63037: STR
63038: PUSH
63039: LD_STRING )
63041: STR
63042: PPUSH
63043: CALL_OW 559
// end ; end ;
63047: LD_VAR 0 7
63051: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
63052: LD_INT 0
63054: PPUSH
// streamModeActive := false ;
63055: LD_ADDR_EXP 46
63059: PUSH
63060: LD_INT 0
63062: ST_TO_ADDR
// normalCounter := 36 ;
63063: LD_ADDR_EXP 47
63067: PUSH
63068: LD_INT 36
63070: ST_TO_ADDR
// hardcoreCounter := 18 ;
63071: LD_ADDR_EXP 48
63075: PUSH
63076: LD_INT 18
63078: ST_TO_ADDR
// sRocket := false ;
63079: LD_ADDR_EXP 51
63083: PUSH
63084: LD_INT 0
63086: ST_TO_ADDR
// sSpeed := false ;
63087: LD_ADDR_EXP 50
63091: PUSH
63092: LD_INT 0
63094: ST_TO_ADDR
// sEngine := false ;
63095: LD_ADDR_EXP 52
63099: PUSH
63100: LD_INT 0
63102: ST_TO_ADDR
// sSpec := false ;
63103: LD_ADDR_EXP 49
63107: PUSH
63108: LD_INT 0
63110: ST_TO_ADDR
// sLevel := false ;
63111: LD_ADDR_EXP 53
63115: PUSH
63116: LD_INT 0
63118: ST_TO_ADDR
// sArmoury := false ;
63119: LD_ADDR_EXP 54
63123: PUSH
63124: LD_INT 0
63126: ST_TO_ADDR
// sRadar := false ;
63127: LD_ADDR_EXP 55
63131: PUSH
63132: LD_INT 0
63134: ST_TO_ADDR
// sBunker := false ;
63135: LD_ADDR_EXP 56
63139: PUSH
63140: LD_INT 0
63142: ST_TO_ADDR
// sHack := false ;
63143: LD_ADDR_EXP 57
63147: PUSH
63148: LD_INT 0
63150: ST_TO_ADDR
// sFire := false ;
63151: LD_ADDR_EXP 58
63155: PUSH
63156: LD_INT 0
63158: ST_TO_ADDR
// sRefresh := false ;
63159: LD_ADDR_EXP 59
63163: PUSH
63164: LD_INT 0
63166: ST_TO_ADDR
// sExp := false ;
63167: LD_ADDR_EXP 60
63171: PUSH
63172: LD_INT 0
63174: ST_TO_ADDR
// sDepot := false ;
63175: LD_ADDR_EXP 61
63179: PUSH
63180: LD_INT 0
63182: ST_TO_ADDR
// sFlag := false ;
63183: LD_ADDR_EXP 62
63187: PUSH
63188: LD_INT 0
63190: ST_TO_ADDR
// sKamikadze := false ;
63191: LD_ADDR_EXP 70
63195: PUSH
63196: LD_INT 0
63198: ST_TO_ADDR
// sTroll := false ;
63199: LD_ADDR_EXP 71
63203: PUSH
63204: LD_INT 0
63206: ST_TO_ADDR
// sSlow := false ;
63207: LD_ADDR_EXP 72
63211: PUSH
63212: LD_INT 0
63214: ST_TO_ADDR
// sLack := false ;
63215: LD_ADDR_EXP 73
63219: PUSH
63220: LD_INT 0
63222: ST_TO_ADDR
// sTank := false ;
63223: LD_ADDR_EXP 75
63227: PUSH
63228: LD_INT 0
63230: ST_TO_ADDR
// sRemote := false ;
63231: LD_ADDR_EXP 76
63235: PUSH
63236: LD_INT 0
63238: ST_TO_ADDR
// sPowell := false ;
63239: LD_ADDR_EXP 77
63243: PUSH
63244: LD_INT 0
63246: ST_TO_ADDR
// sTeleport := false ;
63247: LD_ADDR_EXP 80
63251: PUSH
63252: LD_INT 0
63254: ST_TO_ADDR
// sOilTower := false ;
63255: LD_ADDR_EXP 82
63259: PUSH
63260: LD_INT 0
63262: ST_TO_ADDR
// sShovel := false ;
63263: LD_ADDR_EXP 83
63267: PUSH
63268: LD_INT 0
63270: ST_TO_ADDR
// sSheik := false ;
63271: LD_ADDR_EXP 84
63275: PUSH
63276: LD_INT 0
63278: ST_TO_ADDR
// sEarthquake := false ;
63279: LD_ADDR_EXP 86
63283: PUSH
63284: LD_INT 0
63286: ST_TO_ADDR
// sAI := false ;
63287: LD_ADDR_EXP 87
63291: PUSH
63292: LD_INT 0
63294: ST_TO_ADDR
// sCargo := false ;
63295: LD_ADDR_EXP 90
63299: PUSH
63300: LD_INT 0
63302: ST_TO_ADDR
// sDLaser := false ;
63303: LD_ADDR_EXP 91
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// sExchange := false ;
63311: LD_ADDR_EXP 92
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// sFac := false ;
63319: LD_ADDR_EXP 93
63323: PUSH
63324: LD_INT 0
63326: ST_TO_ADDR
// sPower := false ;
63327: LD_ADDR_EXP 94
63331: PUSH
63332: LD_INT 0
63334: ST_TO_ADDR
// sRandom := false ;
63335: LD_ADDR_EXP 95
63339: PUSH
63340: LD_INT 0
63342: ST_TO_ADDR
// sShield := false ;
63343: LD_ADDR_EXP 96
63347: PUSH
63348: LD_INT 0
63350: ST_TO_ADDR
// sTime := false ;
63351: LD_ADDR_EXP 97
63355: PUSH
63356: LD_INT 0
63358: ST_TO_ADDR
// sTools := false ;
63359: LD_ADDR_EXP 98
63363: PUSH
63364: LD_INT 0
63366: ST_TO_ADDR
// sSold := false ;
63367: LD_ADDR_EXP 63
63371: PUSH
63372: LD_INT 0
63374: ST_TO_ADDR
// sDiff := false ;
63375: LD_ADDR_EXP 64
63379: PUSH
63380: LD_INT 0
63382: ST_TO_ADDR
// sFog := false ;
63383: LD_ADDR_EXP 67
63387: PUSH
63388: LD_INT 0
63390: ST_TO_ADDR
// sReset := false ;
63391: LD_ADDR_EXP 68
63395: PUSH
63396: LD_INT 0
63398: ST_TO_ADDR
// sSun := false ;
63399: LD_ADDR_EXP 69
63403: PUSH
63404: LD_INT 0
63406: ST_TO_ADDR
// sTiger := false ;
63407: LD_ADDR_EXP 65
63411: PUSH
63412: LD_INT 0
63414: ST_TO_ADDR
// sBomb := false ;
63415: LD_ADDR_EXP 66
63419: PUSH
63420: LD_INT 0
63422: ST_TO_ADDR
// sWound := false ;
63423: LD_ADDR_EXP 74
63427: PUSH
63428: LD_INT 0
63430: ST_TO_ADDR
// sBetray := false ;
63431: LD_ADDR_EXP 78
63435: PUSH
63436: LD_INT 0
63438: ST_TO_ADDR
// sContamin := false ;
63439: LD_ADDR_EXP 79
63443: PUSH
63444: LD_INT 0
63446: ST_TO_ADDR
// sOil := false ;
63447: LD_ADDR_EXP 81
63451: PUSH
63452: LD_INT 0
63454: ST_TO_ADDR
// sStu := false ;
63455: LD_ADDR_EXP 85
63459: PUSH
63460: LD_INT 0
63462: ST_TO_ADDR
// sBazooka := false ;
63463: LD_ADDR_EXP 88
63467: PUSH
63468: LD_INT 0
63470: ST_TO_ADDR
// sMortar := false ;
63471: LD_ADDR_EXP 89
63475: PUSH
63476: LD_INT 0
63478: ST_TO_ADDR
// sRanger := false ;
63479: LD_ADDR_EXP 99
63483: PUSH
63484: LD_INT 0
63486: ST_TO_ADDR
// sComputer := false ;
63487: LD_ADDR_EXP 100
63491: PUSH
63492: LD_INT 0
63494: ST_TO_ADDR
// s30 := false ;
63495: LD_ADDR_EXP 101
63499: PUSH
63500: LD_INT 0
63502: ST_TO_ADDR
// s60 := false ;
63503: LD_ADDR_EXP 102
63507: PUSH
63508: LD_INT 0
63510: ST_TO_ADDR
// end ;
63511: LD_VAR 0 1
63515: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63516: LD_INT 0
63518: PPUSH
63519: PPUSH
63520: PPUSH
63521: PPUSH
63522: PPUSH
63523: PPUSH
63524: PPUSH
// result := [ ] ;
63525: LD_ADDR_VAR 0 2
63529: PUSH
63530: EMPTY
63531: ST_TO_ADDR
// if campaign_id = 1 then
63532: LD_OWVAR 69
63536: PUSH
63537: LD_INT 1
63539: EQUAL
63540: IFFALSE 66706
// begin case mission_number of 1 :
63542: LD_OWVAR 70
63546: PUSH
63547: LD_INT 1
63549: DOUBLE
63550: EQUAL
63551: IFTRUE 63555
63553: GO 63631
63555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63556: LD_ADDR_VAR 0 2
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: LD_INT 4
63566: PUSH
63567: LD_INT 11
63569: PUSH
63570: LD_INT 12
63572: PUSH
63573: LD_INT 15
63575: PUSH
63576: LD_INT 16
63578: PUSH
63579: LD_INT 22
63581: PUSH
63582: LD_INT 23
63584: PUSH
63585: LD_INT 26
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 101
63601: PUSH
63602: LD_INT 102
63604: PUSH
63605: LD_INT 106
63607: PUSH
63608: LD_INT 116
63610: PUSH
63611: LD_INT 117
63613: PUSH
63614: LD_INT 118
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: ST_TO_ADDR
63629: GO 66704
63631: LD_INT 2
63633: DOUBLE
63634: EQUAL
63635: IFTRUE 63639
63637: GO 63723
63639: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63640: LD_ADDR_VAR 0 2
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: LD_INT 11
63653: PUSH
63654: LD_INT 12
63656: PUSH
63657: LD_INT 15
63659: PUSH
63660: LD_INT 16
63662: PUSH
63663: LD_INT 22
63665: PUSH
63666: LD_INT 23
63668: PUSH
63669: LD_INT 26
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 101
63685: PUSH
63686: LD_INT 102
63688: PUSH
63689: LD_INT 105
63691: PUSH
63692: LD_INT 106
63694: PUSH
63695: LD_INT 108
63697: PUSH
63698: LD_INT 116
63700: PUSH
63701: LD_INT 117
63703: PUSH
63704: LD_INT 118
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: ST_TO_ADDR
63721: GO 66704
63723: LD_INT 3
63725: DOUBLE
63726: EQUAL
63727: IFTRUE 63731
63729: GO 63819
63731: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63732: LD_ADDR_VAR 0 2
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: LD_INT 5
63745: PUSH
63746: LD_INT 11
63748: PUSH
63749: LD_INT 12
63751: PUSH
63752: LD_INT 15
63754: PUSH
63755: LD_INT 16
63757: PUSH
63758: LD_INT 22
63760: PUSH
63761: LD_INT 26
63763: PUSH
63764: LD_INT 36
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 101
63781: PUSH
63782: LD_INT 102
63784: PUSH
63785: LD_INT 105
63787: PUSH
63788: LD_INT 106
63790: PUSH
63791: LD_INT 108
63793: PUSH
63794: LD_INT 116
63796: PUSH
63797: LD_INT 117
63799: PUSH
63800: LD_INT 118
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: ST_TO_ADDR
63817: GO 66704
63819: LD_INT 4
63821: DOUBLE
63822: EQUAL
63823: IFTRUE 63827
63825: GO 63923
63827: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63828: LD_ADDR_VAR 0 2
63832: PUSH
63833: LD_INT 2
63835: PUSH
63836: LD_INT 4
63838: PUSH
63839: LD_INT 5
63841: PUSH
63842: LD_INT 8
63844: PUSH
63845: LD_INT 11
63847: PUSH
63848: LD_INT 12
63850: PUSH
63851: LD_INT 15
63853: PUSH
63854: LD_INT 16
63856: PUSH
63857: LD_INT 22
63859: PUSH
63860: LD_INT 23
63862: PUSH
63863: LD_INT 26
63865: PUSH
63866: LD_INT 36
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 101
63885: PUSH
63886: LD_INT 102
63888: PUSH
63889: LD_INT 105
63891: PUSH
63892: LD_INT 106
63894: PUSH
63895: LD_INT 108
63897: PUSH
63898: LD_INT 116
63900: PUSH
63901: LD_INT 117
63903: PUSH
63904: LD_INT 118
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: ST_TO_ADDR
63921: GO 66704
63923: LD_INT 5
63925: DOUBLE
63926: EQUAL
63927: IFTRUE 63931
63929: GO 64043
63931: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63932: LD_ADDR_VAR 0 2
63936: PUSH
63937: LD_INT 2
63939: PUSH
63940: LD_INT 4
63942: PUSH
63943: LD_INT 5
63945: PUSH
63946: LD_INT 6
63948: PUSH
63949: LD_INT 8
63951: PUSH
63952: LD_INT 11
63954: PUSH
63955: LD_INT 12
63957: PUSH
63958: LD_INT 15
63960: PUSH
63961: LD_INT 16
63963: PUSH
63964: LD_INT 22
63966: PUSH
63967: LD_INT 23
63969: PUSH
63970: LD_INT 25
63972: PUSH
63973: LD_INT 26
63975: PUSH
63976: LD_INT 36
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 101
63997: PUSH
63998: LD_INT 102
64000: PUSH
64001: LD_INT 105
64003: PUSH
64004: LD_INT 106
64006: PUSH
64007: LD_INT 108
64009: PUSH
64010: LD_INT 109
64012: PUSH
64013: LD_INT 112
64015: PUSH
64016: LD_INT 116
64018: PUSH
64019: LD_INT 117
64021: PUSH
64022: LD_INT 118
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: ST_TO_ADDR
64041: GO 66704
64043: LD_INT 6
64045: DOUBLE
64046: EQUAL
64047: IFTRUE 64051
64049: GO 64183
64051: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
64052: LD_ADDR_VAR 0 2
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 4
64062: PUSH
64063: LD_INT 5
64065: PUSH
64066: LD_INT 6
64068: PUSH
64069: LD_INT 8
64071: PUSH
64072: LD_INT 11
64074: PUSH
64075: LD_INT 12
64077: PUSH
64078: LD_INT 15
64080: PUSH
64081: LD_INT 16
64083: PUSH
64084: LD_INT 20
64086: PUSH
64087: LD_INT 21
64089: PUSH
64090: LD_INT 22
64092: PUSH
64093: LD_INT 23
64095: PUSH
64096: LD_INT 25
64098: PUSH
64099: LD_INT 26
64101: PUSH
64102: LD_INT 30
64104: PUSH
64105: LD_INT 31
64107: PUSH
64108: LD_INT 32
64110: PUSH
64111: LD_INT 36
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 101
64137: PUSH
64138: LD_INT 102
64140: PUSH
64141: LD_INT 105
64143: PUSH
64144: LD_INT 106
64146: PUSH
64147: LD_INT 108
64149: PUSH
64150: LD_INT 109
64152: PUSH
64153: LD_INT 112
64155: PUSH
64156: LD_INT 116
64158: PUSH
64159: LD_INT 117
64161: PUSH
64162: LD_INT 118
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: ST_TO_ADDR
64181: GO 66704
64183: LD_INT 7
64185: DOUBLE
64186: EQUAL
64187: IFTRUE 64191
64189: GO 64303
64191: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64192: LD_ADDR_VAR 0 2
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: LD_INT 4
64202: PUSH
64203: LD_INT 5
64205: PUSH
64206: LD_INT 7
64208: PUSH
64209: LD_INT 11
64211: PUSH
64212: LD_INT 12
64214: PUSH
64215: LD_INT 15
64217: PUSH
64218: LD_INT 16
64220: PUSH
64221: LD_INT 20
64223: PUSH
64224: LD_INT 21
64226: PUSH
64227: LD_INT 22
64229: PUSH
64230: LD_INT 23
64232: PUSH
64233: LD_INT 25
64235: PUSH
64236: LD_INT 26
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 101
64257: PUSH
64258: LD_INT 102
64260: PUSH
64261: LD_INT 103
64263: PUSH
64264: LD_INT 105
64266: PUSH
64267: LD_INT 106
64269: PUSH
64270: LD_INT 108
64272: PUSH
64273: LD_INT 112
64275: PUSH
64276: LD_INT 116
64278: PUSH
64279: LD_INT 117
64281: PUSH
64282: LD_INT 118
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: ST_TO_ADDR
64301: GO 66704
64303: LD_INT 8
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64311
64309: GO 64451
64311: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64312: LD_ADDR_VAR 0 2
64316: PUSH
64317: LD_INT 2
64319: PUSH
64320: LD_INT 4
64322: PUSH
64323: LD_INT 5
64325: PUSH
64326: LD_INT 6
64328: PUSH
64329: LD_INT 7
64331: PUSH
64332: LD_INT 8
64334: PUSH
64335: LD_INT 11
64337: PUSH
64338: LD_INT 12
64340: PUSH
64341: LD_INT 15
64343: PUSH
64344: LD_INT 16
64346: PUSH
64347: LD_INT 20
64349: PUSH
64350: LD_INT 21
64352: PUSH
64353: LD_INT 22
64355: PUSH
64356: LD_INT 23
64358: PUSH
64359: LD_INT 25
64361: PUSH
64362: LD_INT 26
64364: PUSH
64365: LD_INT 30
64367: PUSH
64368: LD_INT 31
64370: PUSH
64371: LD_INT 32
64373: PUSH
64374: LD_INT 36
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 101
64401: PUSH
64402: LD_INT 102
64404: PUSH
64405: LD_INT 103
64407: PUSH
64408: LD_INT 105
64410: PUSH
64411: LD_INT 106
64413: PUSH
64414: LD_INT 108
64416: PUSH
64417: LD_INT 109
64419: PUSH
64420: LD_INT 112
64422: PUSH
64423: LD_INT 116
64425: PUSH
64426: LD_INT 117
64428: PUSH
64429: LD_INT 118
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: ST_TO_ADDR
64449: GO 66704
64451: LD_INT 9
64453: DOUBLE
64454: EQUAL
64455: IFTRUE 64459
64457: GO 64607
64459: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64460: LD_ADDR_VAR 0 2
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: LD_INT 4
64470: PUSH
64471: LD_INT 5
64473: PUSH
64474: LD_INT 6
64476: PUSH
64477: LD_INT 7
64479: PUSH
64480: LD_INT 8
64482: PUSH
64483: LD_INT 11
64485: PUSH
64486: LD_INT 12
64488: PUSH
64489: LD_INT 15
64491: PUSH
64492: LD_INT 16
64494: PUSH
64495: LD_INT 20
64497: PUSH
64498: LD_INT 21
64500: PUSH
64501: LD_INT 22
64503: PUSH
64504: LD_INT 23
64506: PUSH
64507: LD_INT 25
64509: PUSH
64510: LD_INT 26
64512: PUSH
64513: LD_INT 28
64515: PUSH
64516: LD_INT 30
64518: PUSH
64519: LD_INT 31
64521: PUSH
64522: LD_INT 32
64524: PUSH
64525: LD_INT 36
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 101
64553: PUSH
64554: LD_INT 102
64556: PUSH
64557: LD_INT 103
64559: PUSH
64560: LD_INT 105
64562: PUSH
64563: LD_INT 106
64565: PUSH
64566: LD_INT 108
64568: PUSH
64569: LD_INT 109
64571: PUSH
64572: LD_INT 112
64574: PUSH
64575: LD_INT 114
64577: PUSH
64578: LD_INT 116
64580: PUSH
64581: LD_INT 117
64583: PUSH
64584: LD_INT 118
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: ST_TO_ADDR
64605: GO 66704
64607: LD_INT 10
64609: DOUBLE
64610: EQUAL
64611: IFTRUE 64615
64613: GO 64811
64615: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64616: LD_ADDR_VAR 0 2
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: LD_INT 4
64626: PUSH
64627: LD_INT 5
64629: PUSH
64630: LD_INT 6
64632: PUSH
64633: LD_INT 7
64635: PUSH
64636: LD_INT 8
64638: PUSH
64639: LD_INT 9
64641: PUSH
64642: LD_INT 10
64644: PUSH
64645: LD_INT 11
64647: PUSH
64648: LD_INT 12
64650: PUSH
64651: LD_INT 13
64653: PUSH
64654: LD_INT 14
64656: PUSH
64657: LD_INT 15
64659: PUSH
64660: LD_INT 16
64662: PUSH
64663: LD_INT 17
64665: PUSH
64666: LD_INT 18
64668: PUSH
64669: LD_INT 19
64671: PUSH
64672: LD_INT 20
64674: PUSH
64675: LD_INT 21
64677: PUSH
64678: LD_INT 22
64680: PUSH
64681: LD_INT 23
64683: PUSH
64684: LD_INT 24
64686: PUSH
64687: LD_INT 25
64689: PUSH
64690: LD_INT 26
64692: PUSH
64693: LD_INT 28
64695: PUSH
64696: LD_INT 30
64698: PUSH
64699: LD_INT 31
64701: PUSH
64702: LD_INT 32
64704: PUSH
64705: LD_INT 36
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 101
64741: PUSH
64742: LD_INT 102
64744: PUSH
64745: LD_INT 103
64747: PUSH
64748: LD_INT 104
64750: PUSH
64751: LD_INT 105
64753: PUSH
64754: LD_INT 106
64756: PUSH
64757: LD_INT 107
64759: PUSH
64760: LD_INT 108
64762: PUSH
64763: LD_INT 109
64765: PUSH
64766: LD_INT 110
64768: PUSH
64769: LD_INT 111
64771: PUSH
64772: LD_INT 112
64774: PUSH
64775: LD_INT 114
64777: PUSH
64778: LD_INT 116
64780: PUSH
64781: LD_INT 117
64783: PUSH
64784: LD_INT 118
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: ST_TO_ADDR
64809: GO 66704
64811: LD_INT 11
64813: DOUBLE
64814: EQUAL
64815: IFTRUE 64819
64817: GO 65023
64819: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64820: LD_ADDR_VAR 0 2
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: LD_INT 4
64833: PUSH
64834: LD_INT 5
64836: PUSH
64837: LD_INT 6
64839: PUSH
64840: LD_INT 7
64842: PUSH
64843: LD_INT 8
64845: PUSH
64846: LD_INT 9
64848: PUSH
64849: LD_INT 10
64851: PUSH
64852: LD_INT 11
64854: PUSH
64855: LD_INT 12
64857: PUSH
64858: LD_INT 13
64860: PUSH
64861: LD_INT 14
64863: PUSH
64864: LD_INT 15
64866: PUSH
64867: LD_INT 16
64869: PUSH
64870: LD_INT 17
64872: PUSH
64873: LD_INT 18
64875: PUSH
64876: LD_INT 19
64878: PUSH
64879: LD_INT 20
64881: PUSH
64882: LD_INT 21
64884: PUSH
64885: LD_INT 22
64887: PUSH
64888: LD_INT 23
64890: PUSH
64891: LD_INT 24
64893: PUSH
64894: LD_INT 25
64896: PUSH
64897: LD_INT 26
64899: PUSH
64900: LD_INT 28
64902: PUSH
64903: LD_INT 30
64905: PUSH
64906: LD_INT 31
64908: PUSH
64909: LD_INT 32
64911: PUSH
64912: LD_INT 34
64914: PUSH
64915: LD_INT 36
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 101
64953: PUSH
64954: LD_INT 102
64956: PUSH
64957: LD_INT 103
64959: PUSH
64960: LD_INT 104
64962: PUSH
64963: LD_INT 105
64965: PUSH
64966: LD_INT 106
64968: PUSH
64969: LD_INT 107
64971: PUSH
64972: LD_INT 108
64974: PUSH
64975: LD_INT 109
64977: PUSH
64978: LD_INT 110
64980: PUSH
64981: LD_INT 111
64983: PUSH
64984: LD_INT 112
64986: PUSH
64987: LD_INT 114
64989: PUSH
64990: LD_INT 116
64992: PUSH
64993: LD_INT 117
64995: PUSH
64996: LD_INT 118
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: ST_TO_ADDR
65021: GO 66704
65023: LD_INT 12
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65251
65031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
65032: LD_ADDR_VAR 0 2
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 3
65045: PUSH
65046: LD_INT 4
65048: PUSH
65049: LD_INT 5
65051: PUSH
65052: LD_INT 6
65054: PUSH
65055: LD_INT 7
65057: PUSH
65058: LD_INT 8
65060: PUSH
65061: LD_INT 9
65063: PUSH
65064: LD_INT 10
65066: PUSH
65067: LD_INT 11
65069: PUSH
65070: LD_INT 12
65072: PUSH
65073: LD_INT 13
65075: PUSH
65076: LD_INT 14
65078: PUSH
65079: LD_INT 15
65081: PUSH
65082: LD_INT 16
65084: PUSH
65085: LD_INT 17
65087: PUSH
65088: LD_INT 18
65090: PUSH
65091: LD_INT 19
65093: PUSH
65094: LD_INT 20
65096: PUSH
65097: LD_INT 21
65099: PUSH
65100: LD_INT 22
65102: PUSH
65103: LD_INT 23
65105: PUSH
65106: LD_INT 24
65108: PUSH
65109: LD_INT 25
65111: PUSH
65112: LD_INT 26
65114: PUSH
65115: LD_INT 27
65117: PUSH
65118: LD_INT 28
65120: PUSH
65121: LD_INT 30
65123: PUSH
65124: LD_INT 31
65126: PUSH
65127: LD_INT 32
65129: PUSH
65130: LD_INT 33
65132: PUSH
65133: LD_INT 34
65135: PUSH
65136: LD_INT 36
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 101
65177: PUSH
65178: LD_INT 102
65180: PUSH
65181: LD_INT 103
65183: PUSH
65184: LD_INT 104
65186: PUSH
65187: LD_INT 105
65189: PUSH
65190: LD_INT 106
65192: PUSH
65193: LD_INT 107
65195: PUSH
65196: LD_INT 108
65198: PUSH
65199: LD_INT 109
65201: PUSH
65202: LD_INT 110
65204: PUSH
65205: LD_INT 111
65207: PUSH
65208: LD_INT 112
65210: PUSH
65211: LD_INT 113
65213: PUSH
65214: LD_INT 114
65216: PUSH
65217: LD_INT 116
65219: PUSH
65220: LD_INT 117
65222: PUSH
65223: LD_INT 118
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: ST_TO_ADDR
65249: GO 66704
65251: LD_INT 13
65253: DOUBLE
65254: EQUAL
65255: IFTRUE 65259
65257: GO 65467
65259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65260: LD_ADDR_VAR 0 2
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: LD_INT 4
65276: PUSH
65277: LD_INT 5
65279: PUSH
65280: LD_INT 8
65282: PUSH
65283: LD_INT 9
65285: PUSH
65286: LD_INT 10
65288: PUSH
65289: LD_INT 11
65291: PUSH
65292: LD_INT 12
65294: PUSH
65295: LD_INT 14
65297: PUSH
65298: LD_INT 15
65300: PUSH
65301: LD_INT 16
65303: PUSH
65304: LD_INT 17
65306: PUSH
65307: LD_INT 18
65309: PUSH
65310: LD_INT 19
65312: PUSH
65313: LD_INT 20
65315: PUSH
65316: LD_INT 21
65318: PUSH
65319: LD_INT 22
65321: PUSH
65322: LD_INT 23
65324: PUSH
65325: LD_INT 24
65327: PUSH
65328: LD_INT 25
65330: PUSH
65331: LD_INT 26
65333: PUSH
65334: LD_INT 27
65336: PUSH
65337: LD_INT 28
65339: PUSH
65340: LD_INT 30
65342: PUSH
65343: LD_INT 31
65345: PUSH
65346: LD_INT 32
65348: PUSH
65349: LD_INT 33
65351: PUSH
65352: LD_INT 34
65354: PUSH
65355: LD_INT 36
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 101
65393: PUSH
65394: LD_INT 102
65396: PUSH
65397: LD_INT 103
65399: PUSH
65400: LD_INT 104
65402: PUSH
65403: LD_INT 105
65405: PUSH
65406: LD_INT 106
65408: PUSH
65409: LD_INT 107
65411: PUSH
65412: LD_INT 108
65414: PUSH
65415: LD_INT 109
65417: PUSH
65418: LD_INT 110
65420: PUSH
65421: LD_INT 111
65423: PUSH
65424: LD_INT 112
65426: PUSH
65427: LD_INT 113
65429: PUSH
65430: LD_INT 114
65432: PUSH
65433: LD_INT 116
65435: PUSH
65436: LD_INT 117
65438: PUSH
65439: LD_INT 118
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: ST_TO_ADDR
65465: GO 66704
65467: LD_INT 14
65469: DOUBLE
65470: EQUAL
65471: IFTRUE 65475
65473: GO 65699
65475: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65476: LD_ADDR_VAR 0 2
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: LD_INT 3
65489: PUSH
65490: LD_INT 4
65492: PUSH
65493: LD_INT 5
65495: PUSH
65496: LD_INT 6
65498: PUSH
65499: LD_INT 7
65501: PUSH
65502: LD_INT 8
65504: PUSH
65505: LD_INT 9
65507: PUSH
65508: LD_INT 10
65510: PUSH
65511: LD_INT 11
65513: PUSH
65514: LD_INT 12
65516: PUSH
65517: LD_INT 13
65519: PUSH
65520: LD_INT 14
65522: PUSH
65523: LD_INT 15
65525: PUSH
65526: LD_INT 16
65528: PUSH
65529: LD_INT 17
65531: PUSH
65532: LD_INT 18
65534: PUSH
65535: LD_INT 19
65537: PUSH
65538: LD_INT 20
65540: PUSH
65541: LD_INT 21
65543: PUSH
65544: LD_INT 22
65546: PUSH
65547: LD_INT 23
65549: PUSH
65550: LD_INT 24
65552: PUSH
65553: LD_INT 25
65555: PUSH
65556: LD_INT 26
65558: PUSH
65559: LD_INT 27
65561: PUSH
65562: LD_INT 28
65564: PUSH
65565: LD_INT 29
65567: PUSH
65568: LD_INT 30
65570: PUSH
65571: LD_INT 31
65573: PUSH
65574: LD_INT 32
65576: PUSH
65577: LD_INT 33
65579: PUSH
65580: LD_INT 34
65582: PUSH
65583: LD_INT 36
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 101
65625: PUSH
65626: LD_INT 102
65628: PUSH
65629: LD_INT 103
65631: PUSH
65632: LD_INT 104
65634: PUSH
65635: LD_INT 105
65637: PUSH
65638: LD_INT 106
65640: PUSH
65641: LD_INT 107
65643: PUSH
65644: LD_INT 108
65646: PUSH
65647: LD_INT 109
65649: PUSH
65650: LD_INT 110
65652: PUSH
65653: LD_INT 111
65655: PUSH
65656: LD_INT 112
65658: PUSH
65659: LD_INT 113
65661: PUSH
65662: LD_INT 114
65664: PUSH
65665: LD_INT 116
65667: PUSH
65668: LD_INT 117
65670: PUSH
65671: LD_INT 118
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: ST_TO_ADDR
65697: GO 66704
65699: LD_INT 15
65701: DOUBLE
65702: EQUAL
65703: IFTRUE 65707
65705: GO 65931
65707: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 2
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: LD_INT 4
65724: PUSH
65725: LD_INT 5
65727: PUSH
65728: LD_INT 6
65730: PUSH
65731: LD_INT 7
65733: PUSH
65734: LD_INT 8
65736: PUSH
65737: LD_INT 9
65739: PUSH
65740: LD_INT 10
65742: PUSH
65743: LD_INT 11
65745: PUSH
65746: LD_INT 12
65748: PUSH
65749: LD_INT 13
65751: PUSH
65752: LD_INT 14
65754: PUSH
65755: LD_INT 15
65757: PUSH
65758: LD_INT 16
65760: PUSH
65761: LD_INT 17
65763: PUSH
65764: LD_INT 18
65766: PUSH
65767: LD_INT 19
65769: PUSH
65770: LD_INT 20
65772: PUSH
65773: LD_INT 21
65775: PUSH
65776: LD_INT 22
65778: PUSH
65779: LD_INT 23
65781: PUSH
65782: LD_INT 24
65784: PUSH
65785: LD_INT 25
65787: PUSH
65788: LD_INT 26
65790: PUSH
65791: LD_INT 27
65793: PUSH
65794: LD_INT 28
65796: PUSH
65797: LD_INT 29
65799: PUSH
65800: LD_INT 30
65802: PUSH
65803: LD_INT 31
65805: PUSH
65806: LD_INT 32
65808: PUSH
65809: LD_INT 33
65811: PUSH
65812: LD_INT 34
65814: PUSH
65815: LD_INT 36
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 101
65857: PUSH
65858: LD_INT 102
65860: PUSH
65861: LD_INT 103
65863: PUSH
65864: LD_INT 104
65866: PUSH
65867: LD_INT 105
65869: PUSH
65870: LD_INT 106
65872: PUSH
65873: LD_INT 107
65875: PUSH
65876: LD_INT 108
65878: PUSH
65879: LD_INT 109
65881: PUSH
65882: LD_INT 110
65884: PUSH
65885: LD_INT 111
65887: PUSH
65888: LD_INT 112
65890: PUSH
65891: LD_INT 113
65893: PUSH
65894: LD_INT 114
65896: PUSH
65897: LD_INT 116
65899: PUSH
65900: LD_INT 117
65902: PUSH
65903: LD_INT 118
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: ST_TO_ADDR
65929: GO 66704
65931: LD_INT 16
65933: DOUBLE
65934: EQUAL
65935: IFTRUE 65939
65937: GO 66075
65939: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65940: LD_ADDR_VAR 0 2
65944: PUSH
65945: LD_INT 2
65947: PUSH
65948: LD_INT 4
65950: PUSH
65951: LD_INT 5
65953: PUSH
65954: LD_INT 7
65956: PUSH
65957: LD_INT 11
65959: PUSH
65960: LD_INT 12
65962: PUSH
65963: LD_INT 15
65965: PUSH
65966: LD_INT 16
65968: PUSH
65969: LD_INT 20
65971: PUSH
65972: LD_INT 21
65974: PUSH
65975: LD_INT 22
65977: PUSH
65978: LD_INT 23
65980: PUSH
65981: LD_INT 25
65983: PUSH
65984: LD_INT 26
65986: PUSH
65987: LD_INT 30
65989: PUSH
65990: LD_INT 31
65992: PUSH
65993: LD_INT 32
65995: PUSH
65996: LD_INT 33
65998: PUSH
65999: LD_INT 34
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 101
66025: PUSH
66026: LD_INT 102
66028: PUSH
66029: LD_INT 103
66031: PUSH
66032: LD_INT 106
66034: PUSH
66035: LD_INT 108
66037: PUSH
66038: LD_INT 112
66040: PUSH
66041: LD_INT 113
66043: PUSH
66044: LD_INT 114
66046: PUSH
66047: LD_INT 116
66049: PUSH
66050: LD_INT 117
66052: PUSH
66053: LD_INT 118
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: ST_TO_ADDR
66073: GO 66704
66075: LD_INT 17
66077: DOUBLE
66078: EQUAL
66079: IFTRUE 66083
66081: GO 66307
66083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
66084: LD_ADDR_VAR 0 2
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: LD_INT 4
66100: PUSH
66101: LD_INT 5
66103: PUSH
66104: LD_INT 6
66106: PUSH
66107: LD_INT 7
66109: PUSH
66110: LD_INT 8
66112: PUSH
66113: LD_INT 9
66115: PUSH
66116: LD_INT 10
66118: PUSH
66119: LD_INT 11
66121: PUSH
66122: LD_INT 12
66124: PUSH
66125: LD_INT 13
66127: PUSH
66128: LD_INT 14
66130: PUSH
66131: LD_INT 15
66133: PUSH
66134: LD_INT 16
66136: PUSH
66137: LD_INT 17
66139: PUSH
66140: LD_INT 18
66142: PUSH
66143: LD_INT 19
66145: PUSH
66146: LD_INT 20
66148: PUSH
66149: LD_INT 21
66151: PUSH
66152: LD_INT 22
66154: PUSH
66155: LD_INT 23
66157: PUSH
66158: LD_INT 24
66160: PUSH
66161: LD_INT 25
66163: PUSH
66164: LD_INT 26
66166: PUSH
66167: LD_INT 27
66169: PUSH
66170: LD_INT 28
66172: PUSH
66173: LD_INT 29
66175: PUSH
66176: LD_INT 30
66178: PUSH
66179: LD_INT 31
66181: PUSH
66182: LD_INT 32
66184: PUSH
66185: LD_INT 33
66187: PUSH
66188: LD_INT 34
66190: PUSH
66191: LD_INT 36
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 101
66233: PUSH
66234: LD_INT 102
66236: PUSH
66237: LD_INT 103
66239: PUSH
66240: LD_INT 104
66242: PUSH
66243: LD_INT 105
66245: PUSH
66246: LD_INT 106
66248: PUSH
66249: LD_INT 107
66251: PUSH
66252: LD_INT 108
66254: PUSH
66255: LD_INT 109
66257: PUSH
66258: LD_INT 110
66260: PUSH
66261: LD_INT 111
66263: PUSH
66264: LD_INT 112
66266: PUSH
66267: LD_INT 113
66269: PUSH
66270: LD_INT 114
66272: PUSH
66273: LD_INT 116
66275: PUSH
66276: LD_INT 117
66278: PUSH
66279: LD_INT 118
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: ST_TO_ADDR
66305: GO 66704
66307: LD_INT 18
66309: DOUBLE
66310: EQUAL
66311: IFTRUE 66315
66313: GO 66463
66315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 4
66326: PUSH
66327: LD_INT 5
66329: PUSH
66330: LD_INT 7
66332: PUSH
66333: LD_INT 11
66335: PUSH
66336: LD_INT 12
66338: PUSH
66339: LD_INT 15
66341: PUSH
66342: LD_INT 16
66344: PUSH
66345: LD_INT 20
66347: PUSH
66348: LD_INT 21
66350: PUSH
66351: LD_INT 22
66353: PUSH
66354: LD_INT 23
66356: PUSH
66357: LD_INT 25
66359: PUSH
66360: LD_INT 26
66362: PUSH
66363: LD_INT 30
66365: PUSH
66366: LD_INT 31
66368: PUSH
66369: LD_INT 32
66371: PUSH
66372: LD_INT 33
66374: PUSH
66375: LD_INT 34
66377: PUSH
66378: LD_INT 35
66380: PUSH
66381: LD_INT 36
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 101
66409: PUSH
66410: LD_INT 102
66412: PUSH
66413: LD_INT 103
66415: PUSH
66416: LD_INT 106
66418: PUSH
66419: LD_INT 108
66421: PUSH
66422: LD_INT 112
66424: PUSH
66425: LD_INT 113
66427: PUSH
66428: LD_INT 114
66430: PUSH
66431: LD_INT 115
66433: PUSH
66434: LD_INT 116
66436: PUSH
66437: LD_INT 117
66439: PUSH
66440: LD_INT 118
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: ST_TO_ADDR
66461: GO 66704
66463: LD_INT 19
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66471
66469: GO 66703
66471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66472: LD_ADDR_VAR 0 2
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: LD_INT 3
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: LD_INT 5
66491: PUSH
66492: LD_INT 6
66494: PUSH
66495: LD_INT 7
66497: PUSH
66498: LD_INT 8
66500: PUSH
66501: LD_INT 9
66503: PUSH
66504: LD_INT 10
66506: PUSH
66507: LD_INT 11
66509: PUSH
66510: LD_INT 12
66512: PUSH
66513: LD_INT 13
66515: PUSH
66516: LD_INT 14
66518: PUSH
66519: LD_INT 15
66521: PUSH
66522: LD_INT 16
66524: PUSH
66525: LD_INT 17
66527: PUSH
66528: LD_INT 18
66530: PUSH
66531: LD_INT 19
66533: PUSH
66534: LD_INT 20
66536: PUSH
66537: LD_INT 21
66539: PUSH
66540: LD_INT 22
66542: PUSH
66543: LD_INT 23
66545: PUSH
66546: LD_INT 24
66548: PUSH
66549: LD_INT 25
66551: PUSH
66552: LD_INT 26
66554: PUSH
66555: LD_INT 27
66557: PUSH
66558: LD_INT 28
66560: PUSH
66561: LD_INT 29
66563: PUSH
66564: LD_INT 30
66566: PUSH
66567: LD_INT 31
66569: PUSH
66570: LD_INT 32
66572: PUSH
66573: LD_INT 33
66575: PUSH
66576: LD_INT 34
66578: PUSH
66579: LD_INT 35
66581: PUSH
66582: LD_INT 36
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 101
66625: PUSH
66626: LD_INT 102
66628: PUSH
66629: LD_INT 103
66631: PUSH
66632: LD_INT 104
66634: PUSH
66635: LD_INT 105
66637: PUSH
66638: LD_INT 106
66640: PUSH
66641: LD_INT 107
66643: PUSH
66644: LD_INT 108
66646: PUSH
66647: LD_INT 109
66649: PUSH
66650: LD_INT 110
66652: PUSH
66653: LD_INT 111
66655: PUSH
66656: LD_INT 112
66658: PUSH
66659: LD_INT 113
66661: PUSH
66662: LD_INT 114
66664: PUSH
66665: LD_INT 115
66667: PUSH
66668: LD_INT 116
66670: PUSH
66671: LD_INT 117
66673: PUSH
66674: LD_INT 118
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: ST_TO_ADDR
66701: GO 66704
66703: POP
// end else
66704: GO 66935
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66706: LD_ADDR_VAR 0 2
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 3
66719: PUSH
66720: LD_INT 4
66722: PUSH
66723: LD_INT 5
66725: PUSH
66726: LD_INT 6
66728: PUSH
66729: LD_INT 7
66731: PUSH
66732: LD_INT 8
66734: PUSH
66735: LD_INT 9
66737: PUSH
66738: LD_INT 10
66740: PUSH
66741: LD_INT 11
66743: PUSH
66744: LD_INT 12
66746: PUSH
66747: LD_INT 13
66749: PUSH
66750: LD_INT 14
66752: PUSH
66753: LD_INT 15
66755: PUSH
66756: LD_INT 16
66758: PUSH
66759: LD_INT 17
66761: PUSH
66762: LD_INT 18
66764: PUSH
66765: LD_INT 19
66767: PUSH
66768: LD_INT 20
66770: PUSH
66771: LD_INT 21
66773: PUSH
66774: LD_INT 22
66776: PUSH
66777: LD_INT 23
66779: PUSH
66780: LD_INT 24
66782: PUSH
66783: LD_INT 25
66785: PUSH
66786: LD_INT 26
66788: PUSH
66789: LD_INT 27
66791: PUSH
66792: LD_INT 28
66794: PUSH
66795: LD_INT 29
66797: PUSH
66798: LD_INT 30
66800: PUSH
66801: LD_INT 31
66803: PUSH
66804: LD_INT 32
66806: PUSH
66807: LD_INT 33
66809: PUSH
66810: LD_INT 34
66812: PUSH
66813: LD_INT 35
66815: PUSH
66816: LD_INT 36
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 101
66859: PUSH
66860: LD_INT 102
66862: PUSH
66863: LD_INT 103
66865: PUSH
66866: LD_INT 104
66868: PUSH
66869: LD_INT 105
66871: PUSH
66872: LD_INT 106
66874: PUSH
66875: LD_INT 107
66877: PUSH
66878: LD_INT 108
66880: PUSH
66881: LD_INT 109
66883: PUSH
66884: LD_INT 110
66886: PUSH
66887: LD_INT 111
66889: PUSH
66890: LD_INT 112
66892: PUSH
66893: LD_INT 113
66895: PUSH
66896: LD_INT 114
66898: PUSH
66899: LD_INT 115
66901: PUSH
66902: LD_INT 116
66904: PUSH
66905: LD_INT 117
66907: PUSH
66908: LD_INT 118
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: ST_TO_ADDR
// if result then
66935: LD_VAR 0 2
66939: IFFALSE 67725
// begin normal :=  ;
66941: LD_ADDR_VAR 0 5
66945: PUSH
66946: LD_STRING 
66948: ST_TO_ADDR
// hardcore :=  ;
66949: LD_ADDR_VAR 0 6
66953: PUSH
66954: LD_STRING 
66956: ST_TO_ADDR
// active :=  ;
66957: LD_ADDR_VAR 0 7
66961: PUSH
66962: LD_STRING 
66964: ST_TO_ADDR
// for i = 1 to normalCounter do
66965: LD_ADDR_VAR 0 8
66969: PUSH
66970: DOUBLE
66971: LD_INT 1
66973: DEC
66974: ST_TO_ADDR
66975: LD_EXP 47
66979: PUSH
66980: FOR_TO
66981: IFFALSE 67082
// begin tmp := 0 ;
66983: LD_ADDR_VAR 0 3
66987: PUSH
66988: LD_STRING 0
66990: ST_TO_ADDR
// if result [ 1 ] then
66991: LD_VAR 0 2
66995: PUSH
66996: LD_INT 1
66998: ARRAY
66999: IFFALSE 67064
// if result [ 1 ] [ 1 ] = i then
67001: LD_VAR 0 2
67005: PUSH
67006: LD_INT 1
67008: ARRAY
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: PUSH
67014: LD_VAR 0 8
67018: EQUAL
67019: IFFALSE 67064
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67021: LD_ADDR_VAR 0 2
67025: PUSH
67026: LD_VAR 0 2
67030: PPUSH
67031: LD_INT 1
67033: PPUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_INT 1
67041: ARRAY
67042: PPUSH
67043: LD_INT 1
67045: PPUSH
67046: CALL_OW 3
67050: PPUSH
67051: CALL_OW 1
67055: ST_TO_ADDR
// tmp := 1 ;
67056: LD_ADDR_VAR 0 3
67060: PUSH
67061: LD_STRING 1
67063: ST_TO_ADDR
// end ; normal := normal & tmp ;
67064: LD_ADDR_VAR 0 5
67068: PUSH
67069: LD_VAR 0 5
67073: PUSH
67074: LD_VAR 0 3
67078: STR
67079: ST_TO_ADDR
// end ;
67080: GO 66980
67082: POP
67083: POP
// for i = 1 to hardcoreCounter do
67084: LD_ADDR_VAR 0 8
67088: PUSH
67089: DOUBLE
67090: LD_INT 1
67092: DEC
67093: ST_TO_ADDR
67094: LD_EXP 48
67098: PUSH
67099: FOR_TO
67100: IFFALSE 67205
// begin tmp := 0 ;
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: LD_STRING 0
67109: ST_TO_ADDR
// if result [ 2 ] then
67110: LD_VAR 0 2
67114: PUSH
67115: LD_INT 2
67117: ARRAY
67118: IFFALSE 67187
// if result [ 2 ] [ 1 ] = 100 + i then
67120: LD_VAR 0 2
67124: PUSH
67125: LD_INT 2
67127: ARRAY
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: PUSH
67133: LD_INT 100
67135: PUSH
67136: LD_VAR 0 8
67140: PLUS
67141: EQUAL
67142: IFFALSE 67187
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67144: LD_ADDR_VAR 0 2
67148: PUSH
67149: LD_VAR 0 2
67153: PPUSH
67154: LD_INT 2
67156: PPUSH
67157: LD_VAR 0 2
67161: PUSH
67162: LD_INT 2
67164: ARRAY
67165: PPUSH
67166: LD_INT 1
67168: PPUSH
67169: CALL_OW 3
67173: PPUSH
67174: CALL_OW 1
67178: ST_TO_ADDR
// tmp := 1 ;
67179: LD_ADDR_VAR 0 3
67183: PUSH
67184: LD_STRING 1
67186: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67187: LD_ADDR_VAR 0 6
67191: PUSH
67192: LD_VAR 0 6
67196: PUSH
67197: LD_VAR 0 3
67201: STR
67202: ST_TO_ADDR
// end ;
67203: GO 67099
67205: POP
67206: POP
// if isGameLoad then
67207: LD_VAR 0 1
67211: IFFALSE 67686
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67213: LD_ADDR_VAR 0 4
67217: PUSH
67218: LD_EXP 51
67222: PUSH
67223: LD_EXP 50
67227: PUSH
67228: LD_EXP 52
67232: PUSH
67233: LD_EXP 49
67237: PUSH
67238: LD_EXP 53
67242: PUSH
67243: LD_EXP 54
67247: PUSH
67248: LD_EXP 55
67252: PUSH
67253: LD_EXP 56
67257: PUSH
67258: LD_EXP 57
67262: PUSH
67263: LD_EXP 58
67267: PUSH
67268: LD_EXP 59
67272: PUSH
67273: LD_EXP 60
67277: PUSH
67278: LD_EXP 61
67282: PUSH
67283: LD_EXP 62
67287: PUSH
67288: LD_EXP 70
67292: PUSH
67293: LD_EXP 71
67297: PUSH
67298: LD_EXP 72
67302: PUSH
67303: LD_EXP 73
67307: PUSH
67308: LD_EXP 75
67312: PUSH
67313: LD_EXP 76
67317: PUSH
67318: LD_EXP 77
67322: PUSH
67323: LD_EXP 80
67327: PUSH
67328: LD_EXP 82
67332: PUSH
67333: LD_EXP 83
67337: PUSH
67338: LD_EXP 84
67342: PUSH
67343: LD_EXP 86
67347: PUSH
67348: LD_EXP 87
67352: PUSH
67353: LD_EXP 90
67357: PUSH
67358: LD_EXP 91
67362: PUSH
67363: LD_EXP 92
67367: PUSH
67368: LD_EXP 93
67372: PUSH
67373: LD_EXP 94
67377: PUSH
67378: LD_EXP 95
67382: PUSH
67383: LD_EXP 96
67387: PUSH
67388: LD_EXP 97
67392: PUSH
67393: LD_EXP 98
67397: PUSH
67398: LD_EXP 63
67402: PUSH
67403: LD_EXP 64
67407: PUSH
67408: LD_EXP 67
67412: PUSH
67413: LD_EXP 68
67417: PUSH
67418: LD_EXP 69
67422: PUSH
67423: LD_EXP 65
67427: PUSH
67428: LD_EXP 66
67432: PUSH
67433: LD_EXP 74
67437: PUSH
67438: LD_EXP 78
67442: PUSH
67443: LD_EXP 79
67447: PUSH
67448: LD_EXP 81
67452: PUSH
67453: LD_EXP 85
67457: PUSH
67458: LD_EXP 88
67462: PUSH
67463: LD_EXP 89
67467: PUSH
67468: LD_EXP 99
67472: PUSH
67473: LD_EXP 100
67477: PUSH
67478: LD_EXP 101
67482: PUSH
67483: LD_EXP 102
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: ST_TO_ADDR
// tmp :=  ;
67544: LD_ADDR_VAR 0 3
67548: PUSH
67549: LD_STRING 
67551: ST_TO_ADDR
// for i = 1 to normalCounter do
67552: LD_ADDR_VAR 0 8
67556: PUSH
67557: DOUBLE
67558: LD_INT 1
67560: DEC
67561: ST_TO_ADDR
67562: LD_EXP 47
67566: PUSH
67567: FOR_TO
67568: IFFALSE 67604
// begin if flags [ i ] then
67570: LD_VAR 0 4
67574: PUSH
67575: LD_VAR 0 8
67579: ARRAY
67580: IFFALSE 67602
// tmp := tmp & i & ; ;
67582: LD_ADDR_VAR 0 3
67586: PUSH
67587: LD_VAR 0 3
67591: PUSH
67592: LD_VAR 0 8
67596: STR
67597: PUSH
67598: LD_STRING ;
67600: STR
67601: ST_TO_ADDR
// end ;
67602: GO 67567
67604: POP
67605: POP
// for i = 1 to hardcoreCounter do
67606: LD_ADDR_VAR 0 8
67610: PUSH
67611: DOUBLE
67612: LD_INT 1
67614: DEC
67615: ST_TO_ADDR
67616: LD_EXP 48
67620: PUSH
67621: FOR_TO
67622: IFFALSE 67668
// begin if flags [ normalCounter + i ] then
67624: LD_VAR 0 4
67628: PUSH
67629: LD_EXP 47
67633: PUSH
67634: LD_VAR 0 8
67638: PLUS
67639: ARRAY
67640: IFFALSE 67666
// tmp := tmp & ( 100 + i ) & ; ;
67642: LD_ADDR_VAR 0 3
67646: PUSH
67647: LD_VAR 0 3
67651: PUSH
67652: LD_INT 100
67654: PUSH
67655: LD_VAR 0 8
67659: PLUS
67660: STR
67661: PUSH
67662: LD_STRING ;
67664: STR
67665: ST_TO_ADDR
// end ;
67666: GO 67621
67668: POP
67669: POP
// if tmp then
67670: LD_VAR 0 3
67674: IFFALSE 67686
// active := tmp ;
67676: LD_ADDR_VAR 0 7
67680: PUSH
67681: LD_VAR 0 3
67685: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67686: LD_STRING getStreamItemsFromMission("
67688: PUSH
67689: LD_VAR 0 5
67693: STR
67694: PUSH
67695: LD_STRING ","
67697: STR
67698: PUSH
67699: LD_VAR 0 6
67703: STR
67704: PUSH
67705: LD_STRING ","
67707: STR
67708: PUSH
67709: LD_VAR 0 7
67713: STR
67714: PUSH
67715: LD_STRING ")
67717: STR
67718: PPUSH
67719: CALL_OW 559
// end else
67723: GO 67732
// ToLua ( getStreamItemsFromMission("","","") ) ;
67725: LD_STRING getStreamItemsFromMission("","","")
67727: PPUSH
67728: CALL_OW 559
// end ;
67732: LD_VAR 0 2
67736: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67737: LD_EXP 46
67741: PUSH
67742: LD_EXP 51
67746: AND
67747: IFFALSE 67871
67749: GO 67751
67751: DISABLE
67752: LD_INT 0
67754: PPUSH
67755: PPUSH
// begin enable ;
67756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67757: LD_ADDR_VAR 0 2
67761: PUSH
67762: LD_INT 22
67764: PUSH
67765: LD_OWVAR 2
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: LD_INT 34
67779: PUSH
67780: LD_INT 7
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 34
67789: PUSH
67790: LD_INT 45
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 34
67799: PUSH
67800: LD_INT 28
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 34
67809: PUSH
67810: LD_INT 47
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PPUSH
67828: CALL_OW 69
67832: ST_TO_ADDR
// if not tmp then
67833: LD_VAR 0 2
67837: NOT
67838: IFFALSE 67842
// exit ;
67840: GO 67871
// for i in tmp do
67842: LD_ADDR_VAR 0 1
67846: PUSH
67847: LD_VAR 0 2
67851: PUSH
67852: FOR_IN
67853: IFFALSE 67869
// begin SetLives ( i , 0 ) ;
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_INT 0
67862: PPUSH
67863: CALL_OW 234
// end ;
67867: GO 67852
67869: POP
67870: POP
// end ;
67871: PPOPN 2
67873: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67874: LD_EXP 46
67878: PUSH
67879: LD_EXP 52
67883: AND
67884: IFFALSE 67968
67886: GO 67888
67888: DISABLE
67889: LD_INT 0
67891: PPUSH
67892: PPUSH
// begin enable ;
67893: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67894: LD_ADDR_VAR 0 2
67898: PUSH
67899: LD_INT 22
67901: PUSH
67902: LD_OWVAR 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 32
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PPUSH
67925: CALL_OW 69
67929: ST_TO_ADDR
// if not tmp then
67930: LD_VAR 0 2
67934: NOT
67935: IFFALSE 67939
// exit ;
67937: GO 67968
// for i in tmp do
67939: LD_ADDR_VAR 0 1
67943: PUSH
67944: LD_VAR 0 2
67948: PUSH
67949: FOR_IN
67950: IFFALSE 67966
// begin SetLives ( i , 0 ) ;
67952: LD_VAR 0 1
67956: PPUSH
67957: LD_INT 0
67959: PPUSH
67960: CALL_OW 234
// end ;
67964: GO 67949
67966: POP
67967: POP
// end ;
67968: PPOPN 2
67970: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67971: LD_EXP 46
67975: PUSH
67976: LD_EXP 49
67980: AND
67981: IFFALSE 68074
67983: GO 67985
67985: DISABLE
67986: LD_INT 0
67988: PPUSH
// begin enable ;
67989: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67990: LD_ADDR_VAR 0 1
67994: PUSH
67995: LD_INT 22
67997: PUSH
67998: LD_OWVAR 2
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: LD_INT 25
68012: PUSH
68013: LD_INT 5
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 25
68022: PUSH
68023: LD_INT 9
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 25
68032: PUSH
68033: LD_INT 8
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PPUSH
68050: CALL_OW 69
68054: PUSH
68055: FOR_IN
68056: IFFALSE 68072
// begin SetClass ( i , 1 ) ;
68058: LD_VAR 0 1
68062: PPUSH
68063: LD_INT 1
68065: PPUSH
68066: CALL_OW 336
// end ;
68070: GO 68055
68072: POP
68073: POP
// end ;
68074: PPOPN 1
68076: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68077: LD_EXP 46
68081: PUSH
68082: LD_EXP 50
68086: AND
68087: PUSH
68088: LD_OWVAR 65
68092: PUSH
68093: LD_INT 7
68095: LESS
68096: AND
68097: IFFALSE 68111
68099: GO 68101
68101: DISABLE
// begin enable ;
68102: ENABLE
// game_speed := 7 ;
68103: LD_ADDR_OWVAR 65
68107: PUSH
68108: LD_INT 7
68110: ST_TO_ADDR
// end ;
68111: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68112: LD_EXP 46
68116: PUSH
68117: LD_EXP 53
68121: AND
68122: IFFALSE 68324
68124: GO 68126
68126: DISABLE
68127: LD_INT 0
68129: PPUSH
68130: PPUSH
68131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68132: LD_ADDR_VAR 0 3
68136: PUSH
68137: LD_INT 81
68139: PUSH
68140: LD_OWVAR 2
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 21
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PPUSH
68163: CALL_OW 69
68167: ST_TO_ADDR
// if not tmp then
68168: LD_VAR 0 3
68172: NOT
68173: IFFALSE 68177
// exit ;
68175: GO 68324
// if tmp > 5 then
68177: LD_VAR 0 3
68181: PUSH
68182: LD_INT 5
68184: GREATER
68185: IFFALSE 68197
// k := 5 else
68187: LD_ADDR_VAR 0 2
68191: PUSH
68192: LD_INT 5
68194: ST_TO_ADDR
68195: GO 68207
// k := tmp ;
68197: LD_ADDR_VAR 0 2
68201: PUSH
68202: LD_VAR 0 3
68206: ST_TO_ADDR
// for i := 1 to k do
68207: LD_ADDR_VAR 0 1
68211: PUSH
68212: DOUBLE
68213: LD_INT 1
68215: DEC
68216: ST_TO_ADDR
68217: LD_VAR 0 2
68221: PUSH
68222: FOR_TO
68223: IFFALSE 68322
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68225: LD_VAR 0 3
68229: PUSH
68230: LD_VAR 0 1
68234: ARRAY
68235: PPUSH
68236: LD_VAR 0 1
68240: PUSH
68241: LD_INT 4
68243: MOD
68244: PUSH
68245: LD_INT 1
68247: PLUS
68248: PPUSH
68249: CALL_OW 259
68253: PUSH
68254: LD_INT 10
68256: LESS
68257: IFFALSE 68320
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68259: LD_VAR 0 3
68263: PUSH
68264: LD_VAR 0 1
68268: ARRAY
68269: PPUSH
68270: LD_VAR 0 1
68274: PUSH
68275: LD_INT 4
68277: MOD
68278: PUSH
68279: LD_INT 1
68281: PLUS
68282: PPUSH
68283: LD_VAR 0 3
68287: PUSH
68288: LD_VAR 0 1
68292: ARRAY
68293: PPUSH
68294: LD_VAR 0 1
68298: PUSH
68299: LD_INT 4
68301: MOD
68302: PUSH
68303: LD_INT 1
68305: PLUS
68306: PPUSH
68307: CALL_OW 259
68311: PUSH
68312: LD_INT 1
68314: PLUS
68315: PPUSH
68316: CALL_OW 237
68320: GO 68222
68322: POP
68323: POP
// end ;
68324: PPOPN 3
68326: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68327: LD_EXP 46
68331: PUSH
68332: LD_EXP 54
68336: AND
68337: IFFALSE 68357
68339: GO 68341
68341: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68342: LD_INT 4
68344: PPUSH
68345: LD_OWVAR 2
68349: PPUSH
68350: LD_INT 0
68352: PPUSH
68353: CALL_OW 324
68357: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68358: LD_EXP 46
68362: PUSH
68363: LD_EXP 83
68367: AND
68368: IFFALSE 68388
68370: GO 68372
68372: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68373: LD_INT 19
68375: PPUSH
68376: LD_OWVAR 2
68380: PPUSH
68381: LD_INT 0
68383: PPUSH
68384: CALL_OW 324
68388: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68389: LD_EXP 46
68393: PUSH
68394: LD_EXP 55
68398: AND
68399: IFFALSE 68501
68401: GO 68403
68403: DISABLE
68404: LD_INT 0
68406: PPUSH
68407: PPUSH
// begin enable ;
68408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68409: LD_ADDR_VAR 0 2
68413: PUSH
68414: LD_INT 22
68416: PUSH
68417: LD_OWVAR 2
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: LD_INT 34
68431: PUSH
68432: LD_INT 11
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 34
68441: PUSH
68442: LD_INT 30
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PPUSH
68458: CALL_OW 69
68462: ST_TO_ADDR
// if not tmp then
68463: LD_VAR 0 2
68467: NOT
68468: IFFALSE 68472
// exit ;
68470: GO 68501
// for i in tmp do
68472: LD_ADDR_VAR 0 1
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: FOR_IN
68483: IFFALSE 68499
// begin SetLives ( i , 0 ) ;
68485: LD_VAR 0 1
68489: PPUSH
68490: LD_INT 0
68492: PPUSH
68493: CALL_OW 234
// end ;
68497: GO 68482
68499: POP
68500: POP
// end ;
68501: PPOPN 2
68503: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68504: LD_EXP 46
68508: PUSH
68509: LD_EXP 56
68513: AND
68514: IFFALSE 68534
68516: GO 68518
68518: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68519: LD_INT 32
68521: PPUSH
68522: LD_OWVAR 2
68526: PPUSH
68527: LD_INT 0
68529: PPUSH
68530: CALL_OW 324
68534: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68535: LD_EXP 46
68539: PUSH
68540: LD_EXP 57
68544: AND
68545: IFFALSE 68726
68547: GO 68549
68549: DISABLE
68550: LD_INT 0
68552: PPUSH
68553: PPUSH
68554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68555: LD_ADDR_VAR 0 2
68559: PUSH
68560: LD_INT 22
68562: PUSH
68563: LD_OWVAR 2
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 33
68574: PUSH
68575: LD_INT 3
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PPUSH
68586: CALL_OW 69
68590: ST_TO_ADDR
// if not tmp then
68591: LD_VAR 0 2
68595: NOT
68596: IFFALSE 68600
// exit ;
68598: GO 68726
// side := 0 ;
68600: LD_ADDR_VAR 0 3
68604: PUSH
68605: LD_INT 0
68607: ST_TO_ADDR
// for i := 1 to 8 do
68608: LD_ADDR_VAR 0 1
68612: PUSH
68613: DOUBLE
68614: LD_INT 1
68616: DEC
68617: ST_TO_ADDR
68618: LD_INT 8
68620: PUSH
68621: FOR_TO
68622: IFFALSE 68670
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68624: LD_OWVAR 2
68628: PUSH
68629: LD_VAR 0 1
68633: NONEQUAL
68634: PUSH
68635: LD_OWVAR 2
68639: PPUSH
68640: LD_VAR 0 1
68644: PPUSH
68645: CALL_OW 81
68649: PUSH
68650: LD_INT 2
68652: EQUAL
68653: AND
68654: IFFALSE 68668
// begin side := i ;
68656: LD_ADDR_VAR 0 3
68660: PUSH
68661: LD_VAR 0 1
68665: ST_TO_ADDR
// break ;
68666: GO 68670
// end ;
68668: GO 68621
68670: POP
68671: POP
// if not side then
68672: LD_VAR 0 3
68676: NOT
68677: IFFALSE 68681
// exit ;
68679: GO 68726
// for i := 1 to tmp do
68681: LD_ADDR_VAR 0 1
68685: PUSH
68686: DOUBLE
68687: LD_INT 1
68689: DEC
68690: ST_TO_ADDR
68691: LD_VAR 0 2
68695: PUSH
68696: FOR_TO
68697: IFFALSE 68724
// if Prob ( 60 ) then
68699: LD_INT 60
68701: PPUSH
68702: CALL_OW 13
68706: IFFALSE 68722
// SetSide ( i , side ) ;
68708: LD_VAR 0 1
68712: PPUSH
68713: LD_VAR 0 3
68717: PPUSH
68718: CALL_OW 235
68722: GO 68696
68724: POP
68725: POP
// end ;
68726: PPOPN 3
68728: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68729: LD_EXP 46
68733: PUSH
68734: LD_EXP 59
68738: AND
68739: IFFALSE 68858
68741: GO 68743
68743: DISABLE
68744: LD_INT 0
68746: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68747: LD_ADDR_VAR 0 1
68751: PUSH
68752: LD_INT 22
68754: PUSH
68755: LD_OWVAR 2
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 21
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 3
68776: PUSH
68777: LD_INT 23
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: PPUSH
68796: CALL_OW 69
68800: PUSH
68801: FOR_IN
68802: IFFALSE 68856
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68804: LD_VAR 0 1
68808: PPUSH
68809: CALL_OW 257
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: LD_INT 2
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 4
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: IN
68832: IFFALSE 68854
// SetClass ( un , rand ( 1 , 4 ) ) ;
68834: LD_VAR 0 1
68838: PPUSH
68839: LD_INT 1
68841: PPUSH
68842: LD_INT 4
68844: PPUSH
68845: CALL_OW 12
68849: PPUSH
68850: CALL_OW 336
68854: GO 68801
68856: POP
68857: POP
// end ;
68858: PPOPN 1
68860: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68861: LD_EXP 46
68865: PUSH
68866: LD_EXP 58
68870: AND
68871: IFFALSE 68950
68873: GO 68875
68875: DISABLE
68876: LD_INT 0
68878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68879: LD_ADDR_VAR 0 1
68883: PUSH
68884: LD_INT 22
68886: PUSH
68887: LD_OWVAR 2
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 21
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PPUSH
68910: CALL_OW 69
68914: ST_TO_ADDR
// if not tmp then
68915: LD_VAR 0 1
68919: NOT
68920: IFFALSE 68924
// exit ;
68922: GO 68950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68924: LD_VAR 0 1
68928: PUSH
68929: LD_INT 1
68931: PPUSH
68932: LD_VAR 0 1
68936: PPUSH
68937: CALL_OW 12
68941: ARRAY
68942: PPUSH
68943: LD_INT 100
68945: PPUSH
68946: CALL_OW 234
// end ;
68950: PPOPN 1
68952: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68953: LD_EXP 46
68957: PUSH
68958: LD_EXP 60
68962: AND
68963: IFFALSE 69061
68965: GO 68967
68967: DISABLE
68968: LD_INT 0
68970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68971: LD_ADDR_VAR 0 1
68975: PUSH
68976: LD_INT 22
68978: PUSH
68979: LD_OWVAR 2
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 21
68990: PUSH
68991: LD_INT 1
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PPUSH
69002: CALL_OW 69
69006: ST_TO_ADDR
// if not tmp then
69007: LD_VAR 0 1
69011: NOT
69012: IFFALSE 69016
// exit ;
69014: GO 69061
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69016: LD_VAR 0 1
69020: PUSH
69021: LD_INT 1
69023: PPUSH
69024: LD_VAR 0 1
69028: PPUSH
69029: CALL_OW 12
69033: ARRAY
69034: PPUSH
69035: LD_INT 1
69037: PPUSH
69038: LD_INT 4
69040: PPUSH
69041: CALL_OW 12
69045: PPUSH
69046: LD_INT 3000
69048: PPUSH
69049: LD_INT 9000
69051: PPUSH
69052: CALL_OW 12
69056: PPUSH
69057: CALL_OW 492
// end ;
69061: PPOPN 1
69063: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69064: LD_EXP 46
69068: PUSH
69069: LD_EXP 61
69073: AND
69074: IFFALSE 69094
69076: GO 69078
69078: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69079: LD_INT 1
69081: PPUSH
69082: LD_OWVAR 2
69086: PPUSH
69087: LD_INT 0
69089: PPUSH
69090: CALL_OW 324
69094: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69095: LD_EXP 46
69099: PUSH
69100: LD_EXP 62
69104: AND
69105: IFFALSE 69188
69107: GO 69109
69109: DISABLE
69110: LD_INT 0
69112: PPUSH
69113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69114: LD_ADDR_VAR 0 2
69118: PUSH
69119: LD_INT 22
69121: PUSH
69122: LD_OWVAR 2
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 21
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PPUSH
69145: CALL_OW 69
69149: ST_TO_ADDR
// if not tmp then
69150: LD_VAR 0 2
69154: NOT
69155: IFFALSE 69159
// exit ;
69157: GO 69188
// for i in tmp do
69159: LD_ADDR_VAR 0 1
69163: PUSH
69164: LD_VAR 0 2
69168: PUSH
69169: FOR_IN
69170: IFFALSE 69186
// SetBLevel ( i , 10 ) ;
69172: LD_VAR 0 1
69176: PPUSH
69177: LD_INT 10
69179: PPUSH
69180: CALL_OW 241
69184: GO 69169
69186: POP
69187: POP
// end ;
69188: PPOPN 2
69190: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69191: LD_EXP 46
69195: PUSH
69196: LD_EXP 63
69200: AND
69201: IFFALSE 69312
69203: GO 69205
69205: DISABLE
69206: LD_INT 0
69208: PPUSH
69209: PPUSH
69210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69211: LD_ADDR_VAR 0 3
69215: PUSH
69216: LD_INT 22
69218: PUSH
69219: LD_OWVAR 2
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 25
69230: PUSH
69231: LD_INT 1
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PPUSH
69242: CALL_OW 69
69246: ST_TO_ADDR
// if not tmp then
69247: LD_VAR 0 3
69251: NOT
69252: IFFALSE 69256
// exit ;
69254: GO 69312
// un := tmp [ rand ( 1 , tmp ) ] ;
69256: LD_ADDR_VAR 0 2
69260: PUSH
69261: LD_VAR 0 3
69265: PUSH
69266: LD_INT 1
69268: PPUSH
69269: LD_VAR 0 3
69273: PPUSH
69274: CALL_OW 12
69278: ARRAY
69279: ST_TO_ADDR
// if Crawls ( un ) then
69280: LD_VAR 0 2
69284: PPUSH
69285: CALL_OW 318
69289: IFFALSE 69300
// ComWalk ( un ) ;
69291: LD_VAR 0 2
69295: PPUSH
69296: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69300: LD_VAR 0 2
69304: PPUSH
69305: LD_INT 5
69307: PPUSH
69308: CALL_OW 336
// end ;
69312: PPOPN 3
69314: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69315: LD_EXP 46
69319: PUSH
69320: LD_EXP 64
69324: AND
69325: PUSH
69326: LD_OWVAR 67
69330: PUSH
69331: LD_INT 4
69333: LESS
69334: AND
69335: IFFALSE 69354
69337: GO 69339
69339: DISABLE
// begin Difficulty := Difficulty + 1 ;
69340: LD_ADDR_OWVAR 67
69344: PUSH
69345: LD_OWVAR 67
69349: PUSH
69350: LD_INT 1
69352: PLUS
69353: ST_TO_ADDR
// end ;
69354: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69355: LD_EXP 46
69359: PUSH
69360: LD_EXP 65
69364: AND
69365: IFFALSE 69468
69367: GO 69369
69369: DISABLE
69370: LD_INT 0
69372: PPUSH
// begin for i := 1 to 5 do
69373: LD_ADDR_VAR 0 1
69377: PUSH
69378: DOUBLE
69379: LD_INT 1
69381: DEC
69382: ST_TO_ADDR
69383: LD_INT 5
69385: PUSH
69386: FOR_TO
69387: IFFALSE 69466
// begin uc_nation := nation_nature ;
69389: LD_ADDR_OWVAR 21
69393: PUSH
69394: LD_INT 0
69396: ST_TO_ADDR
// uc_side := 0 ;
69397: LD_ADDR_OWVAR 20
69401: PUSH
69402: LD_INT 0
69404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69405: LD_ADDR_OWVAR 29
69409: PUSH
69410: LD_INT 12
69412: PUSH
69413: LD_INT 12
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: ST_TO_ADDR
// hc_agressivity := 20 ;
69420: LD_ADDR_OWVAR 35
69424: PUSH
69425: LD_INT 20
69427: ST_TO_ADDR
// hc_class := class_tiger ;
69428: LD_ADDR_OWVAR 28
69432: PUSH
69433: LD_INT 14
69435: ST_TO_ADDR
// hc_gallery :=  ;
69436: LD_ADDR_OWVAR 33
69440: PUSH
69441: LD_STRING 
69443: ST_TO_ADDR
// hc_name :=  ;
69444: LD_ADDR_OWVAR 26
69448: PUSH
69449: LD_STRING 
69451: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69452: CALL_OW 44
69456: PPUSH
69457: LD_INT 0
69459: PPUSH
69460: CALL_OW 51
// end ;
69464: GO 69386
69466: POP
69467: POP
// end ;
69468: PPOPN 1
69470: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69471: LD_EXP 46
69475: PUSH
69476: LD_EXP 66
69480: AND
69481: IFFALSE 69490
69483: GO 69485
69485: DISABLE
// StreamSibBomb ;
69486: CALL 69491 0 0
69490: END
// export function StreamSibBomb ; var i , x , y ; begin
69491: LD_INT 0
69493: PPUSH
69494: PPUSH
69495: PPUSH
69496: PPUSH
// result := false ;
69497: LD_ADDR_VAR 0 1
69501: PUSH
69502: LD_INT 0
69504: ST_TO_ADDR
// for i := 1 to 16 do
69505: LD_ADDR_VAR 0 2
69509: PUSH
69510: DOUBLE
69511: LD_INT 1
69513: DEC
69514: ST_TO_ADDR
69515: LD_INT 16
69517: PUSH
69518: FOR_TO
69519: IFFALSE 69718
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69521: LD_ADDR_VAR 0 3
69525: PUSH
69526: LD_INT 10
69528: PUSH
69529: LD_INT 20
69531: PUSH
69532: LD_INT 30
69534: PUSH
69535: LD_INT 40
69537: PUSH
69538: LD_INT 50
69540: PUSH
69541: LD_INT 60
69543: PUSH
69544: LD_INT 70
69546: PUSH
69547: LD_INT 80
69549: PUSH
69550: LD_INT 90
69552: PUSH
69553: LD_INT 100
69555: PUSH
69556: LD_INT 110
69558: PUSH
69559: LD_INT 120
69561: PUSH
69562: LD_INT 130
69564: PUSH
69565: LD_INT 140
69567: PUSH
69568: LD_INT 150
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PPUSH
69591: LD_INT 15
69593: PPUSH
69594: CALL_OW 12
69598: ARRAY
69599: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69600: LD_ADDR_VAR 0 4
69604: PUSH
69605: LD_INT 10
69607: PUSH
69608: LD_INT 20
69610: PUSH
69611: LD_INT 30
69613: PUSH
69614: LD_INT 40
69616: PUSH
69617: LD_INT 50
69619: PUSH
69620: LD_INT 60
69622: PUSH
69623: LD_INT 70
69625: PUSH
69626: LD_INT 80
69628: PUSH
69629: LD_INT 90
69631: PUSH
69632: LD_INT 100
69634: PUSH
69635: LD_INT 110
69637: PUSH
69638: LD_INT 120
69640: PUSH
69641: LD_INT 130
69643: PUSH
69644: LD_INT 140
69646: PUSH
69647: LD_INT 150
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PPUSH
69670: LD_INT 15
69672: PPUSH
69673: CALL_OW 12
69677: ARRAY
69678: ST_TO_ADDR
// if ValidHex ( x , y ) then
69679: LD_VAR 0 3
69683: PPUSH
69684: LD_VAR 0 4
69688: PPUSH
69689: CALL_OW 488
69693: IFFALSE 69716
// begin result := [ x , y ] ;
69695: LD_ADDR_VAR 0 1
69699: PUSH
69700: LD_VAR 0 3
69704: PUSH
69705: LD_VAR 0 4
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: ST_TO_ADDR
// break ;
69714: GO 69718
// end ; end ;
69716: GO 69518
69718: POP
69719: POP
// if result then
69720: LD_VAR 0 1
69724: IFFALSE 69784
// begin ToLua ( playSibBomb() ) ;
69726: LD_STRING playSibBomb()
69728: PPUSH
69729: CALL_OW 559
// wait ( 0 0$14 ) ;
69733: LD_INT 490
69735: PPUSH
69736: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69740: LD_VAR 0 1
69744: PUSH
69745: LD_INT 1
69747: ARRAY
69748: PPUSH
69749: LD_VAR 0 1
69753: PUSH
69754: LD_INT 2
69756: ARRAY
69757: PPUSH
69758: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69762: LD_VAR 0 1
69766: PUSH
69767: LD_INT 1
69769: ARRAY
69770: PPUSH
69771: LD_VAR 0 1
69775: PUSH
69776: LD_INT 2
69778: ARRAY
69779: PPUSH
69780: CALL_OW 429
// end ; end ;
69784: LD_VAR 0 1
69788: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69789: LD_EXP 46
69793: PUSH
69794: LD_EXP 68
69798: AND
69799: IFFALSE 69811
69801: GO 69803
69803: DISABLE
// YouLost (  ) ;
69804: LD_STRING 
69806: PPUSH
69807: CALL_OW 104
69811: END
// every 0 0$1 trigger StreamModeActive and sFog do
69812: LD_EXP 46
69816: PUSH
69817: LD_EXP 67
69821: AND
69822: IFFALSE 69836
69824: GO 69826
69826: DISABLE
// FogOff ( your_side ) ;
69827: LD_OWVAR 2
69831: PPUSH
69832: CALL_OW 344
69836: END
// every 0 0$1 trigger StreamModeActive and sSun do
69837: LD_EXP 46
69841: PUSH
69842: LD_EXP 69
69846: AND
69847: IFFALSE 69875
69849: GO 69851
69851: DISABLE
// begin solar_recharge_percent := 0 ;
69852: LD_ADDR_OWVAR 79
69856: PUSH
69857: LD_INT 0
69859: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69860: LD_INT 10500
69862: PPUSH
69863: CALL_OW 67
// solar_recharge_percent := 100 ;
69867: LD_ADDR_OWVAR 79
69871: PUSH
69872: LD_INT 100
69874: ST_TO_ADDR
// end ;
69875: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69876: LD_EXP 46
69880: PUSH
69881: LD_EXP 70
69885: AND
69886: IFFALSE 70125
69888: GO 69890
69890: DISABLE
69891: LD_INT 0
69893: PPUSH
69894: PPUSH
69895: PPUSH
// begin tmp := [ ] ;
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: EMPTY
69902: ST_TO_ADDR
// for i := 1 to 6 do
69903: LD_ADDR_VAR 0 1
69907: PUSH
69908: DOUBLE
69909: LD_INT 1
69911: DEC
69912: ST_TO_ADDR
69913: LD_INT 6
69915: PUSH
69916: FOR_TO
69917: IFFALSE 70022
// begin uc_nation := nation_nature ;
69919: LD_ADDR_OWVAR 21
69923: PUSH
69924: LD_INT 0
69926: ST_TO_ADDR
// uc_side := 0 ;
69927: LD_ADDR_OWVAR 20
69931: PUSH
69932: LD_INT 0
69934: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69935: LD_ADDR_OWVAR 29
69939: PUSH
69940: LD_INT 12
69942: PUSH
69943: LD_INT 12
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: ST_TO_ADDR
// hc_agressivity := 20 ;
69950: LD_ADDR_OWVAR 35
69954: PUSH
69955: LD_INT 20
69957: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69958: LD_ADDR_OWVAR 28
69962: PUSH
69963: LD_INT 17
69965: ST_TO_ADDR
// hc_gallery :=  ;
69966: LD_ADDR_OWVAR 33
69970: PUSH
69971: LD_STRING 
69973: ST_TO_ADDR
// hc_name :=  ;
69974: LD_ADDR_OWVAR 26
69978: PUSH
69979: LD_STRING 
69981: ST_TO_ADDR
// un := CreateHuman ;
69982: LD_ADDR_VAR 0 2
69986: PUSH
69987: CALL_OW 44
69991: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69992: LD_VAR 0 2
69996: PPUSH
69997: LD_INT 1
69999: PPUSH
70000: CALL_OW 51
// tmp := tmp ^ un ;
70004: LD_ADDR_VAR 0 3
70008: PUSH
70009: LD_VAR 0 3
70013: PUSH
70014: LD_VAR 0 2
70018: ADD
70019: ST_TO_ADDR
// end ;
70020: GO 69916
70022: POP
70023: POP
// repeat wait ( 0 0$1 ) ;
70024: LD_INT 35
70026: PPUSH
70027: CALL_OW 67
// for un in tmp do
70031: LD_ADDR_VAR 0 2
70035: PUSH
70036: LD_VAR 0 3
70040: PUSH
70041: FOR_IN
70042: IFFALSE 70116
// begin if IsDead ( un ) then
70044: LD_VAR 0 2
70048: PPUSH
70049: CALL_OW 301
70053: IFFALSE 70073
// begin tmp := tmp diff un ;
70055: LD_ADDR_VAR 0 3
70059: PUSH
70060: LD_VAR 0 3
70064: PUSH
70065: LD_VAR 0 2
70069: DIFF
70070: ST_TO_ADDR
// continue ;
70071: GO 70041
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70073: LD_VAR 0 2
70077: PPUSH
70078: LD_INT 3
70080: PUSH
70081: LD_INT 22
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PPUSH
70095: CALL_OW 69
70099: PPUSH
70100: LD_VAR 0 2
70104: PPUSH
70105: CALL_OW 74
70109: PPUSH
70110: CALL_OW 115
// end ;
70114: GO 70041
70116: POP
70117: POP
// until not tmp ;
70118: LD_VAR 0 3
70122: NOT
70123: IFFALSE 70024
// end ;
70125: PPOPN 3
70127: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70128: LD_EXP 46
70132: PUSH
70133: LD_EXP 71
70137: AND
70138: IFFALSE 70192
70140: GO 70142
70142: DISABLE
// begin ToLua ( displayTroll(); ) ;
70143: LD_STRING displayTroll();
70145: PPUSH
70146: CALL_OW 559
// wait ( 3 3$00 ) ;
70150: LD_INT 6300
70152: PPUSH
70153: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70157: LD_STRING hideTroll();
70159: PPUSH
70160: CALL_OW 559
// wait ( 1 1$00 ) ;
70164: LD_INT 2100
70166: PPUSH
70167: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70171: LD_STRING displayTroll();
70173: PPUSH
70174: CALL_OW 559
// wait ( 1 1$00 ) ;
70178: LD_INT 2100
70180: PPUSH
70181: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70185: LD_STRING hideTroll();
70187: PPUSH
70188: CALL_OW 559
// end ;
70192: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70193: LD_EXP 46
70197: PUSH
70198: LD_EXP 72
70202: AND
70203: IFFALSE 70266
70205: GO 70207
70207: DISABLE
70208: LD_INT 0
70210: PPUSH
// begin p := 0 ;
70211: LD_ADDR_VAR 0 1
70215: PUSH
70216: LD_INT 0
70218: ST_TO_ADDR
// repeat game_speed := 1 ;
70219: LD_ADDR_OWVAR 65
70223: PUSH
70224: LD_INT 1
70226: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70227: LD_INT 35
70229: PPUSH
70230: CALL_OW 67
// p := p + 1 ;
70234: LD_ADDR_VAR 0 1
70238: PUSH
70239: LD_VAR 0 1
70243: PUSH
70244: LD_INT 1
70246: PLUS
70247: ST_TO_ADDR
// until p >= 60 ;
70248: LD_VAR 0 1
70252: PUSH
70253: LD_INT 60
70255: GREATEREQUAL
70256: IFFALSE 70219
// game_speed := 4 ;
70258: LD_ADDR_OWVAR 65
70262: PUSH
70263: LD_INT 4
70265: ST_TO_ADDR
// end ;
70266: PPOPN 1
70268: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70269: LD_EXP 46
70273: PUSH
70274: LD_EXP 73
70278: AND
70279: IFFALSE 70425
70281: GO 70283
70283: DISABLE
70284: LD_INT 0
70286: PPUSH
70287: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70288: LD_ADDR_VAR 0 1
70292: PUSH
70293: LD_INT 22
70295: PUSH
70296: LD_OWVAR 2
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: LD_INT 30
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 30
70320: PUSH
70321: LD_INT 1
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: LIST
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PPUSH
70337: CALL_OW 69
70341: ST_TO_ADDR
// if not depot then
70342: LD_VAR 0 1
70346: NOT
70347: IFFALSE 70351
// exit ;
70349: GO 70425
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70351: LD_ADDR_VAR 0 2
70355: PUSH
70356: LD_VAR 0 1
70360: PUSH
70361: LD_INT 1
70363: PPUSH
70364: LD_VAR 0 1
70368: PPUSH
70369: CALL_OW 12
70373: ARRAY
70374: PPUSH
70375: CALL_OW 274
70379: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70380: LD_VAR 0 2
70384: PPUSH
70385: LD_INT 1
70387: PPUSH
70388: LD_INT 0
70390: PPUSH
70391: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70395: LD_VAR 0 2
70399: PPUSH
70400: LD_INT 2
70402: PPUSH
70403: LD_INT 0
70405: PPUSH
70406: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70410: LD_VAR 0 2
70414: PPUSH
70415: LD_INT 3
70417: PPUSH
70418: LD_INT 0
70420: PPUSH
70421: CALL_OW 277
// end ;
70425: PPOPN 2
70427: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70428: LD_EXP 46
70432: PUSH
70433: LD_EXP 74
70437: AND
70438: IFFALSE 70535
70440: GO 70442
70442: DISABLE
70443: LD_INT 0
70445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70446: LD_ADDR_VAR 0 1
70450: PUSH
70451: LD_INT 22
70453: PUSH
70454: LD_OWVAR 2
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 21
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: LD_INT 23
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: LIST
70494: PPUSH
70495: CALL_OW 69
70499: ST_TO_ADDR
// if not tmp then
70500: LD_VAR 0 1
70504: NOT
70505: IFFALSE 70509
// exit ;
70507: GO 70535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70509: LD_VAR 0 1
70513: PUSH
70514: LD_INT 1
70516: PPUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: CALL_OW 12
70526: ARRAY
70527: PPUSH
70528: LD_INT 200
70530: PPUSH
70531: CALL_OW 234
// end ;
70535: PPOPN 1
70537: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70538: LD_EXP 46
70542: PUSH
70543: LD_EXP 75
70547: AND
70548: IFFALSE 70627
70550: GO 70552
70552: DISABLE
70553: LD_INT 0
70555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70556: LD_ADDR_VAR 0 1
70560: PUSH
70561: LD_INT 22
70563: PUSH
70564: LD_OWVAR 2
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 21
70575: PUSH
70576: LD_INT 2
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PPUSH
70587: CALL_OW 69
70591: ST_TO_ADDR
// if not tmp then
70592: LD_VAR 0 1
70596: NOT
70597: IFFALSE 70601
// exit ;
70599: GO 70627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70601: LD_VAR 0 1
70605: PUSH
70606: LD_INT 1
70608: PPUSH
70609: LD_VAR 0 1
70613: PPUSH
70614: CALL_OW 12
70618: ARRAY
70619: PPUSH
70620: LD_INT 60
70622: PPUSH
70623: CALL_OW 234
// end ;
70627: PPOPN 1
70629: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70630: LD_EXP 46
70634: PUSH
70635: LD_EXP 76
70639: AND
70640: IFFALSE 70739
70642: GO 70644
70644: DISABLE
70645: LD_INT 0
70647: PPUSH
70648: PPUSH
// begin enable ;
70649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70650: LD_ADDR_VAR 0 1
70654: PUSH
70655: LD_INT 22
70657: PUSH
70658: LD_OWVAR 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 61
70669: PUSH
70670: EMPTY
70671: LIST
70672: PUSH
70673: LD_INT 33
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: LIST
70687: PPUSH
70688: CALL_OW 69
70692: ST_TO_ADDR
// if not tmp then
70693: LD_VAR 0 1
70697: NOT
70698: IFFALSE 70702
// exit ;
70700: GO 70739
// for i in tmp do
70702: LD_ADDR_VAR 0 2
70706: PUSH
70707: LD_VAR 0 1
70711: PUSH
70712: FOR_IN
70713: IFFALSE 70737
// if IsControledBy ( i ) then
70715: LD_VAR 0 2
70719: PPUSH
70720: CALL_OW 312
70724: IFFALSE 70735
// ComUnlink ( i ) ;
70726: LD_VAR 0 2
70730: PPUSH
70731: CALL_OW 136
70735: GO 70712
70737: POP
70738: POP
// end ;
70739: PPOPN 2
70741: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70742: LD_EXP 46
70746: PUSH
70747: LD_EXP 77
70751: AND
70752: IFFALSE 70892
70754: GO 70756
70756: DISABLE
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
// begin ToLua ( displayPowell(); ) ;
70761: LD_STRING displayPowell();
70763: PPUSH
70764: CALL_OW 559
// uc_side := 0 ;
70768: LD_ADDR_OWVAR 20
70772: PUSH
70773: LD_INT 0
70775: ST_TO_ADDR
// uc_nation := 2 ;
70776: LD_ADDR_OWVAR 21
70780: PUSH
70781: LD_INT 2
70783: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70784: LD_ADDR_OWVAR 37
70788: PUSH
70789: LD_INT 14
70791: ST_TO_ADDR
// vc_engine := engine_siberite ;
70792: LD_ADDR_OWVAR 39
70796: PUSH
70797: LD_INT 3
70799: ST_TO_ADDR
// vc_control := control_apeman ;
70800: LD_ADDR_OWVAR 38
70804: PUSH
70805: LD_INT 5
70807: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70808: LD_ADDR_OWVAR 40
70812: PUSH
70813: LD_INT 29
70815: ST_TO_ADDR
// un := CreateVehicle ;
70816: LD_ADDR_VAR 0 2
70820: PUSH
70821: CALL_OW 45
70825: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70826: LD_VAR 0 2
70830: PPUSH
70831: LD_INT 1
70833: PPUSH
70834: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70838: LD_INT 35
70840: PPUSH
70841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70845: LD_VAR 0 2
70849: PPUSH
70850: LD_INT 22
70852: PUSH
70853: LD_OWVAR 2
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PPUSH
70862: CALL_OW 69
70866: PPUSH
70867: LD_VAR 0 2
70871: PPUSH
70872: CALL_OW 74
70876: PPUSH
70877: CALL_OW 115
// until IsDead ( un ) ;
70881: LD_VAR 0 2
70885: PPUSH
70886: CALL_OW 301
70890: IFFALSE 70838
// end ;
70892: PPOPN 2
70894: END
// every 0 0$1 trigger StreamModeActive and sStu do
70895: LD_EXP 46
70899: PUSH
70900: LD_EXP 85
70904: AND
70905: IFFALSE 70921
70907: GO 70909
70909: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70910: LD_STRING displayStucuk();
70912: PPUSH
70913: CALL_OW 559
// ResetFog ;
70917: CALL_OW 335
// end ;
70921: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70922: LD_EXP 46
70926: PUSH
70927: LD_EXP 78
70931: AND
70932: IFFALSE 71073
70934: GO 70936
70936: DISABLE
70937: LD_INT 0
70939: PPUSH
70940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70941: LD_ADDR_VAR 0 2
70945: PUSH
70946: LD_INT 22
70948: PUSH
70949: LD_OWVAR 2
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 21
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PPUSH
70972: CALL_OW 69
70976: ST_TO_ADDR
// if not tmp then
70977: LD_VAR 0 2
70981: NOT
70982: IFFALSE 70986
// exit ;
70984: GO 71073
// un := tmp [ rand ( 1 , tmp ) ] ;
70986: LD_ADDR_VAR 0 1
70990: PUSH
70991: LD_VAR 0 2
70995: PUSH
70996: LD_INT 1
70998: PPUSH
70999: LD_VAR 0 2
71003: PPUSH
71004: CALL_OW 12
71008: ARRAY
71009: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71010: LD_VAR 0 1
71014: PPUSH
71015: LD_INT 0
71017: PPUSH
71018: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71022: LD_VAR 0 1
71026: PPUSH
71027: LD_OWVAR 3
71031: PUSH
71032: LD_VAR 0 1
71036: DIFF
71037: PPUSH
71038: LD_VAR 0 1
71042: PPUSH
71043: CALL_OW 74
71047: PPUSH
71048: CALL_OW 115
// wait ( 0 0$20 ) ;
71052: LD_INT 700
71054: PPUSH
71055: CALL_OW 67
// SetSide ( un , your_side ) ;
71059: LD_VAR 0 1
71063: PPUSH
71064: LD_OWVAR 2
71068: PPUSH
71069: CALL_OW 235
// end ;
71073: PPOPN 2
71075: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71076: LD_EXP 46
71080: PUSH
71081: LD_EXP 79
71085: AND
71086: IFFALSE 71192
71088: GO 71090
71090: DISABLE
71091: LD_INT 0
71093: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71094: LD_ADDR_VAR 0 1
71098: PUSH
71099: LD_INT 22
71101: PUSH
71102: LD_OWVAR 2
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 2
71113: PUSH
71114: LD_INT 30
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 30
71126: PUSH
71127: LD_INT 1
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: LIST
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PPUSH
71143: CALL_OW 69
71147: ST_TO_ADDR
// if not depot then
71148: LD_VAR 0 1
71152: NOT
71153: IFFALSE 71157
// exit ;
71155: GO 71192
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71157: LD_VAR 0 1
71161: PUSH
71162: LD_INT 1
71164: ARRAY
71165: PPUSH
71166: CALL_OW 250
71170: PPUSH
71171: LD_VAR 0 1
71175: PUSH
71176: LD_INT 1
71178: ARRAY
71179: PPUSH
71180: CALL_OW 251
71184: PPUSH
71185: LD_INT 70
71187: PPUSH
71188: CALL_OW 495
// end ;
71192: PPOPN 1
71194: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71195: LD_EXP 46
71199: PUSH
71200: LD_EXP 80
71204: AND
71205: IFFALSE 71416
71207: GO 71209
71209: DISABLE
71210: LD_INT 0
71212: PPUSH
71213: PPUSH
71214: PPUSH
71215: PPUSH
71216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71217: LD_ADDR_VAR 0 5
71221: PUSH
71222: LD_INT 22
71224: PUSH
71225: LD_OWVAR 2
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 21
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PPUSH
71248: CALL_OW 69
71252: ST_TO_ADDR
// if not tmp then
71253: LD_VAR 0 5
71257: NOT
71258: IFFALSE 71262
// exit ;
71260: GO 71416
// for i in tmp do
71262: LD_ADDR_VAR 0 1
71266: PUSH
71267: LD_VAR 0 5
71271: PUSH
71272: FOR_IN
71273: IFFALSE 71414
// begin d := rand ( 0 , 5 ) ;
71275: LD_ADDR_VAR 0 4
71279: PUSH
71280: LD_INT 0
71282: PPUSH
71283: LD_INT 5
71285: PPUSH
71286: CALL_OW 12
71290: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71291: LD_ADDR_VAR 0 2
71295: PUSH
71296: LD_VAR 0 1
71300: PPUSH
71301: CALL_OW 250
71305: PPUSH
71306: LD_VAR 0 4
71310: PPUSH
71311: LD_INT 3
71313: PPUSH
71314: LD_INT 12
71316: PPUSH
71317: CALL_OW 12
71321: PPUSH
71322: CALL_OW 272
71326: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71327: LD_ADDR_VAR 0 3
71331: PUSH
71332: LD_VAR 0 1
71336: PPUSH
71337: CALL_OW 251
71341: PPUSH
71342: LD_VAR 0 4
71346: PPUSH
71347: LD_INT 3
71349: PPUSH
71350: LD_INT 12
71352: PPUSH
71353: CALL_OW 12
71357: PPUSH
71358: CALL_OW 273
71362: ST_TO_ADDR
// if ValidHex ( x , y ) then
71363: LD_VAR 0 2
71367: PPUSH
71368: LD_VAR 0 3
71372: PPUSH
71373: CALL_OW 488
71377: IFFALSE 71412
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71379: LD_VAR 0 1
71383: PPUSH
71384: LD_VAR 0 2
71388: PPUSH
71389: LD_VAR 0 3
71393: PPUSH
71394: LD_INT 3
71396: PPUSH
71397: LD_INT 6
71399: PPUSH
71400: CALL_OW 12
71404: PPUSH
71405: LD_INT 1
71407: PPUSH
71408: CALL_OW 483
// end ;
71412: GO 71272
71414: POP
71415: POP
// end ;
71416: PPOPN 5
71418: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71419: LD_EXP 46
71423: PUSH
71424: LD_EXP 81
71428: AND
71429: IFFALSE 71523
71431: GO 71433
71433: DISABLE
71434: LD_INT 0
71436: PPUSH
71437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71438: LD_ADDR_VAR 0 2
71442: PUSH
71443: LD_INT 22
71445: PUSH
71446: LD_OWVAR 2
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 32
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 21
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: LIST
71479: PPUSH
71480: CALL_OW 69
71484: ST_TO_ADDR
// if not tmp then
71485: LD_VAR 0 2
71489: NOT
71490: IFFALSE 71494
// exit ;
71492: GO 71523
// for i in tmp do
71494: LD_ADDR_VAR 0 1
71498: PUSH
71499: LD_VAR 0 2
71503: PUSH
71504: FOR_IN
71505: IFFALSE 71521
// SetFuel ( i , 0 ) ;
71507: LD_VAR 0 1
71511: PPUSH
71512: LD_INT 0
71514: PPUSH
71515: CALL_OW 240
71519: GO 71504
71521: POP
71522: POP
// end ;
71523: PPOPN 2
71525: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71526: LD_EXP 46
71530: PUSH
71531: LD_EXP 82
71535: AND
71536: IFFALSE 71602
71538: GO 71540
71540: DISABLE
71541: LD_INT 0
71543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71544: LD_ADDR_VAR 0 1
71548: PUSH
71549: LD_INT 22
71551: PUSH
71552: LD_OWVAR 2
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 30
71563: PUSH
71564: LD_INT 29
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PPUSH
71575: CALL_OW 69
71579: ST_TO_ADDR
// if not tmp then
71580: LD_VAR 0 1
71584: NOT
71585: IFFALSE 71589
// exit ;
71587: GO 71602
// DestroyUnit ( tmp [ 1 ] ) ;
71589: LD_VAR 0 1
71593: PUSH
71594: LD_INT 1
71596: ARRAY
71597: PPUSH
71598: CALL_OW 65
// end ;
71602: PPOPN 1
71604: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71605: LD_EXP 46
71609: PUSH
71610: LD_EXP 84
71614: AND
71615: IFFALSE 71744
71617: GO 71619
71619: DISABLE
71620: LD_INT 0
71622: PPUSH
// begin uc_side := 0 ;
71623: LD_ADDR_OWVAR 20
71627: PUSH
71628: LD_INT 0
71630: ST_TO_ADDR
// uc_nation := nation_arabian ;
71631: LD_ADDR_OWVAR 21
71635: PUSH
71636: LD_INT 2
71638: ST_TO_ADDR
// hc_gallery :=  ;
71639: LD_ADDR_OWVAR 33
71643: PUSH
71644: LD_STRING 
71646: ST_TO_ADDR
// hc_name :=  ;
71647: LD_ADDR_OWVAR 26
71651: PUSH
71652: LD_STRING 
71654: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71655: LD_INT 1
71657: PPUSH
71658: LD_INT 11
71660: PPUSH
71661: LD_INT 10
71663: PPUSH
71664: CALL_OW 380
// un := CreateHuman ;
71668: LD_ADDR_VAR 0 1
71672: PUSH
71673: CALL_OW 44
71677: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71678: LD_VAR 0 1
71682: PPUSH
71683: LD_INT 1
71685: PPUSH
71686: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71690: LD_INT 35
71692: PPUSH
71693: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71697: LD_VAR 0 1
71701: PPUSH
71702: LD_INT 22
71704: PUSH
71705: LD_OWVAR 2
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PPUSH
71714: CALL_OW 69
71718: PPUSH
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 74
71728: PPUSH
71729: CALL_OW 115
// until IsDead ( un ) ;
71733: LD_VAR 0 1
71737: PPUSH
71738: CALL_OW 301
71742: IFFALSE 71690
// end ;
71744: PPOPN 1
71746: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71747: LD_EXP 46
71751: PUSH
71752: LD_EXP 86
71756: AND
71757: IFFALSE 71769
71759: GO 71761
71761: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71762: LD_STRING earthquake(getX(game), 0, 32)
71764: PPUSH
71765: CALL_OW 559
71769: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71770: LD_EXP 46
71774: PUSH
71775: LD_EXP 87
71779: AND
71780: IFFALSE 71871
71782: GO 71784
71784: DISABLE
71785: LD_INT 0
71787: PPUSH
// begin enable ;
71788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71789: LD_ADDR_VAR 0 1
71793: PUSH
71794: LD_INT 22
71796: PUSH
71797: LD_OWVAR 2
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 21
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 33
71818: PUSH
71819: LD_INT 3
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: PPUSH
71831: CALL_OW 69
71835: ST_TO_ADDR
// if not tmp then
71836: LD_VAR 0 1
71840: NOT
71841: IFFALSE 71845
// exit ;
71843: GO 71871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71845: LD_VAR 0 1
71849: PUSH
71850: LD_INT 1
71852: PPUSH
71853: LD_VAR 0 1
71857: PPUSH
71858: CALL_OW 12
71862: ARRAY
71863: PPUSH
71864: LD_INT 1
71866: PPUSH
71867: CALL_OW 234
// end ;
71871: PPOPN 1
71873: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71874: LD_EXP 46
71878: PUSH
71879: LD_EXP 88
71883: AND
71884: IFFALSE 72025
71886: GO 71888
71888: DISABLE
71889: LD_INT 0
71891: PPUSH
71892: PPUSH
71893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71894: LD_ADDR_VAR 0 3
71898: PUSH
71899: LD_INT 22
71901: PUSH
71902: LD_OWVAR 2
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 25
71913: PUSH
71914: LD_INT 1
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PPUSH
71925: CALL_OW 69
71929: ST_TO_ADDR
// if not tmp then
71930: LD_VAR 0 3
71934: NOT
71935: IFFALSE 71939
// exit ;
71937: GO 72025
// un := tmp [ rand ( 1 , tmp ) ] ;
71939: LD_ADDR_VAR 0 2
71943: PUSH
71944: LD_VAR 0 3
71948: PUSH
71949: LD_INT 1
71951: PPUSH
71952: LD_VAR 0 3
71956: PPUSH
71957: CALL_OW 12
71961: ARRAY
71962: ST_TO_ADDR
// if Crawls ( un ) then
71963: LD_VAR 0 2
71967: PPUSH
71968: CALL_OW 318
71972: IFFALSE 71983
// ComWalk ( un ) ;
71974: LD_VAR 0 2
71978: PPUSH
71979: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71983: LD_VAR 0 2
71987: PPUSH
71988: LD_INT 9
71990: PPUSH
71991: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71995: LD_INT 28
71997: PPUSH
71998: LD_OWVAR 2
72002: PPUSH
72003: LD_INT 2
72005: PPUSH
72006: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72010: LD_INT 29
72012: PPUSH
72013: LD_OWVAR 2
72017: PPUSH
72018: LD_INT 2
72020: PPUSH
72021: CALL_OW 322
// end ;
72025: PPOPN 3
72027: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72028: LD_EXP 46
72032: PUSH
72033: LD_EXP 89
72037: AND
72038: IFFALSE 72149
72040: GO 72042
72042: DISABLE
72043: LD_INT 0
72045: PPUSH
72046: PPUSH
72047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72048: LD_ADDR_VAR 0 3
72052: PUSH
72053: LD_INT 22
72055: PUSH
72056: LD_OWVAR 2
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 25
72067: PUSH
72068: LD_INT 1
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PPUSH
72079: CALL_OW 69
72083: ST_TO_ADDR
// if not tmp then
72084: LD_VAR 0 3
72088: NOT
72089: IFFALSE 72093
// exit ;
72091: GO 72149
// un := tmp [ rand ( 1 , tmp ) ] ;
72093: LD_ADDR_VAR 0 2
72097: PUSH
72098: LD_VAR 0 3
72102: PUSH
72103: LD_INT 1
72105: PPUSH
72106: LD_VAR 0 3
72110: PPUSH
72111: CALL_OW 12
72115: ARRAY
72116: ST_TO_ADDR
// if Crawls ( un ) then
72117: LD_VAR 0 2
72121: PPUSH
72122: CALL_OW 318
72126: IFFALSE 72137
// ComWalk ( un ) ;
72128: LD_VAR 0 2
72132: PPUSH
72133: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72137: LD_VAR 0 2
72141: PPUSH
72142: LD_INT 8
72144: PPUSH
72145: CALL_OW 336
// end ;
72149: PPOPN 3
72151: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72152: LD_EXP 46
72156: PUSH
72157: LD_EXP 90
72161: AND
72162: IFFALSE 72306
72164: GO 72166
72166: DISABLE
72167: LD_INT 0
72169: PPUSH
72170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72171: LD_ADDR_VAR 0 2
72175: PUSH
72176: LD_INT 22
72178: PUSH
72179: LD_OWVAR 2
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 21
72190: PUSH
72191: LD_INT 2
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 2
72200: PUSH
72201: LD_INT 34
72203: PUSH
72204: LD_INT 12
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 34
72213: PUSH
72214: LD_INT 51
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 34
72223: PUSH
72224: LD_INT 32
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: LIST
72241: PPUSH
72242: CALL_OW 69
72246: ST_TO_ADDR
// if not tmp then
72247: LD_VAR 0 2
72251: NOT
72252: IFFALSE 72256
// exit ;
72254: GO 72306
// for i in tmp do
72256: LD_ADDR_VAR 0 1
72260: PUSH
72261: LD_VAR 0 2
72265: PUSH
72266: FOR_IN
72267: IFFALSE 72304
// if GetCargo ( i , mat_artifact ) = 0 then
72269: LD_VAR 0 1
72273: PPUSH
72274: LD_INT 4
72276: PPUSH
72277: CALL_OW 289
72281: PUSH
72282: LD_INT 0
72284: EQUAL
72285: IFFALSE 72302
// SetCargo ( i , mat_siberit , 100 ) ;
72287: LD_VAR 0 1
72291: PPUSH
72292: LD_INT 3
72294: PPUSH
72295: LD_INT 100
72297: PPUSH
72298: CALL_OW 290
72302: GO 72266
72304: POP
72305: POP
// end ;
72306: PPOPN 2
72308: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72309: LD_EXP 46
72313: PUSH
72314: LD_EXP 91
72318: AND
72319: IFFALSE 72502
72321: GO 72323
72323: DISABLE
72324: LD_INT 0
72326: PPUSH
72327: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72328: LD_ADDR_VAR 0 2
72332: PUSH
72333: LD_INT 22
72335: PUSH
72336: LD_OWVAR 2
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PPUSH
72345: CALL_OW 69
72349: ST_TO_ADDR
// if not tmp then
72350: LD_VAR 0 2
72354: NOT
72355: IFFALSE 72359
// exit ;
72357: GO 72502
// for i := 1 to 2 do
72359: LD_ADDR_VAR 0 1
72363: PUSH
72364: DOUBLE
72365: LD_INT 1
72367: DEC
72368: ST_TO_ADDR
72369: LD_INT 2
72371: PUSH
72372: FOR_TO
72373: IFFALSE 72500
// begin uc_side := your_side ;
72375: LD_ADDR_OWVAR 20
72379: PUSH
72380: LD_OWVAR 2
72384: ST_TO_ADDR
// uc_nation := nation_american ;
72385: LD_ADDR_OWVAR 21
72389: PUSH
72390: LD_INT 1
72392: ST_TO_ADDR
// vc_chassis := us_morphling ;
72393: LD_ADDR_OWVAR 37
72397: PUSH
72398: LD_INT 5
72400: ST_TO_ADDR
// vc_engine := engine_siberite ;
72401: LD_ADDR_OWVAR 39
72405: PUSH
72406: LD_INT 3
72408: ST_TO_ADDR
// vc_control := control_computer ;
72409: LD_ADDR_OWVAR 38
72413: PUSH
72414: LD_INT 3
72416: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72417: LD_ADDR_OWVAR 40
72421: PUSH
72422: LD_INT 10
72424: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72425: LD_VAR 0 2
72429: PUSH
72430: LD_INT 1
72432: ARRAY
72433: PPUSH
72434: CALL_OW 310
72438: NOT
72439: IFFALSE 72486
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72441: CALL_OW 45
72445: PPUSH
72446: LD_VAR 0 2
72450: PUSH
72451: LD_INT 1
72453: ARRAY
72454: PPUSH
72455: CALL_OW 250
72459: PPUSH
72460: LD_VAR 0 2
72464: PUSH
72465: LD_INT 1
72467: ARRAY
72468: PPUSH
72469: CALL_OW 251
72473: PPUSH
72474: LD_INT 12
72476: PPUSH
72477: LD_INT 1
72479: PPUSH
72480: CALL_OW 50
72484: GO 72498
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72486: CALL_OW 45
72490: PPUSH
72491: LD_INT 1
72493: PPUSH
72494: CALL_OW 51
// end ;
72498: GO 72372
72500: POP
72501: POP
// end ;
72502: PPOPN 2
72504: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72505: LD_EXP 46
72509: PUSH
72510: LD_EXP 92
72514: AND
72515: IFFALSE 72737
72517: GO 72519
72519: DISABLE
72520: LD_INT 0
72522: PPUSH
72523: PPUSH
72524: PPUSH
72525: PPUSH
72526: PPUSH
72527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72528: LD_ADDR_VAR 0 6
72532: PUSH
72533: LD_INT 22
72535: PUSH
72536: LD_OWVAR 2
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 21
72547: PUSH
72548: LD_INT 1
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 3
72557: PUSH
72558: LD_INT 23
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: LIST
72576: PPUSH
72577: CALL_OW 69
72581: ST_TO_ADDR
// if not tmp then
72582: LD_VAR 0 6
72586: NOT
72587: IFFALSE 72591
// exit ;
72589: GO 72737
// s1 := rand ( 1 , 4 ) ;
72591: LD_ADDR_VAR 0 2
72595: PUSH
72596: LD_INT 1
72598: PPUSH
72599: LD_INT 4
72601: PPUSH
72602: CALL_OW 12
72606: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72607: LD_ADDR_VAR 0 4
72611: PUSH
72612: LD_VAR 0 6
72616: PUSH
72617: LD_INT 1
72619: ARRAY
72620: PPUSH
72621: LD_VAR 0 2
72625: PPUSH
72626: CALL_OW 259
72630: ST_TO_ADDR
// if s1 = 1 then
72631: LD_VAR 0 2
72635: PUSH
72636: LD_INT 1
72638: EQUAL
72639: IFFALSE 72659
// s2 := rand ( 2 , 4 ) else
72641: LD_ADDR_VAR 0 3
72645: PUSH
72646: LD_INT 2
72648: PPUSH
72649: LD_INT 4
72651: PPUSH
72652: CALL_OW 12
72656: ST_TO_ADDR
72657: GO 72667
// s2 := 1 ;
72659: LD_ADDR_VAR 0 3
72663: PUSH
72664: LD_INT 1
72666: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72667: LD_ADDR_VAR 0 5
72671: PUSH
72672: LD_VAR 0 6
72676: PUSH
72677: LD_INT 1
72679: ARRAY
72680: PPUSH
72681: LD_VAR 0 3
72685: PPUSH
72686: CALL_OW 259
72690: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72691: LD_VAR 0 6
72695: PUSH
72696: LD_INT 1
72698: ARRAY
72699: PPUSH
72700: LD_VAR 0 2
72704: PPUSH
72705: LD_VAR 0 5
72709: PPUSH
72710: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72714: LD_VAR 0 6
72718: PUSH
72719: LD_INT 1
72721: ARRAY
72722: PPUSH
72723: LD_VAR 0 3
72727: PPUSH
72728: LD_VAR 0 4
72732: PPUSH
72733: CALL_OW 237
// end ;
72737: PPOPN 6
72739: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72740: LD_EXP 46
72744: PUSH
72745: LD_EXP 93
72749: AND
72750: IFFALSE 72829
72752: GO 72754
72754: DISABLE
72755: LD_INT 0
72757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72758: LD_ADDR_VAR 0 1
72762: PUSH
72763: LD_INT 22
72765: PUSH
72766: LD_OWVAR 2
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 30
72777: PUSH
72778: LD_INT 3
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PPUSH
72789: CALL_OW 69
72793: ST_TO_ADDR
// if not tmp then
72794: LD_VAR 0 1
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 72829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72803: LD_VAR 0 1
72807: PUSH
72808: LD_INT 1
72810: PPUSH
72811: LD_VAR 0 1
72815: PPUSH
72816: CALL_OW 12
72820: ARRAY
72821: PPUSH
72822: LD_INT 1
72824: PPUSH
72825: CALL_OW 234
// end ;
72829: PPOPN 1
72831: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72832: LD_EXP 46
72836: PUSH
72837: LD_EXP 94
72841: AND
72842: IFFALSE 72954
72844: GO 72846
72846: DISABLE
72847: LD_INT 0
72849: PPUSH
72850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72851: LD_ADDR_VAR 0 2
72855: PUSH
72856: LD_INT 22
72858: PUSH
72859: LD_OWVAR 2
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 2
72870: PUSH
72871: LD_INT 30
72873: PUSH
72874: LD_INT 27
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 30
72883: PUSH
72884: LD_INT 26
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 30
72893: PUSH
72894: LD_INT 28
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PPUSH
72911: CALL_OW 69
72915: ST_TO_ADDR
// if not tmp then
72916: LD_VAR 0 2
72920: NOT
72921: IFFALSE 72925
// exit ;
72923: GO 72954
// for i in tmp do
72925: LD_ADDR_VAR 0 1
72929: PUSH
72930: LD_VAR 0 2
72934: PUSH
72935: FOR_IN
72936: IFFALSE 72952
// SetLives ( i , 1 ) ;
72938: LD_VAR 0 1
72942: PPUSH
72943: LD_INT 1
72945: PPUSH
72946: CALL_OW 234
72950: GO 72935
72952: POP
72953: POP
// end ;
72954: PPOPN 2
72956: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72957: LD_EXP 46
72961: PUSH
72962: LD_EXP 95
72966: AND
72967: IFFALSE 73254
72969: GO 72971
72971: DISABLE
72972: LD_INT 0
72974: PPUSH
72975: PPUSH
72976: PPUSH
// begin i := rand ( 1 , 7 ) ;
72977: LD_ADDR_VAR 0 1
72981: PUSH
72982: LD_INT 1
72984: PPUSH
72985: LD_INT 7
72987: PPUSH
72988: CALL_OW 12
72992: ST_TO_ADDR
// case i of 1 :
72993: LD_VAR 0 1
72997: PUSH
72998: LD_INT 1
73000: DOUBLE
73001: EQUAL
73002: IFTRUE 73006
73004: GO 73016
73006: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73007: LD_STRING earthquake(getX(game), 0, 32)
73009: PPUSH
73010: CALL_OW 559
73014: GO 73254
73016: LD_INT 2
73018: DOUBLE
73019: EQUAL
73020: IFTRUE 73024
73022: GO 73038
73024: POP
// begin ToLua ( displayStucuk(); ) ;
73025: LD_STRING displayStucuk();
73027: PPUSH
73028: CALL_OW 559
// ResetFog ;
73032: CALL_OW 335
// end ; 3 :
73036: GO 73254
73038: LD_INT 3
73040: DOUBLE
73041: EQUAL
73042: IFTRUE 73046
73044: GO 73150
73046: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73047: LD_ADDR_VAR 0 2
73051: PUSH
73052: LD_INT 22
73054: PUSH
73055: LD_OWVAR 2
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 25
73066: PUSH
73067: LD_INT 1
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PPUSH
73078: CALL_OW 69
73082: ST_TO_ADDR
// if not tmp then
73083: LD_VAR 0 2
73087: NOT
73088: IFFALSE 73092
// exit ;
73090: GO 73254
// un := tmp [ rand ( 1 , tmp ) ] ;
73092: LD_ADDR_VAR 0 3
73096: PUSH
73097: LD_VAR 0 2
73101: PUSH
73102: LD_INT 1
73104: PPUSH
73105: LD_VAR 0 2
73109: PPUSH
73110: CALL_OW 12
73114: ARRAY
73115: ST_TO_ADDR
// if Crawls ( un ) then
73116: LD_VAR 0 3
73120: PPUSH
73121: CALL_OW 318
73125: IFFALSE 73136
// ComWalk ( un ) ;
73127: LD_VAR 0 3
73131: PPUSH
73132: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73136: LD_VAR 0 3
73140: PPUSH
73141: LD_INT 8
73143: PPUSH
73144: CALL_OW 336
// end ; 4 :
73148: GO 73254
73150: LD_INT 4
73152: DOUBLE
73153: EQUAL
73154: IFTRUE 73158
73156: GO 73232
73158: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73159: LD_ADDR_VAR 0 2
73163: PUSH
73164: LD_INT 22
73166: PUSH
73167: LD_OWVAR 2
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 30
73178: PUSH
73179: LD_INT 29
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PPUSH
73190: CALL_OW 69
73194: ST_TO_ADDR
// if not tmp then
73195: LD_VAR 0 2
73199: NOT
73200: IFFALSE 73204
// exit ;
73202: GO 73254
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73204: LD_VAR 0 2
73208: PUSH
73209: LD_INT 1
73211: ARRAY
73212: PPUSH
73213: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73217: LD_VAR 0 2
73221: PUSH
73222: LD_INT 1
73224: ARRAY
73225: PPUSH
73226: CALL_OW 65
// end ; 5 .. 7 :
73230: GO 73254
73232: LD_INT 5
73234: DOUBLE
73235: GREATEREQUAL
73236: IFFALSE 73244
73238: LD_INT 7
73240: DOUBLE
73241: LESSEQUAL
73242: IFTRUE 73246
73244: GO 73253
73246: POP
// StreamSibBomb ; end ;
73247: CALL 69491 0 0
73251: GO 73254
73253: POP
// end ;
73254: PPOPN 3
73256: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73257: LD_EXP 46
73261: PUSH
73262: LD_EXP 96
73266: AND
73267: IFFALSE 73423
73269: GO 73271
73271: DISABLE
73272: LD_INT 0
73274: PPUSH
73275: PPUSH
73276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73277: LD_ADDR_VAR 0 2
73281: PUSH
73282: LD_INT 81
73284: PUSH
73285: LD_OWVAR 2
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 2
73296: PUSH
73297: LD_INT 21
73299: PUSH
73300: LD_INT 1
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 21
73309: PUSH
73310: LD_INT 2
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PPUSH
73326: CALL_OW 69
73330: ST_TO_ADDR
// if not tmp then
73331: LD_VAR 0 2
73335: NOT
73336: IFFALSE 73340
// exit ;
73338: GO 73423
// p := 0 ;
73340: LD_ADDR_VAR 0 3
73344: PUSH
73345: LD_INT 0
73347: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73348: LD_INT 35
73350: PPUSH
73351: CALL_OW 67
// p := p + 1 ;
73355: LD_ADDR_VAR 0 3
73359: PUSH
73360: LD_VAR 0 3
73364: PUSH
73365: LD_INT 1
73367: PLUS
73368: ST_TO_ADDR
// for i in tmp do
73369: LD_ADDR_VAR 0 1
73373: PUSH
73374: LD_VAR 0 2
73378: PUSH
73379: FOR_IN
73380: IFFALSE 73411
// if GetLives ( i ) < 1000 then
73382: LD_VAR 0 1
73386: PPUSH
73387: CALL_OW 256
73391: PUSH
73392: LD_INT 1000
73394: LESS
73395: IFFALSE 73409
// SetLives ( i , 1000 ) ;
73397: LD_VAR 0 1
73401: PPUSH
73402: LD_INT 1000
73404: PPUSH
73405: CALL_OW 234
73409: GO 73379
73411: POP
73412: POP
// until p > 20 ;
73413: LD_VAR 0 3
73417: PUSH
73418: LD_INT 20
73420: GREATER
73421: IFFALSE 73348
// end ;
73423: PPOPN 3
73425: END
// every 0 0$1 trigger StreamModeActive and sTime do
73426: LD_EXP 46
73430: PUSH
73431: LD_EXP 97
73435: AND
73436: IFFALSE 73471
73438: GO 73440
73440: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73441: LD_INT 28
73443: PPUSH
73444: LD_OWVAR 2
73448: PPUSH
73449: LD_INT 2
73451: PPUSH
73452: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73456: LD_INT 30
73458: PPUSH
73459: LD_OWVAR 2
73463: PPUSH
73464: LD_INT 2
73466: PPUSH
73467: CALL_OW 322
// end ;
73471: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73472: LD_EXP 46
73476: PUSH
73477: LD_EXP 98
73481: AND
73482: IFFALSE 73603
73484: GO 73486
73486: DISABLE
73487: LD_INT 0
73489: PPUSH
73490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73491: LD_ADDR_VAR 0 2
73495: PUSH
73496: LD_INT 22
73498: PUSH
73499: LD_OWVAR 2
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 21
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 3
73520: PUSH
73521: LD_INT 23
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: LIST
73539: PPUSH
73540: CALL_OW 69
73544: ST_TO_ADDR
// if not tmp then
73545: LD_VAR 0 2
73549: NOT
73550: IFFALSE 73554
// exit ;
73552: GO 73603
// for i in tmp do
73554: LD_ADDR_VAR 0 1
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: FOR_IN
73565: IFFALSE 73601
// begin if Crawls ( i ) then
73567: LD_VAR 0 1
73571: PPUSH
73572: CALL_OW 318
73576: IFFALSE 73587
// ComWalk ( i ) ;
73578: LD_VAR 0 1
73582: PPUSH
73583: CALL_OW 138
// SetClass ( i , 2 ) ;
73587: LD_VAR 0 1
73591: PPUSH
73592: LD_INT 2
73594: PPUSH
73595: CALL_OW 336
// end ;
73599: GO 73564
73601: POP
73602: POP
// end ;
73603: PPOPN 2
73605: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73606: LD_EXP 46
73610: PUSH
73611: LD_EXP 99
73615: AND
73616: IFFALSE 73904
73618: GO 73620
73620: DISABLE
73621: LD_INT 0
73623: PPUSH
73624: PPUSH
73625: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73626: LD_OWVAR 2
73630: PPUSH
73631: LD_INT 9
73633: PPUSH
73634: LD_INT 1
73636: PPUSH
73637: LD_INT 1
73639: PPUSH
73640: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73644: LD_INT 9
73646: PPUSH
73647: LD_OWVAR 2
73651: PPUSH
73652: CALL_OW 343
// uc_side := 9 ;
73656: LD_ADDR_OWVAR 20
73660: PUSH
73661: LD_INT 9
73663: ST_TO_ADDR
// uc_nation := 2 ;
73664: LD_ADDR_OWVAR 21
73668: PUSH
73669: LD_INT 2
73671: ST_TO_ADDR
// hc_name := Dark Warrior ;
73672: LD_ADDR_OWVAR 26
73676: PUSH
73677: LD_STRING Dark Warrior
73679: ST_TO_ADDR
// hc_gallery :=  ;
73680: LD_ADDR_OWVAR 33
73684: PUSH
73685: LD_STRING 
73687: ST_TO_ADDR
// hc_noskilllimit := true ;
73688: LD_ADDR_OWVAR 76
73692: PUSH
73693: LD_INT 1
73695: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73696: LD_ADDR_OWVAR 31
73700: PUSH
73701: LD_INT 30
73703: PUSH
73704: LD_INT 30
73706: PUSH
73707: LD_INT 30
73709: PUSH
73710: LD_INT 30
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: ST_TO_ADDR
// un := CreateHuman ;
73719: LD_ADDR_VAR 0 3
73723: PUSH
73724: CALL_OW 44
73728: ST_TO_ADDR
// hc_noskilllimit := false ;
73729: LD_ADDR_OWVAR 76
73733: PUSH
73734: LD_INT 0
73736: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73737: LD_VAR 0 3
73741: PPUSH
73742: LD_INT 1
73744: PPUSH
73745: CALL_OW 51
// ToLua ( playRanger() ) ;
73749: LD_STRING playRanger()
73751: PPUSH
73752: CALL_OW 559
// p := 0 ;
73756: LD_ADDR_VAR 0 2
73760: PUSH
73761: LD_INT 0
73763: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73764: LD_INT 35
73766: PPUSH
73767: CALL_OW 67
// p := p + 1 ;
73771: LD_ADDR_VAR 0 2
73775: PUSH
73776: LD_VAR 0 2
73780: PUSH
73781: LD_INT 1
73783: PLUS
73784: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73785: LD_VAR 0 3
73789: PPUSH
73790: CALL_OW 256
73794: PUSH
73795: LD_INT 1000
73797: LESS
73798: IFFALSE 73812
// SetLives ( un , 1000 ) ;
73800: LD_VAR 0 3
73804: PPUSH
73805: LD_INT 1000
73807: PPUSH
73808: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73812: LD_VAR 0 3
73816: PPUSH
73817: LD_INT 81
73819: PUSH
73820: LD_OWVAR 2
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 91
73831: PUSH
73832: LD_VAR 0 3
73836: PUSH
73837: LD_INT 30
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: LIST
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PPUSH
73849: CALL_OW 69
73853: PPUSH
73854: LD_VAR 0 3
73858: PPUSH
73859: CALL_OW 74
73863: PPUSH
73864: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73868: LD_VAR 0 2
73872: PUSH
73873: LD_INT 80
73875: GREATER
73876: PUSH
73877: LD_VAR 0 3
73881: PPUSH
73882: CALL_OW 301
73886: OR
73887: IFFALSE 73764
// if un then
73889: LD_VAR 0 3
73893: IFFALSE 73904
// RemoveUnit ( un ) ;
73895: LD_VAR 0 3
73899: PPUSH
73900: CALL_OW 64
// end ;
73904: PPOPN 3
73906: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73907: LD_EXP 100
73911: IFFALSE 74027
73913: GO 73915
73915: DISABLE
73916: LD_INT 0
73918: PPUSH
73919: PPUSH
73920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73921: LD_ADDR_VAR 0 2
73925: PUSH
73926: LD_INT 81
73928: PUSH
73929: LD_OWVAR 2
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 21
73940: PUSH
73941: LD_INT 1
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PPUSH
73952: CALL_OW 69
73956: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73957: LD_STRING playComputer()
73959: PPUSH
73960: CALL_OW 559
// if not tmp then
73964: LD_VAR 0 2
73968: NOT
73969: IFFALSE 73973
// exit ;
73971: GO 74027
// for i in tmp do
73973: LD_ADDR_VAR 0 1
73977: PUSH
73978: LD_VAR 0 2
73982: PUSH
73983: FOR_IN
73984: IFFALSE 74025
// for j := 1 to 4 do
73986: LD_ADDR_VAR 0 3
73990: PUSH
73991: DOUBLE
73992: LD_INT 1
73994: DEC
73995: ST_TO_ADDR
73996: LD_INT 4
73998: PUSH
73999: FOR_TO
74000: IFFALSE 74021
// SetSkill ( i , j , 10 ) ;
74002: LD_VAR 0 1
74006: PPUSH
74007: LD_VAR 0 3
74011: PPUSH
74012: LD_INT 10
74014: PPUSH
74015: CALL_OW 237
74019: GO 73999
74021: POP
74022: POP
74023: GO 73983
74025: POP
74026: POP
// end ;
74027: PPOPN 3
74029: END
// every 0 0$1 trigger s30 do var i , tmp ;
74030: LD_EXP 101
74034: IFFALSE 74103
74036: GO 74038
74038: DISABLE
74039: LD_INT 0
74041: PPUSH
74042: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74043: LD_ADDR_VAR 0 2
74047: PUSH
74048: LD_INT 22
74050: PUSH
74051: LD_OWVAR 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PPUSH
74060: CALL_OW 69
74064: ST_TO_ADDR
// if not tmp then
74065: LD_VAR 0 2
74069: NOT
74070: IFFALSE 74074
// exit ;
74072: GO 74103
// for i in tmp do
74074: LD_ADDR_VAR 0 1
74078: PUSH
74079: LD_VAR 0 2
74083: PUSH
74084: FOR_IN
74085: IFFALSE 74101
// SetLives ( i , 300 ) ;
74087: LD_VAR 0 1
74091: PPUSH
74092: LD_INT 300
74094: PPUSH
74095: CALL_OW 234
74099: GO 74084
74101: POP
74102: POP
// end ;
74103: PPOPN 2
74105: END
// every 0 0$1 trigger s60 do var i , tmp ;
74106: LD_EXP 102
74110: IFFALSE 74179
74112: GO 74114
74114: DISABLE
74115: LD_INT 0
74117: PPUSH
74118: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74119: LD_ADDR_VAR 0 2
74123: PUSH
74124: LD_INT 22
74126: PUSH
74127: LD_OWVAR 2
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PPUSH
74136: CALL_OW 69
74140: ST_TO_ADDR
// if not tmp then
74141: LD_VAR 0 2
74145: NOT
74146: IFFALSE 74150
// exit ;
74148: GO 74179
// for i in tmp do
74150: LD_ADDR_VAR 0 1
74154: PUSH
74155: LD_VAR 0 2
74159: PUSH
74160: FOR_IN
74161: IFFALSE 74177
// SetLives ( i , 600 ) ;
74163: LD_VAR 0 1
74167: PPUSH
74168: LD_INT 600
74170: PPUSH
74171: CALL_OW 234
74175: GO 74160
74177: POP
74178: POP
// end ;
74179: PPOPN 2
74181: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74182: LD_INT 0
74184: PPUSH
// case cmd of 301 :
74185: LD_VAR 0 1
74189: PUSH
74190: LD_INT 301
74192: DOUBLE
74193: EQUAL
74194: IFTRUE 74198
74196: GO 74230
74198: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74199: LD_VAR 0 6
74203: PPUSH
74204: LD_VAR 0 7
74208: PPUSH
74209: LD_VAR 0 8
74213: PPUSH
74214: LD_VAR 0 4
74218: PPUSH
74219: LD_VAR 0 5
74223: PPUSH
74224: CALL 75439 0 5
74228: GO 74351
74230: LD_INT 302
74232: DOUBLE
74233: EQUAL
74234: IFTRUE 74238
74236: GO 74275
74238: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74239: LD_VAR 0 6
74243: PPUSH
74244: LD_VAR 0 7
74248: PPUSH
74249: LD_VAR 0 8
74253: PPUSH
74254: LD_VAR 0 9
74258: PPUSH
74259: LD_VAR 0 4
74263: PPUSH
74264: LD_VAR 0 5
74268: PPUSH
74269: CALL 75530 0 6
74273: GO 74351
74275: LD_INT 303
74277: DOUBLE
74278: EQUAL
74279: IFTRUE 74283
74281: GO 74320
74283: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74284: LD_VAR 0 6
74288: PPUSH
74289: LD_VAR 0 7
74293: PPUSH
74294: LD_VAR 0 8
74298: PPUSH
74299: LD_VAR 0 9
74303: PPUSH
74304: LD_VAR 0 4
74308: PPUSH
74309: LD_VAR 0 5
74313: PPUSH
74314: CALL 74356 0 6
74318: GO 74351
74320: LD_INT 304
74322: DOUBLE
74323: EQUAL
74324: IFTRUE 74328
74326: GO 74350
74328: POP
// hHackTeleport ( unit , x , y ) ; end ;
74329: LD_VAR 0 2
74333: PPUSH
74334: LD_VAR 0 4
74338: PPUSH
74339: LD_VAR 0 5
74343: PPUSH
74344: CALL 76123 0 3
74348: GO 74351
74350: POP
// end ;
74351: LD_VAR 0 12
74355: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74356: LD_INT 0
74358: PPUSH
74359: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74360: LD_VAR 0 1
74364: PUSH
74365: LD_INT 1
74367: LESS
74368: PUSH
74369: LD_VAR 0 1
74373: PUSH
74374: LD_INT 3
74376: GREATER
74377: OR
74378: PUSH
74379: LD_VAR 0 5
74383: PPUSH
74384: LD_VAR 0 6
74388: PPUSH
74389: CALL_OW 428
74393: OR
74394: IFFALSE 74398
// exit ;
74396: GO 75126
// uc_side := your_side ;
74398: LD_ADDR_OWVAR 20
74402: PUSH
74403: LD_OWVAR 2
74407: ST_TO_ADDR
// uc_nation := nation ;
74408: LD_ADDR_OWVAR 21
74412: PUSH
74413: LD_VAR 0 1
74417: ST_TO_ADDR
// bc_level = 1 ;
74418: LD_ADDR_OWVAR 43
74422: PUSH
74423: LD_INT 1
74425: ST_TO_ADDR
// case btype of 1 :
74426: LD_VAR 0 2
74430: PUSH
74431: LD_INT 1
74433: DOUBLE
74434: EQUAL
74435: IFTRUE 74439
74437: GO 74450
74439: POP
// bc_type := b_depot ; 2 :
74440: LD_ADDR_OWVAR 42
74444: PUSH
74445: LD_INT 0
74447: ST_TO_ADDR
74448: GO 75070
74450: LD_INT 2
74452: DOUBLE
74453: EQUAL
74454: IFTRUE 74458
74456: GO 74469
74458: POP
// bc_type := b_warehouse ; 3 :
74459: LD_ADDR_OWVAR 42
74463: PUSH
74464: LD_INT 1
74466: ST_TO_ADDR
74467: GO 75070
74469: LD_INT 3
74471: DOUBLE
74472: EQUAL
74473: IFTRUE 74477
74475: GO 74488
74477: POP
// bc_type := b_lab ; 4 .. 9 :
74478: LD_ADDR_OWVAR 42
74482: PUSH
74483: LD_INT 6
74485: ST_TO_ADDR
74486: GO 75070
74488: LD_INT 4
74490: DOUBLE
74491: GREATEREQUAL
74492: IFFALSE 74500
74494: LD_INT 9
74496: DOUBLE
74497: LESSEQUAL
74498: IFTRUE 74502
74500: GO 74562
74502: POP
// begin bc_type := b_lab_half ;
74503: LD_ADDR_OWVAR 42
74507: PUSH
74508: LD_INT 7
74510: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74511: LD_ADDR_OWVAR 44
74515: PUSH
74516: LD_INT 10
74518: PUSH
74519: LD_INT 11
74521: PUSH
74522: LD_INT 12
74524: PUSH
74525: LD_INT 15
74527: PUSH
74528: LD_INT 14
74530: PUSH
74531: LD_INT 13
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: PUSH
74542: LD_VAR 0 2
74546: PUSH
74547: LD_INT 3
74549: MINUS
74550: ARRAY
74551: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
74552: LD_ADDR_OWVAR 45
74556: PUSH
74557: LD_INT 9
74559: ST_TO_ADDR
// end ; 10 .. 13 :
74560: GO 75070
74562: LD_INT 10
74564: DOUBLE
74565: GREATEREQUAL
74566: IFFALSE 74574
74568: LD_INT 13
74570: DOUBLE
74571: LESSEQUAL
74572: IFTRUE 74576
74574: GO 74653
74576: POP
// begin bc_type := b_lab_full ;
74577: LD_ADDR_OWVAR 42
74581: PUSH
74582: LD_INT 8
74584: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74585: LD_ADDR_OWVAR 44
74589: PUSH
74590: LD_INT 10
74592: PUSH
74593: LD_INT 12
74595: PUSH
74596: LD_INT 14
74598: PUSH
74599: LD_INT 13
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: PUSH
74608: LD_VAR 0 2
74612: PUSH
74613: LD_INT 9
74615: MINUS
74616: ARRAY
74617: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74618: LD_ADDR_OWVAR 45
74622: PUSH
74623: LD_INT 11
74625: PUSH
74626: LD_INT 15
74628: PUSH
74629: LD_INT 12
74631: PUSH
74632: LD_INT 15
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: PUSH
74641: LD_VAR 0 2
74645: PUSH
74646: LD_INT 9
74648: MINUS
74649: ARRAY
74650: ST_TO_ADDR
// end ; 14 :
74651: GO 75070
74653: LD_INT 14
74655: DOUBLE
74656: EQUAL
74657: IFTRUE 74661
74659: GO 74672
74661: POP
// bc_type := b_workshop ; 15 :
74662: LD_ADDR_OWVAR 42
74666: PUSH
74667: LD_INT 2
74669: ST_TO_ADDR
74670: GO 75070
74672: LD_INT 15
74674: DOUBLE
74675: EQUAL
74676: IFTRUE 74680
74678: GO 74691
74680: POP
// bc_type := b_factory ; 16 :
74681: LD_ADDR_OWVAR 42
74685: PUSH
74686: LD_INT 3
74688: ST_TO_ADDR
74689: GO 75070
74691: LD_INT 16
74693: DOUBLE
74694: EQUAL
74695: IFTRUE 74699
74697: GO 74710
74699: POP
// bc_type := b_ext_gun ; 17 :
74700: LD_ADDR_OWVAR 42
74704: PUSH
74705: LD_INT 17
74707: ST_TO_ADDR
74708: GO 75070
74710: LD_INT 17
74712: DOUBLE
74713: EQUAL
74714: IFTRUE 74718
74716: GO 74746
74718: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74719: LD_ADDR_OWVAR 42
74723: PUSH
74724: LD_INT 19
74726: PUSH
74727: LD_INT 23
74729: PUSH
74730: LD_INT 19
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: LIST
74737: PUSH
74738: LD_VAR 0 1
74742: ARRAY
74743: ST_TO_ADDR
74744: GO 75070
74746: LD_INT 18
74748: DOUBLE
74749: EQUAL
74750: IFTRUE 74754
74752: GO 74765
74754: POP
// bc_type := b_ext_radar ; 19 :
74755: LD_ADDR_OWVAR 42
74759: PUSH
74760: LD_INT 20
74762: ST_TO_ADDR
74763: GO 75070
74765: LD_INT 19
74767: DOUBLE
74768: EQUAL
74769: IFTRUE 74773
74771: GO 74784
74773: POP
// bc_type := b_ext_radio ; 20 :
74774: LD_ADDR_OWVAR 42
74778: PUSH
74779: LD_INT 22
74781: ST_TO_ADDR
74782: GO 75070
74784: LD_INT 20
74786: DOUBLE
74787: EQUAL
74788: IFTRUE 74792
74790: GO 74803
74792: POP
// bc_type := b_ext_siberium ; 21 :
74793: LD_ADDR_OWVAR 42
74797: PUSH
74798: LD_INT 21
74800: ST_TO_ADDR
74801: GO 75070
74803: LD_INT 21
74805: DOUBLE
74806: EQUAL
74807: IFTRUE 74811
74809: GO 74822
74811: POP
// bc_type := b_ext_computer ; 22 :
74812: LD_ADDR_OWVAR 42
74816: PUSH
74817: LD_INT 24
74819: ST_TO_ADDR
74820: GO 75070
74822: LD_INT 22
74824: DOUBLE
74825: EQUAL
74826: IFTRUE 74830
74828: GO 74841
74830: POP
// bc_type := b_ext_track ; 23 :
74831: LD_ADDR_OWVAR 42
74835: PUSH
74836: LD_INT 16
74838: ST_TO_ADDR
74839: GO 75070
74841: LD_INT 23
74843: DOUBLE
74844: EQUAL
74845: IFTRUE 74849
74847: GO 74860
74849: POP
// bc_type := b_ext_laser ; 24 :
74850: LD_ADDR_OWVAR 42
74854: PUSH
74855: LD_INT 25
74857: ST_TO_ADDR
74858: GO 75070
74860: LD_INT 24
74862: DOUBLE
74863: EQUAL
74864: IFTRUE 74868
74866: GO 74879
74868: POP
// bc_type := b_control_tower ; 25 :
74869: LD_ADDR_OWVAR 42
74873: PUSH
74874: LD_INT 36
74876: ST_TO_ADDR
74877: GO 75070
74879: LD_INT 25
74881: DOUBLE
74882: EQUAL
74883: IFTRUE 74887
74885: GO 74898
74887: POP
// bc_type := b_breastwork ; 26 :
74888: LD_ADDR_OWVAR 42
74892: PUSH
74893: LD_INT 31
74895: ST_TO_ADDR
74896: GO 75070
74898: LD_INT 26
74900: DOUBLE
74901: EQUAL
74902: IFTRUE 74906
74904: GO 74917
74906: POP
// bc_type := b_bunker ; 27 :
74907: LD_ADDR_OWVAR 42
74911: PUSH
74912: LD_INT 32
74914: ST_TO_ADDR
74915: GO 75070
74917: LD_INT 27
74919: DOUBLE
74920: EQUAL
74921: IFTRUE 74925
74923: GO 74936
74925: POP
// bc_type := b_turret ; 28 :
74926: LD_ADDR_OWVAR 42
74930: PUSH
74931: LD_INT 33
74933: ST_TO_ADDR
74934: GO 75070
74936: LD_INT 28
74938: DOUBLE
74939: EQUAL
74940: IFTRUE 74944
74942: GO 74955
74944: POP
// bc_type := b_armoury ; 29 :
74945: LD_ADDR_OWVAR 42
74949: PUSH
74950: LD_INT 4
74952: ST_TO_ADDR
74953: GO 75070
74955: LD_INT 29
74957: DOUBLE
74958: EQUAL
74959: IFTRUE 74963
74961: GO 74974
74963: POP
// bc_type := b_barracks ; 30 :
74964: LD_ADDR_OWVAR 42
74968: PUSH
74969: LD_INT 5
74971: ST_TO_ADDR
74972: GO 75070
74974: LD_INT 30
74976: DOUBLE
74977: EQUAL
74978: IFTRUE 74982
74980: GO 74993
74982: POP
// bc_type := b_solar_power ; 31 :
74983: LD_ADDR_OWVAR 42
74987: PUSH
74988: LD_INT 27
74990: ST_TO_ADDR
74991: GO 75070
74993: LD_INT 31
74995: DOUBLE
74996: EQUAL
74997: IFTRUE 75001
74999: GO 75012
75001: POP
// bc_type := b_oil_power ; 32 :
75002: LD_ADDR_OWVAR 42
75006: PUSH
75007: LD_INT 26
75009: ST_TO_ADDR
75010: GO 75070
75012: LD_INT 32
75014: DOUBLE
75015: EQUAL
75016: IFTRUE 75020
75018: GO 75031
75020: POP
// bc_type := b_siberite_power ; 33 :
75021: LD_ADDR_OWVAR 42
75025: PUSH
75026: LD_INT 28
75028: ST_TO_ADDR
75029: GO 75070
75031: LD_INT 33
75033: DOUBLE
75034: EQUAL
75035: IFTRUE 75039
75037: GO 75050
75039: POP
// bc_type := b_oil_mine ; 34 :
75040: LD_ADDR_OWVAR 42
75044: PUSH
75045: LD_INT 29
75047: ST_TO_ADDR
75048: GO 75070
75050: LD_INT 34
75052: DOUBLE
75053: EQUAL
75054: IFTRUE 75058
75056: GO 75069
75058: POP
// bc_type := b_siberite_mine ; end ;
75059: LD_ADDR_OWVAR 42
75063: PUSH
75064: LD_INT 30
75066: ST_TO_ADDR
75067: GO 75070
75069: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75070: LD_ADDR_VAR 0 8
75074: PUSH
75075: LD_VAR 0 5
75079: PPUSH
75080: LD_VAR 0 6
75084: PPUSH
75085: LD_VAR 0 3
75089: PPUSH
75090: CALL_OW 47
75094: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75095: LD_OWVAR 42
75099: PUSH
75100: LD_INT 32
75102: PUSH
75103: LD_INT 33
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: IN
75110: IFFALSE 75126
// PlaceWeaponTurret ( b , weapon ) ;
75112: LD_VAR 0 8
75116: PPUSH
75117: LD_VAR 0 4
75121: PPUSH
75122: CALL_OW 431
// end ;
75126: LD_VAR 0 7
75130: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75131: LD_INT 0
75133: PPUSH
75134: PPUSH
75135: PPUSH
75136: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75137: LD_ADDR_VAR 0 4
75141: PUSH
75142: LD_INT 22
75144: PUSH
75145: LD_OWVAR 2
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 2
75156: PUSH
75157: LD_INT 30
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 30
75169: PUSH
75170: LD_INT 1
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: LIST
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PPUSH
75186: CALL_OW 69
75190: ST_TO_ADDR
// if not tmp then
75191: LD_VAR 0 4
75195: NOT
75196: IFFALSE 75200
// exit ;
75198: GO 75259
// for i in tmp do
75200: LD_ADDR_VAR 0 2
75204: PUSH
75205: LD_VAR 0 4
75209: PUSH
75210: FOR_IN
75211: IFFALSE 75257
// for j = 1 to 3 do
75213: LD_ADDR_VAR 0 3
75217: PUSH
75218: DOUBLE
75219: LD_INT 1
75221: DEC
75222: ST_TO_ADDR
75223: LD_INT 3
75225: PUSH
75226: FOR_TO
75227: IFFALSE 75253
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75229: LD_VAR 0 2
75233: PPUSH
75234: CALL_OW 274
75238: PPUSH
75239: LD_VAR 0 3
75243: PPUSH
75244: LD_INT 99999
75246: PPUSH
75247: CALL_OW 277
75251: GO 75226
75253: POP
75254: POP
75255: GO 75210
75257: POP
75258: POP
// end ;
75259: LD_VAR 0 1
75263: RET
// export function hHackSetLevel10 ; var i , j ; begin
75264: LD_INT 0
75266: PPUSH
75267: PPUSH
75268: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75269: LD_ADDR_VAR 0 2
75273: PUSH
75274: LD_INT 21
75276: PUSH
75277: LD_INT 1
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PPUSH
75284: CALL_OW 69
75288: PUSH
75289: FOR_IN
75290: IFFALSE 75342
// if IsSelected ( i ) then
75292: LD_VAR 0 2
75296: PPUSH
75297: CALL_OW 306
75301: IFFALSE 75340
// begin for j := 1 to 4 do
75303: LD_ADDR_VAR 0 3
75307: PUSH
75308: DOUBLE
75309: LD_INT 1
75311: DEC
75312: ST_TO_ADDR
75313: LD_INT 4
75315: PUSH
75316: FOR_TO
75317: IFFALSE 75338
// SetSkill ( i , j , 10 ) ;
75319: LD_VAR 0 2
75323: PPUSH
75324: LD_VAR 0 3
75328: PPUSH
75329: LD_INT 10
75331: PPUSH
75332: CALL_OW 237
75336: GO 75316
75338: POP
75339: POP
// end ;
75340: GO 75289
75342: POP
75343: POP
// end ;
75344: LD_VAR 0 1
75348: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75349: LD_INT 0
75351: PPUSH
75352: PPUSH
75353: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75354: LD_ADDR_VAR 0 2
75358: PUSH
75359: LD_INT 22
75361: PUSH
75362: LD_OWVAR 2
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 21
75373: PUSH
75374: LD_INT 1
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PPUSH
75385: CALL_OW 69
75389: PUSH
75390: FOR_IN
75391: IFFALSE 75432
// begin for j := 1 to 4 do
75393: LD_ADDR_VAR 0 3
75397: PUSH
75398: DOUBLE
75399: LD_INT 1
75401: DEC
75402: ST_TO_ADDR
75403: LD_INT 4
75405: PUSH
75406: FOR_TO
75407: IFFALSE 75428
// SetSkill ( i , j , 10 ) ;
75409: LD_VAR 0 2
75413: PPUSH
75414: LD_VAR 0 3
75418: PPUSH
75419: LD_INT 10
75421: PPUSH
75422: CALL_OW 237
75426: GO 75406
75428: POP
75429: POP
// end ;
75430: GO 75390
75432: POP
75433: POP
// end ;
75434: LD_VAR 0 1
75438: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75439: LD_INT 0
75441: PPUSH
// uc_side := your_side ;
75442: LD_ADDR_OWVAR 20
75446: PUSH
75447: LD_OWVAR 2
75451: ST_TO_ADDR
// uc_nation := nation ;
75452: LD_ADDR_OWVAR 21
75456: PUSH
75457: LD_VAR 0 1
75461: ST_TO_ADDR
// InitHc ;
75462: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75466: LD_INT 0
75468: PPUSH
75469: LD_VAR 0 2
75473: PPUSH
75474: LD_VAR 0 3
75478: PPUSH
75479: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75483: LD_VAR 0 4
75487: PPUSH
75488: LD_VAR 0 5
75492: PPUSH
75493: CALL_OW 428
75497: PUSH
75498: LD_INT 0
75500: EQUAL
75501: IFFALSE 75525
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75503: CALL_OW 44
75507: PPUSH
75508: LD_VAR 0 4
75512: PPUSH
75513: LD_VAR 0 5
75517: PPUSH
75518: LD_INT 1
75520: PPUSH
75521: CALL_OW 48
// end ;
75525: LD_VAR 0 6
75529: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75530: LD_INT 0
75532: PPUSH
75533: PPUSH
// uc_side := your_side ;
75534: LD_ADDR_OWVAR 20
75538: PUSH
75539: LD_OWVAR 2
75543: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75544: LD_VAR 0 1
75548: PUSH
75549: LD_INT 1
75551: PUSH
75552: LD_INT 2
75554: PUSH
75555: LD_INT 3
75557: PUSH
75558: LD_INT 4
75560: PUSH
75561: LD_INT 5
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: IN
75571: IFFALSE 75583
// uc_nation := nation_american else
75573: LD_ADDR_OWVAR 21
75577: PUSH
75578: LD_INT 1
75580: ST_TO_ADDR
75581: GO 75626
// if chassis in [ 11 , 12 , 13 , 14 ] then
75583: LD_VAR 0 1
75587: PUSH
75588: LD_INT 11
75590: PUSH
75591: LD_INT 12
75593: PUSH
75594: LD_INT 13
75596: PUSH
75597: LD_INT 14
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: IN
75606: IFFALSE 75618
// uc_nation := nation_arabian else
75608: LD_ADDR_OWVAR 21
75612: PUSH
75613: LD_INT 2
75615: ST_TO_ADDR
75616: GO 75626
// uc_nation := nation_russian ;
75618: LD_ADDR_OWVAR 21
75622: PUSH
75623: LD_INT 3
75625: ST_TO_ADDR
// vc_chassis := chassis ;
75626: LD_ADDR_OWVAR 37
75630: PUSH
75631: LD_VAR 0 1
75635: ST_TO_ADDR
// vc_engine := engine ;
75636: LD_ADDR_OWVAR 39
75640: PUSH
75641: LD_VAR 0 2
75645: ST_TO_ADDR
// vc_control := control ;
75646: LD_ADDR_OWVAR 38
75650: PUSH
75651: LD_VAR 0 3
75655: ST_TO_ADDR
// vc_weapon := weapon ;
75656: LD_ADDR_OWVAR 40
75660: PUSH
75661: LD_VAR 0 4
75665: ST_TO_ADDR
// un := CreateVehicle ;
75666: LD_ADDR_VAR 0 8
75670: PUSH
75671: CALL_OW 45
75675: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75676: LD_VAR 0 8
75680: PPUSH
75681: LD_INT 0
75683: PPUSH
75684: LD_INT 5
75686: PPUSH
75687: CALL_OW 12
75691: PPUSH
75692: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75696: LD_VAR 0 8
75700: PPUSH
75701: LD_VAR 0 5
75705: PPUSH
75706: LD_VAR 0 6
75710: PPUSH
75711: LD_INT 1
75713: PPUSH
75714: CALL_OW 48
// end ;
75718: LD_VAR 0 7
75722: RET
// export hInvincible ; every 1 do
75723: GO 75725
75725: DISABLE
// hInvincible := [ ] ;
75726: LD_ADDR_EXP 103
75730: PUSH
75731: EMPTY
75732: ST_TO_ADDR
75733: END
// every 10 do var i ;
75734: GO 75736
75736: DISABLE
75737: LD_INT 0
75739: PPUSH
// begin enable ;
75740: ENABLE
// if not hInvincible then
75741: LD_EXP 103
75745: NOT
75746: IFFALSE 75750
// exit ;
75748: GO 75794
// for i in hInvincible do
75750: LD_ADDR_VAR 0 1
75754: PUSH
75755: LD_EXP 103
75759: PUSH
75760: FOR_IN
75761: IFFALSE 75792
// if GetLives ( i ) < 1000 then
75763: LD_VAR 0 1
75767: PPUSH
75768: CALL_OW 256
75772: PUSH
75773: LD_INT 1000
75775: LESS
75776: IFFALSE 75790
// SetLives ( i , 1000 ) ;
75778: LD_VAR 0 1
75782: PPUSH
75783: LD_INT 1000
75785: PPUSH
75786: CALL_OW 234
75790: GO 75760
75792: POP
75793: POP
// end ;
75794: PPOPN 1
75796: END
// export function hHackInvincible ; var i ; begin
75797: LD_INT 0
75799: PPUSH
75800: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75801: LD_ADDR_VAR 0 2
75805: PUSH
75806: LD_INT 2
75808: PUSH
75809: LD_INT 21
75811: PUSH
75812: LD_INT 1
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 21
75821: PUSH
75822: LD_INT 2
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: LIST
75833: PPUSH
75834: CALL_OW 69
75838: PUSH
75839: FOR_IN
75840: IFFALSE 75901
// if IsSelected ( i ) then
75842: LD_VAR 0 2
75846: PPUSH
75847: CALL_OW 306
75851: IFFALSE 75899
// begin if i in hInvincible then
75853: LD_VAR 0 2
75857: PUSH
75858: LD_EXP 103
75862: IN
75863: IFFALSE 75883
// hInvincible := hInvincible diff i else
75865: LD_ADDR_EXP 103
75869: PUSH
75870: LD_EXP 103
75874: PUSH
75875: LD_VAR 0 2
75879: DIFF
75880: ST_TO_ADDR
75881: GO 75899
// hInvincible := hInvincible union i ;
75883: LD_ADDR_EXP 103
75887: PUSH
75888: LD_EXP 103
75892: PUSH
75893: LD_VAR 0 2
75897: UNION
75898: ST_TO_ADDR
// end ;
75899: GO 75839
75901: POP
75902: POP
// end ;
75903: LD_VAR 0 1
75907: RET
// export function hHackInvisible ; var i , j ; begin
75908: LD_INT 0
75910: PPUSH
75911: PPUSH
75912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75913: LD_ADDR_VAR 0 2
75917: PUSH
75918: LD_INT 21
75920: PUSH
75921: LD_INT 1
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PPUSH
75928: CALL_OW 69
75932: PUSH
75933: FOR_IN
75934: IFFALSE 75958
// if IsSelected ( i ) then
75936: LD_VAR 0 2
75940: PPUSH
75941: CALL_OW 306
75945: IFFALSE 75956
// ComForceInvisible ( i ) ;
75947: LD_VAR 0 2
75951: PPUSH
75952: CALL_OW 496
75956: GO 75933
75958: POP
75959: POP
// end ;
75960: LD_VAR 0 1
75964: RET
// export function hHackChangeYourSide ; begin
75965: LD_INT 0
75967: PPUSH
// if your_side = 8 then
75968: LD_OWVAR 2
75972: PUSH
75973: LD_INT 8
75975: EQUAL
75976: IFFALSE 75988
// your_side := 0 else
75978: LD_ADDR_OWVAR 2
75982: PUSH
75983: LD_INT 0
75985: ST_TO_ADDR
75986: GO 76002
// your_side := your_side + 1 ;
75988: LD_ADDR_OWVAR 2
75992: PUSH
75993: LD_OWVAR 2
75997: PUSH
75998: LD_INT 1
76000: PLUS
76001: ST_TO_ADDR
// end ;
76002: LD_VAR 0 1
76006: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76007: LD_INT 0
76009: PPUSH
76010: PPUSH
76011: PPUSH
// for i in all_units do
76012: LD_ADDR_VAR 0 2
76016: PUSH
76017: LD_OWVAR 3
76021: PUSH
76022: FOR_IN
76023: IFFALSE 76101
// if IsSelected ( i ) then
76025: LD_VAR 0 2
76029: PPUSH
76030: CALL_OW 306
76034: IFFALSE 76099
// begin j := GetSide ( i ) ;
76036: LD_ADDR_VAR 0 3
76040: PUSH
76041: LD_VAR 0 2
76045: PPUSH
76046: CALL_OW 255
76050: ST_TO_ADDR
// if j = 8 then
76051: LD_VAR 0 3
76055: PUSH
76056: LD_INT 8
76058: EQUAL
76059: IFFALSE 76071
// j := 0 else
76061: LD_ADDR_VAR 0 3
76065: PUSH
76066: LD_INT 0
76068: ST_TO_ADDR
76069: GO 76085
// j := j + 1 ;
76071: LD_ADDR_VAR 0 3
76075: PUSH
76076: LD_VAR 0 3
76080: PUSH
76081: LD_INT 1
76083: PLUS
76084: ST_TO_ADDR
// SetSide ( i , j ) ;
76085: LD_VAR 0 2
76089: PPUSH
76090: LD_VAR 0 3
76094: PPUSH
76095: CALL_OW 235
// end ;
76099: GO 76022
76101: POP
76102: POP
// end ;
76103: LD_VAR 0 1
76107: RET
// export function hHackFog ; begin
76108: LD_INT 0
76110: PPUSH
// FogOff ( true ) ;
76111: LD_INT 1
76113: PPUSH
76114: CALL_OW 344
// end ;
76118: LD_VAR 0 1
76122: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76123: LD_INT 0
76125: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76126: LD_VAR 0 1
76130: PPUSH
76131: LD_VAR 0 2
76135: PPUSH
76136: LD_VAR 0 3
76140: PPUSH
76141: LD_INT 1
76143: PPUSH
76144: LD_INT 1
76146: PPUSH
76147: CALL_OW 483
// CenterOnXY ( x , y ) ;
76151: LD_VAR 0 2
76155: PPUSH
76156: LD_VAR 0 3
76160: PPUSH
76161: CALL_OW 84
// end ;
76165: LD_VAR 0 4
76169: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76170: LD_INT 0
76172: PPUSH
76173: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76174: LD_VAR 0 1
76178: NOT
76179: PUSH
76180: LD_VAR 0 2
76184: PPUSH
76185: LD_VAR 0 3
76189: PPUSH
76190: CALL_OW 488
76194: NOT
76195: OR
76196: PUSH
76197: LD_VAR 0 1
76201: PPUSH
76202: CALL_OW 266
76206: PUSH
76207: LD_INT 3
76209: NONEQUAL
76210: PUSH
76211: LD_VAR 0 1
76215: PPUSH
76216: CALL_OW 247
76220: PUSH
76221: LD_INT 1
76223: EQUAL
76224: NOT
76225: AND
76226: OR
76227: IFFALSE 76231
// exit ;
76229: GO 76380
// if GetType ( factory ) = unit_human then
76231: LD_VAR 0 1
76235: PPUSH
76236: CALL_OW 247
76240: PUSH
76241: LD_INT 1
76243: EQUAL
76244: IFFALSE 76261
// factory := IsInUnit ( factory ) ;
76246: LD_ADDR_VAR 0 1
76250: PUSH
76251: LD_VAR 0 1
76255: PPUSH
76256: CALL_OW 310
76260: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76261: LD_VAR 0 1
76265: PPUSH
76266: CALL_OW 266
76270: PUSH
76271: LD_INT 3
76273: NONEQUAL
76274: IFFALSE 76278
// exit ;
76276: GO 76380
// if HexInfo ( x , y ) = factory then
76278: LD_VAR 0 2
76282: PPUSH
76283: LD_VAR 0 3
76287: PPUSH
76288: CALL_OW 428
76292: PUSH
76293: LD_VAR 0 1
76297: EQUAL
76298: IFFALSE 76325
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76300: LD_ADDR_EXP 104
76304: PUSH
76305: LD_EXP 104
76309: PPUSH
76310: LD_VAR 0 1
76314: PPUSH
76315: LD_INT 0
76317: PPUSH
76318: CALL_OW 1
76322: ST_TO_ADDR
76323: GO 76376
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76325: LD_ADDR_EXP 104
76329: PUSH
76330: LD_EXP 104
76334: PPUSH
76335: LD_VAR 0 1
76339: PPUSH
76340: LD_VAR 0 1
76344: PPUSH
76345: CALL_OW 255
76349: PUSH
76350: LD_VAR 0 1
76354: PUSH
76355: LD_VAR 0 2
76359: PUSH
76360: LD_VAR 0 3
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: PPUSH
76371: CALL_OW 1
76375: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76376: CALL 76385 0 0
// end ;
76380: LD_VAR 0 4
76384: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76385: LD_INT 0
76387: PPUSH
76388: PPUSH
76389: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76390: LD_STRING resetFactoryWaypoint();
76392: PPUSH
76393: CALL_OW 559
// if factoryWaypoints then
76397: LD_EXP 104
76401: IFFALSE 76527
// begin list := PrepareArray ( factoryWaypoints ) ;
76403: LD_ADDR_VAR 0 3
76407: PUSH
76408: LD_EXP 104
76412: PPUSH
76413: CALL 56763 0 1
76417: ST_TO_ADDR
// for i := 1 to list do
76418: LD_ADDR_VAR 0 2
76422: PUSH
76423: DOUBLE
76424: LD_INT 1
76426: DEC
76427: ST_TO_ADDR
76428: LD_VAR 0 3
76432: PUSH
76433: FOR_TO
76434: IFFALSE 76525
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76436: LD_STRING setFactoryWaypointXY(
76438: PUSH
76439: LD_VAR 0 3
76443: PUSH
76444: LD_VAR 0 2
76448: ARRAY
76449: PUSH
76450: LD_INT 1
76452: ARRAY
76453: STR
76454: PUSH
76455: LD_STRING ,
76457: STR
76458: PUSH
76459: LD_VAR 0 3
76463: PUSH
76464: LD_VAR 0 2
76468: ARRAY
76469: PUSH
76470: LD_INT 2
76472: ARRAY
76473: STR
76474: PUSH
76475: LD_STRING ,
76477: STR
76478: PUSH
76479: LD_VAR 0 3
76483: PUSH
76484: LD_VAR 0 2
76488: ARRAY
76489: PUSH
76490: LD_INT 3
76492: ARRAY
76493: STR
76494: PUSH
76495: LD_STRING ,
76497: STR
76498: PUSH
76499: LD_VAR 0 3
76503: PUSH
76504: LD_VAR 0 2
76508: ARRAY
76509: PUSH
76510: LD_INT 4
76512: ARRAY
76513: STR
76514: PUSH
76515: LD_STRING )
76517: STR
76518: PPUSH
76519: CALL_OW 559
76523: GO 76433
76525: POP
76526: POP
// end ; end ;
76527: LD_VAR 0 1
76531: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76532: LD_INT 0
76534: PPUSH
// if HexInfo ( x , y ) = warehouse then
76535: LD_VAR 0 2
76539: PPUSH
76540: LD_VAR 0 3
76544: PPUSH
76545: CALL_OW 428
76549: PUSH
76550: LD_VAR 0 1
76554: EQUAL
76555: IFFALSE 76582
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76557: LD_ADDR_EXP 105
76561: PUSH
76562: LD_EXP 105
76566: PPUSH
76567: LD_VAR 0 1
76571: PPUSH
76572: LD_INT 0
76574: PPUSH
76575: CALL_OW 1
76579: ST_TO_ADDR
76580: GO 76633
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76582: LD_ADDR_EXP 105
76586: PUSH
76587: LD_EXP 105
76591: PPUSH
76592: LD_VAR 0 1
76596: PPUSH
76597: LD_VAR 0 1
76601: PPUSH
76602: CALL_OW 255
76606: PUSH
76607: LD_VAR 0 1
76611: PUSH
76612: LD_VAR 0 2
76616: PUSH
76617: LD_VAR 0 3
76621: PUSH
76622: EMPTY
76623: LIST
76624: LIST
76625: LIST
76626: LIST
76627: PPUSH
76628: CALL_OW 1
76632: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76633: CALL 76642 0 0
// end ;
76637: LD_VAR 0 4
76641: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76642: LD_INT 0
76644: PPUSH
76645: PPUSH
76646: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76647: LD_STRING resetWarehouseGatheringPoints();
76649: PPUSH
76650: CALL_OW 559
// if warehouseGatheringPoints then
76654: LD_EXP 105
76658: IFFALSE 76784
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76660: LD_ADDR_VAR 0 3
76664: PUSH
76665: LD_EXP 105
76669: PPUSH
76670: CALL 56763 0 1
76674: ST_TO_ADDR
// for i := 1 to list do
76675: LD_ADDR_VAR 0 2
76679: PUSH
76680: DOUBLE
76681: LD_INT 1
76683: DEC
76684: ST_TO_ADDR
76685: LD_VAR 0 3
76689: PUSH
76690: FOR_TO
76691: IFFALSE 76782
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76693: LD_STRING setWarehouseGatheringPointXY(
76695: PUSH
76696: LD_VAR 0 3
76700: PUSH
76701: LD_VAR 0 2
76705: ARRAY
76706: PUSH
76707: LD_INT 1
76709: ARRAY
76710: STR
76711: PUSH
76712: LD_STRING ,
76714: STR
76715: PUSH
76716: LD_VAR 0 3
76720: PUSH
76721: LD_VAR 0 2
76725: ARRAY
76726: PUSH
76727: LD_INT 2
76729: ARRAY
76730: STR
76731: PUSH
76732: LD_STRING ,
76734: STR
76735: PUSH
76736: LD_VAR 0 3
76740: PUSH
76741: LD_VAR 0 2
76745: ARRAY
76746: PUSH
76747: LD_INT 3
76749: ARRAY
76750: STR
76751: PUSH
76752: LD_STRING ,
76754: STR
76755: PUSH
76756: LD_VAR 0 3
76760: PUSH
76761: LD_VAR 0 2
76765: ARRAY
76766: PUSH
76767: LD_INT 4
76769: ARRAY
76770: STR
76771: PUSH
76772: LD_STRING )
76774: STR
76775: PPUSH
76776: CALL_OW 559
76780: GO 76690
76782: POP
76783: POP
// end ; end ;
76784: LD_VAR 0 1
76788: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76789: LD_EXP 105
76793: IFFALSE 77478
76795: GO 76797
76797: DISABLE
76798: LD_INT 0
76800: PPUSH
76801: PPUSH
76802: PPUSH
76803: PPUSH
76804: PPUSH
76805: PPUSH
76806: PPUSH
76807: PPUSH
76808: PPUSH
// begin enable ;
76809: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76810: LD_ADDR_VAR 0 3
76814: PUSH
76815: LD_EXP 105
76819: PPUSH
76820: CALL 56763 0 1
76824: ST_TO_ADDR
// if not list then
76825: LD_VAR 0 3
76829: NOT
76830: IFFALSE 76834
// exit ;
76832: GO 77478
// for i := 1 to list do
76834: LD_ADDR_VAR 0 1
76838: PUSH
76839: DOUBLE
76840: LD_INT 1
76842: DEC
76843: ST_TO_ADDR
76844: LD_VAR 0 3
76848: PUSH
76849: FOR_TO
76850: IFFALSE 77476
// begin depot := list [ i ] [ 2 ] ;
76852: LD_ADDR_VAR 0 8
76856: PUSH
76857: LD_VAR 0 3
76861: PUSH
76862: LD_VAR 0 1
76866: ARRAY
76867: PUSH
76868: LD_INT 2
76870: ARRAY
76871: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76872: LD_ADDR_VAR 0 5
76876: PUSH
76877: LD_VAR 0 3
76881: PUSH
76882: LD_VAR 0 1
76886: ARRAY
76887: PUSH
76888: LD_INT 1
76890: ARRAY
76891: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76892: LD_VAR 0 8
76896: PPUSH
76897: CALL_OW 301
76901: PUSH
76902: LD_VAR 0 5
76906: PUSH
76907: LD_VAR 0 8
76911: PPUSH
76912: CALL_OW 255
76916: NONEQUAL
76917: OR
76918: IFFALSE 76947
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76920: LD_ADDR_EXP 105
76924: PUSH
76925: LD_EXP 105
76929: PPUSH
76930: LD_VAR 0 8
76934: PPUSH
76935: LD_INT 0
76937: PPUSH
76938: CALL_OW 1
76942: ST_TO_ADDR
// exit ;
76943: POP
76944: POP
76945: GO 77478
// end ; x := list [ i ] [ 3 ] ;
76947: LD_ADDR_VAR 0 6
76951: PUSH
76952: LD_VAR 0 3
76956: PUSH
76957: LD_VAR 0 1
76961: ARRAY
76962: PUSH
76963: LD_INT 3
76965: ARRAY
76966: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76967: LD_ADDR_VAR 0 7
76971: PUSH
76972: LD_VAR 0 3
76976: PUSH
76977: LD_VAR 0 1
76981: ARRAY
76982: PUSH
76983: LD_INT 4
76985: ARRAY
76986: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76987: LD_ADDR_VAR 0 9
76991: PUSH
76992: LD_VAR 0 6
76996: PPUSH
76997: LD_VAR 0 7
77001: PPUSH
77002: LD_INT 16
77004: PPUSH
77005: CALL 55351 0 3
77009: ST_TO_ADDR
// if not cratesNearbyPoint then
77010: LD_VAR 0 9
77014: NOT
77015: IFFALSE 77021
// exit ;
77017: POP
77018: POP
77019: GO 77478
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
77021: LD_ADDR_VAR 0 4
77025: PUSH
77026: LD_INT 22
77028: PUSH
77029: LD_VAR 0 5
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: LD_INT 3
77040: PUSH
77041: LD_INT 60
77043: PUSH
77044: EMPTY
77045: LIST
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: PUSH
77051: LD_INT 91
77053: PUSH
77054: LD_VAR 0 8
77058: PUSH
77059: LD_INT 6
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 2
77069: PUSH
77070: LD_INT 25
77072: PUSH
77073: LD_INT 2
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: LD_INT 25
77082: PUSH
77083: LD_INT 16
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: LIST
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: PPUSH
77101: CALL_OW 69
77105: PUSH
77106: LD_VAR 0 8
77110: PPUSH
77111: CALL_OW 313
77115: PPUSH
77116: LD_INT 3
77118: PUSH
77119: LD_INT 60
77121: PUSH
77122: EMPTY
77123: LIST
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 2
77131: PUSH
77132: LD_INT 25
77134: PUSH
77135: LD_INT 2
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 25
77144: PUSH
77145: LD_INT 16
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: LIST
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PPUSH
77161: CALL_OW 72
77165: UNION
77166: ST_TO_ADDR
// if tmp then
77167: LD_VAR 0 4
77171: IFFALSE 77251
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77173: LD_ADDR_VAR 0 4
77177: PUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: LD_INT 3
77185: PPUSH
77186: CALL 53320 0 2
77190: ST_TO_ADDR
// for j in tmp do
77191: LD_ADDR_VAR 0 2
77195: PUSH
77196: LD_VAR 0 4
77200: PUSH
77201: FOR_IN
77202: IFFALSE 77245
// begin if IsInUnit ( j ) then
77204: LD_VAR 0 2
77208: PPUSH
77209: CALL_OW 310
77213: IFFALSE 77224
// ComExit ( j ) ;
77215: LD_VAR 0 2
77219: PPUSH
77220: CALL 53403 0 1
// AddComCollect ( j , x , y ) ;
77224: LD_VAR 0 2
77228: PPUSH
77229: LD_VAR 0 6
77233: PPUSH
77234: LD_VAR 0 7
77238: PPUSH
77239: CALL_OW 177
// end ;
77243: GO 77201
77245: POP
77246: POP
// exit ;
77247: POP
77248: POP
77249: GO 77478
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77251: LD_ADDR_VAR 0 4
77255: PUSH
77256: LD_INT 22
77258: PUSH
77259: LD_VAR 0 5
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PUSH
77268: LD_INT 91
77270: PUSH
77271: LD_VAR 0 8
77275: PUSH
77276: LD_INT 8
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 2
77286: PUSH
77287: LD_INT 34
77289: PUSH
77290: LD_INT 12
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 34
77299: PUSH
77300: LD_INT 51
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 34
77309: PUSH
77310: LD_INT 32
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 34
77319: PUSH
77320: LD_INT 89
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: LIST
77338: PPUSH
77339: CALL_OW 69
77343: ST_TO_ADDR
// if tmp then
77344: LD_VAR 0 4
77348: IFFALSE 77474
// begin for j in tmp do
77350: LD_ADDR_VAR 0 2
77354: PUSH
77355: LD_VAR 0 4
77359: PUSH
77360: FOR_IN
77361: IFFALSE 77472
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77363: LD_VAR 0 2
77367: PPUSH
77368: CALL_OW 262
77372: PUSH
77373: LD_INT 3
77375: EQUAL
77376: PUSH
77377: LD_VAR 0 2
77381: PPUSH
77382: CALL_OW 261
77386: PUSH
77387: LD_INT 20
77389: GREATER
77390: OR
77391: PUSH
77392: LD_VAR 0 2
77396: PPUSH
77397: CALL_OW 314
77401: NOT
77402: AND
77403: PUSH
77404: LD_VAR 0 2
77408: PPUSH
77409: CALL_OW 263
77413: PUSH
77414: LD_INT 1
77416: NONEQUAL
77417: PUSH
77418: LD_VAR 0 2
77422: PPUSH
77423: CALL_OW 311
77427: OR
77428: AND
77429: IFFALSE 77470
// begin ComCollect ( j , x , y ) ;
77431: LD_VAR 0 2
77435: PPUSH
77436: LD_VAR 0 6
77440: PPUSH
77441: LD_VAR 0 7
77445: PPUSH
77446: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77450: LD_VAR 0 2
77454: PPUSH
77455: LD_VAR 0 8
77459: PPUSH
77460: CALL_OW 172
// exit ;
77464: POP
77465: POP
77466: POP
77467: POP
77468: GO 77478
// end ;
77470: GO 77360
77472: POP
77473: POP
// end ; end ;
77474: GO 76849
77476: POP
77477: POP
// end ; end_of_file
77478: PPOPN 9
77480: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77481: LD_VAR 0 1
77485: PPUSH
77486: LD_VAR 0 2
77490: PPUSH
77491: LD_VAR 0 3
77495: PPUSH
77496: LD_VAR 0 4
77500: PPUSH
77501: LD_VAR 0 5
77505: PPUSH
77506: LD_VAR 0 6
77510: PPUSH
77511: CALL 61834 0 6
// end ;
77515: PPOPN 6
77517: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77518: LD_INT 0
77520: PPUSH
// begin if not units then
77521: LD_VAR 0 1
77525: NOT
77526: IFFALSE 77530
// exit ;
77528: GO 77530
// end ;
77530: PPOPN 7
77532: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77533: CALL 61738 0 0
// end ; end_of_file
77537: PPOPN 1
77539: END
