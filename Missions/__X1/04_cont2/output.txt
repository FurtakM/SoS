// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5617 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 35470 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 29896 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 29896 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 29896 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 29896 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 29896 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 29896 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 29896 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 29896 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 29896 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 29896 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 29896 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 29896 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 29896 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 29896 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 29896 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL 25585 0 1
// if un = Heike then
4846: LD_VAR 0 1
4850: PUSH
4851: LD_EXP 18
4855: EQUAL
4856: IFFALSE 4865
// YouLost ( Heike ) ;
4858: LD_STRING Heike
4860: PPUSH
4861: CALL_OW 104
// if un in ruEng then
4865: LD_VAR 0 1
4869: PUSH
4870: LD_EXP 38
4874: IN
4875: IFFALSE 4893
// ruEng := ruEng diff un ;
4877: LD_ADDR_EXP 38
4881: PUSH
4882: LD_EXP 38
4886: PUSH
4887: LD_VAR 0 1
4891: DIFF
4892: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4893: LD_VAR 0 1
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 2
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 23
4920: PUSH
4921: LD_INT 2
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: IN
4938: IFFALSE 4954
// loseCounter := loseCounter + 1 ;
4940: LD_ADDR_EXP 6
4944: PUSH
4945: LD_EXP 6
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: ST_TO_ADDR
// end ;
4954: PPOPN 1
4956: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4957: LD_INT 0
4959: PPUSH
4960: PPUSH
// begin if un in ruMobile then
4961: LD_VAR 0 2
4965: PUSH
4966: LD_EXP 41
4970: IN
4971: IFFALSE 5130
// begin ruMobile := ruMobile diff un ;
4973: LD_ADDR_EXP 41
4977: PUSH
4978: LD_EXP 41
4982: PUSH
4983: LD_VAR 0 2
4987: DIFF
4988: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4989: LD_ADDR_VAR 0 5
4993: PUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 264
5003: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5004: LD_ADDR_VAR 0 6
5008: PUSH
5009: LD_INT 110
5011: PPUSH
5012: LD_INT 126
5014: PPUSH
5015: CALL_OW 428
5019: ST_TO_ADDR
// if not driver or not fac then
5020: LD_VAR 0 1
5024: NOT
5025: PUSH
5026: LD_VAR 0 6
5030: NOT
5031: OR
5032: IFFALSE 5036
// exit ;
5034: GO 5130
// AddComMoveXY ( driver , 111 , 121 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 111
5043: PPUSH
5044: LD_INT 121
5046: PPUSH
5047: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 6
5060: PPUSH
5061: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5065: LD_INT 35
5067: PPUSH
5068: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 301
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 310
5091: OR
5092: IFFALSE 5065
// if IsDead ( driver ) then
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 301
5103: IFFALSE 5107
// exit ;
5105: GO 5130
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 21
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: LD_VAR 0 5
5125: PPUSH
5126: CALL_OW 185
// end ; end ;
5130: PPOPN 6
5132: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: CALL 25707 0 2
// if GetSide ( fac ) = 3 then
5147: LD_VAR 0 2
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 3
5159: EQUAL
5160: IFFALSE 5206
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5162: LD_ADDR_EXP 41
5166: PUSH
5167: LD_EXP 41
5171: PPUSH
5172: LD_EXP 41
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PPUSH
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 1
5190: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 110
5198: PPUSH
5199: LD_INT 117
5201: PPUSH
5202: CALL_OW 171
// end ; end ;
5206: PPOPN 2
5208: END
// on LeaveBuilding ( b , un ) do var barracks ;
5209: LD_INT 0
5211: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 130
5219: PPUSH
5220: LD_INT 17
5222: PPUSH
5223: CALL_OW 428
5227: PUSH
5228: LD_INT 138
5230: PPUSH
5231: LD_INT 22
5233: PPUSH
5234: CALL_OW 428
5238: PUSH
5239: LD_INT 123
5241: PPUSH
5242: LD_INT 17
5244: PPUSH
5245: CALL_OW 428
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: IN
5255: IFFALSE 5279
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5257: LD_VAR 0 2
5261: PPUSH
5262: LD_INT 135
5264: PPUSH
5265: LD_INT 31
5267: PPUSH
5268: CALL_OW 428
5272: PPUSH
5273: CALL_OW 180
// exit ;
5277: GO 5553
// end ; if b = HexInfo ( 135 , 31 ) then
5279: LD_VAR 0 1
5283: PUSH
5284: LD_INT 135
5286: PPUSH
5287: LD_INT 31
5289: PPUSH
5290: CALL_OW 428
5294: EQUAL
5295: IFFALSE 5367
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5297: LD_VAR 0 2
5301: PPUSH
5302: LD_INT 106
5304: PPUSH
5305: LD_INT 51
5307: PPUSH
5308: CALL_OW 428
5312: PPUSH
5313: CALL_OW 180
// if not explodeFirstDepot then
5317: LD_EXP 12
5321: NOT
5322: IFFALSE 5365
// begin explodeFirstDepot := true ;
5324: LD_ADDR_EXP 12
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5332: LD_INT 525
5334: PPUSH
5335: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5339: LD_INT 127
5341: PPUSH
5342: LD_INT 27
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5352: LD_INT 125
5354: PPUSH
5355: LD_INT 29
5357: PPUSH
5358: LD_INT 1
5360: PPUSH
5361: CALL_OW 453
// end ; exit ;
5365: GO 5553
// end ; if b = HexInfo ( 106 , 51 ) then
5367: LD_VAR 0 1
5371: PUSH
5372: LD_INT 106
5374: PPUSH
5375: LD_INT 51
5377: PPUSH
5378: CALL_OW 428
5382: EQUAL
5383: IFFALSE 5483
// begin AddComMoveXY ( un , 106 , 93 ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: LD_INT 106
5392: PPUSH
5393: LD_INT 93
5395: PPUSH
5396: CALL_OW 171
// if not explodeSecondDepot then
5400: LD_EXP 13
5404: NOT
5405: IFFALSE 5481
// begin explodeSecondDepot := true ;
5407: LD_ADDR_EXP 13
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5415: LD_INT 420
5417: PPUSH
5418: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5422: LD_INT 111
5424: PPUSH
5425: LD_INT 75
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5435: LD_INT 111
5437: PPUSH
5438: LD_INT 75
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5448: LD_INT 108
5450: PPUSH
5451: LD_INT 69
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 453
// wait ( 0 0$2 ) ;
5461: LD_INT 70
5463: PPUSH
5464: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5468: LD_INT 94
5470: PPUSH
5471: LD_INT 65
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 453
// end ; exit ;
5481: GO 5553
// end ; if GetBType ( b ) = b_bunker then
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 266
5492: PUSH
5493: LD_INT 32
5495: EQUAL
5496: IFFALSE 5553
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5498: LD_ADDR_VAR 0 3
5502: PUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 5
5510: PPUSH
5511: CALL 1008 0 2
5515: ST_TO_ADDR
// if barracks then
5516: LD_VAR 0 3
5520: IFFALSE 5538
// AddComEnterUnit ( un , barracks ) else
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_VAR 0 3
5531: PPUSH
5532: CALL_OW 180
5536: GO 5553
// AddComMoveXY ( un , 116 , 110 ) ;
5538: LD_VAR 0 2
5542: PPUSH
5543: LD_INT 116
5545: PPUSH
5546: LD_INT 110
5548: PPUSH
5549: CALL_OW 171
// end ; end ;
5553: PPOPN 3
5555: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_EXP 23
5565: EQUAL
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 3
5574: PUSH
5575: LD_INT 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: IN
5582: AND
5583: IFFALSE 5614
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5585: LD_ADDR_EXP 8
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 250
5599: PUSH
5600: LD_VAR 0 1
5604: PPUSH
5605: CALL_OW 251
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
// end ; end_of_file
5614: PPOPN 3
5616: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5617: LD_INT 0
5619: PPUSH
5620: PPUSH
5621: PPUSH
5622: PPUSH
5623: PPUSH
5624: PPUSH
// InGameOn ;
5625: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5629: LD_INT 5
5631: PPUSH
5632: LD_INT 2
5634: PPUSH
5635: CALL_OW 343
// music_nat := 4 ;
5639: LD_ADDR_OWVAR 71
5643: PUSH
5644: LD_INT 4
5646: ST_TO_ADDR
// music_class := music_combat ;
5647: LD_ADDR_OWVAR 72
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5655: LD_INT 133
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: LD_INT 2
5663: PPUSH
5664: LD_INT 10
5666: PPUSH
5667: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5671: LD_INT 133
5673: PPUSH
5674: LD_INT 2
5676: PPUSH
5677: CALL_OW 86
// wait ( 0 0$1 ) ;
5681: LD_INT 35
5683: PPUSH
5684: CALL_OW 67
// uc_side := 6 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 6
5695: ST_TO_ADDR
// uc_nation := 3 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 3
5703: ST_TO_ADDR
// rutmp := [ ] ;
5704: LD_ADDR_VAR 0 6
5708: PUSH
5709: EMPTY
5710: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5711: LD_INT 6
5713: PPUSH
5714: LD_INT 3
5716: PPUSH
5717: LD_INT 21
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 44
5728: PPUSH
5729: LD_INT 66
5731: PPUSH
5732: CALL 336 0 7
// veh := CreateVehicle ;
5736: LD_ADDR_VAR 0 4
5740: PUSH
5741: CALL_OW 45
5745: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5746: LD_VAR 0 4
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 49
// SetLives ( veh , 500 ) ;
5773: LD_VAR 0 4
5777: PPUSH
5778: LD_INT 500
5780: PPUSH
5781: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PPUSH
5791: LD_INT 3
5793: PPUSH
5794: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5798: CALL_OW 44
5802: PPUSH
5803: LD_VAR 0 4
5807: PPUSH
5808: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 133
5819: PPUSH
5820: LD_INT 11
5822: PPUSH
5823: CALL_OW 111
// rutmp := [ veh ] ;
5827: LD_ADDR_VAR 0 6
5831: PUSH
5832: LD_VAR 0 4
5836: PUSH
5837: EMPTY
5838: LIST
5839: ST_TO_ADDR
// for i := 1 to 4 do
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: DOUBLE
5846: LD_INT 1
5848: DEC
5849: ST_TO_ADDR
5850: LD_INT 4
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5961
// begin PrepareHuman ( false , i , 2 ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: CALL_OW 380
// un := CreateHuman ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL_OW 44
5880: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5893: LD_VAR 0 3
5897: PPUSH
5898: LD_INT 8
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5908: LD_ADDR_VAR 0 6
5912: PUSH
5913: LD_VAR 0 6
5917: PPUSH
5918: LD_VAR 0 6
5922: PUSH
5923: LD_INT 1
5925: PLUS
5926: PPUSH
5927: LD_VAR 0 3
5931: PPUSH
5932: CALL_OW 1
5936: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5937: LD_VAR 0 3
5941: PPUSH
5942: LD_INT 133
5944: PPUSH
5945: LD_INT 11
5947: PPUSH
5948: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5952: LD_INT 18
5954: PPUSH
5955: CALL_OW 67
// end ;
5959: GO 5853
5961: POP
5962: POP
// for i in rutmp do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_VAR 0 6
5972: PUSH
5973: FOR_IN
5974: IFFALSE 6023
// begin AddComMoveXY ( i , 99 , 65 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 99
5983: PPUSH
5984: LD_INT 65
5986: PPUSH
5987: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 76
5998: PPUSH
5999: LD_INT 108
6001: PPUSH
6002: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 92
6013: PPUSH
6014: LD_INT 176
6016: PPUSH
6017: CALL_OW 171
// end ;
6021: GO 5973
6023: POP
6024: POP
// wait ( 0 0$10 ) ;
6025: LD_INT 350
6027: PPUSH
6028: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6032: LD_ADDR_VAR 0 5
6036: PUSH
6037: LD_EXP 18
6041: PUSH
6042: LD_EXP 19
6046: PUSH
6047: LD_EXP 20
6051: PUSH
6052: LD_EXP 21
6056: PUSH
6057: LD_EXP 22
6061: PUSH
6062: LD_EXP 23
6066: PUSH
6067: LD_EXP 24
6071: PUSH
6072: LD_EXP 25
6076: PUSH
6077: LD_EXP 27
6081: PUSH
6082: LD_EXP 28
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_EXP 29
6103: UNION
6104: ST_TO_ADDR
// tmp := tmp diff 0 ;
6105: LD_ADDR_VAR 0 5
6109: PUSH
6110: LD_VAR 0 5
6114: PUSH
6115: LD_INT 0
6117: DIFF
6118: ST_TO_ADDR
// for i in heikeVehicles do
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_EXP 30
6128: PUSH
6129: FOR_IN
6130: IFFALSE 6396
// begin if not tmp then
6132: LD_VAR 0 5
6136: NOT
6137: IFFALSE 6141
// continue ;
6139: GO 6129
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6141: LD_INT 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PUSH
6149: LD_INT 5
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: ARRAY
6161: PPUSH
6162: LD_VAR 0 2
6166: PUSH
6167: LD_INT 2
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 3
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 2
6184: PUSH
6185: LD_INT 4
6187: ARRAY
6188: PPUSH
6189: LD_INT 34
6191: PPUSH
6192: CALL 336 0 7
// veh := CreateVehicle ;
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: CALL_OW 45
6205: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6206: LD_VAR 0 2
6210: PUSH
6211: LD_INT 4
6213: ARRAY
6214: PUSH
6215: LD_INT 51
6217: PUSH
6218: LD_INT 32
6220: PUSH
6221: LD_INT 12
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: IN
6229: IFFALSE 6309
// begin if i [ 7 ] [ 1 ] then
6231: LD_VAR 0 2
6235: PUSH
6236: LD_INT 7
6238: ARRAY
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: IFFALSE 6270
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6245: LD_VAR 0 4
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: LD_VAR 0 2
6257: PUSH
6258: LD_INT 7
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PPUSH
6266: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6270: LD_VAR 0 2
6274: PUSH
6275: LD_INT 7
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: IFFALSE 6309
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6284: LD_VAR 0 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_INT 7
6299: ARRAY
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PPUSH
6305: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6309: LD_VAR 0 4
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6321: LD_VAR 0 4
6325: PPUSH
6326: LD_INT 8
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6336: LD_VAR 0 5
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 3
6371: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 133
6379: PPUSH
6380: LD_INT 7
6382: PPUSH
6383: CALL_OW 114
// wait ( 0 0$1 ) ;
6387: LD_INT 35
6389: PPUSH
6390: CALL_OW 67
// end ;
6394: GO 6129
6396: POP
6397: POP
// if tmp then
6398: LD_VAR 0 5
6402: IFFALSE 6458
// for i in tmp do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: LD_VAR 0 5
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6456
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 10
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 146
6439: PPUSH
6440: LD_INT 7
6442: PPUSH
6443: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6447: LD_INT 18
6449: PPUSH
6450: CALL_OW 67
// end ;
6454: GO 6414
6456: POP
6457: POP
// if heikeApes then
6458: LD_EXP 31
6462: IFFALSE 6518
// for i in heikeApes do
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_EXP 31
6473: PUSH
6474: FOR_IN
6475: IFFALSE 6516
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 10
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6492: LD_VAR 0 2
6496: PPUSH
6497: LD_INT 146
6499: PPUSH
6500: LD_INT 7
6502: PPUSH
6503: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6507: LD_INT 18
6509: PPUSH
6510: CALL_OW 67
// end ;
6514: GO 6474
6516: POP
6517: POP
// DialogueOn ;
6518: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6522: LD_EXP 18
6526: PPUSH
6527: LD_STRING DH-outpost-a-1
6529: PPUSH
6530: CALL_OW 88
// DialogueOff ;
6534: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6538: LD_INT 133
6540: PPUSH
6541: LD_INT 2
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 331
// InGameOff ;
6551: CALL_OW 9
// music_nat := 0 ;
6555: LD_ADDR_OWVAR 71
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// music_class := 0 ;
6563: LD_ADDR_OWVAR 72
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6571: LD_STRING Outposts
6573: PPUSH
6574: CALL_OW 337
// SaveForQuickRestart ;
6578: CALL_OW 22
// end ;
6582: LD_VAR 0 1
6586: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6587: LD_INT 22
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 91
6599: PUSH
6600: LD_EXP 21
6604: PUSH
6605: LD_INT 20
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: PUSH
6622: LD_EXP 3
6626: AND
6627: PUSH
6628: LD_EXP 21
6632: PPUSH
6633: CALL_OW 302
6637: AND
6638: IFFALSE 6885
6640: GO 6642
6642: DISABLE
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin IbrahimBetrayal ;
6649: CALL 6888 0 0
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6660: LD_EXP 21
6664: PPUSH
6665: CALL_OW 301
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 91
6682: PUSH
6683: LD_EXP 21
6687: PUSH
6688: LD_INT 6
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PUSH
6705: LD_EXP 21
6709: PPUSH
6710: CALL_OW 302
6714: AND
6715: OR
6716: IFFALSE 6653
// if IsDead ( Ibrahim ) then
6718: LD_EXP 21
6722: PPUSH
6723: CALL_OW 301
6727: IFFALSE 6731
// exit ;
6729: GO 6885
// x := GetX ( Ibrahim ) ;
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: LD_EXP 21
6740: PPUSH
6741: CALL_OW 250
6745: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 21
6755: PPUSH
6756: CALL_OW 251
6760: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_EXP 21
6770: PPUSH
6771: CALL_OW 254
6775: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: LD_EXP 21
6785: PPUSH
6786: CALL_OW 256
6790: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6791: LD_EXP 21
6795: PPUSH
6796: CALL_OW 64
// uc_side := 2 ;
6800: LD_ADDR_OWVAR 20
6804: PUSH
6805: LD_INT 2
6807: ST_TO_ADDR
// uc_nation := 2 ;
6808: LD_ADDR_OWVAR 21
6812: PUSH
6813: LD_INT 2
6815: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6816: LD_ADDR_EXP 21
6820: PUSH
6821: LD_STRING Ibrahim
6823: PPUSH
6824: LD_INT 0
6826: PPUSH
6827: LD_STRING 
6829: PPUSH
6830: CALL 29896 0 3
6834: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6835: LD_EXP 21
6839: PPUSH
6840: LD_VAR 0 3
6844: PPUSH
6845: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6849: LD_EXP 21
6853: PPUSH
6854: LD_VAR 0 1
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_INT 0
6866: PPUSH
6867: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6871: LD_EXP 21
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 234
// end ;
6885: PPOPN 4
6887: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6893: LD_INT 122
6895: PPUSH
6896: LD_INT 77
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 6
6904: NEG
6905: PPUSH
6906: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6910: LD_EXP 21
6914: PPUSH
6915: LD_INT 123
6917: PPUSH
6918: LD_INT 79
6920: PPUSH
6921: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6925: LD_EXP 21
6929: PPUSH
6930: LD_INT 125
6932: PPUSH
6933: LD_INT 82
6935: PPUSH
6936: CALL_OW 178
// wait ( 0 0$2 ) ;
6940: LD_INT 70
6942: PPUSH
6943: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6947: LD_EXP 42
6951: PPUSH
6952: LD_EXP 21
6956: PPUSH
6957: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6961: LD_EXP 42
6965: PPUSH
6966: LD_STRING DRum-outpost-b-3
6968: PPUSH
6969: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_INT 125
6980: PPUSH
6981: LD_INT 76
6983: PPUSH
6984: CALL_OW 428
6988: PUSH
6989: LD_INT 125
6991: PPUSH
6992: LD_INT 79
6994: PPUSH
6995: CALL_OW 428
6999: PUSH
7000: LD_INT 125
7002: PPUSH
7003: LD_INT 82
7005: PPUSH
7006: CALL_OW 428
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
// for i in tmp do
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_VAR 0 3
7025: PUSH
7026: FOR_IN
7027: IFFALSE 7043
// SetLives ( i , 200 ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 200
7036: PPUSH
7037: CALL_OW 234
7041: GO 7026
7043: POP
7044: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7045: LD_EXP 21
7049: PPUSH
7050: LD_STRING DI-outpost-b-4
7052: PPUSH
7053: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7057: LD_EXP 21
7061: PPUSH
7062: LD_INT 5
7064: PPUSH
7065: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7069: LD_EXP 21
7073: PUSH
7074: LD_EXP 42
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PPUSH
7083: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7087: LD_INT 122
7089: PPUSH
7090: LD_INT 77
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: CALL_OW 331
// if Givi then
7100: LD_EXP 19
7104: IFFALSE 7120
// Say ( Givi , DG-1-outpost-b-5 ) else
7106: LD_EXP 19
7110: PPUSH
7111: LD_STRING DG-1-outpost-b-5
7113: PPUSH
7114: CALL_OW 88
7118: GO 7185
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7120: LD_EXP 29
7124: PPUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 72
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: PPUSH
7144: LD_STRING DArf-outpost-b-a-5
7146: PPUSH
7147: CALL_OW 88
7151: NOT
7152: IFFALSE 7185
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7154: LD_EXP 29
7158: PPUSH
7159: LD_INT 26
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 72
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PPUSH
7178: LD_STRING DArm-outpost-b-a-5
7180: PPUSH
7181: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7192: LD_EXP 21
7196: PPUSH
7197: CALL_OW 301
7201: PUSH
7202: LD_EXP 18
7206: PPUSH
7207: LD_EXP 21
7211: PPUSH
7212: CALL_OW 296
7216: PUSH
7217: LD_INT 6
7219: LESS
7220: PUSH
7221: LD_EXP 21
7225: PPUSH
7226: CALL_OW 302
7230: AND
7231: OR
7232: IFFALSE 7185
// if IsDead ( Ibrahim ) then
7234: LD_EXP 21
7238: PPUSH
7239: CALL_OW 301
7243: IFFALSE 7259
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7245: LD_EXP 18
7249: PPUSH
7250: LD_STRING DH-ibrahimdead-1
7252: PPUSH
7253: CALL_OW 88
// exit ;
7257: GO 7300
// end ; CenterNowOnUnits ( Ibrahim ) ;
7259: LD_EXP 21
7263: PPUSH
7264: CALL_OW 87
// DialogueOn ;
7268: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7272: LD_EXP 21
7276: PPUSH
7277: LD_STRING DI-ibrahimlives-1
7279: PPUSH
7280: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7284: LD_EXP 18
7288: PPUSH
7289: LD_STRING DH-Ibrahimlives-2
7291: PPUSH
7292: CALL_OW 88
// DialogueOff ;
7296: CALL_OW 7
// end ;
7300: LD_VAR 0 1
7304: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7305: LD_INT 11
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 70
7322: PUSH
7323: LD_OWVAR 1
7327: PUSH
7328: LD_INT 18900
7330: PUSH
7331: LD_INT 16800
7333: PUSH
7334: LD_INT 16800
7336: PUSH
7337: LD_INT 15750
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: GREATEREQUAL
7352: OR
7353: IFFALSE 7814
7355: GO 7357
7357: DISABLE
// begin outerAreaAchived := true ;
7358: LD_ADDR_EXP 15
7362: PUSH
7363: LD_INT 1
7365: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7366: LD_INT 700
7368: PPUSH
7369: CALL_OW 67
// DialogueOn ;
7373: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7377: LD_EXP 26
7381: PPUSH
7382: LD_STRING DShar-radio-1
7384: PPUSH
7385: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7389: LD_EXP 26
7393: PPUSH
7394: LD_STRING DShar-radio-2
7396: PPUSH
7397: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7401: LD_EXP 18
7405: PPUSH
7406: LD_STRING DH-radio-2
7408: PPUSH
7409: CALL_OW 88
// DialogueOff ;
7413: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7417: LD_STRING Gaidar
7419: PPUSH
7420: CALL_OW 337
// if Difficulty < 3 then
7424: LD_OWVAR 67
7428: PUSH
7429: LD_INT 3
7431: LESS
7432: IFFALSE 7498
// begin DialogueOn ;
7434: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7438: LD_INT 11
7440: PPUSH
7441: LD_INT 14
7443: PPUSH
7444: LD_INT 2
7446: PPUSH
7447: LD_INT 6
7449: NEG
7450: PPUSH
7451: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7455: LD_INT 11
7457: PPUSH
7458: LD_INT 14
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7468: LD_INT 11
7470: PPUSH
7471: LD_INT 14
7473: PPUSH
7474: CALL_OW 84
// dwait ( 0 0$1 ) ;
7478: LD_INT 35
7480: PPUSH
7481: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7485: LD_EXP 18
7489: PPUSH
7490: CALL_OW 87
// DialogueOff ;
7494: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7498: LD_INT 1050
7500: PUSH
7501: LD_INT 350
7503: PPUSH
7504: LD_INT 525
7506: PPUSH
7507: CALL_OW 12
7511: PUSH
7512: LD_OWVAR 67
7516: MUL
7517: PLUS
7518: PPUSH
7519: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 428
7540: PUSH
7541: LD_INT 0
7543: EQUAL
7544: IFFALSE 7523
// SetDir ( Gaidar , 2 ) ;
7546: LD_EXP 35
7550: PPUSH
7551: LD_INT 2
7553: PPUSH
7554: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7558: LD_EXP 35
7562: PPUSH
7563: LD_INT 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: LD_INT 0
7571: PPUSH
7572: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7576: LD_EXP 35
7580: PPUSH
7581: LD_INT 19
7583: PPUSH
7584: LD_INT 24
7586: PPUSH
7587: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7591: LD_EXP 35
7595: PPUSH
7596: LD_INT 210
7598: PPUSH
7599: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7603: LD_EXP 35
7607: PPUSH
7608: LD_INT 38
7610: PPUSH
7611: LD_INT 47
7613: PPUSH
7614: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7618: LD_EXP 35
7622: PPUSH
7623: LD_INT 32
7625: PPUSH
7626: LD_INT 59
7628: PPUSH
7629: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7633: LD_EXP 35
7637: PPUSH
7638: LD_INT 350
7640: PPUSH
7641: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7645: LD_EXP 35
7649: PPUSH
7650: LD_INT 62
7652: PPUSH
7653: LD_INT 116
7655: PPUSH
7656: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7660: LD_EXP 35
7664: PPUSH
7665: LD_INT 92
7667: PPUSH
7668: LD_INT 177
7670: PPUSH
7671: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7675: LD_INT 35
7677: PPUSH
7678: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7682: LD_EXP 35
7686: PPUSH
7687: CALL_OW 301
7691: PUSH
7692: LD_EXP 35
7696: PPUSH
7697: LD_INT 92
7699: PPUSH
7700: LD_INT 177
7702: PPUSH
7703: CALL_OW 307
7707: OR
7708: IFFALSE 7675
// if IsAt ( Gaidar , 92 , 177 ) then
7710: LD_EXP 35
7714: PPUSH
7715: LD_INT 92
7717: PPUSH
7718: LD_INT 177
7720: PPUSH
7721: CALL_OW 307
7725: IFFALSE 7792
// begin DialogueOn ;
7727: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7731: LD_INT 92
7733: PPUSH
7734: LD_INT 177
7736: PPUSH
7737: LD_INT 2
7739: PPUSH
7740: LD_INT 3
7742: NEG
7743: PPUSH
7744: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7748: LD_EXP 35
7752: PPUSH
7753: CALL_OW 87
// dwait ( 0 0$2 ) ;
7757: LD_INT 70
7759: PPUSH
7760: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7764: LD_INT 92
7766: PPUSH
7767: LD_INT 177
7769: PPUSH
7770: LD_INT 2
7772: PPUSH
7773: CALL_OW 331
// DialogueOff ;
7777: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7781: LD_EXP 35
7785: PPUSH
7786: CALL_OW 64
// exit ;
7790: GO 7814
// end ; gaidarKilled := true ;
7792: LD_ADDR_EXP 14
7796: PUSH
7797: LD_INT 1
7799: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7800: LD_STRING GaidarKilled
7802: PPUSH
7803: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7807: LD_STRING ACH_COMMISAR
7809: PPUSH
7810: CALL_OW 543
// end ;
7814: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7815: LD_INT 2
7817: PPUSH
7818: LD_EXP 35
7822: PPUSH
7823: CALL_OW 292
7827: IFFALSE 7844
7829: GO 7831
7831: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7832: LD_EXP 35
7836: PPUSH
7837: LD_STRING DT-objective-1
7839: PPUSH
7840: CALL_OW 88
7844: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7845: LD_INT 22
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 2
7857: PUSH
7858: LD_INT 95
7860: PUSH
7861: LD_INT 5
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 95
7870: PUSH
7871: LD_INT 6
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 95
7880: PUSH
7881: LD_INT 7
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: IFFALSE 7939
7904: GO 7906
7906: DISABLE
// begin DialogueOn ;
7907: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7911: LD_EXP 18
7915: PPUSH
7916: LD_STRING DH-outpost-last-1
7918: PPUSH
7919: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7923: LD_EXP 34
7927: PPUSH
7928: LD_STRING DB-outpost-last-2
7930: PPUSH
7931: CALL_OW 94
// DialogueOff ;
7935: CALL_OW 7
// end ;
7939: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7940: LD_INT 200
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 999
7950: LESS
7951: PUSH
7952: LD_INT 200
7954: PPUSH
7955: CALL_OW 255
7959: PUSH
7960: LD_INT 2
7962: EQUAL
7963: OR
7964: IFFALSE 8137
7966: GO 7968
7968: DISABLE
7969: LD_INT 0
7971: PPUSH
7972: PPUSH
// begin if not earlyEscape then
7973: LD_EXP 16
7977: NOT
7978: IFFALSE 8004
// begin SayRadio ( Burlak , DB-end-1 ) ;
7980: LD_EXP 34
7984: PPUSH
7985: LD_STRING DB-end-1
7987: PPUSH
7988: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7992: LD_EXP 18
7996: PPUSH
7997: LD_STRING DH-end-2
7999: PPUSH
8000: CALL_OW 88
// end ; if tick <= 15 15$00 then
8004: LD_OWVAR 1
8008: PUSH
8009: LD_INT 31500
8011: LESSEQUAL
8012: IFFALSE 8021
// SetAchievement ( ACH_FIST ) ;
8014: LD_STRING ACH_FIST
8016: PPUSH
8017: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_INT 3
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: LD_INT 21
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PPUSH
8057: CALL_OW 69
8061: ST_TO_ADDR
// if not tmp then
8062: LD_VAR 0 2
8066: NOT
8067: IFFALSE 8071
// exit ;
8069: GO 8137
// for i in tmp do
8071: LD_ADDR_VAR 0 1
8075: PUSH
8076: LD_VAR 0 2
8080: PUSH
8081: FOR_IN
8082: IFFALSE 8135
// begin SetTag ( i , tEscape ) ;
8084: LD_VAR 0 1
8088: PPUSH
8089: LD_EXP 17
8093: PPUSH
8094: CALL_OW 109
// if IsInUnit ( i ) then
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 310
8107: IFFALSE 8118
// ComExitBuilding ( i ) ;
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: LD_INT 92
8125: PPUSH
8126: LD_INT 177
8128: PPUSH
8129: CALL_OW 171
// end ;
8133: GO 8081
8135: POP
8136: POP
// end ;
8137: PPOPN 2
8139: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8140: LD_INT 4
8142: PPUSH
8143: LD_INT 22
8145: PUSH
8146: LD_INT 2
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PPUSH
8153: CALL_OW 70
8157: PUSH
8158: LD_EXP 15
8162: NOT
8163: AND
8164: PUSH
8165: LD_EXP 27
8169: PPUSH
8170: CALL_OW 302
8174: AND
8175: IFFALSE 8415
8177: GO 8179
8179: DISABLE
// begin DialogueOn ;
8180: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8184: LD_INT 111
8186: PPUSH
8187: LD_INT 54
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: LD_INT 16
8195: NEG
8196: PPUSH
8197: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8201: LD_INT 111
8203: PPUSH
8204: LD_INT 53
8206: PPUSH
8207: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8211: LD_INT 10
8213: PPUSH
8214: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8218: LD_EXP 27
8222: PPUSH
8223: LD_STRING DKs-Hannibal-1
8225: PPUSH
8226: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8230: LD_EXP 27
8234: PPUSH
8235: LD_STRING DKs-Hannibal-2
8237: PPUSH
8238: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8242: LD_EXP 27
8246: PPUSH
8247: LD_STRING DKs-Hannibal-3
8249: PPUSH
8250: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8254: LD_EXP 27
8258: PPUSH
8259: LD_STRING DKs-Hannibal-4
8261: PPUSH
8262: CALL_OW 88
// dwait ( 0 0$1 ) ;
8266: LD_INT 35
8268: PPUSH
8269: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8273: LD_INT 111
8275: PPUSH
8276: LD_INT 54
8278: PPUSH
8279: LD_INT 2
8281: PPUSH
8282: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8286: LD_INT 173
8288: PPUSH
8289: LD_INT 76
8291: PPUSH
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 12
8297: NEG
8298: PPUSH
8299: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8303: LD_INT 173
8305: PPUSH
8306: LD_INT 76
8308: PPUSH
8309: LD_INT 2
8311: PPUSH
8312: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8316: LD_INT 173
8318: PPUSH
8319: LD_INT 76
8321: PPUSH
8322: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8326: LD_EXP 27
8330: PPUSH
8331: LD_STRING DKs-Hannibal-5
8333: PPUSH
8334: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8338: LD_EXP 22
8342: PUSH
8343: LD_INT 22
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 34
8355: PUSH
8356: LD_INT 26
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: NOT
8372: AND
8373: IFFALSE 8411
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8375: LD_EXP 22
8379: PPUSH
8380: LD_STRING DKam-Hannibal-a-6
8382: PPUSH
8383: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8387: LD_EXP 22
8391: PPUSH
8392: LD_STRING DKam-Hannibal-a-7
8394: PPUSH
8395: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8399: LD_EXP 19
8403: PPUSH
8404: LD_STRING DG-Hannibal-a-8
8406: PPUSH
8407: CALL_OW 88
// end ; DialogueOff ;
8411: CALL_OW 7
// end ;
8415: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8416: LD_INT 225
8418: PPUSH
8419: CALL_OW 302
8423: PUSH
8424: LD_INT 200
8426: PPUSH
8427: CALL_OW 302
8431: AND
8432: PUSH
8433: LD_INT 12
8435: PPUSH
8436: LD_INT 21
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 2
8453: GREATER
8454: AND
8455: PUSH
8456: LD_INT 13
8458: PPUSH
8459: LD_INT 22
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PPUSH
8469: CALL_OW 70
8473: PUSH
8474: LD_INT 3
8476: GREATER
8477: AND
8478: IFFALSE 8491
8480: GO 8482
8482: DISABLE
// hannibalPath := true ;
8483: LD_ADDR_EXP 9
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
8491: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8492: LD_EXP 9
8496: PUSH
8497: LD_INT 6
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 70
8514: AND
8515: IFFALSE 8860
8517: GO 8519
8519: DISABLE
8520: LD_INT 0
8522: PPUSH
8523: PPUSH
8524: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_INT 6
8532: PPUSH
8533: LD_INT 22
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 70
8547: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8548: LD_ADDR_VAR 0 3
8552: PUSH
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_INT 34
8560: PUSH
8561: LD_INT 26
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PPUSH
8568: CALL_OW 72
8572: PUSH
8573: LD_INT 0
8575: GREATER
8576: ST_TO_ADDR
// DialogueOn ;
8577: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8581: LD_EXP 18
8585: PPUSH
8586: LD_STRING DH-Cleverattack-1
8588: PPUSH
8589: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8593: LD_EXP 18
8597: PPUSH
8598: LD_STRING DH-Cleverattack-2
8600: PPUSH
8601: CALL_OW 88
// if hasFlameThrower then
8605: LD_VAR 0 3
8609: IFFALSE 8637
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8611: LD_EXP 34
8615: PPUSH
8616: LD_STRING DB-Cleverattack-3
8618: PPUSH
8619: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8623: LD_EXP 18
8627: PPUSH
8628: LD_STRING DH-Cleverattack-4
8630: PPUSH
8631: CALL_OW 88
// end else
8635: GO 8661
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8637: LD_EXP 34
8641: PPUSH
8642: LD_STRING DB-Cleverattack-a-3
8644: PPUSH
8645: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8649: LD_EXP 18
8653: PPUSH
8654: LD_STRING DH-Cleverattack-a-4
8656: PPUSH
8657: CALL_OW 88
// end ; DialogueOff ;
8661: CALL_OW 7
// if not hasFlameThrower then
8665: LD_VAR 0 3
8669: NOT
8670: IFFALSE 8674
// exit ;
8672: GO 8860
// earlyEscape := true ;
8674: LD_ADDR_EXP 16
8678: PUSH
8679: LD_INT 1
8681: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8682: LD_INT 140
8684: PPUSH
8685: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8689: LD_ADDR_VAR 0 2
8693: PUSH
8694: LD_INT 22
8696: PUSH
8697: LD_INT 3
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 2
8706: PUSH
8707: LD_INT 25
8709: PUSH
8710: LD_INT 1
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 25
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 25
8729: PUSH
8730: LD_INT 4
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PPUSH
8747: CALL_OW 69
8751: PUSH
8752: LD_EXP 21
8756: PUSH
8757: LD_EXP 36
8761: PUSH
8762: LD_EXP 35
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: DIFF
8772: ST_TO_ADDR
// for i in tmp do
8773: LD_ADDR_VAR 0 1
8777: PUSH
8778: LD_VAR 0 2
8782: PUSH
8783: FOR_IN
8784: IFFALSE 8858
// begin if Prob ( 40 + 10 * Difficulty ) then
8786: LD_INT 40
8788: PUSH
8789: LD_INT 10
8791: PUSH
8792: LD_OWVAR 67
8796: MUL
8797: PLUS
8798: PPUSH
8799: CALL_OW 13
8803: IFFALSE 8807
// continue ;
8805: GO 8783
// SetTag ( i , tEscape ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_EXP 17
8816: PPUSH
8817: CALL_OW 109
// if IsInUnit ( i ) then
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 310
8830: IFFALSE 8841
// ComExitBuilding ( i ) ;
8832: LD_VAR 0 1
8836: PPUSH
8837: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8841: LD_VAR 0 1
8845: PPUSH
8846: LD_INT 92
8848: PPUSH
8849: LD_INT 177
8851: PPUSH
8852: CALL_OW 171
// end ;
8856: GO 8783
8858: POP
8859: POP
// end ;
8860: PPOPN 3
8862: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8863: LD_INT 9
8865: PPUSH
8866: LD_INT 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 22
8881: PUSH
8882: LD_INT 6
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 70
8898: IFFALSE 8996
8900: GO 8902
8902: DISABLE
8903: LD_INT 0
8905: PPUSH
// begin enable ;
8906: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8907: LD_ADDR_VAR 0 1
8911: PUSH
8912: LD_INT 9
8914: PPUSH
8915: LD_INT 2
8917: PUSH
8918: LD_INT 22
8920: PUSH
8921: LD_INT 3
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_INT 6
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 70
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8994
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL_OW 110
8960: PUSH
8961: LD_EXP 17
8965: EQUAL
8966: PUSH
8967: LD_VAR 0 1
8971: PPUSH
8972: CALL_OW 255
8976: PUSH
8977: LD_INT 6
8979: EQUAL
8980: OR
8981: IFFALSE 8992
// RemoveUnit ( i ) ;
8983: LD_VAR 0 1
8987: PPUSH
8988: CALL_OW 64
8992: GO 8948
8994: POP
8995: POP
// end ;
8996: PPOPN 1
8998: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8999: LD_EXP 23
9003: PUSH
9004: LD_EXP 23
9008: PPUSH
9009: CALL_OW 256
9013: PUSH
9014: LD_INT 3
9016: LESS
9017: AND
9018: IFFALSE 9064
9020: GO 9022
9022: DISABLE
// begin DialogueOn ;
9023: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9027: LD_EXP 23
9031: PPUSH
9032: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9036: LD_EXP 23
9040: PPUSH
9041: LD_STRING DK-Kkilled-1
9043: PPUSH
9044: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9048: LD_EXP 18
9052: PPUSH
9053: LD_STRING DH-Kkilled-2
9055: PPUSH
9056: CALL_OW 88
// DialogueOff ;
9060: CALL_OW 7
// end ;
9064: END
// every 0 0$1 trigger kaiaKilledByRussian do
9065: LD_EXP 8
9069: IFFALSE 9086
9071: GO 9073
9073: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9074: LD_EXP 18
9078: PPUSH
9079: LD_STRING DH-Kkilled-3
9081: PPUSH
9082: CALL_OW 88
9086: END
// every 0 0$1 trigger tick >= 24 24$00 do
9087: LD_OWVAR 1
9091: PUSH
9092: LD_INT 50400
9094: GREATEREQUAL
9095: IFFALSE 9132
9097: GO 9099
9099: DISABLE
// begin DialogueOn ;
9100: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9104: LD_EXP 26
9108: PPUSH
9109: LD_STRING DShar-slow-1
9111: PPUSH
9112: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9116: LD_EXP 26
9120: PPUSH
9121: LD_STRING DShar-slow-2
9123: PPUSH
9124: CALL_OW 94
// DialogueOff ;
9128: CALL_OW 7
// end ;
9132: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9133: LD_OWVAR 1
9137: PUSH
9138: LD_INT 84000
9140: PUSH
9141: LD_INT 75600
9143: PUSH
9144: LD_INT 67200
9146: PUSH
9147: LD_INT 63000
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_OWVAR 67
9160: ARRAY
9161: GREATEREQUAL
9162: IFFALSE 9206
9164: GO 9166
9166: DISABLE
// begin DialogueOn ;
9167: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9171: LD_EXP 26
9175: PPUSH
9176: LD_STRING DShar-fail-1
9178: PPUSH
9179: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9183: LD_EXP 26
9187: PPUSH
9188: LD_STRING DShar-fail-2
9190: PPUSH
9191: CALL_OW 94
// DialogueOff ;
9195: CALL_OW 7
// YouLost ( Time ) ;
9199: LD_STRING Time
9201: PPUSH
9202: CALL_OW 104
// end ;
9206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9207: LD_INT 22
9209: PUSH
9210: LD_INT 3
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 2
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 1
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 30
9232: PUSH
9233: LD_INT 0
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 69
9253: PUSH
9254: LD_INT 0
9256: EQUAL
9257: IFFALSE 9768
9259: GO 9261
9261: DISABLE
9262: LD_INT 0
9264: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9265: LD_OWVAR 1
9269: PUSH
9270: LD_EXP 5
9274: PLUS
9275: PUSH
9276: LD_INT 157500
9278: PUSH
9279: LD_INT 147000
9281: PUSH
9282: LD_INT 136500
9284: PUSH
9285: LD_INT 126000
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_OWVAR 67
9298: ARRAY
9299: LESSEQUAL
9300: IFFALSE 9314
// AddMedal ( med1 , 1 ) else
9302: LD_STRING med1
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 101
9312: GO 9325
// AddMedal ( med1 , - 1 ) ;
9314: LD_STRING med1
9316: PPUSH
9317: LD_INT 1
9319: NEG
9320: PPUSH
9321: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9325: LD_EXP 7
9329: PUSH
9330: LD_INT 3
9332: GREATEREQUAL
9333: PUSH
9334: LD_EXP 11
9338: MUL
9339: PUSH
9340: LD_EXP 9
9344: MUL
9345: PUSH
9346: LD_EXP 6
9350: PUSH
9351: LD_INT 6
9353: PUSH
9354: LD_INT 5
9356: PUSH
9357: LD_INT 4
9359: PUSH
9360: LD_INT 3
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_OWVAR 67
9373: ARRAY
9374: LESS
9375: MUL
9376: IFFALSE 9390
// AddMedal ( med2 , 1 ) else
9378: LD_STRING med2
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: CALL_OW 101
9388: GO 9401
// AddMedal ( med2 , - 1 ) ;
9390: LD_STRING med2
9392: PPUSH
9393: LD_INT 1
9395: NEG
9396: PPUSH
9397: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9401: LD_EXP 14
9405: PPUSH
9406: LD_STRING 04_2_GaidarKilled
9408: PPUSH
9409: CALL_OW 39
// if gaidarKilled then
9413: LD_EXP 14
9417: IFFALSE 9431
// AddMedal ( med3 , 1 ) else
9419: LD_STRING med3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 101
9429: GO 9442
// AddMedal ( med3 , - 1 ) ;
9431: LD_STRING med3
9433: PPUSH
9434: LD_INT 1
9436: NEG
9437: PPUSH
9438: CALL_OW 101
// GiveMedals ( MAIN ) ;
9442: LD_STRING MAIN
9444: PPUSH
9445: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9449: LD_INT 22
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 3
9461: PUSH
9462: LD_INT 23
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 69
9484: PPUSH
9485: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9489: LD_EXP 18
9493: PPUSH
9494: LD_STRING 04_2_Heike
9496: PPUSH
9497: CALL_OW 38
// if Aviradze then
9501: LD_EXP 28
9505: IFFALSE 9519
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9507: LD_EXP 28
9511: PPUSH
9512: LD_STRING 04_2_Aviradze
9514: PPUSH
9515: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9519: LD_EXP 21
9523: PUSH
9524: LD_EXP 21
9528: PPUSH
9529: CALL_OW 255
9533: PUSH
9534: LD_INT 2
9536: EQUAL
9537: AND
9538: IFFALSE 9568
// begin if ibrahimOnRuSide then
9540: LD_EXP 3
9544: IFFALSE 9556
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9546: LD_INT 1
9548: PPUSH
9549: LD_STRING 04_2_IbrahimJoined
9551: PPUSH
9552: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9556: LD_EXP 21
9560: PPUSH
9561: LD_STRING 04_2_Ibrahim
9563: PPUSH
9564: CALL_OW 38
// end ; if Kamil then
9568: LD_EXP 22
9572: IFFALSE 9586
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9574: LD_EXP 22
9578: PPUSH
9579: LD_STRING 04_2_Kamil
9581: PPUSH
9582: CALL_OW 38
// if Sophia then
9586: LD_EXP 24
9590: IFFALSE 9604
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9592: LD_EXP 24
9596: PPUSH
9597: LD_STRING 04_2_Sophia
9599: PPUSH
9600: CALL_OW 38
// if Kaia then
9604: LD_EXP 23
9608: IFFALSE 9622
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9610: LD_EXP 23
9614: PPUSH
9615: LD_STRING 04_2_Kaia
9617: PPUSH
9618: CALL_OW 38
// if Givi then
9622: LD_EXP 19
9626: IFFALSE 9640
// SaveCharacters ( Givi , 04_2_Givi ) ;
9628: LD_EXP 19
9632: PPUSH
9633: LD_STRING 04_2_Givi
9635: PPUSH
9636: CALL_OW 38
// if Mike then
9640: LD_EXP 20
9644: IFFALSE 9658
// SaveCharacters ( Mike , 04_2_Mike ) ;
9646: LD_EXP 20
9650: PPUSH
9651: LD_STRING 04_2_Mike
9653: PPUSH
9654: CALL_OW 38
// if Markov then
9658: LD_EXP 25
9662: IFFALSE 9676
// SaveCharacters ( Markov , 04_2_Markov ) ;
9664: LD_EXP 25
9668: PPUSH
9669: LD_STRING 04_2_Markov
9671: PPUSH
9672: CALL_OW 38
// if Kurt then
9676: LD_EXP 27
9680: IFFALSE 9694
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9682: LD_EXP 27
9686: PPUSH
9687: LD_STRING 04_2_Kurt
9689: PPUSH
9690: CALL_OW 38
// if heikeSecondSquad then
9694: LD_EXP 29
9698: IFFALSE 9712
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9700: LD_EXP 29
9704: PPUSH
9705: LD_STRING 04_2_others
9707: PPUSH
9708: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9712: LD_ADDR_VAR 0 1
9716: PUSH
9717: LD_INT 22
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 0
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PPUSH
9741: CALL_OW 69
9745: ST_TO_ADDR
// if tmp then
9746: LD_VAR 0 1
9750: IFFALSE 9764
// SaveCharacters ( tmp , 04_2_apes ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_STRING 04_2_apes
9759: PPUSH
9760: CALL_OW 38
// YouWin ;
9764: CALL_OW 103
// end ; end_of_file
9768: PPOPN 1
9770: END
// every 0 0$1 do
9771: GO 9773
9773: DISABLE
// begin enable ;
9774: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9775: LD_STRING updateTimer(
9777: PUSH
9778: LD_OWVAR 1
9782: STR
9783: PUSH
9784: LD_STRING );
9786: STR
9787: PPUSH
9788: CALL_OW 559
// end ;
9792: END
// export function SOS_MapStart ( ) ; begin
9793: LD_INT 0
9795: PPUSH
// if streamModeActive then
9796: LD_EXP 43
9800: IFFALSE 9809
// DefineStreamItems ( true ) ;
9802: LD_INT 1
9804: PPUSH
9805: CALL 11463 0 1
// UpdateFactoryWaypoints ( ) ;
9809: CALL 24324 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9813: CALL 24581 0 0
// end ;
9817: LD_VAR 0 1
9821: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9822: LD_INT 0
9824: PPUSH
// if p2 = 100 then
9825: LD_VAR 0 2
9829: PUSH
9830: LD_INT 100
9832: EQUAL
9833: IFFALSE 10836
// begin if not StreamModeActive then
9835: LD_EXP 43
9839: NOT
9840: IFFALSE 9850
// StreamModeActive := true ;
9842: LD_ADDR_EXP 43
9846: PUSH
9847: LD_INT 1
9849: ST_TO_ADDR
// if p3 = 0 then
9850: LD_VAR 0 3
9854: PUSH
9855: LD_INT 0
9857: EQUAL
9858: IFFALSE 9864
// InitStreamMode ;
9860: CALL 10999 0 0
// if p3 = 1 then
9864: LD_VAR 0 3
9868: PUSH
9869: LD_INT 1
9871: EQUAL
9872: IFFALSE 9882
// sRocket := true ;
9874: LD_ADDR_EXP 48
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// if p3 = 2 then
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 2
9889: EQUAL
9890: IFFALSE 9900
// sSpeed := true ;
9892: LD_ADDR_EXP 47
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
// if p3 = 3 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 3
9907: EQUAL
9908: IFFALSE 9918
// sEngine := true ;
9910: LD_ADDR_EXP 49
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// if p3 = 4 then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 4
9925: EQUAL
9926: IFFALSE 9936
// sSpec := true ;
9928: LD_ADDR_EXP 46
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// if p3 = 5 then
9936: LD_VAR 0 3
9940: PUSH
9941: LD_INT 5
9943: EQUAL
9944: IFFALSE 9954
// sLevel := true ;
9946: LD_ADDR_EXP 50
9950: PUSH
9951: LD_INT 1
9953: ST_TO_ADDR
// if p3 = 6 then
9954: LD_VAR 0 3
9958: PUSH
9959: LD_INT 6
9961: EQUAL
9962: IFFALSE 9972
// sArmoury := true ;
9964: LD_ADDR_EXP 51
9968: PUSH
9969: LD_INT 1
9971: ST_TO_ADDR
// if p3 = 7 then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 7
9979: EQUAL
9980: IFFALSE 9990
// sRadar := true ;
9982: LD_ADDR_EXP 52
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// if p3 = 8 then
9990: LD_VAR 0 3
9994: PUSH
9995: LD_INT 8
9997: EQUAL
9998: IFFALSE 10008
// sBunker := true ;
10000: LD_ADDR_EXP 53
10004: PUSH
10005: LD_INT 1
10007: ST_TO_ADDR
// if p3 = 9 then
10008: LD_VAR 0 3
10012: PUSH
10013: LD_INT 9
10015: EQUAL
10016: IFFALSE 10026
// sHack := true ;
10018: LD_ADDR_EXP 54
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if p3 = 10 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 10
10033: EQUAL
10034: IFFALSE 10044
// sFire := true ;
10036: LD_ADDR_EXP 55
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// if p3 = 11 then
10044: LD_VAR 0 3
10048: PUSH
10049: LD_INT 11
10051: EQUAL
10052: IFFALSE 10062
// sRefresh := true ;
10054: LD_ADDR_EXP 56
10058: PUSH
10059: LD_INT 1
10061: ST_TO_ADDR
// if p3 = 12 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 12
10069: EQUAL
10070: IFFALSE 10080
// sExp := true ;
10072: LD_ADDR_EXP 57
10076: PUSH
10077: LD_INT 1
10079: ST_TO_ADDR
// if p3 = 13 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_INT 13
10087: EQUAL
10088: IFFALSE 10098
// sDepot := true ;
10090: LD_ADDR_EXP 58
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// if p3 = 14 then
10098: LD_VAR 0 3
10102: PUSH
10103: LD_INT 14
10105: EQUAL
10106: IFFALSE 10116
// sFlag := true ;
10108: LD_ADDR_EXP 59
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if p3 = 15 then
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 15
10123: EQUAL
10124: IFFALSE 10134
// sKamikadze := true ;
10126: LD_ADDR_EXP 67
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if p3 = 16 then
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 16
10141: EQUAL
10142: IFFALSE 10152
// sTroll := true ;
10144: LD_ADDR_EXP 68
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// if p3 = 17 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 17
10159: EQUAL
10160: IFFALSE 10170
// sSlow := true ;
10162: LD_ADDR_EXP 69
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// if p3 = 18 then
10170: LD_VAR 0 3
10174: PUSH
10175: LD_INT 18
10177: EQUAL
10178: IFFALSE 10188
// sLack := true ;
10180: LD_ADDR_EXP 70
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// if p3 = 19 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 19
10195: EQUAL
10196: IFFALSE 10206
// sTank := true ;
10198: LD_ADDR_EXP 72
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 20 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 20
10213: EQUAL
10214: IFFALSE 10224
// sRemote := true ;
10216: LD_ADDR_EXP 73
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 21 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 21
10231: EQUAL
10232: IFFALSE 10242
// sPowell := true ;
10234: LD_ADDR_EXP 74
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 22 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 22
10249: EQUAL
10250: IFFALSE 10260
// sTeleport := true ;
10252: LD_ADDR_EXP 77
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 23 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 23
10267: EQUAL
10268: IFFALSE 10278
// sOilTower := true ;
10270: LD_ADDR_EXP 79
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 24 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 24
10285: EQUAL
10286: IFFALSE 10296
// sShovel := true ;
10288: LD_ADDR_EXP 80
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 25 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 25
10303: EQUAL
10304: IFFALSE 10314
// sSheik := true ;
10306: LD_ADDR_EXP 81
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 26 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 26
10321: EQUAL
10322: IFFALSE 10332
// sEarthquake := true ;
10324: LD_ADDR_EXP 83
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 27 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 27
10339: EQUAL
10340: IFFALSE 10350
// sAI := true ;
10342: LD_ADDR_EXP 84
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 28 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 28
10357: EQUAL
10358: IFFALSE 10368
// sCargo := true ;
10360: LD_ADDR_EXP 87
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 29 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 29
10375: EQUAL
10376: IFFALSE 10386
// sDLaser := true ;
10378: LD_ADDR_EXP 88
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 30 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 30
10393: EQUAL
10394: IFFALSE 10404
// sExchange := true ;
10396: LD_ADDR_EXP 89
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 31 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 31
10411: EQUAL
10412: IFFALSE 10422
// sFac := true ;
10414: LD_ADDR_EXP 90
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 32 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 32
10429: EQUAL
10430: IFFALSE 10440
// sPower := true ;
10432: LD_ADDR_EXP 91
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 33 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 33
10447: EQUAL
10448: IFFALSE 10458
// sRandom := true ;
10450: LD_ADDR_EXP 92
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 34 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 34
10465: EQUAL
10466: IFFALSE 10476
// sShield := true ;
10468: LD_ADDR_EXP 93
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 35 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 35
10483: EQUAL
10484: IFFALSE 10494
// sTime := true ;
10486: LD_ADDR_EXP 94
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 36 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 36
10501: EQUAL
10502: IFFALSE 10512
// sTools := true ;
10504: LD_ADDR_EXP 95
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 101 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 101
10519: EQUAL
10520: IFFALSE 10530
// sSold := true ;
10522: LD_ADDR_EXP 60
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 102 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 102
10537: EQUAL
10538: IFFALSE 10548
// sDiff := true ;
10540: LD_ADDR_EXP 61
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 103 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 103
10555: EQUAL
10556: IFFALSE 10566
// sFog := true ;
10558: LD_ADDR_EXP 64
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 104 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 104
10573: EQUAL
10574: IFFALSE 10584
// sReset := true ;
10576: LD_ADDR_EXP 65
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 105 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 105
10591: EQUAL
10592: IFFALSE 10602
// sSun := true ;
10594: LD_ADDR_EXP 66
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 106 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 106
10609: EQUAL
10610: IFFALSE 10620
// sTiger := true ;
10612: LD_ADDR_EXP 62
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 107 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 107
10627: EQUAL
10628: IFFALSE 10638
// sBomb := true ;
10630: LD_ADDR_EXP 63
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 108 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 108
10645: EQUAL
10646: IFFALSE 10656
// sWound := true ;
10648: LD_ADDR_EXP 71
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 109 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 109
10663: EQUAL
10664: IFFALSE 10674
// sBetray := true ;
10666: LD_ADDR_EXP 75
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 110 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 110
10681: EQUAL
10682: IFFALSE 10692
// sContamin := true ;
10684: LD_ADDR_EXP 76
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 111 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 111
10699: EQUAL
10700: IFFALSE 10710
// sOil := true ;
10702: LD_ADDR_EXP 78
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 112 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 112
10717: EQUAL
10718: IFFALSE 10728
// sStu := true ;
10720: LD_ADDR_EXP 82
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 113 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 113
10735: EQUAL
10736: IFFALSE 10746
// sBazooka := true ;
10738: LD_ADDR_EXP 85
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 114 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 114
10753: EQUAL
10754: IFFALSE 10764
// sMortar := true ;
10756: LD_ADDR_EXP 86
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 115 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 115
10771: EQUAL
10772: IFFALSE 10782
// sRanger := true ;
10774: LD_ADDR_EXP 96
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 116 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 116
10789: EQUAL
10790: IFFALSE 10800
// sComputer := true ;
10792: LD_ADDR_EXP 97
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 117 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 117
10807: EQUAL
10808: IFFALSE 10818
// s30 := true ;
10810: LD_ADDR_EXP 98
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 118 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 118
10825: EQUAL
10826: IFFALSE 10836
// s60 := true ;
10828: LD_ADDR_EXP 99
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// end ; if p2 = 101 then
10836: LD_VAR 0 2
10840: PUSH
10841: LD_INT 101
10843: EQUAL
10844: IFFALSE 10972
// begin case p3 of 1 :
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 1
10853: DOUBLE
10854: EQUAL
10855: IFTRUE 10859
10857: GO 10866
10859: POP
// hHackUnlimitedResources ; 2 :
10860: CALL 23070 0 0
10864: GO 10972
10866: LD_INT 2
10868: DOUBLE
10869: EQUAL
10870: IFTRUE 10874
10872: GO 10881
10874: POP
// hHackSetLevel10 ; 3 :
10875: CALL 23203 0 0
10879: GO 10972
10881: LD_INT 3
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10896
10889: POP
// hHackSetLevel10YourUnits ; 4 :
10890: CALL 23288 0 0
10894: GO 10972
10896: LD_INT 4
10898: DOUBLE
10899: EQUAL
10900: IFTRUE 10904
10902: GO 10911
10904: POP
// hHackInvincible ; 5 :
10905: CALL 23736 0 0
10909: GO 10972
10911: LD_INT 5
10913: DOUBLE
10914: EQUAL
10915: IFTRUE 10919
10917: GO 10926
10919: POP
// hHackInvisible ; 6 :
10920: CALL 23847 0 0
10924: GO 10972
10926: LD_INT 6
10928: DOUBLE
10929: EQUAL
10930: IFTRUE 10934
10932: GO 10941
10934: POP
// hHackChangeYourSide ; 7 :
10935: CALL 23904 0 0
10939: GO 10972
10941: LD_INT 7
10943: DOUBLE
10944: EQUAL
10945: IFTRUE 10949
10947: GO 10956
10949: POP
// hHackChangeUnitSide ; 8 :
10950: CALL 23946 0 0
10954: GO 10972
10956: LD_INT 8
10958: DOUBLE
10959: EQUAL
10960: IFTRUE 10964
10962: GO 10971
10964: POP
// hHackFog ; end ;
10965: CALL 24047 0 0
10969: GO 10972
10971: POP
// end ; end ;
10972: LD_VAR 0 7
10976: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10977: GO 10979
10979: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10980: LD_STRING initStreamRollete();
10982: PPUSH
10983: CALL_OW 559
// InitStreamMode ;
10987: CALL 10999 0 0
// DefineStreamItems ( false ) ;
10991: LD_INT 0
10993: PPUSH
10994: CALL 11463 0 1
// end ;
10998: END
// function InitStreamMode ; begin
10999: LD_INT 0
11001: PPUSH
// streamModeActive := false ;
11002: LD_ADDR_EXP 43
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// normalCounter := 36 ;
11010: LD_ADDR_EXP 44
11014: PUSH
11015: LD_INT 36
11017: ST_TO_ADDR
// hardcoreCounter := 18 ;
11018: LD_ADDR_EXP 45
11022: PUSH
11023: LD_INT 18
11025: ST_TO_ADDR
// sRocket := false ;
11026: LD_ADDR_EXP 48
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// sSpeed := false ;
11034: LD_ADDR_EXP 47
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sEngine := false ;
11042: LD_ADDR_EXP 49
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sSpec := false ;
11050: LD_ADDR_EXP 46
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sLevel := false ;
11058: LD_ADDR_EXP 50
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sArmoury := false ;
11066: LD_ADDR_EXP 51
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sRadar := false ;
11074: LD_ADDR_EXP 52
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sBunker := false ;
11082: LD_ADDR_EXP 53
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sHack := false ;
11090: LD_ADDR_EXP 54
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sFire := false ;
11098: LD_ADDR_EXP 55
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sRefresh := false ;
11106: LD_ADDR_EXP 56
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sExp := false ;
11114: LD_ADDR_EXP 57
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sDepot := false ;
11122: LD_ADDR_EXP 58
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sFlag := false ;
11130: LD_ADDR_EXP 59
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sKamikadze := false ;
11138: LD_ADDR_EXP 67
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sTroll := false ;
11146: LD_ADDR_EXP 68
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sSlow := false ;
11154: LD_ADDR_EXP 69
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sLack := false ;
11162: LD_ADDR_EXP 70
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// sTank := false ;
11170: LD_ADDR_EXP 72
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// sRemote := false ;
11178: LD_ADDR_EXP 73
11182: PUSH
11183: LD_INT 0
11185: ST_TO_ADDR
// sPowell := false ;
11186: LD_ADDR_EXP 74
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// sTeleport := false ;
11194: LD_ADDR_EXP 77
11198: PUSH
11199: LD_INT 0
11201: ST_TO_ADDR
// sOilTower := false ;
11202: LD_ADDR_EXP 79
11206: PUSH
11207: LD_INT 0
11209: ST_TO_ADDR
// sShovel := false ;
11210: LD_ADDR_EXP 80
11214: PUSH
11215: LD_INT 0
11217: ST_TO_ADDR
// sSheik := false ;
11218: LD_ADDR_EXP 81
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// sEarthquake := false ;
11226: LD_ADDR_EXP 83
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// sAI := false ;
11234: LD_ADDR_EXP 84
11238: PUSH
11239: LD_INT 0
11241: ST_TO_ADDR
// sCargo := false ;
11242: LD_ADDR_EXP 87
11246: PUSH
11247: LD_INT 0
11249: ST_TO_ADDR
// sDLaser := false ;
11250: LD_ADDR_EXP 88
11254: PUSH
11255: LD_INT 0
11257: ST_TO_ADDR
// sExchange := false ;
11258: LD_ADDR_EXP 89
11262: PUSH
11263: LD_INT 0
11265: ST_TO_ADDR
// sFac := false ;
11266: LD_ADDR_EXP 90
11270: PUSH
11271: LD_INT 0
11273: ST_TO_ADDR
// sPower := false ;
11274: LD_ADDR_EXP 91
11278: PUSH
11279: LD_INT 0
11281: ST_TO_ADDR
// sRandom := false ;
11282: LD_ADDR_EXP 92
11286: PUSH
11287: LD_INT 0
11289: ST_TO_ADDR
// sShield := false ;
11290: LD_ADDR_EXP 93
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// sTime := false ;
11298: LD_ADDR_EXP 94
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// sTools := false ;
11306: LD_ADDR_EXP 95
11310: PUSH
11311: LD_INT 0
11313: ST_TO_ADDR
// sSold := false ;
11314: LD_ADDR_EXP 60
11318: PUSH
11319: LD_INT 0
11321: ST_TO_ADDR
// sDiff := false ;
11322: LD_ADDR_EXP 61
11326: PUSH
11327: LD_INT 0
11329: ST_TO_ADDR
// sFog := false ;
11330: LD_ADDR_EXP 64
11334: PUSH
11335: LD_INT 0
11337: ST_TO_ADDR
// sReset := false ;
11338: LD_ADDR_EXP 65
11342: PUSH
11343: LD_INT 0
11345: ST_TO_ADDR
// sSun := false ;
11346: LD_ADDR_EXP 66
11350: PUSH
11351: LD_INT 0
11353: ST_TO_ADDR
// sTiger := false ;
11354: LD_ADDR_EXP 62
11358: PUSH
11359: LD_INT 0
11361: ST_TO_ADDR
// sBomb := false ;
11362: LD_ADDR_EXP 63
11366: PUSH
11367: LD_INT 0
11369: ST_TO_ADDR
// sWound := false ;
11370: LD_ADDR_EXP 71
11374: PUSH
11375: LD_INT 0
11377: ST_TO_ADDR
// sBetray := false ;
11378: LD_ADDR_EXP 75
11382: PUSH
11383: LD_INT 0
11385: ST_TO_ADDR
// sContamin := false ;
11386: LD_ADDR_EXP 76
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// sOil := false ;
11394: LD_ADDR_EXP 78
11398: PUSH
11399: LD_INT 0
11401: ST_TO_ADDR
// sStu := false ;
11402: LD_ADDR_EXP 82
11406: PUSH
11407: LD_INT 0
11409: ST_TO_ADDR
// sBazooka := false ;
11410: LD_ADDR_EXP 85
11414: PUSH
11415: LD_INT 0
11417: ST_TO_ADDR
// sMortar := false ;
11418: LD_ADDR_EXP 86
11422: PUSH
11423: LD_INT 0
11425: ST_TO_ADDR
// sRanger := false ;
11426: LD_ADDR_EXP 96
11430: PUSH
11431: LD_INT 0
11433: ST_TO_ADDR
// sComputer := false ;
11434: LD_ADDR_EXP 97
11438: PUSH
11439: LD_INT 0
11441: ST_TO_ADDR
// s30 := false ;
11442: LD_ADDR_EXP 98
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// s60 := false ;
11450: LD_ADDR_EXP 99
11454: PUSH
11455: LD_INT 0
11457: ST_TO_ADDR
// end ;
11458: LD_VAR 0 1
11462: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11463: LD_INT 0
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
// result := [ ] ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: EMPTY
11478: ST_TO_ADDR
// if campaign_id = 1 then
11479: LD_OWVAR 69
11483: PUSH
11484: LD_INT 1
11486: EQUAL
11487: IFFALSE 14653
// begin case mission_number of 1 :
11489: LD_OWVAR 70
11493: PUSH
11494: LD_INT 1
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11578
11502: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: LD_INT 4
11513: PUSH
11514: LD_INT 11
11516: PUSH
11517: LD_INT 12
11519: PUSH
11520: LD_INT 15
11522: PUSH
11523: LD_INT 16
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 23
11531: PUSH
11532: LD_INT 26
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 101
11548: PUSH
11549: LD_INT 102
11551: PUSH
11552: LD_INT 106
11554: PUSH
11555: LD_INT 116
11557: PUSH
11558: LD_INT 117
11560: PUSH
11561: LD_INT 118
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: ST_TO_ADDR
11576: GO 14651
11578: LD_INT 2
11580: DOUBLE
11581: EQUAL
11582: IFTRUE 11586
11584: GO 11670
11586: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: LD_INT 4
11597: PUSH
11598: LD_INT 11
11600: PUSH
11601: LD_INT 12
11603: PUSH
11604: LD_INT 15
11606: PUSH
11607: LD_INT 16
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 23
11615: PUSH
11616: LD_INT 26
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 101
11632: PUSH
11633: LD_INT 102
11635: PUSH
11636: LD_INT 105
11638: PUSH
11639: LD_INT 106
11641: PUSH
11642: LD_INT 108
11644: PUSH
11645: LD_INT 116
11647: PUSH
11648: LD_INT 117
11650: PUSH
11651: LD_INT 118
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: ST_TO_ADDR
11668: GO 14651
11670: LD_INT 3
11672: DOUBLE
11673: EQUAL
11674: IFTRUE 11678
11676: GO 11766
11678: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11679: LD_ADDR_VAR 0 2
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: LD_INT 4
11689: PUSH
11690: LD_INT 5
11692: PUSH
11693: LD_INT 11
11695: PUSH
11696: LD_INT 12
11698: PUSH
11699: LD_INT 15
11701: PUSH
11702: LD_INT 16
11704: PUSH
11705: LD_INT 22
11707: PUSH
11708: LD_INT 26
11710: PUSH
11711: LD_INT 36
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 101
11728: PUSH
11729: LD_INT 102
11731: PUSH
11732: LD_INT 105
11734: PUSH
11735: LD_INT 106
11737: PUSH
11738: LD_INT 108
11740: PUSH
11741: LD_INT 116
11743: PUSH
11744: LD_INT 117
11746: PUSH
11747: LD_INT 118
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: ST_TO_ADDR
11764: GO 14651
11766: LD_INT 4
11768: DOUBLE
11769: EQUAL
11770: IFTRUE 11774
11772: GO 11870
11774: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11775: LD_ADDR_VAR 0 2
11779: PUSH
11780: LD_INT 2
11782: PUSH
11783: LD_INT 4
11785: PUSH
11786: LD_INT 5
11788: PUSH
11789: LD_INT 8
11791: PUSH
11792: LD_INT 11
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: LD_INT 15
11800: PUSH
11801: LD_INT 16
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: LD_INT 23
11809: PUSH
11810: LD_INT 26
11812: PUSH
11813: LD_INT 36
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 101
11832: PUSH
11833: LD_INT 102
11835: PUSH
11836: LD_INT 105
11838: PUSH
11839: LD_INT 106
11841: PUSH
11842: LD_INT 108
11844: PUSH
11845: LD_INT 116
11847: PUSH
11848: LD_INT 117
11850: PUSH
11851: LD_INT 118
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: ST_TO_ADDR
11868: GO 14651
11870: LD_INT 5
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11990
11878: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: LD_INT 2
11886: PUSH
11887: LD_INT 4
11889: PUSH
11890: LD_INT 5
11892: PUSH
11893: LD_INT 6
11895: PUSH
11896: LD_INT 8
11898: PUSH
11899: LD_INT 11
11901: PUSH
11902: LD_INT 12
11904: PUSH
11905: LD_INT 15
11907: PUSH
11908: LD_INT 16
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 23
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 26
11922: PUSH
11923: LD_INT 36
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 101
11944: PUSH
11945: LD_INT 102
11947: PUSH
11948: LD_INT 105
11950: PUSH
11951: LD_INT 106
11953: PUSH
11954: LD_INT 108
11956: PUSH
11957: LD_INT 109
11959: PUSH
11960: LD_INT 112
11962: PUSH
11963: LD_INT 116
11965: PUSH
11966: LD_INT 117
11968: PUSH
11969: LD_INT 118
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: ST_TO_ADDR
11988: GO 14651
11990: LD_INT 6
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12130
11998: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11999: LD_ADDR_VAR 0 2
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 4
12009: PUSH
12010: LD_INT 5
12012: PUSH
12013: LD_INT 6
12015: PUSH
12016: LD_INT 8
12018: PUSH
12019: LD_INT 11
12021: PUSH
12022: LD_INT 12
12024: PUSH
12025: LD_INT 15
12027: PUSH
12028: LD_INT 16
12030: PUSH
12031: LD_INT 20
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 22
12039: PUSH
12040: LD_INT 23
12042: PUSH
12043: LD_INT 25
12045: PUSH
12046: LD_INT 26
12048: PUSH
12049: LD_INT 30
12051: PUSH
12052: LD_INT 31
12054: PUSH
12055: LD_INT 32
12057: PUSH
12058: LD_INT 36
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 101
12084: PUSH
12085: LD_INT 102
12087: PUSH
12088: LD_INT 105
12090: PUSH
12091: LD_INT 106
12093: PUSH
12094: LD_INT 108
12096: PUSH
12097: LD_INT 109
12099: PUSH
12100: LD_INT 112
12102: PUSH
12103: LD_INT 116
12105: PUSH
12106: LD_INT 117
12108: PUSH
12109: LD_INT 118
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: ST_TO_ADDR
12128: GO 14651
12130: LD_INT 7
12132: DOUBLE
12133: EQUAL
12134: IFTRUE 12138
12136: GO 12250
12138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: LD_INT 5
12152: PUSH
12153: LD_INT 7
12155: PUSH
12156: LD_INT 11
12158: PUSH
12159: LD_INT 12
12161: PUSH
12162: LD_INT 15
12164: PUSH
12165: LD_INT 16
12167: PUSH
12168: LD_INT 20
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 22
12176: PUSH
12177: LD_INT 23
12179: PUSH
12180: LD_INT 25
12182: PUSH
12183: LD_INT 26
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 101
12204: PUSH
12205: LD_INT 102
12207: PUSH
12208: LD_INT 103
12210: PUSH
12211: LD_INT 105
12213: PUSH
12214: LD_INT 106
12216: PUSH
12217: LD_INT 108
12219: PUSH
12220: LD_INT 112
12222: PUSH
12223: LD_INT 116
12225: PUSH
12226: LD_INT 117
12228: PUSH
12229: LD_INT 118
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: ST_TO_ADDR
12248: GO 14651
12250: LD_INT 8
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12398
12258: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12259: LD_ADDR_VAR 0 2
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: LD_INT 4
12269: PUSH
12270: LD_INT 5
12272: PUSH
12273: LD_INT 6
12275: PUSH
12276: LD_INT 7
12278: PUSH
12279: LD_INT 8
12281: PUSH
12282: LD_INT 11
12284: PUSH
12285: LD_INT 12
12287: PUSH
12288: LD_INT 15
12290: PUSH
12291: LD_INT 16
12293: PUSH
12294: LD_INT 20
12296: PUSH
12297: LD_INT 21
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_INT 23
12305: PUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: LD_INT 30
12314: PUSH
12315: LD_INT 31
12317: PUSH
12318: LD_INT 32
12320: PUSH
12321: LD_INT 36
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 101
12348: PUSH
12349: LD_INT 102
12351: PUSH
12352: LD_INT 103
12354: PUSH
12355: LD_INT 105
12357: PUSH
12358: LD_INT 106
12360: PUSH
12361: LD_INT 108
12363: PUSH
12364: LD_INT 109
12366: PUSH
12367: LD_INT 112
12369: PUSH
12370: LD_INT 116
12372: PUSH
12373: LD_INT 117
12375: PUSH
12376: LD_INT 118
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: ST_TO_ADDR
12396: GO 14651
12398: LD_INT 9
12400: DOUBLE
12401: EQUAL
12402: IFTRUE 12406
12404: GO 12554
12406: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 4
12417: PUSH
12418: LD_INT 5
12420: PUSH
12421: LD_INT 6
12423: PUSH
12424: LD_INT 7
12426: PUSH
12427: LD_INT 8
12429: PUSH
12430: LD_INT 11
12432: PUSH
12433: LD_INT 12
12435: PUSH
12436: LD_INT 15
12438: PUSH
12439: LD_INT 16
12441: PUSH
12442: LD_INT 20
12444: PUSH
12445: LD_INT 21
12447: PUSH
12448: LD_INT 22
12450: PUSH
12451: LD_INT 23
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 26
12459: PUSH
12460: LD_INT 28
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 31
12468: PUSH
12469: LD_INT 32
12471: PUSH
12472: LD_INT 36
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 101
12500: PUSH
12501: LD_INT 102
12503: PUSH
12504: LD_INT 103
12506: PUSH
12507: LD_INT 105
12509: PUSH
12510: LD_INT 106
12512: PUSH
12513: LD_INT 108
12515: PUSH
12516: LD_INT 109
12518: PUSH
12519: LD_INT 112
12521: PUSH
12522: LD_INT 114
12524: PUSH
12525: LD_INT 116
12527: PUSH
12528: LD_INT 117
12530: PUSH
12531: LD_INT 118
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: ST_TO_ADDR
12552: GO 14651
12554: LD_INT 10
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12758
12562: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12563: LD_ADDR_VAR 0 2
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 6
12579: PUSH
12580: LD_INT 7
12582: PUSH
12583: LD_INT 8
12585: PUSH
12586: LD_INT 9
12588: PUSH
12589: LD_INT 10
12591: PUSH
12592: LD_INT 11
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: LD_INT 13
12600: PUSH
12601: LD_INT 14
12603: PUSH
12604: LD_INT 15
12606: PUSH
12607: LD_INT 16
12609: PUSH
12610: LD_INT 17
12612: PUSH
12613: LD_INT 18
12615: PUSH
12616: LD_INT 19
12618: PUSH
12619: LD_INT 20
12621: PUSH
12622: LD_INT 21
12624: PUSH
12625: LD_INT 22
12627: PUSH
12628: LD_INT 23
12630: PUSH
12631: LD_INT 24
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 26
12639: PUSH
12640: LD_INT 28
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 31
12648: PUSH
12649: LD_INT 32
12651: PUSH
12652: LD_INT 36
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 101
12688: PUSH
12689: LD_INT 102
12691: PUSH
12692: LD_INT 103
12694: PUSH
12695: LD_INT 104
12697: PUSH
12698: LD_INT 105
12700: PUSH
12701: LD_INT 106
12703: PUSH
12704: LD_INT 107
12706: PUSH
12707: LD_INT 108
12709: PUSH
12710: LD_INT 109
12712: PUSH
12713: LD_INT 110
12715: PUSH
12716: LD_INT 111
12718: PUSH
12719: LD_INT 112
12721: PUSH
12722: LD_INT 114
12724: PUSH
12725: LD_INT 116
12727: PUSH
12728: LD_INT 117
12730: PUSH
12731: LD_INT 118
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: ST_TO_ADDR
12756: GO 14651
12758: LD_INT 11
12760: DOUBLE
12761: EQUAL
12762: IFTRUE 12766
12764: GO 12970
12766: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 2
12774: PUSH
12775: LD_INT 3
12777: PUSH
12778: LD_INT 4
12780: PUSH
12781: LD_INT 5
12783: PUSH
12784: LD_INT 6
12786: PUSH
12787: LD_INT 7
12789: PUSH
12790: LD_INT 8
12792: PUSH
12793: LD_INT 9
12795: PUSH
12796: LD_INT 10
12798: PUSH
12799: LD_INT 11
12801: PUSH
12802: LD_INT 12
12804: PUSH
12805: LD_INT 13
12807: PUSH
12808: LD_INT 14
12810: PUSH
12811: LD_INT 15
12813: PUSH
12814: LD_INT 16
12816: PUSH
12817: LD_INT 17
12819: PUSH
12820: LD_INT 18
12822: PUSH
12823: LD_INT 19
12825: PUSH
12826: LD_INT 20
12828: PUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_INT 23
12837: PUSH
12838: LD_INT 24
12840: PUSH
12841: LD_INT 25
12843: PUSH
12844: LD_INT 26
12846: PUSH
12847: LD_INT 28
12849: PUSH
12850: LD_INT 30
12852: PUSH
12853: LD_INT 31
12855: PUSH
12856: LD_INT 32
12858: PUSH
12859: LD_INT 34
12861: PUSH
12862: LD_INT 36
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 101
12900: PUSH
12901: LD_INT 102
12903: PUSH
12904: LD_INT 103
12906: PUSH
12907: LD_INT 104
12909: PUSH
12910: LD_INT 105
12912: PUSH
12913: LD_INT 106
12915: PUSH
12916: LD_INT 107
12918: PUSH
12919: LD_INT 108
12921: PUSH
12922: LD_INT 109
12924: PUSH
12925: LD_INT 110
12927: PUSH
12928: LD_INT 111
12930: PUSH
12931: LD_INT 112
12933: PUSH
12934: LD_INT 114
12936: PUSH
12937: LD_INT 116
12939: PUSH
12940: LD_INT 117
12942: PUSH
12943: LD_INT 118
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: ST_TO_ADDR
12968: GO 14651
12970: LD_INT 12
12972: DOUBLE
12973: EQUAL
12974: IFTRUE 12978
12976: GO 13198
12978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12979: LD_ADDR_VAR 0 2
12983: PUSH
12984: LD_INT 1
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: LD_INT 4
12995: PUSH
12996: LD_INT 5
12998: PUSH
12999: LD_INT 6
13001: PUSH
13002: LD_INT 7
13004: PUSH
13005: LD_INT 8
13007: PUSH
13008: LD_INT 9
13010: PUSH
13011: LD_INT 10
13013: PUSH
13014: LD_INT 11
13016: PUSH
13017: LD_INT 12
13019: PUSH
13020: LD_INT 13
13022: PUSH
13023: LD_INT 14
13025: PUSH
13026: LD_INT 15
13028: PUSH
13029: LD_INT 16
13031: PUSH
13032: LD_INT 17
13034: PUSH
13035: LD_INT 18
13037: PUSH
13038: LD_INT 19
13040: PUSH
13041: LD_INT 20
13043: PUSH
13044: LD_INT 21
13046: PUSH
13047: LD_INT 22
13049: PUSH
13050: LD_INT 23
13052: PUSH
13053: LD_INT 24
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 26
13061: PUSH
13062: LD_INT 27
13064: PUSH
13065: LD_INT 28
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 31
13073: PUSH
13074: LD_INT 32
13076: PUSH
13077: LD_INT 33
13079: PUSH
13080: LD_INT 34
13082: PUSH
13083: LD_INT 36
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 101
13124: PUSH
13125: LD_INT 102
13127: PUSH
13128: LD_INT 103
13130: PUSH
13131: LD_INT 104
13133: PUSH
13134: LD_INT 105
13136: PUSH
13137: LD_INT 106
13139: PUSH
13140: LD_INT 107
13142: PUSH
13143: LD_INT 108
13145: PUSH
13146: LD_INT 109
13148: PUSH
13149: LD_INT 110
13151: PUSH
13152: LD_INT 111
13154: PUSH
13155: LD_INT 112
13157: PUSH
13158: LD_INT 113
13160: PUSH
13161: LD_INT 114
13163: PUSH
13164: LD_INT 116
13166: PUSH
13167: LD_INT 117
13169: PUSH
13170: LD_INT 118
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: ST_TO_ADDR
13196: GO 14651
13198: LD_INT 13
13200: DOUBLE
13201: EQUAL
13202: IFTRUE 13206
13204: GO 13414
13206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13207: LD_ADDR_VAR 0 2
13211: PUSH
13212: LD_INT 1
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: LD_INT 3
13220: PUSH
13221: LD_INT 4
13223: PUSH
13224: LD_INT 5
13226: PUSH
13227: LD_INT 8
13229: PUSH
13230: LD_INT 9
13232: PUSH
13233: LD_INT 10
13235: PUSH
13236: LD_INT 11
13238: PUSH
13239: LD_INT 12
13241: PUSH
13242: LD_INT 14
13244: PUSH
13245: LD_INT 15
13247: PUSH
13248: LD_INT 16
13250: PUSH
13251: LD_INT 17
13253: PUSH
13254: LD_INT 18
13256: PUSH
13257: LD_INT 19
13259: PUSH
13260: LD_INT 20
13262: PUSH
13263: LD_INT 21
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 23
13271: PUSH
13272: LD_INT 24
13274: PUSH
13275: LD_INT 25
13277: PUSH
13278: LD_INT 26
13280: PUSH
13281: LD_INT 27
13283: PUSH
13284: LD_INT 28
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 31
13292: PUSH
13293: LD_INT 32
13295: PUSH
13296: LD_INT 33
13298: PUSH
13299: LD_INT 34
13301: PUSH
13302: LD_INT 36
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 101
13340: PUSH
13341: LD_INT 102
13343: PUSH
13344: LD_INT 103
13346: PUSH
13347: LD_INT 104
13349: PUSH
13350: LD_INT 105
13352: PUSH
13353: LD_INT 106
13355: PUSH
13356: LD_INT 107
13358: PUSH
13359: LD_INT 108
13361: PUSH
13362: LD_INT 109
13364: PUSH
13365: LD_INT 110
13367: PUSH
13368: LD_INT 111
13370: PUSH
13371: LD_INT 112
13373: PUSH
13374: LD_INT 113
13376: PUSH
13377: LD_INT 114
13379: PUSH
13380: LD_INT 116
13382: PUSH
13383: LD_INT 117
13385: PUSH
13386: LD_INT 118
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: ST_TO_ADDR
13412: GO 14651
13414: LD_INT 14
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13422
13420: GO 13646
13422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: LD_INT 2
13433: PUSH
13434: LD_INT 3
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: LD_INT 5
13442: PUSH
13443: LD_INT 6
13445: PUSH
13446: LD_INT 7
13448: PUSH
13449: LD_INT 8
13451: PUSH
13452: LD_INT 9
13454: PUSH
13455: LD_INT 10
13457: PUSH
13458: LD_INT 11
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 13
13466: PUSH
13467: LD_INT 14
13469: PUSH
13470: LD_INT 15
13472: PUSH
13473: LD_INT 16
13475: PUSH
13476: LD_INT 17
13478: PUSH
13479: LD_INT 18
13481: PUSH
13482: LD_INT 19
13484: PUSH
13485: LD_INT 20
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 23
13496: PUSH
13497: LD_INT 24
13499: PUSH
13500: LD_INT 25
13502: PUSH
13503: LD_INT 26
13505: PUSH
13506: LD_INT 27
13508: PUSH
13509: LD_INT 28
13511: PUSH
13512: LD_INT 29
13514: PUSH
13515: LD_INT 30
13517: PUSH
13518: LD_INT 31
13520: PUSH
13521: LD_INT 32
13523: PUSH
13524: LD_INT 33
13526: PUSH
13527: LD_INT 34
13529: PUSH
13530: LD_INT 36
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 101
13572: PUSH
13573: LD_INT 102
13575: PUSH
13576: LD_INT 103
13578: PUSH
13579: LD_INT 104
13581: PUSH
13582: LD_INT 105
13584: PUSH
13585: LD_INT 106
13587: PUSH
13588: LD_INT 107
13590: PUSH
13591: LD_INT 108
13593: PUSH
13594: LD_INT 109
13596: PUSH
13597: LD_INT 110
13599: PUSH
13600: LD_INT 111
13602: PUSH
13603: LD_INT 112
13605: PUSH
13606: LD_INT 113
13608: PUSH
13609: LD_INT 114
13611: PUSH
13612: LD_INT 116
13614: PUSH
13615: LD_INT 117
13617: PUSH
13618: LD_INT 118
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: ST_TO_ADDR
13644: GO 14651
13646: LD_INT 15
13648: DOUBLE
13649: EQUAL
13650: IFTRUE 13654
13652: GO 13878
13654: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13655: LD_ADDR_VAR 0 2
13659: PUSH
13660: LD_INT 1
13662: PUSH
13663: LD_INT 2
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: LD_INT 4
13671: PUSH
13672: LD_INT 5
13674: PUSH
13675: LD_INT 6
13677: PUSH
13678: LD_INT 7
13680: PUSH
13681: LD_INT 8
13683: PUSH
13684: LD_INT 9
13686: PUSH
13687: LD_INT 10
13689: PUSH
13690: LD_INT 11
13692: PUSH
13693: LD_INT 12
13695: PUSH
13696: LD_INT 13
13698: PUSH
13699: LD_INT 14
13701: PUSH
13702: LD_INT 15
13704: PUSH
13705: LD_INT 16
13707: PUSH
13708: LD_INT 17
13710: PUSH
13711: LD_INT 18
13713: PUSH
13714: LD_INT 19
13716: PUSH
13717: LD_INT 20
13719: PUSH
13720: LD_INT 21
13722: PUSH
13723: LD_INT 22
13725: PUSH
13726: LD_INT 23
13728: PUSH
13729: LD_INT 24
13731: PUSH
13732: LD_INT 25
13734: PUSH
13735: LD_INT 26
13737: PUSH
13738: LD_INT 27
13740: PUSH
13741: LD_INT 28
13743: PUSH
13744: LD_INT 29
13746: PUSH
13747: LD_INT 30
13749: PUSH
13750: LD_INT 31
13752: PUSH
13753: LD_INT 32
13755: PUSH
13756: LD_INT 33
13758: PUSH
13759: LD_INT 34
13761: PUSH
13762: LD_INT 36
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 101
13804: PUSH
13805: LD_INT 102
13807: PUSH
13808: LD_INT 103
13810: PUSH
13811: LD_INT 104
13813: PUSH
13814: LD_INT 105
13816: PUSH
13817: LD_INT 106
13819: PUSH
13820: LD_INT 107
13822: PUSH
13823: LD_INT 108
13825: PUSH
13826: LD_INT 109
13828: PUSH
13829: LD_INT 110
13831: PUSH
13832: LD_INT 111
13834: PUSH
13835: LD_INT 112
13837: PUSH
13838: LD_INT 113
13840: PUSH
13841: LD_INT 114
13843: PUSH
13844: LD_INT 116
13846: PUSH
13847: LD_INT 117
13849: PUSH
13850: LD_INT 118
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: ST_TO_ADDR
13876: GO 14651
13878: LD_INT 16
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 14022
13886: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13887: LD_ADDR_VAR 0 2
13891: PUSH
13892: LD_INT 2
13894: PUSH
13895: LD_INT 4
13897: PUSH
13898: LD_INT 5
13900: PUSH
13901: LD_INT 7
13903: PUSH
13904: LD_INT 11
13906: PUSH
13907: LD_INT 12
13909: PUSH
13910: LD_INT 15
13912: PUSH
13913: LD_INT 16
13915: PUSH
13916: LD_INT 20
13918: PUSH
13919: LD_INT 21
13921: PUSH
13922: LD_INT 22
13924: PUSH
13925: LD_INT 23
13927: PUSH
13928: LD_INT 25
13930: PUSH
13931: LD_INT 26
13933: PUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 31
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 34
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 101
13972: PUSH
13973: LD_INT 102
13975: PUSH
13976: LD_INT 103
13978: PUSH
13979: LD_INT 106
13981: PUSH
13982: LD_INT 108
13984: PUSH
13985: LD_INT 112
13987: PUSH
13988: LD_INT 113
13990: PUSH
13991: LD_INT 114
13993: PUSH
13994: LD_INT 116
13996: PUSH
13997: LD_INT 117
13999: PUSH
14000: LD_INT 118
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: ST_TO_ADDR
14020: GO 14651
14022: LD_INT 17
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14254
14030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14031: LD_ADDR_VAR 0 2
14035: PUSH
14036: LD_INT 1
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: LD_INT 4
14047: PUSH
14048: LD_INT 5
14050: PUSH
14051: LD_INT 6
14053: PUSH
14054: LD_INT 7
14056: PUSH
14057: LD_INT 8
14059: PUSH
14060: LD_INT 9
14062: PUSH
14063: LD_INT 10
14065: PUSH
14066: LD_INT 11
14068: PUSH
14069: LD_INT 12
14071: PUSH
14072: LD_INT 13
14074: PUSH
14075: LD_INT 14
14077: PUSH
14078: LD_INT 15
14080: PUSH
14081: LD_INT 16
14083: PUSH
14084: LD_INT 17
14086: PUSH
14087: LD_INT 18
14089: PUSH
14090: LD_INT 19
14092: PUSH
14093: LD_INT 20
14095: PUSH
14096: LD_INT 21
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_INT 23
14104: PUSH
14105: LD_INT 24
14107: PUSH
14108: LD_INT 25
14110: PUSH
14111: LD_INT 26
14113: PUSH
14114: LD_INT 27
14116: PUSH
14117: LD_INT 28
14119: PUSH
14120: LD_INT 29
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: LD_INT 31
14128: PUSH
14129: LD_INT 32
14131: PUSH
14132: LD_INT 33
14134: PUSH
14135: LD_INT 34
14137: PUSH
14138: LD_INT 36
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 101
14180: PUSH
14181: LD_INT 102
14183: PUSH
14184: LD_INT 103
14186: PUSH
14187: LD_INT 104
14189: PUSH
14190: LD_INT 105
14192: PUSH
14193: LD_INT 106
14195: PUSH
14196: LD_INT 107
14198: PUSH
14199: LD_INT 108
14201: PUSH
14202: LD_INT 109
14204: PUSH
14205: LD_INT 110
14207: PUSH
14208: LD_INT 111
14210: PUSH
14211: LD_INT 112
14213: PUSH
14214: LD_INT 113
14216: PUSH
14217: LD_INT 114
14219: PUSH
14220: LD_INT 116
14222: PUSH
14223: LD_INT 117
14225: PUSH
14226: LD_INT 118
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: ST_TO_ADDR
14252: GO 14651
14254: LD_INT 18
14256: DOUBLE
14257: EQUAL
14258: IFTRUE 14262
14260: GO 14410
14262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: LD_INT 4
14273: PUSH
14274: LD_INT 5
14276: PUSH
14277: LD_INT 7
14279: PUSH
14280: LD_INT 11
14282: PUSH
14283: LD_INT 12
14285: PUSH
14286: LD_INT 15
14288: PUSH
14289: LD_INT 16
14291: PUSH
14292: LD_INT 20
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_INT 23
14303: PUSH
14304: LD_INT 25
14306: PUSH
14307: LD_INT 26
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: LD_INT 31
14315: PUSH
14316: LD_INT 32
14318: PUSH
14319: LD_INT 33
14321: PUSH
14322: LD_INT 34
14324: PUSH
14325: LD_INT 35
14327: PUSH
14328: LD_INT 36
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 103
14362: PUSH
14363: LD_INT 106
14365: PUSH
14366: LD_INT 108
14368: PUSH
14369: LD_INT 112
14371: PUSH
14372: LD_INT 113
14374: PUSH
14375: LD_INT 114
14377: PUSH
14378: LD_INT 115
14380: PUSH
14381: LD_INT 116
14383: PUSH
14384: LD_INT 117
14386: PUSH
14387: LD_INT 118
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: ST_TO_ADDR
14408: GO 14651
14410: LD_INT 19
14412: DOUBLE
14413: EQUAL
14414: IFTRUE 14418
14416: GO 14650
14418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14419: LD_ADDR_VAR 0 2
14423: PUSH
14424: LD_INT 1
14426: PUSH
14427: LD_INT 2
14429: PUSH
14430: LD_INT 3
14432: PUSH
14433: LD_INT 4
14435: PUSH
14436: LD_INT 5
14438: PUSH
14439: LD_INT 6
14441: PUSH
14442: LD_INT 7
14444: PUSH
14445: LD_INT 8
14447: PUSH
14448: LD_INT 9
14450: PUSH
14451: LD_INT 10
14453: PUSH
14454: LD_INT 11
14456: PUSH
14457: LD_INT 12
14459: PUSH
14460: LD_INT 13
14462: PUSH
14463: LD_INT 14
14465: PUSH
14466: LD_INT 15
14468: PUSH
14469: LD_INT 16
14471: PUSH
14472: LD_INT 17
14474: PUSH
14475: LD_INT 18
14477: PUSH
14478: LD_INT 19
14480: PUSH
14481: LD_INT 20
14483: PUSH
14484: LD_INT 21
14486: PUSH
14487: LD_INT 22
14489: PUSH
14490: LD_INT 23
14492: PUSH
14493: LD_INT 24
14495: PUSH
14496: LD_INT 25
14498: PUSH
14499: LD_INT 26
14501: PUSH
14502: LD_INT 27
14504: PUSH
14505: LD_INT 28
14507: PUSH
14508: LD_INT 29
14510: PUSH
14511: LD_INT 30
14513: PUSH
14514: LD_INT 31
14516: PUSH
14517: LD_INT 32
14519: PUSH
14520: LD_INT 33
14522: PUSH
14523: LD_INT 34
14525: PUSH
14526: LD_INT 35
14528: PUSH
14529: LD_INT 36
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 101
14572: PUSH
14573: LD_INT 102
14575: PUSH
14576: LD_INT 103
14578: PUSH
14579: LD_INT 104
14581: PUSH
14582: LD_INT 105
14584: PUSH
14585: LD_INT 106
14587: PUSH
14588: LD_INT 107
14590: PUSH
14591: LD_INT 108
14593: PUSH
14594: LD_INT 109
14596: PUSH
14597: LD_INT 110
14599: PUSH
14600: LD_INT 111
14602: PUSH
14603: LD_INT 112
14605: PUSH
14606: LD_INT 113
14608: PUSH
14609: LD_INT 114
14611: PUSH
14612: LD_INT 115
14614: PUSH
14615: LD_INT 116
14617: PUSH
14618: LD_INT 117
14620: PUSH
14621: LD_INT 118
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: ST_TO_ADDR
14648: GO 14651
14650: POP
// end else
14651: GO 14882
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14653: LD_ADDR_VAR 0 2
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: LD_INT 2
14663: PUSH
14664: LD_INT 3
14666: PUSH
14667: LD_INT 4
14669: PUSH
14670: LD_INT 5
14672: PUSH
14673: LD_INT 6
14675: PUSH
14676: LD_INT 7
14678: PUSH
14679: LD_INT 8
14681: PUSH
14682: LD_INT 9
14684: PUSH
14685: LD_INT 10
14687: PUSH
14688: LD_INT 11
14690: PUSH
14691: LD_INT 12
14693: PUSH
14694: LD_INT 13
14696: PUSH
14697: LD_INT 14
14699: PUSH
14700: LD_INT 15
14702: PUSH
14703: LD_INT 16
14705: PUSH
14706: LD_INT 17
14708: PUSH
14709: LD_INT 18
14711: PUSH
14712: LD_INT 19
14714: PUSH
14715: LD_INT 20
14717: PUSH
14718: LD_INT 21
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 24
14729: PUSH
14730: LD_INT 25
14732: PUSH
14733: LD_INT 26
14735: PUSH
14736: LD_INT 27
14738: PUSH
14739: LD_INT 28
14741: PUSH
14742: LD_INT 29
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 31
14750: PUSH
14751: LD_INT 32
14753: PUSH
14754: LD_INT 33
14756: PUSH
14757: LD_INT 34
14759: PUSH
14760: LD_INT 35
14762: PUSH
14763: LD_INT 36
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 101
14806: PUSH
14807: LD_INT 102
14809: PUSH
14810: LD_INT 103
14812: PUSH
14813: LD_INT 104
14815: PUSH
14816: LD_INT 105
14818: PUSH
14819: LD_INT 106
14821: PUSH
14822: LD_INT 107
14824: PUSH
14825: LD_INT 108
14827: PUSH
14828: LD_INT 109
14830: PUSH
14831: LD_INT 110
14833: PUSH
14834: LD_INT 111
14836: PUSH
14837: LD_INT 112
14839: PUSH
14840: LD_INT 113
14842: PUSH
14843: LD_INT 114
14845: PUSH
14846: LD_INT 115
14848: PUSH
14849: LD_INT 116
14851: PUSH
14852: LD_INT 117
14854: PUSH
14855: LD_INT 118
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: ST_TO_ADDR
// if result then
14882: LD_VAR 0 2
14886: IFFALSE 15672
// begin normal :=  ;
14888: LD_ADDR_VAR 0 5
14892: PUSH
14893: LD_STRING 
14895: ST_TO_ADDR
// hardcore :=  ;
14896: LD_ADDR_VAR 0 6
14900: PUSH
14901: LD_STRING 
14903: ST_TO_ADDR
// active :=  ;
14904: LD_ADDR_VAR 0 7
14908: PUSH
14909: LD_STRING 
14911: ST_TO_ADDR
// for i = 1 to normalCounter do
14912: LD_ADDR_VAR 0 8
14916: PUSH
14917: DOUBLE
14918: LD_INT 1
14920: DEC
14921: ST_TO_ADDR
14922: LD_EXP 44
14926: PUSH
14927: FOR_TO
14928: IFFALSE 15029
// begin tmp := 0 ;
14930: LD_ADDR_VAR 0 3
14934: PUSH
14935: LD_STRING 0
14937: ST_TO_ADDR
// if result [ 1 ] then
14938: LD_VAR 0 2
14942: PUSH
14943: LD_INT 1
14945: ARRAY
14946: IFFALSE 15011
// if result [ 1 ] [ 1 ] = i then
14948: LD_VAR 0 2
14952: PUSH
14953: LD_INT 1
14955: ARRAY
14956: PUSH
14957: LD_INT 1
14959: ARRAY
14960: PUSH
14961: LD_VAR 0 8
14965: EQUAL
14966: IFFALSE 15011
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_VAR 0 2
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_VAR 0 2
14985: PUSH
14986: LD_INT 1
14988: ARRAY
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 3
14997: PPUSH
14998: CALL_OW 1
15002: ST_TO_ADDR
// tmp := 1 ;
15003: LD_ADDR_VAR 0 3
15007: PUSH
15008: LD_STRING 1
15010: ST_TO_ADDR
// end ; normal := normal & tmp ;
15011: LD_ADDR_VAR 0 5
15015: PUSH
15016: LD_VAR 0 5
15020: PUSH
15021: LD_VAR 0 3
15025: STR
15026: ST_TO_ADDR
// end ;
15027: GO 14927
15029: POP
15030: POP
// for i = 1 to hardcoreCounter do
15031: LD_ADDR_VAR 0 8
15035: PUSH
15036: DOUBLE
15037: LD_INT 1
15039: DEC
15040: ST_TO_ADDR
15041: LD_EXP 45
15045: PUSH
15046: FOR_TO
15047: IFFALSE 15152
// begin tmp := 0 ;
15049: LD_ADDR_VAR 0 3
15053: PUSH
15054: LD_STRING 0
15056: ST_TO_ADDR
// if result [ 2 ] then
15057: LD_VAR 0 2
15061: PUSH
15062: LD_INT 2
15064: ARRAY
15065: IFFALSE 15134
// if result [ 2 ] [ 1 ] = 100 + i then
15067: LD_VAR 0 2
15071: PUSH
15072: LD_INT 2
15074: ARRAY
15075: PUSH
15076: LD_INT 1
15078: ARRAY
15079: PUSH
15080: LD_INT 100
15082: PUSH
15083: LD_VAR 0 8
15087: PLUS
15088: EQUAL
15089: IFFALSE 15134
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: LD_INT 2
15103: PPUSH
15104: LD_VAR 0 2
15108: PUSH
15109: LD_INT 2
15111: ARRAY
15112: PPUSH
15113: LD_INT 1
15115: PPUSH
15116: CALL_OW 3
15120: PPUSH
15121: CALL_OW 1
15125: ST_TO_ADDR
// tmp := 1 ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_STRING 1
15133: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15134: LD_ADDR_VAR 0 6
15138: PUSH
15139: LD_VAR 0 6
15143: PUSH
15144: LD_VAR 0 3
15148: STR
15149: ST_TO_ADDR
// end ;
15150: GO 15046
15152: POP
15153: POP
// if isGameLoad then
15154: LD_VAR 0 1
15158: IFFALSE 15633
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15160: LD_ADDR_VAR 0 4
15164: PUSH
15165: LD_EXP 48
15169: PUSH
15170: LD_EXP 47
15174: PUSH
15175: LD_EXP 49
15179: PUSH
15180: LD_EXP 46
15184: PUSH
15185: LD_EXP 50
15189: PUSH
15190: LD_EXP 51
15194: PUSH
15195: LD_EXP 52
15199: PUSH
15200: LD_EXP 53
15204: PUSH
15205: LD_EXP 54
15209: PUSH
15210: LD_EXP 55
15214: PUSH
15215: LD_EXP 56
15219: PUSH
15220: LD_EXP 57
15224: PUSH
15225: LD_EXP 58
15229: PUSH
15230: LD_EXP 59
15234: PUSH
15235: LD_EXP 67
15239: PUSH
15240: LD_EXP 68
15244: PUSH
15245: LD_EXP 69
15249: PUSH
15250: LD_EXP 70
15254: PUSH
15255: LD_EXP 72
15259: PUSH
15260: LD_EXP 73
15264: PUSH
15265: LD_EXP 74
15269: PUSH
15270: LD_EXP 77
15274: PUSH
15275: LD_EXP 79
15279: PUSH
15280: LD_EXP 80
15284: PUSH
15285: LD_EXP 81
15289: PUSH
15290: LD_EXP 83
15294: PUSH
15295: LD_EXP 84
15299: PUSH
15300: LD_EXP 87
15304: PUSH
15305: LD_EXP 88
15309: PUSH
15310: LD_EXP 89
15314: PUSH
15315: LD_EXP 90
15319: PUSH
15320: LD_EXP 91
15324: PUSH
15325: LD_EXP 92
15329: PUSH
15330: LD_EXP 93
15334: PUSH
15335: LD_EXP 94
15339: PUSH
15340: LD_EXP 95
15344: PUSH
15345: LD_EXP 60
15349: PUSH
15350: LD_EXP 61
15354: PUSH
15355: LD_EXP 64
15359: PUSH
15360: LD_EXP 65
15364: PUSH
15365: LD_EXP 66
15369: PUSH
15370: LD_EXP 62
15374: PUSH
15375: LD_EXP 63
15379: PUSH
15380: LD_EXP 71
15384: PUSH
15385: LD_EXP 75
15389: PUSH
15390: LD_EXP 76
15394: PUSH
15395: LD_EXP 78
15399: PUSH
15400: LD_EXP 82
15404: PUSH
15405: LD_EXP 85
15409: PUSH
15410: LD_EXP 86
15414: PUSH
15415: LD_EXP 96
15419: PUSH
15420: LD_EXP 97
15424: PUSH
15425: LD_EXP 98
15429: PUSH
15430: LD_EXP 99
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: ST_TO_ADDR
// tmp :=  ;
15491: LD_ADDR_VAR 0 3
15495: PUSH
15496: LD_STRING 
15498: ST_TO_ADDR
// for i = 1 to normalCounter do
15499: LD_ADDR_VAR 0 8
15503: PUSH
15504: DOUBLE
15505: LD_INT 1
15507: DEC
15508: ST_TO_ADDR
15509: LD_EXP 44
15513: PUSH
15514: FOR_TO
15515: IFFALSE 15551
// begin if flags [ i ] then
15517: LD_VAR 0 4
15521: PUSH
15522: LD_VAR 0 8
15526: ARRAY
15527: IFFALSE 15549
// tmp := tmp & i & ; ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_VAR 0 3
15538: PUSH
15539: LD_VAR 0 8
15543: STR
15544: PUSH
15545: LD_STRING ;
15547: STR
15548: ST_TO_ADDR
// end ;
15549: GO 15514
15551: POP
15552: POP
// for i = 1 to hardcoreCounter do
15553: LD_ADDR_VAR 0 8
15557: PUSH
15558: DOUBLE
15559: LD_INT 1
15561: DEC
15562: ST_TO_ADDR
15563: LD_EXP 45
15567: PUSH
15568: FOR_TO
15569: IFFALSE 15615
// begin if flags [ normalCounter + i ] then
15571: LD_VAR 0 4
15575: PUSH
15576: LD_EXP 44
15580: PUSH
15581: LD_VAR 0 8
15585: PLUS
15586: ARRAY
15587: IFFALSE 15613
// tmp := tmp & ( 100 + i ) & ; ;
15589: LD_ADDR_VAR 0 3
15593: PUSH
15594: LD_VAR 0 3
15598: PUSH
15599: LD_INT 100
15601: PUSH
15602: LD_VAR 0 8
15606: PLUS
15607: STR
15608: PUSH
15609: LD_STRING ;
15611: STR
15612: ST_TO_ADDR
// end ;
15613: GO 15568
15615: POP
15616: POP
// if tmp then
15617: LD_VAR 0 3
15621: IFFALSE 15633
// active := tmp ;
15623: LD_ADDR_VAR 0 7
15627: PUSH
15628: LD_VAR 0 3
15632: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15633: LD_STRING getStreamItemsFromMission("
15635: PUSH
15636: LD_VAR 0 5
15640: STR
15641: PUSH
15642: LD_STRING ","
15644: STR
15645: PUSH
15646: LD_VAR 0 6
15650: STR
15651: PUSH
15652: LD_STRING ","
15654: STR
15655: PUSH
15656: LD_VAR 0 7
15660: STR
15661: PUSH
15662: LD_STRING ")
15664: STR
15665: PPUSH
15666: CALL_OW 559
// end else
15670: GO 15679
// ToLua ( getStreamItemsFromMission("","","") ) ;
15672: LD_STRING getStreamItemsFromMission("","","")
15674: PPUSH
15675: CALL_OW 559
// end ;
15679: LD_VAR 0 2
15683: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15684: LD_EXP 43
15688: PUSH
15689: LD_EXP 48
15693: AND
15694: IFFALSE 15818
15696: GO 15698
15698: DISABLE
15699: LD_INT 0
15701: PPUSH
15702: PPUSH
// begin enable ;
15703: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: LD_INT 22
15711: PUSH
15712: LD_OWVAR 2
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: LD_INT 34
15726: PUSH
15727: LD_INT 7
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 34
15736: PUSH
15737: LD_INT 45
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 34
15746: PUSH
15747: LD_INT 28
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 34
15756: PUSH
15757: LD_INT 47
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PPUSH
15775: CALL_OW 69
15779: ST_TO_ADDR
// if not tmp then
15780: LD_VAR 0 2
15784: NOT
15785: IFFALSE 15789
// exit ;
15787: GO 15818
// for i in tmp do
15789: LD_ADDR_VAR 0 1
15793: PUSH
15794: LD_VAR 0 2
15798: PUSH
15799: FOR_IN
15800: IFFALSE 15816
// begin SetLives ( i , 0 ) ;
15802: LD_VAR 0 1
15806: PPUSH
15807: LD_INT 0
15809: PPUSH
15810: CALL_OW 234
// end ;
15814: GO 15799
15816: POP
15817: POP
// end ;
15818: PPOPN 2
15820: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15821: LD_EXP 43
15825: PUSH
15826: LD_EXP 49
15830: AND
15831: IFFALSE 15915
15833: GO 15835
15835: DISABLE
15836: LD_INT 0
15838: PPUSH
15839: PPUSH
// begin enable ;
15840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 22
15848: PUSH
15849: LD_OWVAR 2
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 32
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 69
15876: ST_TO_ADDR
// if not tmp then
15877: LD_VAR 0 2
15881: NOT
15882: IFFALSE 15886
// exit ;
15884: GO 15915
// for i in tmp do
15886: LD_ADDR_VAR 0 1
15890: PUSH
15891: LD_VAR 0 2
15895: PUSH
15896: FOR_IN
15897: IFFALSE 15913
// begin SetLives ( i , 0 ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 234
// end ;
15911: GO 15896
15913: POP
15914: POP
// end ;
15915: PPOPN 2
15917: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15918: LD_EXP 43
15922: PUSH
15923: LD_EXP 46
15927: AND
15928: IFFALSE 16021
15930: GO 15932
15932: DISABLE
15933: LD_INT 0
15935: PPUSH
// begin enable ;
15936: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: LD_INT 25
15959: PUSH
15960: LD_INT 5
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 25
15969: PUSH
15970: LD_INT 9
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 25
15979: PUSH
15980: LD_INT 8
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: PUSH
16002: FOR_IN
16003: IFFALSE 16019
// begin SetClass ( i , 1 ) ;
16005: LD_VAR 0 1
16009: PPUSH
16010: LD_INT 1
16012: PPUSH
16013: CALL_OW 336
// end ;
16017: GO 16002
16019: POP
16020: POP
// end ;
16021: PPOPN 1
16023: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16024: LD_EXP 43
16028: PUSH
16029: LD_EXP 47
16033: AND
16034: PUSH
16035: LD_OWVAR 65
16039: PUSH
16040: LD_INT 7
16042: LESS
16043: AND
16044: IFFALSE 16058
16046: GO 16048
16048: DISABLE
// begin enable ;
16049: ENABLE
// game_speed := 7 ;
16050: LD_ADDR_OWVAR 65
16054: PUSH
16055: LD_INT 7
16057: ST_TO_ADDR
// end ;
16058: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16059: LD_EXP 43
16063: PUSH
16064: LD_EXP 50
16068: AND
16069: IFFALSE 16271
16071: GO 16073
16073: DISABLE
16074: LD_INT 0
16076: PPUSH
16077: PPUSH
16078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: LD_INT 81
16086: PUSH
16087: LD_OWVAR 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 21
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 3
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16271
// if tmp > 5 then
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 5
16131: GREATER
16132: IFFALSE 16144
// k := 5 else
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_INT 5
16141: ST_TO_ADDR
16142: GO 16154
// k := tmp ;
16144: LD_ADDR_VAR 0 2
16148: PUSH
16149: LD_VAR 0 3
16153: ST_TO_ADDR
// for i := 1 to k do
16154: LD_ADDR_VAR 0 1
16158: PUSH
16159: DOUBLE
16160: LD_INT 1
16162: DEC
16163: ST_TO_ADDR
16164: LD_VAR 0 2
16168: PUSH
16169: FOR_TO
16170: IFFALSE 16269
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16172: LD_VAR 0 3
16176: PUSH
16177: LD_VAR 0 1
16181: ARRAY
16182: PPUSH
16183: LD_VAR 0 1
16187: PUSH
16188: LD_INT 4
16190: MOD
16191: PUSH
16192: LD_INT 1
16194: PLUS
16195: PPUSH
16196: CALL_OW 259
16200: PUSH
16201: LD_INT 10
16203: LESS
16204: IFFALSE 16267
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16206: LD_VAR 0 3
16210: PUSH
16211: LD_VAR 0 1
16215: ARRAY
16216: PPUSH
16217: LD_VAR 0 1
16221: PUSH
16222: LD_INT 4
16224: MOD
16225: PUSH
16226: LD_INT 1
16228: PLUS
16229: PPUSH
16230: LD_VAR 0 3
16234: PUSH
16235: LD_VAR 0 1
16239: ARRAY
16240: PPUSH
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 4
16248: MOD
16249: PUSH
16250: LD_INT 1
16252: PLUS
16253: PPUSH
16254: CALL_OW 259
16258: PUSH
16259: LD_INT 1
16261: PLUS
16262: PPUSH
16263: CALL_OW 237
16267: GO 16169
16269: POP
16270: POP
// end ;
16271: PPOPN 3
16273: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16274: LD_EXP 43
16278: PUSH
16279: LD_EXP 51
16283: AND
16284: IFFALSE 16304
16286: GO 16288
16288: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16289: LD_INT 4
16291: PPUSH
16292: LD_OWVAR 2
16296: PPUSH
16297: LD_INT 0
16299: PPUSH
16300: CALL_OW 324
16304: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16305: LD_EXP 43
16309: PUSH
16310: LD_EXP 80
16314: AND
16315: IFFALSE 16335
16317: GO 16319
16319: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16320: LD_INT 19
16322: PPUSH
16323: LD_OWVAR 2
16327: PPUSH
16328: LD_INT 0
16330: PPUSH
16331: CALL_OW 324
16335: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16336: LD_EXP 43
16340: PUSH
16341: LD_EXP 52
16345: AND
16346: IFFALSE 16448
16348: GO 16350
16350: DISABLE
16351: LD_INT 0
16353: PPUSH
16354: PPUSH
// begin enable ;
16355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 2
16375: PUSH
16376: LD_INT 34
16378: PUSH
16379: LD_INT 11
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 34
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PPUSH
16405: CALL_OW 69
16409: ST_TO_ADDR
// if not tmp then
16410: LD_VAR 0 2
16414: NOT
16415: IFFALSE 16419
// exit ;
16417: GO 16448
// for i in tmp do
16419: LD_ADDR_VAR 0 1
16423: PUSH
16424: LD_VAR 0 2
16428: PUSH
16429: FOR_IN
16430: IFFALSE 16446
// begin SetLives ( i , 0 ) ;
16432: LD_VAR 0 1
16436: PPUSH
16437: LD_INT 0
16439: PPUSH
16440: CALL_OW 234
// end ;
16444: GO 16429
16446: POP
16447: POP
// end ;
16448: PPOPN 2
16450: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16451: LD_EXP 43
16455: PUSH
16456: LD_EXP 53
16460: AND
16461: IFFALSE 16481
16463: GO 16465
16465: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16466: LD_INT 32
16468: PPUSH
16469: LD_OWVAR 2
16473: PPUSH
16474: LD_INT 0
16476: PPUSH
16477: CALL_OW 324
16481: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16482: LD_EXP 43
16486: PUSH
16487: LD_EXP 54
16491: AND
16492: IFFALSE 16673
16494: GO 16496
16496: DISABLE
16497: LD_INT 0
16499: PPUSH
16500: PPUSH
16501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_OWVAR 2
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 33
16521: PUSH
16522: LD_INT 3
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: ST_TO_ADDR
// if not tmp then
16538: LD_VAR 0 2
16542: NOT
16543: IFFALSE 16547
// exit ;
16545: GO 16673
// side := 0 ;
16547: LD_ADDR_VAR 0 3
16551: PUSH
16552: LD_INT 0
16554: ST_TO_ADDR
// for i := 1 to 8 do
16555: LD_ADDR_VAR 0 1
16559: PUSH
16560: DOUBLE
16561: LD_INT 1
16563: DEC
16564: ST_TO_ADDR
16565: LD_INT 8
16567: PUSH
16568: FOR_TO
16569: IFFALSE 16617
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16571: LD_OWVAR 2
16575: PUSH
16576: LD_VAR 0 1
16580: NONEQUAL
16581: PUSH
16582: LD_OWVAR 2
16586: PPUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 81
16596: PUSH
16597: LD_INT 2
16599: EQUAL
16600: AND
16601: IFFALSE 16615
// begin side := i ;
16603: LD_ADDR_VAR 0 3
16607: PUSH
16608: LD_VAR 0 1
16612: ST_TO_ADDR
// break ;
16613: GO 16617
// end ;
16615: GO 16568
16617: POP
16618: POP
// if not side then
16619: LD_VAR 0 3
16623: NOT
16624: IFFALSE 16628
// exit ;
16626: GO 16673
// for i := 1 to tmp do
16628: LD_ADDR_VAR 0 1
16632: PUSH
16633: DOUBLE
16634: LD_INT 1
16636: DEC
16637: ST_TO_ADDR
16638: LD_VAR 0 2
16642: PUSH
16643: FOR_TO
16644: IFFALSE 16671
// if Prob ( 60 ) then
16646: LD_INT 60
16648: PPUSH
16649: CALL_OW 13
16653: IFFALSE 16669
// SetSide ( i , side ) ;
16655: LD_VAR 0 1
16659: PPUSH
16660: LD_VAR 0 3
16664: PPUSH
16665: CALL_OW 235
16669: GO 16643
16671: POP
16672: POP
// end ;
16673: PPOPN 3
16675: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16676: LD_EXP 43
16680: PUSH
16681: LD_EXP 56
16685: AND
16686: IFFALSE 16805
16688: GO 16690
16690: DISABLE
16691: LD_INT 0
16693: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_INT 22
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 21
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 3
16723: PUSH
16724: LD_INT 23
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: PPUSH
16743: CALL_OW 69
16747: PUSH
16748: FOR_IN
16749: IFFALSE 16803
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 257
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: LD_INT 4
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: IN
16779: IFFALSE 16801
// SetClass ( un , rand ( 1 , 4 ) ) ;
16781: LD_VAR 0 1
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: LD_INT 4
16791: PPUSH
16792: CALL_OW 12
16796: PPUSH
16797: CALL_OW 336
16801: GO 16748
16803: POP
16804: POP
// end ;
16805: PPOPN 1
16807: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16808: LD_EXP 43
16812: PUSH
16813: LD_EXP 55
16817: AND
16818: IFFALSE 16897
16820: GO 16822
16822: DISABLE
16823: LD_INT 0
16825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16826: LD_ADDR_VAR 0 1
16830: PUSH
16831: LD_INT 22
16833: PUSH
16834: LD_OWVAR 2
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 21
16845: PUSH
16846: LD_INT 3
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PPUSH
16857: CALL_OW 69
16861: ST_TO_ADDR
// if not tmp then
16862: LD_VAR 0 1
16866: NOT
16867: IFFALSE 16871
// exit ;
16869: GO 16897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16871: LD_VAR 0 1
16875: PUSH
16876: LD_INT 1
16878: PPUSH
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 12
16888: ARRAY
16889: PPUSH
16890: LD_INT 100
16892: PPUSH
16893: CALL_OW 234
// end ;
16897: PPOPN 1
16899: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16900: LD_EXP 43
16904: PUSH
16905: LD_EXP 57
16909: AND
16910: IFFALSE 17008
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16918: LD_ADDR_VAR 0 1
16922: PUSH
16923: LD_INT 22
16925: PUSH
16926: LD_OWVAR 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 21
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: ST_TO_ADDR
// if not tmp then
16954: LD_VAR 0 1
16958: NOT
16959: IFFALSE 16963
// exit ;
16961: GO 17008
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16963: LD_VAR 0 1
16967: PUSH
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 12
16980: ARRAY
16981: PPUSH
16982: LD_INT 1
16984: PPUSH
16985: LD_INT 4
16987: PPUSH
16988: CALL_OW 12
16992: PPUSH
16993: LD_INT 3000
16995: PPUSH
16996: LD_INT 9000
16998: PPUSH
16999: CALL_OW 12
17003: PPUSH
17004: CALL_OW 492
// end ;
17008: PPOPN 1
17010: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17011: LD_EXP 43
17015: PUSH
17016: LD_EXP 58
17020: AND
17021: IFFALSE 17041
17023: GO 17025
17025: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17026: LD_INT 1
17028: PPUSH
17029: LD_OWVAR 2
17033: PPUSH
17034: LD_INT 0
17036: PPUSH
17037: CALL_OW 324
17041: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17042: LD_EXP 43
17046: PUSH
17047: LD_EXP 59
17051: AND
17052: IFFALSE 17135
17054: GO 17056
17056: DISABLE
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_OWVAR 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 21
17080: PUSH
17081: LD_INT 3
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: ST_TO_ADDR
// if not tmp then
17097: LD_VAR 0 2
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17135
// for i in tmp do
17106: LD_ADDR_VAR 0 1
17110: PUSH
17111: LD_VAR 0 2
17115: PUSH
17116: FOR_IN
17117: IFFALSE 17133
// SetBLevel ( i , 10 ) ;
17119: LD_VAR 0 1
17123: PPUSH
17124: LD_INT 10
17126: PPUSH
17127: CALL_OW 241
17131: GO 17116
17133: POP
17134: POP
// end ;
17135: PPOPN 2
17137: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17138: LD_EXP 43
17142: PUSH
17143: LD_EXP 60
17147: AND
17148: IFFALSE 17259
17150: GO 17152
17152: DISABLE
17153: LD_INT 0
17155: PPUSH
17156: PPUSH
17157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17158: LD_ADDR_VAR 0 3
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_OWVAR 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 25
17177: PUSH
17178: LD_INT 1
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PPUSH
17189: CALL_OW 69
17193: ST_TO_ADDR
// if not tmp then
17194: LD_VAR 0 3
17198: NOT
17199: IFFALSE 17203
// exit ;
17201: GO 17259
// un := tmp [ rand ( 1 , tmp ) ] ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_VAR 0 3
17212: PUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_VAR 0 3
17220: PPUSH
17221: CALL_OW 12
17225: ARRAY
17226: ST_TO_ADDR
// if Crawls ( un ) then
17227: LD_VAR 0 2
17231: PPUSH
17232: CALL_OW 318
17236: IFFALSE 17247
// ComWalk ( un ) ;
17238: LD_VAR 0 2
17242: PPUSH
17243: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17247: LD_VAR 0 2
17251: PPUSH
17252: LD_INT 5
17254: PPUSH
17255: CALL_OW 336
// end ;
17259: PPOPN 3
17261: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17262: LD_EXP 43
17266: PUSH
17267: LD_EXP 61
17271: AND
17272: PUSH
17273: LD_OWVAR 67
17277: PUSH
17278: LD_INT 4
17280: LESS
17281: AND
17282: IFFALSE 17301
17284: GO 17286
17286: DISABLE
// begin Difficulty := Difficulty + 1 ;
17287: LD_ADDR_OWVAR 67
17291: PUSH
17292: LD_OWVAR 67
17296: PUSH
17297: LD_INT 1
17299: PLUS
17300: ST_TO_ADDR
// end ;
17301: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17302: LD_EXP 43
17306: PUSH
17307: LD_EXP 62
17311: AND
17312: IFFALSE 17415
17314: GO 17316
17316: DISABLE
17317: LD_INT 0
17319: PPUSH
// begin for i := 1 to 5 do
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: DOUBLE
17326: LD_INT 1
17328: DEC
17329: ST_TO_ADDR
17330: LD_INT 5
17332: PUSH
17333: FOR_TO
17334: IFFALSE 17413
// begin uc_nation := nation_nature ;
17336: LD_ADDR_OWVAR 21
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// uc_side := 0 ;
17344: LD_ADDR_OWVAR 20
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17352: LD_ADDR_OWVAR 29
17356: PUSH
17357: LD_INT 12
17359: PUSH
17360: LD_INT 12
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
// hc_agressivity := 20 ;
17367: LD_ADDR_OWVAR 35
17371: PUSH
17372: LD_INT 20
17374: ST_TO_ADDR
// hc_class := class_tiger ;
17375: LD_ADDR_OWVAR 28
17379: PUSH
17380: LD_INT 14
17382: ST_TO_ADDR
// hc_gallery :=  ;
17383: LD_ADDR_OWVAR 33
17387: PUSH
17388: LD_STRING 
17390: ST_TO_ADDR
// hc_name :=  ;
17391: LD_ADDR_OWVAR 26
17395: PUSH
17396: LD_STRING 
17398: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17399: CALL_OW 44
17403: PPUSH
17404: LD_INT 0
17406: PPUSH
17407: CALL_OW 51
// end ;
17411: GO 17333
17413: POP
17414: POP
// end ;
17415: PPOPN 1
17417: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17418: LD_EXP 43
17422: PUSH
17423: LD_EXP 63
17427: AND
17428: IFFALSE 17437
17430: GO 17432
17432: DISABLE
// StreamSibBomb ;
17433: CALL 17438 0 0
17437: END
// export function StreamSibBomb ; var i , x , y ; begin
17438: LD_INT 0
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
// result := false ;
17444: LD_ADDR_VAR 0 1
17448: PUSH
17449: LD_INT 0
17451: ST_TO_ADDR
// for i := 1 to 16 do
17452: LD_ADDR_VAR 0 2
17456: PUSH
17457: DOUBLE
17458: LD_INT 1
17460: DEC
17461: ST_TO_ADDR
17462: LD_INT 16
17464: PUSH
17465: FOR_TO
17466: IFFALSE 17665
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17468: LD_ADDR_VAR 0 3
17472: PUSH
17473: LD_INT 10
17475: PUSH
17476: LD_INT 20
17478: PUSH
17479: LD_INT 30
17481: PUSH
17482: LD_INT 40
17484: PUSH
17485: LD_INT 50
17487: PUSH
17488: LD_INT 60
17490: PUSH
17491: LD_INT 70
17493: PUSH
17494: LD_INT 80
17496: PUSH
17497: LD_INT 90
17499: PUSH
17500: LD_INT 100
17502: PUSH
17503: LD_INT 110
17505: PUSH
17506: LD_INT 120
17508: PUSH
17509: LD_INT 130
17511: PUSH
17512: LD_INT 140
17514: PUSH
17515: LD_INT 150
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 1
17537: PPUSH
17538: LD_INT 15
17540: PPUSH
17541: CALL_OW 12
17545: ARRAY
17546: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17547: LD_ADDR_VAR 0 4
17551: PUSH
17552: LD_INT 10
17554: PUSH
17555: LD_INT 20
17557: PUSH
17558: LD_INT 30
17560: PUSH
17561: LD_INT 40
17563: PUSH
17564: LD_INT 50
17566: PUSH
17567: LD_INT 60
17569: PUSH
17570: LD_INT 70
17572: PUSH
17573: LD_INT 80
17575: PUSH
17576: LD_INT 90
17578: PUSH
17579: LD_INT 100
17581: PUSH
17582: LD_INT 110
17584: PUSH
17585: LD_INT 120
17587: PUSH
17588: LD_INT 130
17590: PUSH
17591: LD_INT 140
17593: PUSH
17594: LD_INT 150
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_INT 15
17619: PPUSH
17620: CALL_OW 12
17624: ARRAY
17625: ST_TO_ADDR
// if ValidHex ( x , y ) then
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_VAR 0 4
17635: PPUSH
17636: CALL_OW 488
17640: IFFALSE 17663
// begin result := [ x , y ] ;
17642: LD_ADDR_VAR 0 1
17646: PUSH
17647: LD_VAR 0 3
17651: PUSH
17652: LD_VAR 0 4
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: ST_TO_ADDR
// break ;
17661: GO 17665
// end ; end ;
17663: GO 17465
17665: POP
17666: POP
// if result then
17667: LD_VAR 0 1
17671: IFFALSE 17731
// begin ToLua ( playSibBomb() ) ;
17673: LD_STRING playSibBomb()
17675: PPUSH
17676: CALL_OW 559
// wait ( 0 0$14 ) ;
17680: LD_INT 490
17682: PPUSH
17683: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17687: LD_VAR 0 1
17691: PUSH
17692: LD_INT 1
17694: ARRAY
17695: PPUSH
17696: LD_VAR 0 1
17700: PUSH
17701: LD_INT 2
17703: ARRAY
17704: PPUSH
17705: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17709: LD_VAR 0 1
17713: PUSH
17714: LD_INT 1
17716: ARRAY
17717: PPUSH
17718: LD_VAR 0 1
17722: PUSH
17723: LD_INT 2
17725: ARRAY
17726: PPUSH
17727: CALL_OW 429
// end ; end ;
17731: LD_VAR 0 1
17735: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17736: LD_EXP 43
17740: PUSH
17741: LD_EXP 65
17745: AND
17746: IFFALSE 17758
17748: GO 17750
17750: DISABLE
// YouLost (  ) ;
17751: LD_STRING 
17753: PPUSH
17754: CALL_OW 104
17758: END
// every 0 0$1 trigger StreamModeActive and sFog do
17759: LD_EXP 43
17763: PUSH
17764: LD_EXP 64
17768: AND
17769: IFFALSE 17783
17771: GO 17773
17773: DISABLE
// FogOff ( your_side ) ;
17774: LD_OWVAR 2
17778: PPUSH
17779: CALL_OW 344
17783: END
// every 0 0$1 trigger StreamModeActive and sSun do
17784: LD_EXP 43
17788: PUSH
17789: LD_EXP 66
17793: AND
17794: IFFALSE 17822
17796: GO 17798
17798: DISABLE
// begin solar_recharge_percent := 0 ;
17799: LD_ADDR_OWVAR 79
17803: PUSH
17804: LD_INT 0
17806: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17807: LD_INT 10500
17809: PPUSH
17810: CALL_OW 67
// solar_recharge_percent := 100 ;
17814: LD_ADDR_OWVAR 79
17818: PUSH
17819: LD_INT 100
17821: ST_TO_ADDR
// end ;
17822: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17823: LD_EXP 43
17827: PUSH
17828: LD_EXP 67
17832: AND
17833: IFFALSE 18072
17835: GO 17837
17837: DISABLE
17838: LD_INT 0
17840: PPUSH
17841: PPUSH
17842: PPUSH
// begin tmp := [ ] ;
17843: LD_ADDR_VAR 0 3
17847: PUSH
17848: EMPTY
17849: ST_TO_ADDR
// for i := 1 to 6 do
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: DOUBLE
17856: LD_INT 1
17858: DEC
17859: ST_TO_ADDR
17860: LD_INT 6
17862: PUSH
17863: FOR_TO
17864: IFFALSE 17969
// begin uc_nation := nation_nature ;
17866: LD_ADDR_OWVAR 21
17870: PUSH
17871: LD_INT 0
17873: ST_TO_ADDR
// uc_side := 0 ;
17874: LD_ADDR_OWVAR 20
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17882: LD_ADDR_OWVAR 29
17886: PUSH
17887: LD_INT 12
17889: PUSH
17890: LD_INT 12
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: ST_TO_ADDR
// hc_agressivity := 20 ;
17897: LD_ADDR_OWVAR 35
17901: PUSH
17902: LD_INT 20
17904: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17905: LD_ADDR_OWVAR 28
17909: PUSH
17910: LD_INT 17
17912: ST_TO_ADDR
// hc_gallery :=  ;
17913: LD_ADDR_OWVAR 33
17917: PUSH
17918: LD_STRING 
17920: ST_TO_ADDR
// hc_name :=  ;
17921: LD_ADDR_OWVAR 26
17925: PUSH
17926: LD_STRING 
17928: ST_TO_ADDR
// un := CreateHuman ;
17929: LD_ADDR_VAR 0 2
17933: PUSH
17934: CALL_OW 44
17938: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17939: LD_VAR 0 2
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: CALL_OW 51
// tmp := tmp ^ un ;
17951: LD_ADDR_VAR 0 3
17955: PUSH
17956: LD_VAR 0 3
17960: PUSH
17961: LD_VAR 0 2
17965: ADD
17966: ST_TO_ADDR
// end ;
17967: GO 17863
17969: POP
17970: POP
// repeat wait ( 0 0$1 ) ;
17971: LD_INT 35
17973: PPUSH
17974: CALL_OW 67
// for un in tmp do
17978: LD_ADDR_VAR 0 2
17982: PUSH
17983: LD_VAR 0 3
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18063
// begin if IsDead ( un ) then
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 301
18000: IFFALSE 18020
// begin tmp := tmp diff un ;
18002: LD_ADDR_VAR 0 3
18006: PUSH
18007: LD_VAR 0 3
18011: PUSH
18012: LD_VAR 0 2
18016: DIFF
18017: ST_TO_ADDR
// continue ;
18018: GO 17988
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18020: LD_VAR 0 2
18024: PPUSH
18025: LD_INT 3
18027: PUSH
18028: LD_INT 22
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 69
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: CALL_OW 74
18056: PPUSH
18057: CALL_OW 115
// end ;
18061: GO 17988
18063: POP
18064: POP
// until not tmp ;
18065: LD_VAR 0 3
18069: NOT
18070: IFFALSE 17971
// end ;
18072: PPOPN 3
18074: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18075: LD_EXP 43
18079: PUSH
18080: LD_EXP 68
18084: AND
18085: IFFALSE 18139
18087: GO 18089
18089: DISABLE
// begin ToLua ( displayTroll(); ) ;
18090: LD_STRING displayTroll();
18092: PPUSH
18093: CALL_OW 559
// wait ( 3 3$00 ) ;
18097: LD_INT 6300
18099: PPUSH
18100: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18104: LD_STRING hideTroll();
18106: PPUSH
18107: CALL_OW 559
// wait ( 1 1$00 ) ;
18111: LD_INT 2100
18113: PPUSH
18114: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18118: LD_STRING displayTroll();
18120: PPUSH
18121: CALL_OW 559
// wait ( 1 1$00 ) ;
18125: LD_INT 2100
18127: PPUSH
18128: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18132: LD_STRING hideTroll();
18134: PPUSH
18135: CALL_OW 559
// end ;
18139: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18140: LD_EXP 43
18144: PUSH
18145: LD_EXP 69
18149: AND
18150: IFFALSE 18213
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
// begin p := 0 ;
18158: LD_ADDR_VAR 0 1
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// repeat game_speed := 1 ;
18166: LD_ADDR_OWVAR 65
18170: PUSH
18171: LD_INT 1
18173: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18174: LD_INT 35
18176: PPUSH
18177: CALL_OW 67
// p := p + 1 ;
18181: LD_ADDR_VAR 0 1
18185: PUSH
18186: LD_VAR 0 1
18190: PUSH
18191: LD_INT 1
18193: PLUS
18194: ST_TO_ADDR
// until p >= 60 ;
18195: LD_VAR 0 1
18199: PUSH
18200: LD_INT 60
18202: GREATEREQUAL
18203: IFFALSE 18166
// game_speed := 4 ;
18205: LD_ADDR_OWVAR 65
18209: PUSH
18210: LD_INT 4
18212: ST_TO_ADDR
// end ;
18213: PPOPN 1
18215: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18216: LD_EXP 43
18220: PUSH
18221: LD_EXP 70
18225: AND
18226: IFFALSE 18372
18228: GO 18230
18230: DISABLE
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18235: LD_ADDR_VAR 0 1
18239: PUSH
18240: LD_INT 22
18242: PUSH
18243: LD_OWVAR 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: LD_INT 30
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 30
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 69
18288: ST_TO_ADDR
// if not depot then
18289: LD_VAR 0 1
18293: NOT
18294: IFFALSE 18298
// exit ;
18296: GO 18372
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18298: LD_ADDR_VAR 0 2
18302: PUSH
18303: LD_VAR 0 1
18307: PUSH
18308: LD_INT 1
18310: PPUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 12
18320: ARRAY
18321: PPUSH
18322: CALL_OW 274
18326: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18327: LD_VAR 0 2
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: LD_INT 0
18337: PPUSH
18338: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18342: LD_VAR 0 2
18346: PPUSH
18347: LD_INT 2
18349: PPUSH
18350: LD_INT 0
18352: PPUSH
18353: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18357: LD_VAR 0 2
18361: PPUSH
18362: LD_INT 3
18364: PPUSH
18365: LD_INT 0
18367: PPUSH
18368: CALL_OW 277
// end ;
18372: PPOPN 2
18374: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18375: LD_EXP 43
18379: PUSH
18380: LD_EXP 71
18384: AND
18385: IFFALSE 18482
18387: GO 18389
18389: DISABLE
18390: LD_INT 0
18392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_INT 22
18400: PUSH
18401: LD_OWVAR 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 21
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: LD_INT 23
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: PPUSH
18442: CALL_OW 69
18446: ST_TO_ADDR
// if not tmp then
18447: LD_VAR 0 1
18451: NOT
18452: IFFALSE 18456
// exit ;
18454: GO 18482
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18456: LD_VAR 0 1
18460: PUSH
18461: LD_INT 1
18463: PPUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 12
18473: ARRAY
18474: PPUSH
18475: LD_INT 200
18477: PPUSH
18478: CALL_OW 234
// end ;
18482: PPOPN 1
18484: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18485: LD_EXP 43
18489: PUSH
18490: LD_EXP 72
18494: AND
18495: IFFALSE 18574
18497: GO 18499
18499: DISABLE
18500: LD_INT 0
18502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_INT 22
18510: PUSH
18511: LD_OWVAR 2
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 21
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// if not tmp then
18539: LD_VAR 0 1
18543: NOT
18544: IFFALSE 18548
// exit ;
18546: GO 18574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18548: LD_VAR 0 1
18552: PUSH
18553: LD_INT 1
18555: PPUSH
18556: LD_VAR 0 1
18560: PPUSH
18561: CALL_OW 12
18565: ARRAY
18566: PPUSH
18567: LD_INT 60
18569: PPUSH
18570: CALL_OW 234
// end ;
18574: PPOPN 1
18576: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18577: LD_EXP 43
18581: PUSH
18582: LD_EXP 73
18586: AND
18587: IFFALSE 18686
18589: GO 18591
18591: DISABLE
18592: LD_INT 0
18594: PPUSH
18595: PPUSH
// begin enable ;
18596: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 61
18616: PUSH
18617: EMPTY
18618: LIST
18619: PUSH
18620: LD_INT 33
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: PPUSH
18635: CALL_OW 69
18639: ST_TO_ADDR
// if not tmp then
18640: LD_VAR 0 1
18644: NOT
18645: IFFALSE 18649
// exit ;
18647: GO 18686
// for i in tmp do
18649: LD_ADDR_VAR 0 2
18653: PUSH
18654: LD_VAR 0 1
18658: PUSH
18659: FOR_IN
18660: IFFALSE 18684
// if IsControledBy ( i ) then
18662: LD_VAR 0 2
18666: PPUSH
18667: CALL_OW 312
18671: IFFALSE 18682
// ComUnlink ( i ) ;
18673: LD_VAR 0 2
18677: PPUSH
18678: CALL_OW 136
18682: GO 18659
18684: POP
18685: POP
// end ;
18686: PPOPN 2
18688: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18689: LD_EXP 43
18693: PUSH
18694: LD_EXP 74
18698: AND
18699: IFFALSE 18839
18701: GO 18703
18703: DISABLE
18704: LD_INT 0
18706: PPUSH
18707: PPUSH
// begin ToLua ( displayPowell(); ) ;
18708: LD_STRING displayPowell();
18710: PPUSH
18711: CALL_OW 559
// uc_side := 0 ;
18715: LD_ADDR_OWVAR 20
18719: PUSH
18720: LD_INT 0
18722: ST_TO_ADDR
// uc_nation := 2 ;
18723: LD_ADDR_OWVAR 21
18727: PUSH
18728: LD_INT 2
18730: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18731: LD_ADDR_OWVAR 37
18735: PUSH
18736: LD_INT 14
18738: ST_TO_ADDR
// vc_engine := engine_siberite ;
18739: LD_ADDR_OWVAR 39
18743: PUSH
18744: LD_INT 3
18746: ST_TO_ADDR
// vc_control := control_apeman ;
18747: LD_ADDR_OWVAR 38
18751: PUSH
18752: LD_INT 5
18754: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18755: LD_ADDR_OWVAR 40
18759: PUSH
18760: LD_INT 29
18762: ST_TO_ADDR
// un := CreateVehicle ;
18763: LD_ADDR_VAR 0 2
18767: PUSH
18768: CALL_OW 45
18772: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18773: LD_VAR 0 2
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18785: LD_INT 35
18787: PPUSH
18788: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18792: LD_VAR 0 2
18796: PPUSH
18797: LD_INT 22
18799: PUSH
18800: LD_OWVAR 2
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: PPUSH
18814: LD_VAR 0 2
18818: PPUSH
18819: CALL_OW 74
18823: PPUSH
18824: CALL_OW 115
// until IsDead ( un ) ;
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 301
18837: IFFALSE 18785
// end ;
18839: PPOPN 2
18841: END
// every 0 0$1 trigger StreamModeActive and sStu do
18842: LD_EXP 43
18846: PUSH
18847: LD_EXP 82
18851: AND
18852: IFFALSE 18868
18854: GO 18856
18856: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18857: LD_STRING displayStucuk();
18859: PPUSH
18860: CALL_OW 559
// ResetFog ;
18864: CALL_OW 335
// end ;
18868: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18869: LD_EXP 43
18873: PUSH
18874: LD_EXP 75
18878: AND
18879: IFFALSE 19020
18881: GO 18883
18883: DISABLE
18884: LD_INT 0
18886: PPUSH
18887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: ST_TO_ADDR
// if not tmp then
18924: LD_VAR 0 2
18928: NOT
18929: IFFALSE 18933
// exit ;
18931: GO 19020
// un := tmp [ rand ( 1 , tmp ) ] ;
18933: LD_ADDR_VAR 0 1
18937: PUSH
18938: LD_VAR 0 2
18942: PUSH
18943: LD_INT 1
18945: PPUSH
18946: LD_VAR 0 2
18950: PPUSH
18951: CALL_OW 12
18955: ARRAY
18956: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18957: LD_VAR 0 1
18961: PPUSH
18962: LD_INT 0
18964: PPUSH
18965: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18969: LD_VAR 0 1
18973: PPUSH
18974: LD_OWVAR 3
18978: PUSH
18979: LD_VAR 0 1
18983: DIFF
18984: PPUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: CALL_OW 74
18994: PPUSH
18995: CALL_OW 115
// wait ( 0 0$20 ) ;
18999: LD_INT 700
19001: PPUSH
19002: CALL_OW 67
// SetSide ( un , your_side ) ;
19006: LD_VAR 0 1
19010: PPUSH
19011: LD_OWVAR 2
19015: PPUSH
19016: CALL_OW 235
// end ;
19020: PPOPN 2
19022: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19023: LD_EXP 43
19027: PUSH
19028: LD_EXP 76
19032: AND
19033: IFFALSE 19139
19035: GO 19037
19037: DISABLE
19038: LD_INT 0
19040: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19041: LD_ADDR_VAR 0 1
19045: PUSH
19046: LD_INT 22
19048: PUSH
19049: LD_OWVAR 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 30
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 30
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 69
19094: ST_TO_ADDR
// if not depot then
19095: LD_VAR 0 1
19099: NOT
19100: IFFALSE 19104
// exit ;
19102: GO 19139
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19104: LD_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: CALL_OW 250
19117: PPUSH
19118: LD_VAR 0 1
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: CALL_OW 251
19131: PPUSH
19132: LD_INT 70
19134: PPUSH
19135: CALL_OW 495
// end ;
19139: PPOPN 1
19141: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19142: LD_EXP 43
19146: PUSH
19147: LD_EXP 77
19151: AND
19152: IFFALSE 19363
19154: GO 19156
19156: DISABLE
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19164: LD_ADDR_VAR 0 5
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: LD_OWVAR 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 21
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// if not tmp then
19200: LD_VAR 0 5
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19363
// for i in tmp do
19209: LD_ADDR_VAR 0 1
19213: PUSH
19214: LD_VAR 0 5
19218: PUSH
19219: FOR_IN
19220: IFFALSE 19361
// begin d := rand ( 0 , 5 ) ;
19222: LD_ADDR_VAR 0 4
19226: PUSH
19227: LD_INT 0
19229: PPUSH
19230: LD_INT 5
19232: PPUSH
19233: CALL_OW 12
19237: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19238: LD_ADDR_VAR 0 2
19242: PUSH
19243: LD_VAR 0 1
19247: PPUSH
19248: CALL_OW 250
19252: PPUSH
19253: LD_VAR 0 4
19257: PPUSH
19258: LD_INT 3
19260: PPUSH
19261: LD_INT 12
19263: PPUSH
19264: CALL_OW 12
19268: PPUSH
19269: CALL_OW 272
19273: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_VAR 0 1
19283: PPUSH
19284: CALL_OW 251
19288: PPUSH
19289: LD_VAR 0 4
19293: PPUSH
19294: LD_INT 3
19296: PPUSH
19297: LD_INT 12
19299: PPUSH
19300: CALL_OW 12
19304: PPUSH
19305: CALL_OW 273
19309: ST_TO_ADDR
// if ValidHex ( x , y ) then
19310: LD_VAR 0 2
19314: PPUSH
19315: LD_VAR 0 3
19319: PPUSH
19320: CALL_OW 488
19324: IFFALSE 19359
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 3
19343: PPUSH
19344: LD_INT 6
19346: PPUSH
19347: CALL_OW 12
19351: PPUSH
19352: LD_INT 1
19354: PPUSH
19355: CALL_OW 483
// end ;
19359: GO 19219
19361: POP
19362: POP
// end ;
19363: PPOPN 5
19365: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19366: LD_EXP 43
19370: PUSH
19371: LD_EXP 78
19375: AND
19376: IFFALSE 19470
19378: GO 19380
19380: DISABLE
19381: LD_INT 0
19383: PPUSH
19384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19385: LD_ADDR_VAR 0 2
19389: PUSH
19390: LD_INT 22
19392: PUSH
19393: LD_OWVAR 2
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 32
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 21
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 69
19431: ST_TO_ADDR
// if not tmp then
19432: LD_VAR 0 2
19436: NOT
19437: IFFALSE 19441
// exit ;
19439: GO 19470
// for i in tmp do
19441: LD_ADDR_VAR 0 1
19445: PUSH
19446: LD_VAR 0 2
19450: PUSH
19451: FOR_IN
19452: IFFALSE 19468
// SetFuel ( i , 0 ) ;
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_INT 0
19461: PPUSH
19462: CALL_OW 240
19466: GO 19451
19468: POP
19469: POP
// end ;
19470: PPOPN 2
19472: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19473: LD_EXP 43
19477: PUSH
19478: LD_EXP 79
19482: AND
19483: IFFALSE 19549
19485: GO 19487
19487: DISABLE
19488: LD_INT 0
19490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19491: LD_ADDR_VAR 0 1
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_OWVAR 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 30
19510: PUSH
19511: LD_INT 29
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: ST_TO_ADDR
// if not tmp then
19527: LD_VAR 0 1
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19549
// DestroyUnit ( tmp [ 1 ] ) ;
19536: LD_VAR 0 1
19540: PUSH
19541: LD_INT 1
19543: ARRAY
19544: PPUSH
19545: CALL_OW 65
// end ;
19549: PPOPN 1
19551: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19552: LD_EXP 43
19556: PUSH
19557: LD_EXP 81
19561: AND
19562: IFFALSE 19691
19564: GO 19566
19566: DISABLE
19567: LD_INT 0
19569: PPUSH
// begin uc_side := 0 ;
19570: LD_ADDR_OWVAR 20
19574: PUSH
19575: LD_INT 0
19577: ST_TO_ADDR
// uc_nation := nation_arabian ;
19578: LD_ADDR_OWVAR 21
19582: PUSH
19583: LD_INT 2
19585: ST_TO_ADDR
// hc_gallery :=  ;
19586: LD_ADDR_OWVAR 33
19590: PUSH
19591: LD_STRING 
19593: ST_TO_ADDR
// hc_name :=  ;
19594: LD_ADDR_OWVAR 26
19598: PUSH
19599: LD_STRING 
19601: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19602: LD_INT 1
19604: PPUSH
19605: LD_INT 11
19607: PPUSH
19608: LD_INT 10
19610: PPUSH
19611: CALL_OW 380
// un := CreateHuman ;
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: CALL_OW 44
19624: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19625: LD_VAR 0 1
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19637: LD_INT 35
19639: PPUSH
19640: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19644: LD_VAR 0 1
19648: PPUSH
19649: LD_INT 22
19651: PUSH
19652: LD_OWVAR 2
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PPUSH
19661: CALL_OW 69
19665: PPUSH
19666: LD_VAR 0 1
19670: PPUSH
19671: CALL_OW 74
19675: PPUSH
19676: CALL_OW 115
// until IsDead ( un ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 301
19689: IFFALSE 19637
// end ;
19691: PPOPN 1
19693: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19694: LD_EXP 43
19698: PUSH
19699: LD_EXP 83
19703: AND
19704: IFFALSE 19716
19706: GO 19708
19708: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19709: LD_STRING earthquake(getX(game), 0, 32)
19711: PPUSH
19712: CALL_OW 559
19716: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19717: LD_EXP 43
19721: PUSH
19722: LD_EXP 84
19726: AND
19727: IFFALSE 19818
19729: GO 19731
19731: DISABLE
19732: LD_INT 0
19734: PPUSH
// begin enable ;
19735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19736: LD_ADDR_VAR 0 1
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_OWVAR 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 33
19765: PUSH
19766: LD_INT 3
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 69
19782: ST_TO_ADDR
// if not tmp then
19783: LD_VAR 0 1
19787: NOT
19788: IFFALSE 19792
// exit ;
19790: GO 19818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19792: LD_VAR 0 1
19796: PUSH
19797: LD_INT 1
19799: PPUSH
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 12
19809: ARRAY
19810: PPUSH
19811: LD_INT 1
19813: PPUSH
19814: CALL_OW 234
// end ;
19818: PPOPN 1
19820: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19821: LD_EXP 43
19825: PUSH
19826: LD_EXP 85
19830: AND
19831: IFFALSE 19972
19833: GO 19835
19835: DISABLE
19836: LD_INT 0
19838: PPUSH
19839: PPUSH
19840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19841: LD_ADDR_VAR 0 3
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_OWVAR 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 25
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PPUSH
19872: CALL_OW 69
19876: ST_TO_ADDR
// if not tmp then
19877: LD_VAR 0 3
19881: NOT
19882: IFFALSE 19886
// exit ;
19884: GO 19972
// un := tmp [ rand ( 1 , tmp ) ] ;
19886: LD_ADDR_VAR 0 2
19890: PUSH
19891: LD_VAR 0 3
19895: PUSH
19896: LD_INT 1
19898: PPUSH
19899: LD_VAR 0 3
19903: PPUSH
19904: CALL_OW 12
19908: ARRAY
19909: ST_TO_ADDR
// if Crawls ( un ) then
19910: LD_VAR 0 2
19914: PPUSH
19915: CALL_OW 318
19919: IFFALSE 19930
// ComWalk ( un ) ;
19921: LD_VAR 0 2
19925: PPUSH
19926: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19930: LD_VAR 0 2
19934: PPUSH
19935: LD_INT 9
19937: PPUSH
19938: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19942: LD_INT 28
19944: PPUSH
19945: LD_OWVAR 2
19949: PPUSH
19950: LD_INT 2
19952: PPUSH
19953: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19957: LD_INT 29
19959: PPUSH
19960: LD_OWVAR 2
19964: PPUSH
19965: LD_INT 2
19967: PPUSH
19968: CALL_OW 322
// end ;
19972: PPOPN 3
19974: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19975: LD_EXP 43
19979: PUSH
19980: LD_EXP 86
19984: AND
19985: IFFALSE 20096
19987: GO 19989
19989: DISABLE
19990: LD_INT 0
19992: PPUSH
19993: PPUSH
19994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_INT 22
20002: PUSH
20003: LD_OWVAR 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 25
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 3
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20096
// un := tmp [ rand ( 1 , tmp ) ] ;
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 1
20052: PPUSH
20053: LD_VAR 0 3
20057: PPUSH
20058: CALL_OW 12
20062: ARRAY
20063: ST_TO_ADDR
// if Crawls ( un ) then
20064: LD_VAR 0 2
20068: PPUSH
20069: CALL_OW 318
20073: IFFALSE 20084
// ComWalk ( un ) ;
20075: LD_VAR 0 2
20079: PPUSH
20080: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20084: LD_VAR 0 2
20088: PPUSH
20089: LD_INT 8
20091: PPUSH
20092: CALL_OW 336
// end ;
20096: PPOPN 3
20098: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20099: LD_EXP 43
20103: PUSH
20104: LD_EXP 87
20108: AND
20109: IFFALSE 20253
20111: GO 20113
20113: DISABLE
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_INT 22
20125: PUSH
20126: LD_OWVAR 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 21
20137: PUSH
20138: LD_INT 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: LD_INT 34
20150: PUSH
20151: LD_INT 12
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 34
20160: PUSH
20161: LD_INT 51
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 34
20170: PUSH
20171: LD_INT 32
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: PPUSH
20189: CALL_OW 69
20193: ST_TO_ADDR
// if not tmp then
20194: LD_VAR 0 2
20198: NOT
20199: IFFALSE 20203
// exit ;
20201: GO 20253
// for i in tmp do
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_VAR 0 2
20212: PUSH
20213: FOR_IN
20214: IFFALSE 20251
// if GetCargo ( i , mat_artifact ) = 0 then
20216: LD_VAR 0 1
20220: PPUSH
20221: LD_INT 4
20223: PPUSH
20224: CALL_OW 289
20228: PUSH
20229: LD_INT 0
20231: EQUAL
20232: IFFALSE 20249
// SetCargo ( i , mat_siberit , 100 ) ;
20234: LD_VAR 0 1
20238: PPUSH
20239: LD_INT 3
20241: PPUSH
20242: LD_INT 100
20244: PPUSH
20245: CALL_OW 290
20249: GO 20213
20251: POP
20252: POP
// end ;
20253: PPOPN 2
20255: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20256: LD_EXP 43
20260: PUSH
20261: LD_EXP 88
20265: AND
20266: IFFALSE 20449
20268: GO 20270
20270: DISABLE
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20275: LD_ADDR_VAR 0 2
20279: PUSH
20280: LD_INT 22
20282: PUSH
20283: LD_OWVAR 2
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PPUSH
20292: CALL_OW 69
20296: ST_TO_ADDR
// if not tmp then
20297: LD_VAR 0 2
20301: NOT
20302: IFFALSE 20306
// exit ;
20304: GO 20449
// for i := 1 to 2 do
20306: LD_ADDR_VAR 0 1
20310: PUSH
20311: DOUBLE
20312: LD_INT 1
20314: DEC
20315: ST_TO_ADDR
20316: LD_INT 2
20318: PUSH
20319: FOR_TO
20320: IFFALSE 20447
// begin uc_side := your_side ;
20322: LD_ADDR_OWVAR 20
20326: PUSH
20327: LD_OWVAR 2
20331: ST_TO_ADDR
// uc_nation := nation_american ;
20332: LD_ADDR_OWVAR 21
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// vc_chassis := us_morphling ;
20340: LD_ADDR_OWVAR 37
20344: PUSH
20345: LD_INT 5
20347: ST_TO_ADDR
// vc_engine := engine_siberite ;
20348: LD_ADDR_OWVAR 39
20352: PUSH
20353: LD_INT 3
20355: ST_TO_ADDR
// vc_control := control_computer ;
20356: LD_ADDR_OWVAR 38
20360: PUSH
20361: LD_INT 3
20363: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20364: LD_ADDR_OWVAR 40
20368: PUSH
20369: LD_INT 10
20371: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20372: LD_VAR 0 2
20376: PUSH
20377: LD_INT 1
20379: ARRAY
20380: PPUSH
20381: CALL_OW 310
20385: NOT
20386: IFFALSE 20433
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20388: CALL_OW 45
20392: PPUSH
20393: LD_VAR 0 2
20397: PUSH
20398: LD_INT 1
20400: ARRAY
20401: PPUSH
20402: CALL_OW 250
20406: PPUSH
20407: LD_VAR 0 2
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: PPUSH
20416: CALL_OW 251
20420: PPUSH
20421: LD_INT 12
20423: PPUSH
20424: LD_INT 1
20426: PPUSH
20427: CALL_OW 50
20431: GO 20445
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20433: CALL_OW 45
20437: PPUSH
20438: LD_INT 1
20440: PPUSH
20441: CALL_OW 51
// end ;
20445: GO 20319
20447: POP
20448: POP
// end ;
20449: PPOPN 2
20451: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20452: LD_EXP 43
20456: PUSH
20457: LD_EXP 89
20461: AND
20462: IFFALSE 20684
20464: GO 20466
20466: DISABLE
20467: LD_INT 0
20469: PPUSH
20470: PPUSH
20471: PPUSH
20472: PPUSH
20473: PPUSH
20474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20475: LD_ADDR_VAR 0 6
20479: PUSH
20480: LD_INT 22
20482: PUSH
20483: LD_OWVAR 2
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 21
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 3
20504: PUSH
20505: LD_INT 23
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PPUSH
20524: CALL_OW 69
20528: ST_TO_ADDR
// if not tmp then
20529: LD_VAR 0 6
20533: NOT
20534: IFFALSE 20538
// exit ;
20536: GO 20684
// s1 := rand ( 1 , 4 ) ;
20538: LD_ADDR_VAR 0 2
20542: PUSH
20543: LD_INT 1
20545: PPUSH
20546: LD_INT 4
20548: PPUSH
20549: CALL_OW 12
20553: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20554: LD_ADDR_VAR 0 4
20558: PUSH
20559: LD_VAR 0 6
20563: PUSH
20564: LD_INT 1
20566: ARRAY
20567: PPUSH
20568: LD_VAR 0 2
20572: PPUSH
20573: CALL_OW 259
20577: ST_TO_ADDR
// if s1 = 1 then
20578: LD_VAR 0 2
20582: PUSH
20583: LD_INT 1
20585: EQUAL
20586: IFFALSE 20606
// s2 := rand ( 2 , 4 ) else
20588: LD_ADDR_VAR 0 3
20592: PUSH
20593: LD_INT 2
20595: PPUSH
20596: LD_INT 4
20598: PPUSH
20599: CALL_OW 12
20603: ST_TO_ADDR
20604: GO 20614
// s2 := 1 ;
20606: LD_ADDR_VAR 0 3
20610: PUSH
20611: LD_INT 1
20613: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20614: LD_ADDR_VAR 0 5
20618: PUSH
20619: LD_VAR 0 6
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PPUSH
20628: LD_VAR 0 3
20632: PPUSH
20633: CALL_OW 259
20637: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20638: LD_VAR 0 6
20642: PUSH
20643: LD_INT 1
20645: ARRAY
20646: PPUSH
20647: LD_VAR 0 2
20651: PPUSH
20652: LD_VAR 0 5
20656: PPUSH
20657: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20661: LD_VAR 0 6
20665: PUSH
20666: LD_INT 1
20668: ARRAY
20669: PPUSH
20670: LD_VAR 0 3
20674: PPUSH
20675: LD_VAR 0 4
20679: PPUSH
20680: CALL_OW 237
// end ;
20684: PPOPN 6
20686: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20687: LD_EXP 43
20691: PUSH
20692: LD_EXP 90
20696: AND
20697: IFFALSE 20776
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20705: LD_ADDR_VAR 0 1
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_OWVAR 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 3
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: ST_TO_ADDR
// if not tmp then
20741: LD_VAR 0 1
20745: NOT
20746: IFFALSE 20750
// exit ;
20748: GO 20776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20750: LD_VAR 0 1
20754: PUSH
20755: LD_INT 1
20757: PPUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL_OW 12
20767: ARRAY
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: CALL_OW 234
// end ;
20776: PPOPN 1
20778: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20779: LD_EXP 43
20783: PUSH
20784: LD_EXP 91
20788: AND
20789: IFFALSE 20901
20791: GO 20793
20793: DISABLE
20794: LD_INT 0
20796: PPUSH
20797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 22
20805: PUSH
20806: LD_OWVAR 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 2
20817: PUSH
20818: LD_INT 30
20820: PUSH
20821: LD_INT 27
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 30
20830: PUSH
20831: LD_INT 26
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 30
20840: PUSH
20841: LD_INT 28
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 69
20862: ST_TO_ADDR
// if not tmp then
20863: LD_VAR 0 2
20867: NOT
20868: IFFALSE 20872
// exit ;
20870: GO 20901
// for i in tmp do
20872: LD_ADDR_VAR 0 1
20876: PUSH
20877: LD_VAR 0 2
20881: PUSH
20882: FOR_IN
20883: IFFALSE 20899
// SetLives ( i , 1 ) ;
20885: LD_VAR 0 1
20889: PPUSH
20890: LD_INT 1
20892: PPUSH
20893: CALL_OW 234
20897: GO 20882
20899: POP
20900: POP
// end ;
20901: PPOPN 2
20903: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20904: LD_EXP 43
20908: PUSH
20909: LD_EXP 92
20913: AND
20914: IFFALSE 21201
20916: GO 20918
20918: DISABLE
20919: LD_INT 0
20921: PPUSH
20922: PPUSH
20923: PPUSH
// begin i := rand ( 1 , 7 ) ;
20924: LD_ADDR_VAR 0 1
20928: PUSH
20929: LD_INT 1
20931: PPUSH
20932: LD_INT 7
20934: PPUSH
20935: CALL_OW 12
20939: ST_TO_ADDR
// case i of 1 :
20940: LD_VAR 0 1
20944: PUSH
20945: LD_INT 1
20947: DOUBLE
20948: EQUAL
20949: IFTRUE 20953
20951: GO 20963
20953: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20954: LD_STRING earthquake(getX(game), 0, 32)
20956: PPUSH
20957: CALL_OW 559
20961: GO 21201
20963: LD_INT 2
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20985
20971: POP
// begin ToLua ( displayStucuk(); ) ;
20972: LD_STRING displayStucuk();
20974: PPUSH
20975: CALL_OW 559
// ResetFog ;
20979: CALL_OW 335
// end ; 3 :
20983: GO 21201
20985: LD_INT 3
20987: DOUBLE
20988: EQUAL
20989: IFTRUE 20993
20991: GO 21097
20993: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20994: LD_ADDR_VAR 0 2
20998: PUSH
20999: LD_INT 22
21001: PUSH
21002: LD_OWVAR 2
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 25
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: ST_TO_ADDR
// if not tmp then
21030: LD_VAR 0 2
21034: NOT
21035: IFFALSE 21039
// exit ;
21037: GO 21201
// un := tmp [ rand ( 1 , tmp ) ] ;
21039: LD_ADDR_VAR 0 3
21043: PUSH
21044: LD_VAR 0 2
21048: PUSH
21049: LD_INT 1
21051: PPUSH
21052: LD_VAR 0 2
21056: PPUSH
21057: CALL_OW 12
21061: ARRAY
21062: ST_TO_ADDR
// if Crawls ( un ) then
21063: LD_VAR 0 3
21067: PPUSH
21068: CALL_OW 318
21072: IFFALSE 21083
// ComWalk ( un ) ;
21074: LD_VAR 0 3
21078: PPUSH
21079: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21083: LD_VAR 0 3
21087: PPUSH
21088: LD_INT 8
21090: PPUSH
21091: CALL_OW 336
// end ; 4 :
21095: GO 21201
21097: LD_INT 4
21099: DOUBLE
21100: EQUAL
21101: IFTRUE 21105
21103: GO 21179
21105: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21106: LD_ADDR_VAR 0 2
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_OWVAR 2
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 30
21125: PUSH
21126: LD_INT 29
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PPUSH
21137: CALL_OW 69
21141: ST_TO_ADDR
// if not tmp then
21142: LD_VAR 0 2
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21201
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21151: LD_VAR 0 2
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PPUSH
21160: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21164: LD_VAR 0 2
21168: PUSH
21169: LD_INT 1
21171: ARRAY
21172: PPUSH
21173: CALL_OW 65
// end ; 5 .. 7 :
21177: GO 21201
21179: LD_INT 5
21181: DOUBLE
21182: GREATEREQUAL
21183: IFFALSE 21191
21185: LD_INT 7
21187: DOUBLE
21188: LESSEQUAL
21189: IFTRUE 21193
21191: GO 21200
21193: POP
// StreamSibBomb ; end ;
21194: CALL 17438 0 0
21198: GO 21201
21200: POP
// end ;
21201: PPOPN 3
21203: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21204: LD_EXP 43
21208: PUSH
21209: LD_EXP 93
21213: AND
21214: IFFALSE 21370
21216: GO 21218
21218: DISABLE
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
21223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21224: LD_ADDR_VAR 0 2
21228: PUSH
21229: LD_INT 81
21231: PUSH
21232: LD_OWVAR 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 21
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PPUSH
21273: CALL_OW 69
21277: ST_TO_ADDR
// if not tmp then
21278: LD_VAR 0 2
21282: NOT
21283: IFFALSE 21287
// exit ;
21285: GO 21370
// p := 0 ;
21287: LD_ADDR_VAR 0 3
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21295: LD_INT 35
21297: PPUSH
21298: CALL_OW 67
// p := p + 1 ;
21302: LD_ADDR_VAR 0 3
21306: PUSH
21307: LD_VAR 0 3
21311: PUSH
21312: LD_INT 1
21314: PLUS
21315: ST_TO_ADDR
// for i in tmp do
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_VAR 0 2
21325: PUSH
21326: FOR_IN
21327: IFFALSE 21358
// if GetLives ( i ) < 1000 then
21329: LD_VAR 0 1
21333: PPUSH
21334: CALL_OW 256
21338: PUSH
21339: LD_INT 1000
21341: LESS
21342: IFFALSE 21356
// SetLives ( i , 1000 ) ;
21344: LD_VAR 0 1
21348: PPUSH
21349: LD_INT 1000
21351: PPUSH
21352: CALL_OW 234
21356: GO 21326
21358: POP
21359: POP
// until p > 20 ;
21360: LD_VAR 0 3
21364: PUSH
21365: LD_INT 20
21367: GREATER
21368: IFFALSE 21295
// end ;
21370: PPOPN 3
21372: END
// every 0 0$1 trigger StreamModeActive and sTime do
21373: LD_EXP 43
21377: PUSH
21378: LD_EXP 94
21382: AND
21383: IFFALSE 21418
21385: GO 21387
21387: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21388: LD_INT 28
21390: PPUSH
21391: LD_OWVAR 2
21395: PPUSH
21396: LD_INT 2
21398: PPUSH
21399: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21403: LD_INT 30
21405: PPUSH
21406: LD_OWVAR 2
21410: PPUSH
21411: LD_INT 2
21413: PPUSH
21414: CALL_OW 322
// end ;
21418: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21419: LD_EXP 43
21423: PUSH
21424: LD_EXP 95
21428: AND
21429: IFFALSE 21550
21431: GO 21433
21433: DISABLE
21434: LD_INT 0
21436: PPUSH
21437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21438: LD_ADDR_VAR 0 2
21442: PUSH
21443: LD_INT 22
21445: PUSH
21446: LD_OWVAR 2
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 21
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 3
21467: PUSH
21468: LD_INT 23
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: PPUSH
21487: CALL_OW 69
21491: ST_TO_ADDR
// if not tmp then
21492: LD_VAR 0 2
21496: NOT
21497: IFFALSE 21501
// exit ;
21499: GO 21550
// for i in tmp do
21501: LD_ADDR_VAR 0 1
21505: PUSH
21506: LD_VAR 0 2
21510: PUSH
21511: FOR_IN
21512: IFFALSE 21548
// begin if Crawls ( i ) then
21514: LD_VAR 0 1
21518: PPUSH
21519: CALL_OW 318
21523: IFFALSE 21534
// ComWalk ( i ) ;
21525: LD_VAR 0 1
21529: PPUSH
21530: CALL_OW 138
// SetClass ( i , 2 ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_INT 2
21541: PPUSH
21542: CALL_OW 336
// end ;
21546: GO 21511
21548: POP
21549: POP
// end ;
21550: PPOPN 2
21552: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21553: LD_EXP 43
21557: PUSH
21558: LD_EXP 96
21562: AND
21563: IFFALSE 21851
21565: GO 21567
21567: DISABLE
21568: LD_INT 0
21570: PPUSH
21571: PPUSH
21572: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21573: LD_OWVAR 2
21577: PPUSH
21578: LD_INT 9
21580: PPUSH
21581: LD_INT 1
21583: PPUSH
21584: LD_INT 1
21586: PPUSH
21587: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21591: LD_INT 9
21593: PPUSH
21594: LD_OWVAR 2
21598: PPUSH
21599: CALL_OW 343
// uc_side := 9 ;
21603: LD_ADDR_OWVAR 20
21607: PUSH
21608: LD_INT 9
21610: ST_TO_ADDR
// uc_nation := 2 ;
21611: LD_ADDR_OWVAR 21
21615: PUSH
21616: LD_INT 2
21618: ST_TO_ADDR
// hc_name := Dark Warrior ;
21619: LD_ADDR_OWVAR 26
21623: PUSH
21624: LD_STRING Dark Warrior
21626: ST_TO_ADDR
// hc_gallery :=  ;
21627: LD_ADDR_OWVAR 33
21631: PUSH
21632: LD_STRING 
21634: ST_TO_ADDR
// hc_noskilllimit := true ;
21635: LD_ADDR_OWVAR 76
21639: PUSH
21640: LD_INT 1
21642: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21643: LD_ADDR_OWVAR 31
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 30
21653: PUSH
21654: LD_INT 30
21656: PUSH
21657: LD_INT 30
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: ST_TO_ADDR
// un := CreateHuman ;
21666: LD_ADDR_VAR 0 3
21670: PUSH
21671: CALL_OW 44
21675: ST_TO_ADDR
// hc_noskilllimit := false ;
21676: LD_ADDR_OWVAR 76
21680: PUSH
21681: LD_INT 0
21683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21684: LD_VAR 0 3
21688: PPUSH
21689: LD_INT 1
21691: PPUSH
21692: CALL_OW 51
// ToLua ( playRanger() ) ;
21696: LD_STRING playRanger()
21698: PPUSH
21699: CALL_OW 559
// p := 0 ;
21703: LD_ADDR_VAR 0 2
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21711: LD_INT 35
21713: PPUSH
21714: CALL_OW 67
// p := p + 1 ;
21718: LD_ADDR_VAR 0 2
21722: PUSH
21723: LD_VAR 0 2
21727: PUSH
21728: LD_INT 1
21730: PLUS
21731: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21732: LD_VAR 0 3
21736: PPUSH
21737: CALL_OW 256
21741: PUSH
21742: LD_INT 1000
21744: LESS
21745: IFFALSE 21759
// SetLives ( un , 1000 ) ;
21747: LD_VAR 0 3
21751: PPUSH
21752: LD_INT 1000
21754: PPUSH
21755: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21759: LD_VAR 0 3
21763: PPUSH
21764: LD_INT 81
21766: PUSH
21767: LD_OWVAR 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 91
21778: PUSH
21779: LD_VAR 0 3
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 69
21800: PPUSH
21801: LD_VAR 0 3
21805: PPUSH
21806: CALL_OW 74
21810: PPUSH
21811: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21815: LD_VAR 0 2
21819: PUSH
21820: LD_INT 80
21822: GREATER
21823: PUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: CALL_OW 301
21833: OR
21834: IFFALSE 21711
// if un then
21836: LD_VAR 0 3
21840: IFFALSE 21851
// RemoveUnit ( un ) ;
21842: LD_VAR 0 3
21846: PPUSH
21847: CALL_OW 64
// end ;
21851: PPOPN 3
21853: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21854: LD_EXP 97
21858: IFFALSE 21974
21860: GO 21862
21862: DISABLE
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
21867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21868: LD_ADDR_VAR 0 2
21872: PUSH
21873: LD_INT 81
21875: PUSH
21876: LD_OWVAR 2
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 21
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21904: LD_STRING playComputer()
21906: PPUSH
21907: CALL_OW 559
// if not tmp then
21911: LD_VAR 0 2
21915: NOT
21916: IFFALSE 21920
// exit ;
21918: GO 21974
// for i in tmp do
21920: LD_ADDR_VAR 0 1
21924: PUSH
21925: LD_VAR 0 2
21929: PUSH
21930: FOR_IN
21931: IFFALSE 21972
// for j := 1 to 4 do
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: DOUBLE
21939: LD_INT 1
21941: DEC
21942: ST_TO_ADDR
21943: LD_INT 4
21945: PUSH
21946: FOR_TO
21947: IFFALSE 21968
// SetSkill ( i , j , 10 ) ;
21949: LD_VAR 0 1
21953: PPUSH
21954: LD_VAR 0 3
21958: PPUSH
21959: LD_INT 10
21961: PPUSH
21962: CALL_OW 237
21966: GO 21946
21968: POP
21969: POP
21970: GO 21930
21972: POP
21973: POP
// end ;
21974: PPOPN 3
21976: END
// every 0 0$1 trigger s30 do var i , tmp ;
21977: LD_EXP 98
21981: IFFALSE 22050
21983: GO 21985
21985: DISABLE
21986: LD_INT 0
21988: PPUSH
21989: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21990: LD_ADDR_VAR 0 2
21994: PUSH
21995: LD_INT 22
21997: PUSH
21998: LD_OWVAR 2
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PPUSH
22007: CALL_OW 69
22011: ST_TO_ADDR
// if not tmp then
22012: LD_VAR 0 2
22016: NOT
22017: IFFALSE 22021
// exit ;
22019: GO 22050
// for i in tmp do
22021: LD_ADDR_VAR 0 1
22025: PUSH
22026: LD_VAR 0 2
22030: PUSH
22031: FOR_IN
22032: IFFALSE 22048
// SetLives ( i , 300 ) ;
22034: LD_VAR 0 1
22038: PPUSH
22039: LD_INT 300
22041: PPUSH
22042: CALL_OW 234
22046: GO 22031
22048: POP
22049: POP
// end ;
22050: PPOPN 2
22052: END
// every 0 0$1 trigger s60 do var i , tmp ;
22053: LD_EXP 99
22057: IFFALSE 22126
22059: GO 22061
22061: DISABLE
22062: LD_INT 0
22064: PPUSH
22065: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22066: LD_ADDR_VAR 0 2
22070: PUSH
22071: LD_INT 22
22073: PUSH
22074: LD_OWVAR 2
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PPUSH
22083: CALL_OW 69
22087: ST_TO_ADDR
// if not tmp then
22088: LD_VAR 0 2
22092: NOT
22093: IFFALSE 22097
// exit ;
22095: GO 22126
// for i in tmp do
22097: LD_ADDR_VAR 0 1
22101: PUSH
22102: LD_VAR 0 2
22106: PUSH
22107: FOR_IN
22108: IFFALSE 22124
// SetLives ( i , 600 ) ;
22110: LD_VAR 0 1
22114: PPUSH
22115: LD_INT 600
22117: PPUSH
22118: CALL_OW 234
22122: GO 22107
22124: POP
22125: POP
// end ;
22126: PPOPN 2
22128: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22129: LD_INT 0
22131: PPUSH
// case cmd of 301 :
22132: LD_VAR 0 1
22136: PUSH
22137: LD_INT 301
22139: DOUBLE
22140: EQUAL
22141: IFTRUE 22145
22143: GO 22177
22145: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22146: LD_VAR 0 6
22150: PPUSH
22151: LD_VAR 0 7
22155: PPUSH
22156: LD_VAR 0 8
22160: PPUSH
22161: LD_VAR 0 4
22165: PPUSH
22166: LD_VAR 0 5
22170: PPUSH
22171: CALL 23378 0 5
22175: GO 22298
22177: LD_INT 302
22179: DOUBLE
22180: EQUAL
22181: IFTRUE 22185
22183: GO 22222
22185: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22186: LD_VAR 0 6
22190: PPUSH
22191: LD_VAR 0 7
22195: PPUSH
22196: LD_VAR 0 8
22200: PPUSH
22201: LD_VAR 0 9
22205: PPUSH
22206: LD_VAR 0 4
22210: PPUSH
22211: LD_VAR 0 5
22215: PPUSH
22216: CALL 23469 0 6
22220: GO 22298
22222: LD_INT 303
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22230
22228: GO 22267
22230: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22231: LD_VAR 0 6
22235: PPUSH
22236: LD_VAR 0 7
22240: PPUSH
22241: LD_VAR 0 8
22245: PPUSH
22246: LD_VAR 0 9
22250: PPUSH
22251: LD_VAR 0 4
22255: PPUSH
22256: LD_VAR 0 5
22260: PPUSH
22261: CALL 22303 0 6
22265: GO 22298
22267: LD_INT 304
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22297
22275: POP
// hHackTeleport ( unit , x , y ) ; end ;
22276: LD_VAR 0 2
22280: PPUSH
22281: LD_VAR 0 4
22285: PPUSH
22286: LD_VAR 0 5
22290: PPUSH
22291: CALL 24062 0 3
22295: GO 22298
22297: POP
// end ;
22298: LD_VAR 0 12
22302: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22303: LD_INT 0
22305: PPUSH
22306: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22307: LD_VAR 0 1
22311: PUSH
22312: LD_INT 1
22314: LESS
22315: PUSH
22316: LD_VAR 0 1
22320: PUSH
22321: LD_INT 3
22323: GREATER
22324: OR
22325: PUSH
22326: LD_VAR 0 5
22330: PPUSH
22331: LD_VAR 0 6
22335: PPUSH
22336: CALL_OW 428
22340: OR
22341: IFFALSE 22345
// exit ;
22343: GO 23065
// uc_side := your_side ;
22345: LD_ADDR_OWVAR 20
22349: PUSH
22350: LD_OWVAR 2
22354: ST_TO_ADDR
// uc_nation := nation ;
22355: LD_ADDR_OWVAR 21
22359: PUSH
22360: LD_VAR 0 1
22364: ST_TO_ADDR
// bc_level = 1 ;
22365: LD_ADDR_OWVAR 43
22369: PUSH
22370: LD_INT 1
22372: ST_TO_ADDR
// case btype of 1 :
22373: LD_VAR 0 2
22377: PUSH
22378: LD_INT 1
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22397
22386: POP
// bc_type := b_depot ; 2 :
22387: LD_ADDR_OWVAR 42
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
22395: GO 23009
22397: LD_INT 2
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22416
22405: POP
// bc_type := b_warehouse ; 3 :
22406: LD_ADDR_OWVAR 42
22410: PUSH
22411: LD_INT 1
22413: ST_TO_ADDR
22414: GO 23009
22416: LD_INT 3
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22435
22424: POP
// bc_type := b_lab ; 4 .. 9 :
22425: LD_ADDR_OWVAR 42
22429: PUSH
22430: LD_INT 6
22432: ST_TO_ADDR
22433: GO 23009
22435: LD_INT 4
22437: DOUBLE
22438: GREATEREQUAL
22439: IFFALSE 22447
22441: LD_INT 9
22443: DOUBLE
22444: LESSEQUAL
22445: IFTRUE 22449
22447: GO 22501
22449: POP
// begin bc_type := b_lab_half ;
22450: LD_ADDR_OWVAR 42
22454: PUSH
22455: LD_INT 7
22457: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22458: LD_ADDR_OWVAR 44
22462: PUSH
22463: LD_INT 10
22465: PUSH
22466: LD_INT 11
22468: PUSH
22469: LD_INT 12
22471: PUSH
22472: LD_INT 15
22474: PUSH
22475: LD_INT 14
22477: PUSH
22478: LD_INT 13
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: PUSH
22489: LD_VAR 0 2
22493: PUSH
22494: LD_INT 3
22496: MINUS
22497: ARRAY
22498: ST_TO_ADDR
// end ; 10 .. 13 :
22499: GO 23009
22501: LD_INT 10
22503: DOUBLE
22504: GREATEREQUAL
22505: IFFALSE 22513
22507: LD_INT 13
22509: DOUBLE
22510: LESSEQUAL
22511: IFTRUE 22515
22513: GO 22592
22515: POP
// begin bc_type := b_lab_full ;
22516: LD_ADDR_OWVAR 42
22520: PUSH
22521: LD_INT 8
22523: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22524: LD_ADDR_OWVAR 44
22528: PUSH
22529: LD_INT 10
22531: PUSH
22532: LD_INT 12
22534: PUSH
22535: LD_INT 14
22537: PUSH
22538: LD_INT 13
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: LD_VAR 0 2
22551: PUSH
22552: LD_INT 9
22554: MINUS
22555: ARRAY
22556: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22557: LD_ADDR_OWVAR 45
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 15
22567: PUSH
22568: LD_INT 12
22570: PUSH
22571: LD_INT 15
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: LD_VAR 0 2
22584: PUSH
22585: LD_INT 9
22587: MINUS
22588: ARRAY
22589: ST_TO_ADDR
// end ; 14 :
22590: GO 23009
22592: LD_INT 14
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22600
22598: GO 22611
22600: POP
// bc_type := b_workshop ; 15 :
22601: LD_ADDR_OWVAR 42
22605: PUSH
22606: LD_INT 2
22608: ST_TO_ADDR
22609: GO 23009
22611: LD_INT 15
22613: DOUBLE
22614: EQUAL
22615: IFTRUE 22619
22617: GO 22630
22619: POP
// bc_type := b_factory ; 16 :
22620: LD_ADDR_OWVAR 42
22624: PUSH
22625: LD_INT 3
22627: ST_TO_ADDR
22628: GO 23009
22630: LD_INT 16
22632: DOUBLE
22633: EQUAL
22634: IFTRUE 22638
22636: GO 22649
22638: POP
// bc_type := b_ext_gun ; 17 :
22639: LD_ADDR_OWVAR 42
22643: PUSH
22644: LD_INT 17
22646: ST_TO_ADDR
22647: GO 23009
22649: LD_INT 17
22651: DOUBLE
22652: EQUAL
22653: IFTRUE 22657
22655: GO 22685
22657: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22658: LD_ADDR_OWVAR 42
22662: PUSH
22663: LD_INT 19
22665: PUSH
22666: LD_INT 23
22668: PUSH
22669: LD_INT 19
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: LD_VAR 0 1
22681: ARRAY
22682: ST_TO_ADDR
22683: GO 23009
22685: LD_INT 18
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22704
22693: POP
// bc_type := b_ext_radar ; 19 :
22694: LD_ADDR_OWVAR 42
22698: PUSH
22699: LD_INT 20
22701: ST_TO_ADDR
22702: GO 23009
22704: LD_INT 19
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22723
22712: POP
// bc_type := b_ext_radio ; 20 :
22713: LD_ADDR_OWVAR 42
22717: PUSH
22718: LD_INT 22
22720: ST_TO_ADDR
22721: GO 23009
22723: LD_INT 20
22725: DOUBLE
22726: EQUAL
22727: IFTRUE 22731
22729: GO 22742
22731: POP
// bc_type := b_ext_siberium ; 21 :
22732: LD_ADDR_OWVAR 42
22736: PUSH
22737: LD_INT 21
22739: ST_TO_ADDR
22740: GO 23009
22742: LD_INT 21
22744: DOUBLE
22745: EQUAL
22746: IFTRUE 22750
22748: GO 22761
22750: POP
// bc_type := b_ext_computer ; 22 :
22751: LD_ADDR_OWVAR 42
22755: PUSH
22756: LD_INT 24
22758: ST_TO_ADDR
22759: GO 23009
22761: LD_INT 22
22763: DOUBLE
22764: EQUAL
22765: IFTRUE 22769
22767: GO 22780
22769: POP
// bc_type := b_ext_track ; 23 :
22770: LD_ADDR_OWVAR 42
22774: PUSH
22775: LD_INT 16
22777: ST_TO_ADDR
22778: GO 23009
22780: LD_INT 23
22782: DOUBLE
22783: EQUAL
22784: IFTRUE 22788
22786: GO 22799
22788: POP
// bc_type := b_ext_laser ; 24 :
22789: LD_ADDR_OWVAR 42
22793: PUSH
22794: LD_INT 25
22796: ST_TO_ADDR
22797: GO 23009
22799: LD_INT 24
22801: DOUBLE
22802: EQUAL
22803: IFTRUE 22807
22805: GO 22818
22807: POP
// bc_type := b_control_tower ; 25 :
22808: LD_ADDR_OWVAR 42
22812: PUSH
22813: LD_INT 36
22815: ST_TO_ADDR
22816: GO 23009
22818: LD_INT 25
22820: DOUBLE
22821: EQUAL
22822: IFTRUE 22826
22824: GO 22837
22826: POP
// bc_type := b_breastwork ; 26 :
22827: LD_ADDR_OWVAR 42
22831: PUSH
22832: LD_INT 31
22834: ST_TO_ADDR
22835: GO 23009
22837: LD_INT 26
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 22856
22845: POP
// bc_type := b_bunker ; 27 :
22846: LD_ADDR_OWVAR 42
22850: PUSH
22851: LD_INT 32
22853: ST_TO_ADDR
22854: GO 23009
22856: LD_INT 27
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 22875
22864: POP
// bc_type := b_turret ; 28 :
22865: LD_ADDR_OWVAR 42
22869: PUSH
22870: LD_INT 33
22872: ST_TO_ADDR
22873: GO 23009
22875: LD_INT 28
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22894
22883: POP
// bc_type := b_armoury ; 29 :
22884: LD_ADDR_OWVAR 42
22888: PUSH
22889: LD_INT 4
22891: ST_TO_ADDR
22892: GO 23009
22894: LD_INT 29
22896: DOUBLE
22897: EQUAL
22898: IFTRUE 22902
22900: GO 22913
22902: POP
// bc_type := b_barracks ; 30 :
22903: LD_ADDR_OWVAR 42
22907: PUSH
22908: LD_INT 5
22910: ST_TO_ADDR
22911: GO 23009
22913: LD_INT 30
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 22932
22921: POP
// bc_type := b_solar_power ; 31 :
22922: LD_ADDR_OWVAR 42
22926: PUSH
22927: LD_INT 27
22929: ST_TO_ADDR
22930: GO 23009
22932: LD_INT 31
22934: DOUBLE
22935: EQUAL
22936: IFTRUE 22940
22938: GO 22951
22940: POP
// bc_type := b_oil_power ; 32 :
22941: LD_ADDR_OWVAR 42
22945: PUSH
22946: LD_INT 26
22948: ST_TO_ADDR
22949: GO 23009
22951: LD_INT 32
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 22970
22959: POP
// bc_type := b_siberite_power ; 33 :
22960: LD_ADDR_OWVAR 42
22964: PUSH
22965: LD_INT 28
22967: ST_TO_ADDR
22968: GO 23009
22970: LD_INT 33
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 22989
22978: POP
// bc_type := b_oil_mine ; 34 :
22979: LD_ADDR_OWVAR 42
22983: PUSH
22984: LD_INT 29
22986: ST_TO_ADDR
22987: GO 23009
22989: LD_INT 34
22991: DOUBLE
22992: EQUAL
22993: IFTRUE 22997
22995: GO 23008
22997: POP
// bc_type := b_siberite_mine ; end ;
22998: LD_ADDR_OWVAR 42
23002: PUSH
23003: LD_INT 30
23005: ST_TO_ADDR
23006: GO 23009
23008: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23009: LD_ADDR_VAR 0 8
23013: PUSH
23014: LD_VAR 0 5
23018: PPUSH
23019: LD_VAR 0 6
23023: PPUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 47
23033: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23034: LD_OWVAR 42
23038: PUSH
23039: LD_INT 32
23041: PUSH
23042: LD_INT 33
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: IN
23049: IFFALSE 23065
// PlaceWeaponTurret ( b , weapon ) ;
23051: LD_VAR 0 8
23055: PPUSH
23056: LD_VAR 0 4
23060: PPUSH
23061: CALL_OW 431
// end ;
23065: LD_VAR 0 7
23069: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23070: LD_INT 0
23072: PPUSH
23073: PPUSH
23074: PPUSH
23075: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23076: LD_ADDR_VAR 0 4
23080: PUSH
23081: LD_INT 22
23083: PUSH
23084: LD_OWVAR 2
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 30
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 30
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 69
23129: ST_TO_ADDR
// if not tmp then
23130: LD_VAR 0 4
23134: NOT
23135: IFFALSE 23139
// exit ;
23137: GO 23198
// for i in tmp do
23139: LD_ADDR_VAR 0 2
23143: PUSH
23144: LD_VAR 0 4
23148: PUSH
23149: FOR_IN
23150: IFFALSE 23196
// for j = 1 to 3 do
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: DOUBLE
23158: LD_INT 1
23160: DEC
23161: ST_TO_ADDR
23162: LD_INT 3
23164: PUSH
23165: FOR_TO
23166: IFFALSE 23192
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23168: LD_VAR 0 2
23172: PPUSH
23173: CALL_OW 274
23177: PPUSH
23178: LD_VAR 0 3
23182: PPUSH
23183: LD_INT 99999
23185: PPUSH
23186: CALL_OW 277
23190: GO 23165
23192: POP
23193: POP
23194: GO 23149
23196: POP
23197: POP
// end ;
23198: LD_VAR 0 1
23202: RET
// export function hHackSetLevel10 ; var i , j ; begin
23203: LD_INT 0
23205: PPUSH
23206: PPUSH
23207: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23208: LD_ADDR_VAR 0 2
23212: PUSH
23213: LD_INT 21
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: PUSH
23228: FOR_IN
23229: IFFALSE 23281
// if IsSelected ( i ) then
23231: LD_VAR 0 2
23235: PPUSH
23236: CALL_OW 306
23240: IFFALSE 23279
// begin for j := 1 to 4 do
23242: LD_ADDR_VAR 0 3
23246: PUSH
23247: DOUBLE
23248: LD_INT 1
23250: DEC
23251: ST_TO_ADDR
23252: LD_INT 4
23254: PUSH
23255: FOR_TO
23256: IFFALSE 23277
// SetSkill ( i , j , 10 ) ;
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_VAR 0 3
23267: PPUSH
23268: LD_INT 10
23270: PPUSH
23271: CALL_OW 237
23275: GO 23255
23277: POP
23278: POP
// end ;
23279: GO 23228
23281: POP
23282: POP
// end ;
23283: LD_VAR 0 1
23287: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23288: LD_INT 0
23290: PPUSH
23291: PPUSH
23292: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23293: LD_ADDR_VAR 0 2
23297: PUSH
23298: LD_INT 22
23300: PUSH
23301: LD_OWVAR 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 69
23328: PUSH
23329: FOR_IN
23330: IFFALSE 23371
// begin for j := 1 to 4 do
23332: LD_ADDR_VAR 0 3
23336: PUSH
23337: DOUBLE
23338: LD_INT 1
23340: DEC
23341: ST_TO_ADDR
23342: LD_INT 4
23344: PUSH
23345: FOR_TO
23346: IFFALSE 23367
// SetSkill ( i , j , 10 ) ;
23348: LD_VAR 0 2
23352: PPUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: LD_INT 10
23360: PPUSH
23361: CALL_OW 237
23365: GO 23345
23367: POP
23368: POP
// end ;
23369: GO 23329
23371: POP
23372: POP
// end ;
23373: LD_VAR 0 1
23377: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23378: LD_INT 0
23380: PPUSH
// uc_side := your_side ;
23381: LD_ADDR_OWVAR 20
23385: PUSH
23386: LD_OWVAR 2
23390: ST_TO_ADDR
// uc_nation := nation ;
23391: LD_ADDR_OWVAR 21
23395: PUSH
23396: LD_VAR 0 1
23400: ST_TO_ADDR
// InitHc ;
23401: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23405: LD_INT 0
23407: PPUSH
23408: LD_VAR 0 2
23412: PPUSH
23413: LD_VAR 0 3
23417: PPUSH
23418: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23422: LD_VAR 0 4
23426: PPUSH
23427: LD_VAR 0 5
23431: PPUSH
23432: CALL_OW 428
23436: PUSH
23437: LD_INT 0
23439: EQUAL
23440: IFFALSE 23464
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23442: CALL_OW 44
23446: PPUSH
23447: LD_VAR 0 4
23451: PPUSH
23452: LD_VAR 0 5
23456: PPUSH
23457: LD_INT 1
23459: PPUSH
23460: CALL_OW 48
// end ;
23464: LD_VAR 0 6
23468: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23469: LD_INT 0
23471: PPUSH
23472: PPUSH
// uc_side := your_side ;
23473: LD_ADDR_OWVAR 20
23477: PUSH
23478: LD_OWVAR 2
23482: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23483: LD_VAR 0 1
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: LD_INT 4
23499: PUSH
23500: LD_INT 5
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: IN
23510: IFFALSE 23522
// uc_nation := nation_american else
23512: LD_ADDR_OWVAR 21
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
23520: GO 23565
// if chassis in [ 11 , 12 , 13 , 14 ] then
23522: LD_VAR 0 1
23526: PUSH
23527: LD_INT 11
23529: PUSH
23530: LD_INT 12
23532: PUSH
23533: LD_INT 13
23535: PUSH
23536: LD_INT 14
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: IN
23545: IFFALSE 23557
// uc_nation := nation_arabian else
23547: LD_ADDR_OWVAR 21
23551: PUSH
23552: LD_INT 2
23554: ST_TO_ADDR
23555: GO 23565
// uc_nation := nation_russian ;
23557: LD_ADDR_OWVAR 21
23561: PUSH
23562: LD_INT 3
23564: ST_TO_ADDR
// vc_chassis := chassis ;
23565: LD_ADDR_OWVAR 37
23569: PUSH
23570: LD_VAR 0 1
23574: ST_TO_ADDR
// vc_engine := engine ;
23575: LD_ADDR_OWVAR 39
23579: PUSH
23580: LD_VAR 0 2
23584: ST_TO_ADDR
// vc_control := control ;
23585: LD_ADDR_OWVAR 38
23589: PUSH
23590: LD_VAR 0 3
23594: ST_TO_ADDR
// vc_weapon := weapon ;
23595: LD_ADDR_OWVAR 40
23599: PUSH
23600: LD_VAR 0 4
23604: ST_TO_ADDR
// un := CreateVehicle ;
23605: LD_ADDR_VAR 0 8
23609: PUSH
23610: CALL_OW 45
23614: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23615: LD_VAR 0 8
23619: PPUSH
23620: LD_INT 0
23622: PPUSH
23623: LD_INT 5
23625: PPUSH
23626: CALL_OW 12
23630: PPUSH
23631: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23635: LD_VAR 0 8
23639: PPUSH
23640: LD_VAR 0 5
23644: PPUSH
23645: LD_VAR 0 6
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: CALL_OW 48
// end ;
23657: LD_VAR 0 7
23661: RET
// export hInvincible ; every 1 do
23662: GO 23664
23664: DISABLE
// hInvincible := [ ] ;
23665: LD_ADDR_EXP 100
23669: PUSH
23670: EMPTY
23671: ST_TO_ADDR
23672: END
// every 10 do var i ;
23673: GO 23675
23675: DISABLE
23676: LD_INT 0
23678: PPUSH
// begin enable ;
23679: ENABLE
// if not hInvincible then
23680: LD_EXP 100
23684: NOT
23685: IFFALSE 23689
// exit ;
23687: GO 23733
// for i in hInvincible do
23689: LD_ADDR_VAR 0 1
23693: PUSH
23694: LD_EXP 100
23698: PUSH
23699: FOR_IN
23700: IFFALSE 23731
// if GetLives ( i ) < 1000 then
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 256
23711: PUSH
23712: LD_INT 1000
23714: LESS
23715: IFFALSE 23729
// SetLives ( i , 1000 ) ;
23717: LD_VAR 0 1
23721: PPUSH
23722: LD_INT 1000
23724: PPUSH
23725: CALL_OW 234
23729: GO 23699
23731: POP
23732: POP
// end ;
23733: PPOPN 1
23735: END
// export function hHackInvincible ; var i ; begin
23736: LD_INT 0
23738: PPUSH
23739: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23740: LD_ADDR_VAR 0 2
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 21
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 21
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: PPUSH
23773: CALL_OW 69
23777: PUSH
23778: FOR_IN
23779: IFFALSE 23840
// if IsSelected ( i ) then
23781: LD_VAR 0 2
23785: PPUSH
23786: CALL_OW 306
23790: IFFALSE 23838
// begin if i in hInvincible then
23792: LD_VAR 0 2
23796: PUSH
23797: LD_EXP 100
23801: IN
23802: IFFALSE 23822
// hInvincible := hInvincible diff i else
23804: LD_ADDR_EXP 100
23808: PUSH
23809: LD_EXP 100
23813: PUSH
23814: LD_VAR 0 2
23818: DIFF
23819: ST_TO_ADDR
23820: GO 23838
// hInvincible := hInvincible union i ;
23822: LD_ADDR_EXP 100
23826: PUSH
23827: LD_EXP 100
23831: PUSH
23832: LD_VAR 0 2
23836: UNION
23837: ST_TO_ADDR
// end ;
23838: GO 23778
23840: POP
23841: POP
// end ;
23842: LD_VAR 0 1
23846: RET
// export function hHackInvisible ; var i , j ; begin
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 21
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PPUSH
23867: CALL_OW 69
23871: PUSH
23872: FOR_IN
23873: IFFALSE 23897
// if IsSelected ( i ) then
23875: LD_VAR 0 2
23879: PPUSH
23880: CALL_OW 306
23884: IFFALSE 23895
// ComForceInvisible ( i ) ;
23886: LD_VAR 0 2
23890: PPUSH
23891: CALL_OW 496
23895: GO 23872
23897: POP
23898: POP
// end ;
23899: LD_VAR 0 1
23903: RET
// export function hHackChangeYourSide ; begin
23904: LD_INT 0
23906: PPUSH
// if your_side = 8 then
23907: LD_OWVAR 2
23911: PUSH
23912: LD_INT 8
23914: EQUAL
23915: IFFALSE 23927
// your_side := 0 else
23917: LD_ADDR_OWVAR 2
23921: PUSH
23922: LD_INT 0
23924: ST_TO_ADDR
23925: GO 23941
// your_side := your_side + 1 ;
23927: LD_ADDR_OWVAR 2
23931: PUSH
23932: LD_OWVAR 2
23936: PUSH
23937: LD_INT 1
23939: PLUS
23940: ST_TO_ADDR
// end ;
23941: LD_VAR 0 1
23945: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23946: LD_INT 0
23948: PPUSH
23949: PPUSH
23950: PPUSH
// for i in all_units do
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_OWVAR 3
23960: PUSH
23961: FOR_IN
23962: IFFALSE 24040
// if IsSelected ( i ) then
23964: LD_VAR 0 2
23968: PPUSH
23969: CALL_OW 306
23973: IFFALSE 24038
// begin j := GetSide ( i ) ;
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: LD_VAR 0 2
23984: PPUSH
23985: CALL_OW 255
23989: ST_TO_ADDR
// if j = 8 then
23990: LD_VAR 0 3
23994: PUSH
23995: LD_INT 8
23997: EQUAL
23998: IFFALSE 24010
// j := 0 else
24000: LD_ADDR_VAR 0 3
24004: PUSH
24005: LD_INT 0
24007: ST_TO_ADDR
24008: GO 24024
// j := j + 1 ;
24010: LD_ADDR_VAR 0 3
24014: PUSH
24015: LD_VAR 0 3
24019: PUSH
24020: LD_INT 1
24022: PLUS
24023: ST_TO_ADDR
// SetSide ( i , j ) ;
24024: LD_VAR 0 2
24028: PPUSH
24029: LD_VAR 0 3
24033: PPUSH
24034: CALL_OW 235
// end ;
24038: GO 23961
24040: POP
24041: POP
// end ;
24042: LD_VAR 0 1
24046: RET
// export function hHackFog ; begin
24047: LD_INT 0
24049: PPUSH
// FogOff ( true ) ;
24050: LD_INT 1
24052: PPUSH
24053: CALL_OW 344
// end ;
24057: LD_VAR 0 1
24061: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24062: LD_INT 0
24064: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24065: LD_VAR 0 1
24069: PPUSH
24070: LD_VAR 0 2
24074: PPUSH
24075: LD_VAR 0 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: LD_INT 1
24085: PPUSH
24086: CALL_OW 483
// CenterOnXY ( x , y ) ;
24090: LD_VAR 0 2
24094: PPUSH
24095: LD_VAR 0 3
24099: PPUSH
24100: CALL_OW 84
// end ;
24104: LD_VAR 0 4
24108: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24113: LD_VAR 0 1
24117: NOT
24118: PUSH
24119: LD_VAR 0 2
24123: PPUSH
24124: LD_VAR 0 3
24128: PPUSH
24129: CALL_OW 488
24133: NOT
24134: OR
24135: PUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 266
24145: PUSH
24146: LD_INT 3
24148: NONEQUAL
24149: PUSH
24150: LD_VAR 0 1
24154: PPUSH
24155: CALL_OW 247
24159: PUSH
24160: LD_INT 1
24162: EQUAL
24163: NOT
24164: AND
24165: OR
24166: IFFALSE 24170
// exit ;
24168: GO 24319
// if GetType ( factory ) = unit_human then
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 247
24179: PUSH
24180: LD_INT 1
24182: EQUAL
24183: IFFALSE 24200
// factory := IsInUnit ( factory ) ;
24185: LD_ADDR_VAR 0 1
24189: PUSH
24190: LD_VAR 0 1
24194: PPUSH
24195: CALL_OW 310
24199: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 266
24209: PUSH
24210: LD_INT 3
24212: NONEQUAL
24213: IFFALSE 24217
// exit ;
24215: GO 24319
// if HexInfo ( x , y ) = factory then
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 3
24226: PPUSH
24227: CALL_OW 428
24231: PUSH
24232: LD_VAR 0 1
24236: EQUAL
24237: IFFALSE 24264
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24239: LD_ADDR_EXP 101
24243: PUSH
24244: LD_EXP 101
24248: PPUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: LD_INT 0
24256: PPUSH
24257: CALL_OW 1
24261: ST_TO_ADDR
24262: GO 24315
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24264: LD_ADDR_EXP 101
24268: PUSH
24269: LD_EXP 101
24273: PPUSH
24274: LD_VAR 0 1
24278: PPUSH
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL_OW 255
24288: PUSH
24289: LD_VAR 0 1
24293: PUSH
24294: LD_VAR 0 2
24298: PUSH
24299: LD_VAR 0 3
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PPUSH
24310: CALL_OW 1
24314: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24315: CALL 24324 0 0
// end ;
24319: LD_VAR 0 4
24323: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24324: LD_INT 0
24326: PPUSH
24327: PPUSH
24328: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24329: LD_STRING resetFactoryWaypoint();
24331: PPUSH
24332: CALL_OW 559
// if factoryWaypoints then
24336: LD_EXP 101
24340: IFFALSE 24466
// begin list := PrepareArray ( factoryWaypoints ) ;
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_EXP 101
24351: PPUSH
24352: CALL 71061 0 1
24356: ST_TO_ADDR
// for i := 1 to list do
24357: LD_ADDR_VAR 0 2
24361: PUSH
24362: DOUBLE
24363: LD_INT 1
24365: DEC
24366: ST_TO_ADDR
24367: LD_VAR 0 3
24371: PUSH
24372: FOR_TO
24373: IFFALSE 24464
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24375: LD_STRING setFactoryWaypointXY(
24377: PUSH
24378: LD_VAR 0 3
24382: PUSH
24383: LD_VAR 0 2
24387: ARRAY
24388: PUSH
24389: LD_INT 1
24391: ARRAY
24392: STR
24393: PUSH
24394: LD_STRING ,
24396: STR
24397: PUSH
24398: LD_VAR 0 3
24402: PUSH
24403: LD_VAR 0 2
24407: ARRAY
24408: PUSH
24409: LD_INT 2
24411: ARRAY
24412: STR
24413: PUSH
24414: LD_STRING ,
24416: STR
24417: PUSH
24418: LD_VAR 0 3
24422: PUSH
24423: LD_VAR 0 2
24427: ARRAY
24428: PUSH
24429: LD_INT 3
24431: ARRAY
24432: STR
24433: PUSH
24434: LD_STRING ,
24436: STR
24437: PUSH
24438: LD_VAR 0 3
24442: PUSH
24443: LD_VAR 0 2
24447: ARRAY
24448: PUSH
24449: LD_INT 4
24451: ARRAY
24452: STR
24453: PUSH
24454: LD_STRING )
24456: STR
24457: PPUSH
24458: CALL_OW 559
24462: GO 24372
24464: POP
24465: POP
// end ; end ;
24466: LD_VAR 0 1
24470: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24471: LD_INT 0
24473: PPUSH
// if HexInfo ( x , y ) = warehouse then
24474: LD_VAR 0 2
24478: PPUSH
24479: LD_VAR 0 3
24483: PPUSH
24484: CALL_OW 428
24488: PUSH
24489: LD_VAR 0 1
24493: EQUAL
24494: IFFALSE 24521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24496: LD_ADDR_EXP 102
24500: PUSH
24501: LD_EXP 102
24505: PPUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: LD_INT 0
24513: PPUSH
24514: CALL_OW 1
24518: ST_TO_ADDR
24519: GO 24572
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24521: LD_ADDR_EXP 102
24525: PUSH
24526: LD_EXP 102
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: LD_VAR 0 1
24540: PPUSH
24541: CALL_OW 255
24545: PUSH
24546: LD_VAR 0 1
24550: PUSH
24551: LD_VAR 0 2
24555: PUSH
24556: LD_VAR 0 3
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: PPUSH
24567: CALL_OW 1
24571: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24572: CALL 24581 0 0
// end ;
24576: LD_VAR 0 4
24580: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24581: LD_INT 0
24583: PPUSH
24584: PPUSH
24585: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24586: LD_STRING resetWarehouseGatheringPoints();
24588: PPUSH
24589: CALL_OW 559
// if warehouseGatheringPoints then
24593: LD_EXP 102
24597: IFFALSE 24723
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24599: LD_ADDR_VAR 0 3
24603: PUSH
24604: LD_EXP 102
24608: PPUSH
24609: CALL 71061 0 1
24613: ST_TO_ADDR
// for i := 1 to list do
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: DOUBLE
24620: LD_INT 1
24622: DEC
24623: ST_TO_ADDR
24624: LD_VAR 0 3
24628: PUSH
24629: FOR_TO
24630: IFFALSE 24721
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24632: LD_STRING setWarehouseGatheringPointXY(
24634: PUSH
24635: LD_VAR 0 3
24639: PUSH
24640: LD_VAR 0 2
24644: ARRAY
24645: PUSH
24646: LD_INT 1
24648: ARRAY
24649: STR
24650: PUSH
24651: LD_STRING ,
24653: STR
24654: PUSH
24655: LD_VAR 0 3
24659: PUSH
24660: LD_VAR 0 2
24664: ARRAY
24665: PUSH
24666: LD_INT 2
24668: ARRAY
24669: STR
24670: PUSH
24671: LD_STRING ,
24673: STR
24674: PUSH
24675: LD_VAR 0 3
24679: PUSH
24680: LD_VAR 0 2
24684: ARRAY
24685: PUSH
24686: LD_INT 3
24688: ARRAY
24689: STR
24690: PUSH
24691: LD_STRING ,
24693: STR
24694: PUSH
24695: LD_VAR 0 3
24699: PUSH
24700: LD_VAR 0 2
24704: ARRAY
24705: PUSH
24706: LD_INT 4
24708: ARRAY
24709: STR
24710: PUSH
24711: LD_STRING )
24713: STR
24714: PPUSH
24715: CALL_OW 559
24719: GO 24629
24721: POP
24722: POP
// end ; end ;
24723: LD_VAR 0 1
24727: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24728: LD_EXP 102
24732: IFFALSE 25419
24734: GO 24736
24736: DISABLE
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
// begin enable ;
24748: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24749: LD_ADDR_VAR 0 3
24753: PUSH
24754: LD_EXP 102
24758: PPUSH
24759: CALL 71061 0 1
24763: ST_TO_ADDR
// if not list then
24764: LD_VAR 0 3
24768: NOT
24769: IFFALSE 24773
// exit ;
24771: GO 25419
// for i := 1 to list do
24773: LD_ADDR_VAR 0 1
24777: PUSH
24778: DOUBLE
24779: LD_INT 1
24781: DEC
24782: ST_TO_ADDR
24783: LD_VAR 0 3
24787: PUSH
24788: FOR_TO
24789: IFFALSE 25417
// begin depot := list [ i ] [ 2 ] ;
24791: LD_ADDR_VAR 0 8
24795: PUSH
24796: LD_VAR 0 3
24800: PUSH
24801: LD_VAR 0 1
24805: ARRAY
24806: PUSH
24807: LD_INT 2
24809: ARRAY
24810: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24811: LD_ADDR_VAR 0 5
24815: PUSH
24816: LD_VAR 0 3
24820: PUSH
24821: LD_VAR 0 1
24825: ARRAY
24826: PUSH
24827: LD_INT 1
24829: ARRAY
24830: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24831: LD_VAR 0 8
24835: PPUSH
24836: CALL_OW 301
24840: PUSH
24841: LD_VAR 0 5
24845: PUSH
24846: LD_VAR 0 8
24850: PPUSH
24851: CALL_OW 255
24855: NONEQUAL
24856: OR
24857: IFFALSE 24886
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24859: LD_ADDR_EXP 102
24863: PUSH
24864: LD_EXP 102
24868: PPUSH
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_INT 0
24876: PPUSH
24877: CALL_OW 1
24881: ST_TO_ADDR
// exit ;
24882: POP
24883: POP
24884: GO 25419
// end ; x := list [ i ] [ 3 ] ;
24886: LD_ADDR_VAR 0 6
24890: PUSH
24891: LD_VAR 0 3
24895: PUSH
24896: LD_VAR 0 1
24900: ARRAY
24901: PUSH
24902: LD_INT 3
24904: ARRAY
24905: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24906: LD_ADDR_VAR 0 7
24910: PUSH
24911: LD_VAR 0 3
24915: PUSH
24916: LD_VAR 0 1
24920: ARRAY
24921: PUSH
24922: LD_INT 4
24924: ARRAY
24925: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24926: LD_ADDR_VAR 0 9
24930: PUSH
24931: LD_VAR 0 6
24935: PPUSH
24936: LD_VAR 0 7
24940: PPUSH
24941: LD_INT 16
24943: PPUSH
24944: CALL 69645 0 3
24948: ST_TO_ADDR
// if not cratesNearbyPoint then
24949: LD_VAR 0 9
24953: NOT
24954: IFFALSE 24960
// exit ;
24956: POP
24957: POP
24958: GO 25419
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24960: LD_ADDR_VAR 0 4
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_VAR 0 5
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 3
24979: PUSH
24980: LD_INT 60
24982: PUSH
24983: EMPTY
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 91
24992: PUSH
24993: LD_VAR 0 8
24997: PUSH
24998: LD_INT 6
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 25
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 25
25021: PUSH
25022: LD_INT 16
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: PPUSH
25040: CALL_OW 69
25044: PUSH
25045: LD_VAR 0 8
25049: PPUSH
25050: CALL_OW 313
25054: PPUSH
25055: LD_INT 3
25057: PUSH
25058: LD_INT 60
25060: PUSH
25061: EMPTY
25062: LIST
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 25
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 25
25083: PUSH
25084: LD_INT 16
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 72
25104: UNION
25105: ST_TO_ADDR
// if tmp then
25106: LD_VAR 0 4
25110: IFFALSE 25190
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25112: LD_ADDR_VAR 0 4
25116: PUSH
25117: LD_VAR 0 4
25121: PPUSH
25122: LD_INT 3
25124: PPUSH
25125: CALL 67612 0 2
25129: ST_TO_ADDR
// for j in tmp do
25130: LD_ADDR_VAR 0 2
25134: PUSH
25135: LD_VAR 0 4
25139: PUSH
25140: FOR_IN
25141: IFFALSE 25184
// begin if IsInUnit ( j ) then
25143: LD_VAR 0 2
25147: PPUSH
25148: CALL_OW 310
25152: IFFALSE 25163
// ComExit ( j ) ;
25154: LD_VAR 0 2
25158: PPUSH
25159: CALL 67695 0 1
// AddComCollect ( j , x , y ) ;
25163: LD_VAR 0 2
25167: PPUSH
25168: LD_VAR 0 6
25172: PPUSH
25173: LD_VAR 0 7
25177: PPUSH
25178: CALL_OW 177
// end ;
25182: GO 25140
25184: POP
25185: POP
// exit ;
25186: POP
25187: POP
25188: GO 25419
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25190: LD_ADDR_VAR 0 4
25194: PUSH
25195: LD_INT 22
25197: PUSH
25198: LD_VAR 0 5
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 91
25209: PUSH
25210: LD_VAR 0 8
25214: PUSH
25215: LD_INT 8
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: LD_INT 34
25228: PUSH
25229: LD_INT 12
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 34
25238: PUSH
25239: LD_INT 51
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 34
25248: PUSH
25249: LD_INT 32
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 34
25258: PUSH
25259: LD_EXP 115
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: ST_TO_ADDR
// if tmp then
25285: LD_VAR 0 4
25289: IFFALSE 25415
// begin for j in tmp do
25291: LD_ADDR_VAR 0 2
25295: PUSH
25296: LD_VAR 0 4
25300: PUSH
25301: FOR_IN
25302: IFFALSE 25413
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25304: LD_VAR 0 2
25308: PPUSH
25309: CALL_OW 262
25313: PUSH
25314: LD_INT 3
25316: EQUAL
25317: PUSH
25318: LD_VAR 0 2
25322: PPUSH
25323: CALL_OW 261
25327: PUSH
25328: LD_INT 20
25330: GREATER
25331: OR
25332: PUSH
25333: LD_VAR 0 2
25337: PPUSH
25338: CALL_OW 314
25342: NOT
25343: AND
25344: PUSH
25345: LD_VAR 0 2
25349: PPUSH
25350: CALL_OW 263
25354: PUSH
25355: LD_INT 1
25357: NONEQUAL
25358: PUSH
25359: LD_VAR 0 2
25363: PPUSH
25364: CALL_OW 311
25368: OR
25369: AND
25370: IFFALSE 25411
// begin ComCollect ( j , x , y ) ;
25372: LD_VAR 0 2
25376: PPUSH
25377: LD_VAR 0 6
25381: PPUSH
25382: LD_VAR 0 7
25386: PPUSH
25387: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25391: LD_VAR 0 2
25395: PPUSH
25396: LD_VAR 0 8
25400: PPUSH
25401: CALL_OW 172
// exit ;
25405: POP
25406: POP
25407: POP
25408: POP
25409: GO 25419
// end ;
25411: GO 25301
25413: POP
25414: POP
// end ; end ;
25415: GO 24788
25417: POP
25418: POP
// end ; end_of_file
25419: PPOPN 9
25421: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25422: LD_VAR 0 1
25426: PUSH
25427: LD_INT 200
25429: DOUBLE
25430: GREATEREQUAL
25431: IFFALSE 25439
25433: LD_INT 299
25435: DOUBLE
25436: LESSEQUAL
25437: IFTRUE 25441
25439: GO 25473
25441: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25442: LD_VAR 0 1
25446: PPUSH
25447: LD_VAR 0 2
25451: PPUSH
25452: LD_VAR 0 3
25456: PPUSH
25457: LD_VAR 0 4
25461: PPUSH
25462: LD_VAR 0 5
25466: PPUSH
25467: CALL 25963 0 5
25471: GO 25550
25473: LD_INT 300
25475: DOUBLE
25476: GREATEREQUAL
25477: IFFALSE 25485
25479: LD_INT 399
25481: DOUBLE
25482: LESSEQUAL
25483: IFTRUE 25487
25485: GO 25549
25487: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25488: LD_VAR 0 1
25492: PPUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: LD_VAR 0 3
25502: PPUSH
25503: LD_VAR 0 4
25507: PPUSH
25508: LD_VAR 0 5
25512: PPUSH
25513: LD_VAR 0 6
25517: PPUSH
25518: LD_VAR 0 7
25522: PPUSH
25523: LD_VAR 0 8
25527: PPUSH
25528: LD_VAR 0 9
25532: PPUSH
25533: LD_VAR 0 10
25537: PPUSH
25538: LD_VAR 0 11
25542: PPUSH
25543: CALL 22129 0 11
25547: GO 25550
25549: POP
// end ;
25550: PPOPN 11
25552: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25553: LD_VAR 0 1
25557: PPUSH
25558: LD_VAR 0 2
25562: PPUSH
25563: LD_VAR 0 3
25567: PPUSH
25568: LD_VAR 0 4
25572: PPUSH
25573: LD_VAR 0 5
25577: PPUSH
25578: CALL 25699 0 5
// end ; end_of_file
25582: PPOPN 5
25584: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25585: LD_INT 0
25587: PPUSH
25588: PPUSH
25589: PPUSH
25590: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25591: LD_VAR 0 1
25595: PPUSH
25596: CALL_OW 264
25600: PUSH
25601: LD_EXP 118
25605: EQUAL
25606: IFFALSE 25678
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25608: LD_INT 68
25610: PPUSH
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL_OW 255
25620: PPUSH
25621: CALL_OW 321
25625: PUSH
25626: LD_INT 2
25628: EQUAL
25629: IFFALSE 25641
// eff := 70 else
25631: LD_ADDR_VAR 0 4
25635: PUSH
25636: LD_INT 70
25638: ST_TO_ADDR
25639: GO 25649
// eff := 30 ;
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_INT 30
25648: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25649: LD_VAR 0 1
25653: PPUSH
25654: CALL_OW 250
25658: PPUSH
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 251
25668: PPUSH
25669: LD_VAR 0 4
25673: PPUSH
25674: CALL_OW 495
// end ; end ;
25678: LD_VAR 0 2
25682: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25683: LD_INT 0
25685: PPUSH
// end ;
25686: LD_VAR 0 4
25690: RET
// export function SOS_Command ( cmd ) ; begin
25691: LD_INT 0
25693: PPUSH
// end ;
25694: LD_VAR 0 2
25698: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25699: LD_INT 0
25701: PPUSH
// end ;
25702: LD_VAR 0 6
25706: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25707: LD_INT 0
25709: PPUSH
25710: PPUSH
// if not vehicle or not factory then
25711: LD_VAR 0 1
25715: NOT
25716: PUSH
25717: LD_VAR 0 2
25721: NOT
25722: OR
25723: IFFALSE 25727
// exit ;
25725: GO 25958
// if factoryWaypoints >= factory then
25727: LD_EXP 101
25731: PUSH
25732: LD_VAR 0 2
25736: GREATEREQUAL
25737: IFFALSE 25958
// if factoryWaypoints [ factory ] then
25739: LD_EXP 101
25743: PUSH
25744: LD_VAR 0 2
25748: ARRAY
25749: IFFALSE 25958
// begin if GetControl ( vehicle ) = control_manual then
25751: LD_VAR 0 1
25755: PPUSH
25756: CALL_OW 263
25760: PUSH
25761: LD_INT 1
25763: EQUAL
25764: IFFALSE 25845
// begin driver := IsDrivenBy ( vehicle ) ;
25766: LD_ADDR_VAR 0 4
25770: PUSH
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 311
25780: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25781: LD_VAR 0 4
25785: PPUSH
25786: LD_EXP 101
25790: PUSH
25791: LD_VAR 0 2
25795: ARRAY
25796: PUSH
25797: LD_INT 3
25799: ARRAY
25800: PPUSH
25801: LD_EXP 101
25805: PUSH
25806: LD_VAR 0 2
25810: ARRAY
25811: PUSH
25812: LD_INT 4
25814: ARRAY
25815: PPUSH
25816: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25820: LD_VAR 0 4
25824: PPUSH
25825: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25829: LD_VAR 0 4
25833: PPUSH
25834: LD_VAR 0 2
25838: PPUSH
25839: CALL_OW 180
// end else
25843: GO 25958
// if GetControl ( vehicle ) = control_remote then
25845: LD_VAR 0 1
25849: PPUSH
25850: CALL_OW 263
25854: PUSH
25855: LD_INT 2
25857: EQUAL
25858: IFFALSE 25919
// begin wait ( 0 0$2 ) ;
25860: LD_INT 70
25862: PPUSH
25863: CALL_OW 67
// if Connect ( vehicle ) then
25867: LD_VAR 0 1
25871: PPUSH
25872: CALL 38006 0 1
25876: IFFALSE 25917
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25878: LD_VAR 0 1
25882: PPUSH
25883: LD_EXP 101
25887: PUSH
25888: LD_VAR 0 2
25892: ARRAY
25893: PUSH
25894: LD_INT 3
25896: ARRAY
25897: PPUSH
25898: LD_EXP 101
25902: PUSH
25903: LD_VAR 0 2
25907: ARRAY
25908: PUSH
25909: LD_INT 4
25911: ARRAY
25912: PPUSH
25913: CALL_OW 171
// end else
25917: GO 25958
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25919: LD_VAR 0 1
25923: PPUSH
25924: LD_EXP 101
25928: PUSH
25929: LD_VAR 0 2
25933: ARRAY
25934: PUSH
25935: LD_INT 3
25937: ARRAY
25938: PPUSH
25939: LD_EXP 101
25943: PUSH
25944: LD_VAR 0 2
25948: ARRAY
25949: PUSH
25950: LD_INT 4
25952: ARRAY
25953: PPUSH
25954: CALL_OW 171
// end ; end ;
25958: LD_VAR 0 3
25962: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25963: LD_INT 0
25965: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25966: LD_VAR 0 1
25970: PUSH
25971: LD_INT 250
25973: EQUAL
25974: PUSH
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL_OW 264
25984: PUSH
25985: LD_EXP 121
25989: EQUAL
25990: AND
25991: IFFALSE 26012
// MinerPlaceMine ( unit , x , y ) ;
25993: LD_VAR 0 2
25997: PPUSH
25998: LD_VAR 0 4
26002: PPUSH
26003: LD_VAR 0 5
26007: PPUSH
26008: CALL 28411 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26012: LD_VAR 0 1
26016: PUSH
26017: LD_INT 251
26019: EQUAL
26020: PUSH
26021: LD_VAR 0 2
26025: PPUSH
26026: CALL_OW 264
26030: PUSH
26031: LD_EXP 121
26035: EQUAL
26036: AND
26037: IFFALSE 26058
// MinerDetonateMine ( unit , x , y ) ;
26039: LD_VAR 0 2
26043: PPUSH
26044: LD_VAR 0 4
26048: PPUSH
26049: LD_VAR 0 5
26053: PPUSH
26054: CALL 28688 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26058: LD_VAR 0 1
26062: PUSH
26063: LD_INT 252
26065: EQUAL
26066: PUSH
26067: LD_VAR 0 2
26071: PPUSH
26072: CALL_OW 264
26076: PUSH
26077: LD_EXP 121
26081: EQUAL
26082: AND
26083: IFFALSE 26104
// MinerCreateMinefield ( unit , x , y ) ;
26085: LD_VAR 0 2
26089: PPUSH
26090: LD_VAR 0 4
26094: PPUSH
26095: LD_VAR 0 5
26099: PPUSH
26100: CALL 29105 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26104: LD_VAR 0 1
26108: PUSH
26109: LD_INT 253
26111: EQUAL
26112: PUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: CALL_OW 257
26122: PUSH
26123: LD_INT 5
26125: EQUAL
26126: AND
26127: IFFALSE 26148
// ComBinocular ( unit , x , y ) ;
26129: LD_VAR 0 2
26133: PPUSH
26134: LD_VAR 0 4
26138: PPUSH
26139: LD_VAR 0 5
26143: PPUSH
26144: CALL 29476 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26148: LD_VAR 0 1
26152: PUSH
26153: LD_INT 254
26155: EQUAL
26156: PUSH
26157: LD_VAR 0 2
26161: PPUSH
26162: CALL_OW 264
26166: PUSH
26167: LD_EXP 116
26171: EQUAL
26172: AND
26173: PUSH
26174: LD_VAR 0 3
26178: PPUSH
26179: CALL_OW 263
26183: PUSH
26184: LD_INT 3
26186: EQUAL
26187: AND
26188: IFFALSE 26204
// HackDestroyVehicle ( unit , selectedUnit ) ;
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_VAR 0 3
26199: PPUSH
26200: CALL 27771 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26204: LD_VAR 0 1
26208: PUSH
26209: LD_INT 255
26211: EQUAL
26212: PUSH
26213: LD_VAR 0 2
26217: PPUSH
26218: CALL_OW 264
26222: PUSH
26223: LD_INT 14
26225: PUSH
26226: LD_INT 53
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: IN
26233: AND
26234: PUSH
26235: LD_VAR 0 4
26239: PPUSH
26240: LD_VAR 0 5
26244: PPUSH
26245: CALL_OW 488
26249: AND
26250: IFFALSE 26274
// CutTreeXYR ( unit , x , y , 12 ) ;
26252: LD_VAR 0 2
26256: PPUSH
26257: LD_VAR 0 4
26261: PPUSH
26262: LD_VAR 0 5
26266: PPUSH
26267: LD_INT 12
26269: PPUSH
26270: CALL 26337 0 4
// if cmd = 256 then
26274: LD_VAR 0 1
26278: PUSH
26279: LD_INT 256
26281: EQUAL
26282: IFFALSE 26303
// SetFactoryWaypoint ( unit , x , y ) ;
26284: LD_VAR 0 2
26288: PPUSH
26289: LD_VAR 0 4
26293: PPUSH
26294: LD_VAR 0 5
26298: PPUSH
26299: CALL 24109 0 3
// if cmd = 257 then
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 257
26310: EQUAL
26311: IFFALSE 26332
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26313: LD_VAR 0 2
26317: PPUSH
26318: LD_VAR 0 4
26322: PPUSH
26323: LD_VAR 0 5
26327: PPUSH
26328: CALL 24471 0 3
// end ;
26332: LD_VAR 0 6
26336: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26337: LD_INT 0
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
26347: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26348: LD_VAR 0 1
26352: NOT
26353: PUSH
26354: LD_VAR 0 2
26358: PPUSH
26359: LD_VAR 0 3
26363: PPUSH
26364: CALL_OW 488
26368: NOT
26369: OR
26370: PUSH
26371: LD_VAR 0 4
26375: NOT
26376: OR
26377: IFFALSE 26381
// exit ;
26379: GO 26721
// list := [ ] ;
26381: LD_ADDR_VAR 0 13
26385: PUSH
26386: EMPTY
26387: ST_TO_ADDR
// if x - r < 0 then
26388: LD_VAR 0 2
26392: PUSH
26393: LD_VAR 0 4
26397: MINUS
26398: PUSH
26399: LD_INT 0
26401: LESS
26402: IFFALSE 26414
// min_x := 0 else
26404: LD_ADDR_VAR 0 7
26408: PUSH
26409: LD_INT 0
26411: ST_TO_ADDR
26412: GO 26430
// min_x := x - r ;
26414: LD_ADDR_VAR 0 7
26418: PUSH
26419: LD_VAR 0 2
26423: PUSH
26424: LD_VAR 0 4
26428: MINUS
26429: ST_TO_ADDR
// if y - r < 0 then
26430: LD_VAR 0 3
26434: PUSH
26435: LD_VAR 0 4
26439: MINUS
26440: PUSH
26441: LD_INT 0
26443: LESS
26444: IFFALSE 26456
// min_y := 0 else
26446: LD_ADDR_VAR 0 8
26450: PUSH
26451: LD_INT 0
26453: ST_TO_ADDR
26454: GO 26472
// min_y := y - r ;
26456: LD_ADDR_VAR 0 8
26460: PUSH
26461: LD_VAR 0 3
26465: PUSH
26466: LD_VAR 0 4
26470: MINUS
26471: ST_TO_ADDR
// max_x := x + r ;
26472: LD_ADDR_VAR 0 9
26476: PUSH
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 4
26486: PLUS
26487: ST_TO_ADDR
// max_y := y + r ;
26488: LD_ADDR_VAR 0 10
26492: PUSH
26493: LD_VAR 0 3
26497: PUSH
26498: LD_VAR 0 4
26502: PLUS
26503: ST_TO_ADDR
// for _x = min_x to max_x do
26504: LD_ADDR_VAR 0 11
26508: PUSH
26509: DOUBLE
26510: LD_VAR 0 7
26514: DEC
26515: ST_TO_ADDR
26516: LD_VAR 0 9
26520: PUSH
26521: FOR_TO
26522: IFFALSE 26639
// for _y = min_y to max_y do
26524: LD_ADDR_VAR 0 12
26528: PUSH
26529: DOUBLE
26530: LD_VAR 0 8
26534: DEC
26535: ST_TO_ADDR
26536: LD_VAR 0 10
26540: PUSH
26541: FOR_TO
26542: IFFALSE 26635
// begin if not ValidHex ( _x , _y ) then
26544: LD_VAR 0 11
26548: PPUSH
26549: LD_VAR 0 12
26553: PPUSH
26554: CALL_OW 488
26558: NOT
26559: IFFALSE 26563
// continue ;
26561: GO 26541
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26563: LD_VAR 0 11
26567: PPUSH
26568: LD_VAR 0 12
26572: PPUSH
26573: CALL_OW 351
26577: PUSH
26578: LD_VAR 0 11
26582: PPUSH
26583: LD_VAR 0 12
26587: PPUSH
26588: CALL_OW 554
26592: AND
26593: IFFALSE 26633
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26595: LD_ADDR_VAR 0 13
26599: PUSH
26600: LD_VAR 0 13
26604: PPUSH
26605: LD_VAR 0 13
26609: PUSH
26610: LD_INT 1
26612: PLUS
26613: PPUSH
26614: LD_VAR 0 11
26618: PUSH
26619: LD_VAR 0 12
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PPUSH
26628: CALL_OW 2
26632: ST_TO_ADDR
// end ;
26633: GO 26541
26635: POP
26636: POP
26637: GO 26521
26639: POP
26640: POP
// if not list then
26641: LD_VAR 0 13
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26721
// for i in list do
26650: LD_ADDR_VAR 0 6
26654: PUSH
26655: LD_VAR 0 13
26659: PUSH
26660: FOR_IN
26661: IFFALSE 26719
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26663: LD_VAR 0 1
26667: PPUSH
26668: LD_STRING M
26670: PUSH
26671: LD_VAR 0 6
26675: PUSH
26676: LD_INT 1
26678: ARRAY
26679: PUSH
26680: LD_VAR 0 6
26684: PUSH
26685: LD_INT 2
26687: ARRAY
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: PPUSH
26713: CALL_OW 447
26717: GO 26660
26719: POP
26720: POP
// end ;
26721: LD_VAR 0 5
26725: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26726: LD_EXP 104
26730: NOT
26731: IFFALSE 26781
26733: GO 26735
26735: DISABLE
// begin initHack := true ;
26736: LD_ADDR_EXP 104
26740: PUSH
26741: LD_INT 1
26743: ST_TO_ADDR
// hackTanks := [ ] ;
26744: LD_ADDR_EXP 105
26748: PUSH
26749: EMPTY
26750: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26751: LD_ADDR_EXP 106
26755: PUSH
26756: EMPTY
26757: ST_TO_ADDR
// hackLimit := 3 ;
26758: LD_ADDR_EXP 107
26762: PUSH
26763: LD_INT 3
26765: ST_TO_ADDR
// hackDist := 12 ;
26766: LD_ADDR_EXP 108
26770: PUSH
26771: LD_INT 12
26773: ST_TO_ADDR
// hackCounter := [ ] ;
26774: LD_ADDR_EXP 109
26778: PUSH
26779: EMPTY
26780: ST_TO_ADDR
// end ;
26781: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26782: LD_EXP 104
26786: PUSH
26787: LD_INT 34
26789: PUSH
26790: LD_EXP 116
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 69
26803: AND
26804: IFFALSE 27059
26806: GO 26808
26808: DISABLE
26809: LD_INT 0
26811: PPUSH
26812: PPUSH
// begin enable ;
26813: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26814: LD_ADDR_VAR 0 1
26818: PUSH
26819: LD_INT 34
26821: PUSH
26822: LD_EXP 116
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: PUSH
26836: FOR_IN
26837: IFFALSE 27057
// begin if not i in hackTanks then
26839: LD_VAR 0 1
26843: PUSH
26844: LD_EXP 105
26848: IN
26849: NOT
26850: IFFALSE 26933
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26852: LD_ADDR_EXP 105
26856: PUSH
26857: LD_EXP 105
26861: PPUSH
26862: LD_EXP 105
26866: PUSH
26867: LD_INT 1
26869: PLUS
26870: PPUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 1
26880: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26881: LD_ADDR_EXP 106
26885: PUSH
26886: LD_EXP 106
26890: PPUSH
26891: LD_EXP 106
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: PPUSH
26900: EMPTY
26901: PPUSH
26902: CALL_OW 1
26906: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26907: LD_ADDR_EXP 109
26911: PUSH
26912: LD_EXP 109
26916: PPUSH
26917: LD_EXP 109
26921: PUSH
26922: LD_INT 1
26924: PLUS
26925: PPUSH
26926: EMPTY
26927: PPUSH
26928: CALL_OW 1
26932: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL_OW 302
26942: NOT
26943: IFFALSE 26956
// begin HackUnlinkAll ( i ) ;
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL 27062 0 1
// continue ;
26954: GO 26836
// end ; HackCheckCapturedStatus ( i ) ;
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL 27505 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26965: LD_ADDR_VAR 0 2
26969: PUSH
26970: LD_INT 81
26972: PUSH
26973: LD_VAR 0 1
26977: PPUSH
26978: CALL_OW 255
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 33
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 91
26999: PUSH
27000: LD_VAR 0 1
27004: PUSH
27005: LD_EXP 108
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 50
27017: PUSH
27018: EMPTY
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: PPUSH
27027: CALL_OW 69
27031: ST_TO_ADDR
// if not tmp then
27032: LD_VAR 0 2
27036: NOT
27037: IFFALSE 27041
// continue ;
27039: GO 26836
// HackLink ( i , tmp ) ;
27041: LD_VAR 0 1
27045: PPUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: CALL 27198 0 2
// end ;
27055: GO 26836
27057: POP
27058: POP
// end ;
27059: PPOPN 2
27061: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
27066: PPUSH
// if not hack in hackTanks then
27067: LD_VAR 0 1
27071: PUSH
27072: LD_EXP 105
27076: IN
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27193
// index := GetElementIndex ( hackTanks , hack ) ;
27082: LD_ADDR_VAR 0 4
27086: PUSH
27087: LD_EXP 105
27091: PPUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL 34820 0 2
27101: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27102: LD_EXP 106
27106: PUSH
27107: LD_VAR 0 4
27111: ARRAY
27112: IFFALSE 27193
// begin for i in hackTanksCaptured [ index ] do
27114: LD_ADDR_VAR 0 3
27118: PUSH
27119: LD_EXP 106
27123: PUSH
27124: LD_VAR 0 4
27128: ARRAY
27129: PUSH
27130: FOR_IN
27131: IFFALSE 27157
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27133: LD_VAR 0 3
27137: PUSH
27138: LD_INT 1
27140: ARRAY
27141: PPUSH
27142: LD_VAR 0 3
27146: PUSH
27147: LD_INT 2
27149: ARRAY
27150: PPUSH
27151: CALL_OW 235
27155: GO 27130
27157: POP
27158: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27159: LD_ADDR_EXP 106
27163: PUSH
27164: LD_EXP 106
27168: PPUSH
27169: LD_VAR 0 4
27173: PPUSH
27174: EMPTY
27175: PPUSH
27176: CALL_OW 1
27180: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27181: LD_VAR 0 1
27185: PPUSH
27186: LD_INT 0
27188: PPUSH
27189: CALL_OW 505
// end ; end ;
27193: LD_VAR 0 2
27197: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27198: LD_INT 0
27200: PPUSH
27201: PPUSH
27202: PPUSH
// if not hack in hackTanks or not vehicles then
27203: LD_VAR 0 1
27207: PUSH
27208: LD_EXP 105
27212: IN
27213: NOT
27214: PUSH
27215: LD_VAR 0 2
27219: NOT
27220: OR
27221: IFFALSE 27225
// exit ;
27223: GO 27500
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27225: LD_ADDR_VAR 0 2
27229: PUSH
27230: LD_VAR 0 1
27234: PPUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: LD_INT 1
27242: PPUSH
27243: LD_INT 1
27245: PPUSH
27246: CALL 35470 0 4
27250: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27251: LD_ADDR_VAR 0 5
27255: PUSH
27256: LD_EXP 105
27260: PPUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL 34820 0 2
27270: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27271: LD_EXP 106
27275: PUSH
27276: LD_VAR 0 5
27280: ARRAY
27281: PUSH
27282: LD_EXP 107
27286: LESS
27287: IFFALSE 27476
// begin for i := 1 to vehicles do
27289: LD_ADDR_VAR 0 4
27293: PUSH
27294: DOUBLE
27295: LD_INT 1
27297: DEC
27298: ST_TO_ADDR
27299: LD_VAR 0 2
27303: PUSH
27304: FOR_TO
27305: IFFALSE 27474
// begin if hackTanksCaptured [ index ] = hackLimit then
27307: LD_EXP 106
27311: PUSH
27312: LD_VAR 0 5
27316: ARRAY
27317: PUSH
27318: LD_EXP 107
27322: EQUAL
27323: IFFALSE 27327
// break ;
27325: GO 27474
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27327: LD_ADDR_EXP 109
27331: PUSH
27332: LD_EXP 109
27336: PPUSH
27337: LD_VAR 0 5
27341: PPUSH
27342: LD_EXP 109
27346: PUSH
27347: LD_VAR 0 5
27351: ARRAY
27352: PUSH
27353: LD_INT 1
27355: PLUS
27356: PPUSH
27357: CALL_OW 1
27361: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27362: LD_ADDR_EXP 106
27366: PUSH
27367: LD_EXP 106
27371: PPUSH
27372: LD_VAR 0 5
27376: PUSH
27377: LD_EXP 106
27381: PUSH
27382: LD_VAR 0 5
27386: ARRAY
27387: PUSH
27388: LD_INT 1
27390: PLUS
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PPUSH
27396: LD_VAR 0 2
27400: PUSH
27401: LD_VAR 0 4
27405: ARRAY
27406: PUSH
27407: LD_VAR 0 2
27411: PUSH
27412: LD_VAR 0 4
27416: ARRAY
27417: PPUSH
27418: CALL_OW 255
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PPUSH
27427: CALL 35035 0 3
27431: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27432: LD_VAR 0 2
27436: PUSH
27437: LD_VAR 0 4
27441: ARRAY
27442: PPUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 255
27452: PPUSH
27453: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27457: LD_VAR 0 2
27461: PUSH
27462: LD_VAR 0 4
27466: ARRAY
27467: PPUSH
27468: CALL_OW 141
// end ;
27472: GO 27304
27474: POP
27475: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27476: LD_VAR 0 1
27480: PPUSH
27481: LD_EXP 106
27485: PUSH
27486: LD_VAR 0 5
27490: ARRAY
27491: PUSH
27492: LD_INT 0
27494: PLUS
27495: PPUSH
27496: CALL_OW 505
// end ;
27500: LD_VAR 0 3
27504: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27505: LD_INT 0
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
// if not hack in hackTanks then
27511: LD_VAR 0 1
27515: PUSH
27516: LD_EXP 105
27520: IN
27521: NOT
27522: IFFALSE 27526
// exit ;
27524: GO 27766
// index := GetElementIndex ( hackTanks , hack ) ;
27526: LD_ADDR_VAR 0 4
27530: PUSH
27531: LD_EXP 105
27535: PPUSH
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL 34820 0 2
27545: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27546: LD_ADDR_VAR 0 3
27550: PUSH
27551: DOUBLE
27552: LD_EXP 106
27556: PUSH
27557: LD_VAR 0 4
27561: ARRAY
27562: INC
27563: ST_TO_ADDR
27564: LD_INT 1
27566: PUSH
27567: FOR_DOWNTO
27568: IFFALSE 27740
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27570: LD_ADDR_VAR 0 5
27574: PUSH
27575: LD_EXP 106
27579: PUSH
27580: LD_VAR 0 4
27584: ARRAY
27585: PUSH
27586: LD_VAR 0 3
27590: ARRAY
27591: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27592: LD_VAR 0 5
27596: PUSH
27597: LD_INT 1
27599: ARRAY
27600: PPUSH
27601: CALL_OW 302
27605: NOT
27606: PUSH
27607: LD_VAR 0 5
27611: PUSH
27612: LD_INT 1
27614: ARRAY
27615: PPUSH
27616: CALL_OW 255
27620: PUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: CALL_OW 255
27630: NONEQUAL
27631: OR
27632: IFFALSE 27738
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27634: LD_VAR 0 5
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PPUSH
27643: CALL_OW 305
27647: PUSH
27648: LD_VAR 0 5
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: PPUSH
27657: CALL_OW 255
27661: PUSH
27662: LD_VAR 0 1
27666: PPUSH
27667: CALL_OW 255
27671: EQUAL
27672: AND
27673: IFFALSE 27697
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27675: LD_VAR 0 5
27679: PUSH
27680: LD_INT 1
27682: ARRAY
27683: PPUSH
27684: LD_VAR 0 5
27688: PUSH
27689: LD_INT 2
27691: ARRAY
27692: PPUSH
27693: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27697: LD_ADDR_EXP 106
27701: PUSH
27702: LD_EXP 106
27706: PPUSH
27707: LD_VAR 0 4
27711: PPUSH
27712: LD_EXP 106
27716: PUSH
27717: LD_VAR 0 4
27721: ARRAY
27722: PPUSH
27723: LD_VAR 0 3
27727: PPUSH
27728: CALL_OW 3
27732: PPUSH
27733: CALL_OW 1
27737: ST_TO_ADDR
// end ; end ;
27738: GO 27567
27740: POP
27741: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27742: LD_VAR 0 1
27746: PPUSH
27747: LD_EXP 106
27751: PUSH
27752: LD_VAR 0 4
27756: ARRAY
27757: PUSH
27758: LD_INT 0
27760: PLUS
27761: PPUSH
27762: CALL_OW 505
// end ;
27766: LD_VAR 0 2
27770: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27771: LD_INT 0
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
// if not hack in hackTanks then
27777: LD_VAR 0 1
27781: PUSH
27782: LD_EXP 105
27786: IN
27787: NOT
27788: IFFALSE 27792
// exit ;
27790: GO 27877
// index := GetElementIndex ( hackTanks , hack ) ;
27792: LD_ADDR_VAR 0 5
27796: PUSH
27797: LD_EXP 105
27801: PPUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL 34820 0 2
27811: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: DOUBLE
27818: LD_INT 1
27820: DEC
27821: ST_TO_ADDR
27822: LD_EXP 106
27826: PUSH
27827: LD_VAR 0 5
27831: ARRAY
27832: PUSH
27833: FOR_TO
27834: IFFALSE 27875
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27836: LD_EXP 106
27840: PUSH
27841: LD_VAR 0 5
27845: ARRAY
27846: PUSH
27847: LD_VAR 0 4
27851: ARRAY
27852: PUSH
27853: LD_INT 1
27855: ARRAY
27856: PUSH
27857: LD_VAR 0 2
27861: EQUAL
27862: IFFALSE 27873
// KillUnit ( vehicle ) ;
27864: LD_VAR 0 2
27868: PPUSH
27869: CALL_OW 66
27873: GO 27833
27875: POP
27876: POP
// end ;
27877: LD_VAR 0 3
27881: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27882: LD_EXP 110
27886: NOT
27887: IFFALSE 27922
27889: GO 27891
27891: DISABLE
// begin initMiner := true ;
27892: LD_ADDR_EXP 110
27896: PUSH
27897: LD_INT 1
27899: ST_TO_ADDR
// minersList := [ ] ;
27900: LD_ADDR_EXP 111
27904: PUSH
27905: EMPTY
27906: ST_TO_ADDR
// minerMinesList := [ ] ;
27907: LD_ADDR_EXP 112
27911: PUSH
27912: EMPTY
27913: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27914: LD_ADDR_EXP 113
27918: PUSH
27919: LD_INT 5
27921: ST_TO_ADDR
// end ;
27922: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27923: LD_EXP 110
27927: PUSH
27928: LD_INT 34
27930: PUSH
27931: LD_EXP 121
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PPUSH
27940: CALL_OW 69
27944: AND
27945: IFFALSE 28408
27947: GO 27949
27949: DISABLE
27950: LD_INT 0
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
// begin enable ;
27956: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27957: LD_ADDR_VAR 0 1
27961: PUSH
27962: LD_INT 34
27964: PUSH
27965: LD_EXP 121
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 69
27978: PUSH
27979: FOR_IN
27980: IFFALSE 28052
// begin if not i in minersList then
27982: LD_VAR 0 1
27986: PUSH
27987: LD_EXP 111
27991: IN
27992: NOT
27993: IFFALSE 28050
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27995: LD_ADDR_EXP 111
27999: PUSH
28000: LD_EXP 111
28004: PPUSH
28005: LD_EXP 111
28009: PUSH
28010: LD_INT 1
28012: PLUS
28013: PPUSH
28014: LD_VAR 0 1
28018: PPUSH
28019: CALL_OW 1
28023: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28024: LD_ADDR_EXP 112
28028: PUSH
28029: LD_EXP 112
28033: PPUSH
28034: LD_EXP 112
28038: PUSH
28039: LD_INT 1
28041: PLUS
28042: PPUSH
28043: EMPTY
28044: PPUSH
28045: CALL_OW 1
28049: ST_TO_ADDR
// end end ;
28050: GO 27979
28052: POP
28053: POP
// for i := minerMinesList downto 1 do
28054: LD_ADDR_VAR 0 1
28058: PUSH
28059: DOUBLE
28060: LD_EXP 112
28064: INC
28065: ST_TO_ADDR
28066: LD_INT 1
28068: PUSH
28069: FOR_DOWNTO
28070: IFFALSE 28406
// begin if IsLive ( minersList [ i ] ) then
28072: LD_EXP 111
28076: PUSH
28077: LD_VAR 0 1
28081: ARRAY
28082: PPUSH
28083: CALL_OW 300
28087: IFFALSE 28115
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28089: LD_EXP 111
28093: PUSH
28094: LD_VAR 0 1
28098: ARRAY
28099: PPUSH
28100: LD_EXP 112
28104: PUSH
28105: LD_VAR 0 1
28109: ARRAY
28110: PPUSH
28111: CALL_OW 505
// if not minerMinesList [ i ] then
28115: LD_EXP 112
28119: PUSH
28120: LD_VAR 0 1
28124: ARRAY
28125: NOT
28126: IFFALSE 28130
// continue ;
28128: GO 28069
// for j := minerMinesList [ i ] downto 1 do
28130: LD_ADDR_VAR 0 2
28134: PUSH
28135: DOUBLE
28136: LD_EXP 112
28140: PUSH
28141: LD_VAR 0 1
28145: ARRAY
28146: INC
28147: ST_TO_ADDR
28148: LD_INT 1
28150: PUSH
28151: FOR_DOWNTO
28152: IFFALSE 28402
// begin side := GetSide ( minersList [ i ] ) ;
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: LD_EXP 111
28163: PUSH
28164: LD_VAR 0 1
28168: ARRAY
28169: PPUSH
28170: CALL_OW 255
28174: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28175: LD_ADDR_VAR 0 4
28179: PUSH
28180: LD_EXP 112
28184: PUSH
28185: LD_VAR 0 1
28189: ARRAY
28190: PUSH
28191: LD_VAR 0 2
28195: ARRAY
28196: PUSH
28197: LD_INT 1
28199: ARRAY
28200: PPUSH
28201: LD_EXP 112
28205: PUSH
28206: LD_VAR 0 1
28210: ARRAY
28211: PUSH
28212: LD_VAR 0 2
28216: ARRAY
28217: PUSH
28218: LD_INT 2
28220: ARRAY
28221: PPUSH
28222: CALL_OW 428
28226: ST_TO_ADDR
// if not tmp then
28227: LD_VAR 0 4
28231: NOT
28232: IFFALSE 28236
// continue ;
28234: GO 28151
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28236: LD_VAR 0 4
28240: PUSH
28241: LD_INT 81
28243: PUSH
28244: LD_VAR 0 3
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PPUSH
28253: CALL_OW 69
28257: IN
28258: PUSH
28259: LD_EXP 112
28263: PUSH
28264: LD_VAR 0 1
28268: ARRAY
28269: PUSH
28270: LD_VAR 0 2
28274: ARRAY
28275: PUSH
28276: LD_INT 1
28278: ARRAY
28279: PPUSH
28280: LD_EXP 112
28284: PUSH
28285: LD_VAR 0 1
28289: ARRAY
28290: PUSH
28291: LD_VAR 0 2
28295: ARRAY
28296: PUSH
28297: LD_INT 2
28299: ARRAY
28300: PPUSH
28301: CALL_OW 458
28305: AND
28306: IFFALSE 28400
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28308: LD_EXP 112
28312: PUSH
28313: LD_VAR 0 1
28317: ARRAY
28318: PUSH
28319: LD_VAR 0 2
28323: ARRAY
28324: PUSH
28325: LD_INT 1
28327: ARRAY
28328: PPUSH
28329: LD_EXP 112
28333: PUSH
28334: LD_VAR 0 1
28338: ARRAY
28339: PUSH
28340: LD_VAR 0 2
28344: ARRAY
28345: PUSH
28346: LD_INT 2
28348: ARRAY
28349: PPUSH
28350: LD_VAR 0 3
28354: PPUSH
28355: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28359: LD_ADDR_EXP 112
28363: PUSH
28364: LD_EXP 112
28368: PPUSH
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_EXP 112
28378: PUSH
28379: LD_VAR 0 1
28383: ARRAY
28384: PPUSH
28385: LD_VAR 0 2
28389: PPUSH
28390: CALL_OW 3
28394: PPUSH
28395: CALL_OW 1
28399: ST_TO_ADDR
// end ; end ;
28400: GO 28151
28402: POP
28403: POP
// end ;
28404: GO 28069
28406: POP
28407: POP
// end ;
28408: PPOPN 4
28410: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28411: LD_INT 0
28413: PPUSH
28414: PPUSH
// result := false ;
28415: LD_ADDR_VAR 0 4
28419: PUSH
28420: LD_INT 0
28422: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28423: LD_VAR 0 1
28427: PPUSH
28428: CALL_OW 264
28432: PUSH
28433: LD_EXP 121
28437: EQUAL
28438: NOT
28439: IFFALSE 28443
// exit ;
28441: GO 28683
// index := GetElementIndex ( minersList , unit ) ;
28443: LD_ADDR_VAR 0 5
28447: PUSH
28448: LD_EXP 111
28452: PPUSH
28453: LD_VAR 0 1
28457: PPUSH
28458: CALL 34820 0 2
28462: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28463: LD_EXP 112
28467: PUSH
28468: LD_VAR 0 5
28472: ARRAY
28473: PUSH
28474: LD_EXP 113
28478: GREATEREQUAL
28479: IFFALSE 28483
// exit ;
28481: GO 28683
// ComMoveXY ( unit , x , y ) ;
28483: LD_VAR 0 1
28487: PPUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: LD_VAR 0 3
28497: PPUSH
28498: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28502: LD_INT 35
28504: PPUSH
28505: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_VAR 0 3
28523: PPUSH
28524: CALL 66106 0 3
28528: NOT
28529: PUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL_OW 314
28539: AND
28540: IFFALSE 28544
// exit ;
28542: GO 28683
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28544: LD_VAR 0 2
28548: PPUSH
28549: LD_VAR 0 3
28553: PPUSH
28554: CALL_OW 428
28558: PUSH
28559: LD_VAR 0 1
28563: EQUAL
28564: PUSH
28565: LD_VAR 0 1
28569: PPUSH
28570: CALL_OW 314
28574: NOT
28575: AND
28576: IFFALSE 28502
// PlaySoundXY ( x , y , PlantMine ) ;
28578: LD_VAR 0 2
28582: PPUSH
28583: LD_VAR 0 3
28587: PPUSH
28588: LD_STRING PlantMine
28590: PPUSH
28591: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28595: LD_VAR 0 2
28599: PPUSH
28600: LD_VAR 0 3
28604: PPUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 255
28614: PPUSH
28615: LD_INT 0
28617: PPUSH
28618: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28622: LD_ADDR_EXP 112
28626: PUSH
28627: LD_EXP 112
28631: PPUSH
28632: LD_VAR 0 5
28636: PUSH
28637: LD_EXP 112
28641: PUSH
28642: LD_VAR 0 5
28646: ARRAY
28647: PUSH
28648: LD_INT 1
28650: PLUS
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PPUSH
28656: LD_VAR 0 2
28660: PUSH
28661: LD_VAR 0 3
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PPUSH
28670: CALL 35035 0 3
28674: ST_TO_ADDR
// result := true ;
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: LD_INT 1
28682: ST_TO_ADDR
// end ;
28683: LD_VAR 0 4
28687: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28688: LD_INT 0
28690: PPUSH
28691: PPUSH
28692: PPUSH
// if not unit in minersList then
28693: LD_VAR 0 1
28697: PUSH
28698: LD_EXP 111
28702: IN
28703: NOT
28704: IFFALSE 28708
// exit ;
28706: GO 29100
// index := GetElementIndex ( minersList , unit ) ;
28708: LD_ADDR_VAR 0 6
28712: PUSH
28713: LD_EXP 111
28717: PPUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL 34820 0 2
28727: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28728: LD_ADDR_VAR 0 5
28732: PUSH
28733: DOUBLE
28734: LD_EXP 112
28738: PUSH
28739: LD_VAR 0 6
28743: ARRAY
28744: INC
28745: ST_TO_ADDR
28746: LD_INT 1
28748: PUSH
28749: FOR_DOWNTO
28750: IFFALSE 28911
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28752: LD_EXP 112
28756: PUSH
28757: LD_VAR 0 6
28761: ARRAY
28762: PUSH
28763: LD_VAR 0 5
28767: ARRAY
28768: PUSH
28769: LD_INT 1
28771: ARRAY
28772: PUSH
28773: LD_VAR 0 2
28777: EQUAL
28778: PUSH
28779: LD_EXP 112
28783: PUSH
28784: LD_VAR 0 6
28788: ARRAY
28789: PUSH
28790: LD_VAR 0 5
28794: ARRAY
28795: PUSH
28796: LD_INT 2
28798: ARRAY
28799: PUSH
28800: LD_VAR 0 3
28804: EQUAL
28805: AND
28806: IFFALSE 28909
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28808: LD_EXP 112
28812: PUSH
28813: LD_VAR 0 6
28817: ARRAY
28818: PUSH
28819: LD_VAR 0 5
28823: ARRAY
28824: PUSH
28825: LD_INT 1
28827: ARRAY
28828: PPUSH
28829: LD_EXP 112
28833: PUSH
28834: LD_VAR 0 6
28838: ARRAY
28839: PUSH
28840: LD_VAR 0 5
28844: ARRAY
28845: PUSH
28846: LD_INT 2
28848: ARRAY
28849: PPUSH
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 255
28859: PPUSH
28860: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28864: LD_ADDR_EXP 112
28868: PUSH
28869: LD_EXP 112
28873: PPUSH
28874: LD_VAR 0 6
28878: PPUSH
28879: LD_EXP 112
28883: PUSH
28884: LD_VAR 0 6
28888: ARRAY
28889: PPUSH
28890: LD_VAR 0 5
28894: PPUSH
28895: CALL_OW 3
28899: PPUSH
28900: CALL_OW 1
28904: ST_TO_ADDR
// exit ;
28905: POP
28906: POP
28907: GO 29100
// end ; end ;
28909: GO 28749
28911: POP
28912: POP
// for i := minerMinesList [ index ] downto 1 do
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: DOUBLE
28919: LD_EXP 112
28923: PUSH
28924: LD_VAR 0 6
28928: ARRAY
28929: INC
28930: ST_TO_ADDR
28931: LD_INT 1
28933: PUSH
28934: FOR_DOWNTO
28935: IFFALSE 29098
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28937: LD_EXP 112
28941: PUSH
28942: LD_VAR 0 6
28946: ARRAY
28947: PUSH
28948: LD_VAR 0 5
28952: ARRAY
28953: PUSH
28954: LD_INT 1
28956: ARRAY
28957: PPUSH
28958: LD_EXP 112
28962: PUSH
28963: LD_VAR 0 6
28967: ARRAY
28968: PUSH
28969: LD_VAR 0 5
28973: ARRAY
28974: PUSH
28975: LD_INT 2
28977: ARRAY
28978: PPUSH
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 3
28988: PPUSH
28989: CALL_OW 298
28993: PUSH
28994: LD_INT 6
28996: LESS
28997: IFFALSE 29096
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28999: LD_EXP 112
29003: PUSH
29004: LD_VAR 0 6
29008: ARRAY
29009: PUSH
29010: LD_VAR 0 5
29014: ARRAY
29015: PUSH
29016: LD_INT 1
29018: ARRAY
29019: PPUSH
29020: LD_EXP 112
29024: PUSH
29025: LD_VAR 0 6
29029: ARRAY
29030: PUSH
29031: LD_VAR 0 5
29035: ARRAY
29036: PUSH
29037: LD_INT 2
29039: ARRAY
29040: PPUSH
29041: LD_VAR 0 1
29045: PPUSH
29046: CALL_OW 255
29050: PPUSH
29051: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29055: LD_ADDR_EXP 112
29059: PUSH
29060: LD_EXP 112
29064: PPUSH
29065: LD_VAR 0 6
29069: PPUSH
29070: LD_EXP 112
29074: PUSH
29075: LD_VAR 0 6
29079: ARRAY
29080: PPUSH
29081: LD_VAR 0 5
29085: PPUSH
29086: CALL_OW 3
29090: PPUSH
29091: CALL_OW 1
29095: ST_TO_ADDR
// end ; end ;
29096: GO 28934
29098: POP
29099: POP
// end ;
29100: LD_VAR 0 4
29104: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
29109: PPUSH
29110: PPUSH
29111: PPUSH
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29116: LD_VAR 0 1
29120: PPUSH
29121: CALL_OW 264
29125: PUSH
29126: LD_EXP 121
29130: EQUAL
29131: NOT
29132: PUSH
29133: LD_VAR 0 1
29137: PUSH
29138: LD_EXP 111
29142: IN
29143: NOT
29144: OR
29145: IFFALSE 29149
// exit ;
29147: GO 29471
// index := GetElementIndex ( minersList , unit ) ;
29149: LD_ADDR_VAR 0 6
29153: PUSH
29154: LD_EXP 111
29158: PPUSH
29159: LD_VAR 0 1
29163: PPUSH
29164: CALL 34820 0 2
29168: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29169: LD_ADDR_VAR 0 8
29173: PUSH
29174: LD_EXP 113
29178: PUSH
29179: LD_EXP 112
29183: PUSH
29184: LD_VAR 0 6
29188: ARRAY
29189: MINUS
29190: ST_TO_ADDR
// if not minesFreeAmount then
29191: LD_VAR 0 8
29195: NOT
29196: IFFALSE 29200
// exit ;
29198: GO 29471
// tmp := [ ] ;
29200: LD_ADDR_VAR 0 7
29204: PUSH
29205: EMPTY
29206: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29207: LD_ADDR_VAR 0 5
29211: PUSH
29212: DOUBLE
29213: LD_INT 1
29215: DEC
29216: ST_TO_ADDR
29217: LD_VAR 0 8
29221: PUSH
29222: FOR_TO
29223: IFFALSE 29418
// begin _d := rand ( 0 , 5 ) ;
29225: LD_ADDR_VAR 0 11
29229: PUSH
29230: LD_INT 0
29232: PPUSH
29233: LD_INT 5
29235: PPUSH
29236: CALL_OW 12
29240: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29241: LD_ADDR_VAR 0 12
29245: PUSH
29246: LD_INT 2
29248: PPUSH
29249: LD_INT 6
29251: PPUSH
29252: CALL_OW 12
29256: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29257: LD_ADDR_VAR 0 9
29261: PUSH
29262: LD_VAR 0 2
29266: PPUSH
29267: LD_VAR 0 11
29271: PPUSH
29272: LD_VAR 0 12
29276: PPUSH
29277: CALL_OW 272
29281: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29282: LD_ADDR_VAR 0 10
29286: PUSH
29287: LD_VAR 0 3
29291: PPUSH
29292: LD_VAR 0 11
29296: PPUSH
29297: LD_VAR 0 12
29301: PPUSH
29302: CALL_OW 273
29306: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29307: LD_VAR 0 9
29311: PPUSH
29312: LD_VAR 0 10
29316: PPUSH
29317: CALL_OW 488
29321: PUSH
29322: LD_VAR 0 9
29326: PUSH
29327: LD_VAR 0 10
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_VAR 0 7
29340: IN
29341: NOT
29342: AND
29343: PUSH
29344: LD_VAR 0 9
29348: PPUSH
29349: LD_VAR 0 10
29353: PPUSH
29354: CALL_OW 458
29358: NOT
29359: AND
29360: IFFALSE 29402
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29362: LD_ADDR_VAR 0 7
29366: PUSH
29367: LD_VAR 0 7
29371: PPUSH
29372: LD_VAR 0 7
29376: PUSH
29377: LD_INT 1
29379: PLUS
29380: PPUSH
29381: LD_VAR 0 9
29385: PUSH
29386: LD_VAR 0 10
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PPUSH
29395: CALL_OW 1
29399: ST_TO_ADDR
29400: GO 29416
// i := i - 1 ;
29402: LD_ADDR_VAR 0 5
29406: PUSH
29407: LD_VAR 0 5
29411: PUSH
29412: LD_INT 1
29414: MINUS
29415: ST_TO_ADDR
// end ;
29416: GO 29222
29418: POP
29419: POP
// for i in tmp do
29420: LD_ADDR_VAR 0 5
29424: PUSH
29425: LD_VAR 0 7
29429: PUSH
29430: FOR_IN
29431: IFFALSE 29469
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29433: LD_VAR 0 1
29437: PPUSH
29438: LD_VAR 0 5
29442: PUSH
29443: LD_INT 1
29445: ARRAY
29446: PPUSH
29447: LD_VAR 0 5
29451: PUSH
29452: LD_INT 2
29454: ARRAY
29455: PPUSH
29456: CALL 28411 0 3
29460: NOT
29461: IFFALSE 29467
// exit ;
29463: POP
29464: POP
29465: GO 29471
29467: GO 29430
29469: POP
29470: POP
// end ;
29471: LD_VAR 0 4
29475: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29476: LD_INT 0
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
// if not GetClass ( unit ) = class_sniper then
29485: LD_VAR 0 1
29489: PPUSH
29490: CALL_OW 257
29494: PUSH
29495: LD_INT 5
29497: EQUAL
29498: NOT
29499: IFFALSE 29503
// exit ;
29501: GO 29891
// dist := 8 ;
29503: LD_ADDR_VAR 0 5
29507: PUSH
29508: LD_INT 8
29510: ST_TO_ADDR
// viewRange := 12 ;
29511: LD_ADDR_VAR 0 7
29515: PUSH
29516: LD_INT 12
29518: ST_TO_ADDR
// side := GetSide ( unit ) ;
29519: LD_ADDR_VAR 0 6
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 255
29533: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29534: LD_INT 61
29536: PPUSH
29537: LD_VAR 0 6
29541: PPUSH
29542: CALL_OW 321
29546: PUSH
29547: LD_INT 2
29549: EQUAL
29550: IFFALSE 29560
// viewRange := 16 ;
29552: LD_ADDR_VAR 0 7
29556: PUSH
29557: LD_INT 16
29559: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_VAR 0 2
29569: PPUSH
29570: LD_VAR 0 3
29574: PPUSH
29575: CALL_OW 297
29579: PUSH
29580: LD_VAR 0 5
29584: GREATER
29585: IFFALSE 29664
// begin ComMoveXY ( unit , x , y ) ;
29587: LD_VAR 0 1
29591: PPUSH
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29606: LD_INT 35
29608: PPUSH
29609: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29613: LD_VAR 0 1
29617: PPUSH
29618: LD_VAR 0 2
29622: PPUSH
29623: LD_VAR 0 3
29627: PPUSH
29628: CALL 66106 0 3
29632: NOT
29633: IFFALSE 29637
// exit ;
29635: GO 29891
// until GetDistUnitXY ( unit , x , y ) < dist ;
29637: LD_VAR 0 1
29641: PPUSH
29642: LD_VAR 0 2
29646: PPUSH
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 297
29656: PUSH
29657: LD_VAR 0 5
29661: LESS
29662: IFFALSE 29606
// end ; ComTurnXY ( unit , x , y ) ;
29664: LD_VAR 0 1
29668: PPUSH
29669: LD_VAR 0 2
29673: PPUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 118
// wait ( 5 ) ;
29683: LD_INT 5
29685: PPUSH
29686: CALL_OW 67
// _d := GetDir ( unit ) ;
29690: LD_ADDR_VAR 0 10
29694: PUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 254
29704: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29705: LD_ADDR_VAR 0 8
29709: PUSH
29710: LD_VAR 0 1
29714: PPUSH
29715: CALL_OW 250
29719: PPUSH
29720: LD_VAR 0 10
29724: PPUSH
29725: LD_VAR 0 5
29729: PPUSH
29730: CALL_OW 272
29734: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29735: LD_ADDR_VAR 0 9
29739: PUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 251
29749: PPUSH
29750: LD_VAR 0 10
29754: PPUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: CALL_OW 273
29764: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29765: LD_VAR 0 8
29769: PPUSH
29770: LD_VAR 0 9
29774: PPUSH
29775: CALL_OW 488
29779: NOT
29780: IFFALSE 29784
// exit ;
29782: GO 29891
// ComAnimCustom ( unit , 1 ) ;
29784: LD_VAR 0 1
29788: PPUSH
29789: LD_INT 1
29791: PPUSH
29792: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29796: LD_VAR 0 8
29800: PPUSH
29801: LD_VAR 0 9
29805: PPUSH
29806: LD_VAR 0 6
29810: PPUSH
29811: LD_VAR 0 7
29815: PPUSH
29816: CALL_OW 330
// repeat wait ( 1 ) ;
29820: LD_INT 1
29822: PPUSH
29823: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 316
29836: PUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 314
29846: OR
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 302
29857: NOT
29858: OR
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: CALL_OW 301
29869: OR
29870: IFFALSE 29820
// RemoveSeeing ( _x , _y , side ) ;
29872: LD_VAR 0 8
29876: PPUSH
29877: LD_VAR 0 9
29881: PPUSH
29882: LD_VAR 0 6
29886: PPUSH
29887: CALL_OW 331
// end ; end_of_file
29891: LD_VAR 0 4
29895: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29896: LD_INT 0
29898: PPUSH
29899: PPUSH
// if exist_mode then
29900: LD_VAR 0 2
29904: IFFALSE 29929
// unit := CreateCharacter ( prefix & ident ) else
29906: LD_ADDR_VAR 0 5
29910: PUSH
29911: LD_VAR 0 3
29915: PUSH
29916: LD_VAR 0 1
29920: STR
29921: PPUSH
29922: CALL_OW 34
29926: ST_TO_ADDR
29927: GO 29944
// unit := NewCharacter ( ident ) ;
29929: LD_ADDR_VAR 0 5
29933: PUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 25
29943: ST_TO_ADDR
// result := unit ;
29944: LD_ADDR_VAR 0 4
29948: PUSH
29949: LD_VAR 0 5
29953: ST_TO_ADDR
// end ;
29954: LD_VAR 0 4
29958: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29959: LD_INT 0
29961: PPUSH
29962: PPUSH
// if not side or not nation then
29963: LD_VAR 0 1
29967: NOT
29968: PUSH
29969: LD_VAR 0 2
29973: NOT
29974: OR
29975: IFFALSE 29979
// exit ;
29977: GO 30747
// case nation of nation_american :
29979: LD_VAR 0 2
29983: PUSH
29984: LD_INT 1
29986: DOUBLE
29987: EQUAL
29988: IFTRUE 29992
29990: GO 30206
29992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29993: LD_ADDR_VAR 0 4
29997: PUSH
29998: LD_INT 35
30000: PUSH
30001: LD_INT 45
30003: PUSH
30004: LD_INT 46
30006: PUSH
30007: LD_INT 47
30009: PUSH
30010: LD_INT 82
30012: PUSH
30013: LD_INT 83
30015: PUSH
30016: LD_INT 84
30018: PUSH
30019: LD_INT 85
30021: PUSH
30022: LD_INT 86
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 6
30033: PUSH
30034: LD_INT 15
30036: PUSH
30037: LD_INT 16
30039: PUSH
30040: LD_INT 7
30042: PUSH
30043: LD_INT 12
30045: PUSH
30046: LD_INT 13
30048: PUSH
30049: LD_INT 10
30051: PUSH
30052: LD_INT 14
30054: PUSH
30055: LD_INT 20
30057: PUSH
30058: LD_INT 21
30060: PUSH
30061: LD_INT 22
30063: PUSH
30064: LD_INT 25
30066: PUSH
30067: LD_INT 32
30069: PUSH
30070: LD_INT 27
30072: PUSH
30073: LD_INT 36
30075: PUSH
30076: LD_INT 69
30078: PUSH
30079: LD_INT 39
30081: PUSH
30082: LD_INT 34
30084: PUSH
30085: LD_INT 40
30087: PUSH
30088: LD_INT 48
30090: PUSH
30091: LD_INT 49
30093: PUSH
30094: LD_INT 50
30096: PUSH
30097: LD_INT 51
30099: PUSH
30100: LD_INT 52
30102: PUSH
30103: LD_INT 53
30105: PUSH
30106: LD_INT 54
30108: PUSH
30109: LD_INT 55
30111: PUSH
30112: LD_INT 56
30114: PUSH
30115: LD_INT 57
30117: PUSH
30118: LD_INT 58
30120: PUSH
30121: LD_INT 59
30123: PUSH
30124: LD_INT 60
30126: PUSH
30127: LD_INT 61
30129: PUSH
30130: LD_INT 62
30132: PUSH
30133: LD_INT 80
30135: PUSH
30136: LD_INT 82
30138: PUSH
30139: LD_INT 83
30141: PUSH
30142: LD_INT 84
30144: PUSH
30145: LD_INT 85
30147: PUSH
30148: LD_INT 86
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: ST_TO_ADDR
30204: GO 30671
30206: LD_INT 2
30208: DOUBLE
30209: EQUAL
30210: IFTRUE 30214
30212: GO 30440
30214: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30215: LD_ADDR_VAR 0 4
30219: PUSH
30220: LD_INT 35
30222: PUSH
30223: LD_INT 45
30225: PUSH
30226: LD_INT 46
30228: PUSH
30229: LD_INT 47
30231: PUSH
30232: LD_INT 82
30234: PUSH
30235: LD_INT 83
30237: PUSH
30238: LD_INT 84
30240: PUSH
30241: LD_INT 85
30243: PUSH
30244: LD_INT 87
30246: PUSH
30247: LD_INT 70
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: LD_INT 11
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: LD_INT 4
30261: PUSH
30262: LD_INT 5
30264: PUSH
30265: LD_INT 6
30267: PUSH
30268: LD_INT 15
30270: PUSH
30271: LD_INT 18
30273: PUSH
30274: LD_INT 7
30276: PUSH
30277: LD_INT 17
30279: PUSH
30280: LD_INT 8
30282: PUSH
30283: LD_INT 20
30285: PUSH
30286: LD_INT 21
30288: PUSH
30289: LD_INT 22
30291: PUSH
30292: LD_INT 72
30294: PUSH
30295: LD_INT 26
30297: PUSH
30298: LD_INT 69
30300: PUSH
30301: LD_INT 39
30303: PUSH
30304: LD_INT 40
30306: PUSH
30307: LD_INT 41
30309: PUSH
30310: LD_INT 42
30312: PUSH
30313: LD_INT 43
30315: PUSH
30316: LD_INT 48
30318: PUSH
30319: LD_INT 49
30321: PUSH
30322: LD_INT 50
30324: PUSH
30325: LD_INT 51
30327: PUSH
30328: LD_INT 52
30330: PUSH
30331: LD_INT 53
30333: PUSH
30334: LD_INT 54
30336: PUSH
30337: LD_INT 55
30339: PUSH
30340: LD_INT 56
30342: PUSH
30343: LD_INT 60
30345: PUSH
30346: LD_INT 61
30348: PUSH
30349: LD_INT 62
30351: PUSH
30352: LD_INT 66
30354: PUSH
30355: LD_INT 67
30357: PUSH
30358: LD_INT 68
30360: PUSH
30361: LD_INT 81
30363: PUSH
30364: LD_INT 82
30366: PUSH
30367: LD_INT 83
30369: PUSH
30370: LD_INT 84
30372: PUSH
30373: LD_INT 85
30375: PUSH
30376: LD_INT 87
30378: PUSH
30379: LD_INT 88
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
30438: GO 30671
30440: LD_INT 3
30442: DOUBLE
30443: EQUAL
30444: IFTRUE 30448
30446: GO 30670
30448: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30449: LD_ADDR_VAR 0 4
30453: PUSH
30454: LD_INT 46
30456: PUSH
30457: LD_INT 47
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: LD_INT 82
30468: PUSH
30469: LD_INT 83
30471: PUSH
30472: LD_INT 84
30474: PUSH
30475: LD_INT 85
30477: PUSH
30478: LD_INT 86
30480: PUSH
30481: LD_INT 11
30483: PUSH
30484: LD_INT 9
30486: PUSH
30487: LD_INT 20
30489: PUSH
30490: LD_INT 19
30492: PUSH
30493: LD_INT 21
30495: PUSH
30496: LD_INT 24
30498: PUSH
30499: LD_INT 22
30501: PUSH
30502: LD_INT 25
30504: PUSH
30505: LD_INT 28
30507: PUSH
30508: LD_INT 29
30510: PUSH
30511: LD_INT 30
30513: PUSH
30514: LD_INT 31
30516: PUSH
30517: LD_INT 37
30519: PUSH
30520: LD_INT 38
30522: PUSH
30523: LD_INT 32
30525: PUSH
30526: LD_INT 27
30528: PUSH
30529: LD_INT 33
30531: PUSH
30532: LD_INT 69
30534: PUSH
30535: LD_INT 39
30537: PUSH
30538: LD_INT 34
30540: PUSH
30541: LD_INT 40
30543: PUSH
30544: LD_INT 71
30546: PUSH
30547: LD_INT 23
30549: PUSH
30550: LD_INT 44
30552: PUSH
30553: LD_INT 48
30555: PUSH
30556: LD_INT 49
30558: PUSH
30559: LD_INT 50
30561: PUSH
30562: LD_INT 51
30564: PUSH
30565: LD_INT 52
30567: PUSH
30568: LD_INT 53
30570: PUSH
30571: LD_INT 54
30573: PUSH
30574: LD_INT 55
30576: PUSH
30577: LD_INT 56
30579: PUSH
30580: LD_INT 57
30582: PUSH
30583: LD_INT 58
30585: PUSH
30586: LD_INT 59
30588: PUSH
30589: LD_INT 63
30591: PUSH
30592: LD_INT 64
30594: PUSH
30595: LD_INT 65
30597: PUSH
30598: LD_INT 82
30600: PUSH
30601: LD_INT 83
30603: PUSH
30604: LD_INT 84
30606: PUSH
30607: LD_INT 85
30609: PUSH
30610: LD_INT 86
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
30668: GO 30671
30670: POP
// if state > - 1 and state < 3 then
30671: LD_VAR 0 3
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: GREATER
30680: PUSH
30681: LD_VAR 0 3
30685: PUSH
30686: LD_INT 3
30688: LESS
30689: AND
30690: IFFALSE 30747
// for i in result do
30692: LD_ADDR_VAR 0 5
30696: PUSH
30697: LD_VAR 0 4
30701: PUSH
30702: FOR_IN
30703: IFFALSE 30745
// if GetTech ( i , side ) <> state then
30705: LD_VAR 0 5
30709: PPUSH
30710: LD_VAR 0 1
30714: PPUSH
30715: CALL_OW 321
30719: PUSH
30720: LD_VAR 0 3
30724: NONEQUAL
30725: IFFALSE 30743
// result := result diff i ;
30727: LD_ADDR_VAR 0 4
30731: PUSH
30732: LD_VAR 0 4
30736: PUSH
30737: LD_VAR 0 5
30741: DIFF
30742: ST_TO_ADDR
30743: GO 30702
30745: POP
30746: POP
// end ;
30747: LD_VAR 0 4
30751: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30752: LD_INT 0
30754: PPUSH
30755: PPUSH
30756: PPUSH
// result := true ;
30757: LD_ADDR_VAR 0 3
30761: PUSH
30762: LD_INT 1
30764: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30765: LD_ADDR_VAR 0 5
30769: PUSH
30770: LD_VAR 0 2
30774: PPUSH
30775: CALL_OW 480
30779: ST_TO_ADDR
// if not tmp then
30780: LD_VAR 0 5
30784: NOT
30785: IFFALSE 30789
// exit ;
30787: GO 30838
// for i in tmp do
30789: LD_ADDR_VAR 0 4
30793: PUSH
30794: LD_VAR 0 5
30798: PUSH
30799: FOR_IN
30800: IFFALSE 30836
// if GetTech ( i , side ) <> state_researched then
30802: LD_VAR 0 4
30806: PPUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: CALL_OW 321
30816: PUSH
30817: LD_INT 2
30819: NONEQUAL
30820: IFFALSE 30834
// begin result := false ;
30822: LD_ADDR_VAR 0 3
30826: PUSH
30827: LD_INT 0
30829: ST_TO_ADDR
// exit ;
30830: POP
30831: POP
30832: GO 30838
// end ;
30834: GO 30799
30836: POP
30837: POP
// end ;
30838: LD_VAR 0 3
30842: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30858: LD_VAR 0 1
30862: NOT
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 257
30873: PUSH
30874: LD_INT 9
30876: NONEQUAL
30877: OR
30878: IFFALSE 30882
// exit ;
30880: GO 31455
// side := GetSide ( unit ) ;
30882: LD_ADDR_VAR 0 9
30886: PUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 255
30896: ST_TO_ADDR
// tech_space := tech_spacanom ;
30897: LD_ADDR_VAR 0 12
30901: PUSH
30902: LD_INT 29
30904: ST_TO_ADDR
// tech_time := tech_taurad ;
30905: LD_ADDR_VAR 0 13
30909: PUSH
30910: LD_INT 28
30912: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30913: LD_ADDR_VAR 0 11
30917: PUSH
30918: LD_VAR 0 1
30922: PPUSH
30923: CALL_OW 310
30927: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30928: LD_VAR 0 11
30932: PPUSH
30933: CALL_OW 247
30937: PUSH
30938: LD_INT 2
30940: EQUAL
30941: IFFALSE 30945
// exit ;
30943: GO 31455
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30945: LD_ADDR_VAR 0 8
30949: PUSH
30950: LD_INT 81
30952: PUSH
30953: LD_VAR 0 9
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: LD_INT 21
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PPUSH
30983: CALL_OW 69
30987: ST_TO_ADDR
// if not tmp then
30988: LD_VAR 0 8
30992: NOT
30993: IFFALSE 30997
// exit ;
30995: GO 31455
// if in_unit then
30997: LD_VAR 0 11
31001: IFFALSE 31025
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31003: LD_ADDR_VAR 0 10
31007: PUSH
31008: LD_VAR 0 8
31012: PPUSH
31013: LD_VAR 0 11
31017: PPUSH
31018: CALL_OW 74
31022: ST_TO_ADDR
31023: GO 31045
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31025: LD_ADDR_VAR 0 10
31029: PUSH
31030: LD_VAR 0 8
31034: PPUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 74
31044: ST_TO_ADDR
// if not enemy then
31045: LD_VAR 0 10
31049: NOT
31050: IFFALSE 31054
// exit ;
31052: GO 31455
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31054: LD_VAR 0 11
31058: PUSH
31059: LD_VAR 0 11
31063: PPUSH
31064: LD_VAR 0 10
31068: PPUSH
31069: CALL_OW 296
31073: PUSH
31074: LD_INT 13
31076: GREATER
31077: AND
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: LD_VAR 0 10
31088: PPUSH
31089: CALL_OW 296
31093: PUSH
31094: LD_INT 12
31096: GREATER
31097: OR
31098: IFFALSE 31102
// exit ;
31100: GO 31455
// missile := [ 1 ] ;
31102: LD_ADDR_VAR 0 14
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31113: LD_VAR 0 9
31117: PPUSH
31118: LD_VAR 0 12
31122: PPUSH
31123: CALL_OW 325
31127: IFFALSE 31156
// missile := Replace ( missile , missile + 1 , 2 ) ;
31129: LD_ADDR_VAR 0 14
31133: PUSH
31134: LD_VAR 0 14
31138: PPUSH
31139: LD_VAR 0 14
31143: PUSH
31144: LD_INT 1
31146: PLUS
31147: PPUSH
31148: LD_INT 2
31150: PPUSH
31151: CALL_OW 1
31155: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31156: LD_VAR 0 9
31160: PPUSH
31161: LD_VAR 0 13
31165: PPUSH
31166: CALL_OW 325
31170: PUSH
31171: LD_VAR 0 10
31175: PPUSH
31176: CALL_OW 255
31180: PPUSH
31181: LD_VAR 0 13
31185: PPUSH
31186: CALL_OW 325
31190: NOT
31191: AND
31192: IFFALSE 31221
// missile := Replace ( missile , missile + 1 , 3 ) ;
31194: LD_ADDR_VAR 0 14
31198: PUSH
31199: LD_VAR 0 14
31203: PPUSH
31204: LD_VAR 0 14
31208: PUSH
31209: LD_INT 1
31211: PLUS
31212: PPUSH
31213: LD_INT 3
31215: PPUSH
31216: CALL_OW 1
31220: ST_TO_ADDR
// if missile < 2 then
31221: LD_VAR 0 14
31225: PUSH
31226: LD_INT 2
31228: LESS
31229: IFFALSE 31233
// exit ;
31231: GO 31455
// x := GetX ( enemy ) ;
31233: LD_ADDR_VAR 0 4
31237: PUSH
31238: LD_VAR 0 10
31242: PPUSH
31243: CALL_OW 250
31247: ST_TO_ADDR
// y := GetY ( enemy ) ;
31248: LD_ADDR_VAR 0 5
31252: PUSH
31253: LD_VAR 0 10
31257: PPUSH
31258: CALL_OW 251
31262: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31263: LD_ADDR_VAR 0 6
31267: PUSH
31268: LD_VAR 0 4
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PPUSH
31277: LD_INT 1
31279: PPUSH
31280: CALL_OW 12
31284: PLUS
31285: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31286: LD_ADDR_VAR 0 7
31290: PUSH
31291: LD_VAR 0 5
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PPUSH
31300: LD_INT 1
31302: PPUSH
31303: CALL_OW 12
31307: PLUS
31308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31309: LD_VAR 0 6
31313: PPUSH
31314: LD_VAR 0 7
31318: PPUSH
31319: CALL_OW 488
31323: NOT
31324: IFFALSE 31346
// begin _x := x ;
31326: LD_ADDR_VAR 0 6
31330: PUSH
31331: LD_VAR 0 4
31335: ST_TO_ADDR
// _y := y ;
31336: LD_ADDR_VAR 0 7
31340: PUSH
31341: LD_VAR 0 5
31345: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31346: LD_ADDR_VAR 0 3
31350: PUSH
31351: LD_INT 1
31353: PPUSH
31354: LD_VAR 0 14
31358: PPUSH
31359: CALL_OW 12
31363: ST_TO_ADDR
// case i of 1 :
31364: LD_VAR 0 3
31368: PUSH
31369: LD_INT 1
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31394
31377: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31378: LD_VAR 0 1
31382: PPUSH
31383: LD_VAR 0 10
31387: PPUSH
31388: CALL_OW 115
31392: GO 31455
31394: LD_INT 2
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31424
31402: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31403: LD_VAR 0 1
31407: PPUSH
31408: LD_VAR 0 6
31412: PPUSH
31413: LD_VAR 0 7
31417: PPUSH
31418: CALL_OW 153
31422: GO 31455
31424: LD_INT 3
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31454
31432: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31433: LD_VAR 0 1
31437: PPUSH
31438: LD_VAR 0 6
31442: PPUSH
31443: LD_VAR 0 7
31447: PPUSH
31448: CALL_OW 154
31452: GO 31455
31454: POP
// end ;
31455: LD_VAR 0 2
31459: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31460: LD_INT 0
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
// if not unit or not building then
31468: LD_VAR 0 1
31472: NOT
31473: PUSH
31474: LD_VAR 0 2
31478: NOT
31479: OR
31480: IFFALSE 31484
// exit ;
31482: GO 31642
// x := GetX ( building ) ;
31484: LD_ADDR_VAR 0 5
31488: PUSH
31489: LD_VAR 0 2
31493: PPUSH
31494: CALL_OW 250
31498: ST_TO_ADDR
// y := GetY ( building ) ;
31499: LD_ADDR_VAR 0 6
31503: PUSH
31504: LD_VAR 0 2
31508: PPUSH
31509: CALL_OW 251
31513: ST_TO_ADDR
// for i = 0 to 5 do
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: DOUBLE
31520: LD_INT 0
31522: DEC
31523: ST_TO_ADDR
31524: LD_INT 5
31526: PUSH
31527: FOR_TO
31528: IFFALSE 31640
// begin _x := ShiftX ( x , i , 3 ) ;
31530: LD_ADDR_VAR 0 7
31534: PUSH
31535: LD_VAR 0 5
31539: PPUSH
31540: LD_VAR 0 4
31544: PPUSH
31545: LD_INT 3
31547: PPUSH
31548: CALL_OW 272
31552: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31553: LD_ADDR_VAR 0 8
31557: PUSH
31558: LD_VAR 0 6
31562: PPUSH
31563: LD_VAR 0 4
31567: PPUSH
31568: LD_INT 3
31570: PPUSH
31571: CALL_OW 273
31575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31576: LD_VAR 0 7
31580: PPUSH
31581: LD_VAR 0 8
31585: PPUSH
31586: CALL_OW 488
31590: NOT
31591: IFFALSE 31595
// continue ;
31593: GO 31527
// if HexInfo ( _x , _y ) = 0 then
31595: LD_VAR 0 7
31599: PPUSH
31600: LD_VAR 0 8
31604: PPUSH
31605: CALL_OW 428
31609: PUSH
31610: LD_INT 0
31612: EQUAL
31613: IFFALSE 31638
// begin ComMoveXY ( unit , _x , _y ) ;
31615: LD_VAR 0 1
31619: PPUSH
31620: LD_VAR 0 7
31624: PPUSH
31625: LD_VAR 0 8
31629: PPUSH
31630: CALL_OW 111
// exit ;
31634: POP
31635: POP
31636: GO 31642
// end ; end ;
31638: GO 31527
31640: POP
31641: POP
// end ;
31642: LD_VAR 0 3
31646: RET
// export function ScanBase ( side , base_area ) ; begin
31647: LD_INT 0
31649: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_VAR 0 2
31659: PPUSH
31660: LD_INT 81
31662: PUSH
31663: LD_VAR 0 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PPUSH
31672: CALL_OW 70
31676: ST_TO_ADDR
// end ;
31677: LD_VAR 0 3
31681: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31682: LD_INT 0
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
// result := false ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_INT 0
31695: ST_TO_ADDR
// side := GetSide ( unit ) ;
31696: LD_ADDR_VAR 0 3
31700: PUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 255
31710: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31711: LD_ADDR_VAR 0 4
31715: PUSH
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 248
31725: ST_TO_ADDR
// case nat of 1 :
31726: LD_VAR 0 4
31730: PUSH
31731: LD_INT 1
31733: DOUBLE
31734: EQUAL
31735: IFTRUE 31739
31737: GO 31750
31739: POP
// tech := tech_lassight ; 2 :
31740: LD_ADDR_VAR 0 5
31744: PUSH
31745: LD_INT 12
31747: ST_TO_ADDR
31748: GO 31789
31750: LD_INT 2
31752: DOUBLE
31753: EQUAL
31754: IFTRUE 31758
31756: GO 31769
31758: POP
// tech := tech_mortar ; 3 :
31759: LD_ADDR_VAR 0 5
31763: PUSH
31764: LD_INT 41
31766: ST_TO_ADDR
31767: GO 31789
31769: LD_INT 3
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31788
31777: POP
// tech := tech_bazooka ; end ;
31778: LD_ADDR_VAR 0 5
31782: PUSH
31783: LD_INT 44
31785: ST_TO_ADDR
31786: GO 31789
31788: POP
// if Researched ( side , tech ) then
31789: LD_VAR 0 3
31793: PPUSH
31794: LD_VAR 0 5
31798: PPUSH
31799: CALL_OW 325
31803: IFFALSE 31830
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31805: LD_ADDR_VAR 0 2
31809: PUSH
31810: LD_INT 5
31812: PUSH
31813: LD_INT 8
31815: PUSH
31816: LD_INT 9
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: PUSH
31824: LD_VAR 0 4
31828: ARRAY
31829: ST_TO_ADDR
// end ;
31830: LD_VAR 0 2
31834: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31835: LD_INT 0
31837: PPUSH
31838: PPUSH
31839: PPUSH
// if not mines then
31840: LD_VAR 0 2
31844: NOT
31845: IFFALSE 31849
// exit ;
31847: GO 31993
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31849: LD_ADDR_VAR 0 5
31853: PUSH
31854: LD_INT 81
31856: PUSH
31857: LD_VAR 0 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 3
31868: PUSH
31869: LD_INT 21
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PPUSH
31887: CALL_OW 69
31891: ST_TO_ADDR
// for i in mines do
31892: LD_ADDR_VAR 0 4
31896: PUSH
31897: LD_VAR 0 2
31901: PUSH
31902: FOR_IN
31903: IFFALSE 31991
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31905: LD_VAR 0 4
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PPUSH
31914: LD_VAR 0 4
31918: PUSH
31919: LD_INT 2
31921: ARRAY
31922: PPUSH
31923: CALL_OW 458
31927: NOT
31928: IFFALSE 31932
// continue ;
31930: GO 31902
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31932: LD_VAR 0 4
31936: PUSH
31937: LD_INT 1
31939: ARRAY
31940: PPUSH
31941: LD_VAR 0 4
31945: PUSH
31946: LD_INT 2
31948: ARRAY
31949: PPUSH
31950: CALL_OW 428
31954: PUSH
31955: LD_VAR 0 5
31959: IN
31960: IFFALSE 31989
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31962: LD_VAR 0 4
31966: PUSH
31967: LD_INT 1
31969: ARRAY
31970: PPUSH
31971: LD_VAR 0 4
31975: PUSH
31976: LD_INT 2
31978: ARRAY
31979: PPUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 456
// end ;
31989: GO 31902
31991: POP
31992: POP
// end ;
31993: LD_VAR 0 3
31997: RET
// export function Count ( array ) ; var i ; begin
31998: LD_INT 0
32000: PPUSH
32001: PPUSH
// result := 0 ;
32002: LD_ADDR_VAR 0 2
32006: PUSH
32007: LD_INT 0
32009: ST_TO_ADDR
// for i in array do
32010: LD_ADDR_VAR 0 3
32014: PUSH
32015: LD_VAR 0 1
32019: PUSH
32020: FOR_IN
32021: IFFALSE 32045
// if i then
32023: LD_VAR 0 3
32027: IFFALSE 32043
// result := result + 1 ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_VAR 0 2
32038: PUSH
32039: LD_INT 1
32041: PLUS
32042: ST_TO_ADDR
32043: GO 32020
32045: POP
32046: POP
// end ;
32047: LD_VAR 0 2
32051: RET
// export function IsEmpty ( building ) ; begin
32052: LD_INT 0
32054: PPUSH
// if not building then
32055: LD_VAR 0 1
32059: NOT
32060: IFFALSE 32064
// exit ;
32062: GO 32107
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_VAR 0 1
32073: PUSH
32074: LD_INT 22
32076: PUSH
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 255
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 58
32093: PUSH
32094: EMPTY
32095: LIST
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PPUSH
32101: CALL_OW 69
32105: IN
32106: ST_TO_ADDR
// end ;
32107: LD_VAR 0 2
32111: RET
// export function IsNotFull ( building ) ; var places ; begin
32112: LD_INT 0
32114: PPUSH
32115: PPUSH
// if not building then
32116: LD_VAR 0 1
32120: NOT
32121: IFFALSE 32125
// exit ;
32123: GO 32296
// result := false ;
32125: LD_ADDR_VAR 0 2
32129: PUSH
32130: LD_INT 0
32132: ST_TO_ADDR
// places := 0 ;
32133: LD_ADDR_VAR 0 3
32137: PUSH
32138: LD_INT 0
32140: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32141: LD_VAR 0 1
32145: PPUSH
32146: CALL_OW 266
32150: PUSH
32151: LD_INT 0
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32213
32157: LD_INT 1
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32213
32163: LD_INT 6
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32213
32169: LD_INT 7
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32213
32175: LD_INT 8
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32213
32181: LD_INT 4
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32213
32187: LD_INT 5
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32213
32193: LD_INT 2
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32213
32199: LD_INT 3
32201: DOUBLE
32202: EQUAL
32203: IFTRUE 32213
32205: LD_INT 35
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32224
32213: POP
// places := 6 ; b_bunker , b_breastwork :
32214: LD_ADDR_VAR 0 3
32218: PUSH
32219: LD_INT 6
32221: ST_TO_ADDR
32222: GO 32269
32224: LD_INT 32
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32238
32230: LD_INT 31
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// places := 1 ; b_control_tower :
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_INT 1
32246: ST_TO_ADDR
32247: GO 32269
32249: LD_INT 36
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// places := 3 ; end ;
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: LD_INT 3
32265: ST_TO_ADDR
32266: GO 32269
32268: POP
// if places then
32269: LD_VAR 0 3
32273: IFFALSE 32296
// result := UnitsInside ( building ) < places ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 1
32284: PPUSH
32285: CALL_OW 313
32289: PUSH
32290: LD_VAR 0 3
32294: LESS
32295: ST_TO_ADDR
// end ;
32296: LD_VAR 0 2
32300: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32301: LD_INT 0
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
// tmp := [ ] ;
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: EMPTY
32313: ST_TO_ADDR
// list := [ ] ;
32314: LD_ADDR_VAR 0 5
32318: PUSH
32319: EMPTY
32320: ST_TO_ADDR
// for i = 16 to 25 do
32321: LD_ADDR_VAR 0 4
32325: PUSH
32326: DOUBLE
32327: LD_INT 16
32329: DEC
32330: ST_TO_ADDR
32331: LD_INT 25
32333: PUSH
32334: FOR_TO
32335: IFFALSE 32408
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32337: LD_ADDR_VAR 0 3
32341: PUSH
32342: LD_VAR 0 3
32346: PUSH
32347: LD_INT 22
32349: PUSH
32350: LD_VAR 0 1
32354: PPUSH
32355: CALL_OW 255
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 91
32366: PUSH
32367: LD_VAR 0 1
32371: PUSH
32372: LD_INT 6
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 30
32382: PUSH
32383: LD_VAR 0 4
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: PUSH
32397: EMPTY
32398: LIST
32399: PPUSH
32400: CALL_OW 69
32404: ADD
32405: ST_TO_ADDR
32406: GO 32334
32408: POP
32409: POP
// for i = 1 to tmp do
32410: LD_ADDR_VAR 0 4
32414: PUSH
32415: DOUBLE
32416: LD_INT 1
32418: DEC
32419: ST_TO_ADDR
32420: LD_VAR 0 3
32424: PUSH
32425: FOR_TO
32426: IFFALSE 32514
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32428: LD_ADDR_VAR 0 5
32432: PUSH
32433: LD_VAR 0 5
32437: PUSH
32438: LD_VAR 0 3
32442: PUSH
32443: LD_VAR 0 4
32447: ARRAY
32448: PPUSH
32449: CALL_OW 266
32453: PUSH
32454: LD_VAR 0 3
32458: PUSH
32459: LD_VAR 0 4
32463: ARRAY
32464: PPUSH
32465: CALL_OW 250
32469: PUSH
32470: LD_VAR 0 3
32474: PUSH
32475: LD_VAR 0 4
32479: ARRAY
32480: PPUSH
32481: CALL_OW 251
32485: PUSH
32486: LD_VAR 0 3
32490: PUSH
32491: LD_VAR 0 4
32495: ARRAY
32496: PPUSH
32497: CALL_OW 254
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: ADD
32511: ST_TO_ADDR
32512: GO 32425
32514: POP
32515: POP
// result := list ;
32516: LD_ADDR_VAR 0 2
32520: PUSH
32521: LD_VAR 0 5
32525: ST_TO_ADDR
// end ;
32526: LD_VAR 0 2
32530: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32531: LD_INT 0
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
32539: PPUSH
// if not factory then
32540: LD_VAR 0 1
32544: NOT
32545: IFFALSE 32549
// exit ;
32547: GO 33142
// if control = control_apeman then
32549: LD_VAR 0 4
32553: PUSH
32554: LD_INT 5
32556: EQUAL
32557: IFFALSE 32666
// begin tmp := UnitsInside ( factory ) ;
32559: LD_ADDR_VAR 0 8
32563: PUSH
32564: LD_VAR 0 1
32568: PPUSH
32569: CALL_OW 313
32573: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32574: LD_VAR 0 8
32578: PPUSH
32579: LD_INT 25
32581: PUSH
32582: LD_INT 12
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PPUSH
32589: CALL_OW 72
32593: NOT
32594: IFFALSE 32604
// control := control_manual ;
32596: LD_ADDR_VAR 0 4
32600: PUSH
32601: LD_INT 1
32603: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32604: LD_ADDR_VAR 0 8
32608: PUSH
32609: LD_VAR 0 1
32613: PPUSH
32614: CALL 32301 0 1
32618: ST_TO_ADDR
// if tmp then
32619: LD_VAR 0 8
32623: IFFALSE 32666
// begin for i in tmp do
32625: LD_ADDR_VAR 0 7
32629: PUSH
32630: LD_VAR 0 8
32634: PUSH
32635: FOR_IN
32636: IFFALSE 32664
// if i [ 1 ] = b_ext_radio then
32638: LD_VAR 0 7
32642: PUSH
32643: LD_INT 1
32645: ARRAY
32646: PUSH
32647: LD_INT 22
32649: EQUAL
32650: IFFALSE 32662
// begin control := control_remote ;
32652: LD_ADDR_VAR 0 4
32656: PUSH
32657: LD_INT 2
32659: ST_TO_ADDR
// break ;
32660: GO 32664
// end ;
32662: GO 32635
32664: POP
32665: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32666: LD_VAR 0 1
32670: PPUSH
32671: LD_VAR 0 2
32675: PPUSH
32676: LD_VAR 0 3
32680: PPUSH
32681: LD_VAR 0 4
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: CALL_OW 448
32695: IFFALSE 32730
// begin result := [ chassis , engine , control , weapon ] ;
32697: LD_ADDR_VAR 0 6
32701: PUSH
32702: LD_VAR 0 2
32706: PUSH
32707: LD_VAR 0 3
32711: PUSH
32712: LD_VAR 0 4
32716: PUSH
32717: LD_VAR 0 5
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: ST_TO_ADDR
// exit ;
32728: GO 33142
// end ; _chassis := AvailableChassisList ( factory ) ;
32730: LD_ADDR_VAR 0 9
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 475
32744: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32745: LD_ADDR_VAR 0 11
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 476
32759: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32760: LD_ADDR_VAR 0 12
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 477
32774: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32775: LD_ADDR_VAR 0 10
32779: PUSH
32780: LD_VAR 0 1
32784: PPUSH
32785: CALL_OW 478
32789: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32790: LD_VAR 0 9
32794: NOT
32795: PUSH
32796: LD_VAR 0 11
32800: NOT
32801: OR
32802: PUSH
32803: LD_VAR 0 12
32807: NOT
32808: OR
32809: PUSH
32810: LD_VAR 0 10
32814: NOT
32815: OR
32816: IFFALSE 32851
// begin result := [ chassis , engine , control , weapon ] ;
32818: LD_ADDR_VAR 0 6
32822: PUSH
32823: LD_VAR 0 2
32827: PUSH
32828: LD_VAR 0 3
32832: PUSH
32833: LD_VAR 0 4
32837: PUSH
32838: LD_VAR 0 5
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
// exit ;
32849: GO 33142
// end ; if not chassis in _chassis then
32851: LD_VAR 0 2
32855: PUSH
32856: LD_VAR 0 9
32860: IN
32861: NOT
32862: IFFALSE 32888
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32864: LD_ADDR_VAR 0 2
32868: PUSH
32869: LD_VAR 0 9
32873: PUSH
32874: LD_INT 1
32876: PPUSH
32877: LD_VAR 0 9
32881: PPUSH
32882: CALL_OW 12
32886: ARRAY
32887: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32888: LD_VAR 0 2
32892: PPUSH
32893: LD_VAR 0 3
32897: PPUSH
32898: CALL 33147 0 2
32902: NOT
32903: IFFALSE 32962
// repeat engine := _engine [ 1 ] ;
32905: LD_ADDR_VAR 0 3
32909: PUSH
32910: LD_VAR 0 11
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32919: LD_ADDR_VAR 0 11
32923: PUSH
32924: LD_VAR 0 11
32928: PPUSH
32929: LD_INT 1
32931: PPUSH
32932: CALL_OW 3
32936: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32937: LD_VAR 0 2
32941: PPUSH
32942: LD_VAR 0 3
32946: PPUSH
32947: CALL 33147 0 2
32951: PUSH
32952: LD_VAR 0 11
32956: PUSH
32957: EMPTY
32958: EQUAL
32959: OR
32960: IFFALSE 32905
// if not control in _control then
32962: LD_VAR 0 4
32966: PUSH
32967: LD_VAR 0 12
32971: IN
32972: NOT
32973: IFFALSE 32999
// control := _control [ rand ( 1 , _control ) ] ;
32975: LD_ADDR_VAR 0 4
32979: PUSH
32980: LD_VAR 0 12
32984: PUSH
32985: LD_INT 1
32987: PPUSH
32988: LD_VAR 0 12
32992: PPUSH
32993: CALL_OW 12
32997: ARRAY
32998: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32999: LD_VAR 0 2
33003: PPUSH
33004: LD_VAR 0 5
33008: PPUSH
33009: CALL 33367 0 2
33013: NOT
33014: IFFALSE 33073
// repeat weapon := _weapon [ 1 ] ;
33016: LD_ADDR_VAR 0 5
33020: PUSH
33021: LD_VAR 0 10
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33030: LD_ADDR_VAR 0 10
33034: PUSH
33035: LD_VAR 0 10
33039: PPUSH
33040: LD_INT 1
33042: PPUSH
33043: CALL_OW 3
33047: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33048: LD_VAR 0 2
33052: PPUSH
33053: LD_VAR 0 5
33057: PPUSH
33058: CALL 33367 0 2
33062: PUSH
33063: LD_VAR 0 10
33067: PUSH
33068: EMPTY
33069: EQUAL
33070: OR
33071: IFFALSE 33016
// result := [ ] ;
33073: LD_ADDR_VAR 0 6
33077: PUSH
33078: EMPTY
33079: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33080: LD_VAR 0 1
33084: PPUSH
33085: LD_VAR 0 2
33089: PPUSH
33090: LD_VAR 0 3
33094: PPUSH
33095: LD_VAR 0 4
33099: PPUSH
33100: LD_VAR 0 5
33104: PPUSH
33105: CALL_OW 448
33109: IFFALSE 33142
// result := [ chassis , engine , control , weapon ] ;
33111: LD_ADDR_VAR 0 6
33115: PUSH
33116: LD_VAR 0 2
33120: PUSH
33121: LD_VAR 0 3
33125: PUSH
33126: LD_VAR 0 4
33130: PUSH
33131: LD_VAR 0 5
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: ST_TO_ADDR
// end ;
33142: LD_VAR 0 6
33146: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33147: LD_INT 0
33149: PPUSH
// if not chassis or not engine then
33150: LD_VAR 0 1
33154: NOT
33155: PUSH
33156: LD_VAR 0 2
33160: NOT
33161: OR
33162: IFFALSE 33166
// exit ;
33164: GO 33362
// case engine of engine_solar :
33166: LD_VAR 0 2
33170: PUSH
33171: LD_INT 2
33173: DOUBLE
33174: EQUAL
33175: IFTRUE 33179
33177: GO 33217
33179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33180: LD_ADDR_VAR 0 3
33184: PUSH
33185: LD_INT 11
33187: PUSH
33188: LD_INT 12
33190: PUSH
33191: LD_INT 13
33193: PUSH
33194: LD_INT 14
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: ST_TO_ADDR
33215: GO 33346
33217: LD_INT 1
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33287
33225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33226: LD_ADDR_VAR 0 3
33230: PUSH
33231: LD_INT 11
33233: PUSH
33234: LD_INT 12
33236: PUSH
33237: LD_INT 13
33239: PUSH
33240: LD_INT 14
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: LD_INT 2
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: LD_INT 4
33254: PUSH
33255: LD_INT 5
33257: PUSH
33258: LD_INT 21
33260: PUSH
33261: LD_INT 23
33263: PUSH
33264: LD_INT 22
33266: PUSH
33267: LD_INT 24
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
33285: GO 33346
33287: LD_INT 3
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33345
33295: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33296: LD_ADDR_VAR 0 3
33300: PUSH
33301: LD_INT 13
33303: PUSH
33304: LD_INT 14
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: LD_INT 3
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: LD_INT 21
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_INT 23
33327: PUSH
33328: LD_INT 24
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
33343: GO 33346
33345: POP
// result := ( chassis in result ) ;
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: LD_VAR 0 1
33355: PUSH
33356: LD_VAR 0 3
33360: IN
33361: ST_TO_ADDR
// end ;
33362: LD_VAR 0 3
33366: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33367: LD_INT 0
33369: PPUSH
// if not chassis or not weapon then
33370: LD_VAR 0 1
33374: NOT
33375: PUSH
33376: LD_VAR 0 2
33380: NOT
33381: OR
33382: IFFALSE 33386
// exit ;
33384: GO 34448
// case weapon of us_machine_gun :
33386: LD_VAR 0 2
33390: PUSH
33391: LD_INT 2
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33429
33399: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: LD_INT 5
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
33427: GO 34432
33429: LD_INT 3
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33467
33437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 4
33454: PUSH
33455: LD_INT 5
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
33465: GO 34432
33467: LD_INT 11
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33505
33475: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: LD_INT 4
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: ST_TO_ADDR
33503: GO 34432
33505: LD_INT 4
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33539
33513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 3
33524: PUSH
33525: LD_INT 4
33527: PUSH
33528: LD_INT 5
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 34432
33539: LD_INT 5
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33573
33547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 4
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
33571: GO 34432
33573: LD_INT 9
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33581
33579: GO 33607
33581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: LD_INT 3
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
33605: GO 34432
33607: LD_INT 7
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33615
33613: GO 33641
33615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 4
33629: PUSH
33630: LD_INT 5
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
33639: GO 34432
33641: LD_INT 12
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33675
33649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
33673: GO 34432
33675: LD_INT 13
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33709
33683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
33707: GO 34432
33709: LD_INT 14
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33735
33717: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: LD_INT 4
33725: PUSH
33726: LD_INT 5
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: ST_TO_ADDR
33733: GO 34432
33735: LD_INT 6
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33761
33743: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33744: LD_ADDR_VAR 0 3
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: LD_INT 5
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: ST_TO_ADDR
33759: GO 34432
33761: LD_INT 10
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33769
33767: GO 33787
33769: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_INT 4
33777: PUSH
33778: LD_INT 5
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: ST_TO_ADDR
33785: GO 34432
33787: LD_INT 22
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33821
33795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_INT 11
33803: PUSH
33804: LD_INT 12
33806: PUSH
33807: LD_INT 13
33809: PUSH
33810: LD_INT 14
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: ST_TO_ADDR
33819: GO 34432
33821: LD_INT 23
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33855
33829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 11
33837: PUSH
33838: LD_INT 12
33840: PUSH
33841: LD_INT 13
33843: PUSH
33844: LD_INT 14
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: ST_TO_ADDR
33853: GO 34432
33855: LD_INT 24
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33863
33861: GO 33889
33863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33864: LD_ADDR_VAR 0 3
33868: PUSH
33869: LD_INT 11
33871: PUSH
33872: LD_INT 12
33874: PUSH
33875: LD_INT 13
33877: PUSH
33878: LD_INT 14
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
33887: GO 34432
33889: LD_INT 30
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33923
33897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33898: LD_ADDR_VAR 0 3
33902: PUSH
33903: LD_INT 11
33905: PUSH
33906: LD_INT 12
33908: PUSH
33909: LD_INT 13
33911: PUSH
33912: LD_INT 14
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: ST_TO_ADDR
33921: GO 34432
33923: LD_INT 25
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33931
33929: GO 33949
33931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_INT 13
33939: PUSH
33940: LD_INT 14
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: ST_TO_ADDR
33947: GO 34432
33949: LD_INT 27
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 33975
33957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33958: LD_ADDR_VAR 0 3
33962: PUSH
33963: LD_INT 13
33965: PUSH
33966: LD_INT 14
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: ST_TO_ADDR
33973: GO 34432
33975: LD_EXP 119
33979: DOUBLE
33980: EQUAL
33981: IFTRUE 33985
33983: GO 34011
33985: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33986: LD_ADDR_VAR 0 3
33990: PUSH
33991: LD_INT 11
33993: PUSH
33994: LD_INT 12
33996: PUSH
33997: LD_INT 13
33999: PUSH
34000: LD_INT 14
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
34009: GO 34432
34011: LD_INT 28
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34037
34019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34020: LD_ADDR_VAR 0 3
34024: PUSH
34025: LD_INT 13
34027: PUSH
34028: LD_INT 14
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: ST_TO_ADDR
34035: GO 34432
34037: LD_INT 29
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34063
34045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34046: LD_ADDR_VAR 0 3
34050: PUSH
34051: LD_INT 13
34053: PUSH
34054: LD_INT 14
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: ST_TO_ADDR
34061: GO 34432
34063: LD_INT 31
34065: DOUBLE
34066: EQUAL
34067: IFTRUE 34071
34069: GO 34089
34071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: LD_INT 13
34079: PUSH
34080: LD_INT 14
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: ST_TO_ADDR
34087: GO 34432
34089: LD_INT 26
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34115
34097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_INT 13
34105: PUSH
34106: LD_INT 14
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: ST_TO_ADDR
34113: GO 34432
34115: LD_INT 42
34117: DOUBLE
34118: EQUAL
34119: IFTRUE 34123
34121: GO 34149
34123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34124: LD_ADDR_VAR 0 3
34128: PUSH
34129: LD_INT 21
34131: PUSH
34132: LD_INT 22
34134: PUSH
34135: LD_INT 23
34137: PUSH
34138: LD_INT 24
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
34147: GO 34432
34149: LD_INT 43
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34183
34157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_INT 21
34165: PUSH
34166: LD_INT 22
34168: PUSH
34169: LD_INT 23
34171: PUSH
34172: LD_INT 24
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
34181: GO 34432
34183: LD_INT 44
34185: DOUBLE
34186: EQUAL
34187: IFTRUE 34191
34189: GO 34217
34191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34192: LD_ADDR_VAR 0 3
34196: PUSH
34197: LD_INT 21
34199: PUSH
34200: LD_INT 22
34202: PUSH
34203: LD_INT 23
34205: PUSH
34206: LD_INT 24
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: ST_TO_ADDR
34215: GO 34432
34217: LD_INT 45
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34251
34225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 22
34236: PUSH
34237: LD_INT 23
34239: PUSH
34240: LD_INT 24
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: ST_TO_ADDR
34249: GO 34432
34251: LD_INT 49
34253: DOUBLE
34254: EQUAL
34255: IFTRUE 34259
34257: GO 34285
34259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34260: LD_ADDR_VAR 0 3
34264: PUSH
34265: LD_INT 21
34267: PUSH
34268: LD_INT 22
34270: PUSH
34271: LD_INT 23
34273: PUSH
34274: LD_INT 24
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
34283: GO 34432
34285: LD_INT 51
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34319
34293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 21
34301: PUSH
34302: LD_INT 22
34304: PUSH
34305: LD_INT 23
34307: PUSH
34308: LD_INT 24
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
34317: GO 34432
34319: LD_INT 52
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34327
34325: GO 34353
34327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_INT 21
34335: PUSH
34336: LD_INT 22
34338: PUSH
34339: LD_INT 23
34341: PUSH
34342: LD_INT 24
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: ST_TO_ADDR
34351: GO 34432
34353: LD_INT 53
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34379
34361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 23
34369: PUSH
34370: LD_INT 24
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: ST_TO_ADDR
34377: GO 34432
34379: LD_INT 46
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 34405
34387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_INT 23
34395: PUSH
34396: LD_INT 24
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: ST_TO_ADDR
34403: GO 34432
34405: LD_INT 47
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34413
34411: GO 34431
34413: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 23
34421: PUSH
34422: LD_INT 24
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: ST_TO_ADDR
34429: GO 34432
34431: POP
// result := ( chassis in result ) ;
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_VAR 0 1
34441: PUSH
34442: LD_VAR 0 3
34446: IN
34447: ST_TO_ADDR
// end ;
34448: LD_VAR 0 3
34452: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34453: LD_INT 0
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
// result := array ;
34462: LD_ADDR_VAR 0 5
34466: PUSH
34467: LD_VAR 0 1
34471: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34472: LD_VAR 0 1
34476: NOT
34477: PUSH
34478: LD_VAR 0 2
34482: NOT
34483: OR
34484: PUSH
34485: LD_VAR 0 3
34489: NOT
34490: OR
34491: PUSH
34492: LD_VAR 0 2
34496: PUSH
34497: LD_VAR 0 1
34501: GREATER
34502: OR
34503: PUSH
34504: LD_VAR 0 3
34508: PUSH
34509: LD_VAR 0 1
34513: GREATER
34514: OR
34515: IFFALSE 34519
// exit ;
34517: GO 34815
// if direction then
34519: LD_VAR 0 4
34523: IFFALSE 34587
// begin d := 1 ;
34525: LD_ADDR_VAR 0 9
34529: PUSH
34530: LD_INT 1
34532: ST_TO_ADDR
// if i_from > i_to then
34533: LD_VAR 0 2
34537: PUSH
34538: LD_VAR 0 3
34542: GREATER
34543: IFFALSE 34569
// length := ( array - i_from ) + i_to else
34545: LD_ADDR_VAR 0 11
34549: PUSH
34550: LD_VAR 0 1
34554: PUSH
34555: LD_VAR 0 2
34559: MINUS
34560: PUSH
34561: LD_VAR 0 3
34565: PLUS
34566: ST_TO_ADDR
34567: GO 34585
// length := i_to - i_from ;
34569: LD_ADDR_VAR 0 11
34573: PUSH
34574: LD_VAR 0 3
34578: PUSH
34579: LD_VAR 0 2
34583: MINUS
34584: ST_TO_ADDR
// end else
34585: GO 34648
// begin d := - 1 ;
34587: LD_ADDR_VAR 0 9
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: ST_TO_ADDR
// if i_from > i_to then
34596: LD_VAR 0 2
34600: PUSH
34601: LD_VAR 0 3
34605: GREATER
34606: IFFALSE 34626
// length := i_from - i_to else
34608: LD_ADDR_VAR 0 11
34612: PUSH
34613: LD_VAR 0 2
34617: PUSH
34618: LD_VAR 0 3
34622: MINUS
34623: ST_TO_ADDR
34624: GO 34648
// length := ( array - i_to ) + i_from ;
34626: LD_ADDR_VAR 0 11
34630: PUSH
34631: LD_VAR 0 1
34635: PUSH
34636: LD_VAR 0 3
34640: MINUS
34641: PUSH
34642: LD_VAR 0 2
34646: PLUS
34647: ST_TO_ADDR
// end ; if not length then
34648: LD_VAR 0 11
34652: NOT
34653: IFFALSE 34657
// exit ;
34655: GO 34815
// tmp := array ;
34657: LD_ADDR_VAR 0 10
34661: PUSH
34662: LD_VAR 0 1
34666: ST_TO_ADDR
// for i = 1 to length do
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: DOUBLE
34673: LD_INT 1
34675: DEC
34676: ST_TO_ADDR
34677: LD_VAR 0 11
34681: PUSH
34682: FOR_TO
34683: IFFALSE 34803
// begin for j = 1 to array do
34685: LD_ADDR_VAR 0 7
34689: PUSH
34690: DOUBLE
34691: LD_INT 1
34693: DEC
34694: ST_TO_ADDR
34695: LD_VAR 0 1
34699: PUSH
34700: FOR_TO
34701: IFFALSE 34789
// begin k := j + d ;
34703: LD_ADDR_VAR 0 8
34707: PUSH
34708: LD_VAR 0 7
34712: PUSH
34713: LD_VAR 0 9
34717: PLUS
34718: ST_TO_ADDR
// if k > array then
34719: LD_VAR 0 8
34723: PUSH
34724: LD_VAR 0 1
34728: GREATER
34729: IFFALSE 34739
// k := 1 ;
34731: LD_ADDR_VAR 0 8
34735: PUSH
34736: LD_INT 1
34738: ST_TO_ADDR
// if not k then
34739: LD_VAR 0 8
34743: NOT
34744: IFFALSE 34756
// k := array ;
34746: LD_ADDR_VAR 0 8
34750: PUSH
34751: LD_VAR 0 1
34755: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34756: LD_ADDR_VAR 0 10
34760: PUSH
34761: LD_VAR 0 10
34765: PPUSH
34766: LD_VAR 0 8
34770: PPUSH
34771: LD_VAR 0 1
34775: PUSH
34776: LD_VAR 0 7
34780: ARRAY
34781: PPUSH
34782: CALL_OW 1
34786: ST_TO_ADDR
// end ;
34787: GO 34700
34789: POP
34790: POP
// array := tmp ;
34791: LD_ADDR_VAR 0 1
34795: PUSH
34796: LD_VAR 0 10
34800: ST_TO_ADDR
// end ;
34801: GO 34682
34803: POP
34804: POP
// result := array ;
34805: LD_ADDR_VAR 0 5
34809: PUSH
34810: LD_VAR 0 1
34814: ST_TO_ADDR
// end ;
34815: LD_VAR 0 5
34819: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34820: LD_INT 0
34822: PPUSH
34823: PPUSH
// result := 0 ;
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_INT 0
34831: ST_TO_ADDR
// if not array or not value in array then
34832: LD_VAR 0 1
34836: NOT
34837: PUSH
34838: LD_VAR 0 2
34842: PUSH
34843: LD_VAR 0 1
34847: IN
34848: NOT
34849: OR
34850: IFFALSE 34854
// exit ;
34852: GO 34908
// for i = 1 to array do
34854: LD_ADDR_VAR 0 4
34858: PUSH
34859: DOUBLE
34860: LD_INT 1
34862: DEC
34863: ST_TO_ADDR
34864: LD_VAR 0 1
34868: PUSH
34869: FOR_TO
34870: IFFALSE 34906
// if value = array [ i ] then
34872: LD_VAR 0 2
34876: PUSH
34877: LD_VAR 0 1
34881: PUSH
34882: LD_VAR 0 4
34886: ARRAY
34887: EQUAL
34888: IFFALSE 34904
// begin result := i ;
34890: LD_ADDR_VAR 0 3
34894: PUSH
34895: LD_VAR 0 4
34899: ST_TO_ADDR
// exit ;
34900: POP
34901: POP
34902: GO 34908
// end ;
34904: GO 34869
34906: POP
34907: POP
// end ;
34908: LD_VAR 0 3
34912: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34913: LD_INT 0
34915: PPUSH
// vc_chassis := chassis ;
34916: LD_ADDR_OWVAR 37
34920: PUSH
34921: LD_VAR 0 1
34925: ST_TO_ADDR
// vc_engine := engine ;
34926: LD_ADDR_OWVAR 39
34930: PUSH
34931: LD_VAR 0 2
34935: ST_TO_ADDR
// vc_control := control ;
34936: LD_ADDR_OWVAR 38
34940: PUSH
34941: LD_VAR 0 3
34945: ST_TO_ADDR
// vc_weapon := weapon ;
34946: LD_ADDR_OWVAR 40
34950: PUSH
34951: LD_VAR 0 4
34955: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34956: LD_ADDR_OWVAR 41
34960: PUSH
34961: LD_VAR 0 5
34965: ST_TO_ADDR
// end ;
34966: LD_VAR 0 6
34970: RET
// export function WantPlant ( unit ) ; var task ; begin
34971: LD_INT 0
34973: PPUSH
34974: PPUSH
// result := false ;
34975: LD_ADDR_VAR 0 2
34979: PUSH
34980: LD_INT 0
34982: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34983: LD_ADDR_VAR 0 3
34987: PUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 437
34997: ST_TO_ADDR
// if task then
34998: LD_VAR 0 3
35002: IFFALSE 35030
// if task [ 1 ] [ 1 ] = p then
35004: LD_VAR 0 3
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: PUSH
35013: LD_INT 1
35015: ARRAY
35016: PUSH
35017: LD_STRING p
35019: EQUAL
35020: IFFALSE 35030
// result := true ;
35022: LD_ADDR_VAR 0 2
35026: PUSH
35027: LD_INT 1
35029: ST_TO_ADDR
// end ;
35030: LD_VAR 0 2
35034: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35035: LD_INT 0
35037: PPUSH
35038: PPUSH
35039: PPUSH
35040: PPUSH
// if pos < 1 then
35041: LD_VAR 0 2
35045: PUSH
35046: LD_INT 1
35048: LESS
35049: IFFALSE 35053
// exit ;
35051: GO 35356
// if pos = 1 then
35053: LD_VAR 0 2
35057: PUSH
35058: LD_INT 1
35060: EQUAL
35061: IFFALSE 35094
// result := Replace ( arr , pos [ 1 ] , value ) else
35063: LD_ADDR_VAR 0 4
35067: PUSH
35068: LD_VAR 0 1
35072: PPUSH
35073: LD_VAR 0 2
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: PPUSH
35082: LD_VAR 0 3
35086: PPUSH
35087: CALL_OW 1
35091: ST_TO_ADDR
35092: GO 35356
// begin tmp := arr ;
35094: LD_ADDR_VAR 0 6
35098: PUSH
35099: LD_VAR 0 1
35103: ST_TO_ADDR
// s_arr := [ tmp ] ;
35104: LD_ADDR_VAR 0 7
35108: PUSH
35109: LD_VAR 0 6
35113: PUSH
35114: EMPTY
35115: LIST
35116: ST_TO_ADDR
// for i = 1 to pos - 1 do
35117: LD_ADDR_VAR 0 5
35121: PUSH
35122: DOUBLE
35123: LD_INT 1
35125: DEC
35126: ST_TO_ADDR
35127: LD_VAR 0 2
35131: PUSH
35132: LD_INT 1
35134: MINUS
35135: PUSH
35136: FOR_TO
35137: IFFALSE 35182
// begin tmp := tmp [ pos [ i ] ] ;
35139: LD_ADDR_VAR 0 6
35143: PUSH
35144: LD_VAR 0 6
35148: PUSH
35149: LD_VAR 0 2
35153: PUSH
35154: LD_VAR 0 5
35158: ARRAY
35159: ARRAY
35160: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35161: LD_ADDR_VAR 0 7
35165: PUSH
35166: LD_VAR 0 7
35170: PUSH
35171: LD_VAR 0 6
35175: PUSH
35176: EMPTY
35177: LIST
35178: ADD
35179: ST_TO_ADDR
// end ;
35180: GO 35136
35182: POP
35183: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35184: LD_ADDR_VAR 0 6
35188: PUSH
35189: LD_VAR 0 6
35193: PPUSH
35194: LD_VAR 0 2
35198: PUSH
35199: LD_VAR 0 2
35203: ARRAY
35204: PPUSH
35205: LD_VAR 0 3
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35215: LD_ADDR_VAR 0 7
35219: PUSH
35220: LD_VAR 0 7
35224: PPUSH
35225: LD_VAR 0 7
35229: PPUSH
35230: LD_VAR 0 6
35234: PPUSH
35235: CALL_OW 1
35239: ST_TO_ADDR
// for i = s_arr downto 2 do
35240: LD_ADDR_VAR 0 5
35244: PUSH
35245: DOUBLE
35246: LD_VAR 0 7
35250: INC
35251: ST_TO_ADDR
35252: LD_INT 2
35254: PUSH
35255: FOR_DOWNTO
35256: IFFALSE 35340
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35258: LD_ADDR_VAR 0 6
35262: PUSH
35263: LD_VAR 0 7
35267: PUSH
35268: LD_VAR 0 5
35272: PUSH
35273: LD_INT 1
35275: MINUS
35276: ARRAY
35277: PPUSH
35278: LD_VAR 0 2
35282: PUSH
35283: LD_VAR 0 5
35287: PUSH
35288: LD_INT 1
35290: MINUS
35291: ARRAY
35292: PPUSH
35293: LD_VAR 0 7
35297: PUSH
35298: LD_VAR 0 5
35302: ARRAY
35303: PPUSH
35304: CALL_OW 1
35308: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35309: LD_ADDR_VAR 0 7
35313: PUSH
35314: LD_VAR 0 7
35318: PPUSH
35319: LD_VAR 0 5
35323: PUSH
35324: LD_INT 1
35326: MINUS
35327: PPUSH
35328: LD_VAR 0 6
35332: PPUSH
35333: CALL_OW 1
35337: ST_TO_ADDR
// end ;
35338: GO 35255
35340: POP
35341: POP
// result := s_arr [ 1 ] ;
35342: LD_ADDR_VAR 0 4
35346: PUSH
35347: LD_VAR 0 7
35351: PUSH
35352: LD_INT 1
35354: ARRAY
35355: ST_TO_ADDR
// end ; end ;
35356: LD_VAR 0 4
35360: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35361: LD_INT 0
35363: PPUSH
35364: PPUSH
// if not list then
35365: LD_VAR 0 1
35369: NOT
35370: IFFALSE 35374
// exit ;
35372: GO 35465
// i := list [ pos1 ] ;
35374: LD_ADDR_VAR 0 5
35378: PUSH
35379: LD_VAR 0 1
35383: PUSH
35384: LD_VAR 0 2
35388: ARRAY
35389: ST_TO_ADDR
// if not i then
35390: LD_VAR 0 5
35394: NOT
35395: IFFALSE 35399
// exit ;
35397: GO 35465
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35399: LD_ADDR_VAR 0 1
35403: PUSH
35404: LD_VAR 0 1
35408: PPUSH
35409: LD_VAR 0 2
35413: PPUSH
35414: LD_VAR 0 1
35418: PUSH
35419: LD_VAR 0 3
35423: ARRAY
35424: PPUSH
35425: CALL_OW 1
35429: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35430: LD_ADDR_VAR 0 1
35434: PUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: LD_VAR 0 3
35444: PPUSH
35445: LD_VAR 0 5
35449: PPUSH
35450: CALL_OW 1
35454: ST_TO_ADDR
// result := list ;
35455: LD_ADDR_VAR 0 4
35459: PUSH
35460: LD_VAR 0 1
35464: ST_TO_ADDR
// end ;
35465: LD_VAR 0 4
35469: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35470: LD_INT 0
35472: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35473: LD_ADDR_VAR 0 5
35477: PUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 250
35487: PPUSH
35488: LD_VAR 0 1
35492: PPUSH
35493: CALL_OW 251
35497: PPUSH
35498: LD_VAR 0 2
35502: PPUSH
35503: LD_VAR 0 3
35507: PPUSH
35508: LD_VAR 0 4
35512: PPUSH
35513: CALL 35523 0 5
35517: ST_TO_ADDR
// end ;
35518: LD_VAR 0 5
35522: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35523: LD_INT 0
35525: PPUSH
35526: PPUSH
35527: PPUSH
35528: PPUSH
// if not list then
35529: LD_VAR 0 3
35533: NOT
35534: IFFALSE 35538
// exit ;
35536: GO 35926
// result := [ ] ;
35538: LD_ADDR_VAR 0 6
35542: PUSH
35543: EMPTY
35544: ST_TO_ADDR
// for i in list do
35545: LD_ADDR_VAR 0 7
35549: PUSH
35550: LD_VAR 0 3
35554: PUSH
35555: FOR_IN
35556: IFFALSE 35758
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35558: LD_ADDR_VAR 0 9
35562: PUSH
35563: LD_VAR 0 7
35567: PPUSH
35568: LD_VAR 0 1
35572: PPUSH
35573: LD_VAR 0 2
35577: PPUSH
35578: CALL_OW 297
35582: ST_TO_ADDR
// if not result then
35583: LD_VAR 0 6
35587: NOT
35588: IFFALSE 35614
// result := [ [ i , tmp ] ] else
35590: LD_ADDR_VAR 0 6
35594: PUSH
35595: LD_VAR 0 7
35599: PUSH
35600: LD_VAR 0 9
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: ST_TO_ADDR
35612: GO 35756
// begin if result [ result ] [ 2 ] < tmp then
35614: LD_VAR 0 6
35618: PUSH
35619: LD_VAR 0 6
35623: ARRAY
35624: PUSH
35625: LD_INT 2
35627: ARRAY
35628: PUSH
35629: LD_VAR 0 9
35633: LESS
35634: IFFALSE 35676
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35636: LD_ADDR_VAR 0 6
35640: PUSH
35641: LD_VAR 0 6
35645: PPUSH
35646: LD_VAR 0 6
35650: PUSH
35651: LD_INT 1
35653: PLUS
35654: PPUSH
35655: LD_VAR 0 7
35659: PUSH
35660: LD_VAR 0 9
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PPUSH
35669: CALL_OW 2
35673: ST_TO_ADDR
35674: GO 35756
// for j = 1 to result do
35676: LD_ADDR_VAR 0 8
35680: PUSH
35681: DOUBLE
35682: LD_INT 1
35684: DEC
35685: ST_TO_ADDR
35686: LD_VAR 0 6
35690: PUSH
35691: FOR_TO
35692: IFFALSE 35754
// begin if tmp < result [ j ] [ 2 ] then
35694: LD_VAR 0 9
35698: PUSH
35699: LD_VAR 0 6
35703: PUSH
35704: LD_VAR 0 8
35708: ARRAY
35709: PUSH
35710: LD_INT 2
35712: ARRAY
35713: LESS
35714: IFFALSE 35752
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35716: LD_ADDR_VAR 0 6
35720: PUSH
35721: LD_VAR 0 6
35725: PPUSH
35726: LD_VAR 0 8
35730: PPUSH
35731: LD_VAR 0 7
35735: PUSH
35736: LD_VAR 0 9
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PPUSH
35745: CALL_OW 2
35749: ST_TO_ADDR
// break ;
35750: GO 35754
// end ; end ;
35752: GO 35691
35754: POP
35755: POP
// end ; end ;
35756: GO 35555
35758: POP
35759: POP
// if result and not asc then
35760: LD_VAR 0 6
35764: PUSH
35765: LD_VAR 0 4
35769: NOT
35770: AND
35771: IFFALSE 35846
// begin tmp := result ;
35773: LD_ADDR_VAR 0 9
35777: PUSH
35778: LD_VAR 0 6
35782: ST_TO_ADDR
// for i = tmp downto 1 do
35783: LD_ADDR_VAR 0 7
35787: PUSH
35788: DOUBLE
35789: LD_VAR 0 9
35793: INC
35794: ST_TO_ADDR
35795: LD_INT 1
35797: PUSH
35798: FOR_DOWNTO
35799: IFFALSE 35844
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35801: LD_ADDR_VAR 0 6
35805: PUSH
35806: LD_VAR 0 6
35810: PPUSH
35811: LD_VAR 0 9
35815: PUSH
35816: LD_VAR 0 7
35820: MINUS
35821: PUSH
35822: LD_INT 1
35824: PLUS
35825: PPUSH
35826: LD_VAR 0 9
35830: PUSH
35831: LD_VAR 0 7
35835: ARRAY
35836: PPUSH
35837: CALL_OW 1
35841: ST_TO_ADDR
35842: GO 35798
35844: POP
35845: POP
// end ; tmp := [ ] ;
35846: LD_ADDR_VAR 0 9
35850: PUSH
35851: EMPTY
35852: ST_TO_ADDR
// if mode then
35853: LD_VAR 0 5
35857: IFFALSE 35926
// begin for i = 1 to result do
35859: LD_ADDR_VAR 0 7
35863: PUSH
35864: DOUBLE
35865: LD_INT 1
35867: DEC
35868: ST_TO_ADDR
35869: LD_VAR 0 6
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35914
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35877: LD_ADDR_VAR 0 9
35881: PUSH
35882: LD_VAR 0 9
35886: PPUSH
35887: LD_VAR 0 7
35891: PPUSH
35892: LD_VAR 0 6
35896: PUSH
35897: LD_VAR 0 7
35901: ARRAY
35902: PUSH
35903: LD_INT 1
35905: ARRAY
35906: PPUSH
35907: CALL_OW 1
35911: ST_TO_ADDR
35912: GO 35874
35914: POP
35915: POP
// result := tmp ;
35916: LD_ADDR_VAR 0 6
35920: PUSH
35921: LD_VAR 0 9
35925: ST_TO_ADDR
// end ; end ;
35926: LD_VAR 0 6
35930: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35931: LD_INT 0
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35939: LD_ADDR_VAR 0 5
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// if not x or not y then
35961: LD_VAR 0 2
35965: NOT
35966: PUSH
35967: LD_VAR 0 3
35971: NOT
35972: OR
35973: IFFALSE 35977
// exit ;
35975: GO 37629
// if not range then
35977: LD_VAR 0 4
35981: NOT
35982: IFFALSE 35992
// range := 10 ;
35984: LD_ADDR_VAR 0 4
35988: PUSH
35989: LD_INT 10
35991: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35992: LD_ADDR_VAR 0 8
35996: PUSH
35997: LD_INT 81
35999: PUSH
36000: LD_VAR 0 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 92
36011: PUSH
36012: LD_VAR 0 2
36016: PUSH
36017: LD_VAR 0 3
36021: PUSH
36022: LD_VAR 0 4
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 3
36035: PUSH
36036: LD_INT 21
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: PPUSH
36055: CALL_OW 69
36059: ST_TO_ADDR
// if not tmp then
36060: LD_VAR 0 8
36064: NOT
36065: IFFALSE 36069
// exit ;
36067: GO 37629
// for i in tmp do
36069: LD_ADDR_VAR 0 6
36073: PUSH
36074: LD_VAR 0 8
36078: PUSH
36079: FOR_IN
36080: IFFALSE 37604
// begin points := [ 0 , 0 , 0 ] ;
36082: LD_ADDR_VAR 0 9
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: ST_TO_ADDR
// bpoints := 1 ;
36101: LD_ADDR_VAR 0 10
36105: PUSH
36106: LD_INT 1
36108: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36109: LD_VAR 0 6
36113: PPUSH
36114: CALL_OW 247
36118: PUSH
36119: LD_INT 1
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36705
36127: POP
// begin if GetClass ( i ) = 1 then
36128: LD_VAR 0 6
36132: PPUSH
36133: CALL_OW 257
36137: PUSH
36138: LD_INT 1
36140: EQUAL
36141: IFFALSE 36162
// points := [ 10 , 5 , 3 ] ;
36143: LD_ADDR_VAR 0 9
36147: PUSH
36148: LD_INT 10
36150: PUSH
36151: LD_INT 5
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36162: LD_VAR 0 6
36166: PPUSH
36167: CALL_OW 257
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: LD_INT 4
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: IN
36186: IFFALSE 36207
// points := [ 3 , 2 , 1 ] ;
36188: LD_ADDR_VAR 0 9
36192: PUSH
36193: LD_INT 3
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36207: LD_VAR 0 6
36211: PPUSH
36212: CALL_OW 257
36216: PUSH
36217: LD_INT 5
36219: EQUAL
36220: IFFALSE 36241
// points := [ 130 , 5 , 2 ] ;
36222: LD_ADDR_VAR 0 9
36226: PUSH
36227: LD_INT 130
36229: PUSH
36230: LD_INT 5
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36241: LD_VAR 0 6
36245: PPUSH
36246: CALL_OW 257
36250: PUSH
36251: LD_INT 8
36253: EQUAL
36254: IFFALSE 36275
// points := [ 35 , 35 , 30 ] ;
36256: LD_ADDR_VAR 0 9
36260: PUSH
36261: LD_INT 35
36263: PUSH
36264: LD_INT 35
36266: PUSH
36267: LD_INT 30
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36275: LD_VAR 0 6
36279: PPUSH
36280: CALL_OW 257
36284: PUSH
36285: LD_INT 9
36287: EQUAL
36288: IFFALSE 36309
// points := [ 20 , 55 , 40 ] ;
36290: LD_ADDR_VAR 0 9
36294: PUSH
36295: LD_INT 20
36297: PUSH
36298: LD_INT 55
36300: PUSH
36301: LD_INT 40
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 257
36318: PUSH
36319: LD_INT 12
36321: PUSH
36322: LD_INT 16
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: IN
36329: IFFALSE 36350
// points := [ 5 , 3 , 2 ] ;
36331: LD_ADDR_VAR 0 9
36335: PUSH
36336: LD_INT 5
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36350: LD_VAR 0 6
36354: PPUSH
36355: CALL_OW 257
36359: PUSH
36360: LD_INT 17
36362: EQUAL
36363: IFFALSE 36384
// points := [ 100 , 50 , 75 ] ;
36365: LD_ADDR_VAR 0 9
36369: PUSH
36370: LD_INT 100
36372: PUSH
36373: LD_INT 50
36375: PUSH
36376: LD_INT 75
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36384: LD_VAR 0 6
36388: PPUSH
36389: CALL_OW 257
36393: PUSH
36394: LD_INT 15
36396: EQUAL
36397: IFFALSE 36418
// points := [ 10 , 5 , 3 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 10
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 257
36427: PUSH
36428: LD_INT 14
36430: EQUAL
36431: IFFALSE 36452
// points := [ 10 , 0 , 0 ] ;
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: LD_INT 10
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 257
36461: PUSH
36462: LD_INT 11
36464: EQUAL
36465: IFFALSE 36486
// points := [ 30 , 10 , 5 ] ;
36467: LD_ADDR_VAR 0 9
36471: PUSH
36472: LD_INT 30
36474: PUSH
36475: LD_INT 10
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36486: LD_VAR 0 1
36490: PPUSH
36491: LD_INT 5
36493: PPUSH
36494: CALL_OW 321
36498: PUSH
36499: LD_INT 2
36501: EQUAL
36502: IFFALSE 36519
// bpoints := bpoints * 1.8 ;
36504: LD_ADDR_VAR 0 10
36508: PUSH
36509: LD_VAR 0 10
36513: PUSH
36514: LD_REAL  1.80000000000000E+0000
36517: MUL
36518: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36519: LD_VAR 0 6
36523: PPUSH
36524: CALL_OW 257
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: LD_INT 4
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: IN
36547: PUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: LD_INT 51
36555: PPUSH
36556: CALL_OW 321
36560: PUSH
36561: LD_INT 2
36563: EQUAL
36564: AND
36565: IFFALSE 36582
// bpoints := bpoints * 1.2 ;
36567: LD_ADDR_VAR 0 10
36571: PUSH
36572: LD_VAR 0 10
36576: PUSH
36577: LD_REAL  1.20000000000000E+0000
36580: MUL
36581: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36582: LD_VAR 0 6
36586: PPUSH
36587: CALL_OW 257
36591: PUSH
36592: LD_INT 5
36594: PUSH
36595: LD_INT 7
36597: PUSH
36598: LD_INT 9
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: IN
36606: PUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: LD_INT 52
36614: PPUSH
36615: CALL_OW 321
36619: PUSH
36620: LD_INT 2
36622: EQUAL
36623: AND
36624: IFFALSE 36641
// bpoints := bpoints * 1.5 ;
36626: LD_ADDR_VAR 0 10
36630: PUSH
36631: LD_VAR 0 10
36635: PUSH
36636: LD_REAL  1.50000000000000E+0000
36639: MUL
36640: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36641: LD_VAR 0 1
36645: PPUSH
36646: LD_INT 66
36648: PPUSH
36649: CALL_OW 321
36653: PUSH
36654: LD_INT 2
36656: EQUAL
36657: IFFALSE 36674
// bpoints := bpoints * 1.1 ;
36659: LD_ADDR_VAR 0 10
36663: PUSH
36664: LD_VAR 0 10
36668: PUSH
36669: LD_REAL  1.10000000000000E+0000
36672: MUL
36673: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36674: LD_ADDR_VAR 0 10
36678: PUSH
36679: LD_VAR 0 10
36683: PUSH
36684: LD_VAR 0 6
36688: PPUSH
36689: LD_INT 1
36691: PPUSH
36692: CALL_OW 259
36696: PUSH
36697: LD_REAL  1.15000000000000E+0000
36700: MUL
36701: MUL
36702: ST_TO_ADDR
// end ; unit_vehicle :
36703: GO 37533
36705: LD_INT 2
36707: DOUBLE
36708: EQUAL
36709: IFTRUE 36713
36711: GO 37521
36713: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36714: LD_VAR 0 6
36718: PPUSH
36719: CALL_OW 264
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 42
36729: PUSH
36730: LD_INT 24
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: IN
36738: IFFALSE 36759
// points := [ 25 , 5 , 3 ] ;
36740: LD_ADDR_VAR 0 9
36744: PUSH
36745: LD_INT 25
36747: PUSH
36748: LD_INT 5
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: LIST
36758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36759: LD_VAR 0 6
36763: PPUSH
36764: CALL_OW 264
36768: PUSH
36769: LD_INT 4
36771: PUSH
36772: LD_INT 43
36774: PUSH
36775: LD_INT 25
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: IN
36783: IFFALSE 36804
// points := [ 40 , 15 , 5 ] ;
36785: LD_ADDR_VAR 0 9
36789: PUSH
36790: LD_INT 40
36792: PUSH
36793: LD_INT 15
36795: PUSH
36796: LD_INT 5
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36804: LD_VAR 0 6
36808: PPUSH
36809: CALL_OW 264
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: LD_INT 23
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: IN
36824: IFFALSE 36845
// points := [ 7 , 25 , 8 ] ;
36826: LD_ADDR_VAR 0 9
36830: PUSH
36831: LD_INT 7
36833: PUSH
36834: LD_INT 25
36836: PUSH
36837: LD_INT 8
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36845: LD_VAR 0 6
36849: PPUSH
36850: CALL_OW 264
36854: PUSH
36855: LD_INT 5
36857: PUSH
36858: LD_INT 27
36860: PUSH
36861: LD_INT 44
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: IN
36869: IFFALSE 36890
// points := [ 14 , 50 , 16 ] ;
36871: LD_ADDR_VAR 0 9
36875: PUSH
36876: LD_INT 14
36878: PUSH
36879: LD_INT 50
36881: PUSH
36882: LD_INT 16
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36890: LD_VAR 0 6
36894: PPUSH
36895: CALL_OW 264
36899: PUSH
36900: LD_INT 6
36902: PUSH
36903: LD_INT 46
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: IN
36910: IFFALSE 36931
// points := [ 32 , 120 , 70 ] ;
36912: LD_ADDR_VAR 0 9
36916: PUSH
36917: LD_INT 32
36919: PUSH
36920: LD_INT 120
36922: PUSH
36923: LD_INT 70
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36931: LD_VAR 0 6
36935: PPUSH
36936: CALL_OW 264
36940: PUSH
36941: LD_INT 7
36943: PUSH
36944: LD_INT 28
36946: PUSH
36947: LD_INT 45
36949: PUSH
36950: LD_EXP 119
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: IN
36961: IFFALSE 36982
// points := [ 35 , 20 , 45 ] ;
36963: LD_ADDR_VAR 0 9
36967: PUSH
36968: LD_INT 35
36970: PUSH
36971: LD_INT 20
36973: PUSH
36974: LD_INT 45
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36982: LD_VAR 0 6
36986: PPUSH
36987: CALL_OW 264
36991: PUSH
36992: LD_INT 47
36994: PUSH
36995: EMPTY
36996: LIST
36997: IN
36998: IFFALSE 37019
// points := [ 67 , 45 , 75 ] ;
37000: LD_ADDR_VAR 0 9
37004: PUSH
37005: LD_INT 67
37007: PUSH
37008: LD_INT 45
37010: PUSH
37011: LD_INT 75
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37019: LD_VAR 0 6
37023: PPUSH
37024: CALL_OW 264
37028: PUSH
37029: LD_INT 26
37031: PUSH
37032: EMPTY
37033: LIST
37034: IN
37035: IFFALSE 37056
// points := [ 120 , 30 , 80 ] ;
37037: LD_ADDR_VAR 0 9
37041: PUSH
37042: LD_INT 120
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: LD_INT 80
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37056: LD_VAR 0 6
37060: PPUSH
37061: CALL_OW 264
37065: PUSH
37066: LD_INT 22
37068: PUSH
37069: EMPTY
37070: LIST
37071: IN
37072: IFFALSE 37093
// points := [ 40 , 1 , 1 ] ;
37074: LD_ADDR_VAR 0 9
37078: PUSH
37079: LD_INT 40
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37093: LD_VAR 0 6
37097: PPUSH
37098: CALL_OW 264
37102: PUSH
37103: LD_INT 29
37105: PUSH
37106: EMPTY
37107: LIST
37108: IN
37109: IFFALSE 37130
// points := [ 70 , 200 , 400 ] ;
37111: LD_ADDR_VAR 0 9
37115: PUSH
37116: LD_INT 70
37118: PUSH
37119: LD_INT 200
37121: PUSH
37122: LD_INT 400
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37130: LD_VAR 0 6
37134: PPUSH
37135: CALL_OW 264
37139: PUSH
37140: LD_INT 14
37142: PUSH
37143: LD_INT 53
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: IN
37150: IFFALSE 37171
// points := [ 40 , 10 , 20 ] ;
37152: LD_ADDR_VAR 0 9
37156: PUSH
37157: LD_INT 40
37159: PUSH
37160: LD_INT 10
37162: PUSH
37163: LD_INT 20
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37171: LD_VAR 0 6
37175: PPUSH
37176: CALL_OW 264
37180: PUSH
37181: LD_INT 9
37183: PUSH
37184: EMPTY
37185: LIST
37186: IN
37187: IFFALSE 37208
// points := [ 5 , 70 , 20 ] ;
37189: LD_ADDR_VAR 0 9
37193: PUSH
37194: LD_INT 5
37196: PUSH
37197: LD_INT 70
37199: PUSH
37200: LD_INT 20
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37208: LD_VAR 0 6
37212: PPUSH
37213: CALL_OW 264
37217: PUSH
37218: LD_INT 10
37220: PUSH
37221: EMPTY
37222: LIST
37223: IN
37224: IFFALSE 37245
// points := [ 35 , 110 , 70 ] ;
37226: LD_ADDR_VAR 0 9
37230: PUSH
37231: LD_INT 35
37233: PUSH
37234: LD_INT 110
37236: PUSH
37237: LD_INT 70
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37245: LD_VAR 0 6
37249: PPUSH
37250: CALL_OW 265
37254: PUSH
37255: LD_INT 25
37257: EQUAL
37258: IFFALSE 37279
// points := [ 80 , 65 , 100 ] ;
37260: LD_ADDR_VAR 0 9
37264: PUSH
37265: LD_INT 80
37267: PUSH
37268: LD_INT 65
37270: PUSH
37271: LD_INT 100
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 263
37288: PUSH
37289: LD_INT 1
37291: EQUAL
37292: IFFALSE 37327
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37294: LD_ADDR_VAR 0 10
37298: PUSH
37299: LD_VAR 0 10
37303: PUSH
37304: LD_VAR 0 6
37308: PPUSH
37309: CALL_OW 311
37313: PPUSH
37314: LD_INT 3
37316: PPUSH
37317: CALL_OW 259
37321: PUSH
37322: LD_INT 4
37324: MUL
37325: MUL
37326: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37327: LD_VAR 0 6
37331: PPUSH
37332: CALL_OW 263
37336: PUSH
37337: LD_INT 2
37339: EQUAL
37340: IFFALSE 37391
// begin j := IsControledBy ( i ) ;
37342: LD_ADDR_VAR 0 7
37346: PUSH
37347: LD_VAR 0 6
37351: PPUSH
37352: CALL_OW 312
37356: ST_TO_ADDR
// if j then
37357: LD_VAR 0 7
37361: IFFALSE 37391
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37363: LD_ADDR_VAR 0 10
37367: PUSH
37368: LD_VAR 0 10
37372: PUSH
37373: LD_VAR 0 7
37377: PPUSH
37378: LD_INT 3
37380: PPUSH
37381: CALL_OW 259
37385: PUSH
37386: LD_INT 3
37388: MUL
37389: MUL
37390: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 264
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: LD_INT 6
37406: PUSH
37407: LD_INT 46
37409: PUSH
37410: LD_INT 44
37412: PUSH
37413: LD_INT 47
37415: PUSH
37416: LD_INT 45
37418: PUSH
37419: LD_INT 28
37421: PUSH
37422: LD_INT 7
37424: PUSH
37425: LD_INT 27
37427: PUSH
37428: LD_INT 29
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: IN
37443: PUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: LD_INT 52
37451: PPUSH
37452: CALL_OW 321
37456: PUSH
37457: LD_INT 2
37459: EQUAL
37460: AND
37461: IFFALSE 37478
// bpoints := bpoints * 1.2 ;
37463: LD_ADDR_VAR 0 10
37467: PUSH
37468: LD_VAR 0 10
37472: PUSH
37473: LD_REAL  1.20000000000000E+0000
37476: MUL
37477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37478: LD_VAR 0 6
37482: PPUSH
37483: CALL_OW 264
37487: PUSH
37488: LD_INT 6
37490: PUSH
37491: LD_INT 46
37493: PUSH
37494: LD_INT 47
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: IN
37502: IFFALSE 37519
// bpoints := bpoints * 1.2 ;
37504: LD_ADDR_VAR 0 10
37508: PUSH
37509: LD_VAR 0 10
37513: PUSH
37514: LD_REAL  1.20000000000000E+0000
37517: MUL
37518: ST_TO_ADDR
// end ; unit_building :
37519: GO 37533
37521: LD_INT 3
37523: DOUBLE
37524: EQUAL
37525: IFTRUE 37529
37527: GO 37532
37529: POP
// ; end ;
37530: GO 37533
37532: POP
// for j = 1 to 3 do
37533: LD_ADDR_VAR 0 7
37537: PUSH
37538: DOUBLE
37539: LD_INT 1
37541: DEC
37542: ST_TO_ADDR
37543: LD_INT 3
37545: PUSH
37546: FOR_TO
37547: IFFALSE 37600
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: LD_VAR 0 5
37558: PPUSH
37559: LD_VAR 0 7
37563: PPUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_VAR 0 7
37573: ARRAY
37574: PUSH
37575: LD_VAR 0 9
37579: PUSH
37580: LD_VAR 0 7
37584: ARRAY
37585: PUSH
37586: LD_VAR 0 10
37590: MUL
37591: PLUS
37592: PPUSH
37593: CALL_OW 1
37597: ST_TO_ADDR
37598: GO 37546
37600: POP
37601: POP
// end ;
37602: GO 36079
37604: POP
37605: POP
// result := Replace ( result , 4 , tmp ) ;
37606: LD_ADDR_VAR 0 5
37610: PUSH
37611: LD_VAR 0 5
37615: PPUSH
37616: LD_INT 4
37618: PPUSH
37619: LD_VAR 0 8
37623: PPUSH
37624: CALL_OW 1
37628: ST_TO_ADDR
// end ;
37629: LD_VAR 0 5
37633: RET
// export function DangerAtRange ( unit , range ) ; begin
37634: LD_INT 0
37636: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 255
37651: PPUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 250
37661: PPUSH
37662: LD_VAR 0 1
37666: PPUSH
37667: CALL_OW 251
37671: PPUSH
37672: LD_VAR 0 2
37676: PPUSH
37677: CALL 35931 0 4
37681: ST_TO_ADDR
// end ;
37682: LD_VAR 0 3
37686: RET
// export function DangerInArea ( side , area ) ; begin
37687: LD_INT 0
37689: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: LD_INT 81
37702: PUSH
37703: LD_VAR 0 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PPUSH
37712: CALL_OW 70
37716: ST_TO_ADDR
// end ;
37717: LD_VAR 0 3
37721: RET
// export function IsExtension ( b ) ; begin
37722: LD_INT 0
37724: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37725: LD_ADDR_VAR 0 2
37729: PUSH
37730: LD_VAR 0 1
37734: PUSH
37735: LD_INT 23
37737: PUSH
37738: LD_INT 20
37740: PUSH
37741: LD_INT 22
37743: PUSH
37744: LD_INT 17
37746: PUSH
37747: LD_INT 24
37749: PUSH
37750: LD_INT 21
37752: PUSH
37753: LD_INT 19
37755: PUSH
37756: LD_INT 16
37758: PUSH
37759: LD_INT 25
37761: PUSH
37762: LD_INT 18
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: IN
37777: ST_TO_ADDR
// end ;
37778: LD_VAR 0 2
37782: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37783: LD_INT 0
37785: PPUSH
37786: PPUSH
37787: PPUSH
// result := [ ] ;
37788: LD_ADDR_VAR 0 4
37792: PUSH
37793: EMPTY
37794: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37795: LD_ADDR_VAR 0 5
37799: PUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: LD_INT 21
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PPUSH
37815: CALL_OW 70
37819: ST_TO_ADDR
// if not tmp then
37820: LD_VAR 0 5
37824: NOT
37825: IFFALSE 37829
// exit ;
37827: GO 37893
// if checkLink then
37829: LD_VAR 0 3
37833: IFFALSE 37883
// begin for i in tmp do
37835: LD_ADDR_VAR 0 6
37839: PUSH
37840: LD_VAR 0 5
37844: PUSH
37845: FOR_IN
37846: IFFALSE 37881
// if GetBase ( i ) <> base then
37848: LD_VAR 0 6
37852: PPUSH
37853: CALL_OW 274
37857: PUSH
37858: LD_VAR 0 1
37862: NONEQUAL
37863: IFFALSE 37879
// ComLinkToBase ( base , i ) ;
37865: LD_VAR 0 1
37869: PPUSH
37870: LD_VAR 0 6
37874: PPUSH
37875: CALL_OW 169
37879: GO 37845
37881: POP
37882: POP
// end ; result := tmp ;
37883: LD_ADDR_VAR 0 4
37887: PUSH
37888: LD_VAR 0 5
37892: ST_TO_ADDR
// end ;
37893: LD_VAR 0 4
37897: RET
// export function ComComplete ( units , b ) ; var i ; begin
37898: LD_INT 0
37900: PPUSH
37901: PPUSH
// if not units then
37902: LD_VAR 0 1
37906: NOT
37907: IFFALSE 37911
// exit ;
37909: GO 38001
// for i in units do
37911: LD_ADDR_VAR 0 4
37915: PUSH
37916: LD_VAR 0 1
37920: PUSH
37921: FOR_IN
37922: IFFALSE 37999
// if BuildingStatus ( b ) = bs_build then
37924: LD_VAR 0 2
37928: PPUSH
37929: CALL_OW 461
37933: PUSH
37934: LD_INT 1
37936: EQUAL
37937: IFFALSE 37997
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37939: LD_VAR 0 4
37943: PPUSH
37944: LD_STRING h
37946: PUSH
37947: LD_VAR 0 2
37951: PPUSH
37952: CALL_OW 250
37956: PUSH
37957: LD_VAR 0 2
37961: PPUSH
37962: CALL_OW 251
37966: PUSH
37967: LD_VAR 0 2
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: PUSH
37990: EMPTY
37991: LIST
37992: PPUSH
37993: CALL_OW 446
37997: GO 37921
37999: POP
38000: POP
// end ;
38001: LD_VAR 0 3
38005: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38006: LD_INT 0
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
38012: PPUSH
38013: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38014: LD_VAR 0 1
38018: NOT
38019: PUSH
38020: LD_VAR 0 1
38024: PPUSH
38025: CALL_OW 263
38029: PUSH
38030: LD_INT 2
38032: NONEQUAL
38033: OR
38034: IFFALSE 38038
// exit ;
38036: GO 38354
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38038: LD_ADDR_VAR 0 6
38042: PUSH
38043: LD_INT 22
38045: PUSH
38046: LD_VAR 0 1
38050: PPUSH
38051: CALL_OW 255
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 30
38065: PUSH
38066: LD_INT 36
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 34
38075: PUSH
38076: LD_INT 31
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PPUSH
38092: CALL_OW 69
38096: ST_TO_ADDR
// if not tmp then
38097: LD_VAR 0 6
38101: NOT
38102: IFFALSE 38106
// exit ;
38104: GO 38354
// result := [ ] ;
38106: LD_ADDR_VAR 0 2
38110: PUSH
38111: EMPTY
38112: ST_TO_ADDR
// for i in tmp do
38113: LD_ADDR_VAR 0 3
38117: PUSH
38118: LD_VAR 0 6
38122: PUSH
38123: FOR_IN
38124: IFFALSE 38195
// begin t := UnitsInside ( i ) ;
38126: LD_ADDR_VAR 0 4
38130: PUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: CALL_OW 313
38140: ST_TO_ADDR
// if t then
38141: LD_VAR 0 4
38145: IFFALSE 38193
// for j in t do
38147: LD_ADDR_VAR 0 7
38151: PUSH
38152: LD_VAR 0 4
38156: PUSH
38157: FOR_IN
38158: IFFALSE 38191
// result := Replace ( result , result + 1 , j ) ;
38160: LD_ADDR_VAR 0 2
38164: PUSH
38165: LD_VAR 0 2
38169: PPUSH
38170: LD_VAR 0 2
38174: PUSH
38175: LD_INT 1
38177: PLUS
38178: PPUSH
38179: LD_VAR 0 7
38183: PPUSH
38184: CALL_OW 1
38188: ST_TO_ADDR
38189: GO 38157
38191: POP
38192: POP
// end ;
38193: GO 38123
38195: POP
38196: POP
// if not result then
38197: LD_VAR 0 2
38201: NOT
38202: IFFALSE 38206
// exit ;
38204: GO 38354
// mech := result [ 1 ] ;
38206: LD_ADDR_VAR 0 5
38210: PUSH
38211: LD_VAR 0 2
38215: PUSH
38216: LD_INT 1
38218: ARRAY
38219: ST_TO_ADDR
// if result > 1 then
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 1
38227: GREATER
38228: IFFALSE 38340
// begin for i = 2 to result do
38230: LD_ADDR_VAR 0 3
38234: PUSH
38235: DOUBLE
38236: LD_INT 2
38238: DEC
38239: ST_TO_ADDR
38240: LD_VAR 0 2
38244: PUSH
38245: FOR_TO
38246: IFFALSE 38338
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38248: LD_ADDR_VAR 0 4
38252: PUSH
38253: LD_VAR 0 2
38257: PUSH
38258: LD_VAR 0 3
38262: ARRAY
38263: PPUSH
38264: LD_INT 3
38266: PPUSH
38267: CALL_OW 259
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_VAR 0 3
38281: ARRAY
38282: PPUSH
38283: CALL_OW 432
38287: MINUS
38288: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38289: LD_VAR 0 4
38293: PUSH
38294: LD_VAR 0 5
38298: PPUSH
38299: LD_INT 3
38301: PPUSH
38302: CALL_OW 259
38306: PUSH
38307: LD_VAR 0 5
38311: PPUSH
38312: CALL_OW 432
38316: MINUS
38317: GREATEREQUAL
38318: IFFALSE 38336
// mech := result [ i ] ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_VAR 0 2
38329: PUSH
38330: LD_VAR 0 3
38334: ARRAY
38335: ST_TO_ADDR
// end ;
38336: GO 38245
38338: POP
38339: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38340: LD_VAR 0 1
38344: PPUSH
38345: LD_VAR 0 5
38349: PPUSH
38350: CALL_OW 135
// end ;
38354: LD_VAR 0 2
38358: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38359: LD_INT 0
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
// result := [ ] ;
38374: LD_ADDR_VAR 0 7
38378: PUSH
38379: EMPTY
38380: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 266
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: IN
38401: NOT
38402: IFFALSE 38406
// exit ;
38404: GO 40040
// if name then
38406: LD_VAR 0 3
38410: IFFALSE 38426
// SetBName ( base_dep , name ) ;
38412: LD_VAR 0 1
38416: PPUSH
38417: LD_VAR 0 3
38421: PPUSH
38422: CALL_OW 500
// base := GetBase ( base_dep ) ;
38426: LD_ADDR_VAR 0 15
38430: PUSH
38431: LD_VAR 0 1
38435: PPUSH
38436: CALL_OW 274
38440: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38441: LD_ADDR_VAR 0 16
38445: PUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 255
38455: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38456: LD_ADDR_VAR 0 17
38460: PUSH
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL_OW 248
38470: ST_TO_ADDR
// if sources then
38471: LD_VAR 0 5
38475: IFFALSE 38522
// for i = 1 to 3 do
38477: LD_ADDR_VAR 0 8
38481: PUSH
38482: DOUBLE
38483: LD_INT 1
38485: DEC
38486: ST_TO_ADDR
38487: LD_INT 3
38489: PUSH
38490: FOR_TO
38491: IFFALSE 38520
// AddResourceType ( base , i , sources [ i ] ) ;
38493: LD_VAR 0 15
38497: PPUSH
38498: LD_VAR 0 8
38502: PPUSH
38503: LD_VAR 0 5
38507: PUSH
38508: LD_VAR 0 8
38512: ARRAY
38513: PPUSH
38514: CALL_OW 276
38518: GO 38490
38520: POP
38521: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38522: LD_ADDR_VAR 0 18
38526: PUSH
38527: LD_VAR 0 15
38531: PPUSH
38532: LD_VAR 0 2
38536: PPUSH
38537: LD_INT 1
38539: PPUSH
38540: CALL 37783 0 3
38544: ST_TO_ADDR
// InitHc ;
38545: CALL_OW 19
// InitUc ;
38549: CALL_OW 18
// uc_side := side ;
38553: LD_ADDR_OWVAR 20
38557: PUSH
38558: LD_VAR 0 16
38562: ST_TO_ADDR
// uc_nation := nation ;
38563: LD_ADDR_OWVAR 21
38567: PUSH
38568: LD_VAR 0 17
38572: ST_TO_ADDR
// if buildings then
38573: LD_VAR 0 18
38577: IFFALSE 39899
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38579: LD_ADDR_VAR 0 19
38583: PUSH
38584: LD_VAR 0 18
38588: PPUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 30
38594: PUSH
38595: LD_INT 29
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 30
38604: PUSH
38605: LD_INT 30
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: PPUSH
38617: CALL_OW 72
38621: ST_TO_ADDR
// if tmp then
38622: LD_VAR 0 19
38626: IFFALSE 38674
// for i in tmp do
38628: LD_ADDR_VAR 0 8
38632: PUSH
38633: LD_VAR 0 19
38637: PUSH
38638: FOR_IN
38639: IFFALSE 38672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38641: LD_VAR 0 8
38645: PPUSH
38646: CALL_OW 250
38650: PPUSH
38651: LD_VAR 0 8
38655: PPUSH
38656: CALL_OW 251
38660: PPUSH
38661: LD_VAR 0 16
38665: PPUSH
38666: CALL_OW 441
38670: GO 38638
38672: POP
38673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38674: LD_VAR 0 18
38678: PPUSH
38679: LD_INT 2
38681: PUSH
38682: LD_INT 30
38684: PUSH
38685: LD_INT 32
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 30
38694: PUSH
38695: LD_INT 33
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: PPUSH
38707: CALL_OW 72
38711: IFFALSE 38799
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38713: LD_ADDR_VAR 0 8
38717: PUSH
38718: LD_VAR 0 18
38722: PPUSH
38723: LD_INT 2
38725: PUSH
38726: LD_INT 30
38728: PUSH
38729: LD_INT 32
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 30
38738: PUSH
38739: LD_INT 33
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: PPUSH
38751: CALL_OW 72
38755: PUSH
38756: FOR_IN
38757: IFFALSE 38797
// begin if not GetBWeapon ( i ) then
38759: LD_VAR 0 8
38763: PPUSH
38764: CALL_OW 269
38768: NOT
38769: IFFALSE 38795
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38771: LD_VAR 0 8
38775: PPUSH
38776: LD_VAR 0 8
38780: PPUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: CALL 40045 0 2
38790: PPUSH
38791: CALL_OW 431
// end ;
38795: GO 38756
38797: POP
38798: POP
// end ; for i = 1 to personel do
38799: LD_ADDR_VAR 0 8
38803: PUSH
38804: DOUBLE
38805: LD_INT 1
38807: DEC
38808: ST_TO_ADDR
38809: LD_VAR 0 6
38813: PUSH
38814: FOR_TO
38815: IFFALSE 39879
// begin if i > 4 then
38817: LD_VAR 0 8
38821: PUSH
38822: LD_INT 4
38824: GREATER
38825: IFFALSE 38829
// break ;
38827: GO 39879
// case i of 1 :
38829: LD_VAR 0 8
38833: PUSH
38834: LD_INT 1
38836: DOUBLE
38837: EQUAL
38838: IFTRUE 38842
38840: GO 38922
38842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38843: LD_ADDR_VAR 0 12
38847: PUSH
38848: LD_VAR 0 18
38852: PPUSH
38853: LD_INT 22
38855: PUSH
38856: LD_VAR 0 16
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 58
38867: PUSH
38868: EMPTY
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: LD_INT 30
38876: PUSH
38877: LD_INT 32
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 30
38886: PUSH
38887: LD_INT 4
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 30
38896: PUSH
38897: LD_INT 5
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: PPUSH
38915: CALL_OW 72
38919: ST_TO_ADDR
38920: GO 39144
38922: LD_INT 2
38924: DOUBLE
38925: EQUAL
38926: IFTRUE 38930
38928: GO 38992
38930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38931: LD_ADDR_VAR 0 12
38935: PUSH
38936: LD_VAR 0 18
38940: PPUSH
38941: LD_INT 22
38943: PUSH
38944: LD_VAR 0 16
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 30
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 30
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PPUSH
38985: CALL_OW 72
38989: ST_TO_ADDR
38990: GO 39144
38992: LD_INT 3
38994: DOUBLE
38995: EQUAL
38996: IFTRUE 39000
38998: GO 39062
39000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39001: LD_ADDR_VAR 0 12
39005: PUSH
39006: LD_VAR 0 18
39010: PPUSH
39011: LD_INT 22
39013: PUSH
39014: LD_VAR 0 16
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 30
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 30
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PPUSH
39055: CALL_OW 72
39059: ST_TO_ADDR
39060: GO 39144
39062: LD_INT 4
39064: DOUBLE
39065: EQUAL
39066: IFTRUE 39070
39068: GO 39143
39070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39071: LD_ADDR_VAR 0 12
39075: PUSH
39076: LD_VAR 0 18
39080: PPUSH
39081: LD_INT 22
39083: PUSH
39084: LD_VAR 0 16
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 30
39098: PUSH
39099: LD_INT 6
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 30
39108: PUSH
39109: LD_INT 7
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 30
39118: PUSH
39119: LD_INT 8
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PPUSH
39136: CALL_OW 72
39140: ST_TO_ADDR
39141: GO 39144
39143: POP
// if i = 1 then
39144: LD_VAR 0 8
39148: PUSH
39149: LD_INT 1
39151: EQUAL
39152: IFFALSE 39263
// begin tmp := [ ] ;
39154: LD_ADDR_VAR 0 19
39158: PUSH
39159: EMPTY
39160: ST_TO_ADDR
// for j in f do
39161: LD_ADDR_VAR 0 9
39165: PUSH
39166: LD_VAR 0 12
39170: PUSH
39171: FOR_IN
39172: IFFALSE 39245
// if GetBType ( j ) = b_bunker then
39174: LD_VAR 0 9
39178: PPUSH
39179: CALL_OW 266
39183: PUSH
39184: LD_INT 32
39186: EQUAL
39187: IFFALSE 39214
// tmp := Insert ( tmp , 1 , j ) else
39189: LD_ADDR_VAR 0 19
39193: PUSH
39194: LD_VAR 0 19
39198: PPUSH
39199: LD_INT 1
39201: PPUSH
39202: LD_VAR 0 9
39206: PPUSH
39207: CALL_OW 2
39211: ST_TO_ADDR
39212: GO 39243
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39214: LD_ADDR_VAR 0 19
39218: PUSH
39219: LD_VAR 0 19
39223: PPUSH
39224: LD_VAR 0 19
39228: PUSH
39229: LD_INT 1
39231: PLUS
39232: PPUSH
39233: LD_VAR 0 9
39237: PPUSH
39238: CALL_OW 2
39242: ST_TO_ADDR
39243: GO 39171
39245: POP
39246: POP
// if tmp then
39247: LD_VAR 0 19
39251: IFFALSE 39263
// f := tmp ;
39253: LD_ADDR_VAR 0 12
39257: PUSH
39258: LD_VAR 0 19
39262: ST_TO_ADDR
// end ; x := personel [ i ] ;
39263: LD_ADDR_VAR 0 13
39267: PUSH
39268: LD_VAR 0 6
39272: PUSH
39273: LD_VAR 0 8
39277: ARRAY
39278: ST_TO_ADDR
// if x = - 1 then
39279: LD_VAR 0 13
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: EQUAL
39288: IFFALSE 39497
// begin for j in f do
39290: LD_ADDR_VAR 0 9
39294: PUSH
39295: LD_VAR 0 12
39299: PUSH
39300: FOR_IN
39301: IFFALSE 39493
// repeat InitHc ;
39303: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39307: LD_VAR 0 9
39311: PPUSH
39312: CALL_OW 266
39316: PUSH
39317: LD_INT 5
39319: EQUAL
39320: IFFALSE 39390
// begin if UnitsInside ( j ) < 3 then
39322: LD_VAR 0 9
39326: PPUSH
39327: CALL_OW 313
39331: PUSH
39332: LD_INT 3
39334: LESS
39335: IFFALSE 39371
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39337: LD_INT 0
39339: PPUSH
39340: LD_INT 5
39342: PUSH
39343: LD_INT 8
39345: PUSH
39346: LD_INT 9
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: PUSH
39354: LD_VAR 0 17
39358: ARRAY
39359: PPUSH
39360: LD_VAR 0 4
39364: PPUSH
39365: CALL_OW 380
39369: GO 39388
// PrepareHuman ( false , i , skill ) ;
39371: LD_INT 0
39373: PPUSH
39374: LD_VAR 0 8
39378: PPUSH
39379: LD_VAR 0 4
39383: PPUSH
39384: CALL_OW 380
// end else
39388: GO 39407
// PrepareHuman ( false , i , skill ) ;
39390: LD_INT 0
39392: PPUSH
39393: LD_VAR 0 8
39397: PPUSH
39398: LD_VAR 0 4
39402: PPUSH
39403: CALL_OW 380
// un := CreateHuman ;
39407: LD_ADDR_VAR 0 14
39411: PUSH
39412: CALL_OW 44
39416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39417: LD_ADDR_VAR 0 7
39421: PUSH
39422: LD_VAR 0 7
39426: PPUSH
39427: LD_INT 1
39429: PPUSH
39430: LD_VAR 0 14
39434: PPUSH
39435: CALL_OW 2
39439: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39440: LD_VAR 0 14
39444: PPUSH
39445: LD_VAR 0 9
39449: PPUSH
39450: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39454: LD_VAR 0 9
39458: PPUSH
39459: CALL_OW 313
39463: PUSH
39464: LD_INT 6
39466: EQUAL
39467: PUSH
39468: LD_VAR 0 9
39472: PPUSH
39473: CALL_OW 266
39477: PUSH
39478: LD_INT 32
39480: PUSH
39481: LD_INT 31
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: IN
39488: OR
39489: IFFALSE 39303
39491: GO 39300
39493: POP
39494: POP
// end else
39495: GO 39877
// for j = 1 to x do
39497: LD_ADDR_VAR 0 9
39501: PUSH
39502: DOUBLE
39503: LD_INT 1
39505: DEC
39506: ST_TO_ADDR
39507: LD_VAR 0 13
39511: PUSH
39512: FOR_TO
39513: IFFALSE 39875
// begin InitHc ;
39515: CALL_OW 19
// if not f then
39519: LD_VAR 0 12
39523: NOT
39524: IFFALSE 39613
// begin PrepareHuman ( false , i , skill ) ;
39526: LD_INT 0
39528: PPUSH
39529: LD_VAR 0 8
39533: PPUSH
39534: LD_VAR 0 4
39538: PPUSH
39539: CALL_OW 380
// un := CreateHuman ;
39543: LD_ADDR_VAR 0 14
39547: PUSH
39548: CALL_OW 44
39552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39553: LD_ADDR_VAR 0 7
39557: PUSH
39558: LD_VAR 0 7
39562: PPUSH
39563: LD_INT 1
39565: PPUSH
39566: LD_VAR 0 14
39570: PPUSH
39571: CALL_OW 2
39575: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39576: LD_VAR 0 14
39580: PPUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 250
39590: PPUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 251
39600: PPUSH
39601: LD_INT 10
39603: PPUSH
39604: LD_INT 0
39606: PPUSH
39607: CALL_OW 50
// continue ;
39611: GO 39512
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39613: LD_VAR 0 12
39617: PUSH
39618: LD_INT 1
39620: ARRAY
39621: PPUSH
39622: CALL_OW 313
39626: PUSH
39627: LD_VAR 0 12
39631: PUSH
39632: LD_INT 1
39634: ARRAY
39635: PPUSH
39636: CALL_OW 266
39640: PUSH
39641: LD_INT 32
39643: PUSH
39644: LD_INT 31
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: IN
39651: AND
39652: PUSH
39653: LD_VAR 0 12
39657: PUSH
39658: LD_INT 1
39660: ARRAY
39661: PPUSH
39662: CALL_OW 313
39666: PUSH
39667: LD_INT 6
39669: EQUAL
39670: OR
39671: IFFALSE 39691
// f := Delete ( f , 1 ) ;
39673: LD_ADDR_VAR 0 12
39677: PUSH
39678: LD_VAR 0 12
39682: PPUSH
39683: LD_INT 1
39685: PPUSH
39686: CALL_OW 3
39690: ST_TO_ADDR
// if not f then
39691: LD_VAR 0 12
39695: NOT
39696: IFFALSE 39714
// begin x := x + 2 ;
39698: LD_ADDR_VAR 0 13
39702: PUSH
39703: LD_VAR 0 13
39707: PUSH
39708: LD_INT 2
39710: PLUS
39711: ST_TO_ADDR
// continue ;
39712: GO 39512
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39714: LD_VAR 0 12
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: PPUSH
39723: CALL_OW 266
39727: PUSH
39728: LD_INT 5
39730: EQUAL
39731: IFFALSE 39805
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39733: LD_VAR 0 12
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: PPUSH
39742: CALL_OW 313
39746: PUSH
39747: LD_INT 3
39749: LESS
39750: IFFALSE 39786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39752: LD_INT 0
39754: PPUSH
39755: LD_INT 5
39757: PUSH
39758: LD_INT 8
39760: PUSH
39761: LD_INT 9
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PUSH
39769: LD_VAR 0 17
39773: ARRAY
39774: PPUSH
39775: LD_VAR 0 4
39779: PPUSH
39780: CALL_OW 380
39784: GO 39803
// PrepareHuman ( false , i , skill ) ;
39786: LD_INT 0
39788: PPUSH
39789: LD_VAR 0 8
39793: PPUSH
39794: LD_VAR 0 4
39798: PPUSH
39799: CALL_OW 380
// end else
39803: GO 39822
// PrepareHuman ( false , i , skill ) ;
39805: LD_INT 0
39807: PPUSH
39808: LD_VAR 0 8
39812: PPUSH
39813: LD_VAR 0 4
39817: PPUSH
39818: CALL_OW 380
// un := CreateHuman ;
39822: LD_ADDR_VAR 0 14
39826: PUSH
39827: CALL_OW 44
39831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39832: LD_ADDR_VAR 0 7
39836: PUSH
39837: LD_VAR 0 7
39841: PPUSH
39842: LD_INT 1
39844: PPUSH
39845: LD_VAR 0 14
39849: PPUSH
39850: CALL_OW 2
39854: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39855: LD_VAR 0 14
39859: PPUSH
39860: LD_VAR 0 12
39864: PUSH
39865: LD_INT 1
39867: ARRAY
39868: PPUSH
39869: CALL_OW 52
// end ;
39873: GO 39512
39875: POP
39876: POP
// end ;
39877: GO 38814
39879: POP
39880: POP
// result := result ^ buildings ;
39881: LD_ADDR_VAR 0 7
39885: PUSH
39886: LD_VAR 0 7
39890: PUSH
39891: LD_VAR 0 18
39895: ADD
39896: ST_TO_ADDR
// end else
39897: GO 40040
// begin for i = 1 to personel do
39899: LD_ADDR_VAR 0 8
39903: PUSH
39904: DOUBLE
39905: LD_INT 1
39907: DEC
39908: ST_TO_ADDR
39909: LD_VAR 0 6
39913: PUSH
39914: FOR_TO
39915: IFFALSE 40038
// begin if i > 4 then
39917: LD_VAR 0 8
39921: PUSH
39922: LD_INT 4
39924: GREATER
39925: IFFALSE 39929
// break ;
39927: GO 40038
// x := personel [ i ] ;
39929: LD_ADDR_VAR 0 13
39933: PUSH
39934: LD_VAR 0 6
39938: PUSH
39939: LD_VAR 0 8
39943: ARRAY
39944: ST_TO_ADDR
// if x = - 1 then
39945: LD_VAR 0 13
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: EQUAL
39954: IFFALSE 39958
// continue ;
39956: GO 39914
// PrepareHuman ( false , i , skill ) ;
39958: LD_INT 0
39960: PPUSH
39961: LD_VAR 0 8
39965: PPUSH
39966: LD_VAR 0 4
39970: PPUSH
39971: CALL_OW 380
// un := CreateHuman ;
39975: LD_ADDR_VAR 0 14
39979: PUSH
39980: CALL_OW 44
39984: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39985: LD_VAR 0 14
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 250
39999: PPUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: CALL_OW 251
40009: PPUSH
40010: LD_INT 10
40012: PPUSH
40013: LD_INT 0
40015: PPUSH
40016: CALL_OW 50
// result := result ^ un ;
40020: LD_ADDR_VAR 0 7
40024: PUSH
40025: LD_VAR 0 7
40029: PUSH
40030: LD_VAR 0 14
40034: ADD
40035: ST_TO_ADDR
// end ;
40036: GO 39914
40038: POP
40039: POP
// end ; end ;
40040: LD_VAR 0 7
40044: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
// result := false ;
40063: LD_ADDR_VAR 0 3
40067: PUSH
40068: LD_INT 0
40070: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40071: LD_VAR 0 1
40075: NOT
40076: PUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: CALL_OW 266
40086: PUSH
40087: LD_INT 32
40089: PUSH
40090: LD_INT 33
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: IN
40097: NOT
40098: OR
40099: IFFALSE 40103
// exit ;
40101: GO 41212
// nat := GetNation ( tower ) ;
40103: LD_ADDR_VAR 0 12
40107: PUSH
40108: LD_VAR 0 1
40112: PPUSH
40113: CALL_OW 248
40117: ST_TO_ADDR
// side := GetSide ( tower ) ;
40118: LD_ADDR_VAR 0 16
40122: PUSH
40123: LD_VAR 0 1
40127: PPUSH
40128: CALL_OW 255
40132: ST_TO_ADDR
// x := GetX ( tower ) ;
40133: LD_ADDR_VAR 0 10
40137: PUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: CALL_OW 250
40147: ST_TO_ADDR
// y := GetY ( tower ) ;
40148: LD_ADDR_VAR 0 11
40152: PUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: CALL_OW 251
40162: ST_TO_ADDR
// if not x or not y then
40163: LD_VAR 0 10
40167: NOT
40168: PUSH
40169: LD_VAR 0 11
40173: NOT
40174: OR
40175: IFFALSE 40179
// exit ;
40177: GO 41212
// weapon := 0 ;
40179: LD_ADDR_VAR 0 18
40183: PUSH
40184: LD_INT 0
40186: ST_TO_ADDR
// fac_list := [ ] ;
40187: LD_ADDR_VAR 0 17
40191: PUSH
40192: EMPTY
40193: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40194: LD_ADDR_VAR 0 6
40198: PUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 274
40208: PPUSH
40209: LD_VAR 0 2
40213: PPUSH
40214: LD_INT 0
40216: PPUSH
40217: CALL 37783 0 3
40221: PPUSH
40222: LD_INT 30
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PPUSH
40232: CALL_OW 72
40236: ST_TO_ADDR
// if not factories then
40237: LD_VAR 0 6
40241: NOT
40242: IFFALSE 40246
// exit ;
40244: GO 41212
// for i in factories do
40246: LD_ADDR_VAR 0 8
40250: PUSH
40251: LD_VAR 0 6
40255: PUSH
40256: FOR_IN
40257: IFFALSE 40282
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40259: LD_ADDR_VAR 0 17
40263: PUSH
40264: LD_VAR 0 17
40268: PUSH
40269: LD_VAR 0 8
40273: PPUSH
40274: CALL_OW 478
40278: UNION
40279: ST_TO_ADDR
40280: GO 40256
40282: POP
40283: POP
// if not fac_list then
40284: LD_VAR 0 17
40288: NOT
40289: IFFALSE 40293
// exit ;
40291: GO 41212
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40293: LD_ADDR_VAR 0 5
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: LD_INT 5
40303: PUSH
40304: LD_INT 9
40306: PUSH
40307: LD_INT 10
40309: PUSH
40310: LD_INT 6
40312: PUSH
40313: LD_INT 7
40315: PUSH
40316: LD_INT 11
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 27
40330: PUSH
40331: LD_INT 28
40333: PUSH
40334: LD_INT 26
40336: PUSH
40337: LD_INT 30
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 43
40348: PUSH
40349: LD_INT 44
40351: PUSH
40352: LD_INT 46
40354: PUSH
40355: LD_INT 45
40357: PUSH
40358: LD_INT 47
40360: PUSH
40361: LD_INT 49
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: PUSH
40377: LD_VAR 0 12
40381: ARRAY
40382: ST_TO_ADDR
// list := list isect fac_list ;
40383: LD_ADDR_VAR 0 5
40387: PUSH
40388: LD_VAR 0 5
40392: PUSH
40393: LD_VAR 0 17
40397: ISECT
40398: ST_TO_ADDR
// if not list then
40399: LD_VAR 0 5
40403: NOT
40404: IFFALSE 40408
// exit ;
40406: GO 41212
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40408: LD_VAR 0 12
40412: PUSH
40413: LD_INT 3
40415: EQUAL
40416: PUSH
40417: LD_INT 49
40419: PUSH
40420: LD_VAR 0 5
40424: IN
40425: AND
40426: PUSH
40427: LD_INT 31
40429: PPUSH
40430: LD_VAR 0 16
40434: PPUSH
40435: CALL_OW 321
40439: PUSH
40440: LD_INT 2
40442: EQUAL
40443: AND
40444: IFFALSE 40504
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40446: LD_INT 22
40448: PUSH
40449: LD_VAR 0 16
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 35
40460: PUSH
40461: LD_INT 49
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 91
40470: PUSH
40471: LD_VAR 0 1
40475: PUSH
40476: LD_INT 10
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: LIST
40488: PPUSH
40489: CALL_OW 69
40493: NOT
40494: IFFALSE 40504
// weapon := ru_time_lapser ;
40496: LD_ADDR_VAR 0 18
40500: PUSH
40501: LD_INT 49
40503: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40504: LD_VAR 0 12
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: IN
40519: PUSH
40520: LD_INT 11
40522: PUSH
40523: LD_VAR 0 5
40527: IN
40528: PUSH
40529: LD_INT 30
40531: PUSH
40532: LD_VAR 0 5
40536: IN
40537: OR
40538: AND
40539: PUSH
40540: LD_INT 6
40542: PPUSH
40543: LD_VAR 0 16
40547: PPUSH
40548: CALL_OW 321
40552: PUSH
40553: LD_INT 2
40555: EQUAL
40556: AND
40557: IFFALSE 40722
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40559: LD_INT 22
40561: PUSH
40562: LD_VAR 0 16
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: LD_INT 35
40576: PUSH
40577: LD_INT 11
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 35
40586: PUSH
40587: LD_INT 30
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 91
40601: PUSH
40602: LD_VAR 0 1
40606: PUSH
40607: LD_INT 18
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: PPUSH
40620: CALL_OW 69
40624: NOT
40625: PUSH
40626: LD_INT 22
40628: PUSH
40629: LD_VAR 0 16
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 30
40643: PUSH
40644: LD_INT 32
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 30
40653: PUSH
40654: LD_INT 33
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 91
40668: PUSH
40669: LD_VAR 0 1
40673: PUSH
40674: LD_INT 12
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: PPUSH
40690: CALL_OW 69
40694: PUSH
40695: LD_INT 2
40697: GREATER
40698: AND
40699: IFFALSE 40722
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40701: LD_ADDR_VAR 0 18
40705: PUSH
40706: LD_INT 11
40708: PUSH
40709: LD_INT 30
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_VAR 0 12
40720: ARRAY
40721: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40722: LD_VAR 0 18
40726: NOT
40727: PUSH
40728: LD_INT 40
40730: PPUSH
40731: LD_VAR 0 16
40735: PPUSH
40736: CALL_OW 321
40740: PUSH
40741: LD_INT 2
40743: EQUAL
40744: AND
40745: PUSH
40746: LD_INT 7
40748: PUSH
40749: LD_VAR 0 5
40753: IN
40754: PUSH
40755: LD_INT 28
40757: PUSH
40758: LD_VAR 0 5
40762: IN
40763: OR
40764: PUSH
40765: LD_INT 45
40767: PUSH
40768: LD_VAR 0 5
40772: IN
40773: OR
40774: AND
40775: IFFALSE 41029
// begin hex := GetHexInfo ( x , y ) ;
40777: LD_ADDR_VAR 0 4
40781: PUSH
40782: LD_VAR 0 10
40786: PPUSH
40787: LD_VAR 0 11
40791: PPUSH
40792: CALL_OW 546
40796: ST_TO_ADDR
// if hex [ 1 ] then
40797: LD_VAR 0 4
40801: PUSH
40802: LD_INT 1
40804: ARRAY
40805: IFFALSE 40809
// exit ;
40807: GO 41212
// height := hex [ 2 ] ;
40809: LD_ADDR_VAR 0 15
40813: PUSH
40814: LD_VAR 0 4
40818: PUSH
40819: LD_INT 2
40821: ARRAY
40822: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40823: LD_ADDR_VAR 0 14
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 5
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// for i in tmp do
40846: LD_ADDR_VAR 0 8
40850: PUSH
40851: LD_VAR 0 14
40855: PUSH
40856: FOR_IN
40857: IFFALSE 41027
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40859: LD_ADDR_VAR 0 9
40863: PUSH
40864: LD_VAR 0 10
40868: PPUSH
40869: LD_VAR 0 8
40873: PPUSH
40874: LD_INT 5
40876: PPUSH
40877: CALL_OW 272
40881: PUSH
40882: LD_VAR 0 11
40886: PPUSH
40887: LD_VAR 0 8
40891: PPUSH
40892: LD_INT 5
40894: PPUSH
40895: CALL_OW 273
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40904: LD_VAR 0 9
40908: PUSH
40909: LD_INT 1
40911: ARRAY
40912: PPUSH
40913: LD_VAR 0 9
40917: PUSH
40918: LD_INT 2
40920: ARRAY
40921: PPUSH
40922: CALL_OW 488
40926: IFFALSE 41025
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40928: LD_ADDR_VAR 0 4
40932: PUSH
40933: LD_VAR 0 9
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: PPUSH
40942: LD_VAR 0 9
40946: PUSH
40947: LD_INT 2
40949: ARRAY
40950: PPUSH
40951: CALL_OW 546
40955: ST_TO_ADDR
// if hex [ 1 ] then
40956: LD_VAR 0 4
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: IFFALSE 40968
// continue ;
40966: GO 40856
// h := hex [ 2 ] ;
40968: LD_ADDR_VAR 0 13
40972: PUSH
40973: LD_VAR 0 4
40977: PUSH
40978: LD_INT 2
40980: ARRAY
40981: ST_TO_ADDR
// if h + 7 < height then
40982: LD_VAR 0 13
40986: PUSH
40987: LD_INT 7
40989: PLUS
40990: PUSH
40991: LD_VAR 0 15
40995: LESS
40996: IFFALSE 41025
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40998: LD_ADDR_VAR 0 18
41002: PUSH
41003: LD_INT 7
41005: PUSH
41006: LD_INT 28
41008: PUSH
41009: LD_INT 45
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: PUSH
41017: LD_VAR 0 12
41021: ARRAY
41022: ST_TO_ADDR
// break ;
41023: GO 41027
// end ; end ; end ;
41025: GO 40856
41027: POP
41028: POP
// end ; if not weapon then
41029: LD_VAR 0 18
41033: NOT
41034: IFFALSE 41094
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41036: LD_ADDR_VAR 0 5
41040: PUSH
41041: LD_VAR 0 5
41045: PUSH
41046: LD_INT 11
41048: PUSH
41049: LD_INT 30
41051: PUSH
41052: LD_INT 49
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: DIFF
41060: ST_TO_ADDR
// if not list then
41061: LD_VAR 0 5
41065: NOT
41066: IFFALSE 41070
// exit ;
41068: GO 41212
// weapon := list [ rand ( 1 , list ) ] ;
41070: LD_ADDR_VAR 0 18
41074: PUSH
41075: LD_VAR 0 5
41079: PUSH
41080: LD_INT 1
41082: PPUSH
41083: LD_VAR 0 5
41087: PPUSH
41088: CALL_OW 12
41092: ARRAY
41093: ST_TO_ADDR
// end ; if weapon then
41094: LD_VAR 0 18
41098: IFFALSE 41212
// begin tmp := CostOfWeapon ( weapon ) ;
41100: LD_ADDR_VAR 0 14
41104: PUSH
41105: LD_VAR 0 18
41109: PPUSH
41110: CALL_OW 451
41114: ST_TO_ADDR
// j := GetBase ( tower ) ;
41115: LD_ADDR_VAR 0 9
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 274
41129: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41130: LD_VAR 0 9
41134: PPUSH
41135: LD_INT 1
41137: PPUSH
41138: CALL_OW 275
41142: PUSH
41143: LD_VAR 0 14
41147: PUSH
41148: LD_INT 1
41150: ARRAY
41151: GREATEREQUAL
41152: PUSH
41153: LD_VAR 0 9
41157: PPUSH
41158: LD_INT 2
41160: PPUSH
41161: CALL_OW 275
41165: PUSH
41166: LD_VAR 0 14
41170: PUSH
41171: LD_INT 2
41173: ARRAY
41174: GREATEREQUAL
41175: AND
41176: PUSH
41177: LD_VAR 0 9
41181: PPUSH
41182: LD_INT 3
41184: PPUSH
41185: CALL_OW 275
41189: PUSH
41190: LD_VAR 0 14
41194: PUSH
41195: LD_INT 3
41197: ARRAY
41198: GREATEREQUAL
41199: AND
41200: IFFALSE 41212
// result := weapon ;
41202: LD_ADDR_VAR 0 3
41206: PUSH
41207: LD_VAR 0 18
41211: ST_TO_ADDR
// end ; end ;
41212: LD_VAR 0 3
41216: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41217: LD_INT 0
41219: PPUSH
41220: PPUSH
// result := true ;
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_INT 1
41228: ST_TO_ADDR
// if array1 = array2 then
41229: LD_VAR 0 1
41233: PUSH
41234: LD_VAR 0 2
41238: EQUAL
41239: IFFALSE 41299
// begin for i = 1 to array1 do
41241: LD_ADDR_VAR 0 4
41245: PUSH
41246: DOUBLE
41247: LD_INT 1
41249: DEC
41250: ST_TO_ADDR
41251: LD_VAR 0 1
41255: PUSH
41256: FOR_TO
41257: IFFALSE 41295
// if array1 [ i ] <> array2 [ i ] then
41259: LD_VAR 0 1
41263: PUSH
41264: LD_VAR 0 4
41268: ARRAY
41269: PUSH
41270: LD_VAR 0 2
41274: PUSH
41275: LD_VAR 0 4
41279: ARRAY
41280: NONEQUAL
41281: IFFALSE 41293
// begin result := false ;
41283: LD_ADDR_VAR 0 3
41287: PUSH
41288: LD_INT 0
41290: ST_TO_ADDR
// break ;
41291: GO 41295
// end ;
41293: GO 41256
41295: POP
41296: POP
// end else
41297: GO 41307
// result := false ;
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_INT 0
41306: ST_TO_ADDR
// end ;
41307: LD_VAR 0 3
41311: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41312: LD_INT 0
41314: PPUSH
41315: PPUSH
// if not array1 or not array2 then
41316: LD_VAR 0 1
41320: NOT
41321: PUSH
41322: LD_VAR 0 2
41326: NOT
41327: OR
41328: IFFALSE 41332
// exit ;
41330: GO 41396
// result := true ;
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_INT 1
41339: ST_TO_ADDR
// for i = 1 to array1 do
41340: LD_ADDR_VAR 0 4
41344: PUSH
41345: DOUBLE
41346: LD_INT 1
41348: DEC
41349: ST_TO_ADDR
41350: LD_VAR 0 1
41354: PUSH
41355: FOR_TO
41356: IFFALSE 41394
// if array1 [ i ] <> array2 [ i ] then
41358: LD_VAR 0 1
41362: PUSH
41363: LD_VAR 0 4
41367: ARRAY
41368: PUSH
41369: LD_VAR 0 2
41373: PUSH
41374: LD_VAR 0 4
41378: ARRAY
41379: NONEQUAL
41380: IFFALSE 41392
// begin result := false ;
41382: LD_ADDR_VAR 0 3
41386: PUSH
41387: LD_INT 0
41389: ST_TO_ADDR
// break ;
41390: GO 41394
// end ;
41392: GO 41355
41394: POP
41395: POP
// end ;
41396: LD_VAR 0 3
41400: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41401: LD_INT 0
41403: PPUSH
41404: PPUSH
41405: PPUSH
// pom := GetBase ( fac ) ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 274
41420: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41421: LD_ADDR_VAR 0 4
41425: PUSH
41426: LD_VAR 0 2
41430: PUSH
41431: LD_INT 1
41433: ARRAY
41434: PPUSH
41435: LD_VAR 0 2
41439: PUSH
41440: LD_INT 2
41442: ARRAY
41443: PPUSH
41444: LD_VAR 0 2
41448: PUSH
41449: LD_INT 3
41451: ARRAY
41452: PPUSH
41453: LD_VAR 0 2
41457: PUSH
41458: LD_INT 4
41460: ARRAY
41461: PPUSH
41462: CALL_OW 449
41466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41467: LD_ADDR_VAR 0 3
41471: PUSH
41472: LD_VAR 0 5
41476: PPUSH
41477: LD_INT 1
41479: PPUSH
41480: CALL_OW 275
41484: PUSH
41485: LD_VAR 0 4
41489: PUSH
41490: LD_INT 1
41492: ARRAY
41493: GREATEREQUAL
41494: PUSH
41495: LD_VAR 0 5
41499: PPUSH
41500: LD_INT 2
41502: PPUSH
41503: CALL_OW 275
41507: PUSH
41508: LD_VAR 0 4
41512: PUSH
41513: LD_INT 2
41515: ARRAY
41516: GREATEREQUAL
41517: AND
41518: PUSH
41519: LD_VAR 0 5
41523: PPUSH
41524: LD_INT 3
41526: PPUSH
41527: CALL_OW 275
41531: PUSH
41532: LD_VAR 0 4
41536: PUSH
41537: LD_INT 3
41539: ARRAY
41540: GREATEREQUAL
41541: AND
41542: ST_TO_ADDR
// end ;
41543: LD_VAR 0 3
41547: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41548: LD_INT 0
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
// pom := GetBase ( building ) ;
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 274
41568: ST_TO_ADDR
// if not pom then
41569: LD_VAR 0 3
41573: NOT
41574: IFFALSE 41578
// exit ;
41576: GO 41748
// btype := GetBType ( building ) ;
41578: LD_ADDR_VAR 0 5
41582: PUSH
41583: LD_VAR 0 1
41587: PPUSH
41588: CALL_OW 266
41592: ST_TO_ADDR
// if btype = b_armoury then
41593: LD_VAR 0 5
41597: PUSH
41598: LD_INT 4
41600: EQUAL
41601: IFFALSE 41611
// btype := b_barracks ;
41603: LD_ADDR_VAR 0 5
41607: PUSH
41608: LD_INT 5
41610: ST_TO_ADDR
// if btype = b_depot then
41611: LD_VAR 0 5
41615: PUSH
41616: LD_INT 0
41618: EQUAL
41619: IFFALSE 41629
// btype := b_warehouse ;
41621: LD_ADDR_VAR 0 5
41625: PUSH
41626: LD_INT 1
41628: ST_TO_ADDR
// if btype = b_workshop then
41629: LD_VAR 0 5
41633: PUSH
41634: LD_INT 2
41636: EQUAL
41637: IFFALSE 41647
// btype := b_factory ;
41639: LD_ADDR_VAR 0 5
41643: PUSH
41644: LD_INT 3
41646: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41647: LD_ADDR_VAR 0 4
41651: PUSH
41652: LD_VAR 0 5
41656: PPUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 248
41666: PPUSH
41667: CALL_OW 450
41671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41672: LD_ADDR_VAR 0 2
41676: PUSH
41677: LD_VAR 0 3
41681: PPUSH
41682: LD_INT 1
41684: PPUSH
41685: CALL_OW 275
41689: PUSH
41690: LD_VAR 0 4
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: GREATEREQUAL
41699: PUSH
41700: LD_VAR 0 3
41704: PPUSH
41705: LD_INT 2
41707: PPUSH
41708: CALL_OW 275
41712: PUSH
41713: LD_VAR 0 4
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: GREATEREQUAL
41722: AND
41723: PUSH
41724: LD_VAR 0 3
41728: PPUSH
41729: LD_INT 3
41731: PPUSH
41732: CALL_OW 275
41736: PUSH
41737: LD_VAR 0 4
41741: PUSH
41742: LD_INT 3
41744: ARRAY
41745: GREATEREQUAL
41746: AND
41747: ST_TO_ADDR
// end ;
41748: LD_VAR 0 2
41752: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41753: LD_INT 0
41755: PPUSH
41756: PPUSH
41757: PPUSH
// pom := GetBase ( building ) ;
41758: LD_ADDR_VAR 0 4
41762: PUSH
41763: LD_VAR 0 1
41767: PPUSH
41768: CALL_OW 274
41772: ST_TO_ADDR
// if not pom then
41773: LD_VAR 0 4
41777: NOT
41778: IFFALSE 41782
// exit ;
41780: GO 41883
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41782: LD_ADDR_VAR 0 5
41786: PUSH
41787: LD_VAR 0 2
41791: PPUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: CALL_OW 248
41801: PPUSH
41802: CALL_OW 450
41806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41807: LD_ADDR_VAR 0 3
41811: PUSH
41812: LD_VAR 0 4
41816: PPUSH
41817: LD_INT 1
41819: PPUSH
41820: CALL_OW 275
41824: PUSH
41825: LD_VAR 0 5
41829: PUSH
41830: LD_INT 1
41832: ARRAY
41833: GREATEREQUAL
41834: PUSH
41835: LD_VAR 0 4
41839: PPUSH
41840: LD_INT 2
41842: PPUSH
41843: CALL_OW 275
41847: PUSH
41848: LD_VAR 0 5
41852: PUSH
41853: LD_INT 2
41855: ARRAY
41856: GREATEREQUAL
41857: AND
41858: PUSH
41859: LD_VAR 0 4
41863: PPUSH
41864: LD_INT 3
41866: PPUSH
41867: CALL_OW 275
41871: PUSH
41872: LD_VAR 0 5
41876: PUSH
41877: LD_INT 3
41879: ARRAY
41880: GREATEREQUAL
41881: AND
41882: ST_TO_ADDR
// end ;
41883: LD_VAR 0 3
41887: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41888: LD_INT 0
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
// result := false ;
41901: LD_ADDR_VAR 0 8
41905: PUSH
41906: LD_INT 0
41908: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41909: LD_VAR 0 5
41913: NOT
41914: PUSH
41915: LD_VAR 0 1
41919: NOT
41920: OR
41921: PUSH
41922: LD_VAR 0 2
41926: NOT
41927: OR
41928: PUSH
41929: LD_VAR 0 3
41933: NOT
41934: OR
41935: IFFALSE 41939
// exit ;
41937: GO 42753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41939: LD_ADDR_VAR 0 14
41943: PUSH
41944: LD_VAR 0 1
41948: PPUSH
41949: LD_VAR 0 2
41953: PPUSH
41954: LD_VAR 0 3
41958: PPUSH
41959: LD_VAR 0 4
41963: PPUSH
41964: LD_VAR 0 5
41968: PUSH
41969: LD_INT 1
41971: ARRAY
41972: PPUSH
41973: CALL_OW 248
41977: PPUSH
41978: LD_INT 0
41980: PPUSH
41981: CALL 43990 0 6
41985: ST_TO_ADDR
// if not hexes then
41986: LD_VAR 0 14
41990: NOT
41991: IFFALSE 41995
// exit ;
41993: GO 42753
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41995: LD_ADDR_VAR 0 17
41999: PUSH
42000: LD_VAR 0 5
42004: PPUSH
42005: LD_INT 22
42007: PUSH
42008: LD_VAR 0 13
42012: PPUSH
42013: CALL_OW 255
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: LD_INT 30
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 30
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PPUSH
42054: CALL_OW 72
42058: ST_TO_ADDR
// for i = 1 to hexes do
42059: LD_ADDR_VAR 0 9
42063: PUSH
42064: DOUBLE
42065: LD_INT 1
42067: DEC
42068: ST_TO_ADDR
42069: LD_VAR 0 14
42073: PUSH
42074: FOR_TO
42075: IFFALSE 42751
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42077: LD_ADDR_VAR 0 13
42081: PUSH
42082: LD_VAR 0 14
42086: PUSH
42087: LD_VAR 0 9
42091: ARRAY
42092: PUSH
42093: LD_INT 1
42095: ARRAY
42096: PPUSH
42097: LD_VAR 0 14
42101: PUSH
42102: LD_VAR 0 9
42106: ARRAY
42107: PUSH
42108: LD_INT 2
42110: ARRAY
42111: PPUSH
42112: CALL_OW 428
42116: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42117: LD_VAR 0 14
42121: PUSH
42122: LD_VAR 0 9
42126: ARRAY
42127: PUSH
42128: LD_INT 1
42130: ARRAY
42131: PPUSH
42132: LD_VAR 0 14
42136: PUSH
42137: LD_VAR 0 9
42141: ARRAY
42142: PUSH
42143: LD_INT 2
42145: ARRAY
42146: PPUSH
42147: CALL_OW 351
42151: PUSH
42152: LD_VAR 0 14
42156: PUSH
42157: LD_VAR 0 9
42161: ARRAY
42162: PUSH
42163: LD_INT 1
42165: ARRAY
42166: PPUSH
42167: LD_VAR 0 14
42171: PUSH
42172: LD_VAR 0 9
42176: ARRAY
42177: PUSH
42178: LD_INT 2
42180: ARRAY
42181: PPUSH
42182: CALL_OW 488
42186: NOT
42187: OR
42188: PUSH
42189: LD_VAR 0 13
42193: PPUSH
42194: CALL_OW 247
42198: PUSH
42199: LD_INT 3
42201: EQUAL
42202: OR
42203: IFFALSE 42209
// exit ;
42205: POP
42206: POP
42207: GO 42753
// if not tmp then
42209: LD_VAR 0 13
42213: NOT
42214: IFFALSE 42218
// continue ;
42216: GO 42074
// result := true ;
42218: LD_ADDR_VAR 0 8
42222: PUSH
42223: LD_INT 1
42225: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42226: LD_VAR 0 6
42230: PUSH
42231: LD_VAR 0 13
42235: PPUSH
42236: CALL_OW 247
42240: PUSH
42241: LD_INT 2
42243: EQUAL
42244: AND
42245: PUSH
42246: LD_VAR 0 13
42250: PPUSH
42251: CALL_OW 263
42255: PUSH
42256: LD_INT 1
42258: EQUAL
42259: AND
42260: IFFALSE 42424
// begin if IsDrivenBy ( tmp ) then
42262: LD_VAR 0 13
42266: PPUSH
42267: CALL_OW 311
42271: IFFALSE 42275
// continue ;
42273: GO 42074
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42275: LD_VAR 0 6
42279: PPUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 60
42285: PUSH
42286: EMPTY
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 55
42298: PUSH
42299: EMPTY
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PPUSH
42310: CALL_OW 72
42314: IFFALSE 42422
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42316: LD_ADDR_VAR 0 18
42320: PUSH
42321: LD_VAR 0 6
42325: PPUSH
42326: LD_INT 3
42328: PUSH
42329: LD_INT 60
42331: PUSH
42332: EMPTY
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: LD_INT 55
42344: PUSH
42345: EMPTY
42346: LIST
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PPUSH
42356: CALL_OW 72
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: ST_TO_ADDR
// if IsInUnit ( driver ) then
42365: LD_VAR 0 18
42369: PPUSH
42370: CALL_OW 310
42374: IFFALSE 42385
// ComExit ( driver ) ;
42376: LD_VAR 0 18
42380: PPUSH
42381: CALL 67695 0 1
// AddComEnterUnit ( driver , tmp ) ;
42385: LD_VAR 0 18
42389: PPUSH
42390: LD_VAR 0 13
42394: PPUSH
42395: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42399: LD_VAR 0 18
42403: PPUSH
42404: LD_VAR 0 7
42408: PPUSH
42409: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42413: LD_VAR 0 18
42417: PPUSH
42418: CALL_OW 181
// end ; continue ;
42422: GO 42074
// end ; if not cleaners or not tmp in cleaners then
42424: LD_VAR 0 6
42428: NOT
42429: PUSH
42430: LD_VAR 0 13
42434: PUSH
42435: LD_VAR 0 6
42439: IN
42440: NOT
42441: OR
42442: IFFALSE 42749
// begin if dep then
42444: LD_VAR 0 17
42448: IFFALSE 42584
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42450: LD_ADDR_VAR 0 16
42454: PUSH
42455: LD_VAR 0 17
42459: PUSH
42460: LD_INT 1
42462: ARRAY
42463: PPUSH
42464: CALL_OW 250
42468: PPUSH
42469: LD_VAR 0 17
42473: PUSH
42474: LD_INT 1
42476: ARRAY
42477: PPUSH
42478: CALL_OW 254
42482: PPUSH
42483: LD_INT 5
42485: PPUSH
42486: CALL_OW 272
42490: PUSH
42491: LD_VAR 0 17
42495: PUSH
42496: LD_INT 1
42498: ARRAY
42499: PPUSH
42500: CALL_OW 251
42504: PPUSH
42505: LD_VAR 0 17
42509: PUSH
42510: LD_INT 1
42512: ARRAY
42513: PPUSH
42514: CALL_OW 254
42518: PPUSH
42519: LD_INT 5
42521: PPUSH
42522: CALL_OW 273
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42531: LD_VAR 0 16
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: PPUSH
42540: LD_VAR 0 16
42544: PUSH
42545: LD_INT 2
42547: ARRAY
42548: PPUSH
42549: CALL_OW 488
42553: IFFALSE 42584
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42555: LD_VAR 0 13
42559: PPUSH
42560: LD_VAR 0 16
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PPUSH
42569: LD_VAR 0 16
42573: PUSH
42574: LD_INT 2
42576: ARRAY
42577: PPUSH
42578: CALL_OW 111
// continue ;
42582: GO 42074
// end ; end ; r := GetDir ( tmp ) ;
42584: LD_ADDR_VAR 0 15
42588: PUSH
42589: LD_VAR 0 13
42593: PPUSH
42594: CALL_OW 254
42598: ST_TO_ADDR
// if r = 5 then
42599: LD_VAR 0 15
42603: PUSH
42604: LD_INT 5
42606: EQUAL
42607: IFFALSE 42617
// r := 0 ;
42609: LD_ADDR_VAR 0 15
42613: PUSH
42614: LD_INT 0
42616: ST_TO_ADDR
// for j = r to 5 do
42617: LD_ADDR_VAR 0 10
42621: PUSH
42622: DOUBLE
42623: LD_VAR 0 15
42627: DEC
42628: ST_TO_ADDR
42629: LD_INT 5
42631: PUSH
42632: FOR_TO
42633: IFFALSE 42747
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42635: LD_ADDR_VAR 0 11
42639: PUSH
42640: LD_VAR 0 13
42644: PPUSH
42645: CALL_OW 250
42649: PPUSH
42650: LD_VAR 0 10
42654: PPUSH
42655: LD_INT 2
42657: PPUSH
42658: CALL_OW 272
42662: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42663: LD_ADDR_VAR 0 12
42667: PUSH
42668: LD_VAR 0 13
42672: PPUSH
42673: CALL_OW 251
42677: PPUSH
42678: LD_VAR 0 10
42682: PPUSH
42683: LD_INT 2
42685: PPUSH
42686: CALL_OW 273
42690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42691: LD_VAR 0 11
42695: PPUSH
42696: LD_VAR 0 12
42700: PPUSH
42701: CALL_OW 488
42705: PUSH
42706: LD_VAR 0 11
42710: PPUSH
42711: LD_VAR 0 12
42715: PPUSH
42716: CALL_OW 428
42720: NOT
42721: AND
42722: IFFALSE 42745
// begin ComMoveXY ( tmp , _x , _y ) ;
42724: LD_VAR 0 13
42728: PPUSH
42729: LD_VAR 0 11
42733: PPUSH
42734: LD_VAR 0 12
42738: PPUSH
42739: CALL_OW 111
// break ;
42743: GO 42747
// end ; end ;
42745: GO 42632
42747: POP
42748: POP
// end ; end ;
42749: GO 42074
42751: POP
42752: POP
// end ;
42753: LD_VAR 0 8
42757: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42758: LD_INT 0
42760: PPUSH
// result := true ;
42761: LD_ADDR_VAR 0 3
42765: PUSH
42766: LD_INT 1
42768: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42769: LD_VAR 0 2
42773: PUSH
42774: LD_INT 24
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42788
42780: LD_INT 33
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 42813
42788: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_INT 32
42796: PPUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 321
42806: PUSH
42807: LD_INT 2
42809: EQUAL
42810: ST_TO_ADDR
42811: GO 43133
42813: LD_INT 20
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42846
42821: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 6
42829: PPUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 321
42839: PUSH
42840: LD_INT 2
42842: EQUAL
42843: ST_TO_ADDR
42844: GO 43133
42846: LD_INT 22
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42860
42852: LD_INT 36
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42885
42860: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_INT 15
42868: PPUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: CALL_OW 321
42878: PUSH
42879: LD_INT 2
42881: EQUAL
42882: ST_TO_ADDR
42883: GO 43133
42885: LD_INT 30
42887: DOUBLE
42888: EQUAL
42889: IFTRUE 42893
42891: GO 42918
42893: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42894: LD_ADDR_VAR 0 3
42898: PUSH
42899: LD_INT 20
42901: PPUSH
42902: LD_VAR 0 1
42906: PPUSH
42907: CALL_OW 321
42911: PUSH
42912: LD_INT 2
42914: EQUAL
42915: ST_TO_ADDR
42916: GO 43133
42918: LD_INT 28
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42932
42924: LD_INT 21
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 42957
42932: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42933: LD_ADDR_VAR 0 3
42937: PUSH
42938: LD_INT 21
42940: PPUSH
42941: LD_VAR 0 1
42945: PPUSH
42946: CALL_OW 321
42950: PUSH
42951: LD_INT 2
42953: EQUAL
42954: ST_TO_ADDR
42955: GO 43133
42957: LD_INT 16
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 42992
42965: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_EXP 127
42975: PPUSH
42976: LD_VAR 0 1
42980: PPUSH
42981: CALL_OW 321
42985: PUSH
42986: LD_INT 2
42988: EQUAL
42989: ST_TO_ADDR
42990: GO 43133
42992: LD_INT 19
42994: DOUBLE
42995: EQUAL
42996: IFTRUE 43006
42998: LD_INT 23
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43033
43006: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43007: LD_ADDR_VAR 0 3
43011: PUSH
43012: LD_EXP 126
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 321
43026: PUSH
43027: LD_INT 2
43029: EQUAL
43030: ST_TO_ADDR
43031: GO 43133
43033: LD_INT 17
43035: DOUBLE
43036: EQUAL
43037: IFTRUE 43041
43039: GO 43066
43041: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43042: LD_ADDR_VAR 0 3
43046: PUSH
43047: LD_INT 39
43049: PPUSH
43050: LD_VAR 0 1
43054: PPUSH
43055: CALL_OW 321
43059: PUSH
43060: LD_INT 2
43062: EQUAL
43063: ST_TO_ADDR
43064: GO 43133
43066: LD_INT 18
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43099
43074: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43075: LD_ADDR_VAR 0 3
43079: PUSH
43080: LD_INT 40
43082: PPUSH
43083: LD_VAR 0 1
43087: PPUSH
43088: CALL_OW 321
43092: PUSH
43093: LD_INT 2
43095: EQUAL
43096: ST_TO_ADDR
43097: GO 43133
43099: LD_INT 27
43101: DOUBLE
43102: EQUAL
43103: IFTRUE 43107
43105: GO 43132
43107: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43108: LD_ADDR_VAR 0 3
43112: PUSH
43113: LD_INT 35
43115: PPUSH
43116: LD_VAR 0 1
43120: PPUSH
43121: CALL_OW 321
43125: PUSH
43126: LD_INT 2
43128: EQUAL
43129: ST_TO_ADDR
43130: GO 43133
43132: POP
// end ;
43133: LD_VAR 0 3
43137: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43138: LD_INT 0
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
// result := false ;
43151: LD_ADDR_VAR 0 6
43155: PUSH
43156: LD_INT 0
43158: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43159: LD_VAR 0 1
43163: NOT
43164: PUSH
43165: LD_VAR 0 1
43169: PPUSH
43170: CALL_OW 266
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: IN
43185: NOT
43186: OR
43187: PUSH
43188: LD_VAR 0 2
43192: NOT
43193: OR
43194: PUSH
43195: LD_VAR 0 5
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 4
43214: PUSH
43215: LD_INT 5
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: IN
43226: NOT
43227: OR
43228: PUSH
43229: LD_VAR 0 3
43233: PPUSH
43234: LD_VAR 0 4
43238: PPUSH
43239: CALL_OW 488
43243: NOT
43244: OR
43245: IFFALSE 43249
// exit ;
43247: GO 43985
// side := GetSide ( depot ) ;
43249: LD_ADDR_VAR 0 9
43253: PUSH
43254: LD_VAR 0 1
43258: PPUSH
43259: CALL_OW 255
43263: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43264: LD_VAR 0 9
43268: PPUSH
43269: LD_VAR 0 2
43273: PPUSH
43274: CALL 42758 0 2
43278: NOT
43279: IFFALSE 43283
// exit ;
43281: GO 43985
// pom := GetBase ( depot ) ;
43283: LD_ADDR_VAR 0 10
43287: PUSH
43288: LD_VAR 0 1
43292: PPUSH
43293: CALL_OW 274
43297: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43298: LD_ADDR_VAR 0 11
43302: PUSH
43303: LD_VAR 0 2
43307: PPUSH
43308: LD_VAR 0 1
43312: PPUSH
43313: CALL_OW 248
43317: PPUSH
43318: CALL_OW 450
43322: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43323: LD_VAR 0 10
43327: PPUSH
43328: LD_INT 1
43330: PPUSH
43331: CALL_OW 275
43335: PUSH
43336: LD_VAR 0 11
43340: PUSH
43341: LD_INT 1
43343: ARRAY
43344: GREATEREQUAL
43345: PUSH
43346: LD_VAR 0 10
43350: PPUSH
43351: LD_INT 2
43353: PPUSH
43354: CALL_OW 275
43358: PUSH
43359: LD_VAR 0 11
43363: PUSH
43364: LD_INT 2
43366: ARRAY
43367: GREATEREQUAL
43368: AND
43369: PUSH
43370: LD_VAR 0 10
43374: PPUSH
43375: LD_INT 3
43377: PPUSH
43378: CALL_OW 275
43382: PUSH
43383: LD_VAR 0 11
43387: PUSH
43388: LD_INT 3
43390: ARRAY
43391: GREATEREQUAL
43392: AND
43393: NOT
43394: IFFALSE 43398
// exit ;
43396: GO 43985
// if GetBType ( depot ) = b_depot then
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 266
43407: PUSH
43408: LD_INT 0
43410: EQUAL
43411: IFFALSE 43423
// dist := 28 else
43413: LD_ADDR_VAR 0 14
43417: PUSH
43418: LD_INT 28
43420: ST_TO_ADDR
43421: GO 43431
// dist := 36 ;
43423: LD_ADDR_VAR 0 14
43427: PUSH
43428: LD_INT 36
43430: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43431: LD_VAR 0 1
43435: PPUSH
43436: LD_VAR 0 3
43440: PPUSH
43441: LD_VAR 0 4
43445: PPUSH
43446: CALL_OW 297
43450: PUSH
43451: LD_VAR 0 14
43455: GREATER
43456: IFFALSE 43460
// exit ;
43458: GO 43985
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43460: LD_ADDR_VAR 0 12
43464: PUSH
43465: LD_VAR 0 2
43469: PPUSH
43470: LD_VAR 0 3
43474: PPUSH
43475: LD_VAR 0 4
43479: PPUSH
43480: LD_VAR 0 5
43484: PPUSH
43485: LD_VAR 0 1
43489: PPUSH
43490: CALL_OW 248
43494: PPUSH
43495: LD_INT 0
43497: PPUSH
43498: CALL 43990 0 6
43502: ST_TO_ADDR
// if not hexes then
43503: LD_VAR 0 12
43507: NOT
43508: IFFALSE 43512
// exit ;
43510: GO 43985
// hex := GetHexInfo ( x , y ) ;
43512: LD_ADDR_VAR 0 15
43516: PUSH
43517: LD_VAR 0 3
43521: PPUSH
43522: LD_VAR 0 4
43526: PPUSH
43527: CALL_OW 546
43531: ST_TO_ADDR
// if hex [ 1 ] then
43532: LD_VAR 0 15
43536: PUSH
43537: LD_INT 1
43539: ARRAY
43540: IFFALSE 43544
// exit ;
43542: GO 43985
// height := hex [ 2 ] ;
43544: LD_ADDR_VAR 0 13
43548: PUSH
43549: LD_VAR 0 15
43553: PUSH
43554: LD_INT 2
43556: ARRAY
43557: ST_TO_ADDR
// for i = 1 to hexes do
43558: LD_ADDR_VAR 0 7
43562: PUSH
43563: DOUBLE
43564: LD_INT 1
43566: DEC
43567: ST_TO_ADDR
43568: LD_VAR 0 12
43572: PUSH
43573: FOR_TO
43574: IFFALSE 43904
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43576: LD_VAR 0 12
43580: PUSH
43581: LD_VAR 0 7
43585: ARRAY
43586: PUSH
43587: LD_INT 1
43589: ARRAY
43590: PPUSH
43591: LD_VAR 0 12
43595: PUSH
43596: LD_VAR 0 7
43600: ARRAY
43601: PUSH
43602: LD_INT 2
43604: ARRAY
43605: PPUSH
43606: CALL_OW 488
43610: NOT
43611: PUSH
43612: LD_VAR 0 12
43616: PUSH
43617: LD_VAR 0 7
43621: ARRAY
43622: PUSH
43623: LD_INT 1
43625: ARRAY
43626: PPUSH
43627: LD_VAR 0 12
43631: PUSH
43632: LD_VAR 0 7
43636: ARRAY
43637: PUSH
43638: LD_INT 2
43640: ARRAY
43641: PPUSH
43642: CALL_OW 428
43646: PUSH
43647: LD_INT 0
43649: GREATER
43650: OR
43651: PUSH
43652: LD_VAR 0 12
43656: PUSH
43657: LD_VAR 0 7
43661: ARRAY
43662: PUSH
43663: LD_INT 1
43665: ARRAY
43666: PPUSH
43667: LD_VAR 0 12
43671: PUSH
43672: LD_VAR 0 7
43676: ARRAY
43677: PUSH
43678: LD_INT 2
43680: ARRAY
43681: PPUSH
43682: CALL_OW 351
43686: OR
43687: IFFALSE 43693
// exit ;
43689: POP
43690: POP
43691: GO 43985
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43693: LD_ADDR_VAR 0 8
43697: PUSH
43698: LD_VAR 0 12
43702: PUSH
43703: LD_VAR 0 7
43707: ARRAY
43708: PUSH
43709: LD_INT 1
43711: ARRAY
43712: PPUSH
43713: LD_VAR 0 12
43717: PUSH
43718: LD_VAR 0 7
43722: ARRAY
43723: PUSH
43724: LD_INT 2
43726: ARRAY
43727: PPUSH
43728: CALL_OW 546
43732: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43733: LD_VAR 0 8
43737: PUSH
43738: LD_INT 1
43740: ARRAY
43741: PUSH
43742: LD_VAR 0 8
43746: PUSH
43747: LD_INT 2
43749: ARRAY
43750: PUSH
43751: LD_VAR 0 13
43755: PUSH
43756: LD_INT 2
43758: PLUS
43759: GREATER
43760: OR
43761: PUSH
43762: LD_VAR 0 8
43766: PUSH
43767: LD_INT 2
43769: ARRAY
43770: PUSH
43771: LD_VAR 0 13
43775: PUSH
43776: LD_INT 2
43778: MINUS
43779: LESS
43780: OR
43781: PUSH
43782: LD_VAR 0 8
43786: PUSH
43787: LD_INT 3
43789: ARRAY
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 8
43796: PUSH
43797: LD_INT 9
43799: PUSH
43800: LD_INT 10
43802: PUSH
43803: LD_INT 11
43805: PUSH
43806: LD_INT 12
43808: PUSH
43809: LD_INT 13
43811: PUSH
43812: LD_INT 16
43814: PUSH
43815: LD_INT 17
43817: PUSH
43818: LD_INT 18
43820: PUSH
43821: LD_INT 19
43823: PUSH
43824: LD_INT 20
43826: PUSH
43827: LD_INT 21
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: IN
43845: NOT
43846: OR
43847: PUSH
43848: LD_VAR 0 8
43852: PUSH
43853: LD_INT 5
43855: ARRAY
43856: NOT
43857: OR
43858: PUSH
43859: LD_VAR 0 8
43863: PUSH
43864: LD_INT 6
43866: ARRAY
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 7
43876: PUSH
43877: LD_INT 9
43879: PUSH
43880: LD_INT 10
43882: PUSH
43883: LD_INT 11
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: IN
43894: NOT
43895: OR
43896: IFFALSE 43902
// exit ;
43898: POP
43899: POP
43900: GO 43985
// end ;
43902: GO 43573
43904: POP
43905: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43906: LD_VAR 0 9
43910: PPUSH
43911: LD_VAR 0 3
43915: PPUSH
43916: LD_VAR 0 4
43920: PPUSH
43921: LD_INT 20
43923: PPUSH
43924: CALL 35931 0 4
43928: PUSH
43929: LD_INT 4
43931: ARRAY
43932: IFFALSE 43936
// exit ;
43934: GO 43985
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43936: LD_VAR 0 2
43940: PUSH
43941: LD_INT 29
43943: PUSH
43944: LD_INT 30
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: IN
43951: PUSH
43952: LD_VAR 0 3
43956: PPUSH
43957: LD_VAR 0 4
43961: PPUSH
43962: LD_VAR 0 9
43966: PPUSH
43967: CALL_OW 440
43971: NOT
43972: AND
43973: IFFALSE 43977
// exit ;
43975: GO 43985
// result := true ;
43977: LD_ADDR_VAR 0 6
43981: PUSH
43982: LD_INT 1
43984: ST_TO_ADDR
// end ;
43985: LD_VAR 0 6
43989: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43990: LD_INT 0
43992: PPUSH
43993: PPUSH
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
// result = [ ] ;
44050: LD_ADDR_VAR 0 7
44054: PUSH
44055: EMPTY
44056: ST_TO_ADDR
// temp_list = [ ] ;
44057: LD_ADDR_VAR 0 9
44061: PUSH
44062: EMPTY
44063: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44064: LD_VAR 0 4
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 4
44083: PUSH
44084: LD_INT 5
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: IN
44095: NOT
44096: PUSH
44097: LD_VAR 0 1
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: IN
44112: PUSH
44113: LD_VAR 0 5
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: IN
44132: NOT
44133: AND
44134: OR
44135: IFFALSE 44139
// exit ;
44137: GO 62530
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44139: LD_VAR 0 1
44143: PUSH
44144: LD_INT 6
44146: PUSH
44147: LD_INT 7
44149: PUSH
44150: LD_INT 8
44152: PUSH
44153: LD_INT 13
44155: PUSH
44156: LD_INT 12
44158: PUSH
44159: LD_INT 15
44161: PUSH
44162: LD_INT 11
44164: PUSH
44165: LD_INT 14
44167: PUSH
44168: LD_INT 10
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: IN
44182: IFFALSE 44192
// btype = b_lab ;
44184: LD_ADDR_VAR 0 1
44188: PUSH
44189: LD_INT 6
44191: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44192: LD_VAR 0 6
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: LIST
44210: IN
44211: NOT
44212: PUSH
44213: LD_VAR 0 1
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 6
44232: PUSH
44233: LD_INT 36
44235: PUSH
44236: LD_INT 4
44238: PUSH
44239: LD_INT 5
44241: PUSH
44242: LD_INT 31
44244: PUSH
44245: LD_INT 32
44247: PUSH
44248: LD_INT 33
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: IN
44264: NOT
44265: PUSH
44266: LD_VAR 0 6
44270: PUSH
44271: LD_INT 1
44273: EQUAL
44274: AND
44275: OR
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: IN
44292: NOT
44293: PUSH
44294: LD_VAR 0 6
44298: PUSH
44299: LD_INT 2
44301: EQUAL
44302: AND
44303: OR
44304: IFFALSE 44314
// mode = 0 ;
44306: LD_ADDR_VAR 0 6
44310: PUSH
44311: LD_INT 0
44313: ST_TO_ADDR
// case mode of 0 :
44314: LD_VAR 0 6
44318: PUSH
44319: LD_INT 0
44321: DOUBLE
44322: EQUAL
44323: IFTRUE 44327
44325: GO 55780
44327: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44328: LD_ADDR_VAR 0 11
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44521: LD_ADDR_VAR 0 12
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44717: LD_ADDR_VAR 0 13
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 3
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 3
44888: NEG
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44916: LD_ADDR_VAR 0 14
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 3
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45112: LD_ADDR_VAR 0 15
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45305: LD_ADDR_VAR 0 16
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45498: LD_ADDR_VAR 0 17
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45728: LD_ADDR_VAR 0 18
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45958: LD_ADDR_VAR 0 19
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46188: LD_ADDR_VAR 0 20
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46418: LD_ADDR_VAR 0 21
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46648: LD_ADDR_VAR 0 22
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46878: LD_ADDR_VAR 0 23
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 3
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47158: LD_ADDR_VAR 0 24
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47434: LD_ADDR_VAR 0 25
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47708: LD_ADDR_VAR 0 26
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 3
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47984: LD_ADDR_VAR 0 27
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48264: LD_ADDR_VAR 0 28
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48546: LD_ADDR_VAR 0 29
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 3
48790: NEG
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48825: LD_ADDR_VAR 0 30
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49103: LD_ADDR_VAR 0 31
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 3
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49381: LD_ADDR_VAR 0 32
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49659: LD_ADDR_VAR 0 33
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49938: LD_ADDR_VAR 0 34
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 3
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50218: LD_ADDR_VAR 0 35
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50330: LD_ADDR_VAR 0 36
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50442: LD_ADDR_VAR 0 37
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50554: LD_ADDR_VAR 0 38
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50666: LD_ADDR_VAR 0 39
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50778: LD_ADDR_VAR 0 40
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50890: LD_ADDR_VAR 0 41
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51240: LD_ADDR_VAR 0 42
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51590: LD_ADDR_VAR 0 43
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 3
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51938: LD_ADDR_VAR 0 44
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 3
52247: NEG
52248: PUSH
52249: LD_INT 3
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52288: LD_ADDR_VAR 0 45
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: LD_INT 3
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52638: LD_ADDR_VAR 0 46
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52986: LD_ADDR_VAR 0 47
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53137: LD_ADDR_VAR 0 48
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53284: LD_ADDR_VAR 0 49
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53428: LD_ADDR_VAR 0 50
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53572: LD_ADDR_VAR 0 51
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53719: LD_ADDR_VAR 0 52
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53870: LD_ADDR_VAR 0 53
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54100: LD_ADDR_VAR 0 54
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54330: LD_ADDR_VAR 0 55
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54560: LD_ADDR_VAR 0 56
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54790: LD_ADDR_VAR 0 57
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55020: LD_ADDR_VAR 0 58
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55250: LD_ADDR_VAR 0 59
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55338: LD_ADDR_VAR 0 60
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55426: LD_ADDR_VAR 0 61
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55514: LD_ADDR_VAR 0 62
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55602: LD_ADDR_VAR 0 63
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55690: LD_ADDR_VAR 0 64
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// end ; 1 :
55778: GO 61675
55780: LD_INT 1
55782: DOUBLE
55783: EQUAL
55784: IFTRUE 55788
55786: GO 58411
55788: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55789: LD_ADDR_VAR 0 11
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55833: LD_ADDR_VAR 0 12
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55874: LD_ADDR_VAR 0 13
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55914: LD_ADDR_VAR 0 14
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55955: LD_ADDR_VAR 0 15
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55999: LD_ADDR_VAR 0 16
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56045: LD_ADDR_VAR 0 17
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56089: LD_ADDR_VAR 0 18
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56130: LD_ADDR_VAR 0 19
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: LIST
56169: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56170: LD_ADDR_VAR 0 20
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56211: LD_ADDR_VAR 0 21
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56255: LD_ADDR_VAR 0 22
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56301: LD_ADDR_VAR 0 23
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 4
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56345: LD_ADDR_VAR 0 24
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 4
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56386: LD_ADDR_VAR 0 25
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 4
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56426: LD_ADDR_VAR 0 26
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 4
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56467: LD_ADDR_VAR 0 27
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 4
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56511: LD_ADDR_VAR 0 28
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 4
56542: NEG
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56557: LD_ADDR_VAR 0 29
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 4
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 4
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 5
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 5
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 4
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 6
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 6
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 5
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56712: LD_ADDR_VAR 0 30
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 4
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 4
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 5
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 5
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 5
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 6
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 6
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56855: LD_ADDR_VAR 0 31
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 4
56902: PUSH
56903: LD_INT 4
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: LD_INT 4
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 5
56922: PUSH
56923: LD_INT 4
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 5
56932: PUSH
56933: LD_INT 5
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 4
56942: PUSH
56943: LD_INT 5
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 6
56952: PUSH
56953: LD_INT 5
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 6
56962: PUSH
56963: LD_INT 6
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 5
56972: PUSH
56973: LD_INT 6
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56994: LD_ADDR_VAR 0 32
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 4
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 4
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 5
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 4
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 6
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 6
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 5
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57137: LD_ADDR_VAR 0 33
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 4
57189: NEG
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 4
57200: NEG
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 5
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 6
57257: NEG
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 6
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57292: LD_ADDR_VAR 0 34
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 4
57347: NEG
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 4
57371: NEG
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 5
57383: NEG
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: NEG
57396: PUSH
57397: LD_INT 5
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 5
57407: NEG
57408: PUSH
57409: LD_INT 6
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 6
57419: NEG
57420: PUSH
57421: LD_INT 5
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 6
57431: NEG
57432: PUSH
57433: LD_INT 6
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57455: LD_ADDR_VAR 0 41
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57499: LD_ADDR_VAR 0 42
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57540: LD_ADDR_VAR 0 43
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57580: LD_ADDR_VAR 0 44
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57621: LD_ADDR_VAR 0 45
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57665: LD_ADDR_VAR 0 46
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57711: LD_ADDR_VAR 0 47
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57744: LD_ADDR_VAR 0 48
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57775: LD_ADDR_VAR 0 49
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57804: LD_ADDR_VAR 0 50
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57833: LD_ADDR_VAR 0 51
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57864: LD_ADDR_VAR 0 52
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57897: LD_ADDR_VAR 0 53
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57941: LD_ADDR_VAR 0 54
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57982: LD_ADDR_VAR 0 55
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58022: LD_ADDR_VAR 0 56
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58063: LD_ADDR_VAR 0 57
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58107: LD_ADDR_VAR 0 58
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58153: LD_ADDR_VAR 0 59
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58197: LD_ADDR_VAR 0 60
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58238: LD_ADDR_VAR 0 61
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58278: LD_ADDR_VAR 0 62
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58319: LD_ADDR_VAR 0 63
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58363: LD_ADDR_VAR 0 64
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: ST_TO_ADDR
// end ; 2 :
58409: GO 61675
58411: LD_INT 2
58413: DOUBLE
58414: EQUAL
58415: IFTRUE 58419
58417: GO 61674
58419: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58420: LD_ADDR_VAR 0 29
58424: PUSH
58425: LD_INT 4
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 5
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 5
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 5
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 3
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: LD_INT 4
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 4
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 5
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 5
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 4
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 5
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: NEG
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: LD_INT 5
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: LD_INT 4
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: LD_INT 3
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 4
58853: NEG
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 5
58865: NEG
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 5
58877: NEG
58878: PUSH
58879: LD_INT 5
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 5
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 5
58901: NEG
58902: PUSH
58903: LD_INT 3
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58958: LD_ADDR_VAR 0 30
58962: PUSH
58963: LD_INT 4
58965: PUSH
58966: LD_INT 4
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 5
58985: PUSH
58986: LD_INT 4
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 5
58995: PUSH
58996: LD_INT 5
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: PUSH
59006: LD_INT 5
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 5
59035: PUSH
59036: LD_INT 3
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 4
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 4
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 4
59148: NEG
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: NEG
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: NEG
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 5
59204: NEG
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 5
59215: NEG
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 5
59227: NEG
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: LD_INT 4
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 4
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 4
59322: NEG
59323: PUSH
59324: LD_INT 4
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 4
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 4
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 4
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: LD_INT 5
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: LD_INT 5
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59505: LD_ADDR_VAR 0 31
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 4
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 5
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 5
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 4
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 5
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 4
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 4
59707: NEG
59708: PUSH
59709: LD_INT 4
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: LD_INT 5
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: LD_INT 4
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 4
59755: NEG
59756: PUSH
59757: LD_INT 3
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: LD_INT 4
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 5
59779: NEG
59780: PUSH
59781: LD_INT 5
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: LD_INT 5
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 5
59803: NEG
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 4
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 4
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 5
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 5
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60055: LD_ADDR_VAR 0 32
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 5
60118: NEG
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 5
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 5
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 4
60224: NEG
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 4
60236: NEG
60237: PUSH
60238: LD_INT 4
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 4
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 4
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 4
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: LD_INT 4
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 5
60487: PUSH
60488: LD_INT 4
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 5
60497: PUSH
60498: LD_INT 5
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 4
60507: PUSH
60508: LD_INT 5
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 5
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 5
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60602: LD_ADDR_VAR 0 33
60606: PUSH
60607: LD_INT 4
60609: NEG
60610: PUSH
60611: LD_INT 4
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 4
60621: NEG
60622: PUSH
60623: LD_INT 5
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: LD_INT 4
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: LD_INT 3
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: NEG
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 5
60669: NEG
60670: PUSH
60671: LD_INT 4
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 5
60681: NEG
60682: PUSH
60683: LD_INT 5
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: LD_INT 5
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 4
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 4
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 5
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 4
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 3
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 5
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: PUSH
60933: LD_INT 3
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 4
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 4
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 5
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 5
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 5
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61140: LD_ADDR_VAR 0 34
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 4
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 5
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 5
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: LD_INT 5
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: LD_INT 4
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: LD_INT 4
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 5
61372: PUSH
61373: LD_INT 5
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: LD_INT 5
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 5
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 5
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 4
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 4
61525: NEG
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 4
61536: NEG
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 4
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 5
61581: NEG
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 5
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 5
61604: NEG
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: ST_TO_ADDR
// end ; end ;
61672: GO 61675
61674: POP
// case btype of b_depot , b_warehouse :
61675: LD_VAR 0 1
61679: PUSH
61680: LD_INT 0
61682: DOUBLE
61683: EQUAL
61684: IFTRUE 61694
61686: LD_INT 1
61688: DOUBLE
61689: EQUAL
61690: IFTRUE 61694
61692: GO 61895
61694: POP
// case nation of nation_american :
61695: LD_VAR 0 5
61699: PUSH
61700: LD_INT 1
61702: DOUBLE
61703: EQUAL
61704: IFTRUE 61708
61706: GO 61764
61708: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61709: LD_ADDR_VAR 0 9
61713: PUSH
61714: LD_VAR 0 11
61718: PUSH
61719: LD_VAR 0 12
61723: PUSH
61724: LD_VAR 0 13
61728: PUSH
61729: LD_VAR 0 14
61733: PUSH
61734: LD_VAR 0 15
61738: PUSH
61739: LD_VAR 0 16
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: PUSH
61752: LD_VAR 0 4
61756: PUSH
61757: LD_INT 1
61759: PLUS
61760: ARRAY
61761: ST_TO_ADDR
61762: GO 61893
61764: LD_INT 2
61766: DOUBLE
61767: EQUAL
61768: IFTRUE 61772
61770: GO 61828
61772: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61773: LD_ADDR_VAR 0 9
61777: PUSH
61778: LD_VAR 0 17
61782: PUSH
61783: LD_VAR 0 18
61787: PUSH
61788: LD_VAR 0 19
61792: PUSH
61793: LD_VAR 0 20
61797: PUSH
61798: LD_VAR 0 21
61802: PUSH
61803: LD_VAR 0 22
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: PUSH
61816: LD_VAR 0 4
61820: PUSH
61821: LD_INT 1
61823: PLUS
61824: ARRAY
61825: ST_TO_ADDR
61826: GO 61893
61828: LD_INT 3
61830: DOUBLE
61831: EQUAL
61832: IFTRUE 61836
61834: GO 61892
61836: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61837: LD_ADDR_VAR 0 9
61841: PUSH
61842: LD_VAR 0 23
61846: PUSH
61847: LD_VAR 0 24
61851: PUSH
61852: LD_VAR 0 25
61856: PUSH
61857: LD_VAR 0 26
61861: PUSH
61862: LD_VAR 0 27
61866: PUSH
61867: LD_VAR 0 28
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: PUSH
61880: LD_VAR 0 4
61884: PUSH
61885: LD_INT 1
61887: PLUS
61888: ARRAY
61889: ST_TO_ADDR
61890: GO 61893
61892: POP
61893: GO 62448
61895: LD_INT 2
61897: DOUBLE
61898: EQUAL
61899: IFTRUE 61909
61901: LD_INT 3
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61909
61907: GO 61965
61909: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61910: LD_ADDR_VAR 0 9
61914: PUSH
61915: LD_VAR 0 29
61919: PUSH
61920: LD_VAR 0 30
61924: PUSH
61925: LD_VAR 0 31
61929: PUSH
61930: LD_VAR 0 32
61934: PUSH
61935: LD_VAR 0 33
61939: PUSH
61940: LD_VAR 0 34
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: PUSH
61953: LD_VAR 0 4
61957: PUSH
61958: LD_INT 1
61960: PLUS
61961: ARRAY
61962: ST_TO_ADDR
61963: GO 62448
61965: LD_INT 16
61967: DOUBLE
61968: EQUAL
61969: IFTRUE 62027
61971: LD_INT 17
61973: DOUBLE
61974: EQUAL
61975: IFTRUE 62027
61977: LD_INT 18
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 62027
61983: LD_INT 19
61985: DOUBLE
61986: EQUAL
61987: IFTRUE 62027
61989: LD_INT 22
61991: DOUBLE
61992: EQUAL
61993: IFTRUE 62027
61995: LD_INT 20
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62027
62001: LD_INT 21
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62027
62007: LD_INT 23
62009: DOUBLE
62010: EQUAL
62011: IFTRUE 62027
62013: LD_INT 24
62015: DOUBLE
62016: EQUAL
62017: IFTRUE 62027
62019: LD_INT 25
62021: DOUBLE
62022: EQUAL
62023: IFTRUE 62027
62025: GO 62083
62027: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62028: LD_ADDR_VAR 0 9
62032: PUSH
62033: LD_VAR 0 35
62037: PUSH
62038: LD_VAR 0 36
62042: PUSH
62043: LD_VAR 0 37
62047: PUSH
62048: LD_VAR 0 38
62052: PUSH
62053: LD_VAR 0 39
62057: PUSH
62058: LD_VAR 0 40
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 4
62075: PUSH
62076: LD_INT 1
62078: PLUS
62079: ARRAY
62080: ST_TO_ADDR
62081: GO 62448
62083: LD_INT 6
62085: DOUBLE
62086: EQUAL
62087: IFTRUE 62139
62089: LD_INT 7
62091: DOUBLE
62092: EQUAL
62093: IFTRUE 62139
62095: LD_INT 8
62097: DOUBLE
62098: EQUAL
62099: IFTRUE 62139
62101: LD_INT 13
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62139
62107: LD_INT 12
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62139
62113: LD_INT 15
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62139
62119: LD_INT 11
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62139
62125: LD_INT 14
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62139
62131: LD_INT 10
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62139
62137: GO 62195
62139: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62140: LD_ADDR_VAR 0 9
62144: PUSH
62145: LD_VAR 0 41
62149: PUSH
62150: LD_VAR 0 42
62154: PUSH
62155: LD_VAR 0 43
62159: PUSH
62160: LD_VAR 0 44
62164: PUSH
62165: LD_VAR 0 45
62169: PUSH
62170: LD_VAR 0 46
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: PUSH
62183: LD_VAR 0 4
62187: PUSH
62188: LD_INT 1
62190: PLUS
62191: ARRAY
62192: ST_TO_ADDR
62193: GO 62448
62195: LD_INT 36
62197: DOUBLE
62198: EQUAL
62199: IFTRUE 62203
62201: GO 62259
62203: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62204: LD_ADDR_VAR 0 9
62208: PUSH
62209: LD_VAR 0 47
62213: PUSH
62214: LD_VAR 0 48
62218: PUSH
62219: LD_VAR 0 49
62223: PUSH
62224: LD_VAR 0 50
62228: PUSH
62229: LD_VAR 0 51
62233: PUSH
62234: LD_VAR 0 52
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: PUSH
62247: LD_VAR 0 4
62251: PUSH
62252: LD_INT 1
62254: PLUS
62255: ARRAY
62256: ST_TO_ADDR
62257: GO 62448
62259: LD_INT 4
62261: DOUBLE
62262: EQUAL
62263: IFTRUE 62285
62265: LD_INT 5
62267: DOUBLE
62268: EQUAL
62269: IFTRUE 62285
62271: LD_INT 34
62273: DOUBLE
62274: EQUAL
62275: IFTRUE 62285
62277: LD_INT 37
62279: DOUBLE
62280: EQUAL
62281: IFTRUE 62285
62283: GO 62341
62285: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62286: LD_ADDR_VAR 0 9
62290: PUSH
62291: LD_VAR 0 53
62295: PUSH
62296: LD_VAR 0 54
62300: PUSH
62301: LD_VAR 0 55
62305: PUSH
62306: LD_VAR 0 56
62310: PUSH
62311: LD_VAR 0 57
62315: PUSH
62316: LD_VAR 0 58
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: LD_VAR 0 4
62333: PUSH
62334: LD_INT 1
62336: PLUS
62337: ARRAY
62338: ST_TO_ADDR
62339: GO 62448
62341: LD_INT 31
62343: DOUBLE
62344: EQUAL
62345: IFTRUE 62391
62347: LD_INT 32
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62391
62353: LD_INT 33
62355: DOUBLE
62356: EQUAL
62357: IFTRUE 62391
62359: LD_INT 27
62361: DOUBLE
62362: EQUAL
62363: IFTRUE 62391
62365: LD_INT 26
62367: DOUBLE
62368: EQUAL
62369: IFTRUE 62391
62371: LD_INT 28
62373: DOUBLE
62374: EQUAL
62375: IFTRUE 62391
62377: LD_INT 29
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62391
62383: LD_INT 30
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62391
62389: GO 62447
62391: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62392: LD_ADDR_VAR 0 9
62396: PUSH
62397: LD_VAR 0 59
62401: PUSH
62402: LD_VAR 0 60
62406: PUSH
62407: LD_VAR 0 61
62411: PUSH
62412: LD_VAR 0 62
62416: PUSH
62417: LD_VAR 0 63
62421: PUSH
62422: LD_VAR 0 64
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: PUSH
62435: LD_VAR 0 4
62439: PUSH
62440: LD_INT 1
62442: PLUS
62443: ARRAY
62444: ST_TO_ADDR
62445: GO 62448
62447: POP
// temp_list2 = [ ] ;
62448: LD_ADDR_VAR 0 10
62452: PUSH
62453: EMPTY
62454: ST_TO_ADDR
// for i in temp_list do
62455: LD_ADDR_VAR 0 8
62459: PUSH
62460: LD_VAR 0 9
62464: PUSH
62465: FOR_IN
62466: IFFALSE 62518
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62468: LD_ADDR_VAR 0 10
62472: PUSH
62473: LD_VAR 0 10
62477: PUSH
62478: LD_VAR 0 8
62482: PUSH
62483: LD_INT 1
62485: ARRAY
62486: PUSH
62487: LD_VAR 0 2
62491: PLUS
62492: PUSH
62493: LD_VAR 0 8
62497: PUSH
62498: LD_INT 2
62500: ARRAY
62501: PUSH
62502: LD_VAR 0 3
62506: PLUS
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: ADD
62515: ST_TO_ADDR
62516: GO 62465
62518: POP
62519: POP
// result = temp_list2 ;
62520: LD_ADDR_VAR 0 7
62524: PUSH
62525: LD_VAR 0 10
62529: ST_TO_ADDR
// end ;
62530: LD_VAR 0 7
62534: RET
// export function EnemyInRange ( unit , dist ) ; begin
62535: LD_INT 0
62537: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62538: LD_ADDR_VAR 0 3
62542: PUSH
62543: LD_VAR 0 1
62547: PPUSH
62548: CALL_OW 255
62552: PPUSH
62553: LD_VAR 0 1
62557: PPUSH
62558: CALL_OW 250
62562: PPUSH
62563: LD_VAR 0 1
62567: PPUSH
62568: CALL_OW 251
62572: PPUSH
62573: LD_VAR 0 2
62577: PPUSH
62578: CALL 35931 0 4
62582: PUSH
62583: LD_INT 4
62585: ARRAY
62586: ST_TO_ADDR
// end ;
62587: LD_VAR 0 3
62591: RET
// export function PlayerSeeMe ( unit ) ; begin
62592: LD_INT 0
62594: PPUSH
// result := See ( your_side , unit ) ;
62595: LD_ADDR_VAR 0 2
62599: PUSH
62600: LD_OWVAR 2
62604: PPUSH
62605: LD_VAR 0 1
62609: PPUSH
62610: CALL_OW 292
62614: ST_TO_ADDR
// end ;
62615: LD_VAR 0 2
62619: RET
// export function ReverseDir ( unit ) ; begin
62620: LD_INT 0
62622: PPUSH
// if not unit then
62623: LD_VAR 0 1
62627: NOT
62628: IFFALSE 62632
// exit ;
62630: GO 62655
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62632: LD_ADDR_VAR 0 2
62636: PUSH
62637: LD_VAR 0 1
62641: PPUSH
62642: CALL_OW 254
62646: PUSH
62647: LD_INT 3
62649: PLUS
62650: PUSH
62651: LD_INT 6
62653: MOD
62654: ST_TO_ADDR
// end ;
62655: LD_VAR 0 2
62659: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62660: LD_INT 0
62662: PPUSH
62663: PPUSH
62664: PPUSH
62665: PPUSH
62666: PPUSH
// if not hexes then
62667: LD_VAR 0 2
62671: NOT
62672: IFFALSE 62676
// exit ;
62674: GO 62824
// dist := 9999 ;
62676: LD_ADDR_VAR 0 5
62680: PUSH
62681: LD_INT 9999
62683: ST_TO_ADDR
// for i = 1 to hexes do
62684: LD_ADDR_VAR 0 4
62688: PUSH
62689: DOUBLE
62690: LD_INT 1
62692: DEC
62693: ST_TO_ADDR
62694: LD_VAR 0 2
62698: PUSH
62699: FOR_TO
62700: IFFALSE 62812
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62702: LD_VAR 0 1
62706: PPUSH
62707: LD_VAR 0 2
62711: PUSH
62712: LD_VAR 0 4
62716: ARRAY
62717: PUSH
62718: LD_INT 1
62720: ARRAY
62721: PPUSH
62722: LD_VAR 0 2
62726: PUSH
62727: LD_VAR 0 4
62731: ARRAY
62732: PUSH
62733: LD_INT 2
62735: ARRAY
62736: PPUSH
62737: CALL_OW 297
62741: PUSH
62742: LD_VAR 0 5
62746: LESS
62747: IFFALSE 62810
// begin hex := hexes [ i ] ;
62749: LD_ADDR_VAR 0 7
62753: PUSH
62754: LD_VAR 0 2
62758: PUSH
62759: LD_VAR 0 4
62763: ARRAY
62764: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62765: LD_ADDR_VAR 0 5
62769: PUSH
62770: LD_VAR 0 1
62774: PPUSH
62775: LD_VAR 0 2
62779: PUSH
62780: LD_VAR 0 4
62784: ARRAY
62785: PUSH
62786: LD_INT 1
62788: ARRAY
62789: PPUSH
62790: LD_VAR 0 2
62794: PUSH
62795: LD_VAR 0 4
62799: ARRAY
62800: PUSH
62801: LD_INT 2
62803: ARRAY
62804: PPUSH
62805: CALL_OW 297
62809: ST_TO_ADDR
// end ; end ;
62810: GO 62699
62812: POP
62813: POP
// result := hex ;
62814: LD_ADDR_VAR 0 3
62818: PUSH
62819: LD_VAR 0 7
62823: ST_TO_ADDR
// end ;
62824: LD_VAR 0 3
62828: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62829: LD_INT 0
62831: PPUSH
62832: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62833: LD_VAR 0 1
62837: NOT
62838: PUSH
62839: LD_VAR 0 1
62843: PUSH
62844: LD_INT 21
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 23
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PPUSH
62868: CALL_OW 69
62872: IN
62873: NOT
62874: OR
62875: IFFALSE 62879
// exit ;
62877: GO 62926
// for i = 1 to 3 do
62879: LD_ADDR_VAR 0 3
62883: PUSH
62884: DOUBLE
62885: LD_INT 1
62887: DEC
62888: ST_TO_ADDR
62889: LD_INT 3
62891: PUSH
62892: FOR_TO
62893: IFFALSE 62924
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62895: LD_VAR 0 1
62899: PPUSH
62900: CALL_OW 250
62904: PPUSH
62905: LD_VAR 0 1
62909: PPUSH
62910: CALL_OW 251
62914: PPUSH
62915: LD_INT 1
62917: PPUSH
62918: CALL_OW 453
62922: GO 62892
62924: POP
62925: POP
// end ;
62926: LD_VAR 0 2
62930: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62931: LD_INT 0
62933: PPUSH
62934: PPUSH
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62939: LD_VAR 0 1
62943: NOT
62944: PUSH
62945: LD_VAR 0 2
62949: NOT
62950: OR
62951: PUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 314
62961: OR
62962: IFFALSE 62966
// exit ;
62964: GO 63407
// x := GetX ( enemy_unit ) ;
62966: LD_ADDR_VAR 0 7
62970: PUSH
62971: LD_VAR 0 2
62975: PPUSH
62976: CALL_OW 250
62980: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62981: LD_ADDR_VAR 0 8
62985: PUSH
62986: LD_VAR 0 2
62990: PPUSH
62991: CALL_OW 251
62995: ST_TO_ADDR
// if not x or not y then
62996: LD_VAR 0 7
63000: NOT
63001: PUSH
63002: LD_VAR 0 8
63006: NOT
63007: OR
63008: IFFALSE 63012
// exit ;
63010: GO 63407
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63012: LD_ADDR_VAR 0 6
63016: PUSH
63017: LD_VAR 0 7
63021: PPUSH
63022: LD_INT 0
63024: PPUSH
63025: LD_INT 4
63027: PPUSH
63028: CALL_OW 272
63032: PUSH
63033: LD_VAR 0 8
63037: PPUSH
63038: LD_INT 0
63040: PPUSH
63041: LD_INT 4
63043: PPUSH
63044: CALL_OW 273
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_VAR 0 7
63057: PPUSH
63058: LD_INT 1
63060: PPUSH
63061: LD_INT 4
63063: PPUSH
63064: CALL_OW 272
63068: PUSH
63069: LD_VAR 0 8
63073: PPUSH
63074: LD_INT 1
63076: PPUSH
63077: LD_INT 4
63079: PPUSH
63080: CALL_OW 273
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_VAR 0 7
63093: PPUSH
63094: LD_INT 2
63096: PPUSH
63097: LD_INT 4
63099: PPUSH
63100: CALL_OW 272
63104: PUSH
63105: LD_VAR 0 8
63109: PPUSH
63110: LD_INT 2
63112: PPUSH
63113: LD_INT 4
63115: PPUSH
63116: CALL_OW 273
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_VAR 0 7
63129: PPUSH
63130: LD_INT 3
63132: PPUSH
63133: LD_INT 4
63135: PPUSH
63136: CALL_OW 272
63140: PUSH
63141: LD_VAR 0 8
63145: PPUSH
63146: LD_INT 3
63148: PPUSH
63149: LD_INT 4
63151: PPUSH
63152: CALL_OW 273
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_VAR 0 7
63165: PPUSH
63166: LD_INT 4
63168: PPUSH
63169: LD_INT 4
63171: PPUSH
63172: CALL_OW 272
63176: PUSH
63177: LD_VAR 0 8
63181: PPUSH
63182: LD_INT 4
63184: PPUSH
63185: LD_INT 4
63187: PPUSH
63188: CALL_OW 273
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_VAR 0 7
63201: PPUSH
63202: LD_INT 5
63204: PPUSH
63205: LD_INT 4
63207: PPUSH
63208: CALL_OW 272
63212: PUSH
63213: LD_VAR 0 8
63217: PPUSH
63218: LD_INT 5
63220: PPUSH
63221: LD_INT 4
63223: PPUSH
63224: CALL_OW 273
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: ST_TO_ADDR
// for i = tmp downto 1 do
63241: LD_ADDR_VAR 0 4
63245: PUSH
63246: DOUBLE
63247: LD_VAR 0 6
63251: INC
63252: ST_TO_ADDR
63253: LD_INT 1
63255: PUSH
63256: FOR_DOWNTO
63257: IFFALSE 63358
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63259: LD_VAR 0 6
63263: PUSH
63264: LD_VAR 0 4
63268: ARRAY
63269: PUSH
63270: LD_INT 1
63272: ARRAY
63273: PPUSH
63274: LD_VAR 0 6
63278: PUSH
63279: LD_VAR 0 4
63283: ARRAY
63284: PUSH
63285: LD_INT 2
63287: ARRAY
63288: PPUSH
63289: CALL_OW 488
63293: NOT
63294: PUSH
63295: LD_VAR 0 6
63299: PUSH
63300: LD_VAR 0 4
63304: ARRAY
63305: PUSH
63306: LD_INT 1
63308: ARRAY
63309: PPUSH
63310: LD_VAR 0 6
63314: PUSH
63315: LD_VAR 0 4
63319: ARRAY
63320: PUSH
63321: LD_INT 2
63323: ARRAY
63324: PPUSH
63325: CALL_OW 428
63329: PUSH
63330: LD_INT 0
63332: NONEQUAL
63333: OR
63334: IFFALSE 63356
// tmp := Delete ( tmp , i ) ;
63336: LD_ADDR_VAR 0 6
63340: PUSH
63341: LD_VAR 0 6
63345: PPUSH
63346: LD_VAR 0 4
63350: PPUSH
63351: CALL_OW 3
63355: ST_TO_ADDR
63356: GO 63256
63358: POP
63359: POP
// j := GetClosestHex ( unit , tmp ) ;
63360: LD_ADDR_VAR 0 5
63364: PUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: LD_VAR 0 6
63374: PPUSH
63375: CALL 62660 0 2
63379: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63380: LD_VAR 0 1
63384: PPUSH
63385: LD_VAR 0 5
63389: PUSH
63390: LD_INT 1
63392: ARRAY
63393: PPUSH
63394: LD_VAR 0 5
63398: PUSH
63399: LD_INT 2
63401: ARRAY
63402: PPUSH
63403: CALL_OW 111
// end ;
63407: LD_VAR 0 3
63411: RET
// export function PrepareApemanSoldier ( ) ; begin
63412: LD_INT 0
63414: PPUSH
// uc_nation := 0 ;
63415: LD_ADDR_OWVAR 21
63419: PUSH
63420: LD_INT 0
63422: ST_TO_ADDR
// hc_sex := sex_male ;
63423: LD_ADDR_OWVAR 27
63427: PUSH
63428: LD_INT 1
63430: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63431: LD_ADDR_OWVAR 28
63435: PUSH
63436: LD_INT 15
63438: ST_TO_ADDR
// hc_gallery :=  ;
63439: LD_ADDR_OWVAR 33
63443: PUSH
63444: LD_STRING 
63446: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63447: LD_ADDR_OWVAR 31
63451: PUSH
63452: LD_INT 0
63454: PPUSH
63455: LD_INT 3
63457: PPUSH
63458: CALL_OW 12
63462: PUSH
63463: LD_INT 0
63465: PPUSH
63466: LD_INT 3
63468: PPUSH
63469: CALL_OW 12
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: ST_TO_ADDR
// end ;
63486: LD_VAR 0 1
63490: RET
// export function PrepareApemanEngineer ( ) ; begin
63491: LD_INT 0
63493: PPUSH
// uc_nation := 0 ;
63494: LD_ADDR_OWVAR 21
63498: PUSH
63499: LD_INT 0
63501: ST_TO_ADDR
// hc_sex := sex_male ;
63502: LD_ADDR_OWVAR 27
63506: PUSH
63507: LD_INT 1
63509: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63510: LD_ADDR_OWVAR 28
63514: PUSH
63515: LD_INT 16
63517: ST_TO_ADDR
// hc_gallery :=  ;
63518: LD_ADDR_OWVAR 33
63522: PUSH
63523: LD_STRING 
63525: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63526: LD_ADDR_OWVAR 31
63530: PUSH
63531: LD_INT 0
63533: PPUSH
63534: LD_INT 3
63536: PPUSH
63537: CALL_OW 12
63541: PUSH
63542: LD_INT 0
63544: PPUSH
63545: LD_INT 3
63547: PPUSH
63548: CALL_OW 12
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// end ;
63565: LD_VAR 0 1
63569: RET
// export function PrepareApeman ( agressivity ) ; begin
63570: LD_INT 0
63572: PPUSH
// uc_side := 0 ;
63573: LD_ADDR_OWVAR 20
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
// uc_nation := 0 ;
63581: LD_ADDR_OWVAR 21
63585: PUSH
63586: LD_INT 0
63588: ST_TO_ADDR
// hc_sex := sex_male ;
63589: LD_ADDR_OWVAR 27
63593: PUSH
63594: LD_INT 1
63596: ST_TO_ADDR
// hc_class := class_apeman ;
63597: LD_ADDR_OWVAR 28
63601: PUSH
63602: LD_INT 12
63604: ST_TO_ADDR
// hc_gallery :=  ;
63605: LD_ADDR_OWVAR 33
63609: PUSH
63610: LD_STRING 
63612: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63613: LD_ADDR_OWVAR 35
63617: PUSH
63618: LD_VAR 0 1
63622: NEG
63623: PPUSH
63624: LD_VAR 0 1
63628: PPUSH
63629: CALL_OW 12
63633: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63634: LD_ADDR_OWVAR 31
63638: PUSH
63639: LD_INT 0
63641: PPUSH
63642: LD_INT 3
63644: PPUSH
63645: CALL_OW 12
63649: PUSH
63650: LD_INT 0
63652: PPUSH
63653: LD_INT 3
63655: PPUSH
63656: CALL_OW 12
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// end ;
63673: LD_VAR 0 2
63677: RET
// export function PrepareTiger ( agressivity ) ; begin
63678: LD_INT 0
63680: PPUSH
// uc_side := 0 ;
63681: LD_ADDR_OWVAR 20
63685: PUSH
63686: LD_INT 0
63688: ST_TO_ADDR
// uc_nation := 0 ;
63689: LD_ADDR_OWVAR 21
63693: PUSH
63694: LD_INT 0
63696: ST_TO_ADDR
// hc_class := class_tiger ;
63697: LD_ADDR_OWVAR 28
63701: PUSH
63702: LD_INT 14
63704: ST_TO_ADDR
// hc_gallery :=  ;
63705: LD_ADDR_OWVAR 33
63709: PUSH
63710: LD_STRING 
63712: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63713: LD_ADDR_OWVAR 35
63717: PUSH
63718: LD_VAR 0 1
63722: NEG
63723: PPUSH
63724: LD_VAR 0 1
63728: PPUSH
63729: CALL_OW 12
63733: ST_TO_ADDR
// end ;
63734: LD_VAR 0 2
63738: RET
// export function PrepareEnchidna ( ) ; begin
63739: LD_INT 0
63741: PPUSH
// uc_side := 0 ;
63742: LD_ADDR_OWVAR 20
63746: PUSH
63747: LD_INT 0
63749: ST_TO_ADDR
// uc_nation := 0 ;
63750: LD_ADDR_OWVAR 21
63754: PUSH
63755: LD_INT 0
63757: ST_TO_ADDR
// hc_class := class_baggie ;
63758: LD_ADDR_OWVAR 28
63762: PUSH
63763: LD_INT 13
63765: ST_TO_ADDR
// hc_gallery :=  ;
63766: LD_ADDR_OWVAR 33
63770: PUSH
63771: LD_STRING 
63773: ST_TO_ADDR
// end ;
63774: LD_VAR 0 1
63778: RET
// export function PrepareFrog ( ) ; begin
63779: LD_INT 0
63781: PPUSH
// uc_side := 0 ;
63782: LD_ADDR_OWVAR 20
63786: PUSH
63787: LD_INT 0
63789: ST_TO_ADDR
// uc_nation := 0 ;
63790: LD_ADDR_OWVAR 21
63794: PUSH
63795: LD_INT 0
63797: ST_TO_ADDR
// hc_class := class_frog ;
63798: LD_ADDR_OWVAR 28
63802: PUSH
63803: LD_INT 19
63805: ST_TO_ADDR
// hc_gallery :=  ;
63806: LD_ADDR_OWVAR 33
63810: PUSH
63811: LD_STRING 
63813: ST_TO_ADDR
// end ;
63814: LD_VAR 0 1
63818: RET
// export function PrepareFish ( ) ; begin
63819: LD_INT 0
63821: PPUSH
// uc_side := 0 ;
63822: LD_ADDR_OWVAR 20
63826: PUSH
63827: LD_INT 0
63829: ST_TO_ADDR
// uc_nation := 0 ;
63830: LD_ADDR_OWVAR 21
63834: PUSH
63835: LD_INT 0
63837: ST_TO_ADDR
// hc_class := class_fish ;
63838: LD_ADDR_OWVAR 28
63842: PUSH
63843: LD_INT 20
63845: ST_TO_ADDR
// hc_gallery :=  ;
63846: LD_ADDR_OWVAR 33
63850: PUSH
63851: LD_STRING 
63853: ST_TO_ADDR
// end ;
63854: LD_VAR 0 1
63858: RET
// export function PrepareBird ( ) ; begin
63859: LD_INT 0
63861: PPUSH
// uc_side := 0 ;
63862: LD_ADDR_OWVAR 20
63866: PUSH
63867: LD_INT 0
63869: ST_TO_ADDR
// uc_nation := 0 ;
63870: LD_ADDR_OWVAR 21
63874: PUSH
63875: LD_INT 0
63877: ST_TO_ADDR
// hc_class := class_phororhacos ;
63878: LD_ADDR_OWVAR 28
63882: PUSH
63883: LD_INT 18
63885: ST_TO_ADDR
// hc_gallery :=  ;
63886: LD_ADDR_OWVAR 33
63890: PUSH
63891: LD_STRING 
63893: ST_TO_ADDR
// end ;
63894: LD_VAR 0 1
63898: RET
// export function PrepareHorse ( ) ; begin
63899: LD_INT 0
63901: PPUSH
// uc_side := 0 ;
63902: LD_ADDR_OWVAR 20
63906: PUSH
63907: LD_INT 0
63909: ST_TO_ADDR
// uc_nation := 0 ;
63910: LD_ADDR_OWVAR 21
63914: PUSH
63915: LD_INT 0
63917: ST_TO_ADDR
// hc_class := class_horse ;
63918: LD_ADDR_OWVAR 28
63922: PUSH
63923: LD_INT 21
63925: ST_TO_ADDR
// hc_gallery :=  ;
63926: LD_ADDR_OWVAR 33
63930: PUSH
63931: LD_STRING 
63933: ST_TO_ADDR
// end ;
63934: LD_VAR 0 1
63938: RET
// export function PrepareMastodont ( ) ; begin
63939: LD_INT 0
63941: PPUSH
// uc_side := 0 ;
63942: LD_ADDR_OWVAR 20
63946: PUSH
63947: LD_INT 0
63949: ST_TO_ADDR
// uc_nation := 0 ;
63950: LD_ADDR_OWVAR 21
63954: PUSH
63955: LD_INT 0
63957: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63958: LD_ADDR_OWVAR 37
63962: PUSH
63963: LD_INT 31
63965: ST_TO_ADDR
// vc_control := control_rider ;
63966: LD_ADDR_OWVAR 38
63970: PUSH
63971: LD_INT 4
63973: ST_TO_ADDR
// end ;
63974: LD_VAR 0 1
63978: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63979: LD_INT 0
63981: PPUSH
63982: PPUSH
63983: PPUSH
// uc_side = 0 ;
63984: LD_ADDR_OWVAR 20
63988: PUSH
63989: LD_INT 0
63991: ST_TO_ADDR
// uc_nation = 0 ;
63992: LD_ADDR_OWVAR 21
63996: PUSH
63997: LD_INT 0
63999: ST_TO_ADDR
// InitHc_All ( ) ;
64000: CALL_OW 584
// InitVc ;
64004: CALL_OW 20
// if mastodonts then
64008: LD_VAR 0 6
64012: IFFALSE 64079
// for i = 1 to mastodonts do
64014: LD_ADDR_VAR 0 11
64018: PUSH
64019: DOUBLE
64020: LD_INT 1
64022: DEC
64023: ST_TO_ADDR
64024: LD_VAR 0 6
64028: PUSH
64029: FOR_TO
64030: IFFALSE 64077
// begin vc_chassis := 31 ;
64032: LD_ADDR_OWVAR 37
64036: PUSH
64037: LD_INT 31
64039: ST_TO_ADDR
// vc_control := control_rider ;
64040: LD_ADDR_OWVAR 38
64044: PUSH
64045: LD_INT 4
64047: ST_TO_ADDR
// animal := CreateVehicle ;
64048: LD_ADDR_VAR 0 12
64052: PUSH
64053: CALL_OW 45
64057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64058: LD_VAR 0 12
64062: PPUSH
64063: LD_VAR 0 8
64067: PPUSH
64068: LD_INT 0
64070: PPUSH
64071: CALL 66214 0 3
// end ;
64075: GO 64029
64077: POP
64078: POP
// if horses then
64079: LD_VAR 0 5
64083: IFFALSE 64150
// for i = 1 to horses do
64085: LD_ADDR_VAR 0 11
64089: PUSH
64090: DOUBLE
64091: LD_INT 1
64093: DEC
64094: ST_TO_ADDR
64095: LD_VAR 0 5
64099: PUSH
64100: FOR_TO
64101: IFFALSE 64148
// begin hc_class := 21 ;
64103: LD_ADDR_OWVAR 28
64107: PUSH
64108: LD_INT 21
64110: ST_TO_ADDR
// hc_gallery :=  ;
64111: LD_ADDR_OWVAR 33
64115: PUSH
64116: LD_STRING 
64118: ST_TO_ADDR
// animal := CreateHuman ;
64119: LD_ADDR_VAR 0 12
64123: PUSH
64124: CALL_OW 44
64128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64129: LD_VAR 0 12
64133: PPUSH
64134: LD_VAR 0 8
64138: PPUSH
64139: LD_INT 0
64141: PPUSH
64142: CALL 66214 0 3
// end ;
64146: GO 64100
64148: POP
64149: POP
// if birds then
64150: LD_VAR 0 1
64154: IFFALSE 64221
// for i = 1 to birds do
64156: LD_ADDR_VAR 0 11
64160: PUSH
64161: DOUBLE
64162: LD_INT 1
64164: DEC
64165: ST_TO_ADDR
64166: LD_VAR 0 1
64170: PUSH
64171: FOR_TO
64172: IFFALSE 64219
// begin hc_class = 18 ;
64174: LD_ADDR_OWVAR 28
64178: PUSH
64179: LD_INT 18
64181: ST_TO_ADDR
// hc_gallery =  ;
64182: LD_ADDR_OWVAR 33
64186: PUSH
64187: LD_STRING 
64189: ST_TO_ADDR
// animal := CreateHuman ;
64190: LD_ADDR_VAR 0 12
64194: PUSH
64195: CALL_OW 44
64199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64200: LD_VAR 0 12
64204: PPUSH
64205: LD_VAR 0 8
64209: PPUSH
64210: LD_INT 0
64212: PPUSH
64213: CALL 66214 0 3
// end ;
64217: GO 64171
64219: POP
64220: POP
// if tigers then
64221: LD_VAR 0 2
64225: IFFALSE 64309
// for i = 1 to tigers do
64227: LD_ADDR_VAR 0 11
64231: PUSH
64232: DOUBLE
64233: LD_INT 1
64235: DEC
64236: ST_TO_ADDR
64237: LD_VAR 0 2
64241: PUSH
64242: FOR_TO
64243: IFFALSE 64307
// begin hc_class = class_tiger ;
64245: LD_ADDR_OWVAR 28
64249: PUSH
64250: LD_INT 14
64252: ST_TO_ADDR
// hc_gallery =  ;
64253: LD_ADDR_OWVAR 33
64257: PUSH
64258: LD_STRING 
64260: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64261: LD_ADDR_OWVAR 35
64265: PUSH
64266: LD_INT 7
64268: NEG
64269: PPUSH
64270: LD_INT 7
64272: PPUSH
64273: CALL_OW 12
64277: ST_TO_ADDR
// animal := CreateHuman ;
64278: LD_ADDR_VAR 0 12
64282: PUSH
64283: CALL_OW 44
64287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64288: LD_VAR 0 12
64292: PPUSH
64293: LD_VAR 0 8
64297: PPUSH
64298: LD_INT 0
64300: PPUSH
64301: CALL 66214 0 3
// end ;
64305: GO 64242
64307: POP
64308: POP
// if apemans then
64309: LD_VAR 0 3
64313: IFFALSE 64436
// for i = 1 to apemans do
64315: LD_ADDR_VAR 0 11
64319: PUSH
64320: DOUBLE
64321: LD_INT 1
64323: DEC
64324: ST_TO_ADDR
64325: LD_VAR 0 3
64329: PUSH
64330: FOR_TO
64331: IFFALSE 64434
// begin hc_class = class_apeman ;
64333: LD_ADDR_OWVAR 28
64337: PUSH
64338: LD_INT 12
64340: ST_TO_ADDR
// hc_gallery =  ;
64341: LD_ADDR_OWVAR 33
64345: PUSH
64346: LD_STRING 
64348: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64349: LD_ADDR_OWVAR 35
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PPUSH
64358: LD_INT 2
64360: PPUSH
64361: CALL_OW 12
64365: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64366: LD_ADDR_OWVAR 31
64370: PUSH
64371: LD_INT 1
64373: PPUSH
64374: LD_INT 3
64376: PPUSH
64377: CALL_OW 12
64381: PUSH
64382: LD_INT 1
64384: PPUSH
64385: LD_INT 3
64387: PPUSH
64388: CALL_OW 12
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: ST_TO_ADDR
// animal := CreateHuman ;
64405: LD_ADDR_VAR 0 12
64409: PUSH
64410: CALL_OW 44
64414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64415: LD_VAR 0 12
64419: PPUSH
64420: LD_VAR 0 8
64424: PPUSH
64425: LD_INT 0
64427: PPUSH
64428: CALL 66214 0 3
// end ;
64432: GO 64330
64434: POP
64435: POP
// if enchidnas then
64436: LD_VAR 0 4
64440: IFFALSE 64507
// for i = 1 to enchidnas do
64442: LD_ADDR_VAR 0 11
64446: PUSH
64447: DOUBLE
64448: LD_INT 1
64450: DEC
64451: ST_TO_ADDR
64452: LD_VAR 0 4
64456: PUSH
64457: FOR_TO
64458: IFFALSE 64505
// begin hc_class = 13 ;
64460: LD_ADDR_OWVAR 28
64464: PUSH
64465: LD_INT 13
64467: ST_TO_ADDR
// hc_gallery =  ;
64468: LD_ADDR_OWVAR 33
64472: PUSH
64473: LD_STRING 
64475: ST_TO_ADDR
// animal := CreateHuman ;
64476: LD_ADDR_VAR 0 12
64480: PUSH
64481: CALL_OW 44
64485: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64486: LD_VAR 0 12
64490: PPUSH
64491: LD_VAR 0 8
64495: PPUSH
64496: LD_INT 0
64498: PPUSH
64499: CALL 66214 0 3
// end ;
64503: GO 64457
64505: POP
64506: POP
// if fishes then
64507: LD_VAR 0 7
64511: IFFALSE 64578
// for i = 1 to fishes do
64513: LD_ADDR_VAR 0 11
64517: PUSH
64518: DOUBLE
64519: LD_INT 1
64521: DEC
64522: ST_TO_ADDR
64523: LD_VAR 0 7
64527: PUSH
64528: FOR_TO
64529: IFFALSE 64576
// begin hc_class = 20 ;
64531: LD_ADDR_OWVAR 28
64535: PUSH
64536: LD_INT 20
64538: ST_TO_ADDR
// hc_gallery =  ;
64539: LD_ADDR_OWVAR 33
64543: PUSH
64544: LD_STRING 
64546: ST_TO_ADDR
// animal := CreateHuman ;
64547: LD_ADDR_VAR 0 12
64551: PUSH
64552: CALL_OW 44
64556: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64557: LD_VAR 0 12
64561: PPUSH
64562: LD_VAR 0 9
64566: PPUSH
64567: LD_INT 0
64569: PPUSH
64570: CALL 66214 0 3
// end ;
64574: GO 64528
64576: POP
64577: POP
// end ;
64578: LD_VAR 0 10
64582: RET
// export function WantHeal ( sci , unit ) ; begin
64583: LD_INT 0
64585: PPUSH
// if GetTaskList ( sci ) > 0 then
64586: LD_VAR 0 1
64590: PPUSH
64591: CALL_OW 437
64595: PUSH
64596: LD_INT 0
64598: GREATER
64599: IFFALSE 64669
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 437
64610: PUSH
64611: LD_INT 1
64613: ARRAY
64614: PUSH
64615: LD_INT 1
64617: ARRAY
64618: PUSH
64619: LD_STRING l
64621: EQUAL
64622: PUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: CALL_OW 437
64632: PUSH
64633: LD_INT 1
64635: ARRAY
64636: PUSH
64637: LD_INT 4
64639: ARRAY
64640: PUSH
64641: LD_VAR 0 2
64645: EQUAL
64646: AND
64647: IFFALSE 64659
// result := true else
64649: LD_ADDR_VAR 0 3
64653: PUSH
64654: LD_INT 1
64656: ST_TO_ADDR
64657: GO 64667
// result := false ;
64659: LD_ADDR_VAR 0 3
64663: PUSH
64664: LD_INT 0
64666: ST_TO_ADDR
// end else
64667: GO 64677
// result := false ;
64669: LD_ADDR_VAR 0 3
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// end ;
64677: LD_VAR 0 3
64681: RET
// export function HealTarget ( sci ) ; begin
64682: LD_INT 0
64684: PPUSH
// if not sci then
64685: LD_VAR 0 1
64689: NOT
64690: IFFALSE 64694
// exit ;
64692: GO 64759
// result := 0 ;
64694: LD_ADDR_VAR 0 2
64698: PUSH
64699: LD_INT 0
64701: ST_TO_ADDR
// if GetTaskList ( sci ) then
64702: LD_VAR 0 1
64706: PPUSH
64707: CALL_OW 437
64711: IFFALSE 64759
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64713: LD_VAR 0 1
64717: PPUSH
64718: CALL_OW 437
64722: PUSH
64723: LD_INT 1
64725: ARRAY
64726: PUSH
64727: LD_INT 1
64729: ARRAY
64730: PUSH
64731: LD_STRING l
64733: EQUAL
64734: IFFALSE 64759
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64736: LD_ADDR_VAR 0 2
64740: PUSH
64741: LD_VAR 0 1
64745: PPUSH
64746: CALL_OW 437
64750: PUSH
64751: LD_INT 1
64753: ARRAY
64754: PUSH
64755: LD_INT 4
64757: ARRAY
64758: ST_TO_ADDR
// end ;
64759: LD_VAR 0 2
64763: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64764: LD_INT 0
64766: PPUSH
64767: PPUSH
64768: PPUSH
64769: PPUSH
// if not base_units then
64770: LD_VAR 0 1
64774: NOT
64775: IFFALSE 64779
// exit ;
64777: GO 64866
// result := false ;
64779: LD_ADDR_VAR 0 2
64783: PUSH
64784: LD_INT 0
64786: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64787: LD_ADDR_VAR 0 5
64791: PUSH
64792: LD_VAR 0 1
64796: PPUSH
64797: LD_INT 21
64799: PUSH
64800: LD_INT 3
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PPUSH
64807: CALL_OW 72
64811: ST_TO_ADDR
// if not tmp then
64812: LD_VAR 0 5
64816: NOT
64817: IFFALSE 64821
// exit ;
64819: GO 64866
// for i in tmp do
64821: LD_ADDR_VAR 0 3
64825: PUSH
64826: LD_VAR 0 5
64830: PUSH
64831: FOR_IN
64832: IFFALSE 64864
// begin result := EnemyInRange ( i , 22 ) ;
64834: LD_ADDR_VAR 0 2
64838: PUSH
64839: LD_VAR 0 3
64843: PPUSH
64844: LD_INT 22
64846: PPUSH
64847: CALL 62535 0 2
64851: ST_TO_ADDR
// if result then
64852: LD_VAR 0 2
64856: IFFALSE 64862
// exit ;
64858: POP
64859: POP
64860: GO 64866
// end ;
64862: GO 64831
64864: POP
64865: POP
// end ;
64866: LD_VAR 0 2
64870: RET
// export function FilterByTag ( units , tag ) ; begin
64871: LD_INT 0
64873: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64874: LD_ADDR_VAR 0 3
64878: PUSH
64879: LD_VAR 0 1
64883: PPUSH
64884: LD_INT 120
64886: PUSH
64887: LD_VAR 0 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PPUSH
64896: CALL_OW 72
64900: ST_TO_ADDR
// end ;
64901: LD_VAR 0 3
64905: RET
// export function IsDriver ( un ) ; begin
64906: LD_INT 0
64908: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64909: LD_ADDR_VAR 0 2
64913: PUSH
64914: LD_VAR 0 1
64918: PUSH
64919: LD_INT 55
64921: PUSH
64922: EMPTY
64923: LIST
64924: PPUSH
64925: CALL_OW 69
64929: IN
64930: ST_TO_ADDR
// end ;
64931: LD_VAR 0 2
64935: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64936: LD_INT 0
64938: PPUSH
64939: PPUSH
// list := [ ] ;
64940: LD_ADDR_VAR 0 5
64944: PUSH
64945: EMPTY
64946: ST_TO_ADDR
// case d of 0 :
64947: LD_VAR 0 3
64951: PUSH
64952: LD_INT 0
64954: DOUBLE
64955: EQUAL
64956: IFTRUE 64960
64958: GO 65093
64960: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64961: LD_ADDR_VAR 0 5
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: LD_INT 4
64973: MINUS
64974: PUSH
64975: LD_VAR 0 2
64979: PUSH
64980: LD_INT 4
64982: MINUS
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: PUSH
64992: LD_VAR 0 1
64996: PUSH
64997: LD_INT 3
64999: MINUS
65000: PUSH
65001: LD_VAR 0 2
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: PUSH
65014: LD_VAR 0 1
65018: PUSH
65019: LD_INT 4
65021: PLUS
65022: PUSH
65023: LD_VAR 0 2
65027: PUSH
65028: LD_INT 4
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: PUSH
65036: LD_VAR 0 1
65040: PUSH
65041: LD_INT 3
65043: PLUS
65044: PUSH
65045: LD_VAR 0 2
65049: PUSH
65050: LD_INT 3
65052: PLUS
65053: PUSH
65054: LD_INT 5
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: PUSH
65062: LD_VAR 0 1
65066: PUSH
65067: LD_VAR 0 2
65071: PUSH
65072: LD_INT 4
65074: PLUS
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: ST_TO_ADDR
// end ; 1 :
65091: GO 65791
65093: LD_INT 1
65095: DOUBLE
65096: EQUAL
65097: IFTRUE 65101
65099: GO 65234
65101: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65102: LD_ADDR_VAR 0 5
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: LD_VAR 0 2
65116: PUSH
65117: LD_INT 4
65119: MINUS
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: PUSH
65129: LD_VAR 0 1
65133: PUSH
65134: LD_INT 3
65136: MINUS
65137: PUSH
65138: LD_VAR 0 2
65142: PUSH
65143: LD_INT 3
65145: MINUS
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: PUSH
65155: LD_VAR 0 1
65159: PUSH
65160: LD_INT 4
65162: MINUS
65163: PUSH
65164: LD_VAR 0 2
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: LIST
65176: PUSH
65177: LD_VAR 0 1
65181: PUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_INT 3
65189: PLUS
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: LIST
65198: PUSH
65199: LD_VAR 0 1
65203: PUSH
65204: LD_INT 4
65206: PLUS
65207: PUSH
65208: LD_VAR 0 2
65212: PUSH
65213: LD_INT 4
65215: PLUS
65216: PUSH
65217: LD_INT 5
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: ST_TO_ADDR
// end ; 2 :
65232: GO 65791
65234: LD_INT 2
65236: DOUBLE
65237: EQUAL
65238: IFTRUE 65242
65240: GO 65371
65242: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65243: LD_ADDR_VAR 0 5
65247: PUSH
65248: LD_VAR 0 1
65252: PUSH
65253: LD_VAR 0 2
65257: PUSH
65258: LD_INT 3
65260: MINUS
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: PUSH
65270: LD_VAR 0 1
65274: PUSH
65275: LD_INT 4
65277: PLUS
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 1
65296: PUSH
65297: LD_VAR 0 2
65301: PUSH
65302: LD_INT 4
65304: PLUS
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: PUSH
65314: LD_VAR 0 1
65318: PUSH
65319: LD_INT 3
65321: MINUS
65322: PUSH
65323: LD_VAR 0 2
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: PUSH
65336: LD_VAR 0 1
65340: PUSH
65341: LD_INT 4
65343: MINUS
65344: PUSH
65345: LD_VAR 0 2
65349: PUSH
65350: LD_INT 4
65352: MINUS
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// end ; 3 :
65369: GO 65791
65371: LD_INT 3
65373: DOUBLE
65374: EQUAL
65375: IFTRUE 65379
65377: GO 65512
65379: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65380: LD_ADDR_VAR 0 5
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 3
65392: PLUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: PUSH
65407: LD_VAR 0 1
65411: PUSH
65412: LD_INT 4
65414: PLUS
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: LD_INT 4
65423: PLUS
65424: PUSH
65425: LD_INT 5
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: LD_VAR 0 1
65437: PUSH
65438: LD_INT 4
65440: MINUS
65441: PUSH
65442: LD_VAR 0 2
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 1
65459: PUSH
65460: LD_VAR 0 2
65464: PUSH
65465: LD_INT 4
65467: MINUS
65468: PUSH
65469: LD_INT 3
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: PUSH
65477: LD_VAR 0 1
65481: PUSH
65482: LD_INT 3
65484: MINUS
65485: PUSH
65486: LD_VAR 0 2
65490: PUSH
65491: LD_INT 3
65493: MINUS
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// end ; 4 :
65510: GO 65791
65512: LD_INT 4
65514: DOUBLE
65515: EQUAL
65516: IFTRUE 65520
65518: GO 65653
65520: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65521: LD_ADDR_VAR 0 5
65525: PUSH
65526: LD_VAR 0 1
65530: PUSH
65531: LD_VAR 0 2
65535: PUSH
65536: LD_INT 4
65538: PLUS
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: PUSH
65548: LD_VAR 0 1
65552: PUSH
65553: LD_INT 3
65555: PLUS
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: LD_INT 3
65564: PLUS
65565: PUSH
65566: LD_INT 5
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: LD_VAR 0 1
65578: PUSH
65579: LD_INT 4
65581: PLUS
65582: PUSH
65583: LD_VAR 0 2
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: LIST
65595: PUSH
65596: LD_VAR 0 1
65600: PUSH
65601: LD_VAR 0 2
65605: PUSH
65606: LD_INT 3
65608: MINUS
65609: PUSH
65610: LD_INT 3
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: LIST
65617: PUSH
65618: LD_VAR 0 1
65622: PUSH
65623: LD_INT 4
65625: MINUS
65626: PUSH
65627: LD_VAR 0 2
65631: PUSH
65632: LD_INT 4
65634: MINUS
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: ST_TO_ADDR
// end ; 5 :
65651: GO 65791
65653: LD_INT 5
65655: DOUBLE
65656: EQUAL
65657: IFTRUE 65661
65659: GO 65790
65661: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65662: LD_ADDR_VAR 0 5
65666: PUSH
65667: LD_VAR 0 1
65671: PUSH
65672: LD_INT 4
65674: MINUS
65675: PUSH
65676: LD_VAR 0 2
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_VAR 0 2
65698: PUSH
65699: LD_INT 4
65701: MINUS
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: PUSH
65711: LD_VAR 0 1
65715: PUSH
65716: LD_INT 4
65718: PLUS
65719: PUSH
65720: LD_VAR 0 2
65724: PUSH
65725: LD_INT 4
65727: PLUS
65728: PUSH
65729: LD_INT 5
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: PUSH
65737: LD_VAR 0 1
65741: PUSH
65742: LD_INT 3
65744: PLUS
65745: PUSH
65746: LD_VAR 0 2
65750: PUSH
65751: LD_INT 4
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: LD_VAR 0 2
65768: PUSH
65769: LD_INT 3
65771: PLUS
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: ST_TO_ADDR
// end ; end ;
65788: GO 65791
65790: POP
// result := list ;
65791: LD_ADDR_VAR 0 4
65795: PUSH
65796: LD_VAR 0 5
65800: ST_TO_ADDR
// end ;
65801: LD_VAR 0 4
65805: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65806: LD_INT 0
65808: PPUSH
65809: PPUSH
65810: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65811: LD_VAR 0 1
65815: NOT
65816: PUSH
65817: LD_VAR 0 2
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: LD_INT 4
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: IN
65840: NOT
65841: OR
65842: IFFALSE 65846
// exit ;
65844: GO 65938
// tmp := [ ] ;
65846: LD_ADDR_VAR 0 5
65850: PUSH
65851: EMPTY
65852: ST_TO_ADDR
// for i in units do
65853: LD_ADDR_VAR 0 4
65857: PUSH
65858: LD_VAR 0 1
65862: PUSH
65863: FOR_IN
65864: IFFALSE 65907
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65866: LD_ADDR_VAR 0 5
65870: PUSH
65871: LD_VAR 0 5
65875: PPUSH
65876: LD_VAR 0 5
65880: PUSH
65881: LD_INT 1
65883: PLUS
65884: PPUSH
65885: LD_VAR 0 4
65889: PPUSH
65890: LD_VAR 0 2
65894: PPUSH
65895: CALL_OW 259
65899: PPUSH
65900: CALL_OW 2
65904: ST_TO_ADDR
65905: GO 65863
65907: POP
65908: POP
// if not tmp then
65909: LD_VAR 0 5
65913: NOT
65914: IFFALSE 65918
// exit ;
65916: GO 65938
// result := SortListByListDesc ( units , tmp ) ;
65918: LD_ADDR_VAR 0 3
65922: PUSH
65923: LD_VAR 0 1
65927: PPUSH
65928: LD_VAR 0 5
65932: PPUSH
65933: CALL_OW 77
65937: ST_TO_ADDR
// end ;
65938: LD_VAR 0 3
65942: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65943: LD_INT 0
65945: PPUSH
65946: PPUSH
65947: PPUSH
// result := false ;
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: LD_INT 0
65955: ST_TO_ADDR
// x := GetX ( building ) ;
65956: LD_ADDR_VAR 0 4
65960: PUSH
65961: LD_VAR 0 2
65965: PPUSH
65966: CALL_OW 250
65970: ST_TO_ADDR
// y := GetY ( building ) ;
65971: LD_ADDR_VAR 0 5
65975: PUSH
65976: LD_VAR 0 2
65980: PPUSH
65981: CALL_OW 251
65985: ST_TO_ADDR
// if not building or not x or not y then
65986: LD_VAR 0 2
65990: NOT
65991: PUSH
65992: LD_VAR 0 4
65996: NOT
65997: OR
65998: PUSH
65999: LD_VAR 0 5
66003: NOT
66004: OR
66005: IFFALSE 66009
// exit ;
66007: GO 66101
// if GetTaskList ( unit ) then
66009: LD_VAR 0 1
66013: PPUSH
66014: CALL_OW 437
66018: IFFALSE 66101
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66020: LD_STRING e
66022: PUSH
66023: LD_VAR 0 1
66027: PPUSH
66028: CALL_OW 437
66032: PUSH
66033: LD_INT 1
66035: ARRAY
66036: PUSH
66037: LD_INT 1
66039: ARRAY
66040: EQUAL
66041: PUSH
66042: LD_VAR 0 4
66046: PUSH
66047: LD_VAR 0 1
66051: PPUSH
66052: CALL_OW 437
66056: PUSH
66057: LD_INT 1
66059: ARRAY
66060: PUSH
66061: LD_INT 2
66063: ARRAY
66064: EQUAL
66065: AND
66066: PUSH
66067: LD_VAR 0 5
66071: PUSH
66072: LD_VAR 0 1
66076: PPUSH
66077: CALL_OW 437
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PUSH
66086: LD_INT 3
66088: ARRAY
66089: EQUAL
66090: AND
66091: IFFALSE 66101
// result := true end ;
66093: LD_ADDR_VAR 0 3
66097: PUSH
66098: LD_INT 1
66100: ST_TO_ADDR
// end ;
66101: LD_VAR 0 3
66105: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66106: LD_INT 0
66108: PPUSH
// result := false ;
66109: LD_ADDR_VAR 0 4
66113: PUSH
66114: LD_INT 0
66116: ST_TO_ADDR
// if GetTaskList ( unit ) then
66117: LD_VAR 0 1
66121: PPUSH
66122: CALL_OW 437
66126: IFFALSE 66209
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66128: LD_STRING M
66130: PUSH
66131: LD_VAR 0 1
66135: PPUSH
66136: CALL_OW 437
66140: PUSH
66141: LD_INT 1
66143: ARRAY
66144: PUSH
66145: LD_INT 1
66147: ARRAY
66148: EQUAL
66149: PUSH
66150: LD_VAR 0 2
66154: PUSH
66155: LD_VAR 0 1
66159: PPUSH
66160: CALL_OW 437
66164: PUSH
66165: LD_INT 1
66167: ARRAY
66168: PUSH
66169: LD_INT 2
66171: ARRAY
66172: EQUAL
66173: AND
66174: PUSH
66175: LD_VAR 0 3
66179: PUSH
66180: LD_VAR 0 1
66184: PPUSH
66185: CALL_OW 437
66189: PUSH
66190: LD_INT 1
66192: ARRAY
66193: PUSH
66194: LD_INT 3
66196: ARRAY
66197: EQUAL
66198: AND
66199: IFFALSE 66209
// result := true ;
66201: LD_ADDR_VAR 0 4
66205: PUSH
66206: LD_INT 1
66208: ST_TO_ADDR
// end ; end ;
66209: LD_VAR 0 4
66213: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66214: LD_INT 0
66216: PPUSH
66217: PPUSH
66218: PPUSH
66219: PPUSH
// if not unit or not area then
66220: LD_VAR 0 1
66224: NOT
66225: PUSH
66226: LD_VAR 0 2
66230: NOT
66231: OR
66232: IFFALSE 66236
// exit ;
66234: GO 66400
// tmp := AreaToList ( area , i ) ;
66236: LD_ADDR_VAR 0 6
66240: PUSH
66241: LD_VAR 0 2
66245: PPUSH
66246: LD_VAR 0 5
66250: PPUSH
66251: CALL_OW 517
66255: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66256: LD_ADDR_VAR 0 5
66260: PUSH
66261: DOUBLE
66262: LD_INT 1
66264: DEC
66265: ST_TO_ADDR
66266: LD_VAR 0 6
66270: PUSH
66271: LD_INT 1
66273: ARRAY
66274: PUSH
66275: FOR_TO
66276: IFFALSE 66398
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66278: LD_ADDR_VAR 0 7
66282: PUSH
66283: LD_VAR 0 6
66287: PUSH
66288: LD_INT 1
66290: ARRAY
66291: PUSH
66292: LD_VAR 0 5
66296: ARRAY
66297: PUSH
66298: LD_VAR 0 6
66302: PUSH
66303: LD_INT 2
66305: ARRAY
66306: PUSH
66307: LD_VAR 0 5
66311: ARRAY
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66317: LD_VAR 0 7
66321: PUSH
66322: LD_INT 1
66324: ARRAY
66325: PPUSH
66326: LD_VAR 0 7
66330: PUSH
66331: LD_INT 2
66333: ARRAY
66334: PPUSH
66335: CALL_OW 428
66339: PUSH
66340: LD_INT 0
66342: EQUAL
66343: IFFALSE 66396
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66345: LD_VAR 0 1
66349: PPUSH
66350: LD_VAR 0 7
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PPUSH
66359: LD_VAR 0 7
66363: PUSH
66364: LD_INT 2
66366: ARRAY
66367: PPUSH
66368: LD_VAR 0 3
66372: PPUSH
66373: CALL_OW 48
// result := IsPlaced ( unit ) ;
66377: LD_ADDR_VAR 0 4
66381: PUSH
66382: LD_VAR 0 1
66386: PPUSH
66387: CALL_OW 305
66391: ST_TO_ADDR
// exit ;
66392: POP
66393: POP
66394: GO 66400
// end ; end ;
66396: GO 66275
66398: POP
66399: POP
// end ;
66400: LD_VAR 0 4
66404: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66405: LD_INT 0
66407: PPUSH
66408: PPUSH
66409: PPUSH
// if not side or side > 8 then
66410: LD_VAR 0 1
66414: NOT
66415: PUSH
66416: LD_VAR 0 1
66420: PUSH
66421: LD_INT 8
66423: GREATER
66424: OR
66425: IFFALSE 66429
// exit ;
66427: GO 66616
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66429: LD_ADDR_VAR 0 4
66433: PUSH
66434: LD_INT 22
66436: PUSH
66437: LD_VAR 0 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 21
66448: PUSH
66449: LD_INT 3
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PPUSH
66460: CALL_OW 69
66464: ST_TO_ADDR
// if not tmp then
66465: LD_VAR 0 4
66469: NOT
66470: IFFALSE 66474
// exit ;
66472: GO 66616
// enable_addtolog := true ;
66474: LD_ADDR_OWVAR 81
66478: PUSH
66479: LD_INT 1
66481: ST_TO_ADDR
// AddToLog ( [ ) ;
66482: LD_STRING [
66484: PPUSH
66485: CALL_OW 561
// for i in tmp do
66489: LD_ADDR_VAR 0 3
66493: PUSH
66494: LD_VAR 0 4
66498: PUSH
66499: FOR_IN
66500: IFFALSE 66607
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66502: LD_STRING [
66504: PUSH
66505: LD_VAR 0 3
66509: PPUSH
66510: CALL_OW 266
66514: STR
66515: PUSH
66516: LD_STRING , 
66518: STR
66519: PUSH
66520: LD_VAR 0 3
66524: PPUSH
66525: CALL_OW 250
66529: STR
66530: PUSH
66531: LD_STRING , 
66533: STR
66534: PUSH
66535: LD_VAR 0 3
66539: PPUSH
66540: CALL_OW 251
66544: STR
66545: PUSH
66546: LD_STRING , 
66548: STR
66549: PUSH
66550: LD_VAR 0 3
66554: PPUSH
66555: CALL_OW 254
66559: STR
66560: PUSH
66561: LD_STRING , 
66563: STR
66564: PUSH
66565: LD_VAR 0 3
66569: PPUSH
66570: LD_INT 1
66572: PPUSH
66573: CALL_OW 268
66577: STR
66578: PUSH
66579: LD_STRING , 
66581: STR
66582: PUSH
66583: LD_VAR 0 3
66587: PPUSH
66588: LD_INT 2
66590: PPUSH
66591: CALL_OW 268
66595: STR
66596: PUSH
66597: LD_STRING ],
66599: STR
66600: PPUSH
66601: CALL_OW 561
// end ;
66605: GO 66499
66607: POP
66608: POP
// AddToLog ( ]; ) ;
66609: LD_STRING ];
66611: PPUSH
66612: CALL_OW 561
// end ;
66616: LD_VAR 0 2
66620: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66621: LD_INT 0
66623: PPUSH
66624: PPUSH
66625: PPUSH
66626: PPUSH
66627: PPUSH
// if not area or not rate or not max then
66628: LD_VAR 0 1
66632: NOT
66633: PUSH
66634: LD_VAR 0 2
66638: NOT
66639: OR
66640: PUSH
66641: LD_VAR 0 4
66645: NOT
66646: OR
66647: IFFALSE 66651
// exit ;
66649: GO 66840
// while 1 do
66651: LD_INT 1
66653: IFFALSE 66840
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66655: LD_ADDR_VAR 0 9
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: LD_INT 1
66667: PPUSH
66668: CALL_OW 287
66672: PUSH
66673: LD_INT 10
66675: MUL
66676: ST_TO_ADDR
// r := rate / 10 ;
66677: LD_ADDR_VAR 0 7
66681: PUSH
66682: LD_VAR 0 2
66686: PUSH
66687: LD_INT 10
66689: DIVREAL
66690: ST_TO_ADDR
// time := 1 1$00 ;
66691: LD_ADDR_VAR 0 8
66695: PUSH
66696: LD_INT 2100
66698: ST_TO_ADDR
// if amount < min then
66699: LD_VAR 0 9
66703: PUSH
66704: LD_VAR 0 3
66708: LESS
66709: IFFALSE 66727
// r := r * 2 else
66711: LD_ADDR_VAR 0 7
66715: PUSH
66716: LD_VAR 0 7
66720: PUSH
66721: LD_INT 2
66723: MUL
66724: ST_TO_ADDR
66725: GO 66753
// if amount > max then
66727: LD_VAR 0 9
66731: PUSH
66732: LD_VAR 0 4
66736: GREATER
66737: IFFALSE 66753
// r := r / 2 ;
66739: LD_ADDR_VAR 0 7
66743: PUSH
66744: LD_VAR 0 7
66748: PUSH
66749: LD_INT 2
66751: DIVREAL
66752: ST_TO_ADDR
// time := time / r ;
66753: LD_ADDR_VAR 0 8
66757: PUSH
66758: LD_VAR 0 8
66762: PUSH
66763: LD_VAR 0 7
66767: DIVREAL
66768: ST_TO_ADDR
// if time < 0 then
66769: LD_VAR 0 8
66773: PUSH
66774: LD_INT 0
66776: LESS
66777: IFFALSE 66794
// time := time * - 1 ;
66779: LD_ADDR_VAR 0 8
66783: PUSH
66784: LD_VAR 0 8
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: MUL
66793: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66794: LD_VAR 0 8
66798: PUSH
66799: LD_INT 35
66801: PPUSH
66802: LD_INT 875
66804: PPUSH
66805: CALL_OW 12
66809: PLUS
66810: PPUSH
66811: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66815: LD_INT 1
66817: PPUSH
66818: LD_INT 5
66820: PPUSH
66821: CALL_OW 12
66825: PPUSH
66826: LD_VAR 0 1
66830: PPUSH
66831: LD_INT 1
66833: PPUSH
66834: CALL_OW 55
// end ;
66838: GO 66651
// end ;
66840: LD_VAR 0 5
66844: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66845: LD_INT 0
66847: PPUSH
66848: PPUSH
66849: PPUSH
66850: PPUSH
66851: PPUSH
66852: PPUSH
66853: PPUSH
66854: PPUSH
// if not turrets or not factories then
66855: LD_VAR 0 1
66859: NOT
66860: PUSH
66861: LD_VAR 0 2
66865: NOT
66866: OR
66867: IFFALSE 66871
// exit ;
66869: GO 67178
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66871: LD_ADDR_VAR 0 10
66875: PUSH
66876: LD_INT 5
66878: PUSH
66879: LD_INT 6
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: LD_INT 4
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: LD_INT 5
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 24
66913: PUSH
66914: LD_INT 25
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 23
66923: PUSH
66924: LD_INT 27
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 42
66937: PUSH
66938: LD_INT 43
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 44
66947: PUSH
66948: LD_INT 46
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 45
66957: PUSH
66958: LD_INT 47
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// result := [ ] ;
66975: LD_ADDR_VAR 0 3
66979: PUSH
66980: EMPTY
66981: ST_TO_ADDR
// for i in turrets do
66982: LD_ADDR_VAR 0 4
66986: PUSH
66987: LD_VAR 0 1
66991: PUSH
66992: FOR_IN
66993: IFFALSE 67176
// begin nat := GetNation ( i ) ;
66995: LD_ADDR_VAR 0 7
66999: PUSH
67000: LD_VAR 0 4
67004: PPUSH
67005: CALL_OW 248
67009: ST_TO_ADDR
// weapon := 0 ;
67010: LD_ADDR_VAR 0 8
67014: PUSH
67015: LD_INT 0
67017: ST_TO_ADDR
// if not nat then
67018: LD_VAR 0 7
67022: NOT
67023: IFFALSE 67027
// continue ;
67025: GO 66992
// for j in list [ nat ] do
67027: LD_ADDR_VAR 0 5
67031: PUSH
67032: LD_VAR 0 10
67036: PUSH
67037: LD_VAR 0 7
67041: ARRAY
67042: PUSH
67043: FOR_IN
67044: IFFALSE 67085
// if GetBWeapon ( i ) = j [ 1 ] then
67046: LD_VAR 0 4
67050: PPUSH
67051: CALL_OW 269
67055: PUSH
67056: LD_VAR 0 5
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: EQUAL
67065: IFFALSE 67083
// begin weapon := j [ 2 ] ;
67067: LD_ADDR_VAR 0 8
67071: PUSH
67072: LD_VAR 0 5
67076: PUSH
67077: LD_INT 2
67079: ARRAY
67080: ST_TO_ADDR
// break ;
67081: GO 67085
// end ;
67083: GO 67043
67085: POP
67086: POP
// if not weapon then
67087: LD_VAR 0 8
67091: NOT
67092: IFFALSE 67096
// continue ;
67094: GO 66992
// for k in factories do
67096: LD_ADDR_VAR 0 6
67100: PUSH
67101: LD_VAR 0 2
67105: PUSH
67106: FOR_IN
67107: IFFALSE 67172
// begin weapons := AvailableWeaponList ( k ) ;
67109: LD_ADDR_VAR 0 9
67113: PUSH
67114: LD_VAR 0 6
67118: PPUSH
67119: CALL_OW 478
67123: ST_TO_ADDR
// if not weapons then
67124: LD_VAR 0 9
67128: NOT
67129: IFFALSE 67133
// continue ;
67131: GO 67106
// if weapon in weapons then
67133: LD_VAR 0 8
67137: PUSH
67138: LD_VAR 0 9
67142: IN
67143: IFFALSE 67170
// begin result := [ i , weapon ] ;
67145: LD_ADDR_VAR 0 3
67149: PUSH
67150: LD_VAR 0 4
67154: PUSH
67155: LD_VAR 0 8
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: ST_TO_ADDR
// exit ;
67164: POP
67165: POP
67166: POP
67167: POP
67168: GO 67178
// end ; end ;
67170: GO 67106
67172: POP
67173: POP
// end ;
67174: GO 66992
67176: POP
67177: POP
// end ;
67178: LD_VAR 0 3
67182: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67183: LD_INT 0
67185: PPUSH
// if not side or side > 8 then
67186: LD_VAR 0 3
67190: NOT
67191: PUSH
67192: LD_VAR 0 3
67196: PUSH
67197: LD_INT 8
67199: GREATER
67200: OR
67201: IFFALSE 67205
// exit ;
67203: GO 67264
// if not range then
67205: LD_VAR 0 4
67209: NOT
67210: IFFALSE 67221
// range := - 12 ;
67212: LD_ADDR_VAR 0 4
67216: PUSH
67217: LD_INT 12
67219: NEG
67220: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67221: LD_VAR 0 1
67225: PPUSH
67226: LD_VAR 0 2
67230: PPUSH
67231: LD_VAR 0 3
67235: PPUSH
67236: LD_VAR 0 4
67240: PPUSH
67241: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67245: LD_VAR 0 1
67249: PPUSH
67250: LD_VAR 0 2
67254: PPUSH
67255: LD_VAR 0 3
67259: PPUSH
67260: CALL_OW 331
// end ;
67264: LD_VAR 0 5
67268: RET
// export function Video ( mode ) ; begin
67269: LD_INT 0
67271: PPUSH
// ingame_video = mode ;
67272: LD_ADDR_OWVAR 52
67276: PUSH
67277: LD_VAR 0 1
67281: ST_TO_ADDR
// interface_hidden = mode ;
67282: LD_ADDR_OWVAR 54
67286: PUSH
67287: LD_VAR 0 1
67291: ST_TO_ADDR
// end ;
67292: LD_VAR 0 2
67296: RET
// export function Join ( array , element ) ; begin
67297: LD_INT 0
67299: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67300: LD_ADDR_VAR 0 3
67304: PUSH
67305: LD_VAR 0 1
67309: PPUSH
67310: LD_VAR 0 1
67314: PUSH
67315: LD_INT 1
67317: PLUS
67318: PPUSH
67319: LD_VAR 0 2
67323: PPUSH
67324: CALL_OW 1
67328: ST_TO_ADDR
// end ;
67329: LD_VAR 0 3
67333: RET
// export function JoinUnion ( array , element ) ; begin
67334: LD_INT 0
67336: PPUSH
// result := array union element ;
67337: LD_ADDR_VAR 0 3
67341: PUSH
67342: LD_VAR 0 1
67346: PUSH
67347: LD_VAR 0 2
67351: UNION
67352: ST_TO_ADDR
// end ;
67353: LD_VAR 0 3
67357: RET
// export function GetBehemoths ( side ) ; begin
67358: LD_INT 0
67360: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67361: LD_ADDR_VAR 0 2
67365: PUSH
67366: LD_INT 22
67368: PUSH
67369: LD_VAR 0 1
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 31
67380: PUSH
67381: LD_INT 25
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PPUSH
67392: CALL_OW 69
67396: ST_TO_ADDR
// end ;
67397: LD_VAR 0 2
67401: RET
// export function Shuffle ( array ) ; var i , index ; begin
67402: LD_INT 0
67404: PPUSH
67405: PPUSH
67406: PPUSH
// result := [ ] ;
67407: LD_ADDR_VAR 0 2
67411: PUSH
67412: EMPTY
67413: ST_TO_ADDR
// if not array then
67414: LD_VAR 0 1
67418: NOT
67419: IFFALSE 67423
// exit ;
67421: GO 67522
// Randomize ;
67423: CALL_OW 10
// for i = array downto 1 do
67427: LD_ADDR_VAR 0 3
67431: PUSH
67432: DOUBLE
67433: LD_VAR 0 1
67437: INC
67438: ST_TO_ADDR
67439: LD_INT 1
67441: PUSH
67442: FOR_DOWNTO
67443: IFFALSE 67520
// begin index := rand ( 1 , array ) ;
67445: LD_ADDR_VAR 0 4
67449: PUSH
67450: LD_INT 1
67452: PPUSH
67453: LD_VAR 0 1
67457: PPUSH
67458: CALL_OW 12
67462: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67463: LD_ADDR_VAR 0 2
67467: PUSH
67468: LD_VAR 0 2
67472: PPUSH
67473: LD_VAR 0 2
67477: PUSH
67478: LD_INT 1
67480: PLUS
67481: PPUSH
67482: LD_VAR 0 1
67486: PUSH
67487: LD_VAR 0 4
67491: ARRAY
67492: PPUSH
67493: CALL_OW 2
67497: ST_TO_ADDR
// array := Delete ( array , index ) ;
67498: LD_ADDR_VAR 0 1
67502: PUSH
67503: LD_VAR 0 1
67507: PPUSH
67508: LD_VAR 0 4
67512: PPUSH
67513: CALL_OW 3
67517: ST_TO_ADDR
// end ;
67518: GO 67442
67520: POP
67521: POP
// end ;
67522: LD_VAR 0 2
67526: RET
// export function GetBaseMaterials ( base ) ; begin
67527: LD_INT 0
67529: PPUSH
// result := [ 0 , 0 , 0 ] ;
67530: LD_ADDR_VAR 0 2
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: ST_TO_ADDR
// if not base then
67549: LD_VAR 0 1
67553: NOT
67554: IFFALSE 67558
// exit ;
67556: GO 67607
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67558: LD_ADDR_VAR 0 2
67562: PUSH
67563: LD_VAR 0 1
67567: PPUSH
67568: LD_INT 1
67570: PPUSH
67571: CALL_OW 275
67575: PUSH
67576: LD_VAR 0 1
67580: PPUSH
67581: LD_INT 2
67583: PPUSH
67584: CALL_OW 275
67588: PUSH
67589: LD_VAR 0 1
67593: PPUSH
67594: LD_INT 3
67596: PPUSH
67597: CALL_OW 275
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: LIST
67606: ST_TO_ADDR
// end ;
67607: LD_VAR 0 2
67611: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67612: LD_INT 0
67614: PPUSH
67615: PPUSH
// result := array ;
67616: LD_ADDR_VAR 0 3
67620: PUSH
67621: LD_VAR 0 1
67625: ST_TO_ADDR
// if size >= result then
67626: LD_VAR 0 2
67630: PUSH
67631: LD_VAR 0 3
67635: GREATEREQUAL
67636: IFFALSE 67640
// exit ;
67638: GO 67690
// if size then
67640: LD_VAR 0 2
67644: IFFALSE 67690
// for i := array downto size do
67646: LD_ADDR_VAR 0 4
67650: PUSH
67651: DOUBLE
67652: LD_VAR 0 1
67656: INC
67657: ST_TO_ADDR
67658: LD_VAR 0 2
67662: PUSH
67663: FOR_DOWNTO
67664: IFFALSE 67688
// result := Delete ( result , result ) ;
67666: LD_ADDR_VAR 0 3
67670: PUSH
67671: LD_VAR 0 3
67675: PPUSH
67676: LD_VAR 0 3
67680: PPUSH
67681: CALL_OW 3
67685: ST_TO_ADDR
67686: GO 67663
67688: POP
67689: POP
// end ;
67690: LD_VAR 0 3
67694: RET
// export function ComExit ( unit ) ; var tmp ; begin
67695: LD_INT 0
67697: PPUSH
67698: PPUSH
// if not IsInUnit ( unit ) then
67699: LD_VAR 0 1
67703: PPUSH
67704: CALL_OW 310
67708: NOT
67709: IFFALSE 67713
// exit ;
67711: GO 67773
// tmp := IsInUnit ( unit ) ;
67713: LD_ADDR_VAR 0 3
67717: PUSH
67718: LD_VAR 0 1
67722: PPUSH
67723: CALL_OW 310
67727: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67728: LD_VAR 0 3
67732: PPUSH
67733: CALL_OW 247
67737: PUSH
67738: LD_INT 2
67740: EQUAL
67741: IFFALSE 67754
// ComExitVehicle ( unit ) else
67743: LD_VAR 0 1
67747: PPUSH
67748: CALL_OW 121
67752: GO 67763
// ComExitBuilding ( unit ) ;
67754: LD_VAR 0 1
67758: PPUSH
67759: CALL_OW 122
// result := tmp ;
67763: LD_ADDR_VAR 0 2
67767: PUSH
67768: LD_VAR 0 3
67772: ST_TO_ADDR
// end ;
67773: LD_VAR 0 2
67777: RET
// export function ComExitAll ( units ) ; var i ; begin
67778: LD_INT 0
67780: PPUSH
67781: PPUSH
// if not units then
67782: LD_VAR 0 1
67786: NOT
67787: IFFALSE 67791
// exit ;
67789: GO 67817
// for i in units do
67791: LD_ADDR_VAR 0 3
67795: PUSH
67796: LD_VAR 0 1
67800: PUSH
67801: FOR_IN
67802: IFFALSE 67815
// ComExit ( i ) ;
67804: LD_VAR 0 3
67808: PPUSH
67809: CALL 67695 0 1
67813: GO 67801
67815: POP
67816: POP
// end ;
67817: LD_VAR 0 2
67821: RET
// export function ResetHc ; begin
67822: LD_INT 0
67824: PPUSH
// InitHc ;
67825: CALL_OW 19
// hc_importance := 0 ;
67829: LD_ADDR_OWVAR 32
67833: PUSH
67834: LD_INT 0
67836: ST_TO_ADDR
// end ;
67837: LD_VAR 0 1
67841: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67842: LD_INT 0
67844: PPUSH
67845: PPUSH
67846: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67847: LD_ADDR_VAR 0 6
67851: PUSH
67852: LD_VAR 0 1
67856: PUSH
67857: LD_VAR 0 3
67861: PLUS
67862: PUSH
67863: LD_INT 2
67865: DIV
67866: ST_TO_ADDR
// if _x < 0 then
67867: LD_VAR 0 6
67871: PUSH
67872: LD_INT 0
67874: LESS
67875: IFFALSE 67892
// _x := _x * - 1 ;
67877: LD_ADDR_VAR 0 6
67881: PUSH
67882: LD_VAR 0 6
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: MUL
67891: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67892: LD_ADDR_VAR 0 7
67896: PUSH
67897: LD_VAR 0 2
67901: PUSH
67902: LD_VAR 0 4
67906: PLUS
67907: PUSH
67908: LD_INT 2
67910: DIV
67911: ST_TO_ADDR
// if _y < 0 then
67912: LD_VAR 0 7
67916: PUSH
67917: LD_INT 0
67919: LESS
67920: IFFALSE 67937
// _y := _y * - 1 ;
67922: LD_ADDR_VAR 0 7
67926: PUSH
67927: LD_VAR 0 7
67931: PUSH
67932: LD_INT 1
67934: NEG
67935: MUL
67936: ST_TO_ADDR
// result := [ _x , _y ] ;
67937: LD_ADDR_VAR 0 5
67941: PUSH
67942: LD_VAR 0 6
67946: PUSH
67947: LD_VAR 0 7
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: ST_TO_ADDR
// end ;
67956: LD_VAR 0 5
67960: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67961: LD_INT 0
67963: PPUSH
67964: PPUSH
67965: PPUSH
67966: PPUSH
// task := GetTaskList ( unit ) ;
67967: LD_ADDR_VAR 0 7
67971: PUSH
67972: LD_VAR 0 1
67976: PPUSH
67977: CALL_OW 437
67981: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67982: LD_VAR 0 7
67986: NOT
67987: PUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: LD_VAR 0 2
67997: PPUSH
67998: CALL_OW 308
68002: NOT
68003: AND
68004: IFFALSE 68008
// exit ;
68006: GO 68126
// if IsInArea ( unit , area ) then
68008: LD_VAR 0 1
68012: PPUSH
68013: LD_VAR 0 2
68017: PPUSH
68018: CALL_OW 308
68022: IFFALSE 68040
// begin ComMoveToArea ( unit , goAway ) ;
68024: LD_VAR 0 1
68028: PPUSH
68029: LD_VAR 0 3
68033: PPUSH
68034: CALL_OW 113
// exit ;
68038: GO 68126
// end ; if task [ 1 ] [ 1 ] <> M then
68040: LD_VAR 0 7
68044: PUSH
68045: LD_INT 1
68047: ARRAY
68048: PUSH
68049: LD_INT 1
68051: ARRAY
68052: PUSH
68053: LD_STRING M
68055: NONEQUAL
68056: IFFALSE 68060
// exit ;
68058: GO 68126
// x := task [ 1 ] [ 2 ] ;
68060: LD_ADDR_VAR 0 5
68064: PUSH
68065: LD_VAR 0 7
68069: PUSH
68070: LD_INT 1
68072: ARRAY
68073: PUSH
68074: LD_INT 2
68076: ARRAY
68077: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68078: LD_ADDR_VAR 0 6
68082: PUSH
68083: LD_VAR 0 7
68087: PUSH
68088: LD_INT 1
68090: ARRAY
68091: PUSH
68092: LD_INT 3
68094: ARRAY
68095: ST_TO_ADDR
// if InArea ( x , y , area ) then
68096: LD_VAR 0 5
68100: PPUSH
68101: LD_VAR 0 6
68105: PPUSH
68106: LD_VAR 0 2
68110: PPUSH
68111: CALL_OW 309
68115: IFFALSE 68126
// ComStop ( unit ) ;
68117: LD_VAR 0 1
68121: PPUSH
68122: CALL_OW 141
// end ;
68126: LD_VAR 0 4
68130: RET
// export function Abs ( value ) ; begin
68131: LD_INT 0
68133: PPUSH
// result := value ;
68134: LD_ADDR_VAR 0 2
68138: PUSH
68139: LD_VAR 0 1
68143: ST_TO_ADDR
// if value < 0 then
68144: LD_VAR 0 1
68148: PUSH
68149: LD_INT 0
68151: LESS
68152: IFFALSE 68169
// result := value * - 1 ;
68154: LD_ADDR_VAR 0 2
68158: PUSH
68159: LD_VAR 0 1
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: MUL
68168: ST_TO_ADDR
// end ;
68169: LD_VAR 0 2
68173: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68174: LD_INT 0
68176: PPUSH
68177: PPUSH
68178: PPUSH
68179: PPUSH
68180: PPUSH
68181: PPUSH
68182: PPUSH
68183: PPUSH
// if not unit or not building then
68184: LD_VAR 0 1
68188: NOT
68189: PUSH
68190: LD_VAR 0 2
68194: NOT
68195: OR
68196: IFFALSE 68200
// exit ;
68198: GO 68426
// x := GetX ( building ) ;
68200: LD_ADDR_VAR 0 4
68204: PUSH
68205: LD_VAR 0 2
68209: PPUSH
68210: CALL_OW 250
68214: ST_TO_ADDR
// y := GetY ( building ) ;
68215: LD_ADDR_VAR 0 6
68219: PUSH
68220: LD_VAR 0 2
68224: PPUSH
68225: CALL_OW 251
68229: ST_TO_ADDR
// d := GetDir ( building ) ;
68230: LD_ADDR_VAR 0 8
68234: PUSH
68235: LD_VAR 0 2
68239: PPUSH
68240: CALL_OW 254
68244: ST_TO_ADDR
// r := 4 ;
68245: LD_ADDR_VAR 0 9
68249: PUSH
68250: LD_INT 4
68252: ST_TO_ADDR
// for i := 1 to 5 do
68253: LD_ADDR_VAR 0 10
68257: PUSH
68258: DOUBLE
68259: LD_INT 1
68261: DEC
68262: ST_TO_ADDR
68263: LD_INT 5
68265: PUSH
68266: FOR_TO
68267: IFFALSE 68424
// begin _x := ShiftX ( x , d , r + i ) ;
68269: LD_ADDR_VAR 0 5
68273: PUSH
68274: LD_VAR 0 4
68278: PPUSH
68279: LD_VAR 0 8
68283: PPUSH
68284: LD_VAR 0 9
68288: PUSH
68289: LD_VAR 0 10
68293: PLUS
68294: PPUSH
68295: CALL_OW 272
68299: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68300: LD_ADDR_VAR 0 7
68304: PUSH
68305: LD_VAR 0 6
68309: PPUSH
68310: LD_VAR 0 8
68314: PPUSH
68315: LD_VAR 0 9
68319: PUSH
68320: LD_VAR 0 10
68324: PLUS
68325: PPUSH
68326: CALL_OW 273
68330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68331: LD_VAR 0 5
68335: PPUSH
68336: LD_VAR 0 7
68340: PPUSH
68341: CALL_OW 488
68345: PUSH
68346: LD_VAR 0 5
68350: PPUSH
68351: LD_VAR 0 7
68355: PPUSH
68356: CALL_OW 428
68360: PPUSH
68361: CALL_OW 247
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: LD_INT 2
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: IN
68376: NOT
68377: AND
68378: IFFALSE 68422
// begin ComMoveXY ( unit , _x , _y ) ;
68380: LD_VAR 0 1
68384: PPUSH
68385: LD_VAR 0 5
68389: PPUSH
68390: LD_VAR 0 7
68394: PPUSH
68395: CALL_OW 111
// result := [ _x , _y ] ;
68399: LD_ADDR_VAR 0 3
68403: PUSH
68404: LD_VAR 0 5
68408: PUSH
68409: LD_VAR 0 7
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: ST_TO_ADDR
// exit ;
68418: POP
68419: POP
68420: GO 68426
// end ; end ;
68422: GO 68266
68424: POP
68425: POP
// end ;
68426: LD_VAR 0 3
68430: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68431: LD_INT 0
68433: PPUSH
68434: PPUSH
68435: PPUSH
// result := 0 ;
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_INT 0
68443: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68444: LD_VAR 0 1
68448: PUSH
68449: LD_INT 0
68451: LESS
68452: PUSH
68453: LD_VAR 0 1
68457: PUSH
68458: LD_INT 8
68460: GREATER
68461: OR
68462: PUSH
68463: LD_VAR 0 2
68467: PUSH
68468: LD_INT 0
68470: LESS
68471: OR
68472: PUSH
68473: LD_VAR 0 2
68477: PUSH
68478: LD_INT 8
68480: GREATER
68481: OR
68482: IFFALSE 68486
// exit ;
68484: GO 68561
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68486: LD_ADDR_VAR 0 4
68490: PUSH
68491: LD_INT 22
68493: PUSH
68494: LD_VAR 0 2
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PPUSH
68503: CALL_OW 69
68507: PUSH
68508: FOR_IN
68509: IFFALSE 68559
// begin un := UnitShoot ( i ) ;
68511: LD_ADDR_VAR 0 5
68515: PUSH
68516: LD_VAR 0 4
68520: PPUSH
68521: CALL_OW 504
68525: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68526: LD_VAR 0 5
68530: PPUSH
68531: CALL_OW 255
68535: PUSH
68536: LD_VAR 0 1
68540: EQUAL
68541: IFFALSE 68557
// begin result := un ;
68543: LD_ADDR_VAR 0 3
68547: PUSH
68548: LD_VAR 0 5
68552: ST_TO_ADDR
// exit ;
68553: POP
68554: POP
68555: GO 68561
// end ; end ;
68557: GO 68508
68559: POP
68560: POP
// end ;
68561: LD_VAR 0 3
68565: RET
// export function GetCargoBay ( units ) ; begin
68566: LD_INT 0
68568: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68569: LD_ADDR_VAR 0 2
68573: PUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: LD_INT 2
68581: PUSH
68582: LD_INT 34
68584: PUSH
68585: LD_INT 12
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 34
68594: PUSH
68595: LD_INT 51
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 34
68604: PUSH
68605: LD_INT 32
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 34
68614: PUSH
68615: LD_EXP 115
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: PPUSH
68631: CALL_OW 72
68635: ST_TO_ADDR
// end ;
68636: LD_VAR 0 2
68640: RET
// export function Negate ( value ) ; begin
68641: LD_INT 0
68643: PPUSH
// result := not value ;
68644: LD_ADDR_VAR 0 2
68648: PUSH
68649: LD_VAR 0 1
68653: NOT
68654: ST_TO_ADDR
// end ;
68655: LD_VAR 0 2
68659: RET
// export function Inc ( value ) ; begin
68660: LD_INT 0
68662: PPUSH
// result := value + 1 ;
68663: LD_ADDR_VAR 0 2
68667: PUSH
68668: LD_VAR 0 1
68672: PUSH
68673: LD_INT 1
68675: PLUS
68676: ST_TO_ADDR
// end ;
68677: LD_VAR 0 2
68681: RET
// export function Dec ( value ) ; begin
68682: LD_INT 0
68684: PPUSH
// result := value - 1 ;
68685: LD_ADDR_VAR 0 2
68689: PUSH
68690: LD_VAR 0 1
68694: PUSH
68695: LD_INT 1
68697: MINUS
68698: ST_TO_ADDR
// end ;
68699: LD_VAR 0 2
68703: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68704: LD_INT 0
68706: PPUSH
68707: PPUSH
68708: PPUSH
68709: PPUSH
68710: PPUSH
68711: PPUSH
68712: PPUSH
68713: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68714: LD_VAR 0 1
68718: PPUSH
68719: LD_VAR 0 2
68723: PPUSH
68724: CALL_OW 488
68728: NOT
68729: PUSH
68730: LD_VAR 0 3
68734: PPUSH
68735: LD_VAR 0 4
68739: PPUSH
68740: CALL_OW 488
68744: NOT
68745: OR
68746: IFFALSE 68759
// begin result := - 1 ;
68748: LD_ADDR_VAR 0 5
68752: PUSH
68753: LD_INT 1
68755: NEG
68756: ST_TO_ADDR
// exit ;
68757: GO 68994
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68759: LD_ADDR_VAR 0 12
68763: PUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: LD_VAR 0 2
68773: PPUSH
68774: LD_VAR 0 3
68778: PPUSH
68779: LD_VAR 0 4
68783: PPUSH
68784: CALL 67842 0 4
68788: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68789: LD_ADDR_VAR 0 11
68793: PUSH
68794: LD_VAR 0 1
68798: PPUSH
68799: LD_VAR 0 2
68803: PPUSH
68804: LD_VAR 0 12
68808: PUSH
68809: LD_INT 1
68811: ARRAY
68812: PPUSH
68813: LD_VAR 0 12
68817: PUSH
68818: LD_INT 2
68820: ARRAY
68821: PPUSH
68822: CALL_OW 298
68826: ST_TO_ADDR
// distance := 9999 ;
68827: LD_ADDR_VAR 0 10
68831: PUSH
68832: LD_INT 9999
68834: ST_TO_ADDR
// for i := 0 to 5 do
68835: LD_ADDR_VAR 0 6
68839: PUSH
68840: DOUBLE
68841: LD_INT 0
68843: DEC
68844: ST_TO_ADDR
68845: LD_INT 5
68847: PUSH
68848: FOR_TO
68849: IFFALSE 68992
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68851: LD_ADDR_VAR 0 7
68855: PUSH
68856: LD_VAR 0 1
68860: PPUSH
68861: LD_VAR 0 6
68865: PPUSH
68866: LD_VAR 0 11
68870: PPUSH
68871: CALL_OW 272
68875: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68876: LD_ADDR_VAR 0 8
68880: PUSH
68881: LD_VAR 0 2
68885: PPUSH
68886: LD_VAR 0 6
68890: PPUSH
68891: LD_VAR 0 11
68895: PPUSH
68896: CALL_OW 273
68900: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68901: LD_VAR 0 7
68905: PPUSH
68906: LD_VAR 0 8
68910: PPUSH
68911: CALL_OW 488
68915: NOT
68916: IFFALSE 68920
// continue ;
68918: GO 68848
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68920: LD_ADDR_VAR 0 9
68924: PUSH
68925: LD_VAR 0 12
68929: PUSH
68930: LD_INT 1
68932: ARRAY
68933: PPUSH
68934: LD_VAR 0 12
68938: PUSH
68939: LD_INT 2
68941: ARRAY
68942: PPUSH
68943: LD_VAR 0 7
68947: PPUSH
68948: LD_VAR 0 8
68952: PPUSH
68953: CALL_OW 298
68957: ST_TO_ADDR
// if tmp < distance then
68958: LD_VAR 0 9
68962: PUSH
68963: LD_VAR 0 10
68967: LESS
68968: IFFALSE 68990
// begin result := i ;
68970: LD_ADDR_VAR 0 5
68974: PUSH
68975: LD_VAR 0 6
68979: ST_TO_ADDR
// distance := tmp ;
68980: LD_ADDR_VAR 0 10
68984: PUSH
68985: LD_VAR 0 9
68989: ST_TO_ADDR
// end ; end ;
68990: GO 68848
68992: POP
68993: POP
// end ;
68994: LD_VAR 0 5
68998: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68999: LD_INT 0
69001: PPUSH
69002: PPUSH
// if not driver or not IsInUnit ( driver ) then
69003: LD_VAR 0 1
69007: NOT
69008: PUSH
69009: LD_VAR 0 1
69013: PPUSH
69014: CALL_OW 310
69018: NOT
69019: OR
69020: IFFALSE 69024
// exit ;
69022: GO 69114
// vehicle := IsInUnit ( driver ) ;
69024: LD_ADDR_VAR 0 3
69028: PUSH
69029: LD_VAR 0 1
69033: PPUSH
69034: CALL_OW 310
69038: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_STRING \
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: PUSH
69074: LD_STRING E
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_VAR 0 3
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PPUSH
69110: CALL_OW 446
// end ;
69114: LD_VAR 0 2
69118: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69119: LD_INT 0
69121: PPUSH
69122: PPUSH
// if not driver or not IsInUnit ( driver ) then
69123: LD_VAR 0 1
69127: NOT
69128: PUSH
69129: LD_VAR 0 1
69133: PPUSH
69134: CALL_OW 310
69138: NOT
69139: OR
69140: IFFALSE 69144
// exit ;
69142: GO 69234
// vehicle := IsInUnit ( driver ) ;
69144: LD_ADDR_VAR 0 3
69148: PUSH
69149: LD_VAR 0 1
69153: PPUSH
69154: CALL_OW 310
69158: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69159: LD_VAR 0 1
69163: PPUSH
69164: LD_STRING \
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: PUSH
69194: LD_STRING E
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: LD_VAR 0 3
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PPUSH
69230: CALL_OW 447
// end ;
69234: LD_VAR 0 2
69238: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69239: LD_INT 0
69241: PPUSH
69242: PPUSH
69243: PPUSH
// tmp := [ ] ;
69244: LD_ADDR_VAR 0 5
69248: PUSH
69249: EMPTY
69250: ST_TO_ADDR
// for i in units do
69251: LD_ADDR_VAR 0 4
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: FOR_IN
69262: IFFALSE 69300
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69264: LD_ADDR_VAR 0 5
69268: PUSH
69269: LD_VAR 0 5
69273: PPUSH
69274: LD_VAR 0 5
69278: PUSH
69279: LD_INT 1
69281: PLUS
69282: PPUSH
69283: LD_VAR 0 4
69287: PPUSH
69288: CALL_OW 256
69292: PPUSH
69293: CALL_OW 2
69297: ST_TO_ADDR
69298: GO 69261
69300: POP
69301: POP
// if not tmp then
69302: LD_VAR 0 5
69306: NOT
69307: IFFALSE 69311
// exit ;
69309: GO 69359
// if asc then
69311: LD_VAR 0 2
69315: IFFALSE 69339
// result := SortListByListAsc ( units , tmp ) else
69317: LD_ADDR_VAR 0 3
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 5
69331: PPUSH
69332: CALL_OW 76
69336: ST_TO_ADDR
69337: GO 69359
// result := SortListByListDesc ( units , tmp ) ;
69339: LD_ADDR_VAR 0 3
69343: PUSH
69344: LD_VAR 0 1
69348: PPUSH
69349: LD_VAR 0 5
69353: PPUSH
69354: CALL_OW 77
69358: ST_TO_ADDR
// end ;
69359: LD_VAR 0 3
69363: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69364: LD_INT 0
69366: PPUSH
69367: PPUSH
// task := GetTaskList ( mech ) ;
69368: LD_ADDR_VAR 0 4
69372: PUSH
69373: LD_VAR 0 1
69377: PPUSH
69378: CALL_OW 437
69382: ST_TO_ADDR
// if not task then
69383: LD_VAR 0 4
69387: NOT
69388: IFFALSE 69392
// exit ;
69390: GO 69434
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69392: LD_ADDR_VAR 0 3
69396: PUSH
69397: LD_VAR 0 4
69401: PUSH
69402: LD_INT 1
69404: ARRAY
69405: PUSH
69406: LD_INT 1
69408: ARRAY
69409: PUSH
69410: LD_STRING r
69412: EQUAL
69413: PUSH
69414: LD_VAR 0 4
69418: PUSH
69419: LD_INT 1
69421: ARRAY
69422: PUSH
69423: LD_INT 4
69425: ARRAY
69426: PUSH
69427: LD_VAR 0 2
69431: EQUAL
69432: AND
69433: ST_TO_ADDR
// end ;
69434: LD_VAR 0 3
69438: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69439: LD_INT 0
69441: PPUSH
// SetDir ( unit , d ) ;
69442: LD_VAR 0 1
69446: PPUSH
69447: LD_VAR 0 4
69451: PPUSH
69452: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69456: LD_VAR 0 1
69460: PPUSH
69461: LD_VAR 0 2
69465: PPUSH
69466: LD_VAR 0 3
69470: PPUSH
69471: LD_VAR 0 5
69475: PPUSH
69476: CALL_OW 48
// end ;
69480: LD_VAR 0 6
69484: RET
// export function ToNaturalNumber ( number ) ; begin
69485: LD_INT 0
69487: PPUSH
// result := number div 1 ;
69488: LD_ADDR_VAR 0 2
69492: PUSH
69493: LD_VAR 0 1
69497: PUSH
69498: LD_INT 1
69500: DIV
69501: ST_TO_ADDR
// if number < 0 then
69502: LD_VAR 0 1
69506: PUSH
69507: LD_INT 0
69509: LESS
69510: IFFALSE 69520
// result := 0 ;
69512: LD_ADDR_VAR 0 2
69516: PUSH
69517: LD_INT 0
69519: ST_TO_ADDR
// end ;
69520: LD_VAR 0 2
69524: RET
// export function SortByClass ( units , class ) ; var un ; begin
69525: LD_INT 0
69527: PPUSH
69528: PPUSH
// if not units or not class then
69529: LD_VAR 0 1
69533: NOT
69534: PUSH
69535: LD_VAR 0 2
69539: NOT
69540: OR
69541: IFFALSE 69545
// exit ;
69543: GO 69640
// result := [ ] ;
69545: LD_ADDR_VAR 0 3
69549: PUSH
69550: EMPTY
69551: ST_TO_ADDR
// for un in units do
69552: LD_ADDR_VAR 0 4
69556: PUSH
69557: LD_VAR 0 1
69561: PUSH
69562: FOR_IN
69563: IFFALSE 69638
// if GetClass ( un ) = class then
69565: LD_VAR 0 4
69569: PPUSH
69570: CALL_OW 257
69574: PUSH
69575: LD_VAR 0 2
69579: EQUAL
69580: IFFALSE 69607
// result := Insert ( result , 1 , un ) else
69582: LD_ADDR_VAR 0 3
69586: PUSH
69587: LD_VAR 0 3
69591: PPUSH
69592: LD_INT 1
69594: PPUSH
69595: LD_VAR 0 4
69599: PPUSH
69600: CALL_OW 2
69604: ST_TO_ADDR
69605: GO 69636
// result := Replace ( result , result + 1 , un ) ;
69607: LD_ADDR_VAR 0 3
69611: PUSH
69612: LD_VAR 0 3
69616: PPUSH
69617: LD_VAR 0 3
69621: PUSH
69622: LD_INT 1
69624: PLUS
69625: PPUSH
69626: LD_VAR 0 4
69630: PPUSH
69631: CALL_OW 1
69635: ST_TO_ADDR
69636: GO 69562
69638: POP
69639: POP
// end ;
69640: LD_VAR 0 3
69644: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69645: LD_INT 0
69647: PPUSH
69648: PPUSH
69649: PPUSH
69650: PPUSH
69651: PPUSH
69652: PPUSH
69653: PPUSH
// result := [ ] ;
69654: LD_ADDR_VAR 0 4
69658: PUSH
69659: EMPTY
69660: ST_TO_ADDR
// if x - r < 0 then
69661: LD_VAR 0 1
69665: PUSH
69666: LD_VAR 0 3
69670: MINUS
69671: PUSH
69672: LD_INT 0
69674: LESS
69675: IFFALSE 69687
// min_x := 0 else
69677: LD_ADDR_VAR 0 8
69681: PUSH
69682: LD_INT 0
69684: ST_TO_ADDR
69685: GO 69703
// min_x := x - r ;
69687: LD_ADDR_VAR 0 8
69691: PUSH
69692: LD_VAR 0 1
69696: PUSH
69697: LD_VAR 0 3
69701: MINUS
69702: ST_TO_ADDR
// if y - r < 0 then
69703: LD_VAR 0 2
69707: PUSH
69708: LD_VAR 0 3
69712: MINUS
69713: PUSH
69714: LD_INT 0
69716: LESS
69717: IFFALSE 69729
// min_y := 0 else
69719: LD_ADDR_VAR 0 7
69723: PUSH
69724: LD_INT 0
69726: ST_TO_ADDR
69727: GO 69745
// min_y := y - r ;
69729: LD_ADDR_VAR 0 7
69733: PUSH
69734: LD_VAR 0 2
69738: PUSH
69739: LD_VAR 0 3
69743: MINUS
69744: ST_TO_ADDR
// max_x := x + r ;
69745: LD_ADDR_VAR 0 9
69749: PUSH
69750: LD_VAR 0 1
69754: PUSH
69755: LD_VAR 0 3
69759: PLUS
69760: ST_TO_ADDR
// max_y := y + r ;
69761: LD_ADDR_VAR 0 10
69765: PUSH
69766: LD_VAR 0 2
69770: PUSH
69771: LD_VAR 0 3
69775: PLUS
69776: ST_TO_ADDR
// for _x = min_x to max_x do
69777: LD_ADDR_VAR 0 5
69781: PUSH
69782: DOUBLE
69783: LD_VAR 0 8
69787: DEC
69788: ST_TO_ADDR
69789: LD_VAR 0 9
69793: PUSH
69794: FOR_TO
69795: IFFALSE 69896
// for _y = min_y to max_y do
69797: LD_ADDR_VAR 0 6
69801: PUSH
69802: DOUBLE
69803: LD_VAR 0 7
69807: DEC
69808: ST_TO_ADDR
69809: LD_VAR 0 10
69813: PUSH
69814: FOR_TO
69815: IFFALSE 69892
// begin if not ValidHex ( _x , _y ) then
69817: LD_VAR 0 5
69821: PPUSH
69822: LD_VAR 0 6
69826: PPUSH
69827: CALL_OW 488
69831: NOT
69832: IFFALSE 69836
// continue ;
69834: GO 69814
// if GetResourceTypeXY ( _x , _y ) then
69836: LD_VAR 0 5
69840: PPUSH
69841: LD_VAR 0 6
69845: PPUSH
69846: CALL_OW 283
69850: IFFALSE 69890
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69852: LD_ADDR_VAR 0 4
69856: PUSH
69857: LD_VAR 0 4
69861: PPUSH
69862: LD_VAR 0 4
69866: PUSH
69867: LD_INT 1
69869: PLUS
69870: PPUSH
69871: LD_VAR 0 5
69875: PUSH
69876: LD_VAR 0 6
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PPUSH
69885: CALL_OW 1
69889: ST_TO_ADDR
// end ;
69890: GO 69814
69892: POP
69893: POP
69894: GO 69794
69896: POP
69897: POP
// end ;
69898: LD_VAR 0 4
69902: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69903: LD_INT 0
69905: PPUSH
69906: PPUSH
69907: PPUSH
69908: PPUSH
69909: PPUSH
69910: PPUSH
69911: PPUSH
69912: PPUSH
// if not units then
69913: LD_VAR 0 1
69917: NOT
69918: IFFALSE 69922
// exit ;
69920: GO 70448
// result := UnitFilter ( units , [ f_ok ] ) ;
69922: LD_ADDR_VAR 0 3
69926: PUSH
69927: LD_VAR 0 1
69931: PPUSH
69932: LD_INT 50
69934: PUSH
69935: EMPTY
69936: LIST
69937: PPUSH
69938: CALL_OW 72
69942: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69943: LD_ADDR_VAR 0 8
69947: PUSH
69948: LD_VAR 0 1
69952: PUSH
69953: LD_INT 1
69955: ARRAY
69956: PPUSH
69957: CALL_OW 255
69961: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69962: LD_ADDR_VAR 0 10
69966: PUSH
69967: LD_INT 29
69969: PUSH
69970: LD_EXP 118
69974: PUSH
69975: LD_INT 49
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: LIST
69982: ST_TO_ADDR
// if not result then
69983: LD_VAR 0 3
69987: NOT
69988: IFFALSE 69992
// exit ;
69990: GO 70448
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69992: LD_ADDR_VAR 0 5
69996: PUSH
69997: LD_INT 81
69999: PUSH
70000: LD_VAR 0 8
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PPUSH
70009: CALL_OW 69
70013: ST_TO_ADDR
// for i in result do
70014: LD_ADDR_VAR 0 4
70018: PUSH
70019: LD_VAR 0 3
70023: PUSH
70024: FOR_IN
70025: IFFALSE 70446
// begin tag := GetTag ( i ) + 1 ;
70027: LD_ADDR_VAR 0 9
70031: PUSH
70032: LD_VAR 0 4
70036: PPUSH
70037: CALL_OW 110
70041: PUSH
70042: LD_INT 1
70044: PLUS
70045: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70046: LD_ADDR_VAR 0 7
70050: PUSH
70051: LD_VAR 0 4
70055: PPUSH
70056: CALL_OW 250
70060: PPUSH
70061: LD_VAR 0 4
70065: PPUSH
70066: CALL_OW 251
70070: PPUSH
70071: LD_INT 6
70073: PPUSH
70074: CALL 69645 0 3
70078: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70079: LD_VAR 0 4
70083: PPUSH
70084: CALL_OW 247
70088: PUSH
70089: LD_INT 2
70091: EQUAL
70092: PUSH
70093: LD_VAR 0 7
70097: AND
70098: PUSH
70099: LD_VAR 0 4
70103: PPUSH
70104: CALL_OW 264
70108: PUSH
70109: LD_VAR 0 10
70113: IN
70114: NOT
70115: AND
70116: IFFALSE 70155
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70118: LD_VAR 0 4
70122: PPUSH
70123: LD_VAR 0 7
70127: PUSH
70128: LD_INT 1
70130: ARRAY
70131: PUSH
70132: LD_INT 1
70134: ARRAY
70135: PPUSH
70136: LD_VAR 0 7
70140: PUSH
70141: LD_INT 1
70143: ARRAY
70144: PUSH
70145: LD_INT 2
70147: ARRAY
70148: PPUSH
70149: CALL_OW 116
70153: GO 70444
// if path > tag then
70155: LD_VAR 0 2
70159: PUSH
70160: LD_VAR 0 9
70164: GREATER
70165: IFFALSE 70373
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70167: LD_ADDR_VAR 0 6
70171: PUSH
70172: LD_VAR 0 5
70176: PPUSH
70177: LD_INT 91
70179: PUSH
70180: LD_VAR 0 4
70184: PUSH
70185: LD_INT 8
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: LIST
70192: PPUSH
70193: CALL_OW 72
70197: ST_TO_ADDR
// if nearEnemy then
70198: LD_VAR 0 6
70202: IFFALSE 70271
// begin if GetWeapon ( i ) = ru_time_lapser then
70204: LD_VAR 0 4
70208: PPUSH
70209: CALL_OW 264
70213: PUSH
70214: LD_INT 49
70216: EQUAL
70217: IFFALSE 70245
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70219: LD_VAR 0 4
70223: PPUSH
70224: LD_VAR 0 6
70228: PPUSH
70229: LD_VAR 0 4
70233: PPUSH
70234: CALL_OW 74
70238: PPUSH
70239: CALL_OW 112
70243: GO 70269
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70245: LD_VAR 0 4
70249: PPUSH
70250: LD_VAR 0 6
70254: PPUSH
70255: LD_VAR 0 4
70259: PPUSH
70260: CALL_OW 74
70264: PPUSH
70265: CALL_OW 115
// end else
70269: GO 70371
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70271: LD_VAR 0 4
70275: PPUSH
70276: LD_VAR 0 2
70280: PUSH
70281: LD_VAR 0 9
70285: ARRAY
70286: PUSH
70287: LD_INT 1
70289: ARRAY
70290: PPUSH
70291: LD_VAR 0 2
70295: PUSH
70296: LD_VAR 0 9
70300: ARRAY
70301: PUSH
70302: LD_INT 2
70304: ARRAY
70305: PPUSH
70306: CALL_OW 297
70310: PUSH
70311: LD_INT 6
70313: GREATER
70314: IFFALSE 70357
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70316: LD_VAR 0 4
70320: PPUSH
70321: LD_VAR 0 2
70325: PUSH
70326: LD_VAR 0 9
70330: ARRAY
70331: PUSH
70332: LD_INT 1
70334: ARRAY
70335: PPUSH
70336: LD_VAR 0 2
70340: PUSH
70341: LD_VAR 0 9
70345: ARRAY
70346: PUSH
70347: LD_INT 2
70349: ARRAY
70350: PPUSH
70351: CALL_OW 114
70355: GO 70371
// SetTag ( i , tag ) ;
70357: LD_VAR 0 4
70361: PPUSH
70362: LD_VAR 0 9
70366: PPUSH
70367: CALL_OW 109
// end else
70371: GO 70444
// if enemy then
70373: LD_VAR 0 5
70377: IFFALSE 70444
// begin if GetWeapon ( i ) = ru_time_lapser then
70379: LD_VAR 0 4
70383: PPUSH
70384: CALL_OW 264
70388: PUSH
70389: LD_INT 49
70391: EQUAL
70392: IFFALSE 70420
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70394: LD_VAR 0 4
70398: PPUSH
70399: LD_VAR 0 5
70403: PPUSH
70404: LD_VAR 0 4
70408: PPUSH
70409: CALL_OW 74
70413: PPUSH
70414: CALL_OW 112
70418: GO 70444
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70420: LD_VAR 0 4
70424: PPUSH
70425: LD_VAR 0 5
70429: PPUSH
70430: LD_VAR 0 4
70434: PPUSH
70435: CALL_OW 74
70439: PPUSH
70440: CALL_OW 115
// end ; end ;
70444: GO 70024
70446: POP
70447: POP
// end ;
70448: LD_VAR 0 3
70452: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70453: LD_INT 0
70455: PPUSH
70456: PPUSH
70457: PPUSH
// if not unit or IsInUnit ( unit ) then
70458: LD_VAR 0 1
70462: NOT
70463: PUSH
70464: LD_VAR 0 1
70468: PPUSH
70469: CALL_OW 310
70473: OR
70474: IFFALSE 70478
// exit ;
70476: GO 70569
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70478: LD_ADDR_VAR 0 4
70482: PUSH
70483: LD_VAR 0 1
70487: PPUSH
70488: CALL_OW 250
70492: PPUSH
70493: LD_VAR 0 2
70497: PPUSH
70498: LD_INT 1
70500: PPUSH
70501: CALL_OW 272
70505: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70506: LD_ADDR_VAR 0 5
70510: PUSH
70511: LD_VAR 0 1
70515: PPUSH
70516: CALL_OW 251
70520: PPUSH
70521: LD_VAR 0 2
70525: PPUSH
70526: LD_INT 1
70528: PPUSH
70529: CALL_OW 273
70533: ST_TO_ADDR
// if ValidHex ( x , y ) then
70534: LD_VAR 0 4
70538: PPUSH
70539: LD_VAR 0 5
70543: PPUSH
70544: CALL_OW 488
70548: IFFALSE 70569
// ComTurnXY ( unit , x , y ) ;
70550: LD_VAR 0 1
70554: PPUSH
70555: LD_VAR 0 4
70559: PPUSH
70560: LD_VAR 0 5
70564: PPUSH
70565: CALL_OW 118
// end ;
70569: LD_VAR 0 3
70573: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70574: LD_INT 0
70576: PPUSH
70577: PPUSH
// result := false ;
70578: LD_ADDR_VAR 0 3
70582: PUSH
70583: LD_INT 0
70585: ST_TO_ADDR
// if not units then
70586: LD_VAR 0 2
70590: NOT
70591: IFFALSE 70595
// exit ;
70593: GO 70640
// for i in units do
70595: LD_ADDR_VAR 0 4
70599: PUSH
70600: LD_VAR 0 2
70604: PUSH
70605: FOR_IN
70606: IFFALSE 70638
// if See ( side , i ) then
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_VAR 0 4
70617: PPUSH
70618: CALL_OW 292
70622: IFFALSE 70636
// begin result := true ;
70624: LD_ADDR_VAR 0 3
70628: PUSH
70629: LD_INT 1
70631: ST_TO_ADDR
// exit ;
70632: POP
70633: POP
70634: GO 70640
// end ;
70636: GO 70605
70638: POP
70639: POP
// end ;
70640: LD_VAR 0 3
70644: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70645: LD_INT 0
70647: PPUSH
70648: PPUSH
70649: PPUSH
70650: PPUSH
// if not unit or not points then
70651: LD_VAR 0 1
70655: NOT
70656: PUSH
70657: LD_VAR 0 2
70661: NOT
70662: OR
70663: IFFALSE 70667
// exit ;
70665: GO 70757
// dist := 99999 ;
70667: LD_ADDR_VAR 0 5
70671: PUSH
70672: LD_INT 99999
70674: ST_TO_ADDR
// for i in points do
70675: LD_ADDR_VAR 0 4
70679: PUSH
70680: LD_VAR 0 2
70684: PUSH
70685: FOR_IN
70686: IFFALSE 70755
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70688: LD_ADDR_VAR 0 6
70692: PUSH
70693: LD_VAR 0 1
70697: PPUSH
70698: LD_VAR 0 4
70702: PUSH
70703: LD_INT 1
70705: ARRAY
70706: PPUSH
70707: LD_VAR 0 4
70711: PUSH
70712: LD_INT 2
70714: ARRAY
70715: PPUSH
70716: CALL_OW 297
70720: ST_TO_ADDR
// if tmpDist < dist then
70721: LD_VAR 0 6
70725: PUSH
70726: LD_VAR 0 5
70730: LESS
70731: IFFALSE 70753
// begin result := i ;
70733: LD_ADDR_VAR 0 3
70737: PUSH
70738: LD_VAR 0 4
70742: ST_TO_ADDR
// dist := tmpDist ;
70743: LD_ADDR_VAR 0 5
70747: PUSH
70748: LD_VAR 0 6
70752: ST_TO_ADDR
// end ; end ;
70753: GO 70685
70755: POP
70756: POP
// end ;
70757: LD_VAR 0 3
70761: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70762: LD_INT 0
70764: PPUSH
// uc_side := side ;
70765: LD_ADDR_OWVAR 20
70769: PUSH
70770: LD_VAR 0 1
70774: ST_TO_ADDR
// uc_nation := 3 ;
70775: LD_ADDR_OWVAR 21
70779: PUSH
70780: LD_INT 3
70782: ST_TO_ADDR
// vc_chassis := 25 ;
70783: LD_ADDR_OWVAR 37
70787: PUSH
70788: LD_INT 25
70790: ST_TO_ADDR
// vc_engine := engine_siberite ;
70791: LD_ADDR_OWVAR 39
70795: PUSH
70796: LD_INT 3
70798: ST_TO_ADDR
// vc_control := control_computer ;
70799: LD_ADDR_OWVAR 38
70803: PUSH
70804: LD_INT 3
70806: ST_TO_ADDR
// vc_weapon := 59 ;
70807: LD_ADDR_OWVAR 40
70811: PUSH
70812: LD_INT 59
70814: ST_TO_ADDR
// result := CreateVehicle ;
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: CALL_OW 45
70824: ST_TO_ADDR
// SetDir ( result , d ) ;
70825: LD_VAR 0 5
70829: PPUSH
70830: LD_VAR 0 4
70834: PPUSH
70835: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70839: LD_VAR 0 5
70843: PPUSH
70844: LD_VAR 0 2
70848: PPUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: LD_INT 0
70856: PPUSH
70857: CALL_OW 48
// end ;
70861: LD_VAR 0 5
70865: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70866: LD_INT 0
70868: PPUSH
70869: PPUSH
70870: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70871: LD_ADDR_VAR 0 2
70875: PUSH
70876: LD_INT 0
70878: PUSH
70879: LD_INT 0
70881: PUSH
70882: LD_INT 0
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70894: LD_VAR 0 1
70898: NOT
70899: PUSH
70900: LD_VAR 0 1
70904: PPUSH
70905: CALL_OW 264
70909: PUSH
70910: LD_INT 12
70912: PUSH
70913: LD_INT 51
70915: PUSH
70916: LD_INT 32
70918: PUSH
70919: LD_EXP 115
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: IN
70930: NOT
70931: OR
70932: IFFALSE 70936
// exit ;
70934: GO 71034
// for i := 1 to 3 do
70936: LD_ADDR_VAR 0 3
70940: PUSH
70941: DOUBLE
70942: LD_INT 1
70944: DEC
70945: ST_TO_ADDR
70946: LD_INT 3
70948: PUSH
70949: FOR_TO
70950: IFFALSE 71032
// begin tmp := GetCargo ( cargo , i ) ;
70952: LD_ADDR_VAR 0 4
70956: PUSH
70957: LD_VAR 0 1
70961: PPUSH
70962: LD_VAR 0 3
70966: PPUSH
70967: CALL_OW 289
70971: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70972: LD_ADDR_VAR 0 2
70976: PUSH
70977: LD_VAR 0 2
70981: PPUSH
70982: LD_VAR 0 3
70986: PPUSH
70987: LD_VAR 0 4
70991: PPUSH
70992: CALL_OW 1
70996: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70997: LD_ADDR_VAR 0 2
71001: PUSH
71002: LD_VAR 0 2
71006: PPUSH
71007: LD_INT 4
71009: PPUSH
71010: LD_VAR 0 2
71014: PUSH
71015: LD_INT 4
71017: ARRAY
71018: PUSH
71019: LD_VAR 0 4
71023: PLUS
71024: PPUSH
71025: CALL_OW 1
71029: ST_TO_ADDR
// end ;
71030: GO 70949
71032: POP
71033: POP
// end ;
71034: LD_VAR 0 2
71038: RET
// export function Length ( array ) ; begin
71039: LD_INT 0
71041: PPUSH
// result := array + 0 ;
71042: LD_ADDR_VAR 0 2
71046: PUSH
71047: LD_VAR 0 1
71051: PUSH
71052: LD_INT 0
71054: PLUS
71055: ST_TO_ADDR
// end ;
71056: LD_VAR 0 2
71060: RET
// export function PrepareArray ( array ) ; begin
71061: LD_INT 0
71063: PPUSH
// result := array diff 0 ;
71064: LD_ADDR_VAR 0 2
71068: PUSH
71069: LD_VAR 0 1
71073: PUSH
71074: LD_INT 0
71076: DIFF
71077: ST_TO_ADDR
// if not result [ 1 ] then
71078: LD_VAR 0 2
71082: PUSH
71083: LD_INT 1
71085: ARRAY
71086: NOT
71087: IFFALSE 71107
// result := Delete ( result , 1 ) ;
71089: LD_ADDR_VAR 0 2
71093: PUSH
71094: LD_VAR 0 2
71098: PPUSH
71099: LD_INT 1
71101: PPUSH
71102: CALL_OW 3
71106: ST_TO_ADDR
// end ; end_of_file
71107: LD_VAR 0 2
71111: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
71112: LD_INT 0
71114: PPUSH
// ar_miner := 81 ;
71115: LD_ADDR_EXP 121
71119: PUSH
71120: LD_INT 81
71122: ST_TO_ADDR
// ar_crane := 88 ;
71123: LD_ADDR_EXP 120
71127: PUSH
71128: LD_INT 88
71130: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71131: LD_ADDR_EXP 115
71135: PUSH
71136: LD_INT 89
71138: ST_TO_ADDR
// us_hack := 99 ;
71139: LD_ADDR_EXP 116
71143: PUSH
71144: LD_INT 99
71146: ST_TO_ADDR
// us_artillery := 97 ;
71147: LD_ADDR_EXP 117
71151: PUSH
71152: LD_INT 97
71154: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71155: LD_ADDR_EXP 118
71159: PUSH
71160: LD_INT 91
71162: ST_TO_ADDR
// ar_mortar := 92 ;
71163: LD_ADDR_EXP 119
71167: PUSH
71168: LD_INT 92
71170: ST_TO_ADDR
// ru_flamethrower := 93 ;
71171: LD_ADDR_EXP 122
71175: PUSH
71176: LD_INT 93
71178: ST_TO_ADDR
// ru_radar := 98 ;
71179: LD_ADDR_EXP 114
71183: PUSH
71184: LD_INT 98
71186: ST_TO_ADDR
// tech_Artillery := 80 ;
71187: LD_ADDR_EXP 123
71191: PUSH
71192: LD_INT 80
71194: ST_TO_ADDR
// tech_RadMat := 81 ;
71195: LD_ADDR_EXP 124
71199: PUSH
71200: LD_INT 81
71202: ST_TO_ADDR
// tech_BasicTools := 82 ;
71203: LD_ADDR_EXP 125
71207: PUSH
71208: LD_INT 82
71210: ST_TO_ADDR
// tech_Cargo := 83 ;
71211: LD_ADDR_EXP 126
71215: PUSH
71216: LD_INT 83
71218: ST_TO_ADDR
// tech_Track := 84 ;
71219: LD_ADDR_EXP 127
71223: PUSH
71224: LD_INT 84
71226: ST_TO_ADDR
// tech_Crane := 85 ;
71227: LD_ADDR_EXP 128
71231: PUSH
71232: LD_INT 85
71234: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71235: LD_ADDR_EXP 129
71239: PUSH
71240: LD_INT 86
71242: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71243: LD_ADDR_EXP 130
71247: PUSH
71248: LD_INT 87
71250: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71251: LD_ADDR_EXP 131
71255: PUSH
71256: LD_INT 88
71258: ST_TO_ADDR
// end ;
71259: LD_VAR 0 1
71263: RET
// every 1 do
71264: GO 71266
71266: DISABLE
// InitGlobalVariables ; end_of_file
71267: CALL 71112 0 0
71271: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71272: LD_VAR 0 1
71276: PPUSH
71277: LD_VAR 0 2
71281: PPUSH
71282: LD_VAR 0 3
71286: PPUSH
71287: LD_VAR 0 4
71291: PPUSH
71292: LD_VAR 0 5
71296: PPUSH
71297: LD_VAR 0 6
71301: PPUSH
71302: CALL 9822 0 6
// end ;
71306: PPOPN 6
71308: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71309: LD_INT 0
71311: PPUSH
// begin if not units then
71312: LD_VAR 0 1
71316: NOT
71317: IFFALSE 71321
// exit ;
71319: GO 71321
// end ;
71321: PPOPN 7
71323: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71324: CALL 9793 0 0
// end ;
71328: PPOPN 1
71330: END
