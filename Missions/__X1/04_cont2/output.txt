// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5594 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 32519 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 27098 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 27098 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 27098 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 27098 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 27098 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 27098 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 27098 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 27098 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 27098 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 27098 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 27098 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 27098 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 27098 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 27098 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 27098 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4837: LD_VAR 0 1
4841: PUSH
4842: LD_EXP 18
4846: EQUAL
4847: IFFALSE 4856
// YouLost ( Heike ) ;
4849: LD_STRING Heike
4851: PPUSH
4852: CALL_OW 104
// if un in ruEng then
4856: LD_VAR 0 1
4860: PUSH
4861: LD_EXP 38
4865: IN
4866: IFFALSE 4884
// ruEng := ruEng diff un ;
4868: LD_ADDR_EXP 38
4872: PUSH
4873: LD_EXP 38
4877: PUSH
4878: LD_VAR 0 1
4882: DIFF
4883: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4884: LD_VAR 0 1
4888: PUSH
4889: LD_INT 22
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 23
4911: PUSH
4912: LD_INT 2
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: IN
4929: IFFALSE 4945
// loseCounter := loseCounter + 1 ;
4931: LD_ADDR_EXP 6
4935: PUSH
4936: LD_EXP 6
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// end ;
4945: PPOPN 1
4947: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4948: LD_INT 0
4950: PPUSH
4951: PPUSH
// begin if un in ruMobile then
4952: LD_VAR 0 2
4956: PUSH
4957: LD_EXP 41
4961: IN
4962: IFFALSE 5121
// begin ruMobile := ruMobile diff un ;
4964: LD_ADDR_EXP 41
4968: PUSH
4969: LD_EXP 41
4973: PUSH
4974: LD_VAR 0 2
4978: DIFF
4979: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_VAR 0 2
4989: PPUSH
4990: CALL_OW 264
4994: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4995: LD_ADDR_VAR 0 6
4999: PUSH
5000: LD_INT 110
5002: PPUSH
5003: LD_INT 126
5005: PPUSH
5006: CALL_OW 428
5010: ST_TO_ADDR
// if not driver or not fac then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 6
5021: NOT
5022: OR
5023: IFFALSE 5027
// exit ;
5025: GO 5121
// AddComMoveXY ( driver , 111 , 121 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 111
5034: PPUSH
5035: LD_INT 121
5037: PPUSH
5038: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5042: LD_VAR 0 1
5046: PPUSH
5047: LD_VAR 0 6
5051: PPUSH
5052: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL_OW 301
5072: PUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 310
5082: OR
5083: IFFALSE 5056
// if IsDead ( driver ) then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 301
5094: IFFALSE 5098
// exit ;
5096: GO 5121
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5098: LD_VAR 0 6
5102: PPUSH
5103: LD_INT 21
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: CALL_OW 185
// end ; end ;
5121: PPOPN 6
5123: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 255
5133: PUSH
5134: LD_INT 3
5136: EQUAL
5137: IFFALSE 5183
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5139: LD_ADDR_EXP 41
5143: PUSH
5144: LD_EXP 41
5148: PPUSH
5149: LD_EXP 41
5153: PUSH
5154: LD_INT 1
5156: PLUS
5157: PPUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 1
5167: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_INT 110
5175: PPUSH
5176: LD_INT 117
5178: PPUSH
5179: CALL_OW 171
// end ; end ;
5183: PPOPN 2
5185: END
// on LeaveBuilding ( b , un ) do var barracks ;
5186: LD_INT 0
5188: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 130
5196: PPUSH
5197: LD_INT 17
5199: PPUSH
5200: CALL_OW 428
5204: PUSH
5205: LD_INT 138
5207: PPUSH
5208: LD_INT 22
5210: PPUSH
5211: CALL_OW 428
5215: PUSH
5216: LD_INT 123
5218: PPUSH
5219: LD_INT 17
5221: PPUSH
5222: CALL_OW 428
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: IN
5232: IFFALSE 5256
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_INT 135
5241: PPUSH
5242: LD_INT 31
5244: PPUSH
5245: CALL_OW 428
5249: PPUSH
5250: CALL_OW 180
// exit ;
5254: GO 5530
// end ; if b = HexInfo ( 135 , 31 ) then
5256: LD_VAR 0 1
5260: PUSH
5261: LD_INT 135
5263: PPUSH
5264: LD_INT 31
5266: PPUSH
5267: CALL_OW 428
5271: EQUAL
5272: IFFALSE 5344
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5274: LD_VAR 0 2
5278: PPUSH
5279: LD_INT 106
5281: PPUSH
5282: LD_INT 51
5284: PPUSH
5285: CALL_OW 428
5289: PPUSH
5290: CALL_OW 180
// if not explodeFirstDepot then
5294: LD_EXP 12
5298: NOT
5299: IFFALSE 5342
// begin explodeFirstDepot := true ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5309: LD_INT 525
5311: PPUSH
5312: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5316: LD_INT 127
5318: PPUSH
5319: LD_INT 27
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5329: LD_INT 125
5331: PPUSH
5332: LD_INT 29
5334: PPUSH
5335: LD_INT 1
5337: PPUSH
5338: CALL_OW 453
// end ; exit ;
5342: GO 5530
// end ; if b = HexInfo ( 106 , 51 ) then
5344: LD_VAR 0 1
5348: PUSH
5349: LD_INT 106
5351: PPUSH
5352: LD_INT 51
5354: PPUSH
5355: CALL_OW 428
5359: EQUAL
5360: IFFALSE 5460
// begin AddComMoveXY ( un , 106 , 93 ) ;
5362: LD_VAR 0 2
5366: PPUSH
5367: LD_INT 106
5369: PPUSH
5370: LD_INT 93
5372: PPUSH
5373: CALL_OW 171
// if not explodeSecondDepot then
5377: LD_EXP 13
5381: NOT
5382: IFFALSE 5458
// begin explodeSecondDepot := true ;
5384: LD_ADDR_EXP 13
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5392: LD_INT 420
5394: PPUSH
5395: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5399: LD_INT 111
5401: PPUSH
5402: LD_INT 75
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5412: LD_INT 111
5414: PPUSH
5415: LD_INT 75
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5425: LD_INT 108
5427: PPUSH
5428: LD_INT 69
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 453
// wait ( 0 0$2 ) ;
5438: LD_INT 70
5440: PPUSH
5441: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5445: LD_INT 94
5447: PPUSH
5448: LD_INT 65
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 453
// end ; exit ;
5458: GO 5530
// end ; if GetBType ( b ) = b_bunker then
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 266
5469: PUSH
5470: LD_INT 32
5472: EQUAL
5473: IFFALSE 5530
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: CALL 1008 0 2
5492: ST_TO_ADDR
// if barracks then
5493: LD_VAR 0 3
5497: IFFALSE 5515
// AddComEnterUnit ( un , barracks ) else
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: CALL_OW 180
5513: GO 5530
// AddComMoveXY ( un , 116 , 110 ) ;
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_INT 116
5522: PPUSH
5523: LD_INT 110
5525: PPUSH
5526: CALL_OW 171
// end ; end ;
5530: PPOPN 3
5532: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5533: LD_VAR 0 1
5537: PUSH
5538: LD_EXP 23
5542: EQUAL
5543: PUSH
5544: LD_VAR 0 2
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: IN
5559: AND
5560: IFFALSE 5591
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5562: LD_ADDR_EXP 8
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 250
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 251
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// end ; end_of_file
5591: PPOPN 3
5593: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5594: LD_INT 0
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
// InGameOn ;
5602: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5606: LD_INT 5
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 343
// music_nat := 4 ;
5616: LD_ADDR_OWVAR 71
5620: PUSH
5621: LD_INT 4
5623: ST_TO_ADDR
// music_class := music_combat ;
5624: LD_ADDR_OWVAR 72
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5632: LD_INT 133
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: LD_INT 2
5640: PPUSH
5641: LD_INT 10
5643: PPUSH
5644: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5648: LD_INT 133
5650: PPUSH
5651: LD_INT 2
5653: PPUSH
5654: CALL_OW 86
// wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// uc_side := 6 ;
5665: LD_ADDR_OWVAR 20
5669: PUSH
5670: LD_INT 6
5672: ST_TO_ADDR
// uc_nation := 3 ;
5673: LD_ADDR_OWVAR 21
5677: PUSH
5678: LD_INT 3
5680: ST_TO_ADDR
// rutmp := [ ] ;
5681: LD_ADDR_VAR 0 6
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5688: LD_INT 6
5690: PPUSH
5691: LD_INT 3
5693: PPUSH
5694: LD_INT 21
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 44
5705: PPUSH
5706: LD_INT 66
5708: PPUSH
5709: CALL 336 0 7
// veh := CreateVehicle ;
5713: LD_ADDR_VAR 0 4
5717: PUSH
5718: CALL_OW 45
5722: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 3
5730: PPUSH
5731: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 8
5742: PPUSH
5743: LD_INT 0
5745: PPUSH
5746: CALL_OW 49
// SetLives ( veh , 500 ) ;
5750: LD_VAR 0 4
5754: PPUSH
5755: LD_INT 500
5757: PPUSH
5758: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5762: LD_INT 0
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5775: CALL_OW 44
5779: PPUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5789: LD_VAR 0 4
5793: PPUSH
5794: LD_INT 133
5796: PPUSH
5797: LD_INT 11
5799: PPUSH
5800: CALL_OW 111
// rutmp := [ veh ] ;
5804: LD_ADDR_VAR 0 6
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: EMPTY
5815: LIST
5816: ST_TO_ADDR
// for i := 1 to 4 do
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: DOUBLE
5823: LD_INT 1
5825: DEC
5826: ST_TO_ADDR
5827: LD_INT 4
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5938
// begin PrepareHuman ( false , i , 2 ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_VAR 0 2
5840: PPUSH
5841: LD_INT 2
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 3
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5870: LD_VAR 0 3
5874: PPUSH
5875: LD_INT 8
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5885: LD_ADDR_VAR 0 6
5889: PUSH
5890: LD_VAR 0 6
5894: PPUSH
5895: LD_VAR 0 6
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: CALL_OW 1
5913: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 133
5921: PPUSH
5922: LD_INT 11
5924: PPUSH
5925: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5929: LD_INT 18
5931: PPUSH
5932: CALL_OW 67
// end ;
5936: GO 5830
5938: POP
5939: POP
// for i in rutmp do
5940: LD_ADDR_VAR 0 2
5944: PUSH
5945: LD_VAR 0 6
5949: PUSH
5950: FOR_IN
5951: IFFALSE 6000
// begin AddComMoveXY ( i , 99 , 65 ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 99
5960: PPUSH
5961: LD_INT 65
5963: PPUSH
5964: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5968: LD_VAR 0 2
5972: PPUSH
5973: LD_INT 76
5975: PPUSH
5976: LD_INT 108
5978: PPUSH
5979: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 92
5990: PPUSH
5991: LD_INT 176
5993: PPUSH
5994: CALL_OW 171
// end ;
5998: GO 5950
6000: POP
6001: POP
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6009: LD_ADDR_VAR 0 5
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_EXP 19
6023: PUSH
6024: LD_EXP 20
6028: PUSH
6029: LD_EXP 21
6033: PUSH
6034: LD_EXP 22
6038: PUSH
6039: LD_EXP 23
6043: PUSH
6044: LD_EXP 24
6048: PUSH
6049: LD_EXP 25
6053: PUSH
6054: LD_EXP 27
6058: PUSH
6059: LD_EXP 28
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_EXP 29
6080: UNION
6081: ST_TO_ADDR
// tmp := tmp diff 0 ;
6082: LD_ADDR_VAR 0 5
6086: PUSH
6087: LD_VAR 0 5
6091: PUSH
6092: LD_INT 0
6094: DIFF
6095: ST_TO_ADDR
// for i in heikeVehicles do
6096: LD_ADDR_VAR 0 2
6100: PUSH
6101: LD_EXP 30
6105: PUSH
6106: FOR_IN
6107: IFFALSE 6373
// begin if not tmp then
6109: LD_VAR 0 5
6113: NOT
6114: IFFALSE 6118
// continue ;
6116: GO 6106
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6118: LD_INT 2
6120: PPUSH
6121: LD_VAR 0 2
6125: PUSH
6126: LD_INT 5
6128: ARRAY
6129: PPUSH
6130: LD_VAR 0 2
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_INT 2
6146: ARRAY
6147: PPUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 3
6155: ARRAY
6156: PPUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_INT 4
6164: ARRAY
6165: PPUSH
6166: LD_INT 34
6168: PPUSH
6169: CALL 336 0 7
// veh := CreateVehicle ;
6173: LD_ADDR_VAR 0 4
6177: PUSH
6178: CALL_OW 45
6182: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6183: LD_VAR 0 2
6187: PUSH
6188: LD_INT 4
6190: ARRAY
6191: PUSH
6192: LD_INT 51
6194: PUSH
6195: LD_INT 32
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: IN
6206: IFFALSE 6286
// begin if i [ 7 ] [ 1 ] then
6208: LD_VAR 0 2
6212: PUSH
6213: LD_INT 7
6215: ARRAY
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: IFFALSE 6247
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 7
6237: ARRAY
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PPUSH
6243: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6247: LD_VAR 0 2
6251: PUSH
6252: LD_INT 7
6254: ARRAY
6255: PUSH
6256: LD_INT 2
6258: ARRAY
6259: IFFALSE 6286
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6261: LD_VAR 0 4
6265: PPUSH
6266: LD_INT 2
6268: PPUSH
6269: LD_VAR 0 2
6273: PUSH
6274: LD_INT 7
6276: ARRAY
6277: PUSH
6278: LD_INT 2
6280: ARRAY
6281: PPUSH
6282: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: LD_INT 8
6305: PPUSH
6306: LD_INT 0
6308: PPUSH
6309: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6313: LD_VAR 0 5
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_VAR 0 4
6326: PPUSH
6327: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6331: LD_ADDR_VAR 0 5
6335: PUSH
6336: LD_VAR 0 5
6340: PPUSH
6341: LD_INT 1
6343: PPUSH
6344: CALL_OW 3
6348: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_INT 133
6356: PPUSH
6357: LD_INT 7
6359: PPUSH
6360: CALL_OW 114
// wait ( 0 0$1 ) ;
6364: LD_INT 35
6366: PPUSH
6367: CALL_OW 67
// end ;
6371: GO 6106
6373: POP
6374: POP
// if tmp then
6375: LD_VAR 0 5
6379: IFFALSE 6435
// for i in tmp do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_VAR 0 5
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6433
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6394: LD_VAR 0 2
6398: PPUSH
6399: LD_INT 10
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6409: LD_VAR 0 2
6413: PPUSH
6414: LD_INT 146
6416: PPUSH
6417: LD_INT 7
6419: PPUSH
6420: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6424: LD_INT 18
6426: PPUSH
6427: CALL_OW 67
// end ;
6431: GO 6391
6433: POP
6434: POP
// if heikeApes then
6435: LD_EXP 31
6439: IFFALSE 6495
// for i in heikeApes do
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: LD_EXP 31
6450: PUSH
6451: FOR_IN
6452: IFFALSE 6493
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 10
6461: PPUSH
6462: LD_INT 0
6464: PPUSH
6465: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6469: LD_VAR 0 2
6473: PPUSH
6474: LD_INT 146
6476: PPUSH
6477: LD_INT 7
6479: PPUSH
6480: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6484: LD_INT 18
6486: PPUSH
6487: CALL_OW 67
// end ;
6491: GO 6451
6493: POP
6494: POP
// DialogueOn ;
6495: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DH-outpost-a-1
6506: PPUSH
6507: CALL_OW 88
// DialogueOff ;
6511: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6515: LD_INT 133
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: CALL_OW 331
// InGameOff ;
6528: CALL_OW 9
// music_nat := 0 ;
6532: LD_ADDR_OWVAR 71
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// music_class := 0 ;
6540: LD_ADDR_OWVAR 72
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6548: LD_STRING Outposts
6550: PPUSH
6551: CALL_OW 337
// SaveForQuickRestart ;
6555: CALL_OW 22
// end ;
6559: LD_VAR 0 1
6563: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6564: LD_INT 22
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 91
6576: PUSH
6577: LD_EXP 21
6581: PUSH
6582: LD_INT 20
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PUSH
6599: LD_EXP 3
6603: AND
6604: PUSH
6605: LD_EXP 21
6609: PPUSH
6610: CALL_OW 302
6614: AND
6615: IFFALSE 6862
6617: GO 6619
6619: DISABLE
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
6624: PPUSH
6625: PPUSH
// begin IbrahimBetrayal ;
6626: CALL 6865 0 0
// repeat wait ( 0 0$1 ) ;
6630: LD_INT 35
6632: PPUSH
6633: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6637: LD_EXP 21
6641: PPUSH
6642: CALL_OW 301
6646: PUSH
6647: LD_INT 22
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 91
6659: PUSH
6660: LD_EXP 21
6664: PUSH
6665: LD_INT 6
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: PUSH
6682: LD_EXP 21
6686: PPUSH
6687: CALL_OW 302
6691: AND
6692: OR
6693: IFFALSE 6630
// if IsDead ( Ibrahim ) then
6695: LD_EXP 21
6699: PPUSH
6700: CALL_OW 301
6704: IFFALSE 6708
// exit ;
6706: GO 6862
// x := GetX ( Ibrahim ) ;
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_EXP 21
6717: PPUSH
6718: CALL_OW 250
6722: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_EXP 21
6732: PPUSH
6733: CALL_OW 251
6737: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_EXP 21
6747: PPUSH
6748: CALL_OW 254
6752: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: LD_EXP 21
6762: PPUSH
6763: CALL_OW 256
6767: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6768: LD_EXP 21
6772: PPUSH
6773: CALL_OW 64
// uc_side := 2 ;
6777: LD_ADDR_OWVAR 20
6781: PUSH
6782: LD_INT 2
6784: ST_TO_ADDR
// uc_nation := 2 ;
6785: LD_ADDR_OWVAR 21
6789: PUSH
6790: LD_INT 2
6792: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6793: LD_ADDR_EXP 21
6797: PUSH
6798: LD_STRING Ibrahim
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: LD_STRING 
6806: PPUSH
6807: CALL 27098 0 3
6811: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6812: LD_EXP 21
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6826: LD_EXP 21
6830: PPUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: LD_VAR 0 2
6840: PPUSH
6841: LD_INT 0
6843: PPUSH
6844: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6848: LD_EXP 21
6852: PPUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: CALL_OW 234
// end ;
6862: PPOPN 4
6864: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6865: LD_INT 0
6867: PPUSH
6868: PPUSH
6869: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6870: LD_INT 122
6872: PPUSH
6873: LD_INT 77
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 6
6881: NEG
6882: PPUSH
6883: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6887: LD_EXP 21
6891: PPUSH
6892: LD_INT 123
6894: PPUSH
6895: LD_INT 79
6897: PPUSH
6898: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6902: LD_EXP 21
6906: PPUSH
6907: LD_INT 125
6909: PPUSH
6910: LD_INT 82
6912: PPUSH
6913: CALL_OW 178
// wait ( 0 0$2 ) ;
6917: LD_INT 70
6919: PPUSH
6920: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6924: LD_EXP 42
6928: PPUSH
6929: LD_EXP 21
6933: PPUSH
6934: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6938: LD_EXP 42
6942: PPUSH
6943: LD_STRING DRum-outpost-b-3
6945: PPUSH
6946: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_INT 125
6957: PPUSH
6958: LD_INT 76
6960: PPUSH
6961: CALL_OW 428
6965: PUSH
6966: LD_INT 125
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: CALL_OW 428
6976: PUSH
6977: LD_INT 125
6979: PPUSH
6980: LD_INT 82
6982: PPUSH
6983: CALL_OW 428
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: ST_TO_ADDR
// for i in tmp do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_VAR 0 3
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7020
// SetLives ( i , 200 ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_INT 200
7013: PPUSH
7014: CALL_OW 234
7018: GO 7003
7020: POP
7021: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_STRING DI-outpost-b-4
7029: PPUSH
7030: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7034: LD_EXP 21
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7046: LD_EXP 21
7050: PUSH
7051: LD_EXP 42
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7064: LD_INT 122
7066: PPUSH
7067: LD_INT 77
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: CALL_OW 331
// if Givi then
7077: LD_EXP 19
7081: IFFALSE 7097
// Say ( Givi , DG-1-outpost-b-5 ) else
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING DG-1-outpost-b-5
7090: PPUSH
7091: CALL_OW 88
7095: GO 7162
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7097: LD_EXP 29
7101: PPUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 72
7116: PUSH
7117: LD_INT 1
7119: ARRAY
7120: PPUSH
7121: LD_STRING DArf-outpost-b-a-5
7123: PPUSH
7124: CALL_OW 88
7128: NOT
7129: IFFALSE 7162
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7131: LD_EXP 29
7135: PPUSH
7136: LD_INT 26
7138: PUSH
7139: LD_INT 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 72
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: PPUSH
7155: LD_STRING DArm-outpost-b-a-5
7157: PPUSH
7158: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7169: LD_EXP 21
7173: PPUSH
7174: CALL_OW 301
7178: PUSH
7179: LD_EXP 18
7183: PPUSH
7184: LD_EXP 21
7188: PPUSH
7189: CALL_OW 296
7193: PUSH
7194: LD_INT 6
7196: LESS
7197: PUSH
7198: LD_EXP 21
7202: PPUSH
7203: CALL_OW 302
7207: AND
7208: OR
7209: IFFALSE 7162
// if IsDead ( Ibrahim ) then
7211: LD_EXP 21
7215: PPUSH
7216: CALL_OW 301
7220: IFFALSE 7236
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7222: LD_EXP 18
7226: PPUSH
7227: LD_STRING DH-ibrahimdead-1
7229: PPUSH
7230: CALL_OW 88
// exit ;
7234: GO 7277
// end ; CenterNowOnUnits ( Ibrahim ) ;
7236: LD_EXP 21
7240: PPUSH
7241: CALL_OW 87
// DialogueOn ;
7245: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7249: LD_EXP 21
7253: PPUSH
7254: LD_STRING DI-ibrahimlives-1
7256: PPUSH
7257: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7261: LD_EXP 18
7265: PPUSH
7266: LD_STRING DH-Ibrahimlives-2
7268: PPUSH
7269: CALL_OW 88
// DialogueOff ;
7273: CALL_OW 7
// end ;
7277: LD_VAR 0 1
7281: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7282: LD_INT 11
7284: PPUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: PUSH
7300: LD_OWVAR 1
7304: PUSH
7305: LD_INT 18900
7307: PUSH
7308: LD_INT 16800
7310: PUSH
7311: LD_INT 16800
7313: PUSH
7314: LD_INT 15750
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_OWVAR 67
7327: ARRAY
7328: GREATEREQUAL
7329: OR
7330: IFFALSE 7791
7332: GO 7334
7334: DISABLE
// begin outerAreaAchived := true ;
7335: LD_ADDR_EXP 15
7339: PUSH
7340: LD_INT 1
7342: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7343: LD_INT 700
7345: PPUSH
7346: CALL_OW 67
// DialogueOn ;
7350: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7354: LD_EXP 26
7358: PPUSH
7359: LD_STRING DShar-radio-1
7361: PPUSH
7362: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7366: LD_EXP 26
7370: PPUSH
7371: LD_STRING DShar-radio-2
7373: PPUSH
7374: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7378: LD_EXP 18
7382: PPUSH
7383: LD_STRING DH-radio-2
7385: PPUSH
7386: CALL_OW 88
// DialogueOff ;
7390: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7394: LD_STRING Gaidar
7396: PPUSH
7397: CALL_OW 337
// if Difficulty < 3 then
7401: LD_OWVAR 67
7405: PUSH
7406: LD_INT 3
7408: LESS
7409: IFFALSE 7475
// begin DialogueOn ;
7411: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7415: LD_INT 11
7417: PPUSH
7418: LD_INT 14
7420: PPUSH
7421: LD_INT 2
7423: PPUSH
7424: LD_INT 6
7426: NEG
7427: PPUSH
7428: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7432: LD_INT 11
7434: PPUSH
7435: LD_INT 14
7437: PPUSH
7438: LD_INT 2
7440: PPUSH
7441: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7445: LD_INT 11
7447: PPUSH
7448: LD_INT 14
7450: PPUSH
7451: CALL_OW 84
// dwait ( 0 0$1 ) ;
7455: LD_INT 35
7457: PPUSH
7458: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7462: LD_EXP 18
7466: PPUSH
7467: CALL_OW 87
// DialogueOff ;
7471: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7475: LD_INT 1050
7477: PUSH
7478: LD_INT 350
7480: PPUSH
7481: LD_INT 525
7483: PPUSH
7484: CALL_OW 12
7488: PUSH
7489: LD_OWVAR 67
7493: MUL
7494: PLUS
7495: PPUSH
7496: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7500: LD_INT 35
7502: PPUSH
7503: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7507: LD_INT 2
7509: PPUSH
7510: LD_INT 1
7512: PPUSH
7513: CALL_OW 428
7517: PUSH
7518: LD_INT 0
7520: EQUAL
7521: IFFALSE 7500
// SetDir ( Gaidar , 2 ) ;
7523: LD_EXP 35
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7535: LD_EXP 35
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: LD_INT 1
7545: PPUSH
7546: LD_INT 0
7548: PPUSH
7549: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7553: LD_EXP 35
7557: PPUSH
7558: LD_INT 19
7560: PPUSH
7561: LD_INT 24
7563: PPUSH
7564: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7568: LD_EXP 35
7572: PPUSH
7573: LD_INT 210
7575: PPUSH
7576: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7580: LD_EXP 35
7584: PPUSH
7585: LD_INT 38
7587: PPUSH
7588: LD_INT 47
7590: PPUSH
7591: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7595: LD_EXP 35
7599: PPUSH
7600: LD_INT 32
7602: PPUSH
7603: LD_INT 59
7605: PPUSH
7606: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7610: LD_EXP 35
7614: PPUSH
7615: LD_INT 350
7617: PPUSH
7618: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7622: LD_EXP 35
7626: PPUSH
7627: LD_INT 62
7629: PPUSH
7630: LD_INT 116
7632: PPUSH
7633: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7637: LD_EXP 35
7641: PPUSH
7642: LD_INT 92
7644: PPUSH
7645: LD_INT 177
7647: PPUSH
7648: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7652: LD_INT 35
7654: PPUSH
7655: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7659: LD_EXP 35
7663: PPUSH
7664: CALL_OW 301
7668: PUSH
7669: LD_EXP 35
7673: PPUSH
7674: LD_INT 92
7676: PPUSH
7677: LD_INT 177
7679: PPUSH
7680: CALL_OW 307
7684: OR
7685: IFFALSE 7652
// if IsAt ( Gaidar , 92 , 177 ) then
7687: LD_EXP 35
7691: PPUSH
7692: LD_INT 92
7694: PPUSH
7695: LD_INT 177
7697: PPUSH
7698: CALL_OW 307
7702: IFFALSE 7769
// begin DialogueOn ;
7704: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7708: LD_INT 92
7710: PPUSH
7711: LD_INT 177
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: LD_INT 3
7719: NEG
7720: PPUSH
7721: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 87
// dwait ( 0 0$2 ) ;
7734: LD_INT 70
7736: PPUSH
7737: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7741: LD_INT 92
7743: PPUSH
7744: LD_INT 177
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 331
// DialogueOff ;
7754: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7758: LD_EXP 35
7762: PPUSH
7763: CALL_OW 64
// exit ;
7767: GO 7791
// end ; gaidarKilled := true ;
7769: LD_ADDR_EXP 14
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7777: LD_STRING GaidarKilled
7779: PPUSH
7780: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7784: LD_STRING ACH_COMMISAR
7786: PPUSH
7787: CALL_OW 543
// end ;
7791: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7792: LD_INT 2
7794: PPUSH
7795: LD_EXP 35
7799: PPUSH
7800: CALL_OW 292
7804: IFFALSE 7821
7806: GO 7808
7808: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7809: LD_EXP 35
7813: PPUSH
7814: LD_STRING DT-objective-1
7816: PPUSH
7817: CALL_OW 88
7821: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7822: LD_INT 22
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 95
7837: PUSH
7838: LD_INT 5
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 6
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 95
7857: PUSH
7858: LD_INT 7
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: IFFALSE 7916
7881: GO 7883
7883: DISABLE
// begin DialogueOn ;
7884: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7888: LD_EXP 18
7892: PPUSH
7893: LD_STRING DH-outpost-last-1
7895: PPUSH
7896: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7900: LD_EXP 34
7904: PPUSH
7905: LD_STRING DB-outpost-last-2
7907: PPUSH
7908: CALL_OW 94
// DialogueOff ;
7912: CALL_OW 7
// end ;
7916: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7917: LD_INT 200
7919: PPUSH
7920: CALL_OW 256
7924: PUSH
7925: LD_INT 999
7927: LESS
7928: PUSH
7929: LD_INT 200
7931: PPUSH
7932: CALL_OW 255
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: OR
7941: IFFALSE 8114
7943: GO 7945
7945: DISABLE
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
// begin if not earlyEscape then
7950: LD_EXP 16
7954: NOT
7955: IFFALSE 7981
// begin SayRadio ( Burlak , DB-end-1 ) ;
7957: LD_EXP 34
7961: PPUSH
7962: LD_STRING DB-end-1
7964: PPUSH
7965: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7969: LD_EXP 18
7973: PPUSH
7974: LD_STRING DH-end-2
7976: PPUSH
7977: CALL_OW 88
// end ; if tick <= 15 15$00 then
7981: LD_OWVAR 1
7985: PUSH
7986: LD_INT 31500
7988: LESSEQUAL
7989: IFFALSE 7998
// SetAchievement ( ACH_FIST ) ;
7991: LD_STRING ACH_FIST
7993: PPUSH
7994: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 3
8015: PUSH
8016: LD_INT 21
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if not tmp then
8039: LD_VAR 0 2
8043: NOT
8044: IFFALSE 8048
// exit ;
8046: GO 8114
// for i in tmp do
8048: LD_ADDR_VAR 0 1
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8112
// begin SetTag ( i , tEscape ) ;
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_EXP 17
8070: PPUSH
8071: CALL_OW 109
// if IsInUnit ( i ) then
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 310
8084: IFFALSE 8095
// ComExitBuilding ( i ) ;
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_INT 92
8102: PPUSH
8103: LD_INT 177
8105: PPUSH
8106: CALL_OW 171
// end ;
8110: GO 8058
8112: POP
8113: POP
// end ;
8114: PPOPN 2
8116: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8117: LD_INT 4
8119: PPUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 70
8134: PUSH
8135: LD_EXP 15
8139: NOT
8140: AND
8141: PUSH
8142: LD_EXP 27
8146: PPUSH
8147: CALL_OW 302
8151: AND
8152: IFFALSE 8392
8154: GO 8156
8156: DISABLE
// begin DialogueOn ;
8157: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8161: LD_INT 111
8163: PPUSH
8164: LD_INT 54
8166: PPUSH
8167: LD_INT 2
8169: PPUSH
8170: LD_INT 16
8172: NEG
8173: PPUSH
8174: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8178: LD_INT 111
8180: PPUSH
8181: LD_INT 53
8183: PPUSH
8184: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8188: LD_INT 10
8190: PPUSH
8191: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8195: LD_EXP 27
8199: PPUSH
8200: LD_STRING DKs-Hannibal-1
8202: PPUSH
8203: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8207: LD_EXP 27
8211: PPUSH
8212: LD_STRING DKs-Hannibal-2
8214: PPUSH
8215: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8219: LD_EXP 27
8223: PPUSH
8224: LD_STRING DKs-Hannibal-3
8226: PPUSH
8227: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8231: LD_EXP 27
8235: PPUSH
8236: LD_STRING DKs-Hannibal-4
8238: PPUSH
8239: CALL_OW 88
// dwait ( 0 0$1 ) ;
8243: LD_INT 35
8245: PPUSH
8246: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8250: LD_INT 111
8252: PPUSH
8253: LD_INT 54
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8263: LD_INT 173
8265: PPUSH
8266: LD_INT 76
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: LD_INT 12
8274: NEG
8275: PPUSH
8276: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8280: LD_INT 173
8282: PPUSH
8283: LD_INT 76
8285: PPUSH
8286: LD_INT 2
8288: PPUSH
8289: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8293: LD_INT 173
8295: PPUSH
8296: LD_INT 76
8298: PPUSH
8299: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8303: LD_EXP 27
8307: PPUSH
8308: LD_STRING DKs-Hannibal-5
8310: PPUSH
8311: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8315: LD_EXP 22
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 34
8332: PUSH
8333: LD_INT 26
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PPUSH
8344: CALL_OW 69
8348: NOT
8349: AND
8350: IFFALSE 8388
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8352: LD_EXP 22
8356: PPUSH
8357: LD_STRING DKam-Hannibal-a-6
8359: PPUSH
8360: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8364: LD_EXP 22
8368: PPUSH
8369: LD_STRING DKam-Hannibal-a-7
8371: PPUSH
8372: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8376: LD_EXP 19
8380: PPUSH
8381: LD_STRING DG-Hannibal-a-8
8383: PPUSH
8384: CALL_OW 88
// end ; DialogueOff ;
8388: CALL_OW 7
// end ;
8392: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8393: LD_INT 225
8395: PPUSH
8396: CALL_OW 302
8400: PUSH
8401: LD_INT 200
8403: PPUSH
8404: CALL_OW 302
8408: AND
8409: PUSH
8410: LD_INT 12
8412: PPUSH
8413: LD_INT 21
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 70
8427: PUSH
8428: LD_INT 2
8430: GREATER
8431: AND
8432: PUSH
8433: LD_INT 13
8435: PPUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 2
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 3
8453: GREATER
8454: AND
8455: IFFALSE 8468
8457: GO 8459
8459: DISABLE
// hannibalPath := true ;
8460: LD_ADDR_EXP 9
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
8468: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8469: LD_EXP 9
8473: PUSH
8474: LD_INT 6
8476: PPUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: AND
8492: IFFALSE 8837
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
8501: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8502: LD_ADDR_VAR 0 2
8506: PUSH
8507: LD_INT 6
8509: PPUSH
8510: LD_INT 22
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 70
8524: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8525: LD_ADDR_VAR 0 3
8529: PUSH
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 34
8537: PUSH
8538: LD_INT 26
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 72
8549: PUSH
8550: LD_INT 0
8552: GREATER
8553: ST_TO_ADDR
// DialogueOn ;
8554: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8558: LD_EXP 18
8562: PPUSH
8563: LD_STRING DH-Cleverattack-1
8565: PPUSH
8566: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8570: LD_EXP 18
8574: PPUSH
8575: LD_STRING DH-Cleverattack-2
8577: PPUSH
8578: CALL_OW 88
// if hasFlameThrower then
8582: LD_VAR 0 3
8586: IFFALSE 8614
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8588: LD_EXP 34
8592: PPUSH
8593: LD_STRING DB-Cleverattack-3
8595: PPUSH
8596: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8600: LD_EXP 18
8604: PPUSH
8605: LD_STRING DH-Cleverattack-4
8607: PPUSH
8608: CALL_OW 88
// end else
8612: GO 8638
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8614: LD_EXP 34
8618: PPUSH
8619: LD_STRING DB-Cleverattack-a-3
8621: PPUSH
8622: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8626: LD_EXP 18
8630: PPUSH
8631: LD_STRING DH-Cleverattack-a-4
8633: PPUSH
8634: CALL_OW 88
// end ; DialogueOff ;
8638: CALL_OW 7
// if not hasFlameThrower then
8642: LD_VAR 0 3
8646: NOT
8647: IFFALSE 8651
// exit ;
8649: GO 8837
// earlyEscape := true ;
8651: LD_ADDR_EXP 16
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8659: LD_INT 140
8661: PPUSH
8662: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 25
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 25
8706: PUSH
8707: LD_INT 4
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 69
8728: PUSH
8729: LD_EXP 21
8733: PUSH
8734: LD_EXP 36
8738: PUSH
8739: LD_EXP 35
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: DIFF
8749: ST_TO_ADDR
// for i in tmp do
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: LD_VAR 0 2
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8835
// begin if Prob ( 40 + 10 * Difficulty ) then
8763: LD_INT 40
8765: PUSH
8766: LD_INT 10
8768: PUSH
8769: LD_OWVAR 67
8773: MUL
8774: PLUS
8775: PPUSH
8776: CALL_OW 13
8780: IFFALSE 8784
// continue ;
8782: GO 8760
// SetTag ( i , tEscape ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_EXP 17
8793: PPUSH
8794: CALL_OW 109
// if IsInUnit ( i ) then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 310
8807: IFFALSE 8818
// ComExitBuilding ( i ) ;
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8818: LD_VAR 0 1
8822: PPUSH
8823: LD_INT 92
8825: PPUSH
8826: LD_INT 177
8828: PPUSH
8829: CALL_OW 171
// end ;
8833: GO 8760
8835: POP
8836: POP
// end ;
8837: PPOPN 3
8839: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8840: LD_INT 9
8842: PPUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 6
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: PPUSH
8871: CALL_OW 70
8875: IFFALSE 8973
8877: GO 8879
8879: DISABLE
8880: LD_INT 0
8882: PPUSH
// begin enable ;
8883: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: LD_INT 9
8891: PPUSH
8892: LD_INT 2
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 6
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: PUSH
8925: FOR_IN
8926: IFFALSE 8971
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 110
8937: PUSH
8938: LD_EXP 17
8942: EQUAL
8943: PUSH
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 255
8953: PUSH
8954: LD_INT 6
8956: EQUAL
8957: OR
8958: IFFALSE 8969
// RemoveUnit ( i ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL_OW 64
8969: GO 8925
8971: POP
8972: POP
// end ;
8973: PPOPN 1
8975: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8976: LD_EXP 23
8980: PUSH
8981: LD_EXP 23
8985: PPUSH
8986: CALL_OW 256
8990: PUSH
8991: LD_INT 3
8993: LESS
8994: AND
8995: IFFALSE 9041
8997: GO 8999
8999: DISABLE
// begin DialogueOn ;
9000: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9004: LD_EXP 23
9008: PPUSH
9009: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9013: LD_EXP 23
9017: PPUSH
9018: LD_STRING DK-Kkilled-1
9020: PPUSH
9021: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9025: LD_EXP 18
9029: PPUSH
9030: LD_STRING DH-Kkilled-2
9032: PPUSH
9033: CALL_OW 88
// DialogueOff ;
9037: CALL_OW 7
// end ;
9041: END
// every 0 0$1 trigger kaiaKilledByRussian do
9042: LD_EXP 8
9046: IFFALSE 9063
9048: GO 9050
9050: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9051: LD_EXP 18
9055: PPUSH
9056: LD_STRING DH-Kkilled-3
9058: PPUSH
9059: CALL_OW 88
9063: END
// every 0 0$1 trigger tick >= 24 24$00 do
9064: LD_OWVAR 1
9068: PUSH
9069: LD_INT 50400
9071: GREATEREQUAL
9072: IFFALSE 9109
9074: GO 9076
9076: DISABLE
// begin DialogueOn ;
9077: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9081: LD_EXP 26
9085: PPUSH
9086: LD_STRING DShar-slow-1
9088: PPUSH
9089: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9093: LD_EXP 26
9097: PPUSH
9098: LD_STRING DShar-slow-2
9100: PPUSH
9101: CALL_OW 94
// DialogueOff ;
9105: CALL_OW 7
// end ;
9109: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9110: LD_OWVAR 1
9114: PUSH
9115: LD_INT 84000
9117: PUSH
9118: LD_INT 75600
9120: PUSH
9121: LD_INT 67200
9123: PUSH
9124: LD_INT 63000
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_OWVAR 67
9137: ARRAY
9138: GREATEREQUAL
9139: IFFALSE 9183
9141: GO 9143
9143: DISABLE
// begin DialogueOn ;
9144: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9148: LD_EXP 26
9152: PPUSH
9153: LD_STRING DShar-fail-1
9155: PPUSH
9156: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9160: LD_EXP 26
9164: PPUSH
9165: LD_STRING DShar-fail-2
9167: PPUSH
9168: CALL_OW 94
// DialogueOff ;
9172: CALL_OW 7
// YouLost ( Time ) ;
9176: LD_STRING Time
9178: PPUSH
9179: CALL_OW 104
// end ;
9183: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9184: LD_INT 22
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 30
9209: PUSH
9210: LD_INT 0
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: LD_INT 0
9233: EQUAL
9234: IFFALSE 9745
9236: GO 9238
9238: DISABLE
9239: LD_INT 0
9241: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9242: LD_OWVAR 1
9246: PUSH
9247: LD_EXP 5
9251: PLUS
9252: PUSH
9253: LD_INT 157500
9255: PUSH
9256: LD_INT 147000
9258: PUSH
9259: LD_INT 136500
9261: PUSH
9262: LD_INT 126000
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PUSH
9271: LD_OWVAR 67
9275: ARRAY
9276: LESSEQUAL
9277: IFFALSE 9291
// AddMedal ( med1 , 1 ) else
9279: LD_STRING med1
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 101
9289: GO 9302
// AddMedal ( med1 , - 1 ) ;
9291: LD_STRING med1
9293: PPUSH
9294: LD_INT 1
9296: NEG
9297: PPUSH
9298: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9302: LD_EXP 7
9306: PUSH
9307: LD_INT 3
9309: GREATEREQUAL
9310: PUSH
9311: LD_EXP 11
9315: MUL
9316: PUSH
9317: LD_EXP 9
9321: MUL
9322: PUSH
9323: LD_EXP 6
9327: PUSH
9328: LD_INT 6
9330: PUSH
9331: LD_INT 5
9333: PUSH
9334: LD_INT 4
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_OWVAR 67
9350: ARRAY
9351: LESS
9352: MUL
9353: IFFALSE 9367
// AddMedal ( med2 , 1 ) else
9355: LD_STRING med2
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 101
9365: GO 9378
// AddMedal ( med2 , - 1 ) ;
9367: LD_STRING med2
9369: PPUSH
9370: LD_INT 1
9372: NEG
9373: PPUSH
9374: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9378: LD_EXP 14
9382: PPUSH
9383: LD_STRING 04_2_GaidarKilled
9385: PPUSH
9386: CALL_OW 39
// if gaidarKilled then
9390: LD_EXP 14
9394: IFFALSE 9408
// AddMedal ( med3 , 1 ) else
9396: LD_STRING med3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 101
9406: GO 9419
// AddMedal ( med3 , - 1 ) ;
9408: LD_STRING med3
9410: PPUSH
9411: LD_INT 1
9413: NEG
9414: PPUSH
9415: CALL_OW 101
// GiveMedals ( MAIN ) ;
9419: LD_STRING MAIN
9421: PPUSH
9422: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9426: LD_INT 22
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 0
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: PPUSH
9462: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9466: LD_EXP 18
9470: PPUSH
9471: LD_STRING 04_2_Heike
9473: PPUSH
9474: CALL_OW 38
// if Aviradze then
9478: LD_EXP 28
9482: IFFALSE 9496
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9484: LD_EXP 28
9488: PPUSH
9489: LD_STRING 04_2_Aviradze
9491: PPUSH
9492: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9496: LD_EXP 21
9500: PUSH
9501: LD_EXP 21
9505: PPUSH
9506: CALL_OW 255
9510: PUSH
9511: LD_INT 2
9513: EQUAL
9514: AND
9515: IFFALSE 9545
// begin if ibrahimOnRuSide then
9517: LD_EXP 3
9521: IFFALSE 9533
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_STRING 04_2_IbrahimJoined
9528: PPUSH
9529: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9533: LD_EXP 21
9537: PPUSH
9538: LD_STRING 04_2_Ibrahim
9540: PPUSH
9541: CALL_OW 38
// end ; if Kamil then
9545: LD_EXP 22
9549: IFFALSE 9563
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9551: LD_EXP 22
9555: PPUSH
9556: LD_STRING 04_2_Kamil
9558: PPUSH
9559: CALL_OW 38
// if Sophia then
9563: LD_EXP 24
9567: IFFALSE 9581
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9569: LD_EXP 24
9573: PPUSH
9574: LD_STRING 04_2_Sophia
9576: PPUSH
9577: CALL_OW 38
// if Kaia then
9581: LD_EXP 23
9585: IFFALSE 9599
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9587: LD_EXP 23
9591: PPUSH
9592: LD_STRING 04_2_Kaia
9594: PPUSH
9595: CALL_OW 38
// if Givi then
9599: LD_EXP 19
9603: IFFALSE 9617
// SaveCharacters ( Givi , 04_2_Givi ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 04_2_Givi
9612: PPUSH
9613: CALL_OW 38
// if Mike then
9617: LD_EXP 20
9621: IFFALSE 9635
// SaveCharacters ( Mike , 04_2_Mike ) ;
9623: LD_EXP 20
9627: PPUSH
9628: LD_STRING 04_2_Mike
9630: PPUSH
9631: CALL_OW 38
// if Markov then
9635: LD_EXP 25
9639: IFFALSE 9653
// SaveCharacters ( Markov , 04_2_Markov ) ;
9641: LD_EXP 25
9645: PPUSH
9646: LD_STRING 04_2_Markov
9648: PPUSH
9649: CALL_OW 38
// if Kurt then
9653: LD_EXP 27
9657: IFFALSE 9671
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9659: LD_EXP 27
9663: PPUSH
9664: LD_STRING 04_2_Kurt
9666: PPUSH
9667: CALL_OW 38
// if heikeSecondSquad then
9671: LD_EXP 29
9675: IFFALSE 9689
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9677: LD_EXP 29
9681: PPUSH
9682: LD_STRING 04_2_others
9684: PPUSH
9685: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9689: LD_ADDR_VAR 0 1
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 0
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if tmp then
9723: LD_VAR 0 1
9727: IFFALSE 9741
// SaveCharacters ( tmp , 04_2_apes ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_STRING 04_2_apes
9736: PPUSH
9737: CALL_OW 38
// YouWin ;
9741: CALL_OW 103
// end ; end_of_file
9745: PPOPN 1
9747: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9748: LD_INT 0
9750: PPUSH
// if p2 = 100 then
9751: LD_VAR 0 2
9755: PUSH
9756: LD_INT 100
9758: EQUAL
9759: IFFALSE 10708
// begin if not StreamModeActive then
9761: LD_EXP 43
9765: NOT
9766: IFFALSE 9776
// StreamModeActive := true ;
9768: LD_ADDR_EXP 43
9772: PUSH
9773: LD_INT 1
9775: ST_TO_ADDR
// if p3 = 0 then
9776: LD_VAR 0 3
9780: PUSH
9781: LD_INT 0
9783: EQUAL
9784: IFFALSE 9790
// InitStreamMode ;
9786: CALL 10868 0 0
// if p3 = 1 then
9790: LD_VAR 0 3
9794: PUSH
9795: LD_INT 1
9797: EQUAL
9798: IFFALSE 9808
// sRocket := true ;
9800: LD_ADDR_EXP 48
9804: PUSH
9805: LD_INT 1
9807: ST_TO_ADDR
// if p3 = 2 then
9808: LD_VAR 0 3
9812: PUSH
9813: LD_INT 2
9815: EQUAL
9816: IFFALSE 9826
// sSpeed := true ;
9818: LD_ADDR_EXP 47
9822: PUSH
9823: LD_INT 1
9825: ST_TO_ADDR
// if p3 = 3 then
9826: LD_VAR 0 3
9830: PUSH
9831: LD_INT 3
9833: EQUAL
9834: IFFALSE 9844
// sEngine := true ;
9836: LD_ADDR_EXP 49
9840: PUSH
9841: LD_INT 1
9843: ST_TO_ADDR
// if p3 = 4 then
9844: LD_VAR 0 3
9848: PUSH
9849: LD_INT 4
9851: EQUAL
9852: IFFALSE 9862
// sSpec := true ;
9854: LD_ADDR_EXP 46
9858: PUSH
9859: LD_INT 1
9861: ST_TO_ADDR
// if p3 = 5 then
9862: LD_VAR 0 3
9866: PUSH
9867: LD_INT 5
9869: EQUAL
9870: IFFALSE 9880
// sLevel := true ;
9872: LD_ADDR_EXP 50
9876: PUSH
9877: LD_INT 1
9879: ST_TO_ADDR
// if p3 = 6 then
9880: LD_VAR 0 3
9884: PUSH
9885: LD_INT 6
9887: EQUAL
9888: IFFALSE 9898
// sArmoury := true ;
9890: LD_ADDR_EXP 51
9894: PUSH
9895: LD_INT 1
9897: ST_TO_ADDR
// if p3 = 7 then
9898: LD_VAR 0 3
9902: PUSH
9903: LD_INT 7
9905: EQUAL
9906: IFFALSE 9916
// sRadar := true ;
9908: LD_ADDR_EXP 52
9912: PUSH
9913: LD_INT 1
9915: ST_TO_ADDR
// if p3 = 8 then
9916: LD_VAR 0 3
9920: PUSH
9921: LD_INT 8
9923: EQUAL
9924: IFFALSE 9934
// sBunker := true ;
9926: LD_ADDR_EXP 53
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// if p3 = 9 then
9934: LD_VAR 0 3
9938: PUSH
9939: LD_INT 9
9941: EQUAL
9942: IFFALSE 9952
// sHack := true ;
9944: LD_ADDR_EXP 54
9948: PUSH
9949: LD_INT 1
9951: ST_TO_ADDR
// if p3 = 10 then
9952: LD_VAR 0 3
9956: PUSH
9957: LD_INT 10
9959: EQUAL
9960: IFFALSE 9970
// sFire := true ;
9962: LD_ADDR_EXP 55
9966: PUSH
9967: LD_INT 1
9969: ST_TO_ADDR
// if p3 = 11 then
9970: LD_VAR 0 3
9974: PUSH
9975: LD_INT 11
9977: EQUAL
9978: IFFALSE 9988
// sRefresh := true ;
9980: LD_ADDR_EXP 56
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// if p3 = 12 then
9988: LD_VAR 0 3
9992: PUSH
9993: LD_INT 12
9995: EQUAL
9996: IFFALSE 10006
// sExp := true ;
9998: LD_ADDR_EXP 57
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// if p3 = 13 then
10006: LD_VAR 0 3
10010: PUSH
10011: LD_INT 13
10013: EQUAL
10014: IFFALSE 10024
// sDepot := true ;
10016: LD_ADDR_EXP 58
10020: PUSH
10021: LD_INT 1
10023: ST_TO_ADDR
// if p3 = 14 then
10024: LD_VAR 0 3
10028: PUSH
10029: LD_INT 14
10031: EQUAL
10032: IFFALSE 10042
// sFlag := true ;
10034: LD_ADDR_EXP 59
10038: PUSH
10039: LD_INT 1
10041: ST_TO_ADDR
// if p3 = 15 then
10042: LD_VAR 0 3
10046: PUSH
10047: LD_INT 15
10049: EQUAL
10050: IFFALSE 10060
// sKamikadze := true ;
10052: LD_ADDR_EXP 67
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// if p3 = 16 then
10060: LD_VAR 0 3
10064: PUSH
10065: LD_INT 16
10067: EQUAL
10068: IFFALSE 10078
// sTroll := true ;
10070: LD_ADDR_EXP 68
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// if p3 = 17 then
10078: LD_VAR 0 3
10082: PUSH
10083: LD_INT 17
10085: EQUAL
10086: IFFALSE 10096
// sSlow := true ;
10088: LD_ADDR_EXP 69
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// if p3 = 18 then
10096: LD_VAR 0 3
10100: PUSH
10101: LD_INT 18
10103: EQUAL
10104: IFFALSE 10114
// sLack := true ;
10106: LD_ADDR_EXP 70
10110: PUSH
10111: LD_INT 1
10113: ST_TO_ADDR
// if p3 = 19 then
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 19
10121: EQUAL
10122: IFFALSE 10132
// sTank := true ;
10124: LD_ADDR_EXP 72
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// if p3 = 20 then
10132: LD_VAR 0 3
10136: PUSH
10137: LD_INT 20
10139: EQUAL
10140: IFFALSE 10150
// sRemote := true ;
10142: LD_ADDR_EXP 73
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// if p3 = 21 then
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 21
10157: EQUAL
10158: IFFALSE 10168
// sPowell := true ;
10160: LD_ADDR_EXP 74
10164: PUSH
10165: LD_INT 1
10167: ST_TO_ADDR
// if p3 = 22 then
10168: LD_VAR 0 3
10172: PUSH
10173: LD_INT 22
10175: EQUAL
10176: IFFALSE 10186
// sTeleport := true ;
10178: LD_ADDR_EXP 77
10182: PUSH
10183: LD_INT 1
10185: ST_TO_ADDR
// if p3 = 23 then
10186: LD_VAR 0 3
10190: PUSH
10191: LD_INT 23
10193: EQUAL
10194: IFFALSE 10204
// sOilTower := true ;
10196: LD_ADDR_EXP 79
10200: PUSH
10201: LD_INT 1
10203: ST_TO_ADDR
// if p3 = 24 then
10204: LD_VAR 0 3
10208: PUSH
10209: LD_INT 24
10211: EQUAL
10212: IFFALSE 10222
// sShovel := true ;
10214: LD_ADDR_EXP 80
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// if p3 = 25 then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 25
10229: EQUAL
10230: IFFALSE 10240
// sSheik := true ;
10232: LD_ADDR_EXP 81
10236: PUSH
10237: LD_INT 1
10239: ST_TO_ADDR
// if p3 = 26 then
10240: LD_VAR 0 3
10244: PUSH
10245: LD_INT 26
10247: EQUAL
10248: IFFALSE 10258
// sEarthquake := true ;
10250: LD_ADDR_EXP 83
10254: PUSH
10255: LD_INT 1
10257: ST_TO_ADDR
// if p3 = 27 then
10258: LD_VAR 0 3
10262: PUSH
10263: LD_INT 27
10265: EQUAL
10266: IFFALSE 10276
// sAI := true ;
10268: LD_ADDR_EXP 84
10272: PUSH
10273: LD_INT 1
10275: ST_TO_ADDR
// if p3 = 28 then
10276: LD_VAR 0 3
10280: PUSH
10281: LD_INT 28
10283: EQUAL
10284: IFFALSE 10294
// sCargo := true ;
10286: LD_ADDR_EXP 87
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 29 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 29
10301: EQUAL
10302: IFFALSE 10312
// sDLaser := true ;
10304: LD_ADDR_EXP 88
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// if p3 = 30 then
10312: LD_VAR 0 3
10316: PUSH
10317: LD_INT 30
10319: EQUAL
10320: IFFALSE 10330
// sExchange := true ;
10322: LD_ADDR_EXP 89
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// if p3 = 31 then
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 31
10337: EQUAL
10338: IFFALSE 10348
// sFac := true ;
10340: LD_ADDR_EXP 90
10344: PUSH
10345: LD_INT 1
10347: ST_TO_ADDR
// if p3 = 32 then
10348: LD_VAR 0 3
10352: PUSH
10353: LD_INT 32
10355: EQUAL
10356: IFFALSE 10366
// sPower := true ;
10358: LD_ADDR_EXP 91
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// if p3 = 33 then
10366: LD_VAR 0 3
10370: PUSH
10371: LD_INT 33
10373: EQUAL
10374: IFFALSE 10384
// sRandom := true ;
10376: LD_ADDR_EXP 92
10380: PUSH
10381: LD_INT 1
10383: ST_TO_ADDR
// if p3 = 34 then
10384: LD_VAR 0 3
10388: PUSH
10389: LD_INT 34
10391: EQUAL
10392: IFFALSE 10402
// sShield := true ;
10394: LD_ADDR_EXP 93
10398: PUSH
10399: LD_INT 1
10401: ST_TO_ADDR
// if p3 = 35 then
10402: LD_VAR 0 3
10406: PUSH
10407: LD_INT 35
10409: EQUAL
10410: IFFALSE 10420
// sTime := true ;
10412: LD_ADDR_EXP 94
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// if p3 = 36 then
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 36
10427: EQUAL
10428: IFFALSE 10438
// sTools := true ;
10430: LD_ADDR_EXP 95
10434: PUSH
10435: LD_INT 1
10437: ST_TO_ADDR
// if p3 = 101 then
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 101
10445: EQUAL
10446: IFFALSE 10456
// sSold := true ;
10448: LD_ADDR_EXP 60
10452: PUSH
10453: LD_INT 1
10455: ST_TO_ADDR
// if p3 = 102 then
10456: LD_VAR 0 3
10460: PUSH
10461: LD_INT 102
10463: EQUAL
10464: IFFALSE 10474
// sDiff := true ;
10466: LD_ADDR_EXP 61
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// if p3 = 103 then
10474: LD_VAR 0 3
10478: PUSH
10479: LD_INT 103
10481: EQUAL
10482: IFFALSE 10492
// sFog := true ;
10484: LD_ADDR_EXP 64
10488: PUSH
10489: LD_INT 1
10491: ST_TO_ADDR
// if p3 = 104 then
10492: LD_VAR 0 3
10496: PUSH
10497: LD_INT 104
10499: EQUAL
10500: IFFALSE 10510
// sReset := true ;
10502: LD_ADDR_EXP 65
10506: PUSH
10507: LD_INT 1
10509: ST_TO_ADDR
// if p3 = 105 then
10510: LD_VAR 0 3
10514: PUSH
10515: LD_INT 105
10517: EQUAL
10518: IFFALSE 10528
// sSun := true ;
10520: LD_ADDR_EXP 66
10524: PUSH
10525: LD_INT 1
10527: ST_TO_ADDR
// if p3 = 106 then
10528: LD_VAR 0 3
10532: PUSH
10533: LD_INT 106
10535: EQUAL
10536: IFFALSE 10546
// sTiger := true ;
10538: LD_ADDR_EXP 62
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// if p3 = 107 then
10546: LD_VAR 0 3
10550: PUSH
10551: LD_INT 107
10553: EQUAL
10554: IFFALSE 10564
// sBomb := true ;
10556: LD_ADDR_EXP 63
10560: PUSH
10561: LD_INT 1
10563: ST_TO_ADDR
// if p3 = 108 then
10564: LD_VAR 0 3
10568: PUSH
10569: LD_INT 108
10571: EQUAL
10572: IFFALSE 10582
// sWound := true ;
10574: LD_ADDR_EXP 71
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// if p3 = 109 then
10582: LD_VAR 0 3
10586: PUSH
10587: LD_INT 109
10589: EQUAL
10590: IFFALSE 10600
// sBetray := true ;
10592: LD_ADDR_EXP 75
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
// if p3 = 110 then
10600: LD_VAR 0 3
10604: PUSH
10605: LD_INT 110
10607: EQUAL
10608: IFFALSE 10618
// sContamin := true ;
10610: LD_ADDR_EXP 76
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// if p3 = 111 then
10618: LD_VAR 0 3
10622: PUSH
10623: LD_INT 111
10625: EQUAL
10626: IFFALSE 10636
// sOil := true ;
10628: LD_ADDR_EXP 78
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// if p3 = 112 then
10636: LD_VAR 0 3
10640: PUSH
10641: LD_INT 112
10643: EQUAL
10644: IFFALSE 10654
// sStu := true ;
10646: LD_ADDR_EXP 82
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// if p3 = 113 then
10654: LD_VAR 0 3
10658: PUSH
10659: LD_INT 113
10661: EQUAL
10662: IFFALSE 10672
// sBazooka := true ;
10664: LD_ADDR_EXP 85
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// if p3 = 114 then
10672: LD_VAR 0 3
10676: PUSH
10677: LD_INT 114
10679: EQUAL
10680: IFFALSE 10690
// sMortar := true ;
10682: LD_ADDR_EXP 86
10686: PUSH
10687: LD_INT 1
10689: ST_TO_ADDR
// if p3 = 115 then
10690: LD_VAR 0 3
10694: PUSH
10695: LD_INT 115
10697: EQUAL
10698: IFFALSE 10708
// sRanger := true ;
10700: LD_ADDR_EXP 96
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// end ; if p2 = 101 then
10708: LD_VAR 0 2
10712: PUSH
10713: LD_INT 101
10715: EQUAL
10716: IFFALSE 10844
// begin case p3 of 1 :
10718: LD_VAR 0 3
10722: PUSH
10723: LD_INT 1
10725: DOUBLE
10726: EQUAL
10727: IFTRUE 10731
10729: GO 10738
10731: POP
// hHackUnlimitedResources ; 2 :
10732: CALL 21881 0 0
10736: GO 10844
10738: LD_INT 2
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 10753
10746: POP
// hHackSetLevel10 ; 3 :
10747: CALL 22014 0 0
10751: GO 10844
10753: LD_INT 3
10755: DOUBLE
10756: EQUAL
10757: IFTRUE 10761
10759: GO 10768
10761: POP
// hHackSetLevel10YourUnits ; 4 :
10762: CALL 22099 0 0
10766: GO 10844
10768: LD_INT 4
10770: DOUBLE
10771: EQUAL
10772: IFTRUE 10776
10774: GO 10783
10776: POP
// hHackInvincible ; 5 :
10777: CALL 22547 0 0
10781: GO 10844
10783: LD_INT 5
10785: DOUBLE
10786: EQUAL
10787: IFTRUE 10791
10789: GO 10798
10791: POP
// hHackInvisible ; 6 :
10792: CALL 22658 0 0
10796: GO 10844
10798: LD_INT 6
10800: DOUBLE
10801: EQUAL
10802: IFTRUE 10806
10804: GO 10813
10806: POP
// hHackChangeYourSide ; 7 :
10807: CALL 22715 0 0
10811: GO 10844
10813: LD_INT 7
10815: DOUBLE
10816: EQUAL
10817: IFTRUE 10821
10819: GO 10828
10821: POP
// hHackChangeUnitSide ; 8 :
10822: CALL 22757 0 0
10826: GO 10844
10828: LD_INT 8
10830: DOUBLE
10831: EQUAL
10832: IFTRUE 10836
10834: GO 10843
10836: POP
// hHackFog ; end ;
10837: CALL 22858 0 0
10841: GO 10844
10843: POP
// end ; end ;
10844: LD_VAR 0 7
10848: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10849: GO 10851
10851: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10852: LD_STRING initStreamRollete();
10854: PPUSH
10855: CALL_OW 559
// InitStreamMode ;
10859: CALL 10868 0 0
// DefineStreamItems ( ) ;
10863: CALL 11308 0 0
// end ;
10867: END
// function InitStreamMode ; begin
10868: LD_INT 0
10870: PPUSH
// streamModeActive := false ;
10871: LD_ADDR_EXP 43
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// normalCounter := 36 ;
10879: LD_ADDR_EXP 44
10883: PUSH
10884: LD_INT 36
10886: ST_TO_ADDR
// hardcoreCounter := 16 ;
10887: LD_ADDR_EXP 45
10891: PUSH
10892: LD_INT 16
10894: ST_TO_ADDR
// sRocket := false ;
10895: LD_ADDR_EXP 48
10899: PUSH
10900: LD_INT 0
10902: ST_TO_ADDR
// sSpeed := false ;
10903: LD_ADDR_EXP 47
10907: PUSH
10908: LD_INT 0
10910: ST_TO_ADDR
// sEngine := false ;
10911: LD_ADDR_EXP 49
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// sSpec := false ;
10919: LD_ADDR_EXP 46
10923: PUSH
10924: LD_INT 0
10926: ST_TO_ADDR
// sLevel := false ;
10927: LD_ADDR_EXP 50
10931: PUSH
10932: LD_INT 0
10934: ST_TO_ADDR
// sArmoury := false ;
10935: LD_ADDR_EXP 51
10939: PUSH
10940: LD_INT 0
10942: ST_TO_ADDR
// sRadar := false ;
10943: LD_ADDR_EXP 52
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// sBunker := false ;
10951: LD_ADDR_EXP 53
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
// sHack := false ;
10959: LD_ADDR_EXP 54
10963: PUSH
10964: LD_INT 0
10966: ST_TO_ADDR
// sFire := false ;
10967: LD_ADDR_EXP 55
10971: PUSH
10972: LD_INT 0
10974: ST_TO_ADDR
// sRefresh := false ;
10975: LD_ADDR_EXP 56
10979: PUSH
10980: LD_INT 0
10982: ST_TO_ADDR
// sExp := false ;
10983: LD_ADDR_EXP 57
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// sDepot := false ;
10991: LD_ADDR_EXP 58
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// sFlag := false ;
10999: LD_ADDR_EXP 59
11003: PUSH
11004: LD_INT 0
11006: ST_TO_ADDR
// sKamikadze := false ;
11007: LD_ADDR_EXP 67
11011: PUSH
11012: LD_INT 0
11014: ST_TO_ADDR
// sTroll := false ;
11015: LD_ADDR_EXP 68
11019: PUSH
11020: LD_INT 0
11022: ST_TO_ADDR
// sSlow := false ;
11023: LD_ADDR_EXP 69
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// sLack := false ;
11031: LD_ADDR_EXP 70
11035: PUSH
11036: LD_INT 0
11038: ST_TO_ADDR
// sTank := false ;
11039: LD_ADDR_EXP 72
11043: PUSH
11044: LD_INT 0
11046: ST_TO_ADDR
// sRemote := false ;
11047: LD_ADDR_EXP 73
11051: PUSH
11052: LD_INT 0
11054: ST_TO_ADDR
// sPowell := false ;
11055: LD_ADDR_EXP 74
11059: PUSH
11060: LD_INT 0
11062: ST_TO_ADDR
// sTeleport := false ;
11063: LD_ADDR_EXP 77
11067: PUSH
11068: LD_INT 0
11070: ST_TO_ADDR
// sOilTower := false ;
11071: LD_ADDR_EXP 79
11075: PUSH
11076: LD_INT 0
11078: ST_TO_ADDR
// sShovel := false ;
11079: LD_ADDR_EXP 80
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// sSheik := false ;
11087: LD_ADDR_EXP 81
11091: PUSH
11092: LD_INT 0
11094: ST_TO_ADDR
// sEarthquake := false ;
11095: LD_ADDR_EXP 83
11099: PUSH
11100: LD_INT 0
11102: ST_TO_ADDR
// sAI := false ;
11103: LD_ADDR_EXP 84
11107: PUSH
11108: LD_INT 0
11110: ST_TO_ADDR
// sCargo := false ;
11111: LD_ADDR_EXP 87
11115: PUSH
11116: LD_INT 0
11118: ST_TO_ADDR
// sDLaser := false ;
11119: LD_ADDR_EXP 88
11123: PUSH
11124: LD_INT 0
11126: ST_TO_ADDR
// sExchange := false ;
11127: LD_ADDR_EXP 89
11131: PUSH
11132: LD_INT 0
11134: ST_TO_ADDR
// sFac := false ;
11135: LD_ADDR_EXP 90
11139: PUSH
11140: LD_INT 0
11142: ST_TO_ADDR
// sPower := false ;
11143: LD_ADDR_EXP 91
11147: PUSH
11148: LD_INT 0
11150: ST_TO_ADDR
// sRandom := false ;
11151: LD_ADDR_EXP 92
11155: PUSH
11156: LD_INT 0
11158: ST_TO_ADDR
// sShield := false ;
11159: LD_ADDR_EXP 93
11163: PUSH
11164: LD_INT 0
11166: ST_TO_ADDR
// sTime := false ;
11167: LD_ADDR_EXP 94
11171: PUSH
11172: LD_INT 0
11174: ST_TO_ADDR
// sTools := false ;
11175: LD_ADDR_EXP 95
11179: PUSH
11180: LD_INT 0
11182: ST_TO_ADDR
// sSold := false ;
11183: LD_ADDR_EXP 60
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// sDiff := false ;
11191: LD_ADDR_EXP 61
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// sFog := false ;
11199: LD_ADDR_EXP 64
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// sReset := false ;
11207: LD_ADDR_EXP 65
11211: PUSH
11212: LD_INT 0
11214: ST_TO_ADDR
// sSun := false ;
11215: LD_ADDR_EXP 66
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// sTiger := false ;
11223: LD_ADDR_EXP 62
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
// sBomb := false ;
11231: LD_ADDR_EXP 63
11235: PUSH
11236: LD_INT 0
11238: ST_TO_ADDR
// sWound := false ;
11239: LD_ADDR_EXP 71
11243: PUSH
11244: LD_INT 0
11246: ST_TO_ADDR
// sBetray := false ;
11247: LD_ADDR_EXP 75
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// sContamin := false ;
11255: LD_ADDR_EXP 76
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// sOil := false ;
11263: LD_ADDR_EXP 78
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// sStu := false ;
11271: LD_ADDR_EXP 82
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// sBazooka := false ;
11279: LD_ADDR_EXP 85
11283: PUSH
11284: LD_INT 0
11286: ST_TO_ADDR
// sMortar := false ;
11287: LD_ADDR_EXP 86
11291: PUSH
11292: LD_INT 0
11294: ST_TO_ADDR
// sRanger := false ;
11295: LD_ADDR_EXP 96
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// end ;
11303: LD_VAR 0 1
11307: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11308: LD_INT 0
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
// result := [ ] ;
11315: LD_ADDR_VAR 0 1
11319: PUSH
11320: EMPTY
11321: ST_TO_ADDR
// if campaign_id = 1 then
11322: LD_OWVAR 69
11326: PUSH
11327: LD_INT 1
11329: EQUAL
11330: IFFALSE 14268
// begin case mission_number of 1 :
11332: LD_OWVAR 70
11336: PUSH
11337: LD_INT 1
11339: DOUBLE
11340: EQUAL
11341: IFTRUE 11345
11343: GO 11409
11345: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11346: LD_ADDR_VAR 0 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 11
11359: PUSH
11360: LD_INT 12
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: ST_TO_ADDR
11407: GO 14266
11409: LD_INT 2
11411: DOUBLE
11412: EQUAL
11413: IFTRUE 11417
11415: GO 11489
11417: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11418: LD_ADDR_VAR 0 1
11422: PUSH
11423: LD_INT 2
11425: PUSH
11426: LD_INT 4
11428: PUSH
11429: LD_INT 11
11431: PUSH
11432: LD_INT 12
11434: PUSH
11435: LD_INT 15
11437: PUSH
11438: LD_INT 16
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_INT 23
11446: PUSH
11447: LD_INT 26
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 101
11463: PUSH
11464: LD_INT 102
11466: PUSH
11467: LD_INT 105
11469: PUSH
11470: LD_INT 106
11472: PUSH
11473: LD_INT 108
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: ST_TO_ADDR
11487: GO 14266
11489: LD_INT 3
11491: DOUBLE
11492: EQUAL
11493: IFTRUE 11497
11495: GO 11573
11497: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11498: LD_ADDR_VAR 0 1
11502: PUSH
11503: LD_INT 2
11505: PUSH
11506: LD_INT 4
11508: PUSH
11509: LD_INT 5
11511: PUSH
11512: LD_INT 11
11514: PUSH
11515: LD_INT 12
11517: PUSH
11518: LD_INT 15
11520: PUSH
11521: LD_INT 16
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_INT 26
11529: PUSH
11530: LD_INT 36
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 101
11547: PUSH
11548: LD_INT 102
11550: PUSH
11551: LD_INT 105
11553: PUSH
11554: LD_INT 106
11556: PUSH
11557: LD_INT 108
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: ST_TO_ADDR
11571: GO 14266
11573: LD_INT 4
11575: DOUBLE
11576: EQUAL
11577: IFTRUE 11581
11579: GO 11665
11581: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11582: LD_ADDR_VAR 0 1
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 4
11592: PUSH
11593: LD_INT 5
11595: PUSH
11596: LD_INT 8
11598: PUSH
11599: LD_INT 11
11601: PUSH
11602: LD_INT 12
11604: PUSH
11605: LD_INT 15
11607: PUSH
11608: LD_INT 16
11610: PUSH
11611: LD_INT 22
11613: PUSH
11614: LD_INT 23
11616: PUSH
11617: LD_INT 26
11619: PUSH
11620: LD_INT 36
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 101
11639: PUSH
11640: LD_INT 102
11642: PUSH
11643: LD_INT 105
11645: PUSH
11646: LD_INT 106
11648: PUSH
11649: LD_INT 108
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: ST_TO_ADDR
11663: GO 14266
11665: LD_INT 5
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 11773
11673: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_INT 2
11681: PUSH
11682: LD_INT 4
11684: PUSH
11685: LD_INT 5
11687: PUSH
11688: LD_INT 6
11690: PUSH
11691: LD_INT 8
11693: PUSH
11694: LD_INT 11
11696: PUSH
11697: LD_INT 12
11699: PUSH
11700: LD_INT 15
11702: PUSH
11703: LD_INT 16
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 23
11711: PUSH
11712: LD_INT 25
11714: PUSH
11715: LD_INT 26
11717: PUSH
11718: LD_INT 36
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 101
11739: PUSH
11740: LD_INT 102
11742: PUSH
11743: LD_INT 105
11745: PUSH
11746: LD_INT 106
11748: PUSH
11749: LD_INT 108
11751: PUSH
11752: LD_INT 109
11754: PUSH
11755: LD_INT 112
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: ST_TO_ADDR
11771: GO 14266
11773: LD_INT 6
11775: DOUBLE
11776: EQUAL
11777: IFTRUE 11781
11779: GO 11901
11781: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: LD_INT 5
11795: PUSH
11796: LD_INT 6
11798: PUSH
11799: LD_INT 8
11801: PUSH
11802: LD_INT 11
11804: PUSH
11805: LD_INT 12
11807: PUSH
11808: LD_INT 15
11810: PUSH
11811: LD_INT 16
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 23
11825: PUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 26
11831: PUSH
11832: LD_INT 30
11834: PUSH
11835: LD_INT 31
11837: PUSH
11838: LD_INT 32
11840: PUSH
11841: LD_INT 36
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 101
11867: PUSH
11868: LD_INT 102
11870: PUSH
11871: LD_INT 105
11873: PUSH
11874: LD_INT 106
11876: PUSH
11877: LD_INT 108
11879: PUSH
11880: LD_INT 109
11882: PUSH
11883: LD_INT 112
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: ST_TO_ADDR
11899: GO 14266
11901: LD_INT 7
11903: DOUBLE
11904: EQUAL
11905: IFTRUE 11909
11907: GO 12009
11909: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11910: LD_ADDR_VAR 0 1
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: LD_INT 5
11923: PUSH
11924: LD_INT 7
11926: PUSH
11927: LD_INT 11
11929: PUSH
11930: LD_INT 12
11932: PUSH
11933: LD_INT 15
11935: PUSH
11936: LD_INT 16
11938: PUSH
11939: LD_INT 20
11941: PUSH
11942: LD_INT 21
11944: PUSH
11945: LD_INT 22
11947: PUSH
11948: LD_INT 23
11950: PUSH
11951: LD_INT 25
11953: PUSH
11954: LD_INT 26
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 101
11975: PUSH
11976: LD_INT 102
11978: PUSH
11979: LD_INT 103
11981: PUSH
11982: LD_INT 105
11984: PUSH
11985: LD_INT 106
11987: PUSH
11988: LD_INT 108
11990: PUSH
11991: LD_INT 112
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: ST_TO_ADDR
12007: GO 14266
12009: LD_INT 8
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12145
12017: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12018: LD_ADDR_VAR 0 1
12022: PUSH
12023: LD_INT 2
12025: PUSH
12026: LD_INT 4
12028: PUSH
12029: LD_INT 5
12031: PUSH
12032: LD_INT 6
12034: PUSH
12035: LD_INT 7
12037: PUSH
12038: LD_INT 8
12040: PUSH
12041: LD_INT 11
12043: PUSH
12044: LD_INT 12
12046: PUSH
12047: LD_INT 15
12049: PUSH
12050: LD_INT 16
12052: PUSH
12053: LD_INT 20
12055: PUSH
12056: LD_INT 21
12058: PUSH
12059: LD_INT 22
12061: PUSH
12062: LD_INT 23
12064: PUSH
12065: LD_INT 25
12067: PUSH
12068: LD_INT 26
12070: PUSH
12071: LD_INT 30
12073: PUSH
12074: LD_INT 31
12076: PUSH
12077: LD_INT 32
12079: PUSH
12080: LD_INT 36
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 101
12107: PUSH
12108: LD_INT 102
12110: PUSH
12111: LD_INT 103
12113: PUSH
12114: LD_INT 105
12116: PUSH
12117: LD_INT 106
12119: PUSH
12120: LD_INT 108
12122: PUSH
12123: LD_INT 109
12125: PUSH
12126: LD_INT 112
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: ST_TO_ADDR
12143: GO 14266
12145: LD_INT 9
12147: DOUBLE
12148: EQUAL
12149: IFTRUE 12153
12151: GO 12289
12153: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12154: LD_ADDR_VAR 0 1
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 4
12164: PUSH
12165: LD_INT 5
12167: PUSH
12168: LD_INT 6
12170: PUSH
12171: LD_INT 7
12173: PUSH
12174: LD_INT 8
12176: PUSH
12177: LD_INT 11
12179: PUSH
12180: LD_INT 12
12182: PUSH
12183: LD_INT 15
12185: PUSH
12186: LD_INT 16
12188: PUSH
12189: LD_INT 20
12191: PUSH
12192: LD_INT 21
12194: PUSH
12195: LD_INT 22
12197: PUSH
12198: LD_INT 23
12200: PUSH
12201: LD_INT 25
12203: PUSH
12204: LD_INT 26
12206: PUSH
12207: LD_INT 28
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 31
12215: PUSH
12216: LD_INT 32
12218: PUSH
12219: LD_INT 36
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 101
12247: PUSH
12248: LD_INT 102
12250: PUSH
12251: LD_INT 103
12253: PUSH
12254: LD_INT 105
12256: PUSH
12257: LD_INT 106
12259: PUSH
12260: LD_INT 108
12262: PUSH
12263: LD_INT 109
12265: PUSH
12266: LD_INT 112
12268: PUSH
12269: LD_INT 114
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: ST_TO_ADDR
12287: GO 14266
12289: LD_INT 10
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12481
12297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12298: LD_ADDR_VAR 0 1
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: LD_INT 6
12314: PUSH
12315: LD_INT 7
12317: PUSH
12318: LD_INT 8
12320: PUSH
12321: LD_INT 9
12323: PUSH
12324: LD_INT 10
12326: PUSH
12327: LD_INT 11
12329: PUSH
12330: LD_INT 12
12332: PUSH
12333: LD_INT 13
12335: PUSH
12336: LD_INT 14
12338: PUSH
12339: LD_INT 15
12341: PUSH
12342: LD_INT 16
12344: PUSH
12345: LD_INT 17
12347: PUSH
12348: LD_INT 18
12350: PUSH
12351: LD_INT 19
12353: PUSH
12354: LD_INT 20
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 22
12362: PUSH
12363: LD_INT 23
12365: PUSH
12366: LD_INT 24
12368: PUSH
12369: LD_INT 25
12371: PUSH
12372: LD_INT 26
12374: PUSH
12375: LD_INT 28
12377: PUSH
12378: LD_INT 30
12380: PUSH
12381: LD_INT 31
12383: PUSH
12384: LD_INT 32
12386: PUSH
12387: LD_INT 36
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 101
12423: PUSH
12424: LD_INT 102
12426: PUSH
12427: LD_INT 103
12429: PUSH
12430: LD_INT 104
12432: PUSH
12433: LD_INT 105
12435: PUSH
12436: LD_INT 106
12438: PUSH
12439: LD_INT 107
12441: PUSH
12442: LD_INT 108
12444: PUSH
12445: LD_INT 109
12447: PUSH
12448: LD_INT 110
12450: PUSH
12451: LD_INT 111
12453: PUSH
12454: LD_INT 112
12456: PUSH
12457: LD_INT 114
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 14266
12481: LD_INT 11
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12681
12489: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: LD_INT 2
12497: PUSH
12498: LD_INT 3
12500: PUSH
12501: LD_INT 4
12503: PUSH
12504: LD_INT 5
12506: PUSH
12507: LD_INT 6
12509: PUSH
12510: LD_INT 7
12512: PUSH
12513: LD_INT 8
12515: PUSH
12516: LD_INT 9
12518: PUSH
12519: LD_INT 10
12521: PUSH
12522: LD_INT 11
12524: PUSH
12525: LD_INT 12
12527: PUSH
12528: LD_INT 13
12530: PUSH
12531: LD_INT 14
12533: PUSH
12534: LD_INT 15
12536: PUSH
12537: LD_INT 16
12539: PUSH
12540: LD_INT 17
12542: PUSH
12543: LD_INT 18
12545: PUSH
12546: LD_INT 19
12548: PUSH
12549: LD_INT 20
12551: PUSH
12552: LD_INT 21
12554: PUSH
12555: LD_INT 22
12557: PUSH
12558: LD_INT 23
12560: PUSH
12561: LD_INT 24
12563: PUSH
12564: LD_INT 25
12566: PUSH
12567: LD_INT 26
12569: PUSH
12570: LD_INT 28
12572: PUSH
12573: LD_INT 30
12575: PUSH
12576: LD_INT 31
12578: PUSH
12579: LD_INT 32
12581: PUSH
12582: LD_INT 34
12584: PUSH
12585: LD_INT 36
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 101
12623: PUSH
12624: LD_INT 102
12626: PUSH
12627: LD_INT 103
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 105
12635: PUSH
12636: LD_INT 106
12638: PUSH
12639: LD_INT 107
12641: PUSH
12642: LD_INT 108
12644: PUSH
12645: LD_INT 109
12647: PUSH
12648: LD_INT 110
12650: PUSH
12651: LD_INT 111
12653: PUSH
12654: LD_INT 112
12656: PUSH
12657: LD_INT 114
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: ST_TO_ADDR
12679: GO 14266
12681: LD_INT 12
12683: DOUBLE
12684: EQUAL
12685: IFTRUE 12689
12687: GO 12897
12689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12690: LD_ADDR_VAR 0 1
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: LD_INT 2
12700: PUSH
12701: LD_INT 3
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 27
12775: PUSH
12776: LD_INT 28
12778: PUSH
12779: LD_INT 30
12781: PUSH
12782: LD_INT 31
12784: PUSH
12785: LD_INT 32
12787: PUSH
12788: LD_INT 33
12790: PUSH
12791: LD_INT 34
12793: PUSH
12794: LD_INT 36
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 101
12835: PUSH
12836: LD_INT 102
12838: PUSH
12839: LD_INT 103
12841: PUSH
12842: LD_INT 104
12844: PUSH
12845: LD_INT 105
12847: PUSH
12848: LD_INT 106
12850: PUSH
12851: LD_INT 107
12853: PUSH
12854: LD_INT 108
12856: PUSH
12857: LD_INT 109
12859: PUSH
12860: LD_INT 110
12862: PUSH
12863: LD_INT 111
12865: PUSH
12866: LD_INT 112
12868: PUSH
12869: LD_INT 113
12871: PUSH
12872: LD_INT 114
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: ST_TO_ADDR
12895: GO 14266
12897: LD_INT 13
12899: DOUBLE
12900: EQUAL
12901: IFTRUE 12905
12903: GO 13101
12905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12906: LD_ADDR_VAR 0 1
12910: PUSH
12911: LD_INT 1
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: LD_INT 4
12922: PUSH
12923: LD_INT 5
12925: PUSH
12926: LD_INT 8
12928: PUSH
12929: LD_INT 9
12931: PUSH
12932: LD_INT 10
12934: PUSH
12935: LD_INT 11
12937: PUSH
12938: LD_INT 12
12940: PUSH
12941: LD_INT 14
12943: PUSH
12944: LD_INT 15
12946: PUSH
12947: LD_INT 16
12949: PUSH
12950: LD_INT 17
12952: PUSH
12953: LD_INT 18
12955: PUSH
12956: LD_INT 19
12958: PUSH
12959: LD_INT 20
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 24
12973: PUSH
12974: LD_INT 25
12976: PUSH
12977: LD_INT 26
12979: PUSH
12980: LD_INT 27
12982: PUSH
12983: LD_INT 28
12985: PUSH
12986: LD_INT 30
12988: PUSH
12989: LD_INT 31
12991: PUSH
12992: LD_INT 32
12994: PUSH
12995: LD_INT 33
12997: PUSH
12998: LD_INT 34
13000: PUSH
13001: LD_INT 36
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 101
13039: PUSH
13040: LD_INT 102
13042: PUSH
13043: LD_INT 103
13045: PUSH
13046: LD_INT 104
13048: PUSH
13049: LD_INT 105
13051: PUSH
13052: LD_INT 106
13054: PUSH
13055: LD_INT 107
13057: PUSH
13058: LD_INT 108
13060: PUSH
13061: LD_INT 109
13063: PUSH
13064: LD_INT 110
13066: PUSH
13067: LD_INT 111
13069: PUSH
13070: LD_INT 112
13072: PUSH
13073: LD_INT 113
13075: PUSH
13076: LD_INT 114
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: ST_TO_ADDR
13099: GO 14266
13101: LD_INT 14
13103: DOUBLE
13104: EQUAL
13105: IFTRUE 13109
13107: GO 13321
13109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_INT 1
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 3
13123: PUSH
13124: LD_INT 4
13126: PUSH
13127: LD_INT 5
13129: PUSH
13130: LD_INT 6
13132: PUSH
13133: LD_INT 7
13135: PUSH
13136: LD_INT 8
13138: PUSH
13139: LD_INT 9
13141: PUSH
13142: LD_INT 10
13144: PUSH
13145: LD_INT 11
13147: PUSH
13148: LD_INT 12
13150: PUSH
13151: LD_INT 13
13153: PUSH
13154: LD_INT 14
13156: PUSH
13157: LD_INT 15
13159: PUSH
13160: LD_INT 16
13162: PUSH
13163: LD_INT 17
13165: PUSH
13166: LD_INT 18
13168: PUSH
13169: LD_INT 19
13171: PUSH
13172: LD_INT 20
13174: PUSH
13175: LD_INT 21
13177: PUSH
13178: LD_INT 22
13180: PUSH
13181: LD_INT 23
13183: PUSH
13184: LD_INT 24
13186: PUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 27
13195: PUSH
13196: LD_INT 28
13198: PUSH
13199: LD_INT 29
13201: PUSH
13202: LD_INT 30
13204: PUSH
13205: LD_INT 31
13207: PUSH
13208: LD_INT 32
13210: PUSH
13211: LD_INT 33
13213: PUSH
13214: LD_INT 34
13216: PUSH
13217: LD_INT 36
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 101
13259: PUSH
13260: LD_INT 102
13262: PUSH
13263: LD_INT 103
13265: PUSH
13266: LD_INT 104
13268: PUSH
13269: LD_INT 105
13271: PUSH
13272: LD_INT 106
13274: PUSH
13275: LD_INT 107
13277: PUSH
13278: LD_INT 108
13280: PUSH
13281: LD_INT 109
13283: PUSH
13284: LD_INT 110
13286: PUSH
13287: LD_INT 111
13289: PUSH
13290: LD_INT 112
13292: PUSH
13293: LD_INT 113
13295: PUSH
13296: LD_INT 114
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: ST_TO_ADDR
13319: GO 14266
13321: LD_INT 15
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13541
13329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13330: LD_ADDR_VAR 0 1
13334: PUSH
13335: LD_INT 1
13337: PUSH
13338: LD_INT 2
13340: PUSH
13341: LD_INT 3
13343: PUSH
13344: LD_INT 4
13346: PUSH
13347: LD_INT 5
13349: PUSH
13350: LD_INT 6
13352: PUSH
13353: LD_INT 7
13355: PUSH
13356: LD_INT 8
13358: PUSH
13359: LD_INT 9
13361: PUSH
13362: LD_INT 10
13364: PUSH
13365: LD_INT 11
13367: PUSH
13368: LD_INT 12
13370: PUSH
13371: LD_INT 13
13373: PUSH
13374: LD_INT 14
13376: PUSH
13377: LD_INT 15
13379: PUSH
13380: LD_INT 16
13382: PUSH
13383: LD_INT 17
13385: PUSH
13386: LD_INT 18
13388: PUSH
13389: LD_INT 19
13391: PUSH
13392: LD_INT 20
13394: PUSH
13395: LD_INT 21
13397: PUSH
13398: LD_INT 22
13400: PUSH
13401: LD_INT 23
13403: PUSH
13404: LD_INT 24
13406: PUSH
13407: LD_INT 25
13409: PUSH
13410: LD_INT 26
13412: PUSH
13413: LD_INT 27
13415: PUSH
13416: LD_INT 28
13418: PUSH
13419: LD_INT 29
13421: PUSH
13422: LD_INT 30
13424: PUSH
13425: LD_INT 31
13427: PUSH
13428: LD_INT 32
13430: PUSH
13431: LD_INT 33
13433: PUSH
13434: LD_INT 34
13436: PUSH
13437: LD_INT 36
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 101
13479: PUSH
13480: LD_INT 102
13482: PUSH
13483: LD_INT 103
13485: PUSH
13486: LD_INT 104
13488: PUSH
13489: LD_INT 105
13491: PUSH
13492: LD_INT 106
13494: PUSH
13495: LD_INT 107
13497: PUSH
13498: LD_INT 108
13500: PUSH
13501: LD_INT 109
13503: PUSH
13504: LD_INT 110
13506: PUSH
13507: LD_INT 111
13509: PUSH
13510: LD_INT 112
13512: PUSH
13513: LD_INT 113
13515: PUSH
13516: LD_INT 114
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: ST_TO_ADDR
13539: GO 14266
13541: LD_INT 16
13543: DOUBLE
13544: EQUAL
13545: IFTRUE 13549
13547: GO 13673
13549: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13550: LD_ADDR_VAR 0 1
13554: PUSH
13555: LD_INT 2
13557: PUSH
13558: LD_INT 4
13560: PUSH
13561: LD_INT 5
13563: PUSH
13564: LD_INT 7
13566: PUSH
13567: LD_INT 11
13569: PUSH
13570: LD_INT 12
13572: PUSH
13573: LD_INT 15
13575: PUSH
13576: LD_INT 16
13578: PUSH
13579: LD_INT 20
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_INT 23
13590: PUSH
13591: LD_INT 25
13593: PUSH
13594: LD_INT 26
13596: PUSH
13597: LD_INT 30
13599: PUSH
13600: LD_INT 31
13602: PUSH
13603: LD_INT 32
13605: PUSH
13606: LD_INT 33
13608: PUSH
13609: LD_INT 34
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 101
13635: PUSH
13636: LD_INT 102
13638: PUSH
13639: LD_INT 103
13641: PUSH
13642: LD_INT 106
13644: PUSH
13645: LD_INT 108
13647: PUSH
13648: LD_INT 112
13650: PUSH
13651: LD_INT 113
13653: PUSH
13654: LD_INT 114
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: ST_TO_ADDR
13671: GO 14266
13673: LD_INT 17
13675: DOUBLE
13676: EQUAL
13677: IFTRUE 13681
13679: GO 13893
13681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: LD_INT 2
13692: PUSH
13693: LD_INT 3
13695: PUSH
13696: LD_INT 4
13698: PUSH
13699: LD_INT 5
13701: PUSH
13702: LD_INT 6
13704: PUSH
13705: LD_INT 7
13707: PUSH
13708: LD_INT 8
13710: PUSH
13711: LD_INT 9
13713: PUSH
13714: LD_INT 10
13716: PUSH
13717: LD_INT 11
13719: PUSH
13720: LD_INT 12
13722: PUSH
13723: LD_INT 13
13725: PUSH
13726: LD_INT 14
13728: PUSH
13729: LD_INT 15
13731: PUSH
13732: LD_INT 16
13734: PUSH
13735: LD_INT 17
13737: PUSH
13738: LD_INT 18
13740: PUSH
13741: LD_INT 19
13743: PUSH
13744: LD_INT 20
13746: PUSH
13747: LD_INT 21
13749: PUSH
13750: LD_INT 22
13752: PUSH
13753: LD_INT 23
13755: PUSH
13756: LD_INT 24
13758: PUSH
13759: LD_INT 25
13761: PUSH
13762: LD_INT 26
13764: PUSH
13765: LD_INT 27
13767: PUSH
13768: LD_INT 28
13770: PUSH
13771: LD_INT 29
13773: PUSH
13774: LD_INT 30
13776: PUSH
13777: LD_INT 31
13779: PUSH
13780: LD_INT 32
13782: PUSH
13783: LD_INT 33
13785: PUSH
13786: LD_INT 34
13788: PUSH
13789: LD_INT 36
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 101
13831: PUSH
13832: LD_INT 102
13834: PUSH
13835: LD_INT 103
13837: PUSH
13838: LD_INT 104
13840: PUSH
13841: LD_INT 105
13843: PUSH
13844: LD_INT 106
13846: PUSH
13847: LD_INT 107
13849: PUSH
13850: LD_INT 108
13852: PUSH
13853: LD_INT 109
13855: PUSH
13856: LD_INT 110
13858: PUSH
13859: LD_INT 111
13861: PUSH
13862: LD_INT 112
13864: PUSH
13865: LD_INT 113
13867: PUSH
13868: LD_INT 114
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: ST_TO_ADDR
13891: GO 14266
13893: LD_INT 18
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 14037
13901: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13902: LD_ADDR_VAR 0 1
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 4
13912: PUSH
13913: LD_INT 5
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 15
13927: PUSH
13928: LD_INT 16
13930: PUSH
13931: LD_INT 20
13933: PUSH
13934: LD_INT 21
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_INT 23
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 26
13948: PUSH
13949: LD_INT 30
13951: PUSH
13952: LD_INT 31
13954: PUSH
13955: LD_INT 32
13957: PUSH
13958: LD_INT 33
13960: PUSH
13961: LD_INT 34
13963: PUSH
13964: LD_INT 35
13966: PUSH
13967: LD_INT 36
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 101
13995: PUSH
13996: LD_INT 102
13998: PUSH
13999: LD_INT 103
14001: PUSH
14002: LD_INT 106
14004: PUSH
14005: LD_INT 108
14007: PUSH
14008: LD_INT 112
14010: PUSH
14011: LD_INT 113
14013: PUSH
14014: LD_INT 114
14016: PUSH
14017: LD_INT 115
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: ST_TO_ADDR
14035: GO 14266
14037: LD_INT 19
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14265
14045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: LD_INT 1
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: LD_INT 3
14059: PUSH
14060: LD_INT 4
14062: PUSH
14063: LD_INT 5
14065: PUSH
14066: LD_INT 6
14068: PUSH
14069: LD_INT 7
14071: PUSH
14072: LD_INT 8
14074: PUSH
14075: LD_INT 9
14077: PUSH
14078: LD_INT 10
14080: PUSH
14081: LD_INT 11
14083: PUSH
14084: LD_INT 12
14086: PUSH
14087: LD_INT 13
14089: PUSH
14090: LD_INT 14
14092: PUSH
14093: LD_INT 15
14095: PUSH
14096: LD_INT 16
14098: PUSH
14099: LD_INT 17
14101: PUSH
14102: LD_INT 18
14104: PUSH
14105: LD_INT 19
14107: PUSH
14108: LD_INT 20
14110: PUSH
14111: LD_INT 21
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 23
14119: PUSH
14120: LD_INT 24
14122: PUSH
14123: LD_INT 25
14125: PUSH
14126: LD_INT 26
14128: PUSH
14129: LD_INT 27
14131: PUSH
14132: LD_INT 28
14134: PUSH
14135: LD_INT 29
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 31
14143: PUSH
14144: LD_INT 32
14146: PUSH
14147: LD_INT 33
14149: PUSH
14150: LD_INT 34
14152: PUSH
14153: LD_INT 35
14155: PUSH
14156: LD_INT 36
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 103
14205: PUSH
14206: LD_INT 104
14208: PUSH
14209: LD_INT 105
14211: PUSH
14212: LD_INT 106
14214: PUSH
14215: LD_INT 107
14217: PUSH
14218: LD_INT 108
14220: PUSH
14221: LD_INT 109
14223: PUSH
14224: LD_INT 110
14226: PUSH
14227: LD_INT 111
14229: PUSH
14230: LD_INT 112
14232: PUSH
14233: LD_INT 113
14235: PUSH
14236: LD_INT 114
14238: PUSH
14239: LD_INT 115
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: ST_TO_ADDR
14263: GO 14266
14265: POP
// end else
14266: GO 14485
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14268: LD_ADDR_VAR 0 1
14272: PUSH
14273: LD_INT 1
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: LD_INT 4
14284: PUSH
14285: LD_INT 5
14287: PUSH
14288: LD_INT 6
14290: PUSH
14291: LD_INT 7
14293: PUSH
14294: LD_INT 8
14296: PUSH
14297: LD_INT 9
14299: PUSH
14300: LD_INT 10
14302: PUSH
14303: LD_INT 11
14305: PUSH
14306: LD_INT 12
14308: PUSH
14309: LD_INT 13
14311: PUSH
14312: LD_INT 14
14314: PUSH
14315: LD_INT 15
14317: PUSH
14318: LD_INT 16
14320: PUSH
14321: LD_INT 17
14323: PUSH
14324: LD_INT 18
14326: PUSH
14327: LD_INT 19
14329: PUSH
14330: LD_INT 20
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_INT 23
14341: PUSH
14342: LD_INT 24
14344: PUSH
14345: LD_INT 25
14347: PUSH
14348: LD_INT 26
14350: PUSH
14351: LD_INT 27
14353: PUSH
14354: LD_INT 28
14356: PUSH
14357: LD_INT 29
14359: PUSH
14360: LD_INT 30
14362: PUSH
14363: LD_INT 31
14365: PUSH
14366: LD_INT 32
14368: PUSH
14369: LD_INT 33
14371: PUSH
14372: LD_INT 34
14374: PUSH
14375: LD_INT 35
14377: PUSH
14378: LD_INT 36
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 101
14421: PUSH
14422: LD_INT 102
14424: PUSH
14425: LD_INT 103
14427: PUSH
14428: LD_INT 104
14430: PUSH
14431: LD_INT 105
14433: PUSH
14434: LD_INT 106
14436: PUSH
14437: LD_INT 107
14439: PUSH
14440: LD_INT 108
14442: PUSH
14443: LD_INT 109
14445: PUSH
14446: LD_INT 110
14448: PUSH
14449: LD_INT 111
14451: PUSH
14452: LD_INT 112
14454: PUSH
14455: LD_INT 113
14457: PUSH
14458: LD_INT 114
14460: PUSH
14461: LD_INT 115
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: ST_TO_ADDR
// if result then
14485: LD_VAR 0 1
14489: IFFALSE 14778
// begin normal :=  ;
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_STRING 
14498: ST_TO_ADDR
// hardcore :=  ;
14499: LD_ADDR_VAR 0 4
14503: PUSH
14504: LD_STRING 
14506: ST_TO_ADDR
// for i = 1 to normalCounter do
14507: LD_ADDR_VAR 0 5
14511: PUSH
14512: DOUBLE
14513: LD_INT 1
14515: DEC
14516: ST_TO_ADDR
14517: LD_EXP 44
14521: PUSH
14522: FOR_TO
14523: IFFALSE 14624
// begin tmp := 0 ;
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_STRING 0
14532: ST_TO_ADDR
// if result [ 1 ] then
14533: LD_VAR 0 1
14537: PUSH
14538: LD_INT 1
14540: ARRAY
14541: IFFALSE 14606
// if result [ 1 ] [ 1 ] = i then
14543: LD_VAR 0 1
14547: PUSH
14548: LD_INT 1
14550: ARRAY
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: PUSH
14556: LD_VAR 0 5
14560: EQUAL
14561: IFFALSE 14606
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: LD_INT 1
14575: PPUSH
14576: LD_VAR 0 1
14580: PUSH
14581: LD_INT 1
14583: ARRAY
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 3
14592: PPUSH
14593: CALL_OW 1
14597: ST_TO_ADDR
// tmp := 1 ;
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: LD_STRING 1
14605: ST_TO_ADDR
// end ; normal := normal & tmp ;
14606: LD_ADDR_VAR 0 3
14610: PUSH
14611: LD_VAR 0 3
14615: PUSH
14616: LD_VAR 0 2
14620: STR
14621: ST_TO_ADDR
// end ;
14622: GO 14522
14624: POP
14625: POP
// for i = 1 to hardcoreCounter do
14626: LD_ADDR_VAR 0 5
14630: PUSH
14631: DOUBLE
14632: LD_INT 1
14634: DEC
14635: ST_TO_ADDR
14636: LD_EXP 45
14640: PUSH
14641: FOR_TO
14642: IFFALSE 14747
// begin tmp := 0 ;
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_STRING 0
14651: ST_TO_ADDR
// if result [ 2 ] then
14652: LD_VAR 0 1
14656: PUSH
14657: LD_INT 2
14659: ARRAY
14660: IFFALSE 14729
// if result [ 2 ] [ 1 ] = 100 + i then
14662: LD_VAR 0 1
14666: PUSH
14667: LD_INT 2
14669: ARRAY
14670: PUSH
14671: LD_INT 1
14673: ARRAY
14674: PUSH
14675: LD_INT 100
14677: PUSH
14678: LD_VAR 0 5
14682: PLUS
14683: EQUAL
14684: IFFALSE 14729
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_INT 2
14698: PPUSH
14699: LD_VAR 0 1
14703: PUSH
14704: LD_INT 2
14706: ARRAY
14707: PPUSH
14708: LD_INT 1
14710: PPUSH
14711: CALL_OW 3
14715: PPUSH
14716: CALL_OW 1
14720: ST_TO_ADDR
// tmp := 1 ;
14721: LD_ADDR_VAR 0 2
14725: PUSH
14726: LD_STRING 1
14728: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14729: LD_ADDR_VAR 0 4
14733: PUSH
14734: LD_VAR 0 4
14738: PUSH
14739: LD_VAR 0 2
14743: STR
14744: ST_TO_ADDR
// end ;
14745: GO 14641
14747: POP
14748: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14749: LD_STRING getStreamItemsFromMission("
14751: PUSH
14752: LD_VAR 0 3
14756: STR
14757: PUSH
14758: LD_STRING ","
14760: STR
14761: PUSH
14762: LD_VAR 0 4
14766: STR
14767: PUSH
14768: LD_STRING ")
14770: STR
14771: PPUSH
14772: CALL_OW 559
// end else
14776: GO 14785
// ToLua ( getStreamItemsFromMission("","") ) ;
14778: LD_STRING getStreamItemsFromMission("","")
14780: PPUSH
14781: CALL_OW 559
// end ;
14785: LD_VAR 0 1
14789: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14790: LD_EXP 43
14794: PUSH
14795: LD_EXP 48
14799: AND
14800: IFFALSE 14924
14802: GO 14804
14804: DISABLE
14805: LD_INT 0
14807: PPUSH
14808: PPUSH
// begin enable ;
14809: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14810: LD_ADDR_VAR 0 2
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_OWVAR 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 34
14832: PUSH
14833: LD_INT 7
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 34
14842: PUSH
14843: LD_INT 45
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 34
14852: PUSH
14853: LD_INT 28
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 34
14862: PUSH
14863: LD_INT 47
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL_OW 69
14885: ST_TO_ADDR
// if not tmp then
14886: LD_VAR 0 2
14890: NOT
14891: IFFALSE 14895
// exit ;
14893: GO 14924
// for i in tmp do
14895: LD_ADDR_VAR 0 1
14899: PUSH
14900: LD_VAR 0 2
14904: PUSH
14905: FOR_IN
14906: IFFALSE 14922
// begin SetLives ( i , 0 ) ;
14908: LD_VAR 0 1
14912: PPUSH
14913: LD_INT 0
14915: PPUSH
14916: CALL_OW 234
// end ;
14920: GO 14905
14922: POP
14923: POP
// end ;
14924: PPOPN 2
14926: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14927: LD_EXP 43
14931: PUSH
14932: LD_EXP 49
14936: AND
14937: IFFALSE 15021
14939: GO 14941
14941: DISABLE
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
// begin enable ;
14946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_OWVAR 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 32
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PPUSH
14978: CALL_OW 69
14982: ST_TO_ADDR
// if not tmp then
14983: LD_VAR 0 2
14987: NOT
14988: IFFALSE 14992
// exit ;
14990: GO 15021
// for i in tmp do
14992: LD_ADDR_VAR 0 1
14996: PUSH
14997: LD_VAR 0 2
15001: PUSH
15002: FOR_IN
15003: IFFALSE 15019
// begin SetLives ( i , 0 ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: LD_INT 0
15012: PPUSH
15013: CALL_OW 234
// end ;
15017: GO 15002
15019: POP
15020: POP
// end ;
15021: PPOPN 2
15023: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15024: LD_EXP 43
15028: PUSH
15029: LD_EXP 46
15033: AND
15034: IFFALSE 15127
15036: GO 15038
15038: DISABLE
15039: LD_INT 0
15041: PPUSH
// begin enable ;
15042: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_OWVAR 2
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: LD_INT 25
15065: PUSH
15066: LD_INT 5
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 25
15075: PUSH
15076: LD_INT 9
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 25
15085: PUSH
15086: LD_INT 8
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PPUSH
15103: CALL_OW 69
15107: PUSH
15108: FOR_IN
15109: IFFALSE 15125
// begin SetClass ( i , 1 ) ;
15111: LD_VAR 0 1
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: CALL_OW 336
// end ;
15123: GO 15108
15125: POP
15126: POP
// end ;
15127: PPOPN 1
15129: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15130: LD_EXP 43
15134: PUSH
15135: LD_EXP 47
15139: AND
15140: PUSH
15141: LD_OWVAR 65
15145: PUSH
15146: LD_INT 7
15148: LESS
15149: AND
15150: IFFALSE 15164
15152: GO 15154
15154: DISABLE
// begin enable ;
15155: ENABLE
// game_speed := 7 ;
15156: LD_ADDR_OWVAR 65
15160: PUSH
15161: LD_INT 7
15163: ST_TO_ADDR
// end ;
15164: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15165: LD_EXP 43
15169: PUSH
15170: LD_EXP 50
15174: AND
15175: IFFALSE 15377
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
15184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_INT 81
15192: PUSH
15193: LD_OWVAR 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 21
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: ST_TO_ADDR
// if not tmp then
15221: LD_VAR 0 3
15225: NOT
15226: IFFALSE 15230
// exit ;
15228: GO 15377
// if tmp > 5 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 5
15237: GREATER
15238: IFFALSE 15250
// k := 5 else
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_INT 5
15247: ST_TO_ADDR
15248: GO 15260
// k := tmp ;
15250: LD_ADDR_VAR 0 2
15254: PUSH
15255: LD_VAR 0 3
15259: ST_TO_ADDR
// for i := 1 to k do
15260: LD_ADDR_VAR 0 1
15264: PUSH
15265: DOUBLE
15266: LD_INT 1
15268: DEC
15269: ST_TO_ADDR
15270: LD_VAR 0 2
15274: PUSH
15275: FOR_TO
15276: IFFALSE 15375
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_VAR 0 1
15287: ARRAY
15288: PPUSH
15289: LD_VAR 0 1
15293: PUSH
15294: LD_INT 4
15296: MOD
15297: PUSH
15298: LD_INT 1
15300: PLUS
15301: PPUSH
15302: CALL_OW 259
15306: PUSH
15307: LD_INT 10
15309: LESS
15310: IFFALSE 15373
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15312: LD_VAR 0 3
15316: PUSH
15317: LD_VAR 0 1
15321: ARRAY
15322: PPUSH
15323: LD_VAR 0 1
15327: PUSH
15328: LD_INT 4
15330: MOD
15331: PUSH
15332: LD_INT 1
15334: PLUS
15335: PPUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_VAR 0 1
15345: ARRAY
15346: PPUSH
15347: LD_VAR 0 1
15351: PUSH
15352: LD_INT 4
15354: MOD
15355: PUSH
15356: LD_INT 1
15358: PLUS
15359: PPUSH
15360: CALL_OW 259
15364: PUSH
15365: LD_INT 1
15367: PLUS
15368: PPUSH
15369: CALL_OW 237
15373: GO 15275
15375: POP
15376: POP
// end ;
15377: PPOPN 3
15379: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15380: LD_EXP 43
15384: PUSH
15385: LD_EXP 51
15389: AND
15390: IFFALSE 15410
15392: GO 15394
15394: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15395: LD_INT 4
15397: PPUSH
15398: LD_OWVAR 2
15402: PPUSH
15403: LD_INT 0
15405: PPUSH
15406: CALL_OW 324
15410: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15411: LD_EXP 43
15415: PUSH
15416: LD_EXP 80
15420: AND
15421: IFFALSE 15441
15423: GO 15425
15425: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15426: LD_INT 19
15428: PPUSH
15429: LD_OWVAR 2
15433: PPUSH
15434: LD_INT 0
15436: PPUSH
15437: CALL_OW 324
15441: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15442: LD_EXP 43
15446: PUSH
15447: LD_EXP 52
15451: AND
15452: IFFALSE 15554
15454: GO 15456
15456: DISABLE
15457: LD_INT 0
15459: PPUSH
15460: PPUSH
// begin enable ;
15461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_INT 22
15469: PUSH
15470: LD_OWVAR 2
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: LD_INT 34
15484: PUSH
15485: LD_INT 11
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 34
15494: PUSH
15495: LD_INT 30
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: ST_TO_ADDR
// if not tmp then
15516: LD_VAR 0 2
15520: NOT
15521: IFFALSE 15525
// exit ;
15523: GO 15554
// for i in tmp do
15525: LD_ADDR_VAR 0 1
15529: PUSH
15530: LD_VAR 0 2
15534: PUSH
15535: FOR_IN
15536: IFFALSE 15552
// begin SetLives ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 234
// end ;
15550: GO 15535
15552: POP
15553: POP
// end ;
15554: PPOPN 2
15556: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15557: LD_EXP 43
15561: PUSH
15562: LD_EXP 53
15566: AND
15567: IFFALSE 15587
15569: GO 15571
15571: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15572: LD_INT 32
15574: PPUSH
15575: LD_OWVAR 2
15579: PPUSH
15580: LD_INT 0
15582: PPUSH
15583: CALL_OW 324
15587: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15588: LD_EXP 43
15592: PUSH
15593: LD_EXP 54
15597: AND
15598: IFFALSE 15779
15600: GO 15602
15602: DISABLE
15603: LD_INT 0
15605: PPUSH
15606: PPUSH
15607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15608: LD_ADDR_VAR 0 2
15612: PUSH
15613: LD_INT 22
15615: PUSH
15616: LD_OWVAR 2
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 33
15627: PUSH
15628: LD_INT 3
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: ST_TO_ADDR
// if not tmp then
15644: LD_VAR 0 2
15648: NOT
15649: IFFALSE 15653
// exit ;
15651: GO 15779
// side := 0 ;
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_INT 0
15660: ST_TO_ADDR
// for i := 1 to 8 do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: DOUBLE
15667: LD_INT 1
15669: DEC
15670: ST_TO_ADDR
15671: LD_INT 8
15673: PUSH
15674: FOR_TO
15675: IFFALSE 15723
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15677: LD_OWVAR 2
15681: PUSH
15682: LD_VAR 0 1
15686: NONEQUAL
15687: PUSH
15688: LD_OWVAR 2
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 81
15702: PUSH
15703: LD_INT 2
15705: EQUAL
15706: AND
15707: IFFALSE 15721
// begin side := i ;
15709: LD_ADDR_VAR 0 3
15713: PUSH
15714: LD_VAR 0 1
15718: ST_TO_ADDR
// break ;
15719: GO 15723
// end ;
15721: GO 15674
15723: POP
15724: POP
// if not side then
15725: LD_VAR 0 3
15729: NOT
15730: IFFALSE 15734
// exit ;
15732: GO 15779
// for i := 1 to tmp do
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: DOUBLE
15740: LD_INT 1
15742: DEC
15743: ST_TO_ADDR
15744: LD_VAR 0 2
15748: PUSH
15749: FOR_TO
15750: IFFALSE 15777
// if Prob ( 60 ) then
15752: LD_INT 60
15754: PPUSH
15755: CALL_OW 13
15759: IFFALSE 15775
// SetSide ( i , side ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: CALL_OW 235
15775: GO 15749
15777: POP
15778: POP
// end ;
15779: PPOPN 3
15781: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15782: LD_EXP 43
15786: PUSH
15787: LD_EXP 56
15791: AND
15792: IFFALSE 15911
15794: GO 15796
15796: DISABLE
15797: LD_INT 0
15799: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15800: LD_ADDR_VAR 0 1
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_OWVAR 2
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 21
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: LD_INT 23
15832: PUSH
15833: LD_INT 0
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 69
15853: PUSH
15854: FOR_IN
15855: IFFALSE 15909
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15857: LD_VAR 0 1
15861: PPUSH
15862: CALL_OW 257
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: LD_INT 3
15875: PUSH
15876: LD_INT 4
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: IN
15885: IFFALSE 15907
// SetClass ( un , rand ( 1 , 4 ) ) ;
15887: LD_VAR 0 1
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: LD_INT 4
15897: PPUSH
15898: CALL_OW 12
15902: PPUSH
15903: CALL_OW 336
15907: GO 15854
15909: POP
15910: POP
// end ;
15911: PPOPN 1
15913: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15914: LD_EXP 43
15918: PUSH
15919: LD_EXP 55
15923: AND
15924: IFFALSE 16003
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 22
15939: PUSH
15940: LD_OWVAR 2
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 21
15951: PUSH
15952: LD_INT 3
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 1
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: PPUSH
15996: LD_INT 100
15998: PPUSH
15999: CALL_OW 234
// end ;
16003: PPOPN 1
16005: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16006: LD_EXP 43
16010: PUSH
16011: LD_EXP 57
16015: AND
16016: IFFALSE 16114
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16024: LD_ADDR_VAR 0 1
16028: PUSH
16029: LD_INT 22
16031: PUSH
16032: LD_OWVAR 2
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 21
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 69
16059: ST_TO_ADDR
// if not tmp then
16060: LD_VAR 0 1
16064: NOT
16065: IFFALSE 16069
// exit ;
16067: GO 16114
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16069: LD_VAR 0 1
16073: PUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 12
16086: ARRAY
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_INT 4
16093: PPUSH
16094: CALL_OW 12
16098: PPUSH
16099: LD_INT 3000
16101: PPUSH
16102: LD_INT 9000
16104: PPUSH
16105: CALL_OW 12
16109: PPUSH
16110: CALL_OW 492
// end ;
16114: PPOPN 1
16116: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16117: LD_EXP 43
16121: PUSH
16122: LD_EXP 58
16126: AND
16127: IFFALSE 16147
16129: GO 16131
16131: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16132: LD_INT 1
16134: PPUSH
16135: LD_OWVAR 2
16139: PPUSH
16140: LD_INT 0
16142: PPUSH
16143: CALL_OW 324
16147: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16148: LD_EXP 43
16152: PUSH
16153: LD_EXP 59
16157: AND
16158: IFFALSE 16241
16160: GO 16162
16162: DISABLE
16163: LD_INT 0
16165: PPUSH
16166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16167: LD_ADDR_VAR 0 2
16171: PUSH
16172: LD_INT 22
16174: PUSH
16175: LD_OWVAR 2
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 21
16186: PUSH
16187: LD_INT 3
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// if not tmp then
16203: LD_VAR 0 2
16207: NOT
16208: IFFALSE 16212
// exit ;
16210: GO 16241
// for i in tmp do
16212: LD_ADDR_VAR 0 1
16216: PUSH
16217: LD_VAR 0 2
16221: PUSH
16222: FOR_IN
16223: IFFALSE 16239
// SetBLevel ( i , 10 ) ;
16225: LD_VAR 0 1
16229: PPUSH
16230: LD_INT 10
16232: PPUSH
16233: CALL_OW 241
16237: GO 16222
16239: POP
16240: POP
// end ;
16241: PPOPN 2
16243: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16244: LD_EXP 43
16248: PUSH
16249: LD_EXP 60
16253: AND
16254: IFFALSE 16365
16256: GO 16258
16258: DISABLE
16259: LD_INT 0
16261: PPUSH
16262: PPUSH
16263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16264: LD_ADDR_VAR 0 3
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_OWVAR 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 25
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// if not tmp then
16300: LD_VAR 0 3
16304: NOT
16305: IFFALSE 16309
// exit ;
16307: GO 16365
// un := tmp [ rand ( 1 , tmp ) ] ;
16309: LD_ADDR_VAR 0 2
16313: PUSH
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 1
16321: PPUSH
16322: LD_VAR 0 3
16326: PPUSH
16327: CALL_OW 12
16331: ARRAY
16332: ST_TO_ADDR
// if Crawls ( un ) then
16333: LD_VAR 0 2
16337: PPUSH
16338: CALL_OW 318
16342: IFFALSE 16353
// ComWalk ( un ) ;
16344: LD_VAR 0 2
16348: PPUSH
16349: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_INT 5
16360: PPUSH
16361: CALL_OW 336
// end ;
16365: PPOPN 3
16367: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16368: LD_EXP 43
16372: PUSH
16373: LD_EXP 61
16377: AND
16378: PUSH
16379: LD_OWVAR 67
16383: PUSH
16384: LD_INT 4
16386: LESS
16387: AND
16388: IFFALSE 16407
16390: GO 16392
16392: DISABLE
// begin Difficulty := Difficulty + 1 ;
16393: LD_ADDR_OWVAR 67
16397: PUSH
16398: LD_OWVAR 67
16402: PUSH
16403: LD_INT 1
16405: PLUS
16406: ST_TO_ADDR
// end ;
16407: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16408: LD_EXP 43
16412: PUSH
16413: LD_EXP 62
16417: AND
16418: IFFALSE 16521
16420: GO 16422
16422: DISABLE
16423: LD_INT 0
16425: PPUSH
// begin for i := 1 to 5 do
16426: LD_ADDR_VAR 0 1
16430: PUSH
16431: DOUBLE
16432: LD_INT 1
16434: DEC
16435: ST_TO_ADDR
16436: LD_INT 5
16438: PUSH
16439: FOR_TO
16440: IFFALSE 16519
// begin uc_nation := nation_nature ;
16442: LD_ADDR_OWVAR 21
16446: PUSH
16447: LD_INT 0
16449: ST_TO_ADDR
// uc_side := 0 ;
16450: LD_ADDR_OWVAR 20
16454: PUSH
16455: LD_INT 0
16457: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16458: LD_ADDR_OWVAR 29
16462: PUSH
16463: LD_INT 12
16465: PUSH
16466: LD_INT 12
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: ST_TO_ADDR
// hc_agressivity := 20 ;
16473: LD_ADDR_OWVAR 35
16477: PUSH
16478: LD_INT 20
16480: ST_TO_ADDR
// hc_class := class_tiger ;
16481: LD_ADDR_OWVAR 28
16485: PUSH
16486: LD_INT 14
16488: ST_TO_ADDR
// hc_gallery :=  ;
16489: LD_ADDR_OWVAR 33
16493: PUSH
16494: LD_STRING 
16496: ST_TO_ADDR
// hc_name :=  ;
16497: LD_ADDR_OWVAR 26
16501: PUSH
16502: LD_STRING 
16504: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16505: CALL_OW 44
16509: PPUSH
16510: LD_INT 0
16512: PPUSH
16513: CALL_OW 51
// end ;
16517: GO 16439
16519: POP
16520: POP
// end ;
16521: PPOPN 1
16523: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16524: LD_EXP 43
16528: PUSH
16529: LD_EXP 63
16533: AND
16534: IFFALSE 16543
16536: GO 16538
16538: DISABLE
// StreamSibBomb ;
16539: CALL 16544 0 0
16543: END
// export function StreamSibBomb ; var i , x , y ; begin
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
16548: PPUSH
16549: PPUSH
// result := false ;
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_INT 0
16557: ST_TO_ADDR
// for i := 1 to 16 do
16558: LD_ADDR_VAR 0 2
16562: PUSH
16563: DOUBLE
16564: LD_INT 1
16566: DEC
16567: ST_TO_ADDR
16568: LD_INT 16
16570: PUSH
16571: FOR_TO
16572: IFFALSE 16771
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16574: LD_ADDR_VAR 0 3
16578: PUSH
16579: LD_INT 10
16581: PUSH
16582: LD_INT 20
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 40
16590: PUSH
16591: LD_INT 50
16593: PUSH
16594: LD_INT 60
16596: PUSH
16597: LD_INT 70
16599: PUSH
16600: LD_INT 80
16602: PUSH
16603: LD_INT 90
16605: PUSH
16606: LD_INT 100
16608: PUSH
16609: LD_INT 110
16611: PUSH
16612: LD_INT 120
16614: PUSH
16615: LD_INT 130
16617: PUSH
16618: LD_INT 140
16620: PUSH
16621: LD_INT 150
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: PPUSH
16644: LD_INT 15
16646: PPUSH
16647: CALL_OW 12
16651: ARRAY
16652: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16653: LD_ADDR_VAR 0 4
16657: PUSH
16658: LD_INT 10
16660: PUSH
16661: LD_INT 20
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: LD_INT 40
16669: PUSH
16670: LD_INT 50
16672: PUSH
16673: LD_INT 60
16675: PUSH
16676: LD_INT 70
16678: PUSH
16679: LD_INT 80
16681: PUSH
16682: LD_INT 90
16684: PUSH
16685: LD_INT 100
16687: PUSH
16688: LD_INT 110
16690: PUSH
16691: LD_INT 120
16693: PUSH
16694: LD_INT 130
16696: PUSH
16697: LD_INT 140
16699: PUSH
16700: LD_INT 150
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: PPUSH
16723: LD_INT 15
16725: PPUSH
16726: CALL_OW 12
16730: ARRAY
16731: ST_TO_ADDR
// if ValidHex ( x , y ) then
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_VAR 0 4
16741: PPUSH
16742: CALL_OW 488
16746: IFFALSE 16769
// begin result := [ x , y ] ;
16748: LD_ADDR_VAR 0 1
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 4
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: ST_TO_ADDR
// break ;
16767: GO 16771
// end ; end ;
16769: GO 16571
16771: POP
16772: POP
// if result then
16773: LD_VAR 0 1
16777: IFFALSE 16837
// begin ToLua ( playSibBomb() ) ;
16779: LD_STRING playSibBomb()
16781: PPUSH
16782: CALL_OW 559
// wait ( 0 0$14 ) ;
16786: LD_INT 490
16788: PPUSH
16789: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16793: LD_VAR 0 1
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 2
16809: ARRAY
16810: PPUSH
16811: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16815: LD_VAR 0 1
16819: PUSH
16820: LD_INT 1
16822: ARRAY
16823: PPUSH
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: PPUSH
16833: CALL_OW 429
// end ; end ;
16837: LD_VAR 0 1
16841: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16842: LD_EXP 43
16846: PUSH
16847: LD_EXP 65
16851: AND
16852: IFFALSE 16864
16854: GO 16856
16856: DISABLE
// YouLost (  ) ;
16857: LD_STRING 
16859: PPUSH
16860: CALL_OW 104
16864: END
// every 0 0$1 trigger StreamModeActive and sFog do
16865: LD_EXP 43
16869: PUSH
16870: LD_EXP 64
16874: AND
16875: IFFALSE 16889
16877: GO 16879
16879: DISABLE
// FogOff ( your_side ) ;
16880: LD_OWVAR 2
16884: PPUSH
16885: CALL_OW 344
16889: END
// every 0 0$1 trigger StreamModeActive and sSun do
16890: LD_EXP 43
16894: PUSH
16895: LD_EXP 66
16899: AND
16900: IFFALSE 16928
16902: GO 16904
16904: DISABLE
// begin solar_recharge_percent := 0 ;
16905: LD_ADDR_OWVAR 79
16909: PUSH
16910: LD_INT 0
16912: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16913: LD_INT 10500
16915: PPUSH
16916: CALL_OW 67
// solar_recharge_percent := 100 ;
16920: LD_ADDR_OWVAR 79
16924: PUSH
16925: LD_INT 100
16927: ST_TO_ADDR
// end ;
16928: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16929: LD_EXP 43
16933: PUSH
16934: LD_EXP 67
16938: AND
16939: IFFALSE 17178
16941: GO 16943
16943: DISABLE
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
16948: PPUSH
// begin tmp := [ ] ;
16949: LD_ADDR_VAR 0 3
16953: PUSH
16954: EMPTY
16955: ST_TO_ADDR
// for i := 1 to 6 do
16956: LD_ADDR_VAR 0 1
16960: PUSH
16961: DOUBLE
16962: LD_INT 1
16964: DEC
16965: ST_TO_ADDR
16966: LD_INT 6
16968: PUSH
16969: FOR_TO
16970: IFFALSE 17075
// begin uc_nation := nation_nature ;
16972: LD_ADDR_OWVAR 21
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// uc_side := 0 ;
16980: LD_ADDR_OWVAR 20
16984: PUSH
16985: LD_INT 0
16987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16988: LD_ADDR_OWVAR 29
16992: PUSH
16993: LD_INT 12
16995: PUSH
16996: LD_INT 12
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// hc_agressivity := 20 ;
17003: LD_ADDR_OWVAR 35
17007: PUSH
17008: LD_INT 20
17010: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17011: LD_ADDR_OWVAR 28
17015: PUSH
17016: LD_INT 17
17018: ST_TO_ADDR
// hc_gallery :=  ;
17019: LD_ADDR_OWVAR 33
17023: PUSH
17024: LD_STRING 
17026: ST_TO_ADDR
// hc_name :=  ;
17027: LD_ADDR_OWVAR 26
17031: PUSH
17032: LD_STRING 
17034: ST_TO_ADDR
// un := CreateHuman ;
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: CALL_OW 44
17044: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17045: LD_VAR 0 2
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 51
// tmp := tmp ^ un ;
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_VAR 0 3
17066: PUSH
17067: LD_VAR 0 2
17071: ADD
17072: ST_TO_ADDR
// end ;
17073: GO 16969
17075: POP
17076: POP
// repeat wait ( 0 0$1 ) ;
17077: LD_INT 35
17079: PPUSH
17080: CALL_OW 67
// for un in tmp do
17084: LD_ADDR_VAR 0 2
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: FOR_IN
17095: IFFALSE 17169
// begin if IsDead ( un ) then
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 301
17106: IFFALSE 17126
// begin tmp := tmp diff un ;
17108: LD_ADDR_VAR 0 3
17112: PUSH
17113: LD_VAR 0 3
17117: PUSH
17118: LD_VAR 0 2
17122: DIFF
17123: ST_TO_ADDR
// continue ;
17124: GO 17094
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_INT 3
17133: PUSH
17134: LD_INT 22
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PPUSH
17148: CALL_OW 69
17152: PPUSH
17153: LD_VAR 0 2
17157: PPUSH
17158: CALL_OW 74
17162: PPUSH
17163: CALL_OW 115
// end ;
17167: GO 17094
17169: POP
17170: POP
// until not tmp ;
17171: LD_VAR 0 3
17175: NOT
17176: IFFALSE 17077
// end ;
17178: PPOPN 3
17180: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17181: LD_EXP 43
17185: PUSH
17186: LD_EXP 68
17190: AND
17191: IFFALSE 17245
17193: GO 17195
17195: DISABLE
// begin ToLua ( displayTroll(); ) ;
17196: LD_STRING displayTroll();
17198: PPUSH
17199: CALL_OW 559
// wait ( 3 3$00 ) ;
17203: LD_INT 6300
17205: PPUSH
17206: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17210: LD_STRING hideTroll();
17212: PPUSH
17213: CALL_OW 559
// wait ( 1 1$00 ) ;
17217: LD_INT 2100
17219: PPUSH
17220: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17224: LD_STRING displayTroll();
17226: PPUSH
17227: CALL_OW 559
// wait ( 1 1$00 ) ;
17231: LD_INT 2100
17233: PPUSH
17234: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17238: LD_STRING hideTroll();
17240: PPUSH
17241: CALL_OW 559
// end ;
17245: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17246: LD_EXP 43
17250: PUSH
17251: LD_EXP 69
17255: AND
17256: IFFALSE 17319
17258: GO 17260
17260: DISABLE
17261: LD_INT 0
17263: PPUSH
// begin p := 0 ;
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// repeat game_speed := 1 ;
17272: LD_ADDR_OWVAR 65
17276: PUSH
17277: LD_INT 1
17279: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17280: LD_INT 35
17282: PPUSH
17283: CALL_OW 67
// p := p + 1 ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_VAR 0 1
17296: PUSH
17297: LD_INT 1
17299: PLUS
17300: ST_TO_ADDR
// until p >= 60 ;
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 60
17308: GREATEREQUAL
17309: IFFALSE 17272
// game_speed := 4 ;
17311: LD_ADDR_OWVAR 65
17315: PUSH
17316: LD_INT 4
17318: ST_TO_ADDR
// end ;
17319: PPOPN 1
17321: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17322: LD_EXP 43
17326: PUSH
17327: LD_EXP 70
17331: AND
17332: IFFALSE 17478
17334: GO 17336
17336: DISABLE
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17341: LD_ADDR_VAR 0 1
17345: PUSH
17346: LD_INT 22
17348: PUSH
17349: LD_OWVAR 2
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 30
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 69
17394: ST_TO_ADDR
// if not depot then
17395: LD_VAR 0 1
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17478
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17404: LD_ADDR_VAR 0 2
17408: PUSH
17409: LD_VAR 0 1
17413: PUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: PPUSH
17428: CALL_OW 274
17432: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: LD_INT 0
17443: PPUSH
17444: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_INT 2
17455: PPUSH
17456: LD_INT 0
17458: PPUSH
17459: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17463: LD_VAR 0 2
17467: PPUSH
17468: LD_INT 3
17470: PPUSH
17471: LD_INT 0
17473: PPUSH
17474: CALL_OW 277
// end ;
17478: PPOPN 2
17480: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17481: LD_EXP 43
17485: PUSH
17486: LD_EXP 71
17490: AND
17491: IFFALSE 17588
17493: GO 17495
17495: DISABLE
17496: LD_INT 0
17498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_OWVAR 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: LD_INT 23
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 69
17552: ST_TO_ADDR
// if not tmp then
17553: LD_VAR 0 1
17557: NOT
17558: IFFALSE 17562
// exit ;
17560: GO 17588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17562: LD_VAR 0 1
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 12
17579: ARRAY
17580: PPUSH
17581: LD_INT 200
17583: PPUSH
17584: CALL_OW 234
// end ;
17588: PPOPN 1
17590: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17591: LD_EXP 43
17595: PUSH
17596: LD_EXP 72
17600: AND
17601: IFFALSE 17680
17603: GO 17605
17605: DISABLE
17606: LD_INT 0
17608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17609: LD_ADDR_VAR 0 1
17613: PUSH
17614: LD_INT 22
17616: PUSH
17617: LD_OWVAR 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 21
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: ST_TO_ADDR
// if not tmp then
17645: LD_VAR 0 1
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 17680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17654: LD_VAR 0 1
17658: PUSH
17659: LD_INT 1
17661: PPUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 12
17671: ARRAY
17672: PPUSH
17673: LD_INT 60
17675: PPUSH
17676: CALL_OW 234
// end ;
17680: PPOPN 1
17682: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17683: LD_EXP 43
17687: PUSH
17688: LD_EXP 73
17692: AND
17693: IFFALSE 17792
17695: GO 17697
17697: DISABLE
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
// begin enable ;
17702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17703: LD_ADDR_VAR 0 1
17707: PUSH
17708: LD_INT 22
17710: PUSH
17711: LD_OWVAR 2
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 61
17722: PUSH
17723: EMPTY
17724: LIST
17725: PUSH
17726: LD_INT 33
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 1
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17792
// for i in tmp do
17755: LD_ADDR_VAR 0 2
17759: PUSH
17760: LD_VAR 0 1
17764: PUSH
17765: FOR_IN
17766: IFFALSE 17790
// if IsControledBy ( i ) then
17768: LD_VAR 0 2
17772: PPUSH
17773: CALL_OW 312
17777: IFFALSE 17788
// ComUnlink ( i ) ;
17779: LD_VAR 0 2
17783: PPUSH
17784: CALL_OW 136
17788: GO 17765
17790: POP
17791: POP
// end ;
17792: PPOPN 2
17794: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17795: LD_EXP 43
17799: PUSH
17800: LD_EXP 74
17804: AND
17805: IFFALSE 17945
17807: GO 17809
17809: DISABLE
17810: LD_INT 0
17812: PPUSH
17813: PPUSH
// begin ToLua ( displayPowell(); ) ;
17814: LD_STRING displayPowell();
17816: PPUSH
17817: CALL_OW 559
// uc_side := 0 ;
17821: LD_ADDR_OWVAR 20
17825: PUSH
17826: LD_INT 0
17828: ST_TO_ADDR
// uc_nation := 2 ;
17829: LD_ADDR_OWVAR 21
17833: PUSH
17834: LD_INT 2
17836: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17837: LD_ADDR_OWVAR 37
17841: PUSH
17842: LD_INT 14
17844: ST_TO_ADDR
// vc_engine := engine_siberite ;
17845: LD_ADDR_OWVAR 39
17849: PUSH
17850: LD_INT 3
17852: ST_TO_ADDR
// vc_control := control_apeman ;
17853: LD_ADDR_OWVAR 38
17857: PUSH
17858: LD_INT 5
17860: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17861: LD_ADDR_OWVAR 40
17865: PUSH
17866: LD_INT 29
17868: ST_TO_ADDR
// un := CreateVehicle ;
17869: LD_ADDR_VAR 0 2
17873: PUSH
17874: CALL_OW 45
17878: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_INT 1
17886: PPUSH
17887: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17891: LD_INT 35
17893: PPUSH
17894: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17898: LD_VAR 0 2
17902: PPUSH
17903: LD_INT 22
17905: PUSH
17906: LD_OWVAR 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PPUSH
17915: CALL_OW 69
17919: PPUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: CALL_OW 74
17929: PPUSH
17930: CALL_OW 115
// until IsDead ( un ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: CALL_OW 301
17943: IFFALSE 17891
// end ;
17945: PPOPN 2
17947: END
// every 0 0$1 trigger StreamModeActive and sStu do
17948: LD_EXP 43
17952: PUSH
17953: LD_EXP 82
17957: AND
17958: IFFALSE 17974
17960: GO 17962
17962: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17963: LD_STRING displayStucuk();
17965: PPUSH
17966: CALL_OW 559
// ResetFog ;
17970: CALL_OW 335
// end ;
17974: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17975: LD_EXP 43
17979: PUSH
17980: LD_EXP 75
17984: AND
17985: IFFALSE 18126
17987: GO 17989
17989: DISABLE
17990: LD_INT 0
17992: PPUSH
17993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17994: LD_ADDR_VAR 0 2
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_OWVAR 2
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 21
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// if not tmp then
18030: LD_VAR 0 2
18034: NOT
18035: IFFALSE 18039
// exit ;
18037: GO 18126
// un := tmp [ rand ( 1 , tmp ) ] ;
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_VAR 0 2
18048: PUSH
18049: LD_INT 1
18051: PPUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: CALL_OW 12
18061: ARRAY
18062: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_INT 0
18070: PPUSH
18071: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18075: LD_VAR 0 1
18079: PPUSH
18080: LD_OWVAR 3
18084: PUSH
18085: LD_VAR 0 1
18089: DIFF
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 115
// wait ( 0 0$20 ) ;
18105: LD_INT 700
18107: PPUSH
18108: CALL_OW 67
// SetSide ( un , your_side ) ;
18112: LD_VAR 0 1
18116: PPUSH
18117: LD_OWVAR 2
18121: PPUSH
18122: CALL_OW 235
// end ;
18126: PPOPN 2
18128: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18129: LD_EXP 43
18133: PUSH
18134: LD_EXP 76
18138: AND
18139: IFFALSE 18245
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18147: LD_ADDR_VAR 0 1
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_OWVAR 2
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 30
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 30
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PPUSH
18196: CALL_OW 69
18200: ST_TO_ADDR
// if not depot then
18201: LD_VAR 0 1
18205: NOT
18206: IFFALSE 18210
// exit ;
18208: GO 18245
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18210: LD_VAR 0 1
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PPUSH
18219: CALL_OW 250
18223: PPUSH
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 1
18231: ARRAY
18232: PPUSH
18233: CALL_OW 251
18237: PPUSH
18238: LD_INT 70
18240: PPUSH
18241: CALL_OW 495
// end ;
18245: PPOPN 1
18247: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18248: LD_EXP 43
18252: PUSH
18253: LD_EXP 77
18257: AND
18258: IFFALSE 18469
18260: GO 18262
18262: DISABLE
18263: LD_INT 0
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18270: LD_ADDR_VAR 0 5
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_OWVAR 2
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 21
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: ST_TO_ADDR
// if not tmp then
18306: LD_VAR 0 5
18310: NOT
18311: IFFALSE 18315
// exit ;
18313: GO 18469
// for i in tmp do
18315: LD_ADDR_VAR 0 1
18319: PUSH
18320: LD_VAR 0 5
18324: PUSH
18325: FOR_IN
18326: IFFALSE 18467
// begin d := rand ( 0 , 5 ) ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: PPUSH
18336: LD_INT 5
18338: PPUSH
18339: CALL_OW 12
18343: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18344: LD_ADDR_VAR 0 2
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 250
18358: PPUSH
18359: LD_VAR 0 4
18363: PPUSH
18364: LD_INT 3
18366: PPUSH
18367: LD_INT 12
18369: PPUSH
18370: CALL_OW 12
18374: PPUSH
18375: CALL_OW 272
18379: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18380: LD_ADDR_VAR 0 3
18384: PUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 251
18394: PPUSH
18395: LD_VAR 0 4
18399: PPUSH
18400: LD_INT 3
18402: PPUSH
18403: LD_INT 12
18405: PPUSH
18406: CALL_OW 12
18410: PPUSH
18411: CALL_OW 273
18415: ST_TO_ADDR
// if ValidHex ( x , y ) then
18416: LD_VAR 0 2
18420: PPUSH
18421: LD_VAR 0 3
18425: PPUSH
18426: CALL_OW 488
18430: IFFALSE 18465
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18432: LD_VAR 0 1
18436: PPUSH
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_VAR 0 3
18446: PPUSH
18447: LD_INT 3
18449: PPUSH
18450: LD_INT 6
18452: PPUSH
18453: CALL_OW 12
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 483
// end ;
18465: GO 18325
18467: POP
18468: POP
// end ;
18469: PPOPN 5
18471: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18472: LD_EXP 43
18476: PUSH
18477: LD_EXP 78
18481: AND
18482: IFFALSE 18576
18484: GO 18486
18486: DISABLE
18487: LD_INT 0
18489: PPUSH
18490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_INT 22
18498: PUSH
18499: LD_OWVAR 2
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 32
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 21
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 69
18537: ST_TO_ADDR
// if not tmp then
18538: LD_VAR 0 2
18542: NOT
18543: IFFALSE 18547
// exit ;
18545: GO 18576
// for i in tmp do
18547: LD_ADDR_VAR 0 1
18551: PUSH
18552: LD_VAR 0 2
18556: PUSH
18557: FOR_IN
18558: IFFALSE 18574
// SetFuel ( i , 0 ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_INT 0
18567: PPUSH
18568: CALL_OW 240
18572: GO 18557
18574: POP
18575: POP
// end ;
18576: PPOPN 2
18578: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18579: LD_EXP 43
18583: PUSH
18584: LD_EXP 79
18588: AND
18589: IFFALSE 18655
18591: GO 18593
18593: DISABLE
18594: LD_INT 0
18596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 30
18616: PUSH
18617: LD_INT 29
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: ST_TO_ADDR
// if not tmp then
18633: LD_VAR 0 1
18637: NOT
18638: IFFALSE 18642
// exit ;
18640: GO 18655
// DestroyUnit ( tmp [ 1 ] ) ;
18642: LD_VAR 0 1
18646: PUSH
18647: LD_INT 1
18649: ARRAY
18650: PPUSH
18651: CALL_OW 65
// end ;
18655: PPOPN 1
18657: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18658: LD_EXP 43
18662: PUSH
18663: LD_EXP 81
18667: AND
18668: IFFALSE 18797
18670: GO 18672
18672: DISABLE
18673: LD_INT 0
18675: PPUSH
// begin uc_side := 0 ;
18676: LD_ADDR_OWVAR 20
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// uc_nation := nation_arabian ;
18684: LD_ADDR_OWVAR 21
18688: PUSH
18689: LD_INT 2
18691: ST_TO_ADDR
// hc_gallery :=  ;
18692: LD_ADDR_OWVAR 33
18696: PUSH
18697: LD_STRING 
18699: ST_TO_ADDR
// hc_name :=  ;
18700: LD_ADDR_OWVAR 26
18704: PUSH
18705: LD_STRING 
18707: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18708: LD_INT 1
18710: PPUSH
18711: LD_INT 11
18713: PPUSH
18714: LD_INT 10
18716: PPUSH
18717: CALL_OW 380
// un := CreateHuman ;
18721: LD_ADDR_VAR 0 1
18725: PUSH
18726: CALL_OW 44
18730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18731: LD_VAR 0 1
18735: PPUSH
18736: LD_INT 1
18738: PPUSH
18739: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18743: LD_INT 35
18745: PPUSH
18746: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18750: LD_VAR 0 1
18754: PPUSH
18755: LD_INT 22
18757: PUSH
18758: LD_OWVAR 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: CALL_OW 69
18771: PPUSH
18772: LD_VAR 0 1
18776: PPUSH
18777: CALL_OW 74
18781: PPUSH
18782: CALL_OW 115
// until IsDead ( un ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: CALL_OW 301
18795: IFFALSE 18743
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18800: LD_EXP 43
18804: PUSH
18805: LD_EXP 83
18809: AND
18810: IFFALSE 18822
18812: GO 18814
18814: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18815: LD_STRING earthquake(getX(game), 0, 32)
18817: PPUSH
18818: CALL_OW 559
18822: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18823: LD_EXP 43
18827: PUSH
18828: LD_EXP 84
18832: AND
18833: IFFALSE 18924
18835: GO 18837
18837: DISABLE
18838: LD_INT 0
18840: PPUSH
// begin enable ;
18841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18842: LD_ADDR_VAR 0 1
18846: PUSH
18847: LD_INT 22
18849: PUSH
18850: LD_OWVAR 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 21
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 33
18871: PUSH
18872: LD_INT 3
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: PPUSH
18884: CALL_OW 69
18888: ST_TO_ADDR
// if not tmp then
18889: LD_VAR 0 1
18893: NOT
18894: IFFALSE 18898
// exit ;
18896: GO 18924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18898: LD_VAR 0 1
18902: PUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_VAR 0 1
18910: PPUSH
18911: CALL_OW 12
18915: ARRAY
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 234
// end ;
18924: PPOPN 1
18926: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18927: LD_EXP 43
18931: PUSH
18932: LD_EXP 85
18936: AND
18937: IFFALSE 19078
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_OWVAR 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 25
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 69
18982: ST_TO_ADDR
// if not tmp then
18983: LD_VAR 0 3
18987: NOT
18988: IFFALSE 18992
// exit ;
18990: GO 19078
// un := tmp [ rand ( 1 , tmp ) ] ;
18992: LD_ADDR_VAR 0 2
18996: PUSH
18997: LD_VAR 0 3
19001: PUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_VAR 0 3
19009: PPUSH
19010: CALL_OW 12
19014: ARRAY
19015: ST_TO_ADDR
// if Crawls ( un ) then
19016: LD_VAR 0 2
19020: PPUSH
19021: CALL_OW 318
19025: IFFALSE 19036
// ComWalk ( un ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_INT 9
19043: PPUSH
19044: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19048: LD_INT 28
19050: PPUSH
19051: LD_OWVAR 2
19055: PPUSH
19056: LD_INT 2
19058: PPUSH
19059: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19063: LD_INT 29
19065: PPUSH
19066: LD_OWVAR 2
19070: PPUSH
19071: LD_INT 2
19073: PPUSH
19074: CALL_OW 322
// end ;
19078: PPOPN 3
19080: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19081: LD_EXP 43
19085: PUSH
19086: LD_EXP 86
19090: AND
19091: IFFALSE 19202
19093: GO 19095
19095: DISABLE
19096: LD_INT 0
19098: PPUSH
19099: PPUSH
19100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: ST_TO_ADDR
// if not tmp then
19137: LD_VAR 0 3
19141: NOT
19142: IFFALSE 19146
// exit ;
19144: GO 19202
// un := tmp [ rand ( 1 , tmp ) ] ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 1
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 12
19168: ARRAY
19169: ST_TO_ADDR
// if Crawls ( un ) then
19170: LD_VAR 0 2
19174: PPUSH
19175: CALL_OW 318
19179: IFFALSE 19190
// ComWalk ( un ) ;
19181: LD_VAR 0 2
19185: PPUSH
19186: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: LD_INT 8
19197: PPUSH
19198: CALL_OW 336
// end ;
19202: PPOPN 3
19204: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19205: LD_EXP 43
19209: PUSH
19210: LD_EXP 87
19214: AND
19215: IFFALSE 19359
19217: GO 19219
19219: DISABLE
19220: LD_INT 0
19222: PPUSH
19223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19224: LD_ADDR_VAR 0 2
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_OWVAR 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 21
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: LD_INT 34
19256: PUSH
19257: LD_INT 12
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 34
19266: PUSH
19267: LD_INT 51
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 34
19276: PUSH
19277: LD_INT 32
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: PPUSH
19295: CALL_OW 69
19299: ST_TO_ADDR
// if not tmp then
19300: LD_VAR 0 2
19304: NOT
19305: IFFALSE 19309
// exit ;
19307: GO 19359
// for i in tmp do
19309: LD_ADDR_VAR 0 1
19313: PUSH
19314: LD_VAR 0 2
19318: PUSH
19319: FOR_IN
19320: IFFALSE 19357
// if GetCargo ( i , mat_artifact ) = 0 then
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_INT 4
19329: PPUSH
19330: CALL_OW 289
19334: PUSH
19335: LD_INT 0
19337: EQUAL
19338: IFFALSE 19355
// SetCargo ( i , mat_siberit , 100 ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_INT 3
19347: PPUSH
19348: LD_INT 100
19350: PPUSH
19351: CALL_OW 290
19355: GO 19319
19357: POP
19358: POP
// end ;
19359: PPOPN 2
19361: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19362: LD_EXP 43
19366: PUSH
19367: LD_EXP 88
19371: AND
19372: IFFALSE 19555
19374: GO 19376
19376: DISABLE
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: ST_TO_ADDR
// if not tmp then
19403: LD_VAR 0 2
19407: NOT
19408: IFFALSE 19412
// exit ;
19410: GO 19555
// for i := 1 to 2 do
19412: LD_ADDR_VAR 0 1
19416: PUSH
19417: DOUBLE
19418: LD_INT 1
19420: DEC
19421: ST_TO_ADDR
19422: LD_INT 2
19424: PUSH
19425: FOR_TO
19426: IFFALSE 19553
// begin uc_side := your_side ;
19428: LD_ADDR_OWVAR 20
19432: PUSH
19433: LD_OWVAR 2
19437: ST_TO_ADDR
// uc_nation := nation_american ;
19438: LD_ADDR_OWVAR 21
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// vc_chassis := us_morphling ;
19446: LD_ADDR_OWVAR 37
19450: PUSH
19451: LD_INT 5
19453: ST_TO_ADDR
// vc_engine := engine_siberite ;
19454: LD_ADDR_OWVAR 39
19458: PUSH
19459: LD_INT 3
19461: ST_TO_ADDR
// vc_control := control_computer ;
19462: LD_ADDR_OWVAR 38
19466: PUSH
19467: LD_INT 3
19469: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19470: LD_ADDR_OWVAR 40
19474: PUSH
19475: LD_INT 10
19477: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19478: LD_VAR 0 2
19482: PUSH
19483: LD_INT 1
19485: ARRAY
19486: PPUSH
19487: CALL_OW 310
19491: NOT
19492: IFFALSE 19539
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19494: CALL_OW 45
19498: PPUSH
19499: LD_VAR 0 2
19503: PUSH
19504: LD_INT 1
19506: ARRAY
19507: PPUSH
19508: CALL_OW 250
19512: PPUSH
19513: LD_VAR 0 2
19517: PUSH
19518: LD_INT 1
19520: ARRAY
19521: PPUSH
19522: CALL_OW 251
19526: PPUSH
19527: LD_INT 12
19529: PPUSH
19530: LD_INT 1
19532: PPUSH
19533: CALL_OW 50
19537: GO 19551
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19539: CALL_OW 45
19543: PPUSH
19544: LD_INT 1
19546: PPUSH
19547: CALL_OW 51
// end ;
19551: GO 19425
19553: POP
19554: POP
// end ;
19555: PPOPN 2
19557: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19558: LD_EXP 43
19562: PUSH
19563: LD_EXP 89
19567: AND
19568: IFFALSE 19790
19570: GO 19572
19572: DISABLE
19573: LD_INT 0
19575: PPUSH
19576: PPUSH
19577: PPUSH
19578: PPUSH
19579: PPUSH
19580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19581: LD_ADDR_VAR 0 6
19585: PUSH
19586: LD_INT 22
19588: PUSH
19589: LD_OWVAR 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 21
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 3
19610: PUSH
19611: LD_INT 23
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: PPUSH
19630: CALL_OW 69
19634: ST_TO_ADDR
// if not tmp then
19635: LD_VAR 0 6
19639: NOT
19640: IFFALSE 19644
// exit ;
19642: GO 19790
// s1 := rand ( 1 , 4 ) ;
19644: LD_ADDR_VAR 0 2
19648: PUSH
19649: LD_INT 1
19651: PPUSH
19652: LD_INT 4
19654: PPUSH
19655: CALL_OW 12
19659: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: LD_VAR 0 6
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: PPUSH
19674: LD_VAR 0 2
19678: PPUSH
19679: CALL_OW 259
19683: ST_TO_ADDR
// if s1 = 1 then
19684: LD_VAR 0 2
19688: PUSH
19689: LD_INT 1
19691: EQUAL
19692: IFFALSE 19712
// s2 := rand ( 2 , 4 ) else
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: LD_INT 2
19701: PPUSH
19702: LD_INT 4
19704: PPUSH
19705: CALL_OW 12
19709: ST_TO_ADDR
19710: GO 19720
// s2 := 1 ;
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: LD_VAR 0 6
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: PPUSH
19734: LD_VAR 0 3
19738: PPUSH
19739: CALL_OW 259
19743: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19744: LD_VAR 0 6
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: PPUSH
19753: LD_VAR 0 2
19757: PPUSH
19758: LD_VAR 0 5
19762: PPUSH
19763: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19767: LD_VAR 0 6
19771: PUSH
19772: LD_INT 1
19774: ARRAY
19775: PPUSH
19776: LD_VAR 0 3
19780: PPUSH
19781: LD_VAR 0 4
19785: PPUSH
19786: CALL_OW 237
// end ;
19790: PPOPN 6
19792: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19793: LD_EXP 43
19797: PUSH
19798: LD_EXP 90
19802: AND
19803: IFFALSE 19882
19805: GO 19807
19807: DISABLE
19808: LD_INT 0
19810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19811: LD_ADDR_VAR 0 1
19815: PUSH
19816: LD_INT 22
19818: PUSH
19819: LD_OWVAR 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 3
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: ST_TO_ADDR
// if not tmp then
19847: LD_VAR 0 1
19851: NOT
19852: IFFALSE 19856
// exit ;
19854: GO 19882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19856: LD_VAR 0 1
19860: PUSH
19861: LD_INT 1
19863: PPUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 12
19873: ARRAY
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: CALL_OW 234
// end ;
19882: PPOPN 1
19884: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19885: LD_EXP 43
19889: PUSH
19890: LD_EXP 91
19894: AND
19895: IFFALSE 20007
19897: GO 19899
19899: DISABLE
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19904: LD_ADDR_VAR 0 2
19908: PUSH
19909: LD_INT 22
19911: PUSH
19912: LD_OWVAR 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 27
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 30
19936: PUSH
19937: LD_INT 26
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 30
19946: PUSH
19947: LD_INT 28
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL_OW 69
19968: ST_TO_ADDR
// if not tmp then
19969: LD_VAR 0 2
19973: NOT
19974: IFFALSE 19978
// exit ;
19976: GO 20007
// for i in tmp do
19978: LD_ADDR_VAR 0 1
19982: PUSH
19983: LD_VAR 0 2
19987: PUSH
19988: FOR_IN
19989: IFFALSE 20005
// SetLives ( i , 1 ) ;
19991: LD_VAR 0 1
19995: PPUSH
19996: LD_INT 1
19998: PPUSH
19999: CALL_OW 234
20003: GO 19988
20005: POP
20006: POP
// end ;
20007: PPOPN 2
20009: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20010: LD_EXP 43
20014: PUSH
20015: LD_EXP 92
20019: AND
20020: IFFALSE 20294
20022: GO 20024
20024: DISABLE
20025: LD_INT 0
20027: PPUSH
20028: PPUSH
20029: PPUSH
// begin i := rand ( 1 , 7 ) ;
20030: LD_ADDR_VAR 0 1
20034: PUSH
20035: LD_INT 1
20037: PPUSH
20038: LD_INT 7
20040: PPUSH
20041: CALL_OW 12
20045: ST_TO_ADDR
// case i of 1 :
20046: LD_VAR 0 1
20050: PUSH
20051: LD_INT 1
20053: DOUBLE
20054: EQUAL
20055: IFTRUE 20059
20057: GO 20069
20059: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20060: LD_STRING earthquake(getX(game), 0, 32)
20062: PPUSH
20063: CALL_OW 559
20067: GO 20294
20069: LD_INT 2
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20091
20077: POP
// begin ToLua ( displayStucuk(); ) ;
20078: LD_STRING displayStucuk();
20080: PPUSH
20081: CALL_OW 559
// ResetFog ;
20085: CALL_OW 335
// end ; 3 :
20089: GO 20294
20091: LD_INT 3
20093: DOUBLE
20094: EQUAL
20095: IFTRUE 20099
20097: GO 20203
20099: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20100: LD_ADDR_VAR 0 2
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_OWVAR 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 25
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 69
20135: ST_TO_ADDR
// if not tmp then
20136: LD_VAR 0 2
20140: NOT
20141: IFFALSE 20145
// exit ;
20143: GO 20294
// un := tmp [ rand ( 1 , tmp ) ] ;
20145: LD_ADDR_VAR 0 3
20149: PUSH
20150: LD_VAR 0 2
20154: PUSH
20155: LD_INT 1
20157: PPUSH
20158: LD_VAR 0 2
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: ST_TO_ADDR
// if Crawls ( un ) then
20169: LD_VAR 0 3
20173: PPUSH
20174: CALL_OW 318
20178: IFFALSE 20189
// ComWalk ( un ) ;
20180: LD_VAR 0 3
20184: PPUSH
20185: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20189: LD_VAR 0 3
20193: PPUSH
20194: LD_INT 8
20196: PPUSH
20197: CALL_OW 336
// end ; 4 :
20201: GO 20294
20203: LD_INT 4
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20272
20211: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_INT 22
20219: PUSH
20220: LD_OWVAR 2
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 30
20231: PUSH
20232: LD_INT 29
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PPUSH
20243: CALL_OW 69
20247: ST_TO_ADDR
// if not tmp then
20248: LD_VAR 0 2
20252: NOT
20253: IFFALSE 20257
// exit ;
20255: GO 20294
// DestroyUnit ( tmp [ 1 ] ) ;
20257: LD_VAR 0 2
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PPUSH
20266: CALL_OW 65
// end ; 5 .. 7 :
20270: GO 20294
20272: LD_INT 5
20274: DOUBLE
20275: GREATEREQUAL
20276: IFFALSE 20284
20278: LD_INT 7
20280: DOUBLE
20281: LESSEQUAL
20282: IFTRUE 20286
20284: GO 20293
20286: POP
// StreamSibBomb ; end ;
20287: CALL 16544 0 0
20291: GO 20294
20293: POP
// end ;
20294: PPOPN 3
20296: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20297: LD_EXP 43
20301: PUSH
20302: LD_EXP 93
20306: AND
20307: IFFALSE 20463
20309: GO 20311
20311: DISABLE
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
20316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20317: LD_ADDR_VAR 0 2
20321: PUSH
20322: LD_INT 81
20324: PUSH
20325: LD_OWVAR 2
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 21
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 21
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PPUSH
20366: CALL_OW 69
20370: ST_TO_ADDR
// if not tmp then
20371: LD_VAR 0 2
20375: NOT
20376: IFFALSE 20380
// exit ;
20378: GO 20463
// p := 0 ;
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20388: LD_INT 35
20390: PPUSH
20391: CALL_OW 67
// p := p + 1 ;
20395: LD_ADDR_VAR 0 3
20399: PUSH
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 1
20407: PLUS
20408: ST_TO_ADDR
// for i in tmp do
20409: LD_ADDR_VAR 0 1
20413: PUSH
20414: LD_VAR 0 2
20418: PUSH
20419: FOR_IN
20420: IFFALSE 20451
// if GetLives ( i ) < 1000 then
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 256
20431: PUSH
20432: LD_INT 1000
20434: LESS
20435: IFFALSE 20449
// SetLives ( i , 1000 ) ;
20437: LD_VAR 0 1
20441: PPUSH
20442: LD_INT 1000
20444: PPUSH
20445: CALL_OW 234
20449: GO 20419
20451: POP
20452: POP
// until p > 20 ;
20453: LD_VAR 0 3
20457: PUSH
20458: LD_INT 20
20460: GREATER
20461: IFFALSE 20388
// end ;
20463: PPOPN 3
20465: END
// every 0 0$1 trigger StreamModeActive and sTime do
20466: LD_EXP 43
20470: PUSH
20471: LD_EXP 94
20475: AND
20476: IFFALSE 20511
20478: GO 20480
20480: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20481: LD_INT 28
20483: PPUSH
20484: LD_OWVAR 2
20488: PPUSH
20489: LD_INT 2
20491: PPUSH
20492: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20496: LD_INT 30
20498: PPUSH
20499: LD_OWVAR 2
20503: PPUSH
20504: LD_INT 2
20506: PPUSH
20507: CALL_OW 322
// end ;
20511: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20512: LD_EXP 43
20516: PUSH
20517: LD_EXP 95
20521: AND
20522: IFFALSE 20643
20524: GO 20526
20526: DISABLE
20527: LD_INT 0
20529: PPUSH
20530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20531: LD_ADDR_VAR 0 2
20535: PUSH
20536: LD_INT 22
20538: PUSH
20539: LD_OWVAR 2
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 21
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 3
20560: PUSH
20561: LD_INT 23
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 69
20584: ST_TO_ADDR
// if not tmp then
20585: LD_VAR 0 2
20589: NOT
20590: IFFALSE 20594
// exit ;
20592: GO 20643
// for i in tmp do
20594: LD_ADDR_VAR 0 1
20598: PUSH
20599: LD_VAR 0 2
20603: PUSH
20604: FOR_IN
20605: IFFALSE 20641
// begin if Crawls ( i ) then
20607: LD_VAR 0 1
20611: PPUSH
20612: CALL_OW 318
20616: IFFALSE 20627
// ComWalk ( i ) ;
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 138
// SetClass ( i , 2 ) ;
20627: LD_VAR 0 1
20631: PPUSH
20632: LD_INT 2
20634: PPUSH
20635: CALL_OW 336
// end ;
20639: GO 20604
20641: POP
20642: POP
// end ;
20643: PPOPN 2
20645: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20646: LD_EXP 43
20650: PUSH
20651: LD_EXP 96
20655: AND
20656: IFFALSE 20937
20658: GO 20660
20660: DISABLE
20661: LD_INT 0
20663: PPUSH
20664: PPUSH
20665: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20666: LD_OWVAR 2
20670: PPUSH
20671: LD_INT 9
20673: PPUSH
20674: LD_INT 1
20676: PPUSH
20677: LD_INT 1
20679: PPUSH
20680: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20684: LD_INT 9
20686: PPUSH
20687: LD_OWVAR 2
20691: PPUSH
20692: CALL_OW 343
// uc_side := 9 ;
20696: LD_ADDR_OWVAR 20
20700: PUSH
20701: LD_INT 9
20703: ST_TO_ADDR
// uc_nation := 2 ;
20704: LD_ADDR_OWVAR 21
20708: PUSH
20709: LD_INT 2
20711: ST_TO_ADDR
// hc_name := Dark Warrior ;
20712: LD_ADDR_OWVAR 26
20716: PUSH
20717: LD_STRING Dark Warrior
20719: ST_TO_ADDR
// hc_gallery :=  ;
20720: LD_ADDR_OWVAR 33
20724: PUSH
20725: LD_STRING 
20727: ST_TO_ADDR
// hc_noskilllimit := true ;
20728: LD_ADDR_OWVAR 76
20732: PUSH
20733: LD_INT 1
20735: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20736: LD_ADDR_OWVAR 31
20740: PUSH
20741: LD_INT 30
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 30
20749: PUSH
20750: LD_INT 30
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: ST_TO_ADDR
// un := CreateHuman ;
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: CALL_OW 44
20768: ST_TO_ADDR
// hc_noskilllimit := false ;
20769: LD_ADDR_OWVAR 76
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20777: LD_VAR 0 3
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 51
// p := 0 ;
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_INT 0
20796: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20797: LD_INT 35
20799: PPUSH
20800: CALL_OW 67
// p := p + 1 ;
20804: LD_ADDR_VAR 0 2
20808: PUSH
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 1
20816: PLUS
20817: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20818: LD_VAR 0 3
20822: PPUSH
20823: CALL_OW 256
20827: PUSH
20828: LD_INT 1000
20830: LESS
20831: IFFALSE 20845
// SetLives ( un , 1000 ) ;
20833: LD_VAR 0 3
20837: PPUSH
20838: LD_INT 1000
20840: PPUSH
20841: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20845: LD_VAR 0 3
20849: PPUSH
20850: LD_INT 81
20852: PUSH
20853: LD_OWVAR 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 91
20864: PUSH
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 30
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: PPUSH
20887: LD_VAR 0 3
20891: PPUSH
20892: CALL_OW 74
20896: PPUSH
20897: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20901: LD_VAR 0 2
20905: PUSH
20906: LD_INT 60
20908: GREATER
20909: PUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: CALL_OW 301
20919: OR
20920: IFFALSE 20797
// if un then
20922: LD_VAR 0 3
20926: IFFALSE 20937
// RemoveUnit ( un ) ;
20928: LD_VAR 0 3
20932: PPUSH
20933: CALL_OW 64
// end ;
20937: PPOPN 3
20939: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20940: LD_INT 0
20942: PPUSH
// case cmd of 301 :
20943: LD_VAR 0 1
20947: PUSH
20948: LD_INT 301
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20988
20956: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20957: LD_VAR 0 6
20961: PPUSH
20962: LD_VAR 0 7
20966: PPUSH
20967: LD_VAR 0 8
20971: PPUSH
20972: LD_VAR 0 4
20976: PPUSH
20977: LD_VAR 0 5
20981: PPUSH
20982: CALL 22189 0 5
20986: GO 21109
20988: LD_INT 302
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21033
20996: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20997: LD_VAR 0 6
21001: PPUSH
21002: LD_VAR 0 7
21006: PPUSH
21007: LD_VAR 0 8
21011: PPUSH
21012: LD_VAR 0 9
21016: PPUSH
21017: LD_VAR 0 4
21021: PPUSH
21022: LD_VAR 0 5
21026: PPUSH
21027: CALL 22280 0 6
21031: GO 21109
21033: LD_INT 303
21035: DOUBLE
21036: EQUAL
21037: IFTRUE 21041
21039: GO 21078
21041: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21042: LD_VAR 0 6
21046: PPUSH
21047: LD_VAR 0 7
21051: PPUSH
21052: LD_VAR 0 8
21056: PPUSH
21057: LD_VAR 0 9
21061: PPUSH
21062: LD_VAR 0 4
21066: PPUSH
21067: LD_VAR 0 5
21071: PPUSH
21072: CALL 21114 0 6
21076: GO 21109
21078: LD_INT 304
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21108
21086: POP
// hHackTeleport ( unit , x , y ) ; end ;
21087: LD_VAR 0 2
21091: PPUSH
21092: LD_VAR 0 4
21096: PPUSH
21097: LD_VAR 0 5
21101: PPUSH
21102: CALL 22873 0 3
21106: GO 21109
21108: POP
// end ;
21109: LD_VAR 0 12
21113: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21114: LD_INT 0
21116: PPUSH
21117: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21118: LD_VAR 0 1
21122: PUSH
21123: LD_INT 1
21125: LESS
21126: PUSH
21127: LD_VAR 0 1
21131: PUSH
21132: LD_INT 3
21134: GREATER
21135: OR
21136: PUSH
21137: LD_VAR 0 5
21141: PPUSH
21142: LD_VAR 0 6
21146: PPUSH
21147: CALL_OW 428
21151: OR
21152: IFFALSE 21156
// exit ;
21154: GO 21876
// uc_side := your_side ;
21156: LD_ADDR_OWVAR 20
21160: PUSH
21161: LD_OWVAR 2
21165: ST_TO_ADDR
// uc_nation := nation ;
21166: LD_ADDR_OWVAR 21
21170: PUSH
21171: LD_VAR 0 1
21175: ST_TO_ADDR
// bc_level = 1 ;
21176: LD_ADDR_OWVAR 43
21180: PUSH
21181: LD_INT 1
21183: ST_TO_ADDR
// case btype of 1 :
21184: LD_VAR 0 2
21188: PUSH
21189: LD_INT 1
21191: DOUBLE
21192: EQUAL
21193: IFTRUE 21197
21195: GO 21208
21197: POP
// bc_type := b_depot ; 2 :
21198: LD_ADDR_OWVAR 42
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
21206: GO 21820
21208: LD_INT 2
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21227
21216: POP
// bc_type := b_warehouse ; 3 :
21217: LD_ADDR_OWVAR 42
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
21225: GO 21820
21227: LD_INT 3
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21246
21235: POP
// bc_type := b_lab ; 4 .. 9 :
21236: LD_ADDR_OWVAR 42
21240: PUSH
21241: LD_INT 6
21243: ST_TO_ADDR
21244: GO 21820
21246: LD_INT 4
21248: DOUBLE
21249: GREATEREQUAL
21250: IFFALSE 21258
21252: LD_INT 9
21254: DOUBLE
21255: LESSEQUAL
21256: IFTRUE 21260
21258: GO 21312
21260: POP
// begin bc_type := b_lab_half ;
21261: LD_ADDR_OWVAR 42
21265: PUSH
21266: LD_INT 7
21268: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21269: LD_ADDR_OWVAR 44
21273: PUSH
21274: LD_INT 10
21276: PUSH
21277: LD_INT 11
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 15
21285: PUSH
21286: LD_INT 14
21288: PUSH
21289: LD_INT 13
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: LD_VAR 0 2
21304: PUSH
21305: LD_INT 3
21307: MINUS
21308: ARRAY
21309: ST_TO_ADDR
// end ; 10 .. 13 :
21310: GO 21820
21312: LD_INT 10
21314: DOUBLE
21315: GREATEREQUAL
21316: IFFALSE 21324
21318: LD_INT 13
21320: DOUBLE
21321: LESSEQUAL
21322: IFTRUE 21326
21324: GO 21403
21326: POP
// begin bc_type := b_lab_full ;
21327: LD_ADDR_OWVAR 42
21331: PUSH
21332: LD_INT 8
21334: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21335: LD_ADDR_OWVAR 44
21339: PUSH
21340: LD_INT 10
21342: PUSH
21343: LD_INT 12
21345: PUSH
21346: LD_INT 14
21348: PUSH
21349: LD_INT 13
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: PUSH
21358: LD_VAR 0 2
21362: PUSH
21363: LD_INT 9
21365: MINUS
21366: ARRAY
21367: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21368: LD_ADDR_OWVAR 45
21372: PUSH
21373: LD_INT 11
21375: PUSH
21376: LD_INT 15
21378: PUSH
21379: LD_INT 12
21381: PUSH
21382: LD_INT 15
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: LD_VAR 0 2
21395: PUSH
21396: LD_INT 9
21398: MINUS
21399: ARRAY
21400: ST_TO_ADDR
// end ; 14 :
21401: GO 21820
21403: LD_INT 14
21405: DOUBLE
21406: EQUAL
21407: IFTRUE 21411
21409: GO 21422
21411: POP
// bc_type := b_workshop ; 15 :
21412: LD_ADDR_OWVAR 42
21416: PUSH
21417: LD_INT 2
21419: ST_TO_ADDR
21420: GO 21820
21422: LD_INT 15
21424: DOUBLE
21425: EQUAL
21426: IFTRUE 21430
21428: GO 21441
21430: POP
// bc_type := b_factory ; 16 :
21431: LD_ADDR_OWVAR 42
21435: PUSH
21436: LD_INT 3
21438: ST_TO_ADDR
21439: GO 21820
21441: LD_INT 16
21443: DOUBLE
21444: EQUAL
21445: IFTRUE 21449
21447: GO 21460
21449: POP
// bc_type := b_ext_gun ; 17 :
21450: LD_ADDR_OWVAR 42
21454: PUSH
21455: LD_INT 17
21457: ST_TO_ADDR
21458: GO 21820
21460: LD_INT 17
21462: DOUBLE
21463: EQUAL
21464: IFTRUE 21468
21466: GO 21496
21468: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21469: LD_ADDR_OWVAR 42
21473: PUSH
21474: LD_INT 19
21476: PUSH
21477: LD_INT 23
21479: PUSH
21480: LD_INT 19
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_VAR 0 1
21492: ARRAY
21493: ST_TO_ADDR
21494: GO 21820
21496: LD_INT 18
21498: DOUBLE
21499: EQUAL
21500: IFTRUE 21504
21502: GO 21515
21504: POP
// bc_type := b_ext_radar ; 19 :
21505: LD_ADDR_OWVAR 42
21509: PUSH
21510: LD_INT 20
21512: ST_TO_ADDR
21513: GO 21820
21515: LD_INT 19
21517: DOUBLE
21518: EQUAL
21519: IFTRUE 21523
21521: GO 21534
21523: POP
// bc_type := b_ext_radio ; 20 :
21524: LD_ADDR_OWVAR 42
21528: PUSH
21529: LD_INT 22
21531: ST_TO_ADDR
21532: GO 21820
21534: LD_INT 20
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21553
21542: POP
// bc_type := b_ext_siberium ; 21 :
21543: LD_ADDR_OWVAR 42
21547: PUSH
21548: LD_INT 21
21550: ST_TO_ADDR
21551: GO 21820
21553: LD_INT 21
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21561
21559: GO 21572
21561: POP
// bc_type := b_ext_computer ; 22 :
21562: LD_ADDR_OWVAR 42
21566: PUSH
21567: LD_INT 24
21569: ST_TO_ADDR
21570: GO 21820
21572: LD_INT 22
21574: DOUBLE
21575: EQUAL
21576: IFTRUE 21580
21578: GO 21591
21580: POP
// bc_type := b_ext_track ; 23 :
21581: LD_ADDR_OWVAR 42
21585: PUSH
21586: LD_INT 16
21588: ST_TO_ADDR
21589: GO 21820
21591: LD_INT 23
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21610
21599: POP
// bc_type := b_ext_laser ; 24 :
21600: LD_ADDR_OWVAR 42
21604: PUSH
21605: LD_INT 25
21607: ST_TO_ADDR
21608: GO 21820
21610: LD_INT 24
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21629
21618: POP
// bc_type := b_control_tower ; 25 :
21619: LD_ADDR_OWVAR 42
21623: PUSH
21624: LD_INT 36
21626: ST_TO_ADDR
21627: GO 21820
21629: LD_INT 25
21631: DOUBLE
21632: EQUAL
21633: IFTRUE 21637
21635: GO 21648
21637: POP
// bc_type := b_breastwork ; 26 :
21638: LD_ADDR_OWVAR 42
21642: PUSH
21643: LD_INT 31
21645: ST_TO_ADDR
21646: GO 21820
21648: LD_INT 26
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21667
21656: POP
// bc_type := b_bunker ; 27 :
21657: LD_ADDR_OWVAR 42
21661: PUSH
21662: LD_INT 32
21664: ST_TO_ADDR
21665: GO 21820
21667: LD_INT 27
21669: DOUBLE
21670: EQUAL
21671: IFTRUE 21675
21673: GO 21686
21675: POP
// bc_type := b_turret ; 28 :
21676: LD_ADDR_OWVAR 42
21680: PUSH
21681: LD_INT 33
21683: ST_TO_ADDR
21684: GO 21820
21686: LD_INT 28
21688: DOUBLE
21689: EQUAL
21690: IFTRUE 21694
21692: GO 21705
21694: POP
// bc_type := b_armoury ; 29 :
21695: LD_ADDR_OWVAR 42
21699: PUSH
21700: LD_INT 4
21702: ST_TO_ADDR
21703: GO 21820
21705: LD_INT 29
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21713
21711: GO 21724
21713: POP
// bc_type := b_barracks ; 30 :
21714: LD_ADDR_OWVAR 42
21718: PUSH
21719: LD_INT 5
21721: ST_TO_ADDR
21722: GO 21820
21724: LD_INT 30
21726: DOUBLE
21727: EQUAL
21728: IFTRUE 21732
21730: GO 21743
21732: POP
// bc_type := b_solar_power ; 31 :
21733: LD_ADDR_OWVAR 42
21737: PUSH
21738: LD_INT 27
21740: ST_TO_ADDR
21741: GO 21820
21743: LD_INT 31
21745: DOUBLE
21746: EQUAL
21747: IFTRUE 21751
21749: GO 21762
21751: POP
// bc_type := b_oil_power ; 32 :
21752: LD_ADDR_OWVAR 42
21756: PUSH
21757: LD_INT 26
21759: ST_TO_ADDR
21760: GO 21820
21762: LD_INT 32
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21770
21768: GO 21781
21770: POP
// bc_type := b_siberite_power ; 33 :
21771: LD_ADDR_OWVAR 42
21775: PUSH
21776: LD_INT 28
21778: ST_TO_ADDR
21779: GO 21820
21781: LD_INT 33
21783: DOUBLE
21784: EQUAL
21785: IFTRUE 21789
21787: GO 21800
21789: POP
// bc_type := b_oil_mine ; 34 :
21790: LD_ADDR_OWVAR 42
21794: PUSH
21795: LD_INT 29
21797: ST_TO_ADDR
21798: GO 21820
21800: LD_INT 34
21802: DOUBLE
21803: EQUAL
21804: IFTRUE 21808
21806: GO 21819
21808: POP
// bc_type := b_siberite_mine ; end ;
21809: LD_ADDR_OWVAR 42
21813: PUSH
21814: LD_INT 30
21816: ST_TO_ADDR
21817: GO 21820
21819: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21820: LD_ADDR_VAR 0 8
21824: PUSH
21825: LD_VAR 0 5
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: CALL_OW 47
21844: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21845: LD_OWVAR 42
21849: PUSH
21850: LD_INT 32
21852: PUSH
21853: LD_INT 33
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: IN
21860: IFFALSE 21876
// PlaceWeaponTurret ( b , weapon ) ;
21862: LD_VAR 0 8
21866: PPUSH
21867: LD_VAR 0 4
21871: PPUSH
21872: CALL_OW 431
// end ;
21876: LD_VAR 0 7
21880: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21881: LD_INT 0
21883: PPUSH
21884: PPUSH
21885: PPUSH
21886: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21887: LD_ADDR_VAR 0 4
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_OWVAR 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 30
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 30
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PPUSH
21936: CALL_OW 69
21940: ST_TO_ADDR
// if not tmp then
21941: LD_VAR 0 4
21945: NOT
21946: IFFALSE 21950
// exit ;
21948: GO 22009
// for i in tmp do
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_VAR 0 4
21959: PUSH
21960: FOR_IN
21961: IFFALSE 22007
// for j = 1 to 3 do
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: DOUBLE
21969: LD_INT 1
21971: DEC
21972: ST_TO_ADDR
21973: LD_INT 3
21975: PUSH
21976: FOR_TO
21977: IFFALSE 22003
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21979: LD_VAR 0 2
21983: PPUSH
21984: CALL_OW 274
21988: PPUSH
21989: LD_VAR 0 3
21993: PPUSH
21994: LD_INT 99999
21996: PPUSH
21997: CALL_OW 277
22001: GO 21976
22003: POP
22004: POP
22005: GO 21960
22007: POP
22008: POP
// end ;
22009: LD_VAR 0 1
22013: RET
// export function hHackSetLevel10 ; var i , j ; begin
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
22018: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 21
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: PUSH
22039: FOR_IN
22040: IFFALSE 22092
// if IsSelected ( i ) then
22042: LD_VAR 0 2
22046: PPUSH
22047: CALL_OW 306
22051: IFFALSE 22090
// begin for j := 1 to 4 do
22053: LD_ADDR_VAR 0 3
22057: PUSH
22058: DOUBLE
22059: LD_INT 1
22061: DEC
22062: ST_TO_ADDR
22063: LD_INT 4
22065: PUSH
22066: FOR_TO
22067: IFFALSE 22088
// SetSkill ( i , j , 10 ) ;
22069: LD_VAR 0 2
22073: PPUSH
22074: LD_VAR 0 3
22078: PPUSH
22079: LD_INT 10
22081: PPUSH
22082: CALL_OW 237
22086: GO 22066
22088: POP
22089: POP
// end ;
22090: GO 22039
22092: POP
22093: POP
// end ;
22094: LD_VAR 0 1
22098: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22099: LD_INT 0
22101: PPUSH
22102: PPUSH
22103: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22104: LD_ADDR_VAR 0 2
22108: PUSH
22109: LD_INT 22
22111: PUSH
22112: LD_OWVAR 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PPUSH
22135: CALL_OW 69
22139: PUSH
22140: FOR_IN
22141: IFFALSE 22182
// begin for j := 1 to 4 do
22143: LD_ADDR_VAR 0 3
22147: PUSH
22148: DOUBLE
22149: LD_INT 1
22151: DEC
22152: ST_TO_ADDR
22153: LD_INT 4
22155: PUSH
22156: FOR_TO
22157: IFFALSE 22178
// SetSkill ( i , j , 10 ) ;
22159: LD_VAR 0 2
22163: PPUSH
22164: LD_VAR 0 3
22168: PPUSH
22169: LD_INT 10
22171: PPUSH
22172: CALL_OW 237
22176: GO 22156
22178: POP
22179: POP
// end ;
22180: GO 22140
22182: POP
22183: POP
// end ;
22184: LD_VAR 0 1
22188: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22189: LD_INT 0
22191: PPUSH
// uc_side := your_side ;
22192: LD_ADDR_OWVAR 20
22196: PUSH
22197: LD_OWVAR 2
22201: ST_TO_ADDR
// uc_nation := nation ;
22202: LD_ADDR_OWVAR 21
22206: PUSH
22207: LD_VAR 0 1
22211: ST_TO_ADDR
// InitHc ;
22212: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22216: LD_INT 0
22218: PPUSH
22219: LD_VAR 0 2
22223: PPUSH
22224: LD_VAR 0 3
22228: PPUSH
22229: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22233: LD_VAR 0 4
22237: PPUSH
22238: LD_VAR 0 5
22242: PPUSH
22243: CALL_OW 428
22247: PUSH
22248: LD_INT 0
22250: EQUAL
22251: IFFALSE 22275
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22253: CALL_OW 44
22257: PPUSH
22258: LD_VAR 0 4
22262: PPUSH
22263: LD_VAR 0 5
22267: PPUSH
22268: LD_INT 1
22270: PPUSH
22271: CALL_OW 48
// end ;
22275: LD_VAR 0 6
22279: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22280: LD_INT 0
22282: PPUSH
22283: PPUSH
// uc_side := your_side ;
22284: LD_ADDR_OWVAR 20
22288: PUSH
22289: LD_OWVAR 2
22293: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22294: LD_VAR 0 1
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 3
22307: PUSH
22308: LD_INT 4
22310: PUSH
22311: LD_INT 5
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: IN
22321: IFFALSE 22333
// uc_nation := nation_american else
22323: LD_ADDR_OWVAR 21
22327: PUSH
22328: LD_INT 1
22330: ST_TO_ADDR
22331: GO 22376
// if chassis in [ 11 , 12 , 13 , 14 ] then
22333: LD_VAR 0 1
22337: PUSH
22338: LD_INT 11
22340: PUSH
22341: LD_INT 12
22343: PUSH
22344: LD_INT 13
22346: PUSH
22347: LD_INT 14
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: IN
22356: IFFALSE 22368
// uc_nation := nation_arabian else
22358: LD_ADDR_OWVAR 21
22362: PUSH
22363: LD_INT 2
22365: ST_TO_ADDR
22366: GO 22376
// uc_nation := nation_russian ;
22368: LD_ADDR_OWVAR 21
22372: PUSH
22373: LD_INT 3
22375: ST_TO_ADDR
// vc_chassis := chassis ;
22376: LD_ADDR_OWVAR 37
22380: PUSH
22381: LD_VAR 0 1
22385: ST_TO_ADDR
// vc_engine := engine ;
22386: LD_ADDR_OWVAR 39
22390: PUSH
22391: LD_VAR 0 2
22395: ST_TO_ADDR
// vc_control := control ;
22396: LD_ADDR_OWVAR 38
22400: PUSH
22401: LD_VAR 0 3
22405: ST_TO_ADDR
// vc_weapon := weapon ;
22406: LD_ADDR_OWVAR 40
22410: PUSH
22411: LD_VAR 0 4
22415: ST_TO_ADDR
// un := CreateVehicle ;
22416: LD_ADDR_VAR 0 8
22420: PUSH
22421: CALL_OW 45
22425: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22426: LD_VAR 0 8
22430: PPUSH
22431: LD_INT 0
22433: PPUSH
22434: LD_INT 5
22436: PPUSH
22437: CALL_OW 12
22441: PPUSH
22442: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22446: LD_VAR 0 8
22450: PPUSH
22451: LD_VAR 0 5
22455: PPUSH
22456: LD_VAR 0 6
22460: PPUSH
22461: LD_INT 1
22463: PPUSH
22464: CALL_OW 48
// end ;
22468: LD_VAR 0 7
22472: RET
// export hInvincible ; every 1 do
22473: GO 22475
22475: DISABLE
// hInvincible := [ ] ;
22476: LD_ADDR_EXP 97
22480: PUSH
22481: EMPTY
22482: ST_TO_ADDR
22483: END
// every 10 do var i ;
22484: GO 22486
22486: DISABLE
22487: LD_INT 0
22489: PPUSH
// begin enable ;
22490: ENABLE
// if not hInvincible then
22491: LD_EXP 97
22495: NOT
22496: IFFALSE 22500
// exit ;
22498: GO 22544
// for i in hInvincible do
22500: LD_ADDR_VAR 0 1
22504: PUSH
22505: LD_EXP 97
22509: PUSH
22510: FOR_IN
22511: IFFALSE 22542
// if GetLives ( i ) < 1000 then
22513: LD_VAR 0 1
22517: PPUSH
22518: CALL_OW 256
22522: PUSH
22523: LD_INT 1000
22525: LESS
22526: IFFALSE 22540
// SetLives ( i , 1000 ) ;
22528: LD_VAR 0 1
22532: PPUSH
22533: LD_INT 1000
22535: PPUSH
22536: CALL_OW 234
22540: GO 22510
22542: POP
22543: POP
// end ;
22544: PPOPN 1
22546: END
// export function hHackInvincible ; var i ; begin
22547: LD_INT 0
22549: PPUSH
22550: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: LD_INT 21
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 69
22588: PUSH
22589: FOR_IN
22590: IFFALSE 22651
// if IsSelected ( i ) then
22592: LD_VAR 0 2
22596: PPUSH
22597: CALL_OW 306
22601: IFFALSE 22649
// begin if i in hInvincible then
22603: LD_VAR 0 2
22607: PUSH
22608: LD_EXP 97
22612: IN
22613: IFFALSE 22633
// hInvincible := hInvincible diff i else
22615: LD_ADDR_EXP 97
22619: PUSH
22620: LD_EXP 97
22624: PUSH
22625: LD_VAR 0 2
22629: DIFF
22630: ST_TO_ADDR
22631: GO 22649
// hInvincible := hInvincible union i ;
22633: LD_ADDR_EXP 97
22637: PUSH
22638: LD_EXP 97
22642: PUSH
22643: LD_VAR 0 2
22647: UNION
22648: ST_TO_ADDR
// end ;
22649: GO 22589
22651: POP
22652: POP
// end ;
22653: LD_VAR 0 1
22657: RET
// export function hHackInvisible ; var i , j ; begin
22658: LD_INT 0
22660: PPUSH
22661: PPUSH
22662: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PPUSH
22678: CALL_OW 69
22682: PUSH
22683: FOR_IN
22684: IFFALSE 22708
// if IsSelected ( i ) then
22686: LD_VAR 0 2
22690: PPUSH
22691: CALL_OW 306
22695: IFFALSE 22706
// ComForceInvisible ( i ) ;
22697: LD_VAR 0 2
22701: PPUSH
22702: CALL_OW 496
22706: GO 22683
22708: POP
22709: POP
// end ;
22710: LD_VAR 0 1
22714: RET
// export function hHackChangeYourSide ; begin
22715: LD_INT 0
22717: PPUSH
// if your_side = 8 then
22718: LD_OWVAR 2
22722: PUSH
22723: LD_INT 8
22725: EQUAL
22726: IFFALSE 22738
// your_side := 0 else
22728: LD_ADDR_OWVAR 2
22732: PUSH
22733: LD_INT 0
22735: ST_TO_ADDR
22736: GO 22752
// your_side := your_side + 1 ;
22738: LD_ADDR_OWVAR 2
22742: PUSH
22743: LD_OWVAR 2
22747: PUSH
22748: LD_INT 1
22750: PLUS
22751: ST_TO_ADDR
// end ;
22752: LD_VAR 0 1
22756: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
22761: PPUSH
// for i in all_units do
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_OWVAR 3
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22851
// if IsSelected ( i ) then
22775: LD_VAR 0 2
22779: PPUSH
22780: CALL_OW 306
22784: IFFALSE 22849
// begin j := GetSide ( i ) ;
22786: LD_ADDR_VAR 0 3
22790: PUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: CALL_OW 255
22800: ST_TO_ADDR
// if j = 8 then
22801: LD_VAR 0 3
22805: PUSH
22806: LD_INT 8
22808: EQUAL
22809: IFFALSE 22821
// j := 0 else
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 0
22818: ST_TO_ADDR
22819: GO 22835
// j := j + 1 ;
22821: LD_ADDR_VAR 0 3
22825: PUSH
22826: LD_VAR 0 3
22830: PUSH
22831: LD_INT 1
22833: PLUS
22834: ST_TO_ADDR
// SetSide ( i , j ) ;
22835: LD_VAR 0 2
22839: PPUSH
22840: LD_VAR 0 3
22844: PPUSH
22845: CALL_OW 235
// end ;
22849: GO 22772
22851: POP
22852: POP
// end ;
22853: LD_VAR 0 1
22857: RET
// export function hHackFog ; begin
22858: LD_INT 0
22860: PPUSH
// FogOff ( true ) ;
22861: LD_INT 1
22863: PPUSH
22864: CALL_OW 344
// end ;
22868: LD_VAR 0 1
22872: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22873: LD_INT 0
22875: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22876: LD_VAR 0 1
22880: PPUSH
22881: LD_VAR 0 2
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: LD_INT 1
22893: PPUSH
22894: LD_INT 1
22896: PPUSH
22897: CALL_OW 483
// CenterOnXY ( x , y ) ;
22901: LD_VAR 0 2
22905: PPUSH
22906: LD_VAR 0 3
22910: PPUSH
22911: CALL_OW 84
// end ; end_of_file
22915: LD_VAR 0 4
22919: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22920: LD_VAR 0 1
22924: PUSH
22925: LD_INT 200
22927: DOUBLE
22928: GREATEREQUAL
22929: IFFALSE 22937
22931: LD_INT 299
22933: DOUBLE
22934: LESSEQUAL
22935: IFTRUE 22939
22937: GO 22971
22939: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22940: LD_VAR 0 1
22944: PPUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_VAR 0 3
22954: PPUSH
22955: LD_VAR 0 4
22959: PPUSH
22960: LD_VAR 0 5
22964: PPUSH
22965: CALL 23215 0 5
22969: GO 23048
22971: LD_INT 300
22973: DOUBLE
22974: GREATEREQUAL
22975: IFFALSE 22983
22977: LD_INT 399
22979: DOUBLE
22980: LESSEQUAL
22981: IFTRUE 22985
22983: GO 23047
22985: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22986: LD_VAR 0 1
22990: PPUSH
22991: LD_VAR 0 2
22995: PPUSH
22996: LD_VAR 0 3
23000: PPUSH
23001: LD_VAR 0 4
23005: PPUSH
23006: LD_VAR 0 5
23010: PPUSH
23011: LD_VAR 0 6
23015: PPUSH
23016: LD_VAR 0 7
23020: PPUSH
23021: LD_VAR 0 8
23025: PPUSH
23026: LD_VAR 0 9
23030: PPUSH
23031: LD_VAR 0 10
23035: PPUSH
23036: LD_VAR 0 11
23040: PPUSH
23041: CALL 20940 0 11
23045: GO 23048
23047: POP
// end ;
23048: PPOPN 11
23050: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23051: LD_VAR 0 1
23055: PPUSH
23056: LD_VAR 0 2
23060: PPUSH
23061: LD_VAR 0 3
23065: PPUSH
23066: LD_VAR 0 4
23070: PPUSH
23071: LD_VAR 0 5
23075: PPUSH
23076: CALL 23197 0 5
// end ; end_of_file
23080: PPOPN 5
23082: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23083: LD_INT 0
23085: PPUSH
23086: PPUSH
23087: PPUSH
23088: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23089: LD_VAR 0 1
23093: PPUSH
23094: CALL_OW 264
23098: PUSH
23099: LD_EXP 114
23103: EQUAL
23104: IFFALSE 23176
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23106: LD_INT 68
23108: PPUSH
23109: LD_VAR 0 1
23113: PPUSH
23114: CALL_OW 255
23118: PPUSH
23119: CALL_OW 321
23123: PUSH
23124: LD_INT 2
23126: EQUAL
23127: IFFALSE 23139
// eff := 70 else
23129: LD_ADDR_VAR 0 4
23133: PUSH
23134: LD_INT 70
23136: ST_TO_ADDR
23137: GO 23147
// eff := 30 ;
23139: LD_ADDR_VAR 0 4
23143: PUSH
23144: LD_INT 30
23146: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23147: LD_VAR 0 1
23151: PPUSH
23152: CALL_OW 250
23156: PPUSH
23157: LD_VAR 0 1
23161: PPUSH
23162: CALL_OW 251
23166: PPUSH
23167: LD_VAR 0 4
23171: PPUSH
23172: CALL_OW 495
// end ; end ;
23176: LD_VAR 0 2
23180: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23181: LD_INT 0
23183: PPUSH
// end ;
23184: LD_VAR 0 4
23188: RET
// export function SOS_Command ( cmd ) ; begin
23189: LD_INT 0
23191: PPUSH
// end ;
23192: LD_VAR 0 2
23196: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23197: LD_INT 0
23199: PPUSH
// if cmd = 121 then
23200: LD_VAR 0 1
23204: PUSH
23205: LD_INT 121
23207: EQUAL
23208: IFFALSE 23210
// end ;
23210: LD_VAR 0 6
23214: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23215: LD_INT 0
23217: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23218: LD_VAR 0 1
23222: PUSH
23223: LD_INT 250
23225: EQUAL
23226: PUSH
23227: LD_VAR 0 2
23231: PPUSH
23232: CALL_OW 264
23236: PUSH
23237: LD_EXP 117
23241: EQUAL
23242: AND
23243: IFFALSE 23264
// MinerPlaceMine ( unit , x , y ) ;
23245: LD_VAR 0 2
23249: PPUSH
23250: LD_VAR 0 4
23254: PPUSH
23255: LD_VAR 0 5
23259: PPUSH
23260: CALL 25613 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23264: LD_VAR 0 1
23268: PUSH
23269: LD_INT 251
23271: EQUAL
23272: PUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 264
23282: PUSH
23283: LD_EXP 117
23287: EQUAL
23288: AND
23289: IFFALSE 23310
// MinerDetonateMine ( unit , x , y ) ;
23291: LD_VAR 0 2
23295: PPUSH
23296: LD_VAR 0 4
23300: PPUSH
23301: LD_VAR 0 5
23305: PPUSH
23306: CALL 25890 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23310: LD_VAR 0 1
23314: PUSH
23315: LD_INT 252
23317: EQUAL
23318: PUSH
23319: LD_VAR 0 2
23323: PPUSH
23324: CALL_OW 264
23328: PUSH
23329: LD_EXP 117
23333: EQUAL
23334: AND
23335: IFFALSE 23356
// MinerCreateMinefield ( unit , x , y ) ;
23337: LD_VAR 0 2
23341: PPUSH
23342: LD_VAR 0 4
23346: PPUSH
23347: LD_VAR 0 5
23351: PPUSH
23352: CALL 26307 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23356: LD_VAR 0 1
23360: PUSH
23361: LD_INT 253
23363: EQUAL
23364: PUSH
23365: LD_VAR 0 2
23369: PPUSH
23370: CALL_OW 257
23374: PUSH
23375: LD_INT 5
23377: EQUAL
23378: AND
23379: IFFALSE 23400
// ComBinocular ( unit , x , y ) ;
23381: LD_VAR 0 2
23385: PPUSH
23386: LD_VAR 0 4
23390: PPUSH
23391: LD_VAR 0 5
23395: PPUSH
23396: CALL 26678 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23400: LD_VAR 0 1
23404: PUSH
23405: LD_INT 254
23407: EQUAL
23408: PUSH
23409: LD_VAR 0 2
23413: PPUSH
23414: CALL_OW 264
23418: PUSH
23419: LD_EXP 112
23423: EQUAL
23424: AND
23425: PUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: CALL_OW 263
23435: PUSH
23436: LD_INT 3
23438: EQUAL
23439: AND
23440: IFFALSE 23456
// HackDestroyVehicle ( unit , selectedUnit ) ;
23442: LD_VAR 0 2
23446: PPUSH
23447: LD_VAR 0 3
23451: PPUSH
23452: CALL 24973 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23456: LD_VAR 0 1
23460: PUSH
23461: LD_INT 255
23463: EQUAL
23464: PUSH
23465: LD_VAR 0 2
23469: PPUSH
23470: CALL_OW 264
23474: PUSH
23475: LD_INT 14
23477: PUSH
23478: LD_INT 53
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: IN
23485: AND
23486: PUSH
23487: LD_VAR 0 4
23491: PPUSH
23492: LD_VAR 0 5
23496: PPUSH
23497: CALL_OW 488
23501: AND
23502: IFFALSE 23526
// CutTreeXYR ( unit , x , y , 12 ) ;
23504: LD_VAR 0 2
23508: PPUSH
23509: LD_VAR 0 4
23513: PPUSH
23514: LD_VAR 0 5
23518: PPUSH
23519: LD_INT 12
23521: PPUSH
23522: CALL 23539 0 4
// end ;
23526: LD_VAR 0 6
23530: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23531: LD_INT 0
23533: PPUSH
// end ;
23534: LD_VAR 0 4
23538: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23539: LD_INT 0
23541: PPUSH
23542: PPUSH
23543: PPUSH
23544: PPUSH
23545: PPUSH
23546: PPUSH
23547: PPUSH
23548: PPUSH
23549: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23550: LD_VAR 0 1
23554: NOT
23555: PUSH
23556: LD_VAR 0 2
23560: PPUSH
23561: LD_VAR 0 3
23565: PPUSH
23566: CALL_OW 488
23570: NOT
23571: OR
23572: PUSH
23573: LD_VAR 0 4
23577: NOT
23578: OR
23579: IFFALSE 23583
// exit ;
23581: GO 23923
// list := [ ] ;
23583: LD_ADDR_VAR 0 13
23587: PUSH
23588: EMPTY
23589: ST_TO_ADDR
// if x - r < 0 then
23590: LD_VAR 0 2
23594: PUSH
23595: LD_VAR 0 4
23599: MINUS
23600: PUSH
23601: LD_INT 0
23603: LESS
23604: IFFALSE 23616
// min_x := 0 else
23606: LD_ADDR_VAR 0 7
23610: PUSH
23611: LD_INT 0
23613: ST_TO_ADDR
23614: GO 23632
// min_x := x - r ;
23616: LD_ADDR_VAR 0 7
23620: PUSH
23621: LD_VAR 0 2
23625: PUSH
23626: LD_VAR 0 4
23630: MINUS
23631: ST_TO_ADDR
// if y - r < 0 then
23632: LD_VAR 0 3
23636: PUSH
23637: LD_VAR 0 4
23641: MINUS
23642: PUSH
23643: LD_INT 0
23645: LESS
23646: IFFALSE 23658
// min_y := 0 else
23648: LD_ADDR_VAR 0 8
23652: PUSH
23653: LD_INT 0
23655: ST_TO_ADDR
23656: GO 23674
// min_y := y - r ;
23658: LD_ADDR_VAR 0 8
23662: PUSH
23663: LD_VAR 0 3
23667: PUSH
23668: LD_VAR 0 4
23672: MINUS
23673: ST_TO_ADDR
// max_x := x + r ;
23674: LD_ADDR_VAR 0 9
23678: PUSH
23679: LD_VAR 0 2
23683: PUSH
23684: LD_VAR 0 4
23688: PLUS
23689: ST_TO_ADDR
// max_y := y + r ;
23690: LD_ADDR_VAR 0 10
23694: PUSH
23695: LD_VAR 0 3
23699: PUSH
23700: LD_VAR 0 4
23704: PLUS
23705: ST_TO_ADDR
// for _x = min_x to max_x do
23706: LD_ADDR_VAR 0 11
23710: PUSH
23711: DOUBLE
23712: LD_VAR 0 7
23716: DEC
23717: ST_TO_ADDR
23718: LD_VAR 0 9
23722: PUSH
23723: FOR_TO
23724: IFFALSE 23841
// for _y = min_y to max_y do
23726: LD_ADDR_VAR 0 12
23730: PUSH
23731: DOUBLE
23732: LD_VAR 0 8
23736: DEC
23737: ST_TO_ADDR
23738: LD_VAR 0 10
23742: PUSH
23743: FOR_TO
23744: IFFALSE 23837
// begin if not ValidHex ( _x , _y ) then
23746: LD_VAR 0 11
23750: PPUSH
23751: LD_VAR 0 12
23755: PPUSH
23756: CALL_OW 488
23760: NOT
23761: IFFALSE 23765
// continue ;
23763: GO 23743
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23765: LD_VAR 0 11
23769: PPUSH
23770: LD_VAR 0 12
23774: PPUSH
23775: CALL_OW 351
23779: PUSH
23780: LD_VAR 0 11
23784: PPUSH
23785: LD_VAR 0 12
23789: PPUSH
23790: CALL_OW 554
23794: AND
23795: IFFALSE 23835
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23797: LD_ADDR_VAR 0 13
23801: PUSH
23802: LD_VAR 0 13
23806: PPUSH
23807: LD_VAR 0 13
23811: PUSH
23812: LD_INT 1
23814: PLUS
23815: PPUSH
23816: LD_VAR 0 11
23820: PUSH
23821: LD_VAR 0 12
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PPUSH
23830: CALL_OW 2
23834: ST_TO_ADDR
// end ;
23835: GO 23743
23837: POP
23838: POP
23839: GO 23723
23841: POP
23842: POP
// if not list then
23843: LD_VAR 0 13
23847: NOT
23848: IFFALSE 23852
// exit ;
23850: GO 23923
// for i in list do
23852: LD_ADDR_VAR 0 6
23856: PUSH
23857: LD_VAR 0 13
23861: PUSH
23862: FOR_IN
23863: IFFALSE 23921
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23865: LD_VAR 0 1
23869: PPUSH
23870: LD_STRING M
23872: PUSH
23873: LD_VAR 0 6
23877: PUSH
23878: LD_INT 1
23880: ARRAY
23881: PUSH
23882: LD_VAR 0 6
23886: PUSH
23887: LD_INT 2
23889: ARRAY
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: PUSH
23912: EMPTY
23913: LIST
23914: PPUSH
23915: CALL_OW 447
23919: GO 23862
23921: POP
23922: POP
// end ;
23923: LD_VAR 0 5
23927: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23928: LD_EXP 100
23932: NOT
23933: IFFALSE 23983
23935: GO 23937
23937: DISABLE
// begin initHack := true ;
23938: LD_ADDR_EXP 100
23942: PUSH
23943: LD_INT 1
23945: ST_TO_ADDR
// hackTanks := [ ] ;
23946: LD_ADDR_EXP 101
23950: PUSH
23951: EMPTY
23952: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23953: LD_ADDR_EXP 102
23957: PUSH
23958: EMPTY
23959: ST_TO_ADDR
// hackLimit := 3 ;
23960: LD_ADDR_EXP 103
23964: PUSH
23965: LD_INT 3
23967: ST_TO_ADDR
// hackDist := 12 ;
23968: LD_ADDR_EXP 104
23972: PUSH
23973: LD_INT 12
23975: ST_TO_ADDR
// hackCounter := [ ] ;
23976: LD_ADDR_EXP 105
23980: PUSH
23981: EMPTY
23982: ST_TO_ADDR
// end ;
23983: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23984: LD_EXP 100
23988: PUSH
23989: LD_INT 34
23991: PUSH
23992: LD_EXP 112
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PPUSH
24001: CALL_OW 69
24005: AND
24006: IFFALSE 24261
24008: GO 24010
24010: DISABLE
24011: LD_INT 0
24013: PPUSH
24014: PPUSH
// begin enable ;
24015: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24016: LD_ADDR_VAR 0 1
24020: PUSH
24021: LD_INT 34
24023: PUSH
24024: LD_EXP 112
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PPUSH
24033: CALL_OW 69
24037: PUSH
24038: FOR_IN
24039: IFFALSE 24259
// begin if not i in hackTanks then
24041: LD_VAR 0 1
24045: PUSH
24046: LD_EXP 101
24050: IN
24051: NOT
24052: IFFALSE 24135
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24054: LD_ADDR_EXP 101
24058: PUSH
24059: LD_EXP 101
24063: PPUSH
24064: LD_EXP 101
24068: PUSH
24069: LD_INT 1
24071: PLUS
24072: PPUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 1
24082: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24083: LD_ADDR_EXP 102
24087: PUSH
24088: LD_EXP 102
24092: PPUSH
24093: LD_EXP 102
24097: PUSH
24098: LD_INT 1
24100: PLUS
24101: PPUSH
24102: EMPTY
24103: PPUSH
24104: CALL_OW 1
24108: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24109: LD_ADDR_EXP 105
24113: PUSH
24114: LD_EXP 105
24118: PPUSH
24119: LD_EXP 105
24123: PUSH
24124: LD_INT 1
24126: PLUS
24127: PPUSH
24128: EMPTY
24129: PPUSH
24130: CALL_OW 1
24134: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 302
24144: NOT
24145: IFFALSE 24158
// begin HackUnlinkAll ( i ) ;
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL 24264 0 1
// continue ;
24156: GO 24038
// end ; HackCheckCapturedStatus ( i ) ;
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL 24707 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24167: LD_ADDR_VAR 0 2
24171: PUSH
24172: LD_INT 81
24174: PUSH
24175: LD_VAR 0 1
24179: PPUSH
24180: CALL_OW 255
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 33
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 91
24201: PUSH
24202: LD_VAR 0 1
24206: PUSH
24207: LD_EXP 104
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 50
24219: PUSH
24220: EMPTY
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: PPUSH
24229: CALL_OW 69
24233: ST_TO_ADDR
// if not tmp then
24234: LD_VAR 0 2
24238: NOT
24239: IFFALSE 24243
// continue ;
24241: GO 24038
// HackLink ( i , tmp ) ;
24243: LD_VAR 0 1
24247: PPUSH
24248: LD_VAR 0 2
24252: PPUSH
24253: CALL 24400 0 2
// end ;
24257: GO 24038
24259: POP
24260: POP
// end ;
24261: PPOPN 2
24263: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
24268: PPUSH
// if not hack in hackTanks then
24269: LD_VAR 0 1
24273: PUSH
24274: LD_EXP 101
24278: IN
24279: NOT
24280: IFFALSE 24284
// exit ;
24282: GO 24395
// index := GetElementIndex ( hackTanks , hack ) ;
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: LD_EXP 101
24293: PPUSH
24294: LD_VAR 0 1
24298: PPUSH
24299: CALL 31869 0 2
24303: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24304: LD_EXP 102
24308: PUSH
24309: LD_VAR 0 4
24313: ARRAY
24314: IFFALSE 24395
// begin for i in hackTanksCaptured [ index ] do
24316: LD_ADDR_VAR 0 3
24320: PUSH
24321: LD_EXP 102
24325: PUSH
24326: LD_VAR 0 4
24330: ARRAY
24331: PUSH
24332: FOR_IN
24333: IFFALSE 24359
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24335: LD_VAR 0 3
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PPUSH
24344: LD_VAR 0 3
24348: PUSH
24349: LD_INT 2
24351: ARRAY
24352: PPUSH
24353: CALL_OW 235
24357: GO 24332
24359: POP
24360: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24361: LD_ADDR_EXP 102
24365: PUSH
24366: LD_EXP 102
24370: PPUSH
24371: LD_VAR 0 4
24375: PPUSH
24376: EMPTY
24377: PPUSH
24378: CALL_OW 1
24382: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24383: LD_VAR 0 1
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: CALL_OW 505
// end ; end ;
24395: LD_VAR 0 2
24399: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24400: LD_INT 0
24402: PPUSH
24403: PPUSH
24404: PPUSH
// if not hack in hackTanks or not vehicles then
24405: LD_VAR 0 1
24409: PUSH
24410: LD_EXP 101
24414: IN
24415: NOT
24416: PUSH
24417: LD_VAR 0 2
24421: NOT
24422: OR
24423: IFFALSE 24427
// exit ;
24425: GO 24702
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_VAR 0 1
24436: PPUSH
24437: LD_VAR 0 2
24441: PPUSH
24442: LD_INT 1
24444: PPUSH
24445: LD_INT 1
24447: PPUSH
24448: CALL 32519 0 4
24452: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24453: LD_ADDR_VAR 0 5
24457: PUSH
24458: LD_EXP 101
24462: PPUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL 31869 0 2
24472: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24473: LD_EXP 102
24477: PUSH
24478: LD_VAR 0 5
24482: ARRAY
24483: PUSH
24484: LD_EXP 103
24488: LESS
24489: IFFALSE 24678
// begin for i := 1 to vehicles do
24491: LD_ADDR_VAR 0 4
24495: PUSH
24496: DOUBLE
24497: LD_INT 1
24499: DEC
24500: ST_TO_ADDR
24501: LD_VAR 0 2
24505: PUSH
24506: FOR_TO
24507: IFFALSE 24676
// begin if hackTanksCaptured [ index ] = hackLimit then
24509: LD_EXP 102
24513: PUSH
24514: LD_VAR 0 5
24518: ARRAY
24519: PUSH
24520: LD_EXP 103
24524: EQUAL
24525: IFFALSE 24529
// break ;
24527: GO 24676
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24529: LD_ADDR_EXP 105
24533: PUSH
24534: LD_EXP 105
24538: PPUSH
24539: LD_VAR 0 5
24543: PPUSH
24544: LD_EXP 105
24548: PUSH
24549: LD_VAR 0 5
24553: ARRAY
24554: PUSH
24555: LD_INT 1
24557: PLUS
24558: PPUSH
24559: CALL_OW 1
24563: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24564: LD_ADDR_EXP 102
24568: PUSH
24569: LD_EXP 102
24573: PPUSH
24574: LD_VAR 0 5
24578: PUSH
24579: LD_EXP 102
24583: PUSH
24584: LD_VAR 0 5
24588: ARRAY
24589: PUSH
24590: LD_INT 1
24592: PLUS
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: LD_VAR 0 2
24602: PUSH
24603: LD_VAR 0 4
24607: ARRAY
24608: PUSH
24609: LD_VAR 0 2
24613: PUSH
24614: LD_VAR 0 4
24618: ARRAY
24619: PPUSH
24620: CALL_OW 255
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PPUSH
24629: CALL 32084 0 3
24633: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24634: LD_VAR 0 2
24638: PUSH
24639: LD_VAR 0 4
24643: ARRAY
24644: PPUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 255
24654: PPUSH
24655: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24659: LD_VAR 0 2
24663: PUSH
24664: LD_VAR 0 4
24668: ARRAY
24669: PPUSH
24670: CALL_OW 141
// end ;
24674: GO 24506
24676: POP
24677: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24678: LD_VAR 0 1
24682: PPUSH
24683: LD_EXP 102
24687: PUSH
24688: LD_VAR 0 5
24692: ARRAY
24693: PUSH
24694: LD_INT 0
24696: PLUS
24697: PPUSH
24698: CALL_OW 505
// end ;
24702: LD_VAR 0 3
24706: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24707: LD_INT 0
24709: PPUSH
24710: PPUSH
24711: PPUSH
24712: PPUSH
// if not hack in hackTanks then
24713: LD_VAR 0 1
24717: PUSH
24718: LD_EXP 101
24722: IN
24723: NOT
24724: IFFALSE 24728
// exit ;
24726: GO 24968
// index := GetElementIndex ( hackTanks , hack ) ;
24728: LD_ADDR_VAR 0 4
24732: PUSH
24733: LD_EXP 101
24737: PPUSH
24738: LD_VAR 0 1
24742: PPUSH
24743: CALL 31869 0 2
24747: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24748: LD_ADDR_VAR 0 3
24752: PUSH
24753: DOUBLE
24754: LD_EXP 102
24758: PUSH
24759: LD_VAR 0 4
24763: ARRAY
24764: INC
24765: ST_TO_ADDR
24766: LD_INT 1
24768: PUSH
24769: FOR_DOWNTO
24770: IFFALSE 24942
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24772: LD_ADDR_VAR 0 5
24776: PUSH
24777: LD_EXP 102
24781: PUSH
24782: LD_VAR 0 4
24786: ARRAY
24787: PUSH
24788: LD_VAR 0 3
24792: ARRAY
24793: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24794: LD_VAR 0 5
24798: PUSH
24799: LD_INT 1
24801: ARRAY
24802: PPUSH
24803: CALL_OW 302
24807: NOT
24808: PUSH
24809: LD_VAR 0 5
24813: PUSH
24814: LD_INT 1
24816: ARRAY
24817: PPUSH
24818: CALL_OW 255
24822: PUSH
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL_OW 255
24832: NONEQUAL
24833: OR
24834: IFFALSE 24940
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24836: LD_VAR 0 5
24840: PUSH
24841: LD_INT 1
24843: ARRAY
24844: PPUSH
24845: CALL_OW 305
24849: PUSH
24850: LD_VAR 0 5
24854: PUSH
24855: LD_INT 1
24857: ARRAY
24858: PPUSH
24859: CALL_OW 255
24863: PUSH
24864: LD_VAR 0 1
24868: PPUSH
24869: CALL_OW 255
24873: EQUAL
24874: AND
24875: IFFALSE 24899
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24877: LD_VAR 0 5
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: PPUSH
24886: LD_VAR 0 5
24890: PUSH
24891: LD_INT 2
24893: ARRAY
24894: PPUSH
24895: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24899: LD_ADDR_EXP 102
24903: PUSH
24904: LD_EXP 102
24908: PPUSH
24909: LD_VAR 0 4
24913: PPUSH
24914: LD_EXP 102
24918: PUSH
24919: LD_VAR 0 4
24923: ARRAY
24924: PPUSH
24925: LD_VAR 0 3
24929: PPUSH
24930: CALL_OW 3
24934: PPUSH
24935: CALL_OW 1
24939: ST_TO_ADDR
// end ; end ;
24940: GO 24769
24942: POP
24943: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24944: LD_VAR 0 1
24948: PPUSH
24949: LD_EXP 102
24953: PUSH
24954: LD_VAR 0 4
24958: ARRAY
24959: PUSH
24960: LD_INT 0
24962: PLUS
24963: PPUSH
24964: CALL_OW 505
// end ;
24968: LD_VAR 0 2
24972: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24973: LD_INT 0
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
// if not hack in hackTanks then
24979: LD_VAR 0 1
24983: PUSH
24984: LD_EXP 101
24988: IN
24989: NOT
24990: IFFALSE 24994
// exit ;
24992: GO 25079
// index := GetElementIndex ( hackTanks , hack ) ;
24994: LD_ADDR_VAR 0 5
24998: PUSH
24999: LD_EXP 101
25003: PPUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL 31869 0 2
25013: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25014: LD_ADDR_VAR 0 4
25018: PUSH
25019: DOUBLE
25020: LD_INT 1
25022: DEC
25023: ST_TO_ADDR
25024: LD_EXP 102
25028: PUSH
25029: LD_VAR 0 5
25033: ARRAY
25034: PUSH
25035: FOR_TO
25036: IFFALSE 25077
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25038: LD_EXP 102
25042: PUSH
25043: LD_VAR 0 5
25047: ARRAY
25048: PUSH
25049: LD_VAR 0 4
25053: ARRAY
25054: PUSH
25055: LD_INT 1
25057: ARRAY
25058: PUSH
25059: LD_VAR 0 2
25063: EQUAL
25064: IFFALSE 25075
// KillUnit ( vehicle ) ;
25066: LD_VAR 0 2
25070: PPUSH
25071: CALL_OW 66
25075: GO 25035
25077: POP
25078: POP
// end ;
25079: LD_VAR 0 3
25083: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25084: LD_EXP 106
25088: NOT
25089: IFFALSE 25124
25091: GO 25093
25093: DISABLE
// begin initMiner := true ;
25094: LD_ADDR_EXP 106
25098: PUSH
25099: LD_INT 1
25101: ST_TO_ADDR
// minersList := [ ] ;
25102: LD_ADDR_EXP 107
25106: PUSH
25107: EMPTY
25108: ST_TO_ADDR
// minerMinesList := [ ] ;
25109: LD_ADDR_EXP 108
25113: PUSH
25114: EMPTY
25115: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25116: LD_ADDR_EXP 109
25120: PUSH
25121: LD_INT 5
25123: ST_TO_ADDR
// end ;
25124: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25125: LD_EXP 106
25129: PUSH
25130: LD_INT 34
25132: PUSH
25133: LD_EXP 117
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: AND
25147: IFFALSE 25610
25149: GO 25151
25151: DISABLE
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
// begin enable ;
25158: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25159: LD_ADDR_VAR 0 1
25163: PUSH
25164: LD_INT 34
25166: PUSH
25167: LD_EXP 117
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PPUSH
25176: CALL_OW 69
25180: PUSH
25181: FOR_IN
25182: IFFALSE 25254
// begin if not i in minersList then
25184: LD_VAR 0 1
25188: PUSH
25189: LD_EXP 107
25193: IN
25194: NOT
25195: IFFALSE 25252
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25197: LD_ADDR_EXP 107
25201: PUSH
25202: LD_EXP 107
25206: PPUSH
25207: LD_EXP 107
25211: PUSH
25212: LD_INT 1
25214: PLUS
25215: PPUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: CALL_OW 1
25225: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25226: LD_ADDR_EXP 108
25230: PUSH
25231: LD_EXP 108
25235: PPUSH
25236: LD_EXP 108
25240: PUSH
25241: LD_INT 1
25243: PLUS
25244: PPUSH
25245: EMPTY
25246: PPUSH
25247: CALL_OW 1
25251: ST_TO_ADDR
// end end ;
25252: GO 25181
25254: POP
25255: POP
// for i := minerMinesList downto 1 do
25256: LD_ADDR_VAR 0 1
25260: PUSH
25261: DOUBLE
25262: LD_EXP 108
25266: INC
25267: ST_TO_ADDR
25268: LD_INT 1
25270: PUSH
25271: FOR_DOWNTO
25272: IFFALSE 25608
// begin if IsLive ( minersList [ i ] ) then
25274: LD_EXP 107
25278: PUSH
25279: LD_VAR 0 1
25283: ARRAY
25284: PPUSH
25285: CALL_OW 300
25289: IFFALSE 25317
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25291: LD_EXP 107
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: LD_EXP 108
25306: PUSH
25307: LD_VAR 0 1
25311: ARRAY
25312: PPUSH
25313: CALL_OW 505
// if not minerMinesList [ i ] then
25317: LD_EXP 108
25321: PUSH
25322: LD_VAR 0 1
25326: ARRAY
25327: NOT
25328: IFFALSE 25332
// continue ;
25330: GO 25271
// for j := minerMinesList [ i ] downto 1 do
25332: LD_ADDR_VAR 0 2
25336: PUSH
25337: DOUBLE
25338: LD_EXP 108
25342: PUSH
25343: LD_VAR 0 1
25347: ARRAY
25348: INC
25349: ST_TO_ADDR
25350: LD_INT 1
25352: PUSH
25353: FOR_DOWNTO
25354: IFFALSE 25604
// begin side := GetSide ( minersList [ i ] ) ;
25356: LD_ADDR_VAR 0 3
25360: PUSH
25361: LD_EXP 107
25365: PUSH
25366: LD_VAR 0 1
25370: ARRAY
25371: PPUSH
25372: CALL_OW 255
25376: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25377: LD_ADDR_VAR 0 4
25381: PUSH
25382: LD_EXP 108
25386: PUSH
25387: LD_VAR 0 1
25391: ARRAY
25392: PUSH
25393: LD_VAR 0 2
25397: ARRAY
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PPUSH
25403: LD_EXP 108
25407: PUSH
25408: LD_VAR 0 1
25412: ARRAY
25413: PUSH
25414: LD_VAR 0 2
25418: ARRAY
25419: PUSH
25420: LD_INT 2
25422: ARRAY
25423: PPUSH
25424: CALL_OW 428
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 4
25433: NOT
25434: IFFALSE 25438
// continue ;
25436: GO 25353
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25438: LD_VAR 0 4
25442: PUSH
25443: LD_INT 81
25445: PUSH
25446: LD_VAR 0 3
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: IN
25460: PUSH
25461: LD_EXP 108
25465: PUSH
25466: LD_VAR 0 1
25470: ARRAY
25471: PUSH
25472: LD_VAR 0 2
25476: ARRAY
25477: PUSH
25478: LD_INT 1
25480: ARRAY
25481: PPUSH
25482: LD_EXP 108
25486: PUSH
25487: LD_VAR 0 1
25491: ARRAY
25492: PUSH
25493: LD_VAR 0 2
25497: ARRAY
25498: PUSH
25499: LD_INT 2
25501: ARRAY
25502: PPUSH
25503: CALL_OW 458
25507: AND
25508: IFFALSE 25602
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25510: LD_EXP 108
25514: PUSH
25515: LD_VAR 0 1
25519: ARRAY
25520: PUSH
25521: LD_VAR 0 2
25525: ARRAY
25526: PUSH
25527: LD_INT 1
25529: ARRAY
25530: PPUSH
25531: LD_EXP 108
25535: PUSH
25536: LD_VAR 0 1
25540: ARRAY
25541: PUSH
25542: LD_VAR 0 2
25546: ARRAY
25547: PUSH
25548: LD_INT 2
25550: ARRAY
25551: PPUSH
25552: LD_VAR 0 3
25556: PPUSH
25557: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25561: LD_ADDR_EXP 108
25565: PUSH
25566: LD_EXP 108
25570: PPUSH
25571: LD_VAR 0 1
25575: PPUSH
25576: LD_EXP 108
25580: PUSH
25581: LD_VAR 0 1
25585: ARRAY
25586: PPUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: CALL_OW 3
25596: PPUSH
25597: CALL_OW 1
25601: ST_TO_ADDR
// end ; end ;
25602: GO 25353
25604: POP
25605: POP
// end ;
25606: GO 25271
25608: POP
25609: POP
// end ;
25610: PPOPN 4
25612: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
// result := false ;
25617: LD_ADDR_VAR 0 4
25621: PUSH
25622: LD_INT 0
25624: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL_OW 264
25634: PUSH
25635: LD_EXP 117
25639: EQUAL
25640: NOT
25641: IFFALSE 25645
// exit ;
25643: GO 25885
// index := GetElementIndex ( minersList , unit ) ;
25645: LD_ADDR_VAR 0 5
25649: PUSH
25650: LD_EXP 107
25654: PPUSH
25655: LD_VAR 0 1
25659: PPUSH
25660: CALL 31869 0 2
25664: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25665: LD_EXP 108
25669: PUSH
25670: LD_VAR 0 5
25674: ARRAY
25675: PUSH
25676: LD_EXP 109
25680: GREATEREQUAL
25681: IFFALSE 25685
// exit ;
25683: GO 25885
// ComMoveXY ( unit , x , y ) ;
25685: LD_VAR 0 1
25689: PPUSH
25690: LD_VAR 0 2
25694: PPUSH
25695: LD_VAR 0 3
25699: PPUSH
25700: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25704: LD_INT 35
25706: PPUSH
25707: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25711: LD_VAR 0 1
25715: PPUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: CALL 62641 0 3
25730: NOT
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 314
25741: AND
25742: IFFALSE 25746
// exit ;
25744: GO 25885
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25746: LD_VAR 0 2
25750: PPUSH
25751: LD_VAR 0 3
25755: PPUSH
25756: CALL_OW 428
25760: PUSH
25761: LD_VAR 0 1
25765: EQUAL
25766: PUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL_OW 314
25776: NOT
25777: AND
25778: IFFALSE 25704
// PlaySoundXY ( x , y , PlantMine ) ;
25780: LD_VAR 0 2
25784: PPUSH
25785: LD_VAR 0 3
25789: PPUSH
25790: LD_STRING PlantMine
25792: PPUSH
25793: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25797: LD_VAR 0 2
25801: PPUSH
25802: LD_VAR 0 3
25806: PPUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: CALL_OW 255
25816: PPUSH
25817: LD_INT 0
25819: PPUSH
25820: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25824: LD_ADDR_EXP 108
25828: PUSH
25829: LD_EXP 108
25833: PPUSH
25834: LD_VAR 0 5
25838: PUSH
25839: LD_EXP 108
25843: PUSH
25844: LD_VAR 0 5
25848: ARRAY
25849: PUSH
25850: LD_INT 1
25852: PLUS
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PPUSH
25858: LD_VAR 0 2
25862: PUSH
25863: LD_VAR 0 3
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PPUSH
25872: CALL 32084 0 3
25876: ST_TO_ADDR
// result := true ;
25877: LD_ADDR_VAR 0 4
25881: PUSH
25882: LD_INT 1
25884: ST_TO_ADDR
// end ;
25885: LD_VAR 0 4
25889: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25890: LD_INT 0
25892: PPUSH
25893: PPUSH
25894: PPUSH
// if not unit in minersList then
25895: LD_VAR 0 1
25899: PUSH
25900: LD_EXP 107
25904: IN
25905: NOT
25906: IFFALSE 25910
// exit ;
25908: GO 26302
// index := GetElementIndex ( minersList , unit ) ;
25910: LD_ADDR_VAR 0 6
25914: PUSH
25915: LD_EXP 107
25919: PPUSH
25920: LD_VAR 0 1
25924: PPUSH
25925: CALL 31869 0 2
25929: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25930: LD_ADDR_VAR 0 5
25934: PUSH
25935: DOUBLE
25936: LD_EXP 108
25940: PUSH
25941: LD_VAR 0 6
25945: ARRAY
25946: INC
25947: ST_TO_ADDR
25948: LD_INT 1
25950: PUSH
25951: FOR_DOWNTO
25952: IFFALSE 26113
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25954: LD_EXP 108
25958: PUSH
25959: LD_VAR 0 6
25963: ARRAY
25964: PUSH
25965: LD_VAR 0 5
25969: ARRAY
25970: PUSH
25971: LD_INT 1
25973: ARRAY
25974: PUSH
25975: LD_VAR 0 2
25979: EQUAL
25980: PUSH
25981: LD_EXP 108
25985: PUSH
25986: LD_VAR 0 6
25990: ARRAY
25991: PUSH
25992: LD_VAR 0 5
25996: ARRAY
25997: PUSH
25998: LD_INT 2
26000: ARRAY
26001: PUSH
26002: LD_VAR 0 3
26006: EQUAL
26007: AND
26008: IFFALSE 26111
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26010: LD_EXP 108
26014: PUSH
26015: LD_VAR 0 6
26019: ARRAY
26020: PUSH
26021: LD_VAR 0 5
26025: ARRAY
26026: PUSH
26027: LD_INT 1
26029: ARRAY
26030: PPUSH
26031: LD_EXP 108
26035: PUSH
26036: LD_VAR 0 6
26040: ARRAY
26041: PUSH
26042: LD_VAR 0 5
26046: ARRAY
26047: PUSH
26048: LD_INT 2
26050: ARRAY
26051: PPUSH
26052: LD_VAR 0 1
26056: PPUSH
26057: CALL_OW 255
26061: PPUSH
26062: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26066: LD_ADDR_EXP 108
26070: PUSH
26071: LD_EXP 108
26075: PPUSH
26076: LD_VAR 0 6
26080: PPUSH
26081: LD_EXP 108
26085: PUSH
26086: LD_VAR 0 6
26090: ARRAY
26091: PPUSH
26092: LD_VAR 0 5
26096: PPUSH
26097: CALL_OW 3
26101: PPUSH
26102: CALL_OW 1
26106: ST_TO_ADDR
// exit ;
26107: POP
26108: POP
26109: GO 26302
// end ; end ;
26111: GO 25951
26113: POP
26114: POP
// for i := minerMinesList [ index ] downto 1 do
26115: LD_ADDR_VAR 0 5
26119: PUSH
26120: DOUBLE
26121: LD_EXP 108
26125: PUSH
26126: LD_VAR 0 6
26130: ARRAY
26131: INC
26132: ST_TO_ADDR
26133: LD_INT 1
26135: PUSH
26136: FOR_DOWNTO
26137: IFFALSE 26300
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26139: LD_EXP 108
26143: PUSH
26144: LD_VAR 0 6
26148: ARRAY
26149: PUSH
26150: LD_VAR 0 5
26154: ARRAY
26155: PUSH
26156: LD_INT 1
26158: ARRAY
26159: PPUSH
26160: LD_EXP 108
26164: PUSH
26165: LD_VAR 0 6
26169: ARRAY
26170: PUSH
26171: LD_VAR 0 5
26175: ARRAY
26176: PUSH
26177: LD_INT 2
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 2
26185: PPUSH
26186: LD_VAR 0 3
26190: PPUSH
26191: CALL_OW 298
26195: PUSH
26196: LD_INT 6
26198: LESS
26199: IFFALSE 26298
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26201: LD_EXP 108
26205: PUSH
26206: LD_VAR 0 6
26210: ARRAY
26211: PUSH
26212: LD_VAR 0 5
26216: ARRAY
26217: PUSH
26218: LD_INT 1
26220: ARRAY
26221: PPUSH
26222: LD_EXP 108
26226: PUSH
26227: LD_VAR 0 6
26231: ARRAY
26232: PUSH
26233: LD_VAR 0 5
26237: ARRAY
26238: PUSH
26239: LD_INT 2
26241: ARRAY
26242: PPUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 255
26252: PPUSH
26253: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26257: LD_ADDR_EXP 108
26261: PUSH
26262: LD_EXP 108
26266: PPUSH
26267: LD_VAR 0 6
26271: PPUSH
26272: LD_EXP 108
26276: PUSH
26277: LD_VAR 0 6
26281: ARRAY
26282: PPUSH
26283: LD_VAR 0 5
26287: PPUSH
26288: CALL_OW 3
26292: PPUSH
26293: CALL_OW 1
26297: ST_TO_ADDR
// end ; end ;
26298: GO 26136
26300: POP
26301: POP
// end ;
26302: LD_VAR 0 4
26306: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26307: LD_INT 0
26309: PPUSH
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 264
26327: PUSH
26328: LD_EXP 117
26332: EQUAL
26333: NOT
26334: PUSH
26335: LD_VAR 0 1
26339: PUSH
26340: LD_EXP 107
26344: IN
26345: NOT
26346: OR
26347: IFFALSE 26351
// exit ;
26349: GO 26673
// index := GetElementIndex ( minersList , unit ) ;
26351: LD_ADDR_VAR 0 6
26355: PUSH
26356: LD_EXP 107
26360: PPUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL 31869 0 2
26370: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26371: LD_ADDR_VAR 0 8
26375: PUSH
26376: LD_EXP 109
26380: PUSH
26381: LD_EXP 108
26385: PUSH
26386: LD_VAR 0 6
26390: ARRAY
26391: MINUS
26392: ST_TO_ADDR
// if not minesFreeAmount then
26393: LD_VAR 0 8
26397: NOT
26398: IFFALSE 26402
// exit ;
26400: GO 26673
// tmp := [ ] ;
26402: LD_ADDR_VAR 0 7
26406: PUSH
26407: EMPTY
26408: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26409: LD_ADDR_VAR 0 5
26413: PUSH
26414: DOUBLE
26415: LD_INT 1
26417: DEC
26418: ST_TO_ADDR
26419: LD_VAR 0 8
26423: PUSH
26424: FOR_TO
26425: IFFALSE 26620
// begin _d := rand ( 0 , 5 ) ;
26427: LD_ADDR_VAR 0 11
26431: PUSH
26432: LD_INT 0
26434: PPUSH
26435: LD_INT 5
26437: PPUSH
26438: CALL_OW 12
26442: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26443: LD_ADDR_VAR 0 12
26447: PUSH
26448: LD_INT 2
26450: PPUSH
26451: LD_INT 6
26453: PPUSH
26454: CALL_OW 12
26458: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26459: LD_ADDR_VAR 0 9
26463: PUSH
26464: LD_VAR 0 2
26468: PPUSH
26469: LD_VAR 0 11
26473: PPUSH
26474: LD_VAR 0 12
26478: PPUSH
26479: CALL_OW 272
26483: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26484: LD_ADDR_VAR 0 10
26488: PUSH
26489: LD_VAR 0 3
26493: PPUSH
26494: LD_VAR 0 11
26498: PPUSH
26499: LD_VAR 0 12
26503: PPUSH
26504: CALL_OW 273
26508: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26509: LD_VAR 0 9
26513: PPUSH
26514: LD_VAR 0 10
26518: PPUSH
26519: CALL_OW 488
26523: PUSH
26524: LD_VAR 0 9
26528: PUSH
26529: LD_VAR 0 10
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_VAR 0 7
26542: IN
26543: NOT
26544: AND
26545: PUSH
26546: LD_VAR 0 9
26550: PPUSH
26551: LD_VAR 0 10
26555: PPUSH
26556: CALL_OW 458
26560: NOT
26561: AND
26562: IFFALSE 26604
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26564: LD_ADDR_VAR 0 7
26568: PUSH
26569: LD_VAR 0 7
26573: PPUSH
26574: LD_VAR 0 7
26578: PUSH
26579: LD_INT 1
26581: PLUS
26582: PPUSH
26583: LD_VAR 0 9
26587: PUSH
26588: LD_VAR 0 10
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PPUSH
26597: CALL_OW 1
26601: ST_TO_ADDR
26602: GO 26618
// i := i - 1 ;
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_VAR 0 5
26613: PUSH
26614: LD_INT 1
26616: MINUS
26617: ST_TO_ADDR
// end ;
26618: GO 26424
26620: POP
26621: POP
// for i in tmp do
26622: LD_ADDR_VAR 0 5
26626: PUSH
26627: LD_VAR 0 7
26631: PUSH
26632: FOR_IN
26633: IFFALSE 26671
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26635: LD_VAR 0 1
26639: PPUSH
26640: LD_VAR 0 5
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_VAR 0 5
26653: PUSH
26654: LD_INT 2
26656: ARRAY
26657: PPUSH
26658: CALL 25613 0 3
26662: NOT
26663: IFFALSE 26669
// exit ;
26665: POP
26666: POP
26667: GO 26673
26669: GO 26632
26671: POP
26672: POP
// end ;
26673: LD_VAR 0 4
26677: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26678: LD_INT 0
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
// if not GetClass ( unit ) = class_sniper then
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 257
26696: PUSH
26697: LD_INT 5
26699: EQUAL
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 27093
// dist := 8 ;
26705: LD_ADDR_VAR 0 5
26709: PUSH
26710: LD_INT 8
26712: ST_TO_ADDR
// viewRange := 12 ;
26713: LD_ADDR_VAR 0 7
26717: PUSH
26718: LD_INT 12
26720: ST_TO_ADDR
// side := GetSide ( unit ) ;
26721: LD_ADDR_VAR 0 6
26725: PUSH
26726: LD_VAR 0 1
26730: PPUSH
26731: CALL_OW 255
26735: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26736: LD_INT 61
26738: PPUSH
26739: LD_VAR 0 6
26743: PPUSH
26744: CALL_OW 321
26748: PUSH
26749: LD_INT 2
26751: EQUAL
26752: IFFALSE 26762
// viewRange := 16 ;
26754: LD_ADDR_VAR 0 7
26758: PUSH
26759: LD_INT 16
26761: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 2
26771: PPUSH
26772: LD_VAR 0 3
26776: PPUSH
26777: CALL_OW 297
26781: PUSH
26782: LD_VAR 0 5
26786: GREATER
26787: IFFALSE 26866
// begin ComMoveXY ( unit , x , y ) ;
26789: LD_VAR 0 1
26793: PPUSH
26794: LD_VAR 0 2
26798: PPUSH
26799: LD_VAR 0 3
26803: PPUSH
26804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26808: LD_INT 35
26810: PPUSH
26811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26815: LD_VAR 0 1
26819: PPUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL 62641 0 3
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 27093
// until GetDistUnitXY ( unit , x , y ) < dist ;
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_VAR 0 2
26848: PPUSH
26849: LD_VAR 0 3
26853: PPUSH
26854: CALL_OW 297
26858: PUSH
26859: LD_VAR 0 5
26863: LESS
26864: IFFALSE 26808
// end ; ComTurnXY ( unit , x , y ) ;
26866: LD_VAR 0 1
26870: PPUSH
26871: LD_VAR 0 2
26875: PPUSH
26876: LD_VAR 0 3
26880: PPUSH
26881: CALL_OW 118
// wait ( 5 ) ;
26885: LD_INT 5
26887: PPUSH
26888: CALL_OW 67
// _d := GetDir ( unit ) ;
26892: LD_ADDR_VAR 0 10
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 254
26906: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26907: LD_ADDR_VAR 0 8
26911: PUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 250
26921: PPUSH
26922: LD_VAR 0 10
26926: PPUSH
26927: LD_VAR 0 5
26931: PPUSH
26932: CALL_OW 272
26936: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26937: LD_ADDR_VAR 0 9
26941: PUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 251
26951: PPUSH
26952: LD_VAR 0 10
26956: PPUSH
26957: LD_VAR 0 5
26961: PPUSH
26962: CALL_OW 273
26966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26967: LD_VAR 0 8
26971: PPUSH
26972: LD_VAR 0 9
26976: PPUSH
26977: CALL_OW 488
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27093
// ComAnimCustom ( unit , 1 ) ;
26986: LD_VAR 0 1
26990: PPUSH
26991: LD_INT 1
26993: PPUSH
26994: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26998: LD_VAR 0 8
27002: PPUSH
27003: LD_VAR 0 9
27007: PPUSH
27008: LD_VAR 0 6
27012: PPUSH
27013: LD_VAR 0 7
27017: PPUSH
27018: CALL_OW 330
// repeat wait ( 1 ) ;
27022: LD_INT 1
27024: PPUSH
27025: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 316
27038: PUSH
27039: LD_VAR 0 1
27043: PPUSH
27044: CALL_OW 314
27048: OR
27049: PUSH
27050: LD_VAR 0 1
27054: PPUSH
27055: CALL_OW 302
27059: NOT
27060: OR
27061: PUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: CALL_OW 301
27071: OR
27072: IFFALSE 27022
// RemoveSeeing ( _x , _y , side ) ;
27074: LD_VAR 0 8
27078: PPUSH
27079: LD_VAR 0 9
27083: PPUSH
27084: LD_VAR 0 6
27088: PPUSH
27089: CALL_OW 331
// end ; end_of_file
27093: LD_VAR 0 4
27097: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27098: LD_INT 0
27100: PPUSH
27101: PPUSH
// if exist_mode then
27102: LD_VAR 0 2
27106: IFFALSE 27131
// unit := CreateCharacter ( prefix & ident ) else
27108: LD_ADDR_VAR 0 5
27112: PUSH
27113: LD_VAR 0 3
27117: PUSH
27118: LD_VAR 0 1
27122: STR
27123: PPUSH
27124: CALL_OW 34
27128: ST_TO_ADDR
27129: GO 27146
// unit := NewCharacter ( ident ) ;
27131: LD_ADDR_VAR 0 5
27135: PUSH
27136: LD_VAR 0 1
27140: PPUSH
27141: CALL_OW 25
27145: ST_TO_ADDR
// result := unit ;
27146: LD_ADDR_VAR 0 4
27150: PUSH
27151: LD_VAR 0 5
27155: ST_TO_ADDR
// end ;
27156: LD_VAR 0 4
27160: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27161: LD_INT 0
27163: PPUSH
27164: PPUSH
// if not side or not nation then
27165: LD_VAR 0 1
27169: NOT
27170: PUSH
27171: LD_VAR 0 2
27175: NOT
27176: OR
27177: IFFALSE 27181
// exit ;
27179: GO 27949
// case nation of nation_american :
27181: LD_VAR 0 2
27185: PUSH
27186: LD_INT 1
27188: DOUBLE
27189: EQUAL
27190: IFTRUE 27194
27192: GO 27408
27194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27195: LD_ADDR_VAR 0 4
27199: PUSH
27200: LD_INT 35
27202: PUSH
27203: LD_INT 45
27205: PUSH
27206: LD_INT 46
27208: PUSH
27209: LD_INT 47
27211: PUSH
27212: LD_INT 82
27214: PUSH
27215: LD_INT 83
27217: PUSH
27218: LD_INT 84
27220: PUSH
27221: LD_INT 85
27223: PUSH
27224: LD_INT 86
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: LD_INT 6
27235: PUSH
27236: LD_INT 15
27238: PUSH
27239: LD_INT 16
27241: PUSH
27242: LD_INT 7
27244: PUSH
27245: LD_INT 12
27247: PUSH
27248: LD_INT 13
27250: PUSH
27251: LD_INT 10
27253: PUSH
27254: LD_INT 14
27256: PUSH
27257: LD_INT 20
27259: PUSH
27260: LD_INT 21
27262: PUSH
27263: LD_INT 22
27265: PUSH
27266: LD_INT 25
27268: PUSH
27269: LD_INT 32
27271: PUSH
27272: LD_INT 27
27274: PUSH
27275: LD_INT 36
27277: PUSH
27278: LD_INT 69
27280: PUSH
27281: LD_INT 39
27283: PUSH
27284: LD_INT 34
27286: PUSH
27287: LD_INT 40
27289: PUSH
27290: LD_INT 48
27292: PUSH
27293: LD_INT 49
27295: PUSH
27296: LD_INT 50
27298: PUSH
27299: LD_INT 51
27301: PUSH
27302: LD_INT 52
27304: PUSH
27305: LD_INT 53
27307: PUSH
27308: LD_INT 54
27310: PUSH
27311: LD_INT 55
27313: PUSH
27314: LD_INT 56
27316: PUSH
27317: LD_INT 57
27319: PUSH
27320: LD_INT 58
27322: PUSH
27323: LD_INT 59
27325: PUSH
27326: LD_INT 60
27328: PUSH
27329: LD_INT 61
27331: PUSH
27332: LD_INT 62
27334: PUSH
27335: LD_INT 80
27337: PUSH
27338: LD_INT 82
27340: PUSH
27341: LD_INT 83
27343: PUSH
27344: LD_INT 84
27346: PUSH
27347: LD_INT 85
27349: PUSH
27350: LD_INT 86
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
27406: GO 27873
27408: LD_INT 2
27410: DOUBLE
27411: EQUAL
27412: IFTRUE 27416
27414: GO 27642
27416: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27417: LD_ADDR_VAR 0 4
27421: PUSH
27422: LD_INT 35
27424: PUSH
27425: LD_INT 45
27427: PUSH
27428: LD_INT 46
27430: PUSH
27431: LD_INT 47
27433: PUSH
27434: LD_INT 82
27436: PUSH
27437: LD_INT 83
27439: PUSH
27440: LD_INT 84
27442: PUSH
27443: LD_INT 85
27445: PUSH
27446: LD_INT 87
27448: PUSH
27449: LD_INT 70
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: LD_INT 11
27457: PUSH
27458: LD_INT 3
27460: PUSH
27461: LD_INT 4
27463: PUSH
27464: LD_INT 5
27466: PUSH
27467: LD_INT 6
27469: PUSH
27470: LD_INT 15
27472: PUSH
27473: LD_INT 18
27475: PUSH
27476: LD_INT 7
27478: PUSH
27479: LD_INT 17
27481: PUSH
27482: LD_INT 8
27484: PUSH
27485: LD_INT 20
27487: PUSH
27488: LD_INT 21
27490: PUSH
27491: LD_INT 22
27493: PUSH
27494: LD_INT 72
27496: PUSH
27497: LD_INT 26
27499: PUSH
27500: LD_INT 69
27502: PUSH
27503: LD_INT 39
27505: PUSH
27506: LD_INT 40
27508: PUSH
27509: LD_INT 41
27511: PUSH
27512: LD_INT 42
27514: PUSH
27515: LD_INT 43
27517: PUSH
27518: LD_INT 48
27520: PUSH
27521: LD_INT 49
27523: PUSH
27524: LD_INT 50
27526: PUSH
27527: LD_INT 51
27529: PUSH
27530: LD_INT 52
27532: PUSH
27533: LD_INT 53
27535: PUSH
27536: LD_INT 54
27538: PUSH
27539: LD_INT 55
27541: PUSH
27542: LD_INT 56
27544: PUSH
27545: LD_INT 60
27547: PUSH
27548: LD_INT 61
27550: PUSH
27551: LD_INT 62
27553: PUSH
27554: LD_INT 66
27556: PUSH
27557: LD_INT 67
27559: PUSH
27560: LD_INT 68
27562: PUSH
27563: LD_INT 81
27565: PUSH
27566: LD_INT 82
27568: PUSH
27569: LD_INT 83
27571: PUSH
27572: LD_INT 84
27574: PUSH
27575: LD_INT 85
27577: PUSH
27578: LD_INT 87
27580: PUSH
27581: LD_INT 88
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
27640: GO 27873
27642: LD_INT 3
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27872
27650: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27651: LD_ADDR_VAR 0 4
27655: PUSH
27656: LD_INT 46
27658: PUSH
27659: LD_INT 47
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 82
27670: PUSH
27671: LD_INT 83
27673: PUSH
27674: LD_INT 84
27676: PUSH
27677: LD_INT 85
27679: PUSH
27680: LD_INT 86
27682: PUSH
27683: LD_INT 11
27685: PUSH
27686: LD_INT 9
27688: PUSH
27689: LD_INT 20
27691: PUSH
27692: LD_INT 19
27694: PUSH
27695: LD_INT 21
27697: PUSH
27698: LD_INT 24
27700: PUSH
27701: LD_INT 22
27703: PUSH
27704: LD_INT 25
27706: PUSH
27707: LD_INT 28
27709: PUSH
27710: LD_INT 29
27712: PUSH
27713: LD_INT 30
27715: PUSH
27716: LD_INT 31
27718: PUSH
27719: LD_INT 37
27721: PUSH
27722: LD_INT 38
27724: PUSH
27725: LD_INT 32
27727: PUSH
27728: LD_INT 27
27730: PUSH
27731: LD_INT 33
27733: PUSH
27734: LD_INT 69
27736: PUSH
27737: LD_INT 39
27739: PUSH
27740: LD_INT 34
27742: PUSH
27743: LD_INT 40
27745: PUSH
27746: LD_INT 71
27748: PUSH
27749: LD_INT 23
27751: PUSH
27752: LD_INT 44
27754: PUSH
27755: LD_INT 48
27757: PUSH
27758: LD_INT 49
27760: PUSH
27761: LD_INT 50
27763: PUSH
27764: LD_INT 51
27766: PUSH
27767: LD_INT 52
27769: PUSH
27770: LD_INT 53
27772: PUSH
27773: LD_INT 54
27775: PUSH
27776: LD_INT 55
27778: PUSH
27779: LD_INT 56
27781: PUSH
27782: LD_INT 57
27784: PUSH
27785: LD_INT 58
27787: PUSH
27788: LD_INT 59
27790: PUSH
27791: LD_INT 63
27793: PUSH
27794: LD_INT 64
27796: PUSH
27797: LD_INT 65
27799: PUSH
27800: LD_INT 82
27802: PUSH
27803: LD_INT 83
27805: PUSH
27806: LD_INT 84
27808: PUSH
27809: LD_INT 85
27811: PUSH
27812: LD_INT 86
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
27870: GO 27873
27872: POP
// if state > - 1 and state < 3 then
27873: LD_VAR 0 3
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: GREATER
27882: PUSH
27883: LD_VAR 0 3
27887: PUSH
27888: LD_INT 3
27890: LESS
27891: AND
27892: IFFALSE 27949
// for i in result do
27894: LD_ADDR_VAR 0 5
27898: PUSH
27899: LD_VAR 0 4
27903: PUSH
27904: FOR_IN
27905: IFFALSE 27947
// if GetTech ( i , side ) <> state then
27907: LD_VAR 0 5
27911: PPUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: CALL_OW 321
27921: PUSH
27922: LD_VAR 0 3
27926: NONEQUAL
27927: IFFALSE 27945
// result := result diff i ;
27929: LD_ADDR_VAR 0 4
27933: PUSH
27934: LD_VAR 0 4
27938: PUSH
27939: LD_VAR 0 5
27943: DIFF
27944: ST_TO_ADDR
27945: GO 27904
27947: POP
27948: POP
// end ;
27949: LD_VAR 0 4
27953: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27954: LD_INT 0
27956: PPUSH
27957: PPUSH
27958: PPUSH
// result := true ;
27959: LD_ADDR_VAR 0 3
27963: PUSH
27964: LD_INT 1
27966: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27967: LD_ADDR_VAR 0 5
27971: PUSH
27972: LD_VAR 0 2
27976: PPUSH
27977: CALL_OW 480
27981: ST_TO_ADDR
// if not tmp then
27982: LD_VAR 0 5
27986: NOT
27987: IFFALSE 27991
// exit ;
27989: GO 28040
// for i in tmp do
27991: LD_ADDR_VAR 0 4
27995: PUSH
27996: LD_VAR 0 5
28000: PUSH
28001: FOR_IN
28002: IFFALSE 28038
// if GetTech ( i , side ) <> state_researched then
28004: LD_VAR 0 4
28008: PPUSH
28009: LD_VAR 0 1
28013: PPUSH
28014: CALL_OW 321
28018: PUSH
28019: LD_INT 2
28021: NONEQUAL
28022: IFFALSE 28036
// begin result := false ;
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_INT 0
28031: ST_TO_ADDR
// exit ;
28032: POP
28033: POP
28034: GO 28040
// end ;
28036: GO 28001
28038: POP
28039: POP
// end ;
28040: LD_VAR 0 3
28044: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28045: LD_INT 0
28047: PPUSH
28048: PPUSH
28049: PPUSH
28050: PPUSH
28051: PPUSH
28052: PPUSH
28053: PPUSH
28054: PPUSH
28055: PPUSH
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28060: LD_VAR 0 1
28064: NOT
28065: PUSH
28066: LD_VAR 0 1
28070: PPUSH
28071: CALL_OW 257
28075: PUSH
28076: LD_INT 9
28078: NONEQUAL
28079: OR
28080: IFFALSE 28084
// exit ;
28082: GO 28657
// side := GetSide ( unit ) ;
28084: LD_ADDR_VAR 0 9
28088: PUSH
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 255
28098: ST_TO_ADDR
// tech_space := tech_spacanom ;
28099: LD_ADDR_VAR 0 12
28103: PUSH
28104: LD_INT 29
28106: ST_TO_ADDR
// tech_time := tech_taurad ;
28107: LD_ADDR_VAR 0 13
28111: PUSH
28112: LD_INT 28
28114: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28115: LD_ADDR_VAR 0 11
28119: PUSH
28120: LD_VAR 0 1
28124: PPUSH
28125: CALL_OW 310
28129: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28130: LD_VAR 0 11
28134: PPUSH
28135: CALL_OW 247
28139: PUSH
28140: LD_INT 2
28142: EQUAL
28143: IFFALSE 28147
// exit ;
28145: GO 28657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28147: LD_ADDR_VAR 0 8
28151: PUSH
28152: LD_INT 81
28154: PUSH
28155: LD_VAR 0 9
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: LD_INT 21
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: ST_TO_ADDR
// if not tmp then
28190: LD_VAR 0 8
28194: NOT
28195: IFFALSE 28199
// exit ;
28197: GO 28657
// if in_unit then
28199: LD_VAR 0 11
28203: IFFALSE 28227
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28205: LD_ADDR_VAR 0 10
28209: PUSH
28210: LD_VAR 0 8
28214: PPUSH
28215: LD_VAR 0 11
28219: PPUSH
28220: CALL_OW 74
28224: ST_TO_ADDR
28225: GO 28247
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28227: LD_ADDR_VAR 0 10
28231: PUSH
28232: LD_VAR 0 8
28236: PPUSH
28237: LD_VAR 0 1
28241: PPUSH
28242: CALL_OW 74
28246: ST_TO_ADDR
// if not enemy then
28247: LD_VAR 0 10
28251: NOT
28252: IFFALSE 28256
// exit ;
28254: GO 28657
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28256: LD_VAR 0 11
28260: PUSH
28261: LD_VAR 0 11
28265: PPUSH
28266: LD_VAR 0 10
28270: PPUSH
28271: CALL_OW 296
28275: PUSH
28276: LD_INT 13
28278: GREATER
28279: AND
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_VAR 0 10
28290: PPUSH
28291: CALL_OW 296
28295: PUSH
28296: LD_INT 12
28298: GREATER
28299: OR
28300: IFFALSE 28304
// exit ;
28302: GO 28657
// missile := [ 1 ] ;
28304: LD_ADDR_VAR 0 14
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: EMPTY
28313: LIST
28314: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28315: LD_VAR 0 9
28319: PPUSH
28320: LD_VAR 0 12
28324: PPUSH
28325: CALL_OW 325
28329: IFFALSE 28358
// missile := Insert ( missile , missile + 1 , 2 ) ;
28331: LD_ADDR_VAR 0 14
28335: PUSH
28336: LD_VAR 0 14
28340: PPUSH
28341: LD_VAR 0 14
28345: PUSH
28346: LD_INT 1
28348: PLUS
28349: PPUSH
28350: LD_INT 2
28352: PPUSH
28353: CALL_OW 2
28357: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28358: LD_VAR 0 9
28362: PPUSH
28363: LD_VAR 0 13
28367: PPUSH
28368: CALL_OW 325
28372: PUSH
28373: LD_VAR 0 10
28377: PPUSH
28378: CALL_OW 255
28382: PPUSH
28383: LD_VAR 0 13
28387: PPUSH
28388: CALL_OW 325
28392: NOT
28393: AND
28394: IFFALSE 28423
// missile := Insert ( missile , missile + 1 , 3 ) ;
28396: LD_ADDR_VAR 0 14
28400: PUSH
28401: LD_VAR 0 14
28405: PPUSH
28406: LD_VAR 0 14
28410: PUSH
28411: LD_INT 1
28413: PLUS
28414: PPUSH
28415: LD_INT 3
28417: PPUSH
28418: CALL_OW 2
28422: ST_TO_ADDR
// if missile < 2 then
28423: LD_VAR 0 14
28427: PUSH
28428: LD_INT 2
28430: LESS
28431: IFFALSE 28435
// exit ;
28433: GO 28657
// x := GetX ( enemy ) ;
28435: LD_ADDR_VAR 0 4
28439: PUSH
28440: LD_VAR 0 10
28444: PPUSH
28445: CALL_OW 250
28449: ST_TO_ADDR
// y := GetY ( enemy ) ;
28450: LD_ADDR_VAR 0 5
28454: PUSH
28455: LD_VAR 0 10
28459: PPUSH
28460: CALL_OW 251
28464: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28465: LD_ADDR_VAR 0 6
28469: PUSH
28470: LD_VAR 0 4
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PPUSH
28479: LD_INT 1
28481: PPUSH
28482: CALL_OW 12
28486: PLUS
28487: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28488: LD_ADDR_VAR 0 7
28492: PUSH
28493: LD_VAR 0 5
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PPUSH
28502: LD_INT 1
28504: PPUSH
28505: CALL_OW 12
28509: PLUS
28510: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28511: LD_VAR 0 6
28515: PPUSH
28516: LD_VAR 0 7
28520: PPUSH
28521: CALL_OW 488
28525: NOT
28526: IFFALSE 28548
// begin _x := x ;
28528: LD_ADDR_VAR 0 6
28532: PUSH
28533: LD_VAR 0 4
28537: ST_TO_ADDR
// _y := y ;
28538: LD_ADDR_VAR 0 7
28542: PUSH
28543: LD_VAR 0 5
28547: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28548: LD_ADDR_VAR 0 3
28552: PUSH
28553: LD_INT 1
28555: PPUSH
28556: LD_VAR 0 14
28560: PPUSH
28561: CALL_OW 12
28565: ST_TO_ADDR
// case i of 1 :
28566: LD_VAR 0 3
28570: PUSH
28571: LD_INT 1
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28579
28577: GO 28596
28579: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28580: LD_VAR 0 1
28584: PPUSH
28585: LD_VAR 0 10
28589: PPUSH
28590: CALL_OW 115
28594: GO 28657
28596: LD_INT 2
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28626
28604: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_VAR 0 6
28614: PPUSH
28615: LD_VAR 0 7
28619: PPUSH
28620: CALL_OW 153
28624: GO 28657
28626: LD_INT 3
28628: DOUBLE
28629: EQUAL
28630: IFTRUE 28634
28632: GO 28656
28634: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28635: LD_VAR 0 1
28639: PPUSH
28640: LD_VAR 0 6
28644: PPUSH
28645: LD_VAR 0 7
28649: PPUSH
28650: CALL_OW 154
28654: GO 28657
28656: POP
// end ;
28657: LD_VAR 0 2
28661: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
28667: PPUSH
28668: PPUSH
28669: PPUSH
// if not unit or not building then
28670: LD_VAR 0 1
28674: NOT
28675: PUSH
28676: LD_VAR 0 2
28680: NOT
28681: OR
28682: IFFALSE 28686
// exit ;
28684: GO 28844
// x := GetX ( building ) ;
28686: LD_ADDR_VAR 0 5
28690: PUSH
28691: LD_VAR 0 2
28695: PPUSH
28696: CALL_OW 250
28700: ST_TO_ADDR
// y := GetY ( building ) ;
28701: LD_ADDR_VAR 0 6
28705: PUSH
28706: LD_VAR 0 2
28710: PPUSH
28711: CALL_OW 251
28715: ST_TO_ADDR
// for i = 0 to 5 do
28716: LD_ADDR_VAR 0 4
28720: PUSH
28721: DOUBLE
28722: LD_INT 0
28724: DEC
28725: ST_TO_ADDR
28726: LD_INT 5
28728: PUSH
28729: FOR_TO
28730: IFFALSE 28842
// begin _x := ShiftX ( x , i , 3 ) ;
28732: LD_ADDR_VAR 0 7
28736: PUSH
28737: LD_VAR 0 5
28741: PPUSH
28742: LD_VAR 0 4
28746: PPUSH
28747: LD_INT 3
28749: PPUSH
28750: CALL_OW 272
28754: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28755: LD_ADDR_VAR 0 8
28759: PUSH
28760: LD_VAR 0 6
28764: PPUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: LD_INT 3
28772: PPUSH
28773: CALL_OW 273
28777: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28778: LD_VAR 0 7
28782: PPUSH
28783: LD_VAR 0 8
28787: PPUSH
28788: CALL_OW 488
28792: NOT
28793: IFFALSE 28797
// continue ;
28795: GO 28729
// if HexInfo ( _x , _y ) = 0 then
28797: LD_VAR 0 7
28801: PPUSH
28802: LD_VAR 0 8
28806: PPUSH
28807: CALL_OW 428
28811: PUSH
28812: LD_INT 0
28814: EQUAL
28815: IFFALSE 28840
// begin ComMoveXY ( unit , _x , _y ) ;
28817: LD_VAR 0 1
28821: PPUSH
28822: LD_VAR 0 7
28826: PPUSH
28827: LD_VAR 0 8
28831: PPUSH
28832: CALL_OW 111
// exit ;
28836: POP
28837: POP
28838: GO 28844
// end ; end ;
28840: GO 28729
28842: POP
28843: POP
// end ;
28844: LD_VAR 0 3
28848: RET
// export function ScanBase ( side , base_area ) ; begin
28849: LD_INT 0
28851: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28852: LD_ADDR_VAR 0 3
28856: PUSH
28857: LD_VAR 0 2
28861: PPUSH
28862: LD_INT 81
28864: PUSH
28865: LD_VAR 0 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 70
28878: ST_TO_ADDR
// end ;
28879: LD_VAR 0 3
28883: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28884: LD_INT 0
28886: PPUSH
28887: PPUSH
28888: PPUSH
28889: PPUSH
// result := false ;
28890: LD_ADDR_VAR 0 2
28894: PUSH
28895: LD_INT 0
28897: ST_TO_ADDR
// side := GetSide ( unit ) ;
28898: LD_ADDR_VAR 0 3
28902: PUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 255
28912: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28913: LD_ADDR_VAR 0 4
28917: PUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 248
28927: ST_TO_ADDR
// case nat of 1 :
28928: LD_VAR 0 4
28932: PUSH
28933: LD_INT 1
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28952
28941: POP
// tech := tech_lassight ; 2 :
28942: LD_ADDR_VAR 0 5
28946: PUSH
28947: LD_INT 12
28949: ST_TO_ADDR
28950: GO 28991
28952: LD_INT 2
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28971
28960: POP
// tech := tech_mortar ; 3 :
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_INT 41
28968: ST_TO_ADDR
28969: GO 28991
28971: LD_INT 3
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 28979
28977: GO 28990
28979: POP
// tech := tech_bazooka ; end ;
28980: LD_ADDR_VAR 0 5
28984: PUSH
28985: LD_INT 44
28987: ST_TO_ADDR
28988: GO 28991
28990: POP
// if Researched ( side , tech ) then
28991: LD_VAR 0 3
28995: PPUSH
28996: LD_VAR 0 5
29000: PPUSH
29001: CALL_OW 325
29005: IFFALSE 29032
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29007: LD_ADDR_VAR 0 2
29011: PUSH
29012: LD_INT 5
29014: PUSH
29015: LD_INT 8
29017: PUSH
29018: LD_INT 9
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: PUSH
29026: LD_VAR 0 4
29030: ARRAY
29031: ST_TO_ADDR
// end ;
29032: LD_VAR 0 2
29036: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29037: LD_INT 0
29039: PPUSH
29040: PPUSH
29041: PPUSH
// if not mines then
29042: LD_VAR 0 2
29046: NOT
29047: IFFALSE 29051
// exit ;
29049: GO 29195
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29051: LD_ADDR_VAR 0 5
29055: PUSH
29056: LD_INT 81
29058: PUSH
29059: LD_VAR 0 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 3
29070: PUSH
29071: LD_INT 21
29073: PUSH
29074: LD_INT 3
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PPUSH
29089: CALL_OW 69
29093: ST_TO_ADDR
// for i in mines do
29094: LD_ADDR_VAR 0 4
29098: PUSH
29099: LD_VAR 0 2
29103: PUSH
29104: FOR_IN
29105: IFFALSE 29193
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29107: LD_VAR 0 4
29111: PUSH
29112: LD_INT 1
29114: ARRAY
29115: PPUSH
29116: LD_VAR 0 4
29120: PUSH
29121: LD_INT 2
29123: ARRAY
29124: PPUSH
29125: CALL_OW 458
29129: NOT
29130: IFFALSE 29134
// continue ;
29132: GO 29104
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29134: LD_VAR 0 4
29138: PUSH
29139: LD_INT 1
29141: ARRAY
29142: PPUSH
29143: LD_VAR 0 4
29147: PUSH
29148: LD_INT 2
29150: ARRAY
29151: PPUSH
29152: CALL_OW 428
29156: PUSH
29157: LD_VAR 0 5
29161: IN
29162: IFFALSE 29191
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29164: LD_VAR 0 4
29168: PUSH
29169: LD_INT 1
29171: ARRAY
29172: PPUSH
29173: LD_VAR 0 4
29177: PUSH
29178: LD_INT 2
29180: ARRAY
29181: PPUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 456
// end ;
29191: GO 29104
29193: POP
29194: POP
// end ;
29195: LD_VAR 0 3
29199: RET
// export function Count ( array ) ; var i ; begin
29200: LD_INT 0
29202: PPUSH
29203: PPUSH
// result := 0 ;
29204: LD_ADDR_VAR 0 2
29208: PUSH
29209: LD_INT 0
29211: ST_TO_ADDR
// for i in array do
29212: LD_ADDR_VAR 0 3
29216: PUSH
29217: LD_VAR 0 1
29221: PUSH
29222: FOR_IN
29223: IFFALSE 29247
// if i then
29225: LD_VAR 0 3
29229: IFFALSE 29245
// result := result + 1 ;
29231: LD_ADDR_VAR 0 2
29235: PUSH
29236: LD_VAR 0 2
29240: PUSH
29241: LD_INT 1
29243: PLUS
29244: ST_TO_ADDR
29245: GO 29222
29247: POP
29248: POP
// end ;
29249: LD_VAR 0 2
29253: RET
// export function IsEmpty ( building ) ; begin
29254: LD_INT 0
29256: PPUSH
// if not building then
29257: LD_VAR 0 1
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29309
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29266: LD_ADDR_VAR 0 2
29270: PUSH
29271: LD_VAR 0 1
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 255
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 58
29295: PUSH
29296: EMPTY
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PPUSH
29303: CALL_OW 69
29307: IN
29308: ST_TO_ADDR
// end ;
29309: LD_VAR 0 2
29313: RET
// export function IsNotFull ( building ) ; begin
29314: LD_INT 0
29316: PPUSH
// if not building then
29317: LD_VAR 0 1
29321: NOT
29322: IFFALSE 29326
// exit ;
29324: GO 29345
// result := UnitsInside ( building ) < 6 ;
29326: LD_ADDR_VAR 0 2
29330: PUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 313
29340: PUSH
29341: LD_INT 6
29343: LESS
29344: ST_TO_ADDR
// end ;
29345: LD_VAR 0 2
29349: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
// tmp := [ ] ;
29356: LD_ADDR_VAR 0 3
29360: PUSH
29361: EMPTY
29362: ST_TO_ADDR
// list := [ ] ;
29363: LD_ADDR_VAR 0 5
29367: PUSH
29368: EMPTY
29369: ST_TO_ADDR
// for i = 16 to 25 do
29370: LD_ADDR_VAR 0 4
29374: PUSH
29375: DOUBLE
29376: LD_INT 16
29378: DEC
29379: ST_TO_ADDR
29380: LD_INT 25
29382: PUSH
29383: FOR_TO
29384: IFFALSE 29457
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29386: LD_ADDR_VAR 0 3
29390: PUSH
29391: LD_VAR 0 3
29395: PUSH
29396: LD_INT 22
29398: PUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 255
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 91
29415: PUSH
29416: LD_VAR 0 1
29420: PUSH
29421: LD_INT 6
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 30
29431: PUSH
29432: LD_VAR 0 4
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: PPUSH
29449: CALL_OW 69
29453: ADD
29454: ST_TO_ADDR
29455: GO 29383
29457: POP
29458: POP
// for i = 1 to tmp do
29459: LD_ADDR_VAR 0 4
29463: PUSH
29464: DOUBLE
29465: LD_INT 1
29467: DEC
29468: ST_TO_ADDR
29469: LD_VAR 0 3
29473: PUSH
29474: FOR_TO
29475: IFFALSE 29563
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29477: LD_ADDR_VAR 0 5
29481: PUSH
29482: LD_VAR 0 5
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_VAR 0 4
29496: ARRAY
29497: PPUSH
29498: CALL_OW 266
29502: PUSH
29503: LD_VAR 0 3
29507: PUSH
29508: LD_VAR 0 4
29512: ARRAY
29513: PPUSH
29514: CALL_OW 250
29518: PUSH
29519: LD_VAR 0 3
29523: PUSH
29524: LD_VAR 0 4
29528: ARRAY
29529: PPUSH
29530: CALL_OW 251
29534: PUSH
29535: LD_VAR 0 3
29539: PUSH
29540: LD_VAR 0 4
29544: ARRAY
29545: PPUSH
29546: CALL_OW 254
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: ADD
29560: ST_TO_ADDR
29561: GO 29474
29563: POP
29564: POP
// result := list ;
29565: LD_ADDR_VAR 0 2
29569: PUSH
29570: LD_VAR 0 5
29574: ST_TO_ADDR
// end ;
29575: LD_VAR 0 2
29579: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29580: LD_INT 0
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
29586: PPUSH
29587: PPUSH
29588: PPUSH
// if not factory then
29589: LD_VAR 0 1
29593: NOT
29594: IFFALSE 29598
// exit ;
29596: GO 30191
// if control = control_apeman then
29598: LD_VAR 0 4
29602: PUSH
29603: LD_INT 5
29605: EQUAL
29606: IFFALSE 29715
// begin tmp := UnitsInside ( factory ) ;
29608: LD_ADDR_VAR 0 8
29612: PUSH
29613: LD_VAR 0 1
29617: PPUSH
29618: CALL_OW 313
29622: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29623: LD_VAR 0 8
29627: PPUSH
29628: LD_INT 25
29630: PUSH
29631: LD_INT 12
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PPUSH
29638: CALL_OW 72
29642: NOT
29643: IFFALSE 29653
// control := control_manual ;
29645: LD_ADDR_VAR 0 4
29649: PUSH
29650: LD_INT 1
29652: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29653: LD_ADDR_VAR 0 8
29657: PUSH
29658: LD_VAR 0 1
29662: PPUSH
29663: CALL 29350 0 1
29667: ST_TO_ADDR
// if tmp then
29668: LD_VAR 0 8
29672: IFFALSE 29715
// begin for i in tmp do
29674: LD_ADDR_VAR 0 7
29678: PUSH
29679: LD_VAR 0 8
29683: PUSH
29684: FOR_IN
29685: IFFALSE 29713
// if i [ 1 ] = b_ext_radio then
29687: LD_VAR 0 7
29691: PUSH
29692: LD_INT 1
29694: ARRAY
29695: PUSH
29696: LD_INT 22
29698: EQUAL
29699: IFFALSE 29711
// begin control := control_remote ;
29701: LD_ADDR_VAR 0 4
29705: PUSH
29706: LD_INT 2
29708: ST_TO_ADDR
// break ;
29709: GO 29713
// end ;
29711: GO 29684
29713: POP
29714: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29715: LD_VAR 0 1
29719: PPUSH
29720: LD_VAR 0 2
29724: PPUSH
29725: LD_VAR 0 3
29729: PPUSH
29730: LD_VAR 0 4
29734: PPUSH
29735: LD_VAR 0 5
29739: PPUSH
29740: CALL_OW 448
29744: IFFALSE 29779
// begin result := [ chassis , engine , control , weapon ] ;
29746: LD_ADDR_VAR 0 6
29750: PUSH
29751: LD_VAR 0 2
29755: PUSH
29756: LD_VAR 0 3
29760: PUSH
29761: LD_VAR 0 4
29765: PUSH
29766: LD_VAR 0 5
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
// exit ;
29777: GO 30191
// end ; _chassis := AvailableChassisList ( factory ) ;
29779: LD_ADDR_VAR 0 9
29783: PUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 475
29793: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29794: LD_ADDR_VAR 0 11
29798: PUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 476
29808: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29809: LD_ADDR_VAR 0 12
29813: PUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 477
29823: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29824: LD_ADDR_VAR 0 10
29828: PUSH
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 478
29838: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29839: LD_VAR 0 9
29843: NOT
29844: PUSH
29845: LD_VAR 0 11
29849: NOT
29850: OR
29851: PUSH
29852: LD_VAR 0 12
29856: NOT
29857: OR
29858: PUSH
29859: LD_VAR 0 10
29863: NOT
29864: OR
29865: IFFALSE 29900
// begin result := [ chassis , engine , control , weapon ] ;
29867: LD_ADDR_VAR 0 6
29871: PUSH
29872: LD_VAR 0 2
29876: PUSH
29877: LD_VAR 0 3
29881: PUSH
29882: LD_VAR 0 4
29886: PUSH
29887: LD_VAR 0 5
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
// exit ;
29898: GO 30191
// end ; if not chassis in _chassis then
29900: LD_VAR 0 2
29904: PUSH
29905: LD_VAR 0 9
29909: IN
29910: NOT
29911: IFFALSE 29937
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29913: LD_ADDR_VAR 0 2
29917: PUSH
29918: LD_VAR 0 9
29922: PUSH
29923: LD_INT 1
29925: PPUSH
29926: LD_VAR 0 9
29930: PPUSH
29931: CALL_OW 12
29935: ARRAY
29936: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_VAR 0 3
29946: PPUSH
29947: CALL 30196 0 2
29951: NOT
29952: IFFALSE 30011
// repeat engine := _engine [ 1 ] ;
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: LD_VAR 0 11
29963: PUSH
29964: LD_INT 1
29966: ARRAY
29967: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29968: LD_ADDR_VAR 0 11
29972: PUSH
29973: LD_VAR 0 11
29977: PPUSH
29978: LD_INT 1
29980: PPUSH
29981: CALL_OW 3
29985: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29986: LD_VAR 0 2
29990: PPUSH
29991: LD_VAR 0 3
29995: PPUSH
29996: CALL 30196 0 2
30000: PUSH
30001: LD_VAR 0 11
30005: PUSH
30006: EMPTY
30007: EQUAL
30008: OR
30009: IFFALSE 29954
// if not control in _control then
30011: LD_VAR 0 4
30015: PUSH
30016: LD_VAR 0 12
30020: IN
30021: NOT
30022: IFFALSE 30048
// control := _control [ rand ( 1 , _control ) ] ;
30024: LD_ADDR_VAR 0 4
30028: PUSH
30029: LD_VAR 0 12
30033: PUSH
30034: LD_INT 1
30036: PPUSH
30037: LD_VAR 0 12
30041: PPUSH
30042: CALL_OW 12
30046: ARRAY
30047: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30048: LD_VAR 0 2
30052: PPUSH
30053: LD_VAR 0 5
30057: PPUSH
30058: CALL 30416 0 2
30062: NOT
30063: IFFALSE 30122
// repeat weapon := _weapon [ 1 ] ;
30065: LD_ADDR_VAR 0 5
30069: PUSH
30070: LD_VAR 0 10
30074: PUSH
30075: LD_INT 1
30077: ARRAY
30078: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30079: LD_ADDR_VAR 0 10
30083: PUSH
30084: LD_VAR 0 10
30088: PPUSH
30089: LD_INT 1
30091: PPUSH
30092: CALL_OW 3
30096: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30097: LD_VAR 0 2
30101: PPUSH
30102: LD_VAR 0 5
30106: PPUSH
30107: CALL 30416 0 2
30111: PUSH
30112: LD_VAR 0 10
30116: PUSH
30117: EMPTY
30118: EQUAL
30119: OR
30120: IFFALSE 30065
// result := [ ] ;
30122: LD_ADDR_VAR 0 6
30126: PUSH
30127: EMPTY
30128: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30129: LD_VAR 0 1
30133: PPUSH
30134: LD_VAR 0 2
30138: PPUSH
30139: LD_VAR 0 3
30143: PPUSH
30144: LD_VAR 0 4
30148: PPUSH
30149: LD_VAR 0 5
30153: PPUSH
30154: CALL_OW 448
30158: IFFALSE 30191
// result := [ chassis , engine , control , weapon ] ;
30160: LD_ADDR_VAR 0 6
30164: PUSH
30165: LD_VAR 0 2
30169: PUSH
30170: LD_VAR 0 3
30174: PUSH
30175: LD_VAR 0 4
30179: PUSH
30180: LD_VAR 0 5
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
// end ;
30191: LD_VAR 0 6
30195: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30196: LD_INT 0
30198: PPUSH
// if not chassis or not engine then
30199: LD_VAR 0 1
30203: NOT
30204: PUSH
30205: LD_VAR 0 2
30209: NOT
30210: OR
30211: IFFALSE 30215
// exit ;
30213: GO 30411
// case engine of engine_solar :
30215: LD_VAR 0 2
30219: PUSH
30220: LD_INT 2
30222: DOUBLE
30223: EQUAL
30224: IFTRUE 30228
30226: GO 30266
30228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_INT 11
30236: PUSH
30237: LD_INT 12
30239: PUSH
30240: LD_INT 13
30242: PUSH
30243: LD_INT 14
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
30264: GO 30395
30266: LD_INT 1
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30336
30274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: LD_INT 11
30282: PUSH
30283: LD_INT 12
30285: PUSH
30286: LD_INT 13
30288: PUSH
30289: LD_INT 14
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: LD_INT 4
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: LD_INT 21
30309: PUSH
30310: LD_INT 23
30312: PUSH
30313: LD_INT 22
30315: PUSH
30316: LD_INT 24
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: ST_TO_ADDR
30334: GO 30395
30336: LD_INT 3
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30394
30344: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30345: LD_ADDR_VAR 0 3
30349: PUSH
30350: LD_INT 13
30352: PUSH
30353: LD_INT 14
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 4
30364: PUSH
30365: LD_INT 5
30367: PUSH
30368: LD_INT 21
30370: PUSH
30371: LD_INT 22
30373: PUSH
30374: LD_INT 23
30376: PUSH
30377: LD_INT 24
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
30392: GO 30395
30394: POP
// result := ( chassis in result ) ;
30395: LD_ADDR_VAR 0 3
30399: PUSH
30400: LD_VAR 0 1
30404: PUSH
30405: LD_VAR 0 3
30409: IN
30410: ST_TO_ADDR
// end ;
30411: LD_VAR 0 3
30415: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30416: LD_INT 0
30418: PPUSH
// if not chassis or not weapon then
30419: LD_VAR 0 1
30423: NOT
30424: PUSH
30425: LD_VAR 0 2
30429: NOT
30430: OR
30431: IFFALSE 30435
// exit ;
30433: GO 31497
// case weapon of us_machine_gun :
30435: LD_VAR 0 2
30439: PUSH
30440: LD_INT 2
30442: DOUBLE
30443: EQUAL
30444: IFTRUE 30448
30446: GO 30478
30448: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30449: LD_ADDR_VAR 0 3
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 4
30465: PUSH
30466: LD_INT 5
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: ST_TO_ADDR
30476: GO 31481
30478: LD_INT 3
30480: DOUBLE
30481: EQUAL
30482: IFTRUE 30486
30484: GO 30516
30486: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30487: LD_ADDR_VAR 0 3
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 4
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: ST_TO_ADDR
30514: GO 31481
30516: LD_INT 11
30518: DOUBLE
30519: EQUAL
30520: IFTRUE 30524
30522: GO 30554
30524: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30525: LD_ADDR_VAR 0 3
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
30552: GO 31481
30554: LD_INT 4
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30588
30562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_INT 2
30570: PUSH
30571: LD_INT 3
30573: PUSH
30574: LD_INT 4
30576: PUSH
30577: LD_INT 5
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
30586: GO 31481
30588: LD_INT 5
30590: DOUBLE
30591: EQUAL
30592: IFTRUE 30596
30594: GO 30622
30596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30597: LD_ADDR_VAR 0 3
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 3
30607: PUSH
30608: LD_INT 4
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
30620: GO 31481
30622: LD_INT 9
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30656
30630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: LD_INT 3
30641: PUSH
30642: LD_INT 4
30644: PUSH
30645: LD_INT 5
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
30654: GO 31481
30656: LD_INT 7
30658: DOUBLE
30659: EQUAL
30660: IFTRUE 30664
30662: GO 30690
30664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 3
30675: PUSH
30676: LD_INT 4
30678: PUSH
30679: LD_INT 5
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: ST_TO_ADDR
30688: GO 31481
30690: LD_INT 12
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30724
30698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30699: LD_ADDR_VAR 0 3
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: LD_INT 4
30712: PUSH
30713: LD_INT 5
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
30722: GO 31481
30724: LD_INT 13
30726: DOUBLE
30727: EQUAL
30728: IFTRUE 30732
30730: GO 30758
30732: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30733: LD_ADDR_VAR 0 3
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 3
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: LD_INT 5
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: ST_TO_ADDR
30756: GO 31481
30758: LD_INT 14
30760: DOUBLE
30761: EQUAL
30762: IFTRUE 30766
30764: GO 30784
30766: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30767: LD_ADDR_VAR 0 3
30771: PUSH
30772: LD_INT 4
30774: PUSH
30775: LD_INT 5
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: ST_TO_ADDR
30782: GO 31481
30784: LD_INT 6
30786: DOUBLE
30787: EQUAL
30788: IFTRUE 30792
30790: GO 30810
30792: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30793: LD_ADDR_VAR 0 3
30797: PUSH
30798: LD_INT 4
30800: PUSH
30801: LD_INT 5
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: ST_TO_ADDR
30808: GO 31481
30810: LD_INT 10
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30836
30818: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: LD_INT 4
30826: PUSH
30827: LD_INT 5
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: ST_TO_ADDR
30834: GO 31481
30836: LD_INT 22
30838: DOUBLE
30839: EQUAL
30840: IFTRUE 30844
30842: GO 30870
30844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30845: LD_ADDR_VAR 0 3
30849: PUSH
30850: LD_INT 11
30852: PUSH
30853: LD_INT 12
30855: PUSH
30856: LD_INT 13
30858: PUSH
30859: LD_INT 14
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
30868: GO 31481
30870: LD_INT 23
30872: DOUBLE
30873: EQUAL
30874: IFTRUE 30878
30876: GO 30904
30878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30879: LD_ADDR_VAR 0 3
30883: PUSH
30884: LD_INT 11
30886: PUSH
30887: LD_INT 12
30889: PUSH
30890: LD_INT 13
30892: PUSH
30893: LD_INT 14
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
30902: GO 31481
30904: LD_INT 24
30906: DOUBLE
30907: EQUAL
30908: IFTRUE 30912
30910: GO 30938
30912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30913: LD_ADDR_VAR 0 3
30917: PUSH
30918: LD_INT 11
30920: PUSH
30921: LD_INT 12
30923: PUSH
30924: LD_INT 13
30926: PUSH
30927: LD_INT 14
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: ST_TO_ADDR
30936: GO 31481
30938: LD_INT 30
30940: DOUBLE
30941: EQUAL
30942: IFTRUE 30946
30944: GO 30972
30946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_INT 11
30954: PUSH
30955: LD_INT 12
30957: PUSH
30958: LD_INT 13
30960: PUSH
30961: LD_INT 14
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: ST_TO_ADDR
30970: GO 31481
30972: LD_INT 25
30974: DOUBLE
30975: EQUAL
30976: IFTRUE 30980
30978: GO 30998
30980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30981: LD_ADDR_VAR 0 3
30985: PUSH
30986: LD_INT 13
30988: PUSH
30989: LD_INT 14
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: ST_TO_ADDR
30996: GO 31481
30998: LD_INT 27
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31024
31006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 13
31014: PUSH
31015: LD_INT 14
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: ST_TO_ADDR
31022: GO 31481
31024: LD_EXP 115
31028: DOUBLE
31029: EQUAL
31030: IFTRUE 31034
31032: GO 31060
31034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31035: LD_ADDR_VAR 0 3
31039: PUSH
31040: LD_INT 11
31042: PUSH
31043: LD_INT 12
31045: PUSH
31046: LD_INT 13
31048: PUSH
31049: LD_INT 14
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
31058: GO 31481
31060: LD_INT 28
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31086
31068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_INT 13
31076: PUSH
31077: LD_INT 14
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: ST_TO_ADDR
31084: GO 31481
31086: LD_INT 29
31088: DOUBLE
31089: EQUAL
31090: IFTRUE 31094
31092: GO 31112
31094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31095: LD_ADDR_VAR 0 3
31099: PUSH
31100: LD_INT 13
31102: PUSH
31103: LD_INT 14
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: ST_TO_ADDR
31110: GO 31481
31112: LD_INT 31
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31120
31118: GO 31138
31120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31121: LD_ADDR_VAR 0 3
31125: PUSH
31126: LD_INT 13
31128: PUSH
31129: LD_INT 14
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: ST_TO_ADDR
31136: GO 31481
31138: LD_INT 26
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31164
31146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31147: LD_ADDR_VAR 0 3
31151: PUSH
31152: LD_INT 13
31154: PUSH
31155: LD_INT 14
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: ST_TO_ADDR
31162: GO 31481
31164: LD_INT 42
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31198
31172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 21
31180: PUSH
31181: LD_INT 22
31183: PUSH
31184: LD_INT 23
31186: PUSH
31187: LD_INT 24
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
31196: GO 31481
31198: LD_INT 43
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31232
31206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_INT 21
31214: PUSH
31215: LD_INT 22
31217: PUSH
31218: LD_INT 23
31220: PUSH
31221: LD_INT 24
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
31230: GO 31481
31232: LD_INT 44
31234: DOUBLE
31235: EQUAL
31236: IFTRUE 31240
31238: GO 31266
31240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31241: LD_ADDR_VAR 0 3
31245: PUSH
31246: LD_INT 21
31248: PUSH
31249: LD_INT 22
31251: PUSH
31252: LD_INT 23
31254: PUSH
31255: LD_INT 24
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
31264: GO 31481
31266: LD_INT 45
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31300
31274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31275: LD_ADDR_VAR 0 3
31279: PUSH
31280: LD_INT 21
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_INT 23
31288: PUSH
31289: LD_INT 24
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: ST_TO_ADDR
31298: GO 31481
31300: LD_INT 49
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31308
31306: GO 31334
31308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_INT 21
31316: PUSH
31317: LD_INT 22
31319: PUSH
31320: LD_INT 23
31322: PUSH
31323: LD_INT 24
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 31481
31334: LD_INT 51
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31368
31342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_INT 21
31350: PUSH
31351: LD_INT 22
31353: PUSH
31354: LD_INT 23
31356: PUSH
31357: LD_INT 24
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
31366: GO 31481
31368: LD_INT 52
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31402
31376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_INT 21
31384: PUSH
31385: LD_INT 22
31387: PUSH
31388: LD_INT 23
31390: PUSH
31391: LD_INT 24
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
31400: GO 31481
31402: LD_INT 53
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31428
31410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31411: LD_ADDR_VAR 0 3
31415: PUSH
31416: LD_INT 23
31418: PUSH
31419: LD_INT 24
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: ST_TO_ADDR
31426: GO 31481
31428: LD_INT 46
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31454
31436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 23
31444: PUSH
31445: LD_INT 24
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: ST_TO_ADDR
31452: GO 31481
31454: LD_INT 47
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31480
31462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31463: LD_ADDR_VAR 0 3
31467: PUSH
31468: LD_INT 23
31470: PUSH
31471: LD_INT 24
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: ST_TO_ADDR
31478: GO 31481
31480: POP
// result := ( chassis in result ) ;
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_VAR 0 1
31490: PUSH
31491: LD_VAR 0 3
31495: IN
31496: ST_TO_ADDR
// end ;
31497: LD_VAR 0 3
31501: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
31506: PPUSH
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
// result := array ;
31511: LD_ADDR_VAR 0 5
31515: PUSH
31516: LD_VAR 0 1
31520: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31521: LD_VAR 0 1
31525: NOT
31526: PUSH
31527: LD_VAR 0 2
31531: NOT
31532: OR
31533: PUSH
31534: LD_VAR 0 3
31538: NOT
31539: OR
31540: PUSH
31541: LD_VAR 0 2
31545: PUSH
31546: LD_VAR 0 1
31550: GREATER
31551: OR
31552: PUSH
31553: LD_VAR 0 3
31557: PUSH
31558: LD_VAR 0 1
31562: GREATER
31563: OR
31564: IFFALSE 31568
// exit ;
31566: GO 31864
// if direction then
31568: LD_VAR 0 4
31572: IFFALSE 31636
// begin d := 1 ;
31574: LD_ADDR_VAR 0 9
31578: PUSH
31579: LD_INT 1
31581: ST_TO_ADDR
// if i_from > i_to then
31582: LD_VAR 0 2
31586: PUSH
31587: LD_VAR 0 3
31591: GREATER
31592: IFFALSE 31618
// length := ( array - i_from ) + i_to else
31594: LD_ADDR_VAR 0 11
31598: PUSH
31599: LD_VAR 0 1
31603: PUSH
31604: LD_VAR 0 2
31608: MINUS
31609: PUSH
31610: LD_VAR 0 3
31614: PLUS
31615: ST_TO_ADDR
31616: GO 31634
// length := i_to - i_from ;
31618: LD_ADDR_VAR 0 11
31622: PUSH
31623: LD_VAR 0 3
31627: PUSH
31628: LD_VAR 0 2
31632: MINUS
31633: ST_TO_ADDR
// end else
31634: GO 31697
// begin d := - 1 ;
31636: LD_ADDR_VAR 0 9
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: ST_TO_ADDR
// if i_from > i_to then
31645: LD_VAR 0 2
31649: PUSH
31650: LD_VAR 0 3
31654: GREATER
31655: IFFALSE 31675
// length := i_from - i_to else
31657: LD_ADDR_VAR 0 11
31661: PUSH
31662: LD_VAR 0 2
31666: PUSH
31667: LD_VAR 0 3
31671: MINUS
31672: ST_TO_ADDR
31673: GO 31697
// length := ( array - i_to ) + i_from ;
31675: LD_ADDR_VAR 0 11
31679: PUSH
31680: LD_VAR 0 1
31684: PUSH
31685: LD_VAR 0 3
31689: MINUS
31690: PUSH
31691: LD_VAR 0 2
31695: PLUS
31696: ST_TO_ADDR
// end ; if not length then
31697: LD_VAR 0 11
31701: NOT
31702: IFFALSE 31706
// exit ;
31704: GO 31864
// tmp := array ;
31706: LD_ADDR_VAR 0 10
31710: PUSH
31711: LD_VAR 0 1
31715: ST_TO_ADDR
// for i = 1 to length do
31716: LD_ADDR_VAR 0 6
31720: PUSH
31721: DOUBLE
31722: LD_INT 1
31724: DEC
31725: ST_TO_ADDR
31726: LD_VAR 0 11
31730: PUSH
31731: FOR_TO
31732: IFFALSE 31852
// begin for j = 1 to array do
31734: LD_ADDR_VAR 0 7
31738: PUSH
31739: DOUBLE
31740: LD_INT 1
31742: DEC
31743: ST_TO_ADDR
31744: LD_VAR 0 1
31748: PUSH
31749: FOR_TO
31750: IFFALSE 31838
// begin k := j + d ;
31752: LD_ADDR_VAR 0 8
31756: PUSH
31757: LD_VAR 0 7
31761: PUSH
31762: LD_VAR 0 9
31766: PLUS
31767: ST_TO_ADDR
// if k > array then
31768: LD_VAR 0 8
31772: PUSH
31773: LD_VAR 0 1
31777: GREATER
31778: IFFALSE 31788
// k := 1 ;
31780: LD_ADDR_VAR 0 8
31784: PUSH
31785: LD_INT 1
31787: ST_TO_ADDR
// if not k then
31788: LD_VAR 0 8
31792: NOT
31793: IFFALSE 31805
// k := array ;
31795: LD_ADDR_VAR 0 8
31799: PUSH
31800: LD_VAR 0 1
31804: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31805: LD_ADDR_VAR 0 10
31809: PUSH
31810: LD_VAR 0 10
31814: PPUSH
31815: LD_VAR 0 8
31819: PPUSH
31820: LD_VAR 0 1
31824: PUSH
31825: LD_VAR 0 7
31829: ARRAY
31830: PPUSH
31831: CALL_OW 1
31835: ST_TO_ADDR
// end ;
31836: GO 31749
31838: POP
31839: POP
// array := tmp ;
31840: LD_ADDR_VAR 0 1
31844: PUSH
31845: LD_VAR 0 10
31849: ST_TO_ADDR
// end ;
31850: GO 31731
31852: POP
31853: POP
// result := array ;
31854: LD_ADDR_VAR 0 5
31858: PUSH
31859: LD_VAR 0 1
31863: ST_TO_ADDR
// end ;
31864: LD_VAR 0 5
31868: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31869: LD_INT 0
31871: PPUSH
31872: PPUSH
// result := 0 ;
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_INT 0
31880: ST_TO_ADDR
// if not array or not value in array then
31881: LD_VAR 0 1
31885: NOT
31886: PUSH
31887: LD_VAR 0 2
31891: PUSH
31892: LD_VAR 0 1
31896: IN
31897: NOT
31898: OR
31899: IFFALSE 31903
// exit ;
31901: GO 31957
// for i = 1 to array do
31903: LD_ADDR_VAR 0 4
31907: PUSH
31908: DOUBLE
31909: LD_INT 1
31911: DEC
31912: ST_TO_ADDR
31913: LD_VAR 0 1
31917: PUSH
31918: FOR_TO
31919: IFFALSE 31955
// if value = array [ i ] then
31921: LD_VAR 0 2
31925: PUSH
31926: LD_VAR 0 1
31930: PUSH
31931: LD_VAR 0 4
31935: ARRAY
31936: EQUAL
31937: IFFALSE 31953
// begin result := i ;
31939: LD_ADDR_VAR 0 3
31943: PUSH
31944: LD_VAR 0 4
31948: ST_TO_ADDR
// exit ;
31949: POP
31950: POP
31951: GO 31957
// end ;
31953: GO 31918
31955: POP
31956: POP
// end ;
31957: LD_VAR 0 3
31961: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31962: LD_INT 0
31964: PPUSH
// vc_chassis := chassis ;
31965: LD_ADDR_OWVAR 37
31969: PUSH
31970: LD_VAR 0 1
31974: ST_TO_ADDR
// vc_engine := engine ;
31975: LD_ADDR_OWVAR 39
31979: PUSH
31980: LD_VAR 0 2
31984: ST_TO_ADDR
// vc_control := control ;
31985: LD_ADDR_OWVAR 38
31989: PUSH
31990: LD_VAR 0 3
31994: ST_TO_ADDR
// vc_weapon := weapon ;
31995: LD_ADDR_OWVAR 40
31999: PUSH
32000: LD_VAR 0 4
32004: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32005: LD_ADDR_OWVAR 41
32009: PUSH
32010: LD_VAR 0 5
32014: ST_TO_ADDR
// end ;
32015: LD_VAR 0 6
32019: RET
// export function WantPlant ( unit ) ; var task ; begin
32020: LD_INT 0
32022: PPUSH
32023: PPUSH
// result := false ;
32024: LD_ADDR_VAR 0 2
32028: PUSH
32029: LD_INT 0
32031: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32032: LD_ADDR_VAR 0 3
32036: PUSH
32037: LD_VAR 0 1
32041: PPUSH
32042: CALL_OW 437
32046: ST_TO_ADDR
// if task then
32047: LD_VAR 0 3
32051: IFFALSE 32079
// if task [ 1 ] [ 1 ] = p then
32053: LD_VAR 0 3
32057: PUSH
32058: LD_INT 1
32060: ARRAY
32061: PUSH
32062: LD_INT 1
32064: ARRAY
32065: PUSH
32066: LD_STRING p
32068: EQUAL
32069: IFFALSE 32079
// result := true ;
32071: LD_ADDR_VAR 0 2
32075: PUSH
32076: LD_INT 1
32078: ST_TO_ADDR
// end ;
32079: LD_VAR 0 2
32083: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32084: LD_INT 0
32086: PPUSH
32087: PPUSH
32088: PPUSH
32089: PPUSH
// if pos < 1 then
32090: LD_VAR 0 2
32094: PUSH
32095: LD_INT 1
32097: LESS
32098: IFFALSE 32102
// exit ;
32100: GO 32405
// if pos = 1 then
32102: LD_VAR 0 2
32106: PUSH
32107: LD_INT 1
32109: EQUAL
32110: IFFALSE 32143
// result := Replace ( arr , pos [ 1 ] , value ) else
32112: LD_ADDR_VAR 0 4
32116: PUSH
32117: LD_VAR 0 1
32121: PPUSH
32122: LD_VAR 0 2
32126: PUSH
32127: LD_INT 1
32129: ARRAY
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: CALL_OW 1
32140: ST_TO_ADDR
32141: GO 32405
// begin tmp := arr ;
32143: LD_ADDR_VAR 0 6
32147: PUSH
32148: LD_VAR 0 1
32152: ST_TO_ADDR
// s_arr := [ tmp ] ;
32153: LD_ADDR_VAR 0 7
32157: PUSH
32158: LD_VAR 0 6
32162: PUSH
32163: EMPTY
32164: LIST
32165: ST_TO_ADDR
// for i = 1 to pos - 1 do
32166: LD_ADDR_VAR 0 5
32170: PUSH
32171: DOUBLE
32172: LD_INT 1
32174: DEC
32175: ST_TO_ADDR
32176: LD_VAR 0 2
32180: PUSH
32181: LD_INT 1
32183: MINUS
32184: PUSH
32185: FOR_TO
32186: IFFALSE 32231
// begin tmp := tmp [ pos [ i ] ] ;
32188: LD_ADDR_VAR 0 6
32192: PUSH
32193: LD_VAR 0 6
32197: PUSH
32198: LD_VAR 0 2
32202: PUSH
32203: LD_VAR 0 5
32207: ARRAY
32208: ARRAY
32209: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32210: LD_ADDR_VAR 0 7
32214: PUSH
32215: LD_VAR 0 7
32219: PUSH
32220: LD_VAR 0 6
32224: PUSH
32225: EMPTY
32226: LIST
32227: ADD
32228: ST_TO_ADDR
// end ;
32229: GO 32185
32231: POP
32232: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32233: LD_ADDR_VAR 0 6
32237: PUSH
32238: LD_VAR 0 6
32242: PPUSH
32243: LD_VAR 0 2
32247: PUSH
32248: LD_VAR 0 2
32252: ARRAY
32253: PPUSH
32254: LD_VAR 0 3
32258: PPUSH
32259: CALL_OW 1
32263: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32264: LD_ADDR_VAR 0 7
32268: PUSH
32269: LD_VAR 0 7
32273: PPUSH
32274: LD_VAR 0 7
32278: PPUSH
32279: LD_VAR 0 6
32283: PPUSH
32284: CALL_OW 1
32288: ST_TO_ADDR
// for i = s_arr downto 2 do
32289: LD_ADDR_VAR 0 5
32293: PUSH
32294: DOUBLE
32295: LD_VAR 0 7
32299: INC
32300: ST_TO_ADDR
32301: LD_INT 2
32303: PUSH
32304: FOR_DOWNTO
32305: IFFALSE 32389
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32307: LD_ADDR_VAR 0 6
32311: PUSH
32312: LD_VAR 0 7
32316: PUSH
32317: LD_VAR 0 5
32321: PUSH
32322: LD_INT 1
32324: MINUS
32325: ARRAY
32326: PPUSH
32327: LD_VAR 0 2
32331: PUSH
32332: LD_VAR 0 5
32336: PUSH
32337: LD_INT 1
32339: MINUS
32340: ARRAY
32341: PPUSH
32342: LD_VAR 0 7
32346: PUSH
32347: LD_VAR 0 5
32351: ARRAY
32352: PPUSH
32353: CALL_OW 1
32357: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32358: LD_ADDR_VAR 0 7
32362: PUSH
32363: LD_VAR 0 7
32367: PPUSH
32368: LD_VAR 0 5
32372: PUSH
32373: LD_INT 1
32375: MINUS
32376: PPUSH
32377: LD_VAR 0 6
32381: PPUSH
32382: CALL_OW 1
32386: ST_TO_ADDR
// end ;
32387: GO 32304
32389: POP
32390: POP
// result := s_arr [ 1 ] ;
32391: LD_ADDR_VAR 0 4
32395: PUSH
32396: LD_VAR 0 7
32400: PUSH
32401: LD_INT 1
32403: ARRAY
32404: ST_TO_ADDR
// end ; end ;
32405: LD_VAR 0 4
32409: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
// if not list then
32414: LD_VAR 0 1
32418: NOT
32419: IFFALSE 32423
// exit ;
32421: GO 32514
// i := list [ pos1 ] ;
32423: LD_ADDR_VAR 0 5
32427: PUSH
32428: LD_VAR 0 1
32432: PUSH
32433: LD_VAR 0 2
32437: ARRAY
32438: ST_TO_ADDR
// if not i then
32439: LD_VAR 0 5
32443: NOT
32444: IFFALSE 32448
// exit ;
32446: GO 32514
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32448: LD_ADDR_VAR 0 1
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: LD_VAR 0 2
32462: PPUSH
32463: LD_VAR 0 1
32467: PUSH
32468: LD_VAR 0 3
32472: ARRAY
32473: PPUSH
32474: CALL_OW 1
32478: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32479: LD_ADDR_VAR 0 1
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: LD_VAR 0 3
32493: PPUSH
32494: LD_VAR 0 5
32498: PPUSH
32499: CALL_OW 1
32503: ST_TO_ADDR
// result := list ;
32504: LD_ADDR_VAR 0 4
32508: PUSH
32509: LD_VAR 0 1
32513: ST_TO_ADDR
// end ;
32514: LD_VAR 0 4
32518: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32519: LD_INT 0
32521: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32522: LD_ADDR_VAR 0 5
32526: PUSH
32527: LD_VAR 0 1
32531: PPUSH
32532: CALL_OW 250
32536: PPUSH
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 251
32546: PPUSH
32547: LD_VAR 0 2
32551: PPUSH
32552: LD_VAR 0 3
32556: PPUSH
32557: LD_VAR 0 4
32561: PPUSH
32562: CALL 32572 0 5
32566: ST_TO_ADDR
// end ;
32567: LD_VAR 0 5
32571: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32572: LD_INT 0
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
// if not list then
32578: LD_VAR 0 3
32582: NOT
32583: IFFALSE 32587
// exit ;
32585: GO 32975
// result := [ ] ;
32587: LD_ADDR_VAR 0 6
32591: PUSH
32592: EMPTY
32593: ST_TO_ADDR
// for i in list do
32594: LD_ADDR_VAR 0 7
32598: PUSH
32599: LD_VAR 0 3
32603: PUSH
32604: FOR_IN
32605: IFFALSE 32807
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32607: LD_ADDR_VAR 0 9
32611: PUSH
32612: LD_VAR 0 7
32616: PPUSH
32617: LD_VAR 0 1
32621: PPUSH
32622: LD_VAR 0 2
32626: PPUSH
32627: CALL_OW 297
32631: ST_TO_ADDR
// if not result then
32632: LD_VAR 0 6
32636: NOT
32637: IFFALSE 32663
// result := [ [ i , tmp ] ] else
32639: LD_ADDR_VAR 0 6
32643: PUSH
32644: LD_VAR 0 7
32648: PUSH
32649: LD_VAR 0 9
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: ST_TO_ADDR
32661: GO 32805
// begin if result [ result ] [ 2 ] < tmp then
32663: LD_VAR 0 6
32667: PUSH
32668: LD_VAR 0 6
32672: ARRAY
32673: PUSH
32674: LD_INT 2
32676: ARRAY
32677: PUSH
32678: LD_VAR 0 9
32682: LESS
32683: IFFALSE 32725
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32685: LD_ADDR_VAR 0 6
32689: PUSH
32690: LD_VAR 0 6
32694: PPUSH
32695: LD_VAR 0 6
32699: PUSH
32700: LD_INT 1
32702: PLUS
32703: PPUSH
32704: LD_VAR 0 7
32708: PUSH
32709: LD_VAR 0 9
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PPUSH
32718: CALL_OW 2
32722: ST_TO_ADDR
32723: GO 32805
// for j = 1 to result do
32725: LD_ADDR_VAR 0 8
32729: PUSH
32730: DOUBLE
32731: LD_INT 1
32733: DEC
32734: ST_TO_ADDR
32735: LD_VAR 0 6
32739: PUSH
32740: FOR_TO
32741: IFFALSE 32803
// begin if tmp < result [ j ] [ 2 ] then
32743: LD_VAR 0 9
32747: PUSH
32748: LD_VAR 0 6
32752: PUSH
32753: LD_VAR 0 8
32757: ARRAY
32758: PUSH
32759: LD_INT 2
32761: ARRAY
32762: LESS
32763: IFFALSE 32801
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32765: LD_ADDR_VAR 0 6
32769: PUSH
32770: LD_VAR 0 6
32774: PPUSH
32775: LD_VAR 0 8
32779: PPUSH
32780: LD_VAR 0 7
32784: PUSH
32785: LD_VAR 0 9
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PPUSH
32794: CALL_OW 2
32798: ST_TO_ADDR
// break ;
32799: GO 32803
// end ; end ;
32801: GO 32740
32803: POP
32804: POP
// end ; end ;
32805: GO 32604
32807: POP
32808: POP
// if result and not asc then
32809: LD_VAR 0 6
32813: PUSH
32814: LD_VAR 0 4
32818: NOT
32819: AND
32820: IFFALSE 32895
// begin tmp := result ;
32822: LD_ADDR_VAR 0 9
32826: PUSH
32827: LD_VAR 0 6
32831: ST_TO_ADDR
// for i = tmp downto 1 do
32832: LD_ADDR_VAR 0 7
32836: PUSH
32837: DOUBLE
32838: LD_VAR 0 9
32842: INC
32843: ST_TO_ADDR
32844: LD_INT 1
32846: PUSH
32847: FOR_DOWNTO
32848: IFFALSE 32893
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32850: LD_ADDR_VAR 0 6
32854: PUSH
32855: LD_VAR 0 6
32859: PPUSH
32860: LD_VAR 0 9
32864: PUSH
32865: LD_VAR 0 7
32869: MINUS
32870: PUSH
32871: LD_INT 1
32873: PLUS
32874: PPUSH
32875: LD_VAR 0 9
32879: PUSH
32880: LD_VAR 0 7
32884: ARRAY
32885: PPUSH
32886: CALL_OW 1
32890: ST_TO_ADDR
32891: GO 32847
32893: POP
32894: POP
// end ; tmp := [ ] ;
32895: LD_ADDR_VAR 0 9
32899: PUSH
32900: EMPTY
32901: ST_TO_ADDR
// if mode then
32902: LD_VAR 0 5
32906: IFFALSE 32975
// begin for i = 1 to result do
32908: LD_ADDR_VAR 0 7
32912: PUSH
32913: DOUBLE
32914: LD_INT 1
32916: DEC
32917: ST_TO_ADDR
32918: LD_VAR 0 6
32922: PUSH
32923: FOR_TO
32924: IFFALSE 32963
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32926: LD_ADDR_VAR 0 9
32930: PUSH
32931: LD_VAR 0 9
32935: PPUSH
32936: LD_VAR 0 7
32940: PPUSH
32941: LD_VAR 0 6
32945: PUSH
32946: LD_VAR 0 7
32950: ARRAY
32951: PUSH
32952: LD_INT 1
32954: ARRAY
32955: PPUSH
32956: CALL_OW 1
32960: ST_TO_ADDR
32961: GO 32923
32963: POP
32964: POP
// result := tmp ;
32965: LD_ADDR_VAR 0 6
32969: PUSH
32970: LD_VAR 0 9
32974: ST_TO_ADDR
// end ; end ;
32975: LD_VAR 0 6
32979: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32980: LD_INT 0
32982: PPUSH
32983: PPUSH
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32988: LD_ADDR_VAR 0 5
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: EMPTY
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
// if not x or not y then
33010: LD_VAR 0 2
33014: NOT
33015: PUSH
33016: LD_VAR 0 3
33020: NOT
33021: OR
33022: IFFALSE 33026
// exit ;
33024: GO 34678
// if not range then
33026: LD_VAR 0 4
33030: NOT
33031: IFFALSE 33041
// range := 10 ;
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: LD_INT 10
33040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33041: LD_ADDR_VAR 0 8
33045: PUSH
33046: LD_INT 81
33048: PUSH
33049: LD_VAR 0 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 92
33060: PUSH
33061: LD_VAR 0 2
33065: PUSH
33066: LD_VAR 0 3
33070: PUSH
33071: LD_VAR 0 4
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: LD_INT 21
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: PPUSH
33104: CALL_OW 69
33108: ST_TO_ADDR
// if not tmp then
33109: LD_VAR 0 8
33113: NOT
33114: IFFALSE 33118
// exit ;
33116: GO 34678
// for i in tmp do
33118: LD_ADDR_VAR 0 6
33122: PUSH
33123: LD_VAR 0 8
33127: PUSH
33128: FOR_IN
33129: IFFALSE 34653
// begin points := [ 0 , 0 , 0 ] ;
33131: LD_ADDR_VAR 0 9
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
// bpoints := 1 ;
33150: LD_ADDR_VAR 0 10
33154: PUSH
33155: LD_INT 1
33157: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33158: LD_VAR 0 6
33162: PPUSH
33163: CALL_OW 247
33167: PUSH
33168: LD_INT 1
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33754
33176: POP
// begin if GetClass ( i ) = 1 then
33177: LD_VAR 0 6
33181: PPUSH
33182: CALL_OW 257
33186: PUSH
33187: LD_INT 1
33189: EQUAL
33190: IFFALSE 33211
// points := [ 10 , 5 , 3 ] ;
33192: LD_ADDR_VAR 0 9
33196: PUSH
33197: LD_INT 10
33199: PUSH
33200: LD_INT 5
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33211: LD_VAR 0 6
33215: PPUSH
33216: CALL_OW 257
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 3
33226: PUSH
33227: LD_INT 4
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: IN
33235: IFFALSE 33256
// points := [ 3 , 2 , 1 ] ;
33237: LD_ADDR_VAR 0 9
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33256: LD_VAR 0 6
33260: PPUSH
33261: CALL_OW 257
33265: PUSH
33266: LD_INT 5
33268: EQUAL
33269: IFFALSE 33290
// points := [ 130 , 5 , 2 ] ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_INT 130
33278: PUSH
33279: LD_INT 5
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33290: LD_VAR 0 6
33294: PPUSH
33295: CALL_OW 257
33299: PUSH
33300: LD_INT 8
33302: EQUAL
33303: IFFALSE 33324
// points := [ 35 , 35 , 30 ] ;
33305: LD_ADDR_VAR 0 9
33309: PUSH
33310: LD_INT 35
33312: PUSH
33313: LD_INT 35
33315: PUSH
33316: LD_INT 30
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33324: LD_VAR 0 6
33328: PPUSH
33329: CALL_OW 257
33333: PUSH
33334: LD_INT 9
33336: EQUAL
33337: IFFALSE 33358
// points := [ 20 , 55 , 40 ] ;
33339: LD_ADDR_VAR 0 9
33343: PUSH
33344: LD_INT 20
33346: PUSH
33347: LD_INT 55
33349: PUSH
33350: LD_INT 40
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33358: LD_VAR 0 6
33362: PPUSH
33363: CALL_OW 257
33367: PUSH
33368: LD_INT 12
33370: PUSH
33371: LD_INT 16
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: IN
33378: IFFALSE 33399
// points := [ 5 , 3 , 2 ] ;
33380: LD_ADDR_VAR 0 9
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33399: LD_VAR 0 6
33403: PPUSH
33404: CALL_OW 257
33408: PUSH
33409: LD_INT 17
33411: EQUAL
33412: IFFALSE 33433
// points := [ 100 , 50 , 75 ] ;
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_INT 100
33421: PUSH
33422: LD_INT 50
33424: PUSH
33425: LD_INT 75
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33433: LD_VAR 0 6
33437: PPUSH
33438: CALL_OW 257
33442: PUSH
33443: LD_INT 15
33445: EQUAL
33446: IFFALSE 33467
// points := [ 10 , 5 , 3 ] ;
33448: LD_ADDR_VAR 0 9
33452: PUSH
33453: LD_INT 10
33455: PUSH
33456: LD_INT 5
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33467: LD_VAR 0 6
33471: PPUSH
33472: CALL_OW 257
33476: PUSH
33477: LD_INT 14
33479: EQUAL
33480: IFFALSE 33501
// points := [ 10 , 0 , 0 ] ;
33482: LD_ADDR_VAR 0 9
33486: PUSH
33487: LD_INT 10
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33501: LD_VAR 0 6
33505: PPUSH
33506: CALL_OW 257
33510: PUSH
33511: LD_INT 11
33513: EQUAL
33514: IFFALSE 33535
// points := [ 30 , 10 , 5 ] ;
33516: LD_ADDR_VAR 0 9
33520: PUSH
33521: LD_INT 30
33523: PUSH
33524: LD_INT 10
33526: PUSH
33527: LD_INT 5
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33535: LD_VAR 0 1
33539: PPUSH
33540: LD_INT 5
33542: PPUSH
33543: CALL_OW 321
33547: PUSH
33548: LD_INT 2
33550: EQUAL
33551: IFFALSE 33568
// bpoints := bpoints * 1.8 ;
33553: LD_ADDR_VAR 0 10
33557: PUSH
33558: LD_VAR 0 10
33562: PUSH
33563: LD_REAL  1.80000000000000E+0000
33566: MUL
33567: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33568: LD_VAR 0 6
33572: PPUSH
33573: CALL_OW 257
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: LD_INT 4
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: IN
33596: PUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: LD_INT 51
33604: PPUSH
33605: CALL_OW 321
33609: PUSH
33610: LD_INT 2
33612: EQUAL
33613: AND
33614: IFFALSE 33631
// bpoints := bpoints * 1.2 ;
33616: LD_ADDR_VAR 0 10
33620: PUSH
33621: LD_VAR 0 10
33625: PUSH
33626: LD_REAL  1.20000000000000E+0000
33629: MUL
33630: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33631: LD_VAR 0 6
33635: PPUSH
33636: CALL_OW 257
33640: PUSH
33641: LD_INT 5
33643: PUSH
33644: LD_INT 7
33646: PUSH
33647: LD_INT 9
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: IN
33655: PUSH
33656: LD_VAR 0 1
33660: PPUSH
33661: LD_INT 52
33663: PPUSH
33664: CALL_OW 321
33668: PUSH
33669: LD_INT 2
33671: EQUAL
33672: AND
33673: IFFALSE 33690
// bpoints := bpoints * 1.5 ;
33675: LD_ADDR_VAR 0 10
33679: PUSH
33680: LD_VAR 0 10
33684: PUSH
33685: LD_REAL  1.50000000000000E+0000
33688: MUL
33689: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33690: LD_VAR 0 1
33694: PPUSH
33695: LD_INT 66
33697: PPUSH
33698: CALL_OW 321
33702: PUSH
33703: LD_INT 2
33705: EQUAL
33706: IFFALSE 33723
// bpoints := bpoints * 1.1 ;
33708: LD_ADDR_VAR 0 10
33712: PUSH
33713: LD_VAR 0 10
33717: PUSH
33718: LD_REAL  1.10000000000000E+0000
33721: MUL
33722: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33723: LD_ADDR_VAR 0 10
33727: PUSH
33728: LD_VAR 0 10
33732: PUSH
33733: LD_VAR 0 6
33737: PPUSH
33738: LD_INT 1
33740: PPUSH
33741: CALL_OW 259
33745: PUSH
33746: LD_REAL  1.15000000000000E+0000
33749: MUL
33750: MUL
33751: ST_TO_ADDR
// end ; unit_vehicle :
33752: GO 34582
33754: LD_INT 2
33756: DOUBLE
33757: EQUAL
33758: IFTRUE 33762
33760: GO 34570
33762: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33763: LD_VAR 0 6
33767: PPUSH
33768: CALL_OW 264
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: LD_INT 42
33778: PUSH
33779: LD_INT 24
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: IN
33787: IFFALSE 33808
// points := [ 25 , 5 , 3 ] ;
33789: LD_ADDR_VAR 0 9
33793: PUSH
33794: LD_INT 25
33796: PUSH
33797: LD_INT 5
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33808: LD_VAR 0 6
33812: PPUSH
33813: CALL_OW 264
33817: PUSH
33818: LD_INT 4
33820: PUSH
33821: LD_INT 43
33823: PUSH
33824: LD_INT 25
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: IN
33832: IFFALSE 33853
// points := [ 40 , 15 , 5 ] ;
33834: LD_ADDR_VAR 0 9
33838: PUSH
33839: LD_INT 40
33841: PUSH
33842: LD_INT 15
33844: PUSH
33845: LD_INT 5
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: LIST
33852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33853: LD_VAR 0 6
33857: PPUSH
33858: CALL_OW 264
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: LD_INT 23
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: IN
33873: IFFALSE 33894
// points := [ 7 , 25 , 8 ] ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 7
33882: PUSH
33883: LD_INT 25
33885: PUSH
33886: LD_INT 8
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33894: LD_VAR 0 6
33898: PPUSH
33899: CALL_OW 264
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: LD_INT 27
33909: PUSH
33910: LD_INT 44
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: IN
33918: IFFALSE 33939
// points := [ 14 , 50 , 16 ] ;
33920: LD_ADDR_VAR 0 9
33924: PUSH
33925: LD_INT 14
33927: PUSH
33928: LD_INT 50
33930: PUSH
33931: LD_INT 16
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33939: LD_VAR 0 6
33943: PPUSH
33944: CALL_OW 264
33948: PUSH
33949: LD_INT 6
33951: PUSH
33952: LD_INT 46
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: IN
33959: IFFALSE 33980
// points := [ 32 , 120 , 70 ] ;
33961: LD_ADDR_VAR 0 9
33965: PUSH
33966: LD_INT 32
33968: PUSH
33969: LD_INT 120
33971: PUSH
33972: LD_INT 70
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33980: LD_VAR 0 6
33984: PPUSH
33985: CALL_OW 264
33989: PUSH
33990: LD_INT 7
33992: PUSH
33993: LD_INT 28
33995: PUSH
33996: LD_INT 45
33998: PUSH
33999: LD_EXP 115
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: IN
34010: IFFALSE 34031
// points := [ 35 , 20 , 45 ] ;
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_INT 35
34019: PUSH
34020: LD_INT 20
34022: PUSH
34023: LD_INT 45
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34031: LD_VAR 0 6
34035: PPUSH
34036: CALL_OW 264
34040: PUSH
34041: LD_INT 47
34043: PUSH
34044: EMPTY
34045: LIST
34046: IN
34047: IFFALSE 34068
// points := [ 67 , 45 , 75 ] ;
34049: LD_ADDR_VAR 0 9
34053: PUSH
34054: LD_INT 67
34056: PUSH
34057: LD_INT 45
34059: PUSH
34060: LD_INT 75
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34068: LD_VAR 0 6
34072: PPUSH
34073: CALL_OW 264
34077: PUSH
34078: LD_INT 26
34080: PUSH
34081: EMPTY
34082: LIST
34083: IN
34084: IFFALSE 34105
// points := [ 120 , 30 , 80 ] ;
34086: LD_ADDR_VAR 0 9
34090: PUSH
34091: LD_INT 120
34093: PUSH
34094: LD_INT 30
34096: PUSH
34097: LD_INT 80
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34105: LD_VAR 0 6
34109: PPUSH
34110: CALL_OW 264
34114: PUSH
34115: LD_INT 22
34117: PUSH
34118: EMPTY
34119: LIST
34120: IN
34121: IFFALSE 34142
// points := [ 40 , 1 , 1 ] ;
34123: LD_ADDR_VAR 0 9
34127: PUSH
34128: LD_INT 40
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: LIST
34141: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34142: LD_VAR 0 6
34146: PPUSH
34147: CALL_OW 264
34151: PUSH
34152: LD_INT 29
34154: PUSH
34155: EMPTY
34156: LIST
34157: IN
34158: IFFALSE 34179
// points := [ 70 , 200 , 400 ] ;
34160: LD_ADDR_VAR 0 9
34164: PUSH
34165: LD_INT 70
34167: PUSH
34168: LD_INT 200
34170: PUSH
34171: LD_INT 400
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34179: LD_VAR 0 6
34183: PPUSH
34184: CALL_OW 264
34188: PUSH
34189: LD_INT 14
34191: PUSH
34192: LD_INT 53
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: IN
34199: IFFALSE 34220
// points := [ 40 , 10 , 20 ] ;
34201: LD_ADDR_VAR 0 9
34205: PUSH
34206: LD_INT 40
34208: PUSH
34209: LD_INT 10
34211: PUSH
34212: LD_INT 20
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34220: LD_VAR 0 6
34224: PPUSH
34225: CALL_OW 264
34229: PUSH
34230: LD_INT 9
34232: PUSH
34233: EMPTY
34234: LIST
34235: IN
34236: IFFALSE 34257
// points := [ 5 , 70 , 20 ] ;
34238: LD_ADDR_VAR 0 9
34242: PUSH
34243: LD_INT 5
34245: PUSH
34246: LD_INT 70
34248: PUSH
34249: LD_INT 20
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34257: LD_VAR 0 6
34261: PPUSH
34262: CALL_OW 264
34266: PUSH
34267: LD_INT 10
34269: PUSH
34270: EMPTY
34271: LIST
34272: IN
34273: IFFALSE 34294
// points := [ 35 , 110 , 70 ] ;
34275: LD_ADDR_VAR 0 9
34279: PUSH
34280: LD_INT 35
34282: PUSH
34283: LD_INT 110
34285: PUSH
34286: LD_INT 70
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34294: LD_VAR 0 6
34298: PPUSH
34299: CALL_OW 265
34303: PUSH
34304: LD_INT 25
34306: EQUAL
34307: IFFALSE 34328
// points := [ 80 , 65 , 100 ] ;
34309: LD_ADDR_VAR 0 9
34313: PUSH
34314: LD_INT 80
34316: PUSH
34317: LD_INT 65
34319: PUSH
34320: LD_INT 100
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34328: LD_VAR 0 6
34332: PPUSH
34333: CALL_OW 263
34337: PUSH
34338: LD_INT 1
34340: EQUAL
34341: IFFALSE 34376
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34343: LD_ADDR_VAR 0 10
34347: PUSH
34348: LD_VAR 0 10
34352: PUSH
34353: LD_VAR 0 6
34357: PPUSH
34358: CALL_OW 311
34362: PPUSH
34363: LD_INT 3
34365: PPUSH
34366: CALL_OW 259
34370: PUSH
34371: LD_INT 4
34373: MUL
34374: MUL
34375: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34376: LD_VAR 0 6
34380: PPUSH
34381: CALL_OW 263
34385: PUSH
34386: LD_INT 2
34388: EQUAL
34389: IFFALSE 34440
// begin j := IsControledBy ( i ) ;
34391: LD_ADDR_VAR 0 7
34395: PUSH
34396: LD_VAR 0 6
34400: PPUSH
34401: CALL_OW 312
34405: ST_TO_ADDR
// if j then
34406: LD_VAR 0 7
34410: IFFALSE 34440
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34412: LD_ADDR_VAR 0 10
34416: PUSH
34417: LD_VAR 0 10
34421: PUSH
34422: LD_VAR 0 7
34426: PPUSH
34427: LD_INT 3
34429: PPUSH
34430: CALL_OW 259
34434: PUSH
34435: LD_INT 3
34437: MUL
34438: MUL
34439: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34440: LD_VAR 0 6
34444: PPUSH
34445: CALL_OW 264
34449: PUSH
34450: LD_INT 5
34452: PUSH
34453: LD_INT 6
34455: PUSH
34456: LD_INT 46
34458: PUSH
34459: LD_INT 44
34461: PUSH
34462: LD_INT 47
34464: PUSH
34465: LD_INT 45
34467: PUSH
34468: LD_INT 28
34470: PUSH
34471: LD_INT 7
34473: PUSH
34474: LD_INT 27
34476: PUSH
34477: LD_INT 29
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: IN
34492: PUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: LD_INT 52
34500: PPUSH
34501: CALL_OW 321
34505: PUSH
34506: LD_INT 2
34508: EQUAL
34509: AND
34510: IFFALSE 34527
// bpoints := bpoints * 1.2 ;
34512: LD_ADDR_VAR 0 10
34516: PUSH
34517: LD_VAR 0 10
34521: PUSH
34522: LD_REAL  1.20000000000000E+0000
34525: MUL
34526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34527: LD_VAR 0 6
34531: PPUSH
34532: CALL_OW 264
34536: PUSH
34537: LD_INT 6
34539: PUSH
34540: LD_INT 46
34542: PUSH
34543: LD_INT 47
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: IN
34551: IFFALSE 34568
// bpoints := bpoints * 1.2 ;
34553: LD_ADDR_VAR 0 10
34557: PUSH
34558: LD_VAR 0 10
34562: PUSH
34563: LD_REAL  1.20000000000000E+0000
34566: MUL
34567: ST_TO_ADDR
// end ; unit_building :
34568: GO 34582
34570: LD_INT 3
34572: DOUBLE
34573: EQUAL
34574: IFTRUE 34578
34576: GO 34581
34578: POP
// ; end ;
34579: GO 34582
34581: POP
// for j = 1 to 3 do
34582: LD_ADDR_VAR 0 7
34586: PUSH
34587: DOUBLE
34588: LD_INT 1
34590: DEC
34591: ST_TO_ADDR
34592: LD_INT 3
34594: PUSH
34595: FOR_TO
34596: IFFALSE 34649
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34598: LD_ADDR_VAR 0 5
34602: PUSH
34603: LD_VAR 0 5
34607: PPUSH
34608: LD_VAR 0 7
34612: PPUSH
34613: LD_VAR 0 5
34617: PUSH
34618: LD_VAR 0 7
34622: ARRAY
34623: PUSH
34624: LD_VAR 0 9
34628: PUSH
34629: LD_VAR 0 7
34633: ARRAY
34634: PUSH
34635: LD_VAR 0 10
34639: MUL
34640: PLUS
34641: PPUSH
34642: CALL_OW 1
34646: ST_TO_ADDR
34647: GO 34595
34649: POP
34650: POP
// end ;
34651: GO 33128
34653: POP
34654: POP
// result := Replace ( result , 4 , tmp ) ;
34655: LD_ADDR_VAR 0 5
34659: PUSH
34660: LD_VAR 0 5
34664: PPUSH
34665: LD_INT 4
34667: PPUSH
34668: LD_VAR 0 8
34672: PPUSH
34673: CALL_OW 1
34677: ST_TO_ADDR
// end ;
34678: LD_VAR 0 5
34682: RET
// export function DangerAtRange ( unit , range ) ; begin
34683: LD_INT 0
34685: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34686: LD_ADDR_VAR 0 3
34690: PUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 255
34700: PPUSH
34701: LD_VAR 0 1
34705: PPUSH
34706: CALL_OW 250
34710: PPUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 251
34720: PPUSH
34721: LD_VAR 0 2
34725: PPUSH
34726: CALL 32980 0 4
34730: ST_TO_ADDR
// end ;
34731: LD_VAR 0 3
34735: RET
// export function DangerInArea ( side , area ) ; begin
34736: LD_INT 0
34738: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_VAR 0 2
34748: PPUSH
34749: LD_INT 81
34751: PUSH
34752: LD_VAR 0 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PPUSH
34761: CALL_OW 70
34765: ST_TO_ADDR
// end ;
34766: LD_VAR 0 3
34770: RET
// export function IsExtension ( b ) ; begin
34771: LD_INT 0
34773: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34774: LD_ADDR_VAR 0 2
34778: PUSH
34779: LD_VAR 0 1
34783: PUSH
34784: LD_INT 23
34786: PUSH
34787: LD_INT 20
34789: PUSH
34790: LD_INT 22
34792: PUSH
34793: LD_INT 17
34795: PUSH
34796: LD_INT 24
34798: PUSH
34799: LD_INT 21
34801: PUSH
34802: LD_INT 19
34804: PUSH
34805: LD_INT 16
34807: PUSH
34808: LD_INT 25
34810: PUSH
34811: LD_INT 18
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: IN
34826: ST_TO_ADDR
// end ;
34827: LD_VAR 0 2
34831: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
// result := [ ] ;
34837: LD_ADDR_VAR 0 4
34841: PUSH
34842: EMPTY
34843: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34844: LD_ADDR_VAR 0 5
34848: PUSH
34849: LD_VAR 0 2
34853: PPUSH
34854: LD_INT 21
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PPUSH
34864: CALL_OW 70
34868: ST_TO_ADDR
// if not tmp then
34869: LD_VAR 0 5
34873: NOT
34874: IFFALSE 34878
// exit ;
34876: GO 34942
// if checkLink then
34878: LD_VAR 0 3
34882: IFFALSE 34932
// begin for i in tmp do
34884: LD_ADDR_VAR 0 6
34888: PUSH
34889: LD_VAR 0 5
34893: PUSH
34894: FOR_IN
34895: IFFALSE 34930
// if GetBase ( i ) <> base then
34897: LD_VAR 0 6
34901: PPUSH
34902: CALL_OW 274
34906: PUSH
34907: LD_VAR 0 1
34911: NONEQUAL
34912: IFFALSE 34928
// ComLinkToBase ( base , i ) ;
34914: LD_VAR 0 1
34918: PPUSH
34919: LD_VAR 0 6
34923: PPUSH
34924: CALL_OW 169
34928: GO 34894
34930: POP
34931: POP
// end ; result := tmp ;
34932: LD_ADDR_VAR 0 4
34936: PUSH
34937: LD_VAR 0 5
34941: ST_TO_ADDR
// end ;
34942: LD_VAR 0 4
34946: RET
// export function ComComplete ( units , b ) ; var i ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
// if not units then
34951: LD_VAR 0 1
34955: NOT
34956: IFFALSE 34960
// exit ;
34958: GO 35050
// for i in units do
34960: LD_ADDR_VAR 0 4
34964: PUSH
34965: LD_VAR 0 1
34969: PUSH
34970: FOR_IN
34971: IFFALSE 35048
// if BuildingStatus ( b ) = bs_build then
34973: LD_VAR 0 2
34977: PPUSH
34978: CALL_OW 461
34982: PUSH
34983: LD_INT 1
34985: EQUAL
34986: IFFALSE 35046
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34988: LD_VAR 0 4
34992: PPUSH
34993: LD_STRING h
34995: PUSH
34996: LD_VAR 0 2
35000: PPUSH
35001: CALL_OW 250
35005: PUSH
35006: LD_VAR 0 2
35010: PPUSH
35011: CALL_OW 251
35015: PUSH
35016: LD_VAR 0 2
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: PUSH
35039: EMPTY
35040: LIST
35041: PPUSH
35042: CALL_OW 446
35046: GO 34970
35048: POP
35049: POP
// end ;
35050: LD_VAR 0 3
35054: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35055: LD_INT 0
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35063: LD_VAR 0 1
35067: NOT
35068: PUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 263
35078: PUSH
35079: LD_INT 2
35081: NONEQUAL
35082: OR
35083: IFFALSE 35087
// exit ;
35085: GO 35403
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35087: LD_ADDR_VAR 0 6
35091: PUSH
35092: LD_INT 22
35094: PUSH
35095: LD_VAR 0 1
35099: PPUSH
35100: CALL_OW 255
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 30
35114: PUSH
35115: LD_INT 36
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 34
35124: PUSH
35125: LD_INT 31
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PPUSH
35141: CALL_OW 69
35145: ST_TO_ADDR
// if not tmp then
35146: LD_VAR 0 6
35150: NOT
35151: IFFALSE 35155
// exit ;
35153: GO 35403
// result := [ ] ;
35155: LD_ADDR_VAR 0 2
35159: PUSH
35160: EMPTY
35161: ST_TO_ADDR
// for i in tmp do
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: LD_VAR 0 6
35171: PUSH
35172: FOR_IN
35173: IFFALSE 35244
// begin t := UnitsInside ( i ) ;
35175: LD_ADDR_VAR 0 4
35179: PUSH
35180: LD_VAR 0 3
35184: PPUSH
35185: CALL_OW 313
35189: ST_TO_ADDR
// if t then
35190: LD_VAR 0 4
35194: IFFALSE 35242
// for j in t do
35196: LD_ADDR_VAR 0 7
35200: PUSH
35201: LD_VAR 0 4
35205: PUSH
35206: FOR_IN
35207: IFFALSE 35240
// result := Replace ( result , result + 1 , j ) ;
35209: LD_ADDR_VAR 0 2
35213: PUSH
35214: LD_VAR 0 2
35218: PPUSH
35219: LD_VAR 0 2
35223: PUSH
35224: LD_INT 1
35226: PLUS
35227: PPUSH
35228: LD_VAR 0 7
35232: PPUSH
35233: CALL_OW 1
35237: ST_TO_ADDR
35238: GO 35206
35240: POP
35241: POP
// end ;
35242: GO 35172
35244: POP
35245: POP
// if not result then
35246: LD_VAR 0 2
35250: NOT
35251: IFFALSE 35255
// exit ;
35253: GO 35403
// mech := result [ 1 ] ;
35255: LD_ADDR_VAR 0 5
35259: PUSH
35260: LD_VAR 0 2
35264: PUSH
35265: LD_INT 1
35267: ARRAY
35268: ST_TO_ADDR
// if result > 1 then
35269: LD_VAR 0 2
35273: PUSH
35274: LD_INT 1
35276: GREATER
35277: IFFALSE 35389
// begin for i = 2 to result do
35279: LD_ADDR_VAR 0 3
35283: PUSH
35284: DOUBLE
35285: LD_INT 2
35287: DEC
35288: ST_TO_ADDR
35289: LD_VAR 0 2
35293: PUSH
35294: FOR_TO
35295: IFFALSE 35387
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: LD_VAR 0 2
35306: PUSH
35307: LD_VAR 0 3
35311: ARRAY
35312: PPUSH
35313: LD_INT 3
35315: PPUSH
35316: CALL_OW 259
35320: PUSH
35321: LD_VAR 0 2
35325: PUSH
35326: LD_VAR 0 3
35330: ARRAY
35331: PPUSH
35332: CALL_OW 432
35336: MINUS
35337: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35338: LD_VAR 0 4
35342: PUSH
35343: LD_VAR 0 5
35347: PPUSH
35348: LD_INT 3
35350: PPUSH
35351: CALL_OW 259
35355: PUSH
35356: LD_VAR 0 5
35360: PPUSH
35361: CALL_OW 432
35365: MINUS
35366: GREATEREQUAL
35367: IFFALSE 35385
// mech := result [ i ] ;
35369: LD_ADDR_VAR 0 5
35373: PUSH
35374: LD_VAR 0 2
35378: PUSH
35379: LD_VAR 0 3
35383: ARRAY
35384: ST_TO_ADDR
// end ;
35385: GO 35294
35387: POP
35388: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35389: LD_VAR 0 1
35393: PPUSH
35394: LD_VAR 0 5
35398: PPUSH
35399: CALL_OW 135
// end ;
35403: LD_VAR 0 2
35407: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35408: LD_INT 0
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
35422: PPUSH
// result := [ ] ;
35423: LD_ADDR_VAR 0 7
35427: PUSH
35428: EMPTY
35429: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35430: LD_VAR 0 1
35434: PPUSH
35435: CALL_OW 266
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: IN
35450: NOT
35451: IFFALSE 35455
// exit ;
35453: GO 37089
// if name then
35455: LD_VAR 0 3
35459: IFFALSE 35475
// SetBName ( base_dep , name ) ;
35461: LD_VAR 0 1
35465: PPUSH
35466: LD_VAR 0 3
35470: PPUSH
35471: CALL_OW 500
// base := GetBase ( base_dep ) ;
35475: LD_ADDR_VAR 0 15
35479: PUSH
35480: LD_VAR 0 1
35484: PPUSH
35485: CALL_OW 274
35489: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35490: LD_ADDR_VAR 0 16
35494: PUSH
35495: LD_VAR 0 1
35499: PPUSH
35500: CALL_OW 255
35504: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35505: LD_ADDR_VAR 0 17
35509: PUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: CALL_OW 248
35519: ST_TO_ADDR
// if sources then
35520: LD_VAR 0 5
35524: IFFALSE 35571
// for i = 1 to 3 do
35526: LD_ADDR_VAR 0 8
35530: PUSH
35531: DOUBLE
35532: LD_INT 1
35534: DEC
35535: ST_TO_ADDR
35536: LD_INT 3
35538: PUSH
35539: FOR_TO
35540: IFFALSE 35569
// AddResourceType ( base , i , sources [ i ] ) ;
35542: LD_VAR 0 15
35546: PPUSH
35547: LD_VAR 0 8
35551: PPUSH
35552: LD_VAR 0 5
35556: PUSH
35557: LD_VAR 0 8
35561: ARRAY
35562: PPUSH
35563: CALL_OW 276
35567: GO 35539
35569: POP
35570: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35571: LD_ADDR_VAR 0 18
35575: PUSH
35576: LD_VAR 0 15
35580: PPUSH
35581: LD_VAR 0 2
35585: PPUSH
35586: LD_INT 1
35588: PPUSH
35589: CALL 34832 0 3
35593: ST_TO_ADDR
// InitHc ;
35594: CALL_OW 19
// InitUc ;
35598: CALL_OW 18
// uc_side := side ;
35602: LD_ADDR_OWVAR 20
35606: PUSH
35607: LD_VAR 0 16
35611: ST_TO_ADDR
// uc_nation := nation ;
35612: LD_ADDR_OWVAR 21
35616: PUSH
35617: LD_VAR 0 17
35621: ST_TO_ADDR
// if buildings then
35622: LD_VAR 0 18
35626: IFFALSE 36948
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35628: LD_ADDR_VAR 0 19
35632: PUSH
35633: LD_VAR 0 18
35637: PPUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 30
35643: PUSH
35644: LD_INT 29
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 30
35653: PUSH
35654: LD_INT 30
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: PPUSH
35666: CALL_OW 72
35670: ST_TO_ADDR
// if tmp then
35671: LD_VAR 0 19
35675: IFFALSE 35723
// for i in tmp do
35677: LD_ADDR_VAR 0 8
35681: PUSH
35682: LD_VAR 0 19
35686: PUSH
35687: FOR_IN
35688: IFFALSE 35721
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35690: LD_VAR 0 8
35694: PPUSH
35695: CALL_OW 250
35699: PPUSH
35700: LD_VAR 0 8
35704: PPUSH
35705: CALL_OW 251
35709: PPUSH
35710: LD_VAR 0 16
35714: PPUSH
35715: CALL_OW 441
35719: GO 35687
35721: POP
35722: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35723: LD_VAR 0 18
35727: PPUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 30
35733: PUSH
35734: LD_INT 32
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 30
35743: PUSH
35744: LD_INT 33
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: PPUSH
35756: CALL_OW 72
35760: IFFALSE 35848
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35762: LD_ADDR_VAR 0 8
35766: PUSH
35767: LD_VAR 0 18
35771: PPUSH
35772: LD_INT 2
35774: PUSH
35775: LD_INT 30
35777: PUSH
35778: LD_INT 32
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 30
35787: PUSH
35788: LD_INT 33
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: PPUSH
35800: CALL_OW 72
35804: PUSH
35805: FOR_IN
35806: IFFALSE 35846
// begin if not GetBWeapon ( i ) then
35808: LD_VAR 0 8
35812: PPUSH
35813: CALL_OW 269
35817: NOT
35818: IFFALSE 35844
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35820: LD_VAR 0 8
35824: PPUSH
35825: LD_VAR 0 8
35829: PPUSH
35830: LD_VAR 0 2
35834: PPUSH
35835: CALL 37094 0 2
35839: PPUSH
35840: CALL_OW 431
// end ;
35844: GO 35805
35846: POP
35847: POP
// end ; for i = 1 to personel do
35848: LD_ADDR_VAR 0 8
35852: PUSH
35853: DOUBLE
35854: LD_INT 1
35856: DEC
35857: ST_TO_ADDR
35858: LD_VAR 0 6
35862: PUSH
35863: FOR_TO
35864: IFFALSE 36928
// begin if i > 4 then
35866: LD_VAR 0 8
35870: PUSH
35871: LD_INT 4
35873: GREATER
35874: IFFALSE 35878
// break ;
35876: GO 36928
// case i of 1 :
35878: LD_VAR 0 8
35882: PUSH
35883: LD_INT 1
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35971
35891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35892: LD_ADDR_VAR 0 12
35896: PUSH
35897: LD_VAR 0 18
35901: PPUSH
35902: LD_INT 22
35904: PUSH
35905: LD_VAR 0 16
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 58
35916: PUSH
35917: EMPTY
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: LD_INT 30
35925: PUSH
35926: LD_INT 32
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 30
35935: PUSH
35936: LD_INT 4
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 30
35945: PUSH
35946: LD_INT 5
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: PPUSH
35964: CALL_OW 72
35968: ST_TO_ADDR
35969: GO 36193
35971: LD_INT 2
35973: DOUBLE
35974: EQUAL
35975: IFTRUE 35979
35977: GO 36041
35979: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35980: LD_ADDR_VAR 0 12
35984: PUSH
35985: LD_VAR 0 18
35989: PPUSH
35990: LD_INT 22
35992: PUSH
35993: LD_VAR 0 16
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 30
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 30
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 72
36038: ST_TO_ADDR
36039: GO 36193
36041: LD_INT 3
36043: DOUBLE
36044: EQUAL
36045: IFTRUE 36049
36047: GO 36111
36049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36050: LD_ADDR_VAR 0 12
36054: PUSH
36055: LD_VAR 0 18
36059: PPUSH
36060: LD_INT 22
36062: PUSH
36063: LD_VAR 0 16
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 30
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 30
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PPUSH
36104: CALL_OW 72
36108: ST_TO_ADDR
36109: GO 36193
36111: LD_INT 4
36113: DOUBLE
36114: EQUAL
36115: IFTRUE 36119
36117: GO 36192
36119: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36120: LD_ADDR_VAR 0 12
36124: PUSH
36125: LD_VAR 0 18
36129: PPUSH
36130: LD_INT 22
36132: PUSH
36133: LD_VAR 0 16
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 30
36147: PUSH
36148: LD_INT 6
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 30
36157: PUSH
36158: LD_INT 7
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 30
36167: PUSH
36168: LD_INT 8
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PPUSH
36185: CALL_OW 72
36189: ST_TO_ADDR
36190: GO 36193
36192: POP
// if i = 1 then
36193: LD_VAR 0 8
36197: PUSH
36198: LD_INT 1
36200: EQUAL
36201: IFFALSE 36312
// begin tmp := [ ] ;
36203: LD_ADDR_VAR 0 19
36207: PUSH
36208: EMPTY
36209: ST_TO_ADDR
// for j in f do
36210: LD_ADDR_VAR 0 9
36214: PUSH
36215: LD_VAR 0 12
36219: PUSH
36220: FOR_IN
36221: IFFALSE 36294
// if GetBType ( j ) = b_bunker then
36223: LD_VAR 0 9
36227: PPUSH
36228: CALL_OW 266
36232: PUSH
36233: LD_INT 32
36235: EQUAL
36236: IFFALSE 36263
// tmp := Insert ( tmp , 1 , j ) else
36238: LD_ADDR_VAR 0 19
36242: PUSH
36243: LD_VAR 0 19
36247: PPUSH
36248: LD_INT 1
36250: PPUSH
36251: LD_VAR 0 9
36255: PPUSH
36256: CALL_OW 2
36260: ST_TO_ADDR
36261: GO 36292
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36263: LD_ADDR_VAR 0 19
36267: PUSH
36268: LD_VAR 0 19
36272: PPUSH
36273: LD_VAR 0 19
36277: PUSH
36278: LD_INT 1
36280: PLUS
36281: PPUSH
36282: LD_VAR 0 9
36286: PPUSH
36287: CALL_OW 2
36291: ST_TO_ADDR
36292: GO 36220
36294: POP
36295: POP
// if tmp then
36296: LD_VAR 0 19
36300: IFFALSE 36312
// f := tmp ;
36302: LD_ADDR_VAR 0 12
36306: PUSH
36307: LD_VAR 0 19
36311: ST_TO_ADDR
// end ; x := personel [ i ] ;
36312: LD_ADDR_VAR 0 13
36316: PUSH
36317: LD_VAR 0 6
36321: PUSH
36322: LD_VAR 0 8
36326: ARRAY
36327: ST_TO_ADDR
// if x = - 1 then
36328: LD_VAR 0 13
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: EQUAL
36337: IFFALSE 36546
// begin for j in f do
36339: LD_ADDR_VAR 0 9
36343: PUSH
36344: LD_VAR 0 12
36348: PUSH
36349: FOR_IN
36350: IFFALSE 36542
// repeat InitHc ;
36352: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36356: LD_VAR 0 9
36360: PPUSH
36361: CALL_OW 266
36365: PUSH
36366: LD_INT 5
36368: EQUAL
36369: IFFALSE 36439
// begin if UnitsInside ( j ) < 3 then
36371: LD_VAR 0 9
36375: PPUSH
36376: CALL_OW 313
36380: PUSH
36381: LD_INT 3
36383: LESS
36384: IFFALSE 36420
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36386: LD_INT 0
36388: PPUSH
36389: LD_INT 5
36391: PUSH
36392: LD_INT 8
36394: PUSH
36395: LD_INT 9
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 17
36407: ARRAY
36408: PPUSH
36409: LD_VAR 0 4
36413: PPUSH
36414: CALL_OW 380
36418: GO 36437
// PrepareHuman ( false , i , skill ) ;
36420: LD_INT 0
36422: PPUSH
36423: LD_VAR 0 8
36427: PPUSH
36428: LD_VAR 0 4
36432: PPUSH
36433: CALL_OW 380
// end else
36437: GO 36456
// PrepareHuman ( false , i , skill ) ;
36439: LD_INT 0
36441: PPUSH
36442: LD_VAR 0 8
36446: PPUSH
36447: LD_VAR 0 4
36451: PPUSH
36452: CALL_OW 380
// un := CreateHuman ;
36456: LD_ADDR_VAR 0 14
36460: PUSH
36461: CALL_OW 44
36465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36466: LD_ADDR_VAR 0 7
36470: PUSH
36471: LD_VAR 0 7
36475: PPUSH
36476: LD_INT 1
36478: PPUSH
36479: LD_VAR 0 14
36483: PPUSH
36484: CALL_OW 2
36488: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36489: LD_VAR 0 14
36493: PPUSH
36494: LD_VAR 0 9
36498: PPUSH
36499: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36503: LD_VAR 0 9
36507: PPUSH
36508: CALL_OW 313
36512: PUSH
36513: LD_INT 6
36515: EQUAL
36516: PUSH
36517: LD_VAR 0 9
36521: PPUSH
36522: CALL_OW 266
36526: PUSH
36527: LD_INT 32
36529: PUSH
36530: LD_INT 31
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: IN
36537: OR
36538: IFFALSE 36352
36540: GO 36349
36542: POP
36543: POP
// end else
36544: GO 36926
// for j = 1 to x do
36546: LD_ADDR_VAR 0 9
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_VAR 0 13
36560: PUSH
36561: FOR_TO
36562: IFFALSE 36924
// begin InitHc ;
36564: CALL_OW 19
// if not f then
36568: LD_VAR 0 12
36572: NOT
36573: IFFALSE 36662
// begin PrepareHuman ( false , i , skill ) ;
36575: LD_INT 0
36577: PPUSH
36578: LD_VAR 0 8
36582: PPUSH
36583: LD_VAR 0 4
36587: PPUSH
36588: CALL_OW 380
// un := CreateHuman ;
36592: LD_ADDR_VAR 0 14
36596: PUSH
36597: CALL_OW 44
36601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36602: LD_ADDR_VAR 0 7
36606: PUSH
36607: LD_VAR 0 7
36611: PPUSH
36612: LD_INT 1
36614: PPUSH
36615: LD_VAR 0 14
36619: PPUSH
36620: CALL_OW 2
36624: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36625: LD_VAR 0 14
36629: PPUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 250
36639: PPUSH
36640: LD_VAR 0 1
36644: PPUSH
36645: CALL_OW 251
36649: PPUSH
36650: LD_INT 10
36652: PPUSH
36653: LD_INT 0
36655: PPUSH
36656: CALL_OW 50
// continue ;
36660: GO 36561
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36662: LD_VAR 0 12
36666: PUSH
36667: LD_INT 1
36669: ARRAY
36670: PPUSH
36671: CALL_OW 313
36675: PUSH
36676: LD_VAR 0 12
36680: PUSH
36681: LD_INT 1
36683: ARRAY
36684: PPUSH
36685: CALL_OW 266
36689: PUSH
36690: LD_INT 32
36692: PUSH
36693: LD_INT 31
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: IN
36700: AND
36701: PUSH
36702: LD_VAR 0 12
36706: PUSH
36707: LD_INT 1
36709: ARRAY
36710: PPUSH
36711: CALL_OW 313
36715: PUSH
36716: LD_INT 6
36718: EQUAL
36719: OR
36720: IFFALSE 36740
// f := Delete ( f , 1 ) ;
36722: LD_ADDR_VAR 0 12
36726: PUSH
36727: LD_VAR 0 12
36731: PPUSH
36732: LD_INT 1
36734: PPUSH
36735: CALL_OW 3
36739: ST_TO_ADDR
// if not f then
36740: LD_VAR 0 12
36744: NOT
36745: IFFALSE 36763
// begin x := x + 2 ;
36747: LD_ADDR_VAR 0 13
36751: PUSH
36752: LD_VAR 0 13
36756: PUSH
36757: LD_INT 2
36759: PLUS
36760: ST_TO_ADDR
// continue ;
36761: GO 36561
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36763: LD_VAR 0 12
36767: PUSH
36768: LD_INT 1
36770: ARRAY
36771: PPUSH
36772: CALL_OW 266
36776: PUSH
36777: LD_INT 5
36779: EQUAL
36780: IFFALSE 36854
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36782: LD_VAR 0 12
36786: PUSH
36787: LD_INT 1
36789: ARRAY
36790: PPUSH
36791: CALL_OW 313
36795: PUSH
36796: LD_INT 3
36798: LESS
36799: IFFALSE 36835
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36801: LD_INT 0
36803: PPUSH
36804: LD_INT 5
36806: PUSH
36807: LD_INT 8
36809: PUSH
36810: LD_INT 9
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: PUSH
36818: LD_VAR 0 17
36822: ARRAY
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: CALL_OW 380
36833: GO 36852
// PrepareHuman ( false , i , skill ) ;
36835: LD_INT 0
36837: PPUSH
36838: LD_VAR 0 8
36842: PPUSH
36843: LD_VAR 0 4
36847: PPUSH
36848: CALL_OW 380
// end else
36852: GO 36871
// PrepareHuman ( false , i , skill ) ;
36854: LD_INT 0
36856: PPUSH
36857: LD_VAR 0 8
36861: PPUSH
36862: LD_VAR 0 4
36866: PPUSH
36867: CALL_OW 380
// un := CreateHuman ;
36871: LD_ADDR_VAR 0 14
36875: PUSH
36876: CALL_OW 44
36880: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36881: LD_ADDR_VAR 0 7
36885: PUSH
36886: LD_VAR 0 7
36890: PPUSH
36891: LD_INT 1
36893: PPUSH
36894: LD_VAR 0 14
36898: PPUSH
36899: CALL_OW 2
36903: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36904: LD_VAR 0 14
36908: PPUSH
36909: LD_VAR 0 12
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: PPUSH
36918: CALL_OW 52
// end ;
36922: GO 36561
36924: POP
36925: POP
// end ;
36926: GO 35863
36928: POP
36929: POP
// result := result ^ buildings ;
36930: LD_ADDR_VAR 0 7
36934: PUSH
36935: LD_VAR 0 7
36939: PUSH
36940: LD_VAR 0 18
36944: ADD
36945: ST_TO_ADDR
// end else
36946: GO 37089
// begin for i = 1 to personel do
36948: LD_ADDR_VAR 0 8
36952: PUSH
36953: DOUBLE
36954: LD_INT 1
36956: DEC
36957: ST_TO_ADDR
36958: LD_VAR 0 6
36962: PUSH
36963: FOR_TO
36964: IFFALSE 37087
// begin if i > 4 then
36966: LD_VAR 0 8
36970: PUSH
36971: LD_INT 4
36973: GREATER
36974: IFFALSE 36978
// break ;
36976: GO 37087
// x := personel [ i ] ;
36978: LD_ADDR_VAR 0 13
36982: PUSH
36983: LD_VAR 0 6
36987: PUSH
36988: LD_VAR 0 8
36992: ARRAY
36993: ST_TO_ADDR
// if x = - 1 then
36994: LD_VAR 0 13
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: EQUAL
37003: IFFALSE 37007
// continue ;
37005: GO 36963
// PrepareHuman ( false , i , skill ) ;
37007: LD_INT 0
37009: PPUSH
37010: LD_VAR 0 8
37014: PPUSH
37015: LD_VAR 0 4
37019: PPUSH
37020: CALL_OW 380
// un := CreateHuman ;
37024: LD_ADDR_VAR 0 14
37028: PUSH
37029: CALL_OW 44
37033: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37034: LD_VAR 0 14
37038: PPUSH
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 250
37048: PPUSH
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 251
37058: PPUSH
37059: LD_INT 10
37061: PPUSH
37062: LD_INT 0
37064: PPUSH
37065: CALL_OW 50
// result := result ^ un ;
37069: LD_ADDR_VAR 0 7
37073: PUSH
37074: LD_VAR 0 7
37078: PUSH
37079: LD_VAR 0 14
37083: ADD
37084: ST_TO_ADDR
// end ;
37085: GO 36963
37087: POP
37088: POP
// end ; end ;
37089: LD_VAR 0 7
37093: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37094: LD_INT 0
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
// result := false ;
37112: LD_ADDR_VAR 0 3
37116: PUSH
37117: LD_INT 0
37119: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37120: LD_VAR 0 1
37124: NOT
37125: PUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 266
37135: PUSH
37136: LD_INT 32
37138: PUSH
37139: LD_INT 33
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: IN
37146: NOT
37147: OR
37148: IFFALSE 37152
// exit ;
37150: GO 38261
// nat := GetNation ( tower ) ;
37152: LD_ADDR_VAR 0 12
37156: PUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 248
37166: ST_TO_ADDR
// side := GetSide ( tower ) ;
37167: LD_ADDR_VAR 0 16
37171: PUSH
37172: LD_VAR 0 1
37176: PPUSH
37177: CALL_OW 255
37181: ST_TO_ADDR
// x := GetX ( tower ) ;
37182: LD_ADDR_VAR 0 10
37186: PUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: CALL_OW 250
37196: ST_TO_ADDR
// y := GetY ( tower ) ;
37197: LD_ADDR_VAR 0 11
37201: PUSH
37202: LD_VAR 0 1
37206: PPUSH
37207: CALL_OW 251
37211: ST_TO_ADDR
// if not x or not y then
37212: LD_VAR 0 10
37216: NOT
37217: PUSH
37218: LD_VAR 0 11
37222: NOT
37223: OR
37224: IFFALSE 37228
// exit ;
37226: GO 38261
// weapon := 0 ;
37228: LD_ADDR_VAR 0 18
37232: PUSH
37233: LD_INT 0
37235: ST_TO_ADDR
// fac_list := [ ] ;
37236: LD_ADDR_VAR 0 17
37240: PUSH
37241: EMPTY
37242: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37243: LD_ADDR_VAR 0 6
37247: PUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 274
37257: PPUSH
37258: LD_VAR 0 2
37262: PPUSH
37263: LD_INT 0
37265: PPUSH
37266: CALL 34832 0 3
37270: PPUSH
37271: LD_INT 30
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PPUSH
37281: CALL_OW 72
37285: ST_TO_ADDR
// if not factories then
37286: LD_VAR 0 6
37290: NOT
37291: IFFALSE 37295
// exit ;
37293: GO 38261
// for i in factories do
37295: LD_ADDR_VAR 0 8
37299: PUSH
37300: LD_VAR 0 6
37304: PUSH
37305: FOR_IN
37306: IFFALSE 37331
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37308: LD_ADDR_VAR 0 17
37312: PUSH
37313: LD_VAR 0 17
37317: PUSH
37318: LD_VAR 0 8
37322: PPUSH
37323: CALL_OW 478
37327: UNION
37328: ST_TO_ADDR
37329: GO 37305
37331: POP
37332: POP
// if not fac_list then
37333: LD_VAR 0 17
37337: NOT
37338: IFFALSE 37342
// exit ;
37340: GO 38261
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37342: LD_ADDR_VAR 0 5
37346: PUSH
37347: LD_INT 4
37349: PUSH
37350: LD_INT 5
37352: PUSH
37353: LD_INT 9
37355: PUSH
37356: LD_INT 10
37358: PUSH
37359: LD_INT 6
37361: PUSH
37362: LD_INT 7
37364: PUSH
37365: LD_INT 11
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 27
37379: PUSH
37380: LD_INT 28
37382: PUSH
37383: LD_INT 26
37385: PUSH
37386: LD_INT 30
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 43
37397: PUSH
37398: LD_INT 44
37400: PUSH
37401: LD_INT 46
37403: PUSH
37404: LD_INT 45
37406: PUSH
37407: LD_INT 47
37409: PUSH
37410: LD_INT 49
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: PUSH
37426: LD_VAR 0 12
37430: ARRAY
37431: ST_TO_ADDR
// list := list isect fac_list ;
37432: LD_ADDR_VAR 0 5
37436: PUSH
37437: LD_VAR 0 5
37441: PUSH
37442: LD_VAR 0 17
37446: ISECT
37447: ST_TO_ADDR
// if not list then
37448: LD_VAR 0 5
37452: NOT
37453: IFFALSE 37457
// exit ;
37455: GO 38261
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37457: LD_VAR 0 12
37461: PUSH
37462: LD_INT 3
37464: EQUAL
37465: PUSH
37466: LD_INT 49
37468: PUSH
37469: LD_VAR 0 5
37473: IN
37474: AND
37475: PUSH
37476: LD_INT 31
37478: PPUSH
37479: LD_VAR 0 16
37483: PPUSH
37484: CALL_OW 321
37488: PUSH
37489: LD_INT 2
37491: EQUAL
37492: AND
37493: IFFALSE 37553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37495: LD_INT 22
37497: PUSH
37498: LD_VAR 0 16
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 35
37509: PUSH
37510: LD_INT 49
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 91
37519: PUSH
37520: LD_VAR 0 1
37524: PUSH
37525: LD_INT 10
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: PPUSH
37538: CALL_OW 69
37542: NOT
37543: IFFALSE 37553
// weapon := ru_time_lapser ;
37545: LD_ADDR_VAR 0 18
37549: PUSH
37550: LD_INT 49
37552: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37553: LD_VAR 0 12
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: IN
37568: PUSH
37569: LD_INT 11
37571: PUSH
37572: LD_VAR 0 5
37576: IN
37577: PUSH
37578: LD_INT 30
37580: PUSH
37581: LD_VAR 0 5
37585: IN
37586: OR
37587: AND
37588: PUSH
37589: LD_INT 6
37591: PPUSH
37592: LD_VAR 0 16
37596: PPUSH
37597: CALL_OW 321
37601: PUSH
37602: LD_INT 2
37604: EQUAL
37605: AND
37606: IFFALSE 37771
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37608: LD_INT 22
37610: PUSH
37611: LD_VAR 0 16
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 35
37625: PUSH
37626: LD_INT 11
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 35
37635: PUSH
37636: LD_INT 30
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 91
37650: PUSH
37651: LD_VAR 0 1
37655: PUSH
37656: LD_INT 18
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: PPUSH
37669: CALL_OW 69
37673: NOT
37674: PUSH
37675: LD_INT 22
37677: PUSH
37678: LD_VAR 0 16
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: LD_INT 30
37692: PUSH
37693: LD_INT 32
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 30
37702: PUSH
37703: LD_INT 33
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 91
37717: PUSH
37718: LD_VAR 0 1
37722: PUSH
37723: LD_INT 12
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: PPUSH
37739: CALL_OW 69
37743: PUSH
37744: LD_INT 2
37746: GREATER
37747: AND
37748: IFFALSE 37771
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37750: LD_ADDR_VAR 0 18
37754: PUSH
37755: LD_INT 11
37757: PUSH
37758: LD_INT 30
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_VAR 0 12
37769: ARRAY
37770: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37771: LD_VAR 0 18
37775: NOT
37776: PUSH
37777: LD_INT 40
37779: PPUSH
37780: LD_VAR 0 16
37784: PPUSH
37785: CALL_OW 321
37789: PUSH
37790: LD_INT 2
37792: EQUAL
37793: AND
37794: PUSH
37795: LD_INT 7
37797: PUSH
37798: LD_VAR 0 5
37802: IN
37803: PUSH
37804: LD_INT 28
37806: PUSH
37807: LD_VAR 0 5
37811: IN
37812: OR
37813: PUSH
37814: LD_INT 45
37816: PUSH
37817: LD_VAR 0 5
37821: IN
37822: OR
37823: AND
37824: IFFALSE 38078
// begin hex := GetHexInfo ( x , y ) ;
37826: LD_ADDR_VAR 0 4
37830: PUSH
37831: LD_VAR 0 10
37835: PPUSH
37836: LD_VAR 0 11
37840: PPUSH
37841: CALL_OW 546
37845: ST_TO_ADDR
// if hex [ 1 ] then
37846: LD_VAR 0 4
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: IFFALSE 37858
// exit ;
37856: GO 38261
// height := hex [ 2 ] ;
37858: LD_ADDR_VAR 0 15
37862: PUSH
37863: LD_VAR 0 4
37867: PUSH
37868: LD_INT 2
37870: ARRAY
37871: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37872: LD_ADDR_VAR 0 14
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: LD_INT 3
37885: PUSH
37886: LD_INT 5
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: ST_TO_ADDR
// for i in tmp do
37895: LD_ADDR_VAR 0 8
37899: PUSH
37900: LD_VAR 0 14
37904: PUSH
37905: FOR_IN
37906: IFFALSE 38076
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37908: LD_ADDR_VAR 0 9
37912: PUSH
37913: LD_VAR 0 10
37917: PPUSH
37918: LD_VAR 0 8
37922: PPUSH
37923: LD_INT 5
37925: PPUSH
37926: CALL_OW 272
37930: PUSH
37931: LD_VAR 0 11
37935: PPUSH
37936: LD_VAR 0 8
37940: PPUSH
37941: LD_INT 5
37943: PPUSH
37944: CALL_OW 273
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37953: LD_VAR 0 9
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PPUSH
37962: LD_VAR 0 9
37966: PUSH
37967: LD_INT 2
37969: ARRAY
37970: PPUSH
37971: CALL_OW 488
37975: IFFALSE 38074
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37977: LD_ADDR_VAR 0 4
37981: PUSH
37982: LD_VAR 0 9
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PPUSH
37991: LD_VAR 0 9
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: PPUSH
38000: CALL_OW 546
38004: ST_TO_ADDR
// if hex [ 1 ] then
38005: LD_VAR 0 4
38009: PUSH
38010: LD_INT 1
38012: ARRAY
38013: IFFALSE 38017
// continue ;
38015: GO 37905
// h := hex [ 2 ] ;
38017: LD_ADDR_VAR 0 13
38021: PUSH
38022: LD_VAR 0 4
38026: PUSH
38027: LD_INT 2
38029: ARRAY
38030: ST_TO_ADDR
// if h + 7 < height then
38031: LD_VAR 0 13
38035: PUSH
38036: LD_INT 7
38038: PLUS
38039: PUSH
38040: LD_VAR 0 15
38044: LESS
38045: IFFALSE 38074
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38047: LD_ADDR_VAR 0 18
38051: PUSH
38052: LD_INT 7
38054: PUSH
38055: LD_INT 28
38057: PUSH
38058: LD_INT 45
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: PUSH
38066: LD_VAR 0 12
38070: ARRAY
38071: ST_TO_ADDR
// break ;
38072: GO 38076
// end ; end ; end ;
38074: GO 37905
38076: POP
38077: POP
// end ; if not weapon then
38078: LD_VAR 0 18
38082: NOT
38083: IFFALSE 38143
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: LD_VAR 0 5
38094: PUSH
38095: LD_INT 11
38097: PUSH
38098: LD_INT 30
38100: PUSH
38101: LD_INT 49
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: DIFF
38109: ST_TO_ADDR
// if not list then
38110: LD_VAR 0 5
38114: NOT
38115: IFFALSE 38119
// exit ;
38117: GO 38261
// weapon := list [ rand ( 1 , list ) ] ;
38119: LD_ADDR_VAR 0 18
38123: PUSH
38124: LD_VAR 0 5
38128: PUSH
38129: LD_INT 1
38131: PPUSH
38132: LD_VAR 0 5
38136: PPUSH
38137: CALL_OW 12
38141: ARRAY
38142: ST_TO_ADDR
// end ; if weapon then
38143: LD_VAR 0 18
38147: IFFALSE 38261
// begin tmp := CostOfWeapon ( weapon ) ;
38149: LD_ADDR_VAR 0 14
38153: PUSH
38154: LD_VAR 0 18
38158: PPUSH
38159: CALL_OW 451
38163: ST_TO_ADDR
// j := GetBase ( tower ) ;
38164: LD_ADDR_VAR 0 9
38168: PUSH
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 274
38178: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38179: LD_VAR 0 9
38183: PPUSH
38184: LD_INT 1
38186: PPUSH
38187: CALL_OW 275
38191: PUSH
38192: LD_VAR 0 14
38196: PUSH
38197: LD_INT 1
38199: ARRAY
38200: GREATEREQUAL
38201: PUSH
38202: LD_VAR 0 9
38206: PPUSH
38207: LD_INT 2
38209: PPUSH
38210: CALL_OW 275
38214: PUSH
38215: LD_VAR 0 14
38219: PUSH
38220: LD_INT 2
38222: ARRAY
38223: GREATEREQUAL
38224: AND
38225: PUSH
38226: LD_VAR 0 9
38230: PPUSH
38231: LD_INT 3
38233: PPUSH
38234: CALL_OW 275
38238: PUSH
38239: LD_VAR 0 14
38243: PUSH
38244: LD_INT 3
38246: ARRAY
38247: GREATEREQUAL
38248: AND
38249: IFFALSE 38261
// result := weapon ;
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: LD_VAR 0 18
38260: ST_TO_ADDR
// end ; end ;
38261: LD_VAR 0 3
38265: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38266: LD_INT 0
38268: PPUSH
38269: PPUSH
// result := true ;
38270: LD_ADDR_VAR 0 3
38274: PUSH
38275: LD_INT 1
38277: ST_TO_ADDR
// if array1 = array2 then
38278: LD_VAR 0 1
38282: PUSH
38283: LD_VAR 0 2
38287: EQUAL
38288: IFFALSE 38348
// begin for i = 1 to array1 do
38290: LD_ADDR_VAR 0 4
38294: PUSH
38295: DOUBLE
38296: LD_INT 1
38298: DEC
38299: ST_TO_ADDR
38300: LD_VAR 0 1
38304: PUSH
38305: FOR_TO
38306: IFFALSE 38344
// if array1 [ i ] <> array2 [ i ] then
38308: LD_VAR 0 1
38312: PUSH
38313: LD_VAR 0 4
38317: ARRAY
38318: PUSH
38319: LD_VAR 0 2
38323: PUSH
38324: LD_VAR 0 4
38328: ARRAY
38329: NONEQUAL
38330: IFFALSE 38342
// begin result := false ;
38332: LD_ADDR_VAR 0 3
38336: PUSH
38337: LD_INT 0
38339: ST_TO_ADDR
// break ;
38340: GO 38344
// end ;
38342: GO 38305
38344: POP
38345: POP
// end else
38346: GO 38356
// result := false ;
38348: LD_ADDR_VAR 0 3
38352: PUSH
38353: LD_INT 0
38355: ST_TO_ADDR
// end ;
38356: LD_VAR 0 3
38360: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38361: LD_INT 0
38363: PPUSH
38364: PPUSH
// if not array1 or not array2 then
38365: LD_VAR 0 1
38369: NOT
38370: PUSH
38371: LD_VAR 0 2
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 38445
// result := true ;
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_INT 1
38388: ST_TO_ADDR
// for i = 1 to array1 do
38389: LD_ADDR_VAR 0 4
38393: PUSH
38394: DOUBLE
38395: LD_INT 1
38397: DEC
38398: ST_TO_ADDR
38399: LD_VAR 0 1
38403: PUSH
38404: FOR_TO
38405: IFFALSE 38443
// if array1 [ i ] <> array2 [ i ] then
38407: LD_VAR 0 1
38411: PUSH
38412: LD_VAR 0 4
38416: ARRAY
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_VAR 0 4
38427: ARRAY
38428: NONEQUAL
38429: IFFALSE 38441
// begin result := false ;
38431: LD_ADDR_VAR 0 3
38435: PUSH
38436: LD_INT 0
38438: ST_TO_ADDR
// break ;
38439: GO 38443
// end ;
38441: GO 38404
38443: POP
38444: POP
// end ;
38445: LD_VAR 0 3
38449: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
38454: PPUSH
// pom := GetBase ( fac ) ;
38455: LD_ADDR_VAR 0 5
38459: PUSH
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 274
38469: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38470: LD_ADDR_VAR 0 4
38474: PUSH
38475: LD_VAR 0 2
38479: PUSH
38480: LD_INT 1
38482: ARRAY
38483: PPUSH
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 2
38491: ARRAY
38492: PPUSH
38493: LD_VAR 0 2
38497: PUSH
38498: LD_INT 3
38500: ARRAY
38501: PPUSH
38502: LD_VAR 0 2
38506: PUSH
38507: LD_INT 4
38509: ARRAY
38510: PPUSH
38511: CALL_OW 449
38515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38516: LD_ADDR_VAR 0 3
38520: PUSH
38521: LD_VAR 0 5
38525: PPUSH
38526: LD_INT 1
38528: PPUSH
38529: CALL_OW 275
38533: PUSH
38534: LD_VAR 0 4
38538: PUSH
38539: LD_INT 1
38541: ARRAY
38542: GREATEREQUAL
38543: PUSH
38544: LD_VAR 0 5
38548: PPUSH
38549: LD_INT 2
38551: PPUSH
38552: CALL_OW 275
38556: PUSH
38557: LD_VAR 0 4
38561: PUSH
38562: LD_INT 2
38564: ARRAY
38565: GREATEREQUAL
38566: AND
38567: PUSH
38568: LD_VAR 0 5
38572: PPUSH
38573: LD_INT 3
38575: PPUSH
38576: CALL_OW 275
38580: PUSH
38581: LD_VAR 0 4
38585: PUSH
38586: LD_INT 3
38588: ARRAY
38589: GREATEREQUAL
38590: AND
38591: ST_TO_ADDR
// end ;
38592: LD_VAR 0 3
38596: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38597: LD_INT 0
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
// pom := GetBase ( building ) ;
38603: LD_ADDR_VAR 0 3
38607: PUSH
38608: LD_VAR 0 1
38612: PPUSH
38613: CALL_OW 274
38617: ST_TO_ADDR
// if not pom then
38618: LD_VAR 0 3
38622: NOT
38623: IFFALSE 38627
// exit ;
38625: GO 38797
// btype := GetBType ( building ) ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 266
38641: ST_TO_ADDR
// if btype = b_armoury then
38642: LD_VAR 0 5
38646: PUSH
38647: LD_INT 4
38649: EQUAL
38650: IFFALSE 38660
// btype := b_barracks ;
38652: LD_ADDR_VAR 0 5
38656: PUSH
38657: LD_INT 5
38659: ST_TO_ADDR
// if btype = b_depot then
38660: LD_VAR 0 5
38664: PUSH
38665: LD_INT 0
38667: EQUAL
38668: IFFALSE 38678
// btype := b_warehouse ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_INT 1
38677: ST_TO_ADDR
// if btype = b_workshop then
38678: LD_VAR 0 5
38682: PUSH
38683: LD_INT 2
38685: EQUAL
38686: IFFALSE 38696
// btype := b_factory ;
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: LD_INT 3
38695: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38696: LD_ADDR_VAR 0 4
38700: PUSH
38701: LD_VAR 0 5
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 248
38715: PPUSH
38716: CALL_OW 450
38720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38721: LD_ADDR_VAR 0 2
38725: PUSH
38726: LD_VAR 0 3
38730: PPUSH
38731: LD_INT 1
38733: PPUSH
38734: CALL_OW 275
38738: PUSH
38739: LD_VAR 0 4
38743: PUSH
38744: LD_INT 1
38746: ARRAY
38747: GREATEREQUAL
38748: PUSH
38749: LD_VAR 0 3
38753: PPUSH
38754: LD_INT 2
38756: PPUSH
38757: CALL_OW 275
38761: PUSH
38762: LD_VAR 0 4
38766: PUSH
38767: LD_INT 2
38769: ARRAY
38770: GREATEREQUAL
38771: AND
38772: PUSH
38773: LD_VAR 0 3
38777: PPUSH
38778: LD_INT 3
38780: PPUSH
38781: CALL_OW 275
38785: PUSH
38786: LD_VAR 0 4
38790: PUSH
38791: LD_INT 3
38793: ARRAY
38794: GREATEREQUAL
38795: AND
38796: ST_TO_ADDR
// end ;
38797: LD_VAR 0 2
38801: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38802: LD_INT 0
38804: PPUSH
38805: PPUSH
38806: PPUSH
// pom := GetBase ( building ) ;
38807: LD_ADDR_VAR 0 4
38811: PUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: CALL_OW 274
38821: ST_TO_ADDR
// if not pom then
38822: LD_VAR 0 4
38826: NOT
38827: IFFALSE 38831
// exit ;
38829: GO 38932
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38831: LD_ADDR_VAR 0 5
38835: PUSH
38836: LD_VAR 0 2
38840: PPUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: CALL_OW 248
38850: PPUSH
38851: CALL_OW 450
38855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38856: LD_ADDR_VAR 0 3
38860: PUSH
38861: LD_VAR 0 4
38865: PPUSH
38866: LD_INT 1
38868: PPUSH
38869: CALL_OW 275
38873: PUSH
38874: LD_VAR 0 5
38878: PUSH
38879: LD_INT 1
38881: ARRAY
38882: GREATEREQUAL
38883: PUSH
38884: LD_VAR 0 4
38888: PPUSH
38889: LD_INT 2
38891: PPUSH
38892: CALL_OW 275
38896: PUSH
38897: LD_VAR 0 5
38901: PUSH
38902: LD_INT 2
38904: ARRAY
38905: GREATEREQUAL
38906: AND
38907: PUSH
38908: LD_VAR 0 4
38912: PPUSH
38913: LD_INT 3
38915: PPUSH
38916: CALL_OW 275
38920: PUSH
38921: LD_VAR 0 5
38925: PUSH
38926: LD_INT 3
38928: ARRAY
38929: GREATEREQUAL
38930: AND
38931: ST_TO_ADDR
// end ;
38932: LD_VAR 0 3
38936: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38937: LD_INT 0
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
// result := false ;
38950: LD_ADDR_VAR 0 8
38954: PUSH
38955: LD_INT 0
38957: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38958: LD_VAR 0 5
38962: NOT
38963: PUSH
38964: LD_VAR 0 1
38968: NOT
38969: OR
38970: PUSH
38971: LD_VAR 0 2
38975: NOT
38976: OR
38977: PUSH
38978: LD_VAR 0 3
38982: NOT
38983: OR
38984: IFFALSE 38988
// exit ;
38986: GO 39802
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38988: LD_ADDR_VAR 0 14
38992: PUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: LD_VAR 0 2
39002: PPUSH
39003: LD_VAR 0 3
39007: PPUSH
39008: LD_VAR 0 4
39012: PPUSH
39013: LD_VAR 0 5
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: PPUSH
39022: CALL_OW 248
39026: PPUSH
39027: LD_INT 0
39029: PPUSH
39030: CALL 41039 0 6
39034: ST_TO_ADDR
// if not hexes then
39035: LD_VAR 0 14
39039: NOT
39040: IFFALSE 39044
// exit ;
39042: GO 39802
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39044: LD_ADDR_VAR 0 17
39048: PUSH
39049: LD_VAR 0 5
39053: PPUSH
39054: LD_INT 22
39056: PUSH
39057: LD_VAR 0 13
39061: PPUSH
39062: CALL_OW 255
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 30
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 30
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PPUSH
39103: CALL_OW 72
39107: ST_TO_ADDR
// for i = 1 to hexes do
39108: LD_ADDR_VAR 0 9
39112: PUSH
39113: DOUBLE
39114: LD_INT 1
39116: DEC
39117: ST_TO_ADDR
39118: LD_VAR 0 14
39122: PUSH
39123: FOR_TO
39124: IFFALSE 39800
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39126: LD_ADDR_VAR 0 13
39130: PUSH
39131: LD_VAR 0 14
39135: PUSH
39136: LD_VAR 0 9
39140: ARRAY
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: PPUSH
39146: LD_VAR 0 14
39150: PUSH
39151: LD_VAR 0 9
39155: ARRAY
39156: PUSH
39157: LD_INT 2
39159: ARRAY
39160: PPUSH
39161: CALL_OW 428
39165: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39166: LD_VAR 0 14
39170: PUSH
39171: LD_VAR 0 9
39175: ARRAY
39176: PUSH
39177: LD_INT 1
39179: ARRAY
39180: PPUSH
39181: LD_VAR 0 14
39185: PUSH
39186: LD_VAR 0 9
39190: ARRAY
39191: PUSH
39192: LD_INT 2
39194: ARRAY
39195: PPUSH
39196: CALL_OW 351
39200: PUSH
39201: LD_VAR 0 14
39205: PUSH
39206: LD_VAR 0 9
39210: ARRAY
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PPUSH
39216: LD_VAR 0 14
39220: PUSH
39221: LD_VAR 0 9
39225: ARRAY
39226: PUSH
39227: LD_INT 2
39229: ARRAY
39230: PPUSH
39231: CALL_OW 488
39235: NOT
39236: OR
39237: PUSH
39238: LD_VAR 0 13
39242: PPUSH
39243: CALL_OW 247
39247: PUSH
39248: LD_INT 3
39250: EQUAL
39251: OR
39252: IFFALSE 39258
// exit ;
39254: POP
39255: POP
39256: GO 39802
// if not tmp then
39258: LD_VAR 0 13
39262: NOT
39263: IFFALSE 39267
// continue ;
39265: GO 39123
// result := true ;
39267: LD_ADDR_VAR 0 8
39271: PUSH
39272: LD_INT 1
39274: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39275: LD_VAR 0 6
39279: PUSH
39280: LD_VAR 0 13
39284: PPUSH
39285: CALL_OW 247
39289: PUSH
39290: LD_INT 2
39292: EQUAL
39293: AND
39294: PUSH
39295: LD_VAR 0 13
39299: PPUSH
39300: CALL_OW 263
39304: PUSH
39305: LD_INT 1
39307: EQUAL
39308: AND
39309: IFFALSE 39473
// begin if IsDrivenBy ( tmp ) then
39311: LD_VAR 0 13
39315: PPUSH
39316: CALL_OW 311
39320: IFFALSE 39324
// continue ;
39322: GO 39123
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39324: LD_VAR 0 6
39328: PPUSH
39329: LD_INT 3
39331: PUSH
39332: LD_INT 60
39334: PUSH
39335: EMPTY
39336: LIST
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: LD_INT 55
39347: PUSH
39348: EMPTY
39349: LIST
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PPUSH
39359: CALL_OW 72
39363: IFFALSE 39471
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39365: LD_ADDR_VAR 0 18
39369: PUSH
39370: LD_VAR 0 6
39374: PPUSH
39375: LD_INT 3
39377: PUSH
39378: LD_INT 60
39380: PUSH
39381: EMPTY
39382: LIST
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: LD_INT 55
39393: PUSH
39394: EMPTY
39395: LIST
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PPUSH
39405: CALL_OW 72
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: ST_TO_ADDR
// if IsInUnit ( driver ) then
39414: LD_VAR 0 18
39418: PPUSH
39419: CALL_OW 310
39423: IFFALSE 39434
// ComExit ( driver ) ;
39425: LD_VAR 0 18
39429: PPUSH
39430: CALL 64223 0 1
// AddComEnterUnit ( driver , tmp ) ;
39434: LD_VAR 0 18
39438: PPUSH
39439: LD_VAR 0 13
39443: PPUSH
39444: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39448: LD_VAR 0 18
39452: PPUSH
39453: LD_VAR 0 7
39457: PPUSH
39458: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39462: LD_VAR 0 18
39466: PPUSH
39467: CALL_OW 181
// end ; continue ;
39471: GO 39123
// end ; if not cleaners or not tmp in cleaners then
39473: LD_VAR 0 6
39477: NOT
39478: PUSH
39479: LD_VAR 0 13
39483: PUSH
39484: LD_VAR 0 6
39488: IN
39489: NOT
39490: OR
39491: IFFALSE 39798
// begin if dep then
39493: LD_VAR 0 17
39497: IFFALSE 39633
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39499: LD_ADDR_VAR 0 16
39503: PUSH
39504: LD_VAR 0 17
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PPUSH
39513: CALL_OW 250
39517: PPUSH
39518: LD_VAR 0 17
39522: PUSH
39523: LD_INT 1
39525: ARRAY
39526: PPUSH
39527: CALL_OW 254
39531: PPUSH
39532: LD_INT 5
39534: PPUSH
39535: CALL_OW 272
39539: PUSH
39540: LD_VAR 0 17
39544: PUSH
39545: LD_INT 1
39547: ARRAY
39548: PPUSH
39549: CALL_OW 251
39553: PPUSH
39554: LD_VAR 0 17
39558: PUSH
39559: LD_INT 1
39561: ARRAY
39562: PPUSH
39563: CALL_OW 254
39567: PPUSH
39568: LD_INT 5
39570: PPUSH
39571: CALL_OW 273
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39580: LD_VAR 0 16
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: PPUSH
39589: LD_VAR 0 16
39593: PUSH
39594: LD_INT 2
39596: ARRAY
39597: PPUSH
39598: CALL_OW 488
39602: IFFALSE 39633
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39604: LD_VAR 0 13
39608: PPUSH
39609: LD_VAR 0 16
39613: PUSH
39614: LD_INT 1
39616: ARRAY
39617: PPUSH
39618: LD_VAR 0 16
39622: PUSH
39623: LD_INT 2
39625: ARRAY
39626: PPUSH
39627: CALL_OW 111
// continue ;
39631: GO 39123
// end ; end ; r := GetDir ( tmp ) ;
39633: LD_ADDR_VAR 0 15
39637: PUSH
39638: LD_VAR 0 13
39642: PPUSH
39643: CALL_OW 254
39647: ST_TO_ADDR
// if r = 5 then
39648: LD_VAR 0 15
39652: PUSH
39653: LD_INT 5
39655: EQUAL
39656: IFFALSE 39666
// r := 0 ;
39658: LD_ADDR_VAR 0 15
39662: PUSH
39663: LD_INT 0
39665: ST_TO_ADDR
// for j = r to 5 do
39666: LD_ADDR_VAR 0 10
39670: PUSH
39671: DOUBLE
39672: LD_VAR 0 15
39676: DEC
39677: ST_TO_ADDR
39678: LD_INT 5
39680: PUSH
39681: FOR_TO
39682: IFFALSE 39796
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39684: LD_ADDR_VAR 0 11
39688: PUSH
39689: LD_VAR 0 13
39693: PPUSH
39694: CALL_OW 250
39698: PPUSH
39699: LD_VAR 0 10
39703: PPUSH
39704: LD_INT 2
39706: PPUSH
39707: CALL_OW 272
39711: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39712: LD_ADDR_VAR 0 12
39716: PUSH
39717: LD_VAR 0 13
39721: PPUSH
39722: CALL_OW 251
39726: PPUSH
39727: LD_VAR 0 10
39731: PPUSH
39732: LD_INT 2
39734: PPUSH
39735: CALL_OW 273
39739: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39740: LD_VAR 0 11
39744: PPUSH
39745: LD_VAR 0 12
39749: PPUSH
39750: CALL_OW 488
39754: PUSH
39755: LD_VAR 0 11
39759: PPUSH
39760: LD_VAR 0 12
39764: PPUSH
39765: CALL_OW 428
39769: NOT
39770: AND
39771: IFFALSE 39794
// begin ComMoveXY ( tmp , _x , _y ) ;
39773: LD_VAR 0 13
39777: PPUSH
39778: LD_VAR 0 11
39782: PPUSH
39783: LD_VAR 0 12
39787: PPUSH
39788: CALL_OW 111
// break ;
39792: GO 39796
// end ; end ;
39794: GO 39681
39796: POP
39797: POP
// end ; end ;
39798: GO 39123
39800: POP
39801: POP
// end ;
39802: LD_VAR 0 8
39806: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39807: LD_INT 0
39809: PPUSH
// result := true ;
39810: LD_ADDR_VAR 0 3
39814: PUSH
39815: LD_INT 1
39817: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39818: LD_VAR 0 2
39822: PUSH
39823: LD_INT 24
39825: DOUBLE
39826: EQUAL
39827: IFTRUE 39837
39829: LD_INT 33
39831: DOUBLE
39832: EQUAL
39833: IFTRUE 39837
39835: GO 39862
39837: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39838: LD_ADDR_VAR 0 3
39842: PUSH
39843: LD_INT 32
39845: PPUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 321
39855: PUSH
39856: LD_INT 2
39858: EQUAL
39859: ST_TO_ADDR
39860: GO 40182
39862: LD_INT 20
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39870
39868: GO 39895
39870: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 6
39878: PPUSH
39879: LD_VAR 0 1
39883: PPUSH
39884: CALL_OW 321
39888: PUSH
39889: LD_INT 2
39891: EQUAL
39892: ST_TO_ADDR
39893: GO 40182
39895: LD_INT 22
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39909
39901: LD_INT 36
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39934
39909: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 15
39917: PPUSH
39918: LD_VAR 0 1
39922: PPUSH
39923: CALL_OW 321
39927: PUSH
39928: LD_INT 2
39930: EQUAL
39931: ST_TO_ADDR
39932: GO 40182
39934: LD_INT 30
39936: DOUBLE
39937: EQUAL
39938: IFTRUE 39942
39940: GO 39967
39942: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39943: LD_ADDR_VAR 0 3
39947: PUSH
39948: LD_INT 20
39950: PPUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 321
39960: PUSH
39961: LD_INT 2
39963: EQUAL
39964: ST_TO_ADDR
39965: GO 40182
39967: LD_INT 28
39969: DOUBLE
39970: EQUAL
39971: IFTRUE 39981
39973: LD_INT 21
39975: DOUBLE
39976: EQUAL
39977: IFTRUE 39981
39979: GO 40006
39981: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_INT 21
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 321
39999: PUSH
40000: LD_INT 2
40002: EQUAL
40003: ST_TO_ADDR
40004: GO 40182
40006: LD_INT 16
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 40041
40014: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40015: LD_ADDR_VAR 0 3
40019: PUSH
40020: LD_EXP 122
40024: PPUSH
40025: LD_VAR 0 1
40029: PPUSH
40030: CALL_OW 321
40034: PUSH
40035: LD_INT 2
40037: EQUAL
40038: ST_TO_ADDR
40039: GO 40182
40041: LD_INT 19
40043: DOUBLE
40044: EQUAL
40045: IFTRUE 40055
40047: LD_INT 23
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 40082
40055: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40056: LD_ADDR_VAR 0 3
40060: PUSH
40061: LD_EXP 121
40065: PPUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 321
40075: PUSH
40076: LD_INT 2
40078: EQUAL
40079: ST_TO_ADDR
40080: GO 40182
40082: LD_INT 17
40084: DOUBLE
40085: EQUAL
40086: IFTRUE 40090
40088: GO 40115
40090: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_INT 39
40098: PPUSH
40099: LD_VAR 0 1
40103: PPUSH
40104: CALL_OW 321
40108: PUSH
40109: LD_INT 2
40111: EQUAL
40112: ST_TO_ADDR
40113: GO 40182
40115: LD_INT 18
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40123
40121: GO 40148
40123: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 40
40131: PPUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 321
40141: PUSH
40142: LD_INT 2
40144: EQUAL
40145: ST_TO_ADDR
40146: GO 40182
40148: LD_INT 27
40150: DOUBLE
40151: EQUAL
40152: IFTRUE 40156
40154: GO 40181
40156: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40157: LD_ADDR_VAR 0 3
40161: PUSH
40162: LD_INT 35
40164: PPUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: CALL_OW 321
40174: PUSH
40175: LD_INT 2
40177: EQUAL
40178: ST_TO_ADDR
40179: GO 40182
40181: POP
// end ;
40182: LD_VAR 0 3
40186: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40187: LD_INT 0
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
// result := false ;
40200: LD_ADDR_VAR 0 6
40204: PUSH
40205: LD_INT 0
40207: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40208: LD_VAR 0 1
40212: NOT
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 266
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: IN
40234: NOT
40235: OR
40236: PUSH
40237: LD_VAR 0 2
40241: NOT
40242: OR
40243: PUSH
40244: LD_VAR 0 5
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 3
40260: PUSH
40261: LD_INT 4
40263: PUSH
40264: LD_INT 5
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: IN
40275: NOT
40276: OR
40277: PUSH
40278: LD_VAR 0 3
40282: PPUSH
40283: LD_VAR 0 4
40287: PPUSH
40288: CALL_OW 488
40292: NOT
40293: OR
40294: IFFALSE 40298
// exit ;
40296: GO 41034
// side := GetSide ( depot ) ;
40298: LD_ADDR_VAR 0 9
40302: PUSH
40303: LD_VAR 0 1
40307: PPUSH
40308: CALL_OW 255
40312: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40313: LD_VAR 0 9
40317: PPUSH
40318: LD_VAR 0 2
40322: PPUSH
40323: CALL 39807 0 2
40327: NOT
40328: IFFALSE 40332
// exit ;
40330: GO 41034
// pom := GetBase ( depot ) ;
40332: LD_ADDR_VAR 0 10
40336: PUSH
40337: LD_VAR 0 1
40341: PPUSH
40342: CALL_OW 274
40346: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40347: LD_ADDR_VAR 0 11
40351: PUSH
40352: LD_VAR 0 2
40356: PPUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: CALL_OW 248
40366: PPUSH
40367: CALL_OW 450
40371: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40372: LD_VAR 0 10
40376: PPUSH
40377: LD_INT 1
40379: PPUSH
40380: CALL_OW 275
40384: PUSH
40385: LD_VAR 0 11
40389: PUSH
40390: LD_INT 1
40392: ARRAY
40393: GREATEREQUAL
40394: PUSH
40395: LD_VAR 0 10
40399: PPUSH
40400: LD_INT 2
40402: PPUSH
40403: CALL_OW 275
40407: PUSH
40408: LD_VAR 0 11
40412: PUSH
40413: LD_INT 2
40415: ARRAY
40416: GREATEREQUAL
40417: AND
40418: PUSH
40419: LD_VAR 0 10
40423: PPUSH
40424: LD_INT 3
40426: PPUSH
40427: CALL_OW 275
40431: PUSH
40432: LD_VAR 0 11
40436: PUSH
40437: LD_INT 3
40439: ARRAY
40440: GREATEREQUAL
40441: AND
40442: NOT
40443: IFFALSE 40447
// exit ;
40445: GO 41034
// if GetBType ( depot ) = b_depot then
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL_OW 266
40456: PUSH
40457: LD_INT 0
40459: EQUAL
40460: IFFALSE 40472
// dist := 28 else
40462: LD_ADDR_VAR 0 14
40466: PUSH
40467: LD_INT 28
40469: ST_TO_ADDR
40470: GO 40480
// dist := 36 ;
40472: LD_ADDR_VAR 0 14
40476: PUSH
40477: LD_INT 36
40479: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40480: LD_VAR 0 1
40484: PPUSH
40485: LD_VAR 0 3
40489: PPUSH
40490: LD_VAR 0 4
40494: PPUSH
40495: CALL_OW 297
40499: PUSH
40500: LD_VAR 0 14
40504: GREATER
40505: IFFALSE 40509
// exit ;
40507: GO 41034
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40509: LD_ADDR_VAR 0 12
40513: PUSH
40514: LD_VAR 0 2
40518: PPUSH
40519: LD_VAR 0 3
40523: PPUSH
40524: LD_VAR 0 4
40528: PPUSH
40529: LD_VAR 0 5
40533: PPUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 248
40543: PPUSH
40544: LD_INT 0
40546: PPUSH
40547: CALL 41039 0 6
40551: ST_TO_ADDR
// if not hexes then
40552: LD_VAR 0 12
40556: NOT
40557: IFFALSE 40561
// exit ;
40559: GO 41034
// hex := GetHexInfo ( x , y ) ;
40561: LD_ADDR_VAR 0 15
40565: PUSH
40566: LD_VAR 0 3
40570: PPUSH
40571: LD_VAR 0 4
40575: PPUSH
40576: CALL_OW 546
40580: ST_TO_ADDR
// if hex [ 1 ] then
40581: LD_VAR 0 15
40585: PUSH
40586: LD_INT 1
40588: ARRAY
40589: IFFALSE 40593
// exit ;
40591: GO 41034
// height := hex [ 2 ] ;
40593: LD_ADDR_VAR 0 13
40597: PUSH
40598: LD_VAR 0 15
40602: PUSH
40603: LD_INT 2
40605: ARRAY
40606: ST_TO_ADDR
// for i = 1 to hexes do
40607: LD_ADDR_VAR 0 7
40611: PUSH
40612: DOUBLE
40613: LD_INT 1
40615: DEC
40616: ST_TO_ADDR
40617: LD_VAR 0 12
40621: PUSH
40622: FOR_TO
40623: IFFALSE 40953
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40625: LD_VAR 0 12
40629: PUSH
40630: LD_VAR 0 7
40634: ARRAY
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PPUSH
40640: LD_VAR 0 12
40644: PUSH
40645: LD_VAR 0 7
40649: ARRAY
40650: PUSH
40651: LD_INT 2
40653: ARRAY
40654: PPUSH
40655: CALL_OW 488
40659: NOT
40660: PUSH
40661: LD_VAR 0 12
40665: PUSH
40666: LD_VAR 0 7
40670: ARRAY
40671: PUSH
40672: LD_INT 1
40674: ARRAY
40675: PPUSH
40676: LD_VAR 0 12
40680: PUSH
40681: LD_VAR 0 7
40685: ARRAY
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: PPUSH
40691: CALL_OW 428
40695: PUSH
40696: LD_INT 0
40698: GREATER
40699: OR
40700: PUSH
40701: LD_VAR 0 12
40705: PUSH
40706: LD_VAR 0 7
40710: ARRAY
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 12
40720: PUSH
40721: LD_VAR 0 7
40725: ARRAY
40726: PUSH
40727: LD_INT 2
40729: ARRAY
40730: PPUSH
40731: CALL_OW 351
40735: OR
40736: IFFALSE 40742
// exit ;
40738: POP
40739: POP
40740: GO 41034
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40742: LD_ADDR_VAR 0 8
40746: PUSH
40747: LD_VAR 0 12
40751: PUSH
40752: LD_VAR 0 7
40756: ARRAY
40757: PUSH
40758: LD_INT 1
40760: ARRAY
40761: PPUSH
40762: LD_VAR 0 12
40766: PUSH
40767: LD_VAR 0 7
40771: ARRAY
40772: PUSH
40773: LD_INT 2
40775: ARRAY
40776: PPUSH
40777: CALL_OW 546
40781: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40782: LD_VAR 0 8
40786: PUSH
40787: LD_INT 1
40789: ARRAY
40790: PUSH
40791: LD_VAR 0 8
40795: PUSH
40796: LD_INT 2
40798: ARRAY
40799: PUSH
40800: LD_VAR 0 13
40804: PUSH
40805: LD_INT 2
40807: PLUS
40808: GREATER
40809: OR
40810: PUSH
40811: LD_VAR 0 8
40815: PUSH
40816: LD_INT 2
40818: ARRAY
40819: PUSH
40820: LD_VAR 0 13
40824: PUSH
40825: LD_INT 2
40827: MINUS
40828: LESS
40829: OR
40830: PUSH
40831: LD_VAR 0 8
40835: PUSH
40836: LD_INT 3
40838: ARRAY
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 8
40845: PUSH
40846: LD_INT 9
40848: PUSH
40849: LD_INT 10
40851: PUSH
40852: LD_INT 11
40854: PUSH
40855: LD_INT 12
40857: PUSH
40858: LD_INT 13
40860: PUSH
40861: LD_INT 16
40863: PUSH
40864: LD_INT 17
40866: PUSH
40867: LD_INT 18
40869: PUSH
40870: LD_INT 19
40872: PUSH
40873: LD_INT 20
40875: PUSH
40876: LD_INT 21
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: IN
40894: NOT
40895: OR
40896: PUSH
40897: LD_VAR 0 8
40901: PUSH
40902: LD_INT 5
40904: ARRAY
40905: NOT
40906: OR
40907: PUSH
40908: LD_VAR 0 8
40912: PUSH
40913: LD_INT 6
40915: ARRAY
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 7
40925: PUSH
40926: LD_INT 9
40928: PUSH
40929: LD_INT 10
40931: PUSH
40932: LD_INT 11
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: IN
40943: NOT
40944: OR
40945: IFFALSE 40951
// exit ;
40947: POP
40948: POP
40949: GO 41034
// end ;
40951: GO 40622
40953: POP
40954: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40955: LD_VAR 0 9
40959: PPUSH
40960: LD_VAR 0 3
40964: PPUSH
40965: LD_VAR 0 4
40969: PPUSH
40970: LD_INT 20
40972: PPUSH
40973: CALL 32980 0 4
40977: PUSH
40978: LD_INT 4
40980: ARRAY
40981: IFFALSE 40985
// exit ;
40983: GO 41034
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40985: LD_VAR 0 2
40989: PUSH
40990: LD_INT 29
40992: PUSH
40993: LD_INT 30
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: IN
41000: PUSH
41001: LD_VAR 0 3
41005: PPUSH
41006: LD_VAR 0 4
41010: PPUSH
41011: LD_VAR 0 9
41015: PPUSH
41016: CALL_OW 440
41020: NOT
41021: AND
41022: IFFALSE 41026
// exit ;
41024: GO 41034
// result := true ;
41026: LD_ADDR_VAR 0 6
41030: PUSH
41031: LD_INT 1
41033: ST_TO_ADDR
// end ;
41034: LD_VAR 0 6
41038: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41039: LD_INT 0
41041: PPUSH
41042: PPUSH
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
// result = [ ] ;
41099: LD_ADDR_VAR 0 7
41103: PUSH
41104: EMPTY
41105: ST_TO_ADDR
// temp_list = [ ] ;
41106: LD_ADDR_VAR 0 9
41110: PUSH
41111: EMPTY
41112: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41113: LD_VAR 0 4
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 3
41129: PUSH
41130: LD_INT 4
41132: PUSH
41133: LD_INT 5
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: IN
41144: NOT
41145: PUSH
41146: LD_VAR 0 1
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: IN
41161: PUSH
41162: LD_VAR 0 5
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: IN
41181: NOT
41182: AND
41183: OR
41184: IFFALSE 41188
// exit ;
41186: GO 59579
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41188: LD_VAR 0 1
41192: PUSH
41193: LD_INT 6
41195: PUSH
41196: LD_INT 7
41198: PUSH
41199: LD_INT 8
41201: PUSH
41202: LD_INT 13
41204: PUSH
41205: LD_INT 12
41207: PUSH
41208: LD_INT 15
41210: PUSH
41211: LD_INT 11
41213: PUSH
41214: LD_INT 14
41216: PUSH
41217: LD_INT 10
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: IN
41231: IFFALSE 41241
// btype = b_lab ;
41233: LD_ADDR_VAR 0 1
41237: PUSH
41238: LD_INT 6
41240: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41241: LD_VAR 0 6
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: IN
41260: NOT
41261: PUSH
41262: LD_VAR 0 1
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 3
41278: PUSH
41279: LD_INT 6
41281: PUSH
41282: LD_INT 36
41284: PUSH
41285: LD_INT 4
41287: PUSH
41288: LD_INT 5
41290: PUSH
41291: LD_INT 31
41293: PUSH
41294: LD_INT 32
41296: PUSH
41297: LD_INT 33
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: IN
41313: NOT
41314: PUSH
41315: LD_VAR 0 6
41319: PUSH
41320: LD_INT 1
41322: EQUAL
41323: AND
41324: OR
41325: PUSH
41326: LD_VAR 0 1
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: IN
41341: NOT
41342: PUSH
41343: LD_VAR 0 6
41347: PUSH
41348: LD_INT 2
41350: EQUAL
41351: AND
41352: OR
41353: IFFALSE 41363
// mode = 0 ;
41355: LD_ADDR_VAR 0 6
41359: PUSH
41360: LD_INT 0
41362: ST_TO_ADDR
// case mode of 0 :
41363: LD_VAR 0 6
41367: PUSH
41368: LD_INT 0
41370: DOUBLE
41371: EQUAL
41372: IFTRUE 41376
41374: GO 52829
41376: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41377: LD_ADDR_VAR 0 11
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 3
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41570: LD_ADDR_VAR 0 12
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41766: LD_ADDR_VAR 0 13
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: LD_INT 3
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 3
41937: NEG
41938: PUSH
41939: LD_INT 3
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41965: LD_ADDR_VAR 0 14
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 3
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 3
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42161: LD_ADDR_VAR 0 15
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 3
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42354: LD_ADDR_VAR 0 16
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 3
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 3
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42547: LD_ADDR_VAR 0 17
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42777: LD_ADDR_VAR 0 18
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43007: LD_ADDR_VAR 0 19
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43237: LD_ADDR_VAR 0 20
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: NEG
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43467: LD_ADDR_VAR 0 21
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43697: LD_ADDR_VAR 0 22
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43927: LD_ADDR_VAR 0 23
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44207: LD_ADDR_VAR 0 24
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44483: LD_ADDR_VAR 0 25
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 3
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44757: LD_ADDR_VAR 0 26
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45033: LD_ADDR_VAR 0 27
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 3
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45313: LD_ADDR_VAR 0 28
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 3
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 3
45560: NEG
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45595: LD_ADDR_VAR 0 29
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: LD_INT 3
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 3
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 3
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45874: LD_ADDR_VAR 0 30
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46152: LD_ADDR_VAR 0 31
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46430: LD_ADDR_VAR 0 32
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 3
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46708: LD_ADDR_VAR 0 33
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46987: LD_ADDR_VAR 0 34
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47267: LD_ADDR_VAR 0 35
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47379: LD_ADDR_VAR 0 36
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47491: LD_ADDR_VAR 0 37
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47603: LD_ADDR_VAR 0 38
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47715: LD_ADDR_VAR 0 39
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47827: LD_ADDR_VAR 0 40
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47939: LD_ADDR_VAR 0 41
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48289: LD_ADDR_VAR 0 42
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 3
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 3
48598: NEG
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48639: LD_ADDR_VAR 0 43
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48987: LD_ADDR_VAR 0 44
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49337: LD_ADDR_VAR 0 45
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 3
49646: NEG
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49687: LD_ADDR_VAR 0 46
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50035: LD_ADDR_VAR 0 47
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50186: LD_ADDR_VAR 0 48
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50333: LD_ADDR_VAR 0 49
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50477: LD_ADDR_VAR 0 50
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50621: LD_ADDR_VAR 0 51
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50768: LD_ADDR_VAR 0 52
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50919: LD_ADDR_VAR 0 53
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51149: LD_ADDR_VAR 0 54
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51379: LD_ADDR_VAR 0 55
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51609: LD_ADDR_VAR 0 56
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51839: LD_ADDR_VAR 0 57
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52069: LD_ADDR_VAR 0 58
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52299: LD_ADDR_VAR 0 59
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52387: LD_ADDR_VAR 0 60
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52475: LD_ADDR_VAR 0 61
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52563: LD_ADDR_VAR 0 62
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52651: LD_ADDR_VAR 0 63
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52739: LD_ADDR_VAR 0 64
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: ST_TO_ADDR
// end ; 1 :
52827: GO 58724
52829: LD_INT 1
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52837
52835: GO 55460
52837: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52838: LD_ADDR_VAR 0 11
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 3
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52882: LD_ADDR_VAR 0 12
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52923: LD_ADDR_VAR 0 13
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52963: LD_ADDR_VAR 0 14
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53004: LD_ADDR_VAR 0 15
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53048: LD_ADDR_VAR 0 16
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53094: LD_ADDR_VAR 0 17
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 3
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 3
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53138: LD_ADDR_VAR 0 18
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53179: LD_ADDR_VAR 0 19
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53219: LD_ADDR_VAR 0 20
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53260: LD_ADDR_VAR 0 21
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53304: LD_ADDR_VAR 0 22
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53350: LD_ADDR_VAR 0 23
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 4
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53394: LD_ADDR_VAR 0 24
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53435: LD_ADDR_VAR 0 25
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 4
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53475: LD_ADDR_VAR 0 26
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 4
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53516: LD_ADDR_VAR 0 27
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 4
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53560: LD_ADDR_VAR 0 28
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 3
53579: NEG
53580: PUSH
53581: LD_INT 4
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 4
53591: NEG
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53606: LD_ADDR_VAR 0 29
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 3
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 4
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 5
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 5
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 6
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 6
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 5
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53761: LD_ADDR_VAR 0 30
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 4
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 4
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 5
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 5
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 5
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 6
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 6
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53904: LD_ADDR_VAR 0 31
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: PUSH
53952: LD_INT 4
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 4
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 5
53971: PUSH
53972: LD_INT 4
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 5
53981: PUSH
53982: LD_INT 5
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: LD_INT 5
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 6
54001: PUSH
54002: LD_INT 5
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 6
54011: PUSH
54012: LD_INT 6
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 5
54021: PUSH
54022: LD_INT 6
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54043: LD_ADDR_VAR 0 32
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 4
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 4
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 5
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 5
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 6
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 6
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 5
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54186: LD_ADDR_VAR 0 33
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 4
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 4
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 4
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 5
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 5
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 5
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 6
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 6
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54341: LD_ADDR_VAR 0 34
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: LD_INT 3
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: LD_INT 4
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 4
54396: NEG
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 4
54408: NEG
54409: PUSH
54410: LD_INT 4
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 4
54420: NEG
54421: PUSH
54422: LD_INT 5
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 5
54432: NEG
54433: PUSH
54434: LD_INT 4
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 5
54444: NEG
54445: PUSH
54446: LD_INT 5
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 5
54456: NEG
54457: PUSH
54458: LD_INT 6
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 6
54468: NEG
54469: PUSH
54470: LD_INT 5
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 6
54480: NEG
54481: PUSH
54482: LD_INT 6
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54504: LD_ADDR_VAR 0 41
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54548: LD_ADDR_VAR 0 42
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54589: LD_ADDR_VAR 0 43
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54629: LD_ADDR_VAR 0 44
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54670: LD_ADDR_VAR 0 45
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54714: LD_ADDR_VAR 0 46
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: LD_INT 3
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54760: LD_ADDR_VAR 0 47
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54793: LD_ADDR_VAR 0 48
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54824: LD_ADDR_VAR 0 49
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54853: LD_ADDR_VAR 0 50
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54882: LD_ADDR_VAR 0 51
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54913: LD_ADDR_VAR 0 52
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54946: LD_ADDR_VAR 0 53
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54990: LD_ADDR_VAR 0 54
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55031: LD_ADDR_VAR 0 55
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55071: LD_ADDR_VAR 0 56
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55112: LD_ADDR_VAR 0 57
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 3
55141: NEG
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55156: LD_ADDR_VAR 0 58
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: NEG
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55202: LD_ADDR_VAR 0 59
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55246: LD_ADDR_VAR 0 60
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55287: LD_ADDR_VAR 0 61
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55327: LD_ADDR_VAR 0 62
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55368: LD_ADDR_VAR 0 63
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55412: LD_ADDR_VAR 0 64
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 2
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// end ; 2 :
55458: GO 58724
55460: LD_INT 2
55462: DOUBLE
55463: EQUAL
55464: IFTRUE 55468
55466: GO 58723
55468: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55469: LD_ADDR_VAR 0 29
55473: PUSH
55474: LD_INT 4
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 4
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 5
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 5
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 5
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 4
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 4
55599: PUSH
55600: LD_INT 4
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 4
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 5
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 4
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 5
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 3
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 3
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 4
55808: NEG
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 4
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 4
55831: NEG
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 4
55854: NEG
55855: PUSH
55856: LD_INT 4
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 4
55866: NEG
55867: PUSH
55868: LD_INT 5
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: NEG
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 4
55902: NEG
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 5
55914: NEG
55915: PUSH
55916: LD_INT 4
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 5
55926: NEG
55927: PUSH
55928: LD_INT 5
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 5
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 5
55950: NEG
55951: PUSH
55952: LD_INT 3
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56007: LD_ADDR_VAR 0 30
56011: PUSH
56012: LD_INT 4
56014: PUSH
56015: LD_INT 4
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: PUSH
56025: LD_INT 3
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 5
56034: PUSH
56035: LD_INT 4
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 5
56044: PUSH
56045: LD_INT 5
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 5
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: LD_INT 4
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: LD_INT 5
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 4
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 4
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 4
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 4
56242: NEG
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 5
56253: NEG
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 5
56264: NEG
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 5
56276: NEG
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 4
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 4
56359: NEG
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 4
56371: NEG
56372: PUSH
56373: LD_INT 4
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 4
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 5
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 4
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 5
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 5
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56554: LD_ADDR_VAR 0 31
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 4
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 4
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 5
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 5
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 4
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 5
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 4
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: LD_INT 5
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: LD_INT 4
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 4
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 5
56816: NEG
56817: PUSH
56818: LD_INT 4
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 5
56828: NEG
56829: PUSH
56830: LD_INT 5
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: NEG
56841: PUSH
56842: LD_INT 5
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 5
56852: NEG
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 4
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 4
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 4
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 4
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 5
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 5
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 5
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57104: LD_ADDR_VAR 0 32
57108: PUSH
57109: LD_INT 4
57111: NEG
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 4
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 4
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 5
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 5
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 5
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 3
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: NEG
57286: PUSH
57287: LD_INT 4
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 4
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 4
57309: NEG
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 5
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 4
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 5
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 5
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 5
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 5
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 4
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 5
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: LD_INT 5
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57651: LD_ADDR_VAR 0 33
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: LD_INT 4
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 4
57670: NEG
57671: PUSH
57672: LD_INT 5
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 5
57718: NEG
57719: PUSH
57720: LD_INT 4
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: LD_INT 5
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 5
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 5
57754: NEG
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 4
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 4
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 4
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 5
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 5
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 4
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 4
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 4
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 4
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 5
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 3
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58189: LD_ADDR_VAR 0 34
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 5
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 4
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 4
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 5
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: LD_INT 5
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 4
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 5
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 5
58421: PUSH
58422: LD_INT 5
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: PUSH
58432: LD_INT 5
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 4
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 5
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 4
58574: NEG
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 4
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 5
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 5
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 5
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: ST_TO_ADDR
// end ; end ;
58721: GO 58724
58723: POP
// case btype of b_depot , b_warehouse :
58724: LD_VAR 0 1
58728: PUSH
58729: LD_INT 0
58731: DOUBLE
58732: EQUAL
58733: IFTRUE 58743
58735: LD_INT 1
58737: DOUBLE
58738: EQUAL
58739: IFTRUE 58743
58741: GO 58944
58743: POP
// case nation of nation_american :
58744: LD_VAR 0 5
58748: PUSH
58749: LD_INT 1
58751: DOUBLE
58752: EQUAL
58753: IFTRUE 58757
58755: GO 58813
58757: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58758: LD_ADDR_VAR 0 9
58762: PUSH
58763: LD_VAR 0 11
58767: PUSH
58768: LD_VAR 0 12
58772: PUSH
58773: LD_VAR 0 13
58777: PUSH
58778: LD_VAR 0 14
58782: PUSH
58783: LD_VAR 0 15
58787: PUSH
58788: LD_VAR 0 16
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: PUSH
58801: LD_VAR 0 4
58805: PUSH
58806: LD_INT 1
58808: PLUS
58809: ARRAY
58810: ST_TO_ADDR
58811: GO 58942
58813: LD_INT 2
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58821
58819: GO 58877
58821: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58822: LD_ADDR_VAR 0 9
58826: PUSH
58827: LD_VAR 0 17
58831: PUSH
58832: LD_VAR 0 18
58836: PUSH
58837: LD_VAR 0 19
58841: PUSH
58842: LD_VAR 0 20
58846: PUSH
58847: LD_VAR 0 21
58851: PUSH
58852: LD_VAR 0 22
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: PUSH
58865: LD_VAR 0 4
58869: PUSH
58870: LD_INT 1
58872: PLUS
58873: ARRAY
58874: ST_TO_ADDR
58875: GO 58942
58877: LD_INT 3
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58885
58883: GO 58941
58885: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58886: LD_ADDR_VAR 0 9
58890: PUSH
58891: LD_VAR 0 23
58895: PUSH
58896: LD_VAR 0 24
58900: PUSH
58901: LD_VAR 0 25
58905: PUSH
58906: LD_VAR 0 26
58910: PUSH
58911: LD_VAR 0 27
58915: PUSH
58916: LD_VAR 0 28
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: PUSH
58929: LD_VAR 0 4
58933: PUSH
58934: LD_INT 1
58936: PLUS
58937: ARRAY
58938: ST_TO_ADDR
58939: GO 58942
58941: POP
58942: GO 59497
58944: LD_INT 2
58946: DOUBLE
58947: EQUAL
58948: IFTRUE 58958
58950: LD_INT 3
58952: DOUBLE
58953: EQUAL
58954: IFTRUE 58958
58956: GO 59014
58958: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58959: LD_ADDR_VAR 0 9
58963: PUSH
58964: LD_VAR 0 29
58968: PUSH
58969: LD_VAR 0 30
58973: PUSH
58974: LD_VAR 0 31
58978: PUSH
58979: LD_VAR 0 32
58983: PUSH
58984: LD_VAR 0 33
58988: PUSH
58989: LD_VAR 0 34
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: PUSH
59002: LD_VAR 0 4
59006: PUSH
59007: LD_INT 1
59009: PLUS
59010: ARRAY
59011: ST_TO_ADDR
59012: GO 59497
59014: LD_INT 16
59016: DOUBLE
59017: EQUAL
59018: IFTRUE 59076
59020: LD_INT 17
59022: DOUBLE
59023: EQUAL
59024: IFTRUE 59076
59026: LD_INT 18
59028: DOUBLE
59029: EQUAL
59030: IFTRUE 59076
59032: LD_INT 19
59034: DOUBLE
59035: EQUAL
59036: IFTRUE 59076
59038: LD_INT 22
59040: DOUBLE
59041: EQUAL
59042: IFTRUE 59076
59044: LD_INT 20
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59076
59050: LD_INT 21
59052: DOUBLE
59053: EQUAL
59054: IFTRUE 59076
59056: LD_INT 23
59058: DOUBLE
59059: EQUAL
59060: IFTRUE 59076
59062: LD_INT 24
59064: DOUBLE
59065: EQUAL
59066: IFTRUE 59076
59068: LD_INT 25
59070: DOUBLE
59071: EQUAL
59072: IFTRUE 59076
59074: GO 59132
59076: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59077: LD_ADDR_VAR 0 9
59081: PUSH
59082: LD_VAR 0 35
59086: PUSH
59087: LD_VAR 0 36
59091: PUSH
59092: LD_VAR 0 37
59096: PUSH
59097: LD_VAR 0 38
59101: PUSH
59102: LD_VAR 0 39
59106: PUSH
59107: LD_VAR 0 40
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: PUSH
59120: LD_VAR 0 4
59124: PUSH
59125: LD_INT 1
59127: PLUS
59128: ARRAY
59129: ST_TO_ADDR
59130: GO 59497
59132: LD_INT 6
59134: DOUBLE
59135: EQUAL
59136: IFTRUE 59188
59138: LD_INT 7
59140: DOUBLE
59141: EQUAL
59142: IFTRUE 59188
59144: LD_INT 8
59146: DOUBLE
59147: EQUAL
59148: IFTRUE 59188
59150: LD_INT 13
59152: DOUBLE
59153: EQUAL
59154: IFTRUE 59188
59156: LD_INT 12
59158: DOUBLE
59159: EQUAL
59160: IFTRUE 59188
59162: LD_INT 15
59164: DOUBLE
59165: EQUAL
59166: IFTRUE 59188
59168: LD_INT 11
59170: DOUBLE
59171: EQUAL
59172: IFTRUE 59188
59174: LD_INT 14
59176: DOUBLE
59177: EQUAL
59178: IFTRUE 59188
59180: LD_INT 10
59182: DOUBLE
59183: EQUAL
59184: IFTRUE 59188
59186: GO 59244
59188: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59189: LD_ADDR_VAR 0 9
59193: PUSH
59194: LD_VAR 0 41
59198: PUSH
59199: LD_VAR 0 42
59203: PUSH
59204: LD_VAR 0 43
59208: PUSH
59209: LD_VAR 0 44
59213: PUSH
59214: LD_VAR 0 45
59218: PUSH
59219: LD_VAR 0 46
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: PUSH
59232: LD_VAR 0 4
59236: PUSH
59237: LD_INT 1
59239: PLUS
59240: ARRAY
59241: ST_TO_ADDR
59242: GO 59497
59244: LD_INT 36
59246: DOUBLE
59247: EQUAL
59248: IFTRUE 59252
59250: GO 59308
59252: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59253: LD_ADDR_VAR 0 9
59257: PUSH
59258: LD_VAR 0 47
59262: PUSH
59263: LD_VAR 0 48
59267: PUSH
59268: LD_VAR 0 49
59272: PUSH
59273: LD_VAR 0 50
59277: PUSH
59278: LD_VAR 0 51
59282: PUSH
59283: LD_VAR 0 52
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 4
59300: PUSH
59301: LD_INT 1
59303: PLUS
59304: ARRAY
59305: ST_TO_ADDR
59306: GO 59497
59308: LD_INT 4
59310: DOUBLE
59311: EQUAL
59312: IFTRUE 59334
59314: LD_INT 5
59316: DOUBLE
59317: EQUAL
59318: IFTRUE 59334
59320: LD_INT 34
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59334
59326: LD_INT 37
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59334
59332: GO 59390
59334: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59335: LD_ADDR_VAR 0 9
59339: PUSH
59340: LD_VAR 0 53
59344: PUSH
59345: LD_VAR 0 54
59349: PUSH
59350: LD_VAR 0 55
59354: PUSH
59355: LD_VAR 0 56
59359: PUSH
59360: LD_VAR 0 57
59364: PUSH
59365: LD_VAR 0 58
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: PUSH
59378: LD_VAR 0 4
59382: PUSH
59383: LD_INT 1
59385: PLUS
59386: ARRAY
59387: ST_TO_ADDR
59388: GO 59497
59390: LD_INT 31
59392: DOUBLE
59393: EQUAL
59394: IFTRUE 59440
59396: LD_INT 32
59398: DOUBLE
59399: EQUAL
59400: IFTRUE 59440
59402: LD_INT 33
59404: DOUBLE
59405: EQUAL
59406: IFTRUE 59440
59408: LD_INT 27
59410: DOUBLE
59411: EQUAL
59412: IFTRUE 59440
59414: LD_INT 26
59416: DOUBLE
59417: EQUAL
59418: IFTRUE 59440
59420: LD_INT 28
59422: DOUBLE
59423: EQUAL
59424: IFTRUE 59440
59426: LD_INT 29
59428: DOUBLE
59429: EQUAL
59430: IFTRUE 59440
59432: LD_INT 30
59434: DOUBLE
59435: EQUAL
59436: IFTRUE 59440
59438: GO 59496
59440: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59441: LD_ADDR_VAR 0 9
59445: PUSH
59446: LD_VAR 0 59
59450: PUSH
59451: LD_VAR 0 60
59455: PUSH
59456: LD_VAR 0 61
59460: PUSH
59461: LD_VAR 0 62
59465: PUSH
59466: LD_VAR 0 63
59470: PUSH
59471: LD_VAR 0 64
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: PUSH
59484: LD_VAR 0 4
59488: PUSH
59489: LD_INT 1
59491: PLUS
59492: ARRAY
59493: ST_TO_ADDR
59494: GO 59497
59496: POP
// temp_list2 = [ ] ;
59497: LD_ADDR_VAR 0 10
59501: PUSH
59502: EMPTY
59503: ST_TO_ADDR
// for i in temp_list do
59504: LD_ADDR_VAR 0 8
59508: PUSH
59509: LD_VAR 0 9
59513: PUSH
59514: FOR_IN
59515: IFFALSE 59567
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59517: LD_ADDR_VAR 0 10
59521: PUSH
59522: LD_VAR 0 10
59526: PUSH
59527: LD_VAR 0 8
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: PUSH
59536: LD_VAR 0 2
59540: PLUS
59541: PUSH
59542: LD_VAR 0 8
59546: PUSH
59547: LD_INT 2
59549: ARRAY
59550: PUSH
59551: LD_VAR 0 3
59555: PLUS
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: EMPTY
59562: LIST
59563: ADD
59564: ST_TO_ADDR
59565: GO 59514
59567: POP
59568: POP
// result = temp_list2 ;
59569: LD_ADDR_VAR 0 7
59573: PUSH
59574: LD_VAR 0 10
59578: ST_TO_ADDR
// end ;
59579: LD_VAR 0 7
59583: RET
// export function EnemyInRange ( unit , dist ) ; begin
59584: LD_INT 0
59586: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59587: LD_ADDR_VAR 0 3
59591: PUSH
59592: LD_VAR 0 1
59596: PPUSH
59597: CALL_OW 255
59601: PPUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 250
59611: PPUSH
59612: LD_VAR 0 1
59616: PPUSH
59617: CALL_OW 251
59621: PPUSH
59622: LD_VAR 0 2
59626: PPUSH
59627: CALL 32980 0 4
59631: PUSH
59632: LD_INT 4
59634: ARRAY
59635: ST_TO_ADDR
// end ;
59636: LD_VAR 0 3
59640: RET
// export function PlayerSeeMe ( unit ) ; begin
59641: LD_INT 0
59643: PPUSH
// result := See ( your_side , unit ) ;
59644: LD_ADDR_VAR 0 2
59648: PUSH
59649: LD_OWVAR 2
59653: PPUSH
59654: LD_VAR 0 1
59658: PPUSH
59659: CALL_OW 292
59663: ST_TO_ADDR
// end ;
59664: LD_VAR 0 2
59668: RET
// export function ReverseDir ( unit ) ; begin
59669: LD_INT 0
59671: PPUSH
// if not unit then
59672: LD_VAR 0 1
59676: NOT
59677: IFFALSE 59681
// exit ;
59679: GO 59704
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59681: LD_ADDR_VAR 0 2
59685: PUSH
59686: LD_VAR 0 1
59690: PPUSH
59691: CALL_OW 254
59695: PUSH
59696: LD_INT 3
59698: PLUS
59699: PUSH
59700: LD_INT 6
59702: MOD
59703: ST_TO_ADDR
// end ;
59704: LD_VAR 0 2
59708: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59709: LD_INT 0
59711: PPUSH
59712: PPUSH
59713: PPUSH
59714: PPUSH
59715: PPUSH
// if not hexes then
59716: LD_VAR 0 2
59720: NOT
59721: IFFALSE 59725
// exit ;
59723: GO 59873
// dist := 9999 ;
59725: LD_ADDR_VAR 0 5
59729: PUSH
59730: LD_INT 9999
59732: ST_TO_ADDR
// for i = 1 to hexes do
59733: LD_ADDR_VAR 0 4
59737: PUSH
59738: DOUBLE
59739: LD_INT 1
59741: DEC
59742: ST_TO_ADDR
59743: LD_VAR 0 2
59747: PUSH
59748: FOR_TO
59749: IFFALSE 59861
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_VAR 0 2
59760: PUSH
59761: LD_VAR 0 4
59765: ARRAY
59766: PUSH
59767: LD_INT 1
59769: ARRAY
59770: PPUSH
59771: LD_VAR 0 2
59775: PUSH
59776: LD_VAR 0 4
59780: ARRAY
59781: PUSH
59782: LD_INT 2
59784: ARRAY
59785: PPUSH
59786: CALL_OW 297
59790: PUSH
59791: LD_VAR 0 5
59795: LESS
59796: IFFALSE 59859
// begin hex := hexes [ i ] ;
59798: LD_ADDR_VAR 0 7
59802: PUSH
59803: LD_VAR 0 2
59807: PUSH
59808: LD_VAR 0 4
59812: ARRAY
59813: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59814: LD_ADDR_VAR 0 5
59818: PUSH
59819: LD_VAR 0 1
59823: PPUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_VAR 0 4
59833: ARRAY
59834: PUSH
59835: LD_INT 1
59837: ARRAY
59838: PPUSH
59839: LD_VAR 0 2
59843: PUSH
59844: LD_VAR 0 4
59848: ARRAY
59849: PUSH
59850: LD_INT 2
59852: ARRAY
59853: PPUSH
59854: CALL_OW 297
59858: ST_TO_ADDR
// end ; end ;
59859: GO 59748
59861: POP
59862: POP
// result := hex ;
59863: LD_ADDR_VAR 0 3
59867: PUSH
59868: LD_VAR 0 7
59872: ST_TO_ADDR
// end ;
59873: LD_VAR 0 3
59877: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59878: LD_INT 0
59880: PPUSH
59881: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59882: LD_VAR 0 1
59886: NOT
59887: PUSH
59888: LD_VAR 0 1
59892: PUSH
59893: LD_INT 21
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 23
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PPUSH
59917: CALL_OW 69
59921: IN
59922: NOT
59923: OR
59924: IFFALSE 59928
// exit ;
59926: GO 59975
// for i = 1 to 3 do
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_INT 3
59940: PUSH
59941: FOR_TO
59942: IFFALSE 59973
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59944: LD_VAR 0 1
59948: PPUSH
59949: CALL_OW 250
59953: PPUSH
59954: LD_VAR 0 1
59958: PPUSH
59959: CALL_OW 251
59963: PPUSH
59964: LD_INT 1
59966: PPUSH
59967: CALL_OW 453
59971: GO 59941
59973: POP
59974: POP
// end ;
59975: LD_VAR 0 2
59979: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59980: LD_INT 0
59982: PPUSH
59983: PPUSH
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59988: LD_VAR 0 1
59992: NOT
59993: PUSH
59994: LD_VAR 0 2
59998: NOT
59999: OR
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 314
60010: OR
60011: IFFALSE 60015
// exit ;
60013: GO 60456
// x := GetX ( enemy_unit ) ;
60015: LD_ADDR_VAR 0 7
60019: PUSH
60020: LD_VAR 0 2
60024: PPUSH
60025: CALL_OW 250
60029: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60030: LD_ADDR_VAR 0 8
60034: PUSH
60035: LD_VAR 0 2
60039: PPUSH
60040: CALL_OW 251
60044: ST_TO_ADDR
// if not x or not y then
60045: LD_VAR 0 7
60049: NOT
60050: PUSH
60051: LD_VAR 0 8
60055: NOT
60056: OR
60057: IFFALSE 60061
// exit ;
60059: GO 60456
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60061: LD_ADDR_VAR 0 6
60065: PUSH
60066: LD_VAR 0 7
60070: PPUSH
60071: LD_INT 0
60073: PPUSH
60074: LD_INT 4
60076: PPUSH
60077: CALL_OW 272
60081: PUSH
60082: LD_VAR 0 8
60086: PPUSH
60087: LD_INT 0
60089: PPUSH
60090: LD_INT 4
60092: PPUSH
60093: CALL_OW 273
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_VAR 0 7
60106: PPUSH
60107: LD_INT 1
60109: PPUSH
60110: LD_INT 4
60112: PPUSH
60113: CALL_OW 272
60117: PUSH
60118: LD_VAR 0 8
60122: PPUSH
60123: LD_INT 1
60125: PPUSH
60126: LD_INT 4
60128: PPUSH
60129: CALL_OW 273
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_VAR 0 7
60142: PPUSH
60143: LD_INT 2
60145: PPUSH
60146: LD_INT 4
60148: PPUSH
60149: CALL_OW 272
60153: PUSH
60154: LD_VAR 0 8
60158: PPUSH
60159: LD_INT 2
60161: PPUSH
60162: LD_INT 4
60164: PPUSH
60165: CALL_OW 273
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_VAR 0 7
60178: PPUSH
60179: LD_INT 3
60181: PPUSH
60182: LD_INT 4
60184: PPUSH
60185: CALL_OW 272
60189: PUSH
60190: LD_VAR 0 8
60194: PPUSH
60195: LD_INT 3
60197: PPUSH
60198: LD_INT 4
60200: PPUSH
60201: CALL_OW 273
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_VAR 0 7
60214: PPUSH
60215: LD_INT 4
60217: PPUSH
60218: LD_INT 4
60220: PPUSH
60221: CALL_OW 272
60225: PUSH
60226: LD_VAR 0 8
60230: PPUSH
60231: LD_INT 4
60233: PPUSH
60234: LD_INT 4
60236: PPUSH
60237: CALL_OW 273
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_VAR 0 7
60250: PPUSH
60251: LD_INT 5
60253: PPUSH
60254: LD_INT 4
60256: PPUSH
60257: CALL_OW 272
60261: PUSH
60262: LD_VAR 0 8
60266: PPUSH
60267: LD_INT 5
60269: PPUSH
60270: LD_INT 4
60272: PPUSH
60273: CALL_OW 273
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// for i = tmp downto 1 do
60290: LD_ADDR_VAR 0 4
60294: PUSH
60295: DOUBLE
60296: LD_VAR 0 6
60300: INC
60301: ST_TO_ADDR
60302: LD_INT 1
60304: PUSH
60305: FOR_DOWNTO
60306: IFFALSE 60407
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60308: LD_VAR 0 6
60312: PUSH
60313: LD_VAR 0 4
60317: ARRAY
60318: PUSH
60319: LD_INT 1
60321: ARRAY
60322: PPUSH
60323: LD_VAR 0 6
60327: PUSH
60328: LD_VAR 0 4
60332: ARRAY
60333: PUSH
60334: LD_INT 2
60336: ARRAY
60337: PPUSH
60338: CALL_OW 488
60342: NOT
60343: PUSH
60344: LD_VAR 0 6
60348: PUSH
60349: LD_VAR 0 4
60353: ARRAY
60354: PUSH
60355: LD_INT 1
60357: ARRAY
60358: PPUSH
60359: LD_VAR 0 6
60363: PUSH
60364: LD_VAR 0 4
60368: ARRAY
60369: PUSH
60370: LD_INT 2
60372: ARRAY
60373: PPUSH
60374: CALL_OW 428
60378: PUSH
60379: LD_INT 0
60381: NONEQUAL
60382: OR
60383: IFFALSE 60405
// tmp := Delete ( tmp , i ) ;
60385: LD_ADDR_VAR 0 6
60389: PUSH
60390: LD_VAR 0 6
60394: PPUSH
60395: LD_VAR 0 4
60399: PPUSH
60400: CALL_OW 3
60404: ST_TO_ADDR
60405: GO 60305
60407: POP
60408: POP
// j := GetClosestHex ( unit , tmp ) ;
60409: LD_ADDR_VAR 0 5
60413: PUSH
60414: LD_VAR 0 1
60418: PPUSH
60419: LD_VAR 0 6
60423: PPUSH
60424: CALL 59709 0 2
60428: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60429: LD_VAR 0 1
60433: PPUSH
60434: LD_VAR 0 5
60438: PUSH
60439: LD_INT 1
60441: ARRAY
60442: PPUSH
60443: LD_VAR 0 5
60447: PUSH
60448: LD_INT 2
60450: ARRAY
60451: PPUSH
60452: CALL_OW 111
// end ;
60456: LD_VAR 0 3
60460: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60461: LD_INT 0
60463: PPUSH
60464: PPUSH
60465: PPUSH
// uc_side = 0 ;
60466: LD_ADDR_OWVAR 20
60470: PUSH
60471: LD_INT 0
60473: ST_TO_ADDR
// uc_nation = 0 ;
60474: LD_ADDR_OWVAR 21
60478: PUSH
60479: LD_INT 0
60481: ST_TO_ADDR
// InitHc_All ( ) ;
60482: CALL_OW 584
// InitVc ;
60486: CALL_OW 20
// if mastodonts then
60490: LD_VAR 0 6
60494: IFFALSE 60561
// for i = 1 to mastodonts do
60496: LD_ADDR_VAR 0 11
60500: PUSH
60501: DOUBLE
60502: LD_INT 1
60504: DEC
60505: ST_TO_ADDR
60506: LD_VAR 0 6
60510: PUSH
60511: FOR_TO
60512: IFFALSE 60559
// begin vc_chassis := 31 ;
60514: LD_ADDR_OWVAR 37
60518: PUSH
60519: LD_INT 31
60521: ST_TO_ADDR
// vc_control := control_rider ;
60522: LD_ADDR_OWVAR 38
60526: PUSH
60527: LD_INT 4
60529: ST_TO_ADDR
// animal := CreateVehicle ;
60530: LD_ADDR_VAR 0 12
60534: PUSH
60535: CALL_OW 45
60539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60540: LD_VAR 0 12
60544: PPUSH
60545: LD_VAR 0 8
60549: PPUSH
60550: LD_INT 0
60552: PPUSH
60553: CALL 62749 0 3
// end ;
60557: GO 60511
60559: POP
60560: POP
// if horses then
60561: LD_VAR 0 5
60565: IFFALSE 60632
// for i = 1 to horses do
60567: LD_ADDR_VAR 0 11
60571: PUSH
60572: DOUBLE
60573: LD_INT 1
60575: DEC
60576: ST_TO_ADDR
60577: LD_VAR 0 5
60581: PUSH
60582: FOR_TO
60583: IFFALSE 60630
// begin hc_class := 21 ;
60585: LD_ADDR_OWVAR 28
60589: PUSH
60590: LD_INT 21
60592: ST_TO_ADDR
// hc_gallery :=  ;
60593: LD_ADDR_OWVAR 33
60597: PUSH
60598: LD_STRING 
60600: ST_TO_ADDR
// animal := CreateHuman ;
60601: LD_ADDR_VAR 0 12
60605: PUSH
60606: CALL_OW 44
60610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60611: LD_VAR 0 12
60615: PPUSH
60616: LD_VAR 0 8
60620: PPUSH
60621: LD_INT 0
60623: PPUSH
60624: CALL 62749 0 3
// end ;
60628: GO 60582
60630: POP
60631: POP
// if birds then
60632: LD_VAR 0 1
60636: IFFALSE 60703
// for i = 1 to birds do
60638: LD_ADDR_VAR 0 11
60642: PUSH
60643: DOUBLE
60644: LD_INT 1
60646: DEC
60647: ST_TO_ADDR
60648: LD_VAR 0 1
60652: PUSH
60653: FOR_TO
60654: IFFALSE 60701
// begin hc_class = 18 ;
60656: LD_ADDR_OWVAR 28
60660: PUSH
60661: LD_INT 18
60663: ST_TO_ADDR
// hc_gallery =  ;
60664: LD_ADDR_OWVAR 33
60668: PUSH
60669: LD_STRING 
60671: ST_TO_ADDR
// animal := CreateHuman ;
60672: LD_ADDR_VAR 0 12
60676: PUSH
60677: CALL_OW 44
60681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60682: LD_VAR 0 12
60686: PPUSH
60687: LD_VAR 0 8
60691: PPUSH
60692: LD_INT 0
60694: PPUSH
60695: CALL 62749 0 3
// end ;
60699: GO 60653
60701: POP
60702: POP
// if tigers then
60703: LD_VAR 0 2
60707: IFFALSE 60791
// for i = 1 to tigers do
60709: LD_ADDR_VAR 0 11
60713: PUSH
60714: DOUBLE
60715: LD_INT 1
60717: DEC
60718: ST_TO_ADDR
60719: LD_VAR 0 2
60723: PUSH
60724: FOR_TO
60725: IFFALSE 60789
// begin hc_class = class_tiger ;
60727: LD_ADDR_OWVAR 28
60731: PUSH
60732: LD_INT 14
60734: ST_TO_ADDR
// hc_gallery =  ;
60735: LD_ADDR_OWVAR 33
60739: PUSH
60740: LD_STRING 
60742: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60743: LD_ADDR_OWVAR 35
60747: PUSH
60748: LD_INT 7
60750: NEG
60751: PPUSH
60752: LD_INT 7
60754: PPUSH
60755: CALL_OW 12
60759: ST_TO_ADDR
// animal := CreateHuman ;
60760: LD_ADDR_VAR 0 12
60764: PUSH
60765: CALL_OW 44
60769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60770: LD_VAR 0 12
60774: PPUSH
60775: LD_VAR 0 8
60779: PPUSH
60780: LD_INT 0
60782: PPUSH
60783: CALL 62749 0 3
// end ;
60787: GO 60724
60789: POP
60790: POP
// if apemans then
60791: LD_VAR 0 3
60795: IFFALSE 60918
// for i = 1 to apemans do
60797: LD_ADDR_VAR 0 11
60801: PUSH
60802: DOUBLE
60803: LD_INT 1
60805: DEC
60806: ST_TO_ADDR
60807: LD_VAR 0 3
60811: PUSH
60812: FOR_TO
60813: IFFALSE 60916
// begin hc_class = class_apeman ;
60815: LD_ADDR_OWVAR 28
60819: PUSH
60820: LD_INT 12
60822: ST_TO_ADDR
// hc_gallery =  ;
60823: LD_ADDR_OWVAR 33
60827: PUSH
60828: LD_STRING 
60830: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60831: LD_ADDR_OWVAR 35
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PPUSH
60840: LD_INT 2
60842: PPUSH
60843: CALL_OW 12
60847: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60848: LD_ADDR_OWVAR 31
60852: PUSH
60853: LD_INT 1
60855: PPUSH
60856: LD_INT 3
60858: PPUSH
60859: CALL_OW 12
60863: PUSH
60864: LD_INT 1
60866: PPUSH
60867: LD_INT 3
60869: PPUSH
60870: CALL_OW 12
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: ST_TO_ADDR
// animal := CreateHuman ;
60887: LD_ADDR_VAR 0 12
60891: PUSH
60892: CALL_OW 44
60896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60897: LD_VAR 0 12
60901: PPUSH
60902: LD_VAR 0 8
60906: PPUSH
60907: LD_INT 0
60909: PPUSH
60910: CALL 62749 0 3
// end ;
60914: GO 60812
60916: POP
60917: POP
// if enchidnas then
60918: LD_VAR 0 4
60922: IFFALSE 60989
// for i = 1 to enchidnas do
60924: LD_ADDR_VAR 0 11
60928: PUSH
60929: DOUBLE
60930: LD_INT 1
60932: DEC
60933: ST_TO_ADDR
60934: LD_VAR 0 4
60938: PUSH
60939: FOR_TO
60940: IFFALSE 60987
// begin hc_class = 13 ;
60942: LD_ADDR_OWVAR 28
60946: PUSH
60947: LD_INT 13
60949: ST_TO_ADDR
// hc_gallery =  ;
60950: LD_ADDR_OWVAR 33
60954: PUSH
60955: LD_STRING 
60957: ST_TO_ADDR
// animal := CreateHuman ;
60958: LD_ADDR_VAR 0 12
60962: PUSH
60963: CALL_OW 44
60967: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60968: LD_VAR 0 12
60972: PPUSH
60973: LD_VAR 0 8
60977: PPUSH
60978: LD_INT 0
60980: PPUSH
60981: CALL 62749 0 3
// end ;
60985: GO 60939
60987: POP
60988: POP
// if fishes then
60989: LD_VAR 0 7
60993: IFFALSE 61060
// for i = 1 to fishes do
60995: LD_ADDR_VAR 0 11
60999: PUSH
61000: DOUBLE
61001: LD_INT 1
61003: DEC
61004: ST_TO_ADDR
61005: LD_VAR 0 7
61009: PUSH
61010: FOR_TO
61011: IFFALSE 61058
// begin hc_class = 20 ;
61013: LD_ADDR_OWVAR 28
61017: PUSH
61018: LD_INT 20
61020: ST_TO_ADDR
// hc_gallery =  ;
61021: LD_ADDR_OWVAR 33
61025: PUSH
61026: LD_STRING 
61028: ST_TO_ADDR
// animal := CreateHuman ;
61029: LD_ADDR_VAR 0 12
61033: PUSH
61034: CALL_OW 44
61038: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61039: LD_VAR 0 12
61043: PPUSH
61044: LD_VAR 0 9
61048: PPUSH
61049: LD_INT 0
61051: PPUSH
61052: CALL 62749 0 3
// end ;
61056: GO 61010
61058: POP
61059: POP
// end ;
61060: LD_VAR 0 10
61064: RET
// export function WantHeal ( sci , unit ) ; begin
61065: LD_INT 0
61067: PPUSH
// if GetTaskList ( sci ) > 0 then
61068: LD_VAR 0 1
61072: PPUSH
61073: CALL_OW 437
61077: PUSH
61078: LD_INT 0
61080: GREATER
61081: IFFALSE 61151
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61083: LD_VAR 0 1
61087: PPUSH
61088: CALL_OW 437
61092: PUSH
61093: LD_INT 1
61095: ARRAY
61096: PUSH
61097: LD_INT 1
61099: ARRAY
61100: PUSH
61101: LD_STRING l
61103: EQUAL
61104: PUSH
61105: LD_VAR 0 1
61109: PPUSH
61110: CALL_OW 437
61114: PUSH
61115: LD_INT 1
61117: ARRAY
61118: PUSH
61119: LD_INT 4
61121: ARRAY
61122: PUSH
61123: LD_VAR 0 2
61127: EQUAL
61128: AND
61129: IFFALSE 61141
// result := true else
61131: LD_ADDR_VAR 0 3
61135: PUSH
61136: LD_INT 1
61138: ST_TO_ADDR
61139: GO 61149
// result := false ;
61141: LD_ADDR_VAR 0 3
61145: PUSH
61146: LD_INT 0
61148: ST_TO_ADDR
// end else
61149: GO 61159
// result := false ;
61151: LD_ADDR_VAR 0 3
61155: PUSH
61156: LD_INT 0
61158: ST_TO_ADDR
// end ;
61159: LD_VAR 0 3
61163: RET
// export function HealTarget ( sci ) ; begin
61164: LD_INT 0
61166: PPUSH
// if not sci then
61167: LD_VAR 0 1
61171: NOT
61172: IFFALSE 61176
// exit ;
61174: GO 61241
// result := 0 ;
61176: LD_ADDR_VAR 0 2
61180: PUSH
61181: LD_INT 0
61183: ST_TO_ADDR
// if GetTaskList ( sci ) then
61184: LD_VAR 0 1
61188: PPUSH
61189: CALL_OW 437
61193: IFFALSE 61241
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61195: LD_VAR 0 1
61199: PPUSH
61200: CALL_OW 437
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: PUSH
61213: LD_STRING l
61215: EQUAL
61216: IFFALSE 61241
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61218: LD_ADDR_VAR 0 2
61222: PUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 437
61232: PUSH
61233: LD_INT 1
61235: ARRAY
61236: PUSH
61237: LD_INT 4
61239: ARRAY
61240: ST_TO_ADDR
// end ;
61241: LD_VAR 0 2
61245: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61246: LD_INT 0
61248: PPUSH
61249: PPUSH
61250: PPUSH
61251: PPUSH
// if not base_units then
61252: LD_VAR 0 1
61256: NOT
61257: IFFALSE 61261
// exit ;
61259: GO 61348
// result := false ;
61261: LD_ADDR_VAR 0 2
61265: PUSH
61266: LD_INT 0
61268: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61269: LD_ADDR_VAR 0 5
61273: PUSH
61274: LD_VAR 0 1
61278: PPUSH
61279: LD_INT 21
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PPUSH
61289: CALL_OW 72
61293: ST_TO_ADDR
// if not tmp then
61294: LD_VAR 0 5
61298: NOT
61299: IFFALSE 61303
// exit ;
61301: GO 61348
// for i in tmp do
61303: LD_ADDR_VAR 0 3
61307: PUSH
61308: LD_VAR 0 5
61312: PUSH
61313: FOR_IN
61314: IFFALSE 61346
// begin result := EnemyInRange ( i , 22 ) ;
61316: LD_ADDR_VAR 0 2
61320: PUSH
61321: LD_VAR 0 3
61325: PPUSH
61326: LD_INT 22
61328: PPUSH
61329: CALL 59584 0 2
61333: ST_TO_ADDR
// if result then
61334: LD_VAR 0 2
61338: IFFALSE 61344
// exit ;
61340: POP
61341: POP
61342: GO 61348
// end ;
61344: GO 61313
61346: POP
61347: POP
// end ;
61348: LD_VAR 0 2
61352: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61353: LD_INT 0
61355: PPUSH
61356: PPUSH
// if not units then
61357: LD_VAR 0 1
61361: NOT
61362: IFFALSE 61366
// exit ;
61364: GO 61436
// result := [ ] ;
61366: LD_ADDR_VAR 0 3
61370: PUSH
61371: EMPTY
61372: ST_TO_ADDR
// for i in units do
61373: LD_ADDR_VAR 0 4
61377: PUSH
61378: LD_VAR 0 1
61382: PUSH
61383: FOR_IN
61384: IFFALSE 61434
// if GetTag ( i ) = tag then
61386: LD_VAR 0 4
61390: PPUSH
61391: CALL_OW 110
61395: PUSH
61396: LD_VAR 0 2
61400: EQUAL
61401: IFFALSE 61432
// result := Replace ( result , result + 1 , i ) ;
61403: LD_ADDR_VAR 0 3
61407: PUSH
61408: LD_VAR 0 3
61412: PPUSH
61413: LD_VAR 0 3
61417: PUSH
61418: LD_INT 1
61420: PLUS
61421: PPUSH
61422: LD_VAR 0 4
61426: PPUSH
61427: CALL_OW 1
61431: ST_TO_ADDR
61432: GO 61383
61434: POP
61435: POP
// end ;
61436: LD_VAR 0 3
61440: RET
// export function IsDriver ( un ) ; begin
61441: LD_INT 0
61443: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61444: LD_ADDR_VAR 0 2
61448: PUSH
61449: LD_VAR 0 1
61453: PUSH
61454: LD_INT 55
61456: PUSH
61457: EMPTY
61458: LIST
61459: PPUSH
61460: CALL_OW 69
61464: IN
61465: ST_TO_ADDR
// end ;
61466: LD_VAR 0 2
61470: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
// list := [ ] ;
61475: LD_ADDR_VAR 0 5
61479: PUSH
61480: EMPTY
61481: ST_TO_ADDR
// case d of 0 :
61482: LD_VAR 0 3
61486: PUSH
61487: LD_INT 0
61489: DOUBLE
61490: EQUAL
61491: IFTRUE 61495
61493: GO 61628
61495: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61496: LD_ADDR_VAR 0 5
61500: PUSH
61501: LD_VAR 0 1
61505: PUSH
61506: LD_INT 4
61508: MINUS
61509: PUSH
61510: LD_VAR 0 2
61514: PUSH
61515: LD_INT 4
61517: MINUS
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: LIST
61526: PUSH
61527: LD_VAR 0 1
61531: PUSH
61532: LD_INT 3
61534: MINUS
61535: PUSH
61536: LD_VAR 0 2
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: PUSH
61549: LD_VAR 0 1
61553: PUSH
61554: LD_INT 4
61556: PLUS
61557: PUSH
61558: LD_VAR 0 2
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: LIST
61570: PUSH
61571: LD_VAR 0 1
61575: PUSH
61576: LD_INT 3
61578: PLUS
61579: PUSH
61580: LD_VAR 0 2
61584: PUSH
61585: LD_INT 3
61587: PLUS
61588: PUSH
61589: LD_INT 5
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: PUSH
61597: LD_VAR 0 1
61601: PUSH
61602: LD_VAR 0 2
61606: PUSH
61607: LD_INT 4
61609: PLUS
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: ST_TO_ADDR
// end ; 1 :
61626: GO 62326
61628: LD_INT 1
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61636
61634: GO 61769
61636: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61637: LD_ADDR_VAR 0 5
61641: PUSH
61642: LD_VAR 0 1
61646: PUSH
61647: LD_VAR 0 2
61651: PUSH
61652: LD_INT 4
61654: MINUS
61655: PUSH
61656: LD_INT 3
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: LIST
61663: PUSH
61664: LD_VAR 0 1
61668: PUSH
61669: LD_INT 3
61671: MINUS
61672: PUSH
61673: LD_VAR 0 2
61677: PUSH
61678: LD_INT 3
61680: MINUS
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: PUSH
61690: LD_VAR 0 1
61694: PUSH
61695: LD_INT 4
61697: MINUS
61698: PUSH
61699: LD_VAR 0 2
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: LIST
61711: PUSH
61712: LD_VAR 0 1
61716: PUSH
61717: LD_VAR 0 2
61721: PUSH
61722: LD_INT 3
61724: PLUS
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: PUSH
61734: LD_VAR 0 1
61738: PUSH
61739: LD_INT 4
61741: PLUS
61742: PUSH
61743: LD_VAR 0 2
61747: PUSH
61748: LD_INT 4
61750: PLUS
61751: PUSH
61752: LD_INT 5
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: ST_TO_ADDR
// end ; 2 :
61767: GO 62326
61769: LD_INT 2
61771: DOUBLE
61772: EQUAL
61773: IFTRUE 61777
61775: GO 61906
61777: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61778: LD_ADDR_VAR 0 5
61782: PUSH
61783: LD_VAR 0 1
61787: PUSH
61788: LD_VAR 0 2
61792: PUSH
61793: LD_INT 3
61795: MINUS
61796: PUSH
61797: LD_INT 3
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: PUSH
61805: LD_VAR 0 1
61809: PUSH
61810: LD_INT 4
61812: PLUS
61813: PUSH
61814: LD_VAR 0 2
61818: PUSH
61819: LD_INT 4
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: PUSH
61827: LD_VAR 0 1
61831: PUSH
61832: LD_VAR 0 2
61836: PUSH
61837: LD_INT 4
61839: PLUS
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: LD_VAR 0 1
61853: PUSH
61854: LD_INT 3
61856: MINUS
61857: PUSH
61858: LD_VAR 0 2
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: PUSH
61871: LD_VAR 0 1
61875: PUSH
61876: LD_INT 4
61878: MINUS
61879: PUSH
61880: LD_VAR 0 2
61884: PUSH
61885: LD_INT 4
61887: MINUS
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: ST_TO_ADDR
// end ; 3 :
61904: GO 62326
61906: LD_INT 3
61908: DOUBLE
61909: EQUAL
61910: IFTRUE 61914
61912: GO 62047
61914: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61915: LD_ADDR_VAR 0 5
61919: PUSH
61920: LD_VAR 0 1
61924: PUSH
61925: LD_INT 3
61927: PLUS
61928: PUSH
61929: LD_VAR 0 2
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: LD_VAR 0 1
61946: PUSH
61947: LD_INT 4
61949: PLUS
61950: PUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_INT 4
61958: PLUS
61959: PUSH
61960: LD_INT 5
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: LIST
61967: PUSH
61968: LD_VAR 0 1
61972: PUSH
61973: LD_INT 4
61975: MINUS
61976: PUSH
61977: LD_VAR 0 2
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: PUSH
61990: LD_VAR 0 1
61994: PUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_INT 4
62002: MINUS
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: LD_VAR 0 1
62016: PUSH
62017: LD_INT 3
62019: MINUS
62020: PUSH
62021: LD_VAR 0 2
62025: PUSH
62026: LD_INT 3
62028: MINUS
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// end ; 4 :
62045: GO 62326
62047: LD_INT 4
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62055
62053: GO 62188
62055: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62056: LD_ADDR_VAR 0 5
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 4
62073: PLUS
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: LD_INT 3
62090: PLUS
62091: PUSH
62092: LD_VAR 0 2
62096: PUSH
62097: LD_INT 3
62099: PLUS
62100: PUSH
62101: LD_INT 5
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: PUSH
62109: LD_VAR 0 1
62113: PUSH
62114: LD_INT 4
62116: PLUS
62117: PUSH
62118: LD_VAR 0 2
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: PUSH
62131: LD_VAR 0 1
62135: PUSH
62136: LD_VAR 0 2
62140: PUSH
62141: LD_INT 3
62143: MINUS
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: PUSH
62153: LD_VAR 0 1
62157: PUSH
62158: LD_INT 4
62160: MINUS
62161: PUSH
62162: LD_VAR 0 2
62166: PUSH
62167: LD_INT 4
62169: MINUS
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: ST_TO_ADDR
// end ; 5 :
62186: GO 62326
62188: LD_INT 5
62190: DOUBLE
62191: EQUAL
62192: IFTRUE 62196
62194: GO 62325
62196: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62197: LD_ADDR_VAR 0 5
62201: PUSH
62202: LD_VAR 0 1
62206: PUSH
62207: LD_INT 4
62209: MINUS
62210: PUSH
62211: LD_VAR 0 2
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: PUSH
62224: LD_VAR 0 1
62228: PUSH
62229: LD_VAR 0 2
62233: PUSH
62234: LD_INT 4
62236: MINUS
62237: PUSH
62238: LD_INT 3
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: PUSH
62246: LD_VAR 0 1
62250: PUSH
62251: LD_INT 4
62253: PLUS
62254: PUSH
62255: LD_VAR 0 2
62259: PUSH
62260: LD_INT 4
62262: PLUS
62263: PUSH
62264: LD_INT 5
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: LIST
62271: PUSH
62272: LD_VAR 0 1
62276: PUSH
62277: LD_INT 3
62279: PLUS
62280: PUSH
62281: LD_VAR 0 2
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: PUSH
62294: LD_VAR 0 1
62298: PUSH
62299: LD_VAR 0 2
62303: PUSH
62304: LD_INT 3
62306: PLUS
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// end ; end ;
62323: GO 62326
62325: POP
// result := list ;
62326: LD_ADDR_VAR 0 4
62330: PUSH
62331: LD_VAR 0 5
62335: ST_TO_ADDR
// end ;
62336: LD_VAR 0 4
62340: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62341: LD_INT 0
62343: PPUSH
62344: PPUSH
62345: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62346: LD_VAR 0 1
62350: NOT
62351: PUSH
62352: LD_VAR 0 2
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: LD_INT 4
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: IN
62375: NOT
62376: OR
62377: IFFALSE 62381
// exit ;
62379: GO 62473
// tmp := [ ] ;
62381: LD_ADDR_VAR 0 5
62385: PUSH
62386: EMPTY
62387: ST_TO_ADDR
// for i in units do
62388: LD_ADDR_VAR 0 4
62392: PUSH
62393: LD_VAR 0 1
62397: PUSH
62398: FOR_IN
62399: IFFALSE 62442
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62401: LD_ADDR_VAR 0 5
62405: PUSH
62406: LD_VAR 0 5
62410: PPUSH
62411: LD_VAR 0 5
62415: PUSH
62416: LD_INT 1
62418: PLUS
62419: PPUSH
62420: LD_VAR 0 4
62424: PPUSH
62425: LD_VAR 0 2
62429: PPUSH
62430: CALL_OW 259
62434: PPUSH
62435: CALL_OW 2
62439: ST_TO_ADDR
62440: GO 62398
62442: POP
62443: POP
// if not tmp then
62444: LD_VAR 0 5
62448: NOT
62449: IFFALSE 62453
// exit ;
62451: GO 62473
// result := SortListByListDesc ( units , tmp ) ;
62453: LD_ADDR_VAR 0 3
62457: PUSH
62458: LD_VAR 0 1
62462: PPUSH
62463: LD_VAR 0 5
62467: PPUSH
62468: CALL_OW 77
62472: ST_TO_ADDR
// end ;
62473: LD_VAR 0 3
62477: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62478: LD_INT 0
62480: PPUSH
62481: PPUSH
62482: PPUSH
// result := false ;
62483: LD_ADDR_VAR 0 3
62487: PUSH
62488: LD_INT 0
62490: ST_TO_ADDR
// x := GetX ( building ) ;
62491: LD_ADDR_VAR 0 4
62495: PUSH
62496: LD_VAR 0 2
62500: PPUSH
62501: CALL_OW 250
62505: ST_TO_ADDR
// y := GetY ( building ) ;
62506: LD_ADDR_VAR 0 5
62510: PUSH
62511: LD_VAR 0 2
62515: PPUSH
62516: CALL_OW 251
62520: ST_TO_ADDR
// if not building or not x or not y then
62521: LD_VAR 0 2
62525: NOT
62526: PUSH
62527: LD_VAR 0 4
62531: NOT
62532: OR
62533: PUSH
62534: LD_VAR 0 5
62538: NOT
62539: OR
62540: IFFALSE 62544
// exit ;
62542: GO 62636
// if GetTaskList ( unit ) then
62544: LD_VAR 0 1
62548: PPUSH
62549: CALL_OW 437
62553: IFFALSE 62636
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62555: LD_STRING e
62557: PUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: CALL_OW 437
62567: PUSH
62568: LD_INT 1
62570: ARRAY
62571: PUSH
62572: LD_INT 1
62574: ARRAY
62575: EQUAL
62576: PUSH
62577: LD_VAR 0 4
62581: PUSH
62582: LD_VAR 0 1
62586: PPUSH
62587: CALL_OW 437
62591: PUSH
62592: LD_INT 1
62594: ARRAY
62595: PUSH
62596: LD_INT 2
62598: ARRAY
62599: EQUAL
62600: AND
62601: PUSH
62602: LD_VAR 0 5
62606: PUSH
62607: LD_VAR 0 1
62611: PPUSH
62612: CALL_OW 437
62616: PUSH
62617: LD_INT 1
62619: ARRAY
62620: PUSH
62621: LD_INT 3
62623: ARRAY
62624: EQUAL
62625: AND
62626: IFFALSE 62636
// result := true end ;
62628: LD_ADDR_VAR 0 3
62632: PUSH
62633: LD_INT 1
62635: ST_TO_ADDR
// end ;
62636: LD_VAR 0 3
62640: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62641: LD_INT 0
62643: PPUSH
// result := false ;
62644: LD_ADDR_VAR 0 4
62648: PUSH
62649: LD_INT 0
62651: ST_TO_ADDR
// if GetTaskList ( unit ) then
62652: LD_VAR 0 1
62656: PPUSH
62657: CALL_OW 437
62661: IFFALSE 62744
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62663: LD_STRING M
62665: PUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: CALL_OW 437
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PUSH
62680: LD_INT 1
62682: ARRAY
62683: EQUAL
62684: PUSH
62685: LD_VAR 0 2
62689: PUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: CALL_OW 437
62699: PUSH
62700: LD_INT 1
62702: ARRAY
62703: PUSH
62704: LD_INT 2
62706: ARRAY
62707: EQUAL
62708: AND
62709: PUSH
62710: LD_VAR 0 3
62714: PUSH
62715: LD_VAR 0 1
62719: PPUSH
62720: CALL_OW 437
62724: PUSH
62725: LD_INT 1
62727: ARRAY
62728: PUSH
62729: LD_INT 3
62731: ARRAY
62732: EQUAL
62733: AND
62734: IFFALSE 62744
// result := true ;
62736: LD_ADDR_VAR 0 4
62740: PUSH
62741: LD_INT 1
62743: ST_TO_ADDR
// end ; end ;
62744: LD_VAR 0 4
62748: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
// if not unit or not area then
62755: LD_VAR 0 1
62759: NOT
62760: PUSH
62761: LD_VAR 0 2
62765: NOT
62766: OR
62767: IFFALSE 62771
// exit ;
62769: GO 62935
// tmp := AreaToList ( area , i ) ;
62771: LD_ADDR_VAR 0 6
62775: PUSH
62776: LD_VAR 0 2
62780: PPUSH
62781: LD_VAR 0 5
62785: PPUSH
62786: CALL_OW 517
62790: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62791: LD_ADDR_VAR 0 5
62795: PUSH
62796: DOUBLE
62797: LD_INT 1
62799: DEC
62800: ST_TO_ADDR
62801: LD_VAR 0 6
62805: PUSH
62806: LD_INT 1
62808: ARRAY
62809: PUSH
62810: FOR_TO
62811: IFFALSE 62933
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62813: LD_ADDR_VAR 0 7
62817: PUSH
62818: LD_VAR 0 6
62822: PUSH
62823: LD_INT 1
62825: ARRAY
62826: PUSH
62827: LD_VAR 0 5
62831: ARRAY
62832: PUSH
62833: LD_VAR 0 6
62837: PUSH
62838: LD_INT 2
62840: ARRAY
62841: PUSH
62842: LD_VAR 0 5
62846: ARRAY
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62852: LD_VAR 0 7
62856: PUSH
62857: LD_INT 1
62859: ARRAY
62860: PPUSH
62861: LD_VAR 0 7
62865: PUSH
62866: LD_INT 2
62868: ARRAY
62869: PPUSH
62870: CALL_OW 428
62874: PUSH
62875: LD_INT 0
62877: EQUAL
62878: IFFALSE 62931
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62880: LD_VAR 0 1
62884: PPUSH
62885: LD_VAR 0 7
62889: PUSH
62890: LD_INT 1
62892: ARRAY
62893: PPUSH
62894: LD_VAR 0 7
62898: PUSH
62899: LD_INT 2
62901: ARRAY
62902: PPUSH
62903: LD_VAR 0 3
62907: PPUSH
62908: CALL_OW 48
// result := IsPlaced ( unit ) ;
62912: LD_ADDR_VAR 0 4
62916: PUSH
62917: LD_VAR 0 1
62921: PPUSH
62922: CALL_OW 305
62926: ST_TO_ADDR
// exit ;
62927: POP
62928: POP
62929: GO 62935
// end ; end ;
62931: GO 62810
62933: POP
62934: POP
// end ;
62935: LD_VAR 0 4
62939: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62940: LD_INT 0
62942: PPUSH
62943: PPUSH
62944: PPUSH
// if not side or side > 8 then
62945: LD_VAR 0 1
62949: NOT
62950: PUSH
62951: LD_VAR 0 1
62955: PUSH
62956: LD_INT 8
62958: GREATER
62959: OR
62960: IFFALSE 62964
// exit ;
62962: GO 63151
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62964: LD_ADDR_VAR 0 4
62968: PUSH
62969: LD_INT 22
62971: PUSH
62972: LD_VAR 0 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 21
62983: PUSH
62984: LD_INT 3
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PPUSH
62995: CALL_OW 69
62999: ST_TO_ADDR
// if not tmp then
63000: LD_VAR 0 4
63004: NOT
63005: IFFALSE 63009
// exit ;
63007: GO 63151
// enable_addtolog := true ;
63009: LD_ADDR_OWVAR 81
63013: PUSH
63014: LD_INT 1
63016: ST_TO_ADDR
// AddToLog ( [ ) ;
63017: LD_STRING [
63019: PPUSH
63020: CALL_OW 561
// for i in tmp do
63024: LD_ADDR_VAR 0 3
63028: PUSH
63029: LD_VAR 0 4
63033: PUSH
63034: FOR_IN
63035: IFFALSE 63142
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63037: LD_STRING [
63039: PUSH
63040: LD_VAR 0 3
63044: PPUSH
63045: CALL_OW 266
63049: STR
63050: PUSH
63051: LD_STRING , 
63053: STR
63054: PUSH
63055: LD_VAR 0 3
63059: PPUSH
63060: CALL_OW 250
63064: STR
63065: PUSH
63066: LD_STRING , 
63068: STR
63069: PUSH
63070: LD_VAR 0 3
63074: PPUSH
63075: CALL_OW 251
63079: STR
63080: PUSH
63081: LD_STRING , 
63083: STR
63084: PUSH
63085: LD_VAR 0 3
63089: PPUSH
63090: CALL_OW 254
63094: STR
63095: PUSH
63096: LD_STRING , 
63098: STR
63099: PUSH
63100: LD_VAR 0 3
63104: PPUSH
63105: LD_INT 1
63107: PPUSH
63108: CALL_OW 268
63112: STR
63113: PUSH
63114: LD_STRING , 
63116: STR
63117: PUSH
63118: LD_VAR 0 3
63122: PPUSH
63123: LD_INT 2
63125: PPUSH
63126: CALL_OW 268
63130: STR
63131: PUSH
63132: LD_STRING ],
63134: STR
63135: PPUSH
63136: CALL_OW 561
// end ;
63140: GO 63034
63142: POP
63143: POP
// AddToLog ( ]; ) ;
63144: LD_STRING ];
63146: PPUSH
63147: CALL_OW 561
// end ;
63151: LD_VAR 0 2
63155: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63156: LD_INT 0
63158: PPUSH
63159: PPUSH
63160: PPUSH
63161: PPUSH
63162: PPUSH
// if not area or not rate or not max then
63163: LD_VAR 0 1
63167: NOT
63168: PUSH
63169: LD_VAR 0 2
63173: NOT
63174: OR
63175: PUSH
63176: LD_VAR 0 4
63180: NOT
63181: OR
63182: IFFALSE 63186
// exit ;
63184: GO 63378
// while 1 do
63186: LD_INT 1
63188: IFFALSE 63378
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63190: LD_ADDR_VAR 0 9
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: LD_INT 1
63202: PPUSH
63203: CALL_OW 287
63207: PUSH
63208: LD_INT 10
63210: MUL
63211: ST_TO_ADDR
// r := rate / 10 ;
63212: LD_ADDR_VAR 0 7
63216: PUSH
63217: LD_VAR 0 2
63221: PUSH
63222: LD_INT 10
63224: DIVREAL
63225: ST_TO_ADDR
// time := 1 1$00 ;
63226: LD_ADDR_VAR 0 8
63230: PUSH
63231: LD_INT 2100
63233: ST_TO_ADDR
// if amount < min then
63234: LD_VAR 0 9
63238: PUSH
63239: LD_VAR 0 3
63243: LESS
63244: IFFALSE 63262
// r := r * 2 else
63246: LD_ADDR_VAR 0 7
63250: PUSH
63251: LD_VAR 0 7
63255: PUSH
63256: LD_INT 2
63258: MUL
63259: ST_TO_ADDR
63260: GO 63288
// if amount > max then
63262: LD_VAR 0 9
63266: PUSH
63267: LD_VAR 0 4
63271: GREATER
63272: IFFALSE 63288
// r := r / 2 ;
63274: LD_ADDR_VAR 0 7
63278: PUSH
63279: LD_VAR 0 7
63283: PUSH
63284: LD_INT 2
63286: DIVREAL
63287: ST_TO_ADDR
// time := time / r ;
63288: LD_ADDR_VAR 0 8
63292: PUSH
63293: LD_VAR 0 8
63297: PUSH
63298: LD_VAR 0 7
63302: DIVREAL
63303: ST_TO_ADDR
// if time < 0 then
63304: LD_VAR 0 8
63308: PUSH
63309: LD_INT 0
63311: LESS
63312: IFFALSE 63329
// time := time * - 1 ;
63314: LD_ADDR_VAR 0 8
63318: PUSH
63319: LD_VAR 0 8
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: MUL
63328: ST_TO_ADDR
// wait ( time ) ;
63329: LD_VAR 0 8
63333: PPUSH
63334: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63338: LD_INT 35
63340: PPUSH
63341: LD_INT 875
63343: PPUSH
63344: CALL_OW 12
63348: PPUSH
63349: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63353: LD_INT 1
63355: PPUSH
63356: LD_INT 5
63358: PPUSH
63359: CALL_OW 12
63363: PPUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: LD_INT 1
63371: PPUSH
63372: CALL_OW 55
// end ;
63376: GO 63186
// end ;
63378: LD_VAR 0 5
63382: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
63391: PPUSH
63392: PPUSH
// if not turrets or not factories then
63393: LD_VAR 0 1
63397: NOT
63398: PUSH
63399: LD_VAR 0 2
63403: NOT
63404: OR
63405: IFFALSE 63409
// exit ;
63407: GO 63716
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63409: LD_ADDR_VAR 0 10
63413: PUSH
63414: LD_INT 5
63416: PUSH
63417: LD_INT 6
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 4
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: LD_INT 5
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 24
63451: PUSH
63452: LD_INT 25
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 23
63461: PUSH
63462: LD_INT 27
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 42
63475: PUSH
63476: LD_INT 43
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 44
63485: PUSH
63486: LD_INT 46
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 45
63495: PUSH
63496: LD_INT 47
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// result := [ ] ;
63513: LD_ADDR_VAR 0 3
63517: PUSH
63518: EMPTY
63519: ST_TO_ADDR
// for i in turrets do
63520: LD_ADDR_VAR 0 4
63524: PUSH
63525: LD_VAR 0 1
63529: PUSH
63530: FOR_IN
63531: IFFALSE 63714
// begin nat := GetNation ( i ) ;
63533: LD_ADDR_VAR 0 7
63537: PUSH
63538: LD_VAR 0 4
63542: PPUSH
63543: CALL_OW 248
63547: ST_TO_ADDR
// weapon := 0 ;
63548: LD_ADDR_VAR 0 8
63552: PUSH
63553: LD_INT 0
63555: ST_TO_ADDR
// if not nat then
63556: LD_VAR 0 7
63560: NOT
63561: IFFALSE 63565
// continue ;
63563: GO 63530
// for j in list [ nat ] do
63565: LD_ADDR_VAR 0 5
63569: PUSH
63570: LD_VAR 0 10
63574: PUSH
63575: LD_VAR 0 7
63579: ARRAY
63580: PUSH
63581: FOR_IN
63582: IFFALSE 63623
// if GetBWeapon ( i ) = j [ 1 ] then
63584: LD_VAR 0 4
63588: PPUSH
63589: CALL_OW 269
63593: PUSH
63594: LD_VAR 0 5
63598: PUSH
63599: LD_INT 1
63601: ARRAY
63602: EQUAL
63603: IFFALSE 63621
// begin weapon := j [ 2 ] ;
63605: LD_ADDR_VAR 0 8
63609: PUSH
63610: LD_VAR 0 5
63614: PUSH
63615: LD_INT 2
63617: ARRAY
63618: ST_TO_ADDR
// break ;
63619: GO 63623
// end ;
63621: GO 63581
63623: POP
63624: POP
// if not weapon then
63625: LD_VAR 0 8
63629: NOT
63630: IFFALSE 63634
// continue ;
63632: GO 63530
// for k in factories do
63634: LD_ADDR_VAR 0 6
63638: PUSH
63639: LD_VAR 0 2
63643: PUSH
63644: FOR_IN
63645: IFFALSE 63710
// begin weapons := AvailableWeaponList ( k ) ;
63647: LD_ADDR_VAR 0 9
63651: PUSH
63652: LD_VAR 0 6
63656: PPUSH
63657: CALL_OW 478
63661: ST_TO_ADDR
// if not weapons then
63662: LD_VAR 0 9
63666: NOT
63667: IFFALSE 63671
// continue ;
63669: GO 63644
// if weapon in weapons then
63671: LD_VAR 0 8
63675: PUSH
63676: LD_VAR 0 9
63680: IN
63681: IFFALSE 63708
// begin result := [ i , weapon ] ;
63683: LD_ADDR_VAR 0 3
63687: PUSH
63688: LD_VAR 0 4
63692: PUSH
63693: LD_VAR 0 8
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: ST_TO_ADDR
// exit ;
63702: POP
63703: POP
63704: POP
63705: POP
63706: GO 63716
// end ; end ;
63708: GO 63644
63710: POP
63711: POP
// end ;
63712: GO 63530
63714: POP
63715: POP
// end ;
63716: LD_VAR 0 3
63720: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63721: LD_INT 0
63723: PPUSH
// if not side or side > 8 then
63724: LD_VAR 0 3
63728: NOT
63729: PUSH
63730: LD_VAR 0 3
63734: PUSH
63735: LD_INT 8
63737: GREATER
63738: OR
63739: IFFALSE 63743
// exit ;
63741: GO 63802
// if not range then
63743: LD_VAR 0 4
63747: NOT
63748: IFFALSE 63759
// range := - 12 ;
63750: LD_ADDR_VAR 0 4
63754: PUSH
63755: LD_INT 12
63757: NEG
63758: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63759: LD_VAR 0 1
63763: PPUSH
63764: LD_VAR 0 2
63768: PPUSH
63769: LD_VAR 0 3
63773: PPUSH
63774: LD_VAR 0 4
63778: PPUSH
63779: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63783: LD_VAR 0 1
63787: PPUSH
63788: LD_VAR 0 2
63792: PPUSH
63793: LD_VAR 0 3
63797: PPUSH
63798: CALL_OW 331
// end ;
63802: LD_VAR 0 5
63806: RET
// export function Video ( mode ) ; begin
63807: LD_INT 0
63809: PPUSH
// ingame_video = mode ;
63810: LD_ADDR_OWVAR 52
63814: PUSH
63815: LD_VAR 0 1
63819: ST_TO_ADDR
// interface_hidden = mode ;
63820: LD_ADDR_OWVAR 54
63824: PUSH
63825: LD_VAR 0 1
63829: ST_TO_ADDR
// end ;
63830: LD_VAR 0 2
63834: RET
// export function Join ( array , element ) ; begin
63835: LD_INT 0
63837: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63838: LD_ADDR_VAR 0 3
63842: PUSH
63843: LD_VAR 0 1
63847: PPUSH
63848: LD_VAR 0 1
63852: PUSH
63853: LD_INT 1
63855: PLUS
63856: PPUSH
63857: LD_VAR 0 2
63861: PPUSH
63862: CALL_OW 1
63866: ST_TO_ADDR
// end ;
63867: LD_VAR 0 3
63871: RET
// export function JoinUnion ( array , element ) ; begin
63872: LD_INT 0
63874: PPUSH
// result := array union element ;
63875: LD_ADDR_VAR 0 3
63879: PUSH
63880: LD_VAR 0 1
63884: PUSH
63885: LD_VAR 0 2
63889: UNION
63890: ST_TO_ADDR
// end ;
63891: LD_VAR 0 3
63895: RET
// export function GetBehemoths ( side ) ; begin
63896: LD_INT 0
63898: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63899: LD_ADDR_VAR 0 2
63903: PUSH
63904: LD_INT 22
63906: PUSH
63907: LD_VAR 0 1
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 31
63918: PUSH
63919: LD_INT 25
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PPUSH
63930: CALL_OW 69
63934: ST_TO_ADDR
// end ;
63935: LD_VAR 0 2
63939: RET
// export function Shuffle ( array ) ; var i , index ; begin
63940: LD_INT 0
63942: PPUSH
63943: PPUSH
63944: PPUSH
// result := [ ] ;
63945: LD_ADDR_VAR 0 2
63949: PUSH
63950: EMPTY
63951: ST_TO_ADDR
// if not array then
63952: LD_VAR 0 1
63956: NOT
63957: IFFALSE 63961
// exit ;
63959: GO 64060
// Randomize ;
63961: CALL_OW 10
// for i = array downto 1 do
63965: LD_ADDR_VAR 0 3
63969: PUSH
63970: DOUBLE
63971: LD_VAR 0 1
63975: INC
63976: ST_TO_ADDR
63977: LD_INT 1
63979: PUSH
63980: FOR_DOWNTO
63981: IFFALSE 64058
// begin index := rand ( 1 , array ) ;
63983: LD_ADDR_VAR 0 4
63987: PUSH
63988: LD_INT 1
63990: PPUSH
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 12
64000: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64001: LD_ADDR_VAR 0 2
64005: PUSH
64006: LD_VAR 0 2
64010: PPUSH
64011: LD_VAR 0 2
64015: PUSH
64016: LD_INT 1
64018: PLUS
64019: PPUSH
64020: LD_VAR 0 1
64024: PUSH
64025: LD_VAR 0 4
64029: ARRAY
64030: PPUSH
64031: CALL_OW 2
64035: ST_TO_ADDR
// array := Delete ( array , index ) ;
64036: LD_ADDR_VAR 0 1
64040: PUSH
64041: LD_VAR 0 1
64045: PPUSH
64046: LD_VAR 0 4
64050: PPUSH
64051: CALL_OW 3
64055: ST_TO_ADDR
// end ;
64056: GO 63980
64058: POP
64059: POP
// end ;
64060: LD_VAR 0 2
64064: RET
// export function GetBaseMaterials ( base ) ; begin
64065: LD_INT 0
64067: PPUSH
// result := [ 0 , 0 , 0 ] ;
64068: LD_ADDR_VAR 0 2
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// if not base then
64087: LD_VAR 0 1
64091: NOT
64092: IFFALSE 64096
// exit ;
64094: GO 64145
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64096: LD_ADDR_VAR 0 2
64100: PUSH
64101: LD_VAR 0 1
64105: PPUSH
64106: LD_INT 1
64108: PPUSH
64109: CALL_OW 275
64113: PUSH
64114: LD_VAR 0 1
64118: PPUSH
64119: LD_INT 2
64121: PPUSH
64122: CALL_OW 275
64126: PUSH
64127: LD_VAR 0 1
64131: PPUSH
64132: LD_INT 3
64134: PPUSH
64135: CALL_OW 275
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// end ;
64145: LD_VAR 0 2
64149: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64150: LD_INT 0
64152: PPUSH
64153: PPUSH
// result := array ;
64154: LD_ADDR_VAR 0 3
64158: PUSH
64159: LD_VAR 0 1
64163: ST_TO_ADDR
// if size > 0 then
64164: LD_VAR 0 2
64168: PUSH
64169: LD_INT 0
64171: GREATER
64172: IFFALSE 64218
// for i := array downto size do
64174: LD_ADDR_VAR 0 4
64178: PUSH
64179: DOUBLE
64180: LD_VAR 0 1
64184: INC
64185: ST_TO_ADDR
64186: LD_VAR 0 2
64190: PUSH
64191: FOR_DOWNTO
64192: IFFALSE 64216
// result := Delete ( result , result ) ;
64194: LD_ADDR_VAR 0 3
64198: PUSH
64199: LD_VAR 0 3
64203: PPUSH
64204: LD_VAR 0 3
64208: PPUSH
64209: CALL_OW 3
64213: ST_TO_ADDR
64214: GO 64191
64216: POP
64217: POP
// end ;
64218: LD_VAR 0 3
64222: RET
// export function ComExit ( unit ) ; var tmp ; begin
64223: LD_INT 0
64225: PPUSH
64226: PPUSH
// if not IsInUnit ( unit ) then
64227: LD_VAR 0 1
64231: PPUSH
64232: CALL_OW 310
64236: NOT
64237: IFFALSE 64241
// exit ;
64239: GO 64301
// tmp := IsInUnit ( unit ) ;
64241: LD_ADDR_VAR 0 3
64245: PUSH
64246: LD_VAR 0 1
64250: PPUSH
64251: CALL_OW 310
64255: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64256: LD_VAR 0 3
64260: PPUSH
64261: CALL_OW 247
64265: PUSH
64266: LD_INT 2
64268: EQUAL
64269: IFFALSE 64282
// ComExitVehicle ( unit ) else
64271: LD_VAR 0 1
64275: PPUSH
64276: CALL_OW 121
64280: GO 64291
// ComExitBuilding ( unit ) ;
64282: LD_VAR 0 1
64286: PPUSH
64287: CALL_OW 122
// result := tmp ;
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: LD_VAR 0 3
64300: ST_TO_ADDR
// end ;
64301: LD_VAR 0 2
64305: RET
// export function ComExitAll ( units ) ; var i ; begin
64306: LD_INT 0
64308: PPUSH
64309: PPUSH
// if not units then
64310: LD_VAR 0 1
64314: NOT
64315: IFFALSE 64319
// exit ;
64317: GO 64345
// for i in units do
64319: LD_ADDR_VAR 0 3
64323: PUSH
64324: LD_VAR 0 1
64328: PUSH
64329: FOR_IN
64330: IFFALSE 64343
// ComExit ( i ) ;
64332: LD_VAR 0 3
64336: PPUSH
64337: CALL 64223 0 1
64341: GO 64329
64343: POP
64344: POP
// end ;
64345: LD_VAR 0 2
64349: RET
// export function ResetHc ; begin
64350: LD_INT 0
64352: PPUSH
// InitHc ;
64353: CALL_OW 19
// hc_importance := 0 ;
64357: LD_ADDR_OWVAR 32
64361: PUSH
64362: LD_INT 0
64364: ST_TO_ADDR
// end ;
64365: LD_VAR 0 1
64369: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64370: LD_INT 0
64372: PPUSH
64373: PPUSH
64374: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64375: LD_ADDR_VAR 0 6
64379: PUSH
64380: LD_VAR 0 1
64384: PUSH
64385: LD_VAR 0 3
64389: PLUS
64390: PUSH
64391: LD_INT 2
64393: DIV
64394: ST_TO_ADDR
// if _x < 0 then
64395: LD_VAR 0 6
64399: PUSH
64400: LD_INT 0
64402: LESS
64403: IFFALSE 64420
// _x := _x * - 1 ;
64405: LD_ADDR_VAR 0 6
64409: PUSH
64410: LD_VAR 0 6
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: MUL
64419: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64420: LD_ADDR_VAR 0 7
64424: PUSH
64425: LD_VAR 0 2
64429: PUSH
64430: LD_VAR 0 4
64434: PLUS
64435: PUSH
64436: LD_INT 2
64438: DIV
64439: ST_TO_ADDR
// if _y < 0 then
64440: LD_VAR 0 7
64444: PUSH
64445: LD_INT 0
64447: LESS
64448: IFFALSE 64465
// _y := _y * - 1 ;
64450: LD_ADDR_VAR 0 7
64454: PUSH
64455: LD_VAR 0 7
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: MUL
64464: ST_TO_ADDR
// result := [ _x , _y ] ;
64465: LD_ADDR_VAR 0 5
64469: PUSH
64470: LD_VAR 0 6
64474: PUSH
64475: LD_VAR 0 7
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// end ;
64484: LD_VAR 0 5
64488: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64489: LD_INT 0
64491: PPUSH
64492: PPUSH
64493: PPUSH
64494: PPUSH
// task := GetTaskList ( unit ) ;
64495: LD_ADDR_VAR 0 7
64499: PUSH
64500: LD_VAR 0 1
64504: PPUSH
64505: CALL_OW 437
64509: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64510: LD_VAR 0 7
64514: NOT
64515: PUSH
64516: LD_VAR 0 1
64520: PPUSH
64521: LD_VAR 0 2
64525: PPUSH
64526: CALL_OW 308
64530: NOT
64531: AND
64532: IFFALSE 64536
// exit ;
64534: GO 64654
// if IsInArea ( unit , area ) then
64536: LD_VAR 0 1
64540: PPUSH
64541: LD_VAR 0 2
64545: PPUSH
64546: CALL_OW 308
64550: IFFALSE 64568
// begin ComMoveToArea ( unit , goAway ) ;
64552: LD_VAR 0 1
64556: PPUSH
64557: LD_VAR 0 3
64561: PPUSH
64562: CALL_OW 113
// exit ;
64566: GO 64654
// end ; if task [ 1 ] [ 1 ] <> M then
64568: LD_VAR 0 7
64572: PUSH
64573: LD_INT 1
64575: ARRAY
64576: PUSH
64577: LD_INT 1
64579: ARRAY
64580: PUSH
64581: LD_STRING M
64583: NONEQUAL
64584: IFFALSE 64588
// exit ;
64586: GO 64654
// x := task [ 1 ] [ 2 ] ;
64588: LD_ADDR_VAR 0 5
64592: PUSH
64593: LD_VAR 0 7
64597: PUSH
64598: LD_INT 1
64600: ARRAY
64601: PUSH
64602: LD_INT 2
64604: ARRAY
64605: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64606: LD_ADDR_VAR 0 6
64610: PUSH
64611: LD_VAR 0 7
64615: PUSH
64616: LD_INT 1
64618: ARRAY
64619: PUSH
64620: LD_INT 3
64622: ARRAY
64623: ST_TO_ADDR
// if InArea ( x , y , area ) then
64624: LD_VAR 0 5
64628: PPUSH
64629: LD_VAR 0 6
64633: PPUSH
64634: LD_VAR 0 2
64638: PPUSH
64639: CALL_OW 309
64643: IFFALSE 64654
// ComStop ( unit ) ;
64645: LD_VAR 0 1
64649: PPUSH
64650: CALL_OW 141
// end ;
64654: LD_VAR 0 4
64658: RET
// export function Abs ( value ) ; begin
64659: LD_INT 0
64661: PPUSH
// result := value ;
64662: LD_ADDR_VAR 0 2
64666: PUSH
64667: LD_VAR 0 1
64671: ST_TO_ADDR
// if value < 0 then
64672: LD_VAR 0 1
64676: PUSH
64677: LD_INT 0
64679: LESS
64680: IFFALSE 64697
// result := value * - 1 ;
64682: LD_ADDR_VAR 0 2
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: MUL
64696: ST_TO_ADDR
// end ;
64697: LD_VAR 0 2
64701: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64702: LD_INT 0
64704: PPUSH
64705: PPUSH
64706: PPUSH
64707: PPUSH
64708: PPUSH
64709: PPUSH
64710: PPUSH
64711: PPUSH
// if not unit or not building then
64712: LD_VAR 0 1
64716: NOT
64717: PUSH
64718: LD_VAR 0 2
64722: NOT
64723: OR
64724: IFFALSE 64728
// exit ;
64726: GO 64954
// x := GetX ( building ) ;
64728: LD_ADDR_VAR 0 4
64732: PUSH
64733: LD_VAR 0 2
64737: PPUSH
64738: CALL_OW 250
64742: ST_TO_ADDR
// y := GetY ( building ) ;
64743: LD_ADDR_VAR 0 6
64747: PUSH
64748: LD_VAR 0 2
64752: PPUSH
64753: CALL_OW 251
64757: ST_TO_ADDR
// d := GetDir ( building ) ;
64758: LD_ADDR_VAR 0 8
64762: PUSH
64763: LD_VAR 0 2
64767: PPUSH
64768: CALL_OW 254
64772: ST_TO_ADDR
// r := 4 ;
64773: LD_ADDR_VAR 0 9
64777: PUSH
64778: LD_INT 4
64780: ST_TO_ADDR
// for i := 1 to 5 do
64781: LD_ADDR_VAR 0 10
64785: PUSH
64786: DOUBLE
64787: LD_INT 1
64789: DEC
64790: ST_TO_ADDR
64791: LD_INT 5
64793: PUSH
64794: FOR_TO
64795: IFFALSE 64952
// begin _x := ShiftX ( x , d , r + i ) ;
64797: LD_ADDR_VAR 0 5
64801: PUSH
64802: LD_VAR 0 4
64806: PPUSH
64807: LD_VAR 0 8
64811: PPUSH
64812: LD_VAR 0 9
64816: PUSH
64817: LD_VAR 0 10
64821: PLUS
64822: PPUSH
64823: CALL_OW 272
64827: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64828: LD_ADDR_VAR 0 7
64832: PUSH
64833: LD_VAR 0 6
64837: PPUSH
64838: LD_VAR 0 8
64842: PPUSH
64843: LD_VAR 0 9
64847: PUSH
64848: LD_VAR 0 10
64852: PLUS
64853: PPUSH
64854: CALL_OW 273
64858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64859: LD_VAR 0 5
64863: PPUSH
64864: LD_VAR 0 7
64868: PPUSH
64869: CALL_OW 488
64873: PUSH
64874: LD_VAR 0 5
64878: PPUSH
64879: LD_VAR 0 7
64883: PPUSH
64884: CALL_OW 428
64888: PPUSH
64889: CALL_OW 247
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: IN
64904: NOT
64905: AND
64906: IFFALSE 64950
// begin ComMoveXY ( unit , _x , _y ) ;
64908: LD_VAR 0 1
64912: PPUSH
64913: LD_VAR 0 5
64917: PPUSH
64918: LD_VAR 0 7
64922: PPUSH
64923: CALL_OW 111
// result := [ _x , _y ] ;
64927: LD_ADDR_VAR 0 3
64931: PUSH
64932: LD_VAR 0 5
64936: PUSH
64937: LD_VAR 0 7
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: ST_TO_ADDR
// exit ;
64946: POP
64947: POP
64948: GO 64954
// end ; end ;
64950: GO 64794
64952: POP
64953: POP
// end ;
64954: LD_VAR 0 3
64958: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64959: LD_INT 0
64961: PPUSH
64962: PPUSH
64963: PPUSH
// result := 0 ;
64964: LD_ADDR_VAR 0 3
64968: PUSH
64969: LD_INT 0
64971: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 0
64979: LESS
64980: PUSH
64981: LD_VAR 0 1
64985: PUSH
64986: LD_INT 8
64988: GREATER
64989: OR
64990: PUSH
64991: LD_VAR 0 2
64995: PUSH
64996: LD_INT 0
64998: LESS
64999: OR
65000: PUSH
65001: LD_VAR 0 2
65005: PUSH
65006: LD_INT 8
65008: GREATER
65009: OR
65010: IFFALSE 65014
// exit ;
65012: GO 65089
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65014: LD_ADDR_VAR 0 4
65018: PUSH
65019: LD_INT 22
65021: PUSH
65022: LD_VAR 0 2
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PPUSH
65031: CALL_OW 69
65035: PUSH
65036: FOR_IN
65037: IFFALSE 65087
// begin un := UnitShoot ( i ) ;
65039: LD_ADDR_VAR 0 5
65043: PUSH
65044: LD_VAR 0 4
65048: PPUSH
65049: CALL_OW 504
65053: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65054: LD_VAR 0 5
65058: PPUSH
65059: CALL_OW 255
65063: PUSH
65064: LD_VAR 0 1
65068: EQUAL
65069: IFFALSE 65085
// begin result := un ;
65071: LD_ADDR_VAR 0 3
65075: PUSH
65076: LD_VAR 0 5
65080: ST_TO_ADDR
// exit ;
65081: POP
65082: POP
65083: GO 65089
// end ; end ;
65085: GO 65036
65087: POP
65088: POP
// end ;
65089: LD_VAR 0 3
65093: RET
// export function GetCargoBay ( units ) ; begin
65094: LD_INT 0
65096: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65097: LD_ADDR_VAR 0 2
65101: PUSH
65102: LD_VAR 0 1
65106: PPUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 34
65112: PUSH
65113: LD_INT 12
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 34
65122: PUSH
65123: LD_INT 51
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 34
65132: PUSH
65133: LD_INT 32
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 34
65142: PUSH
65143: LD_EXP 111
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: PPUSH
65159: CALL_OW 72
65163: ST_TO_ADDR
// end ;
65164: LD_VAR 0 2
65168: RET
// export function Negate ( value ) ; begin
65169: LD_INT 0
65171: PPUSH
// result := not value ;
65172: LD_ADDR_VAR 0 2
65176: PUSH
65177: LD_VAR 0 1
65181: NOT
65182: ST_TO_ADDR
// end ;
65183: LD_VAR 0 2
65187: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65188: LD_INT 0
65190: PPUSH
// if x1 = x2 then
65191: LD_VAR 0 1
65195: PUSH
65196: LD_VAR 0 3
65200: EQUAL
65201: IFFALSE 65235
// begin if y1 > y2 then
65203: LD_VAR 0 2
65207: PUSH
65208: LD_VAR 0 4
65212: GREATER
65213: IFFALSE 65225
// result := 0 else
65215: LD_ADDR_VAR 0 5
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
65223: GO 65233
// result := 3 ;
65225: LD_ADDR_VAR 0 5
65229: PUSH
65230: LD_INT 3
65232: ST_TO_ADDR
// exit ;
65233: GO 65321
// end ; if y1 = y2 then
65235: LD_VAR 0 2
65239: PUSH
65240: LD_VAR 0 4
65244: EQUAL
65245: IFFALSE 65279
// begin if x1 > x2 then
65247: LD_VAR 0 1
65251: PUSH
65252: LD_VAR 0 3
65256: GREATER
65257: IFFALSE 65269
// result := 1 else
65259: LD_ADDR_VAR 0 5
65263: PUSH
65264: LD_INT 1
65266: ST_TO_ADDR
65267: GO 65277
// result := 4 ;
65269: LD_ADDR_VAR 0 5
65273: PUSH
65274: LD_INT 4
65276: ST_TO_ADDR
// exit ;
65277: GO 65321
// end ; if x1 > x2 and y1 > y2 then
65279: LD_VAR 0 1
65283: PUSH
65284: LD_VAR 0 3
65288: GREATER
65289: PUSH
65290: LD_VAR 0 2
65294: PUSH
65295: LD_VAR 0 4
65299: GREATER
65300: AND
65301: IFFALSE 65313
// result := 2 else
65303: LD_ADDR_VAR 0 5
65307: PUSH
65308: LD_INT 2
65310: ST_TO_ADDR
65311: GO 65321
// result := 5 ;
65313: LD_ADDR_VAR 0 5
65317: PUSH
65318: LD_INT 5
65320: ST_TO_ADDR
// end ;
65321: LD_VAR 0 5
65325: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65326: LD_INT 0
65328: PPUSH
65329: PPUSH
// if not driver or not IsInUnit ( driver ) then
65330: LD_VAR 0 1
65334: NOT
65335: PUSH
65336: LD_VAR 0 1
65340: PPUSH
65341: CALL_OW 310
65345: NOT
65346: OR
65347: IFFALSE 65351
// exit ;
65349: GO 65441
// vehicle := IsInUnit ( driver ) ;
65351: LD_ADDR_VAR 0 3
65355: PUSH
65356: LD_VAR 0 1
65360: PPUSH
65361: CALL_OW 310
65365: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65366: LD_VAR 0 1
65370: PPUSH
65371: LD_STRING \
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: PUSH
65401: LD_STRING E
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_VAR 0 3
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PPUSH
65437: CALL_OW 446
// end ;
65441: LD_VAR 0 2
65445: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65446: LD_INT 0
65448: PPUSH
65449: PPUSH
// if not driver or not IsInUnit ( driver ) then
65450: LD_VAR 0 1
65454: NOT
65455: PUSH
65456: LD_VAR 0 1
65460: PPUSH
65461: CALL_OW 310
65465: NOT
65466: OR
65467: IFFALSE 65471
// exit ;
65469: GO 65561
// vehicle := IsInUnit ( driver ) ;
65471: LD_ADDR_VAR 0 3
65475: PUSH
65476: LD_VAR 0 1
65480: PPUSH
65481: CALL_OW 310
65485: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65486: LD_VAR 0 1
65490: PPUSH
65491: LD_STRING \
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: PUSH
65521: LD_STRING E
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_VAR 0 3
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PPUSH
65557: CALL_OW 447
// end ;
65561: LD_VAR 0 2
65565: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65566: LD_INT 0
65568: PPUSH
65569: PPUSH
65570: PPUSH
// tmp := [ ] ;
65571: LD_ADDR_VAR 0 5
65575: PUSH
65576: EMPTY
65577: ST_TO_ADDR
// for i in units do
65578: LD_ADDR_VAR 0 4
65582: PUSH
65583: LD_VAR 0 1
65587: PUSH
65588: FOR_IN
65589: IFFALSE 65627
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65591: LD_ADDR_VAR 0 5
65595: PUSH
65596: LD_VAR 0 5
65600: PPUSH
65601: LD_VAR 0 5
65605: PUSH
65606: LD_INT 1
65608: PLUS
65609: PPUSH
65610: LD_VAR 0 4
65614: PPUSH
65615: CALL_OW 256
65619: PPUSH
65620: CALL_OW 2
65624: ST_TO_ADDR
65625: GO 65588
65627: POP
65628: POP
// if not tmp then
65629: LD_VAR 0 5
65633: NOT
65634: IFFALSE 65638
// exit ;
65636: GO 65686
// if asc then
65638: LD_VAR 0 2
65642: IFFALSE 65666
// result := SortListByListAsc ( units , tmp ) else
65644: LD_ADDR_VAR 0 3
65648: PUSH
65649: LD_VAR 0 1
65653: PPUSH
65654: LD_VAR 0 5
65658: PPUSH
65659: CALL_OW 76
65663: ST_TO_ADDR
65664: GO 65686
// result := SortListByListDesc ( units , tmp ) ;
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_VAR 0 1
65675: PPUSH
65676: LD_VAR 0 5
65680: PPUSH
65681: CALL_OW 77
65685: ST_TO_ADDR
// end ;
65686: LD_VAR 0 3
65690: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65691: LD_INT 0
65693: PPUSH
65694: PPUSH
// task := GetTaskList ( mech ) ;
65695: LD_ADDR_VAR 0 4
65699: PUSH
65700: LD_VAR 0 1
65704: PPUSH
65705: CALL_OW 437
65709: ST_TO_ADDR
// if not task then
65710: LD_VAR 0 4
65714: NOT
65715: IFFALSE 65719
// exit ;
65717: GO 65761
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65719: LD_ADDR_VAR 0 3
65723: PUSH
65724: LD_VAR 0 4
65728: PUSH
65729: LD_INT 1
65731: ARRAY
65732: PUSH
65733: LD_INT 1
65735: ARRAY
65736: PUSH
65737: LD_STRING r
65739: EQUAL
65740: PUSH
65741: LD_VAR 0 4
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PUSH
65750: LD_INT 4
65752: ARRAY
65753: PUSH
65754: LD_VAR 0 2
65758: EQUAL
65759: AND
65760: ST_TO_ADDR
// end ;
65761: LD_VAR 0 3
65765: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65766: LD_INT 0
65768: PPUSH
// SetDir ( unit , d ) ;
65769: LD_VAR 0 1
65773: PPUSH
65774: LD_VAR 0 4
65778: PPUSH
65779: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65783: LD_VAR 0 1
65787: PPUSH
65788: LD_VAR 0 2
65792: PPUSH
65793: LD_VAR 0 3
65797: PPUSH
65798: LD_VAR 0 5
65802: PPUSH
65803: CALL_OW 48
// end ;
65807: LD_VAR 0 6
65811: RET
// export function ToNaturalNumber ( number ) ; begin
65812: LD_INT 0
65814: PPUSH
// result := number div 1 ;
65815: LD_ADDR_VAR 0 2
65819: PUSH
65820: LD_VAR 0 1
65824: PUSH
65825: LD_INT 1
65827: DIV
65828: ST_TO_ADDR
// if number < 0 then
65829: LD_VAR 0 1
65833: PUSH
65834: LD_INT 0
65836: LESS
65837: IFFALSE 65847
// result := 0 ;
65839: LD_ADDR_VAR 0 2
65843: PUSH
65844: LD_INT 0
65846: ST_TO_ADDR
// end ;
65847: LD_VAR 0 2
65851: RET
// export function SortByClass ( units , class ) ; var un ; begin
65852: LD_INT 0
65854: PPUSH
65855: PPUSH
// if not units or not class then
65856: LD_VAR 0 1
65860: NOT
65861: PUSH
65862: LD_VAR 0 2
65866: NOT
65867: OR
65868: IFFALSE 65872
// exit ;
65870: GO 65967
// result := [ ] ;
65872: LD_ADDR_VAR 0 3
65876: PUSH
65877: EMPTY
65878: ST_TO_ADDR
// for un in units do
65879: LD_ADDR_VAR 0 4
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: FOR_IN
65890: IFFALSE 65965
// if GetClass ( un ) = class then
65892: LD_VAR 0 4
65896: PPUSH
65897: CALL_OW 257
65901: PUSH
65902: LD_VAR 0 2
65906: EQUAL
65907: IFFALSE 65934
// result := Insert ( result , 1 , un ) else
65909: LD_ADDR_VAR 0 3
65913: PUSH
65914: LD_VAR 0 3
65918: PPUSH
65919: LD_INT 1
65921: PPUSH
65922: LD_VAR 0 4
65926: PPUSH
65927: CALL_OW 2
65931: ST_TO_ADDR
65932: GO 65963
// result := Replace ( result , result + 1 , un ) ;
65934: LD_ADDR_VAR 0 3
65938: PUSH
65939: LD_VAR 0 3
65943: PPUSH
65944: LD_VAR 0 3
65948: PUSH
65949: LD_INT 1
65951: PLUS
65952: PPUSH
65953: LD_VAR 0 4
65957: PPUSH
65958: CALL_OW 1
65962: ST_TO_ADDR
65963: GO 65889
65965: POP
65966: POP
// end ;
65967: LD_VAR 0 3
65971: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65972: LD_INT 0
65974: PPUSH
65975: PPUSH
65976: PPUSH
65977: PPUSH
65978: PPUSH
65979: PPUSH
65980: PPUSH
// result := [ ] ;
65981: LD_ADDR_VAR 0 4
65985: PUSH
65986: EMPTY
65987: ST_TO_ADDR
// if x - r < 0 then
65988: LD_VAR 0 1
65992: PUSH
65993: LD_VAR 0 3
65997: MINUS
65998: PUSH
65999: LD_INT 0
66001: LESS
66002: IFFALSE 66014
// min_x := 0 else
66004: LD_ADDR_VAR 0 8
66008: PUSH
66009: LD_INT 0
66011: ST_TO_ADDR
66012: GO 66030
// min_x := x - r ;
66014: LD_ADDR_VAR 0 8
66018: PUSH
66019: LD_VAR 0 1
66023: PUSH
66024: LD_VAR 0 3
66028: MINUS
66029: ST_TO_ADDR
// if y - r < 0 then
66030: LD_VAR 0 2
66034: PUSH
66035: LD_VAR 0 3
66039: MINUS
66040: PUSH
66041: LD_INT 0
66043: LESS
66044: IFFALSE 66056
// min_y := 0 else
66046: LD_ADDR_VAR 0 7
66050: PUSH
66051: LD_INT 0
66053: ST_TO_ADDR
66054: GO 66072
// min_y := y - r ;
66056: LD_ADDR_VAR 0 7
66060: PUSH
66061: LD_VAR 0 2
66065: PUSH
66066: LD_VAR 0 3
66070: MINUS
66071: ST_TO_ADDR
// max_x := x + r ;
66072: LD_ADDR_VAR 0 9
66076: PUSH
66077: LD_VAR 0 1
66081: PUSH
66082: LD_VAR 0 3
66086: PLUS
66087: ST_TO_ADDR
// max_y := y + r ;
66088: LD_ADDR_VAR 0 10
66092: PUSH
66093: LD_VAR 0 2
66097: PUSH
66098: LD_VAR 0 3
66102: PLUS
66103: ST_TO_ADDR
// for _x = min_x to max_x do
66104: LD_ADDR_VAR 0 5
66108: PUSH
66109: DOUBLE
66110: LD_VAR 0 8
66114: DEC
66115: ST_TO_ADDR
66116: LD_VAR 0 9
66120: PUSH
66121: FOR_TO
66122: IFFALSE 66223
// for _y = min_y to max_y do
66124: LD_ADDR_VAR 0 6
66128: PUSH
66129: DOUBLE
66130: LD_VAR 0 7
66134: DEC
66135: ST_TO_ADDR
66136: LD_VAR 0 10
66140: PUSH
66141: FOR_TO
66142: IFFALSE 66219
// begin if not ValidHex ( _x , _y ) then
66144: LD_VAR 0 5
66148: PPUSH
66149: LD_VAR 0 6
66153: PPUSH
66154: CALL_OW 488
66158: NOT
66159: IFFALSE 66163
// continue ;
66161: GO 66141
// if GetResourceTypeXY ( _x , _y ) then
66163: LD_VAR 0 5
66167: PPUSH
66168: LD_VAR 0 6
66172: PPUSH
66173: CALL_OW 283
66177: IFFALSE 66217
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66179: LD_ADDR_VAR 0 4
66183: PUSH
66184: LD_VAR 0 4
66188: PPUSH
66189: LD_VAR 0 4
66193: PUSH
66194: LD_INT 1
66196: PLUS
66197: PPUSH
66198: LD_VAR 0 5
66202: PUSH
66203: LD_VAR 0 6
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PPUSH
66212: CALL_OW 1
66216: ST_TO_ADDR
// end ;
66217: GO 66141
66219: POP
66220: POP
66221: GO 66121
66223: POP
66224: POP
// end ;
66225: LD_VAR 0 4
66229: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
66230: LD_INT 0
66232: PPUSH
66233: PPUSH
66234: PPUSH
66235: PPUSH
66236: PPUSH
66237: PPUSH
// if not units then
66238: LD_VAR 0 1
66242: NOT
66243: IFFALSE 66247
// exit ;
66245: GO 66648
// result := UnitFilter ( units , [ f_ok ] ) ;
66247: LD_ADDR_VAR 0 3
66251: PUSH
66252: LD_VAR 0 1
66256: PPUSH
66257: LD_INT 50
66259: PUSH
66260: EMPTY
66261: LIST
66262: PPUSH
66263: CALL_OW 72
66267: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66268: LD_ADDR_VAR 0 7
66272: PUSH
66273: LD_VAR 0 1
66277: PUSH
66278: LD_INT 1
66280: ARRAY
66281: PPUSH
66282: CALL_OW 255
66286: ST_TO_ADDR
// if not result then
66287: LD_VAR 0 3
66291: NOT
66292: IFFALSE 66296
// exit ;
66294: GO 66648
// for i in result do
66296: LD_ADDR_VAR 0 4
66300: PUSH
66301: LD_VAR 0 3
66305: PUSH
66306: FOR_IN
66307: IFFALSE 66646
// begin tag := GetTag ( i ) + 1 ;
66309: LD_ADDR_VAR 0 8
66313: PUSH
66314: LD_VAR 0 4
66318: PPUSH
66319: CALL_OW 110
66323: PUSH
66324: LD_INT 1
66326: PLUS
66327: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66328: LD_ADDR_VAR 0 6
66332: PUSH
66333: LD_VAR 0 4
66337: PPUSH
66338: CALL_OW 250
66342: PPUSH
66343: LD_VAR 0 4
66347: PPUSH
66348: CALL_OW 251
66352: PPUSH
66353: LD_INT 6
66355: PPUSH
66356: CALL 65972 0 3
66360: ST_TO_ADDR
// if cr then
66361: LD_VAR 0 6
66365: IFFALSE 66404
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66367: LD_VAR 0 4
66371: PPUSH
66372: LD_VAR 0 6
66376: PUSH
66377: LD_INT 1
66379: ARRAY
66380: PUSH
66381: LD_INT 1
66383: ARRAY
66384: PPUSH
66385: LD_VAR 0 6
66389: PUSH
66390: LD_INT 1
66392: ARRAY
66393: PUSH
66394: LD_INT 2
66396: ARRAY
66397: PPUSH
66398: CALL_OW 116
66402: GO 66644
// if path > tag then
66404: LD_VAR 0 2
66408: PUSH
66409: LD_VAR 0 8
66413: GREATER
66414: IFFALSE 66592
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: LD_INT 81
66423: PUSH
66424: LD_VAR 0 7
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 91
66435: PUSH
66436: LD_VAR 0 4
66440: PUSH
66441: LD_INT 12
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PPUSH
66453: CALL_OW 69
66457: ST_TO_ADDR
// if enemy then
66458: LD_VAR 0 5
66462: IFFALSE 66490
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66464: LD_VAR 0 4
66468: PPUSH
66469: LD_VAR 0 5
66473: PPUSH
66474: LD_VAR 0 4
66478: PPUSH
66479: CALL_OW 74
66483: PPUSH
66484: CALL_OW 115
66488: GO 66590
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66490: LD_VAR 0 4
66494: PPUSH
66495: LD_VAR 0 2
66499: PUSH
66500: LD_VAR 0 8
66504: ARRAY
66505: PUSH
66506: LD_INT 1
66508: ARRAY
66509: PPUSH
66510: LD_VAR 0 2
66514: PUSH
66515: LD_VAR 0 8
66519: ARRAY
66520: PUSH
66521: LD_INT 2
66523: ARRAY
66524: PPUSH
66525: CALL_OW 297
66529: PUSH
66530: LD_INT 6
66532: GREATER
66533: IFFALSE 66576
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66535: LD_VAR 0 4
66539: PPUSH
66540: LD_VAR 0 2
66544: PUSH
66545: LD_VAR 0 8
66549: ARRAY
66550: PUSH
66551: LD_INT 1
66553: ARRAY
66554: PPUSH
66555: LD_VAR 0 2
66559: PUSH
66560: LD_VAR 0 8
66564: ARRAY
66565: PUSH
66566: LD_INT 2
66568: ARRAY
66569: PPUSH
66570: CALL_OW 114
66574: GO 66590
// SetTag ( i , tag ) ;
66576: LD_VAR 0 4
66580: PPUSH
66581: LD_VAR 0 8
66585: PPUSH
66586: CALL_OW 109
// end else
66590: GO 66644
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66592: LD_ADDR_VAR 0 5
66596: PUSH
66597: LD_INT 81
66599: PUSH
66600: LD_VAR 0 7
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PPUSH
66609: CALL_OW 69
66613: ST_TO_ADDR
// if enemy then
66614: LD_VAR 0 5
66618: IFFALSE 66644
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66620: LD_VAR 0 4
66624: PPUSH
66625: LD_VAR 0 5
66629: PPUSH
66630: LD_VAR 0 4
66634: PPUSH
66635: CALL_OW 74
66639: PPUSH
66640: CALL_OW 115
// end ; end ;
66644: GO 66306
66646: POP
66647: POP
// end ; end_of_file
66648: LD_VAR 0 3
66652: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
66653: LD_INT 0
66655: PPUSH
// ar_miner := 81 ;
66656: LD_ADDR_EXP 117
66660: PUSH
66661: LD_INT 81
66663: ST_TO_ADDR
// ar_crane := 88 ;
66664: LD_ADDR_EXP 116
66668: PUSH
66669: LD_INT 88
66671: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
66672: LD_ADDR_EXP 111
66676: PUSH
66677: LD_INT 89
66679: ST_TO_ADDR
// us_hack := 99 ;
66680: LD_ADDR_EXP 112
66684: PUSH
66685: LD_INT 99
66687: ST_TO_ADDR
// us_artillery := 97 ;
66688: LD_ADDR_EXP 113
66692: PUSH
66693: LD_INT 97
66695: ST_TO_ADDR
// ar_bio_bomb := 91 ;
66696: LD_ADDR_EXP 114
66700: PUSH
66701: LD_INT 91
66703: ST_TO_ADDR
// ar_mortar := 92 ;
66704: LD_ADDR_EXP 115
66708: PUSH
66709: LD_INT 92
66711: ST_TO_ADDR
// ru_radar := 98 ;
66712: LD_ADDR_EXP 110
66716: PUSH
66717: LD_INT 98
66719: ST_TO_ADDR
// tech_Artillery := 80 ;
66720: LD_ADDR_EXP 118
66724: PUSH
66725: LD_INT 80
66727: ST_TO_ADDR
// tech_RadMat := 81 ;
66728: LD_ADDR_EXP 119
66732: PUSH
66733: LD_INT 81
66735: ST_TO_ADDR
// tech_BasicTools := 82 ;
66736: LD_ADDR_EXP 120
66740: PUSH
66741: LD_INT 82
66743: ST_TO_ADDR
// tech_Cargo := 83 ;
66744: LD_ADDR_EXP 121
66748: PUSH
66749: LD_INT 83
66751: ST_TO_ADDR
// tech_Track := 84 ;
66752: LD_ADDR_EXP 122
66756: PUSH
66757: LD_INT 84
66759: ST_TO_ADDR
// tech_Crane := 85 ;
66760: LD_ADDR_EXP 123
66764: PUSH
66765: LD_INT 85
66767: ST_TO_ADDR
// tech_Bulldozer := 86 ;
66768: LD_ADDR_EXP 124
66772: PUSH
66773: LD_INT 86
66775: ST_TO_ADDR
// tech_Hovercraft := 87 ;
66776: LD_ADDR_EXP 125
66780: PUSH
66781: LD_INT 87
66783: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
66784: LD_ADDR_EXP 126
66788: PUSH
66789: LD_INT 88
66791: ST_TO_ADDR
// class_mastodont := 31 ;
66792: LD_ADDR_EXP 127
66796: PUSH
66797: LD_INT 31
66799: ST_TO_ADDR
// class_horse := 21 ;
66800: LD_ADDR_EXP 128
66804: PUSH
66805: LD_INT 21
66807: ST_TO_ADDR
// end ;
66808: LD_VAR 0 1
66812: RET
// every 1 do
66813: GO 66815
66815: DISABLE
// InitGlobalVariables ; end_of_file
66816: CALL 66653 0 0
66820: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66821: LD_VAR 0 1
66825: PPUSH
66826: LD_VAR 0 2
66830: PPUSH
66831: LD_VAR 0 3
66835: PPUSH
66836: LD_VAR 0 4
66840: PPUSH
66841: LD_VAR 0 5
66845: PPUSH
66846: LD_VAR 0 6
66850: PPUSH
66851: CALL 9748 0 6
// end ;
66855: PPOPN 6
66857: END
