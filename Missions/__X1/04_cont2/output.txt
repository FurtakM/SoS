// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5617 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 35491 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 29919 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 29919 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 29919 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 29919 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 29919 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 29919 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 29919 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 29919 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 29919 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 29919 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 29919 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 29919 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 29919 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 29919 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 29919 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL 25630 0 1
// if un = Heike then
4846: LD_VAR 0 1
4850: PUSH
4851: LD_EXP 18
4855: EQUAL
4856: IFFALSE 4865
// YouLost ( Heike ) ;
4858: LD_STRING Heike
4860: PPUSH
4861: CALL_OW 104
// if un in ruEng then
4865: LD_VAR 0 1
4869: PUSH
4870: LD_EXP 38
4874: IN
4875: IFFALSE 4893
// ruEng := ruEng diff un ;
4877: LD_ADDR_EXP 38
4881: PUSH
4882: LD_EXP 38
4886: PUSH
4887: LD_VAR 0 1
4891: DIFF
4892: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4893: LD_VAR 0 1
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 2
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 23
4920: PUSH
4921: LD_INT 2
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: IN
4938: IFFALSE 4954
// loseCounter := loseCounter + 1 ;
4940: LD_ADDR_EXP 6
4944: PUSH
4945: LD_EXP 6
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: ST_TO_ADDR
// end ;
4954: PPOPN 1
4956: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4957: LD_INT 0
4959: PPUSH
4960: PPUSH
// begin if un in ruMobile then
4961: LD_VAR 0 2
4965: PUSH
4966: LD_EXP 41
4970: IN
4971: IFFALSE 5130
// begin ruMobile := ruMobile diff un ;
4973: LD_ADDR_EXP 41
4977: PUSH
4978: LD_EXP 41
4982: PUSH
4983: LD_VAR 0 2
4987: DIFF
4988: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4989: LD_ADDR_VAR 0 5
4993: PUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 264
5003: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5004: LD_ADDR_VAR 0 6
5008: PUSH
5009: LD_INT 110
5011: PPUSH
5012: LD_INT 126
5014: PPUSH
5015: CALL_OW 428
5019: ST_TO_ADDR
// if not driver or not fac then
5020: LD_VAR 0 1
5024: NOT
5025: PUSH
5026: LD_VAR 0 6
5030: NOT
5031: OR
5032: IFFALSE 5036
// exit ;
5034: GO 5130
// AddComMoveXY ( driver , 111 , 121 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 111
5043: PPUSH
5044: LD_INT 121
5046: PPUSH
5047: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 6
5060: PPUSH
5061: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5065: LD_INT 35
5067: PPUSH
5068: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 301
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 310
5091: OR
5092: IFFALSE 5065
// if IsDead ( driver ) then
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 301
5103: IFFALSE 5107
// exit ;
5105: GO 5130
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 21
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: LD_VAR 0 5
5125: PPUSH
5126: CALL_OW 185
// end ; end ;
5130: PPOPN 6
5132: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: CALL 25750 0 2
// if GetSide ( fac ) = 3 then
5147: LD_VAR 0 2
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 3
5159: EQUAL
5160: IFFALSE 5206
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5162: LD_ADDR_EXP 41
5166: PUSH
5167: LD_EXP 41
5171: PPUSH
5172: LD_EXP 41
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PPUSH
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 1
5190: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 110
5198: PPUSH
5199: LD_INT 117
5201: PPUSH
5202: CALL_OW 171
// end ; end ;
5206: PPOPN 2
5208: END
// on LeaveBuilding ( b , un ) do var barracks ;
5209: LD_INT 0
5211: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 130
5219: PPUSH
5220: LD_INT 17
5222: PPUSH
5223: CALL_OW 428
5227: PUSH
5228: LD_INT 138
5230: PPUSH
5231: LD_INT 22
5233: PPUSH
5234: CALL_OW 428
5238: PUSH
5239: LD_INT 123
5241: PPUSH
5242: LD_INT 17
5244: PPUSH
5245: CALL_OW 428
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: IN
5255: IFFALSE 5279
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5257: LD_VAR 0 2
5261: PPUSH
5262: LD_INT 135
5264: PPUSH
5265: LD_INT 31
5267: PPUSH
5268: CALL_OW 428
5272: PPUSH
5273: CALL_OW 180
// exit ;
5277: GO 5553
// end ; if b = HexInfo ( 135 , 31 ) then
5279: LD_VAR 0 1
5283: PUSH
5284: LD_INT 135
5286: PPUSH
5287: LD_INT 31
5289: PPUSH
5290: CALL_OW 428
5294: EQUAL
5295: IFFALSE 5367
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5297: LD_VAR 0 2
5301: PPUSH
5302: LD_INT 106
5304: PPUSH
5305: LD_INT 51
5307: PPUSH
5308: CALL_OW 428
5312: PPUSH
5313: CALL_OW 180
// if not explodeFirstDepot then
5317: LD_EXP 12
5321: NOT
5322: IFFALSE 5365
// begin explodeFirstDepot := true ;
5324: LD_ADDR_EXP 12
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5332: LD_INT 525
5334: PPUSH
5335: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5339: LD_INT 127
5341: PPUSH
5342: LD_INT 27
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5352: LD_INT 125
5354: PPUSH
5355: LD_INT 29
5357: PPUSH
5358: LD_INT 1
5360: PPUSH
5361: CALL_OW 453
// end ; exit ;
5365: GO 5553
// end ; if b = HexInfo ( 106 , 51 ) then
5367: LD_VAR 0 1
5371: PUSH
5372: LD_INT 106
5374: PPUSH
5375: LD_INT 51
5377: PPUSH
5378: CALL_OW 428
5382: EQUAL
5383: IFFALSE 5483
// begin AddComMoveXY ( un , 106 , 93 ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: LD_INT 106
5392: PPUSH
5393: LD_INT 93
5395: PPUSH
5396: CALL_OW 171
// if not explodeSecondDepot then
5400: LD_EXP 13
5404: NOT
5405: IFFALSE 5481
// begin explodeSecondDepot := true ;
5407: LD_ADDR_EXP 13
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5415: LD_INT 420
5417: PPUSH
5418: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5422: LD_INT 111
5424: PPUSH
5425: LD_INT 75
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5435: LD_INT 111
5437: PPUSH
5438: LD_INT 75
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5448: LD_INT 108
5450: PPUSH
5451: LD_INT 69
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 453
// wait ( 0 0$2 ) ;
5461: LD_INT 70
5463: PPUSH
5464: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5468: LD_INT 94
5470: PPUSH
5471: LD_INT 65
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 453
// end ; exit ;
5481: GO 5553
// end ; if GetBType ( b ) = b_bunker then
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 266
5492: PUSH
5493: LD_INT 32
5495: EQUAL
5496: IFFALSE 5553
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5498: LD_ADDR_VAR 0 3
5502: PUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 5
5510: PPUSH
5511: CALL 1008 0 2
5515: ST_TO_ADDR
// if barracks then
5516: LD_VAR 0 3
5520: IFFALSE 5538
// AddComEnterUnit ( un , barracks ) else
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_VAR 0 3
5531: PPUSH
5532: CALL_OW 180
5536: GO 5553
// AddComMoveXY ( un , 116 , 110 ) ;
5538: LD_VAR 0 2
5542: PPUSH
5543: LD_INT 116
5545: PPUSH
5546: LD_INT 110
5548: PPUSH
5549: CALL_OW 171
// end ; end ;
5553: PPOPN 3
5555: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_EXP 23
5565: EQUAL
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 3
5574: PUSH
5575: LD_INT 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: IN
5582: AND
5583: IFFALSE 5614
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5585: LD_ADDR_EXP 8
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 250
5599: PUSH
5600: LD_VAR 0 1
5604: PPUSH
5605: CALL_OW 251
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
// end ; end_of_file
5614: PPOPN 3
5616: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5617: LD_INT 0
5619: PPUSH
5620: PPUSH
5621: PPUSH
5622: PPUSH
5623: PPUSH
5624: PPUSH
// InGameOn ;
5625: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5629: LD_INT 5
5631: PPUSH
5632: LD_INT 2
5634: PPUSH
5635: CALL_OW 343
// music_nat := 4 ;
5639: LD_ADDR_OWVAR 71
5643: PUSH
5644: LD_INT 4
5646: ST_TO_ADDR
// music_class := music_combat ;
5647: LD_ADDR_OWVAR 72
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5655: LD_INT 133
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: LD_INT 2
5663: PPUSH
5664: LD_INT 10
5666: PPUSH
5667: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5671: LD_INT 133
5673: PPUSH
5674: LD_INT 2
5676: PPUSH
5677: CALL_OW 86
// wait ( 0 0$1 ) ;
5681: LD_INT 35
5683: PPUSH
5684: CALL_OW 67
// uc_side := 6 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 6
5695: ST_TO_ADDR
// uc_nation := 3 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 3
5703: ST_TO_ADDR
// rutmp := [ ] ;
5704: LD_ADDR_VAR 0 6
5708: PUSH
5709: EMPTY
5710: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5711: LD_INT 6
5713: PPUSH
5714: LD_INT 3
5716: PPUSH
5717: LD_INT 21
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 44
5728: PPUSH
5729: LD_INT 66
5731: PPUSH
5732: CALL 336 0 7
// veh := CreateVehicle ;
5736: LD_ADDR_VAR 0 4
5740: PUSH
5741: CALL_OW 45
5745: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5746: LD_VAR 0 4
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 49
// SetLives ( veh , 500 ) ;
5773: LD_VAR 0 4
5777: PPUSH
5778: LD_INT 500
5780: PPUSH
5781: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PPUSH
5791: LD_INT 3
5793: PPUSH
5794: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5798: CALL_OW 44
5802: PPUSH
5803: LD_VAR 0 4
5807: PPUSH
5808: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 133
5819: PPUSH
5820: LD_INT 11
5822: PPUSH
5823: CALL_OW 111
// rutmp := [ veh ] ;
5827: LD_ADDR_VAR 0 6
5831: PUSH
5832: LD_VAR 0 4
5836: PUSH
5837: EMPTY
5838: LIST
5839: ST_TO_ADDR
// for i := 1 to 4 do
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: DOUBLE
5846: LD_INT 1
5848: DEC
5849: ST_TO_ADDR
5850: LD_INT 4
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5961
// begin PrepareHuman ( false , i , 2 ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: CALL_OW 380
// un := CreateHuman ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL_OW 44
5880: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5893: LD_VAR 0 3
5897: PPUSH
5898: LD_INT 8
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5908: LD_ADDR_VAR 0 6
5912: PUSH
5913: LD_VAR 0 6
5917: PPUSH
5918: LD_VAR 0 6
5922: PUSH
5923: LD_INT 1
5925: PLUS
5926: PPUSH
5927: LD_VAR 0 3
5931: PPUSH
5932: CALL_OW 1
5936: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5937: LD_VAR 0 3
5941: PPUSH
5942: LD_INT 133
5944: PPUSH
5945: LD_INT 11
5947: PPUSH
5948: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5952: LD_INT 18
5954: PPUSH
5955: CALL_OW 67
// end ;
5959: GO 5853
5961: POP
5962: POP
// for i in rutmp do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_VAR 0 6
5972: PUSH
5973: FOR_IN
5974: IFFALSE 6023
// begin AddComMoveXY ( i , 99 , 65 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 99
5983: PPUSH
5984: LD_INT 65
5986: PPUSH
5987: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 76
5998: PPUSH
5999: LD_INT 108
6001: PPUSH
6002: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 92
6013: PPUSH
6014: LD_INT 176
6016: PPUSH
6017: CALL_OW 171
// end ;
6021: GO 5973
6023: POP
6024: POP
// wait ( 0 0$10 ) ;
6025: LD_INT 350
6027: PPUSH
6028: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6032: LD_ADDR_VAR 0 5
6036: PUSH
6037: LD_EXP 18
6041: PUSH
6042: LD_EXP 19
6046: PUSH
6047: LD_EXP 20
6051: PUSH
6052: LD_EXP 21
6056: PUSH
6057: LD_EXP 22
6061: PUSH
6062: LD_EXP 23
6066: PUSH
6067: LD_EXP 24
6071: PUSH
6072: LD_EXP 25
6076: PUSH
6077: LD_EXP 27
6081: PUSH
6082: LD_EXP 28
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_EXP 29
6103: UNION
6104: ST_TO_ADDR
// tmp := tmp diff 0 ;
6105: LD_ADDR_VAR 0 5
6109: PUSH
6110: LD_VAR 0 5
6114: PUSH
6115: LD_INT 0
6117: DIFF
6118: ST_TO_ADDR
// for i in heikeVehicles do
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_EXP 30
6128: PUSH
6129: FOR_IN
6130: IFFALSE 6396
// begin if not tmp then
6132: LD_VAR 0 5
6136: NOT
6137: IFFALSE 6141
// continue ;
6139: GO 6129
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6141: LD_INT 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PUSH
6149: LD_INT 5
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: ARRAY
6161: PPUSH
6162: LD_VAR 0 2
6166: PUSH
6167: LD_INT 2
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 3
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 2
6184: PUSH
6185: LD_INT 4
6187: ARRAY
6188: PPUSH
6189: LD_INT 34
6191: PPUSH
6192: CALL 336 0 7
// veh := CreateVehicle ;
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: CALL_OW 45
6205: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6206: LD_VAR 0 2
6210: PUSH
6211: LD_INT 4
6213: ARRAY
6214: PUSH
6215: LD_INT 51
6217: PUSH
6218: LD_INT 32
6220: PUSH
6221: LD_INT 12
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: IN
6229: IFFALSE 6309
// begin if i [ 7 ] [ 1 ] then
6231: LD_VAR 0 2
6235: PUSH
6236: LD_INT 7
6238: ARRAY
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: IFFALSE 6270
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6245: LD_VAR 0 4
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: LD_VAR 0 2
6257: PUSH
6258: LD_INT 7
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PPUSH
6266: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6270: LD_VAR 0 2
6274: PUSH
6275: LD_INT 7
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: IFFALSE 6309
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6284: LD_VAR 0 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_INT 7
6299: ARRAY
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PPUSH
6305: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6309: LD_VAR 0 4
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6321: LD_VAR 0 4
6325: PPUSH
6326: LD_INT 8
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6336: LD_VAR 0 5
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 3
6371: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 133
6379: PPUSH
6380: LD_INT 7
6382: PPUSH
6383: CALL_OW 114
// wait ( 0 0$1 ) ;
6387: LD_INT 35
6389: PPUSH
6390: CALL_OW 67
// end ;
6394: GO 6129
6396: POP
6397: POP
// if tmp then
6398: LD_VAR 0 5
6402: IFFALSE 6458
// for i in tmp do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: LD_VAR 0 5
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6456
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 10
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 146
6439: PPUSH
6440: LD_INT 7
6442: PPUSH
6443: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6447: LD_INT 18
6449: PPUSH
6450: CALL_OW 67
// end ;
6454: GO 6414
6456: POP
6457: POP
// if heikeApes then
6458: LD_EXP 31
6462: IFFALSE 6518
// for i in heikeApes do
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_EXP 31
6473: PUSH
6474: FOR_IN
6475: IFFALSE 6516
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 10
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6492: LD_VAR 0 2
6496: PPUSH
6497: LD_INT 146
6499: PPUSH
6500: LD_INT 7
6502: PPUSH
6503: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6507: LD_INT 18
6509: PPUSH
6510: CALL_OW 67
// end ;
6514: GO 6474
6516: POP
6517: POP
// DialogueOn ;
6518: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6522: LD_EXP 18
6526: PPUSH
6527: LD_STRING DH-outpost-a-1
6529: PPUSH
6530: CALL_OW 88
// DialogueOff ;
6534: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6538: LD_INT 133
6540: PPUSH
6541: LD_INT 2
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 331
// InGameOff ;
6551: CALL_OW 9
// music_nat := 0 ;
6555: LD_ADDR_OWVAR 71
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// music_class := 0 ;
6563: LD_ADDR_OWVAR 72
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6571: LD_STRING Outposts
6573: PPUSH
6574: CALL_OW 337
// SaveForQuickRestart ;
6578: CALL_OW 22
// end ;
6582: LD_VAR 0 1
6586: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6587: LD_INT 22
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 91
6599: PUSH
6600: LD_EXP 21
6604: PUSH
6605: LD_INT 20
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: PUSH
6622: LD_EXP 3
6626: AND
6627: PUSH
6628: LD_EXP 21
6632: PPUSH
6633: CALL_OW 302
6637: AND
6638: IFFALSE 6885
6640: GO 6642
6642: DISABLE
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin IbrahimBetrayal ;
6649: CALL 6888 0 0
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6660: LD_EXP 21
6664: PPUSH
6665: CALL_OW 301
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 91
6682: PUSH
6683: LD_EXP 21
6687: PUSH
6688: LD_INT 6
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PUSH
6705: LD_EXP 21
6709: PPUSH
6710: CALL_OW 302
6714: AND
6715: OR
6716: IFFALSE 6653
// if IsDead ( Ibrahim ) then
6718: LD_EXP 21
6722: PPUSH
6723: CALL_OW 301
6727: IFFALSE 6731
// exit ;
6729: GO 6885
// x := GetX ( Ibrahim ) ;
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: LD_EXP 21
6740: PPUSH
6741: CALL_OW 250
6745: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 21
6755: PPUSH
6756: CALL_OW 251
6760: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_EXP 21
6770: PPUSH
6771: CALL_OW 254
6775: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: LD_EXP 21
6785: PPUSH
6786: CALL_OW 256
6790: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6791: LD_EXP 21
6795: PPUSH
6796: CALL_OW 64
// uc_side := 2 ;
6800: LD_ADDR_OWVAR 20
6804: PUSH
6805: LD_INT 2
6807: ST_TO_ADDR
// uc_nation := 2 ;
6808: LD_ADDR_OWVAR 21
6812: PUSH
6813: LD_INT 2
6815: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6816: LD_ADDR_EXP 21
6820: PUSH
6821: LD_STRING Ibrahim
6823: PPUSH
6824: LD_INT 0
6826: PPUSH
6827: LD_STRING 
6829: PPUSH
6830: CALL 29919 0 3
6834: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6835: LD_EXP 21
6839: PPUSH
6840: LD_VAR 0 3
6844: PPUSH
6845: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6849: LD_EXP 21
6853: PPUSH
6854: LD_VAR 0 1
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_INT 0
6866: PPUSH
6867: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6871: LD_EXP 21
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 234
// end ;
6885: PPOPN 4
6887: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6893: LD_INT 122
6895: PPUSH
6896: LD_INT 77
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 6
6904: NEG
6905: PPUSH
6906: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6910: LD_EXP 21
6914: PPUSH
6915: LD_INT 123
6917: PPUSH
6918: LD_INT 79
6920: PPUSH
6921: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6925: LD_EXP 21
6929: PPUSH
6930: LD_INT 125
6932: PPUSH
6933: LD_INT 82
6935: PPUSH
6936: CALL_OW 178
// wait ( 0 0$2 ) ;
6940: LD_INT 70
6942: PPUSH
6943: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6947: LD_EXP 42
6951: PPUSH
6952: LD_EXP 21
6956: PPUSH
6957: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6961: LD_EXP 42
6965: PPUSH
6966: LD_STRING DRum-outpost-b-3
6968: PPUSH
6969: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_INT 125
6980: PPUSH
6981: LD_INT 76
6983: PPUSH
6984: CALL_OW 428
6988: PUSH
6989: LD_INT 125
6991: PPUSH
6992: LD_INT 79
6994: PPUSH
6995: CALL_OW 428
6999: PUSH
7000: LD_INT 125
7002: PPUSH
7003: LD_INT 82
7005: PPUSH
7006: CALL_OW 428
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
// for i in tmp do
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_VAR 0 3
7025: PUSH
7026: FOR_IN
7027: IFFALSE 7043
// SetLives ( i , 200 ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 200
7036: PPUSH
7037: CALL_OW 234
7041: GO 7026
7043: POP
7044: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7045: LD_EXP 21
7049: PPUSH
7050: LD_STRING DI-outpost-b-4
7052: PPUSH
7053: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7057: LD_EXP 21
7061: PPUSH
7062: LD_INT 5
7064: PPUSH
7065: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7069: LD_EXP 21
7073: PUSH
7074: LD_EXP 42
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PPUSH
7083: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7087: LD_INT 122
7089: PPUSH
7090: LD_INT 77
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: CALL_OW 331
// if Givi then
7100: LD_EXP 19
7104: IFFALSE 7120
// Say ( Givi , DG-1-outpost-b-5 ) else
7106: LD_EXP 19
7110: PPUSH
7111: LD_STRING DG-1-outpost-b-5
7113: PPUSH
7114: CALL_OW 88
7118: GO 7185
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7120: LD_EXP 29
7124: PPUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 72
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: PPUSH
7144: LD_STRING DArf-outpost-b-a-5
7146: PPUSH
7147: CALL_OW 88
7151: NOT
7152: IFFALSE 7185
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7154: LD_EXP 29
7158: PPUSH
7159: LD_INT 26
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 72
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PPUSH
7178: LD_STRING DArm-outpost-b-a-5
7180: PPUSH
7181: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7192: LD_EXP 21
7196: PPUSH
7197: CALL_OW 301
7201: PUSH
7202: LD_EXP 18
7206: PPUSH
7207: LD_EXP 21
7211: PPUSH
7212: CALL_OW 296
7216: PUSH
7217: LD_INT 6
7219: LESS
7220: PUSH
7221: LD_EXP 21
7225: PPUSH
7226: CALL_OW 302
7230: AND
7231: OR
7232: IFFALSE 7185
// if IsDead ( Ibrahim ) then
7234: LD_EXP 21
7238: PPUSH
7239: CALL_OW 301
7243: IFFALSE 7259
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7245: LD_EXP 18
7249: PPUSH
7250: LD_STRING DH-ibrahimdead-1
7252: PPUSH
7253: CALL_OW 88
// exit ;
7257: GO 7300
// end ; CenterNowOnUnits ( Ibrahim ) ;
7259: LD_EXP 21
7263: PPUSH
7264: CALL_OW 87
// DialogueOn ;
7268: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7272: LD_EXP 21
7276: PPUSH
7277: LD_STRING DI-ibrahimlives-1
7279: PPUSH
7280: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7284: LD_EXP 18
7288: PPUSH
7289: LD_STRING DH-Ibrahimlives-2
7291: PPUSH
7292: CALL_OW 88
// DialogueOff ;
7296: CALL_OW 7
// end ;
7300: LD_VAR 0 1
7304: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7305: LD_INT 11
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 70
7322: PUSH
7323: LD_OWVAR 1
7327: PUSH
7328: LD_INT 18900
7330: PUSH
7331: LD_INT 16800
7333: PUSH
7334: LD_INT 16800
7336: PUSH
7337: LD_INT 15750
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: GREATEREQUAL
7352: OR
7353: IFFALSE 7861
7355: GO 7357
7357: DISABLE
// begin outerAreaAchived := true ;
7358: LD_ADDR_EXP 15
7362: PUSH
7363: LD_INT 1
7365: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7366: LD_INT 700
7368: PPUSH
7369: CALL_OW 67
// DialogueOn ;
7373: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7377: LD_EXP 26
7381: PPUSH
7382: LD_STRING DShar-radio-1
7384: PPUSH
7385: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7389: LD_EXP 26
7393: PPUSH
7394: LD_STRING DShar-radio-2
7396: PPUSH
7397: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7401: LD_EXP 18
7405: PPUSH
7406: LD_STRING DH-radio-2
7408: PPUSH
7409: CALL_OW 88
// DialogueOff ;
7413: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7417: LD_STRING Gaidar
7419: PPUSH
7420: CALL_OW 337
// if Difficulty < 3 then
7424: LD_OWVAR 67
7428: PUSH
7429: LD_INT 3
7431: LESS
7432: IFFALSE 7498
// begin DialogueOn ;
7434: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7438: LD_INT 11
7440: PPUSH
7441: LD_INT 14
7443: PPUSH
7444: LD_INT 2
7446: PPUSH
7447: LD_INT 6
7449: NEG
7450: PPUSH
7451: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7455: LD_INT 11
7457: PPUSH
7458: LD_INT 14
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7468: LD_INT 11
7470: PPUSH
7471: LD_INT 14
7473: PPUSH
7474: CALL_OW 84
// dwait ( 0 0$1 ) ;
7478: LD_INT 35
7480: PPUSH
7481: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7485: LD_EXP 18
7489: PPUSH
7490: CALL_OW 87
// DialogueOff ;
7494: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7498: LD_INT 1050
7500: PUSH
7501: LD_INT 350
7503: PPUSH
7504: LD_INT 525
7506: PPUSH
7507: CALL_OW 12
7511: PUSH
7512: LD_OWVAR 67
7516: MUL
7517: PLUS
7518: PPUSH
7519: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 428
7540: PUSH
7541: LD_INT 0
7543: EQUAL
7544: IFFALSE 7523
// SetDir ( Gaidar , 2 ) ;
7546: LD_EXP 35
7550: PPUSH
7551: LD_INT 2
7553: PPUSH
7554: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7558: LD_EXP 35
7562: PPUSH
7563: LD_INT 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: LD_INT 0
7571: PPUSH
7572: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7576: LD_EXP 35
7580: PPUSH
7581: LD_INT 19
7583: PPUSH
7584: LD_INT 24
7586: PPUSH
7587: CALL_OW 111
// if Difficulty < 3 then
7591: LD_OWVAR 67
7595: PUSH
7596: LD_INT 3
7598: LESS
7599: IFFALSE 7638
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7601: LD_INT 11
7603: PPUSH
7604: LD_INT 14
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: LD_INT 6
7612: NEG
7613: PPUSH
7614: CALL_OW 330
// wait ( 0 0$2 ) ;
7618: LD_INT 70
7620: PPUSH
7621: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7625: LD_INT 11
7627: PPUSH
7628: LD_INT 14
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7638: LD_EXP 35
7642: PPUSH
7643: LD_INT 210
7645: PPUSH
7646: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7650: LD_EXP 35
7654: PPUSH
7655: LD_INT 38
7657: PPUSH
7658: LD_INT 47
7660: PPUSH
7661: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7665: LD_EXP 35
7669: PPUSH
7670: LD_INT 32
7672: PPUSH
7673: LD_INT 59
7675: PPUSH
7676: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7680: LD_EXP 35
7684: PPUSH
7685: LD_INT 350
7687: PPUSH
7688: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7692: LD_EXP 35
7696: PPUSH
7697: LD_INT 62
7699: PPUSH
7700: LD_INT 116
7702: PPUSH
7703: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7707: LD_EXP 35
7711: PPUSH
7712: LD_INT 92
7714: PPUSH
7715: LD_INT 177
7717: PPUSH
7718: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7729: LD_EXP 35
7733: PPUSH
7734: CALL_OW 301
7738: PUSH
7739: LD_EXP 35
7743: PPUSH
7744: LD_INT 92
7746: PPUSH
7747: LD_INT 177
7749: PPUSH
7750: CALL_OW 307
7754: OR
7755: IFFALSE 7722
// if IsAt ( Gaidar , 92 , 177 ) then
7757: LD_EXP 35
7761: PPUSH
7762: LD_INT 92
7764: PPUSH
7765: LD_INT 177
7767: PPUSH
7768: CALL_OW 307
7772: IFFALSE 7839
// begin DialogueOn ;
7774: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7778: LD_INT 92
7780: PPUSH
7781: LD_INT 177
7783: PPUSH
7784: LD_INT 2
7786: PPUSH
7787: LD_INT 3
7789: NEG
7790: PPUSH
7791: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7795: LD_EXP 35
7799: PPUSH
7800: CALL_OW 87
// dwait ( 0 0$2 ) ;
7804: LD_INT 70
7806: PPUSH
7807: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7811: LD_INT 92
7813: PPUSH
7814: LD_INT 177
7816: PPUSH
7817: LD_INT 2
7819: PPUSH
7820: CALL_OW 331
// DialogueOff ;
7824: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7828: LD_EXP 35
7832: PPUSH
7833: CALL_OW 64
// exit ;
7837: GO 7861
// end ; gaidarKilled := true ;
7839: LD_ADDR_EXP 14
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7847: LD_STRING GaidarKilled
7849: PPUSH
7850: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7854: LD_STRING ACH_COMMISAR
7856: PPUSH
7857: CALL_OW 543
// end ;
7861: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7862: LD_INT 2
7864: PPUSH
7865: LD_EXP 35
7869: PPUSH
7870: CALL_OW 292
7874: IFFALSE 7891
7876: GO 7878
7878: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7879: LD_EXP 35
7883: PPUSH
7884: LD_STRING DT-objective-1
7886: PPUSH
7887: CALL_OW 88
7891: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7892: LD_INT 22
7894: PUSH
7895: LD_INT 2
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 2
7904: PUSH
7905: LD_INT 95
7907: PUSH
7908: LD_INT 5
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 95
7917: PUSH
7918: LD_INT 6
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 95
7927: PUSH
7928: LD_INT 7
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PPUSH
7945: CALL_OW 69
7949: IFFALSE 7986
7951: GO 7953
7953: DISABLE
// begin DialogueOn ;
7954: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7958: LD_EXP 18
7962: PPUSH
7963: LD_STRING DH-outpost-last-1
7965: PPUSH
7966: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7970: LD_EXP 34
7974: PPUSH
7975: LD_STRING DB-outpost-last-2
7977: PPUSH
7978: CALL_OW 94
// DialogueOff ;
7982: CALL_OW 7
// end ;
7986: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7987: LD_INT 200
7989: PPUSH
7990: CALL_OW 256
7994: PUSH
7995: LD_INT 999
7997: LESS
7998: PUSH
7999: LD_INT 200
8001: PPUSH
8002: CALL_OW 255
8006: PUSH
8007: LD_INT 2
8009: EQUAL
8010: OR
8011: IFFALSE 8184
8013: GO 8015
8015: DISABLE
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
// begin if not earlyEscape then
8020: LD_EXP 16
8024: NOT
8025: IFFALSE 8051
// begin SayRadio ( Burlak , DB-end-1 ) ;
8027: LD_EXP 34
8031: PPUSH
8032: LD_STRING DB-end-1
8034: PPUSH
8035: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8039: LD_EXP 18
8043: PPUSH
8044: LD_STRING DH-end-2
8046: PPUSH
8047: CALL_OW 88
// end ; if tick <= 15 15$00 then
8051: LD_OWVAR 1
8055: PUSH
8056: LD_INT 31500
8058: LESSEQUAL
8059: IFFALSE 8068
// SetAchievement ( ACH_FIST ) ;
8061: LD_STRING ACH_FIST
8063: PPUSH
8064: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8068: LD_ADDR_VAR 0 2
8072: PUSH
8073: LD_INT 22
8075: PUSH
8076: LD_INT 3
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: LD_INT 21
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if not tmp then
8109: LD_VAR 0 2
8113: NOT
8114: IFFALSE 8118
// exit ;
8116: GO 8184
// for i in tmp do
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 2
8127: PUSH
8128: FOR_IN
8129: IFFALSE 8182
// begin SetTag ( i , tEscape ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: LD_EXP 17
8140: PPUSH
8141: CALL_OW 109
// if IsInUnit ( i ) then
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 310
8154: IFFALSE 8165
// ComExitBuilding ( i ) ;
8156: LD_VAR 0 1
8160: PPUSH
8161: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 92
8172: PPUSH
8173: LD_INT 177
8175: PPUSH
8176: CALL_OW 171
// end ;
8180: GO 8128
8182: POP
8183: POP
// end ;
8184: PPOPN 2
8186: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8187: LD_INT 4
8189: PPUSH
8190: LD_INT 22
8192: PUSH
8193: LD_INT 2
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 70
8204: PUSH
8205: LD_EXP 15
8209: NOT
8210: AND
8211: PUSH
8212: LD_EXP 27
8216: PPUSH
8217: CALL_OW 302
8221: AND
8222: IFFALSE 8462
8224: GO 8226
8226: DISABLE
// begin DialogueOn ;
8227: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8231: LD_INT 111
8233: PPUSH
8234: LD_INT 54
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 16
8242: NEG
8243: PPUSH
8244: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8248: LD_INT 111
8250: PPUSH
8251: LD_INT 53
8253: PPUSH
8254: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8258: LD_INT 10
8260: PPUSH
8261: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8265: LD_EXP 27
8269: PPUSH
8270: LD_STRING DKs-Hannibal-1
8272: PPUSH
8273: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8277: LD_EXP 27
8281: PPUSH
8282: LD_STRING DKs-Hannibal-2
8284: PPUSH
8285: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8289: LD_EXP 27
8293: PPUSH
8294: LD_STRING DKs-Hannibal-3
8296: PPUSH
8297: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8301: LD_EXP 27
8305: PPUSH
8306: LD_STRING DKs-Hannibal-4
8308: PPUSH
8309: CALL_OW 88
// dwait ( 0 0$1 ) ;
8313: LD_INT 35
8315: PPUSH
8316: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8320: LD_INT 111
8322: PPUSH
8323: LD_INT 54
8325: PPUSH
8326: LD_INT 2
8328: PPUSH
8329: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8333: LD_INT 173
8335: PPUSH
8336: LD_INT 76
8338: PPUSH
8339: LD_INT 2
8341: PPUSH
8342: LD_INT 12
8344: NEG
8345: PPUSH
8346: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8350: LD_INT 173
8352: PPUSH
8353: LD_INT 76
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8363: LD_INT 173
8365: PPUSH
8366: LD_INT 76
8368: PPUSH
8369: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8373: LD_EXP 27
8377: PPUSH
8378: LD_STRING DKs-Hannibal-5
8380: PPUSH
8381: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8385: LD_EXP 22
8389: PUSH
8390: LD_INT 22
8392: PUSH
8393: LD_INT 2
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 34
8402: PUSH
8403: LD_INT 26
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: NOT
8419: AND
8420: IFFALSE 8458
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8422: LD_EXP 22
8426: PPUSH
8427: LD_STRING DKam-Hannibal-a-6
8429: PPUSH
8430: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8434: LD_EXP 22
8438: PPUSH
8439: LD_STRING DKam-Hannibal-a-7
8441: PPUSH
8442: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8446: LD_EXP 19
8450: PPUSH
8451: LD_STRING DG-Hannibal-a-8
8453: PPUSH
8454: CALL_OW 88
// end ; DialogueOff ;
8458: CALL_OW 7
// end ;
8462: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8463: LD_INT 225
8465: PPUSH
8466: CALL_OW 302
8470: PUSH
8471: LD_INT 200
8473: PPUSH
8474: CALL_OW 302
8478: AND
8479: PUSH
8480: LD_INT 12
8482: PPUSH
8483: LD_INT 21
8485: PUSH
8486: LD_INT 3
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: PUSH
8498: LD_INT 2
8500: GREATER
8501: AND
8502: PUSH
8503: LD_INT 13
8505: PPUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PPUSH
8516: CALL_OW 70
8520: PUSH
8521: LD_INT 3
8523: GREATER
8524: AND
8525: IFFALSE 8538
8527: GO 8529
8529: DISABLE
// hannibalPath := true ;
8530: LD_ADDR_EXP 9
8534: PUSH
8535: LD_INT 1
8537: ST_TO_ADDR
8538: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8539: LD_EXP 9
8543: PUSH
8544: LD_INT 6
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 70
8561: AND
8562: IFFALSE 8907
8564: GO 8566
8566: DISABLE
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
8571: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 6
8579: PPUSH
8580: LD_INT 22
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 70
8594: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8595: LD_ADDR_VAR 0 3
8599: PUSH
8600: LD_VAR 0 2
8604: PPUSH
8605: LD_INT 34
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 72
8619: PUSH
8620: LD_INT 0
8622: GREATER
8623: ST_TO_ADDR
// DialogueOn ;
8624: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8628: LD_EXP 18
8632: PPUSH
8633: LD_STRING DH-Cleverattack-1
8635: PPUSH
8636: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8640: LD_EXP 18
8644: PPUSH
8645: LD_STRING DH-Cleverattack-2
8647: PPUSH
8648: CALL_OW 88
// if hasFlameThrower then
8652: LD_VAR 0 3
8656: IFFALSE 8684
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8658: LD_EXP 34
8662: PPUSH
8663: LD_STRING DB-Cleverattack-3
8665: PPUSH
8666: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8670: LD_EXP 18
8674: PPUSH
8675: LD_STRING DH-Cleverattack-4
8677: PPUSH
8678: CALL_OW 88
// end else
8682: GO 8708
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8684: LD_EXP 34
8688: PPUSH
8689: LD_STRING DB-Cleverattack-a-3
8691: PPUSH
8692: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8696: LD_EXP 18
8700: PPUSH
8701: LD_STRING DH-Cleverattack-a-4
8703: PPUSH
8704: CALL_OW 88
// end ; DialogueOff ;
8708: CALL_OW 7
// if not hasFlameThrower then
8712: LD_VAR 0 3
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 8907
// earlyEscape := true ;
8721: LD_ADDR_EXP 16
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8729: LD_INT 140
8731: PPUSH
8732: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8736: LD_ADDR_VAR 0 2
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_INT 3
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: LD_INT 25
8756: PUSH
8757: LD_INT 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 25
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 25
8776: PUSH
8777: LD_INT 4
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PPUSH
8794: CALL_OW 69
8798: PUSH
8799: LD_EXP 21
8803: PUSH
8804: LD_EXP 36
8808: PUSH
8809: LD_EXP 35
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: DIFF
8819: ST_TO_ADDR
// for i in tmp do
8820: LD_ADDR_VAR 0 1
8824: PUSH
8825: LD_VAR 0 2
8829: PUSH
8830: FOR_IN
8831: IFFALSE 8905
// begin if Prob ( 40 + 10 * Difficulty ) then
8833: LD_INT 40
8835: PUSH
8836: LD_INT 10
8838: PUSH
8839: LD_OWVAR 67
8843: MUL
8844: PLUS
8845: PPUSH
8846: CALL_OW 13
8850: IFFALSE 8854
// continue ;
8852: GO 8830
// SetTag ( i , tEscape ) ;
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_EXP 17
8863: PPUSH
8864: CALL_OW 109
// if IsInUnit ( i ) then
8868: LD_VAR 0 1
8872: PPUSH
8873: CALL_OW 310
8877: IFFALSE 8888
// ComExitBuilding ( i ) ;
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8888: LD_VAR 0 1
8892: PPUSH
8893: LD_INT 92
8895: PPUSH
8896: LD_INT 177
8898: PPUSH
8899: CALL_OW 171
// end ;
8903: GO 8830
8905: POP
8906: POP
// end ;
8907: PPOPN 3
8909: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8910: LD_INT 9
8912: PPUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 22
8918: PUSH
8919: LD_INT 3
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 22
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 70
8945: IFFALSE 9043
8947: GO 8949
8949: DISABLE
8950: LD_INT 0
8952: PPUSH
// begin enable ;
8953: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8954: LD_ADDR_VAR 0 1
8958: PUSH
8959: LD_INT 9
8961: PPUSH
8962: LD_INT 2
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 3
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 22
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 70
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9041
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8998: LD_VAR 0 1
9002: PPUSH
9003: CALL_OW 110
9007: PUSH
9008: LD_EXP 17
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 255
9023: PUSH
9024: LD_INT 6
9026: EQUAL
9027: OR
9028: IFFALSE 9039
// RemoveUnit ( i ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 64
9039: GO 8995
9041: POP
9042: POP
// end ;
9043: PPOPN 1
9045: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9046: LD_EXP 23
9050: PUSH
9051: LD_EXP 23
9055: PPUSH
9056: CALL_OW 256
9060: PUSH
9061: LD_INT 3
9063: LESS
9064: AND
9065: IFFALSE 9111
9067: GO 9069
9069: DISABLE
// begin DialogueOn ;
9070: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9074: LD_EXP 23
9078: PPUSH
9079: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9083: LD_EXP 23
9087: PPUSH
9088: LD_STRING DK-Kkilled-1
9090: PPUSH
9091: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_STRING DH-Kkilled-2
9102: PPUSH
9103: CALL_OW 88
// DialogueOff ;
9107: CALL_OW 7
// end ;
9111: END
// every 0 0$1 trigger kaiaKilledByRussian do
9112: LD_EXP 8
9116: IFFALSE 9133
9118: GO 9120
9120: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9121: LD_EXP 18
9125: PPUSH
9126: LD_STRING DH-Kkilled-3
9128: PPUSH
9129: CALL_OW 88
9133: END
// every 0 0$1 trigger tick >= 24 24$00 do
9134: LD_OWVAR 1
9138: PUSH
9139: LD_INT 50400
9141: GREATEREQUAL
9142: IFFALSE 9179
9144: GO 9146
9146: DISABLE
// begin DialogueOn ;
9147: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9151: LD_EXP 26
9155: PPUSH
9156: LD_STRING DShar-slow-1
9158: PPUSH
9159: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9163: LD_EXP 26
9167: PPUSH
9168: LD_STRING DShar-slow-2
9170: PPUSH
9171: CALL_OW 94
// DialogueOff ;
9175: CALL_OW 7
// end ;
9179: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9180: LD_OWVAR 1
9184: PUSH
9185: LD_INT 84000
9187: PUSH
9188: LD_INT 75600
9190: PUSH
9191: LD_INT 67200
9193: PUSH
9194: LD_INT 63000
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_OWVAR 67
9207: ARRAY
9208: GREATEREQUAL
9209: IFFALSE 9253
9211: GO 9213
9213: DISABLE
// begin DialogueOn ;
9214: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9218: LD_EXP 26
9222: PPUSH
9223: LD_STRING DShar-fail-1
9225: PPUSH
9226: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9230: LD_EXP 26
9234: PPUSH
9235: LD_STRING DShar-fail-2
9237: PPUSH
9238: CALL_OW 94
// DialogueOff ;
9242: CALL_OW 7
// YouLost ( Time ) ;
9246: LD_STRING Time
9248: PPUSH
9249: CALL_OW 104
// end ;
9253: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9254: LD_INT 22
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 30
9269: PUSH
9270: LD_INT 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 30
9279: PUSH
9280: LD_INT 0
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PPUSH
9296: CALL_OW 69
9300: PUSH
9301: LD_INT 0
9303: EQUAL
9304: IFFALSE 9815
9306: GO 9308
9308: DISABLE
9309: LD_INT 0
9311: PPUSH
// begin if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9312: LD_OWVAR 1
9316: PUSH
9317: LD_EXP 5
9321: PLUS
9322: PUSH
9323: LD_INT 178500
9325: PUSH
9326: LD_INT 157500
9328: PUSH
9329: LD_INT 136500
9331: PUSH
9332: LD_INT 126000
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: PUSH
9341: LD_OWVAR 67
9345: ARRAY
9346: LESSEQUAL
9347: IFFALSE 9361
// AddMedal ( med1 , 1 ) else
9349: LD_STRING med1
9351: PPUSH
9352: LD_INT 1
9354: PPUSH
9355: CALL_OW 101
9359: GO 9372
// AddMedal ( med1 , - 1 ) ;
9361: LD_STRING med1
9363: PPUSH
9364: LD_INT 1
9366: NEG
9367: PPUSH
9368: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9372: LD_EXP 7
9376: PUSH
9377: LD_INT 3
9379: GREATEREQUAL
9380: PUSH
9381: LD_EXP 11
9385: MUL
9386: PUSH
9387: LD_EXP 9
9391: MUL
9392: PUSH
9393: LD_EXP 6
9397: PUSH
9398: LD_INT 6
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: LD_INT 4
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: LD_OWVAR 67
9420: ARRAY
9421: LESS
9422: MUL
9423: IFFALSE 9437
// AddMedal ( med2 , 1 ) else
9425: LD_STRING med2
9427: PPUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 101
9435: GO 9448
// AddMedal ( med2 , - 1 ) ;
9437: LD_STRING med2
9439: PPUSH
9440: LD_INT 1
9442: NEG
9443: PPUSH
9444: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9448: LD_EXP 14
9452: PPUSH
9453: LD_STRING 04_2_GaidarKilled
9455: PPUSH
9456: CALL_OW 39
// if gaidarKilled then
9460: LD_EXP 14
9464: IFFALSE 9478
// AddMedal ( med3 , 1 ) else
9466: LD_STRING med3
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 101
9476: GO 9489
// AddMedal ( med3 , - 1 ) ;
9478: LD_STRING med3
9480: PPUSH
9481: LD_INT 1
9483: NEG
9484: PPUSH
9485: CALL_OW 101
// GiveMedals ( MAIN ) ;
9489: LD_STRING MAIN
9491: PPUSH
9492: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9496: LD_INT 22
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 23
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: PPUSH
9532: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9536: LD_EXP 18
9540: PPUSH
9541: LD_STRING 04_2_Heike
9543: PPUSH
9544: CALL_OW 38
// if Aviradze then
9548: LD_EXP 28
9552: IFFALSE 9566
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9554: LD_EXP 28
9558: PPUSH
9559: LD_STRING 04_2_Aviradze
9561: PPUSH
9562: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9566: LD_EXP 21
9570: PUSH
9571: LD_EXP 21
9575: PPUSH
9576: CALL_OW 255
9580: PUSH
9581: LD_INT 2
9583: EQUAL
9584: AND
9585: IFFALSE 9615
// begin if ibrahimOnRuSide then
9587: LD_EXP 3
9591: IFFALSE 9603
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9593: LD_INT 1
9595: PPUSH
9596: LD_STRING 04_2_IbrahimJoined
9598: PPUSH
9599: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9603: LD_EXP 21
9607: PPUSH
9608: LD_STRING 04_2_Ibrahim
9610: PPUSH
9611: CALL_OW 38
// end ; if Kamil then
9615: LD_EXP 22
9619: IFFALSE 9633
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9621: LD_EXP 22
9625: PPUSH
9626: LD_STRING 04_2_Kamil
9628: PPUSH
9629: CALL_OW 38
// if Sophia then
9633: LD_EXP 24
9637: IFFALSE 9651
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9639: LD_EXP 24
9643: PPUSH
9644: LD_STRING 04_2_Sophia
9646: PPUSH
9647: CALL_OW 38
// if Kaia then
9651: LD_EXP 23
9655: IFFALSE 9669
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9657: LD_EXP 23
9661: PPUSH
9662: LD_STRING 04_2_Kaia
9664: PPUSH
9665: CALL_OW 38
// if Givi then
9669: LD_EXP 19
9673: IFFALSE 9687
// SaveCharacters ( Givi , 04_2_Givi ) ;
9675: LD_EXP 19
9679: PPUSH
9680: LD_STRING 04_2_Givi
9682: PPUSH
9683: CALL_OW 38
// if Mike then
9687: LD_EXP 20
9691: IFFALSE 9705
// SaveCharacters ( Mike , 04_2_Mike ) ;
9693: LD_EXP 20
9697: PPUSH
9698: LD_STRING 04_2_Mike
9700: PPUSH
9701: CALL_OW 38
// if Markov then
9705: LD_EXP 25
9709: IFFALSE 9723
// SaveCharacters ( Markov , 04_2_Markov ) ;
9711: LD_EXP 25
9715: PPUSH
9716: LD_STRING 04_2_Markov
9718: PPUSH
9719: CALL_OW 38
// if Kurt then
9723: LD_EXP 27
9727: IFFALSE 9741
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9729: LD_EXP 27
9733: PPUSH
9734: LD_STRING 04_2_Kurt
9736: PPUSH
9737: CALL_OW 38
// if heikeSecondSquad then
9741: LD_EXP 29
9745: IFFALSE 9759
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9747: LD_EXP 29
9751: PPUSH
9752: LD_STRING 04_2_others
9754: PPUSH
9755: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9759: LD_ADDR_VAR 0 1
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 23
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL_OW 69
9792: ST_TO_ADDR
// if tmp then
9793: LD_VAR 0 1
9797: IFFALSE 9811
// SaveCharacters ( tmp , 04_2_apes ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_STRING 04_2_apes
9806: PPUSH
9807: CALL_OW 38
// YouWin ;
9811: CALL_OW 103
// end ; end_of_file
9815: PPOPN 1
9817: END
// every 0 0$1 do
9818: GO 9820
9820: DISABLE
// begin enable ;
9821: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9822: LD_STRING updateTimer(
9824: PUSH
9825: LD_OWVAR 1
9829: STR
9830: PUSH
9831: LD_STRING );
9833: STR
9834: PPUSH
9835: CALL_OW 559
// end ;
9839: END
// export function SOS_MapStart ( ) ; begin
9840: LD_INT 0
9842: PPUSH
// if streamModeActive then
9843: LD_EXP 43
9847: IFFALSE 9856
// DefineStreamItems ( true ) ;
9849: LD_INT 1
9851: PPUSH
9852: CALL 11510 0 1
// UpdateFactoryWaypoints ( ) ;
9856: CALL 24371 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9860: CALL 24628 0 0
// end ;
9864: LD_VAR 0 1
9868: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9869: LD_INT 0
9871: PPUSH
// if p2 = hack_mode then
9872: LD_VAR 0 2
9876: PUSH
9877: LD_INT 100
9879: EQUAL
9880: IFFALSE 10883
// begin if not StreamModeActive then
9882: LD_EXP 43
9886: NOT
9887: IFFALSE 9897
// StreamModeActive := true ;
9889: LD_ADDR_EXP 43
9893: PUSH
9894: LD_INT 1
9896: ST_TO_ADDR
// if p3 = 0 then
9897: LD_VAR 0 3
9901: PUSH
9902: LD_INT 0
9904: EQUAL
9905: IFFALSE 9911
// InitStreamMode ;
9907: CALL 11046 0 0
// if p3 = 1 then
9911: LD_VAR 0 3
9915: PUSH
9916: LD_INT 1
9918: EQUAL
9919: IFFALSE 9929
// sRocket := true ;
9921: LD_ADDR_EXP 48
9925: PUSH
9926: LD_INT 1
9928: ST_TO_ADDR
// if p3 = 2 then
9929: LD_VAR 0 3
9933: PUSH
9934: LD_INT 2
9936: EQUAL
9937: IFFALSE 9947
// sSpeed := true ;
9939: LD_ADDR_EXP 47
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// if p3 = 3 then
9947: LD_VAR 0 3
9951: PUSH
9952: LD_INT 3
9954: EQUAL
9955: IFFALSE 9965
// sEngine := true ;
9957: LD_ADDR_EXP 49
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// if p3 = 4 then
9965: LD_VAR 0 3
9969: PUSH
9970: LD_INT 4
9972: EQUAL
9973: IFFALSE 9983
// sSpec := true ;
9975: LD_ADDR_EXP 46
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// if p3 = 5 then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 5
9990: EQUAL
9991: IFFALSE 10001
// sLevel := true ;
9993: LD_ADDR_EXP 50
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// if p3 = 6 then
10001: LD_VAR 0 3
10005: PUSH
10006: LD_INT 6
10008: EQUAL
10009: IFFALSE 10019
// sArmoury := true ;
10011: LD_ADDR_EXP 51
10015: PUSH
10016: LD_INT 1
10018: ST_TO_ADDR
// if p3 = 7 then
10019: LD_VAR 0 3
10023: PUSH
10024: LD_INT 7
10026: EQUAL
10027: IFFALSE 10037
// sRadar := true ;
10029: LD_ADDR_EXP 52
10033: PUSH
10034: LD_INT 1
10036: ST_TO_ADDR
// if p3 = 8 then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 8
10044: EQUAL
10045: IFFALSE 10055
// sBunker := true ;
10047: LD_ADDR_EXP 53
10051: PUSH
10052: LD_INT 1
10054: ST_TO_ADDR
// if p3 = 9 then
10055: LD_VAR 0 3
10059: PUSH
10060: LD_INT 9
10062: EQUAL
10063: IFFALSE 10073
// sHack := true ;
10065: LD_ADDR_EXP 54
10069: PUSH
10070: LD_INT 1
10072: ST_TO_ADDR
// if p3 = 10 then
10073: LD_VAR 0 3
10077: PUSH
10078: LD_INT 10
10080: EQUAL
10081: IFFALSE 10091
// sFire := true ;
10083: LD_ADDR_EXP 55
10087: PUSH
10088: LD_INT 1
10090: ST_TO_ADDR
// if p3 = 11 then
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 11
10098: EQUAL
10099: IFFALSE 10109
// sRefresh := true ;
10101: LD_ADDR_EXP 56
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// if p3 = 12 then
10109: LD_VAR 0 3
10113: PUSH
10114: LD_INT 12
10116: EQUAL
10117: IFFALSE 10127
// sExp := true ;
10119: LD_ADDR_EXP 57
10123: PUSH
10124: LD_INT 1
10126: ST_TO_ADDR
// if p3 = 13 then
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 13
10134: EQUAL
10135: IFFALSE 10145
// sDepot := true ;
10137: LD_ADDR_EXP 58
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// if p3 = 14 then
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 14
10152: EQUAL
10153: IFFALSE 10163
// sFlag := true ;
10155: LD_ADDR_EXP 59
10159: PUSH
10160: LD_INT 1
10162: ST_TO_ADDR
// if p3 = 15 then
10163: LD_VAR 0 3
10167: PUSH
10168: LD_INT 15
10170: EQUAL
10171: IFFALSE 10181
// sKamikadze := true ;
10173: LD_ADDR_EXP 67
10177: PUSH
10178: LD_INT 1
10180: ST_TO_ADDR
// if p3 = 16 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 16
10188: EQUAL
10189: IFFALSE 10199
// sTroll := true ;
10191: LD_ADDR_EXP 68
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 17 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 17
10206: EQUAL
10207: IFFALSE 10217
// sSlow := true ;
10209: LD_ADDR_EXP 69
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 18 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 18
10224: EQUAL
10225: IFFALSE 10235
// sLack := true ;
10227: LD_ADDR_EXP 70
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 19 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 19
10242: EQUAL
10243: IFFALSE 10253
// sTank := true ;
10245: LD_ADDR_EXP 72
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 20 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 20
10260: EQUAL
10261: IFFALSE 10271
// sRemote := true ;
10263: LD_ADDR_EXP 73
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 21 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 21
10278: EQUAL
10279: IFFALSE 10289
// sPowell := true ;
10281: LD_ADDR_EXP 74
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 22 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 22
10296: EQUAL
10297: IFFALSE 10307
// sTeleport := true ;
10299: LD_ADDR_EXP 77
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 23 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 23
10314: EQUAL
10315: IFFALSE 10325
// sOilTower := true ;
10317: LD_ADDR_EXP 79
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 24 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 24
10332: EQUAL
10333: IFFALSE 10343
// sShovel := true ;
10335: LD_ADDR_EXP 80
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 25 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 25
10350: EQUAL
10351: IFFALSE 10361
// sSheik := true ;
10353: LD_ADDR_EXP 81
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 26 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 26
10368: EQUAL
10369: IFFALSE 10379
// sEarthquake := true ;
10371: LD_ADDR_EXP 83
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 27 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 27
10386: EQUAL
10387: IFFALSE 10397
// sAI := true ;
10389: LD_ADDR_EXP 84
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 28 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 28
10404: EQUAL
10405: IFFALSE 10415
// sCargo := true ;
10407: LD_ADDR_EXP 87
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 29 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 29
10422: EQUAL
10423: IFFALSE 10433
// sDLaser := true ;
10425: LD_ADDR_EXP 88
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 30 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 30
10440: EQUAL
10441: IFFALSE 10451
// sExchange := true ;
10443: LD_ADDR_EXP 89
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 31 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 31
10458: EQUAL
10459: IFFALSE 10469
// sFac := true ;
10461: LD_ADDR_EXP 90
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 32 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 32
10476: EQUAL
10477: IFFALSE 10487
// sPower := true ;
10479: LD_ADDR_EXP 91
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 33 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 33
10494: EQUAL
10495: IFFALSE 10505
// sRandom := true ;
10497: LD_ADDR_EXP 92
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 34 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 34
10512: EQUAL
10513: IFFALSE 10523
// sShield := true ;
10515: LD_ADDR_EXP 93
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 35 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 35
10530: EQUAL
10531: IFFALSE 10541
// sTime := true ;
10533: LD_ADDR_EXP 94
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 36 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 36
10548: EQUAL
10549: IFFALSE 10559
// sTools := true ;
10551: LD_ADDR_EXP 95
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 101 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 101
10566: EQUAL
10567: IFFALSE 10577
// sSold := true ;
10569: LD_ADDR_EXP 60
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 102 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 102
10584: EQUAL
10585: IFFALSE 10595
// sDiff := true ;
10587: LD_ADDR_EXP 61
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 103 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 103
10602: EQUAL
10603: IFFALSE 10613
// sFog := true ;
10605: LD_ADDR_EXP 64
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 104 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 104
10620: EQUAL
10621: IFFALSE 10631
// sReset := true ;
10623: LD_ADDR_EXP 65
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 105 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 105
10638: EQUAL
10639: IFFALSE 10649
// sSun := true ;
10641: LD_ADDR_EXP 66
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 106 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 106
10656: EQUAL
10657: IFFALSE 10667
// sTiger := true ;
10659: LD_ADDR_EXP 62
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 107 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 107
10674: EQUAL
10675: IFFALSE 10685
// sBomb := true ;
10677: LD_ADDR_EXP 63
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 108 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 108
10692: EQUAL
10693: IFFALSE 10703
// sWound := true ;
10695: LD_ADDR_EXP 71
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 109 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 109
10710: EQUAL
10711: IFFALSE 10721
// sBetray := true ;
10713: LD_ADDR_EXP 75
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 110 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 110
10728: EQUAL
10729: IFFALSE 10739
// sContamin := true ;
10731: LD_ADDR_EXP 76
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 111 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 111
10746: EQUAL
10747: IFFALSE 10757
// sOil := true ;
10749: LD_ADDR_EXP 78
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 112 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 112
10764: EQUAL
10765: IFFALSE 10775
// sStu := true ;
10767: LD_ADDR_EXP 82
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 113 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 113
10782: EQUAL
10783: IFFALSE 10793
// sBazooka := true ;
10785: LD_ADDR_EXP 85
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 114 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 114
10800: EQUAL
10801: IFFALSE 10811
// sMortar := true ;
10803: LD_ADDR_EXP 86
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 115 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 115
10818: EQUAL
10819: IFFALSE 10829
// sRanger := true ;
10821: LD_ADDR_EXP 96
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 116 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 116
10836: EQUAL
10837: IFFALSE 10847
// sComputer := true ;
10839: LD_ADDR_EXP 97
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 117 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 117
10854: EQUAL
10855: IFFALSE 10865
// s30 := true ;
10857: LD_ADDR_EXP 98
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 118 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 118
10872: EQUAL
10873: IFFALSE 10883
// s60 := true ;
10875: LD_ADDR_EXP 99
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// end ; if p2 = stream_mode then
10883: LD_VAR 0 2
10887: PUSH
10888: LD_INT 101
10890: EQUAL
10891: IFFALSE 11019
// begin case p3 of 1 :
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 1
10900: DOUBLE
10901: EQUAL
10902: IFTRUE 10906
10904: GO 10913
10906: POP
// hHackUnlimitedResources ; 2 :
10907: CALL 23117 0 0
10911: GO 11019
10913: LD_INT 2
10915: DOUBLE
10916: EQUAL
10917: IFTRUE 10921
10919: GO 10928
10921: POP
// hHackSetLevel10 ; 3 :
10922: CALL 23250 0 0
10926: GO 11019
10928: LD_INT 3
10930: DOUBLE
10931: EQUAL
10932: IFTRUE 10936
10934: GO 10943
10936: POP
// hHackSetLevel10YourUnits ; 4 :
10937: CALL 23335 0 0
10941: GO 11019
10943: LD_INT 4
10945: DOUBLE
10946: EQUAL
10947: IFTRUE 10951
10949: GO 10958
10951: POP
// hHackInvincible ; 5 :
10952: CALL 23783 0 0
10956: GO 11019
10958: LD_INT 5
10960: DOUBLE
10961: EQUAL
10962: IFTRUE 10966
10964: GO 10973
10966: POP
// hHackInvisible ; 6 :
10967: CALL 23894 0 0
10971: GO 11019
10973: LD_INT 6
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 10988
10981: POP
// hHackChangeYourSide ; 7 :
10982: CALL 23951 0 0
10986: GO 11019
10988: LD_INT 7
10990: DOUBLE
10991: EQUAL
10992: IFTRUE 10996
10994: GO 11003
10996: POP
// hHackChangeUnitSide ; 8 :
10997: CALL 23993 0 0
11001: GO 11019
11003: LD_INT 8
11005: DOUBLE
11006: EQUAL
11007: IFTRUE 11011
11009: GO 11018
11011: POP
// hHackFog ; end ;
11012: CALL 24094 0 0
11016: GO 11019
11018: POP
// end ; end ;
11019: LD_VAR 0 7
11023: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11024: GO 11026
11026: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11027: LD_STRING initStreamRollete();
11029: PPUSH
11030: CALL_OW 559
// InitStreamMode ;
11034: CALL 11046 0 0
// DefineStreamItems ( false ) ;
11038: LD_INT 0
11040: PPUSH
11041: CALL 11510 0 1
// end ;
11045: END
// function InitStreamMode ; begin
11046: LD_INT 0
11048: PPUSH
// streamModeActive := false ;
11049: LD_ADDR_EXP 43
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// normalCounter := 36 ;
11057: LD_ADDR_EXP 44
11061: PUSH
11062: LD_INT 36
11064: ST_TO_ADDR
// hardcoreCounter := 18 ;
11065: LD_ADDR_EXP 45
11069: PUSH
11070: LD_INT 18
11072: ST_TO_ADDR
// sRocket := false ;
11073: LD_ADDR_EXP 48
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sSpeed := false ;
11081: LD_ADDR_EXP 47
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sEngine := false ;
11089: LD_ADDR_EXP 49
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sSpec := false ;
11097: LD_ADDR_EXP 46
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sLevel := false ;
11105: LD_ADDR_EXP 50
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sArmoury := false ;
11113: LD_ADDR_EXP 51
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sRadar := false ;
11121: LD_ADDR_EXP 52
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sBunker := false ;
11129: LD_ADDR_EXP 53
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sHack := false ;
11137: LD_ADDR_EXP 54
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sFire := false ;
11145: LD_ADDR_EXP 55
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sRefresh := false ;
11153: LD_ADDR_EXP 56
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sExp := false ;
11161: LD_ADDR_EXP 57
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sDepot := false ;
11169: LD_ADDR_EXP 58
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sFlag := false ;
11177: LD_ADDR_EXP 59
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sKamikadze := false ;
11185: LD_ADDR_EXP 67
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sTroll := false ;
11193: LD_ADDR_EXP 68
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sSlow := false ;
11201: LD_ADDR_EXP 69
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sLack := false ;
11209: LD_ADDR_EXP 70
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sTank := false ;
11217: LD_ADDR_EXP 72
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sRemote := false ;
11225: LD_ADDR_EXP 73
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sPowell := false ;
11233: LD_ADDR_EXP 74
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sTeleport := false ;
11241: LD_ADDR_EXP 77
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sOilTower := false ;
11249: LD_ADDR_EXP 79
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sShovel := false ;
11257: LD_ADDR_EXP 80
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sSheik := false ;
11265: LD_ADDR_EXP 81
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sEarthquake := false ;
11273: LD_ADDR_EXP 83
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sAI := false ;
11281: LD_ADDR_EXP 84
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sCargo := false ;
11289: LD_ADDR_EXP 87
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sDLaser := false ;
11297: LD_ADDR_EXP 88
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sExchange := false ;
11305: LD_ADDR_EXP 89
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sFac := false ;
11313: LD_ADDR_EXP 90
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sPower := false ;
11321: LD_ADDR_EXP 91
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sRandom := false ;
11329: LD_ADDR_EXP 92
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sShield := false ;
11337: LD_ADDR_EXP 93
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sTime := false ;
11345: LD_ADDR_EXP 94
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sTools := false ;
11353: LD_ADDR_EXP 95
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sSold := false ;
11361: LD_ADDR_EXP 60
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sDiff := false ;
11369: LD_ADDR_EXP 61
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sFog := false ;
11377: LD_ADDR_EXP 64
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sReset := false ;
11385: LD_ADDR_EXP 65
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sSun := false ;
11393: LD_ADDR_EXP 66
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sTiger := false ;
11401: LD_ADDR_EXP 62
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sBomb := false ;
11409: LD_ADDR_EXP 63
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sWound := false ;
11417: LD_ADDR_EXP 71
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sBetray := false ;
11425: LD_ADDR_EXP 75
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sContamin := false ;
11433: LD_ADDR_EXP 76
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sOil := false ;
11441: LD_ADDR_EXP 78
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sStu := false ;
11449: LD_ADDR_EXP 82
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// sBazooka := false ;
11457: LD_ADDR_EXP 85
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// sMortar := false ;
11465: LD_ADDR_EXP 86
11469: PUSH
11470: LD_INT 0
11472: ST_TO_ADDR
// sRanger := false ;
11473: LD_ADDR_EXP 96
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
// sComputer := false ;
11481: LD_ADDR_EXP 97
11485: PUSH
11486: LD_INT 0
11488: ST_TO_ADDR
// s30 := false ;
11489: LD_ADDR_EXP 98
11493: PUSH
11494: LD_INT 0
11496: ST_TO_ADDR
// s60 := false ;
11497: LD_ADDR_EXP 99
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// end ;
11505: LD_VAR 0 1
11509: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
// result := [ ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: EMPTY
11525: ST_TO_ADDR
// if campaign_id = 1 then
11526: LD_OWVAR 69
11530: PUSH
11531: LD_INT 1
11533: EQUAL
11534: IFFALSE 14700
// begin case mission_number of 1 :
11536: LD_OWVAR 70
11540: PUSH
11541: LD_INT 1
11543: DOUBLE
11544: EQUAL
11545: IFTRUE 11549
11547: GO 11625
11549: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11550: LD_ADDR_VAR 0 2
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: LD_INT 4
11560: PUSH
11561: LD_INT 11
11563: PUSH
11564: LD_INT 12
11566: PUSH
11567: LD_INT 15
11569: PUSH
11570: LD_INT 16
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 23
11578: PUSH
11579: LD_INT 26
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 101
11595: PUSH
11596: LD_INT 102
11598: PUSH
11599: LD_INT 106
11601: PUSH
11602: LD_INT 116
11604: PUSH
11605: LD_INT 117
11607: PUSH
11608: LD_INT 118
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: ST_TO_ADDR
11623: GO 14698
11625: LD_INT 2
11627: DOUBLE
11628: EQUAL
11629: IFTRUE 11633
11631: GO 11717
11633: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_INT 2
11641: PUSH
11642: LD_INT 4
11644: PUSH
11645: LD_INT 11
11647: PUSH
11648: LD_INT 12
11650: PUSH
11651: LD_INT 15
11653: PUSH
11654: LD_INT 16
11656: PUSH
11657: LD_INT 22
11659: PUSH
11660: LD_INT 23
11662: PUSH
11663: LD_INT 26
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 101
11679: PUSH
11680: LD_INT 102
11682: PUSH
11683: LD_INT 105
11685: PUSH
11686: LD_INT 106
11688: PUSH
11689: LD_INT 108
11691: PUSH
11692: LD_INT 116
11694: PUSH
11695: LD_INT 117
11697: PUSH
11698: LD_INT 118
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: ST_TO_ADDR
11715: GO 14698
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11813
11725: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11726: LD_ADDR_VAR 0 2
11730: PUSH
11731: LD_INT 2
11733: PUSH
11734: LD_INT 4
11736: PUSH
11737: LD_INT 5
11739: PUSH
11740: LD_INT 11
11742: PUSH
11743: LD_INT 12
11745: PUSH
11746: LD_INT 15
11748: PUSH
11749: LD_INT 16
11751: PUSH
11752: LD_INT 22
11754: PUSH
11755: LD_INT 26
11757: PUSH
11758: LD_INT 36
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 101
11775: PUSH
11776: LD_INT 102
11778: PUSH
11779: LD_INT 105
11781: PUSH
11782: LD_INT 106
11784: PUSH
11785: LD_INT 108
11787: PUSH
11788: LD_INT 116
11790: PUSH
11791: LD_INT 117
11793: PUSH
11794: LD_INT 118
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: ST_TO_ADDR
11811: GO 14698
11813: LD_INT 4
11815: DOUBLE
11816: EQUAL
11817: IFTRUE 11821
11819: GO 11917
11821: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11822: LD_ADDR_VAR 0 2
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: LD_INT 4
11832: PUSH
11833: LD_INT 5
11835: PUSH
11836: LD_INT 8
11838: PUSH
11839: LD_INT 11
11841: PUSH
11842: LD_INT 12
11844: PUSH
11845: LD_INT 15
11847: PUSH
11848: LD_INT 16
11850: PUSH
11851: LD_INT 22
11853: PUSH
11854: LD_INT 23
11856: PUSH
11857: LD_INT 26
11859: PUSH
11860: LD_INT 36
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 101
11879: PUSH
11880: LD_INT 102
11882: PUSH
11883: LD_INT 105
11885: PUSH
11886: LD_INT 106
11888: PUSH
11889: LD_INT 108
11891: PUSH
11892: LD_INT 116
11894: PUSH
11895: LD_INT 117
11897: PUSH
11898: LD_INT 118
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: ST_TO_ADDR
11915: GO 14698
11917: LD_INT 5
11919: DOUBLE
11920: EQUAL
11921: IFTRUE 11925
11923: GO 12037
11925: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: LD_INT 5
11939: PUSH
11940: LD_INT 6
11942: PUSH
11943: LD_INT 8
11945: PUSH
11946: LD_INT 11
11948: PUSH
11949: LD_INT 12
11951: PUSH
11952: LD_INT 15
11954: PUSH
11955: LD_INT 16
11957: PUSH
11958: LD_INT 22
11960: PUSH
11961: LD_INT 23
11963: PUSH
11964: LD_INT 25
11966: PUSH
11967: LD_INT 26
11969: PUSH
11970: LD_INT 36
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 101
11991: PUSH
11992: LD_INT 102
11994: PUSH
11995: LD_INT 105
11997: PUSH
11998: LD_INT 106
12000: PUSH
12001: LD_INT 108
12003: PUSH
12004: LD_INT 109
12006: PUSH
12007: LD_INT 112
12009: PUSH
12010: LD_INT 116
12012: PUSH
12013: LD_INT 117
12015: PUSH
12016: LD_INT 118
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: ST_TO_ADDR
12035: GO 14698
12037: LD_INT 6
12039: DOUBLE
12040: EQUAL
12041: IFTRUE 12045
12043: GO 12177
12045: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: LD_INT 5
12059: PUSH
12060: LD_INT 6
12062: PUSH
12063: LD_INT 8
12065: PUSH
12066: LD_INT 11
12068: PUSH
12069: LD_INT 12
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 20
12080: PUSH
12081: LD_INT 21
12083: PUSH
12084: LD_INT 22
12086: PUSH
12087: LD_INT 23
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 26
12095: PUSH
12096: LD_INT 30
12098: PUSH
12099: LD_INT 31
12101: PUSH
12102: LD_INT 32
12104: PUSH
12105: LD_INT 36
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 101
12131: PUSH
12132: LD_INT 102
12134: PUSH
12135: LD_INT 105
12137: PUSH
12138: LD_INT 106
12140: PUSH
12141: LD_INT 108
12143: PUSH
12144: LD_INT 109
12146: PUSH
12147: LD_INT 112
12149: PUSH
12150: LD_INT 116
12152: PUSH
12153: LD_INT 117
12155: PUSH
12156: LD_INT 118
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: ST_TO_ADDR
12175: GO 14698
12177: LD_INT 7
12179: DOUBLE
12180: EQUAL
12181: IFTRUE 12185
12183: GO 12297
12185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 4
12196: PUSH
12197: LD_INT 5
12199: PUSH
12200: LD_INT 7
12202: PUSH
12203: LD_INT 11
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: LD_INT 15
12211: PUSH
12212: LD_INT 16
12214: PUSH
12215: LD_INT 20
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_INT 23
12226: PUSH
12227: LD_INT 25
12229: PUSH
12230: LD_INT 26
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 101
12251: PUSH
12252: LD_INT 102
12254: PUSH
12255: LD_INT 103
12257: PUSH
12258: LD_INT 105
12260: PUSH
12261: LD_INT 106
12263: PUSH
12264: LD_INT 108
12266: PUSH
12267: LD_INT 112
12269: PUSH
12270: LD_INT 116
12272: PUSH
12273: LD_INT 117
12275: PUSH
12276: LD_INT 118
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: ST_TO_ADDR
12295: GO 14698
12297: LD_INT 8
12299: DOUBLE
12300: EQUAL
12301: IFTRUE 12305
12303: GO 12445
12305: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 4
12316: PUSH
12317: LD_INT 5
12319: PUSH
12320: LD_INT 6
12322: PUSH
12323: LD_INT 7
12325: PUSH
12326: LD_INT 8
12328: PUSH
12329: LD_INT 11
12331: PUSH
12332: LD_INT 12
12334: PUSH
12335: LD_INT 15
12337: PUSH
12338: LD_INT 16
12340: PUSH
12341: LD_INT 20
12343: PUSH
12344: LD_INT 21
12346: PUSH
12347: LD_INT 22
12349: PUSH
12350: LD_INT 23
12352: PUSH
12353: LD_INT 25
12355: PUSH
12356: LD_INT 26
12358: PUSH
12359: LD_INT 30
12361: PUSH
12362: LD_INT 31
12364: PUSH
12365: LD_INT 32
12367: PUSH
12368: LD_INT 36
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 101
12395: PUSH
12396: LD_INT 102
12398: PUSH
12399: LD_INT 103
12401: PUSH
12402: LD_INT 105
12404: PUSH
12405: LD_INT 106
12407: PUSH
12408: LD_INT 108
12410: PUSH
12411: LD_INT 109
12413: PUSH
12414: LD_INT 112
12416: PUSH
12417: LD_INT 116
12419: PUSH
12420: LD_INT 117
12422: PUSH
12423: LD_INT 118
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: ST_TO_ADDR
12443: GO 14698
12445: LD_INT 9
12447: DOUBLE
12448: EQUAL
12449: IFTRUE 12453
12451: GO 12601
12453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12454: LD_ADDR_VAR 0 2
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: LD_INT 4
12464: PUSH
12465: LD_INT 5
12467: PUSH
12468: LD_INT 6
12470: PUSH
12471: LD_INT 7
12473: PUSH
12474: LD_INT 8
12476: PUSH
12477: LD_INT 11
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: LD_INT 15
12485: PUSH
12486: LD_INT 16
12488: PUSH
12489: LD_INT 20
12491: PUSH
12492: LD_INT 21
12494: PUSH
12495: LD_INT 22
12497: PUSH
12498: LD_INT 23
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 26
12506: PUSH
12507: LD_INT 28
12509: PUSH
12510: LD_INT 30
12512: PUSH
12513: LD_INT 31
12515: PUSH
12516: LD_INT 32
12518: PUSH
12519: LD_INT 36
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 101
12547: PUSH
12548: LD_INT 102
12550: PUSH
12551: LD_INT 103
12553: PUSH
12554: LD_INT 105
12556: PUSH
12557: LD_INT 106
12559: PUSH
12560: LD_INT 108
12562: PUSH
12563: LD_INT 109
12565: PUSH
12566: LD_INT 112
12568: PUSH
12569: LD_INT 114
12571: PUSH
12572: LD_INT 116
12574: PUSH
12575: LD_INT 117
12577: PUSH
12578: LD_INT 118
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14698
12601: LD_INT 10
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12805
12609: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 4
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 6
12626: PUSH
12627: LD_INT 7
12629: PUSH
12630: LD_INT 8
12632: PUSH
12633: LD_INT 9
12635: PUSH
12636: LD_INT 10
12638: PUSH
12639: LD_INT 11
12641: PUSH
12642: LD_INT 12
12644: PUSH
12645: LD_INT 13
12647: PUSH
12648: LD_INT 14
12650: PUSH
12651: LD_INT 15
12653: PUSH
12654: LD_INT 16
12656: PUSH
12657: LD_INT 17
12659: PUSH
12660: LD_INT 18
12662: PUSH
12663: LD_INT 19
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: LD_INT 21
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_INT 23
12677: PUSH
12678: LD_INT 24
12680: PUSH
12681: LD_INT 25
12683: PUSH
12684: LD_INT 26
12686: PUSH
12687: LD_INT 28
12689: PUSH
12690: LD_INT 30
12692: PUSH
12693: LD_INT 31
12695: PUSH
12696: LD_INT 32
12698: PUSH
12699: LD_INT 36
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 101
12735: PUSH
12736: LD_INT 102
12738: PUSH
12739: LD_INT 103
12741: PUSH
12742: LD_INT 104
12744: PUSH
12745: LD_INT 105
12747: PUSH
12748: LD_INT 106
12750: PUSH
12751: LD_INT 107
12753: PUSH
12754: LD_INT 108
12756: PUSH
12757: LD_INT 109
12759: PUSH
12760: LD_INT 110
12762: PUSH
12763: LD_INT 111
12765: PUSH
12766: LD_INT 112
12768: PUSH
12769: LD_INT 114
12771: PUSH
12772: LD_INT 116
12774: PUSH
12775: LD_INT 117
12777: PUSH
12778: LD_INT 118
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: ST_TO_ADDR
12803: GO 14698
12805: LD_INT 11
12807: DOUBLE
12808: EQUAL
12809: IFTRUE 12813
12811: GO 13017
12813: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_INT 2
12821: PUSH
12822: LD_INT 3
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: LD_INT 5
12830: PUSH
12831: LD_INT 6
12833: PUSH
12834: LD_INT 7
12836: PUSH
12837: LD_INT 8
12839: PUSH
12840: LD_INT 9
12842: PUSH
12843: LD_INT 10
12845: PUSH
12846: LD_INT 11
12848: PUSH
12849: LD_INT 12
12851: PUSH
12852: LD_INT 13
12854: PUSH
12855: LD_INT 14
12857: PUSH
12858: LD_INT 15
12860: PUSH
12861: LD_INT 16
12863: PUSH
12864: LD_INT 17
12866: PUSH
12867: LD_INT 18
12869: PUSH
12870: LD_INT 19
12872: PUSH
12873: LD_INT 20
12875: PUSH
12876: LD_INT 21
12878: PUSH
12879: LD_INT 22
12881: PUSH
12882: LD_INT 23
12884: PUSH
12885: LD_INT 24
12887: PUSH
12888: LD_INT 25
12890: PUSH
12891: LD_INT 26
12893: PUSH
12894: LD_INT 28
12896: PUSH
12897: LD_INT 30
12899: PUSH
12900: LD_INT 31
12902: PUSH
12903: LD_INT 32
12905: PUSH
12906: LD_INT 34
12908: PUSH
12909: LD_INT 36
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 101
12947: PUSH
12948: LD_INT 102
12950: PUSH
12951: LD_INT 103
12953: PUSH
12954: LD_INT 104
12956: PUSH
12957: LD_INT 105
12959: PUSH
12960: LD_INT 106
12962: PUSH
12963: LD_INT 107
12965: PUSH
12966: LD_INT 108
12968: PUSH
12969: LD_INT 109
12971: PUSH
12972: LD_INT 110
12974: PUSH
12975: LD_INT 111
12977: PUSH
12978: LD_INT 112
12980: PUSH
12981: LD_INT 114
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 14698
13017: LD_INT 12
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13245
13025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: LD_INT 3
13039: PUSH
13040: LD_INT 4
13042: PUSH
13043: LD_INT 5
13045: PUSH
13046: LD_INT 6
13048: PUSH
13049: LD_INT 7
13051: PUSH
13052: LD_INT 8
13054: PUSH
13055: LD_INT 9
13057: PUSH
13058: LD_INT 10
13060: PUSH
13061: LD_INT 11
13063: PUSH
13064: LD_INT 12
13066: PUSH
13067: LD_INT 13
13069: PUSH
13070: LD_INT 14
13072: PUSH
13073: LD_INT 15
13075: PUSH
13076: LD_INT 16
13078: PUSH
13079: LD_INT 17
13081: PUSH
13082: LD_INT 18
13084: PUSH
13085: LD_INT 19
13087: PUSH
13088: LD_INT 20
13090: PUSH
13091: LD_INT 21
13093: PUSH
13094: LD_INT 22
13096: PUSH
13097: LD_INT 23
13099: PUSH
13100: LD_INT 24
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: LD_INT 27
13111: PUSH
13112: LD_INT 28
13114: PUSH
13115: LD_INT 30
13117: PUSH
13118: LD_INT 31
13120: PUSH
13121: LD_INT 32
13123: PUSH
13124: LD_INT 33
13126: PUSH
13127: LD_INT 34
13129: PUSH
13130: LD_INT 36
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 101
13171: PUSH
13172: LD_INT 102
13174: PUSH
13175: LD_INT 103
13177: PUSH
13178: LD_INT 104
13180: PUSH
13181: LD_INT 105
13183: PUSH
13184: LD_INT 106
13186: PUSH
13187: LD_INT 107
13189: PUSH
13190: LD_INT 108
13192: PUSH
13193: LD_INT 109
13195: PUSH
13196: LD_INT 110
13198: PUSH
13199: LD_INT 111
13201: PUSH
13202: LD_INT 112
13204: PUSH
13205: LD_INT 113
13207: PUSH
13208: LD_INT 114
13210: PUSH
13211: LD_INT 116
13213: PUSH
13214: LD_INT 117
13216: PUSH
13217: LD_INT 118
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 14698
13245: LD_INT 13
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13461
13253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 5
13273: PUSH
13274: LD_INT 8
13276: PUSH
13277: LD_INT 9
13279: PUSH
13280: LD_INT 10
13282: PUSH
13283: LD_INT 11
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: LD_INT 14
13291: PUSH
13292: LD_INT 15
13294: PUSH
13295: LD_INT 16
13297: PUSH
13298: LD_INT 17
13300: PUSH
13301: LD_INT 18
13303: PUSH
13304: LD_INT 19
13306: PUSH
13307: LD_INT 20
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 22
13315: PUSH
13316: LD_INT 23
13318: PUSH
13319: LD_INT 24
13321: PUSH
13322: LD_INT 25
13324: PUSH
13325: LD_INT 26
13327: PUSH
13328: LD_INT 27
13330: PUSH
13331: LD_INT 28
13333: PUSH
13334: LD_INT 30
13336: PUSH
13337: LD_INT 31
13339: PUSH
13340: LD_INT 32
13342: PUSH
13343: LD_INT 33
13345: PUSH
13346: LD_INT 34
13348: PUSH
13349: LD_INT 36
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 101
13387: PUSH
13388: LD_INT 102
13390: PUSH
13391: LD_INT 103
13393: PUSH
13394: LD_INT 104
13396: PUSH
13397: LD_INT 105
13399: PUSH
13400: LD_INT 106
13402: PUSH
13403: LD_INT 107
13405: PUSH
13406: LD_INT 108
13408: PUSH
13409: LD_INT 109
13411: PUSH
13412: LD_INT 110
13414: PUSH
13415: LD_INT 111
13417: PUSH
13418: LD_INT 112
13420: PUSH
13421: LD_INT 113
13423: PUSH
13424: LD_INT 114
13426: PUSH
13427: LD_INT 116
13429: PUSH
13430: LD_INT 117
13432: PUSH
13433: LD_INT 118
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: ST_TO_ADDR
13459: GO 14698
13461: LD_INT 14
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13693
13469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_INT 1
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: LD_INT 3
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: LD_INT 5
13489: PUSH
13490: LD_INT 6
13492: PUSH
13493: LD_INT 7
13495: PUSH
13496: LD_INT 8
13498: PUSH
13499: LD_INT 9
13501: PUSH
13502: LD_INT 10
13504: PUSH
13505: LD_INT 11
13507: PUSH
13508: LD_INT 12
13510: PUSH
13511: LD_INT 13
13513: PUSH
13514: LD_INT 14
13516: PUSH
13517: LD_INT 15
13519: PUSH
13520: LD_INT 16
13522: PUSH
13523: LD_INT 17
13525: PUSH
13526: LD_INT 18
13528: PUSH
13529: LD_INT 19
13531: PUSH
13532: LD_INT 20
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 22
13540: PUSH
13541: LD_INT 23
13543: PUSH
13544: LD_INT 24
13546: PUSH
13547: LD_INT 25
13549: PUSH
13550: LD_INT 26
13552: PUSH
13553: LD_INT 27
13555: PUSH
13556: LD_INT 28
13558: PUSH
13559: LD_INT 29
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 31
13567: PUSH
13568: LD_INT 32
13570: PUSH
13571: LD_INT 33
13573: PUSH
13574: LD_INT 34
13576: PUSH
13577: LD_INT 36
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 101
13619: PUSH
13620: LD_INT 102
13622: PUSH
13623: LD_INT 103
13625: PUSH
13626: LD_INT 104
13628: PUSH
13629: LD_INT 105
13631: PUSH
13632: LD_INT 106
13634: PUSH
13635: LD_INT 107
13637: PUSH
13638: LD_INT 108
13640: PUSH
13641: LD_INT 109
13643: PUSH
13644: LD_INT 110
13646: PUSH
13647: LD_INT 111
13649: PUSH
13650: LD_INT 112
13652: PUSH
13653: LD_INT 113
13655: PUSH
13656: LD_INT 114
13658: PUSH
13659: LD_INT 116
13661: PUSH
13662: LD_INT 117
13664: PUSH
13665: LD_INT 118
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: ST_TO_ADDR
13691: GO 14698
13693: LD_INT 15
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13925
13701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: LD_INT 1
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: LD_INT 5
13721: PUSH
13722: LD_INT 6
13724: PUSH
13725: LD_INT 7
13727: PUSH
13728: LD_INT 8
13730: PUSH
13731: LD_INT 9
13733: PUSH
13734: LD_INT 10
13736: PUSH
13737: LD_INT 11
13739: PUSH
13740: LD_INT 12
13742: PUSH
13743: LD_INT 13
13745: PUSH
13746: LD_INT 14
13748: PUSH
13749: LD_INT 15
13751: PUSH
13752: LD_INT 16
13754: PUSH
13755: LD_INT 17
13757: PUSH
13758: LD_INT 18
13760: PUSH
13761: LD_INT 19
13763: PUSH
13764: LD_INT 20
13766: PUSH
13767: LD_INT 21
13769: PUSH
13770: LD_INT 22
13772: PUSH
13773: LD_INT 23
13775: PUSH
13776: LD_INT 24
13778: PUSH
13779: LD_INT 25
13781: PUSH
13782: LD_INT 26
13784: PUSH
13785: LD_INT 27
13787: PUSH
13788: LD_INT 28
13790: PUSH
13791: LD_INT 29
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 31
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: LD_INT 36
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 101
13851: PUSH
13852: LD_INT 102
13854: PUSH
13855: LD_INT 103
13857: PUSH
13858: LD_INT 104
13860: PUSH
13861: LD_INT 105
13863: PUSH
13864: LD_INT 106
13866: PUSH
13867: LD_INT 107
13869: PUSH
13870: LD_INT 108
13872: PUSH
13873: LD_INT 109
13875: PUSH
13876: LD_INT 110
13878: PUSH
13879: LD_INT 111
13881: PUSH
13882: LD_INT 112
13884: PUSH
13885: LD_INT 113
13887: PUSH
13888: LD_INT 114
13890: PUSH
13891: LD_INT 116
13893: PUSH
13894: LD_INT 117
13896: PUSH
13897: LD_INT 118
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: ST_TO_ADDR
13923: GO 14698
13925: LD_INT 16
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 14069
13933: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13934: LD_ADDR_VAR 0 2
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: LD_INT 4
13944: PUSH
13945: LD_INT 5
13947: PUSH
13948: LD_INT 7
13950: PUSH
13951: LD_INT 11
13953: PUSH
13954: LD_INT 12
13956: PUSH
13957: LD_INT 15
13959: PUSH
13960: LD_INT 16
13962: PUSH
13963: LD_INT 20
13965: PUSH
13966: LD_INT 21
13968: PUSH
13969: LD_INT 22
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 25
13977: PUSH
13978: LD_INT 26
13980: PUSH
13981: LD_INT 30
13983: PUSH
13984: LD_INT 31
13986: PUSH
13987: LD_INT 32
13989: PUSH
13990: LD_INT 33
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 101
14019: PUSH
14020: LD_INT 102
14022: PUSH
14023: LD_INT 103
14025: PUSH
14026: LD_INT 106
14028: PUSH
14029: LD_INT 108
14031: PUSH
14032: LD_INT 112
14034: PUSH
14035: LD_INT 113
14037: PUSH
14038: LD_INT 114
14040: PUSH
14041: LD_INT 116
14043: PUSH
14044: LD_INT 117
14046: PUSH
14047: LD_INT 118
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: ST_TO_ADDR
14067: GO 14698
14069: LD_INT 17
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14301
14077: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 6
14100: PUSH
14101: LD_INT 7
14103: PUSH
14104: LD_INT 8
14106: PUSH
14107: LD_INT 9
14109: PUSH
14110: LD_INT 10
14112: PUSH
14113: LD_INT 11
14115: PUSH
14116: LD_INT 12
14118: PUSH
14119: LD_INT 13
14121: PUSH
14122: LD_INT 14
14124: PUSH
14125: LD_INT 15
14127: PUSH
14128: LD_INT 16
14130: PUSH
14131: LD_INT 17
14133: PUSH
14134: LD_INT 18
14136: PUSH
14137: LD_INT 19
14139: PUSH
14140: LD_INT 20
14142: PUSH
14143: LD_INT 21
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_INT 23
14151: PUSH
14152: LD_INT 24
14154: PUSH
14155: LD_INT 25
14157: PUSH
14158: LD_INT 26
14160: PUSH
14161: LD_INT 27
14163: PUSH
14164: LD_INT 28
14166: PUSH
14167: LD_INT 29
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 31
14175: PUSH
14176: LD_INT 32
14178: PUSH
14179: LD_INT 33
14181: PUSH
14182: LD_INT 34
14184: PUSH
14185: LD_INT 36
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 101
14227: PUSH
14228: LD_INT 102
14230: PUSH
14231: LD_INT 103
14233: PUSH
14234: LD_INT 104
14236: PUSH
14237: LD_INT 105
14239: PUSH
14240: LD_INT 106
14242: PUSH
14243: LD_INT 107
14245: PUSH
14246: LD_INT 108
14248: PUSH
14249: LD_INT 109
14251: PUSH
14252: LD_INT 110
14254: PUSH
14255: LD_INT 111
14257: PUSH
14258: LD_INT 112
14260: PUSH
14261: LD_INT 113
14263: PUSH
14264: LD_INT 114
14266: PUSH
14267: LD_INT 116
14269: PUSH
14270: LD_INT 117
14272: PUSH
14273: LD_INT 118
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: ST_TO_ADDR
14299: GO 14698
14301: LD_INT 18
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14457
14309: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14310: LD_ADDR_VAR 0 2
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: LD_INT 5
14323: PUSH
14324: LD_INT 7
14326: PUSH
14327: LD_INT 11
14329: PUSH
14330: LD_INT 12
14332: PUSH
14333: LD_INT 15
14335: PUSH
14336: LD_INT 16
14338: PUSH
14339: LD_INT 20
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_INT 23
14350: PUSH
14351: LD_INT 25
14353: PUSH
14354: LD_INT 26
14356: PUSH
14357: LD_INT 30
14359: PUSH
14360: LD_INT 31
14362: PUSH
14363: LD_INT 32
14365: PUSH
14366: LD_INT 33
14368: PUSH
14369: LD_INT 34
14371: PUSH
14372: LD_INT 35
14374: PUSH
14375: LD_INT 36
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 101
14403: PUSH
14404: LD_INT 102
14406: PUSH
14407: LD_INT 103
14409: PUSH
14410: LD_INT 106
14412: PUSH
14413: LD_INT 108
14415: PUSH
14416: LD_INT 112
14418: PUSH
14419: LD_INT 113
14421: PUSH
14422: LD_INT 114
14424: PUSH
14425: LD_INT 115
14427: PUSH
14428: LD_INT 116
14430: PUSH
14431: LD_INT 117
14433: PUSH
14434: LD_INT 118
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: ST_TO_ADDR
14455: GO 14698
14457: LD_INT 19
14459: DOUBLE
14460: EQUAL
14461: IFTRUE 14465
14463: GO 14697
14465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: LD_INT 2
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: LD_INT 4
14482: PUSH
14483: LD_INT 5
14485: PUSH
14486: LD_INT 6
14488: PUSH
14489: LD_INT 7
14491: PUSH
14492: LD_INT 8
14494: PUSH
14495: LD_INT 9
14497: PUSH
14498: LD_INT 10
14500: PUSH
14501: LD_INT 11
14503: PUSH
14504: LD_INT 12
14506: PUSH
14507: LD_INT 13
14509: PUSH
14510: LD_INT 14
14512: PUSH
14513: LD_INT 15
14515: PUSH
14516: LD_INT 16
14518: PUSH
14519: LD_INT 17
14521: PUSH
14522: LD_INT 18
14524: PUSH
14525: LD_INT 19
14527: PUSH
14528: LD_INT 20
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 22
14536: PUSH
14537: LD_INT 23
14539: PUSH
14540: LD_INT 24
14542: PUSH
14543: LD_INT 25
14545: PUSH
14546: LD_INT 26
14548: PUSH
14549: LD_INT 27
14551: PUSH
14552: LD_INT 28
14554: PUSH
14555: LD_INT 29
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 31
14563: PUSH
14564: LD_INT 32
14566: PUSH
14567: LD_INT 33
14569: PUSH
14570: LD_INT 34
14572: PUSH
14573: LD_INT 35
14575: PUSH
14576: LD_INT 36
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 101
14619: PUSH
14620: LD_INT 102
14622: PUSH
14623: LD_INT 103
14625: PUSH
14626: LD_INT 104
14628: PUSH
14629: LD_INT 105
14631: PUSH
14632: LD_INT 106
14634: PUSH
14635: LD_INT 107
14637: PUSH
14638: LD_INT 108
14640: PUSH
14641: LD_INT 109
14643: PUSH
14644: LD_INT 110
14646: PUSH
14647: LD_INT 111
14649: PUSH
14650: LD_INT 112
14652: PUSH
14653: LD_INT 113
14655: PUSH
14656: LD_INT 114
14658: PUSH
14659: LD_INT 115
14661: PUSH
14662: LD_INT 116
14664: PUSH
14665: LD_INT 117
14667: PUSH
14668: LD_INT 118
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: ST_TO_ADDR
14695: GO 14698
14697: POP
// end else
14698: GO 14929
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14700: LD_ADDR_VAR 0 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 5
14719: PUSH
14720: LD_INT 6
14722: PUSH
14723: LD_INT 7
14725: PUSH
14726: LD_INT 8
14728: PUSH
14729: LD_INT 9
14731: PUSH
14732: LD_INT 10
14734: PUSH
14735: LD_INT 11
14737: PUSH
14738: LD_INT 12
14740: PUSH
14741: LD_INT 13
14743: PUSH
14744: LD_INT 14
14746: PUSH
14747: LD_INT 15
14749: PUSH
14750: LD_INT 16
14752: PUSH
14753: LD_INT 17
14755: PUSH
14756: LD_INT 18
14758: PUSH
14759: LD_INT 19
14761: PUSH
14762: LD_INT 20
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 23
14773: PUSH
14774: LD_INT 24
14776: PUSH
14777: LD_INT 25
14779: PUSH
14780: LD_INT 26
14782: PUSH
14783: LD_INT 27
14785: PUSH
14786: LD_INT 28
14788: PUSH
14789: LD_INT 29
14791: PUSH
14792: LD_INT 30
14794: PUSH
14795: LD_INT 31
14797: PUSH
14798: LD_INT 32
14800: PUSH
14801: LD_INT 33
14803: PUSH
14804: LD_INT 34
14806: PUSH
14807: LD_INT 35
14809: PUSH
14810: LD_INT 36
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 101
14853: PUSH
14854: LD_INT 102
14856: PUSH
14857: LD_INT 103
14859: PUSH
14860: LD_INT 104
14862: PUSH
14863: LD_INT 105
14865: PUSH
14866: LD_INT 106
14868: PUSH
14869: LD_INT 107
14871: PUSH
14872: LD_INT 108
14874: PUSH
14875: LD_INT 109
14877: PUSH
14878: LD_INT 110
14880: PUSH
14881: LD_INT 111
14883: PUSH
14884: LD_INT 112
14886: PUSH
14887: LD_INT 113
14889: PUSH
14890: LD_INT 114
14892: PUSH
14893: LD_INT 115
14895: PUSH
14896: LD_INT 116
14898: PUSH
14899: LD_INT 117
14901: PUSH
14902: LD_INT 118
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: ST_TO_ADDR
// if result then
14929: LD_VAR 0 2
14933: IFFALSE 15719
// begin normal :=  ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_STRING 
14942: ST_TO_ADDR
// hardcore :=  ;
14943: LD_ADDR_VAR 0 6
14947: PUSH
14948: LD_STRING 
14950: ST_TO_ADDR
// active :=  ;
14951: LD_ADDR_VAR 0 7
14955: PUSH
14956: LD_STRING 
14958: ST_TO_ADDR
// for i = 1 to normalCounter do
14959: LD_ADDR_VAR 0 8
14963: PUSH
14964: DOUBLE
14965: LD_INT 1
14967: DEC
14968: ST_TO_ADDR
14969: LD_EXP 44
14973: PUSH
14974: FOR_TO
14975: IFFALSE 15076
// begin tmp := 0 ;
14977: LD_ADDR_VAR 0 3
14981: PUSH
14982: LD_STRING 0
14984: ST_TO_ADDR
// if result [ 1 ] then
14985: LD_VAR 0 2
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: IFFALSE 15058
// if result [ 1 ] [ 1 ] = i then
14995: LD_VAR 0 2
14999: PUSH
15000: LD_INT 1
15002: ARRAY
15003: PUSH
15004: LD_INT 1
15006: ARRAY
15007: PUSH
15008: LD_VAR 0 8
15012: EQUAL
15013: IFFALSE 15058
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: LD_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 3
15044: PPUSH
15045: CALL_OW 1
15049: ST_TO_ADDR
// tmp := 1 ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_STRING 1
15057: ST_TO_ADDR
// end ; normal := normal & tmp ;
15058: LD_ADDR_VAR 0 5
15062: PUSH
15063: LD_VAR 0 5
15067: PUSH
15068: LD_VAR 0 3
15072: STR
15073: ST_TO_ADDR
// end ;
15074: GO 14974
15076: POP
15077: POP
// for i = 1 to hardcoreCounter do
15078: LD_ADDR_VAR 0 8
15082: PUSH
15083: DOUBLE
15084: LD_INT 1
15086: DEC
15087: ST_TO_ADDR
15088: LD_EXP 45
15092: PUSH
15093: FOR_TO
15094: IFFALSE 15199
// begin tmp := 0 ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_STRING 0
15103: ST_TO_ADDR
// if result [ 2 ] then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_INT 2
15111: ARRAY
15112: IFFALSE 15181
// if result [ 2 ] [ 1 ] = 100 + i then
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 2
15121: ARRAY
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: PUSH
15127: LD_INT 100
15129: PUSH
15130: LD_VAR 0 8
15134: PLUS
15135: EQUAL
15136: IFFALSE 15181
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_VAR 0 2
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: LD_VAR 0 2
15155: PUSH
15156: LD_INT 2
15158: ARRAY
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 3
15167: PPUSH
15168: CALL_OW 1
15172: ST_TO_ADDR
// tmp := 1 ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 1
15180: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15181: LD_ADDR_VAR 0 6
15185: PUSH
15186: LD_VAR 0 6
15190: PUSH
15191: LD_VAR 0 3
15195: STR
15196: ST_TO_ADDR
// end ;
15197: GO 15093
15199: POP
15200: POP
// if isGameLoad then
15201: LD_VAR 0 1
15205: IFFALSE 15680
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15207: LD_ADDR_VAR 0 4
15211: PUSH
15212: LD_EXP 48
15216: PUSH
15217: LD_EXP 47
15221: PUSH
15222: LD_EXP 49
15226: PUSH
15227: LD_EXP 46
15231: PUSH
15232: LD_EXP 50
15236: PUSH
15237: LD_EXP 51
15241: PUSH
15242: LD_EXP 52
15246: PUSH
15247: LD_EXP 53
15251: PUSH
15252: LD_EXP 54
15256: PUSH
15257: LD_EXP 55
15261: PUSH
15262: LD_EXP 56
15266: PUSH
15267: LD_EXP 57
15271: PUSH
15272: LD_EXP 58
15276: PUSH
15277: LD_EXP 59
15281: PUSH
15282: LD_EXP 67
15286: PUSH
15287: LD_EXP 68
15291: PUSH
15292: LD_EXP 69
15296: PUSH
15297: LD_EXP 70
15301: PUSH
15302: LD_EXP 72
15306: PUSH
15307: LD_EXP 73
15311: PUSH
15312: LD_EXP 74
15316: PUSH
15317: LD_EXP 77
15321: PUSH
15322: LD_EXP 79
15326: PUSH
15327: LD_EXP 80
15331: PUSH
15332: LD_EXP 81
15336: PUSH
15337: LD_EXP 83
15341: PUSH
15342: LD_EXP 84
15346: PUSH
15347: LD_EXP 87
15351: PUSH
15352: LD_EXP 88
15356: PUSH
15357: LD_EXP 89
15361: PUSH
15362: LD_EXP 90
15366: PUSH
15367: LD_EXP 91
15371: PUSH
15372: LD_EXP 92
15376: PUSH
15377: LD_EXP 93
15381: PUSH
15382: LD_EXP 94
15386: PUSH
15387: LD_EXP 95
15391: PUSH
15392: LD_EXP 60
15396: PUSH
15397: LD_EXP 61
15401: PUSH
15402: LD_EXP 64
15406: PUSH
15407: LD_EXP 65
15411: PUSH
15412: LD_EXP 66
15416: PUSH
15417: LD_EXP 62
15421: PUSH
15422: LD_EXP 63
15426: PUSH
15427: LD_EXP 71
15431: PUSH
15432: LD_EXP 75
15436: PUSH
15437: LD_EXP 76
15441: PUSH
15442: LD_EXP 78
15446: PUSH
15447: LD_EXP 82
15451: PUSH
15452: LD_EXP 85
15456: PUSH
15457: LD_EXP 86
15461: PUSH
15462: LD_EXP 96
15466: PUSH
15467: LD_EXP 97
15471: PUSH
15472: LD_EXP 98
15476: PUSH
15477: LD_EXP 99
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: ST_TO_ADDR
// tmp :=  ;
15538: LD_ADDR_VAR 0 3
15542: PUSH
15543: LD_STRING 
15545: ST_TO_ADDR
// for i = 1 to normalCounter do
15546: LD_ADDR_VAR 0 8
15550: PUSH
15551: DOUBLE
15552: LD_INT 1
15554: DEC
15555: ST_TO_ADDR
15556: LD_EXP 44
15560: PUSH
15561: FOR_TO
15562: IFFALSE 15598
// begin if flags [ i ] then
15564: LD_VAR 0 4
15568: PUSH
15569: LD_VAR 0 8
15573: ARRAY
15574: IFFALSE 15596
// tmp := tmp & i & ; ;
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 8
15590: STR
15591: PUSH
15592: LD_STRING ;
15594: STR
15595: ST_TO_ADDR
// end ;
15596: GO 15561
15598: POP
15599: POP
// for i = 1 to hardcoreCounter do
15600: LD_ADDR_VAR 0 8
15604: PUSH
15605: DOUBLE
15606: LD_INT 1
15608: DEC
15609: ST_TO_ADDR
15610: LD_EXP 45
15614: PUSH
15615: FOR_TO
15616: IFFALSE 15662
// begin if flags [ normalCounter + i ] then
15618: LD_VAR 0 4
15622: PUSH
15623: LD_EXP 44
15627: PUSH
15628: LD_VAR 0 8
15632: PLUS
15633: ARRAY
15634: IFFALSE 15660
// tmp := tmp & ( 100 + i ) & ; ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_VAR 0 3
15645: PUSH
15646: LD_INT 100
15648: PUSH
15649: LD_VAR 0 8
15653: PLUS
15654: STR
15655: PUSH
15656: LD_STRING ;
15658: STR
15659: ST_TO_ADDR
// end ;
15660: GO 15615
15662: POP
15663: POP
// if tmp then
15664: LD_VAR 0 3
15668: IFFALSE 15680
// active := tmp ;
15670: LD_ADDR_VAR 0 7
15674: PUSH
15675: LD_VAR 0 3
15679: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15680: LD_STRING getStreamItemsFromMission("
15682: PUSH
15683: LD_VAR 0 5
15687: STR
15688: PUSH
15689: LD_STRING ","
15691: STR
15692: PUSH
15693: LD_VAR 0 6
15697: STR
15698: PUSH
15699: LD_STRING ","
15701: STR
15702: PUSH
15703: LD_VAR 0 7
15707: STR
15708: PUSH
15709: LD_STRING ")
15711: STR
15712: PPUSH
15713: CALL_OW 559
// end else
15717: GO 15726
// ToLua ( getStreamItemsFromMission("","","") ) ;
15719: LD_STRING getStreamItemsFromMission("","","")
15721: PPUSH
15722: CALL_OW 559
// end ;
15726: LD_VAR 0 2
15730: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15731: LD_EXP 43
15735: PUSH
15736: LD_EXP 48
15740: AND
15741: IFFALSE 15865
15743: GO 15745
15745: DISABLE
15746: LD_INT 0
15748: PPUSH
15749: PPUSH
// begin enable ;
15750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_INT 22
15758: PUSH
15759: LD_OWVAR 2
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: LD_INT 34
15773: PUSH
15774: LD_INT 7
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 34
15783: PUSH
15784: LD_INT 45
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 34
15793: PUSH
15794: LD_INT 28
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 34
15803: PUSH
15804: LD_INT 47
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: ST_TO_ADDR
// if not tmp then
15827: LD_VAR 0 2
15831: NOT
15832: IFFALSE 15836
// exit ;
15834: GO 15865
// for i in tmp do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 2
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15863
// begin SetLives ( i , 0 ) ;
15849: LD_VAR 0 1
15853: PPUSH
15854: LD_INT 0
15856: PPUSH
15857: CALL_OW 234
// end ;
15861: GO 15846
15863: POP
15864: POP
// end ;
15865: PPOPN 2
15867: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15868: LD_EXP 43
15872: PUSH
15873: LD_EXP 49
15877: AND
15878: IFFALSE 15962
15880: GO 15882
15882: DISABLE
15883: LD_INT 0
15885: PPUSH
15886: PPUSH
// begin enable ;
15887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_OWVAR 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 32
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: ST_TO_ADDR
// if not tmp then
15924: LD_VAR 0 2
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 15962
// for i in tmp do
15933: LD_ADDR_VAR 0 1
15937: PUSH
15938: LD_VAR 0 2
15942: PUSH
15943: FOR_IN
15944: IFFALSE 15960
// begin SetLives ( i , 0 ) ;
15946: LD_VAR 0 1
15950: PPUSH
15951: LD_INT 0
15953: PPUSH
15954: CALL_OW 234
// end ;
15958: GO 15943
15960: POP
15961: POP
// end ;
15962: PPOPN 2
15964: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15965: LD_EXP 43
15969: PUSH
15970: LD_EXP 46
15974: AND
15975: IFFALSE 16068
15977: GO 15979
15979: DISABLE
15980: LD_INT 0
15982: PPUSH
// begin enable ;
15983: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_OWVAR 2
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 25
16006: PUSH
16007: LD_INT 5
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 25
16016: PUSH
16017: LD_INT 9
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 25
16026: PUSH
16027: LD_INT 8
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: PUSH
16049: FOR_IN
16050: IFFALSE 16066
// begin SetClass ( i , 1 ) ;
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 336
// end ;
16064: GO 16049
16066: POP
16067: POP
// end ;
16068: PPOPN 1
16070: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16071: LD_EXP 43
16075: PUSH
16076: LD_EXP 47
16080: AND
16081: PUSH
16082: LD_OWVAR 65
16086: PUSH
16087: LD_INT 7
16089: LESS
16090: AND
16091: IFFALSE 16105
16093: GO 16095
16095: DISABLE
// begin enable ;
16096: ENABLE
// game_speed := 7 ;
16097: LD_ADDR_OWVAR 65
16101: PUSH
16102: LD_INT 7
16104: ST_TO_ADDR
// end ;
16105: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16106: LD_EXP 43
16110: PUSH
16111: LD_EXP 50
16115: AND
16116: IFFALSE 16318
16118: GO 16120
16120: DISABLE
16121: LD_INT 0
16123: PPUSH
16124: PPUSH
16125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_INT 81
16133: PUSH
16134: LD_OWVAR 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 21
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: ST_TO_ADDR
// if not tmp then
16162: LD_VAR 0 3
16166: NOT
16167: IFFALSE 16171
// exit ;
16169: GO 16318
// if tmp > 5 then
16171: LD_VAR 0 3
16175: PUSH
16176: LD_INT 5
16178: GREATER
16179: IFFALSE 16191
// k := 5 else
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_INT 5
16188: ST_TO_ADDR
16189: GO 16201
// k := tmp ;
16191: LD_ADDR_VAR 0 2
16195: PUSH
16196: LD_VAR 0 3
16200: ST_TO_ADDR
// for i := 1 to k do
16201: LD_ADDR_VAR 0 1
16205: PUSH
16206: DOUBLE
16207: LD_INT 1
16209: DEC
16210: ST_TO_ADDR
16211: LD_VAR 0 2
16215: PUSH
16216: FOR_TO
16217: IFFALSE 16316
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16219: LD_VAR 0 3
16223: PUSH
16224: LD_VAR 0 1
16228: ARRAY
16229: PPUSH
16230: LD_VAR 0 1
16234: PUSH
16235: LD_INT 4
16237: MOD
16238: PUSH
16239: LD_INT 1
16241: PLUS
16242: PPUSH
16243: CALL_OW 259
16247: PUSH
16248: LD_INT 10
16250: LESS
16251: IFFALSE 16314
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16253: LD_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: ARRAY
16263: PPUSH
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 4
16271: MOD
16272: PUSH
16273: LD_INT 1
16275: PLUS
16276: PPUSH
16277: LD_VAR 0 3
16281: PUSH
16282: LD_VAR 0 1
16286: ARRAY
16287: PPUSH
16288: LD_VAR 0 1
16292: PUSH
16293: LD_INT 4
16295: MOD
16296: PUSH
16297: LD_INT 1
16299: PLUS
16300: PPUSH
16301: CALL_OW 259
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: PPUSH
16310: CALL_OW 237
16314: GO 16216
16316: POP
16317: POP
// end ;
16318: PPOPN 3
16320: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16321: LD_EXP 43
16325: PUSH
16326: LD_EXP 51
16330: AND
16331: IFFALSE 16351
16333: GO 16335
16335: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16336: LD_INT 4
16338: PPUSH
16339: LD_OWVAR 2
16343: PPUSH
16344: LD_INT 0
16346: PPUSH
16347: CALL_OW 324
16351: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16352: LD_EXP 43
16356: PUSH
16357: LD_EXP 80
16361: AND
16362: IFFALSE 16382
16364: GO 16366
16366: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16367: LD_INT 19
16369: PPUSH
16370: LD_OWVAR 2
16374: PPUSH
16375: LD_INT 0
16377: PPUSH
16378: CALL_OW 324
16382: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16383: LD_EXP 43
16387: PUSH
16388: LD_EXP 52
16392: AND
16393: IFFALSE 16495
16395: GO 16397
16397: DISABLE
16398: LD_INT 0
16400: PPUSH
16401: PPUSH
// begin enable ;
16402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: LD_INT 22
16410: PUSH
16411: LD_OWVAR 2
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: LD_INT 34
16425: PUSH
16426: LD_INT 11
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 34
16435: PUSH
16436: LD_INT 30
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 69
16456: ST_TO_ADDR
// if not tmp then
16457: LD_VAR 0 2
16461: NOT
16462: IFFALSE 16466
// exit ;
16464: GO 16495
// for i in tmp do
16466: LD_ADDR_VAR 0 1
16470: PUSH
16471: LD_VAR 0 2
16475: PUSH
16476: FOR_IN
16477: IFFALSE 16493
// begin SetLives ( i , 0 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 0
16486: PPUSH
16487: CALL_OW 234
// end ;
16491: GO 16476
16493: POP
16494: POP
// end ;
16495: PPOPN 2
16497: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16498: LD_EXP 43
16502: PUSH
16503: LD_EXP 53
16507: AND
16508: IFFALSE 16528
16510: GO 16512
16512: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16513: LD_INT 32
16515: PPUSH
16516: LD_OWVAR 2
16520: PPUSH
16521: LD_INT 0
16523: PPUSH
16524: CALL_OW 324
16528: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16529: LD_EXP 43
16533: PUSH
16534: LD_EXP 54
16538: AND
16539: IFFALSE 16720
16541: GO 16543
16543: DISABLE
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
16548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16549: LD_ADDR_VAR 0 2
16553: PUSH
16554: LD_INT 22
16556: PUSH
16557: LD_OWVAR 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 33
16568: PUSH
16569: LD_INT 3
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: ST_TO_ADDR
// if not tmp then
16585: LD_VAR 0 2
16589: NOT
16590: IFFALSE 16594
// exit ;
16592: GO 16720
// side := 0 ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// for i := 1 to 8 do
16602: LD_ADDR_VAR 0 1
16606: PUSH
16607: DOUBLE
16608: LD_INT 1
16610: DEC
16611: ST_TO_ADDR
16612: LD_INT 8
16614: PUSH
16615: FOR_TO
16616: IFFALSE 16664
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16618: LD_OWVAR 2
16622: PUSH
16623: LD_VAR 0 1
16627: NONEQUAL
16628: PUSH
16629: LD_OWVAR 2
16633: PPUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 81
16643: PUSH
16644: LD_INT 2
16646: EQUAL
16647: AND
16648: IFFALSE 16662
// begin side := i ;
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_VAR 0 1
16659: ST_TO_ADDR
// break ;
16660: GO 16664
// end ;
16662: GO 16615
16664: POP
16665: POP
// if not side then
16666: LD_VAR 0 3
16670: NOT
16671: IFFALSE 16675
// exit ;
16673: GO 16720
// for i := 1 to tmp do
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: DOUBLE
16681: LD_INT 1
16683: DEC
16684: ST_TO_ADDR
16685: LD_VAR 0 2
16689: PUSH
16690: FOR_TO
16691: IFFALSE 16718
// if Prob ( 60 ) then
16693: LD_INT 60
16695: PPUSH
16696: CALL_OW 13
16700: IFFALSE 16716
// SetSide ( i , side ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 235
16716: GO 16690
16718: POP
16719: POP
// end ;
16720: PPOPN 3
16722: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16723: LD_EXP 43
16727: PUSH
16728: LD_EXP 56
16732: AND
16733: IFFALSE 16852
16735: GO 16737
16737: DISABLE
16738: LD_INT 0
16740: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16741: LD_ADDR_VAR 0 1
16745: PUSH
16746: LD_INT 22
16748: PUSH
16749: LD_OWVAR 2
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 21
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 3
16770: PUSH
16771: LD_INT 23
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: PUSH
16795: FOR_IN
16796: IFFALSE 16850
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 257
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 4
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: IN
16826: IFFALSE 16848
// SetClass ( un , rand ( 1 , 4 ) ) ;
16828: LD_VAR 0 1
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: LD_INT 4
16838: PPUSH
16839: CALL_OW 12
16843: PPUSH
16844: CALL_OW 336
16848: GO 16795
16850: POP
16851: POP
// end ;
16852: PPOPN 1
16854: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16855: LD_EXP 43
16859: PUSH
16860: LD_EXP 55
16864: AND
16865: IFFALSE 16944
16867: GO 16869
16869: DISABLE
16870: LD_INT 0
16872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16873: LD_ADDR_VAR 0 1
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_OWVAR 2
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 21
16892: PUSH
16893: LD_INT 3
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: ST_TO_ADDR
// if not tmp then
16909: LD_VAR 0 1
16913: NOT
16914: IFFALSE 16918
// exit ;
16916: GO 16944
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16918: LD_VAR 0 1
16922: PUSH
16923: LD_INT 1
16925: PPUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 12
16935: ARRAY
16936: PPUSH
16937: LD_INT 100
16939: PPUSH
16940: CALL_OW 234
// end ;
16944: PPOPN 1
16946: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16947: LD_EXP 43
16951: PUSH
16952: LD_EXP 57
16956: AND
16957: IFFALSE 17055
16959: GO 16961
16961: DISABLE
16962: LD_INT 0
16964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_INT 22
16972: PUSH
16973: LD_OWVAR 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 21
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 69
17000: ST_TO_ADDR
// if not tmp then
17001: LD_VAR 0 1
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17055
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17010: LD_VAR 0 1
17014: PUSH
17015: LD_INT 1
17017: PPUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 12
17027: ARRAY
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: LD_INT 4
17034: PPUSH
17035: CALL_OW 12
17039: PPUSH
17040: LD_INT 3000
17042: PPUSH
17043: LD_INT 9000
17045: PPUSH
17046: CALL_OW 12
17050: PPUSH
17051: CALL_OW 492
// end ;
17055: PPOPN 1
17057: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17058: LD_EXP 43
17062: PUSH
17063: LD_EXP 58
17067: AND
17068: IFFALSE 17088
17070: GO 17072
17072: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17073: LD_INT 1
17075: PPUSH
17076: LD_OWVAR 2
17080: PPUSH
17081: LD_INT 0
17083: PPUSH
17084: CALL_OW 324
17088: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17089: LD_EXP 43
17093: PUSH
17094: LD_EXP 59
17098: AND
17099: IFFALSE 17182
17101: GO 17103
17103: DISABLE
17104: LD_INT 0
17106: PPUSH
17107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 22
17115: PUSH
17116: LD_OWVAR 2
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 21
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 69
17143: ST_TO_ADDR
// if not tmp then
17144: LD_VAR 0 2
17148: NOT
17149: IFFALSE 17153
// exit ;
17151: GO 17182
// for i in tmp do
17153: LD_ADDR_VAR 0 1
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: FOR_IN
17164: IFFALSE 17180
// SetBLevel ( i , 10 ) ;
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_INT 10
17173: PPUSH
17174: CALL_OW 241
17178: GO 17163
17180: POP
17181: POP
// end ;
17182: PPOPN 2
17184: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17185: LD_EXP 43
17189: PUSH
17190: LD_EXP 60
17194: AND
17195: IFFALSE 17306
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17205: LD_ADDR_VAR 0 3
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 25
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 3
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17306
// un := tmp [ rand ( 1 , tmp ) ] ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_INT 1
17262: PPUSH
17263: LD_VAR 0 3
17267: PPUSH
17268: CALL_OW 12
17272: ARRAY
17273: ST_TO_ADDR
// if Crawls ( un ) then
17274: LD_VAR 0 2
17278: PPUSH
17279: CALL_OW 318
17283: IFFALSE 17294
// ComWalk ( un ) ;
17285: LD_VAR 0 2
17289: PPUSH
17290: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17294: LD_VAR 0 2
17298: PPUSH
17299: LD_INT 5
17301: PPUSH
17302: CALL_OW 336
// end ;
17306: PPOPN 3
17308: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17309: LD_EXP 43
17313: PUSH
17314: LD_EXP 61
17318: AND
17319: PUSH
17320: LD_OWVAR 67
17324: PUSH
17325: LD_INT 4
17327: LESS
17328: AND
17329: IFFALSE 17348
17331: GO 17333
17333: DISABLE
// begin Difficulty := Difficulty + 1 ;
17334: LD_ADDR_OWVAR 67
17338: PUSH
17339: LD_OWVAR 67
17343: PUSH
17344: LD_INT 1
17346: PLUS
17347: ST_TO_ADDR
// end ;
17348: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17349: LD_EXP 43
17353: PUSH
17354: LD_EXP 62
17358: AND
17359: IFFALSE 17462
17361: GO 17363
17363: DISABLE
17364: LD_INT 0
17366: PPUSH
// begin for i := 1 to 5 do
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: DOUBLE
17373: LD_INT 1
17375: DEC
17376: ST_TO_ADDR
17377: LD_INT 5
17379: PUSH
17380: FOR_TO
17381: IFFALSE 17460
// begin uc_nation := nation_nature ;
17383: LD_ADDR_OWVAR 21
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// uc_side := 0 ;
17391: LD_ADDR_OWVAR 20
17395: PUSH
17396: LD_INT 0
17398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17399: LD_ADDR_OWVAR 29
17403: PUSH
17404: LD_INT 12
17406: PUSH
17407: LD_INT 12
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: ST_TO_ADDR
// hc_agressivity := 20 ;
17414: LD_ADDR_OWVAR 35
17418: PUSH
17419: LD_INT 20
17421: ST_TO_ADDR
// hc_class := class_tiger ;
17422: LD_ADDR_OWVAR 28
17426: PUSH
17427: LD_INT 14
17429: ST_TO_ADDR
// hc_gallery :=  ;
17430: LD_ADDR_OWVAR 33
17434: PUSH
17435: LD_STRING 
17437: ST_TO_ADDR
// hc_name :=  ;
17438: LD_ADDR_OWVAR 26
17442: PUSH
17443: LD_STRING 
17445: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17446: CALL_OW 44
17450: PPUSH
17451: LD_INT 0
17453: PPUSH
17454: CALL_OW 51
// end ;
17458: GO 17380
17460: POP
17461: POP
// end ;
17462: PPOPN 1
17464: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17465: LD_EXP 43
17469: PUSH
17470: LD_EXP 63
17474: AND
17475: IFFALSE 17484
17477: GO 17479
17479: DISABLE
// StreamSibBomb ;
17480: CALL 17485 0 0
17484: END
// export function StreamSibBomb ; var i , x , y ; begin
17485: LD_INT 0
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
// result := false ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 0
17498: ST_TO_ADDR
// for i := 1 to 16 do
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: DOUBLE
17505: LD_INT 1
17507: DEC
17508: ST_TO_ADDR
17509: LD_INT 16
17511: PUSH
17512: FOR_TO
17513: IFFALSE 17712
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17515: LD_ADDR_VAR 0 3
17519: PUSH
17520: LD_INT 10
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 40
17531: PUSH
17532: LD_INT 50
17534: PUSH
17535: LD_INT 60
17537: PUSH
17538: LD_INT 70
17540: PUSH
17541: LD_INT 80
17543: PUSH
17544: LD_INT 90
17546: PUSH
17547: LD_INT 100
17549: PUSH
17550: LD_INT 110
17552: PUSH
17553: LD_INT 120
17555: PUSH
17556: LD_INT 130
17558: PUSH
17559: LD_INT 140
17561: PUSH
17562: LD_INT 150
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: PPUSH
17585: LD_INT 15
17587: PPUSH
17588: CALL_OW 12
17592: ARRAY
17593: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17594: LD_ADDR_VAR 0 4
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: LD_INT 20
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 40
17610: PUSH
17611: LD_INT 50
17613: PUSH
17614: LD_INT 60
17616: PUSH
17617: LD_INT 70
17619: PUSH
17620: LD_INT 80
17622: PUSH
17623: LD_INT 90
17625: PUSH
17626: LD_INT 100
17628: PUSH
17629: LD_INT 110
17631: PUSH
17632: LD_INT 120
17634: PUSH
17635: LD_INT 130
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 150
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: PPUSH
17664: LD_INT 15
17666: PPUSH
17667: CALL_OW 12
17671: ARRAY
17672: ST_TO_ADDR
// if ValidHex ( x , y ) then
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_VAR 0 4
17682: PPUSH
17683: CALL_OW 488
17687: IFFALSE 17710
// begin result := [ x , y ] ;
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_VAR 0 3
17698: PUSH
17699: LD_VAR 0 4
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: ST_TO_ADDR
// break ;
17708: GO 17712
// end ; end ;
17710: GO 17512
17712: POP
17713: POP
// if result then
17714: LD_VAR 0 1
17718: IFFALSE 17778
// begin ToLua ( playSibBomb() ) ;
17720: LD_STRING playSibBomb()
17722: PPUSH
17723: CALL_OW 559
// wait ( 0 0$14 ) ;
17727: LD_INT 490
17729: PPUSH
17730: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17734: LD_VAR 0 1
17738: PUSH
17739: LD_INT 1
17741: ARRAY
17742: PPUSH
17743: LD_VAR 0 1
17747: PUSH
17748: LD_INT 2
17750: ARRAY
17751: PPUSH
17752: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17756: LD_VAR 0 1
17760: PUSH
17761: LD_INT 1
17763: ARRAY
17764: PPUSH
17765: LD_VAR 0 1
17769: PUSH
17770: LD_INT 2
17772: ARRAY
17773: PPUSH
17774: CALL_OW 429
// end ; end ;
17778: LD_VAR 0 1
17782: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17783: LD_EXP 43
17787: PUSH
17788: LD_EXP 65
17792: AND
17793: IFFALSE 17805
17795: GO 17797
17797: DISABLE
// YouLost (  ) ;
17798: LD_STRING 
17800: PPUSH
17801: CALL_OW 104
17805: END
// every 0 0$1 trigger StreamModeActive and sFog do
17806: LD_EXP 43
17810: PUSH
17811: LD_EXP 64
17815: AND
17816: IFFALSE 17830
17818: GO 17820
17820: DISABLE
// FogOff ( your_side ) ;
17821: LD_OWVAR 2
17825: PPUSH
17826: CALL_OW 344
17830: END
// every 0 0$1 trigger StreamModeActive and sSun do
17831: LD_EXP 43
17835: PUSH
17836: LD_EXP 66
17840: AND
17841: IFFALSE 17869
17843: GO 17845
17845: DISABLE
// begin solar_recharge_percent := 0 ;
17846: LD_ADDR_OWVAR 79
17850: PUSH
17851: LD_INT 0
17853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17854: LD_INT 10500
17856: PPUSH
17857: CALL_OW 67
// solar_recharge_percent := 100 ;
17861: LD_ADDR_OWVAR 79
17865: PUSH
17866: LD_INT 100
17868: ST_TO_ADDR
// end ;
17869: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17870: LD_EXP 43
17874: PUSH
17875: LD_EXP 67
17879: AND
17880: IFFALSE 18119
17882: GO 17884
17884: DISABLE
17885: LD_INT 0
17887: PPUSH
17888: PPUSH
17889: PPUSH
// begin tmp := [ ] ;
17890: LD_ADDR_VAR 0 3
17894: PUSH
17895: EMPTY
17896: ST_TO_ADDR
// for i := 1 to 6 do
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: DOUBLE
17903: LD_INT 1
17905: DEC
17906: ST_TO_ADDR
17907: LD_INT 6
17909: PUSH
17910: FOR_TO
17911: IFFALSE 18016
// begin uc_nation := nation_nature ;
17913: LD_ADDR_OWVAR 21
17917: PUSH
17918: LD_INT 0
17920: ST_TO_ADDR
// uc_side := 0 ;
17921: LD_ADDR_OWVAR 20
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17929: LD_ADDR_OWVAR 29
17933: PUSH
17934: LD_INT 12
17936: PUSH
17937: LD_INT 12
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: ST_TO_ADDR
// hc_agressivity := 20 ;
17944: LD_ADDR_OWVAR 35
17948: PUSH
17949: LD_INT 20
17951: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17952: LD_ADDR_OWVAR 28
17956: PUSH
17957: LD_INT 17
17959: ST_TO_ADDR
// hc_gallery :=  ;
17960: LD_ADDR_OWVAR 33
17964: PUSH
17965: LD_STRING 
17967: ST_TO_ADDR
// hc_name :=  ;
17968: LD_ADDR_OWVAR 26
17972: PUSH
17973: LD_STRING 
17975: ST_TO_ADDR
// un := CreateHuman ;
17976: LD_ADDR_VAR 0 2
17980: PUSH
17981: CALL_OW 44
17985: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17986: LD_VAR 0 2
17990: PPUSH
17991: LD_INT 1
17993: PPUSH
17994: CALL_OW 51
// tmp := tmp ^ un ;
17998: LD_ADDR_VAR 0 3
18002: PUSH
18003: LD_VAR 0 3
18007: PUSH
18008: LD_VAR 0 2
18012: ADD
18013: ST_TO_ADDR
// end ;
18014: GO 17910
18016: POP
18017: POP
// repeat wait ( 0 0$1 ) ;
18018: LD_INT 35
18020: PPUSH
18021: CALL_OW 67
// for un in tmp do
18025: LD_ADDR_VAR 0 2
18029: PUSH
18030: LD_VAR 0 3
18034: PUSH
18035: FOR_IN
18036: IFFALSE 18110
// begin if IsDead ( un ) then
18038: LD_VAR 0 2
18042: PPUSH
18043: CALL_OW 301
18047: IFFALSE 18067
// begin tmp := tmp diff un ;
18049: LD_ADDR_VAR 0 3
18053: PUSH
18054: LD_VAR 0 3
18058: PUSH
18059: LD_VAR 0 2
18063: DIFF
18064: ST_TO_ADDR
// continue ;
18065: GO 18035
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18067: LD_VAR 0 2
18071: PPUSH
18072: LD_INT 3
18074: PUSH
18075: LD_INT 22
18077: PUSH
18078: LD_INT 0
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: PPUSH
18094: LD_VAR 0 2
18098: PPUSH
18099: CALL_OW 74
18103: PPUSH
18104: CALL_OW 115
// end ;
18108: GO 18035
18110: POP
18111: POP
// until not tmp ;
18112: LD_VAR 0 3
18116: NOT
18117: IFFALSE 18018
// end ;
18119: PPOPN 3
18121: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18122: LD_EXP 43
18126: PUSH
18127: LD_EXP 68
18131: AND
18132: IFFALSE 18186
18134: GO 18136
18136: DISABLE
// begin ToLua ( displayTroll(); ) ;
18137: LD_STRING displayTroll();
18139: PPUSH
18140: CALL_OW 559
// wait ( 3 3$00 ) ;
18144: LD_INT 6300
18146: PPUSH
18147: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18151: LD_STRING hideTroll();
18153: PPUSH
18154: CALL_OW 559
// wait ( 1 1$00 ) ;
18158: LD_INT 2100
18160: PPUSH
18161: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18165: LD_STRING displayTroll();
18167: PPUSH
18168: CALL_OW 559
// wait ( 1 1$00 ) ;
18172: LD_INT 2100
18174: PPUSH
18175: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18179: LD_STRING hideTroll();
18181: PPUSH
18182: CALL_OW 559
// end ;
18186: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18187: LD_EXP 43
18191: PUSH
18192: LD_EXP 69
18196: AND
18197: IFFALSE 18260
18199: GO 18201
18201: DISABLE
18202: LD_INT 0
18204: PPUSH
// begin p := 0 ;
18205: LD_ADDR_VAR 0 1
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// repeat game_speed := 1 ;
18213: LD_ADDR_OWVAR 65
18217: PUSH
18218: LD_INT 1
18220: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18221: LD_INT 35
18223: PPUSH
18224: CALL_OW 67
// p := p + 1 ;
18228: LD_ADDR_VAR 0 1
18232: PUSH
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 1
18240: PLUS
18241: ST_TO_ADDR
// until p >= 60 ;
18242: LD_VAR 0 1
18246: PUSH
18247: LD_INT 60
18249: GREATEREQUAL
18250: IFFALSE 18213
// game_speed := 4 ;
18252: LD_ADDR_OWVAR 65
18256: PUSH
18257: LD_INT 4
18259: ST_TO_ADDR
// end ;
18260: PPOPN 1
18262: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18263: LD_EXP 43
18267: PUSH
18268: LD_EXP 70
18272: AND
18273: IFFALSE 18419
18275: GO 18277
18277: DISABLE
18278: LD_INT 0
18280: PPUSH
18281: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18282: LD_ADDR_VAR 0 1
18286: PUSH
18287: LD_INT 22
18289: PUSH
18290: LD_OWVAR 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 30
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 30
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PPUSH
18331: CALL_OW 69
18335: ST_TO_ADDR
// if not depot then
18336: LD_VAR 0 1
18340: NOT
18341: IFFALSE 18345
// exit ;
18343: GO 18419
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18345: LD_ADDR_VAR 0 2
18349: PUSH
18350: LD_VAR 0 1
18354: PUSH
18355: LD_INT 1
18357: PPUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 12
18367: ARRAY
18368: PPUSH
18369: CALL_OW 274
18373: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: LD_INT 0
18384: PPUSH
18385: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_INT 2
18396: PPUSH
18397: LD_INT 0
18399: PPUSH
18400: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 0
18414: PPUSH
18415: CALL_OW 277
// end ;
18419: PPOPN 2
18421: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18422: LD_EXP 43
18426: PUSH
18427: LD_EXP 71
18431: AND
18432: IFFALSE 18529
18434: GO 18436
18436: DISABLE
18437: LD_INT 0
18439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 21
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 3
18469: PUSH
18470: LD_INT 23
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: ST_TO_ADDR
// if not tmp then
18494: LD_VAR 0 1
18498: NOT
18499: IFFALSE 18503
// exit ;
18501: GO 18529
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18503: LD_VAR 0 1
18507: PUSH
18508: LD_INT 1
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 12
18520: ARRAY
18521: PPUSH
18522: LD_INT 200
18524: PPUSH
18525: CALL_OW 234
// end ;
18529: PPOPN 1
18531: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18532: LD_EXP 43
18536: PUSH
18537: LD_EXP 72
18541: AND
18542: IFFALSE 18621
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18550: LD_ADDR_VAR 0 1
18554: PUSH
18555: LD_INT 22
18557: PUSH
18558: LD_OWVAR 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: ST_TO_ADDR
// if not tmp then
18586: LD_VAR 0 1
18590: NOT
18591: IFFALSE 18595
// exit ;
18593: GO 18621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18595: LD_VAR 0 1
18599: PUSH
18600: LD_INT 1
18602: PPUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 12
18612: ARRAY
18613: PPUSH
18614: LD_INT 60
18616: PPUSH
18617: CALL_OW 234
// end ;
18621: PPOPN 1
18623: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18624: LD_EXP 43
18628: PUSH
18629: LD_EXP 73
18633: AND
18634: IFFALSE 18733
18636: GO 18638
18638: DISABLE
18639: LD_INT 0
18641: PPUSH
18642: PPUSH
// begin enable ;
18643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18644: LD_ADDR_VAR 0 1
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_OWVAR 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 61
18663: PUSH
18664: EMPTY
18665: LIST
18666: PUSH
18667: LD_INT 33
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PPUSH
18682: CALL_OW 69
18686: ST_TO_ADDR
// if not tmp then
18687: LD_VAR 0 1
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 18733
// for i in tmp do
18696: LD_ADDR_VAR 0 2
18700: PUSH
18701: LD_VAR 0 1
18705: PUSH
18706: FOR_IN
18707: IFFALSE 18731
// if IsControledBy ( i ) then
18709: LD_VAR 0 2
18713: PPUSH
18714: CALL_OW 312
18718: IFFALSE 18729
// ComUnlink ( i ) ;
18720: LD_VAR 0 2
18724: PPUSH
18725: CALL_OW 136
18729: GO 18706
18731: POP
18732: POP
// end ;
18733: PPOPN 2
18735: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18736: LD_EXP 43
18740: PUSH
18741: LD_EXP 74
18745: AND
18746: IFFALSE 18886
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
18754: PPUSH
// begin ToLua ( displayPowell(); ) ;
18755: LD_STRING displayPowell();
18757: PPUSH
18758: CALL_OW 559
// uc_side := 0 ;
18762: LD_ADDR_OWVAR 20
18766: PUSH
18767: LD_INT 0
18769: ST_TO_ADDR
// uc_nation := 2 ;
18770: LD_ADDR_OWVAR 21
18774: PUSH
18775: LD_INT 2
18777: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18778: LD_ADDR_OWVAR 37
18782: PUSH
18783: LD_INT 14
18785: ST_TO_ADDR
// vc_engine := engine_siberite ;
18786: LD_ADDR_OWVAR 39
18790: PUSH
18791: LD_INT 3
18793: ST_TO_ADDR
// vc_control := control_apeman ;
18794: LD_ADDR_OWVAR 38
18798: PUSH
18799: LD_INT 5
18801: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18802: LD_ADDR_OWVAR 40
18806: PUSH
18807: LD_INT 29
18809: ST_TO_ADDR
// un := CreateVehicle ;
18810: LD_ADDR_VAR 0 2
18814: PUSH
18815: CALL_OW 45
18819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18820: LD_VAR 0 2
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18832: LD_INT 35
18834: PPUSH
18835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18839: LD_VAR 0 2
18843: PPUSH
18844: LD_INT 22
18846: PUSH
18847: LD_OWVAR 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PPUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL_OW 74
18870: PPUSH
18871: CALL_OW 115
// until IsDead ( un ) ;
18875: LD_VAR 0 2
18879: PPUSH
18880: CALL_OW 301
18884: IFFALSE 18832
// end ;
18886: PPOPN 2
18888: END
// every 0 0$1 trigger StreamModeActive and sStu do
18889: LD_EXP 43
18893: PUSH
18894: LD_EXP 82
18898: AND
18899: IFFALSE 18915
18901: GO 18903
18903: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18904: LD_STRING displayStucuk();
18906: PPUSH
18907: CALL_OW 559
// ResetFog ;
18911: CALL_OW 335
// end ;
18915: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18916: LD_EXP 43
18920: PUSH
18921: LD_EXP 75
18925: AND
18926: IFFALSE 19067
18928: GO 18930
18930: DISABLE
18931: LD_INT 0
18933: PPUSH
18934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18935: LD_ADDR_VAR 0 2
18939: PUSH
18940: LD_INT 22
18942: PUSH
18943: LD_OWVAR 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 21
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: ST_TO_ADDR
// if not tmp then
18971: LD_VAR 0 2
18975: NOT
18976: IFFALSE 18980
// exit ;
18978: GO 19067
// un := tmp [ rand ( 1 , tmp ) ] ;
18980: LD_ADDR_VAR 0 1
18984: PUSH
18985: LD_VAR 0 2
18989: PUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_VAR 0 2
18997: PPUSH
18998: CALL_OW 12
19002: ARRAY
19003: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_INT 0
19011: PPUSH
19012: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19016: LD_VAR 0 1
19020: PPUSH
19021: LD_OWVAR 3
19025: PUSH
19026: LD_VAR 0 1
19030: DIFF
19031: PPUSH
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 74
19041: PPUSH
19042: CALL_OW 115
// wait ( 0 0$20 ) ;
19046: LD_INT 700
19048: PPUSH
19049: CALL_OW 67
// SetSide ( un , your_side ) ;
19053: LD_VAR 0 1
19057: PPUSH
19058: LD_OWVAR 2
19062: PPUSH
19063: CALL_OW 235
// end ;
19067: PPOPN 2
19069: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19070: LD_EXP 43
19074: PUSH
19075: LD_EXP 76
19079: AND
19080: IFFALSE 19186
19082: GO 19084
19084: DISABLE
19085: LD_INT 0
19087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19088: LD_ADDR_VAR 0 1
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_OWVAR 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: LD_INT 30
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 30
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PPUSH
19137: CALL_OW 69
19141: ST_TO_ADDR
// if not depot then
19142: LD_VAR 0 1
19146: NOT
19147: IFFALSE 19151
// exit ;
19149: GO 19186
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19151: LD_VAR 0 1
19155: PUSH
19156: LD_INT 1
19158: ARRAY
19159: PPUSH
19160: CALL_OW 250
19164: PPUSH
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: CALL_OW 251
19178: PPUSH
19179: LD_INT 70
19181: PPUSH
19182: CALL_OW 495
// end ;
19186: PPOPN 1
19188: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19189: LD_EXP 43
19193: PUSH
19194: LD_EXP 77
19198: AND
19199: IFFALSE 19410
19201: GO 19203
19203: DISABLE
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
19208: PPUSH
19209: PPUSH
19210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19211: LD_ADDR_VAR 0 5
19215: PUSH
19216: LD_INT 22
19218: PUSH
19219: LD_OWVAR 2
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: ST_TO_ADDR
// if not tmp then
19247: LD_VAR 0 5
19251: NOT
19252: IFFALSE 19256
// exit ;
19254: GO 19410
// for i in tmp do
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: LD_VAR 0 5
19265: PUSH
19266: FOR_IN
19267: IFFALSE 19408
// begin d := rand ( 0 , 5 ) ;
19269: LD_ADDR_VAR 0 4
19273: PUSH
19274: LD_INT 0
19276: PPUSH
19277: LD_INT 5
19279: PPUSH
19280: CALL_OW 12
19284: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19285: LD_ADDR_VAR 0 2
19289: PUSH
19290: LD_VAR 0 1
19294: PPUSH
19295: CALL_OW 250
19299: PPUSH
19300: LD_VAR 0 4
19304: PPUSH
19305: LD_INT 3
19307: PPUSH
19308: LD_INT 12
19310: PPUSH
19311: CALL_OW 12
19315: PPUSH
19316: CALL_OW 272
19320: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 251
19335: PPUSH
19336: LD_VAR 0 4
19340: PPUSH
19341: LD_INT 3
19343: PPUSH
19344: LD_INT 12
19346: PPUSH
19347: CALL_OW 12
19351: PPUSH
19352: CALL_OW 273
19356: ST_TO_ADDR
// if ValidHex ( x , y ) then
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: CALL_OW 488
19371: IFFALSE 19406
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19373: LD_VAR 0 1
19377: PPUSH
19378: LD_VAR 0 2
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 3
19390: PPUSH
19391: LD_INT 6
19393: PPUSH
19394: CALL_OW 12
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL_OW 483
// end ;
19406: GO 19266
19408: POP
19409: POP
// end ;
19410: PPOPN 5
19412: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19413: LD_EXP 43
19417: PUSH
19418: LD_EXP 78
19422: AND
19423: IFFALSE 19517
19425: GO 19427
19427: DISABLE
19428: LD_INT 0
19430: PPUSH
19431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19432: LD_ADDR_VAR 0 2
19436: PUSH
19437: LD_INT 22
19439: PUSH
19440: LD_OWVAR 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 32
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 21
19461: PUSH
19462: LD_INT 2
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 69
19478: ST_TO_ADDR
// if not tmp then
19479: LD_VAR 0 2
19483: NOT
19484: IFFALSE 19488
// exit ;
19486: GO 19517
// for i in tmp do
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_VAR 0 2
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19515
// SetFuel ( i , 0 ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_INT 0
19508: PPUSH
19509: CALL_OW 240
19513: GO 19498
19515: POP
19516: POP
// end ;
19517: PPOPN 2
19519: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19520: LD_EXP 43
19524: PUSH
19525: LD_EXP 79
19529: AND
19530: IFFALSE 19596
19532: GO 19534
19534: DISABLE
19535: LD_INT 0
19537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19538: LD_ADDR_VAR 0 1
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_OWVAR 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 30
19557: PUSH
19558: LD_INT 29
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PPUSH
19569: CALL_OW 69
19573: ST_TO_ADDR
// if not tmp then
19574: LD_VAR 0 1
19578: NOT
19579: IFFALSE 19583
// exit ;
19581: GO 19596
// DestroyUnit ( tmp [ 1 ] ) ;
19583: LD_VAR 0 1
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: PPUSH
19592: CALL_OW 65
// end ;
19596: PPOPN 1
19598: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19599: LD_EXP 43
19603: PUSH
19604: LD_EXP 81
19608: AND
19609: IFFALSE 19738
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin uc_side := 0 ;
19617: LD_ADDR_OWVAR 20
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// uc_nation := nation_arabian ;
19625: LD_ADDR_OWVAR 21
19629: PUSH
19630: LD_INT 2
19632: ST_TO_ADDR
// hc_gallery :=  ;
19633: LD_ADDR_OWVAR 33
19637: PUSH
19638: LD_STRING 
19640: ST_TO_ADDR
// hc_name :=  ;
19641: LD_ADDR_OWVAR 26
19645: PUSH
19646: LD_STRING 
19648: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19649: LD_INT 1
19651: PPUSH
19652: LD_INT 11
19654: PPUSH
19655: LD_INT 10
19657: PPUSH
19658: CALL_OW 380
// un := CreateHuman ;
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: CALL_OW 44
19671: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 1
19679: PPUSH
19680: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19684: LD_INT 35
19686: PPUSH
19687: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19691: LD_VAR 0 1
19695: PPUSH
19696: LD_INT 22
19698: PUSH
19699: LD_OWVAR 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PPUSH
19708: CALL_OW 69
19712: PPUSH
19713: LD_VAR 0 1
19717: PPUSH
19718: CALL_OW 74
19722: PPUSH
19723: CALL_OW 115
// until IsDead ( un ) ;
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 301
19736: IFFALSE 19684
// end ;
19738: PPOPN 1
19740: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19741: LD_EXP 43
19745: PUSH
19746: LD_EXP 83
19750: AND
19751: IFFALSE 19763
19753: GO 19755
19755: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19756: LD_STRING earthquake(getX(game), 0, 32)
19758: PPUSH
19759: CALL_OW 559
19763: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19764: LD_EXP 43
19768: PUSH
19769: LD_EXP 84
19773: AND
19774: IFFALSE 19865
19776: GO 19778
19778: DISABLE
19779: LD_INT 0
19781: PPUSH
// begin enable ;
19782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19783: LD_ADDR_VAR 0 1
19787: PUSH
19788: LD_INT 22
19790: PUSH
19791: LD_OWVAR 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 21
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 33
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: ST_TO_ADDR
// if not tmp then
19830: LD_VAR 0 1
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 19865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19839: LD_VAR 0 1
19843: PUSH
19844: LD_INT 1
19846: PPUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 12
19856: ARRAY
19857: PPUSH
19858: LD_INT 1
19860: PPUSH
19861: CALL_OW 234
// end ;
19865: PPOPN 1
19867: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19868: LD_EXP 43
19872: PUSH
19873: LD_EXP 85
19877: AND
19878: IFFALSE 20019
19880: GO 19882
19882: DISABLE
19883: LD_INT 0
19885: PPUSH
19886: PPUSH
19887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19888: LD_ADDR_VAR 0 3
19892: PUSH
19893: LD_INT 22
19895: PUSH
19896: LD_OWVAR 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 25
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PPUSH
19919: CALL_OW 69
19923: ST_TO_ADDR
// if not tmp then
19924: LD_VAR 0 3
19928: NOT
19929: IFFALSE 19933
// exit ;
19931: GO 20019
// un := tmp [ rand ( 1 , tmp ) ] ;
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 1
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL_OW 12
19955: ARRAY
19956: ST_TO_ADDR
// if Crawls ( un ) then
19957: LD_VAR 0 2
19961: PPUSH
19962: CALL_OW 318
19966: IFFALSE 19977
// ComWalk ( un ) ;
19968: LD_VAR 0 2
19972: PPUSH
19973: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19977: LD_VAR 0 2
19981: PPUSH
19982: LD_INT 9
19984: PPUSH
19985: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19989: LD_INT 28
19991: PPUSH
19992: LD_OWVAR 2
19996: PPUSH
19997: LD_INT 2
19999: PPUSH
20000: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20004: LD_INT 29
20006: PPUSH
20007: LD_OWVAR 2
20011: PPUSH
20012: LD_INT 2
20014: PPUSH
20015: CALL_OW 322
// end ;
20019: PPOPN 3
20021: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20022: LD_EXP 43
20026: PUSH
20027: LD_EXP 86
20031: AND
20032: IFFALSE 20143
20034: GO 20036
20036: DISABLE
20037: LD_INT 0
20039: PPUSH
20040: PPUSH
20041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20042: LD_ADDR_VAR 0 3
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_OWVAR 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 25
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 69
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 3
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20143
// un := tmp [ rand ( 1 , tmp ) ] ;
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_VAR 0 3
20096: PUSH
20097: LD_INT 1
20099: PPUSH
20100: LD_VAR 0 3
20104: PPUSH
20105: CALL_OW 12
20109: ARRAY
20110: ST_TO_ADDR
// if Crawls ( un ) then
20111: LD_VAR 0 2
20115: PPUSH
20116: CALL_OW 318
20120: IFFALSE 20131
// ComWalk ( un ) ;
20122: LD_VAR 0 2
20126: PPUSH
20127: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: LD_INT 8
20138: PPUSH
20139: CALL_OW 336
// end ;
20143: PPOPN 3
20145: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20146: LD_EXP 43
20150: PUSH
20151: LD_EXP 87
20155: AND
20156: IFFALSE 20300
20158: GO 20160
20160: DISABLE
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20165: LD_ADDR_VAR 0 2
20169: PUSH
20170: LD_INT 22
20172: PUSH
20173: LD_OWVAR 2
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 21
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: LD_INT 34
20197: PUSH
20198: LD_INT 12
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 34
20207: PUSH
20208: LD_INT 51
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 34
20217: PUSH
20218: LD_INT 32
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 2
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20300
// for i in tmp do
20250: LD_ADDR_VAR 0 1
20254: PUSH
20255: LD_VAR 0 2
20259: PUSH
20260: FOR_IN
20261: IFFALSE 20298
// if GetCargo ( i , mat_artifact ) = 0 then
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_INT 4
20270: PPUSH
20271: CALL_OW 289
20275: PUSH
20276: LD_INT 0
20278: EQUAL
20279: IFFALSE 20296
// SetCargo ( i , mat_siberit , 100 ) ;
20281: LD_VAR 0 1
20285: PPUSH
20286: LD_INT 3
20288: PPUSH
20289: LD_INT 100
20291: PPUSH
20292: CALL_OW 290
20296: GO 20260
20298: POP
20299: POP
// end ;
20300: PPOPN 2
20302: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20303: LD_EXP 43
20307: PUSH
20308: LD_EXP 88
20312: AND
20313: IFFALSE 20496
20315: GO 20317
20317: DISABLE
20318: LD_INT 0
20320: PPUSH
20321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20322: LD_ADDR_VAR 0 2
20326: PUSH
20327: LD_INT 22
20329: PUSH
20330: LD_OWVAR 2
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 69
20343: ST_TO_ADDR
// if not tmp then
20344: LD_VAR 0 2
20348: NOT
20349: IFFALSE 20353
// exit ;
20351: GO 20496
// for i := 1 to 2 do
20353: LD_ADDR_VAR 0 1
20357: PUSH
20358: DOUBLE
20359: LD_INT 1
20361: DEC
20362: ST_TO_ADDR
20363: LD_INT 2
20365: PUSH
20366: FOR_TO
20367: IFFALSE 20494
// begin uc_side := your_side ;
20369: LD_ADDR_OWVAR 20
20373: PUSH
20374: LD_OWVAR 2
20378: ST_TO_ADDR
// uc_nation := nation_american ;
20379: LD_ADDR_OWVAR 21
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// vc_chassis := us_morphling ;
20387: LD_ADDR_OWVAR 37
20391: PUSH
20392: LD_INT 5
20394: ST_TO_ADDR
// vc_engine := engine_siberite ;
20395: LD_ADDR_OWVAR 39
20399: PUSH
20400: LD_INT 3
20402: ST_TO_ADDR
// vc_control := control_computer ;
20403: LD_ADDR_OWVAR 38
20407: PUSH
20408: LD_INT 3
20410: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20411: LD_ADDR_OWVAR 40
20415: PUSH
20416: LD_INT 10
20418: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20419: LD_VAR 0 2
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PPUSH
20428: CALL_OW 310
20432: NOT
20433: IFFALSE 20480
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20435: CALL_OW 45
20439: PPUSH
20440: LD_VAR 0 2
20444: PUSH
20445: LD_INT 1
20447: ARRAY
20448: PPUSH
20449: CALL_OW 250
20453: PPUSH
20454: LD_VAR 0 2
20458: PUSH
20459: LD_INT 1
20461: ARRAY
20462: PPUSH
20463: CALL_OW 251
20467: PPUSH
20468: LD_INT 12
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 50
20478: GO 20492
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20480: CALL_OW 45
20484: PPUSH
20485: LD_INT 1
20487: PPUSH
20488: CALL_OW 51
// end ;
20492: GO 20366
20494: POP
20495: POP
// end ;
20496: PPOPN 2
20498: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20499: LD_EXP 43
20503: PUSH
20504: LD_EXP 89
20508: AND
20509: IFFALSE 20731
20511: GO 20513
20513: DISABLE
20514: LD_INT 0
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20522: LD_ADDR_VAR 0 6
20526: PUSH
20527: LD_INT 22
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 21
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: PPUSH
20571: CALL_OW 69
20575: ST_TO_ADDR
// if not tmp then
20576: LD_VAR 0 6
20580: NOT
20581: IFFALSE 20585
// exit ;
20583: GO 20731
// s1 := rand ( 1 , 4 ) ;
20585: LD_ADDR_VAR 0 2
20589: PUSH
20590: LD_INT 1
20592: PPUSH
20593: LD_INT 4
20595: PPUSH
20596: CALL_OW 12
20600: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20601: LD_ADDR_VAR 0 4
20605: PUSH
20606: LD_VAR 0 6
20610: PUSH
20611: LD_INT 1
20613: ARRAY
20614: PPUSH
20615: LD_VAR 0 2
20619: PPUSH
20620: CALL_OW 259
20624: ST_TO_ADDR
// if s1 = 1 then
20625: LD_VAR 0 2
20629: PUSH
20630: LD_INT 1
20632: EQUAL
20633: IFFALSE 20653
// s2 := rand ( 2 , 4 ) else
20635: LD_ADDR_VAR 0 3
20639: PUSH
20640: LD_INT 2
20642: PPUSH
20643: LD_INT 4
20645: PPUSH
20646: CALL_OW 12
20650: ST_TO_ADDR
20651: GO 20661
// s2 := 1 ;
20653: LD_ADDR_VAR 0 3
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20661: LD_ADDR_VAR 0 5
20665: PUSH
20666: LD_VAR 0 6
20670: PUSH
20671: LD_INT 1
20673: ARRAY
20674: PPUSH
20675: LD_VAR 0 3
20679: PPUSH
20680: CALL_OW 259
20684: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20685: LD_VAR 0 6
20689: PUSH
20690: LD_INT 1
20692: ARRAY
20693: PPUSH
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 5
20703: PPUSH
20704: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20708: LD_VAR 0 6
20712: PUSH
20713: LD_INT 1
20715: ARRAY
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: LD_VAR 0 4
20726: PPUSH
20727: CALL_OW 237
// end ;
20731: PPOPN 6
20733: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20734: LD_EXP 43
20738: PUSH
20739: LD_EXP 90
20743: AND
20744: IFFALSE 20823
20746: GO 20748
20748: DISABLE
20749: LD_INT 0
20751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20752: LD_ADDR_VAR 0 1
20756: PUSH
20757: LD_INT 22
20759: PUSH
20760: LD_OWVAR 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 3
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PPUSH
20783: CALL_OW 69
20787: ST_TO_ADDR
// if not tmp then
20788: LD_VAR 0 1
20792: NOT
20793: IFFALSE 20797
// exit ;
20795: GO 20823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20797: LD_VAR 0 1
20801: PUSH
20802: LD_INT 1
20804: PPUSH
20805: LD_VAR 0 1
20809: PPUSH
20810: CALL_OW 12
20814: ARRAY
20815: PPUSH
20816: LD_INT 1
20818: PPUSH
20819: CALL_OW 234
// end ;
20823: PPOPN 1
20825: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20826: LD_EXP 43
20830: PUSH
20831: LD_EXP 91
20835: AND
20836: IFFALSE 20948
20838: GO 20840
20840: DISABLE
20841: LD_INT 0
20843: PPUSH
20844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20845: LD_ADDR_VAR 0 2
20849: PUSH
20850: LD_INT 22
20852: PUSH
20853: LD_OWVAR 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 30
20867: PUSH
20868: LD_INT 27
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 30
20877: PUSH
20878: LD_INT 26
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 30
20887: PUSH
20888: LD_INT 28
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: ST_TO_ADDR
// if not tmp then
20910: LD_VAR 0 2
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 20948
// for i in tmp do
20919: LD_ADDR_VAR 0 1
20923: PUSH
20924: LD_VAR 0 2
20928: PUSH
20929: FOR_IN
20930: IFFALSE 20946
// SetLives ( i , 1 ) ;
20932: LD_VAR 0 1
20936: PPUSH
20937: LD_INT 1
20939: PPUSH
20940: CALL_OW 234
20944: GO 20929
20946: POP
20947: POP
// end ;
20948: PPOPN 2
20950: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20951: LD_EXP 43
20955: PUSH
20956: LD_EXP 92
20960: AND
20961: IFFALSE 21248
20963: GO 20965
20965: DISABLE
20966: LD_INT 0
20968: PPUSH
20969: PPUSH
20970: PPUSH
// begin i := rand ( 1 , 7 ) ;
20971: LD_ADDR_VAR 0 1
20975: PUSH
20976: LD_INT 1
20978: PPUSH
20979: LD_INT 7
20981: PPUSH
20982: CALL_OW 12
20986: ST_TO_ADDR
// case i of 1 :
20987: LD_VAR 0 1
20991: PUSH
20992: LD_INT 1
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21010
21000: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21001: LD_STRING earthquake(getX(game), 0, 32)
21003: PPUSH
21004: CALL_OW 559
21008: GO 21248
21010: LD_INT 2
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21032
21018: POP
// begin ToLua ( displayStucuk(); ) ;
21019: LD_STRING displayStucuk();
21021: PPUSH
21022: CALL_OW 559
// ResetFog ;
21026: CALL_OW 335
// end ; 3 :
21030: GO 21248
21032: LD_INT 3
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21144
21040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21041: LD_ADDR_VAR 0 2
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_OWVAR 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 25
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PPUSH
21072: CALL_OW 69
21076: ST_TO_ADDR
// if not tmp then
21077: LD_VAR 0 2
21081: NOT
21082: IFFALSE 21086
// exit ;
21084: GO 21248
// un := tmp [ rand ( 1 , tmp ) ] ;
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: LD_VAR 0 2
21095: PUSH
21096: LD_INT 1
21098: PPUSH
21099: LD_VAR 0 2
21103: PPUSH
21104: CALL_OW 12
21108: ARRAY
21109: ST_TO_ADDR
// if Crawls ( un ) then
21110: LD_VAR 0 3
21114: PPUSH
21115: CALL_OW 318
21119: IFFALSE 21130
// ComWalk ( un ) ;
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 8
21137: PPUSH
21138: CALL_OW 336
// end ; 4 :
21142: GO 21248
21144: LD_INT 4
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21226
21152: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_INT 22
21160: PUSH
21161: LD_OWVAR 2
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 30
21172: PUSH
21173: LD_INT 29
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: ST_TO_ADDR
// if not tmp then
21189: LD_VAR 0 2
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 21248
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21198: LD_VAR 0 2
21202: PUSH
21203: LD_INT 1
21205: ARRAY
21206: PPUSH
21207: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21211: LD_VAR 0 2
21215: PUSH
21216: LD_INT 1
21218: ARRAY
21219: PPUSH
21220: CALL_OW 65
// end ; 5 .. 7 :
21224: GO 21248
21226: LD_INT 5
21228: DOUBLE
21229: GREATEREQUAL
21230: IFFALSE 21238
21232: LD_INT 7
21234: DOUBLE
21235: LESSEQUAL
21236: IFTRUE 21240
21238: GO 21247
21240: POP
// StreamSibBomb ; end ;
21241: CALL 17485 0 0
21245: GO 21248
21247: POP
// end ;
21248: PPOPN 3
21250: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21251: LD_EXP 43
21255: PUSH
21256: LD_EXP 93
21260: AND
21261: IFFALSE 21417
21263: GO 21265
21265: DISABLE
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21271: LD_ADDR_VAR 0 2
21275: PUSH
21276: LD_INT 81
21278: PUSH
21279: LD_OWVAR 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: LD_INT 21
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 21
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: ST_TO_ADDR
// if not tmp then
21325: LD_VAR 0 2
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 21417
// p := 0 ;
21334: LD_ADDR_VAR 0 3
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21342: LD_INT 35
21344: PPUSH
21345: CALL_OW 67
// p := p + 1 ;
21349: LD_ADDR_VAR 0 3
21353: PUSH
21354: LD_VAR 0 3
21358: PUSH
21359: LD_INT 1
21361: PLUS
21362: ST_TO_ADDR
// for i in tmp do
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_VAR 0 2
21372: PUSH
21373: FOR_IN
21374: IFFALSE 21405
// if GetLives ( i ) < 1000 then
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 256
21385: PUSH
21386: LD_INT 1000
21388: LESS
21389: IFFALSE 21403
// SetLives ( i , 1000 ) ;
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_INT 1000
21398: PPUSH
21399: CALL_OW 234
21403: GO 21373
21405: POP
21406: POP
// until p > 20 ;
21407: LD_VAR 0 3
21411: PUSH
21412: LD_INT 20
21414: GREATER
21415: IFFALSE 21342
// end ;
21417: PPOPN 3
21419: END
// every 0 0$1 trigger StreamModeActive and sTime do
21420: LD_EXP 43
21424: PUSH
21425: LD_EXP 94
21429: AND
21430: IFFALSE 21465
21432: GO 21434
21434: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21435: LD_INT 28
21437: PPUSH
21438: LD_OWVAR 2
21442: PPUSH
21443: LD_INT 2
21445: PPUSH
21446: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21450: LD_INT 30
21452: PPUSH
21453: LD_OWVAR 2
21457: PPUSH
21458: LD_INT 2
21460: PPUSH
21461: CALL_OW 322
// end ;
21465: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21466: LD_EXP 43
21470: PUSH
21471: LD_EXP 95
21475: AND
21476: IFFALSE 21597
21478: GO 21480
21480: DISABLE
21481: LD_INT 0
21483: PPUSH
21484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: LD_INT 22
21492: PUSH
21493: LD_OWVAR 2
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 21
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: LD_INT 23
21517: PUSH
21518: LD_INT 0
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: PPUSH
21534: CALL_OW 69
21538: ST_TO_ADDR
// if not tmp then
21539: LD_VAR 0 2
21543: NOT
21544: IFFALSE 21548
// exit ;
21546: GO 21597
// for i in tmp do
21548: LD_ADDR_VAR 0 1
21552: PUSH
21553: LD_VAR 0 2
21557: PUSH
21558: FOR_IN
21559: IFFALSE 21595
// begin if Crawls ( i ) then
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 318
21570: IFFALSE 21581
// ComWalk ( i ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 138
// SetClass ( i , 2 ) ;
21581: LD_VAR 0 1
21585: PPUSH
21586: LD_INT 2
21588: PPUSH
21589: CALL_OW 336
// end ;
21593: GO 21558
21595: POP
21596: POP
// end ;
21597: PPOPN 2
21599: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21600: LD_EXP 43
21604: PUSH
21605: LD_EXP 96
21609: AND
21610: IFFALSE 21898
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
21619: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21620: LD_OWVAR 2
21624: PPUSH
21625: LD_INT 9
21627: PPUSH
21628: LD_INT 1
21630: PPUSH
21631: LD_INT 1
21633: PPUSH
21634: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21638: LD_INT 9
21640: PPUSH
21641: LD_OWVAR 2
21645: PPUSH
21646: CALL_OW 343
// uc_side := 9 ;
21650: LD_ADDR_OWVAR 20
21654: PUSH
21655: LD_INT 9
21657: ST_TO_ADDR
// uc_nation := 2 ;
21658: LD_ADDR_OWVAR 21
21662: PUSH
21663: LD_INT 2
21665: ST_TO_ADDR
// hc_name := Dark Warrior ;
21666: LD_ADDR_OWVAR 26
21670: PUSH
21671: LD_STRING Dark Warrior
21673: ST_TO_ADDR
// hc_gallery :=  ;
21674: LD_ADDR_OWVAR 33
21678: PUSH
21679: LD_STRING 
21681: ST_TO_ADDR
// hc_noskilllimit := true ;
21682: LD_ADDR_OWVAR 76
21686: PUSH
21687: LD_INT 1
21689: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21690: LD_ADDR_OWVAR 31
21694: PUSH
21695: LD_INT 30
21697: PUSH
21698: LD_INT 30
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: ST_TO_ADDR
// un := CreateHuman ;
21713: LD_ADDR_VAR 0 3
21717: PUSH
21718: CALL_OW 44
21722: ST_TO_ADDR
// hc_noskilllimit := false ;
21723: LD_ADDR_OWVAR 76
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21731: LD_VAR 0 3
21735: PPUSH
21736: LD_INT 1
21738: PPUSH
21739: CALL_OW 51
// ToLua ( playRanger() ) ;
21743: LD_STRING playRanger()
21745: PPUSH
21746: CALL_OW 559
// p := 0 ;
21750: LD_ADDR_VAR 0 2
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21758: LD_INT 35
21760: PPUSH
21761: CALL_OW 67
// p := p + 1 ;
21765: LD_ADDR_VAR 0 2
21769: PUSH
21770: LD_VAR 0 2
21774: PUSH
21775: LD_INT 1
21777: PLUS
21778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21779: LD_VAR 0 3
21783: PPUSH
21784: CALL_OW 256
21788: PUSH
21789: LD_INT 1000
21791: LESS
21792: IFFALSE 21806
// SetLives ( un , 1000 ) ;
21794: LD_VAR 0 3
21798: PPUSH
21799: LD_INT 1000
21801: PPUSH
21802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21806: LD_VAR 0 3
21810: PPUSH
21811: LD_INT 81
21813: PUSH
21814: LD_OWVAR 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 91
21825: PUSH
21826: LD_VAR 0 3
21830: PUSH
21831: LD_INT 30
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: PPUSH
21848: LD_VAR 0 3
21852: PPUSH
21853: CALL_OW 74
21857: PPUSH
21858: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21862: LD_VAR 0 2
21866: PUSH
21867: LD_INT 80
21869: GREATER
21870: PUSH
21871: LD_VAR 0 3
21875: PPUSH
21876: CALL_OW 301
21880: OR
21881: IFFALSE 21758
// if un then
21883: LD_VAR 0 3
21887: IFFALSE 21898
// RemoveUnit ( un ) ;
21889: LD_VAR 0 3
21893: PPUSH
21894: CALL_OW 64
// end ;
21898: PPOPN 3
21900: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21901: LD_EXP 97
21905: IFFALSE 22021
21907: GO 21909
21909: DISABLE
21910: LD_INT 0
21912: PPUSH
21913: PPUSH
21914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 81
21922: PUSH
21923: LD_OWVAR 2
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 21
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PPUSH
21946: CALL_OW 69
21950: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21951: LD_STRING playComputer()
21953: PPUSH
21954: CALL_OW 559
// if not tmp then
21958: LD_VAR 0 2
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 22021
// for i in tmp do
21967: LD_ADDR_VAR 0 1
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: FOR_IN
21978: IFFALSE 22019
// for j := 1 to 4 do
21980: LD_ADDR_VAR 0 3
21984: PUSH
21985: DOUBLE
21986: LD_INT 1
21988: DEC
21989: ST_TO_ADDR
21990: LD_INT 4
21992: PUSH
21993: FOR_TO
21994: IFFALSE 22015
// SetSkill ( i , j , 10 ) ;
21996: LD_VAR 0 1
22000: PPUSH
22001: LD_VAR 0 3
22005: PPUSH
22006: LD_INT 10
22008: PPUSH
22009: CALL_OW 237
22013: GO 21993
22015: POP
22016: POP
22017: GO 21977
22019: POP
22020: POP
// end ;
22021: PPOPN 3
22023: END
// every 0 0$1 trigger s30 do var i , tmp ;
22024: LD_EXP 98
22028: IFFALSE 22097
22030: GO 22032
22032: DISABLE
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_OWVAR 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL_OW 69
22058: ST_TO_ADDR
// if not tmp then
22059: LD_VAR 0 2
22063: NOT
22064: IFFALSE 22068
// exit ;
22066: GO 22097
// for i in tmp do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_VAR 0 2
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22095
// SetLives ( i , 300 ) ;
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_INT 300
22088: PPUSH
22089: CALL_OW 234
22093: GO 22078
22095: POP
22096: POP
// end ;
22097: PPOPN 2
22099: END
// every 0 0$1 trigger s60 do var i , tmp ;
22100: LD_EXP 99
22104: IFFALSE 22173
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22113: LD_ADDR_VAR 0 2
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_OWVAR 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: ST_TO_ADDR
// if not tmp then
22135: LD_VAR 0 2
22139: NOT
22140: IFFALSE 22144
// exit ;
22142: GO 22173
// for i in tmp do
22144: LD_ADDR_VAR 0 1
22148: PUSH
22149: LD_VAR 0 2
22153: PUSH
22154: FOR_IN
22155: IFFALSE 22171
// SetLives ( i , 600 ) ;
22157: LD_VAR 0 1
22161: PPUSH
22162: LD_INT 600
22164: PPUSH
22165: CALL_OW 234
22169: GO 22154
22171: POP
22172: POP
// end ;
22173: PPOPN 2
22175: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22176: LD_INT 0
22178: PPUSH
// case cmd of 301 :
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 301
22186: DOUBLE
22187: EQUAL
22188: IFTRUE 22192
22190: GO 22224
22192: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22193: LD_VAR 0 6
22197: PPUSH
22198: LD_VAR 0 7
22202: PPUSH
22203: LD_VAR 0 8
22207: PPUSH
22208: LD_VAR 0 4
22212: PPUSH
22213: LD_VAR 0 5
22217: PPUSH
22218: CALL 23425 0 5
22222: GO 22345
22224: LD_INT 302
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22269
22232: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22233: LD_VAR 0 6
22237: PPUSH
22238: LD_VAR 0 7
22242: PPUSH
22243: LD_VAR 0 8
22247: PPUSH
22248: LD_VAR 0 9
22252: PPUSH
22253: LD_VAR 0 4
22257: PPUSH
22258: LD_VAR 0 5
22262: PPUSH
22263: CALL 23516 0 6
22267: GO 22345
22269: LD_INT 303
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22314
22277: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22278: LD_VAR 0 6
22282: PPUSH
22283: LD_VAR 0 7
22287: PPUSH
22288: LD_VAR 0 8
22292: PPUSH
22293: LD_VAR 0 9
22297: PPUSH
22298: LD_VAR 0 4
22302: PPUSH
22303: LD_VAR 0 5
22307: PPUSH
22308: CALL 22350 0 6
22312: GO 22345
22314: LD_INT 304
22316: DOUBLE
22317: EQUAL
22318: IFTRUE 22322
22320: GO 22344
22322: POP
// hHackTeleport ( unit , x , y ) ; end ;
22323: LD_VAR 0 2
22327: PPUSH
22328: LD_VAR 0 4
22332: PPUSH
22333: LD_VAR 0 5
22337: PPUSH
22338: CALL 24109 0 3
22342: GO 22345
22344: POP
// end ;
22345: LD_VAR 0 12
22349: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22350: LD_INT 0
22352: PPUSH
22353: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_INT 1
22361: LESS
22362: PUSH
22363: LD_VAR 0 1
22367: PUSH
22368: LD_INT 3
22370: GREATER
22371: OR
22372: PUSH
22373: LD_VAR 0 5
22377: PPUSH
22378: LD_VAR 0 6
22382: PPUSH
22383: CALL_OW 428
22387: OR
22388: IFFALSE 22392
// exit ;
22390: GO 23112
// uc_side := your_side ;
22392: LD_ADDR_OWVAR 20
22396: PUSH
22397: LD_OWVAR 2
22401: ST_TO_ADDR
// uc_nation := nation ;
22402: LD_ADDR_OWVAR 21
22406: PUSH
22407: LD_VAR 0 1
22411: ST_TO_ADDR
// bc_level = 1 ;
22412: LD_ADDR_OWVAR 43
22416: PUSH
22417: LD_INT 1
22419: ST_TO_ADDR
// case btype of 1 :
22420: LD_VAR 0 2
22424: PUSH
22425: LD_INT 1
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22444
22433: POP
// bc_type := b_depot ; 2 :
22434: LD_ADDR_OWVAR 42
22438: PUSH
22439: LD_INT 0
22441: ST_TO_ADDR
22442: GO 23056
22444: LD_INT 2
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22463
22452: POP
// bc_type := b_warehouse ; 3 :
22453: LD_ADDR_OWVAR 42
22457: PUSH
22458: LD_INT 1
22460: ST_TO_ADDR
22461: GO 23056
22463: LD_INT 3
22465: DOUBLE
22466: EQUAL
22467: IFTRUE 22471
22469: GO 22482
22471: POP
// bc_type := b_lab ; 4 .. 9 :
22472: LD_ADDR_OWVAR 42
22476: PUSH
22477: LD_INT 6
22479: ST_TO_ADDR
22480: GO 23056
22482: LD_INT 4
22484: DOUBLE
22485: GREATEREQUAL
22486: IFFALSE 22494
22488: LD_INT 9
22490: DOUBLE
22491: LESSEQUAL
22492: IFTRUE 22496
22494: GO 22548
22496: POP
// begin bc_type := b_lab_half ;
22497: LD_ADDR_OWVAR 42
22501: PUSH
22502: LD_INT 7
22504: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22505: LD_ADDR_OWVAR 44
22509: PUSH
22510: LD_INT 10
22512: PUSH
22513: LD_INT 11
22515: PUSH
22516: LD_INT 12
22518: PUSH
22519: LD_INT 15
22521: PUSH
22522: LD_INT 14
22524: PUSH
22525: LD_INT 13
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: LD_VAR 0 2
22540: PUSH
22541: LD_INT 3
22543: MINUS
22544: ARRAY
22545: ST_TO_ADDR
// end ; 10 .. 13 :
22546: GO 23056
22548: LD_INT 10
22550: DOUBLE
22551: GREATEREQUAL
22552: IFFALSE 22560
22554: LD_INT 13
22556: DOUBLE
22557: LESSEQUAL
22558: IFTRUE 22562
22560: GO 22639
22562: POP
// begin bc_type := b_lab_full ;
22563: LD_ADDR_OWVAR 42
22567: PUSH
22568: LD_INT 8
22570: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22571: LD_ADDR_OWVAR 44
22575: PUSH
22576: LD_INT 10
22578: PUSH
22579: LD_INT 12
22581: PUSH
22582: LD_INT 14
22584: PUSH
22585: LD_INT 13
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: LD_VAR 0 2
22598: PUSH
22599: LD_INT 9
22601: MINUS
22602: ARRAY
22603: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22604: LD_ADDR_OWVAR 45
22608: PUSH
22609: LD_INT 11
22611: PUSH
22612: LD_INT 15
22614: PUSH
22615: LD_INT 12
22617: PUSH
22618: LD_INT 15
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: PUSH
22627: LD_VAR 0 2
22631: PUSH
22632: LD_INT 9
22634: MINUS
22635: ARRAY
22636: ST_TO_ADDR
// end ; 14 :
22637: GO 23056
22639: LD_INT 14
22641: DOUBLE
22642: EQUAL
22643: IFTRUE 22647
22645: GO 22658
22647: POP
// bc_type := b_workshop ; 15 :
22648: LD_ADDR_OWVAR 42
22652: PUSH
22653: LD_INT 2
22655: ST_TO_ADDR
22656: GO 23056
22658: LD_INT 15
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22677
22666: POP
// bc_type := b_factory ; 16 :
22667: LD_ADDR_OWVAR 42
22671: PUSH
22672: LD_INT 3
22674: ST_TO_ADDR
22675: GO 23056
22677: LD_INT 16
22679: DOUBLE
22680: EQUAL
22681: IFTRUE 22685
22683: GO 22696
22685: POP
// bc_type := b_ext_gun ; 17 :
22686: LD_ADDR_OWVAR 42
22690: PUSH
22691: LD_INT 17
22693: ST_TO_ADDR
22694: GO 23056
22696: LD_INT 17
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22732
22704: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22705: LD_ADDR_OWVAR 42
22709: PUSH
22710: LD_INT 19
22712: PUSH
22713: LD_INT 23
22715: PUSH
22716: LD_INT 19
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: LD_VAR 0 1
22728: ARRAY
22729: ST_TO_ADDR
22730: GO 23056
22732: LD_INT 18
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22751
22740: POP
// bc_type := b_ext_radar ; 19 :
22741: LD_ADDR_OWVAR 42
22745: PUSH
22746: LD_INT 20
22748: ST_TO_ADDR
22749: GO 23056
22751: LD_INT 19
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22770
22759: POP
// bc_type := b_ext_radio ; 20 :
22760: LD_ADDR_OWVAR 42
22764: PUSH
22765: LD_INT 22
22767: ST_TO_ADDR
22768: GO 23056
22770: LD_INT 20
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22789
22778: POP
// bc_type := b_ext_siberium ; 21 :
22779: LD_ADDR_OWVAR 42
22783: PUSH
22784: LD_INT 21
22786: ST_TO_ADDR
22787: GO 23056
22789: LD_INT 21
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22808
22797: POP
// bc_type := b_ext_computer ; 22 :
22798: LD_ADDR_OWVAR 42
22802: PUSH
22803: LD_INT 24
22805: ST_TO_ADDR
22806: GO 23056
22808: LD_INT 22
22810: DOUBLE
22811: EQUAL
22812: IFTRUE 22816
22814: GO 22827
22816: POP
// bc_type := b_ext_track ; 23 :
22817: LD_ADDR_OWVAR 42
22821: PUSH
22822: LD_INT 16
22824: ST_TO_ADDR
22825: GO 23056
22827: LD_INT 23
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22846
22835: POP
// bc_type := b_ext_laser ; 24 :
22836: LD_ADDR_OWVAR 42
22840: PUSH
22841: LD_INT 25
22843: ST_TO_ADDR
22844: GO 23056
22846: LD_INT 24
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 22865
22854: POP
// bc_type := b_control_tower ; 25 :
22855: LD_ADDR_OWVAR 42
22859: PUSH
22860: LD_INT 36
22862: ST_TO_ADDR
22863: GO 23056
22865: LD_INT 25
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22884
22873: POP
// bc_type := b_breastwork ; 26 :
22874: LD_ADDR_OWVAR 42
22878: PUSH
22879: LD_INT 31
22881: ST_TO_ADDR
22882: GO 23056
22884: LD_INT 26
22886: DOUBLE
22887: EQUAL
22888: IFTRUE 22892
22890: GO 22903
22892: POP
// bc_type := b_bunker ; 27 :
22893: LD_ADDR_OWVAR 42
22897: PUSH
22898: LD_INT 32
22900: ST_TO_ADDR
22901: GO 23056
22903: LD_INT 27
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22922
22911: POP
// bc_type := b_turret ; 28 :
22912: LD_ADDR_OWVAR 42
22916: PUSH
22917: LD_INT 33
22919: ST_TO_ADDR
22920: GO 23056
22922: LD_INT 28
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 22941
22930: POP
// bc_type := b_armoury ; 29 :
22931: LD_ADDR_OWVAR 42
22935: PUSH
22936: LD_INT 4
22938: ST_TO_ADDR
22939: GO 23056
22941: LD_INT 29
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22960
22949: POP
// bc_type := b_barracks ; 30 :
22950: LD_ADDR_OWVAR 42
22954: PUSH
22955: LD_INT 5
22957: ST_TO_ADDR
22958: GO 23056
22960: LD_INT 30
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 22979
22968: POP
// bc_type := b_solar_power ; 31 :
22969: LD_ADDR_OWVAR 42
22973: PUSH
22974: LD_INT 27
22976: ST_TO_ADDR
22977: GO 23056
22979: LD_INT 31
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 22998
22987: POP
// bc_type := b_oil_power ; 32 :
22988: LD_ADDR_OWVAR 42
22992: PUSH
22993: LD_INT 26
22995: ST_TO_ADDR
22996: GO 23056
22998: LD_INT 32
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23017
23006: POP
// bc_type := b_siberite_power ; 33 :
23007: LD_ADDR_OWVAR 42
23011: PUSH
23012: LD_INT 28
23014: ST_TO_ADDR
23015: GO 23056
23017: LD_INT 33
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23036
23025: POP
// bc_type := b_oil_mine ; 34 :
23026: LD_ADDR_OWVAR 42
23030: PUSH
23031: LD_INT 29
23033: ST_TO_ADDR
23034: GO 23056
23036: LD_INT 34
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23055
23044: POP
// bc_type := b_siberite_mine ; end ;
23045: LD_ADDR_OWVAR 42
23049: PUSH
23050: LD_INT 30
23052: ST_TO_ADDR
23053: GO 23056
23055: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23056: LD_ADDR_VAR 0 8
23060: PUSH
23061: LD_VAR 0 5
23065: PPUSH
23066: LD_VAR 0 6
23070: PPUSH
23071: LD_VAR 0 3
23075: PPUSH
23076: CALL_OW 47
23080: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23081: LD_OWVAR 42
23085: PUSH
23086: LD_INT 32
23088: PUSH
23089: LD_INT 33
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: IN
23096: IFFALSE 23112
// PlaceWeaponTurret ( b , weapon ) ;
23098: LD_VAR 0 8
23102: PPUSH
23103: LD_VAR 0 4
23107: PPUSH
23108: CALL_OW 431
// end ;
23112: LD_VAR 0 7
23116: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23123: LD_ADDR_VAR 0 4
23127: PUSH
23128: LD_INT 22
23130: PUSH
23131: LD_OWVAR 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 69
23176: ST_TO_ADDR
// if not tmp then
23177: LD_VAR 0 4
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23245
// for i in tmp do
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_VAR 0 4
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23243
// for j = 1 to 3 do
23199: LD_ADDR_VAR 0 3
23203: PUSH
23204: DOUBLE
23205: LD_INT 1
23207: DEC
23208: ST_TO_ADDR
23209: LD_INT 3
23211: PUSH
23212: FOR_TO
23213: IFFALSE 23239
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23215: LD_VAR 0 2
23219: PPUSH
23220: CALL_OW 274
23224: PPUSH
23225: LD_VAR 0 3
23229: PPUSH
23230: LD_INT 99999
23232: PPUSH
23233: CALL_OW 277
23237: GO 23212
23239: POP
23240: POP
23241: GO 23196
23243: POP
23244: POP
// end ;
23245: LD_VAR 0 1
23249: RET
// export function hHackSetLevel10 ; var i , j ; begin
23250: LD_INT 0
23252: PPUSH
23253: PPUSH
23254: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23328
// if IsSelected ( i ) then
23278: LD_VAR 0 2
23282: PPUSH
23283: CALL_OW 306
23287: IFFALSE 23326
// begin for j := 1 to 4 do
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: DOUBLE
23295: LD_INT 1
23297: DEC
23298: ST_TO_ADDR
23299: LD_INT 4
23301: PUSH
23302: FOR_TO
23303: IFFALSE 23324
// SetSkill ( i , j , 10 ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 3
23314: PPUSH
23315: LD_INT 10
23317: PPUSH
23318: CALL_OW 237
23322: GO 23302
23324: POP
23325: POP
// end ;
23326: GO 23275
23328: POP
23329: POP
// end ;
23330: LD_VAR 0 1
23334: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23335: LD_INT 0
23337: PPUSH
23338: PPUSH
23339: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23340: LD_ADDR_VAR 0 2
23344: PUSH
23345: LD_INT 22
23347: PUSH
23348: LD_OWVAR 2
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 21
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PPUSH
23371: CALL_OW 69
23375: PUSH
23376: FOR_IN
23377: IFFALSE 23418
// begin for j := 1 to 4 do
23379: LD_ADDR_VAR 0 3
23383: PUSH
23384: DOUBLE
23385: LD_INT 1
23387: DEC
23388: ST_TO_ADDR
23389: LD_INT 4
23391: PUSH
23392: FOR_TO
23393: IFFALSE 23414
// SetSkill ( i , j , 10 ) ;
23395: LD_VAR 0 2
23399: PPUSH
23400: LD_VAR 0 3
23404: PPUSH
23405: LD_INT 10
23407: PPUSH
23408: CALL_OW 237
23412: GO 23392
23414: POP
23415: POP
// end ;
23416: GO 23376
23418: POP
23419: POP
// end ;
23420: LD_VAR 0 1
23424: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23425: LD_INT 0
23427: PPUSH
// uc_side := your_side ;
23428: LD_ADDR_OWVAR 20
23432: PUSH
23433: LD_OWVAR 2
23437: ST_TO_ADDR
// uc_nation := nation ;
23438: LD_ADDR_OWVAR 21
23442: PUSH
23443: LD_VAR 0 1
23447: ST_TO_ADDR
// InitHc ;
23448: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23452: LD_INT 0
23454: PPUSH
23455: LD_VAR 0 2
23459: PPUSH
23460: LD_VAR 0 3
23464: PPUSH
23465: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23469: LD_VAR 0 4
23473: PPUSH
23474: LD_VAR 0 5
23478: PPUSH
23479: CALL_OW 428
23483: PUSH
23484: LD_INT 0
23486: EQUAL
23487: IFFALSE 23511
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23489: CALL_OW 44
23493: PPUSH
23494: LD_VAR 0 4
23498: PPUSH
23499: LD_VAR 0 5
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 48
// end ;
23511: LD_VAR 0 6
23515: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23516: LD_INT 0
23518: PPUSH
23519: PPUSH
// uc_side := your_side ;
23520: LD_ADDR_OWVAR 20
23524: PUSH
23525: LD_OWVAR 2
23529: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23530: LD_VAR 0 1
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 4
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: IN
23557: IFFALSE 23569
// uc_nation := nation_american else
23559: LD_ADDR_OWVAR 21
23563: PUSH
23564: LD_INT 1
23566: ST_TO_ADDR
23567: GO 23612
// if chassis in [ 11 , 12 , 13 , 14 ] then
23569: LD_VAR 0 1
23573: PUSH
23574: LD_INT 11
23576: PUSH
23577: LD_INT 12
23579: PUSH
23580: LD_INT 13
23582: PUSH
23583: LD_INT 14
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: IN
23592: IFFALSE 23604
// uc_nation := nation_arabian else
23594: LD_ADDR_OWVAR 21
23598: PUSH
23599: LD_INT 2
23601: ST_TO_ADDR
23602: GO 23612
// uc_nation := nation_russian ;
23604: LD_ADDR_OWVAR 21
23608: PUSH
23609: LD_INT 3
23611: ST_TO_ADDR
// vc_chassis := chassis ;
23612: LD_ADDR_OWVAR 37
23616: PUSH
23617: LD_VAR 0 1
23621: ST_TO_ADDR
// vc_engine := engine ;
23622: LD_ADDR_OWVAR 39
23626: PUSH
23627: LD_VAR 0 2
23631: ST_TO_ADDR
// vc_control := control ;
23632: LD_ADDR_OWVAR 38
23636: PUSH
23637: LD_VAR 0 3
23641: ST_TO_ADDR
// vc_weapon := weapon ;
23642: LD_ADDR_OWVAR 40
23646: PUSH
23647: LD_VAR 0 4
23651: ST_TO_ADDR
// un := CreateVehicle ;
23652: LD_ADDR_VAR 0 8
23656: PUSH
23657: CALL_OW 45
23661: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23662: LD_VAR 0 8
23666: PPUSH
23667: LD_INT 0
23669: PPUSH
23670: LD_INT 5
23672: PPUSH
23673: CALL_OW 12
23677: PPUSH
23678: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23682: LD_VAR 0 8
23686: PPUSH
23687: LD_VAR 0 5
23691: PPUSH
23692: LD_VAR 0 6
23696: PPUSH
23697: LD_INT 1
23699: PPUSH
23700: CALL_OW 48
// end ;
23704: LD_VAR 0 7
23708: RET
// export hInvincible ; every 1 do
23709: GO 23711
23711: DISABLE
// hInvincible := [ ] ;
23712: LD_ADDR_EXP 100
23716: PUSH
23717: EMPTY
23718: ST_TO_ADDR
23719: END
// every 10 do var i ;
23720: GO 23722
23722: DISABLE
23723: LD_INT 0
23725: PPUSH
// begin enable ;
23726: ENABLE
// if not hInvincible then
23727: LD_EXP 100
23731: NOT
23732: IFFALSE 23736
// exit ;
23734: GO 23780
// for i in hInvincible do
23736: LD_ADDR_VAR 0 1
23740: PUSH
23741: LD_EXP 100
23745: PUSH
23746: FOR_IN
23747: IFFALSE 23778
// if GetLives ( i ) < 1000 then
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 256
23758: PUSH
23759: LD_INT 1000
23761: LESS
23762: IFFALSE 23776
// SetLives ( i , 1000 ) ;
23764: LD_VAR 0 1
23768: PPUSH
23769: LD_INT 1000
23771: PPUSH
23772: CALL_OW 234
23776: GO 23746
23778: POP
23779: POP
// end ;
23780: PPOPN 1
23782: END
// export function hHackInvincible ; var i ; begin
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 21
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 2
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: PPUSH
23820: CALL_OW 69
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23887
// if IsSelected ( i ) then
23828: LD_VAR 0 2
23832: PPUSH
23833: CALL_OW 306
23837: IFFALSE 23885
// begin if i in hInvincible then
23839: LD_VAR 0 2
23843: PUSH
23844: LD_EXP 100
23848: IN
23849: IFFALSE 23869
// hInvincible := hInvincible diff i else
23851: LD_ADDR_EXP 100
23855: PUSH
23856: LD_EXP 100
23860: PUSH
23861: LD_VAR 0 2
23865: DIFF
23866: ST_TO_ADDR
23867: GO 23885
// hInvincible := hInvincible union i ;
23869: LD_ADDR_EXP 100
23873: PUSH
23874: LD_EXP 100
23878: PUSH
23879: LD_VAR 0 2
23883: UNION
23884: ST_TO_ADDR
// end ;
23885: GO 23825
23887: POP
23888: POP
// end ;
23889: LD_VAR 0 1
23893: RET
// export function hHackInvisible ; var i , j ; begin
23894: LD_INT 0
23896: PPUSH
23897: PPUSH
23898: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23899: LD_ADDR_VAR 0 2
23903: PUSH
23904: LD_INT 21
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: PUSH
23919: FOR_IN
23920: IFFALSE 23944
// if IsSelected ( i ) then
23922: LD_VAR 0 2
23926: PPUSH
23927: CALL_OW 306
23931: IFFALSE 23942
// ComForceInvisible ( i ) ;
23933: LD_VAR 0 2
23937: PPUSH
23938: CALL_OW 496
23942: GO 23919
23944: POP
23945: POP
// end ;
23946: LD_VAR 0 1
23950: RET
// export function hHackChangeYourSide ; begin
23951: LD_INT 0
23953: PPUSH
// if your_side = 8 then
23954: LD_OWVAR 2
23958: PUSH
23959: LD_INT 8
23961: EQUAL
23962: IFFALSE 23974
// your_side := 0 else
23964: LD_ADDR_OWVAR 2
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
23972: GO 23988
// your_side := your_side + 1 ;
23974: LD_ADDR_OWVAR 2
23978: PUSH
23979: LD_OWVAR 2
23983: PUSH
23984: LD_INT 1
23986: PLUS
23987: ST_TO_ADDR
// end ;
23988: LD_VAR 0 1
23992: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23993: LD_INT 0
23995: PPUSH
23996: PPUSH
23997: PPUSH
// for i in all_units do
23998: LD_ADDR_VAR 0 2
24002: PUSH
24003: LD_OWVAR 3
24007: PUSH
24008: FOR_IN
24009: IFFALSE 24087
// if IsSelected ( i ) then
24011: LD_VAR 0 2
24015: PPUSH
24016: CALL_OW 306
24020: IFFALSE 24085
// begin j := GetSide ( i ) ;
24022: LD_ADDR_VAR 0 3
24026: PUSH
24027: LD_VAR 0 2
24031: PPUSH
24032: CALL_OW 255
24036: ST_TO_ADDR
// if j = 8 then
24037: LD_VAR 0 3
24041: PUSH
24042: LD_INT 8
24044: EQUAL
24045: IFFALSE 24057
// j := 0 else
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
24055: GO 24071
// j := j + 1 ;
24057: LD_ADDR_VAR 0 3
24061: PUSH
24062: LD_VAR 0 3
24066: PUSH
24067: LD_INT 1
24069: PLUS
24070: ST_TO_ADDR
// SetSide ( i , j ) ;
24071: LD_VAR 0 2
24075: PPUSH
24076: LD_VAR 0 3
24080: PPUSH
24081: CALL_OW 235
// end ;
24085: GO 24008
24087: POP
24088: POP
// end ;
24089: LD_VAR 0 1
24093: RET
// export function hHackFog ; begin
24094: LD_INT 0
24096: PPUSH
// FogOff ( true ) ;
24097: LD_INT 1
24099: PPUSH
24100: CALL_OW 344
// end ;
24104: LD_VAR 0 1
24108: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24109: LD_INT 0
24111: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: LD_VAR 0 3
24126: PPUSH
24127: LD_INT 1
24129: PPUSH
24130: LD_INT 1
24132: PPUSH
24133: CALL_OW 483
// CenterOnXY ( x , y ) ;
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: CALL_OW 84
// end ;
24151: LD_VAR 0 4
24155: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24156: LD_INT 0
24158: PPUSH
24159: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24160: LD_VAR 0 1
24164: NOT
24165: PUSH
24166: LD_VAR 0 2
24170: PPUSH
24171: LD_VAR 0 3
24175: PPUSH
24176: CALL_OW 488
24180: NOT
24181: OR
24182: PUSH
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 266
24192: PUSH
24193: LD_INT 3
24195: NONEQUAL
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 247
24206: PUSH
24207: LD_INT 1
24209: EQUAL
24210: NOT
24211: AND
24212: OR
24213: IFFALSE 24217
// exit ;
24215: GO 24366
// if GetType ( factory ) = unit_human then
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 247
24226: PUSH
24227: LD_INT 1
24229: EQUAL
24230: IFFALSE 24247
// factory := IsInUnit ( factory ) ;
24232: LD_ADDR_VAR 0 1
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 310
24246: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 266
24256: PUSH
24257: LD_INT 3
24259: NONEQUAL
24260: IFFALSE 24264
// exit ;
24262: GO 24366
// if HexInfo ( x , y ) = factory then
24264: LD_VAR 0 2
24268: PPUSH
24269: LD_VAR 0 3
24273: PPUSH
24274: CALL_OW 428
24278: PUSH
24279: LD_VAR 0 1
24283: EQUAL
24284: IFFALSE 24311
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24286: LD_ADDR_EXP 101
24290: PUSH
24291: LD_EXP 101
24295: PPUSH
24296: LD_VAR 0 1
24300: PPUSH
24301: LD_INT 0
24303: PPUSH
24304: CALL_OW 1
24308: ST_TO_ADDR
24309: GO 24362
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24311: LD_ADDR_EXP 101
24315: PUSH
24316: LD_EXP 101
24320: PPUSH
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_VAR 0 1
24330: PPUSH
24331: CALL_OW 255
24335: PUSH
24336: LD_VAR 0 1
24340: PUSH
24341: LD_VAR 0 2
24345: PUSH
24346: LD_VAR 0 3
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 1
24361: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24362: CALL 24371 0 0
// end ;
24366: LD_VAR 0 4
24370: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24371: LD_INT 0
24373: PPUSH
24374: PPUSH
24375: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24376: LD_STRING resetFactoryWaypoint();
24378: PPUSH
24379: CALL_OW 559
// if factoryWaypoints then
24383: LD_EXP 101
24387: IFFALSE 24513
// begin list := PrepareArray ( factoryWaypoints ) ;
24389: LD_ADDR_VAR 0 3
24393: PUSH
24394: LD_EXP 101
24398: PPUSH
24399: CALL 71126 0 1
24403: ST_TO_ADDR
// for i := 1 to list do
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: DOUBLE
24410: LD_INT 1
24412: DEC
24413: ST_TO_ADDR
24414: LD_VAR 0 3
24418: PUSH
24419: FOR_TO
24420: IFFALSE 24511
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24422: LD_STRING setFactoryWaypointXY(
24424: PUSH
24425: LD_VAR 0 3
24429: PUSH
24430: LD_VAR 0 2
24434: ARRAY
24435: PUSH
24436: LD_INT 1
24438: ARRAY
24439: STR
24440: PUSH
24441: LD_STRING ,
24443: STR
24444: PUSH
24445: LD_VAR 0 3
24449: PUSH
24450: LD_VAR 0 2
24454: ARRAY
24455: PUSH
24456: LD_INT 2
24458: ARRAY
24459: STR
24460: PUSH
24461: LD_STRING ,
24463: STR
24464: PUSH
24465: LD_VAR 0 3
24469: PUSH
24470: LD_VAR 0 2
24474: ARRAY
24475: PUSH
24476: LD_INT 3
24478: ARRAY
24479: STR
24480: PUSH
24481: LD_STRING ,
24483: STR
24484: PUSH
24485: LD_VAR 0 3
24489: PUSH
24490: LD_VAR 0 2
24494: ARRAY
24495: PUSH
24496: LD_INT 4
24498: ARRAY
24499: STR
24500: PUSH
24501: LD_STRING )
24503: STR
24504: PPUSH
24505: CALL_OW 559
24509: GO 24419
24511: POP
24512: POP
// end ; end ;
24513: LD_VAR 0 1
24517: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24518: LD_INT 0
24520: PPUSH
// if HexInfo ( x , y ) = warehouse then
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: CALL_OW 428
24535: PUSH
24536: LD_VAR 0 1
24540: EQUAL
24541: IFFALSE 24568
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24543: LD_ADDR_EXP 102
24547: PUSH
24548: LD_EXP 102
24552: PPUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: LD_INT 0
24560: PPUSH
24561: CALL_OW 1
24565: ST_TO_ADDR
24566: GO 24619
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24568: LD_ADDR_EXP 102
24572: PUSH
24573: LD_EXP 102
24577: PPUSH
24578: LD_VAR 0 1
24582: PPUSH
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 255
24592: PUSH
24593: LD_VAR 0 1
24597: PUSH
24598: LD_VAR 0 2
24602: PUSH
24603: LD_VAR 0 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 1
24618: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24619: CALL 24628 0 0
// end ;
24623: LD_VAR 0 4
24627: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24628: LD_INT 0
24630: PPUSH
24631: PPUSH
24632: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24633: LD_STRING resetWarehouseGatheringPoints();
24635: PPUSH
24636: CALL_OW 559
// if warehouseGatheringPoints then
24640: LD_EXP 102
24644: IFFALSE 24770
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24646: LD_ADDR_VAR 0 3
24650: PUSH
24651: LD_EXP 102
24655: PPUSH
24656: CALL 71126 0 1
24660: ST_TO_ADDR
// for i := 1 to list do
24661: LD_ADDR_VAR 0 2
24665: PUSH
24666: DOUBLE
24667: LD_INT 1
24669: DEC
24670: ST_TO_ADDR
24671: LD_VAR 0 3
24675: PUSH
24676: FOR_TO
24677: IFFALSE 24768
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24679: LD_STRING setWarehouseGatheringPointXY(
24681: PUSH
24682: LD_VAR 0 3
24686: PUSH
24687: LD_VAR 0 2
24691: ARRAY
24692: PUSH
24693: LD_INT 1
24695: ARRAY
24696: STR
24697: PUSH
24698: LD_STRING ,
24700: STR
24701: PUSH
24702: LD_VAR 0 3
24706: PUSH
24707: LD_VAR 0 2
24711: ARRAY
24712: PUSH
24713: LD_INT 2
24715: ARRAY
24716: STR
24717: PUSH
24718: LD_STRING ,
24720: STR
24721: PUSH
24722: LD_VAR 0 3
24726: PUSH
24727: LD_VAR 0 2
24731: ARRAY
24732: PUSH
24733: LD_INT 3
24735: ARRAY
24736: STR
24737: PUSH
24738: LD_STRING ,
24740: STR
24741: PUSH
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 2
24751: ARRAY
24752: PUSH
24753: LD_INT 4
24755: ARRAY
24756: STR
24757: PUSH
24758: LD_STRING )
24760: STR
24761: PPUSH
24762: CALL_OW 559
24766: GO 24676
24768: POP
24769: POP
// end ; end ;
24770: LD_VAR 0 1
24774: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24775: LD_EXP 102
24779: IFFALSE 25464
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
24787: PPUSH
24788: PPUSH
24789: PPUSH
24790: PPUSH
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
// begin enable ;
24795: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_EXP 102
24805: PPUSH
24806: CALL 71126 0 1
24810: ST_TO_ADDR
// if not list then
24811: LD_VAR 0 3
24815: NOT
24816: IFFALSE 24820
// exit ;
24818: GO 25464
// for i := 1 to list do
24820: LD_ADDR_VAR 0 1
24824: PUSH
24825: DOUBLE
24826: LD_INT 1
24828: DEC
24829: ST_TO_ADDR
24830: LD_VAR 0 3
24834: PUSH
24835: FOR_TO
24836: IFFALSE 25462
// begin depot := list [ i ] [ 2 ] ;
24838: LD_ADDR_VAR 0 8
24842: PUSH
24843: LD_VAR 0 3
24847: PUSH
24848: LD_VAR 0 1
24852: ARRAY
24853: PUSH
24854: LD_INT 2
24856: ARRAY
24857: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24858: LD_ADDR_VAR 0 5
24862: PUSH
24863: LD_VAR 0 3
24867: PUSH
24868: LD_VAR 0 1
24872: ARRAY
24873: PUSH
24874: LD_INT 1
24876: ARRAY
24877: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24878: LD_VAR 0 8
24882: PPUSH
24883: CALL_OW 301
24887: PUSH
24888: LD_VAR 0 5
24892: PUSH
24893: LD_VAR 0 8
24897: PPUSH
24898: CALL_OW 255
24902: NONEQUAL
24903: OR
24904: IFFALSE 24933
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24906: LD_ADDR_EXP 102
24910: PUSH
24911: LD_EXP 102
24915: PPUSH
24916: LD_VAR 0 8
24920: PPUSH
24921: LD_INT 0
24923: PPUSH
24924: CALL_OW 1
24928: ST_TO_ADDR
// exit ;
24929: POP
24930: POP
24931: GO 25464
// end ; x := list [ i ] [ 3 ] ;
24933: LD_ADDR_VAR 0 6
24937: PUSH
24938: LD_VAR 0 3
24942: PUSH
24943: LD_VAR 0 1
24947: ARRAY
24948: PUSH
24949: LD_INT 3
24951: ARRAY
24952: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24953: LD_ADDR_VAR 0 7
24957: PUSH
24958: LD_VAR 0 3
24962: PUSH
24963: LD_VAR 0 1
24967: ARRAY
24968: PUSH
24969: LD_INT 4
24971: ARRAY
24972: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24973: LD_ADDR_VAR 0 9
24977: PUSH
24978: LD_VAR 0 6
24982: PPUSH
24983: LD_VAR 0 7
24987: PPUSH
24988: LD_INT 16
24990: PPUSH
24991: CALL 69714 0 3
24995: ST_TO_ADDR
// if not cratesNearbyPoint then
24996: LD_VAR 0 9
25000: NOT
25001: IFFALSE 25007
// exit ;
25003: POP
25004: POP
25005: GO 25464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25007: LD_ADDR_VAR 0 4
25011: PUSH
25012: LD_INT 22
25014: PUSH
25015: LD_VAR 0 5
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 60
25029: PUSH
25030: EMPTY
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 91
25039: PUSH
25040: LD_VAR 0 8
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 2
25055: PUSH
25056: LD_INT 25
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 25
25068: PUSH
25069: LD_INT 16
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: PPUSH
25087: CALL_OW 69
25091: PUSH
25092: LD_VAR 0 8
25096: PPUSH
25097: CALL_OW 313
25101: PPUSH
25102: LD_INT 3
25104: PUSH
25105: LD_INT 60
25107: PUSH
25108: EMPTY
25109: LIST
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 25
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 25
25130: PUSH
25131: LD_INT 16
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 72
25151: UNION
25152: ST_TO_ADDR
// if tmp then
25153: LD_VAR 0 4
25157: IFFALSE 25237
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_VAR 0 4
25168: PPUSH
25169: LD_INT 3
25171: PPUSH
25172: CALL 67683 0 2
25176: ST_TO_ADDR
// for j in tmp do
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_VAR 0 4
25186: PUSH
25187: FOR_IN
25188: IFFALSE 25231
// begin if IsInUnit ( j ) then
25190: LD_VAR 0 2
25194: PPUSH
25195: CALL_OW 310
25199: IFFALSE 25210
// ComExit ( j ) ;
25201: LD_VAR 0 2
25205: PPUSH
25206: CALL 67766 0 1
// AddComCollect ( j , x , y ) ;
25210: LD_VAR 0 2
25214: PPUSH
25215: LD_VAR 0 6
25219: PPUSH
25220: LD_VAR 0 7
25224: PPUSH
25225: CALL_OW 177
// end ;
25229: GO 25187
25231: POP
25232: POP
// exit ;
25233: POP
25234: POP
25235: GO 25464
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25237: LD_ADDR_VAR 0 4
25241: PUSH
25242: LD_INT 22
25244: PUSH
25245: LD_VAR 0 5
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 91
25256: PUSH
25257: LD_VAR 0 8
25261: PUSH
25262: LD_INT 8
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 34
25275: PUSH
25276: LD_INT 12
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 34
25285: PUSH
25286: LD_INT 51
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 34
25295: PUSH
25296: LD_INT 32
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 34
25305: PUSH
25306: LD_INT 89
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: PPUSH
25325: CALL_OW 69
25329: ST_TO_ADDR
// if tmp then
25330: LD_VAR 0 4
25334: IFFALSE 25460
// begin for j in tmp do
25336: LD_ADDR_VAR 0 2
25340: PUSH
25341: LD_VAR 0 4
25345: PUSH
25346: FOR_IN
25347: IFFALSE 25458
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25349: LD_VAR 0 2
25353: PPUSH
25354: CALL_OW 262
25358: PUSH
25359: LD_INT 3
25361: EQUAL
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 261
25372: PUSH
25373: LD_INT 20
25375: GREATER
25376: OR
25377: PUSH
25378: LD_VAR 0 2
25382: PPUSH
25383: CALL_OW 314
25387: NOT
25388: AND
25389: PUSH
25390: LD_VAR 0 2
25394: PPUSH
25395: CALL_OW 263
25399: PUSH
25400: LD_INT 1
25402: NONEQUAL
25403: PUSH
25404: LD_VAR 0 2
25408: PPUSH
25409: CALL_OW 311
25413: OR
25414: AND
25415: IFFALSE 25456
// begin ComCollect ( j , x , y ) ;
25417: LD_VAR 0 2
25421: PPUSH
25422: LD_VAR 0 6
25426: PPUSH
25427: LD_VAR 0 7
25431: PPUSH
25432: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25436: LD_VAR 0 2
25440: PPUSH
25441: LD_VAR 0 8
25445: PPUSH
25446: CALL_OW 172
// exit ;
25450: POP
25451: POP
25452: POP
25453: POP
25454: GO 25464
// end ;
25456: GO 25346
25458: POP
25459: POP
// end ; end ;
25460: GO 24835
25462: POP
25463: POP
// end ; end_of_file
25464: PPOPN 9
25466: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25467: LD_VAR 0 1
25471: PUSH
25472: LD_INT 200
25474: DOUBLE
25475: GREATEREQUAL
25476: IFFALSE 25484
25478: LD_INT 299
25480: DOUBLE
25481: LESSEQUAL
25482: IFTRUE 25486
25484: GO 25518
25486: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_VAR 0 2
25496: PPUSH
25497: LD_VAR 0 3
25501: PPUSH
25502: LD_VAR 0 4
25506: PPUSH
25507: LD_VAR 0 5
25511: PPUSH
25512: CALL 26006 0 5
25516: GO 25595
25518: LD_INT 300
25520: DOUBLE
25521: GREATEREQUAL
25522: IFFALSE 25530
25524: LD_INT 399
25526: DOUBLE
25527: LESSEQUAL
25528: IFTRUE 25532
25530: GO 25594
25532: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25533: LD_VAR 0 1
25537: PPUSH
25538: LD_VAR 0 2
25542: PPUSH
25543: LD_VAR 0 3
25547: PPUSH
25548: LD_VAR 0 4
25552: PPUSH
25553: LD_VAR 0 5
25557: PPUSH
25558: LD_VAR 0 6
25562: PPUSH
25563: LD_VAR 0 7
25567: PPUSH
25568: LD_VAR 0 8
25572: PPUSH
25573: LD_VAR 0 9
25577: PPUSH
25578: LD_VAR 0 10
25582: PPUSH
25583: LD_VAR 0 11
25587: PPUSH
25588: CALL 22176 0 11
25592: GO 25595
25594: POP
// end ;
25595: PPOPN 11
25597: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25598: LD_VAR 0 1
25602: PPUSH
25603: LD_VAR 0 2
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: LD_VAR 0 4
25617: PPUSH
25618: LD_VAR 0 5
25622: PPUSH
25623: CALL 25742 0 5
// end ; end_of_file
25627: PPOPN 5
25629: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25630: LD_INT 0
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25636: LD_VAR 0 1
25640: PPUSH
25641: CALL_OW 264
25645: PUSH
25646: LD_INT 91
25648: EQUAL
25649: IFFALSE 25721
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25651: LD_INT 68
25653: PPUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 255
25663: PPUSH
25664: CALL_OW 321
25668: PUSH
25669: LD_INT 2
25671: EQUAL
25672: IFFALSE 25684
// eff := 70 else
25674: LD_ADDR_VAR 0 4
25678: PUSH
25679: LD_INT 70
25681: ST_TO_ADDR
25682: GO 25692
// eff := 30 ;
25684: LD_ADDR_VAR 0 4
25688: PUSH
25689: LD_INT 30
25691: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25692: LD_VAR 0 1
25696: PPUSH
25697: CALL_OW 250
25701: PPUSH
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 251
25711: PPUSH
25712: LD_VAR 0 4
25716: PPUSH
25717: CALL_OW 495
// end ; end ;
25721: LD_VAR 0 2
25725: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25726: LD_INT 0
25728: PPUSH
// end ;
25729: LD_VAR 0 4
25733: RET
// export function SOS_Command ( cmd ) ; begin
25734: LD_INT 0
25736: PPUSH
// end ;
25737: LD_VAR 0 2
25741: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25742: LD_INT 0
25744: PPUSH
// end ;
25745: LD_VAR 0 6
25749: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25750: LD_INT 0
25752: PPUSH
25753: PPUSH
// if not vehicle or not factory then
25754: LD_VAR 0 1
25758: NOT
25759: PUSH
25760: LD_VAR 0 2
25764: NOT
25765: OR
25766: IFFALSE 25770
// exit ;
25768: GO 26001
// if factoryWaypoints >= factory then
25770: LD_EXP 101
25774: PUSH
25775: LD_VAR 0 2
25779: GREATEREQUAL
25780: IFFALSE 26001
// if factoryWaypoints [ factory ] then
25782: LD_EXP 101
25786: PUSH
25787: LD_VAR 0 2
25791: ARRAY
25792: IFFALSE 26001
// begin if GetControl ( vehicle ) = control_manual then
25794: LD_VAR 0 1
25798: PPUSH
25799: CALL_OW 263
25803: PUSH
25804: LD_INT 1
25806: EQUAL
25807: IFFALSE 25888
// begin driver := IsDrivenBy ( vehicle ) ;
25809: LD_ADDR_VAR 0 4
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: CALL_OW 311
25823: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25824: LD_VAR 0 4
25828: PPUSH
25829: LD_EXP 101
25833: PUSH
25834: LD_VAR 0 2
25838: ARRAY
25839: PUSH
25840: LD_INT 3
25842: ARRAY
25843: PPUSH
25844: LD_EXP 101
25848: PUSH
25849: LD_VAR 0 2
25853: ARRAY
25854: PUSH
25855: LD_INT 4
25857: ARRAY
25858: PPUSH
25859: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25863: LD_VAR 0 4
25867: PPUSH
25868: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25872: LD_VAR 0 4
25876: PPUSH
25877: LD_VAR 0 2
25881: PPUSH
25882: CALL_OW 180
// end else
25886: GO 26001
// if GetControl ( vehicle ) = control_remote then
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 263
25897: PUSH
25898: LD_INT 2
25900: EQUAL
25901: IFFALSE 25962
// begin wait ( 0 0$2 ) ;
25903: LD_INT 70
25905: PPUSH
25906: CALL_OW 67
// if Connect ( vehicle ) then
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL 38025 0 1
25919: IFFALSE 25960
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25921: LD_VAR 0 1
25925: PPUSH
25926: LD_EXP 101
25930: PUSH
25931: LD_VAR 0 2
25935: ARRAY
25936: PUSH
25937: LD_INT 3
25939: ARRAY
25940: PPUSH
25941: LD_EXP 101
25945: PUSH
25946: LD_VAR 0 2
25950: ARRAY
25951: PUSH
25952: LD_INT 4
25954: ARRAY
25955: PPUSH
25956: CALL_OW 171
// end else
25960: GO 26001
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25962: LD_VAR 0 1
25966: PPUSH
25967: LD_EXP 101
25971: PUSH
25972: LD_VAR 0 2
25976: ARRAY
25977: PUSH
25978: LD_INT 3
25980: ARRAY
25981: PPUSH
25982: LD_EXP 101
25986: PUSH
25987: LD_VAR 0 2
25991: ARRAY
25992: PUSH
25993: LD_INT 4
25995: ARRAY
25996: PPUSH
25997: CALL_OW 171
// end ; end ;
26001: LD_VAR 0 3
26005: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26006: LD_INT 0
26008: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26009: LD_VAR 0 1
26013: PUSH
26014: LD_INT 250
26016: EQUAL
26017: PUSH
26018: LD_VAR 0 2
26022: PPUSH
26023: CALL_OW 264
26027: PUSH
26028: LD_INT 81
26030: EQUAL
26031: AND
26032: IFFALSE 26053
// MinerPlaceMine ( unit , x , y ) ;
26034: LD_VAR 0 2
26038: PPUSH
26039: LD_VAR 0 4
26043: PPUSH
26044: LD_VAR 0 5
26048: PPUSH
26049: CALL 28438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26053: LD_VAR 0 1
26057: PUSH
26058: LD_INT 251
26060: EQUAL
26061: PUSH
26062: LD_VAR 0 2
26066: PPUSH
26067: CALL_OW 264
26071: PUSH
26072: LD_INT 81
26074: EQUAL
26075: AND
26076: IFFALSE 26097
// MinerDetonateMine ( unit , x , y ) ;
26078: LD_VAR 0 2
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: LD_VAR 0 5
26092: PPUSH
26093: CALL 28713 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26097: LD_VAR 0 1
26101: PUSH
26102: LD_INT 252
26104: EQUAL
26105: PUSH
26106: LD_VAR 0 2
26110: PPUSH
26111: CALL_OW 264
26115: PUSH
26116: LD_INT 81
26118: EQUAL
26119: AND
26120: IFFALSE 26141
// MinerCreateMinefield ( unit , x , y ) ;
26122: LD_VAR 0 2
26126: PPUSH
26127: LD_VAR 0 4
26131: PPUSH
26132: LD_VAR 0 5
26136: PPUSH
26137: CALL 29130 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26141: LD_VAR 0 1
26145: PUSH
26146: LD_INT 253
26148: EQUAL
26149: PUSH
26150: LD_VAR 0 2
26154: PPUSH
26155: CALL_OW 257
26159: PUSH
26160: LD_INT 5
26162: EQUAL
26163: AND
26164: IFFALSE 26185
// ComBinocular ( unit , x , y ) ;
26166: LD_VAR 0 2
26170: PPUSH
26171: LD_VAR 0 4
26175: PPUSH
26176: LD_VAR 0 5
26180: PPUSH
26181: CALL 29499 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26185: LD_VAR 0 1
26189: PUSH
26190: LD_INT 254
26192: EQUAL
26193: PUSH
26194: LD_VAR 0 2
26198: PPUSH
26199: CALL_OW 264
26203: PUSH
26204: LD_INT 99
26206: EQUAL
26207: AND
26208: PUSH
26209: LD_VAR 0 3
26213: PPUSH
26214: CALL_OW 263
26218: PUSH
26219: LD_INT 3
26221: EQUAL
26222: AND
26223: IFFALSE 26239
// HackDestroyVehicle ( unit , selectedUnit ) ;
26225: LD_VAR 0 2
26229: PPUSH
26230: LD_VAR 0 3
26234: PPUSH
26235: CALL 27802 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26239: LD_VAR 0 1
26243: PUSH
26244: LD_INT 255
26246: EQUAL
26247: PUSH
26248: LD_VAR 0 2
26252: PPUSH
26253: CALL_OW 264
26257: PUSH
26258: LD_INT 14
26260: PUSH
26261: LD_INT 53
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: IN
26268: AND
26269: PUSH
26270: LD_VAR 0 4
26274: PPUSH
26275: LD_VAR 0 5
26279: PPUSH
26280: CALL_OW 488
26284: AND
26285: IFFALSE 26309
// CutTreeXYR ( unit , x , y , 12 ) ;
26287: LD_VAR 0 2
26291: PPUSH
26292: LD_VAR 0 4
26296: PPUSH
26297: LD_VAR 0 5
26301: PPUSH
26302: LD_INT 12
26304: PPUSH
26305: CALL 26372 0 4
// if cmd = 256 then
26309: LD_VAR 0 1
26313: PUSH
26314: LD_INT 256
26316: EQUAL
26317: IFFALSE 26338
// SetFactoryWaypoint ( unit , x , y ) ;
26319: LD_VAR 0 2
26323: PPUSH
26324: LD_VAR 0 4
26328: PPUSH
26329: LD_VAR 0 5
26333: PPUSH
26334: CALL 24156 0 3
// if cmd = 257 then
26338: LD_VAR 0 1
26342: PUSH
26343: LD_INT 257
26345: EQUAL
26346: IFFALSE 26367
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26348: LD_VAR 0 2
26352: PPUSH
26353: LD_VAR 0 4
26357: PPUSH
26358: LD_VAR 0 5
26362: PPUSH
26363: CALL 24518 0 3
// end ;
26367: LD_VAR 0 6
26371: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26383: LD_VAR 0 1
26387: NOT
26388: PUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: CALL_OW 488
26403: NOT
26404: OR
26405: PUSH
26406: LD_VAR 0 4
26410: NOT
26411: OR
26412: IFFALSE 26416
// exit ;
26414: GO 26756
// list := [ ] ;
26416: LD_ADDR_VAR 0 13
26420: PUSH
26421: EMPTY
26422: ST_TO_ADDR
// if x - r < 0 then
26423: LD_VAR 0 2
26427: PUSH
26428: LD_VAR 0 4
26432: MINUS
26433: PUSH
26434: LD_INT 0
26436: LESS
26437: IFFALSE 26449
// min_x := 0 else
26439: LD_ADDR_VAR 0 7
26443: PUSH
26444: LD_INT 0
26446: ST_TO_ADDR
26447: GO 26465
// min_x := x - r ;
26449: LD_ADDR_VAR 0 7
26453: PUSH
26454: LD_VAR 0 2
26458: PUSH
26459: LD_VAR 0 4
26463: MINUS
26464: ST_TO_ADDR
// if y - r < 0 then
26465: LD_VAR 0 3
26469: PUSH
26470: LD_VAR 0 4
26474: MINUS
26475: PUSH
26476: LD_INT 0
26478: LESS
26479: IFFALSE 26491
// min_y := 0 else
26481: LD_ADDR_VAR 0 8
26485: PUSH
26486: LD_INT 0
26488: ST_TO_ADDR
26489: GO 26507
// min_y := y - r ;
26491: LD_ADDR_VAR 0 8
26495: PUSH
26496: LD_VAR 0 3
26500: PUSH
26501: LD_VAR 0 4
26505: MINUS
26506: ST_TO_ADDR
// max_x := x + r ;
26507: LD_ADDR_VAR 0 9
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: LD_VAR 0 4
26521: PLUS
26522: ST_TO_ADDR
// max_y := y + r ;
26523: LD_ADDR_VAR 0 10
26527: PUSH
26528: LD_VAR 0 3
26532: PUSH
26533: LD_VAR 0 4
26537: PLUS
26538: ST_TO_ADDR
// for _x = min_x to max_x do
26539: LD_ADDR_VAR 0 11
26543: PUSH
26544: DOUBLE
26545: LD_VAR 0 7
26549: DEC
26550: ST_TO_ADDR
26551: LD_VAR 0 9
26555: PUSH
26556: FOR_TO
26557: IFFALSE 26674
// for _y = min_y to max_y do
26559: LD_ADDR_VAR 0 12
26563: PUSH
26564: DOUBLE
26565: LD_VAR 0 8
26569: DEC
26570: ST_TO_ADDR
26571: LD_VAR 0 10
26575: PUSH
26576: FOR_TO
26577: IFFALSE 26670
// begin if not ValidHex ( _x , _y ) then
26579: LD_VAR 0 11
26583: PPUSH
26584: LD_VAR 0 12
26588: PPUSH
26589: CALL_OW 488
26593: NOT
26594: IFFALSE 26598
// continue ;
26596: GO 26576
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26598: LD_VAR 0 11
26602: PPUSH
26603: LD_VAR 0 12
26607: PPUSH
26608: CALL_OW 351
26612: PUSH
26613: LD_VAR 0 11
26617: PPUSH
26618: LD_VAR 0 12
26622: PPUSH
26623: CALL_OW 554
26627: AND
26628: IFFALSE 26668
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26630: LD_ADDR_VAR 0 13
26634: PUSH
26635: LD_VAR 0 13
26639: PPUSH
26640: LD_VAR 0 13
26644: PUSH
26645: LD_INT 1
26647: PLUS
26648: PPUSH
26649: LD_VAR 0 11
26653: PUSH
26654: LD_VAR 0 12
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PPUSH
26663: CALL_OW 2
26667: ST_TO_ADDR
// end ;
26668: GO 26576
26670: POP
26671: POP
26672: GO 26556
26674: POP
26675: POP
// if not list then
26676: LD_VAR 0 13
26680: NOT
26681: IFFALSE 26685
// exit ;
26683: GO 26756
// for i in list do
26685: LD_ADDR_VAR 0 6
26689: PUSH
26690: LD_VAR 0 13
26694: PUSH
26695: FOR_IN
26696: IFFALSE 26754
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26698: LD_VAR 0 1
26702: PPUSH
26703: LD_STRING M
26705: PUSH
26706: LD_VAR 0 6
26710: PUSH
26711: LD_INT 1
26713: ARRAY
26714: PUSH
26715: LD_VAR 0 6
26719: PUSH
26720: LD_INT 2
26722: ARRAY
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: PPUSH
26748: CALL_OW 447
26752: GO 26695
26754: POP
26755: POP
// end ;
26756: LD_VAR 0 5
26760: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26761: LD_EXP 104
26765: NOT
26766: IFFALSE 26816
26768: GO 26770
26770: DISABLE
// begin initHack := true ;
26771: LD_ADDR_EXP 104
26775: PUSH
26776: LD_INT 1
26778: ST_TO_ADDR
// hackTanks := [ ] ;
26779: LD_ADDR_EXP 105
26783: PUSH
26784: EMPTY
26785: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26786: LD_ADDR_EXP 106
26790: PUSH
26791: EMPTY
26792: ST_TO_ADDR
// hackLimit := 3 ;
26793: LD_ADDR_EXP 107
26797: PUSH
26798: LD_INT 3
26800: ST_TO_ADDR
// hackDist := 12 ;
26801: LD_ADDR_EXP 108
26805: PUSH
26806: LD_INT 12
26808: ST_TO_ADDR
// hackCounter := [ ] ;
26809: LD_ADDR_EXP 109
26813: PUSH
26814: EMPTY
26815: ST_TO_ADDR
// end ;
26816: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26817: LD_EXP 104
26821: PUSH
26822: LD_INT 34
26824: PUSH
26825: LD_INT 99
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PPUSH
26832: CALL_OW 69
26836: AND
26837: IFFALSE 27090
26839: GO 26841
26841: DISABLE
26842: LD_INT 0
26844: PPUSH
26845: PPUSH
// begin enable ;
26846: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26847: LD_ADDR_VAR 0 1
26851: PUSH
26852: LD_INT 34
26854: PUSH
26855: LD_INT 99
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: PUSH
26867: FOR_IN
26868: IFFALSE 27088
// begin if not i in hackTanks then
26870: LD_VAR 0 1
26874: PUSH
26875: LD_EXP 105
26879: IN
26880: NOT
26881: IFFALSE 26964
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26883: LD_ADDR_EXP 105
26887: PUSH
26888: LD_EXP 105
26892: PPUSH
26893: LD_EXP 105
26897: PUSH
26898: LD_INT 1
26900: PLUS
26901: PPUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 1
26911: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26912: LD_ADDR_EXP 106
26916: PUSH
26917: LD_EXP 106
26921: PPUSH
26922: LD_EXP 106
26926: PUSH
26927: LD_INT 1
26929: PLUS
26930: PPUSH
26931: EMPTY
26932: PPUSH
26933: CALL_OW 1
26937: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26938: LD_ADDR_EXP 109
26942: PUSH
26943: LD_EXP 109
26947: PPUSH
26948: LD_EXP 109
26952: PUSH
26953: LD_INT 1
26955: PLUS
26956: PPUSH
26957: EMPTY
26958: PPUSH
26959: CALL_OW 1
26963: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 302
26973: NOT
26974: IFFALSE 26987
// begin HackUnlinkAll ( i ) ;
26976: LD_VAR 0 1
26980: PPUSH
26981: CALL 27093 0 1
// continue ;
26985: GO 26867
// end ; HackCheckCapturedStatus ( i ) ;
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL 27536 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26996: LD_ADDR_VAR 0 2
27000: PUSH
27001: LD_INT 81
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 255
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 33
27020: PUSH
27021: LD_INT 3
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 91
27030: PUSH
27031: LD_VAR 0 1
27035: PUSH
27036: LD_EXP 108
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 50
27048: PUSH
27049: EMPTY
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 69
27062: ST_TO_ADDR
// if not tmp then
27063: LD_VAR 0 2
27067: NOT
27068: IFFALSE 27072
// continue ;
27070: GO 26867
// HackLink ( i , tmp ) ;
27072: LD_VAR 0 1
27076: PPUSH
27077: LD_VAR 0 2
27081: PPUSH
27082: CALL 27229 0 2
// end ;
27086: GO 26867
27088: POP
27089: POP
// end ;
27090: PPOPN 2
27092: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
27097: PPUSH
// if not hack in hackTanks then
27098: LD_VAR 0 1
27102: PUSH
27103: LD_EXP 105
27107: IN
27108: NOT
27109: IFFALSE 27113
// exit ;
27111: GO 27224
// index := GetElementIndex ( hackTanks , hack ) ;
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: LD_EXP 105
27122: PPUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL 34841 0 2
27132: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27133: LD_EXP 106
27137: PUSH
27138: LD_VAR 0 4
27142: ARRAY
27143: IFFALSE 27224
// begin for i in hackTanksCaptured [ index ] do
27145: LD_ADDR_VAR 0 3
27149: PUSH
27150: LD_EXP 106
27154: PUSH
27155: LD_VAR 0 4
27159: ARRAY
27160: PUSH
27161: FOR_IN
27162: IFFALSE 27188
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27164: LD_VAR 0 3
27168: PUSH
27169: LD_INT 1
27171: ARRAY
27172: PPUSH
27173: LD_VAR 0 3
27177: PUSH
27178: LD_INT 2
27180: ARRAY
27181: PPUSH
27182: CALL_OW 235
27186: GO 27161
27188: POP
27189: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27190: LD_ADDR_EXP 106
27194: PUSH
27195: LD_EXP 106
27199: PPUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: EMPTY
27206: PPUSH
27207: CALL_OW 1
27211: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_INT 0
27219: PPUSH
27220: CALL_OW 505
// end ; end ;
27224: LD_VAR 0 2
27228: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
27233: PPUSH
// if not hack in hackTanks or not vehicles then
27234: LD_VAR 0 1
27238: PUSH
27239: LD_EXP 105
27243: IN
27244: NOT
27245: PUSH
27246: LD_VAR 0 2
27250: NOT
27251: OR
27252: IFFALSE 27256
// exit ;
27254: GO 27531
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27256: LD_ADDR_VAR 0 2
27260: PUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: LD_INT 1
27273: PPUSH
27274: LD_INT 1
27276: PPUSH
27277: CALL 35491 0 4
27281: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27282: LD_ADDR_VAR 0 5
27286: PUSH
27287: LD_EXP 105
27291: PPUSH
27292: LD_VAR 0 1
27296: PPUSH
27297: CALL 34841 0 2
27301: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27302: LD_EXP 106
27306: PUSH
27307: LD_VAR 0 5
27311: ARRAY
27312: PUSH
27313: LD_EXP 107
27317: LESS
27318: IFFALSE 27507
// begin for i := 1 to vehicles do
27320: LD_ADDR_VAR 0 4
27324: PUSH
27325: DOUBLE
27326: LD_INT 1
27328: DEC
27329: ST_TO_ADDR
27330: LD_VAR 0 2
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27505
// begin if hackTanksCaptured [ index ] = hackLimit then
27338: LD_EXP 106
27342: PUSH
27343: LD_VAR 0 5
27347: ARRAY
27348: PUSH
27349: LD_EXP 107
27353: EQUAL
27354: IFFALSE 27358
// break ;
27356: GO 27505
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27358: LD_ADDR_EXP 109
27362: PUSH
27363: LD_EXP 109
27367: PPUSH
27368: LD_VAR 0 5
27372: PPUSH
27373: LD_EXP 109
27377: PUSH
27378: LD_VAR 0 5
27382: ARRAY
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: PPUSH
27388: CALL_OW 1
27392: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27393: LD_ADDR_EXP 106
27397: PUSH
27398: LD_EXP 106
27402: PPUSH
27403: LD_VAR 0 5
27407: PUSH
27408: LD_EXP 106
27412: PUSH
27413: LD_VAR 0 5
27417: ARRAY
27418: PUSH
27419: LD_INT 1
27421: PLUS
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PPUSH
27427: LD_VAR 0 2
27431: PUSH
27432: LD_VAR 0 4
27436: ARRAY
27437: PUSH
27438: LD_VAR 0 2
27442: PUSH
27443: LD_VAR 0 4
27447: ARRAY
27448: PPUSH
27449: CALL_OW 255
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PPUSH
27458: CALL 35056 0 3
27462: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27463: LD_VAR 0 2
27467: PUSH
27468: LD_VAR 0 4
27472: ARRAY
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 255
27483: PPUSH
27484: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27488: LD_VAR 0 2
27492: PUSH
27493: LD_VAR 0 4
27497: ARRAY
27498: PPUSH
27499: CALL_OW 141
// end ;
27503: GO 27335
27505: POP
27506: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27507: LD_VAR 0 1
27511: PPUSH
27512: LD_EXP 106
27516: PUSH
27517: LD_VAR 0 5
27521: ARRAY
27522: PUSH
27523: LD_INT 0
27525: PLUS
27526: PPUSH
27527: CALL_OW 505
// end ;
27531: LD_VAR 0 3
27535: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27536: LD_INT 0
27538: PPUSH
27539: PPUSH
27540: PPUSH
27541: PPUSH
// if not hack in hackTanks then
27542: LD_VAR 0 1
27546: PUSH
27547: LD_EXP 105
27551: IN
27552: NOT
27553: IFFALSE 27557
// exit ;
27555: GO 27797
// index := GetElementIndex ( hackTanks , hack ) ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_EXP 105
27566: PPUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL 34841 0 2
27576: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: DOUBLE
27583: LD_EXP 106
27587: PUSH
27588: LD_VAR 0 4
27592: ARRAY
27593: INC
27594: ST_TO_ADDR
27595: LD_INT 1
27597: PUSH
27598: FOR_DOWNTO
27599: IFFALSE 27771
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27601: LD_ADDR_VAR 0 5
27605: PUSH
27606: LD_EXP 106
27610: PUSH
27611: LD_VAR 0 4
27615: ARRAY
27616: PUSH
27617: LD_VAR 0 3
27621: ARRAY
27622: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27623: LD_VAR 0 5
27627: PUSH
27628: LD_INT 1
27630: ARRAY
27631: PPUSH
27632: CALL_OW 302
27636: NOT
27637: PUSH
27638: LD_VAR 0 5
27642: PUSH
27643: LD_INT 1
27645: ARRAY
27646: PPUSH
27647: CALL_OW 255
27651: PUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 255
27661: NONEQUAL
27662: OR
27663: IFFALSE 27769
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27665: LD_VAR 0 5
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: CALL_OW 305
27678: PUSH
27679: LD_VAR 0 5
27683: PUSH
27684: LD_INT 1
27686: ARRAY
27687: PPUSH
27688: CALL_OW 255
27692: PUSH
27693: LD_VAR 0 1
27697: PPUSH
27698: CALL_OW 255
27702: EQUAL
27703: AND
27704: IFFALSE 27728
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27706: LD_VAR 0 5
27710: PUSH
27711: LD_INT 1
27713: ARRAY
27714: PPUSH
27715: LD_VAR 0 5
27719: PUSH
27720: LD_INT 2
27722: ARRAY
27723: PPUSH
27724: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27728: LD_ADDR_EXP 106
27732: PUSH
27733: LD_EXP 106
27737: PPUSH
27738: LD_VAR 0 4
27742: PPUSH
27743: LD_EXP 106
27747: PUSH
27748: LD_VAR 0 4
27752: ARRAY
27753: PPUSH
27754: LD_VAR 0 3
27758: PPUSH
27759: CALL_OW 3
27763: PPUSH
27764: CALL_OW 1
27768: ST_TO_ADDR
// end ; end ;
27769: GO 27598
27771: POP
27772: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_EXP 106
27782: PUSH
27783: LD_VAR 0 4
27787: ARRAY
27788: PUSH
27789: LD_INT 0
27791: PLUS
27792: PPUSH
27793: CALL_OW 505
// end ;
27797: LD_VAR 0 2
27801: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27802: LD_INT 0
27804: PPUSH
27805: PPUSH
27806: PPUSH
27807: PPUSH
// if not hack in hackTanks then
27808: LD_VAR 0 1
27812: PUSH
27813: LD_EXP 105
27817: IN
27818: NOT
27819: IFFALSE 27823
// exit ;
27821: GO 27908
// index := GetElementIndex ( hackTanks , hack ) ;
27823: LD_ADDR_VAR 0 5
27827: PUSH
27828: LD_EXP 105
27832: PPUSH
27833: LD_VAR 0 1
27837: PPUSH
27838: CALL 34841 0 2
27842: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27843: LD_ADDR_VAR 0 4
27847: PUSH
27848: DOUBLE
27849: LD_INT 1
27851: DEC
27852: ST_TO_ADDR
27853: LD_EXP 106
27857: PUSH
27858: LD_VAR 0 5
27862: ARRAY
27863: PUSH
27864: FOR_TO
27865: IFFALSE 27906
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27867: LD_EXP 106
27871: PUSH
27872: LD_VAR 0 5
27876: ARRAY
27877: PUSH
27878: LD_VAR 0 4
27882: ARRAY
27883: PUSH
27884: LD_INT 1
27886: ARRAY
27887: PUSH
27888: LD_VAR 0 2
27892: EQUAL
27893: IFFALSE 27904
// KillUnit ( vehicle ) ;
27895: LD_VAR 0 2
27899: PPUSH
27900: CALL_OW 66
27904: GO 27864
27906: POP
27907: POP
// end ;
27908: LD_VAR 0 3
27912: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27913: LD_EXP 110
27917: NOT
27918: IFFALSE 27953
27920: GO 27922
27922: DISABLE
// begin initMiner := true ;
27923: LD_ADDR_EXP 110
27927: PUSH
27928: LD_INT 1
27930: ST_TO_ADDR
// minersList := [ ] ;
27931: LD_ADDR_EXP 111
27935: PUSH
27936: EMPTY
27937: ST_TO_ADDR
// minerMinesList := [ ] ;
27938: LD_ADDR_EXP 112
27942: PUSH
27943: EMPTY
27944: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27945: LD_ADDR_EXP 113
27949: PUSH
27950: LD_INT 5
27952: ST_TO_ADDR
// end ;
27953: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27954: LD_EXP 110
27958: PUSH
27959: LD_INT 34
27961: PUSH
27962: LD_INT 81
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PPUSH
27969: CALL_OW 69
27973: AND
27974: IFFALSE 28435
27976: GO 27978
27978: DISABLE
27979: LD_INT 0
27981: PPUSH
27982: PPUSH
27983: PPUSH
27984: PPUSH
// begin enable ;
27985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27986: LD_ADDR_VAR 0 1
27990: PUSH
27991: LD_INT 34
27993: PUSH
27994: LD_INT 81
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 69
28005: PUSH
28006: FOR_IN
28007: IFFALSE 28079
// begin if not i in minersList then
28009: LD_VAR 0 1
28013: PUSH
28014: LD_EXP 111
28018: IN
28019: NOT
28020: IFFALSE 28077
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28022: LD_ADDR_EXP 111
28026: PUSH
28027: LD_EXP 111
28031: PPUSH
28032: LD_EXP 111
28036: PUSH
28037: LD_INT 1
28039: PLUS
28040: PPUSH
28041: LD_VAR 0 1
28045: PPUSH
28046: CALL_OW 1
28050: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28051: LD_ADDR_EXP 112
28055: PUSH
28056: LD_EXP 112
28060: PPUSH
28061: LD_EXP 112
28065: PUSH
28066: LD_INT 1
28068: PLUS
28069: PPUSH
28070: EMPTY
28071: PPUSH
28072: CALL_OW 1
28076: ST_TO_ADDR
// end end ;
28077: GO 28006
28079: POP
28080: POP
// for i := minerMinesList downto 1 do
28081: LD_ADDR_VAR 0 1
28085: PUSH
28086: DOUBLE
28087: LD_EXP 112
28091: INC
28092: ST_TO_ADDR
28093: LD_INT 1
28095: PUSH
28096: FOR_DOWNTO
28097: IFFALSE 28433
// begin if IsLive ( minersList [ i ] ) then
28099: LD_EXP 111
28103: PUSH
28104: LD_VAR 0 1
28108: ARRAY
28109: PPUSH
28110: CALL_OW 300
28114: IFFALSE 28142
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28116: LD_EXP 111
28120: PUSH
28121: LD_VAR 0 1
28125: ARRAY
28126: PPUSH
28127: LD_EXP 112
28131: PUSH
28132: LD_VAR 0 1
28136: ARRAY
28137: PPUSH
28138: CALL_OW 505
// if not minerMinesList [ i ] then
28142: LD_EXP 112
28146: PUSH
28147: LD_VAR 0 1
28151: ARRAY
28152: NOT
28153: IFFALSE 28157
// continue ;
28155: GO 28096
// for j := minerMinesList [ i ] downto 1 do
28157: LD_ADDR_VAR 0 2
28161: PUSH
28162: DOUBLE
28163: LD_EXP 112
28167: PUSH
28168: LD_VAR 0 1
28172: ARRAY
28173: INC
28174: ST_TO_ADDR
28175: LD_INT 1
28177: PUSH
28178: FOR_DOWNTO
28179: IFFALSE 28429
// begin side := GetSide ( minersList [ i ] ) ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_EXP 111
28190: PUSH
28191: LD_VAR 0 1
28195: ARRAY
28196: PPUSH
28197: CALL_OW 255
28201: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28202: LD_ADDR_VAR 0 4
28206: PUSH
28207: LD_EXP 112
28211: PUSH
28212: LD_VAR 0 1
28216: ARRAY
28217: PUSH
28218: LD_VAR 0 2
28222: ARRAY
28223: PUSH
28224: LD_INT 1
28226: ARRAY
28227: PPUSH
28228: LD_EXP 112
28232: PUSH
28233: LD_VAR 0 1
28237: ARRAY
28238: PUSH
28239: LD_VAR 0 2
28243: ARRAY
28244: PUSH
28245: LD_INT 2
28247: ARRAY
28248: PPUSH
28249: CALL_OW 428
28253: ST_TO_ADDR
// if not tmp then
28254: LD_VAR 0 4
28258: NOT
28259: IFFALSE 28263
// continue ;
28261: GO 28178
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28263: LD_VAR 0 4
28267: PUSH
28268: LD_INT 81
28270: PUSH
28271: LD_VAR 0 3
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PPUSH
28280: CALL_OW 69
28284: IN
28285: PUSH
28286: LD_EXP 112
28290: PUSH
28291: LD_VAR 0 1
28295: ARRAY
28296: PUSH
28297: LD_VAR 0 2
28301: ARRAY
28302: PUSH
28303: LD_INT 1
28305: ARRAY
28306: PPUSH
28307: LD_EXP 112
28311: PUSH
28312: LD_VAR 0 1
28316: ARRAY
28317: PUSH
28318: LD_VAR 0 2
28322: ARRAY
28323: PUSH
28324: LD_INT 2
28326: ARRAY
28327: PPUSH
28328: CALL_OW 458
28332: AND
28333: IFFALSE 28427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28335: LD_EXP 112
28339: PUSH
28340: LD_VAR 0 1
28344: ARRAY
28345: PUSH
28346: LD_VAR 0 2
28350: ARRAY
28351: PUSH
28352: LD_INT 1
28354: ARRAY
28355: PPUSH
28356: LD_EXP 112
28360: PUSH
28361: LD_VAR 0 1
28365: ARRAY
28366: PUSH
28367: LD_VAR 0 2
28371: ARRAY
28372: PUSH
28373: LD_INT 2
28375: ARRAY
28376: PPUSH
28377: LD_VAR 0 3
28381: PPUSH
28382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28386: LD_ADDR_EXP 112
28390: PUSH
28391: LD_EXP 112
28395: PPUSH
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_EXP 112
28405: PUSH
28406: LD_VAR 0 1
28410: ARRAY
28411: PPUSH
28412: LD_VAR 0 2
28416: PPUSH
28417: CALL_OW 3
28421: PPUSH
28422: CALL_OW 1
28426: ST_TO_ADDR
// end ; end ;
28427: GO 28178
28429: POP
28430: POP
// end ;
28431: GO 28096
28433: POP
28434: POP
// end ;
28435: PPOPN 4
28437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28438: LD_INT 0
28440: PPUSH
28441: PPUSH
// result := false ;
28442: LD_ADDR_VAR 0 4
28446: PUSH
28447: LD_INT 0
28449: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28450: LD_VAR 0 1
28454: PPUSH
28455: CALL_OW 264
28459: PUSH
28460: LD_INT 81
28462: EQUAL
28463: NOT
28464: IFFALSE 28468
// exit ;
28466: GO 28708
// index := GetElementIndex ( minersList , unit ) ;
28468: LD_ADDR_VAR 0 5
28472: PUSH
28473: LD_EXP 111
28477: PPUSH
28478: LD_VAR 0 1
28482: PPUSH
28483: CALL 34841 0 2
28487: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28488: LD_EXP 112
28492: PUSH
28493: LD_VAR 0 5
28497: ARRAY
28498: PUSH
28499: LD_EXP 113
28503: GREATEREQUAL
28504: IFFALSE 28508
// exit ;
28506: GO 28708
// ComMoveXY ( unit , x , y ) ;
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: LD_VAR 0 3
28522: PPUSH
28523: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28527: LD_INT 35
28529: PPUSH
28530: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28534: LD_VAR 0 1
28538: PPUSH
28539: LD_VAR 0 2
28543: PPUSH
28544: LD_VAR 0 3
28548: PPUSH
28549: CALL 66177 0 3
28553: NOT
28554: PUSH
28555: LD_VAR 0 1
28559: PPUSH
28560: CALL_OW 314
28564: AND
28565: IFFALSE 28569
// exit ;
28567: GO 28708
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28569: LD_VAR 0 2
28573: PPUSH
28574: LD_VAR 0 3
28578: PPUSH
28579: CALL_OW 428
28583: PUSH
28584: LD_VAR 0 1
28588: EQUAL
28589: PUSH
28590: LD_VAR 0 1
28594: PPUSH
28595: CALL_OW 314
28599: NOT
28600: AND
28601: IFFALSE 28527
// PlaySoundXY ( x , y , PlantMine ) ;
28603: LD_VAR 0 2
28607: PPUSH
28608: LD_VAR 0 3
28612: PPUSH
28613: LD_STRING PlantMine
28615: PPUSH
28616: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28620: LD_VAR 0 2
28624: PPUSH
28625: LD_VAR 0 3
28629: PPUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 255
28639: PPUSH
28640: LD_INT 0
28642: PPUSH
28643: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28647: LD_ADDR_EXP 112
28651: PUSH
28652: LD_EXP 112
28656: PPUSH
28657: LD_VAR 0 5
28661: PUSH
28662: LD_EXP 112
28666: PUSH
28667: LD_VAR 0 5
28671: ARRAY
28672: PUSH
28673: LD_INT 1
28675: PLUS
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: LD_VAR 0 2
28685: PUSH
28686: LD_VAR 0 3
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PPUSH
28695: CALL 35056 0 3
28699: ST_TO_ADDR
// result := true ;
28700: LD_ADDR_VAR 0 4
28704: PUSH
28705: LD_INT 1
28707: ST_TO_ADDR
// end ;
28708: LD_VAR 0 4
28712: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28713: LD_INT 0
28715: PPUSH
28716: PPUSH
28717: PPUSH
// if not unit in minersList then
28718: LD_VAR 0 1
28722: PUSH
28723: LD_EXP 111
28727: IN
28728: NOT
28729: IFFALSE 28733
// exit ;
28731: GO 29125
// index := GetElementIndex ( minersList , unit ) ;
28733: LD_ADDR_VAR 0 6
28737: PUSH
28738: LD_EXP 111
28742: PPUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL 34841 0 2
28752: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28753: LD_ADDR_VAR 0 5
28757: PUSH
28758: DOUBLE
28759: LD_EXP 112
28763: PUSH
28764: LD_VAR 0 6
28768: ARRAY
28769: INC
28770: ST_TO_ADDR
28771: LD_INT 1
28773: PUSH
28774: FOR_DOWNTO
28775: IFFALSE 28936
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28777: LD_EXP 112
28781: PUSH
28782: LD_VAR 0 6
28786: ARRAY
28787: PUSH
28788: LD_VAR 0 5
28792: ARRAY
28793: PUSH
28794: LD_INT 1
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 2
28802: EQUAL
28803: PUSH
28804: LD_EXP 112
28808: PUSH
28809: LD_VAR 0 6
28813: ARRAY
28814: PUSH
28815: LD_VAR 0 5
28819: ARRAY
28820: PUSH
28821: LD_INT 2
28823: ARRAY
28824: PUSH
28825: LD_VAR 0 3
28829: EQUAL
28830: AND
28831: IFFALSE 28934
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28833: LD_EXP 112
28837: PUSH
28838: LD_VAR 0 6
28842: ARRAY
28843: PUSH
28844: LD_VAR 0 5
28848: ARRAY
28849: PUSH
28850: LD_INT 1
28852: ARRAY
28853: PPUSH
28854: LD_EXP 112
28858: PUSH
28859: LD_VAR 0 6
28863: ARRAY
28864: PUSH
28865: LD_VAR 0 5
28869: ARRAY
28870: PUSH
28871: LD_INT 2
28873: ARRAY
28874: PPUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 255
28884: PPUSH
28885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28889: LD_ADDR_EXP 112
28893: PUSH
28894: LD_EXP 112
28898: PPUSH
28899: LD_VAR 0 6
28903: PPUSH
28904: LD_EXP 112
28908: PUSH
28909: LD_VAR 0 6
28913: ARRAY
28914: PPUSH
28915: LD_VAR 0 5
28919: PPUSH
28920: CALL_OW 3
28924: PPUSH
28925: CALL_OW 1
28929: ST_TO_ADDR
// exit ;
28930: POP
28931: POP
28932: GO 29125
// end ; end ;
28934: GO 28774
28936: POP
28937: POP
// for i := minerMinesList [ index ] downto 1 do
28938: LD_ADDR_VAR 0 5
28942: PUSH
28943: DOUBLE
28944: LD_EXP 112
28948: PUSH
28949: LD_VAR 0 6
28953: ARRAY
28954: INC
28955: ST_TO_ADDR
28956: LD_INT 1
28958: PUSH
28959: FOR_DOWNTO
28960: IFFALSE 29123
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28962: LD_EXP 112
28966: PUSH
28967: LD_VAR 0 6
28971: ARRAY
28972: PUSH
28973: LD_VAR 0 5
28977: ARRAY
28978: PUSH
28979: LD_INT 1
28981: ARRAY
28982: PPUSH
28983: LD_EXP 112
28987: PUSH
28988: LD_VAR 0 6
28992: ARRAY
28993: PUSH
28994: LD_VAR 0 5
28998: ARRAY
28999: PUSH
29000: LD_INT 2
29002: ARRAY
29003: PPUSH
29004: LD_VAR 0 2
29008: PPUSH
29009: LD_VAR 0 3
29013: PPUSH
29014: CALL_OW 298
29018: PUSH
29019: LD_INT 6
29021: LESS
29022: IFFALSE 29121
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29024: LD_EXP 112
29028: PUSH
29029: LD_VAR 0 6
29033: ARRAY
29034: PUSH
29035: LD_VAR 0 5
29039: ARRAY
29040: PUSH
29041: LD_INT 1
29043: ARRAY
29044: PPUSH
29045: LD_EXP 112
29049: PUSH
29050: LD_VAR 0 6
29054: ARRAY
29055: PUSH
29056: LD_VAR 0 5
29060: ARRAY
29061: PUSH
29062: LD_INT 2
29064: ARRAY
29065: PPUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 255
29075: PPUSH
29076: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29080: LD_ADDR_EXP 112
29084: PUSH
29085: LD_EXP 112
29089: PPUSH
29090: LD_VAR 0 6
29094: PPUSH
29095: LD_EXP 112
29099: PUSH
29100: LD_VAR 0 6
29104: ARRAY
29105: PPUSH
29106: LD_VAR 0 5
29110: PPUSH
29111: CALL_OW 3
29115: PPUSH
29116: CALL_OW 1
29120: ST_TO_ADDR
// end ; end ;
29121: GO 28959
29123: POP
29124: POP
// end ;
29125: LD_VAR 0 4
29129: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29130: LD_INT 0
29132: PPUSH
29133: PPUSH
29134: PPUSH
29135: PPUSH
29136: PPUSH
29137: PPUSH
29138: PPUSH
29139: PPUSH
29140: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 264
29150: PUSH
29151: LD_INT 81
29153: EQUAL
29154: NOT
29155: PUSH
29156: LD_VAR 0 1
29160: PUSH
29161: LD_EXP 111
29165: IN
29166: NOT
29167: OR
29168: IFFALSE 29172
// exit ;
29170: GO 29494
// index := GetElementIndex ( minersList , unit ) ;
29172: LD_ADDR_VAR 0 6
29176: PUSH
29177: LD_EXP 111
29181: PPUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL 34841 0 2
29191: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29192: LD_ADDR_VAR 0 8
29196: PUSH
29197: LD_EXP 113
29201: PUSH
29202: LD_EXP 112
29206: PUSH
29207: LD_VAR 0 6
29211: ARRAY
29212: MINUS
29213: ST_TO_ADDR
// if not minesFreeAmount then
29214: LD_VAR 0 8
29218: NOT
29219: IFFALSE 29223
// exit ;
29221: GO 29494
// tmp := [ ] ;
29223: LD_ADDR_VAR 0 7
29227: PUSH
29228: EMPTY
29229: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29230: LD_ADDR_VAR 0 5
29234: PUSH
29235: DOUBLE
29236: LD_INT 1
29238: DEC
29239: ST_TO_ADDR
29240: LD_VAR 0 8
29244: PUSH
29245: FOR_TO
29246: IFFALSE 29441
// begin _d := rand ( 0 , 5 ) ;
29248: LD_ADDR_VAR 0 11
29252: PUSH
29253: LD_INT 0
29255: PPUSH
29256: LD_INT 5
29258: PPUSH
29259: CALL_OW 12
29263: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29264: LD_ADDR_VAR 0 12
29268: PUSH
29269: LD_INT 2
29271: PPUSH
29272: LD_INT 6
29274: PPUSH
29275: CALL_OW 12
29279: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29280: LD_ADDR_VAR 0 9
29284: PUSH
29285: LD_VAR 0 2
29289: PPUSH
29290: LD_VAR 0 11
29294: PPUSH
29295: LD_VAR 0 12
29299: PPUSH
29300: CALL_OW 272
29304: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29305: LD_ADDR_VAR 0 10
29309: PUSH
29310: LD_VAR 0 3
29314: PPUSH
29315: LD_VAR 0 11
29319: PPUSH
29320: LD_VAR 0 12
29324: PPUSH
29325: CALL_OW 273
29329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29330: LD_VAR 0 9
29334: PPUSH
29335: LD_VAR 0 10
29339: PPUSH
29340: CALL_OW 488
29344: PUSH
29345: LD_VAR 0 9
29349: PUSH
29350: LD_VAR 0 10
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_VAR 0 7
29363: IN
29364: NOT
29365: AND
29366: PUSH
29367: LD_VAR 0 9
29371: PPUSH
29372: LD_VAR 0 10
29376: PPUSH
29377: CALL_OW 458
29381: NOT
29382: AND
29383: IFFALSE 29425
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29385: LD_ADDR_VAR 0 7
29389: PUSH
29390: LD_VAR 0 7
29394: PPUSH
29395: LD_VAR 0 7
29399: PUSH
29400: LD_INT 1
29402: PLUS
29403: PPUSH
29404: LD_VAR 0 9
29408: PUSH
29409: LD_VAR 0 10
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PPUSH
29418: CALL_OW 1
29422: ST_TO_ADDR
29423: GO 29439
// i := i - 1 ;
29425: LD_ADDR_VAR 0 5
29429: PUSH
29430: LD_VAR 0 5
29434: PUSH
29435: LD_INT 1
29437: MINUS
29438: ST_TO_ADDR
// end ;
29439: GO 29245
29441: POP
29442: POP
// for i in tmp do
29443: LD_ADDR_VAR 0 5
29447: PUSH
29448: LD_VAR 0 7
29452: PUSH
29453: FOR_IN
29454: IFFALSE 29492
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_VAR 0 5
29465: PUSH
29466: LD_INT 1
29468: ARRAY
29469: PPUSH
29470: LD_VAR 0 5
29474: PUSH
29475: LD_INT 2
29477: ARRAY
29478: PPUSH
29479: CALL 28438 0 3
29483: NOT
29484: IFFALSE 29490
// exit ;
29486: POP
29487: POP
29488: GO 29494
29490: GO 29453
29492: POP
29493: POP
// end ;
29494: LD_VAR 0 4
29498: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29499: LD_INT 0
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
// if not GetClass ( unit ) = class_sniper then
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL_OW 257
29517: PUSH
29518: LD_INT 5
29520: EQUAL
29521: NOT
29522: IFFALSE 29526
// exit ;
29524: GO 29914
// dist := 8 ;
29526: LD_ADDR_VAR 0 5
29530: PUSH
29531: LD_INT 8
29533: ST_TO_ADDR
// viewRange := 12 ;
29534: LD_ADDR_VAR 0 7
29538: PUSH
29539: LD_INT 12
29541: ST_TO_ADDR
// side := GetSide ( unit ) ;
29542: LD_ADDR_VAR 0 6
29546: PUSH
29547: LD_VAR 0 1
29551: PPUSH
29552: CALL_OW 255
29556: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29557: LD_INT 61
29559: PPUSH
29560: LD_VAR 0 6
29564: PPUSH
29565: CALL_OW 321
29569: PUSH
29570: LD_INT 2
29572: EQUAL
29573: IFFALSE 29583
// viewRange := 16 ;
29575: LD_ADDR_VAR 0 7
29579: PUSH
29580: LD_INT 16
29582: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29583: LD_VAR 0 1
29587: PPUSH
29588: LD_VAR 0 2
29592: PPUSH
29593: LD_VAR 0 3
29597: PPUSH
29598: CALL_OW 297
29602: PUSH
29603: LD_VAR 0 5
29607: GREATER
29608: IFFALSE 29687
// begin ComMoveXY ( unit , x , y ) ;
29610: LD_VAR 0 1
29614: PPUSH
29615: LD_VAR 0 2
29619: PPUSH
29620: LD_VAR 0 3
29624: PPUSH
29625: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29629: LD_INT 35
29631: PPUSH
29632: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_VAR 0 2
29645: PPUSH
29646: LD_VAR 0 3
29650: PPUSH
29651: CALL 66177 0 3
29655: NOT
29656: IFFALSE 29660
// exit ;
29658: GO 29914
// until GetDistUnitXY ( unit , x , y ) < dist ;
29660: LD_VAR 0 1
29664: PPUSH
29665: LD_VAR 0 2
29669: PPUSH
29670: LD_VAR 0 3
29674: PPUSH
29675: CALL_OW 297
29679: PUSH
29680: LD_VAR 0 5
29684: LESS
29685: IFFALSE 29629
// end ; ComTurnXY ( unit , x , y ) ;
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_VAR 0 3
29701: PPUSH
29702: CALL_OW 118
// wait ( 5 ) ;
29706: LD_INT 5
29708: PPUSH
29709: CALL_OW 67
// _d := GetDir ( unit ) ;
29713: LD_ADDR_VAR 0 10
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 254
29727: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29728: LD_ADDR_VAR 0 8
29732: PUSH
29733: LD_VAR 0 1
29737: PPUSH
29738: CALL_OW 250
29742: PPUSH
29743: LD_VAR 0 10
29747: PPUSH
29748: LD_VAR 0 5
29752: PPUSH
29753: CALL_OW 272
29757: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29758: LD_ADDR_VAR 0 9
29762: PUSH
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 251
29772: PPUSH
29773: LD_VAR 0 10
29777: PPUSH
29778: LD_VAR 0 5
29782: PPUSH
29783: CALL_OW 273
29787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29788: LD_VAR 0 8
29792: PPUSH
29793: LD_VAR 0 9
29797: PPUSH
29798: CALL_OW 488
29802: NOT
29803: IFFALSE 29807
// exit ;
29805: GO 29914
// ComAnimCustom ( unit , 1 ) ;
29807: LD_VAR 0 1
29811: PPUSH
29812: LD_INT 1
29814: PPUSH
29815: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29819: LD_VAR 0 8
29823: PPUSH
29824: LD_VAR 0 9
29828: PPUSH
29829: LD_VAR 0 6
29833: PPUSH
29834: LD_VAR 0 7
29838: PPUSH
29839: CALL_OW 330
// repeat wait ( 1 ) ;
29843: LD_INT 1
29845: PPUSH
29846: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 316
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: CALL_OW 314
29869: OR
29870: PUSH
29871: LD_VAR 0 1
29875: PPUSH
29876: CALL_OW 302
29880: NOT
29881: OR
29882: PUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 301
29892: OR
29893: IFFALSE 29843
// RemoveSeeing ( _x , _y , side ) ;
29895: LD_VAR 0 8
29899: PPUSH
29900: LD_VAR 0 9
29904: PPUSH
29905: LD_VAR 0 6
29909: PPUSH
29910: CALL_OW 331
// end ; end_of_file
29914: LD_VAR 0 4
29918: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29919: LD_INT 0
29921: PPUSH
29922: PPUSH
// if exist_mode then
29923: LD_VAR 0 2
29927: IFFALSE 29952
// unit := CreateCharacter ( prefix & ident ) else
29929: LD_ADDR_VAR 0 5
29933: PUSH
29934: LD_VAR 0 3
29938: PUSH
29939: LD_VAR 0 1
29943: STR
29944: PPUSH
29945: CALL_OW 34
29949: ST_TO_ADDR
29950: GO 29967
// unit := NewCharacter ( ident ) ;
29952: LD_ADDR_VAR 0 5
29956: PUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 25
29966: ST_TO_ADDR
// result := unit ;
29967: LD_ADDR_VAR 0 4
29971: PUSH
29972: LD_VAR 0 5
29976: ST_TO_ADDR
// end ;
29977: LD_VAR 0 4
29981: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29982: LD_INT 0
29984: PPUSH
29985: PPUSH
// if not side or not nation then
29986: LD_VAR 0 1
29990: NOT
29991: PUSH
29992: LD_VAR 0 2
29996: NOT
29997: OR
29998: IFFALSE 30002
// exit ;
30000: GO 30770
// case nation of nation_american :
30002: LD_VAR 0 2
30006: PUSH
30007: LD_INT 1
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30015
30013: GO 30229
30015: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30016: LD_ADDR_VAR 0 4
30020: PUSH
30021: LD_INT 35
30023: PUSH
30024: LD_INT 45
30026: PUSH
30027: LD_INT 46
30029: PUSH
30030: LD_INT 47
30032: PUSH
30033: LD_INT 82
30035: PUSH
30036: LD_INT 83
30038: PUSH
30039: LD_INT 84
30041: PUSH
30042: LD_INT 85
30044: PUSH
30045: LD_INT 86
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: LD_INT 2
30053: PUSH
30054: LD_INT 6
30056: PUSH
30057: LD_INT 15
30059: PUSH
30060: LD_INT 16
30062: PUSH
30063: LD_INT 7
30065: PUSH
30066: LD_INT 12
30068: PUSH
30069: LD_INT 13
30071: PUSH
30072: LD_INT 10
30074: PUSH
30075: LD_INT 14
30077: PUSH
30078: LD_INT 20
30080: PUSH
30081: LD_INT 21
30083: PUSH
30084: LD_INT 22
30086: PUSH
30087: LD_INT 25
30089: PUSH
30090: LD_INT 32
30092: PUSH
30093: LD_INT 27
30095: PUSH
30096: LD_INT 36
30098: PUSH
30099: LD_INT 69
30101: PUSH
30102: LD_INT 39
30104: PUSH
30105: LD_INT 34
30107: PUSH
30108: LD_INT 40
30110: PUSH
30111: LD_INT 48
30113: PUSH
30114: LD_INT 49
30116: PUSH
30117: LD_INT 50
30119: PUSH
30120: LD_INT 51
30122: PUSH
30123: LD_INT 52
30125: PUSH
30126: LD_INT 53
30128: PUSH
30129: LD_INT 54
30131: PUSH
30132: LD_INT 55
30134: PUSH
30135: LD_INT 56
30137: PUSH
30138: LD_INT 57
30140: PUSH
30141: LD_INT 58
30143: PUSH
30144: LD_INT 59
30146: PUSH
30147: LD_INT 60
30149: PUSH
30150: LD_INT 61
30152: PUSH
30153: LD_INT 62
30155: PUSH
30156: LD_INT 80
30158: PUSH
30159: LD_INT 82
30161: PUSH
30162: LD_INT 83
30164: PUSH
30165: LD_INT 84
30167: PUSH
30168: LD_INT 85
30170: PUSH
30171: LD_INT 86
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
30227: GO 30694
30229: LD_INT 2
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30463
30237: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30238: LD_ADDR_VAR 0 4
30242: PUSH
30243: LD_INT 35
30245: PUSH
30246: LD_INT 45
30248: PUSH
30249: LD_INT 46
30251: PUSH
30252: LD_INT 47
30254: PUSH
30255: LD_INT 82
30257: PUSH
30258: LD_INT 83
30260: PUSH
30261: LD_INT 84
30263: PUSH
30264: LD_INT 85
30266: PUSH
30267: LD_INT 87
30269: PUSH
30270: LD_INT 70
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 11
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: LD_INT 4
30284: PUSH
30285: LD_INT 5
30287: PUSH
30288: LD_INT 6
30290: PUSH
30291: LD_INT 15
30293: PUSH
30294: LD_INT 18
30296: PUSH
30297: LD_INT 7
30299: PUSH
30300: LD_INT 17
30302: PUSH
30303: LD_INT 8
30305: PUSH
30306: LD_INT 20
30308: PUSH
30309: LD_INT 21
30311: PUSH
30312: LD_INT 22
30314: PUSH
30315: LD_INT 72
30317: PUSH
30318: LD_INT 26
30320: PUSH
30321: LD_INT 69
30323: PUSH
30324: LD_INT 39
30326: PUSH
30327: LD_INT 40
30329: PUSH
30330: LD_INT 41
30332: PUSH
30333: LD_INT 42
30335: PUSH
30336: LD_INT 43
30338: PUSH
30339: LD_INT 48
30341: PUSH
30342: LD_INT 49
30344: PUSH
30345: LD_INT 50
30347: PUSH
30348: LD_INT 51
30350: PUSH
30351: LD_INT 52
30353: PUSH
30354: LD_INT 53
30356: PUSH
30357: LD_INT 54
30359: PUSH
30360: LD_INT 55
30362: PUSH
30363: LD_INT 56
30365: PUSH
30366: LD_INT 60
30368: PUSH
30369: LD_INT 61
30371: PUSH
30372: LD_INT 62
30374: PUSH
30375: LD_INT 66
30377: PUSH
30378: LD_INT 67
30380: PUSH
30381: LD_INT 68
30383: PUSH
30384: LD_INT 81
30386: PUSH
30387: LD_INT 82
30389: PUSH
30390: LD_INT 83
30392: PUSH
30393: LD_INT 84
30395: PUSH
30396: LD_INT 85
30398: PUSH
30399: LD_INT 87
30401: PUSH
30402: LD_INT 88
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: ST_TO_ADDR
30461: GO 30694
30463: LD_INT 3
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30693
30471: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30472: LD_ADDR_VAR 0 4
30476: PUSH
30477: LD_INT 46
30479: PUSH
30480: LD_INT 47
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 82
30491: PUSH
30492: LD_INT 83
30494: PUSH
30495: LD_INT 84
30497: PUSH
30498: LD_INT 85
30500: PUSH
30501: LD_INT 86
30503: PUSH
30504: LD_INT 11
30506: PUSH
30507: LD_INT 9
30509: PUSH
30510: LD_INT 20
30512: PUSH
30513: LD_INT 19
30515: PUSH
30516: LD_INT 21
30518: PUSH
30519: LD_INT 24
30521: PUSH
30522: LD_INT 22
30524: PUSH
30525: LD_INT 25
30527: PUSH
30528: LD_INT 28
30530: PUSH
30531: LD_INT 29
30533: PUSH
30534: LD_INT 30
30536: PUSH
30537: LD_INT 31
30539: PUSH
30540: LD_INT 37
30542: PUSH
30543: LD_INT 38
30545: PUSH
30546: LD_INT 32
30548: PUSH
30549: LD_INT 27
30551: PUSH
30552: LD_INT 33
30554: PUSH
30555: LD_INT 69
30557: PUSH
30558: LD_INT 39
30560: PUSH
30561: LD_INT 34
30563: PUSH
30564: LD_INT 40
30566: PUSH
30567: LD_INT 71
30569: PUSH
30570: LD_INT 23
30572: PUSH
30573: LD_INT 44
30575: PUSH
30576: LD_INT 48
30578: PUSH
30579: LD_INT 49
30581: PUSH
30582: LD_INT 50
30584: PUSH
30585: LD_INT 51
30587: PUSH
30588: LD_INT 52
30590: PUSH
30591: LD_INT 53
30593: PUSH
30594: LD_INT 54
30596: PUSH
30597: LD_INT 55
30599: PUSH
30600: LD_INT 56
30602: PUSH
30603: LD_INT 57
30605: PUSH
30606: LD_INT 58
30608: PUSH
30609: LD_INT 59
30611: PUSH
30612: LD_INT 63
30614: PUSH
30615: LD_INT 64
30617: PUSH
30618: LD_INT 65
30620: PUSH
30621: LD_INT 82
30623: PUSH
30624: LD_INT 83
30626: PUSH
30627: LD_INT 84
30629: PUSH
30630: LD_INT 85
30632: PUSH
30633: LD_INT 86
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
30691: GO 30694
30693: POP
// if state > - 1 and state < 3 then
30694: LD_VAR 0 3
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: GREATER
30703: PUSH
30704: LD_VAR 0 3
30708: PUSH
30709: LD_INT 3
30711: LESS
30712: AND
30713: IFFALSE 30770
// for i in result do
30715: LD_ADDR_VAR 0 5
30719: PUSH
30720: LD_VAR 0 4
30724: PUSH
30725: FOR_IN
30726: IFFALSE 30768
// if GetTech ( i , side ) <> state then
30728: LD_VAR 0 5
30732: PPUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 321
30742: PUSH
30743: LD_VAR 0 3
30747: NONEQUAL
30748: IFFALSE 30766
// result := result diff i ;
30750: LD_ADDR_VAR 0 4
30754: PUSH
30755: LD_VAR 0 4
30759: PUSH
30760: LD_VAR 0 5
30764: DIFF
30765: ST_TO_ADDR
30766: GO 30725
30768: POP
30769: POP
// end ;
30770: LD_VAR 0 4
30774: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30775: LD_INT 0
30777: PPUSH
30778: PPUSH
30779: PPUSH
// result := true ;
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_INT 1
30787: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30788: LD_ADDR_VAR 0 5
30792: PUSH
30793: LD_VAR 0 2
30797: PPUSH
30798: CALL_OW 480
30802: ST_TO_ADDR
// if not tmp then
30803: LD_VAR 0 5
30807: NOT
30808: IFFALSE 30812
// exit ;
30810: GO 30861
// for i in tmp do
30812: LD_ADDR_VAR 0 4
30816: PUSH
30817: LD_VAR 0 5
30821: PUSH
30822: FOR_IN
30823: IFFALSE 30859
// if GetTech ( i , side ) <> state_researched then
30825: LD_VAR 0 4
30829: PPUSH
30830: LD_VAR 0 1
30834: PPUSH
30835: CALL_OW 321
30839: PUSH
30840: LD_INT 2
30842: NONEQUAL
30843: IFFALSE 30857
// begin result := false ;
30845: LD_ADDR_VAR 0 3
30849: PUSH
30850: LD_INT 0
30852: ST_TO_ADDR
// exit ;
30853: POP
30854: POP
30855: GO 30861
// end ;
30857: GO 30822
30859: POP
30860: POP
// end ;
30861: LD_VAR 0 3
30865: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30866: LD_INT 0
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30881: LD_VAR 0 1
30885: NOT
30886: PUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 257
30896: PUSH
30897: LD_INT 9
30899: NONEQUAL
30900: OR
30901: IFFALSE 30905
// exit ;
30903: GO 31478
// side := GetSide ( unit ) ;
30905: LD_ADDR_VAR 0 9
30909: PUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: CALL_OW 255
30919: ST_TO_ADDR
// tech_space := tech_spacanom ;
30920: LD_ADDR_VAR 0 12
30924: PUSH
30925: LD_INT 29
30927: ST_TO_ADDR
// tech_time := tech_taurad ;
30928: LD_ADDR_VAR 0 13
30932: PUSH
30933: LD_INT 28
30935: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30936: LD_ADDR_VAR 0 11
30940: PUSH
30941: LD_VAR 0 1
30945: PPUSH
30946: CALL_OW 310
30950: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30951: LD_VAR 0 11
30955: PPUSH
30956: CALL_OW 247
30960: PUSH
30961: LD_INT 2
30963: EQUAL
30964: IFFALSE 30968
// exit ;
30966: GO 31478
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30968: LD_ADDR_VAR 0 8
30972: PUSH
30973: LD_INT 81
30975: PUSH
30976: LD_VAR 0 9
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: LD_INT 21
30990: PUSH
30991: LD_INT 3
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PPUSH
31006: CALL_OW 69
31010: ST_TO_ADDR
// if not tmp then
31011: LD_VAR 0 8
31015: NOT
31016: IFFALSE 31020
// exit ;
31018: GO 31478
// if in_unit then
31020: LD_VAR 0 11
31024: IFFALSE 31048
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31026: LD_ADDR_VAR 0 10
31030: PUSH
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_VAR 0 11
31040: PPUSH
31041: CALL_OW 74
31045: ST_TO_ADDR
31046: GO 31068
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31048: LD_ADDR_VAR 0 10
31052: PUSH
31053: LD_VAR 0 8
31057: PPUSH
31058: LD_VAR 0 1
31062: PPUSH
31063: CALL_OW 74
31067: ST_TO_ADDR
// if not enemy then
31068: LD_VAR 0 10
31072: NOT
31073: IFFALSE 31077
// exit ;
31075: GO 31478
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31077: LD_VAR 0 11
31081: PUSH
31082: LD_VAR 0 11
31086: PPUSH
31087: LD_VAR 0 10
31091: PPUSH
31092: CALL_OW 296
31096: PUSH
31097: LD_INT 13
31099: GREATER
31100: AND
31101: PUSH
31102: LD_VAR 0 1
31106: PPUSH
31107: LD_VAR 0 10
31111: PPUSH
31112: CALL_OW 296
31116: PUSH
31117: LD_INT 12
31119: GREATER
31120: OR
31121: IFFALSE 31125
// exit ;
31123: GO 31478
// missile := [ 1 ] ;
31125: LD_ADDR_VAR 0 14
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31136: LD_VAR 0 9
31140: PPUSH
31141: LD_VAR 0 12
31145: PPUSH
31146: CALL_OW 325
31150: IFFALSE 31179
// missile := Replace ( missile , missile + 1 , 2 ) ;
31152: LD_ADDR_VAR 0 14
31156: PUSH
31157: LD_VAR 0 14
31161: PPUSH
31162: LD_VAR 0 14
31166: PUSH
31167: LD_INT 1
31169: PLUS
31170: PPUSH
31171: LD_INT 2
31173: PPUSH
31174: CALL_OW 1
31178: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31179: LD_VAR 0 9
31183: PPUSH
31184: LD_VAR 0 13
31188: PPUSH
31189: CALL_OW 325
31193: PUSH
31194: LD_VAR 0 10
31198: PPUSH
31199: CALL_OW 255
31203: PPUSH
31204: LD_VAR 0 13
31208: PPUSH
31209: CALL_OW 325
31213: NOT
31214: AND
31215: IFFALSE 31244
// missile := Replace ( missile , missile + 1 , 3 ) ;
31217: LD_ADDR_VAR 0 14
31221: PUSH
31222: LD_VAR 0 14
31226: PPUSH
31227: LD_VAR 0 14
31231: PUSH
31232: LD_INT 1
31234: PLUS
31235: PPUSH
31236: LD_INT 3
31238: PPUSH
31239: CALL_OW 1
31243: ST_TO_ADDR
// if missile < 2 then
31244: LD_VAR 0 14
31248: PUSH
31249: LD_INT 2
31251: LESS
31252: IFFALSE 31256
// exit ;
31254: GO 31478
// x := GetX ( enemy ) ;
31256: LD_ADDR_VAR 0 4
31260: PUSH
31261: LD_VAR 0 10
31265: PPUSH
31266: CALL_OW 250
31270: ST_TO_ADDR
// y := GetY ( enemy ) ;
31271: LD_ADDR_VAR 0 5
31275: PUSH
31276: LD_VAR 0 10
31280: PPUSH
31281: CALL_OW 251
31285: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31286: LD_ADDR_VAR 0 6
31290: PUSH
31291: LD_VAR 0 4
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PPUSH
31300: LD_INT 1
31302: PPUSH
31303: CALL_OW 12
31307: PLUS
31308: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31309: LD_ADDR_VAR 0 7
31313: PUSH
31314: LD_VAR 0 5
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PPUSH
31323: LD_INT 1
31325: PPUSH
31326: CALL_OW 12
31330: PLUS
31331: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31332: LD_VAR 0 6
31336: PPUSH
31337: LD_VAR 0 7
31341: PPUSH
31342: CALL_OW 488
31346: NOT
31347: IFFALSE 31369
// begin _x := x ;
31349: LD_ADDR_VAR 0 6
31353: PUSH
31354: LD_VAR 0 4
31358: ST_TO_ADDR
// _y := y ;
31359: LD_ADDR_VAR 0 7
31363: PUSH
31364: LD_VAR 0 5
31368: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_INT 1
31376: PPUSH
31377: LD_VAR 0 14
31381: PPUSH
31382: CALL_OW 12
31386: ST_TO_ADDR
// case i of 1 :
31387: LD_VAR 0 3
31391: PUSH
31392: LD_INT 1
31394: DOUBLE
31395: EQUAL
31396: IFTRUE 31400
31398: GO 31417
31400: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31401: LD_VAR 0 1
31405: PPUSH
31406: LD_VAR 0 10
31410: PPUSH
31411: CALL_OW 115
31415: GO 31478
31417: LD_INT 2
31419: DOUBLE
31420: EQUAL
31421: IFTRUE 31425
31423: GO 31447
31425: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31426: LD_VAR 0 1
31430: PPUSH
31431: LD_VAR 0 6
31435: PPUSH
31436: LD_VAR 0 7
31440: PPUSH
31441: CALL_OW 153
31445: GO 31478
31447: LD_INT 3
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31477
31455: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31456: LD_VAR 0 1
31460: PPUSH
31461: LD_VAR 0 6
31465: PPUSH
31466: LD_VAR 0 7
31470: PPUSH
31471: CALL_OW 154
31475: GO 31478
31477: POP
// end ;
31478: LD_VAR 0 2
31482: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31483: LD_INT 0
31485: PPUSH
31486: PPUSH
31487: PPUSH
31488: PPUSH
31489: PPUSH
31490: PPUSH
// if not unit or not building then
31491: LD_VAR 0 1
31495: NOT
31496: PUSH
31497: LD_VAR 0 2
31501: NOT
31502: OR
31503: IFFALSE 31507
// exit ;
31505: GO 31665
// x := GetX ( building ) ;
31507: LD_ADDR_VAR 0 5
31511: PUSH
31512: LD_VAR 0 2
31516: PPUSH
31517: CALL_OW 250
31521: ST_TO_ADDR
// y := GetY ( building ) ;
31522: LD_ADDR_VAR 0 6
31526: PUSH
31527: LD_VAR 0 2
31531: PPUSH
31532: CALL_OW 251
31536: ST_TO_ADDR
// for i = 0 to 5 do
31537: LD_ADDR_VAR 0 4
31541: PUSH
31542: DOUBLE
31543: LD_INT 0
31545: DEC
31546: ST_TO_ADDR
31547: LD_INT 5
31549: PUSH
31550: FOR_TO
31551: IFFALSE 31663
// begin _x := ShiftX ( x , i , 3 ) ;
31553: LD_ADDR_VAR 0 7
31557: PUSH
31558: LD_VAR 0 5
31562: PPUSH
31563: LD_VAR 0 4
31567: PPUSH
31568: LD_INT 3
31570: PPUSH
31571: CALL_OW 272
31575: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31576: LD_ADDR_VAR 0 8
31580: PUSH
31581: LD_VAR 0 6
31585: PPUSH
31586: LD_VAR 0 4
31590: PPUSH
31591: LD_INT 3
31593: PPUSH
31594: CALL_OW 273
31598: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31599: LD_VAR 0 7
31603: PPUSH
31604: LD_VAR 0 8
31608: PPUSH
31609: CALL_OW 488
31613: NOT
31614: IFFALSE 31618
// continue ;
31616: GO 31550
// if HexInfo ( _x , _y ) = 0 then
31618: LD_VAR 0 7
31622: PPUSH
31623: LD_VAR 0 8
31627: PPUSH
31628: CALL_OW 428
31632: PUSH
31633: LD_INT 0
31635: EQUAL
31636: IFFALSE 31661
// begin ComMoveXY ( unit , _x , _y ) ;
31638: LD_VAR 0 1
31642: PPUSH
31643: LD_VAR 0 7
31647: PPUSH
31648: LD_VAR 0 8
31652: PPUSH
31653: CALL_OW 111
// exit ;
31657: POP
31658: POP
31659: GO 31665
// end ; end ;
31661: GO 31550
31663: POP
31664: POP
// end ;
31665: LD_VAR 0 3
31669: RET
// export function ScanBase ( side , base_area ) ; begin
31670: LD_INT 0
31672: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_INT 81
31685: PUSH
31686: LD_VAR 0 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PPUSH
31695: CALL_OW 70
31699: ST_TO_ADDR
// end ;
31700: LD_VAR 0 3
31704: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31705: LD_INT 0
31707: PPUSH
31708: PPUSH
31709: PPUSH
31710: PPUSH
// result := false ;
31711: LD_ADDR_VAR 0 2
31715: PUSH
31716: LD_INT 0
31718: ST_TO_ADDR
// side := GetSide ( unit ) ;
31719: LD_ADDR_VAR 0 3
31723: PUSH
31724: LD_VAR 0 1
31728: PPUSH
31729: CALL_OW 255
31733: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31734: LD_ADDR_VAR 0 4
31738: PUSH
31739: LD_VAR 0 1
31743: PPUSH
31744: CALL_OW 248
31748: ST_TO_ADDR
// case nat of 1 :
31749: LD_VAR 0 4
31753: PUSH
31754: LD_INT 1
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// tech := tech_lassight ; 2 :
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: LD_INT 12
31770: ST_TO_ADDR
31771: GO 31812
31773: LD_INT 2
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31792
31781: POP
// tech := tech_mortar ; 3 :
31782: LD_ADDR_VAR 0 5
31786: PUSH
31787: LD_INT 41
31789: ST_TO_ADDR
31790: GO 31812
31792: LD_INT 3
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31811
31800: POP
// tech := tech_bazooka ; end ;
31801: LD_ADDR_VAR 0 5
31805: PUSH
31806: LD_INT 44
31808: ST_TO_ADDR
31809: GO 31812
31811: POP
// if Researched ( side , tech ) then
31812: LD_VAR 0 3
31816: PPUSH
31817: LD_VAR 0 5
31821: PPUSH
31822: CALL_OW 325
31826: IFFALSE 31853
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31828: LD_ADDR_VAR 0 2
31832: PUSH
31833: LD_INT 5
31835: PUSH
31836: LD_INT 8
31838: PUSH
31839: LD_INT 9
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: PUSH
31847: LD_VAR 0 4
31851: ARRAY
31852: ST_TO_ADDR
// end ;
31853: LD_VAR 0 2
31857: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31858: LD_INT 0
31860: PPUSH
31861: PPUSH
31862: PPUSH
// if not mines then
31863: LD_VAR 0 2
31867: NOT
31868: IFFALSE 31872
// exit ;
31870: GO 32016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31872: LD_ADDR_VAR 0 5
31876: PUSH
31877: LD_INT 81
31879: PUSH
31880: LD_VAR 0 1
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 21
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PPUSH
31910: CALL_OW 69
31914: ST_TO_ADDR
// for i in mines do
31915: LD_ADDR_VAR 0 4
31919: PUSH
31920: LD_VAR 0 2
31924: PUSH
31925: FOR_IN
31926: IFFALSE 32014
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31928: LD_VAR 0 4
31932: PUSH
31933: LD_INT 1
31935: ARRAY
31936: PPUSH
31937: LD_VAR 0 4
31941: PUSH
31942: LD_INT 2
31944: ARRAY
31945: PPUSH
31946: CALL_OW 458
31950: NOT
31951: IFFALSE 31955
// continue ;
31953: GO 31925
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31955: LD_VAR 0 4
31959: PUSH
31960: LD_INT 1
31962: ARRAY
31963: PPUSH
31964: LD_VAR 0 4
31968: PUSH
31969: LD_INT 2
31971: ARRAY
31972: PPUSH
31973: CALL_OW 428
31977: PUSH
31978: LD_VAR 0 5
31982: IN
31983: IFFALSE 32012
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31985: LD_VAR 0 4
31989: PUSH
31990: LD_INT 1
31992: ARRAY
31993: PPUSH
31994: LD_VAR 0 4
31998: PUSH
31999: LD_INT 2
32001: ARRAY
32002: PPUSH
32003: LD_VAR 0 1
32007: PPUSH
32008: CALL_OW 456
// end ;
32012: GO 31925
32014: POP
32015: POP
// end ;
32016: LD_VAR 0 3
32020: RET
// export function Count ( array ) ; var i ; begin
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
// result := 0 ;
32025: LD_ADDR_VAR 0 2
32029: PUSH
32030: LD_INT 0
32032: ST_TO_ADDR
// for i in array do
32033: LD_ADDR_VAR 0 3
32037: PUSH
32038: LD_VAR 0 1
32042: PUSH
32043: FOR_IN
32044: IFFALSE 32068
// if i then
32046: LD_VAR 0 3
32050: IFFALSE 32066
// result := result + 1 ;
32052: LD_ADDR_VAR 0 2
32056: PUSH
32057: LD_VAR 0 2
32061: PUSH
32062: LD_INT 1
32064: PLUS
32065: ST_TO_ADDR
32066: GO 32043
32068: POP
32069: POP
// end ;
32070: LD_VAR 0 2
32074: RET
// export function IsEmpty ( building ) ; begin
32075: LD_INT 0
32077: PPUSH
// if not building then
32078: LD_VAR 0 1
32082: NOT
32083: IFFALSE 32087
// exit ;
32085: GO 32130
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: LD_VAR 0 1
32096: PUSH
32097: LD_INT 22
32099: PUSH
32100: LD_VAR 0 1
32104: PPUSH
32105: CALL_OW 255
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 58
32116: PUSH
32117: EMPTY
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PPUSH
32124: CALL_OW 69
32128: IN
32129: ST_TO_ADDR
// end ;
32130: LD_VAR 0 2
32134: RET
// export function IsNotFull ( building ) ; var places ; begin
32135: LD_INT 0
32137: PPUSH
32138: PPUSH
// if not building then
32139: LD_VAR 0 1
32143: NOT
32144: IFFALSE 32148
// exit ;
32146: GO 32319
// result := false ;
32148: LD_ADDR_VAR 0 2
32152: PUSH
32153: LD_INT 0
32155: ST_TO_ADDR
// places := 0 ;
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32164: LD_VAR 0 1
32168: PPUSH
32169: CALL_OW 266
32173: PUSH
32174: LD_INT 0
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32236
32180: LD_INT 1
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32236
32186: LD_INT 6
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32236
32192: LD_INT 7
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32236
32198: LD_INT 8
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32236
32204: LD_INT 4
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32236
32210: LD_INT 5
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32236
32216: LD_INT 2
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32236
32222: LD_INT 3
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32236
32228: LD_INT 35
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32236
32234: GO 32247
32236: POP
// places := 6 ; b_bunker , b_breastwork :
32237: LD_ADDR_VAR 0 3
32241: PUSH
32242: LD_INT 6
32244: ST_TO_ADDR
32245: GO 32292
32247: LD_INT 32
32249: DOUBLE
32250: EQUAL
32251: IFTRUE 32261
32253: LD_INT 31
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32261
32259: GO 32272
32261: POP
// places := 1 ; b_control_tower :
32262: LD_ADDR_VAR 0 3
32266: PUSH
32267: LD_INT 1
32269: ST_TO_ADDR
32270: GO 32292
32272: LD_INT 36
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32291
32280: POP
// places := 3 ; end ;
32281: LD_ADDR_VAR 0 3
32285: PUSH
32286: LD_INT 3
32288: ST_TO_ADDR
32289: GO 32292
32291: POP
// if places then
32292: LD_VAR 0 3
32296: IFFALSE 32319
// result := UnitsInside ( building ) < places ;
32298: LD_ADDR_VAR 0 2
32302: PUSH
32303: LD_VAR 0 1
32307: PPUSH
32308: CALL_OW 313
32312: PUSH
32313: LD_VAR 0 3
32317: LESS
32318: ST_TO_ADDR
// end ;
32319: LD_VAR 0 2
32323: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32324: LD_INT 0
32326: PPUSH
32327: PPUSH
32328: PPUSH
32329: PPUSH
// tmp := [ ] ;
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: EMPTY
32336: ST_TO_ADDR
// list := [ ] ;
32337: LD_ADDR_VAR 0 5
32341: PUSH
32342: EMPTY
32343: ST_TO_ADDR
// for i = 16 to 25 do
32344: LD_ADDR_VAR 0 4
32348: PUSH
32349: DOUBLE
32350: LD_INT 16
32352: DEC
32353: ST_TO_ADDR
32354: LD_INT 25
32356: PUSH
32357: FOR_TO
32358: IFFALSE 32431
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32360: LD_ADDR_VAR 0 3
32364: PUSH
32365: LD_VAR 0 3
32369: PUSH
32370: LD_INT 22
32372: PUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 255
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 91
32389: PUSH
32390: LD_VAR 0 1
32394: PUSH
32395: LD_INT 6
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 30
32405: PUSH
32406: LD_VAR 0 4
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: PPUSH
32423: CALL_OW 69
32427: ADD
32428: ST_TO_ADDR
32429: GO 32357
32431: POP
32432: POP
// for i = 1 to tmp do
32433: LD_ADDR_VAR 0 4
32437: PUSH
32438: DOUBLE
32439: LD_INT 1
32441: DEC
32442: ST_TO_ADDR
32443: LD_VAR 0 3
32447: PUSH
32448: FOR_TO
32449: IFFALSE 32537
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32451: LD_ADDR_VAR 0 5
32455: PUSH
32456: LD_VAR 0 5
32460: PUSH
32461: LD_VAR 0 3
32465: PUSH
32466: LD_VAR 0 4
32470: ARRAY
32471: PPUSH
32472: CALL_OW 266
32476: PUSH
32477: LD_VAR 0 3
32481: PUSH
32482: LD_VAR 0 4
32486: ARRAY
32487: PPUSH
32488: CALL_OW 250
32492: PUSH
32493: LD_VAR 0 3
32497: PUSH
32498: LD_VAR 0 4
32502: ARRAY
32503: PPUSH
32504: CALL_OW 251
32508: PUSH
32509: LD_VAR 0 3
32513: PUSH
32514: LD_VAR 0 4
32518: ARRAY
32519: PPUSH
32520: CALL_OW 254
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: ADD
32534: ST_TO_ADDR
32535: GO 32448
32537: POP
32538: POP
// result := list ;
32539: LD_ADDR_VAR 0 2
32543: PUSH
32544: LD_VAR 0 5
32548: ST_TO_ADDR
// end ;
32549: LD_VAR 0 2
32553: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32554: LD_INT 0
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
// if not factory then
32563: LD_VAR 0 1
32567: NOT
32568: IFFALSE 32572
// exit ;
32570: GO 33165
// if control = control_apeman then
32572: LD_VAR 0 4
32576: PUSH
32577: LD_INT 5
32579: EQUAL
32580: IFFALSE 32689
// begin tmp := UnitsInside ( factory ) ;
32582: LD_ADDR_VAR 0 8
32586: PUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 313
32596: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32597: LD_VAR 0 8
32601: PPUSH
32602: LD_INT 25
32604: PUSH
32605: LD_INT 12
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PPUSH
32612: CALL_OW 72
32616: NOT
32617: IFFALSE 32627
// control := control_manual ;
32619: LD_ADDR_VAR 0 4
32623: PUSH
32624: LD_INT 1
32626: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32627: LD_ADDR_VAR 0 8
32631: PUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: CALL 32324 0 1
32641: ST_TO_ADDR
// if tmp then
32642: LD_VAR 0 8
32646: IFFALSE 32689
// begin for i in tmp do
32648: LD_ADDR_VAR 0 7
32652: PUSH
32653: LD_VAR 0 8
32657: PUSH
32658: FOR_IN
32659: IFFALSE 32687
// if i [ 1 ] = b_ext_radio then
32661: LD_VAR 0 7
32665: PUSH
32666: LD_INT 1
32668: ARRAY
32669: PUSH
32670: LD_INT 22
32672: EQUAL
32673: IFFALSE 32685
// begin control := control_remote ;
32675: LD_ADDR_VAR 0 4
32679: PUSH
32680: LD_INT 2
32682: ST_TO_ADDR
// break ;
32683: GO 32687
// end ;
32685: GO 32658
32687: POP
32688: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32689: LD_VAR 0 1
32693: PPUSH
32694: LD_VAR 0 2
32698: PPUSH
32699: LD_VAR 0 3
32703: PPUSH
32704: LD_VAR 0 4
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL_OW 448
32718: IFFALSE 32753
// begin result := [ chassis , engine , control , weapon ] ;
32720: LD_ADDR_VAR 0 6
32724: PUSH
32725: LD_VAR 0 2
32729: PUSH
32730: LD_VAR 0 3
32734: PUSH
32735: LD_VAR 0 4
32739: PUSH
32740: LD_VAR 0 5
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: ST_TO_ADDR
// exit ;
32751: GO 33165
// end ; _chassis := AvailableChassisList ( factory ) ;
32753: LD_ADDR_VAR 0 9
32757: PUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL_OW 475
32767: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32768: LD_ADDR_VAR 0 11
32772: PUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 476
32782: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32783: LD_ADDR_VAR 0 12
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 477
32797: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32798: LD_ADDR_VAR 0 10
32802: PUSH
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL_OW 478
32812: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32813: LD_VAR 0 9
32817: NOT
32818: PUSH
32819: LD_VAR 0 11
32823: NOT
32824: OR
32825: PUSH
32826: LD_VAR 0 12
32830: NOT
32831: OR
32832: PUSH
32833: LD_VAR 0 10
32837: NOT
32838: OR
32839: IFFALSE 32874
// begin result := [ chassis , engine , control , weapon ] ;
32841: LD_ADDR_VAR 0 6
32845: PUSH
32846: LD_VAR 0 2
32850: PUSH
32851: LD_VAR 0 3
32855: PUSH
32856: LD_VAR 0 4
32860: PUSH
32861: LD_VAR 0 5
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: ST_TO_ADDR
// exit ;
32872: GO 33165
// end ; if not chassis in _chassis then
32874: LD_VAR 0 2
32878: PUSH
32879: LD_VAR 0 9
32883: IN
32884: NOT
32885: IFFALSE 32911
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32887: LD_ADDR_VAR 0 2
32891: PUSH
32892: LD_VAR 0 9
32896: PUSH
32897: LD_INT 1
32899: PPUSH
32900: LD_VAR 0 9
32904: PPUSH
32905: CALL_OW 12
32909: ARRAY
32910: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32911: LD_VAR 0 2
32915: PPUSH
32916: LD_VAR 0 3
32920: PPUSH
32921: CALL 33170 0 2
32925: NOT
32926: IFFALSE 32985
// repeat engine := _engine [ 1 ] ;
32928: LD_ADDR_VAR 0 3
32932: PUSH
32933: LD_VAR 0 11
32937: PUSH
32938: LD_INT 1
32940: ARRAY
32941: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32942: LD_ADDR_VAR 0 11
32946: PUSH
32947: LD_VAR 0 11
32951: PPUSH
32952: LD_INT 1
32954: PPUSH
32955: CALL_OW 3
32959: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32960: LD_VAR 0 2
32964: PPUSH
32965: LD_VAR 0 3
32969: PPUSH
32970: CALL 33170 0 2
32974: PUSH
32975: LD_VAR 0 11
32979: PUSH
32980: EMPTY
32981: EQUAL
32982: OR
32983: IFFALSE 32928
// if not control in _control then
32985: LD_VAR 0 4
32989: PUSH
32990: LD_VAR 0 12
32994: IN
32995: NOT
32996: IFFALSE 33022
// control := _control [ rand ( 1 , _control ) ] ;
32998: LD_ADDR_VAR 0 4
33002: PUSH
33003: LD_VAR 0 12
33007: PUSH
33008: LD_INT 1
33010: PPUSH
33011: LD_VAR 0 12
33015: PPUSH
33016: CALL_OW 12
33020: ARRAY
33021: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33022: LD_VAR 0 2
33026: PPUSH
33027: LD_VAR 0 5
33031: PPUSH
33032: CALL 33390 0 2
33036: NOT
33037: IFFALSE 33096
// repeat weapon := _weapon [ 1 ] ;
33039: LD_ADDR_VAR 0 5
33043: PUSH
33044: LD_VAR 0 10
33048: PUSH
33049: LD_INT 1
33051: ARRAY
33052: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33053: LD_ADDR_VAR 0 10
33057: PUSH
33058: LD_VAR 0 10
33062: PPUSH
33063: LD_INT 1
33065: PPUSH
33066: CALL_OW 3
33070: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33071: LD_VAR 0 2
33075: PPUSH
33076: LD_VAR 0 5
33080: PPUSH
33081: CALL 33390 0 2
33085: PUSH
33086: LD_VAR 0 10
33090: PUSH
33091: EMPTY
33092: EQUAL
33093: OR
33094: IFFALSE 33039
// result := [ ] ;
33096: LD_ADDR_VAR 0 6
33100: PUSH
33101: EMPTY
33102: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33103: LD_VAR 0 1
33107: PPUSH
33108: LD_VAR 0 2
33112: PPUSH
33113: LD_VAR 0 3
33117: PPUSH
33118: LD_VAR 0 4
33122: PPUSH
33123: LD_VAR 0 5
33127: PPUSH
33128: CALL_OW 448
33132: IFFALSE 33165
// result := [ chassis , engine , control , weapon ] ;
33134: LD_ADDR_VAR 0 6
33138: PUSH
33139: LD_VAR 0 2
33143: PUSH
33144: LD_VAR 0 3
33148: PUSH
33149: LD_VAR 0 4
33153: PUSH
33154: LD_VAR 0 5
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: ST_TO_ADDR
// end ;
33165: LD_VAR 0 6
33169: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33170: LD_INT 0
33172: PPUSH
// if not chassis or not engine then
33173: LD_VAR 0 1
33177: NOT
33178: PUSH
33179: LD_VAR 0 2
33183: NOT
33184: OR
33185: IFFALSE 33189
// exit ;
33187: GO 33385
// case engine of engine_solar :
33189: LD_VAR 0 2
33193: PUSH
33194: LD_INT 2
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33240
33202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33203: LD_ADDR_VAR 0 3
33207: PUSH
33208: LD_INT 11
33210: PUSH
33211: LD_INT 12
33213: PUSH
33214: LD_INT 13
33216: PUSH
33217: LD_INT 14
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: ST_TO_ADDR
33238: GO 33369
33240: LD_INT 1
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33248
33246: GO 33310
33248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33249: LD_ADDR_VAR 0 3
33253: PUSH
33254: LD_INT 11
33256: PUSH
33257: LD_INT 12
33259: PUSH
33260: LD_INT 13
33262: PUSH
33263: LD_INT 14
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: LD_INT 4
33277: PUSH
33278: LD_INT 5
33280: PUSH
33281: LD_INT 21
33283: PUSH
33284: LD_INT 23
33286: PUSH
33287: LD_INT 22
33289: PUSH
33290: LD_INT 24
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
33308: GO 33369
33310: LD_INT 3
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33368
33318: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33319: LD_ADDR_VAR 0 3
33323: PUSH
33324: LD_INT 13
33326: PUSH
33327: LD_INT 14
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: LD_INT 3
33335: PUSH
33336: LD_INT 4
33338: PUSH
33339: LD_INT 5
33341: PUSH
33342: LD_INT 21
33344: PUSH
33345: LD_INT 22
33347: PUSH
33348: LD_INT 23
33350: PUSH
33351: LD_INT 24
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
33366: GO 33369
33368: POP
// result := ( chassis in result ) ;
33369: LD_ADDR_VAR 0 3
33373: PUSH
33374: LD_VAR 0 1
33378: PUSH
33379: LD_VAR 0 3
33383: IN
33384: ST_TO_ADDR
// end ;
33385: LD_VAR 0 3
33389: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33390: LD_INT 0
33392: PPUSH
// if not chassis or not weapon then
33393: LD_VAR 0 1
33397: NOT
33398: PUSH
33399: LD_VAR 0 2
33403: NOT
33404: OR
33405: IFFALSE 33409
// exit ;
33407: GO 34469
// case weapon of us_machine_gun :
33409: LD_VAR 0 2
33413: PUSH
33414: LD_INT 2
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33452
33422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33423: LD_ADDR_VAR 0 3
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: LD_INT 4
33439: PUSH
33440: LD_INT 5
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
33450: GO 34453
33452: LD_INT 3
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33490
33460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: LD_INT 4
33477: PUSH
33478: LD_INT 5
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
33488: GO 34453
33490: LD_INT 11
33492: DOUBLE
33493: EQUAL
33494: IFTRUE 33498
33496: GO 33528
33498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33499: LD_ADDR_VAR 0 3
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 4
33515: PUSH
33516: LD_INT 5
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
33526: GO 34453
33528: LD_INT 4
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33562
33536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33537: LD_ADDR_VAR 0 3
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: LD_INT 4
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: ST_TO_ADDR
33560: GO 34453
33562: LD_INT 5
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33570
33568: GO 33596
33570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33571: LD_ADDR_VAR 0 3
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 4
33584: PUSH
33585: LD_INT 5
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: ST_TO_ADDR
33594: GO 34453
33596: LD_INT 9
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33604
33602: GO 33630
33604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 5
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: ST_TO_ADDR
33628: GO 34453
33630: LD_INT 7
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33638
33636: GO 33664
33638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33639: LD_ADDR_VAR 0 3
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: LD_INT 4
33652: PUSH
33653: LD_INT 5
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: ST_TO_ADDR
33662: GO 34453
33664: LD_INT 12
33666: DOUBLE
33667: EQUAL
33668: IFTRUE 33672
33670: GO 33698
33672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33673: LD_ADDR_VAR 0 3
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 3
33683: PUSH
33684: LD_INT 4
33686: PUSH
33687: LD_INT 5
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
33696: GO 34453
33698: LD_INT 13
33700: DOUBLE
33701: EQUAL
33702: IFTRUE 33706
33704: GO 33732
33706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33707: LD_ADDR_VAR 0 3
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 4
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: ST_TO_ADDR
33730: GO 34453
33732: LD_INT 14
33734: DOUBLE
33735: EQUAL
33736: IFTRUE 33740
33738: GO 33758
33740: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33741: LD_ADDR_VAR 0 3
33745: PUSH
33746: LD_INT 4
33748: PUSH
33749: LD_INT 5
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: ST_TO_ADDR
33756: GO 34453
33758: LD_INT 6
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33784
33766: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_INT 4
33774: PUSH
33775: LD_INT 5
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: ST_TO_ADDR
33782: GO 34453
33784: LD_INT 10
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33792
33790: GO 33810
33792: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33793: LD_ADDR_VAR 0 3
33797: PUSH
33798: LD_INT 4
33800: PUSH
33801: LD_INT 5
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 34453
33810: LD_INT 22
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33844
33818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 11
33826: PUSH
33827: LD_INT 12
33829: PUSH
33830: LD_INT 13
33832: PUSH
33833: LD_INT 14
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 34453
33844: LD_INT 23
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33878
33852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 11
33860: PUSH
33861: LD_INT 12
33863: PUSH
33864: LD_INT 13
33866: PUSH
33867: LD_INT 14
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
33876: GO 34453
33878: LD_INT 24
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33912
33886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_INT 11
33894: PUSH
33895: LD_INT 12
33897: PUSH
33898: LD_INT 13
33900: PUSH
33901: LD_INT 14
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
33910: GO 34453
33912: LD_INT 30
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 33946
33920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: LD_INT 11
33928: PUSH
33929: LD_INT 12
33931: PUSH
33932: LD_INT 13
33934: PUSH
33935: LD_INT 14
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
33944: GO 34453
33946: LD_INT 25
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 33972
33954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_INT 13
33962: PUSH
33963: LD_INT 14
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: ST_TO_ADDR
33970: GO 34453
33972: LD_INT 27
33974: DOUBLE
33975: EQUAL
33976: IFTRUE 33980
33978: GO 33998
33980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33981: LD_ADDR_VAR 0 3
33985: PUSH
33986: LD_INT 13
33988: PUSH
33989: LD_INT 14
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: ST_TO_ADDR
33996: GO 34453
33998: LD_INT 92
34000: DOUBLE
34001: EQUAL
34002: IFTRUE 34006
34004: GO 34032
34006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34007: LD_ADDR_VAR 0 3
34011: PUSH
34012: LD_INT 11
34014: PUSH
34015: LD_INT 12
34017: PUSH
34018: LD_INT 13
34020: PUSH
34021: LD_INT 14
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: ST_TO_ADDR
34030: GO 34453
34032: LD_INT 28
34034: DOUBLE
34035: EQUAL
34036: IFTRUE 34040
34038: GO 34058
34040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34041: LD_ADDR_VAR 0 3
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: ST_TO_ADDR
34056: GO 34453
34058: LD_INT 29
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34084
34066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_INT 13
34074: PUSH
34075: LD_INT 14
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34453
34084: LD_INT 31
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34110
34092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 13
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: ST_TO_ADDR
34108: GO 34453
34110: LD_INT 26
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34118
34116: GO 34136
34118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 13
34126: PUSH
34127: LD_INT 14
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: ST_TO_ADDR
34134: GO 34453
34136: LD_INT 42
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34170
34144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_INT 21
34152: PUSH
34153: LD_INT 22
34155: PUSH
34156: LD_INT 23
34158: PUSH
34159: LD_INT 24
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
34168: GO 34453
34170: LD_INT 43
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34204
34178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34179: LD_ADDR_VAR 0 3
34183: PUSH
34184: LD_INT 21
34186: PUSH
34187: LD_INT 22
34189: PUSH
34190: LD_INT 23
34192: PUSH
34193: LD_INT 24
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
34202: GO 34453
34204: LD_INT 44
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34238
34212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34213: LD_ADDR_VAR 0 3
34217: PUSH
34218: LD_INT 21
34220: PUSH
34221: LD_INT 22
34223: PUSH
34224: LD_INT 23
34226: PUSH
34227: LD_INT 24
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
34236: GO 34453
34238: LD_INT 45
34240: DOUBLE
34241: EQUAL
34242: IFTRUE 34246
34244: GO 34272
34246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34247: LD_ADDR_VAR 0 3
34251: PUSH
34252: LD_INT 21
34254: PUSH
34255: LD_INT 22
34257: PUSH
34258: LD_INT 23
34260: PUSH
34261: LD_INT 24
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
34270: GO 34453
34272: LD_INT 49
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34306
34280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_INT 21
34288: PUSH
34289: LD_INT 22
34291: PUSH
34292: LD_INT 23
34294: PUSH
34295: LD_INT 24
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: ST_TO_ADDR
34304: GO 34453
34306: LD_INT 51
34308: DOUBLE
34309: EQUAL
34310: IFTRUE 34314
34312: GO 34340
34314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34315: LD_ADDR_VAR 0 3
34319: PUSH
34320: LD_INT 21
34322: PUSH
34323: LD_INT 22
34325: PUSH
34326: LD_INT 23
34328: PUSH
34329: LD_INT 24
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
34338: GO 34453
34340: LD_INT 52
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34348
34346: GO 34374
34348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34349: LD_ADDR_VAR 0 3
34353: PUSH
34354: LD_INT 21
34356: PUSH
34357: LD_INT 22
34359: PUSH
34360: LD_INT 23
34362: PUSH
34363: LD_INT 24
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
34372: GO 34453
34374: LD_INT 53
34376: DOUBLE
34377: EQUAL
34378: IFTRUE 34382
34380: GO 34400
34382: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34383: LD_ADDR_VAR 0 3
34387: PUSH
34388: LD_INT 23
34390: PUSH
34391: LD_INT 24
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: ST_TO_ADDR
34398: GO 34453
34400: LD_INT 46
34402: DOUBLE
34403: EQUAL
34404: IFTRUE 34408
34406: GO 34426
34408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34409: LD_ADDR_VAR 0 3
34413: PUSH
34414: LD_INT 23
34416: PUSH
34417: LD_INT 24
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: ST_TO_ADDR
34424: GO 34453
34426: LD_INT 47
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34452
34434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34435: LD_ADDR_VAR 0 3
34439: PUSH
34440: LD_INT 23
34442: PUSH
34443: LD_INT 24
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34453
34452: POP
// result := ( chassis in result ) ;
34453: LD_ADDR_VAR 0 3
34457: PUSH
34458: LD_VAR 0 1
34462: PUSH
34463: LD_VAR 0 3
34467: IN
34468: ST_TO_ADDR
// end ;
34469: LD_VAR 0 3
34473: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34474: LD_INT 0
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
// result := array ;
34483: LD_ADDR_VAR 0 5
34487: PUSH
34488: LD_VAR 0 1
34492: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34493: LD_VAR 0 1
34497: NOT
34498: PUSH
34499: LD_VAR 0 2
34503: NOT
34504: OR
34505: PUSH
34506: LD_VAR 0 3
34510: NOT
34511: OR
34512: PUSH
34513: LD_VAR 0 2
34517: PUSH
34518: LD_VAR 0 1
34522: GREATER
34523: OR
34524: PUSH
34525: LD_VAR 0 3
34529: PUSH
34530: LD_VAR 0 1
34534: GREATER
34535: OR
34536: IFFALSE 34540
// exit ;
34538: GO 34836
// if direction then
34540: LD_VAR 0 4
34544: IFFALSE 34608
// begin d := 1 ;
34546: LD_ADDR_VAR 0 9
34550: PUSH
34551: LD_INT 1
34553: ST_TO_ADDR
// if i_from > i_to then
34554: LD_VAR 0 2
34558: PUSH
34559: LD_VAR 0 3
34563: GREATER
34564: IFFALSE 34590
// length := ( array - i_from ) + i_to else
34566: LD_ADDR_VAR 0 11
34570: PUSH
34571: LD_VAR 0 1
34575: PUSH
34576: LD_VAR 0 2
34580: MINUS
34581: PUSH
34582: LD_VAR 0 3
34586: PLUS
34587: ST_TO_ADDR
34588: GO 34606
// length := i_to - i_from ;
34590: LD_ADDR_VAR 0 11
34594: PUSH
34595: LD_VAR 0 3
34599: PUSH
34600: LD_VAR 0 2
34604: MINUS
34605: ST_TO_ADDR
// end else
34606: GO 34669
// begin d := - 1 ;
34608: LD_ADDR_VAR 0 9
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: ST_TO_ADDR
// if i_from > i_to then
34617: LD_VAR 0 2
34621: PUSH
34622: LD_VAR 0 3
34626: GREATER
34627: IFFALSE 34647
// length := i_from - i_to else
34629: LD_ADDR_VAR 0 11
34633: PUSH
34634: LD_VAR 0 2
34638: PUSH
34639: LD_VAR 0 3
34643: MINUS
34644: ST_TO_ADDR
34645: GO 34669
// length := ( array - i_to ) + i_from ;
34647: LD_ADDR_VAR 0 11
34651: PUSH
34652: LD_VAR 0 1
34656: PUSH
34657: LD_VAR 0 3
34661: MINUS
34662: PUSH
34663: LD_VAR 0 2
34667: PLUS
34668: ST_TO_ADDR
// end ; if not length then
34669: LD_VAR 0 11
34673: NOT
34674: IFFALSE 34678
// exit ;
34676: GO 34836
// tmp := array ;
34678: LD_ADDR_VAR 0 10
34682: PUSH
34683: LD_VAR 0 1
34687: ST_TO_ADDR
// for i = 1 to length do
34688: LD_ADDR_VAR 0 6
34692: PUSH
34693: DOUBLE
34694: LD_INT 1
34696: DEC
34697: ST_TO_ADDR
34698: LD_VAR 0 11
34702: PUSH
34703: FOR_TO
34704: IFFALSE 34824
// begin for j = 1 to array do
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: DOUBLE
34712: LD_INT 1
34714: DEC
34715: ST_TO_ADDR
34716: LD_VAR 0 1
34720: PUSH
34721: FOR_TO
34722: IFFALSE 34810
// begin k := j + d ;
34724: LD_ADDR_VAR 0 8
34728: PUSH
34729: LD_VAR 0 7
34733: PUSH
34734: LD_VAR 0 9
34738: PLUS
34739: ST_TO_ADDR
// if k > array then
34740: LD_VAR 0 8
34744: PUSH
34745: LD_VAR 0 1
34749: GREATER
34750: IFFALSE 34760
// k := 1 ;
34752: LD_ADDR_VAR 0 8
34756: PUSH
34757: LD_INT 1
34759: ST_TO_ADDR
// if not k then
34760: LD_VAR 0 8
34764: NOT
34765: IFFALSE 34777
// k := array ;
34767: LD_ADDR_VAR 0 8
34771: PUSH
34772: LD_VAR 0 1
34776: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34777: LD_ADDR_VAR 0 10
34781: PUSH
34782: LD_VAR 0 10
34786: PPUSH
34787: LD_VAR 0 8
34791: PPUSH
34792: LD_VAR 0 1
34796: PUSH
34797: LD_VAR 0 7
34801: ARRAY
34802: PPUSH
34803: CALL_OW 1
34807: ST_TO_ADDR
// end ;
34808: GO 34721
34810: POP
34811: POP
// array := tmp ;
34812: LD_ADDR_VAR 0 1
34816: PUSH
34817: LD_VAR 0 10
34821: ST_TO_ADDR
// end ;
34822: GO 34703
34824: POP
34825: POP
// result := array ;
34826: LD_ADDR_VAR 0 5
34830: PUSH
34831: LD_VAR 0 1
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 5
34840: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34841: LD_INT 0
34843: PPUSH
34844: PPUSH
// result := 0 ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_INT 0
34852: ST_TO_ADDR
// if not array or not value in array then
34853: LD_VAR 0 1
34857: NOT
34858: PUSH
34859: LD_VAR 0 2
34863: PUSH
34864: LD_VAR 0 1
34868: IN
34869: NOT
34870: OR
34871: IFFALSE 34875
// exit ;
34873: GO 34929
// for i = 1 to array do
34875: LD_ADDR_VAR 0 4
34879: PUSH
34880: DOUBLE
34881: LD_INT 1
34883: DEC
34884: ST_TO_ADDR
34885: LD_VAR 0 1
34889: PUSH
34890: FOR_TO
34891: IFFALSE 34927
// if value = array [ i ] then
34893: LD_VAR 0 2
34897: PUSH
34898: LD_VAR 0 1
34902: PUSH
34903: LD_VAR 0 4
34907: ARRAY
34908: EQUAL
34909: IFFALSE 34925
// begin result := i ;
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: LD_VAR 0 4
34920: ST_TO_ADDR
// exit ;
34921: POP
34922: POP
34923: GO 34929
// end ;
34925: GO 34890
34927: POP
34928: POP
// end ;
34929: LD_VAR 0 3
34933: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34934: LD_INT 0
34936: PPUSH
// vc_chassis := chassis ;
34937: LD_ADDR_OWVAR 37
34941: PUSH
34942: LD_VAR 0 1
34946: ST_TO_ADDR
// vc_engine := engine ;
34947: LD_ADDR_OWVAR 39
34951: PUSH
34952: LD_VAR 0 2
34956: ST_TO_ADDR
// vc_control := control ;
34957: LD_ADDR_OWVAR 38
34961: PUSH
34962: LD_VAR 0 3
34966: ST_TO_ADDR
// vc_weapon := weapon ;
34967: LD_ADDR_OWVAR 40
34971: PUSH
34972: LD_VAR 0 4
34976: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34977: LD_ADDR_OWVAR 41
34981: PUSH
34982: LD_VAR 0 5
34986: ST_TO_ADDR
// end ;
34987: LD_VAR 0 6
34991: RET
// export function WantPlant ( unit ) ; var task ; begin
34992: LD_INT 0
34994: PPUSH
34995: PPUSH
// result := false ;
34996: LD_ADDR_VAR 0 2
35000: PUSH
35001: LD_INT 0
35003: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: CALL_OW 437
35018: ST_TO_ADDR
// if task then
35019: LD_VAR 0 3
35023: IFFALSE 35051
// if task [ 1 ] [ 1 ] = p then
35025: LD_VAR 0 3
35029: PUSH
35030: LD_INT 1
35032: ARRAY
35033: PUSH
35034: LD_INT 1
35036: ARRAY
35037: PUSH
35038: LD_STRING p
35040: EQUAL
35041: IFFALSE 35051
// result := true ;
35043: LD_ADDR_VAR 0 2
35047: PUSH
35048: LD_INT 1
35050: ST_TO_ADDR
// end ;
35051: LD_VAR 0 2
35055: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35056: LD_INT 0
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
// if pos < 1 then
35062: LD_VAR 0 2
35066: PUSH
35067: LD_INT 1
35069: LESS
35070: IFFALSE 35074
// exit ;
35072: GO 35377
// if pos = 1 then
35074: LD_VAR 0 2
35078: PUSH
35079: LD_INT 1
35081: EQUAL
35082: IFFALSE 35115
// result := Replace ( arr , pos [ 1 ] , value ) else
35084: LD_ADDR_VAR 0 4
35088: PUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: LD_VAR 0 2
35098: PUSH
35099: LD_INT 1
35101: ARRAY
35102: PPUSH
35103: LD_VAR 0 3
35107: PPUSH
35108: CALL_OW 1
35112: ST_TO_ADDR
35113: GO 35377
// begin tmp := arr ;
35115: LD_ADDR_VAR 0 6
35119: PUSH
35120: LD_VAR 0 1
35124: ST_TO_ADDR
// s_arr := [ tmp ] ;
35125: LD_ADDR_VAR 0 7
35129: PUSH
35130: LD_VAR 0 6
35134: PUSH
35135: EMPTY
35136: LIST
35137: ST_TO_ADDR
// for i = 1 to pos - 1 do
35138: LD_ADDR_VAR 0 5
35142: PUSH
35143: DOUBLE
35144: LD_INT 1
35146: DEC
35147: ST_TO_ADDR
35148: LD_VAR 0 2
35152: PUSH
35153: LD_INT 1
35155: MINUS
35156: PUSH
35157: FOR_TO
35158: IFFALSE 35203
// begin tmp := tmp [ pos [ i ] ] ;
35160: LD_ADDR_VAR 0 6
35164: PUSH
35165: LD_VAR 0 6
35169: PUSH
35170: LD_VAR 0 2
35174: PUSH
35175: LD_VAR 0 5
35179: ARRAY
35180: ARRAY
35181: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35182: LD_ADDR_VAR 0 7
35186: PUSH
35187: LD_VAR 0 7
35191: PUSH
35192: LD_VAR 0 6
35196: PUSH
35197: EMPTY
35198: LIST
35199: ADD
35200: ST_TO_ADDR
// end ;
35201: GO 35157
35203: POP
35204: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35205: LD_ADDR_VAR 0 6
35209: PUSH
35210: LD_VAR 0 6
35214: PPUSH
35215: LD_VAR 0 2
35219: PUSH
35220: LD_VAR 0 2
35224: ARRAY
35225: PPUSH
35226: LD_VAR 0 3
35230: PPUSH
35231: CALL_OW 1
35235: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35236: LD_ADDR_VAR 0 7
35240: PUSH
35241: LD_VAR 0 7
35245: PPUSH
35246: LD_VAR 0 7
35250: PPUSH
35251: LD_VAR 0 6
35255: PPUSH
35256: CALL_OW 1
35260: ST_TO_ADDR
// for i = s_arr downto 2 do
35261: LD_ADDR_VAR 0 5
35265: PUSH
35266: DOUBLE
35267: LD_VAR 0 7
35271: INC
35272: ST_TO_ADDR
35273: LD_INT 2
35275: PUSH
35276: FOR_DOWNTO
35277: IFFALSE 35361
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35279: LD_ADDR_VAR 0 6
35283: PUSH
35284: LD_VAR 0 7
35288: PUSH
35289: LD_VAR 0 5
35293: PUSH
35294: LD_INT 1
35296: MINUS
35297: ARRAY
35298: PPUSH
35299: LD_VAR 0 2
35303: PUSH
35304: LD_VAR 0 5
35308: PUSH
35309: LD_INT 1
35311: MINUS
35312: ARRAY
35313: PPUSH
35314: LD_VAR 0 7
35318: PUSH
35319: LD_VAR 0 5
35323: ARRAY
35324: PPUSH
35325: CALL_OW 1
35329: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35330: LD_ADDR_VAR 0 7
35334: PUSH
35335: LD_VAR 0 7
35339: PPUSH
35340: LD_VAR 0 5
35344: PUSH
35345: LD_INT 1
35347: MINUS
35348: PPUSH
35349: LD_VAR 0 6
35353: PPUSH
35354: CALL_OW 1
35358: ST_TO_ADDR
// end ;
35359: GO 35276
35361: POP
35362: POP
// result := s_arr [ 1 ] ;
35363: LD_ADDR_VAR 0 4
35367: PUSH
35368: LD_VAR 0 7
35372: PUSH
35373: LD_INT 1
35375: ARRAY
35376: ST_TO_ADDR
// end ; end ;
35377: LD_VAR 0 4
35381: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35382: LD_INT 0
35384: PPUSH
35385: PPUSH
// if not list then
35386: LD_VAR 0 1
35390: NOT
35391: IFFALSE 35395
// exit ;
35393: GO 35486
// i := list [ pos1 ] ;
35395: LD_ADDR_VAR 0 5
35399: PUSH
35400: LD_VAR 0 1
35404: PUSH
35405: LD_VAR 0 2
35409: ARRAY
35410: ST_TO_ADDR
// if not i then
35411: LD_VAR 0 5
35415: NOT
35416: IFFALSE 35420
// exit ;
35418: GO 35486
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35420: LD_ADDR_VAR 0 1
35424: PUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: LD_VAR 0 2
35434: PPUSH
35435: LD_VAR 0 1
35439: PUSH
35440: LD_VAR 0 3
35444: ARRAY
35445: PPUSH
35446: CALL_OW 1
35450: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35451: LD_ADDR_VAR 0 1
35455: PUSH
35456: LD_VAR 0 1
35460: PPUSH
35461: LD_VAR 0 3
35465: PPUSH
35466: LD_VAR 0 5
35470: PPUSH
35471: CALL_OW 1
35475: ST_TO_ADDR
// result := list ;
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_VAR 0 1
35485: ST_TO_ADDR
// end ;
35486: LD_VAR 0 4
35490: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35491: LD_INT 0
35493: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35494: LD_ADDR_VAR 0 5
35498: PUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 250
35508: PPUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 251
35518: PPUSH
35519: LD_VAR 0 2
35523: PPUSH
35524: LD_VAR 0 3
35528: PPUSH
35529: LD_VAR 0 4
35533: PPUSH
35534: CALL 35544 0 5
35538: ST_TO_ADDR
// end ;
35539: LD_VAR 0 5
35543: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35544: LD_INT 0
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
// if not list then
35550: LD_VAR 0 3
35554: NOT
35555: IFFALSE 35559
// exit ;
35557: GO 35947
// result := [ ] ;
35559: LD_ADDR_VAR 0 6
35563: PUSH
35564: EMPTY
35565: ST_TO_ADDR
// for i in list do
35566: LD_ADDR_VAR 0 7
35570: PUSH
35571: LD_VAR 0 3
35575: PUSH
35576: FOR_IN
35577: IFFALSE 35779
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35579: LD_ADDR_VAR 0 9
35583: PUSH
35584: LD_VAR 0 7
35588: PPUSH
35589: LD_VAR 0 1
35593: PPUSH
35594: LD_VAR 0 2
35598: PPUSH
35599: CALL_OW 297
35603: ST_TO_ADDR
// if not result then
35604: LD_VAR 0 6
35608: NOT
35609: IFFALSE 35635
// result := [ [ i , tmp ] ] else
35611: LD_ADDR_VAR 0 6
35615: PUSH
35616: LD_VAR 0 7
35620: PUSH
35621: LD_VAR 0 9
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: ST_TO_ADDR
35633: GO 35777
// begin if result [ result ] [ 2 ] < tmp then
35635: LD_VAR 0 6
35639: PUSH
35640: LD_VAR 0 6
35644: ARRAY
35645: PUSH
35646: LD_INT 2
35648: ARRAY
35649: PUSH
35650: LD_VAR 0 9
35654: LESS
35655: IFFALSE 35697
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35657: LD_ADDR_VAR 0 6
35661: PUSH
35662: LD_VAR 0 6
35666: PPUSH
35667: LD_VAR 0 6
35671: PUSH
35672: LD_INT 1
35674: PLUS
35675: PPUSH
35676: LD_VAR 0 7
35680: PUSH
35681: LD_VAR 0 9
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PPUSH
35690: CALL_OW 2
35694: ST_TO_ADDR
35695: GO 35777
// for j = 1 to result do
35697: LD_ADDR_VAR 0 8
35701: PUSH
35702: DOUBLE
35703: LD_INT 1
35705: DEC
35706: ST_TO_ADDR
35707: LD_VAR 0 6
35711: PUSH
35712: FOR_TO
35713: IFFALSE 35775
// begin if tmp < result [ j ] [ 2 ] then
35715: LD_VAR 0 9
35719: PUSH
35720: LD_VAR 0 6
35724: PUSH
35725: LD_VAR 0 8
35729: ARRAY
35730: PUSH
35731: LD_INT 2
35733: ARRAY
35734: LESS
35735: IFFALSE 35773
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35737: LD_ADDR_VAR 0 6
35741: PUSH
35742: LD_VAR 0 6
35746: PPUSH
35747: LD_VAR 0 8
35751: PPUSH
35752: LD_VAR 0 7
35756: PUSH
35757: LD_VAR 0 9
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PPUSH
35766: CALL_OW 2
35770: ST_TO_ADDR
// break ;
35771: GO 35775
// end ; end ;
35773: GO 35712
35775: POP
35776: POP
// end ; end ;
35777: GO 35576
35779: POP
35780: POP
// if result and not asc then
35781: LD_VAR 0 6
35785: PUSH
35786: LD_VAR 0 4
35790: NOT
35791: AND
35792: IFFALSE 35867
// begin tmp := result ;
35794: LD_ADDR_VAR 0 9
35798: PUSH
35799: LD_VAR 0 6
35803: ST_TO_ADDR
// for i = tmp downto 1 do
35804: LD_ADDR_VAR 0 7
35808: PUSH
35809: DOUBLE
35810: LD_VAR 0 9
35814: INC
35815: ST_TO_ADDR
35816: LD_INT 1
35818: PUSH
35819: FOR_DOWNTO
35820: IFFALSE 35865
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35822: LD_ADDR_VAR 0 6
35826: PUSH
35827: LD_VAR 0 6
35831: PPUSH
35832: LD_VAR 0 9
35836: PUSH
35837: LD_VAR 0 7
35841: MINUS
35842: PUSH
35843: LD_INT 1
35845: PLUS
35846: PPUSH
35847: LD_VAR 0 9
35851: PUSH
35852: LD_VAR 0 7
35856: ARRAY
35857: PPUSH
35858: CALL_OW 1
35862: ST_TO_ADDR
35863: GO 35819
35865: POP
35866: POP
// end ; tmp := [ ] ;
35867: LD_ADDR_VAR 0 9
35871: PUSH
35872: EMPTY
35873: ST_TO_ADDR
// if mode then
35874: LD_VAR 0 5
35878: IFFALSE 35947
// begin for i = 1 to result do
35880: LD_ADDR_VAR 0 7
35884: PUSH
35885: DOUBLE
35886: LD_INT 1
35888: DEC
35889: ST_TO_ADDR
35890: LD_VAR 0 6
35894: PUSH
35895: FOR_TO
35896: IFFALSE 35935
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35898: LD_ADDR_VAR 0 9
35902: PUSH
35903: LD_VAR 0 9
35907: PPUSH
35908: LD_VAR 0 7
35912: PPUSH
35913: LD_VAR 0 6
35917: PUSH
35918: LD_VAR 0 7
35922: ARRAY
35923: PUSH
35924: LD_INT 1
35926: ARRAY
35927: PPUSH
35928: CALL_OW 1
35932: ST_TO_ADDR
35933: GO 35895
35935: POP
35936: POP
// result := tmp ;
35937: LD_ADDR_VAR 0 6
35941: PUSH
35942: LD_VAR 0 9
35946: ST_TO_ADDR
// end ; end ;
35947: LD_VAR 0 6
35951: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35952: LD_INT 0
35954: PPUSH
35955: PPUSH
35956: PPUSH
35957: PPUSH
35958: PPUSH
35959: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35960: LD_ADDR_VAR 0 5
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// if not x or not y then
35982: LD_VAR 0 2
35986: NOT
35987: PUSH
35988: LD_VAR 0 3
35992: NOT
35993: OR
35994: IFFALSE 35998
// exit ;
35996: GO 37648
// if not range then
35998: LD_VAR 0 4
36002: NOT
36003: IFFALSE 36013
// range := 10 ;
36005: LD_ADDR_VAR 0 4
36009: PUSH
36010: LD_INT 10
36012: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36013: LD_ADDR_VAR 0 8
36017: PUSH
36018: LD_INT 81
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 92
36032: PUSH
36033: LD_VAR 0 2
36037: PUSH
36038: LD_VAR 0 3
36042: PUSH
36043: LD_VAR 0 4
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: LD_INT 21
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: PPUSH
36076: CALL_OW 69
36080: ST_TO_ADDR
// if not tmp then
36081: LD_VAR 0 8
36085: NOT
36086: IFFALSE 36090
// exit ;
36088: GO 37648
// for i in tmp do
36090: LD_ADDR_VAR 0 6
36094: PUSH
36095: LD_VAR 0 8
36099: PUSH
36100: FOR_IN
36101: IFFALSE 37623
// begin points := [ 0 , 0 , 0 ] ;
36103: LD_ADDR_VAR 0 9
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// bpoints := 1 ;
36122: LD_ADDR_VAR 0 10
36126: PUSH
36127: LD_INT 1
36129: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36130: LD_VAR 0 6
36134: PPUSH
36135: CALL_OW 247
36139: PUSH
36140: LD_INT 1
36142: DOUBLE
36143: EQUAL
36144: IFTRUE 36148
36146: GO 36726
36148: POP
// begin if GetClass ( i ) = 1 then
36149: LD_VAR 0 6
36153: PPUSH
36154: CALL_OW 257
36158: PUSH
36159: LD_INT 1
36161: EQUAL
36162: IFFALSE 36183
// points := [ 10 , 5 , 3 ] ;
36164: LD_ADDR_VAR 0 9
36168: PUSH
36169: LD_INT 10
36171: PUSH
36172: LD_INT 5
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36183: LD_VAR 0 6
36187: PPUSH
36188: CALL_OW 257
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 3
36198: PUSH
36199: LD_INT 4
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: IN
36207: IFFALSE 36228
// points := [ 3 , 2 , 1 ] ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: LD_INT 2
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36228: LD_VAR 0 6
36232: PPUSH
36233: CALL_OW 257
36237: PUSH
36238: LD_INT 5
36240: EQUAL
36241: IFFALSE 36262
// points := [ 130 , 5 , 2 ] ;
36243: LD_ADDR_VAR 0 9
36247: PUSH
36248: LD_INT 130
36250: PUSH
36251: LD_INT 5
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36262: LD_VAR 0 6
36266: PPUSH
36267: CALL_OW 257
36271: PUSH
36272: LD_INT 8
36274: EQUAL
36275: IFFALSE 36296
// points := [ 35 , 35 , 30 ] ;
36277: LD_ADDR_VAR 0 9
36281: PUSH
36282: LD_INT 35
36284: PUSH
36285: LD_INT 35
36287: PUSH
36288: LD_INT 30
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36296: LD_VAR 0 6
36300: PPUSH
36301: CALL_OW 257
36305: PUSH
36306: LD_INT 9
36308: EQUAL
36309: IFFALSE 36330
// points := [ 20 , 55 , 40 ] ;
36311: LD_ADDR_VAR 0 9
36315: PUSH
36316: LD_INT 20
36318: PUSH
36319: LD_INT 55
36321: PUSH
36322: LD_INT 40
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36330: LD_VAR 0 6
36334: PPUSH
36335: CALL_OW 257
36339: PUSH
36340: LD_INT 12
36342: PUSH
36343: LD_INT 16
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: IN
36350: IFFALSE 36371
// points := [ 5 , 3 , 2 ] ;
36352: LD_ADDR_VAR 0 9
36356: PUSH
36357: LD_INT 5
36359: PUSH
36360: LD_INT 3
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36371: LD_VAR 0 6
36375: PPUSH
36376: CALL_OW 257
36380: PUSH
36381: LD_INT 17
36383: EQUAL
36384: IFFALSE 36405
// points := [ 100 , 50 , 75 ] ;
36386: LD_ADDR_VAR 0 9
36390: PUSH
36391: LD_INT 100
36393: PUSH
36394: LD_INT 50
36396: PUSH
36397: LD_INT 75
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36405: LD_VAR 0 6
36409: PPUSH
36410: CALL_OW 257
36414: PUSH
36415: LD_INT 15
36417: EQUAL
36418: IFFALSE 36439
// points := [ 10 , 5 , 3 ] ;
36420: LD_ADDR_VAR 0 9
36424: PUSH
36425: LD_INT 10
36427: PUSH
36428: LD_INT 5
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36439: LD_VAR 0 6
36443: PPUSH
36444: CALL_OW 257
36448: PUSH
36449: LD_INT 14
36451: EQUAL
36452: IFFALSE 36473
// points := [ 10 , 0 , 0 ] ;
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_INT 10
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36473: LD_VAR 0 6
36477: PPUSH
36478: CALL_OW 257
36482: PUSH
36483: LD_INT 11
36485: EQUAL
36486: IFFALSE 36507
// points := [ 30 , 10 , 5 ] ;
36488: LD_ADDR_VAR 0 9
36492: PUSH
36493: LD_INT 30
36495: PUSH
36496: LD_INT 10
36498: PUSH
36499: LD_INT 5
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36507: LD_VAR 0 1
36511: PPUSH
36512: LD_INT 5
36514: PPUSH
36515: CALL_OW 321
36519: PUSH
36520: LD_INT 2
36522: EQUAL
36523: IFFALSE 36540
// bpoints := bpoints * 1.8 ;
36525: LD_ADDR_VAR 0 10
36529: PUSH
36530: LD_VAR 0 10
36534: PUSH
36535: LD_REAL  1.80000000000000E+0000
36538: MUL
36539: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL_OW 257
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: LD_INT 4
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: IN
36568: PUSH
36569: LD_VAR 0 1
36573: PPUSH
36574: LD_INT 51
36576: PPUSH
36577: CALL_OW 321
36581: PUSH
36582: LD_INT 2
36584: EQUAL
36585: AND
36586: IFFALSE 36603
// bpoints := bpoints * 1.2 ;
36588: LD_ADDR_VAR 0 10
36592: PUSH
36593: LD_VAR 0 10
36597: PUSH
36598: LD_REAL  1.20000000000000E+0000
36601: MUL
36602: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36603: LD_VAR 0 6
36607: PPUSH
36608: CALL_OW 257
36612: PUSH
36613: LD_INT 5
36615: PUSH
36616: LD_INT 7
36618: PUSH
36619: LD_INT 9
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: IN
36627: PUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: LD_INT 52
36635: PPUSH
36636: CALL_OW 321
36640: PUSH
36641: LD_INT 2
36643: EQUAL
36644: AND
36645: IFFALSE 36662
// bpoints := bpoints * 1.5 ;
36647: LD_ADDR_VAR 0 10
36651: PUSH
36652: LD_VAR 0 10
36656: PUSH
36657: LD_REAL  1.50000000000000E+0000
36660: MUL
36661: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36662: LD_VAR 0 1
36666: PPUSH
36667: LD_INT 66
36669: PPUSH
36670: CALL_OW 321
36674: PUSH
36675: LD_INT 2
36677: EQUAL
36678: IFFALSE 36695
// bpoints := bpoints * 1.1 ;
36680: LD_ADDR_VAR 0 10
36684: PUSH
36685: LD_VAR 0 10
36689: PUSH
36690: LD_REAL  1.10000000000000E+0000
36693: MUL
36694: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36695: LD_ADDR_VAR 0 10
36699: PUSH
36700: LD_VAR 0 10
36704: PUSH
36705: LD_VAR 0 6
36709: PPUSH
36710: LD_INT 1
36712: PPUSH
36713: CALL_OW 259
36717: PUSH
36718: LD_REAL  1.15000000000000E+0000
36721: MUL
36722: MUL
36723: ST_TO_ADDR
// end ; unit_vehicle :
36724: GO 37552
36726: LD_INT 2
36728: DOUBLE
36729: EQUAL
36730: IFTRUE 36734
36732: GO 37540
36734: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36735: LD_VAR 0 6
36739: PPUSH
36740: CALL_OW 264
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: LD_INT 42
36750: PUSH
36751: LD_INT 24
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: LIST
36758: IN
36759: IFFALSE 36780
// points := [ 25 , 5 , 3 ] ;
36761: LD_ADDR_VAR 0 9
36765: PUSH
36766: LD_INT 25
36768: PUSH
36769: LD_INT 5
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36780: LD_VAR 0 6
36784: PPUSH
36785: CALL_OW 264
36789: PUSH
36790: LD_INT 4
36792: PUSH
36793: LD_INT 43
36795: PUSH
36796: LD_INT 25
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: IN
36804: IFFALSE 36825
// points := [ 40 , 15 , 5 ] ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_INT 40
36813: PUSH
36814: LD_INT 15
36816: PUSH
36817: LD_INT 5
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36825: LD_VAR 0 6
36829: PPUSH
36830: CALL_OW 264
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: LD_INT 23
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: IN
36845: IFFALSE 36866
// points := [ 7 , 25 , 8 ] ;
36847: LD_ADDR_VAR 0 9
36851: PUSH
36852: LD_INT 7
36854: PUSH
36855: LD_INT 25
36857: PUSH
36858: LD_INT 8
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 264
36875: PUSH
36876: LD_INT 5
36878: PUSH
36879: LD_INT 27
36881: PUSH
36882: LD_INT 44
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: IN
36890: IFFALSE 36911
// points := [ 14 , 50 , 16 ] ;
36892: LD_ADDR_VAR 0 9
36896: PUSH
36897: LD_INT 14
36899: PUSH
36900: LD_INT 50
36902: PUSH
36903: LD_INT 16
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36911: LD_VAR 0 6
36915: PPUSH
36916: CALL_OW 264
36920: PUSH
36921: LD_INT 6
36923: PUSH
36924: LD_INT 46
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: IN
36931: IFFALSE 36952
// points := [ 32 , 120 , 70 ] ;
36933: LD_ADDR_VAR 0 9
36937: PUSH
36938: LD_INT 32
36940: PUSH
36941: LD_INT 120
36943: PUSH
36944: LD_INT 70
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36952: LD_VAR 0 6
36956: PPUSH
36957: CALL_OW 264
36961: PUSH
36962: LD_INT 7
36964: PUSH
36965: LD_INT 28
36967: PUSH
36968: LD_INT 45
36970: PUSH
36971: LD_INT 92
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: IN
36980: IFFALSE 37001
// points := [ 35 , 20 , 45 ] ;
36982: LD_ADDR_VAR 0 9
36986: PUSH
36987: LD_INT 35
36989: PUSH
36990: LD_INT 20
36992: PUSH
36993: LD_INT 45
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37001: LD_VAR 0 6
37005: PPUSH
37006: CALL_OW 264
37010: PUSH
37011: LD_INT 47
37013: PUSH
37014: EMPTY
37015: LIST
37016: IN
37017: IFFALSE 37038
// points := [ 67 , 45 , 75 ] ;
37019: LD_ADDR_VAR 0 9
37023: PUSH
37024: LD_INT 67
37026: PUSH
37027: LD_INT 45
37029: PUSH
37030: LD_INT 75
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37038: LD_VAR 0 6
37042: PPUSH
37043: CALL_OW 264
37047: PUSH
37048: LD_INT 26
37050: PUSH
37051: EMPTY
37052: LIST
37053: IN
37054: IFFALSE 37075
// points := [ 120 , 30 , 80 ] ;
37056: LD_ADDR_VAR 0 9
37060: PUSH
37061: LD_INT 120
37063: PUSH
37064: LD_INT 30
37066: PUSH
37067: LD_INT 80
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37075: LD_VAR 0 6
37079: PPUSH
37080: CALL_OW 264
37084: PUSH
37085: LD_INT 22
37087: PUSH
37088: EMPTY
37089: LIST
37090: IN
37091: IFFALSE 37112
// points := [ 40 , 1 , 1 ] ;
37093: LD_ADDR_VAR 0 9
37097: PUSH
37098: LD_INT 40
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37112: LD_VAR 0 6
37116: PPUSH
37117: CALL_OW 264
37121: PUSH
37122: LD_INT 29
37124: PUSH
37125: EMPTY
37126: LIST
37127: IN
37128: IFFALSE 37149
// points := [ 70 , 200 , 400 ] ;
37130: LD_ADDR_VAR 0 9
37134: PUSH
37135: LD_INT 70
37137: PUSH
37138: LD_INT 200
37140: PUSH
37141: LD_INT 400
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37149: LD_VAR 0 6
37153: PPUSH
37154: CALL_OW 264
37158: PUSH
37159: LD_INT 14
37161: PUSH
37162: LD_INT 53
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: IN
37169: IFFALSE 37190
// points := [ 40 , 10 , 20 ] ;
37171: LD_ADDR_VAR 0 9
37175: PUSH
37176: LD_INT 40
37178: PUSH
37179: LD_INT 10
37181: PUSH
37182: LD_INT 20
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37190: LD_VAR 0 6
37194: PPUSH
37195: CALL_OW 264
37199: PUSH
37200: LD_INT 9
37202: PUSH
37203: EMPTY
37204: LIST
37205: IN
37206: IFFALSE 37227
// points := [ 5 , 70 , 20 ] ;
37208: LD_ADDR_VAR 0 9
37212: PUSH
37213: LD_INT 5
37215: PUSH
37216: LD_INT 70
37218: PUSH
37219: LD_INT 20
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37227: LD_VAR 0 6
37231: PPUSH
37232: CALL_OW 264
37236: PUSH
37237: LD_INT 10
37239: PUSH
37240: EMPTY
37241: LIST
37242: IN
37243: IFFALSE 37264
// points := [ 35 , 110 , 70 ] ;
37245: LD_ADDR_VAR 0 9
37249: PUSH
37250: LD_INT 35
37252: PUSH
37253: LD_INT 110
37255: PUSH
37256: LD_INT 70
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37264: LD_VAR 0 6
37268: PPUSH
37269: CALL_OW 265
37273: PUSH
37274: LD_INT 25
37276: EQUAL
37277: IFFALSE 37298
// points := [ 80 , 65 , 100 ] ;
37279: LD_ADDR_VAR 0 9
37283: PUSH
37284: LD_INT 80
37286: PUSH
37287: LD_INT 65
37289: PUSH
37290: LD_INT 100
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37298: LD_VAR 0 6
37302: PPUSH
37303: CALL_OW 263
37307: PUSH
37308: LD_INT 1
37310: EQUAL
37311: IFFALSE 37346
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37313: LD_ADDR_VAR 0 10
37317: PUSH
37318: LD_VAR 0 10
37322: PUSH
37323: LD_VAR 0 6
37327: PPUSH
37328: CALL_OW 311
37332: PPUSH
37333: LD_INT 3
37335: PPUSH
37336: CALL_OW 259
37340: PUSH
37341: LD_INT 4
37343: MUL
37344: MUL
37345: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37346: LD_VAR 0 6
37350: PPUSH
37351: CALL_OW 263
37355: PUSH
37356: LD_INT 2
37358: EQUAL
37359: IFFALSE 37410
// begin j := IsControledBy ( i ) ;
37361: LD_ADDR_VAR 0 7
37365: PUSH
37366: LD_VAR 0 6
37370: PPUSH
37371: CALL_OW 312
37375: ST_TO_ADDR
// if j then
37376: LD_VAR 0 7
37380: IFFALSE 37410
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37382: LD_ADDR_VAR 0 10
37386: PUSH
37387: LD_VAR 0 10
37391: PUSH
37392: LD_VAR 0 7
37396: PPUSH
37397: LD_INT 3
37399: PPUSH
37400: CALL_OW 259
37404: PUSH
37405: LD_INT 3
37407: MUL
37408: MUL
37409: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37410: LD_VAR 0 6
37414: PPUSH
37415: CALL_OW 264
37419: PUSH
37420: LD_INT 5
37422: PUSH
37423: LD_INT 6
37425: PUSH
37426: LD_INT 46
37428: PUSH
37429: LD_INT 44
37431: PUSH
37432: LD_INT 47
37434: PUSH
37435: LD_INT 45
37437: PUSH
37438: LD_INT 28
37440: PUSH
37441: LD_INT 7
37443: PUSH
37444: LD_INT 27
37446: PUSH
37447: LD_INT 29
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: IN
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_INT 52
37470: PPUSH
37471: CALL_OW 321
37475: PUSH
37476: LD_INT 2
37478: EQUAL
37479: AND
37480: IFFALSE 37497
// bpoints := bpoints * 1.2 ;
37482: LD_ADDR_VAR 0 10
37486: PUSH
37487: LD_VAR 0 10
37491: PUSH
37492: LD_REAL  1.20000000000000E+0000
37495: MUL
37496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37497: LD_VAR 0 6
37501: PPUSH
37502: CALL_OW 264
37506: PUSH
37507: LD_INT 6
37509: PUSH
37510: LD_INT 46
37512: PUSH
37513: LD_INT 47
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: IN
37521: IFFALSE 37538
// bpoints := bpoints * 1.2 ;
37523: LD_ADDR_VAR 0 10
37527: PUSH
37528: LD_VAR 0 10
37532: PUSH
37533: LD_REAL  1.20000000000000E+0000
37536: MUL
37537: ST_TO_ADDR
// end ; unit_building :
37538: GO 37552
37540: LD_INT 3
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 37551
37548: POP
// ; end ;
37549: GO 37552
37551: POP
// for j = 1 to 3 do
37552: LD_ADDR_VAR 0 7
37556: PUSH
37557: DOUBLE
37558: LD_INT 1
37560: DEC
37561: ST_TO_ADDR
37562: LD_INT 3
37564: PUSH
37565: FOR_TO
37566: IFFALSE 37619
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37568: LD_ADDR_VAR 0 5
37572: PUSH
37573: LD_VAR 0 5
37577: PPUSH
37578: LD_VAR 0 7
37582: PPUSH
37583: LD_VAR 0 5
37587: PUSH
37588: LD_VAR 0 7
37592: ARRAY
37593: PUSH
37594: LD_VAR 0 9
37598: PUSH
37599: LD_VAR 0 7
37603: ARRAY
37604: PUSH
37605: LD_VAR 0 10
37609: MUL
37610: PLUS
37611: PPUSH
37612: CALL_OW 1
37616: ST_TO_ADDR
37617: GO 37565
37619: POP
37620: POP
// end ;
37621: GO 36100
37623: POP
37624: POP
// result := Replace ( result , 4 , tmp ) ;
37625: LD_ADDR_VAR 0 5
37629: PUSH
37630: LD_VAR 0 5
37634: PPUSH
37635: LD_INT 4
37637: PPUSH
37638: LD_VAR 0 8
37642: PPUSH
37643: CALL_OW 1
37647: ST_TO_ADDR
// end ;
37648: LD_VAR 0 5
37652: RET
// export function DangerAtRange ( unit , range ) ; begin
37653: LD_INT 0
37655: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37656: LD_ADDR_VAR 0 3
37660: PUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 255
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 250
37680: PPUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: CALL_OW 251
37690: PPUSH
37691: LD_VAR 0 2
37695: PPUSH
37696: CALL 35952 0 4
37700: ST_TO_ADDR
// end ;
37701: LD_VAR 0 3
37705: RET
// export function DangerInArea ( side , area ) ; begin
37706: LD_INT 0
37708: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_VAR 0 2
37718: PPUSH
37719: LD_INT 81
37721: PUSH
37722: LD_VAR 0 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PPUSH
37731: CALL_OW 70
37735: ST_TO_ADDR
// end ;
37736: LD_VAR 0 3
37740: RET
// export function IsExtension ( b ) ; begin
37741: LD_INT 0
37743: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37744: LD_ADDR_VAR 0 2
37748: PUSH
37749: LD_VAR 0 1
37753: PUSH
37754: LD_INT 23
37756: PUSH
37757: LD_INT 20
37759: PUSH
37760: LD_INT 22
37762: PUSH
37763: LD_INT 17
37765: PUSH
37766: LD_INT 24
37768: PUSH
37769: LD_INT 21
37771: PUSH
37772: LD_INT 19
37774: PUSH
37775: LD_INT 16
37777: PUSH
37778: LD_INT 25
37780: PUSH
37781: LD_INT 18
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: IN
37796: ST_TO_ADDR
// end ;
37797: LD_VAR 0 2
37801: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37802: LD_INT 0
37804: PPUSH
37805: PPUSH
37806: PPUSH
// result := [ ] ;
37807: LD_ADDR_VAR 0 4
37811: PUSH
37812: EMPTY
37813: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37814: LD_ADDR_VAR 0 5
37818: PUSH
37819: LD_VAR 0 2
37823: PPUSH
37824: LD_INT 21
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PPUSH
37834: CALL_OW 70
37838: ST_TO_ADDR
// if not tmp then
37839: LD_VAR 0 5
37843: NOT
37844: IFFALSE 37848
// exit ;
37846: GO 37912
// if checkLink then
37848: LD_VAR 0 3
37852: IFFALSE 37902
// begin for i in tmp do
37854: LD_ADDR_VAR 0 6
37858: PUSH
37859: LD_VAR 0 5
37863: PUSH
37864: FOR_IN
37865: IFFALSE 37900
// if GetBase ( i ) <> base then
37867: LD_VAR 0 6
37871: PPUSH
37872: CALL_OW 274
37876: PUSH
37877: LD_VAR 0 1
37881: NONEQUAL
37882: IFFALSE 37898
// ComLinkToBase ( base , i ) ;
37884: LD_VAR 0 1
37888: PPUSH
37889: LD_VAR 0 6
37893: PPUSH
37894: CALL_OW 169
37898: GO 37864
37900: POP
37901: POP
// end ; result := tmp ;
37902: LD_ADDR_VAR 0 4
37906: PUSH
37907: LD_VAR 0 5
37911: ST_TO_ADDR
// end ;
37912: LD_VAR 0 4
37916: RET
// export function ComComplete ( units , b ) ; var i ; begin
37917: LD_INT 0
37919: PPUSH
37920: PPUSH
// if not units then
37921: LD_VAR 0 1
37925: NOT
37926: IFFALSE 37930
// exit ;
37928: GO 38020
// for i in units do
37930: LD_ADDR_VAR 0 4
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: FOR_IN
37941: IFFALSE 38018
// if BuildingStatus ( b ) = bs_build then
37943: LD_VAR 0 2
37947: PPUSH
37948: CALL_OW 461
37952: PUSH
37953: LD_INT 1
37955: EQUAL
37956: IFFALSE 38016
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37958: LD_VAR 0 4
37962: PPUSH
37963: LD_STRING h
37965: PUSH
37966: LD_VAR 0 2
37970: PPUSH
37971: CALL_OW 250
37975: PUSH
37976: LD_VAR 0 2
37980: PPUSH
37981: CALL_OW 251
37985: PUSH
37986: LD_VAR 0 2
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: PPUSH
38012: CALL_OW 446
38016: GO 37940
38018: POP
38019: POP
// end ;
38020: LD_VAR 0 3
38024: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38033: LD_VAR 0 1
38037: NOT
38038: PUSH
38039: LD_VAR 0 1
38043: PPUSH
38044: CALL_OW 263
38048: PUSH
38049: LD_INT 2
38051: NONEQUAL
38052: OR
38053: IFFALSE 38057
// exit ;
38055: GO 38373
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38057: LD_ADDR_VAR 0 6
38061: PUSH
38062: LD_INT 22
38064: PUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL_OW 255
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 30
38084: PUSH
38085: LD_INT 36
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 34
38094: PUSH
38095: LD_INT 31
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 69
38115: ST_TO_ADDR
// if not tmp then
38116: LD_VAR 0 6
38120: NOT
38121: IFFALSE 38125
// exit ;
38123: GO 38373
// result := [ ] ;
38125: LD_ADDR_VAR 0 2
38129: PUSH
38130: EMPTY
38131: ST_TO_ADDR
// for i in tmp do
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: LD_VAR 0 6
38141: PUSH
38142: FOR_IN
38143: IFFALSE 38214
// begin t := UnitsInside ( i ) ;
38145: LD_ADDR_VAR 0 4
38149: PUSH
38150: LD_VAR 0 3
38154: PPUSH
38155: CALL_OW 313
38159: ST_TO_ADDR
// if t then
38160: LD_VAR 0 4
38164: IFFALSE 38212
// for j in t do
38166: LD_ADDR_VAR 0 7
38170: PUSH
38171: LD_VAR 0 4
38175: PUSH
38176: FOR_IN
38177: IFFALSE 38210
// result := Replace ( result , result + 1 , j ) ;
38179: LD_ADDR_VAR 0 2
38183: PUSH
38184: LD_VAR 0 2
38188: PPUSH
38189: LD_VAR 0 2
38193: PUSH
38194: LD_INT 1
38196: PLUS
38197: PPUSH
38198: LD_VAR 0 7
38202: PPUSH
38203: CALL_OW 1
38207: ST_TO_ADDR
38208: GO 38176
38210: POP
38211: POP
// end ;
38212: GO 38142
38214: POP
38215: POP
// if not result then
38216: LD_VAR 0 2
38220: NOT
38221: IFFALSE 38225
// exit ;
38223: GO 38373
// mech := result [ 1 ] ;
38225: LD_ADDR_VAR 0 5
38229: PUSH
38230: LD_VAR 0 2
38234: PUSH
38235: LD_INT 1
38237: ARRAY
38238: ST_TO_ADDR
// if result > 1 then
38239: LD_VAR 0 2
38243: PUSH
38244: LD_INT 1
38246: GREATER
38247: IFFALSE 38359
// begin for i = 2 to result do
38249: LD_ADDR_VAR 0 3
38253: PUSH
38254: DOUBLE
38255: LD_INT 2
38257: DEC
38258: ST_TO_ADDR
38259: LD_VAR 0 2
38263: PUSH
38264: FOR_TO
38265: IFFALSE 38357
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38267: LD_ADDR_VAR 0 4
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_VAR 0 3
38281: ARRAY
38282: PPUSH
38283: LD_INT 3
38285: PPUSH
38286: CALL_OW 259
38290: PUSH
38291: LD_VAR 0 2
38295: PUSH
38296: LD_VAR 0 3
38300: ARRAY
38301: PPUSH
38302: CALL_OW 432
38306: MINUS
38307: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38308: LD_VAR 0 4
38312: PUSH
38313: LD_VAR 0 5
38317: PPUSH
38318: LD_INT 3
38320: PPUSH
38321: CALL_OW 259
38325: PUSH
38326: LD_VAR 0 5
38330: PPUSH
38331: CALL_OW 432
38335: MINUS
38336: GREATEREQUAL
38337: IFFALSE 38355
// mech := result [ i ] ;
38339: LD_ADDR_VAR 0 5
38343: PUSH
38344: LD_VAR 0 2
38348: PUSH
38349: LD_VAR 0 3
38353: ARRAY
38354: ST_TO_ADDR
// end ;
38355: GO 38264
38357: POP
38358: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38359: LD_VAR 0 1
38363: PPUSH
38364: LD_VAR 0 5
38368: PPUSH
38369: CALL_OW 135
// end ;
38373: LD_VAR 0 2
38377: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
// result := [ ] ;
38393: LD_ADDR_VAR 0 7
38397: PUSH
38398: EMPTY
38399: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38400: LD_VAR 0 1
38404: PPUSH
38405: CALL_OW 266
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: IN
38420: NOT
38421: IFFALSE 38425
// exit ;
38423: GO 40059
// if name then
38425: LD_VAR 0 3
38429: IFFALSE 38445
// SetBName ( base_dep , name ) ;
38431: LD_VAR 0 1
38435: PPUSH
38436: LD_VAR 0 3
38440: PPUSH
38441: CALL_OW 500
// base := GetBase ( base_dep ) ;
38445: LD_ADDR_VAR 0 15
38449: PUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 274
38459: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38460: LD_ADDR_VAR 0 16
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: CALL_OW 255
38474: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38475: LD_ADDR_VAR 0 17
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 248
38489: ST_TO_ADDR
// if sources then
38490: LD_VAR 0 5
38494: IFFALSE 38541
// for i = 1 to 3 do
38496: LD_ADDR_VAR 0 8
38500: PUSH
38501: DOUBLE
38502: LD_INT 1
38504: DEC
38505: ST_TO_ADDR
38506: LD_INT 3
38508: PUSH
38509: FOR_TO
38510: IFFALSE 38539
// AddResourceType ( base , i , sources [ i ] ) ;
38512: LD_VAR 0 15
38516: PPUSH
38517: LD_VAR 0 8
38521: PPUSH
38522: LD_VAR 0 5
38526: PUSH
38527: LD_VAR 0 8
38531: ARRAY
38532: PPUSH
38533: CALL_OW 276
38537: GO 38509
38539: POP
38540: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38541: LD_ADDR_VAR 0 18
38545: PUSH
38546: LD_VAR 0 15
38550: PPUSH
38551: LD_VAR 0 2
38555: PPUSH
38556: LD_INT 1
38558: PPUSH
38559: CALL 37802 0 3
38563: ST_TO_ADDR
// InitHc ;
38564: CALL_OW 19
// InitUc ;
38568: CALL_OW 18
// uc_side := side ;
38572: LD_ADDR_OWVAR 20
38576: PUSH
38577: LD_VAR 0 16
38581: ST_TO_ADDR
// uc_nation := nation ;
38582: LD_ADDR_OWVAR 21
38586: PUSH
38587: LD_VAR 0 17
38591: ST_TO_ADDR
// if buildings then
38592: LD_VAR 0 18
38596: IFFALSE 39918
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38598: LD_ADDR_VAR 0 19
38602: PUSH
38603: LD_VAR 0 18
38607: PPUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 29
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 30
38623: PUSH
38624: LD_INT 30
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 72
38640: ST_TO_ADDR
// if tmp then
38641: LD_VAR 0 19
38645: IFFALSE 38693
// for i in tmp do
38647: LD_ADDR_VAR 0 8
38651: PUSH
38652: LD_VAR 0 19
38656: PUSH
38657: FOR_IN
38658: IFFALSE 38691
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38660: LD_VAR 0 8
38664: PPUSH
38665: CALL_OW 250
38669: PPUSH
38670: LD_VAR 0 8
38674: PPUSH
38675: CALL_OW 251
38679: PPUSH
38680: LD_VAR 0 16
38684: PPUSH
38685: CALL_OW 441
38689: GO 38657
38691: POP
38692: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38693: LD_VAR 0 18
38697: PPUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 30
38703: PUSH
38704: LD_INT 32
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 30
38713: PUSH
38714: LD_INT 33
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: PPUSH
38726: CALL_OW 72
38730: IFFALSE 38818
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_VAR 0 18
38741: PPUSH
38742: LD_INT 2
38744: PUSH
38745: LD_INT 30
38747: PUSH
38748: LD_INT 32
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 30
38757: PUSH
38758: LD_INT 33
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: PPUSH
38770: CALL_OW 72
38774: PUSH
38775: FOR_IN
38776: IFFALSE 38816
// begin if not GetBWeapon ( i ) then
38778: LD_VAR 0 8
38782: PPUSH
38783: CALL_OW 269
38787: NOT
38788: IFFALSE 38814
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38790: LD_VAR 0 8
38794: PPUSH
38795: LD_VAR 0 8
38799: PPUSH
38800: LD_VAR 0 2
38804: PPUSH
38805: CALL 40064 0 2
38809: PPUSH
38810: CALL_OW 431
// end ;
38814: GO 38775
38816: POP
38817: POP
// end ; for i = 1 to personel do
38818: LD_ADDR_VAR 0 8
38822: PUSH
38823: DOUBLE
38824: LD_INT 1
38826: DEC
38827: ST_TO_ADDR
38828: LD_VAR 0 6
38832: PUSH
38833: FOR_TO
38834: IFFALSE 39898
// begin if i > 4 then
38836: LD_VAR 0 8
38840: PUSH
38841: LD_INT 4
38843: GREATER
38844: IFFALSE 38848
// break ;
38846: GO 39898
// case i of 1 :
38848: LD_VAR 0 8
38852: PUSH
38853: LD_INT 1
38855: DOUBLE
38856: EQUAL
38857: IFTRUE 38861
38859: GO 38941
38861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38862: LD_ADDR_VAR 0 12
38866: PUSH
38867: LD_VAR 0 18
38871: PPUSH
38872: LD_INT 22
38874: PUSH
38875: LD_VAR 0 16
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 58
38886: PUSH
38887: EMPTY
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 30
38895: PUSH
38896: LD_INT 32
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 30
38905: PUSH
38906: LD_INT 4
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 30
38915: PUSH
38916: LD_INT 5
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: PPUSH
38934: CALL_OW 72
38938: ST_TO_ADDR
38939: GO 39163
38941: LD_INT 2
38943: DOUBLE
38944: EQUAL
38945: IFTRUE 38949
38947: GO 39011
38949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38950: LD_ADDR_VAR 0 12
38954: PUSH
38955: LD_VAR 0 18
38959: PPUSH
38960: LD_INT 22
38962: PUSH
38963: LD_VAR 0 16
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 30
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PPUSH
39004: CALL_OW 72
39008: ST_TO_ADDR
39009: GO 39163
39011: LD_INT 3
39013: DOUBLE
39014: EQUAL
39015: IFTRUE 39019
39017: GO 39081
39019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39020: LD_ADDR_VAR 0 12
39024: PUSH
39025: LD_VAR 0 18
39029: PPUSH
39030: LD_INT 22
39032: PUSH
39033: LD_VAR 0 16
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 30
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 30
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PPUSH
39074: CALL_OW 72
39078: ST_TO_ADDR
39079: GO 39163
39081: LD_INT 4
39083: DOUBLE
39084: EQUAL
39085: IFTRUE 39089
39087: GO 39162
39089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39090: LD_ADDR_VAR 0 12
39094: PUSH
39095: LD_VAR 0 18
39099: PPUSH
39100: LD_INT 22
39102: PUSH
39103: LD_VAR 0 16
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: LD_INT 30
39117: PUSH
39118: LD_INT 6
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 30
39127: PUSH
39128: LD_INT 7
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 30
39137: PUSH
39138: LD_INT 8
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PPUSH
39155: CALL_OW 72
39159: ST_TO_ADDR
39160: GO 39163
39162: POP
// if i = 1 then
39163: LD_VAR 0 8
39167: PUSH
39168: LD_INT 1
39170: EQUAL
39171: IFFALSE 39282
// begin tmp := [ ] ;
39173: LD_ADDR_VAR 0 19
39177: PUSH
39178: EMPTY
39179: ST_TO_ADDR
// for j in f do
39180: LD_ADDR_VAR 0 9
39184: PUSH
39185: LD_VAR 0 12
39189: PUSH
39190: FOR_IN
39191: IFFALSE 39264
// if GetBType ( j ) = b_bunker then
39193: LD_VAR 0 9
39197: PPUSH
39198: CALL_OW 266
39202: PUSH
39203: LD_INT 32
39205: EQUAL
39206: IFFALSE 39233
// tmp := Insert ( tmp , 1 , j ) else
39208: LD_ADDR_VAR 0 19
39212: PUSH
39213: LD_VAR 0 19
39217: PPUSH
39218: LD_INT 1
39220: PPUSH
39221: LD_VAR 0 9
39225: PPUSH
39226: CALL_OW 2
39230: ST_TO_ADDR
39231: GO 39262
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39233: LD_ADDR_VAR 0 19
39237: PUSH
39238: LD_VAR 0 19
39242: PPUSH
39243: LD_VAR 0 19
39247: PUSH
39248: LD_INT 1
39250: PLUS
39251: PPUSH
39252: LD_VAR 0 9
39256: PPUSH
39257: CALL_OW 2
39261: ST_TO_ADDR
39262: GO 39190
39264: POP
39265: POP
// if tmp then
39266: LD_VAR 0 19
39270: IFFALSE 39282
// f := tmp ;
39272: LD_ADDR_VAR 0 12
39276: PUSH
39277: LD_VAR 0 19
39281: ST_TO_ADDR
// end ; x := personel [ i ] ;
39282: LD_ADDR_VAR 0 13
39286: PUSH
39287: LD_VAR 0 6
39291: PUSH
39292: LD_VAR 0 8
39296: ARRAY
39297: ST_TO_ADDR
// if x = - 1 then
39298: LD_VAR 0 13
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: EQUAL
39307: IFFALSE 39516
// begin for j in f do
39309: LD_ADDR_VAR 0 9
39313: PUSH
39314: LD_VAR 0 12
39318: PUSH
39319: FOR_IN
39320: IFFALSE 39512
// repeat InitHc ;
39322: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39326: LD_VAR 0 9
39330: PPUSH
39331: CALL_OW 266
39335: PUSH
39336: LD_INT 5
39338: EQUAL
39339: IFFALSE 39409
// begin if UnitsInside ( j ) < 3 then
39341: LD_VAR 0 9
39345: PPUSH
39346: CALL_OW 313
39350: PUSH
39351: LD_INT 3
39353: LESS
39354: IFFALSE 39390
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39356: LD_INT 0
39358: PPUSH
39359: LD_INT 5
39361: PUSH
39362: LD_INT 8
39364: PUSH
39365: LD_INT 9
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: PUSH
39373: LD_VAR 0 17
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 4
39383: PPUSH
39384: CALL_OW 380
39388: GO 39407
// PrepareHuman ( false , i , skill ) ;
39390: LD_INT 0
39392: PPUSH
39393: LD_VAR 0 8
39397: PPUSH
39398: LD_VAR 0 4
39402: PPUSH
39403: CALL_OW 380
// end else
39407: GO 39426
// PrepareHuman ( false , i , skill ) ;
39409: LD_INT 0
39411: PPUSH
39412: LD_VAR 0 8
39416: PPUSH
39417: LD_VAR 0 4
39421: PPUSH
39422: CALL_OW 380
// un := CreateHuman ;
39426: LD_ADDR_VAR 0 14
39430: PUSH
39431: CALL_OW 44
39435: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39436: LD_ADDR_VAR 0 7
39440: PUSH
39441: LD_VAR 0 7
39445: PPUSH
39446: LD_INT 1
39448: PPUSH
39449: LD_VAR 0 14
39453: PPUSH
39454: CALL_OW 2
39458: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39459: LD_VAR 0 14
39463: PPUSH
39464: LD_VAR 0 9
39468: PPUSH
39469: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39473: LD_VAR 0 9
39477: PPUSH
39478: CALL_OW 313
39482: PUSH
39483: LD_INT 6
39485: EQUAL
39486: PUSH
39487: LD_VAR 0 9
39491: PPUSH
39492: CALL_OW 266
39496: PUSH
39497: LD_INT 32
39499: PUSH
39500: LD_INT 31
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: IN
39507: OR
39508: IFFALSE 39322
39510: GO 39319
39512: POP
39513: POP
// end else
39514: GO 39896
// for j = 1 to x do
39516: LD_ADDR_VAR 0 9
39520: PUSH
39521: DOUBLE
39522: LD_INT 1
39524: DEC
39525: ST_TO_ADDR
39526: LD_VAR 0 13
39530: PUSH
39531: FOR_TO
39532: IFFALSE 39894
// begin InitHc ;
39534: CALL_OW 19
// if not f then
39538: LD_VAR 0 12
39542: NOT
39543: IFFALSE 39632
// begin PrepareHuman ( false , i , skill ) ;
39545: LD_INT 0
39547: PPUSH
39548: LD_VAR 0 8
39552: PPUSH
39553: LD_VAR 0 4
39557: PPUSH
39558: CALL_OW 380
// un := CreateHuman ;
39562: LD_ADDR_VAR 0 14
39566: PUSH
39567: CALL_OW 44
39571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39572: LD_ADDR_VAR 0 7
39576: PUSH
39577: LD_VAR 0 7
39581: PPUSH
39582: LD_INT 1
39584: PPUSH
39585: LD_VAR 0 14
39589: PPUSH
39590: CALL_OW 2
39594: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39595: LD_VAR 0 14
39599: PPUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 250
39609: PPUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 251
39619: PPUSH
39620: LD_INT 10
39622: PPUSH
39623: LD_INT 0
39625: PPUSH
39626: CALL_OW 50
// continue ;
39630: GO 39531
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39632: LD_VAR 0 12
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: PPUSH
39641: CALL_OW 313
39645: PUSH
39646: LD_VAR 0 12
39650: PUSH
39651: LD_INT 1
39653: ARRAY
39654: PPUSH
39655: CALL_OW 266
39659: PUSH
39660: LD_INT 32
39662: PUSH
39663: LD_INT 31
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: IN
39670: AND
39671: PUSH
39672: LD_VAR 0 12
39676: PUSH
39677: LD_INT 1
39679: ARRAY
39680: PPUSH
39681: CALL_OW 313
39685: PUSH
39686: LD_INT 6
39688: EQUAL
39689: OR
39690: IFFALSE 39710
// f := Delete ( f , 1 ) ;
39692: LD_ADDR_VAR 0 12
39696: PUSH
39697: LD_VAR 0 12
39701: PPUSH
39702: LD_INT 1
39704: PPUSH
39705: CALL_OW 3
39709: ST_TO_ADDR
// if not f then
39710: LD_VAR 0 12
39714: NOT
39715: IFFALSE 39733
// begin x := x + 2 ;
39717: LD_ADDR_VAR 0 13
39721: PUSH
39722: LD_VAR 0 13
39726: PUSH
39727: LD_INT 2
39729: PLUS
39730: ST_TO_ADDR
// continue ;
39731: GO 39531
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39733: LD_VAR 0 12
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: PPUSH
39742: CALL_OW 266
39746: PUSH
39747: LD_INT 5
39749: EQUAL
39750: IFFALSE 39824
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39752: LD_VAR 0 12
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PPUSH
39761: CALL_OW 313
39765: PUSH
39766: LD_INT 3
39768: LESS
39769: IFFALSE 39805
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39771: LD_INT 0
39773: PPUSH
39774: LD_INT 5
39776: PUSH
39777: LD_INT 8
39779: PUSH
39780: LD_INT 9
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: LIST
39787: PUSH
39788: LD_VAR 0 17
39792: ARRAY
39793: PPUSH
39794: LD_VAR 0 4
39798: PPUSH
39799: CALL_OW 380
39803: GO 39822
// PrepareHuman ( false , i , skill ) ;
39805: LD_INT 0
39807: PPUSH
39808: LD_VAR 0 8
39812: PPUSH
39813: LD_VAR 0 4
39817: PPUSH
39818: CALL_OW 380
// end else
39822: GO 39841
// PrepareHuman ( false , i , skill ) ;
39824: LD_INT 0
39826: PPUSH
39827: LD_VAR 0 8
39831: PPUSH
39832: LD_VAR 0 4
39836: PPUSH
39837: CALL_OW 380
// un := CreateHuman ;
39841: LD_ADDR_VAR 0 14
39845: PUSH
39846: CALL_OW 44
39850: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39851: LD_ADDR_VAR 0 7
39855: PUSH
39856: LD_VAR 0 7
39860: PPUSH
39861: LD_INT 1
39863: PPUSH
39864: LD_VAR 0 14
39868: PPUSH
39869: CALL_OW 2
39873: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39874: LD_VAR 0 14
39878: PPUSH
39879: LD_VAR 0 12
39883: PUSH
39884: LD_INT 1
39886: ARRAY
39887: PPUSH
39888: CALL_OW 52
// end ;
39892: GO 39531
39894: POP
39895: POP
// end ;
39896: GO 38833
39898: POP
39899: POP
// result := result ^ buildings ;
39900: LD_ADDR_VAR 0 7
39904: PUSH
39905: LD_VAR 0 7
39909: PUSH
39910: LD_VAR 0 18
39914: ADD
39915: ST_TO_ADDR
// end else
39916: GO 40059
// begin for i = 1 to personel do
39918: LD_ADDR_VAR 0 8
39922: PUSH
39923: DOUBLE
39924: LD_INT 1
39926: DEC
39927: ST_TO_ADDR
39928: LD_VAR 0 6
39932: PUSH
39933: FOR_TO
39934: IFFALSE 40057
// begin if i > 4 then
39936: LD_VAR 0 8
39940: PUSH
39941: LD_INT 4
39943: GREATER
39944: IFFALSE 39948
// break ;
39946: GO 40057
// x := personel [ i ] ;
39948: LD_ADDR_VAR 0 13
39952: PUSH
39953: LD_VAR 0 6
39957: PUSH
39958: LD_VAR 0 8
39962: ARRAY
39963: ST_TO_ADDR
// if x = - 1 then
39964: LD_VAR 0 13
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: EQUAL
39973: IFFALSE 39977
// continue ;
39975: GO 39933
// PrepareHuman ( false , i , skill ) ;
39977: LD_INT 0
39979: PPUSH
39980: LD_VAR 0 8
39984: PPUSH
39985: LD_VAR 0 4
39989: PPUSH
39990: CALL_OW 380
// un := CreateHuman ;
39994: LD_ADDR_VAR 0 14
39998: PUSH
39999: CALL_OW 44
40003: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40004: LD_VAR 0 14
40008: PPUSH
40009: LD_VAR 0 1
40013: PPUSH
40014: CALL_OW 250
40018: PPUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: CALL_OW 251
40028: PPUSH
40029: LD_INT 10
40031: PPUSH
40032: LD_INT 0
40034: PPUSH
40035: CALL_OW 50
// result := result ^ un ;
40039: LD_ADDR_VAR 0 7
40043: PUSH
40044: LD_VAR 0 7
40048: PUSH
40049: LD_VAR 0 14
40053: ADD
40054: ST_TO_ADDR
// end ;
40055: GO 39933
40057: POP
40058: POP
// end ; end ;
40059: LD_VAR 0 7
40063: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40064: LD_INT 0
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
// result := false ;
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 0
40089: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40090: LD_VAR 0 1
40094: NOT
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 266
40105: PUSH
40106: LD_INT 32
40108: PUSH
40109: LD_INT 33
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: IN
40116: NOT
40117: OR
40118: IFFALSE 40122
// exit ;
40120: GO 41231
// nat := GetNation ( tower ) ;
40122: LD_ADDR_VAR 0 12
40126: PUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 248
40136: ST_TO_ADDR
// side := GetSide ( tower ) ;
40137: LD_ADDR_VAR 0 16
40141: PUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 255
40151: ST_TO_ADDR
// x := GetX ( tower ) ;
40152: LD_ADDR_VAR 0 10
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 250
40166: ST_TO_ADDR
// y := GetY ( tower ) ;
40167: LD_ADDR_VAR 0 11
40171: PUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 251
40181: ST_TO_ADDR
// if not x or not y then
40182: LD_VAR 0 10
40186: NOT
40187: PUSH
40188: LD_VAR 0 11
40192: NOT
40193: OR
40194: IFFALSE 40198
// exit ;
40196: GO 41231
// weapon := 0 ;
40198: LD_ADDR_VAR 0 18
40202: PUSH
40203: LD_INT 0
40205: ST_TO_ADDR
// fac_list := [ ] ;
40206: LD_ADDR_VAR 0 17
40210: PUSH
40211: EMPTY
40212: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40213: LD_ADDR_VAR 0 6
40217: PUSH
40218: LD_VAR 0 1
40222: PPUSH
40223: CALL_OW 274
40227: PPUSH
40228: LD_VAR 0 2
40232: PPUSH
40233: LD_INT 0
40235: PPUSH
40236: CALL 37802 0 3
40240: PPUSH
40241: LD_INT 30
40243: PUSH
40244: LD_INT 3
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PPUSH
40251: CALL_OW 72
40255: ST_TO_ADDR
// if not factories then
40256: LD_VAR 0 6
40260: NOT
40261: IFFALSE 40265
// exit ;
40263: GO 41231
// for i in factories do
40265: LD_ADDR_VAR 0 8
40269: PUSH
40270: LD_VAR 0 6
40274: PUSH
40275: FOR_IN
40276: IFFALSE 40301
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40278: LD_ADDR_VAR 0 17
40282: PUSH
40283: LD_VAR 0 17
40287: PUSH
40288: LD_VAR 0 8
40292: PPUSH
40293: CALL_OW 478
40297: UNION
40298: ST_TO_ADDR
40299: GO 40275
40301: POP
40302: POP
// if not fac_list then
40303: LD_VAR 0 17
40307: NOT
40308: IFFALSE 40312
// exit ;
40310: GO 41231
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40312: LD_ADDR_VAR 0 5
40316: PUSH
40317: LD_INT 4
40319: PUSH
40320: LD_INT 5
40322: PUSH
40323: LD_INT 9
40325: PUSH
40326: LD_INT 10
40328: PUSH
40329: LD_INT 6
40331: PUSH
40332: LD_INT 7
40334: PUSH
40335: LD_INT 11
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 27
40349: PUSH
40350: LD_INT 28
40352: PUSH
40353: LD_INT 26
40355: PUSH
40356: LD_INT 30
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 43
40367: PUSH
40368: LD_INT 44
40370: PUSH
40371: LD_INT 46
40373: PUSH
40374: LD_INT 45
40376: PUSH
40377: LD_INT 47
40379: PUSH
40380: LD_INT 49
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: PUSH
40396: LD_VAR 0 12
40400: ARRAY
40401: ST_TO_ADDR
// list := list isect fac_list ;
40402: LD_ADDR_VAR 0 5
40406: PUSH
40407: LD_VAR 0 5
40411: PUSH
40412: LD_VAR 0 17
40416: ISECT
40417: ST_TO_ADDR
// if not list then
40418: LD_VAR 0 5
40422: NOT
40423: IFFALSE 40427
// exit ;
40425: GO 41231
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40427: LD_VAR 0 12
40431: PUSH
40432: LD_INT 3
40434: EQUAL
40435: PUSH
40436: LD_INT 49
40438: PUSH
40439: LD_VAR 0 5
40443: IN
40444: AND
40445: PUSH
40446: LD_INT 31
40448: PPUSH
40449: LD_VAR 0 16
40453: PPUSH
40454: CALL_OW 321
40458: PUSH
40459: LD_INT 2
40461: EQUAL
40462: AND
40463: IFFALSE 40523
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40465: LD_INT 22
40467: PUSH
40468: LD_VAR 0 16
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 35
40479: PUSH
40480: LD_INT 49
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 91
40489: PUSH
40490: LD_VAR 0 1
40494: PUSH
40495: LD_INT 10
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PPUSH
40508: CALL_OW 69
40512: NOT
40513: IFFALSE 40523
// weapon := ru_time_lapser ;
40515: LD_ADDR_VAR 0 18
40519: PUSH
40520: LD_INT 49
40522: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40523: LD_VAR 0 12
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: IN
40538: PUSH
40539: LD_INT 11
40541: PUSH
40542: LD_VAR 0 5
40546: IN
40547: PUSH
40548: LD_INT 30
40550: PUSH
40551: LD_VAR 0 5
40555: IN
40556: OR
40557: AND
40558: PUSH
40559: LD_INT 6
40561: PPUSH
40562: LD_VAR 0 16
40566: PPUSH
40567: CALL_OW 321
40571: PUSH
40572: LD_INT 2
40574: EQUAL
40575: AND
40576: IFFALSE 40741
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40578: LD_INT 22
40580: PUSH
40581: LD_VAR 0 16
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 35
40595: PUSH
40596: LD_INT 11
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 35
40605: PUSH
40606: LD_INT 30
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 91
40620: PUSH
40621: LD_VAR 0 1
40625: PUSH
40626: LD_INT 18
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: PPUSH
40639: CALL_OW 69
40643: NOT
40644: PUSH
40645: LD_INT 22
40647: PUSH
40648: LD_VAR 0 16
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: LD_INT 32
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 30
40672: PUSH
40673: LD_INT 33
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 91
40687: PUSH
40688: LD_VAR 0 1
40692: PUSH
40693: LD_INT 12
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: PUSH
40706: EMPTY
40707: LIST
40708: PPUSH
40709: CALL_OW 69
40713: PUSH
40714: LD_INT 2
40716: GREATER
40717: AND
40718: IFFALSE 40741
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40720: LD_ADDR_VAR 0 18
40724: PUSH
40725: LD_INT 11
40727: PUSH
40728: LD_INT 30
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_VAR 0 12
40739: ARRAY
40740: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40741: LD_VAR 0 18
40745: NOT
40746: PUSH
40747: LD_INT 40
40749: PPUSH
40750: LD_VAR 0 16
40754: PPUSH
40755: CALL_OW 321
40759: PUSH
40760: LD_INT 2
40762: EQUAL
40763: AND
40764: PUSH
40765: LD_INT 7
40767: PUSH
40768: LD_VAR 0 5
40772: IN
40773: PUSH
40774: LD_INT 28
40776: PUSH
40777: LD_VAR 0 5
40781: IN
40782: OR
40783: PUSH
40784: LD_INT 45
40786: PUSH
40787: LD_VAR 0 5
40791: IN
40792: OR
40793: AND
40794: IFFALSE 41048
// begin hex := GetHexInfo ( x , y ) ;
40796: LD_ADDR_VAR 0 4
40800: PUSH
40801: LD_VAR 0 10
40805: PPUSH
40806: LD_VAR 0 11
40810: PPUSH
40811: CALL_OW 546
40815: ST_TO_ADDR
// if hex [ 1 ] then
40816: LD_VAR 0 4
40820: PUSH
40821: LD_INT 1
40823: ARRAY
40824: IFFALSE 40828
// exit ;
40826: GO 41231
// height := hex [ 2 ] ;
40828: LD_ADDR_VAR 0 15
40832: PUSH
40833: LD_VAR 0 4
40837: PUSH
40838: LD_INT 2
40840: ARRAY
40841: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40842: LD_ADDR_VAR 0 14
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 5
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
// for i in tmp do
40865: LD_ADDR_VAR 0 8
40869: PUSH
40870: LD_VAR 0 14
40874: PUSH
40875: FOR_IN
40876: IFFALSE 41046
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40878: LD_ADDR_VAR 0 9
40882: PUSH
40883: LD_VAR 0 10
40887: PPUSH
40888: LD_VAR 0 8
40892: PPUSH
40893: LD_INT 5
40895: PPUSH
40896: CALL_OW 272
40900: PUSH
40901: LD_VAR 0 11
40905: PPUSH
40906: LD_VAR 0 8
40910: PPUSH
40911: LD_INT 5
40913: PPUSH
40914: CALL_OW 273
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40923: LD_VAR 0 9
40927: PUSH
40928: LD_INT 1
40930: ARRAY
40931: PPUSH
40932: LD_VAR 0 9
40936: PUSH
40937: LD_INT 2
40939: ARRAY
40940: PPUSH
40941: CALL_OW 488
40945: IFFALSE 41044
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40947: LD_ADDR_VAR 0 4
40951: PUSH
40952: LD_VAR 0 9
40956: PUSH
40957: LD_INT 1
40959: ARRAY
40960: PPUSH
40961: LD_VAR 0 9
40965: PUSH
40966: LD_INT 2
40968: ARRAY
40969: PPUSH
40970: CALL_OW 546
40974: ST_TO_ADDR
// if hex [ 1 ] then
40975: LD_VAR 0 4
40979: PUSH
40980: LD_INT 1
40982: ARRAY
40983: IFFALSE 40987
// continue ;
40985: GO 40875
// h := hex [ 2 ] ;
40987: LD_ADDR_VAR 0 13
40991: PUSH
40992: LD_VAR 0 4
40996: PUSH
40997: LD_INT 2
40999: ARRAY
41000: ST_TO_ADDR
// if h + 7 < height then
41001: LD_VAR 0 13
41005: PUSH
41006: LD_INT 7
41008: PLUS
41009: PUSH
41010: LD_VAR 0 15
41014: LESS
41015: IFFALSE 41044
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41017: LD_ADDR_VAR 0 18
41021: PUSH
41022: LD_INT 7
41024: PUSH
41025: LD_INT 28
41027: PUSH
41028: LD_INT 45
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PUSH
41036: LD_VAR 0 12
41040: ARRAY
41041: ST_TO_ADDR
// break ;
41042: GO 41046
// end ; end ; end ;
41044: GO 40875
41046: POP
41047: POP
// end ; if not weapon then
41048: LD_VAR 0 18
41052: NOT
41053: IFFALSE 41113
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41055: LD_ADDR_VAR 0 5
41059: PUSH
41060: LD_VAR 0 5
41064: PUSH
41065: LD_INT 11
41067: PUSH
41068: LD_INT 30
41070: PUSH
41071: LD_INT 49
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: DIFF
41079: ST_TO_ADDR
// if not list then
41080: LD_VAR 0 5
41084: NOT
41085: IFFALSE 41089
// exit ;
41087: GO 41231
// weapon := list [ rand ( 1 , list ) ] ;
41089: LD_ADDR_VAR 0 18
41093: PUSH
41094: LD_VAR 0 5
41098: PUSH
41099: LD_INT 1
41101: PPUSH
41102: LD_VAR 0 5
41106: PPUSH
41107: CALL_OW 12
41111: ARRAY
41112: ST_TO_ADDR
// end ; if weapon then
41113: LD_VAR 0 18
41117: IFFALSE 41231
// begin tmp := CostOfWeapon ( weapon ) ;
41119: LD_ADDR_VAR 0 14
41123: PUSH
41124: LD_VAR 0 18
41128: PPUSH
41129: CALL_OW 451
41133: ST_TO_ADDR
// j := GetBase ( tower ) ;
41134: LD_ADDR_VAR 0 9
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 274
41148: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41149: LD_VAR 0 9
41153: PPUSH
41154: LD_INT 1
41156: PPUSH
41157: CALL_OW 275
41161: PUSH
41162: LD_VAR 0 14
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: GREATEREQUAL
41171: PUSH
41172: LD_VAR 0 9
41176: PPUSH
41177: LD_INT 2
41179: PPUSH
41180: CALL_OW 275
41184: PUSH
41185: LD_VAR 0 14
41189: PUSH
41190: LD_INT 2
41192: ARRAY
41193: GREATEREQUAL
41194: AND
41195: PUSH
41196: LD_VAR 0 9
41200: PPUSH
41201: LD_INT 3
41203: PPUSH
41204: CALL_OW 275
41208: PUSH
41209: LD_VAR 0 14
41213: PUSH
41214: LD_INT 3
41216: ARRAY
41217: GREATEREQUAL
41218: AND
41219: IFFALSE 41231
// result := weapon ;
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_VAR 0 18
41230: ST_TO_ADDR
// end ; end ;
41231: LD_VAR 0 3
41235: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41236: LD_INT 0
41238: PPUSH
41239: PPUSH
// result := true ;
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_INT 1
41247: ST_TO_ADDR
// if array1 = array2 then
41248: LD_VAR 0 1
41252: PUSH
41253: LD_VAR 0 2
41257: EQUAL
41258: IFFALSE 41318
// begin for i = 1 to array1 do
41260: LD_ADDR_VAR 0 4
41264: PUSH
41265: DOUBLE
41266: LD_INT 1
41268: DEC
41269: ST_TO_ADDR
41270: LD_VAR 0 1
41274: PUSH
41275: FOR_TO
41276: IFFALSE 41314
// if array1 [ i ] <> array2 [ i ] then
41278: LD_VAR 0 1
41282: PUSH
41283: LD_VAR 0 4
41287: ARRAY
41288: PUSH
41289: LD_VAR 0 2
41293: PUSH
41294: LD_VAR 0 4
41298: ARRAY
41299: NONEQUAL
41300: IFFALSE 41312
// begin result := false ;
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_INT 0
41309: ST_TO_ADDR
// break ;
41310: GO 41314
// end ;
41312: GO 41275
41314: POP
41315: POP
// end else
41316: GO 41326
// result := false ;
41318: LD_ADDR_VAR 0 3
41322: PUSH
41323: LD_INT 0
41325: ST_TO_ADDR
// end ;
41326: LD_VAR 0 3
41330: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41331: LD_INT 0
41333: PPUSH
41334: PPUSH
// if not array1 or not array2 then
41335: LD_VAR 0 1
41339: NOT
41340: PUSH
41341: LD_VAR 0 2
41345: NOT
41346: OR
41347: IFFALSE 41351
// exit ;
41349: GO 41415
// result := true ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_INT 1
41358: ST_TO_ADDR
// for i = 1 to array1 do
41359: LD_ADDR_VAR 0 4
41363: PUSH
41364: DOUBLE
41365: LD_INT 1
41367: DEC
41368: ST_TO_ADDR
41369: LD_VAR 0 1
41373: PUSH
41374: FOR_TO
41375: IFFALSE 41413
// if array1 [ i ] <> array2 [ i ] then
41377: LD_VAR 0 1
41381: PUSH
41382: LD_VAR 0 4
41386: ARRAY
41387: PUSH
41388: LD_VAR 0 2
41392: PUSH
41393: LD_VAR 0 4
41397: ARRAY
41398: NONEQUAL
41399: IFFALSE 41411
// begin result := false ;
41401: LD_ADDR_VAR 0 3
41405: PUSH
41406: LD_INT 0
41408: ST_TO_ADDR
// break ;
41409: GO 41413
// end ;
41411: GO 41374
41413: POP
41414: POP
// end ;
41415: LD_VAR 0 3
41419: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41420: LD_INT 0
41422: PPUSH
41423: PPUSH
41424: PPUSH
// pom := GetBase ( fac ) ;
41425: LD_ADDR_VAR 0 5
41429: PUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 274
41439: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41440: LD_ADDR_VAR 0 4
41444: PUSH
41445: LD_VAR 0 2
41449: PUSH
41450: LD_INT 1
41452: ARRAY
41453: PPUSH
41454: LD_VAR 0 2
41458: PUSH
41459: LD_INT 2
41461: ARRAY
41462: PPUSH
41463: LD_VAR 0 2
41467: PUSH
41468: LD_INT 3
41470: ARRAY
41471: PPUSH
41472: LD_VAR 0 2
41476: PUSH
41477: LD_INT 4
41479: ARRAY
41480: PPUSH
41481: CALL_OW 449
41485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41486: LD_ADDR_VAR 0 3
41490: PUSH
41491: LD_VAR 0 5
41495: PPUSH
41496: LD_INT 1
41498: PPUSH
41499: CALL_OW 275
41503: PUSH
41504: LD_VAR 0 4
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: GREATEREQUAL
41513: PUSH
41514: LD_VAR 0 5
41518: PPUSH
41519: LD_INT 2
41521: PPUSH
41522: CALL_OW 275
41526: PUSH
41527: LD_VAR 0 4
41531: PUSH
41532: LD_INT 2
41534: ARRAY
41535: GREATEREQUAL
41536: AND
41537: PUSH
41538: LD_VAR 0 5
41542: PPUSH
41543: LD_INT 3
41545: PPUSH
41546: CALL_OW 275
41550: PUSH
41551: LD_VAR 0 4
41555: PUSH
41556: LD_INT 3
41558: ARRAY
41559: GREATEREQUAL
41560: AND
41561: ST_TO_ADDR
// end ;
41562: LD_VAR 0 3
41566: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41567: LD_INT 0
41569: PPUSH
41570: PPUSH
41571: PPUSH
41572: PPUSH
// pom := GetBase ( building ) ;
41573: LD_ADDR_VAR 0 3
41577: PUSH
41578: LD_VAR 0 1
41582: PPUSH
41583: CALL_OW 274
41587: ST_TO_ADDR
// if not pom then
41588: LD_VAR 0 3
41592: NOT
41593: IFFALSE 41597
// exit ;
41595: GO 41767
// btype := GetBType ( building ) ;
41597: LD_ADDR_VAR 0 5
41601: PUSH
41602: LD_VAR 0 1
41606: PPUSH
41607: CALL_OW 266
41611: ST_TO_ADDR
// if btype = b_armoury then
41612: LD_VAR 0 5
41616: PUSH
41617: LD_INT 4
41619: EQUAL
41620: IFFALSE 41630
// btype := b_barracks ;
41622: LD_ADDR_VAR 0 5
41626: PUSH
41627: LD_INT 5
41629: ST_TO_ADDR
// if btype = b_depot then
41630: LD_VAR 0 5
41634: PUSH
41635: LD_INT 0
41637: EQUAL
41638: IFFALSE 41648
// btype := b_warehouse ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_INT 1
41647: ST_TO_ADDR
// if btype = b_workshop then
41648: LD_VAR 0 5
41652: PUSH
41653: LD_INT 2
41655: EQUAL
41656: IFFALSE 41666
// btype := b_factory ;
41658: LD_ADDR_VAR 0 5
41662: PUSH
41663: LD_INT 3
41665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41666: LD_ADDR_VAR 0 4
41670: PUSH
41671: LD_VAR 0 5
41675: PPUSH
41676: LD_VAR 0 1
41680: PPUSH
41681: CALL_OW 248
41685: PPUSH
41686: CALL_OW 450
41690: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41691: LD_ADDR_VAR 0 2
41695: PUSH
41696: LD_VAR 0 3
41700: PPUSH
41701: LD_INT 1
41703: PPUSH
41704: CALL_OW 275
41708: PUSH
41709: LD_VAR 0 4
41713: PUSH
41714: LD_INT 1
41716: ARRAY
41717: GREATEREQUAL
41718: PUSH
41719: LD_VAR 0 3
41723: PPUSH
41724: LD_INT 2
41726: PPUSH
41727: CALL_OW 275
41731: PUSH
41732: LD_VAR 0 4
41736: PUSH
41737: LD_INT 2
41739: ARRAY
41740: GREATEREQUAL
41741: AND
41742: PUSH
41743: LD_VAR 0 3
41747: PPUSH
41748: LD_INT 3
41750: PPUSH
41751: CALL_OW 275
41755: PUSH
41756: LD_VAR 0 4
41760: PUSH
41761: LD_INT 3
41763: ARRAY
41764: GREATEREQUAL
41765: AND
41766: ST_TO_ADDR
// end ;
41767: LD_VAR 0 2
41771: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41772: LD_INT 0
41774: PPUSH
41775: PPUSH
41776: PPUSH
// pom := GetBase ( building ) ;
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: LD_VAR 0 1
41786: PPUSH
41787: CALL_OW 274
41791: ST_TO_ADDR
// if not pom then
41792: LD_VAR 0 4
41796: NOT
41797: IFFALSE 41801
// exit ;
41799: GO 41902
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41801: LD_ADDR_VAR 0 5
41805: PUSH
41806: LD_VAR 0 2
41810: PPUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 248
41820: PPUSH
41821: CALL_OW 450
41825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_VAR 0 4
41835: PPUSH
41836: LD_INT 1
41838: PPUSH
41839: CALL_OW 275
41843: PUSH
41844: LD_VAR 0 5
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: GREATEREQUAL
41853: PUSH
41854: LD_VAR 0 4
41858: PPUSH
41859: LD_INT 2
41861: PPUSH
41862: CALL_OW 275
41866: PUSH
41867: LD_VAR 0 5
41871: PUSH
41872: LD_INT 2
41874: ARRAY
41875: GREATEREQUAL
41876: AND
41877: PUSH
41878: LD_VAR 0 4
41882: PPUSH
41883: LD_INT 3
41885: PPUSH
41886: CALL_OW 275
41890: PUSH
41891: LD_VAR 0 5
41895: PUSH
41896: LD_INT 3
41898: ARRAY
41899: GREATEREQUAL
41900: AND
41901: ST_TO_ADDR
// end ;
41902: LD_VAR 0 3
41906: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41907: LD_INT 0
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
// result := false ;
41920: LD_ADDR_VAR 0 8
41924: PUSH
41925: LD_INT 0
41927: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41928: LD_VAR 0 5
41932: NOT
41933: PUSH
41934: LD_VAR 0 1
41938: NOT
41939: OR
41940: PUSH
41941: LD_VAR 0 2
41945: NOT
41946: OR
41947: PUSH
41948: LD_VAR 0 3
41952: NOT
41953: OR
41954: IFFALSE 41958
// exit ;
41956: GO 42772
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41958: LD_ADDR_VAR 0 14
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: LD_VAR 0 2
41972: PPUSH
41973: LD_VAR 0 3
41977: PPUSH
41978: LD_VAR 0 4
41982: PPUSH
41983: LD_VAR 0 5
41987: PUSH
41988: LD_INT 1
41990: ARRAY
41991: PPUSH
41992: CALL_OW 248
41996: PPUSH
41997: LD_INT 0
41999: PPUSH
42000: CALL 44005 0 6
42004: ST_TO_ADDR
// if not hexes then
42005: LD_VAR 0 14
42009: NOT
42010: IFFALSE 42014
// exit ;
42012: GO 42772
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42014: LD_ADDR_VAR 0 17
42018: PUSH
42019: LD_VAR 0 5
42023: PPUSH
42024: LD_INT 22
42026: PUSH
42027: LD_VAR 0 13
42031: PPUSH
42032: CALL_OW 255
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 30
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 30
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PPUSH
42073: CALL_OW 72
42077: ST_TO_ADDR
// for i = 1 to hexes do
42078: LD_ADDR_VAR 0 9
42082: PUSH
42083: DOUBLE
42084: LD_INT 1
42086: DEC
42087: ST_TO_ADDR
42088: LD_VAR 0 14
42092: PUSH
42093: FOR_TO
42094: IFFALSE 42770
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42096: LD_ADDR_VAR 0 13
42100: PUSH
42101: LD_VAR 0 14
42105: PUSH
42106: LD_VAR 0 9
42110: ARRAY
42111: PUSH
42112: LD_INT 1
42114: ARRAY
42115: PPUSH
42116: LD_VAR 0 14
42120: PUSH
42121: LD_VAR 0 9
42125: ARRAY
42126: PUSH
42127: LD_INT 2
42129: ARRAY
42130: PPUSH
42131: CALL_OW 428
42135: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42136: LD_VAR 0 14
42140: PUSH
42141: LD_VAR 0 9
42145: ARRAY
42146: PUSH
42147: LD_INT 1
42149: ARRAY
42150: PPUSH
42151: LD_VAR 0 14
42155: PUSH
42156: LD_VAR 0 9
42160: ARRAY
42161: PUSH
42162: LD_INT 2
42164: ARRAY
42165: PPUSH
42166: CALL_OW 351
42170: PUSH
42171: LD_VAR 0 14
42175: PUSH
42176: LD_VAR 0 9
42180: ARRAY
42181: PUSH
42182: LD_INT 1
42184: ARRAY
42185: PPUSH
42186: LD_VAR 0 14
42190: PUSH
42191: LD_VAR 0 9
42195: ARRAY
42196: PUSH
42197: LD_INT 2
42199: ARRAY
42200: PPUSH
42201: CALL_OW 488
42205: NOT
42206: OR
42207: PUSH
42208: LD_VAR 0 13
42212: PPUSH
42213: CALL_OW 247
42217: PUSH
42218: LD_INT 3
42220: EQUAL
42221: OR
42222: IFFALSE 42228
// exit ;
42224: POP
42225: POP
42226: GO 42772
// if not tmp then
42228: LD_VAR 0 13
42232: NOT
42233: IFFALSE 42237
// continue ;
42235: GO 42093
// result := true ;
42237: LD_ADDR_VAR 0 8
42241: PUSH
42242: LD_INT 1
42244: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42245: LD_VAR 0 6
42249: PUSH
42250: LD_VAR 0 13
42254: PPUSH
42255: CALL_OW 247
42259: PUSH
42260: LD_INT 2
42262: EQUAL
42263: AND
42264: PUSH
42265: LD_VAR 0 13
42269: PPUSH
42270: CALL_OW 263
42274: PUSH
42275: LD_INT 1
42277: EQUAL
42278: AND
42279: IFFALSE 42443
// begin if IsDrivenBy ( tmp ) then
42281: LD_VAR 0 13
42285: PPUSH
42286: CALL_OW 311
42290: IFFALSE 42294
// continue ;
42292: GO 42093
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42294: LD_VAR 0 6
42298: PPUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 60
42304: PUSH
42305: EMPTY
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: LD_INT 55
42317: PUSH
42318: EMPTY
42319: LIST
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PPUSH
42329: CALL_OW 72
42333: IFFALSE 42441
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42335: LD_ADDR_VAR 0 18
42339: PUSH
42340: LD_VAR 0 6
42344: PPUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 60
42350: PUSH
42351: EMPTY
42352: LIST
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: LD_INT 55
42363: PUSH
42364: EMPTY
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PPUSH
42375: CALL_OW 72
42379: PUSH
42380: LD_INT 1
42382: ARRAY
42383: ST_TO_ADDR
// if IsInUnit ( driver ) then
42384: LD_VAR 0 18
42388: PPUSH
42389: CALL_OW 310
42393: IFFALSE 42404
// ComExit ( driver ) ;
42395: LD_VAR 0 18
42399: PPUSH
42400: CALL 67766 0 1
// AddComEnterUnit ( driver , tmp ) ;
42404: LD_VAR 0 18
42408: PPUSH
42409: LD_VAR 0 13
42413: PPUSH
42414: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42418: LD_VAR 0 18
42422: PPUSH
42423: LD_VAR 0 7
42427: PPUSH
42428: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42432: LD_VAR 0 18
42436: PPUSH
42437: CALL_OW 181
// end ; continue ;
42441: GO 42093
// end ; if not cleaners or not tmp in cleaners then
42443: LD_VAR 0 6
42447: NOT
42448: PUSH
42449: LD_VAR 0 13
42453: PUSH
42454: LD_VAR 0 6
42458: IN
42459: NOT
42460: OR
42461: IFFALSE 42768
// begin if dep then
42463: LD_VAR 0 17
42467: IFFALSE 42603
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42469: LD_ADDR_VAR 0 16
42473: PUSH
42474: LD_VAR 0 17
42478: PUSH
42479: LD_INT 1
42481: ARRAY
42482: PPUSH
42483: CALL_OW 250
42487: PPUSH
42488: LD_VAR 0 17
42492: PUSH
42493: LD_INT 1
42495: ARRAY
42496: PPUSH
42497: CALL_OW 254
42501: PPUSH
42502: LD_INT 5
42504: PPUSH
42505: CALL_OW 272
42509: PUSH
42510: LD_VAR 0 17
42514: PUSH
42515: LD_INT 1
42517: ARRAY
42518: PPUSH
42519: CALL_OW 251
42523: PPUSH
42524: LD_VAR 0 17
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: PPUSH
42533: CALL_OW 254
42537: PPUSH
42538: LD_INT 5
42540: PPUSH
42541: CALL_OW 273
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42550: LD_VAR 0 16
42554: PUSH
42555: LD_INT 1
42557: ARRAY
42558: PPUSH
42559: LD_VAR 0 16
42563: PUSH
42564: LD_INT 2
42566: ARRAY
42567: PPUSH
42568: CALL_OW 488
42572: IFFALSE 42603
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42574: LD_VAR 0 13
42578: PPUSH
42579: LD_VAR 0 16
42583: PUSH
42584: LD_INT 1
42586: ARRAY
42587: PPUSH
42588: LD_VAR 0 16
42592: PUSH
42593: LD_INT 2
42595: ARRAY
42596: PPUSH
42597: CALL_OW 111
// continue ;
42601: GO 42093
// end ; end ; r := GetDir ( tmp ) ;
42603: LD_ADDR_VAR 0 15
42607: PUSH
42608: LD_VAR 0 13
42612: PPUSH
42613: CALL_OW 254
42617: ST_TO_ADDR
// if r = 5 then
42618: LD_VAR 0 15
42622: PUSH
42623: LD_INT 5
42625: EQUAL
42626: IFFALSE 42636
// r := 0 ;
42628: LD_ADDR_VAR 0 15
42632: PUSH
42633: LD_INT 0
42635: ST_TO_ADDR
// for j = r to 5 do
42636: LD_ADDR_VAR 0 10
42640: PUSH
42641: DOUBLE
42642: LD_VAR 0 15
42646: DEC
42647: ST_TO_ADDR
42648: LD_INT 5
42650: PUSH
42651: FOR_TO
42652: IFFALSE 42766
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42654: LD_ADDR_VAR 0 11
42658: PUSH
42659: LD_VAR 0 13
42663: PPUSH
42664: CALL_OW 250
42668: PPUSH
42669: LD_VAR 0 10
42673: PPUSH
42674: LD_INT 2
42676: PPUSH
42677: CALL_OW 272
42681: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42682: LD_ADDR_VAR 0 12
42686: PUSH
42687: LD_VAR 0 13
42691: PPUSH
42692: CALL_OW 251
42696: PPUSH
42697: LD_VAR 0 10
42701: PPUSH
42702: LD_INT 2
42704: PPUSH
42705: CALL_OW 273
42709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42710: LD_VAR 0 11
42714: PPUSH
42715: LD_VAR 0 12
42719: PPUSH
42720: CALL_OW 488
42724: PUSH
42725: LD_VAR 0 11
42729: PPUSH
42730: LD_VAR 0 12
42734: PPUSH
42735: CALL_OW 428
42739: NOT
42740: AND
42741: IFFALSE 42764
// begin ComMoveXY ( tmp , _x , _y ) ;
42743: LD_VAR 0 13
42747: PPUSH
42748: LD_VAR 0 11
42752: PPUSH
42753: LD_VAR 0 12
42757: PPUSH
42758: CALL_OW 111
// break ;
42762: GO 42766
// end ; end ;
42764: GO 42651
42766: POP
42767: POP
// end ; end ;
42768: GO 42093
42770: POP
42771: POP
// end ;
42772: LD_VAR 0 8
42776: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42777: LD_INT 0
42779: PPUSH
// result := true ;
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_INT 1
42787: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42788: LD_VAR 0 2
42792: PUSH
42793: LD_INT 24
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42807
42799: LD_INT 33
42801: DOUBLE
42802: EQUAL
42803: IFTRUE 42807
42805: GO 42832
42807: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42808: LD_ADDR_VAR 0 3
42812: PUSH
42813: LD_INT 32
42815: PPUSH
42816: LD_VAR 0 1
42820: PPUSH
42821: CALL_OW 321
42825: PUSH
42826: LD_INT 2
42828: EQUAL
42829: ST_TO_ADDR
42830: GO 43148
42832: LD_INT 20
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42865
42840: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 6
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 321
42858: PUSH
42859: LD_INT 2
42861: EQUAL
42862: ST_TO_ADDR
42863: GO 43148
42865: LD_INT 22
42867: DOUBLE
42868: EQUAL
42869: IFTRUE 42879
42871: LD_INT 36
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42879
42877: GO 42904
42879: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42880: LD_ADDR_VAR 0 3
42884: PUSH
42885: LD_INT 15
42887: PPUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 321
42897: PUSH
42898: LD_INT 2
42900: EQUAL
42901: ST_TO_ADDR
42902: GO 43148
42904: LD_INT 30
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42912
42910: GO 42937
42912: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: LD_INT 20
42920: PPUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 321
42930: PUSH
42931: LD_INT 2
42933: EQUAL
42934: ST_TO_ADDR
42935: GO 43148
42937: LD_INT 28
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42951
42943: LD_INT 21
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 42976
42951: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 21
42959: PPUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 321
42969: PUSH
42970: LD_INT 2
42972: EQUAL
42973: ST_TO_ADDR
42974: GO 43148
42976: LD_INT 16
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 43009
42984: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_INT 84
42992: PPUSH
42993: LD_VAR 0 1
42997: PPUSH
42998: CALL_OW 321
43002: PUSH
43003: LD_INT 2
43005: EQUAL
43006: ST_TO_ADDR
43007: GO 43148
43009: LD_INT 19
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43023
43015: LD_INT 23
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43048
43023: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_INT 83
43031: PPUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: CALL_OW 321
43041: PUSH
43042: LD_INT 2
43044: EQUAL
43045: ST_TO_ADDR
43046: GO 43148
43048: LD_INT 17
43050: DOUBLE
43051: EQUAL
43052: IFTRUE 43056
43054: GO 43081
43056: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_INT 39
43064: PPUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: CALL_OW 321
43074: PUSH
43075: LD_INT 2
43077: EQUAL
43078: ST_TO_ADDR
43079: GO 43148
43081: LD_INT 18
43083: DOUBLE
43084: EQUAL
43085: IFTRUE 43089
43087: GO 43114
43089: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43090: LD_ADDR_VAR 0 3
43094: PUSH
43095: LD_INT 40
43097: PPUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: CALL_OW 321
43107: PUSH
43108: LD_INT 2
43110: EQUAL
43111: ST_TO_ADDR
43112: GO 43148
43114: LD_INT 27
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43122
43120: GO 43147
43122: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_INT 35
43130: PPUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 321
43140: PUSH
43141: LD_INT 2
43143: EQUAL
43144: ST_TO_ADDR
43145: GO 43148
43147: POP
// end ;
43148: LD_VAR 0 3
43152: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43153: LD_INT 0
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
// result := false ;
43166: LD_ADDR_VAR 0 6
43170: PUSH
43171: LD_INT 0
43173: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43174: LD_VAR 0 1
43178: NOT
43179: PUSH
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 266
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: IN
43200: NOT
43201: OR
43202: PUSH
43203: LD_VAR 0 2
43207: NOT
43208: OR
43209: PUSH
43210: LD_VAR 0 5
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: LD_INT 3
43226: PUSH
43227: LD_INT 4
43229: PUSH
43230: LD_INT 5
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: IN
43241: NOT
43242: OR
43243: PUSH
43244: LD_VAR 0 3
43248: PPUSH
43249: LD_VAR 0 4
43253: PPUSH
43254: CALL_OW 488
43258: NOT
43259: OR
43260: IFFALSE 43264
// exit ;
43262: GO 44000
// side := GetSide ( depot ) ;
43264: LD_ADDR_VAR 0 9
43268: PUSH
43269: LD_VAR 0 1
43273: PPUSH
43274: CALL_OW 255
43278: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43279: LD_VAR 0 9
43283: PPUSH
43284: LD_VAR 0 2
43288: PPUSH
43289: CALL 42777 0 2
43293: NOT
43294: IFFALSE 43298
// exit ;
43296: GO 44000
// pom := GetBase ( depot ) ;
43298: LD_ADDR_VAR 0 10
43302: PUSH
43303: LD_VAR 0 1
43307: PPUSH
43308: CALL_OW 274
43312: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43313: LD_ADDR_VAR 0 11
43317: PUSH
43318: LD_VAR 0 2
43322: PPUSH
43323: LD_VAR 0 1
43327: PPUSH
43328: CALL_OW 248
43332: PPUSH
43333: CALL_OW 450
43337: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43338: LD_VAR 0 10
43342: PPUSH
43343: LD_INT 1
43345: PPUSH
43346: CALL_OW 275
43350: PUSH
43351: LD_VAR 0 11
43355: PUSH
43356: LD_INT 1
43358: ARRAY
43359: GREATEREQUAL
43360: PUSH
43361: LD_VAR 0 10
43365: PPUSH
43366: LD_INT 2
43368: PPUSH
43369: CALL_OW 275
43373: PUSH
43374: LD_VAR 0 11
43378: PUSH
43379: LD_INT 2
43381: ARRAY
43382: GREATEREQUAL
43383: AND
43384: PUSH
43385: LD_VAR 0 10
43389: PPUSH
43390: LD_INT 3
43392: PPUSH
43393: CALL_OW 275
43397: PUSH
43398: LD_VAR 0 11
43402: PUSH
43403: LD_INT 3
43405: ARRAY
43406: GREATEREQUAL
43407: AND
43408: NOT
43409: IFFALSE 43413
// exit ;
43411: GO 44000
// if GetBType ( depot ) = b_depot then
43413: LD_VAR 0 1
43417: PPUSH
43418: CALL_OW 266
43422: PUSH
43423: LD_INT 0
43425: EQUAL
43426: IFFALSE 43438
// dist := 28 else
43428: LD_ADDR_VAR 0 14
43432: PUSH
43433: LD_INT 28
43435: ST_TO_ADDR
43436: GO 43446
// dist := 36 ;
43438: LD_ADDR_VAR 0 14
43442: PUSH
43443: LD_INT 36
43445: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43446: LD_VAR 0 1
43450: PPUSH
43451: LD_VAR 0 3
43455: PPUSH
43456: LD_VAR 0 4
43460: PPUSH
43461: CALL_OW 297
43465: PUSH
43466: LD_VAR 0 14
43470: GREATER
43471: IFFALSE 43475
// exit ;
43473: GO 44000
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43475: LD_ADDR_VAR 0 12
43479: PUSH
43480: LD_VAR 0 2
43484: PPUSH
43485: LD_VAR 0 3
43489: PPUSH
43490: LD_VAR 0 4
43494: PPUSH
43495: LD_VAR 0 5
43499: PPUSH
43500: LD_VAR 0 1
43504: PPUSH
43505: CALL_OW 248
43509: PPUSH
43510: LD_INT 0
43512: PPUSH
43513: CALL 44005 0 6
43517: ST_TO_ADDR
// if not hexes then
43518: LD_VAR 0 12
43522: NOT
43523: IFFALSE 43527
// exit ;
43525: GO 44000
// hex := GetHexInfo ( x , y ) ;
43527: LD_ADDR_VAR 0 15
43531: PUSH
43532: LD_VAR 0 3
43536: PPUSH
43537: LD_VAR 0 4
43541: PPUSH
43542: CALL_OW 546
43546: ST_TO_ADDR
// if hex [ 1 ] then
43547: LD_VAR 0 15
43551: PUSH
43552: LD_INT 1
43554: ARRAY
43555: IFFALSE 43559
// exit ;
43557: GO 44000
// height := hex [ 2 ] ;
43559: LD_ADDR_VAR 0 13
43563: PUSH
43564: LD_VAR 0 15
43568: PUSH
43569: LD_INT 2
43571: ARRAY
43572: ST_TO_ADDR
// for i = 1 to hexes do
43573: LD_ADDR_VAR 0 7
43577: PUSH
43578: DOUBLE
43579: LD_INT 1
43581: DEC
43582: ST_TO_ADDR
43583: LD_VAR 0 12
43587: PUSH
43588: FOR_TO
43589: IFFALSE 43919
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43591: LD_VAR 0 12
43595: PUSH
43596: LD_VAR 0 7
43600: ARRAY
43601: PUSH
43602: LD_INT 1
43604: ARRAY
43605: PPUSH
43606: LD_VAR 0 12
43610: PUSH
43611: LD_VAR 0 7
43615: ARRAY
43616: PUSH
43617: LD_INT 2
43619: ARRAY
43620: PPUSH
43621: CALL_OW 488
43625: NOT
43626: PUSH
43627: LD_VAR 0 12
43631: PUSH
43632: LD_VAR 0 7
43636: ARRAY
43637: PUSH
43638: LD_INT 1
43640: ARRAY
43641: PPUSH
43642: LD_VAR 0 12
43646: PUSH
43647: LD_VAR 0 7
43651: ARRAY
43652: PUSH
43653: LD_INT 2
43655: ARRAY
43656: PPUSH
43657: CALL_OW 428
43661: PUSH
43662: LD_INT 0
43664: GREATER
43665: OR
43666: PUSH
43667: LD_VAR 0 12
43671: PUSH
43672: LD_VAR 0 7
43676: ARRAY
43677: PUSH
43678: LD_INT 1
43680: ARRAY
43681: PPUSH
43682: LD_VAR 0 12
43686: PUSH
43687: LD_VAR 0 7
43691: ARRAY
43692: PUSH
43693: LD_INT 2
43695: ARRAY
43696: PPUSH
43697: CALL_OW 351
43701: OR
43702: IFFALSE 43708
// exit ;
43704: POP
43705: POP
43706: GO 44000
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43708: LD_ADDR_VAR 0 8
43712: PUSH
43713: LD_VAR 0 12
43717: PUSH
43718: LD_VAR 0 7
43722: ARRAY
43723: PUSH
43724: LD_INT 1
43726: ARRAY
43727: PPUSH
43728: LD_VAR 0 12
43732: PUSH
43733: LD_VAR 0 7
43737: ARRAY
43738: PUSH
43739: LD_INT 2
43741: ARRAY
43742: PPUSH
43743: CALL_OW 546
43747: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43748: LD_VAR 0 8
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PUSH
43757: LD_VAR 0 8
43761: PUSH
43762: LD_INT 2
43764: ARRAY
43765: PUSH
43766: LD_VAR 0 13
43770: PUSH
43771: LD_INT 2
43773: PLUS
43774: GREATER
43775: OR
43776: PUSH
43777: LD_VAR 0 8
43781: PUSH
43782: LD_INT 2
43784: ARRAY
43785: PUSH
43786: LD_VAR 0 13
43790: PUSH
43791: LD_INT 2
43793: MINUS
43794: LESS
43795: OR
43796: PUSH
43797: LD_VAR 0 8
43801: PUSH
43802: LD_INT 3
43804: ARRAY
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 8
43811: PUSH
43812: LD_INT 9
43814: PUSH
43815: LD_INT 10
43817: PUSH
43818: LD_INT 11
43820: PUSH
43821: LD_INT 12
43823: PUSH
43824: LD_INT 13
43826: PUSH
43827: LD_INT 16
43829: PUSH
43830: LD_INT 17
43832: PUSH
43833: LD_INT 18
43835: PUSH
43836: LD_INT 19
43838: PUSH
43839: LD_INT 20
43841: PUSH
43842: LD_INT 21
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: IN
43860: NOT
43861: OR
43862: PUSH
43863: LD_VAR 0 8
43867: PUSH
43868: LD_INT 5
43870: ARRAY
43871: NOT
43872: OR
43873: PUSH
43874: LD_VAR 0 8
43878: PUSH
43879: LD_INT 6
43881: ARRAY
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 7
43891: PUSH
43892: LD_INT 9
43894: PUSH
43895: LD_INT 10
43897: PUSH
43898: LD_INT 11
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: IN
43909: NOT
43910: OR
43911: IFFALSE 43917
// exit ;
43913: POP
43914: POP
43915: GO 44000
// end ;
43917: GO 43588
43919: POP
43920: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43921: LD_VAR 0 9
43925: PPUSH
43926: LD_VAR 0 3
43930: PPUSH
43931: LD_VAR 0 4
43935: PPUSH
43936: LD_INT 20
43938: PPUSH
43939: CALL 35952 0 4
43943: PUSH
43944: LD_INT 4
43946: ARRAY
43947: IFFALSE 43951
// exit ;
43949: GO 44000
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43951: LD_VAR 0 2
43955: PUSH
43956: LD_INT 29
43958: PUSH
43959: LD_INT 30
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: IN
43966: PUSH
43967: LD_VAR 0 3
43971: PPUSH
43972: LD_VAR 0 4
43976: PPUSH
43977: LD_VAR 0 9
43981: PPUSH
43982: CALL_OW 440
43986: NOT
43987: AND
43988: IFFALSE 43992
// exit ;
43990: GO 44000
// result := true ;
43992: LD_ADDR_VAR 0 6
43996: PUSH
43997: LD_INT 1
43999: ST_TO_ADDR
// end ;
44000: LD_VAR 0 6
44004: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44005: LD_INT 0
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
// result = [ ] ;
44065: LD_ADDR_VAR 0 7
44069: PUSH
44070: EMPTY
44071: ST_TO_ADDR
// temp_list = [ ] ;
44072: LD_ADDR_VAR 0 9
44076: PUSH
44077: EMPTY
44078: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44079: LD_VAR 0 4
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 3
44095: PUSH
44096: LD_INT 4
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: IN
44110: NOT
44111: PUSH
44112: LD_VAR 0 1
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: IN
44127: PUSH
44128: LD_VAR 0 5
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: IN
44147: NOT
44148: AND
44149: OR
44150: IFFALSE 44154
// exit ;
44152: GO 62545
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44154: LD_VAR 0 1
44158: PUSH
44159: LD_INT 6
44161: PUSH
44162: LD_INT 7
44164: PUSH
44165: LD_INT 8
44167: PUSH
44168: LD_INT 13
44170: PUSH
44171: LD_INT 12
44173: PUSH
44174: LD_INT 15
44176: PUSH
44177: LD_INT 11
44179: PUSH
44180: LD_INT 14
44182: PUSH
44183: LD_INT 10
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: IN
44197: IFFALSE 44207
// btype = b_lab ;
44199: LD_ADDR_VAR 0 1
44203: PUSH
44204: LD_INT 6
44206: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44207: LD_VAR 0 6
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: IN
44226: NOT
44227: PUSH
44228: LD_VAR 0 1
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: LD_INT 6
44247: PUSH
44248: LD_INT 36
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: LD_INT 5
44256: PUSH
44257: LD_INT 31
44259: PUSH
44260: LD_INT 32
44262: PUSH
44263: LD_INT 33
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: IN
44279: NOT
44280: PUSH
44281: LD_VAR 0 6
44285: PUSH
44286: LD_INT 1
44288: EQUAL
44289: AND
44290: OR
44291: PUSH
44292: LD_VAR 0 1
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: IN
44307: NOT
44308: PUSH
44309: LD_VAR 0 6
44313: PUSH
44314: LD_INT 2
44316: EQUAL
44317: AND
44318: OR
44319: IFFALSE 44329
// mode = 0 ;
44321: LD_ADDR_VAR 0 6
44325: PUSH
44326: LD_INT 0
44328: ST_TO_ADDR
// case mode of 0 :
44329: LD_VAR 0 6
44333: PUSH
44334: LD_INT 0
44336: DOUBLE
44337: EQUAL
44338: IFTRUE 44342
44340: GO 55795
44342: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44343: LD_ADDR_VAR 0 11
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44536: LD_ADDR_VAR 0 12
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44732: LD_ADDR_VAR 0 13
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: LD_INT 3
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44931: LD_ADDR_VAR 0 14
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45127: LD_ADDR_VAR 0 15
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45320: LD_ADDR_VAR 0 16
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45513: LD_ADDR_VAR 0 17
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45743: LD_ADDR_VAR 0 18
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45973: LD_ADDR_VAR 0 19
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46203: LD_ADDR_VAR 0 20
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46433: LD_ADDR_VAR 0 21
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46663: LD_ADDR_VAR 0 22
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46893: LD_ADDR_VAR 0 23
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47173: LD_ADDR_VAR 0 24
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47449: LD_ADDR_VAR 0 25
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47723: LD_ADDR_VAR 0 26
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47999: LD_ADDR_VAR 0 27
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48279: LD_ADDR_VAR 0 28
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 3
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48561: LD_ADDR_VAR 0 29
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48840: LD_ADDR_VAR 0 30
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49118: LD_ADDR_VAR 0 31
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49396: LD_ADDR_VAR 0 32
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 3
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 3
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49674: LD_ADDR_VAR 0 33
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 3
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 3
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: NEG
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49953: LD_ADDR_VAR 0 34
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50233: LD_ADDR_VAR 0 35
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50345: LD_ADDR_VAR 0 36
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50457: LD_ADDR_VAR 0 37
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50569: LD_ADDR_VAR 0 38
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50681: LD_ADDR_VAR 0 39
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50793: LD_ADDR_VAR 0 40
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50905: LD_ADDR_VAR 0 41
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51255: LD_ADDR_VAR 0 42
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: LD_INT 3
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51605: LD_ADDR_VAR 0 43
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51953: LD_ADDR_VAR 0 44
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52303: LD_ADDR_VAR 0 45
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52653: LD_ADDR_VAR 0 46
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53001: LD_ADDR_VAR 0 47
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53152: LD_ADDR_VAR 0 48
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53299: LD_ADDR_VAR 0 49
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53443: LD_ADDR_VAR 0 50
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53587: LD_ADDR_VAR 0 51
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53734: LD_ADDR_VAR 0 52
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53885: LD_ADDR_VAR 0 53
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54115: LD_ADDR_VAR 0 54
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54345: LD_ADDR_VAR 0 55
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54575: LD_ADDR_VAR 0 56
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54805: LD_ADDR_VAR 0 57
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55035: LD_ADDR_VAR 0 58
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55265: LD_ADDR_VAR 0 59
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55353: LD_ADDR_VAR 0 60
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55441: LD_ADDR_VAR 0 61
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55529: LD_ADDR_VAR 0 62
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55617: LD_ADDR_VAR 0 63
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55705: LD_ADDR_VAR 0 64
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: ST_TO_ADDR
// end ; 1 :
55793: GO 61690
55795: LD_INT 1
55797: DOUBLE
55798: EQUAL
55799: IFTRUE 55803
55801: GO 58426
55803: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55804: LD_ADDR_VAR 0 11
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55848: LD_ADDR_VAR 0 12
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55889: LD_ADDR_VAR 0 13
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55929: LD_ADDR_VAR 0 14
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55970: LD_ADDR_VAR 0 15
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56014: LD_ADDR_VAR 0 16
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56060: LD_ADDR_VAR 0 17
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56104: LD_ADDR_VAR 0 18
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56145: LD_ADDR_VAR 0 19
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56185: LD_ADDR_VAR 0 20
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56226: LD_ADDR_VAR 0 21
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56270: LD_ADDR_VAR 0 22
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56316: LD_ADDR_VAR 0 23
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 4
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56360: LD_ADDR_VAR 0 24
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 4
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56401: LD_ADDR_VAR 0 25
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 4
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56441: LD_ADDR_VAR 0 26
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 4
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 3
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56482: LD_ADDR_VAR 0 27
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56526: LD_ADDR_VAR 0 28
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: LD_INT 4
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 4
56557: NEG
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56572: LD_ADDR_VAR 0 29
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 4
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 5
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 5
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 4
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: LD_INT 6
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 6
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 5
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56727: LD_ADDR_VAR 0 30
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 5
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 6
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 6
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56870: LD_ADDR_VAR 0 31
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 4
56917: PUSH
56918: LD_INT 4
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 5
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 5
56947: PUSH
56948: LD_INT 5
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: LD_INT 5
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 6
56967: PUSH
56968: LD_INT 5
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 6
56977: PUSH
56978: LD_INT 6
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 5
56987: PUSH
56988: LD_INT 6
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57009: LD_ADDR_VAR 0 32
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 4
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 5
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 5
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 6
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 6
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 5
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57152: LD_ADDR_VAR 0 33
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: NEG
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 5
57238: NEG
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 5
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 5
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 6
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 6
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57307: LD_ADDR_VAR 0 34
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 4
57362: NEG
57363: PUSH
57364: LD_INT 3
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: NEG
57375: PUSH
57376: LD_INT 4
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: LD_INT 5
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 5
57398: NEG
57399: PUSH
57400: LD_INT 4
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 5
57410: NEG
57411: PUSH
57412: LD_INT 5
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 5
57422: NEG
57423: PUSH
57424: LD_INT 6
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 6
57434: NEG
57435: PUSH
57436: LD_INT 5
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 6
57446: NEG
57447: PUSH
57448: LD_INT 6
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57470: LD_ADDR_VAR 0 41
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57514: LD_ADDR_VAR 0 42
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57555: LD_ADDR_VAR 0 43
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57595: LD_ADDR_VAR 0 44
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57636: LD_ADDR_VAR 0 45
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57680: LD_ADDR_VAR 0 46
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57726: LD_ADDR_VAR 0 47
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57759: LD_ADDR_VAR 0 48
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57790: LD_ADDR_VAR 0 49
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57819: LD_ADDR_VAR 0 50
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57848: LD_ADDR_VAR 0 51
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57879: LD_ADDR_VAR 0 52
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57912: LD_ADDR_VAR 0 53
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57956: LD_ADDR_VAR 0 54
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57997: LD_ADDR_VAR 0 55
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58037: LD_ADDR_VAR 0 56
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58078: LD_ADDR_VAR 0 57
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58122: LD_ADDR_VAR 0 58
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58168: LD_ADDR_VAR 0 59
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58212: LD_ADDR_VAR 0 60
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58253: LD_ADDR_VAR 0 61
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58293: LD_ADDR_VAR 0 62
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58334: LD_ADDR_VAR 0 63
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58378: LD_ADDR_VAR 0 64
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// end ; 2 :
58424: GO 61690
58426: LD_INT 2
58428: DOUBLE
58429: EQUAL
58430: IFTRUE 58434
58432: GO 61689
58434: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58435: LD_ADDR_VAR 0 29
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 5
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 5
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 4
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 5
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 4
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 4
58565: PUSH
58566: LD_INT 4
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 4
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 4
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 4
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 3
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 5
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 5
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 4
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 5
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 4
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 4
58832: NEG
58833: PUSH
58834: LD_INT 5
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 4
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 5
58880: NEG
58881: PUSH
58882: LD_INT 4
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 5
58892: NEG
58893: PUSH
58894: LD_INT 5
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 5
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 5
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58973: LD_ADDR_VAR 0 30
58977: PUSH
58978: LD_INT 4
58980: PUSH
58981: LD_INT 4
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 5
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 5
59010: PUSH
59011: LD_INT 5
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: LD_INT 5
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 3
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 5
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 4
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 4
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 4
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 5
59219: NEG
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 5
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: NEG
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: NEG
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: LD_INT 4
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: LD_INT 4
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 4
59361: NEG
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 4
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 5
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 3
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 4
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: LD_INT 5
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59520: LD_ADDR_VAR 0 31
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 4
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: LD_INT 4
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 5
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 5
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 4
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 4
59722: NEG
59723: PUSH
59724: LD_INT 4
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 4
59734: NEG
59735: PUSH
59736: LD_INT 5
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: LD_INT 4
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 4
59770: NEG
59771: PUSH
59772: LD_INT 3
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 5
59782: NEG
59783: PUSH
59784: LD_INT 4
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 5
59794: NEG
59795: PUSH
59796: LD_INT 5
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 5
59818: NEG
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 4
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: LD_INT 4
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 4
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 5
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 5
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 5
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60070: LD_ADDR_VAR 0 32
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 5
60156: NEG
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: LD_INT 4
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 3
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 4
60239: NEG
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 4
60251: NEG
60252: PUSH
60253: LD_INT 4
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 5
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 4
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 4
60492: PUSH
60493: LD_INT 3
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 5
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 5
60512: PUSH
60513: LD_INT 5
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: LD_INT 5
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 5
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: LD_INT 5
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60617: LD_ADDR_VAR 0 33
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: LD_INT 4
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 4
60636: NEG
60637: PUSH
60638: LD_INT 5
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: LD_INT 4
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: NEG
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 5
60684: NEG
60685: PUSH
60686: LD_INT 4
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 5
60696: NEG
60697: PUSH
60698: LD_INT 5
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: LD_INT 5
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 5
60720: NEG
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 3
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 4
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 4
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 4
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 5
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 4
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 5
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: LD_INT 4
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 4
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 4
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 5
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61155: LD_ADDR_VAR 0 34
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 4
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 5
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 4
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 5
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 5
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 4
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 5
61377: PUSH
61378: LD_INT 4
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: LD_INT 5
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 5
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 5
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 4
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 4
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 4
61540: NEG
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 4
61551: NEG
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 3
61563: NEG
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 5
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 5
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 5
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: ST_TO_ADDR
// end ; end ;
61687: GO 61690
61689: POP
// case btype of b_depot , b_warehouse :
61690: LD_VAR 0 1
61694: PUSH
61695: LD_INT 0
61697: DOUBLE
61698: EQUAL
61699: IFTRUE 61709
61701: LD_INT 1
61703: DOUBLE
61704: EQUAL
61705: IFTRUE 61709
61707: GO 61910
61709: POP
// case nation of nation_american :
61710: LD_VAR 0 5
61714: PUSH
61715: LD_INT 1
61717: DOUBLE
61718: EQUAL
61719: IFTRUE 61723
61721: GO 61779
61723: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61724: LD_ADDR_VAR 0 9
61728: PUSH
61729: LD_VAR 0 11
61733: PUSH
61734: LD_VAR 0 12
61738: PUSH
61739: LD_VAR 0 13
61743: PUSH
61744: LD_VAR 0 14
61748: PUSH
61749: LD_VAR 0 15
61753: PUSH
61754: LD_VAR 0 16
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: PUSH
61767: LD_VAR 0 4
61771: PUSH
61772: LD_INT 1
61774: PLUS
61775: ARRAY
61776: ST_TO_ADDR
61777: GO 61908
61779: LD_INT 2
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61787
61785: GO 61843
61787: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61788: LD_ADDR_VAR 0 9
61792: PUSH
61793: LD_VAR 0 17
61797: PUSH
61798: LD_VAR 0 18
61802: PUSH
61803: LD_VAR 0 19
61807: PUSH
61808: LD_VAR 0 20
61812: PUSH
61813: LD_VAR 0 21
61817: PUSH
61818: LD_VAR 0 22
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: PUSH
61831: LD_VAR 0 4
61835: PUSH
61836: LD_INT 1
61838: PLUS
61839: ARRAY
61840: ST_TO_ADDR
61841: GO 61908
61843: LD_INT 3
61845: DOUBLE
61846: EQUAL
61847: IFTRUE 61851
61849: GO 61907
61851: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61852: LD_ADDR_VAR 0 9
61856: PUSH
61857: LD_VAR 0 23
61861: PUSH
61862: LD_VAR 0 24
61866: PUSH
61867: LD_VAR 0 25
61871: PUSH
61872: LD_VAR 0 26
61876: PUSH
61877: LD_VAR 0 27
61881: PUSH
61882: LD_VAR 0 28
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: PUSH
61895: LD_VAR 0 4
61899: PUSH
61900: LD_INT 1
61902: PLUS
61903: ARRAY
61904: ST_TO_ADDR
61905: GO 61908
61907: POP
61908: GO 62463
61910: LD_INT 2
61912: DOUBLE
61913: EQUAL
61914: IFTRUE 61924
61916: LD_INT 3
61918: DOUBLE
61919: EQUAL
61920: IFTRUE 61924
61922: GO 61980
61924: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61925: LD_ADDR_VAR 0 9
61929: PUSH
61930: LD_VAR 0 29
61934: PUSH
61935: LD_VAR 0 30
61939: PUSH
61940: LD_VAR 0 31
61944: PUSH
61945: LD_VAR 0 32
61949: PUSH
61950: LD_VAR 0 33
61954: PUSH
61955: LD_VAR 0 34
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: PUSH
61968: LD_VAR 0 4
61972: PUSH
61973: LD_INT 1
61975: PLUS
61976: ARRAY
61977: ST_TO_ADDR
61978: GO 62463
61980: LD_INT 16
61982: DOUBLE
61983: EQUAL
61984: IFTRUE 62042
61986: LD_INT 17
61988: DOUBLE
61989: EQUAL
61990: IFTRUE 62042
61992: LD_INT 18
61994: DOUBLE
61995: EQUAL
61996: IFTRUE 62042
61998: LD_INT 19
62000: DOUBLE
62001: EQUAL
62002: IFTRUE 62042
62004: LD_INT 22
62006: DOUBLE
62007: EQUAL
62008: IFTRUE 62042
62010: LD_INT 20
62012: DOUBLE
62013: EQUAL
62014: IFTRUE 62042
62016: LD_INT 21
62018: DOUBLE
62019: EQUAL
62020: IFTRUE 62042
62022: LD_INT 23
62024: DOUBLE
62025: EQUAL
62026: IFTRUE 62042
62028: LD_INT 24
62030: DOUBLE
62031: EQUAL
62032: IFTRUE 62042
62034: LD_INT 25
62036: DOUBLE
62037: EQUAL
62038: IFTRUE 62042
62040: GO 62098
62042: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62043: LD_ADDR_VAR 0 9
62047: PUSH
62048: LD_VAR 0 35
62052: PUSH
62053: LD_VAR 0 36
62057: PUSH
62058: LD_VAR 0 37
62062: PUSH
62063: LD_VAR 0 38
62067: PUSH
62068: LD_VAR 0 39
62072: PUSH
62073: LD_VAR 0 40
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: PUSH
62086: LD_VAR 0 4
62090: PUSH
62091: LD_INT 1
62093: PLUS
62094: ARRAY
62095: ST_TO_ADDR
62096: GO 62463
62098: LD_INT 6
62100: DOUBLE
62101: EQUAL
62102: IFTRUE 62154
62104: LD_INT 7
62106: DOUBLE
62107: EQUAL
62108: IFTRUE 62154
62110: LD_INT 8
62112: DOUBLE
62113: EQUAL
62114: IFTRUE 62154
62116: LD_INT 13
62118: DOUBLE
62119: EQUAL
62120: IFTRUE 62154
62122: LD_INT 12
62124: DOUBLE
62125: EQUAL
62126: IFTRUE 62154
62128: LD_INT 15
62130: DOUBLE
62131: EQUAL
62132: IFTRUE 62154
62134: LD_INT 11
62136: DOUBLE
62137: EQUAL
62138: IFTRUE 62154
62140: LD_INT 14
62142: DOUBLE
62143: EQUAL
62144: IFTRUE 62154
62146: LD_INT 10
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62154
62152: GO 62210
62154: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62155: LD_ADDR_VAR 0 9
62159: PUSH
62160: LD_VAR 0 41
62164: PUSH
62165: LD_VAR 0 42
62169: PUSH
62170: LD_VAR 0 43
62174: PUSH
62175: LD_VAR 0 44
62179: PUSH
62180: LD_VAR 0 45
62184: PUSH
62185: LD_VAR 0 46
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 4
62202: PUSH
62203: LD_INT 1
62205: PLUS
62206: ARRAY
62207: ST_TO_ADDR
62208: GO 62463
62210: LD_INT 36
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62218
62216: GO 62274
62218: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62219: LD_ADDR_VAR 0 9
62223: PUSH
62224: LD_VAR 0 47
62228: PUSH
62229: LD_VAR 0 48
62233: PUSH
62234: LD_VAR 0 49
62238: PUSH
62239: LD_VAR 0 50
62243: PUSH
62244: LD_VAR 0 51
62248: PUSH
62249: LD_VAR 0 52
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: PUSH
62262: LD_VAR 0 4
62266: PUSH
62267: LD_INT 1
62269: PLUS
62270: ARRAY
62271: ST_TO_ADDR
62272: GO 62463
62274: LD_INT 4
62276: DOUBLE
62277: EQUAL
62278: IFTRUE 62300
62280: LD_INT 5
62282: DOUBLE
62283: EQUAL
62284: IFTRUE 62300
62286: LD_INT 34
62288: DOUBLE
62289: EQUAL
62290: IFTRUE 62300
62292: LD_INT 37
62294: DOUBLE
62295: EQUAL
62296: IFTRUE 62300
62298: GO 62356
62300: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62301: LD_ADDR_VAR 0 9
62305: PUSH
62306: LD_VAR 0 53
62310: PUSH
62311: LD_VAR 0 54
62315: PUSH
62316: LD_VAR 0 55
62320: PUSH
62321: LD_VAR 0 56
62325: PUSH
62326: LD_VAR 0 57
62330: PUSH
62331: LD_VAR 0 58
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: PUSH
62344: LD_VAR 0 4
62348: PUSH
62349: LD_INT 1
62351: PLUS
62352: ARRAY
62353: ST_TO_ADDR
62354: GO 62463
62356: LD_INT 31
62358: DOUBLE
62359: EQUAL
62360: IFTRUE 62406
62362: LD_INT 32
62364: DOUBLE
62365: EQUAL
62366: IFTRUE 62406
62368: LD_INT 33
62370: DOUBLE
62371: EQUAL
62372: IFTRUE 62406
62374: LD_INT 27
62376: DOUBLE
62377: EQUAL
62378: IFTRUE 62406
62380: LD_INT 26
62382: DOUBLE
62383: EQUAL
62384: IFTRUE 62406
62386: LD_INT 28
62388: DOUBLE
62389: EQUAL
62390: IFTRUE 62406
62392: LD_INT 29
62394: DOUBLE
62395: EQUAL
62396: IFTRUE 62406
62398: LD_INT 30
62400: DOUBLE
62401: EQUAL
62402: IFTRUE 62406
62404: GO 62462
62406: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62407: LD_ADDR_VAR 0 9
62411: PUSH
62412: LD_VAR 0 59
62416: PUSH
62417: LD_VAR 0 60
62421: PUSH
62422: LD_VAR 0 61
62426: PUSH
62427: LD_VAR 0 62
62431: PUSH
62432: LD_VAR 0 63
62436: PUSH
62437: LD_VAR 0 64
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: LD_VAR 0 4
62454: PUSH
62455: LD_INT 1
62457: PLUS
62458: ARRAY
62459: ST_TO_ADDR
62460: GO 62463
62462: POP
// temp_list2 = [ ] ;
62463: LD_ADDR_VAR 0 10
62467: PUSH
62468: EMPTY
62469: ST_TO_ADDR
// for i in temp_list do
62470: LD_ADDR_VAR 0 8
62474: PUSH
62475: LD_VAR 0 9
62479: PUSH
62480: FOR_IN
62481: IFFALSE 62533
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62483: LD_ADDR_VAR 0 10
62487: PUSH
62488: LD_VAR 0 10
62492: PUSH
62493: LD_VAR 0 8
62497: PUSH
62498: LD_INT 1
62500: ARRAY
62501: PUSH
62502: LD_VAR 0 2
62506: PLUS
62507: PUSH
62508: LD_VAR 0 8
62512: PUSH
62513: LD_INT 2
62515: ARRAY
62516: PUSH
62517: LD_VAR 0 3
62521: PLUS
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: ADD
62530: ST_TO_ADDR
62531: GO 62480
62533: POP
62534: POP
// result = temp_list2 ;
62535: LD_ADDR_VAR 0 7
62539: PUSH
62540: LD_VAR 0 10
62544: ST_TO_ADDR
// end ;
62545: LD_VAR 0 7
62549: RET
// export function EnemyInRange ( unit , dist ) ; begin
62550: LD_INT 0
62552: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62553: LD_ADDR_VAR 0 3
62557: PUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: CALL_OW 255
62567: PPUSH
62568: LD_VAR 0 1
62572: PPUSH
62573: CALL_OW 250
62577: PPUSH
62578: LD_VAR 0 1
62582: PPUSH
62583: CALL_OW 251
62587: PPUSH
62588: LD_VAR 0 2
62592: PPUSH
62593: CALL 35952 0 4
62597: PUSH
62598: LD_INT 4
62600: ARRAY
62601: ST_TO_ADDR
// end ;
62602: LD_VAR 0 3
62606: RET
// export function PlayerSeeMe ( unit ) ; begin
62607: LD_INT 0
62609: PPUSH
// result := See ( your_side , unit ) ;
62610: LD_ADDR_VAR 0 2
62614: PUSH
62615: LD_OWVAR 2
62619: PPUSH
62620: LD_VAR 0 1
62624: PPUSH
62625: CALL_OW 292
62629: ST_TO_ADDR
// end ;
62630: LD_VAR 0 2
62634: RET
// export function ReverseDir ( unit ) ; begin
62635: LD_INT 0
62637: PPUSH
// if not unit then
62638: LD_VAR 0 1
62642: NOT
62643: IFFALSE 62647
// exit ;
62645: GO 62670
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62647: LD_ADDR_VAR 0 2
62651: PUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: CALL_OW 254
62661: PUSH
62662: LD_INT 3
62664: PLUS
62665: PUSH
62666: LD_INT 6
62668: MOD
62669: ST_TO_ADDR
// end ;
62670: LD_VAR 0 2
62674: RET
// export function ReverseArray ( array ) ; var i ; begin
62675: LD_INT 0
62677: PPUSH
62678: PPUSH
// if not array then
62679: LD_VAR 0 1
62683: NOT
62684: IFFALSE 62688
// exit ;
62686: GO 62743
// result := [ ] ;
62688: LD_ADDR_VAR 0 2
62692: PUSH
62693: EMPTY
62694: ST_TO_ADDR
// for i := array downto 1 do
62695: LD_ADDR_VAR 0 3
62699: PUSH
62700: DOUBLE
62701: LD_VAR 0 1
62705: INC
62706: ST_TO_ADDR
62707: LD_INT 1
62709: PUSH
62710: FOR_DOWNTO
62711: IFFALSE 62741
// result := Join ( result , array [ i ] ) ;
62713: LD_ADDR_VAR 0 2
62717: PUSH
62718: LD_VAR 0 2
62722: PPUSH
62723: LD_VAR 0 1
62727: PUSH
62728: LD_VAR 0 3
62732: ARRAY
62733: PPUSH
62734: CALL 67368 0 2
62738: ST_TO_ADDR
62739: GO 62710
62741: POP
62742: POP
// end ;
62743: LD_VAR 0 2
62747: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
62755: PPUSH
// if not unit or not hexes then
62756: LD_VAR 0 1
62760: NOT
62761: PUSH
62762: LD_VAR 0 2
62766: NOT
62767: OR
62768: IFFALSE 62772
// exit ;
62770: GO 62895
// dist := 9999 ;
62772: LD_ADDR_VAR 0 5
62776: PUSH
62777: LD_INT 9999
62779: ST_TO_ADDR
// for i = 1 to hexes do
62780: LD_ADDR_VAR 0 4
62784: PUSH
62785: DOUBLE
62786: LD_INT 1
62788: DEC
62789: ST_TO_ADDR
62790: LD_VAR 0 2
62794: PUSH
62795: FOR_TO
62796: IFFALSE 62883
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62798: LD_ADDR_VAR 0 6
62802: PUSH
62803: LD_VAR 0 1
62807: PPUSH
62808: LD_VAR 0 2
62812: PUSH
62813: LD_VAR 0 4
62817: ARRAY
62818: PUSH
62819: LD_INT 1
62821: ARRAY
62822: PPUSH
62823: LD_VAR 0 2
62827: PUSH
62828: LD_VAR 0 4
62832: ARRAY
62833: PUSH
62834: LD_INT 2
62836: ARRAY
62837: PPUSH
62838: CALL_OW 297
62842: ST_TO_ADDR
// if tdist < dist then
62843: LD_VAR 0 6
62847: PUSH
62848: LD_VAR 0 5
62852: LESS
62853: IFFALSE 62881
// begin hex := hexes [ i ] ;
62855: LD_ADDR_VAR 0 8
62859: PUSH
62860: LD_VAR 0 2
62864: PUSH
62865: LD_VAR 0 4
62869: ARRAY
62870: ST_TO_ADDR
// dist := tdist ;
62871: LD_ADDR_VAR 0 5
62875: PUSH
62876: LD_VAR 0 6
62880: ST_TO_ADDR
// end ; end ;
62881: GO 62795
62883: POP
62884: POP
// result := hex ;
62885: LD_ADDR_VAR 0 3
62889: PUSH
62890: LD_VAR 0 8
62894: ST_TO_ADDR
// end ;
62895: LD_VAR 0 3
62899: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62900: LD_INT 0
62902: PPUSH
62903: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62904: LD_VAR 0 1
62908: NOT
62909: PUSH
62910: LD_VAR 0 1
62914: PUSH
62915: LD_INT 21
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 23
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PPUSH
62939: CALL_OW 69
62943: IN
62944: NOT
62945: OR
62946: IFFALSE 62950
// exit ;
62948: GO 62997
// for i = 1 to 3 do
62950: LD_ADDR_VAR 0 3
62954: PUSH
62955: DOUBLE
62956: LD_INT 1
62958: DEC
62959: ST_TO_ADDR
62960: LD_INT 3
62962: PUSH
62963: FOR_TO
62964: IFFALSE 62995
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62966: LD_VAR 0 1
62970: PPUSH
62971: CALL_OW 250
62975: PPUSH
62976: LD_VAR 0 1
62980: PPUSH
62981: CALL_OW 251
62985: PPUSH
62986: LD_INT 1
62988: PPUSH
62989: CALL_OW 453
62993: GO 62963
62995: POP
62996: POP
// end ;
62997: LD_VAR 0 2
63001: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63002: LD_INT 0
63004: PPUSH
63005: PPUSH
63006: PPUSH
63007: PPUSH
63008: PPUSH
63009: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63010: LD_VAR 0 1
63014: NOT
63015: PUSH
63016: LD_VAR 0 2
63020: NOT
63021: OR
63022: PUSH
63023: LD_VAR 0 1
63027: PPUSH
63028: CALL_OW 314
63032: OR
63033: IFFALSE 63037
// exit ;
63035: GO 63478
// x := GetX ( enemy_unit ) ;
63037: LD_ADDR_VAR 0 7
63041: PUSH
63042: LD_VAR 0 2
63046: PPUSH
63047: CALL_OW 250
63051: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63052: LD_ADDR_VAR 0 8
63056: PUSH
63057: LD_VAR 0 2
63061: PPUSH
63062: CALL_OW 251
63066: ST_TO_ADDR
// if not x or not y then
63067: LD_VAR 0 7
63071: NOT
63072: PUSH
63073: LD_VAR 0 8
63077: NOT
63078: OR
63079: IFFALSE 63083
// exit ;
63081: GO 63478
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63083: LD_ADDR_VAR 0 6
63087: PUSH
63088: LD_VAR 0 7
63092: PPUSH
63093: LD_INT 0
63095: PPUSH
63096: LD_INT 4
63098: PPUSH
63099: CALL_OW 272
63103: PUSH
63104: LD_VAR 0 8
63108: PPUSH
63109: LD_INT 0
63111: PPUSH
63112: LD_INT 4
63114: PPUSH
63115: CALL_OW 273
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_VAR 0 7
63128: PPUSH
63129: LD_INT 1
63131: PPUSH
63132: LD_INT 4
63134: PPUSH
63135: CALL_OW 272
63139: PUSH
63140: LD_VAR 0 8
63144: PPUSH
63145: LD_INT 1
63147: PPUSH
63148: LD_INT 4
63150: PPUSH
63151: CALL_OW 273
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_VAR 0 7
63164: PPUSH
63165: LD_INT 2
63167: PPUSH
63168: LD_INT 4
63170: PPUSH
63171: CALL_OW 272
63175: PUSH
63176: LD_VAR 0 8
63180: PPUSH
63181: LD_INT 2
63183: PPUSH
63184: LD_INT 4
63186: PPUSH
63187: CALL_OW 273
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_VAR 0 7
63200: PPUSH
63201: LD_INT 3
63203: PPUSH
63204: LD_INT 4
63206: PPUSH
63207: CALL_OW 272
63211: PUSH
63212: LD_VAR 0 8
63216: PPUSH
63217: LD_INT 3
63219: PPUSH
63220: LD_INT 4
63222: PPUSH
63223: CALL_OW 273
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_VAR 0 7
63236: PPUSH
63237: LD_INT 4
63239: PPUSH
63240: LD_INT 4
63242: PPUSH
63243: CALL_OW 272
63247: PUSH
63248: LD_VAR 0 8
63252: PPUSH
63253: LD_INT 4
63255: PPUSH
63256: LD_INT 4
63258: PPUSH
63259: CALL_OW 273
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_VAR 0 7
63272: PPUSH
63273: LD_INT 5
63275: PPUSH
63276: LD_INT 4
63278: PPUSH
63279: CALL_OW 272
63283: PUSH
63284: LD_VAR 0 8
63288: PPUSH
63289: LD_INT 5
63291: PPUSH
63292: LD_INT 4
63294: PPUSH
63295: CALL_OW 273
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: ST_TO_ADDR
// for i = tmp downto 1 do
63312: LD_ADDR_VAR 0 4
63316: PUSH
63317: DOUBLE
63318: LD_VAR 0 6
63322: INC
63323: ST_TO_ADDR
63324: LD_INT 1
63326: PUSH
63327: FOR_DOWNTO
63328: IFFALSE 63429
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63330: LD_VAR 0 6
63334: PUSH
63335: LD_VAR 0 4
63339: ARRAY
63340: PUSH
63341: LD_INT 1
63343: ARRAY
63344: PPUSH
63345: LD_VAR 0 6
63349: PUSH
63350: LD_VAR 0 4
63354: ARRAY
63355: PUSH
63356: LD_INT 2
63358: ARRAY
63359: PPUSH
63360: CALL_OW 488
63364: NOT
63365: PUSH
63366: LD_VAR 0 6
63370: PUSH
63371: LD_VAR 0 4
63375: ARRAY
63376: PUSH
63377: LD_INT 1
63379: ARRAY
63380: PPUSH
63381: LD_VAR 0 6
63385: PUSH
63386: LD_VAR 0 4
63390: ARRAY
63391: PUSH
63392: LD_INT 2
63394: ARRAY
63395: PPUSH
63396: CALL_OW 428
63400: PUSH
63401: LD_INT 0
63403: NONEQUAL
63404: OR
63405: IFFALSE 63427
// tmp := Delete ( tmp , i ) ;
63407: LD_ADDR_VAR 0 6
63411: PUSH
63412: LD_VAR 0 6
63416: PPUSH
63417: LD_VAR 0 4
63421: PPUSH
63422: CALL_OW 3
63426: ST_TO_ADDR
63427: GO 63327
63429: POP
63430: POP
// j := GetClosestHex ( unit , tmp ) ;
63431: LD_ADDR_VAR 0 5
63435: PUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: LD_VAR 0 6
63445: PPUSH
63446: CALL 62748 0 2
63450: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63451: LD_VAR 0 1
63455: PPUSH
63456: LD_VAR 0 5
63460: PUSH
63461: LD_INT 1
63463: ARRAY
63464: PPUSH
63465: LD_VAR 0 5
63469: PUSH
63470: LD_INT 2
63472: ARRAY
63473: PPUSH
63474: CALL_OW 111
// end ;
63478: LD_VAR 0 3
63482: RET
// export function PrepareApemanSoldier ( ) ; begin
63483: LD_INT 0
63485: PPUSH
// uc_nation := 0 ;
63486: LD_ADDR_OWVAR 21
63490: PUSH
63491: LD_INT 0
63493: ST_TO_ADDR
// hc_sex := sex_male ;
63494: LD_ADDR_OWVAR 27
63498: PUSH
63499: LD_INT 1
63501: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63502: LD_ADDR_OWVAR 28
63506: PUSH
63507: LD_INT 15
63509: ST_TO_ADDR
// hc_gallery :=  ;
63510: LD_ADDR_OWVAR 33
63514: PUSH
63515: LD_STRING 
63517: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63518: LD_ADDR_OWVAR 31
63522: PUSH
63523: LD_INT 0
63525: PPUSH
63526: LD_INT 3
63528: PPUSH
63529: CALL_OW 12
63533: PUSH
63534: LD_INT 0
63536: PPUSH
63537: LD_INT 3
63539: PPUSH
63540: CALL_OW 12
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// end ;
63557: LD_VAR 0 1
63561: RET
// export function PrepareApemanEngineer ( ) ; begin
63562: LD_INT 0
63564: PPUSH
// uc_nation := 0 ;
63565: LD_ADDR_OWVAR 21
63569: PUSH
63570: LD_INT 0
63572: ST_TO_ADDR
// hc_sex := sex_male ;
63573: LD_ADDR_OWVAR 27
63577: PUSH
63578: LD_INT 1
63580: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63581: LD_ADDR_OWVAR 28
63585: PUSH
63586: LD_INT 16
63588: ST_TO_ADDR
// hc_gallery :=  ;
63589: LD_ADDR_OWVAR 33
63593: PUSH
63594: LD_STRING 
63596: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63597: LD_ADDR_OWVAR 31
63601: PUSH
63602: LD_INT 0
63604: PPUSH
63605: LD_INT 3
63607: PPUSH
63608: CALL_OW 12
63612: PUSH
63613: LD_INT 0
63615: PPUSH
63616: LD_INT 3
63618: PPUSH
63619: CALL_OW 12
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// end ;
63636: LD_VAR 0 1
63640: RET
// export function PrepareApeman ( agressivity ) ; begin
63641: LD_INT 0
63643: PPUSH
// uc_side := 0 ;
63644: LD_ADDR_OWVAR 20
63648: PUSH
63649: LD_INT 0
63651: ST_TO_ADDR
// uc_nation := 0 ;
63652: LD_ADDR_OWVAR 21
63656: PUSH
63657: LD_INT 0
63659: ST_TO_ADDR
// hc_sex := sex_male ;
63660: LD_ADDR_OWVAR 27
63664: PUSH
63665: LD_INT 1
63667: ST_TO_ADDR
// hc_class := class_apeman ;
63668: LD_ADDR_OWVAR 28
63672: PUSH
63673: LD_INT 12
63675: ST_TO_ADDR
// hc_gallery :=  ;
63676: LD_ADDR_OWVAR 33
63680: PUSH
63681: LD_STRING 
63683: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63684: LD_ADDR_OWVAR 35
63688: PUSH
63689: LD_VAR 0 1
63693: NEG
63694: PPUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: CALL_OW 12
63704: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63705: LD_ADDR_OWVAR 31
63709: PUSH
63710: LD_INT 0
63712: PPUSH
63713: LD_INT 3
63715: PPUSH
63716: CALL_OW 12
63720: PUSH
63721: LD_INT 0
63723: PPUSH
63724: LD_INT 3
63726: PPUSH
63727: CALL_OW 12
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// end ;
63744: LD_VAR 0 2
63748: RET
// export function PrepareTiger ( agressivity ) ; begin
63749: LD_INT 0
63751: PPUSH
// uc_side := 0 ;
63752: LD_ADDR_OWVAR 20
63756: PUSH
63757: LD_INT 0
63759: ST_TO_ADDR
// uc_nation := 0 ;
63760: LD_ADDR_OWVAR 21
63764: PUSH
63765: LD_INT 0
63767: ST_TO_ADDR
// hc_class := class_tiger ;
63768: LD_ADDR_OWVAR 28
63772: PUSH
63773: LD_INT 14
63775: ST_TO_ADDR
// hc_gallery :=  ;
63776: LD_ADDR_OWVAR 33
63780: PUSH
63781: LD_STRING 
63783: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63784: LD_ADDR_OWVAR 35
63788: PUSH
63789: LD_VAR 0 1
63793: NEG
63794: PPUSH
63795: LD_VAR 0 1
63799: PPUSH
63800: CALL_OW 12
63804: ST_TO_ADDR
// end ;
63805: LD_VAR 0 2
63809: RET
// export function PrepareEnchidna ( ) ; begin
63810: LD_INT 0
63812: PPUSH
// uc_side := 0 ;
63813: LD_ADDR_OWVAR 20
63817: PUSH
63818: LD_INT 0
63820: ST_TO_ADDR
// uc_nation := 0 ;
63821: LD_ADDR_OWVAR 21
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// hc_class := class_baggie ;
63829: LD_ADDR_OWVAR 28
63833: PUSH
63834: LD_INT 13
63836: ST_TO_ADDR
// hc_gallery :=  ;
63837: LD_ADDR_OWVAR 33
63841: PUSH
63842: LD_STRING 
63844: ST_TO_ADDR
// end ;
63845: LD_VAR 0 1
63849: RET
// export function PrepareFrog ( ) ; begin
63850: LD_INT 0
63852: PPUSH
// uc_side := 0 ;
63853: LD_ADDR_OWVAR 20
63857: PUSH
63858: LD_INT 0
63860: ST_TO_ADDR
// uc_nation := 0 ;
63861: LD_ADDR_OWVAR 21
63865: PUSH
63866: LD_INT 0
63868: ST_TO_ADDR
// hc_class := class_frog ;
63869: LD_ADDR_OWVAR 28
63873: PUSH
63874: LD_INT 19
63876: ST_TO_ADDR
// hc_gallery :=  ;
63877: LD_ADDR_OWVAR 33
63881: PUSH
63882: LD_STRING 
63884: ST_TO_ADDR
// end ;
63885: LD_VAR 0 1
63889: RET
// export function PrepareFish ( ) ; begin
63890: LD_INT 0
63892: PPUSH
// uc_side := 0 ;
63893: LD_ADDR_OWVAR 20
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// uc_nation := 0 ;
63901: LD_ADDR_OWVAR 21
63905: PUSH
63906: LD_INT 0
63908: ST_TO_ADDR
// hc_class := class_fish ;
63909: LD_ADDR_OWVAR 28
63913: PUSH
63914: LD_INT 20
63916: ST_TO_ADDR
// hc_gallery :=  ;
63917: LD_ADDR_OWVAR 33
63921: PUSH
63922: LD_STRING 
63924: ST_TO_ADDR
// end ;
63925: LD_VAR 0 1
63929: RET
// export function PrepareBird ( ) ; begin
63930: LD_INT 0
63932: PPUSH
// uc_side := 0 ;
63933: LD_ADDR_OWVAR 20
63937: PUSH
63938: LD_INT 0
63940: ST_TO_ADDR
// uc_nation := 0 ;
63941: LD_ADDR_OWVAR 21
63945: PUSH
63946: LD_INT 0
63948: ST_TO_ADDR
// hc_class := class_phororhacos ;
63949: LD_ADDR_OWVAR 28
63953: PUSH
63954: LD_INT 18
63956: ST_TO_ADDR
// hc_gallery :=  ;
63957: LD_ADDR_OWVAR 33
63961: PUSH
63962: LD_STRING 
63964: ST_TO_ADDR
// end ;
63965: LD_VAR 0 1
63969: RET
// export function PrepareHorse ( ) ; begin
63970: LD_INT 0
63972: PPUSH
// uc_side := 0 ;
63973: LD_ADDR_OWVAR 20
63977: PUSH
63978: LD_INT 0
63980: ST_TO_ADDR
// uc_nation := 0 ;
63981: LD_ADDR_OWVAR 21
63985: PUSH
63986: LD_INT 0
63988: ST_TO_ADDR
// hc_class := class_horse ;
63989: LD_ADDR_OWVAR 28
63993: PUSH
63994: LD_INT 21
63996: ST_TO_ADDR
// hc_gallery :=  ;
63997: LD_ADDR_OWVAR 33
64001: PUSH
64002: LD_STRING 
64004: ST_TO_ADDR
// end ;
64005: LD_VAR 0 1
64009: RET
// export function PrepareMastodont ( ) ; begin
64010: LD_INT 0
64012: PPUSH
// uc_side := 0 ;
64013: LD_ADDR_OWVAR 20
64017: PUSH
64018: LD_INT 0
64020: ST_TO_ADDR
// uc_nation := 0 ;
64021: LD_ADDR_OWVAR 21
64025: PUSH
64026: LD_INT 0
64028: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64029: LD_ADDR_OWVAR 37
64033: PUSH
64034: LD_INT 31
64036: ST_TO_ADDR
// vc_control := control_rider ;
64037: LD_ADDR_OWVAR 38
64041: PUSH
64042: LD_INT 4
64044: ST_TO_ADDR
// end ;
64045: LD_VAR 0 1
64049: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64050: LD_INT 0
64052: PPUSH
64053: PPUSH
64054: PPUSH
// uc_side = 0 ;
64055: LD_ADDR_OWVAR 20
64059: PUSH
64060: LD_INT 0
64062: ST_TO_ADDR
// uc_nation = 0 ;
64063: LD_ADDR_OWVAR 21
64067: PUSH
64068: LD_INT 0
64070: ST_TO_ADDR
// InitHc_All ( ) ;
64071: CALL_OW 584
// InitVc ;
64075: CALL_OW 20
// if mastodonts then
64079: LD_VAR 0 6
64083: IFFALSE 64150
// for i = 1 to mastodonts do
64085: LD_ADDR_VAR 0 11
64089: PUSH
64090: DOUBLE
64091: LD_INT 1
64093: DEC
64094: ST_TO_ADDR
64095: LD_VAR 0 6
64099: PUSH
64100: FOR_TO
64101: IFFALSE 64148
// begin vc_chassis := 31 ;
64103: LD_ADDR_OWVAR 37
64107: PUSH
64108: LD_INT 31
64110: ST_TO_ADDR
// vc_control := control_rider ;
64111: LD_ADDR_OWVAR 38
64115: PUSH
64116: LD_INT 4
64118: ST_TO_ADDR
// animal := CreateVehicle ;
64119: LD_ADDR_VAR 0 12
64123: PUSH
64124: CALL_OW 45
64128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64129: LD_VAR 0 12
64133: PPUSH
64134: LD_VAR 0 8
64138: PPUSH
64139: LD_INT 0
64141: PPUSH
64142: CALL 66285 0 3
// end ;
64146: GO 64100
64148: POP
64149: POP
// if horses then
64150: LD_VAR 0 5
64154: IFFALSE 64221
// for i = 1 to horses do
64156: LD_ADDR_VAR 0 11
64160: PUSH
64161: DOUBLE
64162: LD_INT 1
64164: DEC
64165: ST_TO_ADDR
64166: LD_VAR 0 5
64170: PUSH
64171: FOR_TO
64172: IFFALSE 64219
// begin hc_class := 21 ;
64174: LD_ADDR_OWVAR 28
64178: PUSH
64179: LD_INT 21
64181: ST_TO_ADDR
// hc_gallery :=  ;
64182: LD_ADDR_OWVAR 33
64186: PUSH
64187: LD_STRING 
64189: ST_TO_ADDR
// animal := CreateHuman ;
64190: LD_ADDR_VAR 0 12
64194: PUSH
64195: CALL_OW 44
64199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64200: LD_VAR 0 12
64204: PPUSH
64205: LD_VAR 0 8
64209: PPUSH
64210: LD_INT 0
64212: PPUSH
64213: CALL 66285 0 3
// end ;
64217: GO 64171
64219: POP
64220: POP
// if birds then
64221: LD_VAR 0 1
64225: IFFALSE 64292
// for i = 1 to birds do
64227: LD_ADDR_VAR 0 11
64231: PUSH
64232: DOUBLE
64233: LD_INT 1
64235: DEC
64236: ST_TO_ADDR
64237: LD_VAR 0 1
64241: PUSH
64242: FOR_TO
64243: IFFALSE 64290
// begin hc_class = 18 ;
64245: LD_ADDR_OWVAR 28
64249: PUSH
64250: LD_INT 18
64252: ST_TO_ADDR
// hc_gallery =  ;
64253: LD_ADDR_OWVAR 33
64257: PUSH
64258: LD_STRING 
64260: ST_TO_ADDR
// animal := CreateHuman ;
64261: LD_ADDR_VAR 0 12
64265: PUSH
64266: CALL_OW 44
64270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64271: LD_VAR 0 12
64275: PPUSH
64276: LD_VAR 0 8
64280: PPUSH
64281: LD_INT 0
64283: PPUSH
64284: CALL 66285 0 3
// end ;
64288: GO 64242
64290: POP
64291: POP
// if tigers then
64292: LD_VAR 0 2
64296: IFFALSE 64380
// for i = 1 to tigers do
64298: LD_ADDR_VAR 0 11
64302: PUSH
64303: DOUBLE
64304: LD_INT 1
64306: DEC
64307: ST_TO_ADDR
64308: LD_VAR 0 2
64312: PUSH
64313: FOR_TO
64314: IFFALSE 64378
// begin hc_class = class_tiger ;
64316: LD_ADDR_OWVAR 28
64320: PUSH
64321: LD_INT 14
64323: ST_TO_ADDR
// hc_gallery =  ;
64324: LD_ADDR_OWVAR 33
64328: PUSH
64329: LD_STRING 
64331: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64332: LD_ADDR_OWVAR 35
64336: PUSH
64337: LD_INT 7
64339: NEG
64340: PPUSH
64341: LD_INT 7
64343: PPUSH
64344: CALL_OW 12
64348: ST_TO_ADDR
// animal := CreateHuman ;
64349: LD_ADDR_VAR 0 12
64353: PUSH
64354: CALL_OW 44
64358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64359: LD_VAR 0 12
64363: PPUSH
64364: LD_VAR 0 8
64368: PPUSH
64369: LD_INT 0
64371: PPUSH
64372: CALL 66285 0 3
// end ;
64376: GO 64313
64378: POP
64379: POP
// if apemans then
64380: LD_VAR 0 3
64384: IFFALSE 64507
// for i = 1 to apemans do
64386: LD_ADDR_VAR 0 11
64390: PUSH
64391: DOUBLE
64392: LD_INT 1
64394: DEC
64395: ST_TO_ADDR
64396: LD_VAR 0 3
64400: PUSH
64401: FOR_TO
64402: IFFALSE 64505
// begin hc_class = class_apeman ;
64404: LD_ADDR_OWVAR 28
64408: PUSH
64409: LD_INT 12
64411: ST_TO_ADDR
// hc_gallery =  ;
64412: LD_ADDR_OWVAR 33
64416: PUSH
64417: LD_STRING 
64419: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64420: LD_ADDR_OWVAR 35
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PPUSH
64429: LD_INT 2
64431: PPUSH
64432: CALL_OW 12
64436: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64437: LD_ADDR_OWVAR 31
64441: PUSH
64442: LD_INT 1
64444: PPUSH
64445: LD_INT 3
64447: PPUSH
64448: CALL_OW 12
64452: PUSH
64453: LD_INT 1
64455: PPUSH
64456: LD_INT 3
64458: PPUSH
64459: CALL_OW 12
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: ST_TO_ADDR
// animal := CreateHuman ;
64476: LD_ADDR_VAR 0 12
64480: PUSH
64481: CALL_OW 44
64485: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64486: LD_VAR 0 12
64490: PPUSH
64491: LD_VAR 0 8
64495: PPUSH
64496: LD_INT 0
64498: PPUSH
64499: CALL 66285 0 3
// end ;
64503: GO 64401
64505: POP
64506: POP
// if enchidnas then
64507: LD_VAR 0 4
64511: IFFALSE 64578
// for i = 1 to enchidnas do
64513: LD_ADDR_VAR 0 11
64517: PUSH
64518: DOUBLE
64519: LD_INT 1
64521: DEC
64522: ST_TO_ADDR
64523: LD_VAR 0 4
64527: PUSH
64528: FOR_TO
64529: IFFALSE 64576
// begin hc_class = 13 ;
64531: LD_ADDR_OWVAR 28
64535: PUSH
64536: LD_INT 13
64538: ST_TO_ADDR
// hc_gallery =  ;
64539: LD_ADDR_OWVAR 33
64543: PUSH
64544: LD_STRING 
64546: ST_TO_ADDR
// animal := CreateHuman ;
64547: LD_ADDR_VAR 0 12
64551: PUSH
64552: CALL_OW 44
64556: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64557: LD_VAR 0 12
64561: PPUSH
64562: LD_VAR 0 8
64566: PPUSH
64567: LD_INT 0
64569: PPUSH
64570: CALL 66285 0 3
// end ;
64574: GO 64528
64576: POP
64577: POP
// if fishes then
64578: LD_VAR 0 7
64582: IFFALSE 64649
// for i = 1 to fishes do
64584: LD_ADDR_VAR 0 11
64588: PUSH
64589: DOUBLE
64590: LD_INT 1
64592: DEC
64593: ST_TO_ADDR
64594: LD_VAR 0 7
64598: PUSH
64599: FOR_TO
64600: IFFALSE 64647
// begin hc_class = 20 ;
64602: LD_ADDR_OWVAR 28
64606: PUSH
64607: LD_INT 20
64609: ST_TO_ADDR
// hc_gallery =  ;
64610: LD_ADDR_OWVAR 33
64614: PUSH
64615: LD_STRING 
64617: ST_TO_ADDR
// animal := CreateHuman ;
64618: LD_ADDR_VAR 0 12
64622: PUSH
64623: CALL_OW 44
64627: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64628: LD_VAR 0 12
64632: PPUSH
64633: LD_VAR 0 9
64637: PPUSH
64638: LD_INT 0
64640: PPUSH
64641: CALL 66285 0 3
// end ;
64645: GO 64599
64647: POP
64648: POP
// end ;
64649: LD_VAR 0 10
64653: RET
// export function WantHeal ( sci , unit ) ; begin
64654: LD_INT 0
64656: PPUSH
// if GetTaskList ( sci ) > 0 then
64657: LD_VAR 0 1
64661: PPUSH
64662: CALL_OW 437
64666: PUSH
64667: LD_INT 0
64669: GREATER
64670: IFFALSE 64740
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64672: LD_VAR 0 1
64676: PPUSH
64677: CALL_OW 437
64681: PUSH
64682: LD_INT 1
64684: ARRAY
64685: PUSH
64686: LD_INT 1
64688: ARRAY
64689: PUSH
64690: LD_STRING l
64692: EQUAL
64693: PUSH
64694: LD_VAR 0 1
64698: PPUSH
64699: CALL_OW 437
64703: PUSH
64704: LD_INT 1
64706: ARRAY
64707: PUSH
64708: LD_INT 4
64710: ARRAY
64711: PUSH
64712: LD_VAR 0 2
64716: EQUAL
64717: AND
64718: IFFALSE 64730
// result := true else
64720: LD_ADDR_VAR 0 3
64724: PUSH
64725: LD_INT 1
64727: ST_TO_ADDR
64728: GO 64738
// result := false ;
64730: LD_ADDR_VAR 0 3
64734: PUSH
64735: LD_INT 0
64737: ST_TO_ADDR
// end else
64738: GO 64748
// result := false ;
64740: LD_ADDR_VAR 0 3
64744: PUSH
64745: LD_INT 0
64747: ST_TO_ADDR
// end ;
64748: LD_VAR 0 3
64752: RET
// export function HealTarget ( sci ) ; begin
64753: LD_INT 0
64755: PPUSH
// if not sci then
64756: LD_VAR 0 1
64760: NOT
64761: IFFALSE 64765
// exit ;
64763: GO 64830
// result := 0 ;
64765: LD_ADDR_VAR 0 2
64769: PUSH
64770: LD_INT 0
64772: ST_TO_ADDR
// if GetTaskList ( sci ) then
64773: LD_VAR 0 1
64777: PPUSH
64778: CALL_OW 437
64782: IFFALSE 64830
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64784: LD_VAR 0 1
64788: PPUSH
64789: CALL_OW 437
64793: PUSH
64794: LD_INT 1
64796: ARRAY
64797: PUSH
64798: LD_INT 1
64800: ARRAY
64801: PUSH
64802: LD_STRING l
64804: EQUAL
64805: IFFALSE 64830
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64807: LD_ADDR_VAR 0 2
64811: PUSH
64812: LD_VAR 0 1
64816: PPUSH
64817: CALL_OW 437
64821: PUSH
64822: LD_INT 1
64824: ARRAY
64825: PUSH
64826: LD_INT 4
64828: ARRAY
64829: ST_TO_ADDR
// end ;
64830: LD_VAR 0 2
64834: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64835: LD_INT 0
64837: PPUSH
64838: PPUSH
64839: PPUSH
64840: PPUSH
// if not base_units then
64841: LD_VAR 0 1
64845: NOT
64846: IFFALSE 64850
// exit ;
64848: GO 64937
// result := false ;
64850: LD_ADDR_VAR 0 2
64854: PUSH
64855: LD_INT 0
64857: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64858: LD_ADDR_VAR 0 5
64862: PUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: LD_INT 21
64870: PUSH
64871: LD_INT 3
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PPUSH
64878: CALL_OW 72
64882: ST_TO_ADDR
// if not tmp then
64883: LD_VAR 0 5
64887: NOT
64888: IFFALSE 64892
// exit ;
64890: GO 64937
// for i in tmp do
64892: LD_ADDR_VAR 0 3
64896: PUSH
64897: LD_VAR 0 5
64901: PUSH
64902: FOR_IN
64903: IFFALSE 64935
// begin result := EnemyInRange ( i , 22 ) ;
64905: LD_ADDR_VAR 0 2
64909: PUSH
64910: LD_VAR 0 3
64914: PPUSH
64915: LD_INT 22
64917: PPUSH
64918: CALL 62550 0 2
64922: ST_TO_ADDR
// if result then
64923: LD_VAR 0 2
64927: IFFALSE 64933
// exit ;
64929: POP
64930: POP
64931: GO 64937
// end ;
64933: GO 64902
64935: POP
64936: POP
// end ;
64937: LD_VAR 0 2
64941: RET
// export function FilterByTag ( units , tag ) ; begin
64942: LD_INT 0
64944: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64945: LD_ADDR_VAR 0 3
64949: PUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: LD_INT 120
64957: PUSH
64958: LD_VAR 0 2
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PPUSH
64967: CALL_OW 72
64971: ST_TO_ADDR
// end ;
64972: LD_VAR 0 3
64976: RET
// export function IsDriver ( un ) ; begin
64977: LD_INT 0
64979: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64980: LD_ADDR_VAR 0 2
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 55
64992: PUSH
64993: EMPTY
64994: LIST
64995: PPUSH
64996: CALL_OW 69
65000: IN
65001: ST_TO_ADDR
// end ;
65002: LD_VAR 0 2
65006: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65007: LD_INT 0
65009: PPUSH
65010: PPUSH
// list := [ ] ;
65011: LD_ADDR_VAR 0 5
65015: PUSH
65016: EMPTY
65017: ST_TO_ADDR
// case d of 0 :
65018: LD_VAR 0 3
65022: PUSH
65023: LD_INT 0
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65164
65031: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65032: LD_ADDR_VAR 0 5
65036: PUSH
65037: LD_VAR 0 1
65041: PUSH
65042: LD_INT 4
65044: MINUS
65045: PUSH
65046: LD_VAR 0 2
65050: PUSH
65051: LD_INT 4
65053: MINUS
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: PUSH
65063: LD_VAR 0 1
65067: PUSH
65068: LD_INT 3
65070: MINUS
65071: PUSH
65072: LD_VAR 0 2
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: PUSH
65085: LD_VAR 0 1
65089: PUSH
65090: LD_INT 4
65092: PLUS
65093: PUSH
65094: LD_VAR 0 2
65098: PUSH
65099: LD_INT 4
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: LD_INT 3
65114: PLUS
65115: PUSH
65116: LD_VAR 0 2
65120: PUSH
65121: LD_INT 3
65123: PLUS
65124: PUSH
65125: LD_INT 5
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: LD_VAR 0 1
65137: PUSH
65138: LD_VAR 0 2
65142: PUSH
65143: LD_INT 4
65145: PLUS
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// end ; 1 :
65162: GO 65862
65164: LD_INT 1
65166: DOUBLE
65167: EQUAL
65168: IFTRUE 65172
65170: GO 65305
65172: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65173: LD_ADDR_VAR 0 5
65177: PUSH
65178: LD_VAR 0 1
65182: PUSH
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 4
65190: MINUS
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: PUSH
65200: LD_VAR 0 1
65204: PUSH
65205: LD_INT 3
65207: MINUS
65208: PUSH
65209: LD_VAR 0 2
65213: PUSH
65214: LD_INT 3
65216: MINUS
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: PUSH
65226: LD_VAR 0 1
65230: PUSH
65231: LD_INT 4
65233: MINUS
65234: PUSH
65235: LD_VAR 0 2
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: PUSH
65248: LD_VAR 0 1
65252: PUSH
65253: LD_VAR 0 2
65257: PUSH
65258: LD_INT 3
65260: PLUS
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: PUSH
65270: LD_VAR 0 1
65274: PUSH
65275: LD_INT 4
65277: PLUS
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 4
65286: PLUS
65287: PUSH
65288: LD_INT 5
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// end ; 2 :
65303: GO 65862
65305: LD_INT 2
65307: DOUBLE
65308: EQUAL
65309: IFTRUE 65313
65311: GO 65442
65313: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65314: LD_ADDR_VAR 0 5
65318: PUSH
65319: LD_VAR 0 1
65323: PUSH
65324: LD_VAR 0 2
65328: PUSH
65329: LD_INT 3
65331: MINUS
65332: PUSH
65333: LD_INT 3
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: PUSH
65341: LD_VAR 0 1
65345: PUSH
65346: LD_INT 4
65348: PLUS
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: LD_INT 4
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: LD_VAR 0 1
65367: PUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_INT 4
65375: PLUS
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 3
65392: MINUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: PUSH
65407: LD_VAR 0 1
65411: PUSH
65412: LD_INT 4
65414: MINUS
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: LD_INT 4
65423: MINUS
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// end ; 3 :
65440: GO 65862
65442: LD_INT 3
65444: DOUBLE
65445: EQUAL
65446: IFTRUE 65450
65448: GO 65583
65450: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65451: LD_ADDR_VAR 0 5
65455: PUSH
65456: LD_VAR 0 1
65460: PUSH
65461: LD_INT 3
65463: PLUS
65464: PUSH
65465: LD_VAR 0 2
65469: PUSH
65470: LD_INT 4
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: PUSH
65478: LD_VAR 0 1
65482: PUSH
65483: LD_INT 4
65485: PLUS
65486: PUSH
65487: LD_VAR 0 2
65491: PUSH
65492: LD_INT 4
65494: PLUS
65495: PUSH
65496: LD_INT 5
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_INT 4
65511: MINUS
65512: PUSH
65513: LD_VAR 0 2
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: LD_VAR 0 1
65530: PUSH
65531: LD_VAR 0 2
65535: PUSH
65536: LD_INT 4
65538: MINUS
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: PUSH
65548: LD_VAR 0 1
65552: PUSH
65553: LD_INT 3
65555: MINUS
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: LD_INT 3
65564: MINUS
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// end ; 4 :
65581: GO 65862
65583: LD_INT 4
65585: DOUBLE
65586: EQUAL
65587: IFTRUE 65591
65589: GO 65724
65591: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65592: LD_ADDR_VAR 0 5
65596: PUSH
65597: LD_VAR 0 1
65601: PUSH
65602: LD_VAR 0 2
65606: PUSH
65607: LD_INT 4
65609: PLUS
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: PUSH
65619: LD_VAR 0 1
65623: PUSH
65624: LD_INT 3
65626: PLUS
65627: PUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_INT 3
65635: PLUS
65636: PUSH
65637: LD_INT 5
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: LIST
65644: PUSH
65645: LD_VAR 0 1
65649: PUSH
65650: LD_INT 4
65652: PLUS
65653: PUSH
65654: LD_VAR 0 2
65658: PUSH
65659: LD_INT 4
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: PUSH
65667: LD_VAR 0 1
65671: PUSH
65672: LD_VAR 0 2
65676: PUSH
65677: LD_INT 3
65679: MINUS
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_INT 4
65696: MINUS
65697: PUSH
65698: LD_VAR 0 2
65702: PUSH
65703: LD_INT 4
65705: MINUS
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// end ; 5 :
65722: GO 65862
65724: LD_INT 5
65726: DOUBLE
65727: EQUAL
65728: IFTRUE 65732
65730: GO 65861
65732: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65733: LD_ADDR_VAR 0 5
65737: PUSH
65738: LD_VAR 0 1
65742: PUSH
65743: LD_INT 4
65745: MINUS
65746: PUSH
65747: LD_VAR 0 2
65751: PUSH
65752: LD_INT 1
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: PUSH
65760: LD_VAR 0 1
65764: PUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_INT 4
65772: MINUS
65773: PUSH
65774: LD_INT 3
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: PUSH
65782: LD_VAR 0 1
65786: PUSH
65787: LD_INT 4
65789: PLUS
65790: PUSH
65791: LD_VAR 0 2
65795: PUSH
65796: LD_INT 4
65798: PLUS
65799: PUSH
65800: LD_INT 5
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: PUSH
65808: LD_VAR 0 1
65812: PUSH
65813: LD_INT 3
65815: PLUS
65816: PUSH
65817: LD_VAR 0 2
65821: PUSH
65822: LD_INT 4
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: LD_VAR 0 1
65834: PUSH
65835: LD_VAR 0 2
65839: PUSH
65840: LD_INT 3
65842: PLUS
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: ST_TO_ADDR
// end ; end ;
65859: GO 65862
65861: POP
// result := list ;
65862: LD_ADDR_VAR 0 4
65866: PUSH
65867: LD_VAR 0 5
65871: ST_TO_ADDR
// end ;
65872: LD_VAR 0 4
65876: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65877: LD_INT 0
65879: PPUSH
65880: PPUSH
65881: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65882: LD_VAR 0 1
65886: NOT
65887: PUSH
65888: LD_VAR 0 2
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: LD_INT 4
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: IN
65911: NOT
65912: OR
65913: IFFALSE 65917
// exit ;
65915: GO 66009
// tmp := [ ] ;
65917: LD_ADDR_VAR 0 5
65921: PUSH
65922: EMPTY
65923: ST_TO_ADDR
// for i in units do
65924: LD_ADDR_VAR 0 4
65928: PUSH
65929: LD_VAR 0 1
65933: PUSH
65934: FOR_IN
65935: IFFALSE 65978
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65937: LD_ADDR_VAR 0 5
65941: PUSH
65942: LD_VAR 0 5
65946: PPUSH
65947: LD_VAR 0 5
65951: PUSH
65952: LD_INT 1
65954: PLUS
65955: PPUSH
65956: LD_VAR 0 4
65960: PPUSH
65961: LD_VAR 0 2
65965: PPUSH
65966: CALL_OW 259
65970: PPUSH
65971: CALL_OW 2
65975: ST_TO_ADDR
65976: GO 65934
65978: POP
65979: POP
// if not tmp then
65980: LD_VAR 0 5
65984: NOT
65985: IFFALSE 65989
// exit ;
65987: GO 66009
// result := SortListByListDesc ( units , tmp ) ;
65989: LD_ADDR_VAR 0 3
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: LD_VAR 0 5
66003: PPUSH
66004: CALL_OW 77
66008: ST_TO_ADDR
// end ;
66009: LD_VAR 0 3
66013: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66014: LD_INT 0
66016: PPUSH
66017: PPUSH
66018: PPUSH
// result := false ;
66019: LD_ADDR_VAR 0 3
66023: PUSH
66024: LD_INT 0
66026: ST_TO_ADDR
// x := GetX ( building ) ;
66027: LD_ADDR_VAR 0 4
66031: PUSH
66032: LD_VAR 0 2
66036: PPUSH
66037: CALL_OW 250
66041: ST_TO_ADDR
// y := GetY ( building ) ;
66042: LD_ADDR_VAR 0 5
66046: PUSH
66047: LD_VAR 0 2
66051: PPUSH
66052: CALL_OW 251
66056: ST_TO_ADDR
// if not building or not x or not y then
66057: LD_VAR 0 2
66061: NOT
66062: PUSH
66063: LD_VAR 0 4
66067: NOT
66068: OR
66069: PUSH
66070: LD_VAR 0 5
66074: NOT
66075: OR
66076: IFFALSE 66080
// exit ;
66078: GO 66172
// if GetTaskList ( unit ) then
66080: LD_VAR 0 1
66084: PPUSH
66085: CALL_OW 437
66089: IFFALSE 66172
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66091: LD_STRING e
66093: PUSH
66094: LD_VAR 0 1
66098: PPUSH
66099: CALL_OW 437
66103: PUSH
66104: LD_INT 1
66106: ARRAY
66107: PUSH
66108: LD_INT 1
66110: ARRAY
66111: EQUAL
66112: PUSH
66113: LD_VAR 0 4
66117: PUSH
66118: LD_VAR 0 1
66122: PPUSH
66123: CALL_OW 437
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: PUSH
66132: LD_INT 2
66134: ARRAY
66135: EQUAL
66136: AND
66137: PUSH
66138: LD_VAR 0 5
66142: PUSH
66143: LD_VAR 0 1
66147: PPUSH
66148: CALL_OW 437
66152: PUSH
66153: LD_INT 1
66155: ARRAY
66156: PUSH
66157: LD_INT 3
66159: ARRAY
66160: EQUAL
66161: AND
66162: IFFALSE 66172
// result := true end ;
66164: LD_ADDR_VAR 0 3
66168: PUSH
66169: LD_INT 1
66171: ST_TO_ADDR
// end ;
66172: LD_VAR 0 3
66176: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66177: LD_INT 0
66179: PPUSH
// result := false ;
66180: LD_ADDR_VAR 0 4
66184: PUSH
66185: LD_INT 0
66187: ST_TO_ADDR
// if GetTaskList ( unit ) then
66188: LD_VAR 0 1
66192: PPUSH
66193: CALL_OW 437
66197: IFFALSE 66280
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66199: LD_STRING M
66201: PUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 437
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: PUSH
66216: LD_INT 1
66218: ARRAY
66219: EQUAL
66220: PUSH
66221: LD_VAR 0 2
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 437
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PUSH
66240: LD_INT 2
66242: ARRAY
66243: EQUAL
66244: AND
66245: PUSH
66246: LD_VAR 0 3
66250: PUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 437
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PUSH
66265: LD_INT 3
66267: ARRAY
66268: EQUAL
66269: AND
66270: IFFALSE 66280
// result := true ;
66272: LD_ADDR_VAR 0 4
66276: PUSH
66277: LD_INT 1
66279: ST_TO_ADDR
// end ; end ;
66280: LD_VAR 0 4
66284: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66285: LD_INT 0
66287: PPUSH
66288: PPUSH
66289: PPUSH
66290: PPUSH
// if not unit or not area then
66291: LD_VAR 0 1
66295: NOT
66296: PUSH
66297: LD_VAR 0 2
66301: NOT
66302: OR
66303: IFFALSE 66307
// exit ;
66305: GO 66471
// tmp := AreaToList ( area , i ) ;
66307: LD_ADDR_VAR 0 6
66311: PUSH
66312: LD_VAR 0 2
66316: PPUSH
66317: LD_VAR 0 5
66321: PPUSH
66322: CALL_OW 517
66326: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66327: LD_ADDR_VAR 0 5
66331: PUSH
66332: DOUBLE
66333: LD_INT 1
66335: DEC
66336: ST_TO_ADDR
66337: LD_VAR 0 6
66341: PUSH
66342: LD_INT 1
66344: ARRAY
66345: PUSH
66346: FOR_TO
66347: IFFALSE 66469
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66349: LD_ADDR_VAR 0 7
66353: PUSH
66354: LD_VAR 0 6
66358: PUSH
66359: LD_INT 1
66361: ARRAY
66362: PUSH
66363: LD_VAR 0 5
66367: ARRAY
66368: PUSH
66369: LD_VAR 0 6
66373: PUSH
66374: LD_INT 2
66376: ARRAY
66377: PUSH
66378: LD_VAR 0 5
66382: ARRAY
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66388: LD_VAR 0 7
66392: PUSH
66393: LD_INT 1
66395: ARRAY
66396: PPUSH
66397: LD_VAR 0 7
66401: PUSH
66402: LD_INT 2
66404: ARRAY
66405: PPUSH
66406: CALL_OW 428
66410: PUSH
66411: LD_INT 0
66413: EQUAL
66414: IFFALSE 66467
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66416: LD_VAR 0 1
66420: PPUSH
66421: LD_VAR 0 7
66425: PUSH
66426: LD_INT 1
66428: ARRAY
66429: PPUSH
66430: LD_VAR 0 7
66434: PUSH
66435: LD_INT 2
66437: ARRAY
66438: PPUSH
66439: LD_VAR 0 3
66443: PPUSH
66444: CALL_OW 48
// result := IsPlaced ( unit ) ;
66448: LD_ADDR_VAR 0 4
66452: PUSH
66453: LD_VAR 0 1
66457: PPUSH
66458: CALL_OW 305
66462: ST_TO_ADDR
// exit ;
66463: POP
66464: POP
66465: GO 66471
// end ; end ;
66467: GO 66346
66469: POP
66470: POP
// end ;
66471: LD_VAR 0 4
66475: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66476: LD_INT 0
66478: PPUSH
66479: PPUSH
66480: PPUSH
// if not side or side > 8 then
66481: LD_VAR 0 1
66485: NOT
66486: PUSH
66487: LD_VAR 0 1
66491: PUSH
66492: LD_INT 8
66494: GREATER
66495: OR
66496: IFFALSE 66500
// exit ;
66498: GO 66687
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66500: LD_ADDR_VAR 0 4
66504: PUSH
66505: LD_INT 22
66507: PUSH
66508: LD_VAR 0 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 21
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PPUSH
66531: CALL_OW 69
66535: ST_TO_ADDR
// if not tmp then
66536: LD_VAR 0 4
66540: NOT
66541: IFFALSE 66545
// exit ;
66543: GO 66687
// enable_addtolog := true ;
66545: LD_ADDR_OWVAR 81
66549: PUSH
66550: LD_INT 1
66552: ST_TO_ADDR
// AddToLog ( [ ) ;
66553: LD_STRING [
66555: PPUSH
66556: CALL_OW 561
// for i in tmp do
66560: LD_ADDR_VAR 0 3
66564: PUSH
66565: LD_VAR 0 4
66569: PUSH
66570: FOR_IN
66571: IFFALSE 66678
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66573: LD_STRING [
66575: PUSH
66576: LD_VAR 0 3
66580: PPUSH
66581: CALL_OW 266
66585: STR
66586: PUSH
66587: LD_STRING , 
66589: STR
66590: PUSH
66591: LD_VAR 0 3
66595: PPUSH
66596: CALL_OW 250
66600: STR
66601: PUSH
66602: LD_STRING , 
66604: STR
66605: PUSH
66606: LD_VAR 0 3
66610: PPUSH
66611: CALL_OW 251
66615: STR
66616: PUSH
66617: LD_STRING , 
66619: STR
66620: PUSH
66621: LD_VAR 0 3
66625: PPUSH
66626: CALL_OW 254
66630: STR
66631: PUSH
66632: LD_STRING , 
66634: STR
66635: PUSH
66636: LD_VAR 0 3
66640: PPUSH
66641: LD_INT 1
66643: PPUSH
66644: CALL_OW 268
66648: STR
66649: PUSH
66650: LD_STRING , 
66652: STR
66653: PUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: LD_INT 2
66661: PPUSH
66662: CALL_OW 268
66666: STR
66667: PUSH
66668: LD_STRING ],
66670: STR
66671: PPUSH
66672: CALL_OW 561
// end ;
66676: GO 66570
66678: POP
66679: POP
// AddToLog ( ]; ) ;
66680: LD_STRING ];
66682: PPUSH
66683: CALL_OW 561
// end ;
66687: LD_VAR 0 2
66691: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66692: LD_INT 0
66694: PPUSH
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
// if not area or not rate or not max then
66699: LD_VAR 0 1
66703: NOT
66704: PUSH
66705: LD_VAR 0 2
66709: NOT
66710: OR
66711: PUSH
66712: LD_VAR 0 4
66716: NOT
66717: OR
66718: IFFALSE 66722
// exit ;
66720: GO 66911
// while 1 do
66722: LD_INT 1
66724: IFFALSE 66911
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66726: LD_ADDR_VAR 0 9
66730: PUSH
66731: LD_VAR 0 1
66735: PPUSH
66736: LD_INT 1
66738: PPUSH
66739: CALL_OW 287
66743: PUSH
66744: LD_INT 10
66746: MUL
66747: ST_TO_ADDR
// r := rate / 10 ;
66748: LD_ADDR_VAR 0 7
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 10
66760: DIVREAL
66761: ST_TO_ADDR
// time := 1 1$00 ;
66762: LD_ADDR_VAR 0 8
66766: PUSH
66767: LD_INT 2100
66769: ST_TO_ADDR
// if amount < min then
66770: LD_VAR 0 9
66774: PUSH
66775: LD_VAR 0 3
66779: LESS
66780: IFFALSE 66798
// r := r * 2 else
66782: LD_ADDR_VAR 0 7
66786: PUSH
66787: LD_VAR 0 7
66791: PUSH
66792: LD_INT 2
66794: MUL
66795: ST_TO_ADDR
66796: GO 66824
// if amount > max then
66798: LD_VAR 0 9
66802: PUSH
66803: LD_VAR 0 4
66807: GREATER
66808: IFFALSE 66824
// r := r / 2 ;
66810: LD_ADDR_VAR 0 7
66814: PUSH
66815: LD_VAR 0 7
66819: PUSH
66820: LD_INT 2
66822: DIVREAL
66823: ST_TO_ADDR
// time := time / r ;
66824: LD_ADDR_VAR 0 8
66828: PUSH
66829: LD_VAR 0 8
66833: PUSH
66834: LD_VAR 0 7
66838: DIVREAL
66839: ST_TO_ADDR
// if time < 0 then
66840: LD_VAR 0 8
66844: PUSH
66845: LD_INT 0
66847: LESS
66848: IFFALSE 66865
// time := time * - 1 ;
66850: LD_ADDR_VAR 0 8
66854: PUSH
66855: LD_VAR 0 8
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: MUL
66864: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66865: LD_VAR 0 8
66869: PUSH
66870: LD_INT 35
66872: PPUSH
66873: LD_INT 875
66875: PPUSH
66876: CALL_OW 12
66880: PLUS
66881: PPUSH
66882: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66886: LD_INT 1
66888: PPUSH
66889: LD_INT 5
66891: PPUSH
66892: CALL_OW 12
66896: PPUSH
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_INT 1
66904: PPUSH
66905: CALL_OW 55
// end ;
66909: GO 66722
// end ;
66911: LD_VAR 0 5
66915: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66916: LD_INT 0
66918: PPUSH
66919: PPUSH
66920: PPUSH
66921: PPUSH
66922: PPUSH
66923: PPUSH
66924: PPUSH
66925: PPUSH
// if not turrets or not factories then
66926: LD_VAR 0 1
66930: NOT
66931: PUSH
66932: LD_VAR 0 2
66936: NOT
66937: OR
66938: IFFALSE 66942
// exit ;
66940: GO 67249
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66942: LD_ADDR_VAR 0 10
66946: PUSH
66947: LD_INT 5
66949: PUSH
66950: LD_INT 6
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: LD_INT 4
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: PUSH
66970: LD_INT 5
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 24
66984: PUSH
66985: LD_INT 25
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 23
66994: PUSH
66995: LD_INT 27
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 42
67008: PUSH
67009: LD_INT 43
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 44
67018: PUSH
67019: LD_INT 46
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 45
67028: PUSH
67029: LD_INT 47
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: LIST
67045: ST_TO_ADDR
// result := [ ] ;
67046: LD_ADDR_VAR 0 3
67050: PUSH
67051: EMPTY
67052: ST_TO_ADDR
// for i in turrets do
67053: LD_ADDR_VAR 0 4
67057: PUSH
67058: LD_VAR 0 1
67062: PUSH
67063: FOR_IN
67064: IFFALSE 67247
// begin nat := GetNation ( i ) ;
67066: LD_ADDR_VAR 0 7
67070: PUSH
67071: LD_VAR 0 4
67075: PPUSH
67076: CALL_OW 248
67080: ST_TO_ADDR
// weapon := 0 ;
67081: LD_ADDR_VAR 0 8
67085: PUSH
67086: LD_INT 0
67088: ST_TO_ADDR
// if not nat then
67089: LD_VAR 0 7
67093: NOT
67094: IFFALSE 67098
// continue ;
67096: GO 67063
// for j in list [ nat ] do
67098: LD_ADDR_VAR 0 5
67102: PUSH
67103: LD_VAR 0 10
67107: PUSH
67108: LD_VAR 0 7
67112: ARRAY
67113: PUSH
67114: FOR_IN
67115: IFFALSE 67156
// if GetBWeapon ( i ) = j [ 1 ] then
67117: LD_VAR 0 4
67121: PPUSH
67122: CALL_OW 269
67126: PUSH
67127: LD_VAR 0 5
67131: PUSH
67132: LD_INT 1
67134: ARRAY
67135: EQUAL
67136: IFFALSE 67154
// begin weapon := j [ 2 ] ;
67138: LD_ADDR_VAR 0 8
67142: PUSH
67143: LD_VAR 0 5
67147: PUSH
67148: LD_INT 2
67150: ARRAY
67151: ST_TO_ADDR
// break ;
67152: GO 67156
// end ;
67154: GO 67114
67156: POP
67157: POP
// if not weapon then
67158: LD_VAR 0 8
67162: NOT
67163: IFFALSE 67167
// continue ;
67165: GO 67063
// for k in factories do
67167: LD_ADDR_VAR 0 6
67171: PUSH
67172: LD_VAR 0 2
67176: PUSH
67177: FOR_IN
67178: IFFALSE 67243
// begin weapons := AvailableWeaponList ( k ) ;
67180: LD_ADDR_VAR 0 9
67184: PUSH
67185: LD_VAR 0 6
67189: PPUSH
67190: CALL_OW 478
67194: ST_TO_ADDR
// if not weapons then
67195: LD_VAR 0 9
67199: NOT
67200: IFFALSE 67204
// continue ;
67202: GO 67177
// if weapon in weapons then
67204: LD_VAR 0 8
67208: PUSH
67209: LD_VAR 0 9
67213: IN
67214: IFFALSE 67241
// begin result := [ i , weapon ] ;
67216: LD_ADDR_VAR 0 3
67220: PUSH
67221: LD_VAR 0 4
67225: PUSH
67226: LD_VAR 0 8
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// exit ;
67235: POP
67236: POP
67237: POP
67238: POP
67239: GO 67249
// end ; end ;
67241: GO 67177
67243: POP
67244: POP
// end ;
67245: GO 67063
67247: POP
67248: POP
// end ;
67249: LD_VAR 0 3
67253: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67254: LD_INT 0
67256: PPUSH
// if not side or side > 8 then
67257: LD_VAR 0 3
67261: NOT
67262: PUSH
67263: LD_VAR 0 3
67267: PUSH
67268: LD_INT 8
67270: GREATER
67271: OR
67272: IFFALSE 67276
// exit ;
67274: GO 67335
// if not range then
67276: LD_VAR 0 4
67280: NOT
67281: IFFALSE 67292
// range := - 12 ;
67283: LD_ADDR_VAR 0 4
67287: PUSH
67288: LD_INT 12
67290: NEG
67291: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67292: LD_VAR 0 1
67296: PPUSH
67297: LD_VAR 0 2
67301: PPUSH
67302: LD_VAR 0 3
67306: PPUSH
67307: LD_VAR 0 4
67311: PPUSH
67312: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67316: LD_VAR 0 1
67320: PPUSH
67321: LD_VAR 0 2
67325: PPUSH
67326: LD_VAR 0 3
67330: PPUSH
67331: CALL_OW 331
// end ;
67335: LD_VAR 0 5
67339: RET
// export function Video ( mode ) ; begin
67340: LD_INT 0
67342: PPUSH
// ingame_video = mode ;
67343: LD_ADDR_OWVAR 52
67347: PUSH
67348: LD_VAR 0 1
67352: ST_TO_ADDR
// interface_hidden = mode ;
67353: LD_ADDR_OWVAR 54
67357: PUSH
67358: LD_VAR 0 1
67362: ST_TO_ADDR
// end ;
67363: LD_VAR 0 2
67367: RET
// export function Join ( array , element ) ; begin
67368: LD_INT 0
67370: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67371: LD_ADDR_VAR 0 3
67375: PUSH
67376: LD_VAR 0 1
67380: PPUSH
67381: LD_VAR 0 1
67385: PUSH
67386: LD_INT 1
67388: PLUS
67389: PPUSH
67390: LD_VAR 0 2
67394: PPUSH
67395: CALL_OW 1
67399: ST_TO_ADDR
// end ;
67400: LD_VAR 0 3
67404: RET
// export function JoinUnion ( array , element ) ; begin
67405: LD_INT 0
67407: PPUSH
// result := array union element ;
67408: LD_ADDR_VAR 0 3
67412: PUSH
67413: LD_VAR 0 1
67417: PUSH
67418: LD_VAR 0 2
67422: UNION
67423: ST_TO_ADDR
// end ;
67424: LD_VAR 0 3
67428: RET
// export function GetBehemoths ( side ) ; begin
67429: LD_INT 0
67431: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67432: LD_ADDR_VAR 0 2
67436: PUSH
67437: LD_INT 22
67439: PUSH
67440: LD_VAR 0 1
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 31
67451: PUSH
67452: LD_INT 25
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PPUSH
67463: CALL_OW 69
67467: ST_TO_ADDR
// end ;
67468: LD_VAR 0 2
67472: RET
// export function Shuffle ( array ) ; var i , index ; begin
67473: LD_INT 0
67475: PPUSH
67476: PPUSH
67477: PPUSH
// result := [ ] ;
67478: LD_ADDR_VAR 0 2
67482: PUSH
67483: EMPTY
67484: ST_TO_ADDR
// if not array then
67485: LD_VAR 0 1
67489: NOT
67490: IFFALSE 67494
// exit ;
67492: GO 67593
// Randomize ;
67494: CALL_OW 10
// for i = array downto 1 do
67498: LD_ADDR_VAR 0 3
67502: PUSH
67503: DOUBLE
67504: LD_VAR 0 1
67508: INC
67509: ST_TO_ADDR
67510: LD_INT 1
67512: PUSH
67513: FOR_DOWNTO
67514: IFFALSE 67591
// begin index := rand ( 1 , array ) ;
67516: LD_ADDR_VAR 0 4
67520: PUSH
67521: LD_INT 1
67523: PPUSH
67524: LD_VAR 0 1
67528: PPUSH
67529: CALL_OW 12
67533: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67534: LD_ADDR_VAR 0 2
67538: PUSH
67539: LD_VAR 0 2
67543: PPUSH
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 1
67551: PLUS
67552: PPUSH
67553: LD_VAR 0 1
67557: PUSH
67558: LD_VAR 0 4
67562: ARRAY
67563: PPUSH
67564: CALL_OW 2
67568: ST_TO_ADDR
// array := Delete ( array , index ) ;
67569: LD_ADDR_VAR 0 1
67573: PUSH
67574: LD_VAR 0 1
67578: PPUSH
67579: LD_VAR 0 4
67583: PPUSH
67584: CALL_OW 3
67588: ST_TO_ADDR
// end ;
67589: GO 67513
67591: POP
67592: POP
// end ;
67593: LD_VAR 0 2
67597: RET
// export function GetBaseMaterials ( base ) ; begin
67598: LD_INT 0
67600: PPUSH
// result := [ 0 , 0 , 0 ] ;
67601: LD_ADDR_VAR 0 2
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: ST_TO_ADDR
// if not base then
67620: LD_VAR 0 1
67624: NOT
67625: IFFALSE 67629
// exit ;
67627: GO 67678
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67629: LD_ADDR_VAR 0 2
67633: PUSH
67634: LD_VAR 0 1
67638: PPUSH
67639: LD_INT 1
67641: PPUSH
67642: CALL_OW 275
67646: PUSH
67647: LD_VAR 0 1
67651: PPUSH
67652: LD_INT 2
67654: PPUSH
67655: CALL_OW 275
67659: PUSH
67660: LD_VAR 0 1
67664: PPUSH
67665: LD_INT 3
67667: PPUSH
67668: CALL_OW 275
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: LIST
67677: ST_TO_ADDR
// end ;
67678: LD_VAR 0 2
67682: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67683: LD_INT 0
67685: PPUSH
67686: PPUSH
// result := array ;
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: LD_VAR 0 1
67696: ST_TO_ADDR
// if size >= result then
67697: LD_VAR 0 2
67701: PUSH
67702: LD_VAR 0 3
67706: GREATEREQUAL
67707: IFFALSE 67711
// exit ;
67709: GO 67761
// if size then
67711: LD_VAR 0 2
67715: IFFALSE 67761
// for i := array downto size do
67717: LD_ADDR_VAR 0 4
67721: PUSH
67722: DOUBLE
67723: LD_VAR 0 1
67727: INC
67728: ST_TO_ADDR
67729: LD_VAR 0 2
67733: PUSH
67734: FOR_DOWNTO
67735: IFFALSE 67759
// result := Delete ( result , result ) ;
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_VAR 0 3
67746: PPUSH
67747: LD_VAR 0 3
67751: PPUSH
67752: CALL_OW 3
67756: ST_TO_ADDR
67757: GO 67734
67759: POP
67760: POP
// end ;
67761: LD_VAR 0 3
67765: RET
// export function ComExit ( unit ) ; var tmp ; begin
67766: LD_INT 0
67768: PPUSH
67769: PPUSH
// if not IsInUnit ( unit ) then
67770: LD_VAR 0 1
67774: PPUSH
67775: CALL_OW 310
67779: NOT
67780: IFFALSE 67784
// exit ;
67782: GO 67844
// tmp := IsInUnit ( unit ) ;
67784: LD_ADDR_VAR 0 3
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: CALL_OW 310
67798: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67799: LD_VAR 0 3
67803: PPUSH
67804: CALL_OW 247
67808: PUSH
67809: LD_INT 2
67811: EQUAL
67812: IFFALSE 67825
// ComExitVehicle ( unit ) else
67814: LD_VAR 0 1
67818: PPUSH
67819: CALL_OW 121
67823: GO 67834
// ComExitBuilding ( unit ) ;
67825: LD_VAR 0 1
67829: PPUSH
67830: CALL_OW 122
// result := tmp ;
67834: LD_ADDR_VAR 0 2
67838: PUSH
67839: LD_VAR 0 3
67843: ST_TO_ADDR
// end ;
67844: LD_VAR 0 2
67848: RET
// export function ComExitAll ( units ) ; var i ; begin
67849: LD_INT 0
67851: PPUSH
67852: PPUSH
// if not units then
67853: LD_VAR 0 1
67857: NOT
67858: IFFALSE 67862
// exit ;
67860: GO 67888
// for i in units do
67862: LD_ADDR_VAR 0 3
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: FOR_IN
67873: IFFALSE 67886
// ComExit ( i ) ;
67875: LD_VAR 0 3
67879: PPUSH
67880: CALL 67766 0 1
67884: GO 67872
67886: POP
67887: POP
// end ;
67888: LD_VAR 0 2
67892: RET
// export function ResetHc ; begin
67893: LD_INT 0
67895: PPUSH
// InitHc ;
67896: CALL_OW 19
// hc_importance := 0 ;
67900: LD_ADDR_OWVAR 32
67904: PUSH
67905: LD_INT 0
67907: ST_TO_ADDR
// end ;
67908: LD_VAR 0 1
67912: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67913: LD_INT 0
67915: PPUSH
67916: PPUSH
67917: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67918: LD_ADDR_VAR 0 6
67922: PUSH
67923: LD_VAR 0 1
67927: PUSH
67928: LD_VAR 0 3
67932: PLUS
67933: PUSH
67934: LD_INT 2
67936: DIV
67937: ST_TO_ADDR
// if _x < 0 then
67938: LD_VAR 0 6
67942: PUSH
67943: LD_INT 0
67945: LESS
67946: IFFALSE 67963
// _x := _x * - 1 ;
67948: LD_ADDR_VAR 0 6
67952: PUSH
67953: LD_VAR 0 6
67957: PUSH
67958: LD_INT 1
67960: NEG
67961: MUL
67962: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67963: LD_ADDR_VAR 0 7
67967: PUSH
67968: LD_VAR 0 2
67972: PUSH
67973: LD_VAR 0 4
67977: PLUS
67978: PUSH
67979: LD_INT 2
67981: DIV
67982: ST_TO_ADDR
// if _y < 0 then
67983: LD_VAR 0 7
67987: PUSH
67988: LD_INT 0
67990: LESS
67991: IFFALSE 68008
// _y := _y * - 1 ;
67993: LD_ADDR_VAR 0 7
67997: PUSH
67998: LD_VAR 0 7
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: MUL
68007: ST_TO_ADDR
// result := [ _x , _y ] ;
68008: LD_ADDR_VAR 0 5
68012: PUSH
68013: LD_VAR 0 6
68017: PUSH
68018: LD_VAR 0 7
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: ST_TO_ADDR
// end ;
68027: LD_VAR 0 5
68031: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68032: LD_INT 0
68034: PPUSH
68035: PPUSH
68036: PPUSH
68037: PPUSH
// task := GetTaskList ( unit ) ;
68038: LD_ADDR_VAR 0 7
68042: PUSH
68043: LD_VAR 0 1
68047: PPUSH
68048: CALL_OW 437
68052: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68053: LD_VAR 0 7
68057: NOT
68058: PUSH
68059: LD_VAR 0 1
68063: PPUSH
68064: LD_VAR 0 2
68068: PPUSH
68069: CALL_OW 308
68073: NOT
68074: AND
68075: IFFALSE 68079
// exit ;
68077: GO 68197
// if IsInArea ( unit , area ) then
68079: LD_VAR 0 1
68083: PPUSH
68084: LD_VAR 0 2
68088: PPUSH
68089: CALL_OW 308
68093: IFFALSE 68111
// begin ComMoveToArea ( unit , goAway ) ;
68095: LD_VAR 0 1
68099: PPUSH
68100: LD_VAR 0 3
68104: PPUSH
68105: CALL_OW 113
// exit ;
68109: GO 68197
// end ; if task [ 1 ] [ 1 ] <> M then
68111: LD_VAR 0 7
68115: PUSH
68116: LD_INT 1
68118: ARRAY
68119: PUSH
68120: LD_INT 1
68122: ARRAY
68123: PUSH
68124: LD_STRING M
68126: NONEQUAL
68127: IFFALSE 68131
// exit ;
68129: GO 68197
// x := task [ 1 ] [ 2 ] ;
68131: LD_ADDR_VAR 0 5
68135: PUSH
68136: LD_VAR 0 7
68140: PUSH
68141: LD_INT 1
68143: ARRAY
68144: PUSH
68145: LD_INT 2
68147: ARRAY
68148: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68149: LD_ADDR_VAR 0 6
68153: PUSH
68154: LD_VAR 0 7
68158: PUSH
68159: LD_INT 1
68161: ARRAY
68162: PUSH
68163: LD_INT 3
68165: ARRAY
68166: ST_TO_ADDR
// if InArea ( x , y , area ) then
68167: LD_VAR 0 5
68171: PPUSH
68172: LD_VAR 0 6
68176: PPUSH
68177: LD_VAR 0 2
68181: PPUSH
68182: CALL_OW 309
68186: IFFALSE 68197
// ComStop ( unit ) ;
68188: LD_VAR 0 1
68192: PPUSH
68193: CALL_OW 141
// end ;
68197: LD_VAR 0 4
68201: RET
// export function Abs ( value ) ; begin
68202: LD_INT 0
68204: PPUSH
// result := value ;
68205: LD_ADDR_VAR 0 2
68209: PUSH
68210: LD_VAR 0 1
68214: ST_TO_ADDR
// if value < 0 then
68215: LD_VAR 0 1
68219: PUSH
68220: LD_INT 0
68222: LESS
68223: IFFALSE 68240
// result := value * - 1 ;
68225: LD_ADDR_VAR 0 2
68229: PUSH
68230: LD_VAR 0 1
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: MUL
68239: ST_TO_ADDR
// end ;
68240: LD_VAR 0 2
68244: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68245: LD_INT 0
68247: PPUSH
68248: PPUSH
68249: PPUSH
68250: PPUSH
68251: PPUSH
68252: PPUSH
68253: PPUSH
68254: PPUSH
// if not unit or not building then
68255: LD_VAR 0 1
68259: NOT
68260: PUSH
68261: LD_VAR 0 2
68265: NOT
68266: OR
68267: IFFALSE 68271
// exit ;
68269: GO 68497
// x := GetX ( building ) ;
68271: LD_ADDR_VAR 0 4
68275: PUSH
68276: LD_VAR 0 2
68280: PPUSH
68281: CALL_OW 250
68285: ST_TO_ADDR
// y := GetY ( building ) ;
68286: LD_ADDR_VAR 0 6
68290: PUSH
68291: LD_VAR 0 2
68295: PPUSH
68296: CALL_OW 251
68300: ST_TO_ADDR
// d := GetDir ( building ) ;
68301: LD_ADDR_VAR 0 8
68305: PUSH
68306: LD_VAR 0 2
68310: PPUSH
68311: CALL_OW 254
68315: ST_TO_ADDR
// r := 4 ;
68316: LD_ADDR_VAR 0 9
68320: PUSH
68321: LD_INT 4
68323: ST_TO_ADDR
// for i := 1 to 5 do
68324: LD_ADDR_VAR 0 10
68328: PUSH
68329: DOUBLE
68330: LD_INT 1
68332: DEC
68333: ST_TO_ADDR
68334: LD_INT 5
68336: PUSH
68337: FOR_TO
68338: IFFALSE 68495
// begin _x := ShiftX ( x , d , r + i ) ;
68340: LD_ADDR_VAR 0 5
68344: PUSH
68345: LD_VAR 0 4
68349: PPUSH
68350: LD_VAR 0 8
68354: PPUSH
68355: LD_VAR 0 9
68359: PUSH
68360: LD_VAR 0 10
68364: PLUS
68365: PPUSH
68366: CALL_OW 272
68370: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68371: LD_ADDR_VAR 0 7
68375: PUSH
68376: LD_VAR 0 6
68380: PPUSH
68381: LD_VAR 0 8
68385: PPUSH
68386: LD_VAR 0 9
68390: PUSH
68391: LD_VAR 0 10
68395: PLUS
68396: PPUSH
68397: CALL_OW 273
68401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68402: LD_VAR 0 5
68406: PPUSH
68407: LD_VAR 0 7
68411: PPUSH
68412: CALL_OW 488
68416: PUSH
68417: LD_VAR 0 5
68421: PPUSH
68422: LD_VAR 0 7
68426: PPUSH
68427: CALL_OW 428
68431: PPUSH
68432: CALL_OW 247
68436: PUSH
68437: LD_INT 3
68439: PUSH
68440: LD_INT 2
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: IN
68447: NOT
68448: AND
68449: IFFALSE 68493
// begin ComMoveXY ( unit , _x , _y ) ;
68451: LD_VAR 0 1
68455: PPUSH
68456: LD_VAR 0 5
68460: PPUSH
68461: LD_VAR 0 7
68465: PPUSH
68466: CALL_OW 111
// result := [ _x , _y ] ;
68470: LD_ADDR_VAR 0 3
68474: PUSH
68475: LD_VAR 0 5
68479: PUSH
68480: LD_VAR 0 7
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: ST_TO_ADDR
// exit ;
68489: POP
68490: POP
68491: GO 68497
// end ; end ;
68493: GO 68337
68495: POP
68496: POP
// end ;
68497: LD_VAR 0 3
68501: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68502: LD_INT 0
68504: PPUSH
68505: PPUSH
68506: PPUSH
// result := 0 ;
68507: LD_ADDR_VAR 0 3
68511: PUSH
68512: LD_INT 0
68514: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68515: LD_VAR 0 1
68519: PUSH
68520: LD_INT 0
68522: LESS
68523: PUSH
68524: LD_VAR 0 1
68528: PUSH
68529: LD_INT 8
68531: GREATER
68532: OR
68533: PUSH
68534: LD_VAR 0 2
68538: PUSH
68539: LD_INT 0
68541: LESS
68542: OR
68543: PUSH
68544: LD_VAR 0 2
68548: PUSH
68549: LD_INT 8
68551: GREATER
68552: OR
68553: IFFALSE 68557
// exit ;
68555: GO 68632
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68557: LD_ADDR_VAR 0 4
68561: PUSH
68562: LD_INT 22
68564: PUSH
68565: LD_VAR 0 2
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PPUSH
68574: CALL_OW 69
68578: PUSH
68579: FOR_IN
68580: IFFALSE 68630
// begin un := UnitShoot ( i ) ;
68582: LD_ADDR_VAR 0 5
68586: PUSH
68587: LD_VAR 0 4
68591: PPUSH
68592: CALL_OW 504
68596: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68597: LD_VAR 0 5
68601: PPUSH
68602: CALL_OW 255
68606: PUSH
68607: LD_VAR 0 1
68611: EQUAL
68612: IFFALSE 68628
// begin result := un ;
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_VAR 0 5
68623: ST_TO_ADDR
// exit ;
68624: POP
68625: POP
68626: GO 68632
// end ; end ;
68628: GO 68579
68630: POP
68631: POP
// end ;
68632: LD_VAR 0 3
68636: RET
// export function GetCargoBay ( units ) ; begin
68637: LD_INT 0
68639: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68640: LD_ADDR_VAR 0 2
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: LD_INT 2
68652: PUSH
68653: LD_INT 34
68655: PUSH
68656: LD_INT 12
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 34
68665: PUSH
68666: LD_INT 51
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 34
68675: PUSH
68676: LD_INT 32
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 34
68685: PUSH
68686: LD_INT 89
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: PPUSH
68700: CALL_OW 72
68704: ST_TO_ADDR
// end ;
68705: LD_VAR 0 2
68709: RET
// export function Negate ( value ) ; begin
68710: LD_INT 0
68712: PPUSH
// result := not value ;
68713: LD_ADDR_VAR 0 2
68717: PUSH
68718: LD_VAR 0 1
68722: NOT
68723: ST_TO_ADDR
// end ;
68724: LD_VAR 0 2
68728: RET
// export function Inc ( value ) ; begin
68729: LD_INT 0
68731: PPUSH
// result := value + 1 ;
68732: LD_ADDR_VAR 0 2
68736: PUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 1
68744: PLUS
68745: ST_TO_ADDR
// end ;
68746: LD_VAR 0 2
68750: RET
// export function Dec ( value ) ; begin
68751: LD_INT 0
68753: PPUSH
// result := value - 1 ;
68754: LD_ADDR_VAR 0 2
68758: PUSH
68759: LD_VAR 0 1
68763: PUSH
68764: LD_INT 1
68766: MINUS
68767: ST_TO_ADDR
// end ;
68768: LD_VAR 0 2
68772: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68773: LD_INT 0
68775: PPUSH
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
68782: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68783: LD_VAR 0 1
68787: PPUSH
68788: LD_VAR 0 2
68792: PPUSH
68793: CALL_OW 488
68797: NOT
68798: PUSH
68799: LD_VAR 0 3
68803: PPUSH
68804: LD_VAR 0 4
68808: PPUSH
68809: CALL_OW 488
68813: NOT
68814: OR
68815: IFFALSE 68828
// begin result := - 1 ;
68817: LD_ADDR_VAR 0 5
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: ST_TO_ADDR
// exit ;
68826: GO 69063
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68828: LD_ADDR_VAR 0 12
68832: PUSH
68833: LD_VAR 0 1
68837: PPUSH
68838: LD_VAR 0 2
68842: PPUSH
68843: LD_VAR 0 3
68847: PPUSH
68848: LD_VAR 0 4
68852: PPUSH
68853: CALL 67913 0 4
68857: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68858: LD_ADDR_VAR 0 11
68862: PUSH
68863: LD_VAR 0 1
68867: PPUSH
68868: LD_VAR 0 2
68872: PPUSH
68873: LD_VAR 0 12
68877: PUSH
68878: LD_INT 1
68880: ARRAY
68881: PPUSH
68882: LD_VAR 0 12
68886: PUSH
68887: LD_INT 2
68889: ARRAY
68890: PPUSH
68891: CALL_OW 298
68895: ST_TO_ADDR
// distance := 9999 ;
68896: LD_ADDR_VAR 0 10
68900: PUSH
68901: LD_INT 9999
68903: ST_TO_ADDR
// for i := 0 to 5 do
68904: LD_ADDR_VAR 0 6
68908: PUSH
68909: DOUBLE
68910: LD_INT 0
68912: DEC
68913: ST_TO_ADDR
68914: LD_INT 5
68916: PUSH
68917: FOR_TO
68918: IFFALSE 69061
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68920: LD_ADDR_VAR 0 7
68924: PUSH
68925: LD_VAR 0 1
68929: PPUSH
68930: LD_VAR 0 6
68934: PPUSH
68935: LD_VAR 0 11
68939: PPUSH
68940: CALL_OW 272
68944: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68945: LD_ADDR_VAR 0 8
68949: PUSH
68950: LD_VAR 0 2
68954: PPUSH
68955: LD_VAR 0 6
68959: PPUSH
68960: LD_VAR 0 11
68964: PPUSH
68965: CALL_OW 273
68969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68970: LD_VAR 0 7
68974: PPUSH
68975: LD_VAR 0 8
68979: PPUSH
68980: CALL_OW 488
68984: NOT
68985: IFFALSE 68989
// continue ;
68987: GO 68917
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68989: LD_ADDR_VAR 0 9
68993: PUSH
68994: LD_VAR 0 12
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PPUSH
69003: LD_VAR 0 12
69007: PUSH
69008: LD_INT 2
69010: ARRAY
69011: PPUSH
69012: LD_VAR 0 7
69016: PPUSH
69017: LD_VAR 0 8
69021: PPUSH
69022: CALL_OW 298
69026: ST_TO_ADDR
// if tmp < distance then
69027: LD_VAR 0 9
69031: PUSH
69032: LD_VAR 0 10
69036: LESS
69037: IFFALSE 69059
// begin result := i ;
69039: LD_ADDR_VAR 0 5
69043: PUSH
69044: LD_VAR 0 6
69048: ST_TO_ADDR
// distance := tmp ;
69049: LD_ADDR_VAR 0 10
69053: PUSH
69054: LD_VAR 0 9
69058: ST_TO_ADDR
// end ; end ;
69059: GO 68917
69061: POP
69062: POP
// end ;
69063: LD_VAR 0 5
69067: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69068: LD_INT 0
69070: PPUSH
69071: PPUSH
// if not driver or not IsInUnit ( driver ) then
69072: LD_VAR 0 1
69076: NOT
69077: PUSH
69078: LD_VAR 0 1
69082: PPUSH
69083: CALL_OW 310
69087: NOT
69088: OR
69089: IFFALSE 69093
// exit ;
69091: GO 69183
// vehicle := IsInUnit ( driver ) ;
69093: LD_ADDR_VAR 0 3
69097: PUSH
69098: LD_VAR 0 1
69102: PPUSH
69103: CALL_OW 310
69107: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69108: LD_VAR 0 1
69112: PPUSH
69113: LD_STRING \
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: PUSH
69143: LD_STRING E
69145: PUSH
69146: LD_INT 0
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_VAR 0 3
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PPUSH
69179: CALL_OW 446
// end ;
69183: LD_VAR 0 2
69187: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69188: LD_INT 0
69190: PPUSH
69191: PPUSH
// if not driver or not IsInUnit ( driver ) then
69192: LD_VAR 0 1
69196: NOT
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 310
69207: NOT
69208: OR
69209: IFFALSE 69213
// exit ;
69211: GO 69303
// vehicle := IsInUnit ( driver ) ;
69213: LD_ADDR_VAR 0 3
69217: PUSH
69218: LD_VAR 0 1
69222: PPUSH
69223: CALL_OW 310
69227: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69228: LD_VAR 0 1
69232: PPUSH
69233: LD_STRING \
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: LD_INT 0
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: PUSH
69263: LD_STRING E
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_VAR 0 3
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PPUSH
69299: CALL_OW 447
// end ;
69303: LD_VAR 0 2
69307: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69308: LD_INT 0
69310: PPUSH
69311: PPUSH
69312: PPUSH
// tmp := [ ] ;
69313: LD_ADDR_VAR 0 5
69317: PUSH
69318: EMPTY
69319: ST_TO_ADDR
// for i in units do
69320: LD_ADDR_VAR 0 4
69324: PUSH
69325: LD_VAR 0 1
69329: PUSH
69330: FOR_IN
69331: IFFALSE 69369
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69333: LD_ADDR_VAR 0 5
69337: PUSH
69338: LD_VAR 0 5
69342: PPUSH
69343: LD_VAR 0 5
69347: PUSH
69348: LD_INT 1
69350: PLUS
69351: PPUSH
69352: LD_VAR 0 4
69356: PPUSH
69357: CALL_OW 256
69361: PPUSH
69362: CALL_OW 2
69366: ST_TO_ADDR
69367: GO 69330
69369: POP
69370: POP
// if not tmp then
69371: LD_VAR 0 5
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 69428
// if asc then
69380: LD_VAR 0 2
69384: IFFALSE 69408
// result := SortListByListAsc ( units , tmp ) else
69386: LD_ADDR_VAR 0 3
69390: PUSH
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 5
69400: PPUSH
69401: CALL_OW 76
69405: ST_TO_ADDR
69406: GO 69428
// result := SortListByListDesc ( units , tmp ) ;
69408: LD_ADDR_VAR 0 3
69412: PUSH
69413: LD_VAR 0 1
69417: PPUSH
69418: LD_VAR 0 5
69422: PPUSH
69423: CALL_OW 77
69427: ST_TO_ADDR
// end ;
69428: LD_VAR 0 3
69432: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69433: LD_INT 0
69435: PPUSH
69436: PPUSH
// task := GetTaskList ( mech ) ;
69437: LD_ADDR_VAR 0 4
69441: PUSH
69442: LD_VAR 0 1
69446: PPUSH
69447: CALL_OW 437
69451: ST_TO_ADDR
// if not task then
69452: LD_VAR 0 4
69456: NOT
69457: IFFALSE 69461
// exit ;
69459: GO 69503
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69461: LD_ADDR_VAR 0 3
69465: PUSH
69466: LD_VAR 0 4
69470: PUSH
69471: LD_INT 1
69473: ARRAY
69474: PUSH
69475: LD_INT 1
69477: ARRAY
69478: PUSH
69479: LD_STRING r
69481: EQUAL
69482: PUSH
69483: LD_VAR 0 4
69487: PUSH
69488: LD_INT 1
69490: ARRAY
69491: PUSH
69492: LD_INT 4
69494: ARRAY
69495: PUSH
69496: LD_VAR 0 2
69500: EQUAL
69501: AND
69502: ST_TO_ADDR
// end ;
69503: LD_VAR 0 3
69507: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69508: LD_INT 0
69510: PPUSH
// SetDir ( unit , d ) ;
69511: LD_VAR 0 1
69515: PPUSH
69516: LD_VAR 0 4
69520: PPUSH
69521: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69525: LD_VAR 0 1
69529: PPUSH
69530: LD_VAR 0 2
69534: PPUSH
69535: LD_VAR 0 3
69539: PPUSH
69540: LD_VAR 0 5
69544: PPUSH
69545: CALL_OW 48
// end ;
69549: LD_VAR 0 6
69553: RET
// export function ToNaturalNumber ( number ) ; begin
69554: LD_INT 0
69556: PPUSH
// result := number div 1 ;
69557: LD_ADDR_VAR 0 2
69561: PUSH
69562: LD_VAR 0 1
69566: PUSH
69567: LD_INT 1
69569: DIV
69570: ST_TO_ADDR
// if number < 0 then
69571: LD_VAR 0 1
69575: PUSH
69576: LD_INT 0
69578: LESS
69579: IFFALSE 69589
// result := 0 ;
69581: LD_ADDR_VAR 0 2
69585: PUSH
69586: LD_INT 0
69588: ST_TO_ADDR
// end ;
69589: LD_VAR 0 2
69593: RET
// export function SortByClass ( units , class ) ; var un ; begin
69594: LD_INT 0
69596: PPUSH
69597: PPUSH
// if not units or not class then
69598: LD_VAR 0 1
69602: NOT
69603: PUSH
69604: LD_VAR 0 2
69608: NOT
69609: OR
69610: IFFALSE 69614
// exit ;
69612: GO 69709
// result := [ ] ;
69614: LD_ADDR_VAR 0 3
69618: PUSH
69619: EMPTY
69620: ST_TO_ADDR
// for un in units do
69621: LD_ADDR_VAR 0 4
69625: PUSH
69626: LD_VAR 0 1
69630: PUSH
69631: FOR_IN
69632: IFFALSE 69707
// if GetClass ( un ) = class then
69634: LD_VAR 0 4
69638: PPUSH
69639: CALL_OW 257
69643: PUSH
69644: LD_VAR 0 2
69648: EQUAL
69649: IFFALSE 69676
// result := Insert ( result , 1 , un ) else
69651: LD_ADDR_VAR 0 3
69655: PUSH
69656: LD_VAR 0 3
69660: PPUSH
69661: LD_INT 1
69663: PPUSH
69664: LD_VAR 0 4
69668: PPUSH
69669: CALL_OW 2
69673: ST_TO_ADDR
69674: GO 69705
// result := Replace ( result , result + 1 , un ) ;
69676: LD_ADDR_VAR 0 3
69680: PUSH
69681: LD_VAR 0 3
69685: PPUSH
69686: LD_VAR 0 3
69690: PUSH
69691: LD_INT 1
69693: PLUS
69694: PPUSH
69695: LD_VAR 0 4
69699: PPUSH
69700: CALL_OW 1
69704: ST_TO_ADDR
69705: GO 69631
69707: POP
69708: POP
// end ;
69709: LD_VAR 0 3
69713: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69714: LD_INT 0
69716: PPUSH
69717: PPUSH
69718: PPUSH
69719: PPUSH
69720: PPUSH
69721: PPUSH
69722: PPUSH
// result := [ ] ;
69723: LD_ADDR_VAR 0 4
69727: PUSH
69728: EMPTY
69729: ST_TO_ADDR
// if x - r < 0 then
69730: LD_VAR 0 1
69734: PUSH
69735: LD_VAR 0 3
69739: MINUS
69740: PUSH
69741: LD_INT 0
69743: LESS
69744: IFFALSE 69756
// min_x := 0 else
69746: LD_ADDR_VAR 0 8
69750: PUSH
69751: LD_INT 0
69753: ST_TO_ADDR
69754: GO 69772
// min_x := x - r ;
69756: LD_ADDR_VAR 0 8
69760: PUSH
69761: LD_VAR 0 1
69765: PUSH
69766: LD_VAR 0 3
69770: MINUS
69771: ST_TO_ADDR
// if y - r < 0 then
69772: LD_VAR 0 2
69776: PUSH
69777: LD_VAR 0 3
69781: MINUS
69782: PUSH
69783: LD_INT 0
69785: LESS
69786: IFFALSE 69798
// min_y := 0 else
69788: LD_ADDR_VAR 0 7
69792: PUSH
69793: LD_INT 0
69795: ST_TO_ADDR
69796: GO 69814
// min_y := y - r ;
69798: LD_ADDR_VAR 0 7
69802: PUSH
69803: LD_VAR 0 2
69807: PUSH
69808: LD_VAR 0 3
69812: MINUS
69813: ST_TO_ADDR
// max_x := x + r ;
69814: LD_ADDR_VAR 0 9
69818: PUSH
69819: LD_VAR 0 1
69823: PUSH
69824: LD_VAR 0 3
69828: PLUS
69829: ST_TO_ADDR
// max_y := y + r ;
69830: LD_ADDR_VAR 0 10
69834: PUSH
69835: LD_VAR 0 2
69839: PUSH
69840: LD_VAR 0 3
69844: PLUS
69845: ST_TO_ADDR
// for _x = min_x to max_x do
69846: LD_ADDR_VAR 0 5
69850: PUSH
69851: DOUBLE
69852: LD_VAR 0 8
69856: DEC
69857: ST_TO_ADDR
69858: LD_VAR 0 9
69862: PUSH
69863: FOR_TO
69864: IFFALSE 69965
// for _y = min_y to max_y do
69866: LD_ADDR_VAR 0 6
69870: PUSH
69871: DOUBLE
69872: LD_VAR 0 7
69876: DEC
69877: ST_TO_ADDR
69878: LD_VAR 0 10
69882: PUSH
69883: FOR_TO
69884: IFFALSE 69961
// begin if not ValidHex ( _x , _y ) then
69886: LD_VAR 0 5
69890: PPUSH
69891: LD_VAR 0 6
69895: PPUSH
69896: CALL_OW 488
69900: NOT
69901: IFFALSE 69905
// continue ;
69903: GO 69883
// if GetResourceTypeXY ( _x , _y ) then
69905: LD_VAR 0 5
69909: PPUSH
69910: LD_VAR 0 6
69914: PPUSH
69915: CALL_OW 283
69919: IFFALSE 69959
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69921: LD_ADDR_VAR 0 4
69925: PUSH
69926: LD_VAR 0 4
69930: PPUSH
69931: LD_VAR 0 4
69935: PUSH
69936: LD_INT 1
69938: PLUS
69939: PPUSH
69940: LD_VAR 0 5
69944: PUSH
69945: LD_VAR 0 6
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PPUSH
69954: CALL_OW 1
69958: ST_TO_ADDR
// end ;
69959: GO 69883
69961: POP
69962: POP
69963: GO 69863
69965: POP
69966: POP
// end ;
69967: LD_VAR 0 4
69971: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69972: LD_INT 0
69974: PPUSH
69975: PPUSH
69976: PPUSH
69977: PPUSH
69978: PPUSH
69979: PPUSH
69980: PPUSH
69981: PPUSH
// if not units then
69982: LD_VAR 0 1
69986: NOT
69987: IFFALSE 69991
// exit ;
69989: GO 70515
// result := UnitFilter ( units , [ f_ok ] ) ;
69991: LD_ADDR_VAR 0 3
69995: PUSH
69996: LD_VAR 0 1
70000: PPUSH
70001: LD_INT 50
70003: PUSH
70004: EMPTY
70005: LIST
70006: PPUSH
70007: CALL_OW 72
70011: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70012: LD_ADDR_VAR 0 8
70016: PUSH
70017: LD_VAR 0 1
70021: PUSH
70022: LD_INT 1
70024: ARRAY
70025: PPUSH
70026: CALL_OW 255
70030: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70031: LD_ADDR_VAR 0 10
70035: PUSH
70036: LD_INT 29
70038: PUSH
70039: LD_INT 91
70041: PUSH
70042: LD_INT 49
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: LIST
70049: ST_TO_ADDR
// if not result then
70050: LD_VAR 0 3
70054: NOT
70055: IFFALSE 70059
// exit ;
70057: GO 70515
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70059: LD_ADDR_VAR 0 5
70063: PUSH
70064: LD_INT 81
70066: PUSH
70067: LD_VAR 0 8
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PPUSH
70076: CALL_OW 69
70080: ST_TO_ADDR
// for i in result do
70081: LD_ADDR_VAR 0 4
70085: PUSH
70086: LD_VAR 0 3
70090: PUSH
70091: FOR_IN
70092: IFFALSE 70513
// begin tag := GetTag ( i ) + 1 ;
70094: LD_ADDR_VAR 0 9
70098: PUSH
70099: LD_VAR 0 4
70103: PPUSH
70104: CALL_OW 110
70108: PUSH
70109: LD_INT 1
70111: PLUS
70112: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70113: LD_ADDR_VAR 0 7
70117: PUSH
70118: LD_VAR 0 4
70122: PPUSH
70123: CALL_OW 250
70127: PPUSH
70128: LD_VAR 0 4
70132: PPUSH
70133: CALL_OW 251
70137: PPUSH
70138: LD_INT 6
70140: PPUSH
70141: CALL 69714 0 3
70145: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70146: LD_VAR 0 4
70150: PPUSH
70151: CALL_OW 247
70155: PUSH
70156: LD_INT 2
70158: EQUAL
70159: PUSH
70160: LD_VAR 0 7
70164: AND
70165: PUSH
70166: LD_VAR 0 4
70170: PPUSH
70171: CALL_OW 264
70175: PUSH
70176: LD_VAR 0 10
70180: IN
70181: NOT
70182: AND
70183: IFFALSE 70222
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70185: LD_VAR 0 4
70189: PPUSH
70190: LD_VAR 0 7
70194: PUSH
70195: LD_INT 1
70197: ARRAY
70198: PUSH
70199: LD_INT 1
70201: ARRAY
70202: PPUSH
70203: LD_VAR 0 7
70207: PUSH
70208: LD_INT 1
70210: ARRAY
70211: PUSH
70212: LD_INT 2
70214: ARRAY
70215: PPUSH
70216: CALL_OW 116
70220: GO 70511
// if path > tag then
70222: LD_VAR 0 2
70226: PUSH
70227: LD_VAR 0 9
70231: GREATER
70232: IFFALSE 70440
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70234: LD_ADDR_VAR 0 6
70238: PUSH
70239: LD_VAR 0 5
70243: PPUSH
70244: LD_INT 91
70246: PUSH
70247: LD_VAR 0 4
70251: PUSH
70252: LD_INT 8
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: LIST
70259: PPUSH
70260: CALL_OW 72
70264: ST_TO_ADDR
// if nearEnemy then
70265: LD_VAR 0 6
70269: IFFALSE 70338
// begin if GetWeapon ( i ) = ru_time_lapser then
70271: LD_VAR 0 4
70275: PPUSH
70276: CALL_OW 264
70280: PUSH
70281: LD_INT 49
70283: EQUAL
70284: IFFALSE 70312
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70286: LD_VAR 0 4
70290: PPUSH
70291: LD_VAR 0 6
70295: PPUSH
70296: LD_VAR 0 4
70300: PPUSH
70301: CALL_OW 74
70305: PPUSH
70306: CALL_OW 112
70310: GO 70336
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70312: LD_VAR 0 4
70316: PPUSH
70317: LD_VAR 0 6
70321: PPUSH
70322: LD_VAR 0 4
70326: PPUSH
70327: CALL_OW 74
70331: PPUSH
70332: CALL_OW 115
// end else
70336: GO 70438
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70338: LD_VAR 0 4
70342: PPUSH
70343: LD_VAR 0 2
70347: PUSH
70348: LD_VAR 0 9
70352: ARRAY
70353: PUSH
70354: LD_INT 1
70356: ARRAY
70357: PPUSH
70358: LD_VAR 0 2
70362: PUSH
70363: LD_VAR 0 9
70367: ARRAY
70368: PUSH
70369: LD_INT 2
70371: ARRAY
70372: PPUSH
70373: CALL_OW 297
70377: PUSH
70378: LD_INT 6
70380: GREATER
70381: IFFALSE 70424
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70383: LD_VAR 0 4
70387: PPUSH
70388: LD_VAR 0 2
70392: PUSH
70393: LD_VAR 0 9
70397: ARRAY
70398: PUSH
70399: LD_INT 1
70401: ARRAY
70402: PPUSH
70403: LD_VAR 0 2
70407: PUSH
70408: LD_VAR 0 9
70412: ARRAY
70413: PUSH
70414: LD_INT 2
70416: ARRAY
70417: PPUSH
70418: CALL_OW 114
70422: GO 70438
// SetTag ( i , tag ) ;
70424: LD_VAR 0 4
70428: PPUSH
70429: LD_VAR 0 9
70433: PPUSH
70434: CALL_OW 109
// end else
70438: GO 70511
// if enemy then
70440: LD_VAR 0 5
70444: IFFALSE 70511
// begin if GetWeapon ( i ) = ru_time_lapser then
70446: LD_VAR 0 4
70450: PPUSH
70451: CALL_OW 264
70455: PUSH
70456: LD_INT 49
70458: EQUAL
70459: IFFALSE 70487
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70461: LD_VAR 0 4
70465: PPUSH
70466: LD_VAR 0 5
70470: PPUSH
70471: LD_VAR 0 4
70475: PPUSH
70476: CALL_OW 74
70480: PPUSH
70481: CALL_OW 112
70485: GO 70511
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70487: LD_VAR 0 4
70491: PPUSH
70492: LD_VAR 0 5
70496: PPUSH
70497: LD_VAR 0 4
70501: PPUSH
70502: CALL_OW 74
70506: PPUSH
70507: CALL_OW 115
// end ; end ;
70511: GO 70091
70513: POP
70514: POP
// end ;
70515: LD_VAR 0 3
70519: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70520: LD_INT 0
70522: PPUSH
70523: PPUSH
70524: PPUSH
// if not unit or IsInUnit ( unit ) then
70525: LD_VAR 0 1
70529: NOT
70530: PUSH
70531: LD_VAR 0 1
70535: PPUSH
70536: CALL_OW 310
70540: OR
70541: IFFALSE 70545
// exit ;
70543: GO 70636
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70545: LD_ADDR_VAR 0 4
70549: PUSH
70550: LD_VAR 0 1
70554: PPUSH
70555: CALL_OW 250
70559: PPUSH
70560: LD_VAR 0 2
70564: PPUSH
70565: LD_INT 1
70567: PPUSH
70568: CALL_OW 272
70572: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70573: LD_ADDR_VAR 0 5
70577: PUSH
70578: LD_VAR 0 1
70582: PPUSH
70583: CALL_OW 251
70587: PPUSH
70588: LD_VAR 0 2
70592: PPUSH
70593: LD_INT 1
70595: PPUSH
70596: CALL_OW 273
70600: ST_TO_ADDR
// if ValidHex ( x , y ) then
70601: LD_VAR 0 4
70605: PPUSH
70606: LD_VAR 0 5
70610: PPUSH
70611: CALL_OW 488
70615: IFFALSE 70636
// ComTurnXY ( unit , x , y ) ;
70617: LD_VAR 0 1
70621: PPUSH
70622: LD_VAR 0 4
70626: PPUSH
70627: LD_VAR 0 5
70631: PPUSH
70632: CALL_OW 118
// end ;
70636: LD_VAR 0 3
70640: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70641: LD_INT 0
70643: PPUSH
70644: PPUSH
// result := false ;
70645: LD_ADDR_VAR 0 3
70649: PUSH
70650: LD_INT 0
70652: ST_TO_ADDR
// if not units then
70653: LD_VAR 0 2
70657: NOT
70658: IFFALSE 70662
// exit ;
70660: GO 70707
// for i in units do
70662: LD_ADDR_VAR 0 4
70666: PUSH
70667: LD_VAR 0 2
70671: PUSH
70672: FOR_IN
70673: IFFALSE 70705
// if See ( side , i ) then
70675: LD_VAR 0 1
70679: PPUSH
70680: LD_VAR 0 4
70684: PPUSH
70685: CALL_OW 292
70689: IFFALSE 70703
// begin result := true ;
70691: LD_ADDR_VAR 0 3
70695: PUSH
70696: LD_INT 1
70698: ST_TO_ADDR
// exit ;
70699: POP
70700: POP
70701: GO 70707
// end ;
70703: GO 70672
70705: POP
70706: POP
// end ;
70707: LD_VAR 0 3
70711: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70712: LD_INT 0
70714: PPUSH
70715: PPUSH
70716: PPUSH
70717: PPUSH
// if not unit or not points then
70718: LD_VAR 0 1
70722: NOT
70723: PUSH
70724: LD_VAR 0 2
70728: NOT
70729: OR
70730: IFFALSE 70734
// exit ;
70732: GO 70824
// dist := 99999 ;
70734: LD_ADDR_VAR 0 5
70738: PUSH
70739: LD_INT 99999
70741: ST_TO_ADDR
// for i in points do
70742: LD_ADDR_VAR 0 4
70746: PUSH
70747: LD_VAR 0 2
70751: PUSH
70752: FOR_IN
70753: IFFALSE 70822
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70755: LD_ADDR_VAR 0 6
70759: PUSH
70760: LD_VAR 0 1
70764: PPUSH
70765: LD_VAR 0 4
70769: PUSH
70770: LD_INT 1
70772: ARRAY
70773: PPUSH
70774: LD_VAR 0 4
70778: PUSH
70779: LD_INT 2
70781: ARRAY
70782: PPUSH
70783: CALL_OW 297
70787: ST_TO_ADDR
// if tmpDist < dist then
70788: LD_VAR 0 6
70792: PUSH
70793: LD_VAR 0 5
70797: LESS
70798: IFFALSE 70820
// begin result := i ;
70800: LD_ADDR_VAR 0 3
70804: PUSH
70805: LD_VAR 0 4
70809: ST_TO_ADDR
// dist := tmpDist ;
70810: LD_ADDR_VAR 0 5
70814: PUSH
70815: LD_VAR 0 6
70819: ST_TO_ADDR
// end ; end ;
70820: GO 70752
70822: POP
70823: POP
// end ;
70824: LD_VAR 0 3
70828: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70829: LD_INT 0
70831: PPUSH
// uc_side := side ;
70832: LD_ADDR_OWVAR 20
70836: PUSH
70837: LD_VAR 0 1
70841: ST_TO_ADDR
// uc_nation := 3 ;
70842: LD_ADDR_OWVAR 21
70846: PUSH
70847: LD_INT 3
70849: ST_TO_ADDR
// vc_chassis := 25 ;
70850: LD_ADDR_OWVAR 37
70854: PUSH
70855: LD_INT 25
70857: ST_TO_ADDR
// vc_engine := engine_siberite ;
70858: LD_ADDR_OWVAR 39
70862: PUSH
70863: LD_INT 3
70865: ST_TO_ADDR
// vc_control := control_computer ;
70866: LD_ADDR_OWVAR 38
70870: PUSH
70871: LD_INT 3
70873: ST_TO_ADDR
// vc_weapon := 59 ;
70874: LD_ADDR_OWVAR 40
70878: PUSH
70879: LD_INT 59
70881: ST_TO_ADDR
// result := CreateVehicle ;
70882: LD_ADDR_VAR 0 5
70886: PUSH
70887: CALL_OW 45
70891: ST_TO_ADDR
// SetDir ( result , d ) ;
70892: LD_VAR 0 5
70896: PPUSH
70897: LD_VAR 0 4
70901: PPUSH
70902: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70906: LD_VAR 0 5
70910: PPUSH
70911: LD_VAR 0 2
70915: PPUSH
70916: LD_VAR 0 3
70920: PPUSH
70921: LD_INT 0
70923: PPUSH
70924: CALL_OW 48
// end ;
70928: LD_VAR 0 5
70932: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70933: LD_INT 0
70935: PPUSH
70936: PPUSH
70937: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70938: LD_ADDR_VAR 0 2
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70961: LD_VAR 0 1
70965: NOT
70966: PUSH
70967: LD_VAR 0 1
70971: PPUSH
70972: CALL_OW 264
70976: PUSH
70977: LD_INT 12
70979: PUSH
70980: LD_INT 51
70982: PUSH
70983: LD_INT 32
70985: PUSH
70986: LD_INT 89
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: IN
70995: NOT
70996: OR
70997: IFFALSE 71001
// exit ;
70999: GO 71099
// for i := 1 to 3 do
71001: LD_ADDR_VAR 0 3
71005: PUSH
71006: DOUBLE
71007: LD_INT 1
71009: DEC
71010: ST_TO_ADDR
71011: LD_INT 3
71013: PUSH
71014: FOR_TO
71015: IFFALSE 71097
// begin tmp := GetCargo ( cargo , i ) ;
71017: LD_ADDR_VAR 0 4
71021: PUSH
71022: LD_VAR 0 1
71026: PPUSH
71027: LD_VAR 0 3
71031: PPUSH
71032: CALL_OW 289
71036: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71037: LD_ADDR_VAR 0 2
71041: PUSH
71042: LD_VAR 0 2
71046: PPUSH
71047: LD_VAR 0 3
71051: PPUSH
71052: LD_VAR 0 4
71056: PPUSH
71057: CALL_OW 1
71061: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71062: LD_ADDR_VAR 0 2
71066: PUSH
71067: LD_VAR 0 2
71071: PPUSH
71072: LD_INT 4
71074: PPUSH
71075: LD_VAR 0 2
71079: PUSH
71080: LD_INT 4
71082: ARRAY
71083: PUSH
71084: LD_VAR 0 4
71088: PLUS
71089: PPUSH
71090: CALL_OW 1
71094: ST_TO_ADDR
// end ;
71095: GO 71014
71097: POP
71098: POP
// end ;
71099: LD_VAR 0 2
71103: RET
// export function Length ( array ) ; begin
71104: LD_INT 0
71106: PPUSH
// result := array + 0 ;
71107: LD_ADDR_VAR 0 2
71111: PUSH
71112: LD_VAR 0 1
71116: PUSH
71117: LD_INT 0
71119: PLUS
71120: ST_TO_ADDR
// end ;
71121: LD_VAR 0 2
71125: RET
// export function PrepareArray ( array ) ; begin
71126: LD_INT 0
71128: PPUSH
// result := array diff 0 ;
71129: LD_ADDR_VAR 0 2
71133: PUSH
71134: LD_VAR 0 1
71138: PUSH
71139: LD_INT 0
71141: DIFF
71142: ST_TO_ADDR
// if not result [ 1 ] then
71143: LD_VAR 0 2
71147: PUSH
71148: LD_INT 1
71150: ARRAY
71151: NOT
71152: IFFALSE 71172
// result := Delete ( result , 1 ) ;
71154: LD_ADDR_VAR 0 2
71158: PUSH
71159: LD_VAR 0 2
71163: PPUSH
71164: LD_INT 1
71166: PPUSH
71167: CALL_OW 3
71171: ST_TO_ADDR
// end ;
71172: LD_VAR 0 2
71176: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71177: LD_INT 0
71179: PPUSH
71180: PPUSH
71181: PPUSH
71182: PPUSH
// sibRocketRange := 25 ;
71183: LD_ADDR_VAR 0 6
71187: PUSH
71188: LD_INT 25
71190: ST_TO_ADDR
// result := false ;
71191: LD_ADDR_VAR 0 4
71195: PUSH
71196: LD_INT 0
71198: ST_TO_ADDR
// for i := 0 to 5 do
71199: LD_ADDR_VAR 0 5
71203: PUSH
71204: DOUBLE
71205: LD_INT 0
71207: DEC
71208: ST_TO_ADDR
71209: LD_INT 5
71211: PUSH
71212: FOR_TO
71213: IFFALSE 71280
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71215: LD_VAR 0 1
71219: PPUSH
71220: LD_VAR 0 5
71224: PPUSH
71225: LD_VAR 0 6
71229: PPUSH
71230: CALL_OW 272
71234: PPUSH
71235: LD_VAR 0 2
71239: PPUSH
71240: LD_VAR 0 5
71244: PPUSH
71245: LD_VAR 0 6
71249: PPUSH
71250: CALL_OW 273
71254: PPUSH
71255: LD_VAR 0 3
71259: PPUSH
71260: CALL_OW 309
71264: IFFALSE 71278
// begin result := true ;
71266: LD_ADDR_VAR 0 4
71270: PUSH
71271: LD_INT 1
71273: ST_TO_ADDR
// exit ;
71274: POP
71275: POP
71276: GO 71282
// end ;
71278: GO 71212
71280: POP
71281: POP
// end ; end_of_file
71282: LD_VAR 0 4
71286: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71287: LD_VAR 0 1
71291: PPUSH
71292: LD_VAR 0 2
71296: PPUSH
71297: LD_VAR 0 3
71301: PPUSH
71302: LD_VAR 0 4
71306: PPUSH
71307: LD_VAR 0 5
71311: PPUSH
71312: LD_VAR 0 6
71316: PPUSH
71317: CALL 9869 0 6
// end ;
71321: PPOPN 6
71323: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71324: LD_INT 0
71326: PPUSH
// begin if not units then
71327: LD_VAR 0 1
71331: NOT
71332: IFFALSE 71336
// exit ;
71334: GO 71336
// end ;
71336: PPOPN 7
71338: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71339: CALL 9840 0 0
// end ;
71343: PPOPN 1
71345: END
