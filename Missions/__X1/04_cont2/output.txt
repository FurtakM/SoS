// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1990 0 0
// PrepareArabian ;
  23: CALL 1230 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5582 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_OWVAR 67
 668: ARRAY
 669: PPUSH
 670: CALL 504 0 2
// for i := 1 to 2 do
 674: LD_ADDR_VAR 0 3
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 2
 686: PUSH
 687: FOR_TO
 688: IFFALSE 725
// begin hc_class := 21 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 21
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 687
 725: POP
 726: POP
// for i := 1 to 2 do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 2
 739: PUSH
 740: FOR_TO
 741: IFFALSE 778
// begin hc_class := 18 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 18
 750: ST_TO_ADDR
// hc_gallery :=  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 759: CALL_OW 44
 763: PPUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// end ;
 776: GO 740
 778: POP
 779: POP
// for i := 1 to 2 do
 780: LD_ADDR_VAR 0 3
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 2
 792: PUSH
 793: FOR_TO
 794: IFFALSE 831
// begin hc_class := 13 ;
 796: LD_ADDR_OWVAR 28
 800: PUSH
 801: LD_INT 13
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 812: CALL_OW 44
 816: PPUSH
 817: LD_VAR 0 1
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 793
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 2
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
1010: PPUSH
// if not unit then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1225
// side := GetSide ( unit ) ;
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: LD_VAR 0 1
1029: PPUSH
1030: CALL_OW 255
1034: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_INT 22
1042: PUSH
1043: LD_VAR 0 4
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_VAR 0 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: ST_TO_ADDR
// if not tmp then
1073: LD_VAR 0 5
1077: NOT
1078: IFFALSE 1082
// exit ;
1080: GO 1225
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 5
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 32437 0 4
1107: ST_TO_ADDR
// places := 1 ;
1108: LD_ADDR_VAR 0 7
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1116: LD_VAR 0 2
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 7
1144: PUSH
1145: LD_INT 8
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: IN
1159: IFFALSE 1169
// places := 6 ;
1161: LD_ADDR_VAR 0 7
1165: PUSH
1166: LD_INT 6
1168: ST_TO_ADDR
// for i in tmp do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: LD_VAR 0 5
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1223
// begin if UnitsInside ( i ) - places <= 0 then
1182: LD_VAR 0 6
1186: PPUSH
1187: CALL_OW 313
1191: PUSH
1192: LD_VAR 0 7
1196: MINUS
1197: PUSH
1198: LD_INT 0
1200: LESSEQUAL
1201: IFFALSE 1207
// continue else
1203: GO 1179
1205: GO 1221
// begin result := i ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: LD_VAR 0 6
1216: ST_TO_ADDR
// exit ;
1217: POP
1218: POP
1219: GO 1225
// end ; end ;
1221: GO 1179
1223: POP
1224: POP
// end ; end_of_file
1225: LD_VAR 0 3
1229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
// uc_side := 2 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1250: LD_ADDR_EXP 18
1254: PUSH
1255: LD_STRING Heike
1257: PPUSH
1258: LD_EXP 1
1262: NOT
1263: PPUSH
1264: LD_EXP 2
1268: PPUSH
1269: CALL 27016 0 3
1273: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1274: LD_ADDR_EXP 21
1278: PUSH
1279: LD_STRING Ibrahim
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 2
1292: PPUSH
1293: CALL 27016 0 3
1297: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1298: LD_ADDR_EXP 19
1302: PUSH
1303: LD_STRING Givi
1305: PPUSH
1306: LD_EXP 1
1310: NOT
1311: PPUSH
1312: LD_EXP 2
1316: PPUSH
1317: CALL 27016 0 3
1321: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1322: LD_ADDR_EXP 22
1326: PUSH
1327: LD_STRING Kamil
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 2
1340: PPUSH
1341: CALL 27016 0 3
1345: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1346: LD_ADDR_EXP 23
1350: PUSH
1351: LD_STRING Kaia
1353: PPUSH
1354: LD_EXP 1
1358: NOT
1359: PPUSH
1360: LD_EXP 2
1364: PPUSH
1365: CALL 27016 0 3
1369: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1370: LD_ADDR_EXP 24
1374: PUSH
1375: LD_STRING Sophia
1377: PPUSH
1378: LD_EXP 1
1382: NOT
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL 27016 0 3
1393: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1394: LD_ADDR_EXP 25
1398: PUSH
1399: LD_STRING Markov
1401: PPUSH
1402: LD_EXP 1
1406: NOT
1407: PPUSH
1408: LD_EXP 2
1412: PPUSH
1413: CALL 27016 0 3
1417: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1418: LD_ADDR_EXP 28
1422: PUSH
1423: LD_STRING Aviradze
1425: PPUSH
1426: LD_EXP 1
1430: NOT
1431: PPUSH
1432: LD_EXP 2
1436: PPUSH
1437: CALL 27016 0 3
1441: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1442: LD_ADDR_EXP 27
1446: PUSH
1447: LD_STRING Kurt
1449: PPUSH
1450: LD_EXP 1
1454: NOT
1455: PPUSH
1456: LD_EXP 2
1460: PPUSH
1461: CALL 27016 0 3
1465: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_STRING Mike
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 2
1484: PPUSH
1485: CALL 27016 0 3
1489: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1490: LD_ADDR_EXP 29
1494: PUSH
1495: LD_STRING 04_1_others
1497: PPUSH
1498: CALL_OW 31
1502: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1503: LD_ADDR_EXP 31
1507: PUSH
1508: LD_STRING 04_1_apes
1510: PPUSH
1511: CALL_OW 31
1515: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1516: LD_ADDR_EXP 30
1520: PUSH
1521: LD_STRING 04_1_Vehicles
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// uc_side := 5 ;
1531: LD_ADDR_OWVAR 20
1535: PUSH
1536: LD_INT 5
1538: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1539: LD_ADDR_EXP 26
1543: PUSH
1544: LD_STRING Abdul
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: LD_STRING 
1552: PPUSH
1553: CALL 27016 0 3
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1563: LD_STRING 04_1_KaganCaptured
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 30
1573: PUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 69
1588: NOT
1589: AND
1590: PUSH
1591: LD_INT 124
1593: PPUSH
1594: LD_INT 26
1596: PPUSH
1597: CALL_OW 428
1601: PUSH
1602: LD_INT 0
1604: EQUAL
1605: PUSH
1606: LD_INT 124
1608: PPUSH
1609: LD_INT 26
1611: PPUSH
1612: CALL_OW 428
1616: PPUSH
1617: CALL_OW 255
1621: PUSH
1622: LD_INT 2
1624: EQUAL
1625: XOR
1626: AND
1627: IFFALSE 1987
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
// begin enable ;
1636: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1637: LD_EXP 33
1641: NOT
1642: PUSH
1643: LD_EXP 33
1647: PUSH
1648: LD_INT 4
1650: GREATER
1651: OR
1652: IFFALSE 1662
// cargoCounter := 1 ;
1654: LD_ADDR_EXP 33
1658: PUSH
1659: LD_INT 1
1661: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: LD_INT 142
1669: PUSH
1670: LD_INT 15
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 129
1679: PUSH
1680: LD_INT 11
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 138
1689: PUSH
1690: LD_INT 9
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 133
1699: PUSH
1700: LD_INT 10
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// uc_side := 5 ;
1713: LD_ADDR_OWVAR 20
1717: PUSH
1718: LD_INT 5
1720: ST_TO_ADDR
// uc_nation := 2 ;
1721: LD_ADDR_OWVAR 21
1725: PUSH
1726: LD_INT 2
1728: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 32
1746: PPUSH
1747: LD_INT 70
1749: PPUSH
1750: CALL 336 0 7
// veh := CreateVehicle ;
1754: LD_ADDR_VAR 0 1
1758: PUSH
1759: CALL_OW 45
1763: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1776: LD_VAR 0 1
1780: PPUSH
1781: LD_INT 8
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// if not cargoDriver then
1791: LD_EXP 32
1795: NOT
1796: IFFALSE 1821
// begin PrepareHuman ( false , 1 , 3 ) ;
1798: LD_INT 0
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: CALL_OW 380
// cargoDriver := CreateHuman ;
1811: LD_ADDR_EXP 32
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1821: LD_EXP 32
1825: PPUSH
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1850: LD_VAR 0 1
1854: PPUSH
1855: LD_VAR 0 2
1859: PUSH
1860: LD_EXP 33
1864: ARRAY
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: LD_VAR 0 2
1874: PUSH
1875: LD_EXP 33
1879: ARRAY
1880: PUSH
1881: LD_INT 2
1883: ARRAY
1884: PPUSH
1885: CALL_OW 111
// AddComUnload ( veh ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_INT 133
1905: PPUSH
1906: LD_INT 2
1908: PPUSH
1909: CALL_OW 171
// wait ( 0 0$5 ) ;
1913: LD_INT 175
1915: PPUSH
1916: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_INT 133
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL_OW 307
1942: PUSH
1943: LD_VAR 0 1
1947: PPUSH
1948: LD_INT 8
1950: PPUSH
1951: CALL_OW 308
1955: OR
1956: IFFALSE 1920
// RemoveUnit ( cargoDriver ) ;
1958: LD_EXP 32
1962: PPUSH
1963: CALL_OW 64
// RemoveUnit ( veh ) ;
1967: LD_VAR 0 1
1971: PPUSH
1972: CALL_OW 64
// if tick >= 20 20$00 then
1976: LD_OWVAR 1
1980: PUSH
1981: LD_INT 42000
1983: GREATEREQUAL
1984: IFFALSE 1987
// disable ;
1986: DISABLE
// end ; end_of_file
1987: PPOPN 2
1989: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// uc_side := 3 ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_INT 3
2008: ST_TO_ADDR
// uc_nation := 3 ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_INT 3
2016: ST_TO_ADDR
// ruForce := [ ] ;
2017: LD_ADDR_EXP 37
2021: PUSH
2022: EMPTY
2023: ST_TO_ADDR
// ruMech := [ ] ;
2024: LD_ADDR_EXP 39
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// ruEng := [ ] ;
2031: LD_ADDR_EXP 38
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// ruSci := [ ] ;
2038: LD_ADDR_EXP 40
2042: PUSH
2043: EMPTY
2044: ST_TO_ADDR
// ruMobile := [ ] ;
2045: LD_ADDR_EXP 41
2049: PUSH
2050: EMPTY
2051: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2052: LD_ADDR_EXP 34
2056: PUSH
2057: LD_STRING Burlak
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: LD_STRING 
2065: PPUSH
2066: CALL 27016 0 3
2070: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2071: LD_ADDR_EXP 35
2075: PUSH
2076: LD_STRING Gaydar
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 27016 0 3
2089: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2090: LD_ADDR_EXP 36
2094: PUSH
2095: LD_STRING Kuzmov
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 27016 0 3
2108: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2109: LD_EXP 36
2113: PPUSH
2114: LD_INT 200
2116: PPUSH
2117: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2121: LD_INT 200
2123: PPUSH
2124: LD_STRING chuikov
2126: PPUSH
2127: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 ] [ Difficulty ] ) ;
2131: LD_INT 200
2133: PPUSH
2134: CALL_OW 274
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 800
2144: PUSH
2145: LD_INT 1000
2147: PUSH
2148: LD_INT 1250
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2166: LD_INT 200
2168: PPUSH
2169: CALL_OW 274
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_INT 160
2179: PPUSH
2180: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2184: LD_INT 225
2186: PPUSH
2187: CALL_OW 274
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 200
2197: PPUSH
2198: CALL_OW 277
// oil := 150 ;
2202: LD_ADDR_VAR 0 9
2206: PUSH
2207: LD_INT 150
2209: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
2210: LD_EXP 5
2214: PUSH
2215: LD_INT 94500
2217: PUSH
2218: LD_INT 84000
2220: PUSH
2221: LD_INT 73500
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_OWVAR 67
2233: ARRAY
2234: GREATEREQUAL
2235: IFFALSE 2390
// begin oil := 450 ;
2237: LD_ADDR_VAR 0 9
2241: PUSH
2242: LD_INT 450
2244: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_INT 123
2252: PUSH
2253: LD_INT 17
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 31
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 152
2270: PUSH
2271: LD_INT 38
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: LD_INT 31
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 81
2288: PUSH
2289: LD_INT 6
2291: PUSH
2292: LD_INT 4
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 113
2306: PUSH
2307: LD_INT 67
2309: PUSH
2310: LD_INT 4
2312: PUSH
2313: LD_INT 32
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// for i in tmp do
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_VAR 0 7
2337: PUSH
2338: FOR_IN
2339: IFFALSE 2388
// begin bc_type := i [ 4 ] ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 2
2371: ARRAY
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 3
2380: ARRAY
2381: PPUSH
2382: CALL_OW 47
// end ;
2386: GO 2338
2388: POP
2389: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2390: LD_INT 225
2392: PPUSH
2393: CALL_OW 274
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: LD_VAR 0 9
2405: PPUSH
2406: CALL_OW 277
// if Difficulty > 1 then
2410: LD_OWVAR 67
2414: PUSH
2415: LD_INT 1
2417: GREATER
2418: IFFALSE 2513
// begin bc_type := b_bunker ;
2420: LD_ADDR_OWVAR 42
2424: PUSH
2425: LD_INT 32
2427: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_INT 121
2435: PUSH
2436: LD_INT 85
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 93
2449: PUSH
2450: LD_INT 72
2452: PUSH
2453: LD_INT 1
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: ST_TO_ADDR
// for i in tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: LD_VAR 0 7
2474: PUSH
2475: FOR_IN
2476: IFFALSE 2511
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2478: LD_VAR 0 4
2482: PUSH
2483: LD_INT 1
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PPUSH
2496: LD_VAR 0 4
2500: PUSH
2501: LD_INT 3
2503: ARRAY
2504: PPUSH
2505: CALL_OW 47
2509: GO 2475
2511: POP
2512: POP
// end ; base := GetBase ( ruMainBase ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_INT 200
2520: PPUSH
2521: CALL_OW 274
2525: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 417
2540: ST_TO_ADDR
// for b in blist do
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 3
2550: PUSH
2551: FOR_IN
2552: IFFALSE 3003
// begin if b [ 1 ] = b_factory then
2554: LD_VAR 0 5
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_INT 3
2565: EQUAL
2566: IFFALSE 2717
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2568: LD_ADDR_VAR 0 8
2572: PUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 5
2586: PUSH
2587: LD_INT 3
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_INT 2
2608: PUSH
2609: LD_INT 2
2611: PUSH
2612: LD_OWVAR 67
2616: PLUS
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_EXP 10
2626: PUSH
2627: LD_INT 3
2629: GREATER
2630: PUSH
2631: LD_INT 1
2633: PLUS
2634: ARRAY
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2713
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2639: LD_INT 0
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 1
2647: PUSH
2648: LD_OWVAR 67
2652: PLUS
2653: PPUSH
2654: CALL_OW 380
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 6
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2668: LD_ADDR_EXP 39
2672: PUSH
2673: LD_EXP 39
2677: PPUSH
2678: LD_EXP 39
2682: PUSH
2683: LD_INT 1
2685: PLUS
2686: PPUSH
2687: LD_VAR 0 6
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2697: LD_VAR 0 6
2701: PPUSH
2702: LD_VAR 0 8
2706: PPUSH
2707: CALL_OW 52
// end ;
2711: GO 2636
2713: POP
2714: POP
// end else
2715: GO 3001
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2717: LD_VAR 0 5
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: IN
2744: IFFALSE 2854
// begin for i := 1 to 2 do
2746: LD_ADDR_VAR 0 4
2750: PUSH
2751: DOUBLE
2752: LD_INT 1
2754: DEC
2755: ST_TO_ADDR
2756: LD_INT 2
2758: PUSH
2759: FOR_TO
2760: IFFALSE 2850
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_OWVAR 67
2772: PPUSH
2773: CALL_OW 380
// un := CreateHuman ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2787: LD_ADDR_EXP 40
2791: PUSH
2792: LD_EXP 40
2796: PPUSH
2797: LD_EXP 40
2801: PUSH
2802: LD_INT 1
2804: PLUS
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2816: LD_VAR 0 6
2820: PPUSH
2821: LD_VAR 0 5
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 5
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: CALL_OW 428
2843: PPUSH
2844: CALL_OW 52
// end ;
2848: GO 2759
2850: POP
2851: POP
// end else
2852: GO 3001
// if b [ 1 ] = b_warehouse then
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 1
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: EQUAL
2866: IFFALSE 3001
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 1
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2999
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: LD_OWVAR 67
2921: PPUSH
2922: CALL_OW 380
// un := CreateHuman ;
2926: LD_ADDR_VAR 0 6
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2936: LD_ADDR_EXP 38
2940: PUSH
2941: LD_EXP 38
2945: PPUSH
2946: LD_EXP 38
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: PPUSH
2955: LD_VAR 0 6
2959: PPUSH
2960: CALL_OW 1
2964: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2965: LD_VAR 0 6
2969: PPUSH
2970: LD_VAR 0 5
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: CALL_OW 428
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2908
2999: POP
3000: POP
// end ; end ;
3001: GO 2551
3003: POP
3004: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 22
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 21
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 69
3038: ST_TO_ADDR
// for b in blist do
3039: LD_ADDR_VAR 0 5
3043: PUSH
3044: LD_VAR 0 3
3048: PUSH
3049: FOR_IN
3050: IFFALSE 3072
// SetBLevel ( b , 3 + Difficulty ) ;
3052: LD_VAR 0 5
3056: PPUSH
3057: LD_INT 3
3059: PUSH
3060: LD_OWVAR 67
3064: PLUS
3065: PPUSH
3066: CALL_OW 241
3070: GO 3049
3072: POP
3073: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3074: LD_ADDR_VAR 0 3
3078: PUSH
3079: LD_INT 22
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 30
3091: PUSH
3092: LD_INT 32
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// for b in blist do
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_VAR 0 3
3117: PUSH
3118: FOR_IN
3119: IFFALSE 3228
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3121: LD_INT 0
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 1
3129: PUSH
3130: LD_OWVAR 67
3134: PLUS
3135: PPUSH
3136: CALL_OW 380
// un := CreateHuman ;
3140: LD_ADDR_VAR 0 6
3144: PUSH
3145: CALL_OW 44
3149: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3150: LD_ADDR_EXP 37
3154: PUSH
3155: LD_EXP 37
3159: PPUSH
3160: LD_EXP 37
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3193: LD_VAR 0 5
3197: PPUSH
3198: LD_INT 44
3200: PUSH
3201: LD_INT 43
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: LD_VAR 0 5
3212: PUSH
3213: LD_INT 2
3215: MOD
3216: PUSH
3217: LD_INT 1
3219: PLUS
3220: ARRAY
3221: PPUSH
3222: CALL_OW 431
// end ;
3226: GO 3118
3228: POP
3229: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 22
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 31
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// for b in blist do
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_VAR 0 3
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3374
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 1
3285: PUSH
3286: LD_OWVAR 67
3290: PLUS
3291: PPUSH
3292: CALL_OW 380
// un := CreateHuman ;
3296: LD_ADDR_VAR 0 6
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3306: LD_ADDR_EXP 37
3310: PUSH
3311: LD_EXP 37
3315: PPUSH
3316: LD_EXP 37
3320: PUSH
3321: LD_INT 1
3323: PLUS
3324: PPUSH
3325: LD_VAR 0 6
3329: PPUSH
3330: CALL_OW 1
3334: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3335: LD_VAR 0 6
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: CALL_OW 254
3349: PUSH
3350: LD_INT 3
3352: PLUS
3353: PPUSH
3354: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3358: LD_VAR 0 6
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: CALL_OW 52
// end ;
3372: GO 3274
3374: POP
3375: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 30
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 5
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// for b in blist do
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: FOR_IN
3439: IFFALSE 3535
// begin for i := 1 to 2 do
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_INT 2
3453: PUSH
3454: FOR_TO
3455: IFFALSE 3531
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 1
3465: PUSH
3466: LD_OWVAR 67
3470: PLUS
3471: PPUSH
3472: CALL_OW 380
// un := CreateHuman ;
3476: LD_ADDR_VAR 0 6
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3486: LD_ADDR_EXP 37
3490: PUSH
3491: LD_EXP 37
3495: PPUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 6
3509: PPUSH
3510: CALL_OW 1
3514: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3515: LD_VAR 0 6
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL_OW 52
// end ;
3529: GO 3454
3531: POP
3532: POP
// end ;
3533: GO 3438
3535: POP
3536: POP
// if ibrahimOnRuSide then
3537: LD_EXP 3
3541: IFFALSE 3639
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3543: LD_ADDR_EXP 21
3547: PUSH
3548: LD_STRING IbrahimRu
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: LD_STRING 
3556: PPUSH
3557: CALL 27016 0 3
3561: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3562: LD_EXP 21
3566: PPUSH
3567: LD_INT 121
3569: PPUSH
3570: LD_INT 78
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL_OW 48
// ComHold ( Ibrahim ) ;
3580: LD_EXP 21
3584: PPUSH
3585: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3589: LD_INT 1
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 2
3597: PPUSH
3598: CALL_OW 380
// ruSol := CreateHuman ;
3602: LD_ADDR_EXP 42
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3612: LD_EXP 42
3616: PPUSH
3617: LD_INT 121
3619: PPUSH
3620: LD_INT 75
3622: PPUSH
3623: LD_INT 0
3625: PPUSH
3626: CALL_OW 48
// ComHold ( ruSol ) ;
3630: LD_EXP 42
3634: PPUSH
3635: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 2
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_OWVAR 67
3659: PLUS
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_EXP 10
3669: PUSH
3670: LD_INT 3
3672: GREATER
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: ARRAY
3678: PUSH
3679: FOR_TO
3680: IFFALSE 3749
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3682: LD_VAR 0 8
3686: PPUSH
3687: LD_INT 21
3689: PUSH
3690: LD_INT 23
3692: PUSH
3693: LD_INT 24
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_VAR 0 4
3705: PUSH
3706: LD_INT 3
3708: MOD
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: ARRAY
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_INT 43
3723: PUSH
3724: LD_INT 44
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: PPUSH
3743: CALL_OW 185
3747: GO 3679
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 1
3755: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3756: LD_EXP 41
3760: PUSH
3761: LD_EXP 4
3765: NOT
3766: AND
3767: IFFALSE 4254
3769: GO 3771
3771: DISABLE
3772: LD_INT 0
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
// begin enable ;
3779: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_EXP 41
3789: PPUSH
3790: LD_INT 21
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PPUSH
3800: CALL_OW 72
3804: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 81
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 95
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 95
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 95
3845: PUSH
3846: LD_INT 6
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 95
3855: PUSH
3856: LD_INT 7
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: ST_TO_ADDR
// for i in filter do
3879: LD_ADDR_VAR 0 1
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: FOR_IN
3890: IFFALSE 4252
// begin tmp := IsDrivenBy ( i ) ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 311
3906: ST_TO_ADDR
// if not tmp then
3907: LD_VAR 0 3
3911: NOT
3912: IFFALSE 3916
// continue ;
3914: GO 3889
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 261
3925: PUSH
3926: LD_INT 90
3928: GREATER
3929: PUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 110
3939: PUSH
3940: LD_INT 2
3942: EQUAL
3943: AND
3944: IFFALSE 3960
// SetTag ( i , 0 ) else
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 109
3958: GO 4003
// if GetTag ( i ) = 2 then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 110
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: IFFALSE 4003
// begin x := rand ( 1 , 2 ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 12
3990: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_INT 200
3998: PPUSH
3999: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 600
4015: GREATEREQUAL
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 110
4026: NOT
4027: AND
4028: IFFALSE 4054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_VAR 0 4
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 74
4049: PPUSH
4050: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: LD_INT 600
4066: LESS
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 110
4077: NOT
4078: AND
4079: IFFALSE 4108
// begin SetTag ( i , 1 ) ;
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 112
4100: PPUSH
4101: LD_INT 119
4103: PPUSH
4104: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 110
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: PUSH
4122: LD_VAR 0 1
4126: PPUSH
4127: LD_INT 112
4129: PPUSH
4130: LD_INT 119
4132: PPUSH
4133: CALL_OW 297
4137: PUSH
4138: LD_INT 9
4140: LESS
4141: AND
4142: PUSH
4143: LD_VAR 0 3
4147: AND
4148: IFFALSE 4250
// begin ComExitVehicle ( tmp ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 256
4189: PUSH
4190: LD_INT 1000
4192: EQUAL
4193: IFFALSE 4173
// ComEnterUnit ( tmp , i ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 261
4218: PUSH
4219: LD_INT 50
4221: LESSEQUAL
4222: IFFALSE 4238
// SetTag ( i , 2 ) else
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 109
4236: GO 4250
// SetTag ( i , 0 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL_OW 109
// end ; end ;
4250: GO 3889
4252: POP
4253: POP
// end ;
4254: PPOPN 5
4256: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4257: LD_EXP 4
4261: NOT
4262: PUSH
4263: LD_EXP 38
4267: AND
4268: IFFALSE 4529
4270: GO 4272
4272: DISABLE
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
// begin enable ;
4279: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 24
4313: PUSH
4314: LD_INT 1000
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 70
4334: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: LD_EXP 38
4344: PPUSH
4345: LD_INT 50
4347: PUSH
4348: EMPTY
4349: LIST
4350: PPUSH
4351: CALL_OW 72
4355: ST_TO_ADDR
// if filter and tmp then
4356: LD_VAR 0 2
4360: PUSH
4361: LD_VAR 0 3
4365: AND
4366: IFFALSE 4458
// begin for i in tmp do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 3
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4454
// begin if GetTag ( i ) = tEscape then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_EXP 17
4395: EQUAL
4396: IFFALSE 4400
// continue ;
4398: GO 4378
// if IsInUnit ( i ) then
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 310
4409: IFFALSE 4422
// ComExitBuilding ( i ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 122
4420: GO 4452
// if not HasTask ( i ) then
4422: LD_VAR 0 1
4426: PPUSH
4427: CALL_OW 314
4431: NOT
4432: IFFALSE 4452
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_VAR 0 2
4443: PUSH
4444: LD_INT 1
4446: ARRAY
4447: PPUSH
4448: CALL_OW 130
// end ;
4452: GO 4378
4454: POP
4455: POP
// end else
4456: GO 4529
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 72
4480: IFFALSE 4529
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4482: LD_ADDR_VAR 0 1
4486: PUSH
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 3
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: EMPTY
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 72
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4527
// ComEnterUnit ( i , ruMainBase ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 200
4520: PPUSH
4521: CALL_OW 120
4525: GO 4510
4527: POP
4528: POP
// end ; end ;
4529: PPOPN 4
4531: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4532: LD_EXP 4
4536: NOT
4537: PUSH
4538: LD_EXP 40
4542: AND
4543: IFFALSE 4822
4545: GO 4547
4547: DISABLE
4548: LD_INT 0
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
// begin enable ;
4554: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 24
4588: PUSH
4589: LD_INT 1000
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 70
4609: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_EXP 40
4619: PPUSH
4620: LD_INT 50
4622: PUSH
4623: EMPTY
4624: LIST
4625: PPUSH
4626: CALL_OW 72
4630: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4631: LD_ADDR_VAR 0 4
4635: PUSH
4636: LD_INT 118
4638: PPUSH
4639: LD_INT 121
4641: PPUSH
4642: CALL_OW 428
4646: ST_TO_ADDR
// if filter and tmp then
4647: LD_VAR 0 2
4651: PUSH
4652: LD_VAR 0 3
4656: AND
4657: IFFALSE 4749
// begin for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 3
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4745
// begin if GetTag ( i ) = tEscape then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 110
4681: PUSH
4682: LD_EXP 17
4686: EQUAL
4687: IFFALSE 4691
// continue ;
4689: GO 4669
// if IsInUnit ( i ) then
4691: LD_VAR 0 1
4695: PPUSH
4696: CALL_OW 310
4700: IFFALSE 4713
// ComExitBuilding ( i ) else
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 122
4711: GO 4743
// if not HasTask ( i ) then
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 314
4722: NOT
4723: IFFALSE 4743
// ComHeal ( i , filter [ 1 ] ) ;
4725: LD_VAR 0 1
4729: PPUSH
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 128
// end ;
4743: GO 4669
4745: POP
4746: POP
// end else
4747: GO 4822
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 54
4759: PUSH
4760: EMPTY
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: IFFALSE 4822
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4773: LD_ADDR_VAR 0 1
4777: PUSH
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4820
// ComEnterUnit ( i , lab ) ;
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 120
4818: GO 4801
4820: POP
4821: POP
// end ; end ; end_of_file
4822: PPOPN 4
4824: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_EXP 18
4834: EQUAL
4835: IFFALSE 4844
// YouLost ( Heike ) ;
4837: LD_STRING Heike
4839: PPUSH
4840: CALL_OW 104
// if un in ruEng then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_EXP 38
4853: IN
4854: IFFALSE 4872
// ruEng := ruEng diff un ;
4856: LD_ADDR_EXP 38
4860: PUSH
4861: LD_EXP 38
4865: PUSH
4866: LD_VAR 0 1
4870: DIFF
4871: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 23
4899: PUSH
4900: LD_INT 2
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: IN
4917: IFFALSE 4933
// loseCounter := loseCounter + 1 ;
4919: LD_ADDR_EXP 6
4923: PUSH
4924: LD_EXP 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: ST_TO_ADDR
// end ;
4933: PPOPN 1
4935: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// begin if un in ruMobile then
4940: LD_VAR 0 2
4944: PUSH
4945: LD_EXP 41
4949: IN
4950: IFFALSE 5109
// begin ruMobile := ruMobile diff un ;
4952: LD_ADDR_EXP 41
4956: PUSH
4957: LD_EXP 41
4961: PUSH
4962: LD_VAR 0 2
4966: DIFF
4967: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: CALL_OW 264
4982: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4983: LD_ADDR_VAR 0 6
4987: PUSH
4988: LD_INT 110
4990: PPUSH
4991: LD_INT 126
4993: PPUSH
4994: CALL_OW 428
4998: ST_TO_ADDR
// if not driver or not fac then
4999: LD_VAR 0 1
5003: NOT
5004: PUSH
5005: LD_VAR 0 6
5009: NOT
5010: OR
5011: IFFALSE 5015
// exit ;
5013: GO 5109
// AddComMoveXY ( driver , 111 , 121 ) ;
5015: LD_VAR 0 1
5019: PPUSH
5020: LD_INT 111
5022: PPUSH
5023: LD_INT 121
5025: PPUSH
5026: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_VAR 0 6
5039: PPUSH
5040: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5044: LD_INT 35
5046: PPUSH
5047: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 301
5060: PUSH
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: OR
5071: IFFALSE 5044
// if IsDead ( driver ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 301
5082: IFFALSE 5086
// exit ;
5084: GO 5109
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 21
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_VAR 0 5
5104: PPUSH
5105: CALL_OW 185
// end ; end ;
5109: PPOPN 6
5111: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5112: LD_VAR 0 2
5116: PPUSH
5117: CALL_OW 255
5121: PUSH
5122: LD_INT 3
5124: EQUAL
5125: IFFALSE 5171
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5127: LD_ADDR_EXP 41
5131: PUSH
5132: LD_EXP 41
5136: PPUSH
5137: LD_EXP 41
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: PPUSH
5146: LD_VAR 0 1
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 110
5163: PPUSH
5164: LD_INT 117
5166: PPUSH
5167: CALL_OW 171
// end ; end ;
5171: PPOPN 2
5173: END
// on LeaveBuilding ( b , un ) do var barracks ;
5174: LD_INT 0
5176: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 130
5184: PPUSH
5185: LD_INT 17
5187: PPUSH
5188: CALL_OW 428
5192: PUSH
5193: LD_INT 138
5195: PPUSH
5196: LD_INT 22
5198: PPUSH
5199: CALL_OW 428
5203: PUSH
5204: LD_INT 123
5206: PPUSH
5207: LD_INT 17
5209: PPUSH
5210: CALL_OW 428
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: IFFALSE 5244
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 135
5229: PPUSH
5230: LD_INT 31
5232: PPUSH
5233: CALL_OW 428
5237: PPUSH
5238: CALL_OW 180
// exit ;
5242: GO 5518
// end ; if b = HexInfo ( 135 , 31 ) then
5244: LD_VAR 0 1
5248: PUSH
5249: LD_INT 135
5251: PPUSH
5252: LD_INT 31
5254: PPUSH
5255: CALL_OW 428
5259: EQUAL
5260: IFFALSE 5332
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 106
5269: PPUSH
5270: LD_INT 51
5272: PPUSH
5273: CALL_OW 428
5277: PPUSH
5278: CALL_OW 180
// if not explodeFirstDepot then
5282: LD_EXP 12
5286: NOT
5287: IFFALSE 5330
// begin explodeFirstDepot := true ;
5289: LD_ADDR_EXP 12
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5297: LD_INT 525
5299: PPUSH
5300: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5304: LD_INT 127
5306: PPUSH
5307: LD_INT 27
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5317: LD_INT 125
5319: PPUSH
5320: LD_INT 29
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 453
// end ; exit ;
5330: GO 5518
// end ; if b = HexInfo ( 106 , 51 ) then
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 106
5339: PPUSH
5340: LD_INT 51
5342: PPUSH
5343: CALL_OW 428
5347: EQUAL
5348: IFFALSE 5448
// begin AddComMoveXY ( un , 106 , 93 ) ;
5350: LD_VAR 0 2
5354: PPUSH
5355: LD_INT 106
5357: PPUSH
5358: LD_INT 93
5360: PPUSH
5361: CALL_OW 171
// if not explodeSecondDepot then
5365: LD_EXP 13
5369: NOT
5370: IFFALSE 5446
// begin explodeSecondDepot := true ;
5372: LD_ADDR_EXP 13
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5380: LD_INT 420
5382: PPUSH
5383: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5387: LD_INT 111
5389: PPUSH
5390: LD_INT 75
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5400: LD_INT 111
5402: PPUSH
5403: LD_INT 75
5405: PPUSH
5406: LD_INT 1
5408: PPUSH
5409: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5413: LD_INT 108
5415: PPUSH
5416: LD_INT 69
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: CALL_OW 453
// wait ( 0 0$2 ) ;
5426: LD_INT 70
5428: PPUSH
5429: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5433: LD_INT 94
5435: PPUSH
5436: LD_INT 65
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 453
// end ; exit ;
5446: GO 5518
// end ; if GetBType ( b ) = b_bunker then
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 266
5457: PUSH
5458: LD_INT 32
5460: EQUAL
5461: IFFALSE 5518
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL 1004 0 2
5480: ST_TO_ADDR
// if barracks then
5481: LD_VAR 0 3
5485: IFFALSE 5503
// AddComEnterUnit ( un , barracks ) else
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 180
5501: GO 5518
// AddComMoveXY ( un , 116 , 110 ) ;
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 116
5510: PPUSH
5511: LD_INT 110
5513: PPUSH
5514: CALL_OW 171
// end ; end ;
5518: PPOPN 3
5520: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_EXP 23
5530: EQUAL
5531: PUSH
5532: LD_VAR 0 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: AND
5548: IFFALSE 5579
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5550: LD_ADDR_EXP 8
5554: PUSH
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 250
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL_OW 251
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// end ; end_of_file
5579: PPOPN 3
5581: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// InGameOn ;
5590: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5594: LD_INT 5
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 343
// music_nat := 4 ;
5604: LD_ADDR_OWVAR 71
5608: PUSH
5609: LD_INT 4
5611: ST_TO_ADDR
// music_class := music_combat ;
5612: LD_ADDR_OWVAR 72
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5620: LD_INT 133
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 2
5628: PPUSH
5629: LD_INT 10
5631: PPUSH
5632: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5636: LD_INT 133
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: CALL_OW 86
// wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// uc_side := 6 ;
5653: LD_ADDR_OWVAR 20
5657: PUSH
5658: LD_INT 6
5660: ST_TO_ADDR
// uc_nation := 3 ;
5661: LD_ADDR_OWVAR 21
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// rutmp := [ ] ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: EMPTY
5675: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5676: LD_INT 6
5678: PPUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 21
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 44
5693: PPUSH
5694: LD_INT 66
5696: PPUSH
5697: CALL 336 0 7
// veh := CreateVehicle ;
5701: LD_ADDR_VAR 0 4
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5711: LD_VAR 0 4
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 8
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: CALL_OW 49
// SetLives ( veh , 500 ) ;
5738: LD_VAR 0 4
5742: PPUSH
5743: LD_INT 500
5745: PPUSH
5746: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5763: CALL_OW 44
5767: PPUSH
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5777: LD_VAR 0 4
5781: PPUSH
5782: LD_INT 133
5784: PPUSH
5785: LD_INT 11
5787: PPUSH
5788: CALL_OW 111
// rutmp := [ veh ] ;
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: EMPTY
5803: LIST
5804: ST_TO_ADDR
// for i := 1 to 4 do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 4
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5926
// begin PrepareHuman ( false , i , 2 ) ;
5821: LD_INT 0
5823: PPUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: LD_INT 2
5831: PPUSH
5832: CALL_OW 380
// un := CreateHuman ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 8
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 6
5882: PPUSH
5883: LD_VAR 0 6
5887: PUSH
5888: LD_INT 1
5890: PLUS
5891: PPUSH
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 1
5901: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 11
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5917: LD_INT 18
5919: PPUSH
5920: CALL_OW 67
// end ;
5924: GO 5818
5926: POP
5927: POP
// for i in rutmp do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: LD_VAR 0 6
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5988
// begin AddComMoveXY ( i , 99 , 65 ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 99
5948: PPUSH
5949: LD_INT 65
5951: PPUSH
5952: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_INT 76
5963: PPUSH
5964: LD_INT 108
5966: PPUSH
5967: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 92
5978: PPUSH
5979: LD_INT 176
5981: PPUSH
5982: CALL_OW 171
// end ;
5986: GO 5938
5988: POP
5989: POP
// wait ( 0 0$10 ) ;
5990: LD_INT 350
5992: PPUSH
5993: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_EXP 18
6006: PUSH
6007: LD_EXP 19
6011: PUSH
6012: LD_EXP 20
6016: PUSH
6017: LD_EXP 21
6021: PUSH
6022: LD_EXP 22
6026: PUSH
6027: LD_EXP 23
6031: PUSH
6032: LD_EXP 24
6036: PUSH
6037: LD_EXP 25
6041: PUSH
6042: LD_EXP 27
6046: PUSH
6047: LD_EXP 28
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: LD_EXP 29
6068: UNION
6069: ST_TO_ADDR
// tmp := tmp diff 0 ;
6070: LD_ADDR_VAR 0 5
6074: PUSH
6075: LD_VAR 0 5
6079: PUSH
6080: LD_INT 0
6082: DIFF
6083: ST_TO_ADDR
// for i in heikeVehicles do
6084: LD_ADDR_VAR 0 2
6088: PUSH
6089: LD_EXP 30
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6361
// begin if not tmp then
6097: LD_VAR 0 5
6101: NOT
6102: IFFALSE 6106
// continue ;
6104: GO 6094
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6106: LD_INT 2
6108: PPUSH
6109: LD_VAR 0 2
6113: PUSH
6114: LD_INT 5
6116: ARRAY
6117: PPUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 3
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 2
6149: PUSH
6150: LD_INT 4
6152: ARRAY
6153: PPUSH
6154: LD_INT 34
6156: PPUSH
6157: CALL 336 0 7
// veh := CreateVehicle ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: CALL_OW 45
6170: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 4
6178: ARRAY
6179: PUSH
6180: LD_INT 51
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: IN
6194: IFFALSE 6274
// begin if i [ 7 ] [ 1 ] then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 7
6203: ARRAY
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: IFFALSE 6235
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6210: LD_VAR 0 4
6214: PPUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 7
6225: ARRAY
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PPUSH
6231: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_INT 7
6242: ARRAY
6243: PUSH
6244: LD_INT 2
6246: ARRAY
6247: IFFALSE 6274
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6249: LD_VAR 0 4
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 7
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 8
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6301: LD_VAR 0 5
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 4
6314: PPUSH
6315: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 5
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 3
6336: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6337: LD_VAR 0 4
6341: PPUSH
6342: LD_INT 133
6344: PPUSH
6345: LD_INT 7
6347: PPUSH
6348: CALL_OW 114
// wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// end ;
6359: GO 6094
6361: POP
6362: POP
// if tmp then
6363: LD_VAR 0 5
6367: IFFALSE 6423
// for i in tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_VAR 0 5
6378: PUSH
6379: FOR_IN
6380: IFFALSE 6421
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 10
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6397: LD_VAR 0 2
6401: PPUSH
6402: LD_INT 146
6404: PPUSH
6405: LD_INT 7
6407: PPUSH
6408: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6412: LD_INT 18
6414: PPUSH
6415: CALL_OW 67
// end ;
6419: GO 6379
6421: POP
6422: POP
// if heikeApes then
6423: LD_EXP 31
6427: IFFALSE 6483
// for i in heikeApes do
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_EXP 31
6438: PUSH
6439: FOR_IN
6440: IFFALSE 6481
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6442: LD_VAR 0 2
6446: PPUSH
6447: LD_INT 10
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 146
6464: PPUSH
6465: LD_INT 7
6467: PPUSH
6468: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6472: LD_INT 18
6474: PPUSH
6475: CALL_OW 67
// end ;
6479: GO 6439
6481: POP
6482: POP
// DialogueOn ;
6483: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6487: LD_EXP 18
6491: PPUSH
6492: LD_STRING DH-outpost-a-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6503: LD_INT 133
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 2
6511: PPUSH
6512: CALL_OW 331
// InGameOff ;
6516: CALL_OW 9
// music_nat := 0 ;
6520: LD_ADDR_OWVAR 71
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// music_class := 0 ;
6528: LD_ADDR_OWVAR 72
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6536: LD_STRING Outposts
6538: PPUSH
6539: CALL_OW 337
// SaveForQuickRestart ;
6543: CALL_OW 22
// end ;
6547: LD_VAR 0 1
6551: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6552: LD_INT 22
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 91
6564: PUSH
6565: LD_EXP 21
6569: PUSH
6570: LD_INT 20
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_EXP 3
6591: AND
6592: PUSH
6593: LD_EXP 21
6597: PPUSH
6598: CALL_OW 302
6602: AND
6603: IFFALSE 6850
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
// begin IbrahimBetrayal ;
6614: CALL 6853 0 0
// repeat wait ( 0 0$1 ) ;
6618: LD_INT 35
6620: PPUSH
6621: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6625: LD_EXP 21
6629: PPUSH
6630: CALL_OW 301
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 91
6647: PUSH
6648: LD_EXP 21
6652: PUSH
6653: LD_INT 6
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: PUSH
6670: LD_EXP 21
6674: PPUSH
6675: CALL_OW 302
6679: AND
6680: OR
6681: IFFALSE 6618
// if IsDead ( Ibrahim ) then
6683: LD_EXP 21
6687: PPUSH
6688: CALL_OW 301
6692: IFFALSE 6696
// exit ;
6694: GO 6850
// x := GetX ( Ibrahim ) ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 21
6705: PPUSH
6706: CALL_OW 250
6710: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_EXP 21
6720: PPUSH
6721: CALL_OW 251
6725: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: LD_EXP 21
6735: PPUSH
6736: CALL_OW 254
6740: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6741: LD_ADDR_VAR 0 4
6745: PUSH
6746: LD_EXP 21
6750: PPUSH
6751: CALL_OW 256
6755: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6756: LD_EXP 21
6760: PPUSH
6761: CALL_OW 64
// uc_side := 2 ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_INT 2
6772: ST_TO_ADDR
// uc_nation := 2 ;
6773: LD_ADDR_OWVAR 21
6777: PUSH
6778: LD_INT 2
6780: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6781: LD_ADDR_EXP 21
6785: PUSH
6786: LD_STRING Ibrahim
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: LD_STRING 
6794: PPUSH
6795: CALL 27016 0 3
6799: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6800: LD_EXP 21
6804: PPUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6814: LD_EXP 21
6818: PPUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 0
6831: PPUSH
6832: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6836: LD_EXP 21
6840: PPUSH
6841: LD_VAR 0 4
6845: PPUSH
6846: CALL_OW 234
// end ;
6850: PPOPN 4
6852: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
6857: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6858: LD_INT 122
6860: PPUSH
6861: LD_INT 77
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: LD_INT 6
6869: NEG
6870: PPUSH
6871: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6875: LD_EXP 21
6879: PPUSH
6880: LD_INT 123
6882: PPUSH
6883: LD_INT 79
6885: PPUSH
6886: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6890: LD_EXP 21
6894: PPUSH
6895: LD_INT 125
6897: PPUSH
6898: LD_INT 82
6900: PPUSH
6901: CALL_OW 178
// wait ( 0 0$2 ) ;
6905: LD_INT 70
6907: PPUSH
6908: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6912: LD_EXP 42
6916: PPUSH
6917: LD_EXP 21
6921: PPUSH
6922: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6926: LD_EXP 42
6930: PPUSH
6931: LD_STRING DRum-outpost-b-3
6933: PPUSH
6934: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 125
6945: PPUSH
6946: LD_INT 76
6948: PPUSH
6949: CALL_OW 428
6953: PUSH
6954: LD_INT 125
6956: PPUSH
6957: LD_INT 79
6959: PPUSH
6960: CALL_OW 428
6964: PUSH
6965: LD_INT 125
6967: PPUSH
6968: LD_INT 82
6970: PPUSH
6971: CALL_OW 428
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in tmp do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 3
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7008
// SetLives ( i , 200 ) ;
6994: LD_VAR 0 2
6998: PPUSH
6999: LD_INT 200
7001: PPUSH
7002: CALL_OW 234
7006: GO 6991
7008: POP
7009: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7010: LD_EXP 21
7014: PPUSH
7015: LD_STRING DI-outpost-b-4
7017: PPUSH
7018: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_INT 5
7029: PPUSH
7030: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7034: LD_EXP 21
7038: PUSH
7039: LD_EXP 42
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7052: LD_INT 122
7054: PPUSH
7055: LD_INT 77
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 331
// if Givi then
7065: LD_EXP 19
7069: IFFALSE 7085
// Say ( Givi , DG-1-outpost-b-5 ) else
7071: LD_EXP 19
7075: PPUSH
7076: LD_STRING DG-1-outpost-b-5
7078: PPUSH
7079: CALL_OW 88
7083: GO 7150
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7085: LD_EXP 29
7089: PPUSH
7090: LD_INT 26
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_STRING DArf-outpost-b-a-5
7111: PPUSH
7112: CALL_OW 88
7116: NOT
7117: IFFALSE 7150
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7119: LD_EXP 29
7123: PPUSH
7124: LD_INT 26
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 72
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_STRING DArm-outpost-b-a-5
7145: PPUSH
7146: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7150: LD_INT 35
7152: PPUSH
7153: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7157: LD_EXP 21
7161: PPUSH
7162: CALL_OW 301
7166: PUSH
7167: LD_EXP 18
7171: PPUSH
7172: LD_EXP 21
7176: PPUSH
7177: CALL_OW 296
7181: PUSH
7182: LD_INT 6
7184: LESS
7185: PUSH
7186: LD_EXP 21
7190: PPUSH
7191: CALL_OW 302
7195: AND
7196: OR
7197: IFFALSE 7150
// if IsDead ( Ibrahim ) then
7199: LD_EXP 21
7203: PPUSH
7204: CALL_OW 301
7208: IFFALSE 7224
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7210: LD_EXP 18
7214: PPUSH
7215: LD_STRING DH-ibrahimdead-1
7217: PPUSH
7218: CALL_OW 88
// exit ;
7222: GO 7265
// end ; CenterNowOnUnits ( Ibrahim ) ;
7224: LD_EXP 21
7228: PPUSH
7229: CALL_OW 87
// DialogueOn ;
7233: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7237: LD_EXP 21
7241: PPUSH
7242: LD_STRING DI-ibrahimlives-1
7244: PPUSH
7245: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7249: LD_EXP 18
7253: PPUSH
7254: LD_STRING DH-Ibrahimlives-2
7256: PPUSH
7257: CALL_OW 88
// DialogueOff ;
7261: CALL_OW 7
// end ;
7265: LD_VAR 0 1
7269: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 ] [ Difficulty ] do
7270: LD_INT 11
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: PUSH
7288: LD_OWVAR 1
7292: PUSH
7293: LD_INT 18900
7295: PUSH
7296: LD_INT 16800
7298: PUSH
7299: LD_INT 16800
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_OWVAR 67
7311: ARRAY
7312: GREATEREQUAL
7313: OR
7314: IFFALSE 7721
7316: GO 7318
7318: DISABLE
// begin outerAreaAchived := true ;
7319: LD_ADDR_EXP 15
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7327: LD_INT 700
7329: PPUSH
7330: CALL_OW 67
// DialogueOn ;
7334: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7338: LD_EXP 26
7342: PPUSH
7343: LD_STRING DShar-radio-1
7345: PPUSH
7346: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7350: LD_EXP 26
7354: PPUSH
7355: LD_STRING DShar-radio-2
7357: PPUSH
7358: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7362: LD_EXP 18
7366: PPUSH
7367: LD_STRING DH-radio-2
7369: PPUSH
7370: CALL_OW 88
// DialogueOff ;
7374: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7378: LD_STRING Gaidar
7380: PPUSH
7381: CALL_OW 337
// if Difficulty < 3 then
7385: LD_OWVAR 67
7389: PUSH
7390: LD_INT 3
7392: LESS
7393: IFFALSE 7459
// begin DialogueOn ;
7395: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7399: LD_INT 11
7401: PPUSH
7402: LD_INT 14
7404: PPUSH
7405: LD_INT 2
7407: PPUSH
7408: LD_INT 6
7410: NEG
7411: PPUSH
7412: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7416: LD_INT 11
7418: PPUSH
7419: LD_INT 14
7421: PPUSH
7422: LD_INT 2
7424: PPUSH
7425: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7429: LD_INT 11
7431: PPUSH
7432: LD_INT 14
7434: PPUSH
7435: CALL_OW 84
// dwait ( 0 0$1 ) ;
7439: LD_INT 35
7441: PPUSH
7442: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7446: LD_EXP 18
7450: PPUSH
7451: CALL_OW 87
// DialogueOff ;
7455: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7459: LD_INT 1050
7461: PUSH
7462: LD_INT 350
7464: PPUSH
7465: LD_INT 525
7467: PPUSH
7468: CALL_OW 12
7472: PUSH
7473: LD_OWVAR 67
7477: MUL
7478: PLUS
7479: PPUSH
7480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7491: LD_INT 2
7493: PPUSH
7494: LD_INT 1
7496: PPUSH
7497: CALL_OW 428
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7484
// SetDir ( Gaidar , 2 ) ;
7507: LD_EXP 35
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7519: LD_EXP 35
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: LD_INT 0
7532: PPUSH
7533: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7537: LD_EXP 35
7541: PPUSH
7542: LD_INT 19
7544: PPUSH
7545: LD_INT 24
7547: PPUSH
7548: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7552: LD_EXP 35
7556: PPUSH
7557: LD_INT 210
7559: PPUSH
7560: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7564: LD_EXP 35
7568: PPUSH
7569: LD_INT 38
7571: PPUSH
7572: LD_INT 47
7574: PPUSH
7575: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7579: LD_EXP 35
7583: PPUSH
7584: LD_INT 32
7586: PPUSH
7587: LD_INT 59
7589: PPUSH
7590: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7594: LD_EXP 35
7598: PPUSH
7599: LD_INT 350
7601: PPUSH
7602: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7606: LD_EXP 35
7610: PPUSH
7611: LD_INT 62
7613: PPUSH
7614: LD_INT 116
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7621: LD_EXP 35
7625: PPUSH
7626: LD_INT 92
7628: PPUSH
7629: LD_INT 177
7631: PPUSH
7632: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7636: LD_INT 35
7638: PPUSH
7639: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7643: LD_EXP 35
7647: PPUSH
7648: CALL_OW 301
7652: PUSH
7653: LD_EXP 35
7657: PPUSH
7658: LD_INT 92
7660: PPUSH
7661: LD_INT 177
7663: PPUSH
7664: CALL_OW 307
7668: OR
7669: IFFALSE 7636
// if IsAt ( Gaidar , 92 , 177 ) then
7671: LD_EXP 35
7675: PPUSH
7676: LD_INT 92
7678: PPUSH
7679: LD_INT 177
7681: PPUSH
7682: CALL_OW 307
7686: IFFALSE 7699
// begin RemoveUnit ( Gaidar ) ;
7688: LD_EXP 35
7692: PPUSH
7693: CALL_OW 64
// exit ;
7697: GO 7721
// end ; gaidarKilled := true ;
7699: LD_ADDR_EXP 14
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7707: LD_STRING GaidarKilled
7709: PPUSH
7710: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7714: LD_STRING ACH_COMMISAR
7716: PPUSH
7717: CALL_OW 543
// end ;
7721: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7722: LD_INT 2
7724: PPUSH
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 292
7734: IFFALSE 7751
7736: GO 7738
7738: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7739: LD_EXP 35
7743: PPUSH
7744: LD_STRING DT-objective-1
7746: PPUSH
7747: CALL_OW 88
7751: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7752: LD_INT 22
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 95
7767: PUSH
7768: LD_INT 5
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 95
7777: PUSH
7778: LD_INT 6
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 95
7787: PUSH
7788: LD_INT 7
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: IFFALSE 7846
7811: GO 7813
7813: DISABLE
// begin DialogueOn ;
7814: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7818: LD_EXP 18
7822: PPUSH
7823: LD_STRING DH-outpost-last-1
7825: PPUSH
7826: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7830: LD_EXP 34
7834: PPUSH
7835: LD_STRING DB-outpost-last-2
7837: PPUSH
7838: CALL_OW 94
// DialogueOff ;
7842: CALL_OW 7
// end ;
7846: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7847: LD_INT 200
7849: PPUSH
7850: CALL_OW 256
7854: PUSH
7855: LD_INT 999
7857: LESS
7858: PUSH
7859: LD_INT 200
7861: PPUSH
7862: CALL_OW 255
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: OR
7871: IFFALSE 8044
7873: GO 7875
7875: DISABLE
7876: LD_INT 0
7878: PPUSH
7879: PPUSH
// begin if not earlyEscape then
7880: LD_EXP 16
7884: NOT
7885: IFFALSE 7911
// begin SayRadio ( Burlak , DB-end-1 ) ;
7887: LD_EXP 34
7891: PPUSH
7892: LD_STRING DB-end-1
7894: PPUSH
7895: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_STRING DH-end-2
7906: PPUSH
7907: CALL_OW 88
// end ; if tick <= 15 15$00 then
7911: LD_OWVAR 1
7915: PUSH
7916: LD_INT 31500
7918: LESSEQUAL
7919: IFFALSE 7928
// SetAchievement ( ACH_FIST ) ;
7921: LD_STRING ACH_FIST
7923: PPUSH
7924: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_INT 22
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: ST_TO_ADDR
// if not tmp then
7969: LD_VAR 0 2
7973: NOT
7974: IFFALSE 7978
// exit ;
7976: GO 8044
// for i in tmp do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 2
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8042
// begin SetTag ( i , tEscape ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_EXP 17
8000: PPUSH
8001: CALL_OW 109
// if IsInUnit ( i ) then
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 310
8014: IFFALSE 8025
// ComExitBuilding ( i ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_INT 92
8032: PPUSH
8033: LD_INT 177
8035: PPUSH
8036: CALL_OW 171
// end ;
8040: GO 7988
8042: POP
8043: POP
// end ;
8044: PPOPN 2
8046: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8047: LD_INT 4
8049: PPUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 2
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PPUSH
8060: CALL_OW 70
8064: PUSH
8065: LD_EXP 15
8069: NOT
8070: AND
8071: PUSH
8072: LD_EXP 27
8076: PPUSH
8077: CALL_OW 302
8081: AND
8082: IFFALSE 8322
8084: GO 8086
8086: DISABLE
// begin DialogueOn ;
8087: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8091: LD_INT 111
8093: PPUSH
8094: LD_INT 54
8096: PPUSH
8097: LD_INT 2
8099: PPUSH
8100: LD_INT 16
8102: NEG
8103: PPUSH
8104: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8108: LD_INT 111
8110: PPUSH
8111: LD_INT 53
8113: PPUSH
8114: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8118: LD_INT 10
8120: PPUSH
8121: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8125: LD_EXP 27
8129: PPUSH
8130: LD_STRING DKs-Hannibal-1
8132: PPUSH
8133: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8137: LD_EXP 27
8141: PPUSH
8142: LD_STRING DKs-Hannibal-2
8144: PPUSH
8145: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8149: LD_EXP 27
8153: PPUSH
8154: LD_STRING DKs-Hannibal-3
8156: PPUSH
8157: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8161: LD_EXP 27
8165: PPUSH
8166: LD_STRING DKs-Hannibal-4
8168: PPUSH
8169: CALL_OW 88
// dwait ( 0 0$1 ) ;
8173: LD_INT 35
8175: PPUSH
8176: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8180: LD_INT 111
8182: PPUSH
8183: LD_INT 54
8185: PPUSH
8186: LD_INT 2
8188: PPUSH
8189: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8193: LD_INT 173
8195: PPUSH
8196: LD_INT 76
8198: PPUSH
8199: LD_INT 2
8201: PPUSH
8202: LD_INT 12
8204: NEG
8205: PPUSH
8206: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8210: LD_INT 173
8212: PPUSH
8213: LD_INT 76
8215: PPUSH
8216: LD_INT 2
8218: PPUSH
8219: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8223: LD_INT 173
8225: PPUSH
8226: LD_INT 76
8228: PPUSH
8229: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8233: LD_EXP 27
8237: PPUSH
8238: LD_STRING DKs-Hannibal-5
8240: PPUSH
8241: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8245: LD_EXP 22
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 34
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: NOT
8279: AND
8280: IFFALSE 8318
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8282: LD_EXP 22
8286: PPUSH
8287: LD_STRING DKam-Hannibal-a-6
8289: PPUSH
8290: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8294: LD_EXP 22
8298: PPUSH
8299: LD_STRING DKam-Hannibal-a-7
8301: PPUSH
8302: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8306: LD_EXP 19
8310: PPUSH
8311: LD_STRING DG-Hannibal-a-8
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// end ;
8322: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8323: LD_INT 225
8325: PPUSH
8326: CALL_OW 302
8330: PUSH
8331: LD_INT 200
8333: PPUSH
8334: CALL_OW 302
8338: AND
8339: PUSH
8340: LD_INT 12
8342: PPUSH
8343: LD_INT 21
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: LD_INT 2
8360: GREATER
8361: AND
8362: PUSH
8363: LD_INT 13
8365: PPUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 70
8380: PUSH
8381: LD_INT 3
8383: GREATER
8384: AND
8385: IFFALSE 8398
8387: GO 8389
8389: DISABLE
// hannibalPath := true ;
8390: LD_ADDR_EXP 9
8394: PUSH
8395: LD_INT 1
8397: ST_TO_ADDR
8398: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8399: LD_EXP 9
8403: PUSH
8404: LD_INT 6
8406: PPUSH
8407: LD_INT 22
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL_OW 70
8421: AND
8422: IFFALSE 8767
8424: GO 8426
8426: DISABLE
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
8431: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8432: LD_ADDR_VAR 0 2
8436: PUSH
8437: LD_INT 6
8439: PPUSH
8440: LD_INT 22
8442: PUSH
8443: LD_INT 2
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_VAR 0 2
8464: PPUSH
8465: LD_INT 34
8467: PUSH
8468: LD_INT 26
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 72
8479: PUSH
8480: LD_INT 0
8482: GREATER
8483: ST_TO_ADDR
// DialogueOn ;
8484: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8488: LD_EXP 18
8492: PPUSH
8493: LD_STRING DH-Cleverattack-1
8495: PPUSH
8496: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8500: LD_EXP 18
8504: PPUSH
8505: LD_STRING DH-Cleverattack-2
8507: PPUSH
8508: CALL_OW 88
// if hasFlameThrower then
8512: LD_VAR 0 3
8516: IFFALSE 8544
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8518: LD_EXP 34
8522: PPUSH
8523: LD_STRING DB-Cleverattack-3
8525: PPUSH
8526: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8530: LD_EXP 18
8534: PPUSH
8535: LD_STRING DH-Cleverattack-4
8537: PPUSH
8538: CALL_OW 88
// end else
8542: GO 8568
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8544: LD_EXP 34
8548: PPUSH
8549: LD_STRING DB-Cleverattack-a-3
8551: PPUSH
8552: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8556: LD_EXP 18
8560: PPUSH
8561: LD_STRING DH-Cleverattack-a-4
8563: PPUSH
8564: CALL_OW 88
// end ; DialogueOff ;
8568: CALL_OW 7
// if not hasFlameThrower then
8572: LD_VAR 0 3
8576: NOT
8577: IFFALSE 8581
// exit ;
8579: GO 8767
// earlyEscape := true ;
8581: LD_ADDR_EXP 16
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8589: LD_INT 140
8591: PPUSH
8592: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8596: LD_ADDR_VAR 0 2
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 25
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 25
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 69
8658: PUSH
8659: LD_EXP 21
8663: PUSH
8664: LD_EXP 36
8668: PUSH
8669: LD_EXP 35
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: DIFF
8679: ST_TO_ADDR
// for i in tmp do
8680: LD_ADDR_VAR 0 1
8684: PUSH
8685: LD_VAR 0 2
8689: PUSH
8690: FOR_IN
8691: IFFALSE 8765
// begin if Prob ( 40 + 10 * Difficulty ) then
8693: LD_INT 40
8695: PUSH
8696: LD_INT 10
8698: PUSH
8699: LD_OWVAR 67
8703: MUL
8704: PLUS
8705: PPUSH
8706: CALL_OW 13
8710: IFFALSE 8714
// continue ;
8712: GO 8690
// SetTag ( i , tEscape ) ;
8714: LD_VAR 0 1
8718: PPUSH
8719: LD_EXP 17
8723: PPUSH
8724: CALL_OW 109
// if IsInUnit ( i ) then
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 310
8737: IFFALSE 8748
// ComExitBuilding ( i ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 92
8755: PPUSH
8756: LD_INT 177
8758: PPUSH
8759: CALL_OW 171
// end ;
8763: GO 8690
8765: POP
8766: POP
// end ;
8767: PPOPN 3
8769: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8770: LD_INT 9
8772: PPUSH
8773: LD_INT 2
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 6
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PPUSH
8801: CALL_OW 70
8805: IFFALSE 8903
8807: GO 8809
8809: DISABLE
8810: LD_INT 0
8812: PPUSH
// begin enable ;
8813: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_INT 9
8821: PPUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 6
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 70
8854: PUSH
8855: FOR_IN
8856: IFFALSE 8901
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 110
8867: PUSH
8868: LD_EXP 17
8872: EQUAL
8873: PUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 255
8883: PUSH
8884: LD_INT 6
8886: EQUAL
8887: OR
8888: IFFALSE 8899
// RemoveUnit ( i ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 64
8899: GO 8855
8901: POP
8902: POP
// end ;
8903: PPOPN 1
8905: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8906: LD_EXP 23
8910: PUSH
8911: LD_EXP 23
8915: PPUSH
8916: CALL_OW 256
8920: PUSH
8921: LD_INT 3
8923: LESS
8924: AND
8925: IFFALSE 8971
8927: GO 8929
8929: DISABLE
// begin DialogueOn ;
8930: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8934: LD_EXP 23
8938: PPUSH
8939: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
8943: LD_EXP 23
8947: PPUSH
8948: LD_STRING DK-Kkilled-1
8950: PPUSH
8951: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
8955: LD_EXP 18
8959: PPUSH
8960: LD_STRING DH-Kkilled-2
8962: PPUSH
8963: CALL_OW 88
// DialogueOff ;
8967: CALL_OW 7
// end ;
8971: END
// every 0 0$1 trigger kaiaKilledByRussian do
8972: LD_EXP 8
8976: IFFALSE 8993
8978: GO 8980
8980: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
8981: LD_EXP 18
8985: PPUSH
8986: LD_STRING DH-Kkilled-3
8988: PPUSH
8989: CALL_OW 88
8993: END
// every 0 0$1 trigger tick >= 24 24$00 do
8994: LD_OWVAR 1
8998: PUSH
8999: LD_INT 50400
9001: GREATEREQUAL
9002: IFFALSE 9039
9004: GO 9006
9006: DISABLE
// begin DialogueOn ;
9007: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9011: LD_EXP 26
9015: PPUSH
9016: LD_STRING DShar-slow-1
9018: PPUSH
9019: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9023: LD_EXP 26
9027: PPUSH
9028: LD_STRING DShar-slow-2
9030: PPUSH
9031: CALL_OW 94
// DialogueOff ;
9035: CALL_OW 7
// end ;
9039: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 ] [ Difficulty ] do
9040: LD_OWVAR 1
9044: PUSH
9045: LD_INT 84000
9047: PUSH
9048: LD_INT 75600
9050: PUSH
9051: LD_INT 67200
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: GREATEREQUAL
9065: IFFALSE 9109
9067: GO 9069
9069: DISABLE
// begin DialogueOn ;
9070: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9074: LD_EXP 26
9078: PPUSH
9079: LD_STRING DShar-fail-1
9081: PPUSH
9082: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9086: LD_EXP 26
9090: PPUSH
9091: LD_STRING DShar-fail-2
9093: PPUSH
9094: CALL_OW 94
// DialogueOff ;
9098: CALL_OW 7
// YouLost ( Time ) ;
9102: LD_STRING Time
9104: PPUSH
9105: CALL_OW 104
// end ;
9109: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 1
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 0
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9663
9162: GO 9164
9164: DISABLE
9165: LD_INT 0
9167: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 ] [ Difficulty ] then
9168: LD_OWVAR 1
9172: PUSH
9173: LD_EXP 5
9177: PLUS
9178: PUSH
9179: LD_INT 157500
9181: PUSH
9182: LD_INT 147000
9184: PUSH
9185: LD_INT 136500
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_OWVAR 67
9197: ARRAY
9198: LESSEQUAL
9199: IFFALSE 9213
// AddMedal ( med1 , 1 ) else
9201: LD_STRING med1
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 101
9211: GO 9224
// AddMedal ( med1 , - 1 ) ;
9213: LD_STRING med1
9215: PPUSH
9216: LD_INT 1
9218: NEG
9219: PPUSH
9220: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 ] [ Difficulty ] ) then
9224: LD_EXP 7
9228: PUSH
9229: LD_INT 3
9231: GREATEREQUAL
9232: PUSH
9233: LD_EXP 11
9237: MUL
9238: PUSH
9239: LD_EXP 9
9243: MUL
9244: PUSH
9245: LD_EXP 6
9249: PUSH
9250: LD_INT 6
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_OWVAR 67
9268: ARRAY
9269: LESS
9270: MUL
9271: IFFALSE 9285
// AddMedal ( med2 , 1 ) else
9273: LD_STRING med2
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 101
9283: GO 9296
// AddMedal ( med2 , - 1 ) ;
9285: LD_STRING med2
9287: PPUSH
9288: LD_INT 1
9290: NEG
9291: PPUSH
9292: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9296: LD_EXP 14
9300: PPUSH
9301: LD_STRING 04_2_GaidarKilled
9303: PPUSH
9304: CALL_OW 39
// if gaidarKilled then
9308: LD_EXP 14
9312: IFFALSE 9326
// AddMedal ( med3 , 1 ) else
9314: LD_STRING med3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 101
9324: GO 9337
// AddMedal ( med3 , - 1 ) ;
9326: LD_STRING med3
9328: PPUSH
9329: LD_INT 1
9331: NEG
9332: PPUSH
9333: CALL_OW 101
// GiveMedals ( MAIN ) ;
9337: LD_STRING MAIN
9339: PPUSH
9340: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9344: LD_INT 22
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: LD_INT 23
9359: PUSH
9360: LD_INT 0
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PPUSH
9375: CALL_OW 69
9379: PPUSH
9380: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING 04_2_Heike
9391: PPUSH
9392: CALL_OW 38
// if Aviradze then
9396: LD_EXP 28
9400: IFFALSE 9414
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9402: LD_EXP 28
9406: PPUSH
9407: LD_STRING 04_2_Aviradze
9409: PPUSH
9410: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9414: LD_EXP 21
9418: PUSH
9419: LD_EXP 21
9423: PPUSH
9424: CALL_OW 255
9428: PUSH
9429: LD_INT 2
9431: EQUAL
9432: AND
9433: IFFALSE 9463
// begin if ibrahimOnRuSide then
9435: LD_EXP 3
9439: IFFALSE 9451
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9441: LD_INT 1
9443: PPUSH
9444: LD_STRING 04_2_IbrahimJoined
9446: PPUSH
9447: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9451: LD_EXP 21
9455: PPUSH
9456: LD_STRING 04_2_Ibrahim
9458: PPUSH
9459: CALL_OW 38
// end ; if Kamil then
9463: LD_EXP 22
9467: IFFALSE 9481
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9469: LD_EXP 22
9473: PPUSH
9474: LD_STRING 04_2_Kamil
9476: PPUSH
9477: CALL_OW 38
// if Sophia then
9481: LD_EXP 24
9485: IFFALSE 9499
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9487: LD_EXP 24
9491: PPUSH
9492: LD_STRING 04_2_Sophia
9494: PPUSH
9495: CALL_OW 38
// if Kaia then
9499: LD_EXP 23
9503: IFFALSE 9517
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9505: LD_EXP 23
9509: PPUSH
9510: LD_STRING 04_2_Kaia
9512: PPUSH
9513: CALL_OW 38
// if Givi then
9517: LD_EXP 19
9521: IFFALSE 9535
// SaveCharacters ( Givi , 04_2_Givi ) ;
9523: LD_EXP 19
9527: PPUSH
9528: LD_STRING 04_2_Givi
9530: PPUSH
9531: CALL_OW 38
// if Mike then
9535: LD_EXP 20
9539: IFFALSE 9553
// SaveCharacters ( Mike , 04_2_Mike ) ;
9541: LD_EXP 20
9545: PPUSH
9546: LD_STRING 04_2_Mike
9548: PPUSH
9549: CALL_OW 38
// if Markov then
9553: LD_EXP 25
9557: IFFALSE 9571
// SaveCharacters ( Markov , 04_2_Markov ) ;
9559: LD_EXP 25
9563: PPUSH
9564: LD_STRING 04_2_Markov
9566: PPUSH
9567: CALL_OW 38
// if Kurt then
9571: LD_EXP 27
9575: IFFALSE 9589
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9577: LD_EXP 27
9581: PPUSH
9582: LD_STRING 04_2_Kurt
9584: PPUSH
9585: CALL_OW 38
// if heikeSecondSquad then
9589: LD_EXP 29
9593: IFFALSE 9607
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9595: LD_EXP 29
9599: PPUSH
9600: LD_STRING 04_2_others
9602: PPUSH
9603: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9607: LD_ADDR_VAR 0 1
9611: PUSH
9612: LD_INT 22
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 23
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PPUSH
9636: CALL_OW 69
9640: ST_TO_ADDR
// if tmp then
9641: LD_VAR 0 1
9645: IFFALSE 9659
// SaveCharacters ( tmp , 04_2_apes ) ;
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_STRING 04_2_apes
9654: PPUSH
9655: CALL_OW 38
// YouWin ;
9659: CALL_OW 103
// end ; end_of_file
9663: PPOPN 1
9665: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9666: LD_INT 0
9668: PPUSH
// if p2 = 100 then
9669: LD_VAR 0 2
9673: PUSH
9674: LD_INT 100
9676: EQUAL
9677: IFFALSE 10626
// begin if not StreamModeActive then
9679: LD_EXP 43
9683: NOT
9684: IFFALSE 9694
// StreamModeActive := true ;
9686: LD_ADDR_EXP 43
9690: PUSH
9691: LD_INT 1
9693: ST_TO_ADDR
// if p3 = 0 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 0
9701: EQUAL
9702: IFFALSE 9708
// InitStreamMode ;
9704: CALL 10786 0 0
// if p3 = 1 then
9708: LD_VAR 0 3
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9726
// sRocket := true ;
9718: LD_ADDR_EXP 48
9722: PUSH
9723: LD_INT 1
9725: ST_TO_ADDR
// if p3 = 2 then
9726: LD_VAR 0 3
9730: PUSH
9731: LD_INT 2
9733: EQUAL
9734: IFFALSE 9744
// sSpeed := true ;
9736: LD_ADDR_EXP 47
9740: PUSH
9741: LD_INT 1
9743: ST_TO_ADDR
// if p3 = 3 then
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 3
9751: EQUAL
9752: IFFALSE 9762
// sEngine := true ;
9754: LD_ADDR_EXP 49
9758: PUSH
9759: LD_INT 1
9761: ST_TO_ADDR
// if p3 = 4 then
9762: LD_VAR 0 3
9766: PUSH
9767: LD_INT 4
9769: EQUAL
9770: IFFALSE 9780
// sSpec := true ;
9772: LD_ADDR_EXP 46
9776: PUSH
9777: LD_INT 1
9779: ST_TO_ADDR
// if p3 = 5 then
9780: LD_VAR 0 3
9784: PUSH
9785: LD_INT 5
9787: EQUAL
9788: IFFALSE 9798
// sLevel := true ;
9790: LD_ADDR_EXP 50
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// if p3 = 6 then
9798: LD_VAR 0 3
9802: PUSH
9803: LD_INT 6
9805: EQUAL
9806: IFFALSE 9816
// sArmoury := true ;
9808: LD_ADDR_EXP 51
9812: PUSH
9813: LD_INT 1
9815: ST_TO_ADDR
// if p3 = 7 then
9816: LD_VAR 0 3
9820: PUSH
9821: LD_INT 7
9823: EQUAL
9824: IFFALSE 9834
// sRadar := true ;
9826: LD_ADDR_EXP 52
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// if p3 = 8 then
9834: LD_VAR 0 3
9838: PUSH
9839: LD_INT 8
9841: EQUAL
9842: IFFALSE 9852
// sBunker := true ;
9844: LD_ADDR_EXP 53
9848: PUSH
9849: LD_INT 1
9851: ST_TO_ADDR
// if p3 = 9 then
9852: LD_VAR 0 3
9856: PUSH
9857: LD_INT 9
9859: EQUAL
9860: IFFALSE 9870
// sHack := true ;
9862: LD_ADDR_EXP 54
9866: PUSH
9867: LD_INT 1
9869: ST_TO_ADDR
// if p3 = 10 then
9870: LD_VAR 0 3
9874: PUSH
9875: LD_INT 10
9877: EQUAL
9878: IFFALSE 9888
// sFire := true ;
9880: LD_ADDR_EXP 55
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// if p3 = 11 then
9888: LD_VAR 0 3
9892: PUSH
9893: LD_INT 11
9895: EQUAL
9896: IFFALSE 9906
// sRefresh := true ;
9898: LD_ADDR_EXP 56
9902: PUSH
9903: LD_INT 1
9905: ST_TO_ADDR
// if p3 = 12 then
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9924
// sExp := true ;
9916: LD_ADDR_EXP 57
9920: PUSH
9921: LD_INT 1
9923: ST_TO_ADDR
// if p3 = 13 then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 13
9931: EQUAL
9932: IFFALSE 9942
// sDepot := true ;
9934: LD_ADDR_EXP 58
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// if p3 = 14 then
9942: LD_VAR 0 3
9946: PUSH
9947: LD_INT 14
9949: EQUAL
9950: IFFALSE 9960
// sFlag := true ;
9952: LD_ADDR_EXP 59
9956: PUSH
9957: LD_INT 1
9959: ST_TO_ADDR
// if p3 = 15 then
9960: LD_VAR 0 3
9964: PUSH
9965: LD_INT 15
9967: EQUAL
9968: IFFALSE 9978
// sKamikadze := true ;
9970: LD_ADDR_EXP 67
9974: PUSH
9975: LD_INT 1
9977: ST_TO_ADDR
// if p3 = 16 then
9978: LD_VAR 0 3
9982: PUSH
9983: LD_INT 16
9985: EQUAL
9986: IFFALSE 9996
// sTroll := true ;
9988: LD_ADDR_EXP 68
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// if p3 = 17 then
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 17
10003: EQUAL
10004: IFFALSE 10014
// sSlow := true ;
10006: LD_ADDR_EXP 69
10010: PUSH
10011: LD_INT 1
10013: ST_TO_ADDR
// if p3 = 18 then
10014: LD_VAR 0 3
10018: PUSH
10019: LD_INT 18
10021: EQUAL
10022: IFFALSE 10032
// sLack := true ;
10024: LD_ADDR_EXP 70
10028: PUSH
10029: LD_INT 1
10031: ST_TO_ADDR
// if p3 = 19 then
10032: LD_VAR 0 3
10036: PUSH
10037: LD_INT 19
10039: EQUAL
10040: IFFALSE 10050
// sTank := true ;
10042: LD_ADDR_EXP 72
10046: PUSH
10047: LD_INT 1
10049: ST_TO_ADDR
// if p3 = 20 then
10050: LD_VAR 0 3
10054: PUSH
10055: LD_INT 20
10057: EQUAL
10058: IFFALSE 10068
// sRemote := true ;
10060: LD_ADDR_EXP 73
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if p3 = 21 then
10068: LD_VAR 0 3
10072: PUSH
10073: LD_INT 21
10075: EQUAL
10076: IFFALSE 10086
// sPowell := true ;
10078: LD_ADDR_EXP 74
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// if p3 = 22 then
10086: LD_VAR 0 3
10090: PUSH
10091: LD_INT 22
10093: EQUAL
10094: IFFALSE 10104
// sTeleport := true ;
10096: LD_ADDR_EXP 77
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// if p3 = 23 then
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 23
10111: EQUAL
10112: IFFALSE 10122
// sOilTower := true ;
10114: LD_ADDR_EXP 79
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// if p3 = 24 then
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 24
10129: EQUAL
10130: IFFALSE 10140
// sShovel := true ;
10132: LD_ADDR_EXP 80
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// if p3 = 25 then
10140: LD_VAR 0 3
10144: PUSH
10145: LD_INT 25
10147: EQUAL
10148: IFFALSE 10158
// sSheik := true ;
10150: LD_ADDR_EXP 81
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if p3 = 26 then
10158: LD_VAR 0 3
10162: PUSH
10163: LD_INT 26
10165: EQUAL
10166: IFFALSE 10176
// sEarthquake := true ;
10168: LD_ADDR_EXP 83
10172: PUSH
10173: LD_INT 1
10175: ST_TO_ADDR
// if p3 = 27 then
10176: LD_VAR 0 3
10180: PUSH
10181: LD_INT 27
10183: EQUAL
10184: IFFALSE 10194
// sAI := true ;
10186: LD_ADDR_EXP 84
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if p3 = 28 then
10194: LD_VAR 0 3
10198: PUSH
10199: LD_INT 28
10201: EQUAL
10202: IFFALSE 10212
// sCargo := true ;
10204: LD_ADDR_EXP 87
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// if p3 = 29 then
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 29
10219: EQUAL
10220: IFFALSE 10230
// sDLaser := true ;
10222: LD_ADDR_EXP 88
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// if p3 = 30 then
10230: LD_VAR 0 3
10234: PUSH
10235: LD_INT 30
10237: EQUAL
10238: IFFALSE 10248
// sExchange := true ;
10240: LD_ADDR_EXP 89
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// if p3 = 31 then
10248: LD_VAR 0 3
10252: PUSH
10253: LD_INT 31
10255: EQUAL
10256: IFFALSE 10266
// sFac := true ;
10258: LD_ADDR_EXP 90
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// if p3 = 32 then
10266: LD_VAR 0 3
10270: PUSH
10271: LD_INT 32
10273: EQUAL
10274: IFFALSE 10284
// sPower := true ;
10276: LD_ADDR_EXP 91
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// if p3 = 33 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_INT 33
10291: EQUAL
10292: IFFALSE 10302
// sRandom := true ;
10294: LD_ADDR_EXP 92
10298: PUSH
10299: LD_INT 1
10301: ST_TO_ADDR
// if p3 = 34 then
10302: LD_VAR 0 3
10306: PUSH
10307: LD_INT 34
10309: EQUAL
10310: IFFALSE 10320
// sShield := true ;
10312: LD_ADDR_EXP 93
10316: PUSH
10317: LD_INT 1
10319: ST_TO_ADDR
// if p3 = 35 then
10320: LD_VAR 0 3
10324: PUSH
10325: LD_INT 35
10327: EQUAL
10328: IFFALSE 10338
// sTime := true ;
10330: LD_ADDR_EXP 94
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// if p3 = 36 then
10338: LD_VAR 0 3
10342: PUSH
10343: LD_INT 36
10345: EQUAL
10346: IFFALSE 10356
// sTools := true ;
10348: LD_ADDR_EXP 95
10352: PUSH
10353: LD_INT 1
10355: ST_TO_ADDR
// if p3 = 101 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_INT 101
10363: EQUAL
10364: IFFALSE 10374
// sSold := true ;
10366: LD_ADDR_EXP 60
10370: PUSH
10371: LD_INT 1
10373: ST_TO_ADDR
// if p3 = 102 then
10374: LD_VAR 0 3
10378: PUSH
10379: LD_INT 102
10381: EQUAL
10382: IFFALSE 10392
// sDiff := true ;
10384: LD_ADDR_EXP 61
10388: PUSH
10389: LD_INT 1
10391: ST_TO_ADDR
// if p3 = 103 then
10392: LD_VAR 0 3
10396: PUSH
10397: LD_INT 103
10399: EQUAL
10400: IFFALSE 10410
// sFog := true ;
10402: LD_ADDR_EXP 64
10406: PUSH
10407: LD_INT 1
10409: ST_TO_ADDR
// if p3 = 104 then
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 104
10417: EQUAL
10418: IFFALSE 10428
// sReset := true ;
10420: LD_ADDR_EXP 65
10424: PUSH
10425: LD_INT 1
10427: ST_TO_ADDR
// if p3 = 105 then
10428: LD_VAR 0 3
10432: PUSH
10433: LD_INT 105
10435: EQUAL
10436: IFFALSE 10446
// sSun := true ;
10438: LD_ADDR_EXP 66
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// if p3 = 106 then
10446: LD_VAR 0 3
10450: PUSH
10451: LD_INT 106
10453: EQUAL
10454: IFFALSE 10464
// sTiger := true ;
10456: LD_ADDR_EXP 62
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// if p3 = 107 then
10464: LD_VAR 0 3
10468: PUSH
10469: LD_INT 107
10471: EQUAL
10472: IFFALSE 10482
// sBomb := true ;
10474: LD_ADDR_EXP 63
10478: PUSH
10479: LD_INT 1
10481: ST_TO_ADDR
// if p3 = 108 then
10482: LD_VAR 0 3
10486: PUSH
10487: LD_INT 108
10489: EQUAL
10490: IFFALSE 10500
// sWound := true ;
10492: LD_ADDR_EXP 71
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if p3 = 109 then
10500: LD_VAR 0 3
10504: PUSH
10505: LD_INT 109
10507: EQUAL
10508: IFFALSE 10518
// sBetray := true ;
10510: LD_ADDR_EXP 75
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// if p3 = 110 then
10518: LD_VAR 0 3
10522: PUSH
10523: LD_INT 110
10525: EQUAL
10526: IFFALSE 10536
// sContamin := true ;
10528: LD_ADDR_EXP 76
10532: PUSH
10533: LD_INT 1
10535: ST_TO_ADDR
// if p3 = 111 then
10536: LD_VAR 0 3
10540: PUSH
10541: LD_INT 111
10543: EQUAL
10544: IFFALSE 10554
// sOil := true ;
10546: LD_ADDR_EXP 78
10550: PUSH
10551: LD_INT 1
10553: ST_TO_ADDR
// if p3 = 112 then
10554: LD_VAR 0 3
10558: PUSH
10559: LD_INT 112
10561: EQUAL
10562: IFFALSE 10572
// sStu := true ;
10564: LD_ADDR_EXP 82
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// if p3 = 113 then
10572: LD_VAR 0 3
10576: PUSH
10577: LD_INT 113
10579: EQUAL
10580: IFFALSE 10590
// sBazooka := true ;
10582: LD_ADDR_EXP 85
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// if p3 = 114 then
10590: LD_VAR 0 3
10594: PUSH
10595: LD_INT 114
10597: EQUAL
10598: IFFALSE 10608
// sMortar := true ;
10600: LD_ADDR_EXP 86
10604: PUSH
10605: LD_INT 1
10607: ST_TO_ADDR
// if p3 = 115 then
10608: LD_VAR 0 3
10612: PUSH
10613: LD_INT 115
10615: EQUAL
10616: IFFALSE 10626
// sRanger := true ;
10618: LD_ADDR_EXP 96
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// end ; if p2 = 101 then
10626: LD_VAR 0 2
10630: PUSH
10631: LD_INT 101
10633: EQUAL
10634: IFFALSE 10762
// begin case p3 of 1 :
10636: LD_VAR 0 3
10640: PUSH
10641: LD_INT 1
10643: DOUBLE
10644: EQUAL
10645: IFTRUE 10649
10647: GO 10656
10649: POP
// hHackUnlimitedResources ; 2 :
10650: CALL 21799 0 0
10654: GO 10762
10656: LD_INT 2
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10671
10664: POP
// hHackSetLevel10 ; 3 :
10665: CALL 21932 0 0
10669: GO 10762
10671: LD_INT 3
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10686
10679: POP
// hHackSetLevel10YourUnits ; 4 :
10680: CALL 22017 0 0
10684: GO 10762
10686: LD_INT 4
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10701
10694: POP
// hHackInvincible ; 5 :
10695: CALL 22465 0 0
10699: GO 10762
10701: LD_INT 5
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10716
10709: POP
// hHackInvisible ; 6 :
10710: CALL 22576 0 0
10714: GO 10762
10716: LD_INT 6
10718: DOUBLE
10719: EQUAL
10720: IFTRUE 10724
10722: GO 10731
10724: POP
// hHackChangeYourSide ; 7 :
10725: CALL 22633 0 0
10729: GO 10762
10731: LD_INT 7
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10746
10739: POP
// hHackChangeUnitSide ; 8 :
10740: CALL 22675 0 0
10744: GO 10762
10746: LD_INT 8
10748: DOUBLE
10749: EQUAL
10750: IFTRUE 10754
10752: GO 10761
10754: POP
// hHackFog ; end ;
10755: CALL 22776 0 0
10759: GO 10762
10761: POP
// end ; end ;
10762: LD_VAR 0 7
10766: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10767: GO 10769
10769: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10770: LD_STRING initStreamRollete();
10772: PPUSH
10773: CALL_OW 559
// InitStreamMode ;
10777: CALL 10786 0 0
// DefineStreamItems ( ) ;
10781: CALL 11226 0 0
// end ;
10785: END
// function InitStreamMode ; begin
10786: LD_INT 0
10788: PPUSH
// streamModeActive := false ;
10789: LD_ADDR_EXP 43
10793: PUSH
10794: LD_INT 0
10796: ST_TO_ADDR
// normalCounter := 36 ;
10797: LD_ADDR_EXP 44
10801: PUSH
10802: LD_INT 36
10804: ST_TO_ADDR
// hardcoreCounter := 16 ;
10805: LD_ADDR_EXP 45
10809: PUSH
10810: LD_INT 16
10812: ST_TO_ADDR
// sRocket := false ;
10813: LD_ADDR_EXP 48
10817: PUSH
10818: LD_INT 0
10820: ST_TO_ADDR
// sSpeed := false ;
10821: LD_ADDR_EXP 47
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// sEngine := false ;
10829: LD_ADDR_EXP 49
10833: PUSH
10834: LD_INT 0
10836: ST_TO_ADDR
// sSpec := false ;
10837: LD_ADDR_EXP 46
10841: PUSH
10842: LD_INT 0
10844: ST_TO_ADDR
// sLevel := false ;
10845: LD_ADDR_EXP 50
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// sArmoury := false ;
10853: LD_ADDR_EXP 51
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// sRadar := false ;
10861: LD_ADDR_EXP 52
10865: PUSH
10866: LD_INT 0
10868: ST_TO_ADDR
// sBunker := false ;
10869: LD_ADDR_EXP 53
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sHack := false ;
10877: LD_ADDR_EXP 54
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sFire := false ;
10885: LD_ADDR_EXP 55
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sRefresh := false ;
10893: LD_ADDR_EXP 56
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sExp := false ;
10901: LD_ADDR_EXP 57
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sDepot := false ;
10909: LD_ADDR_EXP 58
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sFlag := false ;
10917: LD_ADDR_EXP 59
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sKamikadze := false ;
10925: LD_ADDR_EXP 67
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// sTroll := false ;
10933: LD_ADDR_EXP 68
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// sSlow := false ;
10941: LD_ADDR_EXP 69
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// sLack := false ;
10949: LD_ADDR_EXP 70
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// sTank := false ;
10957: LD_ADDR_EXP 72
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// sRemote := false ;
10965: LD_ADDR_EXP 73
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// sPowell := false ;
10973: LD_ADDR_EXP 74
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// sTeleport := false ;
10981: LD_ADDR_EXP 77
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// sOilTower := false ;
10989: LD_ADDR_EXP 79
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// sShovel := false ;
10997: LD_ADDR_EXP 80
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// sSheik := false ;
11005: LD_ADDR_EXP 81
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// sEarthquake := false ;
11013: LD_ADDR_EXP 83
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// sAI := false ;
11021: LD_ADDR_EXP 84
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// sCargo := false ;
11029: LD_ADDR_EXP 87
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// sDLaser := false ;
11037: LD_ADDR_EXP 88
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// sExchange := false ;
11045: LD_ADDR_EXP 89
11049: PUSH
11050: LD_INT 0
11052: ST_TO_ADDR
// sFac := false ;
11053: LD_ADDR_EXP 90
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// sPower := false ;
11061: LD_ADDR_EXP 91
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// sRandom := false ;
11069: LD_ADDR_EXP 92
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// sShield := false ;
11077: LD_ADDR_EXP 93
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// sTime := false ;
11085: LD_ADDR_EXP 94
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// sTools := false ;
11093: LD_ADDR_EXP 95
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// sSold := false ;
11101: LD_ADDR_EXP 60
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// sDiff := false ;
11109: LD_ADDR_EXP 61
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// sFog := false ;
11117: LD_ADDR_EXP 64
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// sReset := false ;
11125: LD_ADDR_EXP 65
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// sSun := false ;
11133: LD_ADDR_EXP 66
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// sTiger := false ;
11141: LD_ADDR_EXP 62
11145: PUSH
11146: LD_INT 0
11148: ST_TO_ADDR
// sBomb := false ;
11149: LD_ADDR_EXP 63
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// sWound := false ;
11157: LD_ADDR_EXP 71
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// sBetray := false ;
11165: LD_ADDR_EXP 75
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// sContamin := false ;
11173: LD_ADDR_EXP 76
11177: PUSH
11178: LD_INT 0
11180: ST_TO_ADDR
// sOil := false ;
11181: LD_ADDR_EXP 78
11185: PUSH
11186: LD_INT 0
11188: ST_TO_ADDR
// sStu := false ;
11189: LD_ADDR_EXP 82
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// sBazooka := false ;
11197: LD_ADDR_EXP 85
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// sMortar := false ;
11205: LD_ADDR_EXP 86
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// sRanger := false ;
11213: LD_ADDR_EXP 96
11217: PUSH
11218: LD_INT 0
11220: ST_TO_ADDR
// end ;
11221: LD_VAR 0 1
11225: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11226: LD_INT 0
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
// result := [ ] ;
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: EMPTY
11239: ST_TO_ADDR
// if campaign_id = 1 then
11240: LD_OWVAR 69
11244: PUSH
11245: LD_INT 1
11247: EQUAL
11248: IFFALSE 14186
// begin case mission_number of 1 :
11250: LD_OWVAR 70
11254: PUSH
11255: LD_INT 1
11257: DOUBLE
11258: EQUAL
11259: IFTRUE 11263
11261: GO 11327
11263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: LD_INT 4
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 12
11280: PUSH
11281: LD_INT 15
11283: PUSH
11284: LD_INT 16
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 23
11292: PUSH
11293: LD_INT 26
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 101
11309: PUSH
11310: LD_INT 102
11312: PUSH
11313: LD_INT 106
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: ST_TO_ADDR
11325: GO 14184
11327: LD_INT 2
11329: DOUBLE
11330: EQUAL
11331: IFTRUE 11335
11333: GO 11407
11335: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11336: LD_ADDR_VAR 0 1
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: LD_INT 4
11346: PUSH
11347: LD_INT 11
11349: PUSH
11350: LD_INT 12
11352: PUSH
11353: LD_INT 15
11355: PUSH
11356: LD_INT 16
11358: PUSH
11359: LD_INT 22
11361: PUSH
11362: LD_INT 23
11364: PUSH
11365: LD_INT 26
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 101
11381: PUSH
11382: LD_INT 102
11384: PUSH
11385: LD_INT 105
11387: PUSH
11388: LD_INT 106
11390: PUSH
11391: LD_INT 108
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: ST_TO_ADDR
11405: GO 14184
11407: LD_INT 3
11409: DOUBLE
11410: EQUAL
11411: IFTRUE 11415
11413: GO 11491
11415: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11416: LD_ADDR_VAR 0 1
11420: PUSH
11421: LD_INT 2
11423: PUSH
11424: LD_INT 4
11426: PUSH
11427: LD_INT 5
11429: PUSH
11430: LD_INT 11
11432: PUSH
11433: LD_INT 12
11435: PUSH
11436: LD_INT 15
11438: PUSH
11439: LD_INT 16
11441: PUSH
11442: LD_INT 22
11444: PUSH
11445: LD_INT 26
11447: PUSH
11448: LD_INT 36
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 101
11465: PUSH
11466: LD_INT 102
11468: PUSH
11469: LD_INT 105
11471: PUSH
11472: LD_INT 106
11474: PUSH
11475: LD_INT 108
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: ST_TO_ADDR
11489: GO 14184
11491: LD_INT 4
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11583
11499: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: LD_INT 4
11510: PUSH
11511: LD_INT 5
11513: PUSH
11514: LD_INT 8
11516: PUSH
11517: LD_INT 11
11519: PUSH
11520: LD_INT 12
11522: PUSH
11523: LD_INT 15
11525: PUSH
11526: LD_INT 16
11528: PUSH
11529: LD_INT 22
11531: PUSH
11532: LD_INT 23
11534: PUSH
11535: LD_INT 26
11537: PUSH
11538: LD_INT 36
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 101
11557: PUSH
11558: LD_INT 102
11560: PUSH
11561: LD_INT 105
11563: PUSH
11564: LD_INT 106
11566: PUSH
11567: LD_INT 108
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: ST_TO_ADDR
11581: GO 14184
11583: LD_INT 5
11585: DOUBLE
11586: EQUAL
11587: IFTRUE 11591
11589: GO 11691
11591: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11592: LD_ADDR_VAR 0 1
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 4
11602: PUSH
11603: LD_INT 5
11605: PUSH
11606: LD_INT 6
11608: PUSH
11609: LD_INT 8
11611: PUSH
11612: LD_INT 11
11614: PUSH
11615: LD_INT 12
11617: PUSH
11618: LD_INT 15
11620: PUSH
11621: LD_INT 16
11623: PUSH
11624: LD_INT 22
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 26
11635: PUSH
11636: LD_INT 36
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 101
11657: PUSH
11658: LD_INT 102
11660: PUSH
11661: LD_INT 105
11663: PUSH
11664: LD_INT 106
11666: PUSH
11667: LD_INT 108
11669: PUSH
11670: LD_INT 109
11672: PUSH
11673: LD_INT 112
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: ST_TO_ADDR
11689: GO 14184
11691: LD_INT 6
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11819
11699: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11700: LD_ADDR_VAR 0 1
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 4
11710: PUSH
11711: LD_INT 5
11713: PUSH
11714: LD_INT 6
11716: PUSH
11717: LD_INT 8
11719: PUSH
11720: LD_INT 11
11722: PUSH
11723: LD_INT 12
11725: PUSH
11726: LD_INT 15
11728: PUSH
11729: LD_INT 16
11731: PUSH
11732: LD_INT 20
11734: PUSH
11735: LD_INT 21
11737: PUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 23
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 26
11749: PUSH
11750: LD_INT 30
11752: PUSH
11753: LD_INT 31
11755: PUSH
11756: LD_INT 32
11758: PUSH
11759: LD_INT 36
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 105
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 109
11800: PUSH
11801: LD_INT 112
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
11817: GO 14184
11819: LD_INT 7
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11927
11827: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 4
11838: PUSH
11839: LD_INT 5
11841: PUSH
11842: LD_INT 7
11844: PUSH
11845: LD_INT 11
11847: PUSH
11848: LD_INT 12
11850: PUSH
11851: LD_INT 15
11853: PUSH
11854: LD_INT 16
11856: PUSH
11857: LD_INT 20
11859: PUSH
11860: LD_INT 21
11862: PUSH
11863: LD_INT 22
11865: PUSH
11866: LD_INT 23
11868: PUSH
11869: LD_INT 25
11871: PUSH
11872: LD_INT 26
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 101
11893: PUSH
11894: LD_INT 102
11896: PUSH
11897: LD_INT 103
11899: PUSH
11900: LD_INT 105
11902: PUSH
11903: LD_INT 106
11905: PUSH
11906: LD_INT 108
11908: PUSH
11909: LD_INT 112
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: ST_TO_ADDR
11925: GO 14184
11927: LD_INT 8
11929: DOUBLE
11930: EQUAL
11931: IFTRUE 11935
11933: GO 12063
11935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: LD_INT 6
11952: PUSH
11953: LD_INT 7
11955: PUSH
11956: LD_INT 8
11958: PUSH
11959: LD_INT 11
11961: PUSH
11962: LD_INT 12
11964: PUSH
11965: LD_INT 15
11967: PUSH
11968: LD_INT 16
11970: PUSH
11971: LD_INT 20
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_INT 23
11982: PUSH
11983: LD_INT 25
11985: PUSH
11986: LD_INT 26
11988: PUSH
11989: LD_INT 30
11991: PUSH
11992: LD_INT 31
11994: PUSH
11995: LD_INT 32
11997: PUSH
11998: LD_INT 36
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 101
12025: PUSH
12026: LD_INT 102
12028: PUSH
12029: LD_INT 103
12031: PUSH
12032: LD_INT 105
12034: PUSH
12035: LD_INT 106
12037: PUSH
12038: LD_INT 108
12040: PUSH
12041: LD_INT 109
12043: PUSH
12044: LD_INT 112
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 14184
12063: LD_INT 9
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12207
12071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12072: LD_ADDR_VAR 0 1
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: LD_INT 5
12085: PUSH
12086: LD_INT 6
12088: PUSH
12089: LD_INT 7
12091: PUSH
12092: LD_INT 8
12094: PUSH
12095: LD_INT 11
12097: PUSH
12098: LD_INT 12
12100: PUSH
12101: LD_INT 15
12103: PUSH
12104: LD_INT 16
12106: PUSH
12107: LD_INT 20
12109: PUSH
12110: LD_INT 21
12112: PUSH
12113: LD_INT 22
12115: PUSH
12116: LD_INT 23
12118: PUSH
12119: LD_INT 25
12121: PUSH
12122: LD_INT 26
12124: PUSH
12125: LD_INT 28
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 31
12133: PUSH
12134: LD_INT 32
12136: PUSH
12137: LD_INT 36
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 101
12165: PUSH
12166: LD_INT 102
12168: PUSH
12169: LD_INT 103
12171: PUSH
12172: LD_INT 105
12174: PUSH
12175: LD_INT 106
12177: PUSH
12178: LD_INT 108
12180: PUSH
12181: LD_INT 109
12183: PUSH
12184: LD_INT 112
12186: PUSH
12187: LD_INT 114
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: ST_TO_ADDR
12205: GO 14184
12207: LD_INT 10
12209: DOUBLE
12210: EQUAL
12211: IFTRUE 12215
12213: GO 12399
12215: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12216: LD_ADDR_VAR 0 1
12220: PUSH
12221: LD_INT 2
12223: PUSH
12224: LD_INT 4
12226: PUSH
12227: LD_INT 5
12229: PUSH
12230: LD_INT 6
12232: PUSH
12233: LD_INT 7
12235: PUSH
12236: LD_INT 8
12238: PUSH
12239: LD_INT 9
12241: PUSH
12242: LD_INT 10
12244: PUSH
12245: LD_INT 11
12247: PUSH
12248: LD_INT 12
12250: PUSH
12251: LD_INT 13
12253: PUSH
12254: LD_INT 14
12256: PUSH
12257: LD_INT 15
12259: PUSH
12260: LD_INT 16
12262: PUSH
12263: LD_INT 17
12265: PUSH
12266: LD_INT 18
12268: PUSH
12269: LD_INT 19
12271: PUSH
12272: LD_INT 20
12274: PUSH
12275: LD_INT 21
12277: PUSH
12278: LD_INT 22
12280: PUSH
12281: LD_INT 23
12283: PUSH
12284: LD_INT 24
12286: PUSH
12287: LD_INT 25
12289: PUSH
12290: LD_INT 26
12292: PUSH
12293: LD_INT 28
12295: PUSH
12296: LD_INT 30
12298: PUSH
12299: LD_INT 31
12301: PUSH
12302: LD_INT 32
12304: PUSH
12305: LD_INT 36
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 101
12341: PUSH
12342: LD_INT 102
12344: PUSH
12345: LD_INT 103
12347: PUSH
12348: LD_INT 104
12350: PUSH
12351: LD_INT 105
12353: PUSH
12354: LD_INT 106
12356: PUSH
12357: LD_INT 107
12359: PUSH
12360: LD_INT 108
12362: PUSH
12363: LD_INT 109
12365: PUSH
12366: LD_INT 110
12368: PUSH
12369: LD_INT 111
12371: PUSH
12372: LD_INT 112
12374: PUSH
12375: LD_INT 114
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
12397: GO 14184
12399: LD_INT 11
12401: DOUBLE
12402: EQUAL
12403: IFTRUE 12407
12405: GO 12599
12407: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12408: LD_ADDR_VAR 0 1
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 3
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: LD_INT 5
12424: PUSH
12425: LD_INT 6
12427: PUSH
12428: LD_INT 7
12430: PUSH
12431: LD_INT 8
12433: PUSH
12434: LD_INT 9
12436: PUSH
12437: LD_INT 10
12439: PUSH
12440: LD_INT 11
12442: PUSH
12443: LD_INT 12
12445: PUSH
12446: LD_INT 13
12448: PUSH
12449: LD_INT 14
12451: PUSH
12452: LD_INT 15
12454: PUSH
12455: LD_INT 16
12457: PUSH
12458: LD_INT 17
12460: PUSH
12461: LD_INT 18
12463: PUSH
12464: LD_INT 19
12466: PUSH
12467: LD_INT 20
12469: PUSH
12470: LD_INT 21
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 23
12478: PUSH
12479: LD_INT 24
12481: PUSH
12482: LD_INT 25
12484: PUSH
12485: LD_INT 26
12487: PUSH
12488: LD_INT 28
12490: PUSH
12491: LD_INT 30
12493: PUSH
12494: LD_INT 31
12496: PUSH
12497: LD_INT 32
12499: PUSH
12500: LD_INT 34
12502: PUSH
12503: LD_INT 36
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 101
12541: PUSH
12542: LD_INT 102
12544: PUSH
12545: LD_INT 103
12547: PUSH
12548: LD_INT 104
12550: PUSH
12551: LD_INT 105
12553: PUSH
12554: LD_INT 106
12556: PUSH
12557: LD_INT 107
12559: PUSH
12560: LD_INT 108
12562: PUSH
12563: LD_INT 109
12565: PUSH
12566: LD_INT 110
12568: PUSH
12569: LD_INT 111
12571: PUSH
12572: LD_INT 112
12574: PUSH
12575: LD_INT 114
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: ST_TO_ADDR
12597: GO 14184
12599: LD_INT 12
12601: DOUBLE
12602: EQUAL
12603: IFTRUE 12607
12605: GO 12815
12607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12608: LD_ADDR_VAR 0 1
12612: PUSH
12613: LD_INT 1
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: LD_INT 3
12621: PUSH
12622: LD_INT 4
12624: PUSH
12625: LD_INT 5
12627: PUSH
12628: LD_INT 6
12630: PUSH
12631: LD_INT 7
12633: PUSH
12634: LD_INT 8
12636: PUSH
12637: LD_INT 9
12639: PUSH
12640: LD_INT 10
12642: PUSH
12643: LD_INT 11
12645: PUSH
12646: LD_INT 12
12648: PUSH
12649: LD_INT 13
12651: PUSH
12652: LD_INT 14
12654: PUSH
12655: LD_INT 15
12657: PUSH
12658: LD_INT 16
12660: PUSH
12661: LD_INT 17
12663: PUSH
12664: LD_INT 18
12666: PUSH
12667: LD_INT 19
12669: PUSH
12670: LD_INT 20
12672: PUSH
12673: LD_INT 21
12675: PUSH
12676: LD_INT 22
12678: PUSH
12679: LD_INT 23
12681: PUSH
12682: LD_INT 24
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 26
12690: PUSH
12691: LD_INT 27
12693: PUSH
12694: LD_INT 28
12696: PUSH
12697: LD_INT 30
12699: PUSH
12700: LD_INT 31
12702: PUSH
12703: LD_INT 32
12705: PUSH
12706: LD_INT 33
12708: PUSH
12709: LD_INT 34
12711: PUSH
12712: LD_INT 36
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 101
12753: PUSH
12754: LD_INT 102
12756: PUSH
12757: LD_INT 103
12759: PUSH
12760: LD_INT 104
12762: PUSH
12763: LD_INT 105
12765: PUSH
12766: LD_INT 106
12768: PUSH
12769: LD_INT 107
12771: PUSH
12772: LD_INT 108
12774: PUSH
12775: LD_INT 109
12777: PUSH
12778: LD_INT 110
12780: PUSH
12781: LD_INT 111
12783: PUSH
12784: LD_INT 112
12786: PUSH
12787: LD_INT 113
12789: PUSH
12790: LD_INT 114
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: ST_TO_ADDR
12813: GO 14184
12815: LD_INT 13
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 13019
12823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12824: LD_ADDR_VAR 0 1
12828: PUSH
12829: LD_INT 1
12831: PUSH
12832: LD_INT 2
12834: PUSH
12835: LD_INT 3
12837: PUSH
12838: LD_INT 4
12840: PUSH
12841: LD_INT 5
12843: PUSH
12844: LD_INT 8
12846: PUSH
12847: LD_INT 9
12849: PUSH
12850: LD_INT 10
12852: PUSH
12853: LD_INT 11
12855: PUSH
12856: LD_INT 12
12858: PUSH
12859: LD_INT 14
12861: PUSH
12862: LD_INT 15
12864: PUSH
12865: LD_INT 16
12867: PUSH
12868: LD_INT 17
12870: PUSH
12871: LD_INT 18
12873: PUSH
12874: LD_INT 19
12876: PUSH
12877: LD_INT 20
12879: PUSH
12880: LD_INT 21
12882: PUSH
12883: LD_INT 22
12885: PUSH
12886: LD_INT 23
12888: PUSH
12889: LD_INT 24
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 26
12897: PUSH
12898: LD_INT 27
12900: PUSH
12901: LD_INT 28
12903: PUSH
12904: LD_INT 30
12906: PUSH
12907: LD_INT 31
12909: PUSH
12910: LD_INT 32
12912: PUSH
12913: LD_INT 33
12915: PUSH
12916: LD_INT 34
12918: PUSH
12919: LD_INT 36
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 101
12957: PUSH
12958: LD_INT 102
12960: PUSH
12961: LD_INT 103
12963: PUSH
12964: LD_INT 104
12966: PUSH
12967: LD_INT 105
12969: PUSH
12970: LD_INT 106
12972: PUSH
12973: LD_INT 107
12975: PUSH
12976: LD_INT 108
12978: PUSH
12979: LD_INT 109
12981: PUSH
12982: LD_INT 110
12984: PUSH
12985: LD_INT 111
12987: PUSH
12988: LD_INT 112
12990: PUSH
12991: LD_INT 113
12993: PUSH
12994: LD_INT 114
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: ST_TO_ADDR
13017: GO 14184
13019: LD_INT 14
13021: DOUBLE
13022: EQUAL
13023: IFTRUE 13027
13025: GO 13239
13027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: LD_INT 1
13035: PUSH
13036: LD_INT 2
13038: PUSH
13039: LD_INT 3
13041: PUSH
13042: LD_INT 4
13044: PUSH
13045: LD_INT 5
13047: PUSH
13048: LD_INT 6
13050: PUSH
13051: LD_INT 7
13053: PUSH
13054: LD_INT 8
13056: PUSH
13057: LD_INT 9
13059: PUSH
13060: LD_INT 10
13062: PUSH
13063: LD_INT 11
13065: PUSH
13066: LD_INT 12
13068: PUSH
13069: LD_INT 13
13071: PUSH
13072: LD_INT 14
13074: PUSH
13075: LD_INT 15
13077: PUSH
13078: LD_INT 16
13080: PUSH
13081: LD_INT 17
13083: PUSH
13084: LD_INT 18
13086: PUSH
13087: LD_INT 19
13089: PUSH
13090: LD_INT 20
13092: PUSH
13093: LD_INT 21
13095: PUSH
13096: LD_INT 22
13098: PUSH
13099: LD_INT 23
13101: PUSH
13102: LD_INT 24
13104: PUSH
13105: LD_INT 25
13107: PUSH
13108: LD_INT 26
13110: PUSH
13111: LD_INT 27
13113: PUSH
13114: LD_INT 28
13116: PUSH
13117: LD_INT 29
13119: PUSH
13120: LD_INT 30
13122: PUSH
13123: LD_INT 31
13125: PUSH
13126: LD_INT 32
13128: PUSH
13129: LD_INT 33
13131: PUSH
13132: LD_INT 34
13134: PUSH
13135: LD_INT 36
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 101
13177: PUSH
13178: LD_INT 102
13180: PUSH
13181: LD_INT 103
13183: PUSH
13184: LD_INT 104
13186: PUSH
13187: LD_INT 105
13189: PUSH
13190: LD_INT 106
13192: PUSH
13193: LD_INT 107
13195: PUSH
13196: LD_INT 108
13198: PUSH
13199: LD_INT 109
13201: PUSH
13202: LD_INT 110
13204: PUSH
13205: LD_INT 111
13207: PUSH
13208: LD_INT 112
13210: PUSH
13211: LD_INT 113
13213: PUSH
13214: LD_INT 114
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: ST_TO_ADDR
13237: GO 14184
13239: LD_INT 15
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 13459
13247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13248: LD_ADDR_VAR 0 1
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: LD_INT 2
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 7
13273: PUSH
13274: LD_INT 8
13276: PUSH
13277: LD_INT 9
13279: PUSH
13280: LD_INT 10
13282: PUSH
13283: LD_INT 11
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: LD_INT 13
13291: PUSH
13292: LD_INT 14
13294: PUSH
13295: LD_INT 15
13297: PUSH
13298: LD_INT 16
13300: PUSH
13301: LD_INT 17
13303: PUSH
13304: LD_INT 18
13306: PUSH
13307: LD_INT 19
13309: PUSH
13310: LD_INT 20
13312: PUSH
13313: LD_INT 21
13315: PUSH
13316: LD_INT 22
13318: PUSH
13319: LD_INT 23
13321: PUSH
13322: LD_INT 24
13324: PUSH
13325: LD_INT 25
13327: PUSH
13328: LD_INT 26
13330: PUSH
13331: LD_INT 27
13333: PUSH
13334: LD_INT 28
13336: PUSH
13337: LD_INT 29
13339: PUSH
13340: LD_INT 30
13342: PUSH
13343: LD_INT 31
13345: PUSH
13346: LD_INT 32
13348: PUSH
13349: LD_INT 33
13351: PUSH
13352: LD_INT 34
13354: PUSH
13355: LD_INT 36
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 101
13397: PUSH
13398: LD_INT 102
13400: PUSH
13401: LD_INT 103
13403: PUSH
13404: LD_INT 104
13406: PUSH
13407: LD_INT 105
13409: PUSH
13410: LD_INT 106
13412: PUSH
13413: LD_INT 107
13415: PUSH
13416: LD_INT 108
13418: PUSH
13419: LD_INT 109
13421: PUSH
13422: LD_INT 110
13424: PUSH
13425: LD_INT 111
13427: PUSH
13428: LD_INT 112
13430: PUSH
13431: LD_INT 113
13433: PUSH
13434: LD_INT 114
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: ST_TO_ADDR
13457: GO 14184
13459: LD_INT 16
13461: DOUBLE
13462: EQUAL
13463: IFTRUE 13467
13465: GO 13591
13467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13468: LD_ADDR_VAR 0 1
13472: PUSH
13473: LD_INT 2
13475: PUSH
13476: LD_INT 4
13478: PUSH
13479: LD_INT 5
13481: PUSH
13482: LD_INT 7
13484: PUSH
13485: LD_INT 11
13487: PUSH
13488: LD_INT 12
13490: PUSH
13491: LD_INT 15
13493: PUSH
13494: LD_INT 16
13496: PUSH
13497: LD_INT 20
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 22
13505: PUSH
13506: LD_INT 23
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 26
13514: PUSH
13515: LD_INT 30
13517: PUSH
13518: LD_INT 31
13520: PUSH
13521: LD_INT 32
13523: PUSH
13524: LD_INT 33
13526: PUSH
13527: LD_INT 34
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 101
13553: PUSH
13554: LD_INT 102
13556: PUSH
13557: LD_INT 103
13559: PUSH
13560: LD_INT 106
13562: PUSH
13563: LD_INT 108
13565: PUSH
13566: LD_INT 112
13568: PUSH
13569: LD_INT 113
13571: PUSH
13572: LD_INT 114
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 14184
13591: LD_INT 17
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13811
13599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 3
13613: PUSH
13614: LD_INT 4
13616: PUSH
13617: LD_INT 5
13619: PUSH
13620: LD_INT 6
13622: PUSH
13623: LD_INT 7
13625: PUSH
13626: LD_INT 8
13628: PUSH
13629: LD_INT 9
13631: PUSH
13632: LD_INT 10
13634: PUSH
13635: LD_INT 11
13637: PUSH
13638: LD_INT 12
13640: PUSH
13641: LD_INT 13
13643: PUSH
13644: LD_INT 14
13646: PUSH
13647: LD_INT 15
13649: PUSH
13650: LD_INT 16
13652: PUSH
13653: LD_INT 17
13655: PUSH
13656: LD_INT 18
13658: PUSH
13659: LD_INT 19
13661: PUSH
13662: LD_INT 20
13664: PUSH
13665: LD_INT 21
13667: PUSH
13668: LD_INT 22
13670: PUSH
13671: LD_INT 23
13673: PUSH
13674: LD_INT 24
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 26
13682: PUSH
13683: LD_INT 27
13685: PUSH
13686: LD_INT 28
13688: PUSH
13689: LD_INT 29
13691: PUSH
13692: LD_INT 30
13694: PUSH
13695: LD_INT 31
13697: PUSH
13698: LD_INT 32
13700: PUSH
13701: LD_INT 33
13703: PUSH
13704: LD_INT 34
13706: PUSH
13707: LD_INT 36
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 101
13749: PUSH
13750: LD_INT 102
13752: PUSH
13753: LD_INT 103
13755: PUSH
13756: LD_INT 104
13758: PUSH
13759: LD_INT 105
13761: PUSH
13762: LD_INT 106
13764: PUSH
13765: LD_INT 107
13767: PUSH
13768: LD_INT 108
13770: PUSH
13771: LD_INT 109
13773: PUSH
13774: LD_INT 110
13776: PUSH
13777: LD_INT 111
13779: PUSH
13780: LD_INT 112
13782: PUSH
13783: LD_INT 113
13785: PUSH
13786: LD_INT 114
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: ST_TO_ADDR
13809: GO 14184
13811: LD_INT 18
13813: DOUBLE
13814: EQUAL
13815: IFTRUE 13819
13817: GO 13955
13819: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: LD_INT 4
13830: PUSH
13831: LD_INT 5
13833: PUSH
13834: LD_INT 7
13836: PUSH
13837: LD_INT 11
13839: PUSH
13840: LD_INT 12
13842: PUSH
13843: LD_INT 15
13845: PUSH
13846: LD_INT 16
13848: PUSH
13849: LD_INT 20
13851: PUSH
13852: LD_INT 21
13854: PUSH
13855: LD_INT 22
13857: PUSH
13858: LD_INT 23
13860: PUSH
13861: LD_INT 25
13863: PUSH
13864: LD_INT 26
13866: PUSH
13867: LD_INT 30
13869: PUSH
13870: LD_INT 31
13872: PUSH
13873: LD_INT 32
13875: PUSH
13876: LD_INT 33
13878: PUSH
13879: LD_INT 34
13881: PUSH
13882: LD_INT 35
13884: PUSH
13885: LD_INT 36
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 101
13913: PUSH
13914: LD_INT 102
13916: PUSH
13917: LD_INT 103
13919: PUSH
13920: LD_INT 106
13922: PUSH
13923: LD_INT 108
13925: PUSH
13926: LD_INT 112
13928: PUSH
13929: LD_INT 113
13931: PUSH
13932: LD_INT 114
13934: PUSH
13935: LD_INT 115
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: ST_TO_ADDR
13953: GO 14184
13955: LD_INT 19
13957: DOUBLE
13958: EQUAL
13959: IFTRUE 13963
13961: GO 14183
13963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13964: LD_ADDR_VAR 0 1
13968: PUSH
13969: LD_INT 1
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: LD_INT 4
13980: PUSH
13981: LD_INT 5
13983: PUSH
13984: LD_INT 6
13986: PUSH
13987: LD_INT 7
13989: PUSH
13990: LD_INT 8
13992: PUSH
13993: LD_INT 9
13995: PUSH
13996: LD_INT 10
13998: PUSH
13999: LD_INT 11
14001: PUSH
14002: LD_INT 12
14004: PUSH
14005: LD_INT 13
14007: PUSH
14008: LD_INT 14
14010: PUSH
14011: LD_INT 15
14013: PUSH
14014: LD_INT 16
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 18
14022: PUSH
14023: LD_INT 19
14025: PUSH
14026: LD_INT 20
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 22
14034: PUSH
14035: LD_INT 23
14037: PUSH
14038: LD_INT 24
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 26
14046: PUSH
14047: LD_INT 27
14049: PUSH
14050: LD_INT 28
14052: PUSH
14053: LD_INT 29
14055: PUSH
14056: LD_INT 30
14058: PUSH
14059: LD_INT 31
14061: PUSH
14062: LD_INT 32
14064: PUSH
14065: LD_INT 33
14067: PUSH
14068: LD_INT 34
14070: PUSH
14071: LD_INT 35
14073: PUSH
14074: LD_INT 36
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 101
14117: PUSH
14118: LD_INT 102
14120: PUSH
14121: LD_INT 103
14123: PUSH
14124: LD_INT 104
14126: PUSH
14127: LD_INT 105
14129: PUSH
14130: LD_INT 106
14132: PUSH
14133: LD_INT 107
14135: PUSH
14136: LD_INT 108
14138: PUSH
14139: LD_INT 109
14141: PUSH
14142: LD_INT 110
14144: PUSH
14145: LD_INT 111
14147: PUSH
14148: LD_INT 112
14150: PUSH
14151: LD_INT 113
14153: PUSH
14154: LD_INT 114
14156: PUSH
14157: LD_INT 115
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: ST_TO_ADDR
14181: GO 14184
14183: POP
// end else
14184: GO 14403
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: LD_INT 2
14196: PUSH
14197: LD_INT 3
14199: PUSH
14200: LD_INT 4
14202: PUSH
14203: LD_INT 5
14205: PUSH
14206: LD_INT 6
14208: PUSH
14209: LD_INT 7
14211: PUSH
14212: LD_INT 8
14214: PUSH
14215: LD_INT 9
14217: PUSH
14218: LD_INT 10
14220: PUSH
14221: LD_INT 11
14223: PUSH
14224: LD_INT 12
14226: PUSH
14227: LD_INT 13
14229: PUSH
14230: LD_INT 14
14232: PUSH
14233: LD_INT 15
14235: PUSH
14236: LD_INT 16
14238: PUSH
14239: LD_INT 17
14241: PUSH
14242: LD_INT 18
14244: PUSH
14245: LD_INT 19
14247: PUSH
14248: LD_INT 20
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_INT 23
14259: PUSH
14260: LD_INT 24
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 26
14268: PUSH
14269: LD_INT 27
14271: PUSH
14272: LD_INT 28
14274: PUSH
14275: LD_INT 29
14277: PUSH
14278: LD_INT 30
14280: PUSH
14281: LD_INT 31
14283: PUSH
14284: LD_INT 32
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 34
14292: PUSH
14293: LD_INT 35
14295: PUSH
14296: LD_INT 36
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 101
14339: PUSH
14340: LD_INT 102
14342: PUSH
14343: LD_INT 103
14345: PUSH
14346: LD_INT 104
14348: PUSH
14349: LD_INT 105
14351: PUSH
14352: LD_INT 106
14354: PUSH
14355: LD_INT 107
14357: PUSH
14358: LD_INT 108
14360: PUSH
14361: LD_INT 109
14363: PUSH
14364: LD_INT 110
14366: PUSH
14367: LD_INT 111
14369: PUSH
14370: LD_INT 112
14372: PUSH
14373: LD_INT 113
14375: PUSH
14376: LD_INT 114
14378: PUSH
14379: LD_INT 115
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: ST_TO_ADDR
// if result then
14403: LD_VAR 0 1
14407: IFFALSE 14696
// begin normal :=  ;
14409: LD_ADDR_VAR 0 3
14413: PUSH
14414: LD_STRING 
14416: ST_TO_ADDR
// hardcore :=  ;
14417: LD_ADDR_VAR 0 4
14421: PUSH
14422: LD_STRING 
14424: ST_TO_ADDR
// for i = 1 to normalCounter do
14425: LD_ADDR_VAR 0 5
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_EXP 44
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14542
// begin tmp := 0 ;
14443: LD_ADDR_VAR 0 2
14447: PUSH
14448: LD_STRING 0
14450: ST_TO_ADDR
// if result [ 1 ] then
14451: LD_VAR 0 1
14455: PUSH
14456: LD_INT 1
14458: ARRAY
14459: IFFALSE 14524
// if result [ 1 ] [ 1 ] = i then
14461: LD_VAR 0 1
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PUSH
14474: LD_VAR 0 5
14478: EQUAL
14479: IFFALSE 14524
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14481: LD_ADDR_VAR 0 1
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: LD_INT 1
14493: PPUSH
14494: LD_VAR 0 1
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: LD_INT 1
14505: PPUSH
14506: CALL_OW 3
14510: PPUSH
14511: CALL_OW 1
14515: ST_TO_ADDR
// tmp := 1 ;
14516: LD_ADDR_VAR 0 2
14520: PUSH
14521: LD_STRING 1
14523: ST_TO_ADDR
// end ; normal := normal & tmp ;
14524: LD_ADDR_VAR 0 3
14528: PUSH
14529: LD_VAR 0 3
14533: PUSH
14534: LD_VAR 0 2
14538: STR
14539: ST_TO_ADDR
// end ;
14540: GO 14440
14542: POP
14543: POP
// for i = 1 to hardcoreCounter do
14544: LD_ADDR_VAR 0 5
14548: PUSH
14549: DOUBLE
14550: LD_INT 1
14552: DEC
14553: ST_TO_ADDR
14554: LD_EXP 45
14558: PUSH
14559: FOR_TO
14560: IFFALSE 14665
// begin tmp := 0 ;
14562: LD_ADDR_VAR 0 2
14566: PUSH
14567: LD_STRING 0
14569: ST_TO_ADDR
// if result [ 2 ] then
14570: LD_VAR 0 1
14574: PUSH
14575: LD_INT 2
14577: ARRAY
14578: IFFALSE 14647
// if result [ 2 ] [ 1 ] = 100 + i then
14580: LD_VAR 0 1
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: PUSH
14589: LD_INT 1
14591: ARRAY
14592: PUSH
14593: LD_INT 100
14595: PUSH
14596: LD_VAR 0 5
14600: PLUS
14601: EQUAL
14602: IFFALSE 14647
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14604: LD_ADDR_VAR 0 1
14608: PUSH
14609: LD_VAR 0 1
14613: PPUSH
14614: LD_INT 2
14616: PPUSH
14617: LD_VAR 0 1
14621: PUSH
14622: LD_INT 2
14624: ARRAY
14625: PPUSH
14626: LD_INT 1
14628: PPUSH
14629: CALL_OW 3
14633: PPUSH
14634: CALL_OW 1
14638: ST_TO_ADDR
// tmp := 1 ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: LD_STRING 1
14646: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: LD_VAR 0 4
14656: PUSH
14657: LD_VAR 0 2
14661: STR
14662: ST_TO_ADDR
// end ;
14663: GO 14559
14665: POP
14666: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14667: LD_STRING getStreamItemsFromMission("
14669: PUSH
14670: LD_VAR 0 3
14674: STR
14675: PUSH
14676: LD_STRING ","
14678: STR
14679: PUSH
14680: LD_VAR 0 4
14684: STR
14685: PUSH
14686: LD_STRING ")
14688: STR
14689: PPUSH
14690: CALL_OW 559
// end else
14694: GO 14703
// ToLua ( getStreamItemsFromMission("","") ) ;
14696: LD_STRING getStreamItemsFromMission("","")
14698: PPUSH
14699: CALL_OW 559
// end ;
14703: LD_VAR 0 1
14707: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14708: LD_EXP 43
14712: PUSH
14713: LD_EXP 48
14717: AND
14718: IFFALSE 14842
14720: GO 14722
14722: DISABLE
14723: LD_INT 0
14725: PPUSH
14726: PPUSH
// begin enable ;
14727: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14728: LD_ADDR_VAR 0 2
14732: PUSH
14733: LD_INT 22
14735: PUSH
14736: LD_OWVAR 2
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 34
14750: PUSH
14751: LD_INT 7
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 34
14760: PUSH
14761: LD_INT 45
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 34
14770: PUSH
14771: LD_INT 28
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 34
14780: PUSH
14781: LD_INT 47
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: ST_TO_ADDR
// if not tmp then
14804: LD_VAR 0 2
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 14842
// for i in tmp do
14813: LD_ADDR_VAR 0 1
14817: PUSH
14818: LD_VAR 0 2
14822: PUSH
14823: FOR_IN
14824: IFFALSE 14840
// begin SetLives ( i , 0 ) ;
14826: LD_VAR 0 1
14830: PPUSH
14831: LD_INT 0
14833: PPUSH
14834: CALL_OW 234
// end ;
14838: GO 14823
14840: POP
14841: POP
// end ;
14842: PPOPN 2
14844: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14845: LD_EXP 43
14849: PUSH
14850: LD_EXP 49
14854: AND
14855: IFFALSE 14939
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
14863: PPUSH
// begin enable ;
14864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14865: LD_ADDR_VAR 0 2
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_OWVAR 2
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 32
14884: PUSH
14885: LD_INT 3
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PPUSH
14896: CALL_OW 69
14900: ST_TO_ADDR
// if not tmp then
14901: LD_VAR 0 2
14905: NOT
14906: IFFALSE 14910
// exit ;
14908: GO 14939
// for i in tmp do
14910: LD_ADDR_VAR 0 1
14914: PUSH
14915: LD_VAR 0 2
14919: PUSH
14920: FOR_IN
14921: IFFALSE 14937
// begin SetLives ( i , 0 ) ;
14923: LD_VAR 0 1
14927: PPUSH
14928: LD_INT 0
14930: PPUSH
14931: CALL_OW 234
// end ;
14935: GO 14920
14937: POP
14938: POP
// end ;
14939: PPOPN 2
14941: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14942: LD_EXP 43
14946: PUSH
14947: LD_EXP 46
14951: AND
14952: IFFALSE 15045
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
// begin enable ;
14960: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14961: LD_ADDR_VAR 0 1
14965: PUSH
14966: LD_INT 22
14968: PUSH
14969: LD_OWVAR 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: LD_INT 25
14983: PUSH
14984: LD_INT 5
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 25
14993: PUSH
14994: LD_INT 9
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 25
15003: PUSH
15004: LD_INT 8
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: PUSH
15026: FOR_IN
15027: IFFALSE 15043
// begin SetClass ( i , 1 ) ;
15029: LD_VAR 0 1
15033: PPUSH
15034: LD_INT 1
15036: PPUSH
15037: CALL_OW 336
// end ;
15041: GO 15026
15043: POP
15044: POP
// end ;
15045: PPOPN 1
15047: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15048: LD_EXP 43
15052: PUSH
15053: LD_EXP 47
15057: AND
15058: PUSH
15059: LD_OWVAR 65
15063: PUSH
15064: LD_INT 7
15066: LESS
15067: AND
15068: IFFALSE 15082
15070: GO 15072
15072: DISABLE
// begin enable ;
15073: ENABLE
// game_speed := 7 ;
15074: LD_ADDR_OWVAR 65
15078: PUSH
15079: LD_INT 7
15081: ST_TO_ADDR
// end ;
15082: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15083: LD_EXP 43
15087: PUSH
15088: LD_EXP 50
15092: AND
15093: IFFALSE 15295
15095: GO 15097
15097: DISABLE
15098: LD_INT 0
15100: PPUSH
15101: PPUSH
15102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_INT 81
15110: PUSH
15111: LD_OWVAR 2
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 21
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PPUSH
15134: CALL_OW 69
15138: ST_TO_ADDR
// if not tmp then
15139: LD_VAR 0 3
15143: NOT
15144: IFFALSE 15148
// exit ;
15146: GO 15295
// if tmp > 5 then
15148: LD_VAR 0 3
15152: PUSH
15153: LD_INT 5
15155: GREATER
15156: IFFALSE 15168
// k := 5 else
15158: LD_ADDR_VAR 0 2
15162: PUSH
15163: LD_INT 5
15165: ST_TO_ADDR
15166: GO 15178
// k := tmp ;
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_VAR 0 3
15177: ST_TO_ADDR
// for i := 1 to k do
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: DOUBLE
15184: LD_INT 1
15186: DEC
15187: ST_TO_ADDR
15188: LD_VAR 0 2
15192: PUSH
15193: FOR_TO
15194: IFFALSE 15293
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15196: LD_VAR 0 3
15200: PUSH
15201: LD_VAR 0 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 4
15214: MOD
15215: PUSH
15216: LD_INT 1
15218: PLUS
15219: PPUSH
15220: CALL_OW 259
15224: PUSH
15225: LD_INT 10
15227: LESS
15228: IFFALSE 15291
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15230: LD_VAR 0 3
15234: PUSH
15235: LD_VAR 0 1
15239: ARRAY
15240: PPUSH
15241: LD_VAR 0 1
15245: PUSH
15246: LD_INT 4
15248: MOD
15249: PUSH
15250: LD_INT 1
15252: PLUS
15253: PPUSH
15254: LD_VAR 0 3
15258: PUSH
15259: LD_VAR 0 1
15263: ARRAY
15264: PPUSH
15265: LD_VAR 0 1
15269: PUSH
15270: LD_INT 4
15272: MOD
15273: PUSH
15274: LD_INT 1
15276: PLUS
15277: PPUSH
15278: CALL_OW 259
15282: PUSH
15283: LD_INT 1
15285: PLUS
15286: PPUSH
15287: CALL_OW 237
15291: GO 15193
15293: POP
15294: POP
// end ;
15295: PPOPN 3
15297: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15298: LD_EXP 43
15302: PUSH
15303: LD_EXP 51
15307: AND
15308: IFFALSE 15328
15310: GO 15312
15312: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15313: LD_INT 4
15315: PPUSH
15316: LD_OWVAR 2
15320: PPUSH
15321: LD_INT 0
15323: PPUSH
15324: CALL_OW 324
15328: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15329: LD_EXP 43
15333: PUSH
15334: LD_EXP 80
15338: AND
15339: IFFALSE 15359
15341: GO 15343
15343: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15344: LD_INT 19
15346: PPUSH
15347: LD_OWVAR 2
15351: PPUSH
15352: LD_INT 0
15354: PPUSH
15355: CALL_OW 324
15359: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15360: LD_EXP 43
15364: PUSH
15365: LD_EXP 52
15369: AND
15370: IFFALSE 15472
15372: GO 15374
15374: DISABLE
15375: LD_INT 0
15377: PPUSH
15378: PPUSH
// begin enable ;
15379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15380: LD_ADDR_VAR 0 2
15384: PUSH
15385: LD_INT 22
15387: PUSH
15388: LD_OWVAR 2
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 2
15399: PUSH
15400: LD_INT 34
15402: PUSH
15403: LD_INT 11
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 34
15412: PUSH
15413: LD_INT 30
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PPUSH
15429: CALL_OW 69
15433: ST_TO_ADDR
// if not tmp then
15434: LD_VAR 0 2
15438: NOT
15439: IFFALSE 15443
// exit ;
15441: GO 15472
// for i in tmp do
15443: LD_ADDR_VAR 0 1
15447: PUSH
15448: LD_VAR 0 2
15452: PUSH
15453: FOR_IN
15454: IFFALSE 15470
// begin SetLives ( i , 0 ) ;
15456: LD_VAR 0 1
15460: PPUSH
15461: LD_INT 0
15463: PPUSH
15464: CALL_OW 234
// end ;
15468: GO 15453
15470: POP
15471: POP
// end ;
15472: PPOPN 2
15474: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15475: LD_EXP 43
15479: PUSH
15480: LD_EXP 53
15484: AND
15485: IFFALSE 15505
15487: GO 15489
15489: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15490: LD_INT 32
15492: PPUSH
15493: LD_OWVAR 2
15497: PPUSH
15498: LD_INT 0
15500: PPUSH
15501: CALL_OW 324
15505: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15506: LD_EXP 43
15510: PUSH
15511: LD_EXP 54
15515: AND
15516: IFFALSE 15697
15518: GO 15520
15520: DISABLE
15521: LD_INT 0
15523: PPUSH
15524: PPUSH
15525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15526: LD_ADDR_VAR 0 2
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_OWVAR 2
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 33
15545: PUSH
15546: LD_INT 3
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 69
15561: ST_TO_ADDR
// if not tmp then
15562: LD_VAR 0 2
15566: NOT
15567: IFFALSE 15571
// exit ;
15569: GO 15697
// side := 0 ;
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_INT 0
15578: ST_TO_ADDR
// for i := 1 to 8 do
15579: LD_ADDR_VAR 0 1
15583: PUSH
15584: DOUBLE
15585: LD_INT 1
15587: DEC
15588: ST_TO_ADDR
15589: LD_INT 8
15591: PUSH
15592: FOR_TO
15593: IFFALSE 15641
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15595: LD_OWVAR 2
15599: PUSH
15600: LD_VAR 0 1
15604: NONEQUAL
15605: PUSH
15606: LD_OWVAR 2
15610: PPUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 81
15620: PUSH
15621: LD_INT 2
15623: EQUAL
15624: AND
15625: IFFALSE 15639
// begin side := i ;
15627: LD_ADDR_VAR 0 3
15631: PUSH
15632: LD_VAR 0 1
15636: ST_TO_ADDR
// break ;
15637: GO 15641
// end ;
15639: GO 15592
15641: POP
15642: POP
// if not side then
15643: LD_VAR 0 3
15647: NOT
15648: IFFALSE 15652
// exit ;
15650: GO 15697
// for i := 1 to tmp do
15652: LD_ADDR_VAR 0 1
15656: PUSH
15657: DOUBLE
15658: LD_INT 1
15660: DEC
15661: ST_TO_ADDR
15662: LD_VAR 0 2
15666: PUSH
15667: FOR_TO
15668: IFFALSE 15695
// if Prob ( 60 ) then
15670: LD_INT 60
15672: PPUSH
15673: CALL_OW 13
15677: IFFALSE 15693
// SetSide ( i , side ) ;
15679: LD_VAR 0 1
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: CALL_OW 235
15693: GO 15667
15695: POP
15696: POP
// end ;
15697: PPOPN 3
15699: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15700: LD_EXP 43
15704: PUSH
15705: LD_EXP 56
15709: AND
15710: IFFALSE 15829
15712: GO 15714
15714: DISABLE
15715: LD_INT 0
15717: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15718: LD_ADDR_VAR 0 1
15722: PUSH
15723: LD_INT 22
15725: PUSH
15726: LD_OWVAR 2
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 21
15737: PUSH
15738: LD_INT 1
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: LD_INT 23
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: PUSH
15772: FOR_IN
15773: IFFALSE 15827
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 257
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 4
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: IN
15803: IFFALSE 15825
// SetClass ( un , rand ( 1 , 4 ) ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: LD_INT 1
15812: PPUSH
15813: LD_INT 4
15815: PPUSH
15816: CALL_OW 12
15820: PPUSH
15821: CALL_OW 336
15825: GO 15772
15827: POP
15828: POP
// end ;
15829: PPOPN 1
15831: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15832: LD_EXP 43
15836: PUSH
15837: LD_EXP 55
15841: AND
15842: IFFALSE 15921
15844: GO 15846
15846: DISABLE
15847: LD_INT 0
15849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15850: LD_ADDR_VAR 0 1
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_OWVAR 2
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: LD_INT 3
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// if not tmp then
15886: LD_VAR 0 1
15890: NOT
15891: IFFALSE 15895
// exit ;
15893: GO 15921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15895: LD_VAR 0 1
15899: PUSH
15900: LD_INT 1
15902: PPUSH
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 12
15912: ARRAY
15913: PPUSH
15914: LD_INT 100
15916: PPUSH
15917: CALL_OW 234
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15924: LD_EXP 43
15928: PUSH
15929: LD_EXP 57
15933: AND
15934: IFFALSE 16032
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15942: LD_ADDR_VAR 0 1
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: ST_TO_ADDR
// if not tmp then
15978: LD_VAR 0 1
15982: NOT
15983: IFFALSE 15987
// exit ;
15985: GO 16032
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 12
16004: ARRAY
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: LD_INT 4
16011: PPUSH
16012: CALL_OW 12
16016: PPUSH
16017: LD_INT 3000
16019: PPUSH
16020: LD_INT 9000
16022: PPUSH
16023: CALL_OW 12
16027: PPUSH
16028: CALL_OW 492
// end ;
16032: PPOPN 1
16034: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16035: LD_EXP 43
16039: PUSH
16040: LD_EXP 58
16044: AND
16045: IFFALSE 16065
16047: GO 16049
16049: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16050: LD_INT 1
16052: PPUSH
16053: LD_OWVAR 2
16057: PPUSH
16058: LD_INT 0
16060: PPUSH
16061: CALL_OW 324
16065: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16066: LD_EXP 43
16070: PUSH
16071: LD_EXP 59
16075: AND
16076: IFFALSE 16159
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16085: LD_ADDR_VAR 0 2
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_OWVAR 2
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 21
16104: PUSH
16105: LD_INT 3
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PPUSH
16116: CALL_OW 69
16120: ST_TO_ADDR
// if not tmp then
16121: LD_VAR 0 2
16125: NOT
16126: IFFALSE 16130
// exit ;
16128: GO 16159
// for i in tmp do
16130: LD_ADDR_VAR 0 1
16134: PUSH
16135: LD_VAR 0 2
16139: PUSH
16140: FOR_IN
16141: IFFALSE 16157
// SetBLevel ( i , 10 ) ;
16143: LD_VAR 0 1
16147: PPUSH
16148: LD_INT 10
16150: PPUSH
16151: CALL_OW 241
16155: GO 16140
16157: POP
16158: POP
// end ;
16159: PPOPN 2
16161: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16162: LD_EXP 43
16166: PUSH
16167: LD_EXP 60
16171: AND
16172: IFFALSE 16283
16174: GO 16176
16176: DISABLE
16177: LD_INT 0
16179: PPUSH
16180: PPUSH
16181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_INT 22
16189: PUSH
16190: LD_OWVAR 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 25
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: ST_TO_ADDR
// if not tmp then
16218: LD_VAR 0 3
16222: NOT
16223: IFFALSE 16227
// exit ;
16225: GO 16283
// un := tmp [ rand ( 1 , tmp ) ] ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 1
16239: PPUSH
16240: LD_VAR 0 3
16244: PPUSH
16245: CALL_OW 12
16249: ARRAY
16250: ST_TO_ADDR
// if Crawls ( un ) then
16251: LD_VAR 0 2
16255: PPUSH
16256: CALL_OW 318
16260: IFFALSE 16271
// ComWalk ( un ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16271: LD_VAR 0 2
16275: PPUSH
16276: LD_INT 5
16278: PPUSH
16279: CALL_OW 336
// end ;
16283: PPOPN 3
16285: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16286: LD_EXP 43
16290: PUSH
16291: LD_EXP 61
16295: AND
16296: PUSH
16297: LD_OWVAR 67
16301: PUSH
16302: LD_INT 3
16304: LESS
16305: AND
16306: IFFALSE 16325
16308: GO 16310
16310: DISABLE
// Difficulty := Difficulty + 1 ;
16311: LD_ADDR_OWVAR 67
16315: PUSH
16316: LD_OWVAR 67
16320: PUSH
16321: LD_INT 1
16323: PLUS
16324: ST_TO_ADDR
16325: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16326: LD_EXP 43
16330: PUSH
16331: LD_EXP 62
16335: AND
16336: IFFALSE 16439
16338: GO 16340
16340: DISABLE
16341: LD_INT 0
16343: PPUSH
// begin for i := 1 to 5 do
16344: LD_ADDR_VAR 0 1
16348: PUSH
16349: DOUBLE
16350: LD_INT 1
16352: DEC
16353: ST_TO_ADDR
16354: LD_INT 5
16356: PUSH
16357: FOR_TO
16358: IFFALSE 16437
// begin uc_nation := nation_nature ;
16360: LD_ADDR_OWVAR 21
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// uc_side := 0 ;
16368: LD_ADDR_OWVAR 20
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16376: LD_ADDR_OWVAR 29
16380: PUSH
16381: LD_INT 12
16383: PUSH
16384: LD_INT 12
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: ST_TO_ADDR
// hc_agressivity := 20 ;
16391: LD_ADDR_OWVAR 35
16395: PUSH
16396: LD_INT 20
16398: ST_TO_ADDR
// hc_class := class_tiger ;
16399: LD_ADDR_OWVAR 28
16403: PUSH
16404: LD_INT 14
16406: ST_TO_ADDR
// hc_gallery :=  ;
16407: LD_ADDR_OWVAR 33
16411: PUSH
16412: LD_STRING 
16414: ST_TO_ADDR
// hc_name :=  ;
16415: LD_ADDR_OWVAR 26
16419: PUSH
16420: LD_STRING 
16422: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16423: CALL_OW 44
16427: PPUSH
16428: LD_INT 0
16430: PPUSH
16431: CALL_OW 51
// end ;
16435: GO 16357
16437: POP
16438: POP
// end ;
16439: PPOPN 1
16441: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16442: LD_EXP 43
16446: PUSH
16447: LD_EXP 63
16451: AND
16452: IFFALSE 16461
16454: GO 16456
16456: DISABLE
// StreamSibBomb ;
16457: CALL 16462 0 0
16461: END
// export function StreamSibBomb ; var i , x , y ; begin
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
// result := false ;
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// for i := 1 to 16 do
16476: LD_ADDR_VAR 0 2
16480: PUSH
16481: DOUBLE
16482: LD_INT 1
16484: DEC
16485: ST_TO_ADDR
16486: LD_INT 16
16488: PUSH
16489: FOR_TO
16490: IFFALSE 16689
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16492: LD_ADDR_VAR 0 3
16496: PUSH
16497: LD_INT 10
16499: PUSH
16500: LD_INT 20
16502: PUSH
16503: LD_INT 30
16505: PUSH
16506: LD_INT 40
16508: PUSH
16509: LD_INT 50
16511: PUSH
16512: LD_INT 60
16514: PUSH
16515: LD_INT 70
16517: PUSH
16518: LD_INT 80
16520: PUSH
16521: LD_INT 90
16523: PUSH
16524: LD_INT 100
16526: PUSH
16527: LD_INT 110
16529: PUSH
16530: LD_INT 120
16532: PUSH
16533: LD_INT 130
16535: PUSH
16536: LD_INT 140
16538: PUSH
16539: LD_INT 150
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: PPUSH
16562: LD_INT 15
16564: PPUSH
16565: CALL_OW 12
16569: ARRAY
16570: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16571: LD_ADDR_VAR 0 4
16575: PUSH
16576: LD_INT 10
16578: PUSH
16579: LD_INT 20
16581: PUSH
16582: LD_INT 30
16584: PUSH
16585: LD_INT 40
16587: PUSH
16588: LD_INT 50
16590: PUSH
16591: LD_INT 60
16593: PUSH
16594: LD_INT 70
16596: PUSH
16597: LD_INT 80
16599: PUSH
16600: LD_INT 90
16602: PUSH
16603: LD_INT 100
16605: PUSH
16606: LD_INT 110
16608: PUSH
16609: LD_INT 120
16611: PUSH
16612: LD_INT 130
16614: PUSH
16615: LD_INT 140
16617: PUSH
16618: LD_INT 150
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_INT 15
16643: PPUSH
16644: CALL_OW 12
16648: ARRAY
16649: ST_TO_ADDR
// if ValidHex ( x , y ) then
16650: LD_VAR 0 3
16654: PPUSH
16655: LD_VAR 0 4
16659: PPUSH
16660: CALL_OW 488
16664: IFFALSE 16687
// begin result := [ x , y ] ;
16666: LD_ADDR_VAR 0 1
16670: PUSH
16671: LD_VAR 0 3
16675: PUSH
16676: LD_VAR 0 4
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: ST_TO_ADDR
// break ;
16685: GO 16689
// end ; end ;
16687: GO 16489
16689: POP
16690: POP
// if result then
16691: LD_VAR 0 1
16695: IFFALSE 16755
// begin ToLua ( playSibBomb() ) ;
16697: LD_STRING playSibBomb()
16699: PPUSH
16700: CALL_OW 559
// wait ( 0 0$14 ) ;
16704: LD_INT 490
16706: PPUSH
16707: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 1
16718: ARRAY
16719: PPUSH
16720: LD_VAR 0 1
16724: PUSH
16725: LD_INT 2
16727: ARRAY
16728: PPUSH
16729: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16733: LD_VAR 0 1
16737: PUSH
16738: LD_INT 1
16740: ARRAY
16741: PPUSH
16742: LD_VAR 0 1
16746: PUSH
16747: LD_INT 2
16749: ARRAY
16750: PPUSH
16751: CALL_OW 429
// end ; end ;
16755: LD_VAR 0 1
16759: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16760: LD_EXP 43
16764: PUSH
16765: LD_EXP 65
16769: AND
16770: IFFALSE 16782
16772: GO 16774
16774: DISABLE
// YouLost (  ) ;
16775: LD_STRING 
16777: PPUSH
16778: CALL_OW 104
16782: END
// every 0 0$1 trigger StreamModeActive and sFog do
16783: LD_EXP 43
16787: PUSH
16788: LD_EXP 64
16792: AND
16793: IFFALSE 16807
16795: GO 16797
16797: DISABLE
// FogOff ( your_side ) ;
16798: LD_OWVAR 2
16802: PPUSH
16803: CALL_OW 344
16807: END
// every 0 0$1 trigger StreamModeActive and sSun do
16808: LD_EXP 43
16812: PUSH
16813: LD_EXP 66
16817: AND
16818: IFFALSE 16846
16820: GO 16822
16822: DISABLE
// begin solar_recharge_percent := 0 ;
16823: LD_ADDR_OWVAR 79
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16831: LD_INT 10500
16833: PPUSH
16834: CALL_OW 67
// solar_recharge_percent := 100 ;
16838: LD_ADDR_OWVAR 79
16842: PUSH
16843: LD_INT 100
16845: ST_TO_ADDR
// end ;
16846: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16847: LD_EXP 43
16851: PUSH
16852: LD_EXP 67
16856: AND
16857: IFFALSE 17096
16859: GO 16861
16861: DISABLE
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
16866: PPUSH
// begin tmp := [ ] ;
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: EMPTY
16873: ST_TO_ADDR
// for i := 1 to 6 do
16874: LD_ADDR_VAR 0 1
16878: PUSH
16879: DOUBLE
16880: LD_INT 1
16882: DEC
16883: ST_TO_ADDR
16884: LD_INT 6
16886: PUSH
16887: FOR_TO
16888: IFFALSE 16993
// begin uc_nation := nation_nature ;
16890: LD_ADDR_OWVAR 21
16894: PUSH
16895: LD_INT 0
16897: ST_TO_ADDR
// uc_side := 0 ;
16898: LD_ADDR_OWVAR 20
16902: PUSH
16903: LD_INT 0
16905: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16906: LD_ADDR_OWVAR 29
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 12
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: ST_TO_ADDR
// hc_agressivity := 20 ;
16921: LD_ADDR_OWVAR 35
16925: PUSH
16926: LD_INT 20
16928: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16929: LD_ADDR_OWVAR 28
16933: PUSH
16934: LD_INT 17
16936: ST_TO_ADDR
// hc_gallery :=  ;
16937: LD_ADDR_OWVAR 33
16941: PUSH
16942: LD_STRING 
16944: ST_TO_ADDR
// hc_name :=  ;
16945: LD_ADDR_OWVAR 26
16949: PUSH
16950: LD_STRING 
16952: ST_TO_ADDR
// un := CreateHuman ;
16953: LD_ADDR_VAR 0 2
16957: PUSH
16958: CALL_OW 44
16962: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16963: LD_VAR 0 2
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 51
// tmp := tmp ^ un ;
16975: LD_ADDR_VAR 0 3
16979: PUSH
16980: LD_VAR 0 3
16984: PUSH
16985: LD_VAR 0 2
16989: ADD
16990: ST_TO_ADDR
// end ;
16991: GO 16887
16993: POP
16994: POP
// repeat wait ( 0 0$1 ) ;
16995: LD_INT 35
16997: PPUSH
16998: CALL_OW 67
// for un in tmp do
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_VAR 0 3
17011: PUSH
17012: FOR_IN
17013: IFFALSE 17087
// begin if IsDead ( un ) then
17015: LD_VAR 0 2
17019: PPUSH
17020: CALL_OW 301
17024: IFFALSE 17044
// begin tmp := tmp diff un ;
17026: LD_ADDR_VAR 0 3
17030: PUSH
17031: LD_VAR 0 3
17035: PUSH
17036: LD_VAR 0 2
17040: DIFF
17041: ST_TO_ADDR
// continue ;
17042: GO 17012
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17044: LD_VAR 0 2
17048: PPUSH
17049: LD_INT 3
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: PPUSH
17071: LD_VAR 0 2
17075: PPUSH
17076: CALL_OW 74
17080: PPUSH
17081: CALL_OW 115
// end ;
17085: GO 17012
17087: POP
17088: POP
// until not tmp ;
17089: LD_VAR 0 3
17093: NOT
17094: IFFALSE 16995
// end ;
17096: PPOPN 3
17098: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17099: LD_EXP 43
17103: PUSH
17104: LD_EXP 68
17108: AND
17109: IFFALSE 17163
17111: GO 17113
17113: DISABLE
// begin ToLua ( displayTroll(); ) ;
17114: LD_STRING displayTroll();
17116: PPUSH
17117: CALL_OW 559
// wait ( 3 3$00 ) ;
17121: LD_INT 6300
17123: PPUSH
17124: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17128: LD_STRING hideTroll();
17130: PPUSH
17131: CALL_OW 559
// wait ( 1 1$00 ) ;
17135: LD_INT 2100
17137: PPUSH
17138: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17142: LD_STRING displayTroll();
17144: PPUSH
17145: CALL_OW 559
// wait ( 1 1$00 ) ;
17149: LD_INT 2100
17151: PPUSH
17152: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17156: LD_STRING hideTroll();
17158: PPUSH
17159: CALL_OW 559
// end ;
17163: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17164: LD_EXP 43
17168: PUSH
17169: LD_EXP 69
17173: AND
17174: IFFALSE 17237
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
// begin p := 0 ;
17182: LD_ADDR_VAR 0 1
17186: PUSH
17187: LD_INT 0
17189: ST_TO_ADDR
// repeat game_speed := 1 ;
17190: LD_ADDR_OWVAR 65
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17198: LD_INT 35
17200: PPUSH
17201: CALL_OW 67
// p := p + 1 ;
17205: LD_ADDR_VAR 0 1
17209: PUSH
17210: LD_VAR 0 1
17214: PUSH
17215: LD_INT 1
17217: PLUS
17218: ST_TO_ADDR
// until p >= 60 ;
17219: LD_VAR 0 1
17223: PUSH
17224: LD_INT 60
17226: GREATEREQUAL
17227: IFFALSE 17190
// game_speed := 4 ;
17229: LD_ADDR_OWVAR 65
17233: PUSH
17234: LD_INT 4
17236: ST_TO_ADDR
// end ;
17237: PPOPN 1
17239: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17240: LD_EXP 43
17244: PUSH
17245: LD_EXP 70
17249: AND
17250: IFFALSE 17396
17252: GO 17254
17254: DISABLE
17255: LD_INT 0
17257: PPUSH
17258: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17259: LD_ADDR_VAR 0 1
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_OWVAR 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 30
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 30
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: ST_TO_ADDR
// if not depot then
17313: LD_VAR 0 1
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17396
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17322: LD_ADDR_VAR 0 2
17326: PUSH
17327: LD_VAR 0 1
17331: PUSH
17332: LD_INT 1
17334: PPUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 12
17344: ARRAY
17345: PPUSH
17346: CALL_OW 274
17350: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17351: LD_VAR 0 2
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: LD_INT 0
17361: PPUSH
17362: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17366: LD_VAR 0 2
17370: PPUSH
17371: LD_INT 2
17373: PPUSH
17374: LD_INT 0
17376: PPUSH
17377: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17381: LD_VAR 0 2
17385: PPUSH
17386: LD_INT 3
17388: PPUSH
17389: LD_INT 0
17391: PPUSH
17392: CALL_OW 277
// end ;
17396: PPOPN 2
17398: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17399: LD_EXP 43
17403: PUSH
17404: LD_EXP 71
17408: AND
17409: IFFALSE 17506
17411: GO 17413
17413: DISABLE
17414: LD_INT 0
17416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_OWVAR 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 21
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 23
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: ST_TO_ADDR
// if not tmp then
17471: LD_VAR 0 1
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17480: LD_VAR 0 1
17484: PUSH
17485: LD_INT 1
17487: PPUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: PPUSH
17499: LD_INT 200
17501: PPUSH
17502: CALL_OW 234
// end ;
17506: PPOPN 1
17508: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17509: LD_EXP 43
17513: PUSH
17514: LD_EXP 72
17518: AND
17519: IFFALSE 17598
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17527: LD_ADDR_VAR 0 1
17531: PUSH
17532: LD_INT 22
17534: PUSH
17535: LD_OWVAR 2
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 21
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PPUSH
17558: CALL_OW 69
17562: ST_TO_ADDR
// if not tmp then
17563: LD_VAR 0 1
17567: NOT
17568: IFFALSE 17572
// exit ;
17570: GO 17598
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17572: LD_VAR 0 1
17576: PUSH
17577: LD_INT 1
17579: PPUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 12
17589: ARRAY
17590: PPUSH
17591: LD_INT 60
17593: PPUSH
17594: CALL_OW 234
// end ;
17598: PPOPN 1
17600: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17601: LD_EXP 43
17605: PUSH
17606: LD_EXP 73
17610: AND
17611: IFFALSE 17710
17613: GO 17615
17615: DISABLE
17616: LD_INT 0
17618: PPUSH
17619: PPUSH
// begin enable ;
17620: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17621: LD_ADDR_VAR 0 1
17625: PUSH
17626: LD_INT 22
17628: PUSH
17629: LD_OWVAR 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 61
17640: PUSH
17641: EMPTY
17642: LIST
17643: PUSH
17644: LD_INT 33
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: PPUSH
17659: CALL_OW 69
17663: ST_TO_ADDR
// if not tmp then
17664: LD_VAR 0 1
17668: NOT
17669: IFFALSE 17673
// exit ;
17671: GO 17710
// for i in tmp do
17673: LD_ADDR_VAR 0 2
17677: PUSH
17678: LD_VAR 0 1
17682: PUSH
17683: FOR_IN
17684: IFFALSE 17708
// if IsControledBy ( i ) then
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 312
17695: IFFALSE 17706
// ComUnlink ( i ) ;
17697: LD_VAR 0 2
17701: PPUSH
17702: CALL_OW 136
17706: GO 17683
17708: POP
17709: POP
// end ;
17710: PPOPN 2
17712: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17713: LD_EXP 43
17717: PUSH
17718: LD_EXP 74
17722: AND
17723: IFFALSE 17863
17725: GO 17727
17727: DISABLE
17728: LD_INT 0
17730: PPUSH
17731: PPUSH
// begin ToLua ( displayPowell(); ) ;
17732: LD_STRING displayPowell();
17734: PPUSH
17735: CALL_OW 559
// uc_side := 0 ;
17739: LD_ADDR_OWVAR 20
17743: PUSH
17744: LD_INT 0
17746: ST_TO_ADDR
// uc_nation := 2 ;
17747: LD_ADDR_OWVAR 21
17751: PUSH
17752: LD_INT 2
17754: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17755: LD_ADDR_OWVAR 37
17759: PUSH
17760: LD_INT 14
17762: ST_TO_ADDR
// vc_engine := engine_siberite ;
17763: LD_ADDR_OWVAR 39
17767: PUSH
17768: LD_INT 3
17770: ST_TO_ADDR
// vc_control := control_apeman ;
17771: LD_ADDR_OWVAR 38
17775: PUSH
17776: LD_INT 5
17778: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17779: LD_ADDR_OWVAR 40
17783: PUSH
17784: LD_INT 29
17786: ST_TO_ADDR
// un := CreateVehicle ;
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: CALL_OW 45
17796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17797: LD_VAR 0 2
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17809: LD_INT 35
17811: PPUSH
17812: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17816: LD_VAR 0 2
17820: PPUSH
17821: LD_INT 22
17823: PUSH
17824: LD_OWVAR 2
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PPUSH
17833: CALL_OW 69
17837: PPUSH
17838: LD_VAR 0 2
17842: PPUSH
17843: CALL_OW 74
17847: PPUSH
17848: CALL_OW 115
// until IsDead ( un ) ;
17852: LD_VAR 0 2
17856: PPUSH
17857: CALL_OW 301
17861: IFFALSE 17809
// end ;
17863: PPOPN 2
17865: END
// every 0 0$1 trigger StreamModeActive and sStu do
17866: LD_EXP 43
17870: PUSH
17871: LD_EXP 82
17875: AND
17876: IFFALSE 17892
17878: GO 17880
17880: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17881: LD_STRING displayStucuk();
17883: PPUSH
17884: CALL_OW 559
// ResetFog ;
17888: CALL_OW 335
// end ;
17892: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17893: LD_EXP 43
17897: PUSH
17898: LD_EXP 75
17902: AND
17903: IFFALSE 18044
17905: GO 17907
17907: DISABLE
17908: LD_INT 0
17910: PPUSH
17911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17912: LD_ADDR_VAR 0 2
17916: PUSH
17917: LD_INT 22
17919: PUSH
17920: LD_OWVAR 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 21
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: CALL_OW 69
17947: ST_TO_ADDR
// if not tmp then
17948: LD_VAR 0 2
17952: NOT
17953: IFFALSE 17957
// exit ;
17955: GO 18044
// un := tmp [ rand ( 1 , tmp ) ] ;
17957: LD_ADDR_VAR 0 1
17961: PUSH
17962: LD_VAR 0 2
17966: PUSH
17967: LD_INT 1
17969: PPUSH
17970: LD_VAR 0 2
17974: PPUSH
17975: CALL_OW 12
17979: ARRAY
17980: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17981: LD_VAR 0 1
17985: PPUSH
17986: LD_INT 0
17988: PPUSH
17989: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17993: LD_VAR 0 1
17997: PPUSH
17998: LD_OWVAR 3
18002: PUSH
18003: LD_VAR 0 1
18007: DIFF
18008: PPUSH
18009: LD_VAR 0 1
18013: PPUSH
18014: CALL_OW 74
18018: PPUSH
18019: CALL_OW 115
// wait ( 0 0$20 ) ;
18023: LD_INT 700
18025: PPUSH
18026: CALL_OW 67
// SetSide ( un , your_side ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_OWVAR 2
18039: PPUSH
18040: CALL_OW 235
// end ;
18044: PPOPN 2
18046: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18047: LD_EXP 43
18051: PUSH
18052: LD_EXP 76
18056: AND
18057: IFFALSE 18163
18059: GO 18061
18061: DISABLE
18062: LD_INT 0
18064: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18065: LD_ADDR_VAR 0 1
18069: PUSH
18070: LD_INT 22
18072: PUSH
18073: LD_OWVAR 2
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: LD_INT 30
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 30
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PPUSH
18114: CALL_OW 69
18118: ST_TO_ADDR
// if not depot then
18119: LD_VAR 0 1
18123: NOT
18124: IFFALSE 18128
// exit ;
18126: GO 18163
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18128: LD_VAR 0 1
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: PPUSH
18137: CALL_OW 250
18141: PPUSH
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 1
18149: ARRAY
18150: PPUSH
18151: CALL_OW 251
18155: PPUSH
18156: LD_INT 70
18158: PPUSH
18159: CALL_OW 495
// end ;
18163: PPOPN 1
18165: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18166: LD_EXP 43
18170: PUSH
18171: LD_EXP 77
18175: AND
18176: IFFALSE 18387
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
18184: PPUSH
18185: PPUSH
18186: PPUSH
18187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18188: LD_ADDR_VAR 0 5
18192: PUSH
18193: LD_INT 22
18195: PUSH
18196: LD_OWVAR 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 21
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PPUSH
18219: CALL_OW 69
18223: ST_TO_ADDR
// if not tmp then
18224: LD_VAR 0 5
18228: NOT
18229: IFFALSE 18233
// exit ;
18231: GO 18387
// for i in tmp do
18233: LD_ADDR_VAR 0 1
18237: PUSH
18238: LD_VAR 0 5
18242: PUSH
18243: FOR_IN
18244: IFFALSE 18385
// begin d := rand ( 0 , 5 ) ;
18246: LD_ADDR_VAR 0 4
18250: PUSH
18251: LD_INT 0
18253: PPUSH
18254: LD_INT 5
18256: PPUSH
18257: CALL_OW 12
18261: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18262: LD_ADDR_VAR 0 2
18266: PUSH
18267: LD_VAR 0 1
18271: PPUSH
18272: CALL_OW 250
18276: PPUSH
18277: LD_VAR 0 4
18281: PPUSH
18282: LD_INT 3
18284: PPUSH
18285: LD_INT 12
18287: PPUSH
18288: CALL_OW 12
18292: PPUSH
18293: CALL_OW 272
18297: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 251
18312: PPUSH
18313: LD_VAR 0 4
18317: PPUSH
18318: LD_INT 3
18320: PPUSH
18321: LD_INT 12
18323: PPUSH
18324: CALL_OW 12
18328: PPUSH
18329: CALL_OW 273
18333: ST_TO_ADDR
// if ValidHex ( x , y ) then
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_VAR 0 3
18343: PPUSH
18344: CALL_OW 488
18348: IFFALSE 18383
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18350: LD_VAR 0 1
18354: PPUSH
18355: LD_VAR 0 2
18359: PPUSH
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 3
18367: PPUSH
18368: LD_INT 6
18370: PPUSH
18371: CALL_OW 12
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 483
// end ;
18383: GO 18243
18385: POP
18386: POP
// end ;
18387: PPOPN 5
18389: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18390: LD_EXP 43
18394: PUSH
18395: LD_EXP 78
18399: AND
18400: IFFALSE 18494
18402: GO 18404
18404: DISABLE
18405: LD_INT 0
18407: PPUSH
18408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_OWVAR 2
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 32
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 21
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: PPUSH
18451: CALL_OW 69
18455: ST_TO_ADDR
// if not tmp then
18456: LD_VAR 0 2
18460: NOT
18461: IFFALSE 18465
// exit ;
18463: GO 18494
// for i in tmp do
18465: LD_ADDR_VAR 0 1
18469: PUSH
18470: LD_VAR 0 2
18474: PUSH
18475: FOR_IN
18476: IFFALSE 18492
// SetFuel ( i , 0 ) ;
18478: LD_VAR 0 1
18482: PPUSH
18483: LD_INT 0
18485: PPUSH
18486: CALL_OW 240
18490: GO 18475
18492: POP
18493: POP
// end ;
18494: PPOPN 2
18496: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18497: LD_EXP 43
18501: PUSH
18502: LD_EXP 79
18506: AND
18507: IFFALSE 18573
18509: GO 18511
18511: DISABLE
18512: LD_INT 0
18514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18515: LD_ADDR_VAR 0 1
18519: PUSH
18520: LD_INT 22
18522: PUSH
18523: LD_OWVAR 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 30
18534: PUSH
18535: LD_INT 29
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 1
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18573
// DestroyUnit ( tmp [ 1 ] ) ;
18560: LD_VAR 0 1
18564: PUSH
18565: LD_INT 1
18567: ARRAY
18568: PPUSH
18569: CALL_OW 65
// end ;
18573: PPOPN 1
18575: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18576: LD_EXP 43
18580: PUSH
18581: LD_EXP 81
18585: AND
18586: IFFALSE 18715
18588: GO 18590
18590: DISABLE
18591: LD_INT 0
18593: PPUSH
// begin uc_side := 0 ;
18594: LD_ADDR_OWVAR 20
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// uc_nation := nation_arabian ;
18602: LD_ADDR_OWVAR 21
18606: PUSH
18607: LD_INT 2
18609: ST_TO_ADDR
// hc_gallery :=  ;
18610: LD_ADDR_OWVAR 33
18614: PUSH
18615: LD_STRING 
18617: ST_TO_ADDR
// hc_name :=  ;
18618: LD_ADDR_OWVAR 26
18622: PUSH
18623: LD_STRING 
18625: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18626: LD_INT 1
18628: PPUSH
18629: LD_INT 11
18631: PPUSH
18632: LD_INT 10
18634: PPUSH
18635: CALL_OW 380
// un := CreateHuman ;
18639: LD_ADDR_VAR 0 1
18643: PUSH
18644: CALL_OW 44
18648: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18649: LD_VAR 0 1
18653: PPUSH
18654: LD_INT 1
18656: PPUSH
18657: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18668: LD_VAR 0 1
18672: PPUSH
18673: LD_INT 22
18675: PUSH
18676: LD_OWVAR 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: PPUSH
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 74
18699: PPUSH
18700: CALL_OW 115
// until IsDead ( un ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: CALL_OW 301
18713: IFFALSE 18661
// end ;
18715: PPOPN 1
18717: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18718: LD_EXP 43
18722: PUSH
18723: LD_EXP 83
18727: AND
18728: IFFALSE 18740
18730: GO 18732
18732: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18733: LD_STRING earthquake(getX(game), 0, 32)
18735: PPUSH
18736: CALL_OW 559
18740: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18741: LD_EXP 43
18745: PUSH
18746: LD_EXP 84
18750: AND
18751: IFFALSE 18842
18753: GO 18755
18755: DISABLE
18756: LD_INT 0
18758: PPUSH
// begin enable ;
18759: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18760: LD_ADDR_VAR 0 1
18764: PUSH
18765: LD_INT 22
18767: PUSH
18768: LD_OWVAR 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 21
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 33
18789: PUSH
18790: LD_INT 3
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: ST_TO_ADDR
// if not tmp then
18807: LD_VAR 0 1
18811: NOT
18812: IFFALSE 18816
// exit ;
18814: GO 18842
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18816: LD_VAR 0 1
18820: PUSH
18821: LD_INT 1
18823: PPUSH
18824: LD_VAR 0 1
18828: PPUSH
18829: CALL_OW 12
18833: ARRAY
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: CALL_OW 234
// end ;
18842: PPOPN 1
18844: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18845: LD_EXP 43
18849: PUSH
18850: LD_EXP 85
18854: AND
18855: IFFALSE 18996
18857: GO 18859
18859: DISABLE
18860: LD_INT 0
18862: PPUSH
18863: PPUSH
18864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_INT 22
18872: PUSH
18873: LD_OWVAR 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 25
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL_OW 69
18900: ST_TO_ADDR
// if not tmp then
18901: LD_VAR 0 3
18905: NOT
18906: IFFALSE 18910
// exit ;
18908: GO 18996
// un := tmp [ rand ( 1 , tmp ) ] ;
18910: LD_ADDR_VAR 0 2
18914: PUSH
18915: LD_VAR 0 3
18919: PUSH
18920: LD_INT 1
18922: PPUSH
18923: LD_VAR 0 3
18927: PPUSH
18928: CALL_OW 12
18932: ARRAY
18933: ST_TO_ADDR
// if Crawls ( un ) then
18934: LD_VAR 0 2
18938: PPUSH
18939: CALL_OW 318
18943: IFFALSE 18954
// ComWalk ( un ) ;
18945: LD_VAR 0 2
18949: PPUSH
18950: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18954: LD_VAR 0 2
18958: PPUSH
18959: LD_INT 9
18961: PPUSH
18962: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18966: LD_INT 28
18968: PPUSH
18969: LD_OWVAR 2
18973: PPUSH
18974: LD_INT 2
18976: PPUSH
18977: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18981: LD_INT 29
18983: PPUSH
18984: LD_OWVAR 2
18988: PPUSH
18989: LD_INT 2
18991: PPUSH
18992: CALL_OW 322
// end ;
18996: PPOPN 3
18998: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18999: LD_EXP 43
19003: PUSH
19004: LD_EXP 86
19008: AND
19009: IFFALSE 19120
19011: GO 19013
19013: DISABLE
19014: LD_INT 0
19016: PPUSH
19017: PPUSH
19018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19019: LD_ADDR_VAR 0 3
19023: PUSH
19024: LD_INT 22
19026: PUSH
19027: LD_OWVAR 2
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 25
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PPUSH
19050: CALL_OW 69
19054: ST_TO_ADDR
// if not tmp then
19055: LD_VAR 0 3
19059: NOT
19060: IFFALSE 19064
// exit ;
19062: GO 19120
// un := tmp [ rand ( 1 , tmp ) ] ;
19064: LD_ADDR_VAR 0 2
19068: PUSH
19069: LD_VAR 0 3
19073: PUSH
19074: LD_INT 1
19076: PPUSH
19077: LD_VAR 0 3
19081: PPUSH
19082: CALL_OW 12
19086: ARRAY
19087: ST_TO_ADDR
// if Crawls ( un ) then
19088: LD_VAR 0 2
19092: PPUSH
19093: CALL_OW 318
19097: IFFALSE 19108
// ComWalk ( un ) ;
19099: LD_VAR 0 2
19103: PPUSH
19104: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19108: LD_VAR 0 2
19112: PPUSH
19113: LD_INT 8
19115: PPUSH
19116: CALL_OW 336
// end ;
19120: PPOPN 3
19122: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19123: LD_EXP 43
19127: PUSH
19128: LD_EXP 87
19132: AND
19133: IFFALSE 19277
19135: GO 19137
19137: DISABLE
19138: LD_INT 0
19140: PPUSH
19141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19142: LD_ADDR_VAR 0 2
19146: PUSH
19147: LD_INT 22
19149: PUSH
19150: LD_OWVAR 2
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 21
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 34
19174: PUSH
19175: LD_INT 12
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 34
19184: PUSH
19185: LD_INT 51
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 34
19194: PUSH
19195: LD_INT 32
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 69
19217: ST_TO_ADDR
// if not tmp then
19218: LD_VAR 0 2
19222: NOT
19223: IFFALSE 19227
// exit ;
19225: GO 19277
// for i in tmp do
19227: LD_ADDR_VAR 0 1
19231: PUSH
19232: LD_VAR 0 2
19236: PUSH
19237: FOR_IN
19238: IFFALSE 19275
// if GetCargo ( i , mat_artifact ) = 0 then
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_INT 4
19247: PPUSH
19248: CALL_OW 289
19252: PUSH
19253: LD_INT 0
19255: EQUAL
19256: IFFALSE 19273
// SetCargo ( i , mat_siberit , 100 ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_INT 3
19265: PPUSH
19266: LD_INT 100
19268: PPUSH
19269: CALL_OW 290
19273: GO 19237
19275: POP
19276: POP
// end ;
19277: PPOPN 2
19279: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19280: LD_EXP 43
19284: PUSH
19285: LD_EXP 88
19289: AND
19290: IFFALSE 19473
19292: GO 19294
19294: DISABLE
19295: LD_INT 0
19297: PPUSH
19298: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19299: LD_ADDR_VAR 0 2
19303: PUSH
19304: LD_INT 22
19306: PUSH
19307: LD_OWVAR 2
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PPUSH
19316: CALL_OW 69
19320: ST_TO_ADDR
// if not tmp then
19321: LD_VAR 0 2
19325: NOT
19326: IFFALSE 19330
// exit ;
19328: GO 19473
// for i := 1 to 2 do
19330: LD_ADDR_VAR 0 1
19334: PUSH
19335: DOUBLE
19336: LD_INT 1
19338: DEC
19339: ST_TO_ADDR
19340: LD_INT 2
19342: PUSH
19343: FOR_TO
19344: IFFALSE 19471
// begin uc_side := your_side ;
19346: LD_ADDR_OWVAR 20
19350: PUSH
19351: LD_OWVAR 2
19355: ST_TO_ADDR
// uc_nation := nation_american ;
19356: LD_ADDR_OWVAR 21
19360: PUSH
19361: LD_INT 1
19363: ST_TO_ADDR
// vc_chassis := us_morphling ;
19364: LD_ADDR_OWVAR 37
19368: PUSH
19369: LD_INT 5
19371: ST_TO_ADDR
// vc_engine := engine_siberite ;
19372: LD_ADDR_OWVAR 39
19376: PUSH
19377: LD_INT 3
19379: ST_TO_ADDR
// vc_control := control_computer ;
19380: LD_ADDR_OWVAR 38
19384: PUSH
19385: LD_INT 3
19387: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19388: LD_ADDR_OWVAR 40
19392: PUSH
19393: LD_INT 10
19395: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19396: LD_VAR 0 2
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PPUSH
19405: CALL_OW 310
19409: NOT
19410: IFFALSE 19457
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19412: CALL_OW 45
19416: PPUSH
19417: LD_VAR 0 2
19421: PUSH
19422: LD_INT 1
19424: ARRAY
19425: PPUSH
19426: CALL_OW 250
19430: PPUSH
19431: LD_VAR 0 2
19435: PUSH
19436: LD_INT 1
19438: ARRAY
19439: PPUSH
19440: CALL_OW 251
19444: PPUSH
19445: LD_INT 12
19447: PPUSH
19448: LD_INT 1
19450: PPUSH
19451: CALL_OW 50
19455: GO 19469
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19457: CALL_OW 45
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL_OW 51
// end ;
19469: GO 19343
19471: POP
19472: POP
// end ;
19473: PPOPN 2
19475: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19476: LD_EXP 43
19480: PUSH
19481: LD_EXP 89
19485: AND
19486: IFFALSE 19708
19488: GO 19490
19490: DISABLE
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19499: LD_ADDR_VAR 0 6
19503: PUSH
19504: LD_INT 22
19506: PUSH
19507: LD_OWVAR 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 3
19528: PUSH
19529: LD_INT 23
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: LIST
19547: PPUSH
19548: CALL_OW 69
19552: ST_TO_ADDR
// if not tmp then
19553: LD_VAR 0 6
19557: NOT
19558: IFFALSE 19562
// exit ;
19560: GO 19708
// s1 := rand ( 1 , 4 ) ;
19562: LD_ADDR_VAR 0 2
19566: PUSH
19567: LD_INT 1
19569: PPUSH
19570: LD_INT 4
19572: PPUSH
19573: CALL_OW 12
19577: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19578: LD_ADDR_VAR 0 4
19582: PUSH
19583: LD_VAR 0 6
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: PPUSH
19592: LD_VAR 0 2
19596: PPUSH
19597: CALL_OW 259
19601: ST_TO_ADDR
// if s1 = 1 then
19602: LD_VAR 0 2
19606: PUSH
19607: LD_INT 1
19609: EQUAL
19610: IFFALSE 19630
// s2 := rand ( 2 , 4 ) else
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: LD_INT 2
19619: PPUSH
19620: LD_INT 4
19622: PPUSH
19623: CALL_OW 12
19627: ST_TO_ADDR
19628: GO 19638
// s2 := 1 ;
19630: LD_ADDR_VAR 0 3
19634: PUSH
19635: LD_INT 1
19637: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19638: LD_ADDR_VAR 0 5
19642: PUSH
19643: LD_VAR 0 6
19647: PUSH
19648: LD_INT 1
19650: ARRAY
19651: PPUSH
19652: LD_VAR 0 3
19656: PPUSH
19657: CALL_OW 259
19661: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19662: LD_VAR 0 6
19666: PUSH
19667: LD_INT 1
19669: ARRAY
19670: PPUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: LD_VAR 0 5
19680: PPUSH
19681: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19685: LD_VAR 0 6
19689: PUSH
19690: LD_INT 1
19692: ARRAY
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_VAR 0 4
19703: PPUSH
19704: CALL_OW 237
// end ;
19708: PPOPN 6
19710: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19711: LD_EXP 43
19715: PUSH
19716: LD_EXP 90
19720: AND
19721: IFFALSE 19800
19723: GO 19725
19725: DISABLE
19726: LD_INT 0
19728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19729: LD_ADDR_VAR 0 1
19733: PUSH
19734: LD_INT 22
19736: PUSH
19737: LD_OWVAR 2
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PPUSH
19760: CALL_OW 69
19764: ST_TO_ADDR
// if not tmp then
19765: LD_VAR 0 1
19769: NOT
19770: IFFALSE 19774
// exit ;
19772: GO 19800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19774: LD_VAR 0 1
19778: PUSH
19779: LD_INT 1
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 12
19791: ARRAY
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 234
// end ;
19800: PPOPN 1
19802: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19803: LD_EXP 43
19807: PUSH
19808: LD_EXP 91
19812: AND
19813: IFFALSE 19925
19815: GO 19817
19817: DISABLE
19818: LD_INT 0
19820: PPUSH
19821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: LD_INT 22
19829: PUSH
19830: LD_OWVAR 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: LD_INT 30
19844: PUSH
19845: LD_INT 27
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 30
19854: PUSH
19855: LD_INT 26
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 28
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PPUSH
19882: CALL_OW 69
19886: ST_TO_ADDR
// if not tmp then
19887: LD_VAR 0 2
19891: NOT
19892: IFFALSE 19896
// exit ;
19894: GO 19925
// for i in tmp do
19896: LD_ADDR_VAR 0 1
19900: PUSH
19901: LD_VAR 0 2
19905: PUSH
19906: FOR_IN
19907: IFFALSE 19923
// SetLives ( i , 1 ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 234
19921: GO 19906
19923: POP
19924: POP
// end ;
19925: PPOPN 2
19927: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19928: LD_EXP 43
19932: PUSH
19933: LD_EXP 92
19937: AND
19938: IFFALSE 20212
19940: GO 19942
19942: DISABLE
19943: LD_INT 0
19945: PPUSH
19946: PPUSH
19947: PPUSH
// begin i := rand ( 1 , 7 ) ;
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: LD_INT 1
19955: PPUSH
19956: LD_INT 7
19958: PPUSH
19959: CALL_OW 12
19963: ST_TO_ADDR
// case i of 1 :
19964: LD_VAR 0 1
19968: PUSH
19969: LD_INT 1
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 19987
19977: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19978: LD_STRING earthquake(getX(game), 0, 32)
19980: PPUSH
19981: CALL_OW 559
19985: GO 20212
19987: LD_INT 2
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20009
19995: POP
// begin ToLua ( displayStucuk(); ) ;
19996: LD_STRING displayStucuk();
19998: PPUSH
19999: CALL_OW 559
// ResetFog ;
20003: CALL_OW 335
// end ; 3 :
20007: GO 20212
20009: LD_INT 3
20011: DOUBLE
20012: EQUAL
20013: IFTRUE 20017
20015: GO 20121
20017: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20018: LD_ADDR_VAR 0 2
20022: PUSH
20023: LD_INT 22
20025: PUSH
20026: LD_OWVAR 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 25
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 69
20053: ST_TO_ADDR
// if not tmp then
20054: LD_VAR 0 2
20058: NOT
20059: IFFALSE 20063
// exit ;
20061: GO 20212
// un := tmp [ rand ( 1 , tmp ) ] ;
20063: LD_ADDR_VAR 0 3
20067: PUSH
20068: LD_VAR 0 2
20072: PUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_VAR 0 2
20080: PPUSH
20081: CALL_OW 12
20085: ARRAY
20086: ST_TO_ADDR
// if Crawls ( un ) then
20087: LD_VAR 0 3
20091: PPUSH
20092: CALL_OW 318
20096: IFFALSE 20107
// ComWalk ( un ) ;
20098: LD_VAR 0 3
20102: PPUSH
20103: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20107: LD_VAR 0 3
20111: PPUSH
20112: LD_INT 8
20114: PPUSH
20115: CALL_OW 336
// end ; 4 :
20119: GO 20212
20121: LD_INT 4
20123: DOUBLE
20124: EQUAL
20125: IFTRUE 20129
20127: GO 20190
20129: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20130: LD_ADDR_VAR 0 2
20134: PUSH
20135: LD_INT 22
20137: PUSH
20138: LD_OWVAR 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 30
20149: PUSH
20150: LD_INT 29
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PPUSH
20161: CALL_OW 69
20165: ST_TO_ADDR
// if not tmp then
20166: LD_VAR 0 2
20170: NOT
20171: IFFALSE 20175
// exit ;
20173: GO 20212
// DestroyUnit ( tmp [ 1 ] ) ;
20175: LD_VAR 0 2
20179: PUSH
20180: LD_INT 1
20182: ARRAY
20183: PPUSH
20184: CALL_OW 65
// end ; 5 .. 7 :
20188: GO 20212
20190: LD_INT 5
20192: DOUBLE
20193: GREATEREQUAL
20194: IFFALSE 20202
20196: LD_INT 7
20198: DOUBLE
20199: LESSEQUAL
20200: IFTRUE 20204
20202: GO 20211
20204: POP
// StreamSibBomb ; end ;
20205: CALL 16462 0 0
20209: GO 20212
20211: POP
// end ;
20212: PPOPN 3
20214: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20215: LD_EXP 43
20219: PUSH
20220: LD_EXP 93
20224: AND
20225: IFFALSE 20381
20227: GO 20229
20229: DISABLE
20230: LD_INT 0
20232: PPUSH
20233: PPUSH
20234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20235: LD_ADDR_VAR 0 2
20239: PUSH
20240: LD_INT 81
20242: PUSH
20243: LD_OWVAR 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 21
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 21
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 69
20288: ST_TO_ADDR
// if not tmp then
20289: LD_VAR 0 2
20293: NOT
20294: IFFALSE 20298
// exit ;
20296: GO 20381
// p := 0 ;
20298: LD_ADDR_VAR 0 3
20302: PUSH
20303: LD_INT 0
20305: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20306: LD_INT 35
20308: PPUSH
20309: CALL_OW 67
// p := p + 1 ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 1
20325: PLUS
20326: ST_TO_ADDR
// for i in tmp do
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_VAR 0 2
20336: PUSH
20337: FOR_IN
20338: IFFALSE 20369
// if GetLives ( i ) < 1000 then
20340: LD_VAR 0 1
20344: PPUSH
20345: CALL_OW 256
20349: PUSH
20350: LD_INT 1000
20352: LESS
20353: IFFALSE 20367
// SetLives ( i , 1000 ) ;
20355: LD_VAR 0 1
20359: PPUSH
20360: LD_INT 1000
20362: PPUSH
20363: CALL_OW 234
20367: GO 20337
20369: POP
20370: POP
// until p > 20 ;
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 20
20378: GREATER
20379: IFFALSE 20306
// end ;
20381: PPOPN 3
20383: END
// every 0 0$1 trigger StreamModeActive and sTime do
20384: LD_EXP 43
20388: PUSH
20389: LD_EXP 94
20393: AND
20394: IFFALSE 20429
20396: GO 20398
20398: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20399: LD_INT 28
20401: PPUSH
20402: LD_OWVAR 2
20406: PPUSH
20407: LD_INT 2
20409: PPUSH
20410: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20414: LD_INT 30
20416: PPUSH
20417: LD_OWVAR 2
20421: PPUSH
20422: LD_INT 2
20424: PPUSH
20425: CALL_OW 322
// end ;
20429: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20430: LD_EXP 43
20434: PUSH
20435: LD_EXP 95
20439: AND
20440: IFFALSE 20561
20442: GO 20444
20444: DISABLE
20445: LD_INT 0
20447: PPUSH
20448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_OWVAR 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: LD_INT 23
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: PPUSH
20498: CALL_OW 69
20502: ST_TO_ADDR
// if not tmp then
20503: LD_VAR 0 2
20507: NOT
20508: IFFALSE 20512
// exit ;
20510: GO 20561
// for i in tmp do
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_VAR 0 2
20521: PUSH
20522: FOR_IN
20523: IFFALSE 20559
// begin if Crawls ( i ) then
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 318
20534: IFFALSE 20545
// ComWalk ( i ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 138
// SetClass ( i , 2 ) ;
20545: LD_VAR 0 1
20549: PPUSH
20550: LD_INT 2
20552: PPUSH
20553: CALL_OW 336
// end ;
20557: GO 20522
20559: POP
20560: POP
// end ;
20561: PPOPN 2
20563: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20564: LD_EXP 43
20568: PUSH
20569: LD_EXP 96
20573: AND
20574: IFFALSE 20855
20576: GO 20578
20578: DISABLE
20579: LD_INT 0
20581: PPUSH
20582: PPUSH
20583: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20584: LD_OWVAR 2
20588: PPUSH
20589: LD_INT 9
20591: PPUSH
20592: LD_INT 1
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20602: LD_INT 9
20604: PPUSH
20605: LD_OWVAR 2
20609: PPUSH
20610: CALL_OW 343
// uc_side := 9 ;
20614: LD_ADDR_OWVAR 20
20618: PUSH
20619: LD_INT 9
20621: ST_TO_ADDR
// uc_nation := 2 ;
20622: LD_ADDR_OWVAR 21
20626: PUSH
20627: LD_INT 2
20629: ST_TO_ADDR
// hc_name := Dark Warrior ;
20630: LD_ADDR_OWVAR 26
20634: PUSH
20635: LD_STRING Dark Warrior
20637: ST_TO_ADDR
// hc_gallery :=  ;
20638: LD_ADDR_OWVAR 33
20642: PUSH
20643: LD_STRING 
20645: ST_TO_ADDR
// hc_noskilllimit := true ;
20646: LD_ADDR_OWVAR 76
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20654: LD_ADDR_OWVAR 31
20658: PUSH
20659: LD_INT 30
20661: PUSH
20662: LD_INT 30
20664: PUSH
20665: LD_INT 30
20667: PUSH
20668: LD_INT 30
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: ST_TO_ADDR
// un := CreateHuman ;
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: CALL_OW 44
20686: ST_TO_ADDR
// hc_noskilllimit := false ;
20687: LD_ADDR_OWVAR 76
20691: PUSH
20692: LD_INT 0
20694: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20695: LD_VAR 0 3
20699: PPUSH
20700: LD_INT 1
20702: PPUSH
20703: CALL_OW 51
// p := 0 ;
20707: LD_ADDR_VAR 0 2
20711: PUSH
20712: LD_INT 0
20714: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20715: LD_INT 35
20717: PPUSH
20718: CALL_OW 67
// p := p + 1 ;
20722: LD_ADDR_VAR 0 2
20726: PUSH
20727: LD_VAR 0 2
20731: PUSH
20732: LD_INT 1
20734: PLUS
20735: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20736: LD_VAR 0 3
20740: PPUSH
20741: CALL_OW 256
20745: PUSH
20746: LD_INT 1000
20748: LESS
20749: IFFALSE 20763
// SetLives ( un , 1000 ) ;
20751: LD_VAR 0 3
20755: PPUSH
20756: LD_INT 1000
20758: PPUSH
20759: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20763: LD_VAR 0 3
20767: PPUSH
20768: LD_INT 81
20770: PUSH
20771: LD_OWVAR 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 91
20782: PUSH
20783: LD_VAR 0 3
20787: PUSH
20788: LD_INT 30
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PPUSH
20800: CALL_OW 69
20804: PPUSH
20805: LD_VAR 0 3
20809: PPUSH
20810: CALL_OW 74
20814: PPUSH
20815: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20819: LD_VAR 0 2
20823: PUSH
20824: LD_INT 60
20826: GREATER
20827: PUSH
20828: LD_VAR 0 3
20832: PPUSH
20833: CALL_OW 301
20837: OR
20838: IFFALSE 20715
// if un then
20840: LD_VAR 0 3
20844: IFFALSE 20855
// RemoveUnit ( un ) ;
20846: LD_VAR 0 3
20850: PPUSH
20851: CALL_OW 64
// end ;
20855: PPOPN 3
20857: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20858: LD_INT 0
20860: PPUSH
// case cmd of 301 :
20861: LD_VAR 0 1
20865: PUSH
20866: LD_INT 301
20868: DOUBLE
20869: EQUAL
20870: IFTRUE 20874
20872: GO 20906
20874: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20875: LD_VAR 0 6
20879: PPUSH
20880: LD_VAR 0 7
20884: PPUSH
20885: LD_VAR 0 8
20889: PPUSH
20890: LD_VAR 0 4
20894: PPUSH
20895: LD_VAR 0 5
20899: PPUSH
20900: CALL 22107 0 5
20904: GO 21027
20906: LD_INT 302
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20951
20914: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20915: LD_VAR 0 6
20919: PPUSH
20920: LD_VAR 0 7
20924: PPUSH
20925: LD_VAR 0 8
20929: PPUSH
20930: LD_VAR 0 9
20934: PPUSH
20935: LD_VAR 0 4
20939: PPUSH
20940: LD_VAR 0 5
20944: PPUSH
20945: CALL 22198 0 6
20949: GO 21027
20951: LD_INT 303
20953: DOUBLE
20954: EQUAL
20955: IFTRUE 20959
20957: GO 20996
20959: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20960: LD_VAR 0 6
20964: PPUSH
20965: LD_VAR 0 7
20969: PPUSH
20970: LD_VAR 0 8
20974: PPUSH
20975: LD_VAR 0 9
20979: PPUSH
20980: LD_VAR 0 4
20984: PPUSH
20985: LD_VAR 0 5
20989: PPUSH
20990: CALL 21032 0 6
20994: GO 21027
20996: LD_INT 304
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21026
21004: POP
// hHackTeleport ( unit , x , y ) ; end ;
21005: LD_VAR 0 2
21009: PPUSH
21010: LD_VAR 0 4
21014: PPUSH
21015: LD_VAR 0 5
21019: PPUSH
21020: CALL 22791 0 3
21024: GO 21027
21026: POP
// end ;
21027: LD_VAR 0 12
21031: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21032: LD_INT 0
21034: PPUSH
21035: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21036: LD_VAR 0 1
21040: PUSH
21041: LD_INT 1
21043: LESS
21044: PUSH
21045: LD_VAR 0 1
21049: PUSH
21050: LD_INT 3
21052: GREATER
21053: OR
21054: PUSH
21055: LD_VAR 0 5
21059: PPUSH
21060: LD_VAR 0 6
21064: PPUSH
21065: CALL_OW 428
21069: OR
21070: IFFALSE 21074
// exit ;
21072: GO 21794
// uc_side := your_side ;
21074: LD_ADDR_OWVAR 20
21078: PUSH
21079: LD_OWVAR 2
21083: ST_TO_ADDR
// uc_nation := nation ;
21084: LD_ADDR_OWVAR 21
21088: PUSH
21089: LD_VAR 0 1
21093: ST_TO_ADDR
// bc_level = 1 ;
21094: LD_ADDR_OWVAR 43
21098: PUSH
21099: LD_INT 1
21101: ST_TO_ADDR
// case btype of 1 :
21102: LD_VAR 0 2
21106: PUSH
21107: LD_INT 1
21109: DOUBLE
21110: EQUAL
21111: IFTRUE 21115
21113: GO 21126
21115: POP
// bc_type := b_depot ; 2 :
21116: LD_ADDR_OWVAR 42
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
21124: GO 21738
21126: LD_INT 2
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21145
21134: POP
// bc_type := b_warehouse ; 3 :
21135: LD_ADDR_OWVAR 42
21139: PUSH
21140: LD_INT 1
21142: ST_TO_ADDR
21143: GO 21738
21145: LD_INT 3
21147: DOUBLE
21148: EQUAL
21149: IFTRUE 21153
21151: GO 21164
21153: POP
// bc_type := b_lab ; 4 .. 9 :
21154: LD_ADDR_OWVAR 42
21158: PUSH
21159: LD_INT 6
21161: ST_TO_ADDR
21162: GO 21738
21164: LD_INT 4
21166: DOUBLE
21167: GREATEREQUAL
21168: IFFALSE 21176
21170: LD_INT 9
21172: DOUBLE
21173: LESSEQUAL
21174: IFTRUE 21178
21176: GO 21230
21178: POP
// begin bc_type := b_lab_half ;
21179: LD_ADDR_OWVAR 42
21183: PUSH
21184: LD_INT 7
21186: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21187: LD_ADDR_OWVAR 44
21191: PUSH
21192: LD_INT 10
21194: PUSH
21195: LD_INT 11
21197: PUSH
21198: LD_INT 12
21200: PUSH
21201: LD_INT 15
21203: PUSH
21204: LD_INT 14
21206: PUSH
21207: LD_INT 13
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: LD_VAR 0 2
21222: PUSH
21223: LD_INT 3
21225: MINUS
21226: ARRAY
21227: ST_TO_ADDR
// end ; 10 .. 13 :
21228: GO 21738
21230: LD_INT 10
21232: DOUBLE
21233: GREATEREQUAL
21234: IFFALSE 21242
21236: LD_INT 13
21238: DOUBLE
21239: LESSEQUAL
21240: IFTRUE 21244
21242: GO 21321
21244: POP
// begin bc_type := b_lab_full ;
21245: LD_ADDR_OWVAR 42
21249: PUSH
21250: LD_INT 8
21252: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21253: LD_ADDR_OWVAR 44
21257: PUSH
21258: LD_INT 10
21260: PUSH
21261: LD_INT 12
21263: PUSH
21264: LD_INT 14
21266: PUSH
21267: LD_INT 13
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: LD_VAR 0 2
21280: PUSH
21281: LD_INT 9
21283: MINUS
21284: ARRAY
21285: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21286: LD_ADDR_OWVAR 45
21290: PUSH
21291: LD_INT 11
21293: PUSH
21294: LD_INT 15
21296: PUSH
21297: LD_INT 12
21299: PUSH
21300: LD_INT 15
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: LD_VAR 0 2
21313: PUSH
21314: LD_INT 9
21316: MINUS
21317: ARRAY
21318: ST_TO_ADDR
// end ; 14 :
21319: GO 21738
21321: LD_INT 14
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21340
21329: POP
// bc_type := b_workshop ; 15 :
21330: LD_ADDR_OWVAR 42
21334: PUSH
21335: LD_INT 2
21337: ST_TO_ADDR
21338: GO 21738
21340: LD_INT 15
21342: DOUBLE
21343: EQUAL
21344: IFTRUE 21348
21346: GO 21359
21348: POP
// bc_type := b_factory ; 16 :
21349: LD_ADDR_OWVAR 42
21353: PUSH
21354: LD_INT 3
21356: ST_TO_ADDR
21357: GO 21738
21359: LD_INT 16
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21378
21367: POP
// bc_type := b_ext_gun ; 17 :
21368: LD_ADDR_OWVAR 42
21372: PUSH
21373: LD_INT 17
21375: ST_TO_ADDR
21376: GO 21738
21378: LD_INT 17
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21414
21386: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21387: LD_ADDR_OWVAR 42
21391: PUSH
21392: LD_INT 19
21394: PUSH
21395: LD_INT 23
21397: PUSH
21398: LD_INT 19
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: LIST
21405: PUSH
21406: LD_VAR 0 1
21410: ARRAY
21411: ST_TO_ADDR
21412: GO 21738
21414: LD_INT 18
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 21433
21422: POP
// bc_type := b_ext_radar ; 19 :
21423: LD_ADDR_OWVAR 42
21427: PUSH
21428: LD_INT 20
21430: ST_TO_ADDR
21431: GO 21738
21433: LD_INT 19
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21452
21441: POP
// bc_type := b_ext_radio ; 20 :
21442: LD_ADDR_OWVAR 42
21446: PUSH
21447: LD_INT 22
21449: ST_TO_ADDR
21450: GO 21738
21452: LD_INT 20
21454: DOUBLE
21455: EQUAL
21456: IFTRUE 21460
21458: GO 21471
21460: POP
// bc_type := b_ext_siberium ; 21 :
21461: LD_ADDR_OWVAR 42
21465: PUSH
21466: LD_INT 21
21468: ST_TO_ADDR
21469: GO 21738
21471: LD_INT 21
21473: DOUBLE
21474: EQUAL
21475: IFTRUE 21479
21477: GO 21490
21479: POP
// bc_type := b_ext_computer ; 22 :
21480: LD_ADDR_OWVAR 42
21484: PUSH
21485: LD_INT 24
21487: ST_TO_ADDR
21488: GO 21738
21490: LD_INT 22
21492: DOUBLE
21493: EQUAL
21494: IFTRUE 21498
21496: GO 21509
21498: POP
// bc_type := b_ext_track ; 23 :
21499: LD_ADDR_OWVAR 42
21503: PUSH
21504: LD_INT 16
21506: ST_TO_ADDR
21507: GO 21738
21509: LD_INT 23
21511: DOUBLE
21512: EQUAL
21513: IFTRUE 21517
21515: GO 21528
21517: POP
// bc_type := b_ext_laser ; 24 :
21518: LD_ADDR_OWVAR 42
21522: PUSH
21523: LD_INT 25
21525: ST_TO_ADDR
21526: GO 21738
21528: LD_INT 24
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21547
21536: POP
// bc_type := b_control_tower ; 25 :
21537: LD_ADDR_OWVAR 42
21541: PUSH
21542: LD_INT 36
21544: ST_TO_ADDR
21545: GO 21738
21547: LD_INT 25
21549: DOUBLE
21550: EQUAL
21551: IFTRUE 21555
21553: GO 21566
21555: POP
// bc_type := b_breastwork ; 26 :
21556: LD_ADDR_OWVAR 42
21560: PUSH
21561: LD_INT 31
21563: ST_TO_ADDR
21564: GO 21738
21566: LD_INT 26
21568: DOUBLE
21569: EQUAL
21570: IFTRUE 21574
21572: GO 21585
21574: POP
// bc_type := b_bunker ; 27 :
21575: LD_ADDR_OWVAR 42
21579: PUSH
21580: LD_INT 32
21582: ST_TO_ADDR
21583: GO 21738
21585: LD_INT 27
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21604
21593: POP
// bc_type := b_turret ; 28 :
21594: LD_ADDR_OWVAR 42
21598: PUSH
21599: LD_INT 33
21601: ST_TO_ADDR
21602: GO 21738
21604: LD_INT 28
21606: DOUBLE
21607: EQUAL
21608: IFTRUE 21612
21610: GO 21623
21612: POP
// bc_type := b_armoury ; 29 :
21613: LD_ADDR_OWVAR 42
21617: PUSH
21618: LD_INT 4
21620: ST_TO_ADDR
21621: GO 21738
21623: LD_INT 29
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21642
21631: POP
// bc_type := b_barracks ; 30 :
21632: LD_ADDR_OWVAR 42
21636: PUSH
21637: LD_INT 5
21639: ST_TO_ADDR
21640: GO 21738
21642: LD_INT 30
21644: DOUBLE
21645: EQUAL
21646: IFTRUE 21650
21648: GO 21661
21650: POP
// bc_type := b_solar_power ; 31 :
21651: LD_ADDR_OWVAR 42
21655: PUSH
21656: LD_INT 27
21658: ST_TO_ADDR
21659: GO 21738
21661: LD_INT 31
21663: DOUBLE
21664: EQUAL
21665: IFTRUE 21669
21667: GO 21680
21669: POP
// bc_type := b_oil_power ; 32 :
21670: LD_ADDR_OWVAR 42
21674: PUSH
21675: LD_INT 26
21677: ST_TO_ADDR
21678: GO 21738
21680: LD_INT 32
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21699
21688: POP
// bc_type := b_siberite_power ; 33 :
21689: LD_ADDR_OWVAR 42
21693: PUSH
21694: LD_INT 28
21696: ST_TO_ADDR
21697: GO 21738
21699: LD_INT 33
21701: DOUBLE
21702: EQUAL
21703: IFTRUE 21707
21705: GO 21718
21707: POP
// bc_type := b_oil_mine ; 34 :
21708: LD_ADDR_OWVAR 42
21712: PUSH
21713: LD_INT 29
21715: ST_TO_ADDR
21716: GO 21738
21718: LD_INT 34
21720: DOUBLE
21721: EQUAL
21722: IFTRUE 21726
21724: GO 21737
21726: POP
// bc_type := b_siberite_mine ; end ;
21727: LD_ADDR_OWVAR 42
21731: PUSH
21732: LD_INT 30
21734: ST_TO_ADDR
21735: GO 21738
21737: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21738: LD_ADDR_VAR 0 8
21742: PUSH
21743: LD_VAR 0 5
21747: PPUSH
21748: LD_VAR 0 6
21752: PPUSH
21753: LD_VAR 0 3
21757: PPUSH
21758: CALL_OW 47
21762: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21763: LD_OWVAR 42
21767: PUSH
21768: LD_INT 32
21770: PUSH
21771: LD_INT 33
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: IN
21778: IFFALSE 21794
// PlaceWeaponTurret ( b , weapon ) ;
21780: LD_VAR 0 8
21784: PPUSH
21785: LD_VAR 0 4
21789: PPUSH
21790: CALL_OW 431
// end ;
21794: LD_VAR 0 7
21798: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21799: LD_INT 0
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21805: LD_ADDR_VAR 0 4
21809: PUSH
21810: LD_INT 22
21812: PUSH
21813: LD_OWVAR 2
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: LD_INT 30
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 69
21858: ST_TO_ADDR
// if not tmp then
21859: LD_VAR 0 4
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 21927
// for i in tmp do
21868: LD_ADDR_VAR 0 2
21872: PUSH
21873: LD_VAR 0 4
21877: PUSH
21878: FOR_IN
21879: IFFALSE 21925
// for j = 1 to 3 do
21881: LD_ADDR_VAR 0 3
21885: PUSH
21886: DOUBLE
21887: LD_INT 1
21889: DEC
21890: ST_TO_ADDR
21891: LD_INT 3
21893: PUSH
21894: FOR_TO
21895: IFFALSE 21921
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21897: LD_VAR 0 2
21901: PPUSH
21902: CALL_OW 274
21906: PPUSH
21907: LD_VAR 0 3
21911: PPUSH
21912: LD_INT 99999
21914: PPUSH
21915: CALL_OW 277
21919: GO 21894
21921: POP
21922: POP
21923: GO 21878
21925: POP
21926: POP
// end ;
21927: LD_VAR 0 1
21931: RET
// export function hHackSetLevel10 ; var i , j ; begin
21932: LD_INT 0
21934: PPUSH
21935: PPUSH
21936: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_INT 21
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PPUSH
21952: CALL_OW 69
21956: PUSH
21957: FOR_IN
21958: IFFALSE 22010
// if IsSelected ( i ) then
21960: LD_VAR 0 2
21964: PPUSH
21965: CALL_OW 306
21969: IFFALSE 22008
// begin for j := 1 to 4 do
21971: LD_ADDR_VAR 0 3
21975: PUSH
21976: DOUBLE
21977: LD_INT 1
21979: DEC
21980: ST_TO_ADDR
21981: LD_INT 4
21983: PUSH
21984: FOR_TO
21985: IFFALSE 22006
// SetSkill ( i , j , 10 ) ;
21987: LD_VAR 0 2
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_INT 10
21999: PPUSH
22000: CALL_OW 237
22004: GO 21984
22006: POP
22007: POP
// end ;
22008: GO 21957
22010: POP
22011: POP
// end ;
22012: LD_VAR 0 1
22016: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22017: LD_INT 0
22019: PPUSH
22020: PPUSH
22021: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22022: LD_ADDR_VAR 0 2
22026: PUSH
22027: LD_INT 22
22029: PUSH
22030: LD_OWVAR 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 21
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PPUSH
22053: CALL_OW 69
22057: PUSH
22058: FOR_IN
22059: IFFALSE 22100
// begin for j := 1 to 4 do
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: DOUBLE
22067: LD_INT 1
22069: DEC
22070: ST_TO_ADDR
22071: LD_INT 4
22073: PUSH
22074: FOR_TO
22075: IFFALSE 22096
// SetSkill ( i , j , 10 ) ;
22077: LD_VAR 0 2
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: LD_INT 10
22089: PPUSH
22090: CALL_OW 237
22094: GO 22074
22096: POP
22097: POP
// end ;
22098: GO 22058
22100: POP
22101: POP
// end ;
22102: LD_VAR 0 1
22106: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22107: LD_INT 0
22109: PPUSH
// uc_side := your_side ;
22110: LD_ADDR_OWVAR 20
22114: PUSH
22115: LD_OWVAR 2
22119: ST_TO_ADDR
// uc_nation := nation ;
22120: LD_ADDR_OWVAR 21
22124: PUSH
22125: LD_VAR 0 1
22129: ST_TO_ADDR
// InitHc ;
22130: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22134: LD_INT 0
22136: PPUSH
22137: LD_VAR 0 2
22141: PPUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22151: LD_VAR 0 4
22155: PPUSH
22156: LD_VAR 0 5
22160: PPUSH
22161: CALL_OW 428
22165: PUSH
22166: LD_INT 0
22168: EQUAL
22169: IFFALSE 22193
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22171: CALL_OW 44
22175: PPUSH
22176: LD_VAR 0 4
22180: PPUSH
22181: LD_VAR 0 5
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 48
// end ;
22193: LD_VAR 0 6
22197: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22198: LD_INT 0
22200: PPUSH
22201: PPUSH
// uc_side := your_side ;
22202: LD_ADDR_OWVAR 20
22206: PUSH
22207: LD_OWVAR 2
22211: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22212: LD_VAR 0 1
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: LD_INT 3
22225: PUSH
22226: LD_INT 4
22228: PUSH
22229: LD_INT 5
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: IN
22239: IFFALSE 22251
// uc_nation := nation_american else
22241: LD_ADDR_OWVAR 21
22245: PUSH
22246: LD_INT 1
22248: ST_TO_ADDR
22249: GO 22294
// if chassis in [ 11 , 12 , 13 , 14 ] then
22251: LD_VAR 0 1
22255: PUSH
22256: LD_INT 11
22258: PUSH
22259: LD_INT 12
22261: PUSH
22262: LD_INT 13
22264: PUSH
22265: LD_INT 14
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: IN
22274: IFFALSE 22286
// uc_nation := nation_arabian else
22276: LD_ADDR_OWVAR 21
22280: PUSH
22281: LD_INT 2
22283: ST_TO_ADDR
22284: GO 22294
// uc_nation := nation_russian ;
22286: LD_ADDR_OWVAR 21
22290: PUSH
22291: LD_INT 3
22293: ST_TO_ADDR
// vc_chassis := chassis ;
22294: LD_ADDR_OWVAR 37
22298: PUSH
22299: LD_VAR 0 1
22303: ST_TO_ADDR
// vc_engine := engine ;
22304: LD_ADDR_OWVAR 39
22308: PUSH
22309: LD_VAR 0 2
22313: ST_TO_ADDR
// vc_control := control ;
22314: LD_ADDR_OWVAR 38
22318: PUSH
22319: LD_VAR 0 3
22323: ST_TO_ADDR
// vc_weapon := weapon ;
22324: LD_ADDR_OWVAR 40
22328: PUSH
22329: LD_VAR 0 4
22333: ST_TO_ADDR
// un := CreateVehicle ;
22334: LD_ADDR_VAR 0 8
22338: PUSH
22339: CALL_OW 45
22343: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22344: LD_VAR 0 8
22348: PPUSH
22349: LD_INT 0
22351: PPUSH
22352: LD_INT 5
22354: PPUSH
22355: CALL_OW 12
22359: PPUSH
22360: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22364: LD_VAR 0 8
22368: PPUSH
22369: LD_VAR 0 5
22373: PPUSH
22374: LD_VAR 0 6
22378: PPUSH
22379: LD_INT 1
22381: PPUSH
22382: CALL_OW 48
// end ;
22386: LD_VAR 0 7
22390: RET
// export hInvincible ; every 1 do
22391: GO 22393
22393: DISABLE
// hInvincible := [ ] ;
22394: LD_ADDR_EXP 97
22398: PUSH
22399: EMPTY
22400: ST_TO_ADDR
22401: END
// every 10 do var i ;
22402: GO 22404
22404: DISABLE
22405: LD_INT 0
22407: PPUSH
// begin enable ;
22408: ENABLE
// if not hInvincible then
22409: LD_EXP 97
22413: NOT
22414: IFFALSE 22418
// exit ;
22416: GO 22462
// for i in hInvincible do
22418: LD_ADDR_VAR 0 1
22422: PUSH
22423: LD_EXP 97
22427: PUSH
22428: FOR_IN
22429: IFFALSE 22460
// if GetLives ( i ) < 1000 then
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 256
22440: PUSH
22441: LD_INT 1000
22443: LESS
22444: IFFALSE 22458
// SetLives ( i , 1000 ) ;
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_INT 1000
22453: PPUSH
22454: CALL_OW 234
22458: GO 22428
22460: POP
22461: POP
// end ;
22462: PPOPN 1
22464: END
// export function hHackInvincible ; var i ; begin
22465: LD_INT 0
22467: PPUSH
22468: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 21
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: PPUSH
22502: CALL_OW 69
22506: PUSH
22507: FOR_IN
22508: IFFALSE 22569
// if IsSelected ( i ) then
22510: LD_VAR 0 2
22514: PPUSH
22515: CALL_OW 306
22519: IFFALSE 22567
// begin if i in hInvincible then
22521: LD_VAR 0 2
22525: PUSH
22526: LD_EXP 97
22530: IN
22531: IFFALSE 22551
// hInvincible := hInvincible diff i else
22533: LD_ADDR_EXP 97
22537: PUSH
22538: LD_EXP 97
22542: PUSH
22543: LD_VAR 0 2
22547: DIFF
22548: ST_TO_ADDR
22549: GO 22567
// hInvincible := hInvincible union i ;
22551: LD_ADDR_EXP 97
22555: PUSH
22556: LD_EXP 97
22560: PUSH
22561: LD_VAR 0 2
22565: UNION
22566: ST_TO_ADDR
// end ;
22567: GO 22507
22569: POP
22570: POP
// end ;
22571: LD_VAR 0 1
22575: RET
// export function hHackInvisible ; var i , j ; begin
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
22580: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22581: LD_ADDR_VAR 0 2
22585: PUSH
22586: LD_INT 21
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PPUSH
22596: CALL_OW 69
22600: PUSH
22601: FOR_IN
22602: IFFALSE 22626
// if IsSelected ( i ) then
22604: LD_VAR 0 2
22608: PPUSH
22609: CALL_OW 306
22613: IFFALSE 22624
// ComForceInvisible ( i ) ;
22615: LD_VAR 0 2
22619: PPUSH
22620: CALL_OW 496
22624: GO 22601
22626: POP
22627: POP
// end ;
22628: LD_VAR 0 1
22632: RET
// export function hHackChangeYourSide ; begin
22633: LD_INT 0
22635: PPUSH
// if your_side = 8 then
22636: LD_OWVAR 2
22640: PUSH
22641: LD_INT 8
22643: EQUAL
22644: IFFALSE 22656
// your_side := 0 else
22646: LD_ADDR_OWVAR 2
22650: PUSH
22651: LD_INT 0
22653: ST_TO_ADDR
22654: GO 22670
// your_side := your_side + 1 ;
22656: LD_ADDR_OWVAR 2
22660: PUSH
22661: LD_OWVAR 2
22665: PUSH
22666: LD_INT 1
22668: PLUS
22669: ST_TO_ADDR
// end ;
22670: LD_VAR 0 1
22674: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22675: LD_INT 0
22677: PPUSH
22678: PPUSH
22679: PPUSH
// for i in all_units do
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_OWVAR 3
22689: PUSH
22690: FOR_IN
22691: IFFALSE 22769
// if IsSelected ( i ) then
22693: LD_VAR 0 2
22697: PPUSH
22698: CALL_OW 306
22702: IFFALSE 22767
// begin j := GetSide ( i ) ;
22704: LD_ADDR_VAR 0 3
22708: PUSH
22709: LD_VAR 0 2
22713: PPUSH
22714: CALL_OW 255
22718: ST_TO_ADDR
// if j = 8 then
22719: LD_VAR 0 3
22723: PUSH
22724: LD_INT 8
22726: EQUAL
22727: IFFALSE 22739
// j := 0 else
22729: LD_ADDR_VAR 0 3
22733: PUSH
22734: LD_INT 0
22736: ST_TO_ADDR
22737: GO 22753
// j := j + 1 ;
22739: LD_ADDR_VAR 0 3
22743: PUSH
22744: LD_VAR 0 3
22748: PUSH
22749: LD_INT 1
22751: PLUS
22752: ST_TO_ADDR
// SetSide ( i , j ) ;
22753: LD_VAR 0 2
22757: PPUSH
22758: LD_VAR 0 3
22762: PPUSH
22763: CALL_OW 235
// end ;
22767: GO 22690
22769: POP
22770: POP
// end ;
22771: LD_VAR 0 1
22775: RET
// export function hHackFog ; begin
22776: LD_INT 0
22778: PPUSH
// FogOff ( true ) ;
22779: LD_INT 1
22781: PPUSH
22782: CALL_OW 344
// end ;
22786: LD_VAR 0 1
22790: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22791: LD_INT 0
22793: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22794: LD_VAR 0 1
22798: PPUSH
22799: LD_VAR 0 2
22803: PPUSH
22804: LD_VAR 0 3
22808: PPUSH
22809: LD_INT 1
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 483
// CenterOnXY ( x , y ) ;
22819: LD_VAR 0 2
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: CALL_OW 84
// end ; end_of_file
22833: LD_VAR 0 4
22837: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22838: LD_VAR 0 1
22842: PUSH
22843: LD_INT 200
22845: DOUBLE
22846: GREATEREQUAL
22847: IFFALSE 22855
22849: LD_INT 299
22851: DOUBLE
22852: LESSEQUAL
22853: IFTRUE 22857
22855: GO 22889
22857: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22858: LD_VAR 0 1
22862: PPUSH
22863: LD_VAR 0 2
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_VAR 0 4
22877: PPUSH
22878: LD_VAR 0 5
22882: PPUSH
22883: CALL 23133 0 5
22887: GO 22966
22889: LD_INT 300
22891: DOUBLE
22892: GREATEREQUAL
22893: IFFALSE 22901
22895: LD_INT 399
22897: DOUBLE
22898: LESSEQUAL
22899: IFTRUE 22903
22901: GO 22965
22903: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22904: LD_VAR 0 1
22908: PPUSH
22909: LD_VAR 0 2
22913: PPUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_VAR 0 5
22928: PPUSH
22929: LD_VAR 0 6
22933: PPUSH
22934: LD_VAR 0 7
22938: PPUSH
22939: LD_VAR 0 8
22943: PPUSH
22944: LD_VAR 0 9
22948: PPUSH
22949: LD_VAR 0 10
22953: PPUSH
22954: LD_VAR 0 11
22958: PPUSH
22959: CALL 20858 0 11
22963: GO 22966
22965: POP
// end ;
22966: PPOPN 11
22968: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_VAR 0 2
22978: PPUSH
22979: LD_VAR 0 3
22983: PPUSH
22984: LD_VAR 0 4
22988: PPUSH
22989: LD_VAR 0 5
22993: PPUSH
22994: CALL 23115 0 5
// end ; end_of_file
22998: PPOPN 5
23000: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23001: LD_INT 0
23003: PPUSH
23004: PPUSH
23005: PPUSH
23006: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 264
23016: PUSH
23017: LD_EXP 114
23021: EQUAL
23022: IFFALSE 23094
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23024: LD_INT 68
23026: PPUSH
23027: LD_VAR 0 1
23031: PPUSH
23032: CALL_OW 255
23036: PPUSH
23037: CALL_OW 321
23041: PUSH
23042: LD_INT 2
23044: EQUAL
23045: IFFALSE 23057
// eff := 70 else
23047: LD_ADDR_VAR 0 4
23051: PUSH
23052: LD_INT 70
23054: ST_TO_ADDR
23055: GO 23065
// eff := 30 ;
23057: LD_ADDR_VAR 0 4
23061: PUSH
23062: LD_INT 30
23064: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 250
23074: PPUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 251
23084: PPUSH
23085: LD_VAR 0 4
23089: PPUSH
23090: CALL_OW 495
// end ; end ;
23094: LD_VAR 0 2
23098: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23099: LD_INT 0
23101: PPUSH
// end ;
23102: LD_VAR 0 4
23106: RET
// export function SOS_Command ( cmd ) ; begin
23107: LD_INT 0
23109: PPUSH
// end ;
23110: LD_VAR 0 2
23114: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23115: LD_INT 0
23117: PPUSH
// if cmd = 121 then
23118: LD_VAR 0 1
23122: PUSH
23123: LD_INT 121
23125: EQUAL
23126: IFFALSE 23128
// end ;
23128: LD_VAR 0 6
23132: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23133: LD_INT 0
23135: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23136: LD_VAR 0 1
23140: PUSH
23141: LD_INT 250
23143: EQUAL
23144: PUSH
23145: LD_VAR 0 2
23149: PPUSH
23150: CALL_OW 264
23154: PUSH
23155: LD_EXP 117
23159: EQUAL
23160: AND
23161: IFFALSE 23182
// MinerPlaceMine ( unit , x , y ) ;
23163: LD_VAR 0 2
23167: PPUSH
23168: LD_VAR 0 4
23172: PPUSH
23173: LD_VAR 0 5
23177: PPUSH
23178: CALL 25531 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23182: LD_VAR 0 1
23186: PUSH
23187: LD_INT 251
23189: EQUAL
23190: PUSH
23191: LD_VAR 0 2
23195: PPUSH
23196: CALL_OW 264
23200: PUSH
23201: LD_EXP 117
23205: EQUAL
23206: AND
23207: IFFALSE 23228
// MinerDetonateMine ( unit , x , y ) ;
23209: LD_VAR 0 2
23213: PPUSH
23214: LD_VAR 0 4
23218: PPUSH
23219: LD_VAR 0 5
23223: PPUSH
23224: CALL 25808 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23228: LD_VAR 0 1
23232: PUSH
23233: LD_INT 252
23235: EQUAL
23236: PUSH
23237: LD_VAR 0 2
23241: PPUSH
23242: CALL_OW 264
23246: PUSH
23247: LD_EXP 117
23251: EQUAL
23252: AND
23253: IFFALSE 23274
// MinerCreateMinefield ( unit , x , y ) ;
23255: LD_VAR 0 2
23259: PPUSH
23260: LD_VAR 0 4
23264: PPUSH
23265: LD_VAR 0 5
23269: PPUSH
23270: CALL 26225 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23274: LD_VAR 0 1
23278: PUSH
23279: LD_INT 253
23281: EQUAL
23282: PUSH
23283: LD_VAR 0 2
23287: PPUSH
23288: CALL_OW 257
23292: PUSH
23293: LD_INT 5
23295: EQUAL
23296: AND
23297: IFFALSE 23318
// ComBinocular ( unit , x , y ) ;
23299: LD_VAR 0 2
23303: PPUSH
23304: LD_VAR 0 4
23308: PPUSH
23309: LD_VAR 0 5
23313: PPUSH
23314: CALL 26596 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23318: LD_VAR 0 1
23322: PUSH
23323: LD_INT 254
23325: EQUAL
23326: PUSH
23327: LD_VAR 0 2
23331: PPUSH
23332: CALL_OW 264
23336: PUSH
23337: LD_EXP 112
23341: EQUAL
23342: AND
23343: PUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: CALL_OW 263
23353: PUSH
23354: LD_INT 3
23356: EQUAL
23357: AND
23358: IFFALSE 23374
// HackDestroyVehicle ( unit , selectedUnit ) ;
23360: LD_VAR 0 2
23364: PPUSH
23365: LD_VAR 0 3
23369: PPUSH
23370: CALL 24891 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23374: LD_VAR 0 1
23378: PUSH
23379: LD_INT 255
23381: EQUAL
23382: PUSH
23383: LD_VAR 0 2
23387: PPUSH
23388: CALL_OW 264
23392: PUSH
23393: LD_INT 14
23395: PUSH
23396: LD_INT 53
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: IN
23403: AND
23404: PUSH
23405: LD_VAR 0 4
23409: PPUSH
23410: LD_VAR 0 5
23414: PPUSH
23415: CALL_OW 488
23419: AND
23420: IFFALSE 23444
// CutTreeXYR ( unit , x , y , 12 ) ;
23422: LD_VAR 0 2
23426: PPUSH
23427: LD_VAR 0 4
23431: PPUSH
23432: LD_VAR 0 5
23436: PPUSH
23437: LD_INT 12
23439: PPUSH
23440: CALL 23457 0 4
// end ;
23444: LD_VAR 0 6
23448: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23449: LD_INT 0
23451: PPUSH
// end ;
23452: LD_VAR 0 4
23456: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23457: LD_INT 0
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23468: LD_VAR 0 1
23472: NOT
23473: PUSH
23474: LD_VAR 0 2
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: CALL_OW 488
23488: NOT
23489: OR
23490: PUSH
23491: LD_VAR 0 4
23495: NOT
23496: OR
23497: IFFALSE 23501
// exit ;
23499: GO 23841
// list := [ ] ;
23501: LD_ADDR_VAR 0 13
23505: PUSH
23506: EMPTY
23507: ST_TO_ADDR
// if x - r < 0 then
23508: LD_VAR 0 2
23512: PUSH
23513: LD_VAR 0 4
23517: MINUS
23518: PUSH
23519: LD_INT 0
23521: LESS
23522: IFFALSE 23534
// min_x := 0 else
23524: LD_ADDR_VAR 0 7
23528: PUSH
23529: LD_INT 0
23531: ST_TO_ADDR
23532: GO 23550
// min_x := x - r ;
23534: LD_ADDR_VAR 0 7
23538: PUSH
23539: LD_VAR 0 2
23543: PUSH
23544: LD_VAR 0 4
23548: MINUS
23549: ST_TO_ADDR
// if y - r < 0 then
23550: LD_VAR 0 3
23554: PUSH
23555: LD_VAR 0 4
23559: MINUS
23560: PUSH
23561: LD_INT 0
23563: LESS
23564: IFFALSE 23576
// min_y := 0 else
23566: LD_ADDR_VAR 0 8
23570: PUSH
23571: LD_INT 0
23573: ST_TO_ADDR
23574: GO 23592
// min_y := y - r ;
23576: LD_ADDR_VAR 0 8
23580: PUSH
23581: LD_VAR 0 3
23585: PUSH
23586: LD_VAR 0 4
23590: MINUS
23591: ST_TO_ADDR
// max_x := x + r ;
23592: LD_ADDR_VAR 0 9
23596: PUSH
23597: LD_VAR 0 2
23601: PUSH
23602: LD_VAR 0 4
23606: PLUS
23607: ST_TO_ADDR
// max_y := y + r ;
23608: LD_ADDR_VAR 0 10
23612: PUSH
23613: LD_VAR 0 3
23617: PUSH
23618: LD_VAR 0 4
23622: PLUS
23623: ST_TO_ADDR
// for _x = min_x to max_x do
23624: LD_ADDR_VAR 0 11
23628: PUSH
23629: DOUBLE
23630: LD_VAR 0 7
23634: DEC
23635: ST_TO_ADDR
23636: LD_VAR 0 9
23640: PUSH
23641: FOR_TO
23642: IFFALSE 23759
// for _y = min_y to max_y do
23644: LD_ADDR_VAR 0 12
23648: PUSH
23649: DOUBLE
23650: LD_VAR 0 8
23654: DEC
23655: ST_TO_ADDR
23656: LD_VAR 0 10
23660: PUSH
23661: FOR_TO
23662: IFFALSE 23755
// begin if not ValidHex ( _x , _y ) then
23664: LD_VAR 0 11
23668: PPUSH
23669: LD_VAR 0 12
23673: PPUSH
23674: CALL_OW 488
23678: NOT
23679: IFFALSE 23683
// continue ;
23681: GO 23661
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23683: LD_VAR 0 11
23687: PPUSH
23688: LD_VAR 0 12
23692: PPUSH
23693: CALL_OW 351
23697: PUSH
23698: LD_VAR 0 11
23702: PPUSH
23703: LD_VAR 0 12
23707: PPUSH
23708: CALL_OW 554
23712: AND
23713: IFFALSE 23753
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23715: LD_ADDR_VAR 0 13
23719: PUSH
23720: LD_VAR 0 13
23724: PPUSH
23725: LD_VAR 0 13
23729: PUSH
23730: LD_INT 1
23732: PLUS
23733: PPUSH
23734: LD_VAR 0 11
23738: PUSH
23739: LD_VAR 0 12
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PPUSH
23748: CALL_OW 2
23752: ST_TO_ADDR
// end ;
23753: GO 23661
23755: POP
23756: POP
23757: GO 23641
23759: POP
23760: POP
// if not list then
23761: LD_VAR 0 13
23765: NOT
23766: IFFALSE 23770
// exit ;
23768: GO 23841
// for i in list do
23770: LD_ADDR_VAR 0 6
23774: PUSH
23775: LD_VAR 0 13
23779: PUSH
23780: FOR_IN
23781: IFFALSE 23839
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23783: LD_VAR 0 1
23787: PPUSH
23788: LD_STRING M
23790: PUSH
23791: LD_VAR 0 6
23795: PUSH
23796: LD_INT 1
23798: ARRAY
23799: PUSH
23800: LD_VAR 0 6
23804: PUSH
23805: LD_INT 2
23807: ARRAY
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: PPUSH
23833: CALL_OW 447
23837: GO 23780
23839: POP
23840: POP
// end ;
23841: LD_VAR 0 5
23845: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23846: LD_EXP 100
23850: NOT
23851: IFFALSE 23901
23853: GO 23855
23855: DISABLE
// begin initHack := true ;
23856: LD_ADDR_EXP 100
23860: PUSH
23861: LD_INT 1
23863: ST_TO_ADDR
// hackTanks := [ ] ;
23864: LD_ADDR_EXP 101
23868: PUSH
23869: EMPTY
23870: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23871: LD_ADDR_EXP 102
23875: PUSH
23876: EMPTY
23877: ST_TO_ADDR
// hackLimit := 3 ;
23878: LD_ADDR_EXP 103
23882: PUSH
23883: LD_INT 3
23885: ST_TO_ADDR
// hackDist := 12 ;
23886: LD_ADDR_EXP 104
23890: PUSH
23891: LD_INT 12
23893: ST_TO_ADDR
// hackCounter := [ ] ;
23894: LD_ADDR_EXP 105
23898: PUSH
23899: EMPTY
23900: ST_TO_ADDR
// end ;
23901: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23902: LD_EXP 100
23906: PUSH
23907: LD_INT 34
23909: PUSH
23910: LD_EXP 112
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PPUSH
23919: CALL_OW 69
23923: AND
23924: IFFALSE 24179
23926: GO 23928
23928: DISABLE
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
// begin enable ;
23933: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23934: LD_ADDR_VAR 0 1
23938: PUSH
23939: LD_INT 34
23941: PUSH
23942: LD_EXP 112
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 69
23955: PUSH
23956: FOR_IN
23957: IFFALSE 24177
// begin if not i in hackTanks then
23959: LD_VAR 0 1
23963: PUSH
23964: LD_EXP 101
23968: IN
23969: NOT
23970: IFFALSE 24053
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23972: LD_ADDR_EXP 101
23976: PUSH
23977: LD_EXP 101
23981: PPUSH
23982: LD_EXP 101
23986: PUSH
23987: LD_INT 1
23989: PLUS
23990: PPUSH
23991: LD_VAR 0 1
23995: PPUSH
23996: CALL_OW 1
24000: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24001: LD_ADDR_EXP 102
24005: PUSH
24006: LD_EXP 102
24010: PPUSH
24011: LD_EXP 102
24015: PUSH
24016: LD_INT 1
24018: PLUS
24019: PPUSH
24020: EMPTY
24021: PPUSH
24022: CALL_OW 1
24026: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24027: LD_ADDR_EXP 105
24031: PUSH
24032: LD_EXP 105
24036: PPUSH
24037: LD_EXP 105
24041: PUSH
24042: LD_INT 1
24044: PLUS
24045: PPUSH
24046: EMPTY
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24053: LD_VAR 0 1
24057: PPUSH
24058: CALL_OW 302
24062: NOT
24063: IFFALSE 24076
// begin HackUnlinkAll ( i ) ;
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL 24182 0 1
// continue ;
24074: GO 23956
// end ; HackCheckCapturedStatus ( i ) ;
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL 24625 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24085: LD_ADDR_VAR 0 2
24089: PUSH
24090: LD_INT 81
24092: PUSH
24093: LD_VAR 0 1
24097: PPUSH
24098: CALL_OW 255
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 33
24109: PUSH
24110: LD_INT 3
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 91
24119: PUSH
24120: LD_VAR 0 1
24124: PUSH
24125: LD_EXP 104
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 50
24137: PUSH
24138: EMPTY
24139: LIST
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL_OW 69
24151: ST_TO_ADDR
// if not tmp then
24152: LD_VAR 0 2
24156: NOT
24157: IFFALSE 24161
// continue ;
24159: GO 23956
// HackLink ( i , tmp ) ;
24161: LD_VAR 0 1
24165: PPUSH
24166: LD_VAR 0 2
24170: PPUSH
24171: CALL 24318 0 2
// end ;
24175: GO 23956
24177: POP
24178: POP
// end ;
24179: PPOPN 2
24181: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24182: LD_INT 0
24184: PPUSH
24185: PPUSH
24186: PPUSH
// if not hack in hackTanks then
24187: LD_VAR 0 1
24191: PUSH
24192: LD_EXP 101
24196: IN
24197: NOT
24198: IFFALSE 24202
// exit ;
24200: GO 24313
// index := GetElementIndex ( hackTanks , hack ) ;
24202: LD_ADDR_VAR 0 4
24206: PUSH
24207: LD_EXP 101
24211: PPUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL 31787 0 2
24221: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24222: LD_EXP 102
24226: PUSH
24227: LD_VAR 0 4
24231: ARRAY
24232: IFFALSE 24313
// begin for i in hackTanksCaptured [ index ] do
24234: LD_ADDR_VAR 0 3
24238: PUSH
24239: LD_EXP 102
24243: PUSH
24244: LD_VAR 0 4
24248: ARRAY
24249: PUSH
24250: FOR_IN
24251: IFFALSE 24277
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24253: LD_VAR 0 3
24257: PUSH
24258: LD_INT 1
24260: ARRAY
24261: PPUSH
24262: LD_VAR 0 3
24266: PUSH
24267: LD_INT 2
24269: ARRAY
24270: PPUSH
24271: CALL_OW 235
24275: GO 24250
24277: POP
24278: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24279: LD_ADDR_EXP 102
24283: PUSH
24284: LD_EXP 102
24288: PPUSH
24289: LD_VAR 0 4
24293: PPUSH
24294: EMPTY
24295: PPUSH
24296: CALL_OW 1
24300: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 0
24308: PPUSH
24309: CALL_OW 505
// end ; end ;
24313: LD_VAR 0 2
24317: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
// if not hack in hackTanks or not vehicles then
24323: LD_VAR 0 1
24327: PUSH
24328: LD_EXP 101
24332: IN
24333: NOT
24334: PUSH
24335: LD_VAR 0 2
24339: NOT
24340: OR
24341: IFFALSE 24345
// exit ;
24343: GO 24620
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: LD_VAR 0 2
24359: PPUSH
24360: LD_INT 1
24362: PPUSH
24363: LD_INT 1
24365: PPUSH
24366: CALL 32437 0 4
24370: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24371: LD_ADDR_VAR 0 5
24375: PUSH
24376: LD_EXP 101
24380: PPUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL 31787 0 2
24390: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24391: LD_EXP 102
24395: PUSH
24396: LD_VAR 0 5
24400: ARRAY
24401: PUSH
24402: LD_EXP 103
24406: LESS
24407: IFFALSE 24596
// begin for i := 1 to vehicles do
24409: LD_ADDR_VAR 0 4
24413: PUSH
24414: DOUBLE
24415: LD_INT 1
24417: DEC
24418: ST_TO_ADDR
24419: LD_VAR 0 2
24423: PUSH
24424: FOR_TO
24425: IFFALSE 24594
// begin if hackTanksCaptured [ index ] = hackLimit then
24427: LD_EXP 102
24431: PUSH
24432: LD_VAR 0 5
24436: ARRAY
24437: PUSH
24438: LD_EXP 103
24442: EQUAL
24443: IFFALSE 24447
// break ;
24445: GO 24594
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24447: LD_ADDR_EXP 105
24451: PUSH
24452: LD_EXP 105
24456: PPUSH
24457: LD_VAR 0 5
24461: PPUSH
24462: LD_EXP 105
24466: PUSH
24467: LD_VAR 0 5
24471: ARRAY
24472: PUSH
24473: LD_INT 1
24475: PLUS
24476: PPUSH
24477: CALL_OW 1
24481: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24482: LD_ADDR_EXP 102
24486: PUSH
24487: LD_EXP 102
24491: PPUSH
24492: LD_VAR 0 5
24496: PUSH
24497: LD_EXP 102
24501: PUSH
24502: LD_VAR 0 5
24506: ARRAY
24507: PUSH
24508: LD_INT 1
24510: PLUS
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PPUSH
24516: LD_VAR 0 2
24520: PUSH
24521: LD_VAR 0 4
24525: ARRAY
24526: PUSH
24527: LD_VAR 0 2
24531: PUSH
24532: LD_VAR 0 4
24536: ARRAY
24537: PPUSH
24538: CALL_OW 255
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PPUSH
24547: CALL 32002 0 3
24551: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24552: LD_VAR 0 2
24556: PUSH
24557: LD_VAR 0 4
24561: ARRAY
24562: PPUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 255
24572: PPUSH
24573: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24577: LD_VAR 0 2
24581: PUSH
24582: LD_VAR 0 4
24586: ARRAY
24587: PPUSH
24588: CALL_OW 141
// end ;
24592: GO 24424
24594: POP
24595: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24596: LD_VAR 0 1
24600: PPUSH
24601: LD_EXP 102
24605: PUSH
24606: LD_VAR 0 5
24610: ARRAY
24611: PUSH
24612: LD_INT 0
24614: PLUS
24615: PPUSH
24616: CALL_OW 505
// end ;
24620: LD_VAR 0 3
24624: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
// if not hack in hackTanks then
24631: LD_VAR 0 1
24635: PUSH
24636: LD_EXP 101
24640: IN
24641: NOT
24642: IFFALSE 24646
// exit ;
24644: GO 24886
// index := GetElementIndex ( hackTanks , hack ) ;
24646: LD_ADDR_VAR 0 4
24650: PUSH
24651: LD_EXP 101
24655: PPUSH
24656: LD_VAR 0 1
24660: PPUSH
24661: CALL 31787 0 2
24665: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: DOUBLE
24672: LD_EXP 102
24676: PUSH
24677: LD_VAR 0 4
24681: ARRAY
24682: INC
24683: ST_TO_ADDR
24684: LD_INT 1
24686: PUSH
24687: FOR_DOWNTO
24688: IFFALSE 24860
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24690: LD_ADDR_VAR 0 5
24694: PUSH
24695: LD_EXP 102
24699: PUSH
24700: LD_VAR 0 4
24704: ARRAY
24705: PUSH
24706: LD_VAR 0 3
24710: ARRAY
24711: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24712: LD_VAR 0 5
24716: PUSH
24717: LD_INT 1
24719: ARRAY
24720: PPUSH
24721: CALL_OW 302
24725: NOT
24726: PUSH
24727: LD_VAR 0 5
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PPUSH
24736: CALL_OW 255
24740: PUSH
24741: LD_VAR 0 1
24745: PPUSH
24746: CALL_OW 255
24750: NONEQUAL
24751: OR
24752: IFFALSE 24858
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24754: LD_VAR 0 5
24758: PUSH
24759: LD_INT 1
24761: ARRAY
24762: PPUSH
24763: CALL_OW 305
24767: PUSH
24768: LD_VAR 0 5
24772: PUSH
24773: LD_INT 1
24775: ARRAY
24776: PPUSH
24777: CALL_OW 255
24781: PUSH
24782: LD_VAR 0 1
24786: PPUSH
24787: CALL_OW 255
24791: EQUAL
24792: AND
24793: IFFALSE 24817
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24795: LD_VAR 0 5
24799: PUSH
24800: LD_INT 1
24802: ARRAY
24803: PPUSH
24804: LD_VAR 0 5
24808: PUSH
24809: LD_INT 2
24811: ARRAY
24812: PPUSH
24813: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24817: LD_ADDR_EXP 102
24821: PUSH
24822: LD_EXP 102
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_EXP 102
24836: PUSH
24837: LD_VAR 0 4
24841: ARRAY
24842: PPUSH
24843: LD_VAR 0 3
24847: PPUSH
24848: CALL_OW 3
24852: PPUSH
24853: CALL_OW 1
24857: ST_TO_ADDR
// end ; end ;
24858: GO 24687
24860: POP
24861: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24862: LD_VAR 0 1
24866: PPUSH
24867: LD_EXP 102
24871: PUSH
24872: LD_VAR 0 4
24876: ARRAY
24877: PUSH
24878: LD_INT 0
24880: PLUS
24881: PPUSH
24882: CALL_OW 505
// end ;
24886: LD_VAR 0 2
24890: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
// if not hack in hackTanks then
24897: LD_VAR 0 1
24901: PUSH
24902: LD_EXP 101
24906: IN
24907: NOT
24908: IFFALSE 24912
// exit ;
24910: GO 24997
// index := GetElementIndex ( hackTanks , hack ) ;
24912: LD_ADDR_VAR 0 5
24916: PUSH
24917: LD_EXP 101
24921: PPUSH
24922: LD_VAR 0 1
24926: PPUSH
24927: CALL 31787 0 2
24931: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: DOUBLE
24938: LD_INT 1
24940: DEC
24941: ST_TO_ADDR
24942: LD_EXP 102
24946: PUSH
24947: LD_VAR 0 5
24951: ARRAY
24952: PUSH
24953: FOR_TO
24954: IFFALSE 24995
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24956: LD_EXP 102
24960: PUSH
24961: LD_VAR 0 5
24965: ARRAY
24966: PUSH
24967: LD_VAR 0 4
24971: ARRAY
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PUSH
24977: LD_VAR 0 2
24981: EQUAL
24982: IFFALSE 24993
// KillUnit ( vehicle ) ;
24984: LD_VAR 0 2
24988: PPUSH
24989: CALL_OW 66
24993: GO 24953
24995: POP
24996: POP
// end ;
24997: LD_VAR 0 3
25001: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25002: LD_EXP 106
25006: NOT
25007: IFFALSE 25042
25009: GO 25011
25011: DISABLE
// begin initMiner := true ;
25012: LD_ADDR_EXP 106
25016: PUSH
25017: LD_INT 1
25019: ST_TO_ADDR
// minersList := [ ] ;
25020: LD_ADDR_EXP 107
25024: PUSH
25025: EMPTY
25026: ST_TO_ADDR
// minerMinesList := [ ] ;
25027: LD_ADDR_EXP 108
25031: PUSH
25032: EMPTY
25033: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25034: LD_ADDR_EXP 109
25038: PUSH
25039: LD_INT 5
25041: ST_TO_ADDR
// end ;
25042: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25043: LD_EXP 106
25047: PUSH
25048: LD_INT 34
25050: PUSH
25051: LD_EXP 117
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PPUSH
25060: CALL_OW 69
25064: AND
25065: IFFALSE 25528
25067: GO 25069
25069: DISABLE
25070: LD_INT 0
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
// begin enable ;
25076: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: LD_INT 34
25084: PUSH
25085: LD_EXP 117
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PPUSH
25094: CALL_OW 69
25098: PUSH
25099: FOR_IN
25100: IFFALSE 25172
// begin if not i in minersList then
25102: LD_VAR 0 1
25106: PUSH
25107: LD_EXP 107
25111: IN
25112: NOT
25113: IFFALSE 25170
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25115: LD_ADDR_EXP 107
25119: PUSH
25120: LD_EXP 107
25124: PPUSH
25125: LD_EXP 107
25129: PUSH
25130: LD_INT 1
25132: PLUS
25133: PPUSH
25134: LD_VAR 0 1
25138: PPUSH
25139: CALL_OW 1
25143: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25144: LD_ADDR_EXP 108
25148: PUSH
25149: LD_EXP 108
25153: PPUSH
25154: LD_EXP 108
25158: PUSH
25159: LD_INT 1
25161: PLUS
25162: PPUSH
25163: EMPTY
25164: PPUSH
25165: CALL_OW 1
25169: ST_TO_ADDR
// end end ;
25170: GO 25099
25172: POP
25173: POP
// for i := minerMinesList downto 1 do
25174: LD_ADDR_VAR 0 1
25178: PUSH
25179: DOUBLE
25180: LD_EXP 108
25184: INC
25185: ST_TO_ADDR
25186: LD_INT 1
25188: PUSH
25189: FOR_DOWNTO
25190: IFFALSE 25526
// begin if IsLive ( minersList [ i ] ) then
25192: LD_EXP 107
25196: PUSH
25197: LD_VAR 0 1
25201: ARRAY
25202: PPUSH
25203: CALL_OW 300
25207: IFFALSE 25235
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25209: LD_EXP 107
25213: PUSH
25214: LD_VAR 0 1
25218: ARRAY
25219: PPUSH
25220: LD_EXP 108
25224: PUSH
25225: LD_VAR 0 1
25229: ARRAY
25230: PPUSH
25231: CALL_OW 505
// if not minerMinesList [ i ] then
25235: LD_EXP 108
25239: PUSH
25240: LD_VAR 0 1
25244: ARRAY
25245: NOT
25246: IFFALSE 25250
// continue ;
25248: GO 25189
// for j := minerMinesList [ i ] downto 1 do
25250: LD_ADDR_VAR 0 2
25254: PUSH
25255: DOUBLE
25256: LD_EXP 108
25260: PUSH
25261: LD_VAR 0 1
25265: ARRAY
25266: INC
25267: ST_TO_ADDR
25268: LD_INT 1
25270: PUSH
25271: FOR_DOWNTO
25272: IFFALSE 25522
// begin side := GetSide ( minersList [ i ] ) ;
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_EXP 107
25283: PUSH
25284: LD_VAR 0 1
25288: ARRAY
25289: PPUSH
25290: CALL_OW 255
25294: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25295: LD_ADDR_VAR 0 4
25299: PUSH
25300: LD_EXP 108
25304: PUSH
25305: LD_VAR 0 1
25309: ARRAY
25310: PUSH
25311: LD_VAR 0 2
25315: ARRAY
25316: PUSH
25317: LD_INT 1
25319: ARRAY
25320: PPUSH
25321: LD_EXP 108
25325: PUSH
25326: LD_VAR 0 1
25330: ARRAY
25331: PUSH
25332: LD_VAR 0 2
25336: ARRAY
25337: PUSH
25338: LD_INT 2
25340: ARRAY
25341: PPUSH
25342: CALL_OW 428
25346: ST_TO_ADDR
// if not tmp then
25347: LD_VAR 0 4
25351: NOT
25352: IFFALSE 25356
// continue ;
25354: GO 25271
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25356: LD_VAR 0 4
25360: PUSH
25361: LD_INT 81
25363: PUSH
25364: LD_VAR 0 3
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 69
25377: IN
25378: PUSH
25379: LD_EXP 108
25383: PUSH
25384: LD_VAR 0 1
25388: ARRAY
25389: PUSH
25390: LD_VAR 0 2
25394: ARRAY
25395: PUSH
25396: LD_INT 1
25398: ARRAY
25399: PPUSH
25400: LD_EXP 108
25404: PUSH
25405: LD_VAR 0 1
25409: ARRAY
25410: PUSH
25411: LD_VAR 0 2
25415: ARRAY
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: PPUSH
25421: CALL_OW 458
25425: AND
25426: IFFALSE 25520
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25428: LD_EXP 108
25432: PUSH
25433: LD_VAR 0 1
25437: ARRAY
25438: PUSH
25439: LD_VAR 0 2
25443: ARRAY
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: PPUSH
25449: LD_EXP 108
25453: PUSH
25454: LD_VAR 0 1
25458: ARRAY
25459: PUSH
25460: LD_VAR 0 2
25464: ARRAY
25465: PUSH
25466: LD_INT 2
25468: ARRAY
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25479: LD_ADDR_EXP 108
25483: PUSH
25484: LD_EXP 108
25488: PPUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: LD_EXP 108
25498: PUSH
25499: LD_VAR 0 1
25503: ARRAY
25504: PPUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 3
25514: PPUSH
25515: CALL_OW 1
25519: ST_TO_ADDR
// end ; end ;
25520: GO 25271
25522: POP
25523: POP
// end ;
25524: GO 25189
25526: POP
25527: POP
// end ;
25528: PPOPN 4
25530: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25531: LD_INT 0
25533: PPUSH
25534: PPUSH
// result := false ;
25535: LD_ADDR_VAR 0 4
25539: PUSH
25540: LD_INT 0
25542: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25543: LD_VAR 0 1
25547: PPUSH
25548: CALL_OW 264
25552: PUSH
25553: LD_EXP 117
25557: EQUAL
25558: NOT
25559: IFFALSE 25563
// exit ;
25561: GO 25803
// index := GetElementIndex ( minersList , unit ) ;
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: LD_EXP 107
25572: PPUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL 31787 0 2
25582: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25583: LD_EXP 108
25587: PUSH
25588: LD_VAR 0 5
25592: ARRAY
25593: PUSH
25594: LD_EXP 109
25598: GREATEREQUAL
25599: IFFALSE 25603
// exit ;
25601: GO 25803
// ComMoveXY ( unit , x , y ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_VAR 0 3
25617: PPUSH
25618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25622: LD_INT 35
25624: PPUSH
25625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 2
25638: PPUSH
25639: LD_VAR 0 3
25643: PPUSH
25644: CALL 62560 0 3
25648: NOT
25649: PUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL_OW 314
25659: AND
25660: IFFALSE 25664
// exit ;
25662: GO 25803
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25664: LD_VAR 0 2
25668: PPUSH
25669: LD_VAR 0 3
25673: PPUSH
25674: CALL_OW 428
25678: PUSH
25679: LD_VAR 0 1
25683: EQUAL
25684: PUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 314
25694: NOT
25695: AND
25696: IFFALSE 25622
// PlaySoundXY ( x , y , PlantMine ) ;
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_VAR 0 3
25707: PPUSH
25708: LD_STRING PlantMine
25710: PPUSH
25711: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25715: LD_VAR 0 2
25719: PPUSH
25720: LD_VAR 0 3
25724: PPUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 255
25734: PPUSH
25735: LD_INT 0
25737: PPUSH
25738: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25742: LD_ADDR_EXP 108
25746: PUSH
25747: LD_EXP 108
25751: PPUSH
25752: LD_VAR 0 5
25756: PUSH
25757: LD_EXP 108
25761: PUSH
25762: LD_VAR 0 5
25766: ARRAY
25767: PUSH
25768: LD_INT 1
25770: PLUS
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: LD_VAR 0 2
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PPUSH
25790: CALL 32002 0 3
25794: ST_TO_ADDR
// result := true ;
25795: LD_ADDR_VAR 0 4
25799: PUSH
25800: LD_INT 1
25802: ST_TO_ADDR
// end ;
25803: LD_VAR 0 4
25807: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25808: LD_INT 0
25810: PPUSH
25811: PPUSH
25812: PPUSH
// if not unit in minersList then
25813: LD_VAR 0 1
25817: PUSH
25818: LD_EXP 107
25822: IN
25823: NOT
25824: IFFALSE 25828
// exit ;
25826: GO 26220
// index := GetElementIndex ( minersList , unit ) ;
25828: LD_ADDR_VAR 0 6
25832: PUSH
25833: LD_EXP 107
25837: PPUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL 31787 0 2
25847: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25848: LD_ADDR_VAR 0 5
25852: PUSH
25853: DOUBLE
25854: LD_EXP 108
25858: PUSH
25859: LD_VAR 0 6
25863: ARRAY
25864: INC
25865: ST_TO_ADDR
25866: LD_INT 1
25868: PUSH
25869: FOR_DOWNTO
25870: IFFALSE 26031
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25872: LD_EXP 108
25876: PUSH
25877: LD_VAR 0 6
25881: ARRAY
25882: PUSH
25883: LD_VAR 0 5
25887: ARRAY
25888: PUSH
25889: LD_INT 1
25891: ARRAY
25892: PUSH
25893: LD_VAR 0 2
25897: EQUAL
25898: PUSH
25899: LD_EXP 108
25903: PUSH
25904: LD_VAR 0 6
25908: ARRAY
25909: PUSH
25910: LD_VAR 0 5
25914: ARRAY
25915: PUSH
25916: LD_INT 2
25918: ARRAY
25919: PUSH
25920: LD_VAR 0 3
25924: EQUAL
25925: AND
25926: IFFALSE 26029
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25928: LD_EXP 108
25932: PUSH
25933: LD_VAR 0 6
25937: ARRAY
25938: PUSH
25939: LD_VAR 0 5
25943: ARRAY
25944: PUSH
25945: LD_INT 1
25947: ARRAY
25948: PPUSH
25949: LD_EXP 108
25953: PUSH
25954: LD_VAR 0 6
25958: ARRAY
25959: PUSH
25960: LD_VAR 0 5
25964: ARRAY
25965: PUSH
25966: LD_INT 2
25968: ARRAY
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 255
25979: PPUSH
25980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25984: LD_ADDR_EXP 108
25988: PUSH
25989: LD_EXP 108
25993: PPUSH
25994: LD_VAR 0 6
25998: PPUSH
25999: LD_EXP 108
26003: PUSH
26004: LD_VAR 0 6
26008: ARRAY
26009: PPUSH
26010: LD_VAR 0 5
26014: PPUSH
26015: CALL_OW 3
26019: PPUSH
26020: CALL_OW 1
26024: ST_TO_ADDR
// exit ;
26025: POP
26026: POP
26027: GO 26220
// end ; end ;
26029: GO 25869
26031: POP
26032: POP
// for i := minerMinesList [ index ] downto 1 do
26033: LD_ADDR_VAR 0 5
26037: PUSH
26038: DOUBLE
26039: LD_EXP 108
26043: PUSH
26044: LD_VAR 0 6
26048: ARRAY
26049: INC
26050: ST_TO_ADDR
26051: LD_INT 1
26053: PUSH
26054: FOR_DOWNTO
26055: IFFALSE 26218
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26057: LD_EXP 108
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_EXP 108
26082: PUSH
26083: LD_VAR 0 6
26087: ARRAY
26088: PUSH
26089: LD_VAR 0 5
26093: ARRAY
26094: PUSH
26095: LD_INT 2
26097: ARRAY
26098: PPUSH
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_VAR 0 3
26108: PPUSH
26109: CALL_OW 298
26113: PUSH
26114: LD_INT 6
26116: LESS
26117: IFFALSE 26216
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26119: LD_EXP 108
26123: PUSH
26124: LD_VAR 0 6
26128: ARRAY
26129: PUSH
26130: LD_VAR 0 5
26134: ARRAY
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: PPUSH
26140: LD_EXP 108
26144: PUSH
26145: LD_VAR 0 6
26149: ARRAY
26150: PUSH
26151: LD_VAR 0 5
26155: ARRAY
26156: PUSH
26157: LD_INT 2
26159: ARRAY
26160: PPUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 255
26170: PPUSH
26171: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26175: LD_ADDR_EXP 108
26179: PUSH
26180: LD_EXP 108
26184: PPUSH
26185: LD_VAR 0 6
26189: PPUSH
26190: LD_EXP 108
26194: PUSH
26195: LD_VAR 0 6
26199: ARRAY
26200: PPUSH
26201: LD_VAR 0 5
26205: PPUSH
26206: CALL_OW 3
26210: PPUSH
26211: CALL_OW 1
26215: ST_TO_ADDR
// end ; end ;
26216: GO 26054
26218: POP
26219: POP
// end ;
26220: LD_VAR 0 4
26224: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26225: LD_INT 0
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 264
26245: PUSH
26246: LD_EXP 117
26250: EQUAL
26251: NOT
26252: PUSH
26253: LD_VAR 0 1
26257: PUSH
26258: LD_EXP 107
26262: IN
26263: NOT
26264: OR
26265: IFFALSE 26269
// exit ;
26267: GO 26591
// index := GetElementIndex ( minersList , unit ) ;
26269: LD_ADDR_VAR 0 6
26273: PUSH
26274: LD_EXP 107
26278: PPUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL 31787 0 2
26288: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26289: LD_ADDR_VAR 0 8
26293: PUSH
26294: LD_EXP 109
26298: PUSH
26299: LD_EXP 108
26303: PUSH
26304: LD_VAR 0 6
26308: ARRAY
26309: MINUS
26310: ST_TO_ADDR
// if not minesFreeAmount then
26311: LD_VAR 0 8
26315: NOT
26316: IFFALSE 26320
// exit ;
26318: GO 26591
// tmp := [ ] ;
26320: LD_ADDR_VAR 0 7
26324: PUSH
26325: EMPTY
26326: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26327: LD_ADDR_VAR 0 5
26331: PUSH
26332: DOUBLE
26333: LD_INT 1
26335: DEC
26336: ST_TO_ADDR
26337: LD_VAR 0 8
26341: PUSH
26342: FOR_TO
26343: IFFALSE 26538
// begin _d := rand ( 0 , 5 ) ;
26345: LD_ADDR_VAR 0 11
26349: PUSH
26350: LD_INT 0
26352: PPUSH
26353: LD_INT 5
26355: PPUSH
26356: CALL_OW 12
26360: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26361: LD_ADDR_VAR 0 12
26365: PUSH
26366: LD_INT 2
26368: PPUSH
26369: LD_INT 6
26371: PPUSH
26372: CALL_OW 12
26376: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26377: LD_ADDR_VAR 0 9
26381: PUSH
26382: LD_VAR 0 2
26386: PPUSH
26387: LD_VAR 0 11
26391: PPUSH
26392: LD_VAR 0 12
26396: PPUSH
26397: CALL_OW 272
26401: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26402: LD_ADDR_VAR 0 10
26406: PUSH
26407: LD_VAR 0 3
26411: PPUSH
26412: LD_VAR 0 11
26416: PPUSH
26417: LD_VAR 0 12
26421: PPUSH
26422: CALL_OW 273
26426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26427: LD_VAR 0 9
26431: PPUSH
26432: LD_VAR 0 10
26436: PPUSH
26437: CALL_OW 488
26441: PUSH
26442: LD_VAR 0 9
26446: PUSH
26447: LD_VAR 0 10
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_VAR 0 7
26460: IN
26461: NOT
26462: AND
26463: PUSH
26464: LD_VAR 0 9
26468: PPUSH
26469: LD_VAR 0 10
26473: PPUSH
26474: CALL_OW 458
26478: NOT
26479: AND
26480: IFFALSE 26522
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26482: LD_ADDR_VAR 0 7
26486: PUSH
26487: LD_VAR 0 7
26491: PPUSH
26492: LD_VAR 0 7
26496: PUSH
26497: LD_INT 1
26499: PLUS
26500: PPUSH
26501: LD_VAR 0 9
26505: PUSH
26506: LD_VAR 0 10
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 1
26519: ST_TO_ADDR
26520: GO 26536
// i := i - 1 ;
26522: LD_ADDR_VAR 0 5
26526: PUSH
26527: LD_VAR 0 5
26531: PUSH
26532: LD_INT 1
26534: MINUS
26535: ST_TO_ADDR
// end ;
26536: GO 26342
26538: POP
26539: POP
// for i in tmp do
26540: LD_ADDR_VAR 0 5
26544: PUSH
26545: LD_VAR 0 7
26549: PUSH
26550: FOR_IN
26551: IFFALSE 26589
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26553: LD_VAR 0 1
26557: PPUSH
26558: LD_VAR 0 5
26562: PUSH
26563: LD_INT 1
26565: ARRAY
26566: PPUSH
26567: LD_VAR 0 5
26571: PUSH
26572: LD_INT 2
26574: ARRAY
26575: PPUSH
26576: CALL 25531 0 3
26580: NOT
26581: IFFALSE 26587
// exit ;
26583: POP
26584: POP
26585: GO 26591
26587: GO 26550
26589: POP
26590: POP
// end ;
26591: LD_VAR 0 4
26595: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26596: LD_INT 0
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
// if not GetClass ( unit ) = class_sniper then
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 257
26614: PUSH
26615: LD_INT 5
26617: EQUAL
26618: NOT
26619: IFFALSE 26623
// exit ;
26621: GO 27011
// dist := 8 ;
26623: LD_ADDR_VAR 0 5
26627: PUSH
26628: LD_INT 8
26630: ST_TO_ADDR
// viewRange := 12 ;
26631: LD_ADDR_VAR 0 7
26635: PUSH
26636: LD_INT 12
26638: ST_TO_ADDR
// side := GetSide ( unit ) ;
26639: LD_ADDR_VAR 0 6
26643: PUSH
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL_OW 255
26653: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26654: LD_INT 61
26656: PPUSH
26657: LD_VAR 0 6
26661: PPUSH
26662: CALL_OW 321
26666: PUSH
26667: LD_INT 2
26669: EQUAL
26670: IFFALSE 26680
// viewRange := 16 ;
26672: LD_ADDR_VAR 0 7
26676: PUSH
26677: LD_INT 16
26679: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26680: LD_VAR 0 1
26684: PPUSH
26685: LD_VAR 0 2
26689: PPUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 297
26699: PUSH
26700: LD_VAR 0 5
26704: GREATER
26705: IFFALSE 26784
// begin ComMoveXY ( unit , x , y ) ;
26707: LD_VAR 0 1
26711: PPUSH
26712: LD_VAR 0 2
26716: PPUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26726: LD_INT 35
26728: PPUSH
26729: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26733: LD_VAR 0 1
26737: PPUSH
26738: LD_VAR 0 2
26742: PPUSH
26743: LD_VAR 0 3
26747: PPUSH
26748: CALL 62560 0 3
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 27011
// until GetDistUnitXY ( unit , x , y ) < dist ;
26757: LD_VAR 0 1
26761: PPUSH
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_VAR 0 3
26771: PPUSH
26772: CALL_OW 297
26776: PUSH
26777: LD_VAR 0 5
26781: LESS
26782: IFFALSE 26726
// end ; ComTurnXY ( unit , x , y ) ;
26784: LD_VAR 0 1
26788: PPUSH
26789: LD_VAR 0 2
26793: PPUSH
26794: LD_VAR 0 3
26798: PPUSH
26799: CALL_OW 118
// wait ( 5 ) ;
26803: LD_INT 5
26805: PPUSH
26806: CALL_OW 67
// _d := GetDir ( unit ) ;
26810: LD_ADDR_VAR 0 10
26814: PUSH
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 254
26824: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26825: LD_ADDR_VAR 0 8
26829: PUSH
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 250
26839: PPUSH
26840: LD_VAR 0 10
26844: PPUSH
26845: LD_VAR 0 5
26849: PPUSH
26850: CALL_OW 272
26854: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26855: LD_ADDR_VAR 0 9
26859: PUSH
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 251
26869: PPUSH
26870: LD_VAR 0 10
26874: PPUSH
26875: LD_VAR 0 5
26879: PPUSH
26880: CALL_OW 273
26884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26885: LD_VAR 0 8
26889: PPUSH
26890: LD_VAR 0 9
26894: PPUSH
26895: CALL_OW 488
26899: NOT
26900: IFFALSE 26904
// exit ;
26902: GO 27011
// ComAnimCustom ( unit , 1 ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_INT 1
26911: PPUSH
26912: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26916: LD_VAR 0 8
26920: PPUSH
26921: LD_VAR 0 9
26925: PPUSH
26926: LD_VAR 0 6
26930: PPUSH
26931: LD_VAR 0 7
26935: PPUSH
26936: CALL_OW 330
// repeat wait ( 1 ) ;
26940: LD_INT 1
26942: PPUSH
26943: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 316
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 314
26966: OR
26967: PUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 302
26977: NOT
26978: OR
26979: PUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 301
26989: OR
26990: IFFALSE 26940
// RemoveSeeing ( _x , _y , side ) ;
26992: LD_VAR 0 8
26996: PPUSH
26997: LD_VAR 0 9
27001: PPUSH
27002: LD_VAR 0 6
27006: PPUSH
27007: CALL_OW 331
// end ; end_of_file
27011: LD_VAR 0 4
27015: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
// if exist_mode then
27020: LD_VAR 0 2
27024: IFFALSE 27049
// unit := CreateCharacter ( prefix & ident ) else
27026: LD_ADDR_VAR 0 5
27030: PUSH
27031: LD_VAR 0 3
27035: PUSH
27036: LD_VAR 0 1
27040: STR
27041: PPUSH
27042: CALL_OW 34
27046: ST_TO_ADDR
27047: GO 27064
// unit := NewCharacter ( ident ) ;
27049: LD_ADDR_VAR 0 5
27053: PUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL_OW 25
27063: ST_TO_ADDR
// result := unit ;
27064: LD_ADDR_VAR 0 4
27068: PUSH
27069: LD_VAR 0 5
27073: ST_TO_ADDR
// end ;
27074: LD_VAR 0 4
27078: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27079: LD_INT 0
27081: PPUSH
27082: PPUSH
// if not side or not nation then
27083: LD_VAR 0 1
27087: NOT
27088: PUSH
27089: LD_VAR 0 2
27093: NOT
27094: OR
27095: IFFALSE 27099
// exit ;
27097: GO 27867
// case nation of nation_american :
27099: LD_VAR 0 2
27103: PUSH
27104: LD_INT 1
27106: DOUBLE
27107: EQUAL
27108: IFTRUE 27112
27110: GO 27326
27112: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: LD_INT 35
27120: PUSH
27121: LD_INT 45
27123: PUSH
27124: LD_INT 46
27126: PUSH
27127: LD_INT 47
27129: PUSH
27130: LD_INT 82
27132: PUSH
27133: LD_INT 83
27135: PUSH
27136: LD_INT 84
27138: PUSH
27139: LD_INT 85
27141: PUSH
27142: LD_INT 86
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 6
27153: PUSH
27154: LD_INT 15
27156: PUSH
27157: LD_INT 16
27159: PUSH
27160: LD_INT 7
27162: PUSH
27163: LD_INT 12
27165: PUSH
27166: LD_INT 13
27168: PUSH
27169: LD_INT 10
27171: PUSH
27172: LD_INT 14
27174: PUSH
27175: LD_INT 20
27177: PUSH
27178: LD_INT 21
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_INT 25
27186: PUSH
27187: LD_INT 32
27189: PUSH
27190: LD_INT 27
27192: PUSH
27193: LD_INT 36
27195: PUSH
27196: LD_INT 69
27198: PUSH
27199: LD_INT 39
27201: PUSH
27202: LD_INT 34
27204: PUSH
27205: LD_INT 40
27207: PUSH
27208: LD_INT 48
27210: PUSH
27211: LD_INT 49
27213: PUSH
27214: LD_INT 50
27216: PUSH
27217: LD_INT 51
27219: PUSH
27220: LD_INT 52
27222: PUSH
27223: LD_INT 53
27225: PUSH
27226: LD_INT 54
27228: PUSH
27229: LD_INT 55
27231: PUSH
27232: LD_INT 56
27234: PUSH
27235: LD_INT 57
27237: PUSH
27238: LD_INT 58
27240: PUSH
27241: LD_INT 59
27243: PUSH
27244: LD_INT 60
27246: PUSH
27247: LD_INT 61
27249: PUSH
27250: LD_INT 62
27252: PUSH
27253: LD_INT 80
27255: PUSH
27256: LD_INT 82
27258: PUSH
27259: LD_INT 83
27261: PUSH
27262: LD_INT 84
27264: PUSH
27265: LD_INT 85
27267: PUSH
27268: LD_INT 86
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
27324: GO 27791
27326: LD_INT 2
27328: DOUBLE
27329: EQUAL
27330: IFTRUE 27334
27332: GO 27560
27334: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27335: LD_ADDR_VAR 0 4
27339: PUSH
27340: LD_INT 35
27342: PUSH
27343: LD_INT 45
27345: PUSH
27346: LD_INT 46
27348: PUSH
27349: LD_INT 47
27351: PUSH
27352: LD_INT 82
27354: PUSH
27355: LD_INT 83
27357: PUSH
27358: LD_INT 84
27360: PUSH
27361: LD_INT 85
27363: PUSH
27364: LD_INT 87
27366: PUSH
27367: LD_INT 70
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 11
27375: PUSH
27376: LD_INT 3
27378: PUSH
27379: LD_INT 4
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: LD_INT 6
27387: PUSH
27388: LD_INT 15
27390: PUSH
27391: LD_INT 18
27393: PUSH
27394: LD_INT 7
27396: PUSH
27397: LD_INT 17
27399: PUSH
27400: LD_INT 8
27402: PUSH
27403: LD_INT 20
27405: PUSH
27406: LD_INT 21
27408: PUSH
27409: LD_INT 22
27411: PUSH
27412: LD_INT 72
27414: PUSH
27415: LD_INT 26
27417: PUSH
27418: LD_INT 69
27420: PUSH
27421: LD_INT 39
27423: PUSH
27424: LD_INT 40
27426: PUSH
27427: LD_INT 41
27429: PUSH
27430: LD_INT 42
27432: PUSH
27433: LD_INT 43
27435: PUSH
27436: LD_INT 48
27438: PUSH
27439: LD_INT 49
27441: PUSH
27442: LD_INT 50
27444: PUSH
27445: LD_INT 51
27447: PUSH
27448: LD_INT 52
27450: PUSH
27451: LD_INT 53
27453: PUSH
27454: LD_INT 54
27456: PUSH
27457: LD_INT 55
27459: PUSH
27460: LD_INT 56
27462: PUSH
27463: LD_INT 60
27465: PUSH
27466: LD_INT 61
27468: PUSH
27469: LD_INT 62
27471: PUSH
27472: LD_INT 66
27474: PUSH
27475: LD_INT 67
27477: PUSH
27478: LD_INT 68
27480: PUSH
27481: LD_INT 81
27483: PUSH
27484: LD_INT 82
27486: PUSH
27487: LD_INT 83
27489: PUSH
27490: LD_INT 84
27492: PUSH
27493: LD_INT 85
27495: PUSH
27496: LD_INT 87
27498: PUSH
27499: LD_INT 88
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
27558: GO 27791
27560: LD_INT 3
27562: DOUBLE
27563: EQUAL
27564: IFTRUE 27568
27566: GO 27790
27568: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27569: LD_ADDR_VAR 0 4
27573: PUSH
27574: LD_INT 46
27576: PUSH
27577: LD_INT 47
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 82
27588: PUSH
27589: LD_INT 83
27591: PUSH
27592: LD_INT 84
27594: PUSH
27595: LD_INT 85
27597: PUSH
27598: LD_INT 86
27600: PUSH
27601: LD_INT 11
27603: PUSH
27604: LD_INT 9
27606: PUSH
27607: LD_INT 20
27609: PUSH
27610: LD_INT 19
27612: PUSH
27613: LD_INT 21
27615: PUSH
27616: LD_INT 24
27618: PUSH
27619: LD_INT 22
27621: PUSH
27622: LD_INT 25
27624: PUSH
27625: LD_INT 28
27627: PUSH
27628: LD_INT 29
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: LD_INT 31
27636: PUSH
27637: LD_INT 37
27639: PUSH
27640: LD_INT 38
27642: PUSH
27643: LD_INT 32
27645: PUSH
27646: LD_INT 27
27648: PUSH
27649: LD_INT 33
27651: PUSH
27652: LD_INT 69
27654: PUSH
27655: LD_INT 39
27657: PUSH
27658: LD_INT 34
27660: PUSH
27661: LD_INT 40
27663: PUSH
27664: LD_INT 71
27666: PUSH
27667: LD_INT 23
27669: PUSH
27670: LD_INT 44
27672: PUSH
27673: LD_INT 48
27675: PUSH
27676: LD_INT 49
27678: PUSH
27679: LD_INT 50
27681: PUSH
27682: LD_INT 51
27684: PUSH
27685: LD_INT 52
27687: PUSH
27688: LD_INT 53
27690: PUSH
27691: LD_INT 54
27693: PUSH
27694: LD_INT 55
27696: PUSH
27697: LD_INT 56
27699: PUSH
27700: LD_INT 57
27702: PUSH
27703: LD_INT 58
27705: PUSH
27706: LD_INT 59
27708: PUSH
27709: LD_INT 63
27711: PUSH
27712: LD_INT 64
27714: PUSH
27715: LD_INT 65
27717: PUSH
27718: LD_INT 82
27720: PUSH
27721: LD_INT 83
27723: PUSH
27724: LD_INT 84
27726: PUSH
27727: LD_INT 85
27729: PUSH
27730: LD_INT 86
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
27788: GO 27791
27790: POP
// if state > - 1 and state < 3 then
27791: LD_VAR 0 3
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: GREATER
27800: PUSH
27801: LD_VAR 0 3
27805: PUSH
27806: LD_INT 3
27808: LESS
27809: AND
27810: IFFALSE 27867
// for i in result do
27812: LD_ADDR_VAR 0 5
27816: PUSH
27817: LD_VAR 0 4
27821: PUSH
27822: FOR_IN
27823: IFFALSE 27865
// if GetTech ( i , side ) <> state then
27825: LD_VAR 0 5
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 321
27839: PUSH
27840: LD_VAR 0 3
27844: NONEQUAL
27845: IFFALSE 27863
// result := result diff i ;
27847: LD_ADDR_VAR 0 4
27851: PUSH
27852: LD_VAR 0 4
27856: PUSH
27857: LD_VAR 0 5
27861: DIFF
27862: ST_TO_ADDR
27863: GO 27822
27865: POP
27866: POP
// end ;
27867: LD_VAR 0 4
27871: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
27876: PPUSH
// result := true ;
27877: LD_ADDR_VAR 0 3
27881: PUSH
27882: LD_INT 1
27884: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27885: LD_ADDR_VAR 0 5
27889: PUSH
27890: LD_VAR 0 2
27894: PPUSH
27895: CALL_OW 480
27899: ST_TO_ADDR
// if not tmp then
27900: LD_VAR 0 5
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 27958
// for i in tmp do
27909: LD_ADDR_VAR 0 4
27913: PUSH
27914: LD_VAR 0 5
27918: PUSH
27919: FOR_IN
27920: IFFALSE 27956
// if GetTech ( i , side ) <> state_researched then
27922: LD_VAR 0 4
27926: PPUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 321
27936: PUSH
27937: LD_INT 2
27939: NONEQUAL
27940: IFFALSE 27954
// begin result := false ;
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: LD_INT 0
27949: ST_TO_ADDR
// exit ;
27950: POP
27951: POP
27952: GO 27958
// end ;
27954: GO 27919
27956: POP
27957: POP
// end ;
27958: LD_VAR 0 3
27962: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
27976: PPUSH
27977: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27978: LD_VAR 0 1
27982: NOT
27983: PUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 257
27993: PUSH
27994: LD_INT 9
27996: NONEQUAL
27997: OR
27998: IFFALSE 28002
// exit ;
28000: GO 28575
// side := GetSide ( unit ) ;
28002: LD_ADDR_VAR 0 9
28006: PUSH
28007: LD_VAR 0 1
28011: PPUSH
28012: CALL_OW 255
28016: ST_TO_ADDR
// tech_space := tech_spacanom ;
28017: LD_ADDR_VAR 0 12
28021: PUSH
28022: LD_INT 29
28024: ST_TO_ADDR
// tech_time := tech_taurad ;
28025: LD_ADDR_VAR 0 13
28029: PUSH
28030: LD_INT 28
28032: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28033: LD_ADDR_VAR 0 11
28037: PUSH
28038: LD_VAR 0 1
28042: PPUSH
28043: CALL_OW 310
28047: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28048: LD_VAR 0 11
28052: PPUSH
28053: CALL_OW 247
28057: PUSH
28058: LD_INT 2
28060: EQUAL
28061: IFFALSE 28065
// exit ;
28063: GO 28575
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28065: LD_ADDR_VAR 0 8
28069: PUSH
28070: LD_INT 81
28072: PUSH
28073: LD_VAR 0 9
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 3
28084: PUSH
28085: LD_INT 21
28087: PUSH
28088: LD_INT 3
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PPUSH
28103: CALL_OW 69
28107: ST_TO_ADDR
// if not tmp then
28108: LD_VAR 0 8
28112: NOT
28113: IFFALSE 28117
// exit ;
28115: GO 28575
// if in_unit then
28117: LD_VAR 0 11
28121: IFFALSE 28145
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28123: LD_ADDR_VAR 0 10
28127: PUSH
28128: LD_VAR 0 8
28132: PPUSH
28133: LD_VAR 0 11
28137: PPUSH
28138: CALL_OW 74
28142: ST_TO_ADDR
28143: GO 28165
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28145: LD_ADDR_VAR 0 10
28149: PUSH
28150: LD_VAR 0 8
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 74
28164: ST_TO_ADDR
// if not enemy then
28165: LD_VAR 0 10
28169: NOT
28170: IFFALSE 28174
// exit ;
28172: GO 28575
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28174: LD_VAR 0 11
28178: PUSH
28179: LD_VAR 0 11
28183: PPUSH
28184: LD_VAR 0 10
28188: PPUSH
28189: CALL_OW 296
28193: PUSH
28194: LD_INT 13
28196: GREATER
28197: AND
28198: PUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: LD_VAR 0 10
28208: PPUSH
28209: CALL_OW 296
28213: PUSH
28214: LD_INT 12
28216: GREATER
28217: OR
28218: IFFALSE 28222
// exit ;
28220: GO 28575
// missile := [ 1 ] ;
28222: LD_ADDR_VAR 0 14
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28233: LD_VAR 0 9
28237: PPUSH
28238: LD_VAR 0 12
28242: PPUSH
28243: CALL_OW 325
28247: IFFALSE 28276
// missile := Insert ( missile , missile + 1 , 2 ) ;
28249: LD_ADDR_VAR 0 14
28253: PUSH
28254: LD_VAR 0 14
28258: PPUSH
28259: LD_VAR 0 14
28263: PUSH
28264: LD_INT 1
28266: PLUS
28267: PPUSH
28268: LD_INT 2
28270: PPUSH
28271: CALL_OW 2
28275: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28276: LD_VAR 0 9
28280: PPUSH
28281: LD_VAR 0 13
28285: PPUSH
28286: CALL_OW 325
28290: PUSH
28291: LD_VAR 0 10
28295: PPUSH
28296: CALL_OW 255
28300: PPUSH
28301: LD_VAR 0 13
28305: PPUSH
28306: CALL_OW 325
28310: NOT
28311: AND
28312: IFFALSE 28341
// missile := Insert ( missile , missile + 1 , 3 ) ;
28314: LD_ADDR_VAR 0 14
28318: PUSH
28319: LD_VAR 0 14
28323: PPUSH
28324: LD_VAR 0 14
28328: PUSH
28329: LD_INT 1
28331: PLUS
28332: PPUSH
28333: LD_INT 3
28335: PPUSH
28336: CALL_OW 2
28340: ST_TO_ADDR
// if missile < 2 then
28341: LD_VAR 0 14
28345: PUSH
28346: LD_INT 2
28348: LESS
28349: IFFALSE 28353
// exit ;
28351: GO 28575
// x := GetX ( enemy ) ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_VAR 0 10
28362: PPUSH
28363: CALL_OW 250
28367: ST_TO_ADDR
// y := GetY ( enemy ) ;
28368: LD_ADDR_VAR 0 5
28372: PUSH
28373: LD_VAR 0 10
28377: PPUSH
28378: CALL_OW 251
28382: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_VAR 0 4
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL_OW 12
28404: PLUS
28405: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28406: LD_ADDR_VAR 0 7
28410: PUSH
28411: LD_VAR 0 5
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PPUSH
28420: LD_INT 1
28422: PPUSH
28423: CALL_OW 12
28427: PLUS
28428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28429: LD_VAR 0 6
28433: PPUSH
28434: LD_VAR 0 7
28438: PPUSH
28439: CALL_OW 488
28443: NOT
28444: IFFALSE 28466
// begin _x := x ;
28446: LD_ADDR_VAR 0 6
28450: PUSH
28451: LD_VAR 0 4
28455: ST_TO_ADDR
// _y := y ;
28456: LD_ADDR_VAR 0 7
28460: PUSH
28461: LD_VAR 0 5
28465: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28466: LD_ADDR_VAR 0 3
28470: PUSH
28471: LD_INT 1
28473: PPUSH
28474: LD_VAR 0 14
28478: PPUSH
28479: CALL_OW 12
28483: ST_TO_ADDR
// case i of 1 :
28484: LD_VAR 0 3
28488: PUSH
28489: LD_INT 1
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28514
28497: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28498: LD_VAR 0 1
28502: PPUSH
28503: LD_VAR 0 10
28507: PPUSH
28508: CALL_OW 115
28512: GO 28575
28514: LD_INT 2
28516: DOUBLE
28517: EQUAL
28518: IFTRUE 28522
28520: GO 28544
28522: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28523: LD_VAR 0 1
28527: PPUSH
28528: LD_VAR 0 6
28532: PPUSH
28533: LD_VAR 0 7
28537: PPUSH
28538: CALL_OW 153
28542: GO 28575
28544: LD_INT 3
28546: DOUBLE
28547: EQUAL
28548: IFTRUE 28552
28550: GO 28574
28552: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28553: LD_VAR 0 1
28557: PPUSH
28558: LD_VAR 0 6
28562: PPUSH
28563: LD_VAR 0 7
28567: PPUSH
28568: CALL_OW 154
28572: GO 28575
28574: POP
// end ;
28575: LD_VAR 0 2
28579: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28580: LD_INT 0
28582: PPUSH
28583: PPUSH
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
// if not unit or not building then
28588: LD_VAR 0 1
28592: NOT
28593: PUSH
28594: LD_VAR 0 2
28598: NOT
28599: OR
28600: IFFALSE 28604
// exit ;
28602: GO 28762
// x := GetX ( building ) ;
28604: LD_ADDR_VAR 0 5
28608: PUSH
28609: LD_VAR 0 2
28613: PPUSH
28614: CALL_OW 250
28618: ST_TO_ADDR
// y := GetY ( building ) ;
28619: LD_ADDR_VAR 0 6
28623: PUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: CALL_OW 251
28633: ST_TO_ADDR
// for i = 0 to 5 do
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: DOUBLE
28640: LD_INT 0
28642: DEC
28643: ST_TO_ADDR
28644: LD_INT 5
28646: PUSH
28647: FOR_TO
28648: IFFALSE 28760
// begin _x := ShiftX ( x , i , 3 ) ;
28650: LD_ADDR_VAR 0 7
28654: PUSH
28655: LD_VAR 0 5
28659: PPUSH
28660: LD_VAR 0 4
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: CALL_OW 272
28672: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28673: LD_ADDR_VAR 0 8
28677: PUSH
28678: LD_VAR 0 6
28682: PPUSH
28683: LD_VAR 0 4
28687: PPUSH
28688: LD_INT 3
28690: PPUSH
28691: CALL_OW 273
28695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28696: LD_VAR 0 7
28700: PPUSH
28701: LD_VAR 0 8
28705: PPUSH
28706: CALL_OW 488
28710: NOT
28711: IFFALSE 28715
// continue ;
28713: GO 28647
// if HexInfo ( _x , _y ) = 0 then
28715: LD_VAR 0 7
28719: PPUSH
28720: LD_VAR 0 8
28724: PPUSH
28725: CALL_OW 428
28729: PUSH
28730: LD_INT 0
28732: EQUAL
28733: IFFALSE 28758
// begin ComMoveXY ( unit , _x , _y ) ;
28735: LD_VAR 0 1
28739: PPUSH
28740: LD_VAR 0 7
28744: PPUSH
28745: LD_VAR 0 8
28749: PPUSH
28750: CALL_OW 111
// exit ;
28754: POP
28755: POP
28756: GO 28762
// end ; end ;
28758: GO 28647
28760: POP
28761: POP
// end ;
28762: LD_VAR 0 3
28766: RET
// export function ScanBase ( side , base_area ) ; begin
28767: LD_INT 0
28769: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_VAR 0 2
28779: PPUSH
28780: LD_INT 81
28782: PUSH
28783: LD_VAR 0 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: CALL_OW 70
28796: ST_TO_ADDR
// end ;
28797: LD_VAR 0 3
28801: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
// result := false ;
28808: LD_ADDR_VAR 0 2
28812: PUSH
28813: LD_INT 0
28815: ST_TO_ADDR
// side := GetSide ( unit ) ;
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 255
28830: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28831: LD_ADDR_VAR 0 4
28835: PUSH
28836: LD_VAR 0 1
28840: PPUSH
28841: CALL_OW 248
28845: ST_TO_ADDR
// case nat of 1 :
28846: LD_VAR 0 4
28850: PUSH
28851: LD_INT 1
28853: DOUBLE
28854: EQUAL
28855: IFTRUE 28859
28857: GO 28870
28859: POP
// tech := tech_lassight ; 2 :
28860: LD_ADDR_VAR 0 5
28864: PUSH
28865: LD_INT 12
28867: ST_TO_ADDR
28868: GO 28909
28870: LD_INT 2
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 28889
28878: POP
// tech := tech_mortar ; 3 :
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: LD_INT 41
28886: ST_TO_ADDR
28887: GO 28909
28889: LD_INT 3
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28908
28897: POP
// tech := tech_bazooka ; end ;
28898: LD_ADDR_VAR 0 5
28902: PUSH
28903: LD_INT 44
28905: ST_TO_ADDR
28906: GO 28909
28908: POP
// if Researched ( side , tech ) then
28909: LD_VAR 0 3
28913: PPUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: CALL_OW 325
28923: IFFALSE 28950
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: LD_INT 5
28932: PUSH
28933: LD_INT 8
28935: PUSH
28936: LD_INT 9
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: PUSH
28944: LD_VAR 0 4
28948: ARRAY
28949: ST_TO_ADDR
// end ;
28950: LD_VAR 0 2
28954: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
// if not mines then
28960: LD_VAR 0 2
28964: NOT
28965: IFFALSE 28969
// exit ;
28967: GO 29113
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28969: LD_ADDR_VAR 0 5
28973: PUSH
28974: LD_INT 81
28976: PUSH
28977: LD_VAR 0 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PPUSH
29007: CALL_OW 69
29011: ST_TO_ADDR
// for i in mines do
29012: LD_ADDR_VAR 0 4
29016: PUSH
29017: LD_VAR 0 2
29021: PUSH
29022: FOR_IN
29023: IFFALSE 29111
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29025: LD_VAR 0 4
29029: PUSH
29030: LD_INT 1
29032: ARRAY
29033: PPUSH
29034: LD_VAR 0 4
29038: PUSH
29039: LD_INT 2
29041: ARRAY
29042: PPUSH
29043: CALL_OW 458
29047: NOT
29048: IFFALSE 29052
// continue ;
29050: GO 29022
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29052: LD_VAR 0 4
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: PPUSH
29061: LD_VAR 0 4
29065: PUSH
29066: LD_INT 2
29068: ARRAY
29069: PPUSH
29070: CALL_OW 428
29074: PUSH
29075: LD_VAR 0 5
29079: IN
29080: IFFALSE 29109
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29082: LD_VAR 0 4
29086: PUSH
29087: LD_INT 1
29089: ARRAY
29090: PPUSH
29091: LD_VAR 0 4
29095: PUSH
29096: LD_INT 2
29098: ARRAY
29099: PPUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 456
// end ;
29109: GO 29022
29111: POP
29112: POP
// end ;
29113: LD_VAR 0 3
29117: RET
// export function Count ( array ) ; var i ; begin
29118: LD_INT 0
29120: PPUSH
29121: PPUSH
// result := 0 ;
29122: LD_ADDR_VAR 0 2
29126: PUSH
29127: LD_INT 0
29129: ST_TO_ADDR
// for i in array do
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_VAR 0 1
29139: PUSH
29140: FOR_IN
29141: IFFALSE 29165
// if i then
29143: LD_VAR 0 3
29147: IFFALSE 29163
// result := result + 1 ;
29149: LD_ADDR_VAR 0 2
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_INT 1
29161: PLUS
29162: ST_TO_ADDR
29163: GO 29140
29165: POP
29166: POP
// end ;
29167: LD_VAR 0 2
29171: RET
// export function IsEmpty ( building ) ; begin
29172: LD_INT 0
29174: PPUSH
// if not building then
29175: LD_VAR 0 1
29179: NOT
29180: IFFALSE 29184
// exit ;
29182: GO 29227
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29184: LD_ADDR_VAR 0 2
29188: PUSH
29189: LD_VAR 0 1
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL_OW 255
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 58
29213: PUSH
29214: EMPTY
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: IN
29226: ST_TO_ADDR
// end ;
29227: LD_VAR 0 2
29231: RET
// export function IsNotFull ( building ) ; begin
29232: LD_INT 0
29234: PPUSH
// if not building then
29235: LD_VAR 0 1
29239: NOT
29240: IFFALSE 29244
// exit ;
29242: GO 29263
// result := UnitsInside ( building ) < 6 ;
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 313
29258: PUSH
29259: LD_INT 6
29261: LESS
29262: ST_TO_ADDR
// end ;
29263: LD_VAR 0 2
29267: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29268: LD_INT 0
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
// tmp := [ ] ;
29274: LD_ADDR_VAR 0 3
29278: PUSH
29279: EMPTY
29280: ST_TO_ADDR
// list := [ ] ;
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: EMPTY
29287: ST_TO_ADDR
// for i = 16 to 25 do
29288: LD_ADDR_VAR 0 4
29292: PUSH
29293: DOUBLE
29294: LD_INT 16
29296: DEC
29297: ST_TO_ADDR
29298: LD_INT 25
29300: PUSH
29301: FOR_TO
29302: IFFALSE 29375
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_VAR 0 3
29313: PUSH
29314: LD_INT 22
29316: PUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 255
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 91
29333: PUSH
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 6
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 30
29349: PUSH
29350: LD_VAR 0 4
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: ADD
29372: ST_TO_ADDR
29373: GO 29301
29375: POP
29376: POP
// for i = 1 to tmp do
29377: LD_ADDR_VAR 0 4
29381: PUSH
29382: DOUBLE
29383: LD_INT 1
29385: DEC
29386: ST_TO_ADDR
29387: LD_VAR 0 3
29391: PUSH
29392: FOR_TO
29393: IFFALSE 29481
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29395: LD_ADDR_VAR 0 5
29399: PUSH
29400: LD_VAR 0 5
29404: PUSH
29405: LD_VAR 0 3
29409: PUSH
29410: LD_VAR 0 4
29414: ARRAY
29415: PPUSH
29416: CALL_OW 266
29420: PUSH
29421: LD_VAR 0 3
29425: PUSH
29426: LD_VAR 0 4
29430: ARRAY
29431: PPUSH
29432: CALL_OW 250
29436: PUSH
29437: LD_VAR 0 3
29441: PUSH
29442: LD_VAR 0 4
29446: ARRAY
29447: PPUSH
29448: CALL_OW 251
29452: PUSH
29453: LD_VAR 0 3
29457: PUSH
29458: LD_VAR 0 4
29462: ARRAY
29463: PPUSH
29464: CALL_OW 254
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: ADD
29478: ST_TO_ADDR
29479: GO 29392
29481: POP
29482: POP
// result := list ;
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: LD_VAR 0 5
29492: ST_TO_ADDR
// end ;
29493: LD_VAR 0 2
29497: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29498: LD_INT 0
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
// if not factory then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 30109
// if control = control_apeman then
29516: LD_VAR 0 4
29520: PUSH
29521: LD_INT 5
29523: EQUAL
29524: IFFALSE 29633
// begin tmp := UnitsInside ( factory ) ;
29526: LD_ADDR_VAR 0 8
29530: PUSH
29531: LD_VAR 0 1
29535: PPUSH
29536: CALL_OW 313
29540: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29541: LD_VAR 0 8
29545: PPUSH
29546: LD_INT 25
29548: PUSH
29549: LD_INT 12
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PPUSH
29556: CALL_OW 72
29560: NOT
29561: IFFALSE 29571
// control := control_manual ;
29563: LD_ADDR_VAR 0 4
29567: PUSH
29568: LD_INT 1
29570: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29571: LD_ADDR_VAR 0 8
29575: PUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL 29268 0 1
29585: ST_TO_ADDR
// if tmp then
29586: LD_VAR 0 8
29590: IFFALSE 29633
// begin for i in tmp do
29592: LD_ADDR_VAR 0 7
29596: PUSH
29597: LD_VAR 0 8
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29631
// if i [ 1 ] = b_ext_radio then
29605: LD_VAR 0 7
29609: PUSH
29610: LD_INT 1
29612: ARRAY
29613: PUSH
29614: LD_INT 22
29616: EQUAL
29617: IFFALSE 29629
// begin control := control_remote ;
29619: LD_ADDR_VAR 0 4
29623: PUSH
29624: LD_INT 2
29626: ST_TO_ADDR
// break ;
29627: GO 29631
// end ;
29629: GO 29602
29631: POP
29632: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29633: LD_VAR 0 1
29637: PPUSH
29638: LD_VAR 0 2
29642: PPUSH
29643: LD_VAR 0 3
29647: PPUSH
29648: LD_VAR 0 4
29652: PPUSH
29653: LD_VAR 0 5
29657: PPUSH
29658: CALL_OW 448
29662: IFFALSE 29697
// begin result := [ chassis , engine , control , weapon ] ;
29664: LD_ADDR_VAR 0 6
29668: PUSH
29669: LD_VAR 0 2
29673: PUSH
29674: LD_VAR 0 3
29678: PUSH
29679: LD_VAR 0 4
29683: PUSH
29684: LD_VAR 0 5
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// exit ;
29695: GO 30109
// end ; _chassis := AvailableChassisList ( factory ) ;
29697: LD_ADDR_VAR 0 9
29701: PUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 475
29711: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29712: LD_ADDR_VAR 0 11
29716: PUSH
29717: LD_VAR 0 1
29721: PPUSH
29722: CALL_OW 476
29726: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29727: LD_ADDR_VAR 0 12
29731: PUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 477
29741: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29742: LD_ADDR_VAR 0 10
29746: PUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 478
29756: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29757: LD_VAR 0 9
29761: NOT
29762: PUSH
29763: LD_VAR 0 11
29767: NOT
29768: OR
29769: PUSH
29770: LD_VAR 0 12
29774: NOT
29775: OR
29776: PUSH
29777: LD_VAR 0 10
29781: NOT
29782: OR
29783: IFFALSE 29818
// begin result := [ chassis , engine , control , weapon ] ;
29785: LD_ADDR_VAR 0 6
29789: PUSH
29790: LD_VAR 0 2
29794: PUSH
29795: LD_VAR 0 3
29799: PUSH
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 5
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// exit ;
29816: GO 30109
// end ; if not chassis in _chassis then
29818: LD_VAR 0 2
29822: PUSH
29823: LD_VAR 0 9
29827: IN
29828: NOT
29829: IFFALSE 29855
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 9
29840: PUSH
29841: LD_INT 1
29843: PPUSH
29844: LD_VAR 0 9
29848: PPUSH
29849: CALL_OW 12
29853: ARRAY
29854: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29855: LD_VAR 0 2
29859: PPUSH
29860: LD_VAR 0 3
29864: PPUSH
29865: CALL 30114 0 2
29869: NOT
29870: IFFALSE 29929
// repeat engine := _engine [ 1 ] ;
29872: LD_ADDR_VAR 0 3
29876: PUSH
29877: LD_VAR 0 11
29881: PUSH
29882: LD_INT 1
29884: ARRAY
29885: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29886: LD_ADDR_VAR 0 11
29890: PUSH
29891: LD_VAR 0 11
29895: PPUSH
29896: LD_INT 1
29898: PPUSH
29899: CALL_OW 3
29903: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29904: LD_VAR 0 2
29908: PPUSH
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL 30114 0 2
29918: PUSH
29919: LD_VAR 0 11
29923: PUSH
29924: EMPTY
29925: EQUAL
29926: OR
29927: IFFALSE 29872
// if not control in _control then
29929: LD_VAR 0 4
29933: PUSH
29934: LD_VAR 0 12
29938: IN
29939: NOT
29940: IFFALSE 29966
// control := _control [ rand ( 1 , _control ) ] ;
29942: LD_ADDR_VAR 0 4
29946: PUSH
29947: LD_VAR 0 12
29951: PUSH
29952: LD_INT 1
29954: PPUSH
29955: LD_VAR 0 12
29959: PPUSH
29960: CALL_OW 12
29964: ARRAY
29965: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29966: LD_VAR 0 2
29970: PPUSH
29971: LD_VAR 0 5
29975: PPUSH
29976: CALL 30334 0 2
29980: NOT
29981: IFFALSE 30040
// repeat weapon := _weapon [ 1 ] ;
29983: LD_ADDR_VAR 0 5
29987: PUSH
29988: LD_VAR 0 10
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29997: LD_ADDR_VAR 0 10
30001: PUSH
30002: LD_VAR 0 10
30006: PPUSH
30007: LD_INT 1
30009: PPUSH
30010: CALL_OW 3
30014: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30015: LD_VAR 0 2
30019: PPUSH
30020: LD_VAR 0 5
30024: PPUSH
30025: CALL 30334 0 2
30029: PUSH
30030: LD_VAR 0 10
30034: PUSH
30035: EMPTY
30036: EQUAL
30037: OR
30038: IFFALSE 29983
// result := [ ] ;
30040: LD_ADDR_VAR 0 6
30044: PUSH
30045: EMPTY
30046: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30047: LD_VAR 0 1
30051: PPUSH
30052: LD_VAR 0 2
30056: PPUSH
30057: LD_VAR 0 3
30061: PPUSH
30062: LD_VAR 0 4
30066: PPUSH
30067: LD_VAR 0 5
30071: PPUSH
30072: CALL_OW 448
30076: IFFALSE 30109
// result := [ chassis , engine , control , weapon ] ;
30078: LD_ADDR_VAR 0 6
30082: PUSH
30083: LD_VAR 0 2
30087: PUSH
30088: LD_VAR 0 3
30092: PUSH
30093: LD_VAR 0 4
30097: PUSH
30098: LD_VAR 0 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
// end ;
30109: LD_VAR 0 6
30113: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30114: LD_INT 0
30116: PPUSH
// if not chassis or not engine then
30117: LD_VAR 0 1
30121: NOT
30122: PUSH
30123: LD_VAR 0 2
30127: NOT
30128: OR
30129: IFFALSE 30133
// exit ;
30131: GO 30329
// case engine of engine_solar :
30133: LD_VAR 0 2
30137: PUSH
30138: LD_INT 2
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30184
30146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_INT 11
30154: PUSH
30155: LD_INT 12
30157: PUSH
30158: LD_INT 13
30160: PUSH
30161: LD_INT 14
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: ST_TO_ADDR
30182: GO 30313
30184: LD_INT 1
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30254
30192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_INT 11
30200: PUSH
30201: LD_INT 12
30203: PUSH
30204: LD_INT 13
30206: PUSH
30207: LD_INT 14
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: LD_INT 5
30224: PUSH
30225: LD_INT 21
30227: PUSH
30228: LD_INT 23
30230: PUSH
30231: LD_INT 22
30233: PUSH
30234: LD_INT 24
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
30252: GO 30313
30254: LD_INT 3
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30312
30262: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 13
30270: PUSH
30271: LD_INT 14
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: LD_INT 4
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: LD_INT 21
30288: PUSH
30289: LD_INT 22
30291: PUSH
30292: LD_INT 23
30294: PUSH
30295: LD_INT 24
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: ST_TO_ADDR
30310: GO 30313
30312: POP
// result := ( chassis in result ) ;
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_VAR 0 1
30322: PUSH
30323: LD_VAR 0 3
30327: IN
30328: ST_TO_ADDR
// end ;
30329: LD_VAR 0 3
30333: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30334: LD_INT 0
30336: PPUSH
// if not chassis or not weapon then
30337: LD_VAR 0 1
30341: NOT
30342: PUSH
30343: LD_VAR 0 2
30347: NOT
30348: OR
30349: IFFALSE 30353
// exit ;
30351: GO 31415
// case weapon of us_machine_gun :
30353: LD_VAR 0 2
30357: PUSH
30358: LD_INT 2
30360: DOUBLE
30361: EQUAL
30362: IFTRUE 30366
30364: GO 30396
30366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30367: LD_ADDR_VAR 0 3
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 4
30383: PUSH
30384: LD_INT 5
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
30394: GO 31399
30396: LD_INT 3
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30434
30404: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 2
30415: PUSH
30416: LD_INT 3
30418: PUSH
30419: LD_INT 4
30421: PUSH
30422: LD_INT 5
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
30432: GO 31399
30434: LD_INT 11
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 30472
30442: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 4
30459: PUSH
30460: LD_INT 5
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: ST_TO_ADDR
30470: GO 31399
30472: LD_INT 4
30474: DOUBLE
30475: EQUAL
30476: IFTRUE 30480
30478: GO 30506
30480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30481: LD_ADDR_VAR 0 3
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 4
30494: PUSH
30495: LD_INT 5
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
30504: GO 31399
30506: LD_INT 5
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30540
30514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30515: LD_ADDR_VAR 0 3
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 4
30528: PUSH
30529: LD_INT 5
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: ST_TO_ADDR
30538: GO 31399
30540: LD_INT 9
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30574
30548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 4
30562: PUSH
30563: LD_INT 5
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
30572: GO 31399
30574: LD_INT 7
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30608
30582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: LD_INT 5
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 31399
30608: LD_INT 12
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30642
30616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 4
30630: PUSH
30631: LD_INT 5
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
30640: GO 31399
30642: LD_INT 13
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30676
30650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: LD_INT 4
30664: PUSH
30665: LD_INT 5
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31399
30676: LD_INT 14
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30702
30684: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: ST_TO_ADDR
30700: GO 31399
30702: LD_INT 6
30704: DOUBLE
30705: EQUAL
30706: IFTRUE 30710
30708: GO 30728
30710: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_INT 4
30718: PUSH
30719: LD_INT 5
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: ST_TO_ADDR
30726: GO 31399
30728: LD_INT 10
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30754
30736: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 4
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: ST_TO_ADDR
30752: GO 31399
30754: LD_INT 22
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30788
30762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_INT 11
30770: PUSH
30771: LD_INT 12
30773: PUSH
30774: LD_INT 13
30776: PUSH
30777: LD_INT 14
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
30786: GO 31399
30788: LD_INT 23
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30822
30796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: LD_INT 11
30804: PUSH
30805: LD_INT 12
30807: PUSH
30808: LD_INT 13
30810: PUSH
30811: LD_INT 14
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: ST_TO_ADDR
30820: GO 31399
30822: LD_INT 24
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 30856
30830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30831: LD_ADDR_VAR 0 3
30835: PUSH
30836: LD_INT 11
30838: PUSH
30839: LD_INT 12
30841: PUSH
30842: LD_INT 13
30844: PUSH
30845: LD_INT 14
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
30854: GO 31399
30856: LD_INT 30
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30890
30864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30865: LD_ADDR_VAR 0 3
30869: PUSH
30870: LD_INT 11
30872: PUSH
30873: LD_INT 12
30875: PUSH
30876: LD_INT 13
30878: PUSH
30879: LD_INT 14
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
30888: GO 31399
30890: LD_INT 25
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30916
30898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30899: LD_ADDR_VAR 0 3
30903: PUSH
30904: LD_INT 13
30906: PUSH
30907: LD_INT 14
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: ST_TO_ADDR
30914: GO 31399
30916: LD_INT 27
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30942
30924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30925: LD_ADDR_VAR 0 3
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: LD_INT 14
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: ST_TO_ADDR
30940: GO 31399
30942: LD_EXP 115
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30978
30952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_INT 11
30960: PUSH
30961: LD_INT 12
30963: PUSH
30964: LD_INT 13
30966: PUSH
30967: LD_INT 14
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31399
30978: LD_INT 28
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31004
30986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 13
30994: PUSH
30995: LD_INT 14
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31399
31004: LD_INT 29
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31030
31012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 13
31020: PUSH
31021: LD_INT 14
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: ST_TO_ADDR
31028: GO 31399
31030: LD_INT 31
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31056
31038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_INT 13
31046: PUSH
31047: LD_INT 14
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: ST_TO_ADDR
31054: GO 31399
31056: LD_INT 26
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31082
31064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31065: LD_ADDR_VAR 0 3
31069: PUSH
31070: LD_INT 13
31072: PUSH
31073: LD_INT 14
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: ST_TO_ADDR
31080: GO 31399
31082: LD_INT 42
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31116
31090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_INT 21
31098: PUSH
31099: LD_INT 22
31101: PUSH
31102: LD_INT 23
31104: PUSH
31105: LD_INT 24
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
31114: GO 31399
31116: LD_INT 43
31118: DOUBLE
31119: EQUAL
31120: IFTRUE 31124
31122: GO 31150
31124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31125: LD_ADDR_VAR 0 3
31129: PUSH
31130: LD_INT 21
31132: PUSH
31133: LD_INT 22
31135: PUSH
31136: LD_INT 23
31138: PUSH
31139: LD_INT 24
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
31148: GO 31399
31150: LD_INT 44
31152: DOUBLE
31153: EQUAL
31154: IFTRUE 31158
31156: GO 31184
31158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31159: LD_ADDR_VAR 0 3
31163: PUSH
31164: LD_INT 21
31166: PUSH
31167: LD_INT 22
31169: PUSH
31170: LD_INT 23
31172: PUSH
31173: LD_INT 24
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
31182: GO 31399
31184: LD_INT 45
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31218
31192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_INT 21
31200: PUSH
31201: LD_INT 22
31203: PUSH
31204: LD_INT 23
31206: PUSH
31207: LD_INT 24
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
31216: GO 31399
31218: LD_INT 49
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31252
31226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_INT 21
31234: PUSH
31235: LD_INT 22
31237: PUSH
31238: LD_INT 23
31240: PUSH
31241: LD_INT 24
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
31250: GO 31399
31252: LD_INT 51
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31286
31260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31261: LD_ADDR_VAR 0 3
31265: PUSH
31266: LD_INT 21
31268: PUSH
31269: LD_INT 22
31271: PUSH
31272: LD_INT 23
31274: PUSH
31275: LD_INT 24
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
31284: GO 31399
31286: LD_INT 52
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31320
31294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31295: LD_ADDR_VAR 0 3
31299: PUSH
31300: LD_INT 21
31302: PUSH
31303: LD_INT 22
31305: PUSH
31306: LD_INT 23
31308: PUSH
31309: LD_INT 24
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 31399
31320: LD_INT 53
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31346
31328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 23
31336: PUSH
31337: LD_INT 24
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31399
31346: LD_INT 46
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31372
31354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 24
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: ST_TO_ADDR
31370: GO 31399
31372: LD_INT 47
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 31398
31380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31381: LD_ADDR_VAR 0 3
31385: PUSH
31386: LD_INT 23
31388: PUSH
31389: LD_INT 24
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: ST_TO_ADDR
31396: GO 31399
31398: POP
// result := ( chassis in result ) ;
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: LD_VAR 0 1
31408: PUSH
31409: LD_VAR 0 3
31413: IN
31414: ST_TO_ADDR
// end ;
31415: LD_VAR 0 3
31419: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31420: LD_INT 0
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
// result := array ;
31429: LD_ADDR_VAR 0 5
31433: PUSH
31434: LD_VAR 0 1
31438: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31439: LD_VAR 0 1
31443: NOT
31444: PUSH
31445: LD_VAR 0 2
31449: NOT
31450: OR
31451: PUSH
31452: LD_VAR 0 3
31456: NOT
31457: OR
31458: PUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_VAR 0 1
31468: GREATER
31469: OR
31470: PUSH
31471: LD_VAR 0 3
31475: PUSH
31476: LD_VAR 0 1
31480: GREATER
31481: OR
31482: IFFALSE 31486
// exit ;
31484: GO 31782
// if direction then
31486: LD_VAR 0 4
31490: IFFALSE 31554
// begin d := 1 ;
31492: LD_ADDR_VAR 0 9
31496: PUSH
31497: LD_INT 1
31499: ST_TO_ADDR
// if i_from > i_to then
31500: LD_VAR 0 2
31504: PUSH
31505: LD_VAR 0 3
31509: GREATER
31510: IFFALSE 31536
// length := ( array - i_from ) + i_to else
31512: LD_ADDR_VAR 0 11
31516: PUSH
31517: LD_VAR 0 1
31521: PUSH
31522: LD_VAR 0 2
31526: MINUS
31527: PUSH
31528: LD_VAR 0 3
31532: PLUS
31533: ST_TO_ADDR
31534: GO 31552
// length := i_to - i_from ;
31536: LD_ADDR_VAR 0 11
31540: PUSH
31541: LD_VAR 0 3
31545: PUSH
31546: LD_VAR 0 2
31550: MINUS
31551: ST_TO_ADDR
// end else
31552: GO 31615
// begin d := - 1 ;
31554: LD_ADDR_VAR 0 9
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: ST_TO_ADDR
// if i_from > i_to then
31563: LD_VAR 0 2
31567: PUSH
31568: LD_VAR 0 3
31572: GREATER
31573: IFFALSE 31593
// length := i_from - i_to else
31575: LD_ADDR_VAR 0 11
31579: PUSH
31580: LD_VAR 0 2
31584: PUSH
31585: LD_VAR 0 3
31589: MINUS
31590: ST_TO_ADDR
31591: GO 31615
// length := ( array - i_to ) + i_from ;
31593: LD_ADDR_VAR 0 11
31597: PUSH
31598: LD_VAR 0 1
31602: PUSH
31603: LD_VAR 0 3
31607: MINUS
31608: PUSH
31609: LD_VAR 0 2
31613: PLUS
31614: ST_TO_ADDR
// end ; if not length then
31615: LD_VAR 0 11
31619: NOT
31620: IFFALSE 31624
// exit ;
31622: GO 31782
// tmp := array ;
31624: LD_ADDR_VAR 0 10
31628: PUSH
31629: LD_VAR 0 1
31633: ST_TO_ADDR
// for i = 1 to length do
31634: LD_ADDR_VAR 0 6
31638: PUSH
31639: DOUBLE
31640: LD_INT 1
31642: DEC
31643: ST_TO_ADDR
31644: LD_VAR 0 11
31648: PUSH
31649: FOR_TO
31650: IFFALSE 31770
// begin for j = 1 to array do
31652: LD_ADDR_VAR 0 7
31656: PUSH
31657: DOUBLE
31658: LD_INT 1
31660: DEC
31661: ST_TO_ADDR
31662: LD_VAR 0 1
31666: PUSH
31667: FOR_TO
31668: IFFALSE 31756
// begin k := j + d ;
31670: LD_ADDR_VAR 0 8
31674: PUSH
31675: LD_VAR 0 7
31679: PUSH
31680: LD_VAR 0 9
31684: PLUS
31685: ST_TO_ADDR
// if k > array then
31686: LD_VAR 0 8
31690: PUSH
31691: LD_VAR 0 1
31695: GREATER
31696: IFFALSE 31706
// k := 1 ;
31698: LD_ADDR_VAR 0 8
31702: PUSH
31703: LD_INT 1
31705: ST_TO_ADDR
// if not k then
31706: LD_VAR 0 8
31710: NOT
31711: IFFALSE 31723
// k := array ;
31713: LD_ADDR_VAR 0 8
31717: PUSH
31718: LD_VAR 0 1
31722: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31723: LD_ADDR_VAR 0 10
31727: PUSH
31728: LD_VAR 0 10
31732: PPUSH
31733: LD_VAR 0 8
31737: PPUSH
31738: LD_VAR 0 1
31742: PUSH
31743: LD_VAR 0 7
31747: ARRAY
31748: PPUSH
31749: CALL_OW 1
31753: ST_TO_ADDR
// end ;
31754: GO 31667
31756: POP
31757: POP
// array := tmp ;
31758: LD_ADDR_VAR 0 1
31762: PUSH
31763: LD_VAR 0 10
31767: ST_TO_ADDR
// end ;
31768: GO 31649
31770: POP
31771: POP
// result := array ;
31772: LD_ADDR_VAR 0 5
31776: PUSH
31777: LD_VAR 0 1
31781: ST_TO_ADDR
// end ;
31782: LD_VAR 0 5
31786: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31787: LD_INT 0
31789: PPUSH
31790: PPUSH
// result := 0 ;
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// if not array or not value in array then
31799: LD_VAR 0 1
31803: NOT
31804: PUSH
31805: LD_VAR 0 2
31809: PUSH
31810: LD_VAR 0 1
31814: IN
31815: NOT
31816: OR
31817: IFFALSE 31821
// exit ;
31819: GO 31875
// for i = 1 to array do
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: DOUBLE
31827: LD_INT 1
31829: DEC
31830: ST_TO_ADDR
31831: LD_VAR 0 1
31835: PUSH
31836: FOR_TO
31837: IFFALSE 31873
// if value = array [ i ] then
31839: LD_VAR 0 2
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: LD_VAR 0 4
31853: ARRAY
31854: EQUAL
31855: IFFALSE 31871
// begin result := i ;
31857: LD_ADDR_VAR 0 3
31861: PUSH
31862: LD_VAR 0 4
31866: ST_TO_ADDR
// exit ;
31867: POP
31868: POP
31869: GO 31875
// end ;
31871: GO 31836
31873: POP
31874: POP
// end ;
31875: LD_VAR 0 3
31879: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31880: LD_INT 0
31882: PPUSH
// vc_chassis := chassis ;
31883: LD_ADDR_OWVAR 37
31887: PUSH
31888: LD_VAR 0 1
31892: ST_TO_ADDR
// vc_engine := engine ;
31893: LD_ADDR_OWVAR 39
31897: PUSH
31898: LD_VAR 0 2
31902: ST_TO_ADDR
// vc_control := control ;
31903: LD_ADDR_OWVAR 38
31907: PUSH
31908: LD_VAR 0 3
31912: ST_TO_ADDR
// vc_weapon := weapon ;
31913: LD_ADDR_OWVAR 40
31917: PUSH
31918: LD_VAR 0 4
31922: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31923: LD_ADDR_OWVAR 41
31927: PUSH
31928: LD_VAR 0 5
31932: ST_TO_ADDR
// end ;
31933: LD_VAR 0 6
31937: RET
// export function WantPlant ( unit ) ; var task ; begin
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
// result := false ;
31942: LD_ADDR_VAR 0 2
31946: PUSH
31947: LD_INT 0
31949: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31950: LD_ADDR_VAR 0 3
31954: PUSH
31955: LD_VAR 0 1
31959: PPUSH
31960: CALL_OW 437
31964: ST_TO_ADDR
// if task then
31965: LD_VAR 0 3
31969: IFFALSE 31997
// if task [ 1 ] [ 1 ] = p then
31971: LD_VAR 0 3
31975: PUSH
31976: LD_INT 1
31978: ARRAY
31979: PUSH
31980: LD_INT 1
31982: ARRAY
31983: PUSH
31984: LD_STRING p
31986: EQUAL
31987: IFFALSE 31997
// result := true ;
31989: LD_ADDR_VAR 0 2
31993: PUSH
31994: LD_INT 1
31996: ST_TO_ADDR
// end ;
31997: LD_VAR 0 2
32001: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32002: LD_INT 0
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
// if pos < 1 then
32008: LD_VAR 0 2
32012: PUSH
32013: LD_INT 1
32015: LESS
32016: IFFALSE 32020
// exit ;
32018: GO 32323
// if pos = 1 then
32020: LD_VAR 0 2
32024: PUSH
32025: LD_INT 1
32027: EQUAL
32028: IFFALSE 32061
// result := Replace ( arr , pos [ 1 ] , value ) else
32030: LD_ADDR_VAR 0 4
32034: PUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: LD_VAR 0 2
32044: PUSH
32045: LD_INT 1
32047: ARRAY
32048: PPUSH
32049: LD_VAR 0 3
32053: PPUSH
32054: CALL_OW 1
32058: ST_TO_ADDR
32059: GO 32323
// begin tmp := arr ;
32061: LD_ADDR_VAR 0 6
32065: PUSH
32066: LD_VAR 0 1
32070: ST_TO_ADDR
// s_arr := [ tmp ] ;
32071: LD_ADDR_VAR 0 7
32075: PUSH
32076: LD_VAR 0 6
32080: PUSH
32081: EMPTY
32082: LIST
32083: ST_TO_ADDR
// for i = 1 to pos - 1 do
32084: LD_ADDR_VAR 0 5
32088: PUSH
32089: DOUBLE
32090: LD_INT 1
32092: DEC
32093: ST_TO_ADDR
32094: LD_VAR 0 2
32098: PUSH
32099: LD_INT 1
32101: MINUS
32102: PUSH
32103: FOR_TO
32104: IFFALSE 32149
// begin tmp := tmp [ pos [ i ] ] ;
32106: LD_ADDR_VAR 0 6
32110: PUSH
32111: LD_VAR 0 6
32115: PUSH
32116: LD_VAR 0 2
32120: PUSH
32121: LD_VAR 0 5
32125: ARRAY
32126: ARRAY
32127: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32128: LD_ADDR_VAR 0 7
32132: PUSH
32133: LD_VAR 0 7
32137: PUSH
32138: LD_VAR 0 6
32142: PUSH
32143: EMPTY
32144: LIST
32145: ADD
32146: ST_TO_ADDR
// end ;
32147: GO 32103
32149: POP
32150: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32151: LD_ADDR_VAR 0 6
32155: PUSH
32156: LD_VAR 0 6
32160: PPUSH
32161: LD_VAR 0 2
32165: PUSH
32166: LD_VAR 0 2
32170: ARRAY
32171: PPUSH
32172: LD_VAR 0 3
32176: PPUSH
32177: CALL_OW 1
32181: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32182: LD_ADDR_VAR 0 7
32186: PUSH
32187: LD_VAR 0 7
32191: PPUSH
32192: LD_VAR 0 7
32196: PPUSH
32197: LD_VAR 0 6
32201: PPUSH
32202: CALL_OW 1
32206: ST_TO_ADDR
// for i = s_arr downto 2 do
32207: LD_ADDR_VAR 0 5
32211: PUSH
32212: DOUBLE
32213: LD_VAR 0 7
32217: INC
32218: ST_TO_ADDR
32219: LD_INT 2
32221: PUSH
32222: FOR_DOWNTO
32223: IFFALSE 32307
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32225: LD_ADDR_VAR 0 6
32229: PUSH
32230: LD_VAR 0 7
32234: PUSH
32235: LD_VAR 0 5
32239: PUSH
32240: LD_INT 1
32242: MINUS
32243: ARRAY
32244: PPUSH
32245: LD_VAR 0 2
32249: PUSH
32250: LD_VAR 0 5
32254: PUSH
32255: LD_INT 1
32257: MINUS
32258: ARRAY
32259: PPUSH
32260: LD_VAR 0 7
32264: PUSH
32265: LD_VAR 0 5
32269: ARRAY
32270: PPUSH
32271: CALL_OW 1
32275: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32276: LD_ADDR_VAR 0 7
32280: PUSH
32281: LD_VAR 0 7
32285: PPUSH
32286: LD_VAR 0 5
32290: PUSH
32291: LD_INT 1
32293: MINUS
32294: PPUSH
32295: LD_VAR 0 6
32299: PPUSH
32300: CALL_OW 1
32304: ST_TO_ADDR
// end ;
32305: GO 32222
32307: POP
32308: POP
// result := s_arr [ 1 ] ;
32309: LD_ADDR_VAR 0 4
32313: PUSH
32314: LD_VAR 0 7
32318: PUSH
32319: LD_INT 1
32321: ARRAY
32322: ST_TO_ADDR
// end ; end ;
32323: LD_VAR 0 4
32327: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32328: LD_INT 0
32330: PPUSH
32331: PPUSH
// if not list then
32332: LD_VAR 0 1
32336: NOT
32337: IFFALSE 32341
// exit ;
32339: GO 32432
// i := list [ pos1 ] ;
32341: LD_ADDR_VAR 0 5
32345: PUSH
32346: LD_VAR 0 1
32350: PUSH
32351: LD_VAR 0 2
32355: ARRAY
32356: ST_TO_ADDR
// if not i then
32357: LD_VAR 0 5
32361: NOT
32362: IFFALSE 32366
// exit ;
32364: GO 32432
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32366: LD_ADDR_VAR 0 1
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: LD_VAR 0 2
32380: PPUSH
32381: LD_VAR 0 1
32385: PUSH
32386: LD_VAR 0 3
32390: ARRAY
32391: PPUSH
32392: CALL_OW 1
32396: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32397: LD_ADDR_VAR 0 1
32401: PUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_VAR 0 5
32416: PPUSH
32417: CALL_OW 1
32421: ST_TO_ADDR
// result := list ;
32422: LD_ADDR_VAR 0 4
32426: PUSH
32427: LD_VAR 0 1
32431: ST_TO_ADDR
// end ;
32432: LD_VAR 0 4
32436: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32437: LD_INT 0
32439: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32440: LD_ADDR_VAR 0 5
32444: PUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 250
32454: PPUSH
32455: LD_VAR 0 1
32459: PPUSH
32460: CALL_OW 251
32464: PPUSH
32465: LD_VAR 0 2
32469: PPUSH
32470: LD_VAR 0 3
32474: PPUSH
32475: LD_VAR 0 4
32479: PPUSH
32480: CALL 32490 0 5
32484: ST_TO_ADDR
// end ;
32485: LD_VAR 0 5
32489: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
// if not list then
32496: LD_VAR 0 3
32500: NOT
32501: IFFALSE 32505
// exit ;
32503: GO 32893
// result := [ ] ;
32505: LD_ADDR_VAR 0 6
32509: PUSH
32510: EMPTY
32511: ST_TO_ADDR
// for i in list do
32512: LD_ADDR_VAR 0 7
32516: PUSH
32517: LD_VAR 0 3
32521: PUSH
32522: FOR_IN
32523: IFFALSE 32725
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32525: LD_ADDR_VAR 0 9
32529: PUSH
32530: LD_VAR 0 7
32534: PPUSH
32535: LD_VAR 0 1
32539: PPUSH
32540: LD_VAR 0 2
32544: PPUSH
32545: CALL_OW 297
32549: ST_TO_ADDR
// if not result then
32550: LD_VAR 0 6
32554: NOT
32555: IFFALSE 32581
// result := [ [ i , tmp ] ] else
32557: LD_ADDR_VAR 0 6
32561: PUSH
32562: LD_VAR 0 7
32566: PUSH
32567: LD_VAR 0 9
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: ST_TO_ADDR
32579: GO 32723
// begin if result [ result ] [ 2 ] < tmp then
32581: LD_VAR 0 6
32585: PUSH
32586: LD_VAR 0 6
32590: ARRAY
32591: PUSH
32592: LD_INT 2
32594: ARRAY
32595: PUSH
32596: LD_VAR 0 9
32600: LESS
32601: IFFALSE 32643
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32603: LD_ADDR_VAR 0 6
32607: PUSH
32608: LD_VAR 0 6
32612: PPUSH
32613: LD_VAR 0 6
32617: PUSH
32618: LD_INT 1
32620: PLUS
32621: PPUSH
32622: LD_VAR 0 7
32626: PUSH
32627: LD_VAR 0 9
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PPUSH
32636: CALL_OW 2
32640: ST_TO_ADDR
32641: GO 32723
// for j = 1 to result do
32643: LD_ADDR_VAR 0 8
32647: PUSH
32648: DOUBLE
32649: LD_INT 1
32651: DEC
32652: ST_TO_ADDR
32653: LD_VAR 0 6
32657: PUSH
32658: FOR_TO
32659: IFFALSE 32721
// begin if tmp < result [ j ] [ 2 ] then
32661: LD_VAR 0 9
32665: PUSH
32666: LD_VAR 0 6
32670: PUSH
32671: LD_VAR 0 8
32675: ARRAY
32676: PUSH
32677: LD_INT 2
32679: ARRAY
32680: LESS
32681: IFFALSE 32719
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32683: LD_ADDR_VAR 0 6
32687: PUSH
32688: LD_VAR 0 6
32692: PPUSH
32693: LD_VAR 0 8
32697: PPUSH
32698: LD_VAR 0 7
32702: PUSH
32703: LD_VAR 0 9
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 2
32716: ST_TO_ADDR
// break ;
32717: GO 32721
// end ; end ;
32719: GO 32658
32721: POP
32722: POP
// end ; end ;
32723: GO 32522
32725: POP
32726: POP
// if result and not asc then
32727: LD_VAR 0 6
32731: PUSH
32732: LD_VAR 0 4
32736: NOT
32737: AND
32738: IFFALSE 32813
// begin tmp := result ;
32740: LD_ADDR_VAR 0 9
32744: PUSH
32745: LD_VAR 0 6
32749: ST_TO_ADDR
// for i = tmp downto 1 do
32750: LD_ADDR_VAR 0 7
32754: PUSH
32755: DOUBLE
32756: LD_VAR 0 9
32760: INC
32761: ST_TO_ADDR
32762: LD_INT 1
32764: PUSH
32765: FOR_DOWNTO
32766: IFFALSE 32811
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32768: LD_ADDR_VAR 0 6
32772: PUSH
32773: LD_VAR 0 6
32777: PPUSH
32778: LD_VAR 0 9
32782: PUSH
32783: LD_VAR 0 7
32787: MINUS
32788: PUSH
32789: LD_INT 1
32791: PLUS
32792: PPUSH
32793: LD_VAR 0 9
32797: PUSH
32798: LD_VAR 0 7
32802: ARRAY
32803: PPUSH
32804: CALL_OW 1
32808: ST_TO_ADDR
32809: GO 32765
32811: POP
32812: POP
// end ; tmp := [ ] ;
32813: LD_ADDR_VAR 0 9
32817: PUSH
32818: EMPTY
32819: ST_TO_ADDR
// if mode then
32820: LD_VAR 0 5
32824: IFFALSE 32893
// begin for i = 1 to result do
32826: LD_ADDR_VAR 0 7
32830: PUSH
32831: DOUBLE
32832: LD_INT 1
32834: DEC
32835: ST_TO_ADDR
32836: LD_VAR 0 6
32840: PUSH
32841: FOR_TO
32842: IFFALSE 32881
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32844: LD_ADDR_VAR 0 9
32848: PUSH
32849: LD_VAR 0 9
32853: PPUSH
32854: LD_VAR 0 7
32858: PPUSH
32859: LD_VAR 0 6
32863: PUSH
32864: LD_VAR 0 7
32868: ARRAY
32869: PUSH
32870: LD_INT 1
32872: ARRAY
32873: PPUSH
32874: CALL_OW 1
32878: ST_TO_ADDR
32879: GO 32841
32881: POP
32882: POP
// result := tmp ;
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: LD_VAR 0 9
32892: ST_TO_ADDR
// end ; end ;
32893: LD_VAR 0 6
32897: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32906: LD_ADDR_VAR 0 5
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: ST_TO_ADDR
// if not x or not y then
32928: LD_VAR 0 2
32932: NOT
32933: PUSH
32934: LD_VAR 0 3
32938: NOT
32939: OR
32940: IFFALSE 32944
// exit ;
32942: GO 34596
// if not range then
32944: LD_VAR 0 4
32948: NOT
32949: IFFALSE 32959
// range := 10 ;
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: LD_INT 10
32958: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32959: LD_ADDR_VAR 0 8
32963: PUSH
32964: LD_INT 81
32966: PUSH
32967: LD_VAR 0 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 92
32978: PUSH
32979: LD_VAR 0 2
32983: PUSH
32984: LD_VAR 0 3
32988: PUSH
32989: LD_VAR 0 4
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: LD_INT 21
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL_OW 69
33026: ST_TO_ADDR
// if not tmp then
33027: LD_VAR 0 8
33031: NOT
33032: IFFALSE 33036
// exit ;
33034: GO 34596
// for i in tmp do
33036: LD_ADDR_VAR 0 6
33040: PUSH
33041: LD_VAR 0 8
33045: PUSH
33046: FOR_IN
33047: IFFALSE 34571
// begin points := [ 0 , 0 , 0 ] ;
33049: LD_ADDR_VAR 0 9
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// bpoints := 1 ;
33068: LD_ADDR_VAR 0 10
33072: PUSH
33073: LD_INT 1
33075: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33076: LD_VAR 0 6
33080: PPUSH
33081: CALL_OW 247
33085: PUSH
33086: LD_INT 1
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33672
33094: POP
// begin if GetClass ( i ) = 1 then
33095: LD_VAR 0 6
33099: PPUSH
33100: CALL_OW 257
33104: PUSH
33105: LD_INT 1
33107: EQUAL
33108: IFFALSE 33129
// points := [ 10 , 5 , 3 ] ;
33110: LD_ADDR_VAR 0 9
33114: PUSH
33115: LD_INT 10
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33129: LD_VAR 0 6
33133: PPUSH
33134: CALL_OW 257
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: LD_INT 4
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: IN
33153: IFFALSE 33174
// points := [ 3 , 2 , 1 ] ;
33155: LD_ADDR_VAR 0 9
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33174: LD_VAR 0 6
33178: PPUSH
33179: CALL_OW 257
33183: PUSH
33184: LD_INT 5
33186: EQUAL
33187: IFFALSE 33208
// points := [ 130 , 5 , 2 ] ;
33189: LD_ADDR_VAR 0 9
33193: PUSH
33194: LD_INT 130
33196: PUSH
33197: LD_INT 5
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33208: LD_VAR 0 6
33212: PPUSH
33213: CALL_OW 257
33217: PUSH
33218: LD_INT 8
33220: EQUAL
33221: IFFALSE 33242
// points := [ 35 , 35 , 30 ] ;
33223: LD_ADDR_VAR 0 9
33227: PUSH
33228: LD_INT 35
33230: PUSH
33231: LD_INT 35
33233: PUSH
33234: LD_INT 30
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33242: LD_VAR 0 6
33246: PPUSH
33247: CALL_OW 257
33251: PUSH
33252: LD_INT 9
33254: EQUAL
33255: IFFALSE 33276
// points := [ 20 , 55 , 40 ] ;
33257: LD_ADDR_VAR 0 9
33261: PUSH
33262: LD_INT 20
33264: PUSH
33265: LD_INT 55
33267: PUSH
33268: LD_INT 40
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33276: LD_VAR 0 6
33280: PPUSH
33281: CALL_OW 257
33285: PUSH
33286: LD_INT 12
33288: PUSH
33289: LD_INT 16
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: IN
33296: IFFALSE 33317
// points := [ 5 , 3 , 2 ] ;
33298: LD_ADDR_VAR 0 9
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: LD_INT 3
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33317: LD_VAR 0 6
33321: PPUSH
33322: CALL_OW 257
33326: PUSH
33327: LD_INT 17
33329: EQUAL
33330: IFFALSE 33351
// points := [ 100 , 50 , 75 ] ;
33332: LD_ADDR_VAR 0 9
33336: PUSH
33337: LD_INT 100
33339: PUSH
33340: LD_INT 50
33342: PUSH
33343: LD_INT 75
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33351: LD_VAR 0 6
33355: PPUSH
33356: CALL_OW 257
33360: PUSH
33361: LD_INT 15
33363: EQUAL
33364: IFFALSE 33385
// points := [ 10 , 5 , 3 ] ;
33366: LD_ADDR_VAR 0 9
33370: PUSH
33371: LD_INT 10
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33385: LD_VAR 0 6
33389: PPUSH
33390: CALL_OW 257
33394: PUSH
33395: LD_INT 14
33397: EQUAL
33398: IFFALSE 33419
// points := [ 10 , 0 , 0 ] ;
33400: LD_ADDR_VAR 0 9
33404: PUSH
33405: LD_INT 10
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33419: LD_VAR 0 6
33423: PPUSH
33424: CALL_OW 257
33428: PUSH
33429: LD_INT 11
33431: EQUAL
33432: IFFALSE 33453
// points := [ 30 , 10 , 5 ] ;
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_INT 10
33444: PUSH
33445: LD_INT 5
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33453: LD_VAR 0 1
33457: PPUSH
33458: LD_INT 5
33460: PPUSH
33461: CALL_OW 321
33465: PUSH
33466: LD_INT 2
33468: EQUAL
33469: IFFALSE 33486
// bpoints := bpoints * 1.8 ;
33471: LD_ADDR_VAR 0 10
33475: PUSH
33476: LD_VAR 0 10
33480: PUSH
33481: LD_REAL  1.80000000000000E+0000
33484: MUL
33485: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33486: LD_VAR 0 6
33490: PPUSH
33491: CALL_OW 257
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: IN
33514: PUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: LD_INT 51
33522: PPUSH
33523: CALL_OW 321
33527: PUSH
33528: LD_INT 2
33530: EQUAL
33531: AND
33532: IFFALSE 33549
// bpoints := bpoints * 1.2 ;
33534: LD_ADDR_VAR 0 10
33538: PUSH
33539: LD_VAR 0 10
33543: PUSH
33544: LD_REAL  1.20000000000000E+0000
33547: MUL
33548: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33549: LD_VAR 0 6
33553: PPUSH
33554: CALL_OW 257
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: LD_INT 7
33564: PUSH
33565: LD_INT 9
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: IN
33573: PUSH
33574: LD_VAR 0 1
33578: PPUSH
33579: LD_INT 52
33581: PPUSH
33582: CALL_OW 321
33586: PUSH
33587: LD_INT 2
33589: EQUAL
33590: AND
33591: IFFALSE 33608
// bpoints := bpoints * 1.5 ;
33593: LD_ADDR_VAR 0 10
33597: PUSH
33598: LD_VAR 0 10
33602: PUSH
33603: LD_REAL  1.50000000000000E+0000
33606: MUL
33607: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33608: LD_VAR 0 1
33612: PPUSH
33613: LD_INT 66
33615: PPUSH
33616: CALL_OW 321
33620: PUSH
33621: LD_INT 2
33623: EQUAL
33624: IFFALSE 33641
// bpoints := bpoints * 1.1 ;
33626: LD_ADDR_VAR 0 10
33630: PUSH
33631: LD_VAR 0 10
33635: PUSH
33636: LD_REAL  1.10000000000000E+0000
33639: MUL
33640: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33641: LD_ADDR_VAR 0 10
33645: PUSH
33646: LD_VAR 0 10
33650: PUSH
33651: LD_VAR 0 6
33655: PPUSH
33656: LD_INT 1
33658: PPUSH
33659: CALL_OW 259
33663: PUSH
33664: LD_REAL  1.15000000000000E+0000
33667: MUL
33668: MUL
33669: ST_TO_ADDR
// end ; unit_vehicle :
33670: GO 34500
33672: LD_INT 2
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 34488
33680: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33681: LD_VAR 0 6
33685: PPUSH
33686: CALL_OW 264
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 42
33696: PUSH
33697: LD_INT 24
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: IN
33705: IFFALSE 33726
// points := [ 25 , 5 , 3 ] ;
33707: LD_ADDR_VAR 0 9
33711: PUSH
33712: LD_INT 25
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33726: LD_VAR 0 6
33730: PPUSH
33731: CALL_OW 264
33735: PUSH
33736: LD_INT 4
33738: PUSH
33739: LD_INT 43
33741: PUSH
33742: LD_INT 25
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: IN
33750: IFFALSE 33771
// points := [ 40 , 15 , 5 ] ;
33752: LD_ADDR_VAR 0 9
33756: PUSH
33757: LD_INT 40
33759: PUSH
33760: LD_INT 15
33762: PUSH
33763: LD_INT 5
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33771: LD_VAR 0 6
33775: PPUSH
33776: CALL_OW 264
33780: PUSH
33781: LD_INT 3
33783: PUSH
33784: LD_INT 23
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: IN
33791: IFFALSE 33812
// points := [ 7 , 25 , 8 ] ;
33793: LD_ADDR_VAR 0 9
33797: PUSH
33798: LD_INT 7
33800: PUSH
33801: LD_INT 25
33803: PUSH
33804: LD_INT 8
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33812: LD_VAR 0 6
33816: PPUSH
33817: CALL_OW 264
33821: PUSH
33822: LD_INT 5
33824: PUSH
33825: LD_INT 27
33827: PUSH
33828: LD_INT 44
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: IN
33836: IFFALSE 33857
// points := [ 14 , 50 , 16 ] ;
33838: LD_ADDR_VAR 0 9
33842: PUSH
33843: LD_INT 14
33845: PUSH
33846: LD_INT 50
33848: PUSH
33849: LD_INT 16
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33857: LD_VAR 0 6
33861: PPUSH
33862: CALL_OW 264
33866: PUSH
33867: LD_INT 6
33869: PUSH
33870: LD_INT 46
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: IN
33877: IFFALSE 33898
// points := [ 32 , 120 , 70 ] ;
33879: LD_ADDR_VAR 0 9
33883: PUSH
33884: LD_INT 32
33886: PUSH
33887: LD_INT 120
33889: PUSH
33890: LD_INT 70
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33898: LD_VAR 0 6
33902: PPUSH
33903: CALL_OW 264
33907: PUSH
33908: LD_INT 7
33910: PUSH
33911: LD_INT 28
33913: PUSH
33914: LD_INT 45
33916: PUSH
33917: LD_EXP 115
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: IN
33928: IFFALSE 33949
// points := [ 35 , 20 , 45 ] ;
33930: LD_ADDR_VAR 0 9
33934: PUSH
33935: LD_INT 35
33937: PUSH
33938: LD_INT 20
33940: PUSH
33941: LD_INT 45
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33949: LD_VAR 0 6
33953: PPUSH
33954: CALL_OW 264
33958: PUSH
33959: LD_INT 47
33961: PUSH
33962: EMPTY
33963: LIST
33964: IN
33965: IFFALSE 33986
// points := [ 67 , 45 , 75 ] ;
33967: LD_ADDR_VAR 0 9
33971: PUSH
33972: LD_INT 67
33974: PUSH
33975: LD_INT 45
33977: PUSH
33978: LD_INT 75
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33986: LD_VAR 0 6
33990: PPUSH
33991: CALL_OW 264
33995: PUSH
33996: LD_INT 26
33998: PUSH
33999: EMPTY
34000: LIST
34001: IN
34002: IFFALSE 34023
// points := [ 120 , 30 , 80 ] ;
34004: LD_ADDR_VAR 0 9
34008: PUSH
34009: LD_INT 120
34011: PUSH
34012: LD_INT 30
34014: PUSH
34015: LD_INT 80
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34023: LD_VAR 0 6
34027: PPUSH
34028: CALL_OW 264
34032: PUSH
34033: LD_INT 22
34035: PUSH
34036: EMPTY
34037: LIST
34038: IN
34039: IFFALSE 34060
// points := [ 40 , 1 , 1 ] ;
34041: LD_ADDR_VAR 0 9
34045: PUSH
34046: LD_INT 40
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34060: LD_VAR 0 6
34064: PPUSH
34065: CALL_OW 264
34069: PUSH
34070: LD_INT 29
34072: PUSH
34073: EMPTY
34074: LIST
34075: IN
34076: IFFALSE 34097
// points := [ 70 , 200 , 400 ] ;
34078: LD_ADDR_VAR 0 9
34082: PUSH
34083: LD_INT 70
34085: PUSH
34086: LD_INT 200
34088: PUSH
34089: LD_INT 400
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34097: LD_VAR 0 6
34101: PPUSH
34102: CALL_OW 264
34106: PUSH
34107: LD_INT 14
34109: PUSH
34110: LD_INT 53
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: IN
34117: IFFALSE 34138
// points := [ 40 , 10 , 20 ] ;
34119: LD_ADDR_VAR 0 9
34123: PUSH
34124: LD_INT 40
34126: PUSH
34127: LD_INT 10
34129: PUSH
34130: LD_INT 20
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34138: LD_VAR 0 6
34142: PPUSH
34143: CALL_OW 264
34147: PUSH
34148: LD_INT 9
34150: PUSH
34151: EMPTY
34152: LIST
34153: IN
34154: IFFALSE 34175
// points := [ 5 , 70 , 20 ] ;
34156: LD_ADDR_VAR 0 9
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: LD_INT 70
34166: PUSH
34167: LD_INT 20
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34175: LD_VAR 0 6
34179: PPUSH
34180: CALL_OW 264
34184: PUSH
34185: LD_INT 10
34187: PUSH
34188: EMPTY
34189: LIST
34190: IN
34191: IFFALSE 34212
// points := [ 35 , 110 , 70 ] ;
34193: LD_ADDR_VAR 0 9
34197: PUSH
34198: LD_INT 35
34200: PUSH
34201: LD_INT 110
34203: PUSH
34204: LD_INT 70
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34212: LD_VAR 0 6
34216: PPUSH
34217: CALL_OW 265
34221: PUSH
34222: LD_INT 25
34224: EQUAL
34225: IFFALSE 34246
// points := [ 80 , 65 , 100 ] ;
34227: LD_ADDR_VAR 0 9
34231: PUSH
34232: LD_INT 80
34234: PUSH
34235: LD_INT 65
34237: PUSH
34238: LD_INT 100
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34246: LD_VAR 0 6
34250: PPUSH
34251: CALL_OW 263
34255: PUSH
34256: LD_INT 1
34258: EQUAL
34259: IFFALSE 34294
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34261: LD_ADDR_VAR 0 10
34265: PUSH
34266: LD_VAR 0 10
34270: PUSH
34271: LD_VAR 0 6
34275: PPUSH
34276: CALL_OW 311
34280: PPUSH
34281: LD_INT 3
34283: PPUSH
34284: CALL_OW 259
34288: PUSH
34289: LD_INT 4
34291: MUL
34292: MUL
34293: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34294: LD_VAR 0 6
34298: PPUSH
34299: CALL_OW 263
34303: PUSH
34304: LD_INT 2
34306: EQUAL
34307: IFFALSE 34358
// begin j := IsControledBy ( i ) ;
34309: LD_ADDR_VAR 0 7
34313: PUSH
34314: LD_VAR 0 6
34318: PPUSH
34319: CALL_OW 312
34323: ST_TO_ADDR
// if j then
34324: LD_VAR 0 7
34328: IFFALSE 34358
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34330: LD_ADDR_VAR 0 10
34334: PUSH
34335: LD_VAR 0 10
34339: PUSH
34340: LD_VAR 0 7
34344: PPUSH
34345: LD_INT 3
34347: PPUSH
34348: CALL_OW 259
34352: PUSH
34353: LD_INT 3
34355: MUL
34356: MUL
34357: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34358: LD_VAR 0 6
34362: PPUSH
34363: CALL_OW 264
34367: PUSH
34368: LD_INT 5
34370: PUSH
34371: LD_INT 6
34373: PUSH
34374: LD_INT 46
34376: PUSH
34377: LD_INT 44
34379: PUSH
34380: LD_INT 47
34382: PUSH
34383: LD_INT 45
34385: PUSH
34386: LD_INT 28
34388: PUSH
34389: LD_INT 7
34391: PUSH
34392: LD_INT 27
34394: PUSH
34395: LD_INT 29
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: IN
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_INT 52
34418: PPUSH
34419: CALL_OW 321
34423: PUSH
34424: LD_INT 2
34426: EQUAL
34427: AND
34428: IFFALSE 34445
// bpoints := bpoints * 1.2 ;
34430: LD_ADDR_VAR 0 10
34434: PUSH
34435: LD_VAR 0 10
34439: PUSH
34440: LD_REAL  1.20000000000000E+0000
34443: MUL
34444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34445: LD_VAR 0 6
34449: PPUSH
34450: CALL_OW 264
34454: PUSH
34455: LD_INT 6
34457: PUSH
34458: LD_INT 46
34460: PUSH
34461: LD_INT 47
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: IN
34469: IFFALSE 34486
// bpoints := bpoints * 1.2 ;
34471: LD_ADDR_VAR 0 10
34475: PUSH
34476: LD_VAR 0 10
34480: PUSH
34481: LD_REAL  1.20000000000000E+0000
34484: MUL
34485: ST_TO_ADDR
// end ; unit_building :
34486: GO 34500
34488: LD_INT 3
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34499
34496: POP
// ; end ;
34497: GO 34500
34499: POP
// for j = 1 to 3 do
34500: LD_ADDR_VAR 0 7
34504: PUSH
34505: DOUBLE
34506: LD_INT 1
34508: DEC
34509: ST_TO_ADDR
34510: LD_INT 3
34512: PUSH
34513: FOR_TO
34514: IFFALSE 34567
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34516: LD_ADDR_VAR 0 5
34520: PUSH
34521: LD_VAR 0 5
34525: PPUSH
34526: LD_VAR 0 7
34530: PPUSH
34531: LD_VAR 0 5
34535: PUSH
34536: LD_VAR 0 7
34540: ARRAY
34541: PUSH
34542: LD_VAR 0 9
34546: PUSH
34547: LD_VAR 0 7
34551: ARRAY
34552: PUSH
34553: LD_VAR 0 10
34557: MUL
34558: PLUS
34559: PPUSH
34560: CALL_OW 1
34564: ST_TO_ADDR
34565: GO 34513
34567: POP
34568: POP
// end ;
34569: GO 33046
34571: POP
34572: POP
// result := Replace ( result , 4 , tmp ) ;
34573: LD_ADDR_VAR 0 5
34577: PUSH
34578: LD_VAR 0 5
34582: PPUSH
34583: LD_INT 4
34585: PPUSH
34586: LD_VAR 0 8
34590: PPUSH
34591: CALL_OW 1
34595: ST_TO_ADDR
// end ;
34596: LD_VAR 0 5
34600: RET
// export function DangerAtRange ( unit , range ) ; begin
34601: LD_INT 0
34603: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34604: LD_ADDR_VAR 0 3
34608: PUSH
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 255
34618: PPUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: CALL_OW 250
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 251
34638: PPUSH
34639: LD_VAR 0 2
34643: PPUSH
34644: CALL 32898 0 4
34648: ST_TO_ADDR
// end ;
34649: LD_VAR 0 3
34653: RET
// export function DangerInArea ( side , area ) ; begin
34654: LD_INT 0
34656: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_VAR 0 2
34666: PPUSH
34667: LD_INT 81
34669: PUSH
34670: LD_VAR 0 1
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PPUSH
34679: CALL_OW 70
34683: ST_TO_ADDR
// end ;
34684: LD_VAR 0 3
34688: RET
// export function IsExtension ( b ) ; begin
34689: LD_INT 0
34691: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34692: LD_ADDR_VAR 0 2
34696: PUSH
34697: LD_VAR 0 1
34701: PUSH
34702: LD_INT 23
34704: PUSH
34705: LD_INT 20
34707: PUSH
34708: LD_INT 22
34710: PUSH
34711: LD_INT 17
34713: PUSH
34714: LD_INT 24
34716: PUSH
34717: LD_INT 21
34719: PUSH
34720: LD_INT 19
34722: PUSH
34723: LD_INT 16
34725: PUSH
34726: LD_INT 25
34728: PUSH
34729: LD_INT 18
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: IN
34744: ST_TO_ADDR
// end ;
34745: LD_VAR 0 2
34749: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34750: LD_INT 0
34752: PPUSH
34753: PPUSH
34754: PPUSH
// result := [ ] ;
34755: LD_ADDR_VAR 0 4
34759: PUSH
34760: EMPTY
34761: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34762: LD_ADDR_VAR 0 5
34766: PUSH
34767: LD_VAR 0 2
34771: PPUSH
34772: LD_INT 21
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PPUSH
34782: CALL_OW 70
34786: ST_TO_ADDR
// if not tmp then
34787: LD_VAR 0 5
34791: NOT
34792: IFFALSE 34796
// exit ;
34794: GO 34860
// if checkLink then
34796: LD_VAR 0 3
34800: IFFALSE 34850
// begin for i in tmp do
34802: LD_ADDR_VAR 0 6
34806: PUSH
34807: LD_VAR 0 5
34811: PUSH
34812: FOR_IN
34813: IFFALSE 34848
// if GetBase ( i ) <> base then
34815: LD_VAR 0 6
34819: PPUSH
34820: CALL_OW 274
34824: PUSH
34825: LD_VAR 0 1
34829: NONEQUAL
34830: IFFALSE 34846
// ComLinkToBase ( base , i ) ;
34832: LD_VAR 0 1
34836: PPUSH
34837: LD_VAR 0 6
34841: PPUSH
34842: CALL_OW 169
34846: GO 34812
34848: POP
34849: POP
// end ; result := tmp ;
34850: LD_ADDR_VAR 0 4
34854: PUSH
34855: LD_VAR 0 5
34859: ST_TO_ADDR
// end ;
34860: LD_VAR 0 4
34864: RET
// export function ComComplete ( units , b ) ; var i ; begin
34865: LD_INT 0
34867: PPUSH
34868: PPUSH
// if not units then
34869: LD_VAR 0 1
34873: NOT
34874: IFFALSE 34878
// exit ;
34876: GO 34968
// for i in units do
34878: LD_ADDR_VAR 0 4
34882: PUSH
34883: LD_VAR 0 1
34887: PUSH
34888: FOR_IN
34889: IFFALSE 34966
// if BuildingStatus ( b ) = bs_build then
34891: LD_VAR 0 2
34895: PPUSH
34896: CALL_OW 461
34900: PUSH
34901: LD_INT 1
34903: EQUAL
34904: IFFALSE 34964
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34906: LD_VAR 0 4
34910: PPUSH
34911: LD_STRING h
34913: PUSH
34914: LD_VAR 0 2
34918: PPUSH
34919: CALL_OW 250
34923: PUSH
34924: LD_VAR 0 2
34928: PPUSH
34929: CALL_OW 251
34933: PUSH
34934: LD_VAR 0 2
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: PUSH
34957: EMPTY
34958: LIST
34959: PPUSH
34960: CALL_OW 446
34964: GO 34888
34966: POP
34967: POP
// end ;
34968: LD_VAR 0 3
34972: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34981: LD_VAR 0 1
34985: NOT
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 263
34996: PUSH
34997: LD_INT 2
34999: EQUAL
35000: NOT
35001: OR
35002: IFFALSE 35006
// exit ;
35004: GO 35322
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35006: LD_ADDR_VAR 0 6
35010: PUSH
35011: LD_INT 22
35013: PUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 255
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: LD_INT 30
35033: PUSH
35034: LD_INT 36
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 34
35043: PUSH
35044: LD_INT 31
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PPUSH
35060: CALL_OW 69
35064: ST_TO_ADDR
// if not tmp then
35065: LD_VAR 0 6
35069: NOT
35070: IFFALSE 35074
// exit ;
35072: GO 35322
// result := [ ] ;
35074: LD_ADDR_VAR 0 2
35078: PUSH
35079: EMPTY
35080: ST_TO_ADDR
// for i in tmp do
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: LD_VAR 0 6
35090: PUSH
35091: FOR_IN
35092: IFFALSE 35163
// begin t := UnitsInside ( i ) ;
35094: LD_ADDR_VAR 0 4
35098: PUSH
35099: LD_VAR 0 3
35103: PPUSH
35104: CALL_OW 313
35108: ST_TO_ADDR
// if t then
35109: LD_VAR 0 4
35113: IFFALSE 35161
// for j in t do
35115: LD_ADDR_VAR 0 7
35119: PUSH
35120: LD_VAR 0 4
35124: PUSH
35125: FOR_IN
35126: IFFALSE 35159
// result := Insert ( result , result + 1 , j ) ;
35128: LD_ADDR_VAR 0 2
35132: PUSH
35133: LD_VAR 0 2
35137: PPUSH
35138: LD_VAR 0 2
35142: PUSH
35143: LD_INT 1
35145: PLUS
35146: PPUSH
35147: LD_VAR 0 7
35151: PPUSH
35152: CALL_OW 2
35156: ST_TO_ADDR
35157: GO 35125
35159: POP
35160: POP
// end ;
35161: GO 35091
35163: POP
35164: POP
// if not result then
35165: LD_VAR 0 2
35169: NOT
35170: IFFALSE 35174
// exit ;
35172: GO 35322
// mech := result [ 1 ] ;
35174: LD_ADDR_VAR 0 5
35178: PUSH
35179: LD_VAR 0 2
35183: PUSH
35184: LD_INT 1
35186: ARRAY
35187: ST_TO_ADDR
// if result > 1 then
35188: LD_VAR 0 2
35192: PUSH
35193: LD_INT 1
35195: GREATER
35196: IFFALSE 35308
// for i = 2 to result do
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: DOUBLE
35204: LD_INT 2
35206: DEC
35207: ST_TO_ADDR
35208: LD_VAR 0 2
35212: PUSH
35213: FOR_TO
35214: IFFALSE 35306
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35216: LD_ADDR_VAR 0 4
35220: PUSH
35221: LD_VAR 0 2
35225: PUSH
35226: LD_VAR 0 3
35230: ARRAY
35231: PPUSH
35232: LD_INT 3
35234: PPUSH
35235: CALL_OW 259
35239: PUSH
35240: LD_VAR 0 2
35244: PUSH
35245: LD_VAR 0 3
35249: ARRAY
35250: PPUSH
35251: CALL_OW 432
35255: MINUS
35256: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35257: LD_VAR 0 4
35261: PUSH
35262: LD_VAR 0 5
35266: PPUSH
35267: LD_INT 3
35269: PPUSH
35270: CALL_OW 259
35274: PUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: CALL_OW 432
35284: MINUS
35285: GREATEREQUAL
35286: IFFALSE 35304
// mech := result [ i ] ;
35288: LD_ADDR_VAR 0 5
35292: PUSH
35293: LD_VAR 0 2
35297: PUSH
35298: LD_VAR 0 3
35302: ARRAY
35303: ST_TO_ADDR
// end ;
35304: GO 35213
35306: POP
35307: POP
// ComLinkTo ( vehicle , mech ) ;
35308: LD_VAR 0 1
35312: PPUSH
35313: LD_VAR 0 5
35317: PPUSH
35318: CALL_OW 135
// end ;
35322: LD_VAR 0 2
35326: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35327: LD_INT 0
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
// result := [ ] ;
35342: LD_ADDR_VAR 0 7
35346: PUSH
35347: EMPTY
35348: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL_OW 266
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: IN
35369: NOT
35370: IFFALSE 35374
// exit ;
35372: GO 37008
// if name then
35374: LD_VAR 0 3
35378: IFFALSE 35394
// SetBName ( base_dep , name ) ;
35380: LD_VAR 0 1
35384: PPUSH
35385: LD_VAR 0 3
35389: PPUSH
35390: CALL_OW 500
// base := GetBase ( base_dep ) ;
35394: LD_ADDR_VAR 0 15
35398: PUSH
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 274
35408: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35409: LD_ADDR_VAR 0 16
35413: PUSH
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 255
35423: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35424: LD_ADDR_VAR 0 17
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 248
35438: ST_TO_ADDR
// if sources then
35439: LD_VAR 0 5
35443: IFFALSE 35490
// for i = 1 to 3 do
35445: LD_ADDR_VAR 0 8
35449: PUSH
35450: DOUBLE
35451: LD_INT 1
35453: DEC
35454: ST_TO_ADDR
35455: LD_INT 3
35457: PUSH
35458: FOR_TO
35459: IFFALSE 35488
// AddResourceType ( base , i , sources [ i ] ) ;
35461: LD_VAR 0 15
35465: PPUSH
35466: LD_VAR 0 8
35470: PPUSH
35471: LD_VAR 0 5
35475: PUSH
35476: LD_VAR 0 8
35480: ARRAY
35481: PPUSH
35482: CALL_OW 276
35486: GO 35458
35488: POP
35489: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35490: LD_ADDR_VAR 0 18
35494: PUSH
35495: LD_VAR 0 15
35499: PPUSH
35500: LD_VAR 0 2
35504: PPUSH
35505: LD_INT 1
35507: PPUSH
35508: CALL 34750 0 3
35512: ST_TO_ADDR
// InitHc ;
35513: CALL_OW 19
// InitUc ;
35517: CALL_OW 18
// uc_side := side ;
35521: LD_ADDR_OWVAR 20
35525: PUSH
35526: LD_VAR 0 16
35530: ST_TO_ADDR
// uc_nation := nation ;
35531: LD_ADDR_OWVAR 21
35535: PUSH
35536: LD_VAR 0 17
35540: ST_TO_ADDR
// if buildings then
35541: LD_VAR 0 18
35545: IFFALSE 36867
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35547: LD_ADDR_VAR 0 19
35551: PUSH
35552: LD_VAR 0 18
35556: PPUSH
35557: LD_INT 2
35559: PUSH
35560: LD_INT 30
35562: PUSH
35563: LD_INT 29
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 30
35572: PUSH
35573: LD_INT 30
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: PPUSH
35585: CALL_OW 72
35589: ST_TO_ADDR
// if tmp then
35590: LD_VAR 0 19
35594: IFFALSE 35642
// for i in tmp do
35596: LD_ADDR_VAR 0 8
35600: PUSH
35601: LD_VAR 0 19
35605: PUSH
35606: FOR_IN
35607: IFFALSE 35640
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35609: LD_VAR 0 8
35613: PPUSH
35614: CALL_OW 250
35618: PPUSH
35619: LD_VAR 0 8
35623: PPUSH
35624: CALL_OW 251
35628: PPUSH
35629: LD_VAR 0 16
35633: PPUSH
35634: CALL_OW 441
35638: GO 35606
35640: POP
35641: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35642: LD_VAR 0 18
35646: PPUSH
35647: LD_INT 2
35649: PUSH
35650: LD_INT 30
35652: PUSH
35653: LD_INT 32
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 30
35662: PUSH
35663: LD_INT 33
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: PPUSH
35675: CALL_OW 72
35679: IFFALSE 35767
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35681: LD_ADDR_VAR 0 8
35685: PUSH
35686: LD_VAR 0 18
35690: PPUSH
35691: LD_INT 2
35693: PUSH
35694: LD_INT 30
35696: PUSH
35697: LD_INT 32
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 30
35706: PUSH
35707: LD_INT 33
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: PPUSH
35719: CALL_OW 72
35723: PUSH
35724: FOR_IN
35725: IFFALSE 35765
// begin if not GetBWeapon ( i ) then
35727: LD_VAR 0 8
35731: PPUSH
35732: CALL_OW 269
35736: NOT
35737: IFFALSE 35763
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35739: LD_VAR 0 8
35743: PPUSH
35744: LD_VAR 0 8
35748: PPUSH
35749: LD_VAR 0 2
35753: PPUSH
35754: CALL 37013 0 2
35758: PPUSH
35759: CALL_OW 431
// end ;
35763: GO 35724
35765: POP
35766: POP
// end ; for i = 1 to personel do
35767: LD_ADDR_VAR 0 8
35771: PUSH
35772: DOUBLE
35773: LD_INT 1
35775: DEC
35776: ST_TO_ADDR
35777: LD_VAR 0 6
35781: PUSH
35782: FOR_TO
35783: IFFALSE 36847
// begin if i > 4 then
35785: LD_VAR 0 8
35789: PUSH
35790: LD_INT 4
35792: GREATER
35793: IFFALSE 35797
// break ;
35795: GO 36847
// case i of 1 :
35797: LD_VAR 0 8
35801: PUSH
35802: LD_INT 1
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35810
35808: GO 35890
35810: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35811: LD_ADDR_VAR 0 12
35815: PUSH
35816: LD_VAR 0 18
35820: PPUSH
35821: LD_INT 22
35823: PUSH
35824: LD_VAR 0 16
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 58
35835: PUSH
35836: EMPTY
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 30
35844: PUSH
35845: LD_INT 32
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 30
35854: PUSH
35855: LD_INT 4
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 30
35864: PUSH
35865: LD_INT 5
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: PPUSH
35883: CALL_OW 72
35887: ST_TO_ADDR
35888: GO 36112
35890: LD_INT 2
35892: DOUBLE
35893: EQUAL
35894: IFTRUE 35898
35896: GO 35960
35898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35899: LD_ADDR_VAR 0 12
35903: PUSH
35904: LD_VAR 0 18
35908: PPUSH
35909: LD_INT 22
35911: PUSH
35912: LD_VAR 0 16
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: LD_INT 30
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 30
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PPUSH
35953: CALL_OW 72
35957: ST_TO_ADDR
35958: GO 36112
35960: LD_INT 3
35962: DOUBLE
35963: EQUAL
35964: IFTRUE 35968
35966: GO 36030
35968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35969: LD_ADDR_VAR 0 12
35973: PUSH
35974: LD_VAR 0 18
35978: PPUSH
35979: LD_INT 22
35981: PUSH
35982: LD_VAR 0 16
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 30
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 30
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PPUSH
36023: CALL_OW 72
36027: ST_TO_ADDR
36028: GO 36112
36030: LD_INT 4
36032: DOUBLE
36033: EQUAL
36034: IFTRUE 36038
36036: GO 36111
36038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36039: LD_ADDR_VAR 0 12
36043: PUSH
36044: LD_VAR 0 18
36048: PPUSH
36049: LD_INT 22
36051: PUSH
36052: LD_VAR 0 16
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 30
36066: PUSH
36067: LD_INT 6
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 30
36076: PUSH
36077: LD_INT 7
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 30
36086: PUSH
36087: LD_INT 8
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PPUSH
36104: CALL_OW 72
36108: ST_TO_ADDR
36109: GO 36112
36111: POP
// if i = 1 then
36112: LD_VAR 0 8
36116: PUSH
36117: LD_INT 1
36119: EQUAL
36120: IFFALSE 36231
// begin tmp := [ ] ;
36122: LD_ADDR_VAR 0 19
36126: PUSH
36127: EMPTY
36128: ST_TO_ADDR
// for j in f do
36129: LD_ADDR_VAR 0 9
36133: PUSH
36134: LD_VAR 0 12
36138: PUSH
36139: FOR_IN
36140: IFFALSE 36213
// if GetBType ( j ) = b_bunker then
36142: LD_VAR 0 9
36146: PPUSH
36147: CALL_OW 266
36151: PUSH
36152: LD_INT 32
36154: EQUAL
36155: IFFALSE 36182
// tmp := Insert ( tmp , 1 , j ) else
36157: LD_ADDR_VAR 0 19
36161: PUSH
36162: LD_VAR 0 19
36166: PPUSH
36167: LD_INT 1
36169: PPUSH
36170: LD_VAR 0 9
36174: PPUSH
36175: CALL_OW 2
36179: ST_TO_ADDR
36180: GO 36211
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36182: LD_ADDR_VAR 0 19
36186: PUSH
36187: LD_VAR 0 19
36191: PPUSH
36192: LD_VAR 0 19
36196: PUSH
36197: LD_INT 1
36199: PLUS
36200: PPUSH
36201: LD_VAR 0 9
36205: PPUSH
36206: CALL_OW 2
36210: ST_TO_ADDR
36211: GO 36139
36213: POP
36214: POP
// if tmp then
36215: LD_VAR 0 19
36219: IFFALSE 36231
// f := tmp ;
36221: LD_ADDR_VAR 0 12
36225: PUSH
36226: LD_VAR 0 19
36230: ST_TO_ADDR
// end ; x := personel [ i ] ;
36231: LD_ADDR_VAR 0 13
36235: PUSH
36236: LD_VAR 0 6
36240: PUSH
36241: LD_VAR 0 8
36245: ARRAY
36246: ST_TO_ADDR
// if x = - 1 then
36247: LD_VAR 0 13
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: EQUAL
36256: IFFALSE 36465
// begin for j in f do
36258: LD_ADDR_VAR 0 9
36262: PUSH
36263: LD_VAR 0 12
36267: PUSH
36268: FOR_IN
36269: IFFALSE 36461
// repeat InitHc ;
36271: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36275: LD_VAR 0 9
36279: PPUSH
36280: CALL_OW 266
36284: PUSH
36285: LD_INT 5
36287: EQUAL
36288: IFFALSE 36358
// begin if UnitsInside ( j ) < 3 then
36290: LD_VAR 0 9
36294: PPUSH
36295: CALL_OW 313
36299: PUSH
36300: LD_INT 3
36302: LESS
36303: IFFALSE 36339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36305: LD_INT 0
36307: PPUSH
36308: LD_INT 5
36310: PUSH
36311: LD_INT 8
36313: PUSH
36314: LD_INT 9
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: PUSH
36322: LD_VAR 0 17
36326: ARRAY
36327: PPUSH
36328: LD_VAR 0 4
36332: PPUSH
36333: CALL_OW 380
36337: GO 36356
// PrepareHuman ( false , i , skill ) ;
36339: LD_INT 0
36341: PPUSH
36342: LD_VAR 0 8
36346: PPUSH
36347: LD_VAR 0 4
36351: PPUSH
36352: CALL_OW 380
// end else
36356: GO 36375
// PrepareHuman ( false , i , skill ) ;
36358: LD_INT 0
36360: PPUSH
36361: LD_VAR 0 8
36365: PPUSH
36366: LD_VAR 0 4
36370: PPUSH
36371: CALL_OW 380
// un := CreateHuman ;
36375: LD_ADDR_VAR 0 14
36379: PUSH
36380: CALL_OW 44
36384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36385: LD_ADDR_VAR 0 7
36389: PUSH
36390: LD_VAR 0 7
36394: PPUSH
36395: LD_INT 1
36397: PPUSH
36398: LD_VAR 0 14
36402: PPUSH
36403: CALL_OW 2
36407: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36408: LD_VAR 0 14
36412: PPUSH
36413: LD_VAR 0 9
36417: PPUSH
36418: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36422: LD_VAR 0 9
36426: PPUSH
36427: CALL_OW 313
36431: PUSH
36432: LD_INT 6
36434: EQUAL
36435: PUSH
36436: LD_VAR 0 9
36440: PPUSH
36441: CALL_OW 266
36445: PUSH
36446: LD_INT 32
36448: PUSH
36449: LD_INT 31
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: IN
36456: OR
36457: IFFALSE 36271
36459: GO 36268
36461: POP
36462: POP
// end else
36463: GO 36845
// for j = 1 to x do
36465: LD_ADDR_VAR 0 9
36469: PUSH
36470: DOUBLE
36471: LD_INT 1
36473: DEC
36474: ST_TO_ADDR
36475: LD_VAR 0 13
36479: PUSH
36480: FOR_TO
36481: IFFALSE 36843
// begin InitHc ;
36483: CALL_OW 19
// if not f then
36487: LD_VAR 0 12
36491: NOT
36492: IFFALSE 36581
// begin PrepareHuman ( false , i , skill ) ;
36494: LD_INT 0
36496: PPUSH
36497: LD_VAR 0 8
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: CALL_OW 380
// un := CreateHuman ;
36511: LD_ADDR_VAR 0 14
36515: PUSH
36516: CALL_OW 44
36520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36521: LD_ADDR_VAR 0 7
36525: PUSH
36526: LD_VAR 0 7
36530: PPUSH
36531: LD_INT 1
36533: PPUSH
36534: LD_VAR 0 14
36538: PPUSH
36539: CALL_OW 2
36543: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36544: LD_VAR 0 14
36548: PPUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: CALL_OW 250
36558: PPUSH
36559: LD_VAR 0 1
36563: PPUSH
36564: CALL_OW 251
36568: PPUSH
36569: LD_INT 10
36571: PPUSH
36572: LD_INT 0
36574: PPUSH
36575: CALL_OW 50
// continue ;
36579: GO 36480
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36581: LD_VAR 0 12
36585: PUSH
36586: LD_INT 1
36588: ARRAY
36589: PPUSH
36590: CALL_OW 313
36594: PUSH
36595: LD_VAR 0 12
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PPUSH
36604: CALL_OW 266
36608: PUSH
36609: LD_INT 32
36611: PUSH
36612: LD_INT 31
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: IN
36619: AND
36620: PUSH
36621: LD_VAR 0 12
36625: PUSH
36626: LD_INT 1
36628: ARRAY
36629: PPUSH
36630: CALL_OW 313
36634: PUSH
36635: LD_INT 6
36637: EQUAL
36638: OR
36639: IFFALSE 36659
// f := Delete ( f , 1 ) ;
36641: LD_ADDR_VAR 0 12
36645: PUSH
36646: LD_VAR 0 12
36650: PPUSH
36651: LD_INT 1
36653: PPUSH
36654: CALL_OW 3
36658: ST_TO_ADDR
// if not f then
36659: LD_VAR 0 12
36663: NOT
36664: IFFALSE 36682
// begin x := x + 2 ;
36666: LD_ADDR_VAR 0 13
36670: PUSH
36671: LD_VAR 0 13
36675: PUSH
36676: LD_INT 2
36678: PLUS
36679: ST_TO_ADDR
// continue ;
36680: GO 36480
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36682: LD_VAR 0 12
36686: PUSH
36687: LD_INT 1
36689: ARRAY
36690: PPUSH
36691: CALL_OW 266
36695: PUSH
36696: LD_INT 5
36698: EQUAL
36699: IFFALSE 36773
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36701: LD_VAR 0 12
36705: PUSH
36706: LD_INT 1
36708: ARRAY
36709: PPUSH
36710: CALL_OW 313
36714: PUSH
36715: LD_INT 3
36717: LESS
36718: IFFALSE 36754
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36720: LD_INT 0
36722: PPUSH
36723: LD_INT 5
36725: PUSH
36726: LD_INT 8
36728: PUSH
36729: LD_INT 9
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: LIST
36736: PUSH
36737: LD_VAR 0 17
36741: ARRAY
36742: PPUSH
36743: LD_VAR 0 4
36747: PPUSH
36748: CALL_OW 380
36752: GO 36771
// PrepareHuman ( false , i , skill ) ;
36754: LD_INT 0
36756: PPUSH
36757: LD_VAR 0 8
36761: PPUSH
36762: LD_VAR 0 4
36766: PPUSH
36767: CALL_OW 380
// end else
36771: GO 36790
// PrepareHuman ( false , i , skill ) ;
36773: LD_INT 0
36775: PPUSH
36776: LD_VAR 0 8
36780: PPUSH
36781: LD_VAR 0 4
36785: PPUSH
36786: CALL_OW 380
// un := CreateHuman ;
36790: LD_ADDR_VAR 0 14
36794: PUSH
36795: CALL_OW 44
36799: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36800: LD_ADDR_VAR 0 7
36804: PUSH
36805: LD_VAR 0 7
36809: PPUSH
36810: LD_INT 1
36812: PPUSH
36813: LD_VAR 0 14
36817: PPUSH
36818: CALL_OW 2
36822: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36823: LD_VAR 0 14
36827: PPUSH
36828: LD_VAR 0 12
36832: PUSH
36833: LD_INT 1
36835: ARRAY
36836: PPUSH
36837: CALL_OW 52
// end ;
36841: GO 36480
36843: POP
36844: POP
// end ;
36845: GO 35782
36847: POP
36848: POP
// result := result ^ buildings ;
36849: LD_ADDR_VAR 0 7
36853: PUSH
36854: LD_VAR 0 7
36858: PUSH
36859: LD_VAR 0 18
36863: ADD
36864: ST_TO_ADDR
// end else
36865: GO 37008
// begin for i = 1 to personel do
36867: LD_ADDR_VAR 0 8
36871: PUSH
36872: DOUBLE
36873: LD_INT 1
36875: DEC
36876: ST_TO_ADDR
36877: LD_VAR 0 6
36881: PUSH
36882: FOR_TO
36883: IFFALSE 37006
// begin if i > 4 then
36885: LD_VAR 0 8
36889: PUSH
36890: LD_INT 4
36892: GREATER
36893: IFFALSE 36897
// break ;
36895: GO 37006
// x := personel [ i ] ;
36897: LD_ADDR_VAR 0 13
36901: PUSH
36902: LD_VAR 0 6
36906: PUSH
36907: LD_VAR 0 8
36911: ARRAY
36912: ST_TO_ADDR
// if x = - 1 then
36913: LD_VAR 0 13
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: EQUAL
36922: IFFALSE 36926
// continue ;
36924: GO 36882
// PrepareHuman ( false , i , skill ) ;
36926: LD_INT 0
36928: PPUSH
36929: LD_VAR 0 8
36933: PPUSH
36934: LD_VAR 0 4
36938: PPUSH
36939: CALL_OW 380
// un := CreateHuman ;
36943: LD_ADDR_VAR 0 14
36947: PUSH
36948: CALL_OW 44
36952: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36953: LD_VAR 0 14
36957: PPUSH
36958: LD_VAR 0 1
36962: PPUSH
36963: CALL_OW 250
36967: PPUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL_OW 251
36977: PPUSH
36978: LD_INT 10
36980: PPUSH
36981: LD_INT 0
36983: PPUSH
36984: CALL_OW 50
// result := result ^ un ;
36988: LD_ADDR_VAR 0 7
36992: PUSH
36993: LD_VAR 0 7
36997: PUSH
36998: LD_VAR 0 14
37002: ADD
37003: ST_TO_ADDR
// end ;
37004: GO 36882
37006: POP
37007: POP
// end ; end ;
37008: LD_VAR 0 7
37012: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
// result := false ;
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_INT 0
37038: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37039: LD_VAR 0 1
37043: NOT
37044: PUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: CALL_OW 266
37054: PUSH
37055: LD_INT 32
37057: PUSH
37058: LD_INT 33
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: IN
37065: NOT
37066: OR
37067: IFFALSE 37071
// exit ;
37069: GO 38180
// nat := GetNation ( tower ) ;
37071: LD_ADDR_VAR 0 12
37075: PUSH
37076: LD_VAR 0 1
37080: PPUSH
37081: CALL_OW 248
37085: ST_TO_ADDR
// side := GetSide ( tower ) ;
37086: LD_ADDR_VAR 0 16
37090: PUSH
37091: LD_VAR 0 1
37095: PPUSH
37096: CALL_OW 255
37100: ST_TO_ADDR
// x := GetX ( tower ) ;
37101: LD_ADDR_VAR 0 10
37105: PUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 250
37115: ST_TO_ADDR
// y := GetY ( tower ) ;
37116: LD_ADDR_VAR 0 11
37120: PUSH
37121: LD_VAR 0 1
37125: PPUSH
37126: CALL_OW 251
37130: ST_TO_ADDR
// if not x or not y then
37131: LD_VAR 0 10
37135: NOT
37136: PUSH
37137: LD_VAR 0 11
37141: NOT
37142: OR
37143: IFFALSE 37147
// exit ;
37145: GO 38180
// weapon := 0 ;
37147: LD_ADDR_VAR 0 18
37151: PUSH
37152: LD_INT 0
37154: ST_TO_ADDR
// fac_list := [ ] ;
37155: LD_ADDR_VAR 0 17
37159: PUSH
37160: EMPTY
37161: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37162: LD_ADDR_VAR 0 6
37166: PUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 274
37176: PPUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: LD_INT 0
37184: PPUSH
37185: CALL 34750 0 3
37189: PPUSH
37190: LD_INT 30
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PPUSH
37200: CALL_OW 72
37204: ST_TO_ADDR
// if not factories then
37205: LD_VAR 0 6
37209: NOT
37210: IFFALSE 37214
// exit ;
37212: GO 38180
// for i in factories do
37214: LD_ADDR_VAR 0 8
37218: PUSH
37219: LD_VAR 0 6
37223: PUSH
37224: FOR_IN
37225: IFFALSE 37250
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37227: LD_ADDR_VAR 0 17
37231: PUSH
37232: LD_VAR 0 17
37236: PUSH
37237: LD_VAR 0 8
37241: PPUSH
37242: CALL_OW 478
37246: UNION
37247: ST_TO_ADDR
37248: GO 37224
37250: POP
37251: POP
// if not fac_list then
37252: LD_VAR 0 17
37256: NOT
37257: IFFALSE 37261
// exit ;
37259: GO 38180
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37261: LD_ADDR_VAR 0 5
37265: PUSH
37266: LD_INT 4
37268: PUSH
37269: LD_INT 5
37271: PUSH
37272: LD_INT 9
37274: PUSH
37275: LD_INT 10
37277: PUSH
37278: LD_INT 6
37280: PUSH
37281: LD_INT 7
37283: PUSH
37284: LD_INT 11
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 27
37298: PUSH
37299: LD_INT 28
37301: PUSH
37302: LD_INT 26
37304: PUSH
37305: LD_INT 30
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 43
37316: PUSH
37317: LD_INT 44
37319: PUSH
37320: LD_INT 46
37322: PUSH
37323: LD_INT 45
37325: PUSH
37326: LD_INT 47
37328: PUSH
37329: LD_INT 49
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: LD_VAR 0 12
37349: ARRAY
37350: ST_TO_ADDR
// list := list isect fac_list ;
37351: LD_ADDR_VAR 0 5
37355: PUSH
37356: LD_VAR 0 5
37360: PUSH
37361: LD_VAR 0 17
37365: ISECT
37366: ST_TO_ADDR
// if not list then
37367: LD_VAR 0 5
37371: NOT
37372: IFFALSE 37376
// exit ;
37374: GO 38180
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37376: LD_VAR 0 12
37380: PUSH
37381: LD_INT 3
37383: EQUAL
37384: PUSH
37385: LD_INT 49
37387: PUSH
37388: LD_VAR 0 5
37392: IN
37393: AND
37394: PUSH
37395: LD_INT 31
37397: PPUSH
37398: LD_VAR 0 16
37402: PPUSH
37403: CALL_OW 321
37407: PUSH
37408: LD_INT 2
37410: EQUAL
37411: AND
37412: IFFALSE 37472
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37414: LD_INT 22
37416: PUSH
37417: LD_VAR 0 16
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 35
37428: PUSH
37429: LD_INT 49
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 91
37438: PUSH
37439: LD_VAR 0 1
37443: PUSH
37444: LD_INT 10
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: PPUSH
37457: CALL_OW 69
37461: NOT
37462: IFFALSE 37472
// weapon := ru_time_lapser ;
37464: LD_ADDR_VAR 0 18
37468: PUSH
37469: LD_INT 49
37471: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37472: LD_VAR 0 12
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: IN
37487: PUSH
37488: LD_INT 11
37490: PUSH
37491: LD_VAR 0 5
37495: IN
37496: PUSH
37497: LD_INT 30
37499: PUSH
37500: LD_VAR 0 5
37504: IN
37505: OR
37506: AND
37507: PUSH
37508: LD_INT 6
37510: PPUSH
37511: LD_VAR 0 16
37515: PPUSH
37516: CALL_OW 321
37520: PUSH
37521: LD_INT 2
37523: EQUAL
37524: AND
37525: IFFALSE 37690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37527: LD_INT 22
37529: PUSH
37530: LD_VAR 0 16
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: PUSH
37542: LD_INT 35
37544: PUSH
37545: LD_INT 11
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 35
37554: PUSH
37555: LD_INT 30
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 91
37569: PUSH
37570: LD_VAR 0 1
37574: PUSH
37575: LD_INT 18
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: PPUSH
37588: CALL_OW 69
37592: NOT
37593: PUSH
37594: LD_INT 22
37596: PUSH
37597: LD_VAR 0 16
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: LD_INT 30
37611: PUSH
37612: LD_INT 32
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 30
37621: PUSH
37622: LD_INT 33
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 91
37636: PUSH
37637: LD_VAR 0 1
37641: PUSH
37642: LD_INT 12
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: PPUSH
37658: CALL_OW 69
37662: PUSH
37663: LD_INT 2
37665: GREATER
37666: AND
37667: IFFALSE 37690
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37669: LD_ADDR_VAR 0 18
37673: PUSH
37674: LD_INT 11
37676: PUSH
37677: LD_INT 30
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_VAR 0 12
37688: ARRAY
37689: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37690: LD_VAR 0 18
37694: NOT
37695: PUSH
37696: LD_INT 40
37698: PPUSH
37699: LD_VAR 0 16
37703: PPUSH
37704: CALL_OW 321
37708: PUSH
37709: LD_INT 2
37711: EQUAL
37712: AND
37713: PUSH
37714: LD_INT 7
37716: PUSH
37717: LD_VAR 0 5
37721: IN
37722: PUSH
37723: LD_INT 28
37725: PUSH
37726: LD_VAR 0 5
37730: IN
37731: OR
37732: PUSH
37733: LD_INT 45
37735: PUSH
37736: LD_VAR 0 5
37740: IN
37741: OR
37742: AND
37743: IFFALSE 37997
// begin hex := GetHexInfo ( x , y ) ;
37745: LD_ADDR_VAR 0 4
37749: PUSH
37750: LD_VAR 0 10
37754: PPUSH
37755: LD_VAR 0 11
37759: PPUSH
37760: CALL_OW 546
37764: ST_TO_ADDR
// if hex [ 1 ] then
37765: LD_VAR 0 4
37769: PUSH
37770: LD_INT 1
37772: ARRAY
37773: IFFALSE 37777
// exit ;
37775: GO 38180
// height := hex [ 2 ] ;
37777: LD_ADDR_VAR 0 15
37781: PUSH
37782: LD_VAR 0 4
37786: PUSH
37787: LD_INT 2
37789: ARRAY
37790: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37791: LD_ADDR_VAR 0 14
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 5
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: ST_TO_ADDR
// for i in tmp do
37814: LD_ADDR_VAR 0 8
37818: PUSH
37819: LD_VAR 0 14
37823: PUSH
37824: FOR_IN
37825: IFFALSE 37995
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37827: LD_ADDR_VAR 0 9
37831: PUSH
37832: LD_VAR 0 10
37836: PPUSH
37837: LD_VAR 0 8
37841: PPUSH
37842: LD_INT 5
37844: PPUSH
37845: CALL_OW 272
37849: PUSH
37850: LD_VAR 0 11
37854: PPUSH
37855: LD_VAR 0 8
37859: PPUSH
37860: LD_INT 5
37862: PPUSH
37863: CALL_OW 273
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37872: LD_VAR 0 9
37876: PUSH
37877: LD_INT 1
37879: ARRAY
37880: PPUSH
37881: LD_VAR 0 9
37885: PUSH
37886: LD_INT 2
37888: ARRAY
37889: PPUSH
37890: CALL_OW 488
37894: IFFALSE 37993
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37896: LD_ADDR_VAR 0 4
37900: PUSH
37901: LD_VAR 0 9
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: PPUSH
37910: LD_VAR 0 9
37914: PUSH
37915: LD_INT 2
37917: ARRAY
37918: PPUSH
37919: CALL_OW 546
37923: ST_TO_ADDR
// if hex [ 1 ] then
37924: LD_VAR 0 4
37928: PUSH
37929: LD_INT 1
37931: ARRAY
37932: IFFALSE 37936
// continue ;
37934: GO 37824
// h := hex [ 2 ] ;
37936: LD_ADDR_VAR 0 13
37940: PUSH
37941: LD_VAR 0 4
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: ST_TO_ADDR
// if h + 7 < height then
37950: LD_VAR 0 13
37954: PUSH
37955: LD_INT 7
37957: PLUS
37958: PUSH
37959: LD_VAR 0 15
37963: LESS
37964: IFFALSE 37993
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37966: LD_ADDR_VAR 0 18
37970: PUSH
37971: LD_INT 7
37973: PUSH
37974: LD_INT 28
37976: PUSH
37977: LD_INT 45
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: PUSH
37985: LD_VAR 0 12
37989: ARRAY
37990: ST_TO_ADDR
// break ;
37991: GO 37995
// end ; end ; end ;
37993: GO 37824
37995: POP
37996: POP
// end ; if not weapon then
37997: LD_VAR 0 18
38001: NOT
38002: IFFALSE 38062
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38004: LD_ADDR_VAR 0 5
38008: PUSH
38009: LD_VAR 0 5
38013: PUSH
38014: LD_INT 11
38016: PUSH
38017: LD_INT 30
38019: PUSH
38020: LD_INT 49
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: DIFF
38028: ST_TO_ADDR
// if not list then
38029: LD_VAR 0 5
38033: NOT
38034: IFFALSE 38038
// exit ;
38036: GO 38180
// weapon := list [ rand ( 1 , list ) ] ;
38038: LD_ADDR_VAR 0 18
38042: PUSH
38043: LD_VAR 0 5
38047: PUSH
38048: LD_INT 1
38050: PPUSH
38051: LD_VAR 0 5
38055: PPUSH
38056: CALL_OW 12
38060: ARRAY
38061: ST_TO_ADDR
// end ; if weapon then
38062: LD_VAR 0 18
38066: IFFALSE 38180
// begin tmp := CostOfWeapon ( weapon ) ;
38068: LD_ADDR_VAR 0 14
38072: PUSH
38073: LD_VAR 0 18
38077: PPUSH
38078: CALL_OW 451
38082: ST_TO_ADDR
// j := GetBase ( tower ) ;
38083: LD_ADDR_VAR 0 9
38087: PUSH
38088: LD_VAR 0 1
38092: PPUSH
38093: CALL_OW 274
38097: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38098: LD_VAR 0 9
38102: PPUSH
38103: LD_INT 1
38105: PPUSH
38106: CALL_OW 275
38110: PUSH
38111: LD_VAR 0 14
38115: PUSH
38116: LD_INT 1
38118: ARRAY
38119: GREATEREQUAL
38120: PUSH
38121: LD_VAR 0 9
38125: PPUSH
38126: LD_INT 2
38128: PPUSH
38129: CALL_OW 275
38133: PUSH
38134: LD_VAR 0 14
38138: PUSH
38139: LD_INT 2
38141: ARRAY
38142: GREATEREQUAL
38143: AND
38144: PUSH
38145: LD_VAR 0 9
38149: PPUSH
38150: LD_INT 3
38152: PPUSH
38153: CALL_OW 275
38157: PUSH
38158: LD_VAR 0 14
38162: PUSH
38163: LD_INT 3
38165: ARRAY
38166: GREATEREQUAL
38167: AND
38168: IFFALSE 38180
// result := weapon ;
38170: LD_ADDR_VAR 0 3
38174: PUSH
38175: LD_VAR 0 18
38179: ST_TO_ADDR
// end ; end ;
38180: LD_VAR 0 3
38184: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38185: LD_INT 0
38187: PPUSH
38188: PPUSH
// result := true ;
38189: LD_ADDR_VAR 0 3
38193: PUSH
38194: LD_INT 1
38196: ST_TO_ADDR
// if array1 = array2 then
38197: LD_VAR 0 1
38201: PUSH
38202: LD_VAR 0 2
38206: EQUAL
38207: IFFALSE 38267
// begin for i = 1 to array1 do
38209: LD_ADDR_VAR 0 4
38213: PUSH
38214: DOUBLE
38215: LD_INT 1
38217: DEC
38218: ST_TO_ADDR
38219: LD_VAR 0 1
38223: PUSH
38224: FOR_TO
38225: IFFALSE 38263
// if array1 [ i ] <> array2 [ i ] then
38227: LD_VAR 0 1
38231: PUSH
38232: LD_VAR 0 4
38236: ARRAY
38237: PUSH
38238: LD_VAR 0 2
38242: PUSH
38243: LD_VAR 0 4
38247: ARRAY
38248: NONEQUAL
38249: IFFALSE 38261
// begin result := false ;
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: LD_INT 0
38258: ST_TO_ADDR
// break ;
38259: GO 38263
// end ;
38261: GO 38224
38263: POP
38264: POP
// end else
38265: GO 38275
// result := false ;
38267: LD_ADDR_VAR 0 3
38271: PUSH
38272: LD_INT 0
38274: ST_TO_ADDR
// end ;
38275: LD_VAR 0 3
38279: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38280: LD_INT 0
38282: PPUSH
38283: PPUSH
// if not array1 or not array2 then
38284: LD_VAR 0 1
38288: NOT
38289: PUSH
38290: LD_VAR 0 2
38294: NOT
38295: OR
38296: IFFALSE 38300
// exit ;
38298: GO 38364
// result := true ;
38300: LD_ADDR_VAR 0 3
38304: PUSH
38305: LD_INT 1
38307: ST_TO_ADDR
// for i = 1 to array1 do
38308: LD_ADDR_VAR 0 4
38312: PUSH
38313: DOUBLE
38314: LD_INT 1
38316: DEC
38317: ST_TO_ADDR
38318: LD_VAR 0 1
38322: PUSH
38323: FOR_TO
38324: IFFALSE 38362
// if array1 [ i ] <> array2 [ i ] then
38326: LD_VAR 0 1
38330: PUSH
38331: LD_VAR 0 4
38335: ARRAY
38336: PUSH
38337: LD_VAR 0 2
38341: PUSH
38342: LD_VAR 0 4
38346: ARRAY
38347: NONEQUAL
38348: IFFALSE 38360
// begin result := false ;
38350: LD_ADDR_VAR 0 3
38354: PUSH
38355: LD_INT 0
38357: ST_TO_ADDR
// break ;
38358: GO 38362
// end ;
38360: GO 38323
38362: POP
38363: POP
// end ;
38364: LD_VAR 0 3
38368: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38369: LD_INT 0
38371: PPUSH
38372: PPUSH
38373: PPUSH
// pom := GetBase ( fac ) ;
38374: LD_ADDR_VAR 0 5
38378: PUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 274
38388: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38389: LD_ADDR_VAR 0 4
38393: PUSH
38394: LD_VAR 0 2
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PPUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_INT 2
38410: ARRAY
38411: PPUSH
38412: LD_VAR 0 2
38416: PUSH
38417: LD_INT 3
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 2
38425: PUSH
38426: LD_INT 4
38428: ARRAY
38429: PPUSH
38430: CALL_OW 449
38434: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38435: LD_ADDR_VAR 0 3
38439: PUSH
38440: LD_VAR 0 5
38444: PPUSH
38445: LD_INT 1
38447: PPUSH
38448: CALL_OW 275
38452: PUSH
38453: LD_VAR 0 4
38457: PUSH
38458: LD_INT 1
38460: ARRAY
38461: GREATEREQUAL
38462: PUSH
38463: LD_VAR 0 5
38467: PPUSH
38468: LD_INT 2
38470: PPUSH
38471: CALL_OW 275
38475: PUSH
38476: LD_VAR 0 4
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: GREATEREQUAL
38485: AND
38486: PUSH
38487: LD_VAR 0 5
38491: PPUSH
38492: LD_INT 3
38494: PPUSH
38495: CALL_OW 275
38499: PUSH
38500: LD_VAR 0 4
38504: PUSH
38505: LD_INT 3
38507: ARRAY
38508: GREATEREQUAL
38509: AND
38510: ST_TO_ADDR
// end ;
38511: LD_VAR 0 3
38515: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38516: LD_INT 0
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
// pom := GetBase ( building ) ;
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: CALL_OW 274
38536: ST_TO_ADDR
// if not pom then
38537: LD_VAR 0 3
38541: NOT
38542: IFFALSE 38546
// exit ;
38544: GO 38716
// btype := GetBType ( building ) ;
38546: LD_ADDR_VAR 0 5
38550: PUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 266
38560: ST_TO_ADDR
// if btype = b_armoury then
38561: LD_VAR 0 5
38565: PUSH
38566: LD_INT 4
38568: EQUAL
38569: IFFALSE 38579
// btype := b_barracks ;
38571: LD_ADDR_VAR 0 5
38575: PUSH
38576: LD_INT 5
38578: ST_TO_ADDR
// if btype = b_depot then
38579: LD_VAR 0 5
38583: PUSH
38584: LD_INT 0
38586: EQUAL
38587: IFFALSE 38597
// btype := b_warehouse ;
38589: LD_ADDR_VAR 0 5
38593: PUSH
38594: LD_INT 1
38596: ST_TO_ADDR
// if btype = b_workshop then
38597: LD_VAR 0 5
38601: PUSH
38602: LD_INT 2
38604: EQUAL
38605: IFFALSE 38615
// btype := b_factory ;
38607: LD_ADDR_VAR 0 5
38611: PUSH
38612: LD_INT 3
38614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38615: LD_ADDR_VAR 0 4
38619: PUSH
38620: LD_VAR 0 5
38624: PPUSH
38625: LD_VAR 0 1
38629: PPUSH
38630: CALL_OW 248
38634: PPUSH
38635: CALL_OW 450
38639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38640: LD_ADDR_VAR 0 2
38644: PUSH
38645: LD_VAR 0 3
38649: PPUSH
38650: LD_INT 1
38652: PPUSH
38653: CALL_OW 275
38657: PUSH
38658: LD_VAR 0 4
38662: PUSH
38663: LD_INT 1
38665: ARRAY
38666: GREATEREQUAL
38667: PUSH
38668: LD_VAR 0 3
38672: PPUSH
38673: LD_INT 2
38675: PPUSH
38676: CALL_OW 275
38680: PUSH
38681: LD_VAR 0 4
38685: PUSH
38686: LD_INT 2
38688: ARRAY
38689: GREATEREQUAL
38690: AND
38691: PUSH
38692: LD_VAR 0 3
38696: PPUSH
38697: LD_INT 3
38699: PPUSH
38700: CALL_OW 275
38704: PUSH
38705: LD_VAR 0 4
38709: PUSH
38710: LD_INT 3
38712: ARRAY
38713: GREATEREQUAL
38714: AND
38715: ST_TO_ADDR
// end ;
38716: LD_VAR 0 2
38720: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38721: LD_INT 0
38723: PPUSH
38724: PPUSH
38725: PPUSH
// pom := GetBase ( building ) ;
38726: LD_ADDR_VAR 0 4
38730: PUSH
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 274
38740: ST_TO_ADDR
// if not pom then
38741: LD_VAR 0 4
38745: NOT
38746: IFFALSE 38750
// exit ;
38748: GO 38851
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38750: LD_ADDR_VAR 0 5
38754: PUSH
38755: LD_VAR 0 2
38759: PPUSH
38760: LD_VAR 0 1
38764: PPUSH
38765: CALL_OW 248
38769: PPUSH
38770: CALL_OW 450
38774: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_VAR 0 4
38784: PPUSH
38785: LD_INT 1
38787: PPUSH
38788: CALL_OW 275
38792: PUSH
38793: LD_VAR 0 5
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: GREATEREQUAL
38802: PUSH
38803: LD_VAR 0 4
38807: PPUSH
38808: LD_INT 2
38810: PPUSH
38811: CALL_OW 275
38815: PUSH
38816: LD_VAR 0 5
38820: PUSH
38821: LD_INT 2
38823: ARRAY
38824: GREATEREQUAL
38825: AND
38826: PUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: LD_INT 3
38834: PPUSH
38835: CALL_OW 275
38839: PUSH
38840: LD_VAR 0 5
38844: PUSH
38845: LD_INT 3
38847: ARRAY
38848: GREATEREQUAL
38849: AND
38850: ST_TO_ADDR
// end ;
38851: LD_VAR 0 3
38855: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38856: LD_INT 0
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
// result := false ;
38869: LD_ADDR_VAR 0 8
38873: PUSH
38874: LD_INT 0
38876: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38877: LD_VAR 0 5
38881: NOT
38882: PUSH
38883: LD_VAR 0 1
38887: NOT
38888: OR
38889: PUSH
38890: LD_VAR 0 2
38894: NOT
38895: OR
38896: PUSH
38897: LD_VAR 0 3
38901: NOT
38902: OR
38903: IFFALSE 38907
// exit ;
38905: GO 39721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38907: LD_ADDR_VAR 0 14
38911: PUSH
38912: LD_VAR 0 1
38916: PPUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_VAR 0 3
38926: PPUSH
38927: LD_VAR 0 4
38931: PPUSH
38932: LD_VAR 0 5
38936: PUSH
38937: LD_INT 1
38939: ARRAY
38940: PPUSH
38941: CALL_OW 248
38945: PPUSH
38946: LD_INT 0
38948: PPUSH
38949: CALL 40958 0 6
38953: ST_TO_ADDR
// if not hexes then
38954: LD_VAR 0 14
38958: NOT
38959: IFFALSE 38963
// exit ;
38961: GO 39721
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38963: LD_ADDR_VAR 0 17
38967: PUSH
38968: LD_VAR 0 5
38972: PPUSH
38973: LD_INT 22
38975: PUSH
38976: LD_VAR 0 13
38980: PPUSH
38981: CALL_OW 255
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 30
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 30
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PPUSH
39022: CALL_OW 72
39026: ST_TO_ADDR
// for i = 1 to hexes do
39027: LD_ADDR_VAR 0 9
39031: PUSH
39032: DOUBLE
39033: LD_INT 1
39035: DEC
39036: ST_TO_ADDR
39037: LD_VAR 0 14
39041: PUSH
39042: FOR_TO
39043: IFFALSE 39719
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39045: LD_ADDR_VAR 0 13
39049: PUSH
39050: LD_VAR 0 14
39054: PUSH
39055: LD_VAR 0 9
39059: ARRAY
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: PPUSH
39065: LD_VAR 0 14
39069: PUSH
39070: LD_VAR 0 9
39074: ARRAY
39075: PUSH
39076: LD_INT 2
39078: ARRAY
39079: PPUSH
39080: CALL_OW 428
39084: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39085: LD_VAR 0 14
39089: PUSH
39090: LD_VAR 0 9
39094: ARRAY
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PPUSH
39100: LD_VAR 0 14
39104: PUSH
39105: LD_VAR 0 9
39109: ARRAY
39110: PUSH
39111: LD_INT 2
39113: ARRAY
39114: PPUSH
39115: CALL_OW 351
39119: PUSH
39120: LD_VAR 0 14
39124: PUSH
39125: LD_VAR 0 9
39129: ARRAY
39130: PUSH
39131: LD_INT 1
39133: ARRAY
39134: PPUSH
39135: LD_VAR 0 14
39139: PUSH
39140: LD_VAR 0 9
39144: ARRAY
39145: PUSH
39146: LD_INT 2
39148: ARRAY
39149: PPUSH
39150: CALL_OW 488
39154: NOT
39155: OR
39156: PUSH
39157: LD_VAR 0 13
39161: PPUSH
39162: CALL_OW 247
39166: PUSH
39167: LD_INT 3
39169: EQUAL
39170: OR
39171: IFFALSE 39177
// exit ;
39173: POP
39174: POP
39175: GO 39721
// if not tmp then
39177: LD_VAR 0 13
39181: NOT
39182: IFFALSE 39186
// continue ;
39184: GO 39042
// result := true ;
39186: LD_ADDR_VAR 0 8
39190: PUSH
39191: LD_INT 1
39193: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39194: LD_VAR 0 6
39198: PUSH
39199: LD_VAR 0 13
39203: PPUSH
39204: CALL_OW 247
39208: PUSH
39209: LD_INT 2
39211: EQUAL
39212: AND
39213: PUSH
39214: LD_VAR 0 13
39218: PPUSH
39219: CALL_OW 263
39223: PUSH
39224: LD_INT 1
39226: EQUAL
39227: AND
39228: IFFALSE 39392
// begin if IsDrivenBy ( tmp ) then
39230: LD_VAR 0 13
39234: PPUSH
39235: CALL_OW 311
39239: IFFALSE 39243
// continue ;
39241: GO 39042
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39243: LD_VAR 0 6
39247: PPUSH
39248: LD_INT 3
39250: PUSH
39251: LD_INT 60
39253: PUSH
39254: EMPTY
39255: LIST
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 3
39263: PUSH
39264: LD_INT 55
39266: PUSH
39267: EMPTY
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PPUSH
39278: CALL_OW 72
39282: IFFALSE 39390
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39284: LD_ADDR_VAR 0 18
39288: PUSH
39289: LD_VAR 0 6
39293: PPUSH
39294: LD_INT 3
39296: PUSH
39297: LD_INT 60
39299: PUSH
39300: EMPTY
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 3
39309: PUSH
39310: LD_INT 55
39312: PUSH
39313: EMPTY
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PPUSH
39324: CALL_OW 72
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: ST_TO_ADDR
// if IsInUnit ( driver ) then
39333: LD_VAR 0 18
39337: PPUSH
39338: CALL_OW 310
39342: IFFALSE 39353
// ComExit ( driver ) ;
39344: LD_VAR 0 18
39348: PPUSH
39349: CALL 64142 0 1
// AddComEnterUnit ( driver , tmp ) ;
39353: LD_VAR 0 18
39357: PPUSH
39358: LD_VAR 0 13
39362: PPUSH
39363: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39367: LD_VAR 0 18
39371: PPUSH
39372: LD_VAR 0 7
39376: PPUSH
39377: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39381: LD_VAR 0 18
39385: PPUSH
39386: CALL_OW 181
// end ; continue ;
39390: GO 39042
// end ; if not cleaners or not tmp in cleaners then
39392: LD_VAR 0 6
39396: NOT
39397: PUSH
39398: LD_VAR 0 13
39402: PUSH
39403: LD_VAR 0 6
39407: IN
39408: NOT
39409: OR
39410: IFFALSE 39717
// begin if dep then
39412: LD_VAR 0 17
39416: IFFALSE 39552
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39418: LD_ADDR_VAR 0 16
39422: PUSH
39423: LD_VAR 0 17
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: PPUSH
39432: CALL_OW 250
39436: PPUSH
39437: LD_VAR 0 17
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: PPUSH
39446: CALL_OW 254
39450: PPUSH
39451: LD_INT 5
39453: PPUSH
39454: CALL_OW 272
39458: PUSH
39459: LD_VAR 0 17
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: CALL_OW 251
39472: PPUSH
39473: LD_VAR 0 17
39477: PUSH
39478: LD_INT 1
39480: ARRAY
39481: PPUSH
39482: CALL_OW 254
39486: PPUSH
39487: LD_INT 5
39489: PPUSH
39490: CALL_OW 273
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39499: LD_VAR 0 16
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: LD_VAR 0 16
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PPUSH
39517: CALL_OW 488
39521: IFFALSE 39552
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39523: LD_VAR 0 13
39527: PPUSH
39528: LD_VAR 0 16
39532: PUSH
39533: LD_INT 1
39535: ARRAY
39536: PPUSH
39537: LD_VAR 0 16
39541: PUSH
39542: LD_INT 2
39544: ARRAY
39545: PPUSH
39546: CALL_OW 111
// continue ;
39550: GO 39042
// end ; end ; r := GetDir ( tmp ) ;
39552: LD_ADDR_VAR 0 15
39556: PUSH
39557: LD_VAR 0 13
39561: PPUSH
39562: CALL_OW 254
39566: ST_TO_ADDR
// if r = 5 then
39567: LD_VAR 0 15
39571: PUSH
39572: LD_INT 5
39574: EQUAL
39575: IFFALSE 39585
// r := 0 ;
39577: LD_ADDR_VAR 0 15
39581: PUSH
39582: LD_INT 0
39584: ST_TO_ADDR
// for j = r to 5 do
39585: LD_ADDR_VAR 0 10
39589: PUSH
39590: DOUBLE
39591: LD_VAR 0 15
39595: DEC
39596: ST_TO_ADDR
39597: LD_INT 5
39599: PUSH
39600: FOR_TO
39601: IFFALSE 39715
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39603: LD_ADDR_VAR 0 11
39607: PUSH
39608: LD_VAR 0 13
39612: PPUSH
39613: CALL_OW 250
39617: PPUSH
39618: LD_VAR 0 10
39622: PPUSH
39623: LD_INT 2
39625: PPUSH
39626: CALL_OW 272
39630: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39631: LD_ADDR_VAR 0 12
39635: PUSH
39636: LD_VAR 0 13
39640: PPUSH
39641: CALL_OW 251
39645: PPUSH
39646: LD_VAR 0 10
39650: PPUSH
39651: LD_INT 2
39653: PPUSH
39654: CALL_OW 273
39658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39659: LD_VAR 0 11
39663: PPUSH
39664: LD_VAR 0 12
39668: PPUSH
39669: CALL_OW 488
39673: PUSH
39674: LD_VAR 0 11
39678: PPUSH
39679: LD_VAR 0 12
39683: PPUSH
39684: CALL_OW 428
39688: NOT
39689: AND
39690: IFFALSE 39713
// begin ComMoveXY ( tmp , _x , _y ) ;
39692: LD_VAR 0 13
39696: PPUSH
39697: LD_VAR 0 11
39701: PPUSH
39702: LD_VAR 0 12
39706: PPUSH
39707: CALL_OW 111
// break ;
39711: GO 39715
// end ; end ;
39713: GO 39600
39715: POP
39716: POP
// end ; end ;
39717: GO 39042
39719: POP
39720: POP
// end ;
39721: LD_VAR 0 8
39725: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39726: LD_INT 0
39728: PPUSH
// result := true ;
39729: LD_ADDR_VAR 0 3
39733: PUSH
39734: LD_INT 1
39736: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39737: LD_VAR 0 2
39741: PUSH
39742: LD_INT 24
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39756
39748: LD_INT 33
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39781
39756: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 32
39764: PPUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: CALL_OW 321
39774: PUSH
39775: LD_INT 2
39777: EQUAL
39778: ST_TO_ADDR
39779: GO 40101
39781: LD_INT 20
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39789
39787: GO 39814
39789: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_INT 6
39797: PPUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL_OW 321
39807: PUSH
39808: LD_INT 2
39810: EQUAL
39811: ST_TO_ADDR
39812: GO 40101
39814: LD_INT 22
39816: DOUBLE
39817: EQUAL
39818: IFTRUE 39828
39820: LD_INT 36
39822: DOUBLE
39823: EQUAL
39824: IFTRUE 39828
39826: GO 39853
39828: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_INT 15
39836: PPUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL_OW 321
39846: PUSH
39847: LD_INT 2
39849: EQUAL
39850: ST_TO_ADDR
39851: GO 40101
39853: LD_INT 30
39855: DOUBLE
39856: EQUAL
39857: IFTRUE 39861
39859: GO 39886
39861: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39862: LD_ADDR_VAR 0 3
39866: PUSH
39867: LD_INT 20
39869: PPUSH
39870: LD_VAR 0 1
39874: PPUSH
39875: CALL_OW 321
39879: PUSH
39880: LD_INT 2
39882: EQUAL
39883: ST_TO_ADDR
39884: GO 40101
39886: LD_INT 28
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39900
39892: LD_INT 21
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39900
39898: GO 39925
39900: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39901: LD_ADDR_VAR 0 3
39905: PUSH
39906: LD_INT 21
39908: PPUSH
39909: LD_VAR 0 1
39913: PPUSH
39914: CALL_OW 321
39918: PUSH
39919: LD_INT 2
39921: EQUAL
39922: ST_TO_ADDR
39923: GO 40101
39925: LD_INT 16
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 39960
39933: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_EXP 122
39943: PPUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 321
39953: PUSH
39954: LD_INT 2
39956: EQUAL
39957: ST_TO_ADDR
39958: GO 40101
39960: LD_INT 19
39962: DOUBLE
39963: EQUAL
39964: IFTRUE 39974
39966: LD_INT 23
39968: DOUBLE
39969: EQUAL
39970: IFTRUE 39974
39972: GO 40001
39974: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: LD_EXP 121
39984: PPUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 321
39994: PUSH
39995: LD_INT 2
39997: EQUAL
39998: ST_TO_ADDR
39999: GO 40101
40001: LD_INT 17
40003: DOUBLE
40004: EQUAL
40005: IFTRUE 40009
40007: GO 40034
40009: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40010: LD_ADDR_VAR 0 3
40014: PUSH
40015: LD_INT 39
40017: PPUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 321
40027: PUSH
40028: LD_INT 2
40030: EQUAL
40031: ST_TO_ADDR
40032: GO 40101
40034: LD_INT 18
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40042
40040: GO 40067
40042: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40043: LD_ADDR_VAR 0 3
40047: PUSH
40048: LD_INT 40
40050: PPUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 321
40060: PUSH
40061: LD_INT 2
40063: EQUAL
40064: ST_TO_ADDR
40065: GO 40101
40067: LD_INT 27
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40075
40073: GO 40100
40075: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40076: LD_ADDR_VAR 0 3
40080: PUSH
40081: LD_INT 35
40083: PPUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 321
40093: PUSH
40094: LD_INT 2
40096: EQUAL
40097: ST_TO_ADDR
40098: GO 40101
40100: POP
// end ;
40101: LD_VAR 0 3
40105: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40106: LD_INT 0
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
// result := false ;
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_INT 0
40126: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40127: LD_VAR 0 1
40131: NOT
40132: PUSH
40133: LD_VAR 0 1
40137: PPUSH
40138: CALL_OW 266
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: IN
40153: NOT
40154: OR
40155: PUSH
40156: LD_VAR 0 2
40160: NOT
40161: OR
40162: PUSH
40163: LD_VAR 0 5
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 4
40182: PUSH
40183: LD_INT 5
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: IN
40194: NOT
40195: OR
40196: PUSH
40197: LD_VAR 0 3
40201: PPUSH
40202: LD_VAR 0 4
40206: PPUSH
40207: CALL_OW 488
40211: NOT
40212: OR
40213: IFFALSE 40217
// exit ;
40215: GO 40953
// side := GetSide ( depot ) ;
40217: LD_ADDR_VAR 0 9
40221: PUSH
40222: LD_VAR 0 1
40226: PPUSH
40227: CALL_OW 255
40231: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40232: LD_VAR 0 9
40236: PPUSH
40237: LD_VAR 0 2
40241: PPUSH
40242: CALL 39726 0 2
40246: NOT
40247: IFFALSE 40251
// exit ;
40249: GO 40953
// pom := GetBase ( depot ) ;
40251: LD_ADDR_VAR 0 10
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 274
40265: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40266: LD_ADDR_VAR 0 11
40270: PUSH
40271: LD_VAR 0 2
40275: PPUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 248
40285: PPUSH
40286: CALL_OW 450
40290: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40291: LD_VAR 0 10
40295: PPUSH
40296: LD_INT 1
40298: PPUSH
40299: CALL_OW 275
40303: PUSH
40304: LD_VAR 0 11
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: GREATEREQUAL
40313: PUSH
40314: LD_VAR 0 10
40318: PPUSH
40319: LD_INT 2
40321: PPUSH
40322: CALL_OW 275
40326: PUSH
40327: LD_VAR 0 11
40331: PUSH
40332: LD_INT 2
40334: ARRAY
40335: GREATEREQUAL
40336: AND
40337: PUSH
40338: LD_VAR 0 10
40342: PPUSH
40343: LD_INT 3
40345: PPUSH
40346: CALL_OW 275
40350: PUSH
40351: LD_VAR 0 11
40355: PUSH
40356: LD_INT 3
40358: ARRAY
40359: GREATEREQUAL
40360: AND
40361: NOT
40362: IFFALSE 40366
// exit ;
40364: GO 40953
// if GetBType ( depot ) = b_depot then
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 266
40375: PUSH
40376: LD_INT 0
40378: EQUAL
40379: IFFALSE 40391
// dist := 28 else
40381: LD_ADDR_VAR 0 14
40385: PUSH
40386: LD_INT 28
40388: ST_TO_ADDR
40389: GO 40399
// dist := 36 ;
40391: LD_ADDR_VAR 0 14
40395: PUSH
40396: LD_INT 36
40398: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40399: LD_VAR 0 1
40403: PPUSH
40404: LD_VAR 0 3
40408: PPUSH
40409: LD_VAR 0 4
40413: PPUSH
40414: CALL_OW 297
40418: PUSH
40419: LD_VAR 0 14
40423: GREATER
40424: IFFALSE 40428
// exit ;
40426: GO 40953
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40428: LD_ADDR_VAR 0 12
40432: PUSH
40433: LD_VAR 0 2
40437: PPUSH
40438: LD_VAR 0 3
40442: PPUSH
40443: LD_VAR 0 4
40447: PPUSH
40448: LD_VAR 0 5
40452: PPUSH
40453: LD_VAR 0 1
40457: PPUSH
40458: CALL_OW 248
40462: PPUSH
40463: LD_INT 0
40465: PPUSH
40466: CALL 40958 0 6
40470: ST_TO_ADDR
// if not hexes then
40471: LD_VAR 0 12
40475: NOT
40476: IFFALSE 40480
// exit ;
40478: GO 40953
// hex := GetHexInfo ( x , y ) ;
40480: LD_ADDR_VAR 0 15
40484: PUSH
40485: LD_VAR 0 3
40489: PPUSH
40490: LD_VAR 0 4
40494: PPUSH
40495: CALL_OW 546
40499: ST_TO_ADDR
// if hex [ 1 ] then
40500: LD_VAR 0 15
40504: PUSH
40505: LD_INT 1
40507: ARRAY
40508: IFFALSE 40512
// exit ;
40510: GO 40953
// height := hex [ 2 ] ;
40512: LD_ADDR_VAR 0 13
40516: PUSH
40517: LD_VAR 0 15
40521: PUSH
40522: LD_INT 2
40524: ARRAY
40525: ST_TO_ADDR
// for i = 1 to hexes do
40526: LD_ADDR_VAR 0 7
40530: PUSH
40531: DOUBLE
40532: LD_INT 1
40534: DEC
40535: ST_TO_ADDR
40536: LD_VAR 0 12
40540: PUSH
40541: FOR_TO
40542: IFFALSE 40872
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40544: LD_VAR 0 12
40548: PUSH
40549: LD_VAR 0 7
40553: ARRAY
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PPUSH
40559: LD_VAR 0 12
40563: PUSH
40564: LD_VAR 0 7
40568: ARRAY
40569: PUSH
40570: LD_INT 2
40572: ARRAY
40573: PPUSH
40574: CALL_OW 488
40578: NOT
40579: PUSH
40580: LD_VAR 0 12
40584: PUSH
40585: LD_VAR 0 7
40589: ARRAY
40590: PUSH
40591: LD_INT 1
40593: ARRAY
40594: PPUSH
40595: LD_VAR 0 12
40599: PUSH
40600: LD_VAR 0 7
40604: ARRAY
40605: PUSH
40606: LD_INT 2
40608: ARRAY
40609: PPUSH
40610: CALL_OW 428
40614: PUSH
40615: LD_INT 0
40617: GREATER
40618: OR
40619: PUSH
40620: LD_VAR 0 12
40624: PUSH
40625: LD_VAR 0 7
40629: ARRAY
40630: PUSH
40631: LD_INT 1
40633: ARRAY
40634: PPUSH
40635: LD_VAR 0 12
40639: PUSH
40640: LD_VAR 0 7
40644: ARRAY
40645: PUSH
40646: LD_INT 2
40648: ARRAY
40649: PPUSH
40650: CALL_OW 351
40654: OR
40655: IFFALSE 40661
// exit ;
40657: POP
40658: POP
40659: GO 40953
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40661: LD_ADDR_VAR 0 8
40665: PUSH
40666: LD_VAR 0 12
40670: PUSH
40671: LD_VAR 0 7
40675: ARRAY
40676: PUSH
40677: LD_INT 1
40679: ARRAY
40680: PPUSH
40681: LD_VAR 0 12
40685: PUSH
40686: LD_VAR 0 7
40690: ARRAY
40691: PUSH
40692: LD_INT 2
40694: ARRAY
40695: PPUSH
40696: CALL_OW 546
40700: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40701: LD_VAR 0 8
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: PUSH
40710: LD_VAR 0 8
40714: PUSH
40715: LD_INT 2
40717: ARRAY
40718: PUSH
40719: LD_VAR 0 13
40723: PUSH
40724: LD_INT 2
40726: PLUS
40727: GREATER
40728: OR
40729: PUSH
40730: LD_VAR 0 8
40734: PUSH
40735: LD_INT 2
40737: ARRAY
40738: PUSH
40739: LD_VAR 0 13
40743: PUSH
40744: LD_INT 2
40746: MINUS
40747: LESS
40748: OR
40749: PUSH
40750: LD_VAR 0 8
40754: PUSH
40755: LD_INT 3
40757: ARRAY
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 8
40764: PUSH
40765: LD_INT 9
40767: PUSH
40768: LD_INT 10
40770: PUSH
40771: LD_INT 11
40773: PUSH
40774: LD_INT 12
40776: PUSH
40777: LD_INT 13
40779: PUSH
40780: LD_INT 16
40782: PUSH
40783: LD_INT 17
40785: PUSH
40786: LD_INT 18
40788: PUSH
40789: LD_INT 19
40791: PUSH
40792: LD_INT 20
40794: PUSH
40795: LD_INT 21
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: IN
40813: NOT
40814: OR
40815: PUSH
40816: LD_VAR 0 8
40820: PUSH
40821: LD_INT 5
40823: ARRAY
40824: NOT
40825: OR
40826: PUSH
40827: LD_VAR 0 8
40831: PUSH
40832: LD_INT 6
40834: ARRAY
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: LD_INT 7
40844: PUSH
40845: LD_INT 9
40847: PUSH
40848: LD_INT 10
40850: PUSH
40851: LD_INT 11
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: IN
40862: NOT
40863: OR
40864: IFFALSE 40870
// exit ;
40866: POP
40867: POP
40868: GO 40953
// end ;
40870: GO 40541
40872: POP
40873: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40874: LD_VAR 0 9
40878: PPUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: LD_VAR 0 4
40888: PPUSH
40889: LD_INT 20
40891: PPUSH
40892: CALL 32898 0 4
40896: PUSH
40897: LD_INT 4
40899: ARRAY
40900: IFFALSE 40904
// exit ;
40902: GO 40953
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40904: LD_VAR 0 2
40908: PUSH
40909: LD_INT 29
40911: PUSH
40912: LD_INT 30
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: IN
40919: PUSH
40920: LD_VAR 0 3
40924: PPUSH
40925: LD_VAR 0 4
40929: PPUSH
40930: LD_VAR 0 9
40934: PPUSH
40935: CALL_OW 440
40939: NOT
40940: AND
40941: IFFALSE 40945
// exit ;
40943: GO 40953
// result := true ;
40945: LD_ADDR_VAR 0 6
40949: PUSH
40950: LD_INT 1
40952: ST_TO_ADDR
// end ;
40953: LD_VAR 0 6
40957: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40958: LD_INT 0
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
// result = [ ] ;
41018: LD_ADDR_VAR 0 7
41022: PUSH
41023: EMPTY
41024: ST_TO_ADDR
// temp_list = [ ] ;
41025: LD_ADDR_VAR 0 9
41029: PUSH
41030: EMPTY
41031: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41032: LD_VAR 0 4
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: LD_INT 4
41051: PUSH
41052: LD_INT 5
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: IN
41063: NOT
41064: PUSH
41065: LD_VAR 0 1
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: IN
41080: PUSH
41081: LD_VAR 0 5
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: IN
41100: NOT
41101: AND
41102: OR
41103: IFFALSE 41107
// exit ;
41105: GO 59498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41107: LD_VAR 0 1
41111: PUSH
41112: LD_INT 6
41114: PUSH
41115: LD_INT 7
41117: PUSH
41118: LD_INT 8
41120: PUSH
41121: LD_INT 13
41123: PUSH
41124: LD_INT 12
41126: PUSH
41127: LD_INT 15
41129: PUSH
41130: LD_INT 11
41132: PUSH
41133: LD_INT 14
41135: PUSH
41136: LD_INT 10
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: IN
41150: IFFALSE 41160
// btype = b_lab ;
41152: LD_ADDR_VAR 0 1
41156: PUSH
41157: LD_INT 6
41159: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41160: LD_VAR 0 6
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: IN
41179: NOT
41180: PUSH
41181: LD_VAR 0 1
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 6
41200: PUSH
41201: LD_INT 36
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: LD_INT 5
41209: PUSH
41210: LD_INT 31
41212: PUSH
41213: LD_INT 32
41215: PUSH
41216: LD_INT 33
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: IN
41232: NOT
41233: PUSH
41234: LD_VAR 0 6
41238: PUSH
41239: LD_INT 1
41241: EQUAL
41242: AND
41243: OR
41244: PUSH
41245: LD_VAR 0 1
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: IN
41260: NOT
41261: PUSH
41262: LD_VAR 0 6
41266: PUSH
41267: LD_INT 2
41269: EQUAL
41270: AND
41271: OR
41272: IFFALSE 41282
// mode = 0 ;
41274: LD_ADDR_VAR 0 6
41278: PUSH
41279: LD_INT 0
41281: ST_TO_ADDR
// case mode of 0 :
41282: LD_VAR 0 6
41286: PUSH
41287: LD_INT 0
41289: DOUBLE
41290: EQUAL
41291: IFTRUE 41295
41293: GO 52748
41295: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41296: LD_ADDR_VAR 0 11
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 3
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 3
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41489: LD_ADDR_VAR 0 12
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 3
41646: NEG
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41685: LD_ADDR_VAR 0 13
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 3
41856: NEG
41857: PUSH
41858: LD_INT 3
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41884: LD_ADDR_VAR 0 14
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 3
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42080: LD_ADDR_VAR 0 15
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42273: LD_ADDR_VAR 0 16
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 3
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42466: LD_ADDR_VAR 0 17
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 2
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42696: LD_ADDR_VAR 0 18
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42926: LD_ADDR_VAR 0 19
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43156: LD_ADDR_VAR 0 20
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43386: LD_ADDR_VAR 0 21
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43616: LD_ADDR_VAR 0 22
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43846: LD_ADDR_VAR 0 23
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 3
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44126: LD_ADDR_VAR 0 24
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44402: LD_ADDR_VAR 0 25
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 3
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44676: LD_ADDR_VAR 0 26
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44952: LD_ADDR_VAR 0 27
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 3
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 3
45197: NEG
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45232: LD_ADDR_VAR 0 28
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 3
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45514: LD_ADDR_VAR 0 29
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45793: LD_ADDR_VAR 0 30
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46071: LD_ADDR_VAR 0 31
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 3
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: NEG
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46349: LD_ADDR_VAR 0 32
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46627: LD_ADDR_VAR 0 33
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 3
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46906: LD_ADDR_VAR 0 34
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 3
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47186: LD_ADDR_VAR 0 35
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47298: LD_ADDR_VAR 0 36
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47410: LD_ADDR_VAR 0 37
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47522: LD_ADDR_VAR 0 38
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47634: LD_ADDR_VAR 0 39
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47746: LD_ADDR_VAR 0 40
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47858: LD_ADDR_VAR 0 41
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 3
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48208: LD_ADDR_VAR 0 42
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 3
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 3
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48558: LD_ADDR_VAR 0 43
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 3
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: NEG
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48906: LD_ADDR_VAR 0 44
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49256: LD_ADDR_VAR 0 45
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: LD_INT 3
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49606: LD_ADDR_VAR 0 46
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 3
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49954: LD_ADDR_VAR 0 47
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50105: LD_ADDR_VAR 0 48
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50252: LD_ADDR_VAR 0 49
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50396: LD_ADDR_VAR 0 50
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50540: LD_ADDR_VAR 0 51
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50687: LD_ADDR_VAR 0 52
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50838: LD_ADDR_VAR 0 53
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51068: LD_ADDR_VAR 0 54
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51298: LD_ADDR_VAR 0 55
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51528: LD_ADDR_VAR 0 56
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51758: LD_ADDR_VAR 0 57
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51988: LD_ADDR_VAR 0 58
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52218: LD_ADDR_VAR 0 59
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52306: LD_ADDR_VAR 0 60
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52394: LD_ADDR_VAR 0 61
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52482: LD_ADDR_VAR 0 62
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52570: LD_ADDR_VAR 0 63
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52658: LD_ADDR_VAR 0 64
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// end ; 1 :
52746: GO 58643
52748: LD_INT 1
52750: DOUBLE
52751: EQUAL
52752: IFTRUE 52756
52754: GO 55379
52756: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52757: LD_ADDR_VAR 0 11
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52801: LD_ADDR_VAR 0 12
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 3
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52842: LD_ADDR_VAR 0 13
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52882: LD_ADDR_VAR 0 14
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52923: LD_ADDR_VAR 0 15
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52967: LD_ADDR_VAR 0 16
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53013: LD_ADDR_VAR 0 17
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53057: LD_ADDR_VAR 0 18
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53098: LD_ADDR_VAR 0 19
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53138: LD_ADDR_VAR 0 20
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53179: LD_ADDR_VAR 0 21
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53223: LD_ADDR_VAR 0 22
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: LD_INT 3
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53269: LD_ADDR_VAR 0 23
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53313: LD_ADDR_VAR 0 24
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 4
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: LIST
53353: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53354: LD_ADDR_VAR 0 25
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 4
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53394: LD_ADDR_VAR 0 26
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53435: LD_ADDR_VAR 0 27
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 4
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53479: LD_ADDR_VAR 0 28
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: LD_INT 4
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 4
53510: NEG
53511: PUSH
53512: LD_INT 3
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53525: LD_ADDR_VAR 0 29
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 4
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 4
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 5
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 5
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 6
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 6
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 5
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53680: LD_ADDR_VAR 0 30
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 4
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 4
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 5
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 5
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 6
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 6
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53823: LD_ADDR_VAR 0 31
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 4
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: LD_INT 4
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: LD_INT 4
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 5
53890: PUSH
53891: LD_INT 4
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 5
53900: PUSH
53901: LD_INT 5
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 4
53910: PUSH
53911: LD_INT 5
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 6
53920: PUSH
53921: LD_INT 5
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 6
53930: PUSH
53931: LD_INT 6
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 5
53940: PUSH
53941: LD_INT 6
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53962: LD_ADDR_VAR 0 32
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 4
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 4
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 5
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 5
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 4
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 6
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 6
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 5
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54105: LD_ADDR_VAR 0 33
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 3
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 4
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 4
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 4
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 5
54191: NEG
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 5
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 5
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 6
54225: NEG
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 6
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54260: LD_ADDR_VAR 0 34
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: LD_INT 4
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 4
54315: NEG
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 4
54327: NEG
54328: PUSH
54329: LD_INT 4
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 4
54339: NEG
54340: PUSH
54341: LD_INT 5
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 5
54351: NEG
54352: PUSH
54353: LD_INT 4
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 5
54363: NEG
54364: PUSH
54365: LD_INT 5
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 5
54375: NEG
54376: PUSH
54377: LD_INT 6
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 6
54387: NEG
54388: PUSH
54389: LD_INT 5
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 6
54399: NEG
54400: PUSH
54401: LD_INT 6
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54423: LD_ADDR_VAR 0 41
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54467: LD_ADDR_VAR 0 42
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: LIST
54507: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54508: LD_ADDR_VAR 0 43
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54548: LD_ADDR_VAR 0 44
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54589: LD_ADDR_VAR 0 45
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54633: LD_ADDR_VAR 0 46
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: LIST
54678: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54679: LD_ADDR_VAR 0 47
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 3
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54712: LD_ADDR_VAR 0 48
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54743: LD_ADDR_VAR 0 49
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54772: LD_ADDR_VAR 0 50
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54801: LD_ADDR_VAR 0 51
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54832: LD_ADDR_VAR 0 52
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54865: LD_ADDR_VAR 0 53
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54909: LD_ADDR_VAR 0 54
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54950: LD_ADDR_VAR 0 55
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: LD_INT 3
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54990: LD_ADDR_VAR 0 56
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55031: LD_ADDR_VAR 0 57
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55075: LD_ADDR_VAR 0 58
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55121: LD_ADDR_VAR 0 59
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55165: LD_ADDR_VAR 0 60
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55206: LD_ADDR_VAR 0 61
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55246: LD_ADDR_VAR 0 62
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55287: LD_ADDR_VAR 0 63
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55331: LD_ADDR_VAR 0 64
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// end ; 2 :
55377: GO 58643
55379: LD_INT 2
55381: DOUBLE
55382: EQUAL
55383: IFTRUE 55387
55385: GO 58642
55387: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55388: LD_ADDR_VAR 0 29
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 4
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 5
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 4
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 5
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 4
55518: PUSH
55519: LD_INT 4
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: LD_INT 4
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 3
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 4
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 4
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 5
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 5
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 4
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 5
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 4
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 4
55750: NEG
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 4
55773: NEG
55774: PUSH
55775: LD_INT 4
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 4
55785: NEG
55786: PUSH
55787: LD_INT 5
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 3
55797: NEG
55798: PUSH
55799: LD_INT 4
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 3
55809: NEG
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 4
55821: NEG
55822: PUSH
55823: LD_INT 3
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 5
55833: NEG
55834: PUSH
55835: LD_INT 4
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 5
55845: NEG
55846: PUSH
55847: LD_INT 5
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 5
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 5
55869: NEG
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55926: LD_ADDR_VAR 0 30
55930: PUSH
55931: LD_INT 4
55933: PUSH
55934: LD_INT 4
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: LD_INT 3
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 5
55953: PUSH
55954: LD_INT 4
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 5
55963: PUSH
55964: LD_INT 5
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: LD_INT 5
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 3
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 5
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 5
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 3
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 4
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 4
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 4
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 5
56172: NEG
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 5
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 5
56195: NEG
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: LD_INT 4
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: NEG
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 4
56290: NEG
56291: PUSH
56292: LD_INT 4
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 4
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 4
56314: NEG
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 4
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 4
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 5
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 5
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56473: LD_ADDR_VAR 0 31
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 5
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 5
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 4
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 5
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: NEG
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 4
56629: NEG
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 4
56640: NEG
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 4
56652: NEG
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 4
56675: NEG
56676: PUSH
56677: LD_INT 4
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 4
56687: NEG
56688: PUSH
56689: LD_INT 5
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: LD_INT 4
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: NEG
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: NEG
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 5
56735: NEG
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 5
56747: NEG
56748: PUSH
56749: LD_INT 5
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 5
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 5
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 3
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 4
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 4
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 4
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 4
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 4
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 5
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 5
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 4
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 5
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57023: LD_ADDR_VAR 0 32
57027: PUSH
57028: LD_INT 4
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 4
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 5
57086: NEG
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 5
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 5
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: NEG
57193: PUSH
57194: LD_INT 3
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: NEG
57205: PUSH
57206: LD_INT 4
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 4
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 4
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 5
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 4
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 3
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 4
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 5
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 5
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 4
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 4
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 4
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 5
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: LD_INT 5
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 5
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: LD_INT 5
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57570: LD_ADDR_VAR 0 33
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 4
57589: NEG
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: LD_INT 4
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 4
57625: NEG
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: LD_INT 4
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 5
57649: NEG
57650: PUSH
57651: LD_INT 5
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: LD_INT 5
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 5
57673: NEG
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 4
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 3
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 4
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 5
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 5
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 4
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 5
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: LD_INT 3
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 4
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 4
57910: PUSH
57911: LD_INT 4
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: LD_INT 4
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 4
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 4
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 4
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 5
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: LD_INT 5
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58108: LD_ADDR_VAR 0 34
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 4
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 5
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 4
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 4
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 5
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 5
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 5
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: LD_INT 5
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 5
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: LD_INT 5
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 4
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 4
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 4
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 4
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 4
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 5
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// end ; end ;
58640: GO 58643
58642: POP
// case btype of b_depot , b_warehouse :
58643: LD_VAR 0 1
58647: PUSH
58648: LD_INT 0
58650: DOUBLE
58651: EQUAL
58652: IFTRUE 58662
58654: LD_INT 1
58656: DOUBLE
58657: EQUAL
58658: IFTRUE 58662
58660: GO 58863
58662: POP
// case nation of nation_american :
58663: LD_VAR 0 5
58667: PUSH
58668: LD_INT 1
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58676
58674: GO 58732
58676: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58677: LD_ADDR_VAR 0 9
58681: PUSH
58682: LD_VAR 0 11
58686: PUSH
58687: LD_VAR 0 12
58691: PUSH
58692: LD_VAR 0 13
58696: PUSH
58697: LD_VAR 0 14
58701: PUSH
58702: LD_VAR 0 15
58706: PUSH
58707: LD_VAR 0 16
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: PUSH
58720: LD_VAR 0 4
58724: PUSH
58725: LD_INT 1
58727: PLUS
58728: ARRAY
58729: ST_TO_ADDR
58730: GO 58861
58732: LD_INT 2
58734: DOUBLE
58735: EQUAL
58736: IFTRUE 58740
58738: GO 58796
58740: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58741: LD_ADDR_VAR 0 9
58745: PUSH
58746: LD_VAR 0 17
58750: PUSH
58751: LD_VAR 0 18
58755: PUSH
58756: LD_VAR 0 19
58760: PUSH
58761: LD_VAR 0 20
58765: PUSH
58766: LD_VAR 0 21
58770: PUSH
58771: LD_VAR 0 22
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: PUSH
58784: LD_VAR 0 4
58788: PUSH
58789: LD_INT 1
58791: PLUS
58792: ARRAY
58793: ST_TO_ADDR
58794: GO 58861
58796: LD_INT 3
58798: DOUBLE
58799: EQUAL
58800: IFTRUE 58804
58802: GO 58860
58804: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58805: LD_ADDR_VAR 0 9
58809: PUSH
58810: LD_VAR 0 23
58814: PUSH
58815: LD_VAR 0 24
58819: PUSH
58820: LD_VAR 0 25
58824: PUSH
58825: LD_VAR 0 26
58829: PUSH
58830: LD_VAR 0 27
58834: PUSH
58835: LD_VAR 0 28
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: PUSH
58848: LD_VAR 0 4
58852: PUSH
58853: LD_INT 1
58855: PLUS
58856: ARRAY
58857: ST_TO_ADDR
58858: GO 58861
58860: POP
58861: GO 59416
58863: LD_INT 2
58865: DOUBLE
58866: EQUAL
58867: IFTRUE 58877
58869: LD_INT 3
58871: DOUBLE
58872: EQUAL
58873: IFTRUE 58877
58875: GO 58933
58877: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58878: LD_ADDR_VAR 0 9
58882: PUSH
58883: LD_VAR 0 29
58887: PUSH
58888: LD_VAR 0 30
58892: PUSH
58893: LD_VAR 0 31
58897: PUSH
58898: LD_VAR 0 32
58902: PUSH
58903: LD_VAR 0 33
58907: PUSH
58908: LD_VAR 0 34
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: PUSH
58921: LD_VAR 0 4
58925: PUSH
58926: LD_INT 1
58928: PLUS
58929: ARRAY
58930: ST_TO_ADDR
58931: GO 59416
58933: LD_INT 16
58935: DOUBLE
58936: EQUAL
58937: IFTRUE 58995
58939: LD_INT 17
58941: DOUBLE
58942: EQUAL
58943: IFTRUE 58995
58945: LD_INT 18
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58995
58951: LD_INT 19
58953: DOUBLE
58954: EQUAL
58955: IFTRUE 58995
58957: LD_INT 22
58959: DOUBLE
58960: EQUAL
58961: IFTRUE 58995
58963: LD_INT 20
58965: DOUBLE
58966: EQUAL
58967: IFTRUE 58995
58969: LD_INT 21
58971: DOUBLE
58972: EQUAL
58973: IFTRUE 58995
58975: LD_INT 23
58977: DOUBLE
58978: EQUAL
58979: IFTRUE 58995
58981: LD_INT 24
58983: DOUBLE
58984: EQUAL
58985: IFTRUE 58995
58987: LD_INT 25
58989: DOUBLE
58990: EQUAL
58991: IFTRUE 58995
58993: GO 59051
58995: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58996: LD_ADDR_VAR 0 9
59000: PUSH
59001: LD_VAR 0 35
59005: PUSH
59006: LD_VAR 0 36
59010: PUSH
59011: LD_VAR 0 37
59015: PUSH
59016: LD_VAR 0 38
59020: PUSH
59021: LD_VAR 0 39
59025: PUSH
59026: LD_VAR 0 40
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: PUSH
59039: LD_VAR 0 4
59043: PUSH
59044: LD_INT 1
59046: PLUS
59047: ARRAY
59048: ST_TO_ADDR
59049: GO 59416
59051: LD_INT 6
59053: DOUBLE
59054: EQUAL
59055: IFTRUE 59107
59057: LD_INT 7
59059: DOUBLE
59060: EQUAL
59061: IFTRUE 59107
59063: LD_INT 8
59065: DOUBLE
59066: EQUAL
59067: IFTRUE 59107
59069: LD_INT 13
59071: DOUBLE
59072: EQUAL
59073: IFTRUE 59107
59075: LD_INT 12
59077: DOUBLE
59078: EQUAL
59079: IFTRUE 59107
59081: LD_INT 15
59083: DOUBLE
59084: EQUAL
59085: IFTRUE 59107
59087: LD_INT 11
59089: DOUBLE
59090: EQUAL
59091: IFTRUE 59107
59093: LD_INT 14
59095: DOUBLE
59096: EQUAL
59097: IFTRUE 59107
59099: LD_INT 10
59101: DOUBLE
59102: EQUAL
59103: IFTRUE 59107
59105: GO 59163
59107: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59108: LD_ADDR_VAR 0 9
59112: PUSH
59113: LD_VAR 0 41
59117: PUSH
59118: LD_VAR 0 42
59122: PUSH
59123: LD_VAR 0 43
59127: PUSH
59128: LD_VAR 0 44
59132: PUSH
59133: LD_VAR 0 45
59137: PUSH
59138: LD_VAR 0 46
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: PUSH
59151: LD_VAR 0 4
59155: PUSH
59156: LD_INT 1
59158: PLUS
59159: ARRAY
59160: ST_TO_ADDR
59161: GO 59416
59163: LD_INT 36
59165: DOUBLE
59166: EQUAL
59167: IFTRUE 59171
59169: GO 59227
59171: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59172: LD_ADDR_VAR 0 9
59176: PUSH
59177: LD_VAR 0 47
59181: PUSH
59182: LD_VAR 0 48
59186: PUSH
59187: LD_VAR 0 49
59191: PUSH
59192: LD_VAR 0 50
59196: PUSH
59197: LD_VAR 0 51
59201: PUSH
59202: LD_VAR 0 52
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: PUSH
59215: LD_VAR 0 4
59219: PUSH
59220: LD_INT 1
59222: PLUS
59223: ARRAY
59224: ST_TO_ADDR
59225: GO 59416
59227: LD_INT 4
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59253
59233: LD_INT 5
59235: DOUBLE
59236: EQUAL
59237: IFTRUE 59253
59239: LD_INT 34
59241: DOUBLE
59242: EQUAL
59243: IFTRUE 59253
59245: LD_INT 37
59247: DOUBLE
59248: EQUAL
59249: IFTRUE 59253
59251: GO 59309
59253: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59254: LD_ADDR_VAR 0 9
59258: PUSH
59259: LD_VAR 0 53
59263: PUSH
59264: LD_VAR 0 54
59268: PUSH
59269: LD_VAR 0 55
59273: PUSH
59274: LD_VAR 0 56
59278: PUSH
59279: LD_VAR 0 57
59283: PUSH
59284: LD_VAR 0 58
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: PUSH
59297: LD_VAR 0 4
59301: PUSH
59302: LD_INT 1
59304: PLUS
59305: ARRAY
59306: ST_TO_ADDR
59307: GO 59416
59309: LD_INT 31
59311: DOUBLE
59312: EQUAL
59313: IFTRUE 59359
59315: LD_INT 32
59317: DOUBLE
59318: EQUAL
59319: IFTRUE 59359
59321: LD_INT 33
59323: DOUBLE
59324: EQUAL
59325: IFTRUE 59359
59327: LD_INT 27
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59359
59333: LD_INT 26
59335: DOUBLE
59336: EQUAL
59337: IFTRUE 59359
59339: LD_INT 28
59341: DOUBLE
59342: EQUAL
59343: IFTRUE 59359
59345: LD_INT 29
59347: DOUBLE
59348: EQUAL
59349: IFTRUE 59359
59351: LD_INT 30
59353: DOUBLE
59354: EQUAL
59355: IFTRUE 59359
59357: GO 59415
59359: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59360: LD_ADDR_VAR 0 9
59364: PUSH
59365: LD_VAR 0 59
59369: PUSH
59370: LD_VAR 0 60
59374: PUSH
59375: LD_VAR 0 61
59379: PUSH
59380: LD_VAR 0 62
59384: PUSH
59385: LD_VAR 0 63
59389: PUSH
59390: LD_VAR 0 64
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: PUSH
59403: LD_VAR 0 4
59407: PUSH
59408: LD_INT 1
59410: PLUS
59411: ARRAY
59412: ST_TO_ADDR
59413: GO 59416
59415: POP
// temp_list2 = [ ] ;
59416: LD_ADDR_VAR 0 10
59420: PUSH
59421: EMPTY
59422: ST_TO_ADDR
// for i in temp_list do
59423: LD_ADDR_VAR 0 8
59427: PUSH
59428: LD_VAR 0 9
59432: PUSH
59433: FOR_IN
59434: IFFALSE 59486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59436: LD_ADDR_VAR 0 10
59440: PUSH
59441: LD_VAR 0 10
59445: PUSH
59446: LD_VAR 0 8
59450: PUSH
59451: LD_INT 1
59453: ARRAY
59454: PUSH
59455: LD_VAR 0 2
59459: PLUS
59460: PUSH
59461: LD_VAR 0 8
59465: PUSH
59466: LD_INT 2
59468: ARRAY
59469: PUSH
59470: LD_VAR 0 3
59474: PLUS
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: ADD
59483: ST_TO_ADDR
59484: GO 59433
59486: POP
59487: POP
// result = temp_list2 ;
59488: LD_ADDR_VAR 0 7
59492: PUSH
59493: LD_VAR 0 10
59497: ST_TO_ADDR
// end ;
59498: LD_VAR 0 7
59502: RET
// export function EnemyInRange ( unit , dist ) ; begin
59503: LD_INT 0
59505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59506: LD_ADDR_VAR 0 3
59510: PUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 255
59520: PPUSH
59521: LD_VAR 0 1
59525: PPUSH
59526: CALL_OW 250
59530: PPUSH
59531: LD_VAR 0 1
59535: PPUSH
59536: CALL_OW 251
59540: PPUSH
59541: LD_VAR 0 2
59545: PPUSH
59546: CALL 32898 0 4
59550: PUSH
59551: LD_INT 4
59553: ARRAY
59554: ST_TO_ADDR
// end ;
59555: LD_VAR 0 3
59559: RET
// export function PlayerSeeMe ( unit ) ; begin
59560: LD_INT 0
59562: PPUSH
// result := See ( your_side , unit ) ;
59563: LD_ADDR_VAR 0 2
59567: PUSH
59568: LD_OWVAR 2
59572: PPUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 292
59582: ST_TO_ADDR
// end ;
59583: LD_VAR 0 2
59587: RET
// export function ReverseDir ( unit ) ; begin
59588: LD_INT 0
59590: PPUSH
// if not unit then
59591: LD_VAR 0 1
59595: NOT
59596: IFFALSE 59600
// exit ;
59598: GO 59623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59600: LD_ADDR_VAR 0 2
59604: PUSH
59605: LD_VAR 0 1
59609: PPUSH
59610: CALL_OW 254
59614: PUSH
59615: LD_INT 3
59617: PLUS
59618: PUSH
59619: LD_INT 6
59621: MOD
59622: ST_TO_ADDR
// end ;
59623: LD_VAR 0 2
59627: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59628: LD_INT 0
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
59634: PPUSH
// if not hexes then
59635: LD_VAR 0 2
59639: NOT
59640: IFFALSE 59644
// exit ;
59642: GO 59792
// dist := 9999 ;
59644: LD_ADDR_VAR 0 5
59648: PUSH
59649: LD_INT 9999
59651: ST_TO_ADDR
// for i = 1 to hexes do
59652: LD_ADDR_VAR 0 4
59656: PUSH
59657: DOUBLE
59658: LD_INT 1
59660: DEC
59661: ST_TO_ADDR
59662: LD_VAR 0 2
59666: PUSH
59667: FOR_TO
59668: IFFALSE 59780
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59670: LD_VAR 0 1
59674: PPUSH
59675: LD_VAR 0 2
59679: PUSH
59680: LD_VAR 0 4
59684: ARRAY
59685: PUSH
59686: LD_INT 1
59688: ARRAY
59689: PPUSH
59690: LD_VAR 0 2
59694: PUSH
59695: LD_VAR 0 4
59699: ARRAY
59700: PUSH
59701: LD_INT 2
59703: ARRAY
59704: PPUSH
59705: CALL_OW 297
59709: PUSH
59710: LD_VAR 0 5
59714: LESS
59715: IFFALSE 59778
// begin hex := hexes [ i ] ;
59717: LD_ADDR_VAR 0 7
59721: PUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_VAR 0 4
59731: ARRAY
59732: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59733: LD_ADDR_VAR 0 5
59737: PUSH
59738: LD_VAR 0 1
59742: PPUSH
59743: LD_VAR 0 2
59747: PUSH
59748: LD_VAR 0 4
59752: ARRAY
59753: PUSH
59754: LD_INT 1
59756: ARRAY
59757: PPUSH
59758: LD_VAR 0 2
59762: PUSH
59763: LD_VAR 0 4
59767: ARRAY
59768: PUSH
59769: LD_INT 2
59771: ARRAY
59772: PPUSH
59773: CALL_OW 297
59777: ST_TO_ADDR
// end ; end ;
59778: GO 59667
59780: POP
59781: POP
// result := hex ;
59782: LD_ADDR_VAR 0 3
59786: PUSH
59787: LD_VAR 0 7
59791: ST_TO_ADDR
// end ;
59792: LD_VAR 0 3
59796: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59797: LD_INT 0
59799: PPUSH
59800: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59801: LD_VAR 0 1
59805: NOT
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 21
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 23
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PPUSH
59836: CALL_OW 69
59840: IN
59841: NOT
59842: OR
59843: IFFALSE 59847
// exit ;
59845: GO 59894
// for i = 1 to 3 do
59847: LD_ADDR_VAR 0 3
59851: PUSH
59852: DOUBLE
59853: LD_INT 1
59855: DEC
59856: ST_TO_ADDR
59857: LD_INT 3
59859: PUSH
59860: FOR_TO
59861: IFFALSE 59892
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59863: LD_VAR 0 1
59867: PPUSH
59868: CALL_OW 250
59872: PPUSH
59873: LD_VAR 0 1
59877: PPUSH
59878: CALL_OW 251
59882: PPUSH
59883: LD_INT 1
59885: PPUSH
59886: CALL_OW 453
59890: GO 59860
59892: POP
59893: POP
// end ;
59894: LD_VAR 0 2
59898: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59899: LD_INT 0
59901: PPUSH
59902: PPUSH
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59907: LD_VAR 0 1
59911: NOT
59912: PUSH
59913: LD_VAR 0 2
59917: NOT
59918: OR
59919: PUSH
59920: LD_VAR 0 1
59924: PPUSH
59925: CALL_OW 314
59929: OR
59930: IFFALSE 59934
// exit ;
59932: GO 60375
// x := GetX ( enemy_unit ) ;
59934: LD_ADDR_VAR 0 7
59938: PUSH
59939: LD_VAR 0 2
59943: PPUSH
59944: CALL_OW 250
59948: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59949: LD_ADDR_VAR 0 8
59953: PUSH
59954: LD_VAR 0 2
59958: PPUSH
59959: CALL_OW 251
59963: ST_TO_ADDR
// if not x or not y then
59964: LD_VAR 0 7
59968: NOT
59969: PUSH
59970: LD_VAR 0 8
59974: NOT
59975: OR
59976: IFFALSE 59980
// exit ;
59978: GO 60375
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59980: LD_ADDR_VAR 0 6
59984: PUSH
59985: LD_VAR 0 7
59989: PPUSH
59990: LD_INT 0
59992: PPUSH
59993: LD_INT 4
59995: PPUSH
59996: CALL_OW 272
60000: PUSH
60001: LD_VAR 0 8
60005: PPUSH
60006: LD_INT 0
60008: PPUSH
60009: LD_INT 4
60011: PPUSH
60012: CALL_OW 273
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_VAR 0 7
60025: PPUSH
60026: LD_INT 1
60028: PPUSH
60029: LD_INT 4
60031: PPUSH
60032: CALL_OW 272
60036: PUSH
60037: LD_VAR 0 8
60041: PPUSH
60042: LD_INT 1
60044: PPUSH
60045: LD_INT 4
60047: PPUSH
60048: CALL_OW 273
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_VAR 0 7
60061: PPUSH
60062: LD_INT 2
60064: PPUSH
60065: LD_INT 4
60067: PPUSH
60068: CALL_OW 272
60072: PUSH
60073: LD_VAR 0 8
60077: PPUSH
60078: LD_INT 2
60080: PPUSH
60081: LD_INT 4
60083: PPUSH
60084: CALL_OW 273
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_VAR 0 7
60097: PPUSH
60098: LD_INT 3
60100: PPUSH
60101: LD_INT 4
60103: PPUSH
60104: CALL_OW 272
60108: PUSH
60109: LD_VAR 0 8
60113: PPUSH
60114: LD_INT 3
60116: PPUSH
60117: LD_INT 4
60119: PPUSH
60120: CALL_OW 273
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_VAR 0 7
60133: PPUSH
60134: LD_INT 4
60136: PPUSH
60137: LD_INT 4
60139: PPUSH
60140: CALL_OW 272
60144: PUSH
60145: LD_VAR 0 8
60149: PPUSH
60150: LD_INT 4
60152: PPUSH
60153: LD_INT 4
60155: PPUSH
60156: CALL_OW 273
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_VAR 0 7
60169: PPUSH
60170: LD_INT 5
60172: PPUSH
60173: LD_INT 4
60175: PPUSH
60176: CALL_OW 272
60180: PUSH
60181: LD_VAR 0 8
60185: PPUSH
60186: LD_INT 5
60188: PPUSH
60189: LD_INT 4
60191: PPUSH
60192: CALL_OW 273
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// for i = tmp downto 1 do
60209: LD_ADDR_VAR 0 4
60213: PUSH
60214: DOUBLE
60215: LD_VAR 0 6
60219: INC
60220: ST_TO_ADDR
60221: LD_INT 1
60223: PUSH
60224: FOR_DOWNTO
60225: IFFALSE 60326
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60227: LD_VAR 0 6
60231: PUSH
60232: LD_VAR 0 4
60236: ARRAY
60237: PUSH
60238: LD_INT 1
60240: ARRAY
60241: PPUSH
60242: LD_VAR 0 6
60246: PUSH
60247: LD_VAR 0 4
60251: ARRAY
60252: PUSH
60253: LD_INT 2
60255: ARRAY
60256: PPUSH
60257: CALL_OW 488
60261: NOT
60262: PUSH
60263: LD_VAR 0 6
60267: PUSH
60268: LD_VAR 0 4
60272: ARRAY
60273: PUSH
60274: LD_INT 1
60276: ARRAY
60277: PPUSH
60278: LD_VAR 0 6
60282: PUSH
60283: LD_VAR 0 4
60287: ARRAY
60288: PUSH
60289: LD_INT 2
60291: ARRAY
60292: PPUSH
60293: CALL_OW 428
60297: PUSH
60298: LD_INT 0
60300: NONEQUAL
60301: OR
60302: IFFALSE 60324
// tmp := Delete ( tmp , i ) ;
60304: LD_ADDR_VAR 0 6
60308: PUSH
60309: LD_VAR 0 6
60313: PPUSH
60314: LD_VAR 0 4
60318: PPUSH
60319: CALL_OW 3
60323: ST_TO_ADDR
60324: GO 60224
60326: POP
60327: POP
// j := GetClosestHex ( unit , tmp ) ;
60328: LD_ADDR_VAR 0 5
60332: PUSH
60333: LD_VAR 0 1
60337: PPUSH
60338: LD_VAR 0 6
60342: PPUSH
60343: CALL 59628 0 2
60347: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60348: LD_VAR 0 1
60352: PPUSH
60353: LD_VAR 0 5
60357: PUSH
60358: LD_INT 1
60360: ARRAY
60361: PPUSH
60362: LD_VAR 0 5
60366: PUSH
60367: LD_INT 2
60369: ARRAY
60370: PPUSH
60371: CALL_OW 111
// end ;
60375: LD_VAR 0 3
60379: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60380: LD_INT 0
60382: PPUSH
60383: PPUSH
60384: PPUSH
// uc_side = 0 ;
60385: LD_ADDR_OWVAR 20
60389: PUSH
60390: LD_INT 0
60392: ST_TO_ADDR
// uc_nation = 0 ;
60393: LD_ADDR_OWVAR 21
60397: PUSH
60398: LD_INT 0
60400: ST_TO_ADDR
// InitHc_All ( ) ;
60401: CALL_OW 584
// InitVc ;
60405: CALL_OW 20
// if mastodonts then
60409: LD_VAR 0 6
60413: IFFALSE 60480
// for i = 1 to mastodonts do
60415: LD_ADDR_VAR 0 11
60419: PUSH
60420: DOUBLE
60421: LD_INT 1
60423: DEC
60424: ST_TO_ADDR
60425: LD_VAR 0 6
60429: PUSH
60430: FOR_TO
60431: IFFALSE 60478
// begin vc_chassis := 31 ;
60433: LD_ADDR_OWVAR 37
60437: PUSH
60438: LD_INT 31
60440: ST_TO_ADDR
// vc_control := control_rider ;
60441: LD_ADDR_OWVAR 38
60445: PUSH
60446: LD_INT 4
60448: ST_TO_ADDR
// animal := CreateVehicle ;
60449: LD_ADDR_VAR 0 12
60453: PUSH
60454: CALL_OW 45
60458: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60459: LD_VAR 0 12
60463: PPUSH
60464: LD_VAR 0 8
60468: PPUSH
60469: LD_INT 0
60471: PPUSH
60472: CALL 62668 0 3
// end ;
60476: GO 60430
60478: POP
60479: POP
// if horses then
60480: LD_VAR 0 5
60484: IFFALSE 60551
// for i = 1 to horses do
60486: LD_ADDR_VAR 0 11
60490: PUSH
60491: DOUBLE
60492: LD_INT 1
60494: DEC
60495: ST_TO_ADDR
60496: LD_VAR 0 5
60500: PUSH
60501: FOR_TO
60502: IFFALSE 60549
// begin hc_class := 21 ;
60504: LD_ADDR_OWVAR 28
60508: PUSH
60509: LD_INT 21
60511: ST_TO_ADDR
// hc_gallery :=  ;
60512: LD_ADDR_OWVAR 33
60516: PUSH
60517: LD_STRING 
60519: ST_TO_ADDR
// animal := CreateHuman ;
60520: LD_ADDR_VAR 0 12
60524: PUSH
60525: CALL_OW 44
60529: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60530: LD_VAR 0 12
60534: PPUSH
60535: LD_VAR 0 8
60539: PPUSH
60540: LD_INT 0
60542: PPUSH
60543: CALL 62668 0 3
// end ;
60547: GO 60501
60549: POP
60550: POP
// if birds then
60551: LD_VAR 0 1
60555: IFFALSE 60622
// for i = 1 to birds do
60557: LD_ADDR_VAR 0 11
60561: PUSH
60562: DOUBLE
60563: LD_INT 1
60565: DEC
60566: ST_TO_ADDR
60567: LD_VAR 0 1
60571: PUSH
60572: FOR_TO
60573: IFFALSE 60620
// begin hc_class = 18 ;
60575: LD_ADDR_OWVAR 28
60579: PUSH
60580: LD_INT 18
60582: ST_TO_ADDR
// hc_gallery =  ;
60583: LD_ADDR_OWVAR 33
60587: PUSH
60588: LD_STRING 
60590: ST_TO_ADDR
// animal := CreateHuman ;
60591: LD_ADDR_VAR 0 12
60595: PUSH
60596: CALL_OW 44
60600: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60601: LD_VAR 0 12
60605: PPUSH
60606: LD_VAR 0 8
60610: PPUSH
60611: LD_INT 0
60613: PPUSH
60614: CALL 62668 0 3
// end ;
60618: GO 60572
60620: POP
60621: POP
// if tigers then
60622: LD_VAR 0 2
60626: IFFALSE 60710
// for i = 1 to tigers do
60628: LD_ADDR_VAR 0 11
60632: PUSH
60633: DOUBLE
60634: LD_INT 1
60636: DEC
60637: ST_TO_ADDR
60638: LD_VAR 0 2
60642: PUSH
60643: FOR_TO
60644: IFFALSE 60708
// begin hc_class = class_tiger ;
60646: LD_ADDR_OWVAR 28
60650: PUSH
60651: LD_INT 14
60653: ST_TO_ADDR
// hc_gallery =  ;
60654: LD_ADDR_OWVAR 33
60658: PUSH
60659: LD_STRING 
60661: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60662: LD_ADDR_OWVAR 35
60666: PUSH
60667: LD_INT 7
60669: NEG
60670: PPUSH
60671: LD_INT 7
60673: PPUSH
60674: CALL_OW 12
60678: ST_TO_ADDR
// animal := CreateHuman ;
60679: LD_ADDR_VAR 0 12
60683: PUSH
60684: CALL_OW 44
60688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60689: LD_VAR 0 12
60693: PPUSH
60694: LD_VAR 0 8
60698: PPUSH
60699: LD_INT 0
60701: PPUSH
60702: CALL 62668 0 3
// end ;
60706: GO 60643
60708: POP
60709: POP
// if apemans then
60710: LD_VAR 0 3
60714: IFFALSE 60837
// for i = 1 to apemans do
60716: LD_ADDR_VAR 0 11
60720: PUSH
60721: DOUBLE
60722: LD_INT 1
60724: DEC
60725: ST_TO_ADDR
60726: LD_VAR 0 3
60730: PUSH
60731: FOR_TO
60732: IFFALSE 60835
// begin hc_class = class_apeman ;
60734: LD_ADDR_OWVAR 28
60738: PUSH
60739: LD_INT 12
60741: ST_TO_ADDR
// hc_gallery =  ;
60742: LD_ADDR_OWVAR 33
60746: PUSH
60747: LD_STRING 
60749: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60750: LD_ADDR_OWVAR 35
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PPUSH
60759: LD_INT 2
60761: PPUSH
60762: CALL_OW 12
60766: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60767: LD_ADDR_OWVAR 31
60771: PUSH
60772: LD_INT 1
60774: PPUSH
60775: LD_INT 3
60777: PPUSH
60778: CALL_OW 12
60782: PUSH
60783: LD_INT 1
60785: PPUSH
60786: LD_INT 3
60788: PPUSH
60789: CALL_OW 12
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// animal := CreateHuman ;
60806: LD_ADDR_VAR 0 12
60810: PUSH
60811: CALL_OW 44
60815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60816: LD_VAR 0 12
60820: PPUSH
60821: LD_VAR 0 8
60825: PPUSH
60826: LD_INT 0
60828: PPUSH
60829: CALL 62668 0 3
// end ;
60833: GO 60731
60835: POP
60836: POP
// if enchidnas then
60837: LD_VAR 0 4
60841: IFFALSE 60908
// for i = 1 to enchidnas do
60843: LD_ADDR_VAR 0 11
60847: PUSH
60848: DOUBLE
60849: LD_INT 1
60851: DEC
60852: ST_TO_ADDR
60853: LD_VAR 0 4
60857: PUSH
60858: FOR_TO
60859: IFFALSE 60906
// begin hc_class = 13 ;
60861: LD_ADDR_OWVAR 28
60865: PUSH
60866: LD_INT 13
60868: ST_TO_ADDR
// hc_gallery =  ;
60869: LD_ADDR_OWVAR 33
60873: PUSH
60874: LD_STRING 
60876: ST_TO_ADDR
// animal := CreateHuman ;
60877: LD_ADDR_VAR 0 12
60881: PUSH
60882: CALL_OW 44
60886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60887: LD_VAR 0 12
60891: PPUSH
60892: LD_VAR 0 8
60896: PPUSH
60897: LD_INT 0
60899: PPUSH
60900: CALL 62668 0 3
// end ;
60904: GO 60858
60906: POP
60907: POP
// if fishes then
60908: LD_VAR 0 7
60912: IFFALSE 60979
// for i = 1 to fishes do
60914: LD_ADDR_VAR 0 11
60918: PUSH
60919: DOUBLE
60920: LD_INT 1
60922: DEC
60923: ST_TO_ADDR
60924: LD_VAR 0 7
60928: PUSH
60929: FOR_TO
60930: IFFALSE 60977
// begin hc_class = 20 ;
60932: LD_ADDR_OWVAR 28
60936: PUSH
60937: LD_INT 20
60939: ST_TO_ADDR
// hc_gallery =  ;
60940: LD_ADDR_OWVAR 33
60944: PUSH
60945: LD_STRING 
60947: ST_TO_ADDR
// animal := CreateHuman ;
60948: LD_ADDR_VAR 0 12
60952: PUSH
60953: CALL_OW 44
60957: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60958: LD_VAR 0 12
60962: PPUSH
60963: LD_VAR 0 9
60967: PPUSH
60968: LD_INT 0
60970: PPUSH
60971: CALL 62668 0 3
// end ;
60975: GO 60929
60977: POP
60978: POP
// end ;
60979: LD_VAR 0 10
60983: RET
// export function WantHeal ( sci , unit ) ; begin
60984: LD_INT 0
60986: PPUSH
// if GetTaskList ( sci ) > 0 then
60987: LD_VAR 0 1
60991: PPUSH
60992: CALL_OW 437
60996: PUSH
60997: LD_INT 0
60999: GREATER
61000: IFFALSE 61070
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 437
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PUSH
61016: LD_INT 1
61018: ARRAY
61019: PUSH
61020: LD_STRING l
61022: EQUAL
61023: PUSH
61024: LD_VAR 0 1
61028: PPUSH
61029: CALL_OW 437
61033: PUSH
61034: LD_INT 1
61036: ARRAY
61037: PUSH
61038: LD_INT 4
61040: ARRAY
61041: PUSH
61042: LD_VAR 0 2
61046: EQUAL
61047: AND
61048: IFFALSE 61060
// result := true else
61050: LD_ADDR_VAR 0 3
61054: PUSH
61055: LD_INT 1
61057: ST_TO_ADDR
61058: GO 61068
// result := false ;
61060: LD_ADDR_VAR 0 3
61064: PUSH
61065: LD_INT 0
61067: ST_TO_ADDR
// end else
61068: GO 61078
// result := false ;
61070: LD_ADDR_VAR 0 3
61074: PUSH
61075: LD_INT 0
61077: ST_TO_ADDR
// end ;
61078: LD_VAR 0 3
61082: RET
// export function HealTarget ( sci ) ; begin
61083: LD_INT 0
61085: PPUSH
// if not sci then
61086: LD_VAR 0 1
61090: NOT
61091: IFFALSE 61095
// exit ;
61093: GO 61160
// result := 0 ;
61095: LD_ADDR_VAR 0 2
61099: PUSH
61100: LD_INT 0
61102: ST_TO_ADDR
// if GetTaskList ( sci ) then
61103: LD_VAR 0 1
61107: PPUSH
61108: CALL_OW 437
61112: IFFALSE 61160
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61114: LD_VAR 0 1
61118: PPUSH
61119: CALL_OW 437
61123: PUSH
61124: LD_INT 1
61126: ARRAY
61127: PUSH
61128: LD_INT 1
61130: ARRAY
61131: PUSH
61132: LD_STRING l
61134: EQUAL
61135: IFFALSE 61160
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61137: LD_ADDR_VAR 0 2
61141: PUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 437
61151: PUSH
61152: LD_INT 1
61154: ARRAY
61155: PUSH
61156: LD_INT 4
61158: ARRAY
61159: ST_TO_ADDR
// end ;
61160: LD_VAR 0 2
61164: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61165: LD_INT 0
61167: PPUSH
61168: PPUSH
61169: PPUSH
61170: PPUSH
// if not base_units then
61171: LD_VAR 0 1
61175: NOT
61176: IFFALSE 61180
// exit ;
61178: GO 61267
// result := false ;
61180: LD_ADDR_VAR 0 2
61184: PUSH
61185: LD_INT 0
61187: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61188: LD_ADDR_VAR 0 5
61192: PUSH
61193: LD_VAR 0 1
61197: PPUSH
61198: LD_INT 21
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PPUSH
61208: CALL_OW 72
61212: ST_TO_ADDR
// if not tmp then
61213: LD_VAR 0 5
61217: NOT
61218: IFFALSE 61222
// exit ;
61220: GO 61267
// for i in tmp do
61222: LD_ADDR_VAR 0 3
61226: PUSH
61227: LD_VAR 0 5
61231: PUSH
61232: FOR_IN
61233: IFFALSE 61265
// begin result := EnemyInRange ( i , 22 ) ;
61235: LD_ADDR_VAR 0 2
61239: PUSH
61240: LD_VAR 0 3
61244: PPUSH
61245: LD_INT 22
61247: PPUSH
61248: CALL 59503 0 2
61252: ST_TO_ADDR
// if result then
61253: LD_VAR 0 2
61257: IFFALSE 61263
// exit ;
61259: POP
61260: POP
61261: GO 61267
// end ;
61263: GO 61232
61265: POP
61266: POP
// end ;
61267: LD_VAR 0 2
61271: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61272: LD_INT 0
61274: PPUSH
61275: PPUSH
// if not units then
61276: LD_VAR 0 1
61280: NOT
61281: IFFALSE 61285
// exit ;
61283: GO 61355
// result := [ ] ;
61285: LD_ADDR_VAR 0 3
61289: PUSH
61290: EMPTY
61291: ST_TO_ADDR
// for i in units do
61292: LD_ADDR_VAR 0 4
61296: PUSH
61297: LD_VAR 0 1
61301: PUSH
61302: FOR_IN
61303: IFFALSE 61353
// if GetTag ( i ) = tag then
61305: LD_VAR 0 4
61309: PPUSH
61310: CALL_OW 110
61314: PUSH
61315: LD_VAR 0 2
61319: EQUAL
61320: IFFALSE 61351
// result := Insert ( result , result + 1 , i ) ;
61322: LD_ADDR_VAR 0 3
61326: PUSH
61327: LD_VAR 0 3
61331: PPUSH
61332: LD_VAR 0 3
61336: PUSH
61337: LD_INT 1
61339: PLUS
61340: PPUSH
61341: LD_VAR 0 4
61345: PPUSH
61346: CALL_OW 2
61350: ST_TO_ADDR
61351: GO 61302
61353: POP
61354: POP
// end ;
61355: LD_VAR 0 3
61359: RET
// export function IsDriver ( un ) ; begin
61360: LD_INT 0
61362: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61363: LD_ADDR_VAR 0 2
61367: PUSH
61368: LD_VAR 0 1
61372: PUSH
61373: LD_INT 55
61375: PUSH
61376: EMPTY
61377: LIST
61378: PPUSH
61379: CALL_OW 69
61383: IN
61384: ST_TO_ADDR
// end ;
61385: LD_VAR 0 2
61389: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
// list := [ ] ;
61394: LD_ADDR_VAR 0 5
61398: PUSH
61399: EMPTY
61400: ST_TO_ADDR
// case d of 0 :
61401: LD_VAR 0 3
61405: PUSH
61406: LD_INT 0
61408: DOUBLE
61409: EQUAL
61410: IFTRUE 61414
61412: GO 61547
61414: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61415: LD_ADDR_VAR 0 5
61419: PUSH
61420: LD_VAR 0 1
61424: PUSH
61425: LD_INT 4
61427: MINUS
61428: PUSH
61429: LD_VAR 0 2
61433: PUSH
61434: LD_INT 4
61436: MINUS
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: PUSH
61446: LD_VAR 0 1
61450: PUSH
61451: LD_INT 3
61453: MINUS
61454: PUSH
61455: LD_VAR 0 2
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: PUSH
61468: LD_VAR 0 1
61472: PUSH
61473: LD_INT 4
61475: PLUS
61476: PUSH
61477: LD_VAR 0 2
61481: PUSH
61482: LD_INT 4
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: PUSH
61490: LD_VAR 0 1
61494: PUSH
61495: LD_INT 3
61497: PLUS
61498: PUSH
61499: LD_VAR 0 2
61503: PUSH
61504: LD_INT 3
61506: PLUS
61507: PUSH
61508: LD_INT 5
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: LD_VAR 0 1
61520: PUSH
61521: LD_VAR 0 2
61525: PUSH
61526: LD_INT 4
61528: PLUS
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: ST_TO_ADDR
// end ; 1 :
61545: GO 62245
61547: LD_INT 1
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61555
61553: GO 61688
61555: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61556: LD_ADDR_VAR 0 5
61560: PUSH
61561: LD_VAR 0 1
61565: PUSH
61566: LD_VAR 0 2
61570: PUSH
61571: LD_INT 4
61573: MINUS
61574: PUSH
61575: LD_INT 3
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: PUSH
61583: LD_VAR 0 1
61587: PUSH
61588: LD_INT 3
61590: MINUS
61591: PUSH
61592: LD_VAR 0 2
61596: PUSH
61597: LD_INT 3
61599: MINUS
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: PUSH
61609: LD_VAR 0 1
61613: PUSH
61614: LD_INT 4
61616: MINUS
61617: PUSH
61618: LD_VAR 0 2
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: PUSH
61631: LD_VAR 0 1
61635: PUSH
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 3
61643: PLUS
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: PUSH
61653: LD_VAR 0 1
61657: PUSH
61658: LD_INT 4
61660: PLUS
61661: PUSH
61662: LD_VAR 0 2
61666: PUSH
61667: LD_INT 4
61669: PLUS
61670: PUSH
61671: LD_INT 5
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: ST_TO_ADDR
// end ; 2 :
61686: GO 62245
61688: LD_INT 2
61690: DOUBLE
61691: EQUAL
61692: IFTRUE 61696
61694: GO 61825
61696: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61697: LD_ADDR_VAR 0 5
61701: PUSH
61702: LD_VAR 0 1
61706: PUSH
61707: LD_VAR 0 2
61711: PUSH
61712: LD_INT 3
61714: MINUS
61715: PUSH
61716: LD_INT 3
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: LIST
61723: PUSH
61724: LD_VAR 0 1
61728: PUSH
61729: LD_INT 4
61731: PLUS
61732: PUSH
61733: LD_VAR 0 2
61737: PUSH
61738: LD_INT 4
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: PUSH
61746: LD_VAR 0 1
61750: PUSH
61751: LD_VAR 0 2
61755: PUSH
61756: LD_INT 4
61758: PLUS
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: LIST
61767: PUSH
61768: LD_VAR 0 1
61772: PUSH
61773: LD_INT 3
61775: MINUS
61776: PUSH
61777: LD_VAR 0 2
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: PUSH
61790: LD_VAR 0 1
61794: PUSH
61795: LD_INT 4
61797: MINUS
61798: PUSH
61799: LD_VAR 0 2
61803: PUSH
61804: LD_INT 4
61806: MINUS
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// end ; 3 :
61823: GO 62245
61825: LD_INT 3
61827: DOUBLE
61828: EQUAL
61829: IFTRUE 61833
61831: GO 61966
61833: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61834: LD_ADDR_VAR 0 5
61838: PUSH
61839: LD_VAR 0 1
61843: PUSH
61844: LD_INT 3
61846: PLUS
61847: PUSH
61848: LD_VAR 0 2
61852: PUSH
61853: LD_INT 4
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: PUSH
61861: LD_VAR 0 1
61865: PUSH
61866: LD_INT 4
61868: PLUS
61869: PUSH
61870: LD_VAR 0 2
61874: PUSH
61875: LD_INT 4
61877: PLUS
61878: PUSH
61879: LD_INT 5
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: PUSH
61887: LD_VAR 0 1
61891: PUSH
61892: LD_INT 4
61894: MINUS
61895: PUSH
61896: LD_VAR 0 2
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: PUSH
61909: LD_VAR 0 1
61913: PUSH
61914: LD_VAR 0 2
61918: PUSH
61919: LD_INT 4
61921: MINUS
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: PUSH
61931: LD_VAR 0 1
61935: PUSH
61936: LD_INT 3
61938: MINUS
61939: PUSH
61940: LD_VAR 0 2
61944: PUSH
61945: LD_INT 3
61947: MINUS
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// end ; 4 :
61964: GO 62245
61966: LD_INT 4
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 61974
61972: GO 62107
61974: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61975: LD_ADDR_VAR 0 5
61979: PUSH
61980: LD_VAR 0 1
61984: PUSH
61985: LD_VAR 0 2
61989: PUSH
61990: LD_INT 4
61992: PLUS
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: PUSH
62002: LD_VAR 0 1
62006: PUSH
62007: LD_INT 3
62009: PLUS
62010: PUSH
62011: LD_VAR 0 2
62015: PUSH
62016: LD_INT 3
62018: PLUS
62019: PUSH
62020: LD_INT 5
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: LIST
62027: PUSH
62028: LD_VAR 0 1
62032: PUSH
62033: LD_INT 4
62035: PLUS
62036: PUSH
62037: LD_VAR 0 2
62041: PUSH
62042: LD_INT 4
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: PUSH
62050: LD_VAR 0 1
62054: PUSH
62055: LD_VAR 0 2
62059: PUSH
62060: LD_INT 3
62062: MINUS
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 4
62079: MINUS
62080: PUSH
62081: LD_VAR 0 2
62085: PUSH
62086: LD_INT 4
62088: MINUS
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: LIST
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: ST_TO_ADDR
// end ; 5 :
62105: GO 62245
62107: LD_INT 5
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62115
62113: GO 62244
62115: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62116: LD_ADDR_VAR 0 5
62120: PUSH
62121: LD_VAR 0 1
62125: PUSH
62126: LD_INT 4
62128: MINUS
62129: PUSH
62130: LD_VAR 0 2
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: PUSH
62143: LD_VAR 0 1
62147: PUSH
62148: LD_VAR 0 2
62152: PUSH
62153: LD_INT 4
62155: MINUS
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: PUSH
62165: LD_VAR 0 1
62169: PUSH
62170: LD_INT 4
62172: PLUS
62173: PUSH
62174: LD_VAR 0 2
62178: PUSH
62179: LD_INT 4
62181: PLUS
62182: PUSH
62183: LD_INT 5
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: LIST
62190: PUSH
62191: LD_VAR 0 1
62195: PUSH
62196: LD_INT 3
62198: PLUS
62199: PUSH
62200: LD_VAR 0 2
62204: PUSH
62205: LD_INT 4
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: LIST
62212: PUSH
62213: LD_VAR 0 1
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 3
62225: PLUS
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// end ; end ;
62242: GO 62245
62244: POP
// result := list ;
62245: LD_ADDR_VAR 0 4
62249: PUSH
62250: LD_VAR 0 5
62254: ST_TO_ADDR
// end ;
62255: LD_VAR 0 4
62259: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62260: LD_INT 0
62262: PPUSH
62263: PPUSH
62264: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62265: LD_VAR 0 1
62269: NOT
62270: PUSH
62271: LD_VAR 0 2
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: LD_INT 4
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: IN
62294: NOT
62295: OR
62296: IFFALSE 62300
// exit ;
62298: GO 62392
// tmp := [ ] ;
62300: LD_ADDR_VAR 0 5
62304: PUSH
62305: EMPTY
62306: ST_TO_ADDR
// for i in units do
62307: LD_ADDR_VAR 0 4
62311: PUSH
62312: LD_VAR 0 1
62316: PUSH
62317: FOR_IN
62318: IFFALSE 62361
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62320: LD_ADDR_VAR 0 5
62324: PUSH
62325: LD_VAR 0 5
62329: PPUSH
62330: LD_VAR 0 5
62334: PUSH
62335: LD_INT 1
62337: PLUS
62338: PPUSH
62339: LD_VAR 0 4
62343: PPUSH
62344: LD_VAR 0 2
62348: PPUSH
62349: CALL_OW 259
62353: PPUSH
62354: CALL_OW 2
62358: ST_TO_ADDR
62359: GO 62317
62361: POP
62362: POP
// if not tmp then
62363: LD_VAR 0 5
62367: NOT
62368: IFFALSE 62372
// exit ;
62370: GO 62392
// result := SortListByListDesc ( units , tmp ) ;
62372: LD_ADDR_VAR 0 3
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: LD_VAR 0 5
62386: PPUSH
62387: CALL_OW 77
62391: ST_TO_ADDR
// end ;
62392: LD_VAR 0 3
62396: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62397: LD_INT 0
62399: PPUSH
62400: PPUSH
62401: PPUSH
// result := false ;
62402: LD_ADDR_VAR 0 3
62406: PUSH
62407: LD_INT 0
62409: ST_TO_ADDR
// x := GetX ( building ) ;
62410: LD_ADDR_VAR 0 4
62414: PUSH
62415: LD_VAR 0 2
62419: PPUSH
62420: CALL_OW 250
62424: ST_TO_ADDR
// y := GetY ( building ) ;
62425: LD_ADDR_VAR 0 5
62429: PUSH
62430: LD_VAR 0 2
62434: PPUSH
62435: CALL_OW 251
62439: ST_TO_ADDR
// if not building or not x or not y then
62440: LD_VAR 0 2
62444: NOT
62445: PUSH
62446: LD_VAR 0 4
62450: NOT
62451: OR
62452: PUSH
62453: LD_VAR 0 5
62457: NOT
62458: OR
62459: IFFALSE 62463
// exit ;
62461: GO 62555
// if GetTaskList ( unit ) then
62463: LD_VAR 0 1
62467: PPUSH
62468: CALL_OW 437
62472: IFFALSE 62555
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62474: LD_STRING e
62476: PUSH
62477: LD_VAR 0 1
62481: PPUSH
62482: CALL_OW 437
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PUSH
62491: LD_INT 1
62493: ARRAY
62494: EQUAL
62495: PUSH
62496: LD_VAR 0 4
62500: PUSH
62501: LD_VAR 0 1
62505: PPUSH
62506: CALL_OW 437
62510: PUSH
62511: LD_INT 1
62513: ARRAY
62514: PUSH
62515: LD_INT 2
62517: ARRAY
62518: EQUAL
62519: AND
62520: PUSH
62521: LD_VAR 0 5
62525: PUSH
62526: LD_VAR 0 1
62530: PPUSH
62531: CALL_OW 437
62535: PUSH
62536: LD_INT 1
62538: ARRAY
62539: PUSH
62540: LD_INT 3
62542: ARRAY
62543: EQUAL
62544: AND
62545: IFFALSE 62555
// result := true end ;
62547: LD_ADDR_VAR 0 3
62551: PUSH
62552: LD_INT 1
62554: ST_TO_ADDR
// end ;
62555: LD_VAR 0 3
62559: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62560: LD_INT 0
62562: PPUSH
// result := false ;
62563: LD_ADDR_VAR 0 4
62567: PUSH
62568: LD_INT 0
62570: ST_TO_ADDR
// if GetTaskList ( unit ) then
62571: LD_VAR 0 1
62575: PPUSH
62576: CALL_OW 437
62580: IFFALSE 62663
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62582: LD_STRING M
62584: PUSH
62585: LD_VAR 0 1
62589: PPUSH
62590: CALL_OW 437
62594: PUSH
62595: LD_INT 1
62597: ARRAY
62598: PUSH
62599: LD_INT 1
62601: ARRAY
62602: EQUAL
62603: PUSH
62604: LD_VAR 0 2
62608: PUSH
62609: LD_VAR 0 1
62613: PPUSH
62614: CALL_OW 437
62618: PUSH
62619: LD_INT 1
62621: ARRAY
62622: PUSH
62623: LD_INT 2
62625: ARRAY
62626: EQUAL
62627: AND
62628: PUSH
62629: LD_VAR 0 3
62633: PUSH
62634: LD_VAR 0 1
62638: PPUSH
62639: CALL_OW 437
62643: PUSH
62644: LD_INT 1
62646: ARRAY
62647: PUSH
62648: LD_INT 3
62650: ARRAY
62651: EQUAL
62652: AND
62653: IFFALSE 62663
// result := true ;
62655: LD_ADDR_VAR 0 4
62659: PUSH
62660: LD_INT 1
62662: ST_TO_ADDR
// end ; end ;
62663: LD_VAR 0 4
62667: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62668: LD_INT 0
62670: PPUSH
62671: PPUSH
62672: PPUSH
62673: PPUSH
// if not unit or not area then
62674: LD_VAR 0 1
62678: NOT
62679: PUSH
62680: LD_VAR 0 2
62684: NOT
62685: OR
62686: IFFALSE 62690
// exit ;
62688: GO 62854
// tmp := AreaToList ( area , i ) ;
62690: LD_ADDR_VAR 0 6
62694: PUSH
62695: LD_VAR 0 2
62699: PPUSH
62700: LD_VAR 0 5
62704: PPUSH
62705: CALL_OW 517
62709: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62710: LD_ADDR_VAR 0 5
62714: PUSH
62715: DOUBLE
62716: LD_INT 1
62718: DEC
62719: ST_TO_ADDR
62720: LD_VAR 0 6
62724: PUSH
62725: LD_INT 1
62727: ARRAY
62728: PUSH
62729: FOR_TO
62730: IFFALSE 62852
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62732: LD_ADDR_VAR 0 7
62736: PUSH
62737: LD_VAR 0 6
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PUSH
62746: LD_VAR 0 5
62750: ARRAY
62751: PUSH
62752: LD_VAR 0 6
62756: PUSH
62757: LD_INT 2
62759: ARRAY
62760: PUSH
62761: LD_VAR 0 5
62765: ARRAY
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62771: LD_VAR 0 7
62775: PUSH
62776: LD_INT 1
62778: ARRAY
62779: PPUSH
62780: LD_VAR 0 7
62784: PUSH
62785: LD_INT 2
62787: ARRAY
62788: PPUSH
62789: CALL_OW 428
62793: PUSH
62794: LD_INT 0
62796: EQUAL
62797: IFFALSE 62850
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62799: LD_VAR 0 1
62803: PPUSH
62804: LD_VAR 0 7
62808: PUSH
62809: LD_INT 1
62811: ARRAY
62812: PPUSH
62813: LD_VAR 0 7
62817: PUSH
62818: LD_INT 2
62820: ARRAY
62821: PPUSH
62822: LD_VAR 0 3
62826: PPUSH
62827: CALL_OW 48
// result := IsPlaced ( unit ) ;
62831: LD_ADDR_VAR 0 4
62835: PUSH
62836: LD_VAR 0 1
62840: PPUSH
62841: CALL_OW 305
62845: ST_TO_ADDR
// exit ;
62846: POP
62847: POP
62848: GO 62854
// end ; end ;
62850: GO 62729
62852: POP
62853: POP
// end ;
62854: LD_VAR 0 4
62858: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62859: LD_INT 0
62861: PPUSH
62862: PPUSH
62863: PPUSH
// if not side or side > 8 then
62864: LD_VAR 0 1
62868: NOT
62869: PUSH
62870: LD_VAR 0 1
62874: PUSH
62875: LD_INT 8
62877: GREATER
62878: OR
62879: IFFALSE 62883
// exit ;
62881: GO 63070
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62883: LD_ADDR_VAR 0 4
62887: PUSH
62888: LD_INT 22
62890: PUSH
62891: LD_VAR 0 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 21
62902: PUSH
62903: LD_INT 3
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PPUSH
62914: CALL_OW 69
62918: ST_TO_ADDR
// if not tmp then
62919: LD_VAR 0 4
62923: NOT
62924: IFFALSE 62928
// exit ;
62926: GO 63070
// enable_addtolog := true ;
62928: LD_ADDR_OWVAR 81
62932: PUSH
62933: LD_INT 1
62935: ST_TO_ADDR
// AddToLog ( [ ) ;
62936: LD_STRING [
62938: PPUSH
62939: CALL_OW 561
// for i in tmp do
62943: LD_ADDR_VAR 0 3
62947: PUSH
62948: LD_VAR 0 4
62952: PUSH
62953: FOR_IN
62954: IFFALSE 63061
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62956: LD_STRING [
62958: PUSH
62959: LD_VAR 0 3
62963: PPUSH
62964: CALL_OW 266
62968: STR
62969: PUSH
62970: LD_STRING , 
62972: STR
62973: PUSH
62974: LD_VAR 0 3
62978: PPUSH
62979: CALL_OW 250
62983: STR
62984: PUSH
62985: LD_STRING , 
62987: STR
62988: PUSH
62989: LD_VAR 0 3
62993: PPUSH
62994: CALL_OW 251
62998: STR
62999: PUSH
63000: LD_STRING , 
63002: STR
63003: PUSH
63004: LD_VAR 0 3
63008: PPUSH
63009: CALL_OW 254
63013: STR
63014: PUSH
63015: LD_STRING , 
63017: STR
63018: PUSH
63019: LD_VAR 0 3
63023: PPUSH
63024: LD_INT 1
63026: PPUSH
63027: CALL_OW 268
63031: STR
63032: PUSH
63033: LD_STRING , 
63035: STR
63036: PUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: LD_INT 2
63044: PPUSH
63045: CALL_OW 268
63049: STR
63050: PUSH
63051: LD_STRING ],
63053: STR
63054: PPUSH
63055: CALL_OW 561
// end ;
63059: GO 62953
63061: POP
63062: POP
// AddToLog ( ]; ) ;
63063: LD_STRING ];
63065: PPUSH
63066: CALL_OW 561
// end ;
63070: LD_VAR 0 2
63074: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63075: LD_INT 0
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
// if not area or not rate or not max then
63082: LD_VAR 0 1
63086: NOT
63087: PUSH
63088: LD_VAR 0 2
63092: NOT
63093: OR
63094: PUSH
63095: LD_VAR 0 4
63099: NOT
63100: OR
63101: IFFALSE 63105
// exit ;
63103: GO 63297
// while 1 do
63105: LD_INT 1
63107: IFFALSE 63297
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63109: LD_ADDR_VAR 0 9
63113: PUSH
63114: LD_VAR 0 1
63118: PPUSH
63119: LD_INT 1
63121: PPUSH
63122: CALL_OW 287
63126: PUSH
63127: LD_INT 10
63129: MUL
63130: ST_TO_ADDR
// r := rate / 10 ;
63131: LD_ADDR_VAR 0 7
63135: PUSH
63136: LD_VAR 0 2
63140: PUSH
63141: LD_INT 10
63143: DIVREAL
63144: ST_TO_ADDR
// time := 1 1$00 ;
63145: LD_ADDR_VAR 0 8
63149: PUSH
63150: LD_INT 2100
63152: ST_TO_ADDR
// if amount < min then
63153: LD_VAR 0 9
63157: PUSH
63158: LD_VAR 0 3
63162: LESS
63163: IFFALSE 63181
// r := r * 2 else
63165: LD_ADDR_VAR 0 7
63169: PUSH
63170: LD_VAR 0 7
63174: PUSH
63175: LD_INT 2
63177: MUL
63178: ST_TO_ADDR
63179: GO 63207
// if amount > max then
63181: LD_VAR 0 9
63185: PUSH
63186: LD_VAR 0 4
63190: GREATER
63191: IFFALSE 63207
// r := r / 2 ;
63193: LD_ADDR_VAR 0 7
63197: PUSH
63198: LD_VAR 0 7
63202: PUSH
63203: LD_INT 2
63205: DIVREAL
63206: ST_TO_ADDR
// time := time / r ;
63207: LD_ADDR_VAR 0 8
63211: PUSH
63212: LD_VAR 0 8
63216: PUSH
63217: LD_VAR 0 7
63221: DIVREAL
63222: ST_TO_ADDR
// if time < 0 then
63223: LD_VAR 0 8
63227: PUSH
63228: LD_INT 0
63230: LESS
63231: IFFALSE 63248
// time := time * - 1 ;
63233: LD_ADDR_VAR 0 8
63237: PUSH
63238: LD_VAR 0 8
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: MUL
63247: ST_TO_ADDR
// wait ( time ) ;
63248: LD_VAR 0 8
63252: PPUSH
63253: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63257: LD_INT 35
63259: PPUSH
63260: LD_INT 875
63262: PPUSH
63263: CALL_OW 12
63267: PPUSH
63268: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63272: LD_INT 1
63274: PPUSH
63275: LD_INT 5
63277: PPUSH
63278: CALL_OW 12
63282: PPUSH
63283: LD_VAR 0 1
63287: PPUSH
63288: LD_INT 1
63290: PPUSH
63291: CALL_OW 55
// end ;
63295: GO 63105
// end ;
63297: LD_VAR 0 5
63301: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63302: LD_INT 0
63304: PPUSH
63305: PPUSH
63306: PPUSH
63307: PPUSH
63308: PPUSH
63309: PPUSH
63310: PPUSH
63311: PPUSH
// if not turrets or not factories then
63312: LD_VAR 0 1
63316: NOT
63317: PUSH
63318: LD_VAR 0 2
63322: NOT
63323: OR
63324: IFFALSE 63328
// exit ;
63326: GO 63635
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63328: LD_ADDR_VAR 0 10
63332: PUSH
63333: LD_INT 5
63335: PUSH
63336: LD_INT 6
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: LD_INT 4
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: LD_INT 5
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 24
63370: PUSH
63371: LD_INT 25
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 23
63380: PUSH
63381: LD_INT 27
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 42
63394: PUSH
63395: LD_INT 43
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 44
63404: PUSH
63405: LD_INT 46
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 45
63414: PUSH
63415: LD_INT 47
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// result := [ ] ;
63432: LD_ADDR_VAR 0 3
63436: PUSH
63437: EMPTY
63438: ST_TO_ADDR
// for i in turrets do
63439: LD_ADDR_VAR 0 4
63443: PUSH
63444: LD_VAR 0 1
63448: PUSH
63449: FOR_IN
63450: IFFALSE 63633
// begin nat := GetNation ( i ) ;
63452: LD_ADDR_VAR 0 7
63456: PUSH
63457: LD_VAR 0 4
63461: PPUSH
63462: CALL_OW 248
63466: ST_TO_ADDR
// weapon := 0 ;
63467: LD_ADDR_VAR 0 8
63471: PUSH
63472: LD_INT 0
63474: ST_TO_ADDR
// if not nat then
63475: LD_VAR 0 7
63479: NOT
63480: IFFALSE 63484
// continue ;
63482: GO 63449
// for j in list [ nat ] do
63484: LD_ADDR_VAR 0 5
63488: PUSH
63489: LD_VAR 0 10
63493: PUSH
63494: LD_VAR 0 7
63498: ARRAY
63499: PUSH
63500: FOR_IN
63501: IFFALSE 63542
// if GetBWeapon ( i ) = j [ 1 ] then
63503: LD_VAR 0 4
63507: PPUSH
63508: CALL_OW 269
63512: PUSH
63513: LD_VAR 0 5
63517: PUSH
63518: LD_INT 1
63520: ARRAY
63521: EQUAL
63522: IFFALSE 63540
// begin weapon := j [ 2 ] ;
63524: LD_ADDR_VAR 0 8
63528: PUSH
63529: LD_VAR 0 5
63533: PUSH
63534: LD_INT 2
63536: ARRAY
63537: ST_TO_ADDR
// break ;
63538: GO 63542
// end ;
63540: GO 63500
63542: POP
63543: POP
// if not weapon then
63544: LD_VAR 0 8
63548: NOT
63549: IFFALSE 63553
// continue ;
63551: GO 63449
// for k in factories do
63553: LD_ADDR_VAR 0 6
63557: PUSH
63558: LD_VAR 0 2
63562: PUSH
63563: FOR_IN
63564: IFFALSE 63629
// begin weapons := AvailableWeaponList ( k ) ;
63566: LD_ADDR_VAR 0 9
63570: PUSH
63571: LD_VAR 0 6
63575: PPUSH
63576: CALL_OW 478
63580: ST_TO_ADDR
// if not weapons then
63581: LD_VAR 0 9
63585: NOT
63586: IFFALSE 63590
// continue ;
63588: GO 63563
// if weapon in weapons then
63590: LD_VAR 0 8
63594: PUSH
63595: LD_VAR 0 9
63599: IN
63600: IFFALSE 63627
// begin result := [ i , weapon ] ;
63602: LD_ADDR_VAR 0 3
63606: PUSH
63607: LD_VAR 0 4
63611: PUSH
63612: LD_VAR 0 8
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// exit ;
63621: POP
63622: POP
63623: POP
63624: POP
63625: GO 63635
// end ; end ;
63627: GO 63563
63629: POP
63630: POP
// end ;
63631: GO 63449
63633: POP
63634: POP
// end ;
63635: LD_VAR 0 3
63639: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63640: LD_INT 0
63642: PPUSH
// if not side or side > 8 then
63643: LD_VAR 0 3
63647: NOT
63648: PUSH
63649: LD_VAR 0 3
63653: PUSH
63654: LD_INT 8
63656: GREATER
63657: OR
63658: IFFALSE 63662
// exit ;
63660: GO 63721
// if not range then
63662: LD_VAR 0 4
63666: NOT
63667: IFFALSE 63678
// range := - 12 ;
63669: LD_ADDR_VAR 0 4
63673: PUSH
63674: LD_INT 12
63676: NEG
63677: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63678: LD_VAR 0 1
63682: PPUSH
63683: LD_VAR 0 2
63687: PPUSH
63688: LD_VAR 0 3
63692: PPUSH
63693: LD_VAR 0 4
63697: PPUSH
63698: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63702: LD_VAR 0 1
63706: PPUSH
63707: LD_VAR 0 2
63711: PPUSH
63712: LD_VAR 0 3
63716: PPUSH
63717: CALL_OW 331
// end ;
63721: LD_VAR 0 5
63725: RET
// export function Video ( mode ) ; begin
63726: LD_INT 0
63728: PPUSH
// ingame_video = mode ;
63729: LD_ADDR_OWVAR 52
63733: PUSH
63734: LD_VAR 0 1
63738: ST_TO_ADDR
// interface_hidden = mode ;
63739: LD_ADDR_OWVAR 54
63743: PUSH
63744: LD_VAR 0 1
63748: ST_TO_ADDR
// end ;
63749: LD_VAR 0 2
63753: RET
// export function Join ( array , element ) ; begin
63754: LD_INT 0
63756: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63757: LD_ADDR_VAR 0 3
63761: PUSH
63762: LD_VAR 0 1
63766: PPUSH
63767: LD_VAR 0 1
63771: PUSH
63772: LD_INT 1
63774: PLUS
63775: PPUSH
63776: LD_VAR 0 2
63780: PPUSH
63781: CALL_OW 1
63785: ST_TO_ADDR
// end ;
63786: LD_VAR 0 3
63790: RET
// export function JoinUnion ( array , element ) ; begin
63791: LD_INT 0
63793: PPUSH
// result := array union element ;
63794: LD_ADDR_VAR 0 3
63798: PUSH
63799: LD_VAR 0 1
63803: PUSH
63804: LD_VAR 0 2
63808: UNION
63809: ST_TO_ADDR
// end ;
63810: LD_VAR 0 3
63814: RET
// export function GetBehemoths ( side ) ; begin
63815: LD_INT 0
63817: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63818: LD_ADDR_VAR 0 2
63822: PUSH
63823: LD_INT 22
63825: PUSH
63826: LD_VAR 0 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 31
63837: PUSH
63838: LD_INT 25
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PPUSH
63849: CALL_OW 69
63853: ST_TO_ADDR
// end ;
63854: LD_VAR 0 2
63858: RET
// export function Shuffle ( array ) ; var i , index ; begin
63859: LD_INT 0
63861: PPUSH
63862: PPUSH
63863: PPUSH
// result := [ ] ;
63864: LD_ADDR_VAR 0 2
63868: PUSH
63869: EMPTY
63870: ST_TO_ADDR
// if not array then
63871: LD_VAR 0 1
63875: NOT
63876: IFFALSE 63880
// exit ;
63878: GO 63979
// Randomize ;
63880: CALL_OW 10
// for i = array downto 1 do
63884: LD_ADDR_VAR 0 3
63888: PUSH
63889: DOUBLE
63890: LD_VAR 0 1
63894: INC
63895: ST_TO_ADDR
63896: LD_INT 1
63898: PUSH
63899: FOR_DOWNTO
63900: IFFALSE 63977
// begin index := rand ( 1 , array ) ;
63902: LD_ADDR_VAR 0 4
63906: PUSH
63907: LD_INT 1
63909: PPUSH
63910: LD_VAR 0 1
63914: PPUSH
63915: CALL_OW 12
63919: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63920: LD_ADDR_VAR 0 2
63924: PUSH
63925: LD_VAR 0 2
63929: PPUSH
63930: LD_VAR 0 2
63934: PUSH
63935: LD_INT 1
63937: PLUS
63938: PPUSH
63939: LD_VAR 0 1
63943: PUSH
63944: LD_VAR 0 4
63948: ARRAY
63949: PPUSH
63950: CALL_OW 2
63954: ST_TO_ADDR
// array := Delete ( array , index ) ;
63955: LD_ADDR_VAR 0 1
63959: PUSH
63960: LD_VAR 0 1
63964: PPUSH
63965: LD_VAR 0 4
63969: PPUSH
63970: CALL_OW 3
63974: ST_TO_ADDR
// end ;
63975: GO 63899
63977: POP
63978: POP
// end ;
63979: LD_VAR 0 2
63983: RET
// export function GetBaseMaterials ( base ) ; begin
63984: LD_INT 0
63986: PPUSH
// result := [ 0 , 0 , 0 ] ;
63987: LD_ADDR_VAR 0 2
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: ST_TO_ADDR
// if not base then
64006: LD_VAR 0 1
64010: NOT
64011: IFFALSE 64015
// exit ;
64013: GO 64064
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64015: LD_ADDR_VAR 0 2
64019: PUSH
64020: LD_VAR 0 1
64024: PPUSH
64025: LD_INT 1
64027: PPUSH
64028: CALL_OW 275
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_INT 2
64040: PPUSH
64041: CALL_OW 275
64045: PUSH
64046: LD_VAR 0 1
64050: PPUSH
64051: LD_INT 3
64053: PPUSH
64054: CALL_OW 275
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: ST_TO_ADDR
// end ;
64064: LD_VAR 0 2
64068: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64069: LD_INT 0
64071: PPUSH
64072: PPUSH
// result := array ;
64073: LD_ADDR_VAR 0 3
64077: PUSH
64078: LD_VAR 0 1
64082: ST_TO_ADDR
// if size > 0 then
64083: LD_VAR 0 2
64087: PUSH
64088: LD_INT 0
64090: GREATER
64091: IFFALSE 64137
// for i := array downto size do
64093: LD_ADDR_VAR 0 4
64097: PUSH
64098: DOUBLE
64099: LD_VAR 0 1
64103: INC
64104: ST_TO_ADDR
64105: LD_VAR 0 2
64109: PUSH
64110: FOR_DOWNTO
64111: IFFALSE 64135
// result := Delete ( result , result ) ;
64113: LD_ADDR_VAR 0 3
64117: PUSH
64118: LD_VAR 0 3
64122: PPUSH
64123: LD_VAR 0 3
64127: PPUSH
64128: CALL_OW 3
64132: ST_TO_ADDR
64133: GO 64110
64135: POP
64136: POP
// end ;
64137: LD_VAR 0 3
64141: RET
// export function ComExit ( unit ) ; var tmp ; begin
64142: LD_INT 0
64144: PPUSH
64145: PPUSH
// if not IsInUnit ( unit ) then
64146: LD_VAR 0 1
64150: PPUSH
64151: CALL_OW 310
64155: NOT
64156: IFFALSE 64160
// exit ;
64158: GO 64220
// tmp := IsInUnit ( unit ) ;
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: LD_VAR 0 1
64169: PPUSH
64170: CALL_OW 310
64174: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64175: LD_VAR 0 3
64179: PPUSH
64180: CALL_OW 247
64184: PUSH
64185: LD_INT 2
64187: EQUAL
64188: IFFALSE 64201
// ComExitVehicle ( unit ) else
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 121
64199: GO 64210
// ComExitBuilding ( unit ) ;
64201: LD_VAR 0 1
64205: PPUSH
64206: CALL_OW 122
// result := tmp ;
64210: LD_ADDR_VAR 0 2
64214: PUSH
64215: LD_VAR 0 3
64219: ST_TO_ADDR
// end ;
64220: LD_VAR 0 2
64224: RET
// export function ComExitAll ( units ) ; var i ; begin
64225: LD_INT 0
64227: PPUSH
64228: PPUSH
// if not units then
64229: LD_VAR 0 1
64233: NOT
64234: IFFALSE 64238
// exit ;
64236: GO 64264
// for i in units do
64238: LD_ADDR_VAR 0 3
64242: PUSH
64243: LD_VAR 0 1
64247: PUSH
64248: FOR_IN
64249: IFFALSE 64262
// ComExit ( i ) ;
64251: LD_VAR 0 3
64255: PPUSH
64256: CALL 64142 0 1
64260: GO 64248
64262: POP
64263: POP
// end ;
64264: LD_VAR 0 2
64268: RET
// export function ResetHc ; begin
64269: LD_INT 0
64271: PPUSH
// InitHc ;
64272: CALL_OW 19
// hc_importance := 0 ;
64276: LD_ADDR_OWVAR 32
64280: PUSH
64281: LD_INT 0
64283: ST_TO_ADDR
// end ;
64284: LD_VAR 0 1
64288: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64289: LD_INT 0
64291: PPUSH
64292: PPUSH
64293: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64294: LD_ADDR_VAR 0 6
64298: PUSH
64299: LD_VAR 0 1
64303: PUSH
64304: LD_VAR 0 3
64308: PLUS
64309: PUSH
64310: LD_INT 2
64312: DIV
64313: ST_TO_ADDR
// if _x < 0 then
64314: LD_VAR 0 6
64318: PUSH
64319: LD_INT 0
64321: LESS
64322: IFFALSE 64339
// _x := _x * - 1 ;
64324: LD_ADDR_VAR 0 6
64328: PUSH
64329: LD_VAR 0 6
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: MUL
64338: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64339: LD_ADDR_VAR 0 7
64343: PUSH
64344: LD_VAR 0 2
64348: PUSH
64349: LD_VAR 0 4
64353: PLUS
64354: PUSH
64355: LD_INT 2
64357: DIV
64358: ST_TO_ADDR
// if _y < 0 then
64359: LD_VAR 0 7
64363: PUSH
64364: LD_INT 0
64366: LESS
64367: IFFALSE 64384
// _y := _y * - 1 ;
64369: LD_ADDR_VAR 0 7
64373: PUSH
64374: LD_VAR 0 7
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: MUL
64383: ST_TO_ADDR
// result := [ _x , _y ] ;
64384: LD_ADDR_VAR 0 5
64388: PUSH
64389: LD_VAR 0 6
64393: PUSH
64394: LD_VAR 0 7
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: ST_TO_ADDR
// end ;
64403: LD_VAR 0 5
64407: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64408: LD_INT 0
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
// task := GetTaskList ( unit ) ;
64414: LD_ADDR_VAR 0 7
64418: PUSH
64419: LD_VAR 0 1
64423: PPUSH
64424: CALL_OW 437
64428: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64429: LD_VAR 0 7
64433: NOT
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: LD_VAR 0 2
64444: PPUSH
64445: CALL_OW 308
64449: NOT
64450: AND
64451: IFFALSE 64455
// exit ;
64453: GO 64573
// if IsInArea ( unit , area ) then
64455: LD_VAR 0 1
64459: PPUSH
64460: LD_VAR 0 2
64464: PPUSH
64465: CALL_OW 308
64469: IFFALSE 64487
// begin ComMoveToArea ( unit , goAway ) ;
64471: LD_VAR 0 1
64475: PPUSH
64476: LD_VAR 0 3
64480: PPUSH
64481: CALL_OW 113
// exit ;
64485: GO 64573
// end ; if task [ 1 ] [ 1 ] <> M then
64487: LD_VAR 0 7
64491: PUSH
64492: LD_INT 1
64494: ARRAY
64495: PUSH
64496: LD_INT 1
64498: ARRAY
64499: PUSH
64500: LD_STRING M
64502: NONEQUAL
64503: IFFALSE 64507
// exit ;
64505: GO 64573
// x := task [ 1 ] [ 2 ] ;
64507: LD_ADDR_VAR 0 5
64511: PUSH
64512: LD_VAR 0 7
64516: PUSH
64517: LD_INT 1
64519: ARRAY
64520: PUSH
64521: LD_INT 2
64523: ARRAY
64524: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64525: LD_ADDR_VAR 0 6
64529: PUSH
64530: LD_VAR 0 7
64534: PUSH
64535: LD_INT 1
64537: ARRAY
64538: PUSH
64539: LD_INT 3
64541: ARRAY
64542: ST_TO_ADDR
// if InArea ( x , y , area ) then
64543: LD_VAR 0 5
64547: PPUSH
64548: LD_VAR 0 6
64552: PPUSH
64553: LD_VAR 0 2
64557: PPUSH
64558: CALL_OW 309
64562: IFFALSE 64573
// ComStop ( unit ) ;
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 141
// end ;
64573: LD_VAR 0 4
64577: RET
// export function Abs ( value ) ; begin
64578: LD_INT 0
64580: PPUSH
// result := value ;
64581: LD_ADDR_VAR 0 2
64585: PUSH
64586: LD_VAR 0 1
64590: ST_TO_ADDR
// if value < 0 then
64591: LD_VAR 0 1
64595: PUSH
64596: LD_INT 0
64598: LESS
64599: IFFALSE 64616
// result := value * - 1 ;
64601: LD_ADDR_VAR 0 2
64605: PUSH
64606: LD_VAR 0 1
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: MUL
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 2
64620: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64621: LD_INT 0
64623: PPUSH
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
64630: PPUSH
// if not unit or not building then
64631: LD_VAR 0 1
64635: NOT
64636: PUSH
64637: LD_VAR 0 2
64641: NOT
64642: OR
64643: IFFALSE 64647
// exit ;
64645: GO 64873
// x := GetX ( building ) ;
64647: LD_ADDR_VAR 0 4
64651: PUSH
64652: LD_VAR 0 2
64656: PPUSH
64657: CALL_OW 250
64661: ST_TO_ADDR
// y := GetY ( building ) ;
64662: LD_ADDR_VAR 0 6
64666: PUSH
64667: LD_VAR 0 2
64671: PPUSH
64672: CALL_OW 251
64676: ST_TO_ADDR
// d := GetDir ( building ) ;
64677: LD_ADDR_VAR 0 8
64681: PUSH
64682: LD_VAR 0 2
64686: PPUSH
64687: CALL_OW 254
64691: ST_TO_ADDR
// r := 4 ;
64692: LD_ADDR_VAR 0 9
64696: PUSH
64697: LD_INT 4
64699: ST_TO_ADDR
// for i := 1 to 5 do
64700: LD_ADDR_VAR 0 10
64704: PUSH
64705: DOUBLE
64706: LD_INT 1
64708: DEC
64709: ST_TO_ADDR
64710: LD_INT 5
64712: PUSH
64713: FOR_TO
64714: IFFALSE 64871
// begin _x := ShiftX ( x , d , r + i ) ;
64716: LD_ADDR_VAR 0 5
64720: PUSH
64721: LD_VAR 0 4
64725: PPUSH
64726: LD_VAR 0 8
64730: PPUSH
64731: LD_VAR 0 9
64735: PUSH
64736: LD_VAR 0 10
64740: PLUS
64741: PPUSH
64742: CALL_OW 272
64746: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64747: LD_ADDR_VAR 0 7
64751: PUSH
64752: LD_VAR 0 6
64756: PPUSH
64757: LD_VAR 0 8
64761: PPUSH
64762: LD_VAR 0 9
64766: PUSH
64767: LD_VAR 0 10
64771: PLUS
64772: PPUSH
64773: CALL_OW 273
64777: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64778: LD_VAR 0 5
64782: PPUSH
64783: LD_VAR 0 7
64787: PPUSH
64788: CALL_OW 488
64792: PUSH
64793: LD_VAR 0 5
64797: PPUSH
64798: LD_VAR 0 7
64802: PPUSH
64803: CALL_OW 428
64807: PPUSH
64808: CALL_OW 247
64812: PUSH
64813: LD_INT 3
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: IN
64823: NOT
64824: AND
64825: IFFALSE 64869
// begin ComMoveXY ( unit , _x , _y ) ;
64827: LD_VAR 0 1
64831: PPUSH
64832: LD_VAR 0 5
64836: PPUSH
64837: LD_VAR 0 7
64841: PPUSH
64842: CALL_OW 111
// result := [ _x , _y ] ;
64846: LD_ADDR_VAR 0 3
64850: PUSH
64851: LD_VAR 0 5
64855: PUSH
64856: LD_VAR 0 7
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: ST_TO_ADDR
// exit ;
64865: POP
64866: POP
64867: GO 64873
// end ; end ;
64869: GO 64713
64871: POP
64872: POP
// end ;
64873: LD_VAR 0 3
64877: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64878: LD_INT 0
64880: PPUSH
64881: PPUSH
64882: PPUSH
// result := 0 ;
64883: LD_ADDR_VAR 0 3
64887: PUSH
64888: LD_INT 0
64890: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64891: LD_VAR 0 1
64895: PUSH
64896: LD_INT 0
64898: LESS
64899: PUSH
64900: LD_VAR 0 1
64904: PUSH
64905: LD_INT 8
64907: GREATER
64908: OR
64909: PUSH
64910: LD_VAR 0 2
64914: PUSH
64915: LD_INT 0
64917: LESS
64918: OR
64919: PUSH
64920: LD_VAR 0 2
64924: PUSH
64925: LD_INT 8
64927: GREATER
64928: OR
64929: IFFALSE 64933
// exit ;
64931: GO 65008
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64933: LD_ADDR_VAR 0 4
64937: PUSH
64938: LD_INT 22
64940: PUSH
64941: LD_VAR 0 2
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PPUSH
64950: CALL_OW 69
64954: PUSH
64955: FOR_IN
64956: IFFALSE 65006
// begin un := UnitShoot ( i ) ;
64958: LD_ADDR_VAR 0 5
64962: PUSH
64963: LD_VAR 0 4
64967: PPUSH
64968: CALL_OW 504
64972: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64973: LD_VAR 0 5
64977: PPUSH
64978: CALL_OW 255
64982: PUSH
64983: LD_VAR 0 1
64987: EQUAL
64988: IFFALSE 65004
// begin result := un ;
64990: LD_ADDR_VAR 0 3
64994: PUSH
64995: LD_VAR 0 5
64999: ST_TO_ADDR
// exit ;
65000: POP
65001: POP
65002: GO 65008
// end ; end ;
65004: GO 64955
65006: POP
65007: POP
// end ;
65008: LD_VAR 0 3
65012: RET
// export function GetCargoBay ( units ) ; begin
65013: LD_INT 0
65015: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65016: LD_ADDR_VAR 0 2
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 34
65031: PUSH
65032: LD_INT 12
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 34
65041: PUSH
65042: LD_INT 51
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 34
65051: PUSH
65052: LD_INT 32
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 34
65061: PUSH
65062: LD_EXP 111
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: PPUSH
65078: CALL_OW 72
65082: ST_TO_ADDR
// end ;
65083: LD_VAR 0 2
65087: RET
// export function Negate ( value ) ; begin
65088: LD_INT 0
65090: PPUSH
// result := not value ;
65091: LD_ADDR_VAR 0 2
65095: PUSH
65096: LD_VAR 0 1
65100: NOT
65101: ST_TO_ADDR
// end ;
65102: LD_VAR 0 2
65106: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65107: LD_INT 0
65109: PPUSH
// if x1 = x2 then
65110: LD_VAR 0 1
65114: PUSH
65115: LD_VAR 0 3
65119: EQUAL
65120: IFFALSE 65154
// begin if y1 > y2 then
65122: LD_VAR 0 2
65126: PUSH
65127: LD_VAR 0 4
65131: GREATER
65132: IFFALSE 65144
// result := 0 else
65134: LD_ADDR_VAR 0 5
65138: PUSH
65139: LD_INT 0
65141: ST_TO_ADDR
65142: GO 65152
// result := 3 ;
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: LD_INT 3
65151: ST_TO_ADDR
// exit ;
65152: GO 65240
// end ; if y1 = y2 then
65154: LD_VAR 0 2
65158: PUSH
65159: LD_VAR 0 4
65163: EQUAL
65164: IFFALSE 65198
// begin if x1 > x2 then
65166: LD_VAR 0 1
65170: PUSH
65171: LD_VAR 0 3
65175: GREATER
65176: IFFALSE 65188
// result := 1 else
65178: LD_ADDR_VAR 0 5
65182: PUSH
65183: LD_INT 1
65185: ST_TO_ADDR
65186: GO 65196
// result := 4 ;
65188: LD_ADDR_VAR 0 5
65192: PUSH
65193: LD_INT 4
65195: ST_TO_ADDR
// exit ;
65196: GO 65240
// end ; if x1 > x2 and y1 > y2 then
65198: LD_VAR 0 1
65202: PUSH
65203: LD_VAR 0 3
65207: GREATER
65208: PUSH
65209: LD_VAR 0 2
65213: PUSH
65214: LD_VAR 0 4
65218: GREATER
65219: AND
65220: IFFALSE 65232
// result := 2 else
65222: LD_ADDR_VAR 0 5
65226: PUSH
65227: LD_INT 2
65229: ST_TO_ADDR
65230: GO 65240
// result := 5 ;
65232: LD_ADDR_VAR 0 5
65236: PUSH
65237: LD_INT 5
65239: ST_TO_ADDR
// end ;
65240: LD_VAR 0 5
65244: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65245: LD_INT 0
65247: PPUSH
65248: PPUSH
// if not driver or not IsInUnit ( driver ) then
65249: LD_VAR 0 1
65253: NOT
65254: PUSH
65255: LD_VAR 0 1
65259: PPUSH
65260: CALL_OW 310
65264: NOT
65265: OR
65266: IFFALSE 65270
// exit ;
65268: GO 65360
// vehicle := IsInUnit ( driver ) ;
65270: LD_ADDR_VAR 0 3
65274: PUSH
65275: LD_VAR 0 1
65279: PPUSH
65280: CALL_OW 310
65284: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65285: LD_VAR 0 1
65289: PPUSH
65290: LD_STRING \
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: PUSH
65320: LD_STRING E
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_VAR 0 3
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PPUSH
65356: CALL_OW 446
// end ;
65360: LD_VAR 0 2
65364: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65365: LD_INT 0
65367: PPUSH
65368: PPUSH
// if not driver or not IsInUnit ( driver ) then
65369: LD_VAR 0 1
65373: NOT
65374: PUSH
65375: LD_VAR 0 1
65379: PPUSH
65380: CALL_OW 310
65384: NOT
65385: OR
65386: IFFALSE 65390
// exit ;
65388: GO 65480
// vehicle := IsInUnit ( driver ) ;
65390: LD_ADDR_VAR 0 3
65394: PUSH
65395: LD_VAR 0 1
65399: PPUSH
65400: CALL_OW 310
65404: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65405: LD_VAR 0 1
65409: PPUSH
65410: LD_STRING \
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: PUSH
65440: LD_STRING E
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_VAR 0 3
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PPUSH
65476: CALL_OW 447
// end ;
65480: LD_VAR 0 2
65484: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65485: LD_INT 0
65487: PPUSH
65488: PPUSH
65489: PPUSH
// tmp := [ ] ;
65490: LD_ADDR_VAR 0 5
65494: PUSH
65495: EMPTY
65496: ST_TO_ADDR
// for i in units do
65497: LD_ADDR_VAR 0 4
65501: PUSH
65502: LD_VAR 0 1
65506: PUSH
65507: FOR_IN
65508: IFFALSE 65546
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65510: LD_ADDR_VAR 0 5
65514: PUSH
65515: LD_VAR 0 5
65519: PPUSH
65520: LD_VAR 0 5
65524: PUSH
65525: LD_INT 1
65527: PLUS
65528: PPUSH
65529: LD_VAR 0 4
65533: PPUSH
65534: CALL_OW 256
65538: PPUSH
65539: CALL_OW 2
65543: ST_TO_ADDR
65544: GO 65507
65546: POP
65547: POP
// if not tmp then
65548: LD_VAR 0 5
65552: NOT
65553: IFFALSE 65557
// exit ;
65555: GO 65605
// if asc then
65557: LD_VAR 0 2
65561: IFFALSE 65585
// result := SortListByListAsc ( units , tmp ) else
65563: LD_ADDR_VAR 0 3
65567: PUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: LD_VAR 0 5
65577: PPUSH
65578: CALL_OW 76
65582: ST_TO_ADDR
65583: GO 65605
// result := SortListByListDesc ( units , tmp ) ;
65585: LD_ADDR_VAR 0 3
65589: PUSH
65590: LD_VAR 0 1
65594: PPUSH
65595: LD_VAR 0 5
65599: PPUSH
65600: CALL_OW 77
65604: ST_TO_ADDR
// end ;
65605: LD_VAR 0 3
65609: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65610: LD_INT 0
65612: PPUSH
65613: PPUSH
// task := GetTaskList ( mech ) ;
65614: LD_ADDR_VAR 0 4
65618: PUSH
65619: LD_VAR 0 1
65623: PPUSH
65624: CALL_OW 437
65628: ST_TO_ADDR
// if not task then
65629: LD_VAR 0 4
65633: NOT
65634: IFFALSE 65638
// exit ;
65636: GO 65680
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65638: LD_ADDR_VAR 0 3
65642: PUSH
65643: LD_VAR 0 4
65647: PUSH
65648: LD_INT 1
65650: ARRAY
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PUSH
65656: LD_STRING r
65658: EQUAL
65659: PUSH
65660: LD_VAR 0 4
65664: PUSH
65665: LD_INT 1
65667: ARRAY
65668: PUSH
65669: LD_INT 4
65671: ARRAY
65672: PUSH
65673: LD_VAR 0 2
65677: EQUAL
65678: AND
65679: ST_TO_ADDR
// end ;
65680: LD_VAR 0 3
65684: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65685: LD_INT 0
65687: PPUSH
// SetDir ( unit , d ) ;
65688: LD_VAR 0 1
65692: PPUSH
65693: LD_VAR 0 4
65697: PPUSH
65698: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65702: LD_VAR 0 1
65706: PPUSH
65707: LD_VAR 0 2
65711: PPUSH
65712: LD_VAR 0 3
65716: PPUSH
65717: LD_VAR 0 5
65721: PPUSH
65722: CALL_OW 48
// end ;
65726: LD_VAR 0 6
65730: RET
// export function ToNaturalNumber ( number ) ; begin
65731: LD_INT 0
65733: PPUSH
// result := number div 1 ;
65734: LD_ADDR_VAR 0 2
65738: PUSH
65739: LD_VAR 0 1
65743: PUSH
65744: LD_INT 1
65746: DIV
65747: ST_TO_ADDR
// if number < 0 then
65748: LD_VAR 0 1
65752: PUSH
65753: LD_INT 0
65755: LESS
65756: IFFALSE 65766
// result := 0 ;
65758: LD_ADDR_VAR 0 2
65762: PUSH
65763: LD_INT 0
65765: ST_TO_ADDR
// end ; end_of_file
65766: LD_VAR 0 2
65770: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
65771: LD_INT 0
65773: PPUSH
// ar_miner := 81 ;
65774: LD_ADDR_EXP 117
65778: PUSH
65779: LD_INT 81
65781: ST_TO_ADDR
// ar_crane := 88 ;
65782: LD_ADDR_EXP 116
65786: PUSH
65787: LD_INT 88
65789: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
65790: LD_ADDR_EXP 111
65794: PUSH
65795: LD_INT 89
65797: ST_TO_ADDR
// us_hack := 99 ;
65798: LD_ADDR_EXP 112
65802: PUSH
65803: LD_INT 99
65805: ST_TO_ADDR
// us_artillery := 97 ;
65806: LD_ADDR_EXP 113
65810: PUSH
65811: LD_INT 97
65813: ST_TO_ADDR
// ar_bio_bomb := 91 ;
65814: LD_ADDR_EXP 114
65818: PUSH
65819: LD_INT 91
65821: ST_TO_ADDR
// ar_mortar := 92 ;
65822: LD_ADDR_EXP 115
65826: PUSH
65827: LD_INT 92
65829: ST_TO_ADDR
// ru_radar := 98 ;
65830: LD_ADDR_EXP 110
65834: PUSH
65835: LD_INT 98
65837: ST_TO_ADDR
// tech_Artillery := 80 ;
65838: LD_ADDR_EXP 118
65842: PUSH
65843: LD_INT 80
65845: ST_TO_ADDR
// tech_RadMat := 81 ;
65846: LD_ADDR_EXP 119
65850: PUSH
65851: LD_INT 81
65853: ST_TO_ADDR
// tech_BasicTools := 82 ;
65854: LD_ADDR_EXP 120
65858: PUSH
65859: LD_INT 82
65861: ST_TO_ADDR
// tech_Cargo := 83 ;
65862: LD_ADDR_EXP 121
65866: PUSH
65867: LD_INT 83
65869: ST_TO_ADDR
// tech_Track := 84 ;
65870: LD_ADDR_EXP 122
65874: PUSH
65875: LD_INT 84
65877: ST_TO_ADDR
// tech_Crane := 85 ;
65878: LD_ADDR_EXP 123
65882: PUSH
65883: LD_INT 85
65885: ST_TO_ADDR
// tech_Bulldozer := 86 ;
65886: LD_ADDR_EXP 124
65890: PUSH
65891: LD_INT 86
65893: ST_TO_ADDR
// tech_Hovercraft := 87 ;
65894: LD_ADDR_EXP 125
65898: PUSH
65899: LD_INT 87
65901: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
65902: LD_ADDR_EXP 126
65906: PUSH
65907: LD_INT 88
65909: ST_TO_ADDR
// class_mastodont := 31 ;
65910: LD_ADDR_EXP 127
65914: PUSH
65915: LD_INT 31
65917: ST_TO_ADDR
// class_horse := 21 ;
65918: LD_ADDR_EXP 128
65922: PUSH
65923: LD_INT 21
65925: ST_TO_ADDR
// end ;
65926: LD_VAR 0 1
65930: RET
// every 1 do
65931: GO 65933
65933: DISABLE
// InitGlobalVariables ; end_of_file
65934: CALL 65771 0 0
65938: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65939: LD_VAR 0 1
65943: PPUSH
65944: LD_VAR 0 2
65948: PPUSH
65949: LD_VAR 0 3
65953: PPUSH
65954: LD_VAR 0 4
65958: PPUSH
65959: LD_VAR 0 5
65963: PPUSH
65964: LD_VAR 0 6
65968: PPUSH
65969: CALL 9666 0 6
// end ;
65973: PPOPN 6
65975: END
